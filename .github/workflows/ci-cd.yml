name: CI/CD Pipeline - PGBEN Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Análise de Código e Testes
  code-quality:
    name: 🔍 Code Quality & Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: pgben_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: |
        npm ci
        npm audit --audit-level=high
    
    - name: 🔍 Lint code
      run: npm run lint
    
    - name: 🎨 Check code formatting
      run: npm run format:check
    
    - name: 🏗️ Build application
      run: npm run build
    
    - name: 🧪 Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pgben_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        ENCRYPTION_KEY: test-encryption-key-32-characters
    
    - name: 🧪 Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pgben_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        ENCRYPTION_KEY: test-encryption-key-32-characters
    
    - name: 📊 Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pgben_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        ENCRYPTION_KEY: test-encryption-key-32-characters
    
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
    
    - name: 🔒 Run security audit
      run: |
        npm audit --audit-level=moderate
        npx audit-ci --moderate
    
    - name: 📋 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=pgben-server
          -Dsonar.organization=semtas
          -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
          -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts,**/test/**,**/tests/**
    
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          package.json
          package-lock.json
        retention-days: 7

  # Job 2: Análise de Segurança
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Run SAST with Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/typescript
    
    - name: 🔒 Run dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'pgben-server'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
    
    - name: 📤 Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # Job 3: Build e Push da Imagem Docker
  build-image:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    if: github.event_name != 'pull_request'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          NODE_ENV=production
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy para Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://api-staging.pgben.semtas.gov.br
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ⚙️ Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: 🔐 Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
    
    - name: 🚀 Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        cd k8s
        
        # Atualizar imagem no kustomization
        sed -i "s|newTag: latest|newTag: ${{ github.sha }}|g" kustomization.yaml
        
        # Aplicar manifests
        kubectl apply -k . -n pgben-staging
        
        # Aguardar rollout
        kubectl rollout status deployment/pgben-server -n pgben-staging --timeout=300s
    
    - name: 🧪 Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Aguardar serviço estar disponível
        kubectl wait --for=condition=ready pod -l app=pgben-server -n pgben-staging --timeout=300s
        
        # Teste de health check
        kubectl run smoke-test --image=curlimages/curl --rm -i --restart=Never -n pgben-staging -- \
          curl -f http://pgben-server-service.pgben-staging.svc.cluster.local/api/v1/health

  # Job 5: Deploy para Produção
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: https://api.pgben.semtas.gov.br
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: ⚙️ Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: 🔐 Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
    
    - name: 🚀 Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        cd k8s
        
        # Atualizar imagem no kustomization
        sed -i "s|newTag: latest|newTag: ${{ github.sha }}|g" kustomization.yaml
        
        # Aplicar manifests
        kubectl apply -k . -n pgben
        
        # Aguardar rollout
        kubectl rollout status deployment/pgben-server -n pgben --timeout=600s
    
    - name: 🧪 Run production smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Aguardar serviço estar disponível
        kubectl wait --for=condition=ready pod -l app=pgben-server -n pgben --timeout=300s
        
        # Teste de health check
        kubectl run prod-smoke-test --image=curlimages/curl --rm -i --restart=Never -n pgben -- \
          curl -f http://pgben-server-service.pgben.svc.cluster.local/api/v1/health
    
    - name: 📊 Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Production deployment successful"
        else
          echo "❌ Production deployment failed"
          exit 1
        fi

  # Job 6: Notificações
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#pgben-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: 📧 Notify Teams
      if: failure()
      uses: skitionek/notify-microsoft-teams@master
      with:
        webhook_url: ${{ secrets.TEAMS_WEBHOOK }}
        needs: ${{ toJson(needs) }}
        job: ${{ toJson(job) }}
        steps: ${{ toJson(steps) }}