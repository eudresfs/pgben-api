name: Build and Deploy

on:
  push:
    branches: ['main']

env:
  CPR_ADDR: cpr.kemosoft.com.br
  K8S_NAMESPACE: consigmais
  DEPLOYMENT_NAME: ${{ github.event.repository.name }}
  CONTAINER_PATH: cpr.kemosoft.com.br/${{ github.event.repository.name }}:${{ github.sha }}

jobs:
  build:
    runs-on: arc-runner-set
    container:
      image: gcr.io/kaniko-project/executor:v1.20.0-debug
    permissions:
      contents: read

    steps:
      - name: build and push image to cpr
        run: |
          cat <<EOF > /kaniko/.docker/config.json
          {
            "auths": {
              "$CPR_ADDR": {
                "auth": "$(echo -n "$CPR_USERNAME:$CPR_PASSWORD" | base64 -w0)"
              }
            }
          }
          EOF

          /kaniko/executor --dockerfile="/Dockerfile" \
            --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}"  \
            --destination="${{ env.CONTAINER_PATH }}" \
            ${{ env.KANIKO_CACHE_ARGS }} \
            --push-retry 5
        env:
          GIT_USERNAME: ${{ github.actor }}
          GIT_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          CPR_USERNAME: ${{ secrets.CPR_USERNAME }}
          CPR_PASSWORD: ${{ secrets.CPR_PASSWORD }}

  deploy:
    needs:
      - build
    runs-on: k8s
    steps:
      - name: patch deployment
        run: |
          if ! kubectl get deployment $DEPLOYMENT_NAME -n $K8S_NAMESPACE &>/dev/null; then
            echo "Deployment does not exist, creating..."
            kubectl create deployment $DEPLOYMENT_NAME -n $K8S_NAMESPACE --image=$CONTAINER_PATH
            
            # Adiciona o imagePullSecret logo após criar o deployment
            kubectl patch deployment $DEPLOYMENT_NAME -n $K8S_NAMESPACE -p '{"spec":{"template":{"spec":{"imagePullSecrets":[{"name":"cpr"}]}}}}'
          else
            echo "Deployment exists, updating image..."
            kubectl -n $K8S_NAMESPACE set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$CONTAINER_PATH --record
          fi
          # kubectl -n $K8S_NAMESPACE set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$CONTAINER_PATH --record
          kubectl -n $K8S_NAMESPACE rollout status deployment/$DEPLOYMENT_NAME

  deploy-kubernetes-resources:
    needs:
      - deploy
    runs-on: k8s
    steps:
      - name: Deploy Kubernetes Resources
        run: |
          set -e
          # Parâmetros da linha de comando
          NAMESPACE="consigmais"
          APP_NAME="pgben-server"
          PORT=80
          TARGET_PORT=3000  # Porta exposta no container
          DOMAIN="${APP_NAME}.kemosoft.com.br"

          echo "Configurando recursos para: $APP_NAME"
          echo "Namespace: $NAMESPACE"
          echo "Porta externa: $PORT, Porta interna: $TARGET_PORT"
          echo "Domínio: $DOMAIN"

          # Verificar se o serviço já existe
          if ! kubectl get svc ${APP_NAME}-svc -n ${NAMESPACE} &> /dev/null; then
            echo "Criando serviço ${APP_NAME}-svc..."
            cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            annotations: {}
            labels:
              app: ${APP_NAME}
            name: ${APP_NAME}-svc
            namespace: ${NAMESPACE}
          spec:
            ports:
            - name: ${APP_NAME}
              port: ${PORT}
              protocol: TCP
              targetPort: ${TARGET_PORT}  # Porta do container
            selector:
              app: ${APP_NAME}
            type: ClusterIP
          EOF
            echo "Serviço ${APP_NAME}-svc criado com sucesso!"
          else
            echo "Serviço ${APP_NAME}-svc já existe. Pulando criação."
          fi

          # Verificar se o ingress já existe
          if ! kubectl get ingress ${APP_NAME}-ingress -n ${NAMESPACE} &> /dev/null; then
            echo "Criando ingress ${APP_NAME}-ingress..."
            cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            annotations:
              cert-manager.io/issuer: letsencrypt-prod
              nginx.ingress.kubernetes.io/add-headers: |
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' '*';
                add_header 'Access-Control-Allow-Headers' '*';
              nginx.ingress.kubernetes.io/backend-protocol: HTTP
              nginx.ingress.kubernetes.io/proxy-body-size: 100M
            name: ${APP_NAME}-ingress
            namespace: ${NAMESPACE}
          spec:
            ingressClassName: nginx
            rules:
            - host: ${DOMAIN}
              http:
                paths:
                - backend:
                    service:
                      name: ${APP_NAME}-svc
                      port:
                        number: ${PORT}  # Esta é a porta do serviço
                  path: /
                  pathType: Prefix
            tls:
            - hosts:
              - ${DOMAIN}
              secretName: wildcard-cert
          EOF
            echo "Ingress ${APP_NAME}-ingress criado com sucesso!"
            echo ""
            echo "============================================================"
            echo "ATENÇÃO: CONFIGURAÇÃO DE DNS NECESSÁRIA"
            echo "============================================================"
            echo ""
          else
            echo "Ingress ${APP_NAME}-ingress já existe. Pulando criação."
          fi
          echo "Configuração concluída!"
