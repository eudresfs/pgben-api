# Script de configura√ß√£o completa do ambiente Docker para PGBen
# Este script automatiza o processo de configura√ß√£o do ambiente Docker
# para o sistema PGBen, garantindo que todas as depend√™ncias estejam
# corretamente configuradas e dispon√≠veis.

# Definir codifica√ß√£o para UTF-8
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

Write-Host "üöÄ Iniciando configura√ß√£o do ambiente Docker para PGBen..." -ForegroundColor Cyan

# 1. Verificar Docker e Docker Compose
Write-Host "`nüìã Verificando Docker e Docker Compose..." -ForegroundColor Yellow
try {
    $dockerVersion = docker --version
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ $dockerVersion" -ForegroundColor Green
    Write-Host "‚úÖ $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker ou Docker Compose n√£o est√£o instalados ou acess√≠veis!" -ForegroundColor Red
    exit 1
}

# 2. Remover todos os cont√™ineres e volumes existentes (opcional, com confirma√ß√£o)
$removerAntigos = Read-Host "üîÑ Deseja remover cont√™ineres e volumes existentes? (s/N)"
if ($removerAntigos -eq "s" -or $removerAntigos -eq "S") {
    Write-Host "`nüßπ Removendo cont√™ineres existentes..." -ForegroundColor Yellow
    docker-compose down -v
    
    # Verificar se h√° dados importantes para backup antes de remover volumes
    $fazerBackup = Read-Host "üì¶ Deseja fazer backup dos dados antes de remover volumes? (S/n)"
    if ($fazerBackup -ne "n" -and $fazerBackup -ne "N") {
        $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
        $backupDir = "backups_$timestamp"
        
        # Criar diret√≥rio de backup
        if (-not (Test-Path $backupDir)) {
            New-Item -Path $backupDir -ItemType Directory | Out-Null
        }
        
        Write-Host "üìÇ Realizando backups em $backupDir..." -ForegroundColor Cyan
        
        # Tentar fazer backup do PostgreSQL se estiver rodando
        try {
            Write-Host "üîÑ Tentando backup do PostgreSQL..." -ForegroundColor Yellow
            docker-compose exec -T postgres pg_dump -U postgres pgben > "$backupDir/pgben_db_$timestamp.sql"
            Write-Host "‚úÖ Backup do PostgreSQL realizado com sucesso!" -ForegroundColor Green
        } catch {
            Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel fazer backup do PostgreSQL. Cont√™iner pode n√£o estar em execu√ß√£o." -ForegroundColor Yellow
        }
    }
    
    # Remover volumes
    Write-Host "üóëÔ∏è Removendo volumes..." -ForegroundColor Yellow
    docker volume rm pgben_postgres_data pgben_redis_data pgben_minio_data 2>$null
    Write-Host "‚úÖ Volumes removidos!" -ForegroundColor Green
}

# 3. Baixar imagens necess√°rias
Write-Host "`nüì• Baixando imagens Docker necess√°rias..." -ForegroundColor Yellow
$requiredImages = @(
    "postgres:14-alpine",
    "redis:alpine",
    "minio/minio",
    "minio/mc",
    "mailhog/mailhog"
)

foreach ($image in $requiredImages) {
    Write-Host "üîÑ Baixando $image..." -ForegroundColor Cyan
    docker pull $image
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è Erro ao baixar $image. Verifique sua conex√£o com a internet." -ForegroundColor Red
        Write-Host "‚ö†Ô∏è Tentando continuar com o resto do setup..." -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Imagem $image baixada com sucesso!" -ForegroundColor Green
    }
}

# 4. Verificar rede Docker
Write-Host "`nüîÑ Verificando rede Docker..." -ForegroundColor Yellow
$networkExists = docker network ls | Select-String -Pattern "pgben_network" -Quiet
if (-not $networkExists) {
    Write-Host "üîÑ Criando rede pgben_network..." -ForegroundColor Cyan
    docker network create pgben_network
    Write-Host "‚úÖ Rede criada com sucesso!" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Rede pgben_network j√° existe!" -ForegroundColor Green
}

# 5. Verificar arquivo .env
Write-Host "`nüìã Verificando arquivo .env..." -ForegroundColor Yellow
if (Test-Path -Path ".env") {
    Write-Host "‚úÖ Arquivo .env encontrado!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Arquivo .env n√£o encontrado. Ser√£o usados valores padr√£o!" -ForegroundColor Yellow
    
    $criarEnv = Read-Host "üîÑ Deseja criar um arquivo .env com configura√ß√µes b√°sicas? (S/n)"
    if ($criarEnv -ne "n" -and $criarEnv -ne "N") {
        # Criar arquivo .env b√°sico
        Write-Host "üîÑ Criando arquivo .env b√°sico..." -ForegroundColor Cyan
        $envContent = @"
# Configura√ß√µes do Banco de Dados
DB_HOST=localhost
DB_PORT=5432
DB_USER=postgres
DB_PASS=postgres
DB_NAME=pgben
DB_POOL_SIZE=10
DB_SSL=false

# Configura√ß√µes JWT
JWT_SECRET=chave_secreta_jwt_desenvolvimento_apenas
JWT_REFRESH_SECRET=chave_secreta_refresh_desenvolvimento_apenas
JWT_ACCESS_TOKEN_EXPIRES_IN=1h
JWT_REFRESH_TOKEN_EXPIRES_IN=7d

# Configura√ß√µes de Email
EMAIL_HOST=localhost
EMAIL_PORT=1025
EMAIL_USER=user
EMAIL_PASSWORD=password
EMAIL_FROM=noreply@semtas.gov.br

# Configura√ß√µes MinIO
MINIO_ENDPOINT=localhost
MINIO_PORT=9000
MINIO_ACCESS_KEY=minioadmin
MINIO_SECRET_KEY=minioadmin
MINIO_BUCKET=documents

# Configura√ß√µes da Aplica√ß√£o
APP_PORT=3000
API_PREFIX=/api
NODE_ENV=development
APP_NAME=pgben
FRONTEND_URL=http://localhost:4200

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# Configura√ß√µes de Servi√ßos
DISABLE_REDIS=false
ENABLE_SWAGGER=true

# Configura√ß√µes de Seguran√ßa
DEFAULT_ADMIN_USER_PASSWORD=PGBen@2025
"@
        $envContent | Out-File -FilePath ".env" -Encoding utf8
        Write-Host "‚úÖ Arquivo .env criado com sucesso!" -ForegroundColor Green
    }
}

# 6. Verificar Dockerfile
Write-Host "`nüìã Verificando Dockerfile..." -ForegroundColor Yellow
if (Test-Path -Path "Dockerfile") {
    Write-Host "‚úÖ Dockerfile encontrado!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Dockerfile n√£o encontrado! O build da aplica√ß√£o pode falhar." -ForegroundColor Red
    exit 1
}

# 7. Verificar se o arquivo docker-entrypoint.sh est√° com permiss√µes de execu√ß√£o
Write-Host "`nüìã Verificando docker-entrypoint.sh..." -ForegroundColor Yellow
if (Test-Path -Path "docker-entrypoint.sh") {
    Write-Host "‚úÖ docker-entrypoint.sh encontrado!" -ForegroundColor Green
    # No Windows n√£o √© poss√≠vel verificar as permiss√µes de execu√ß√£o diretamente
    Write-Host "‚ö†Ô∏è N√£o √© poss√≠vel verificar permiss√µes de execu√ß√£o no Windows. O Docker ir√° lidar com isso durante o build." -ForegroundColor Yellow
} else {
    Write-Host "‚ùå docker-entrypoint.sh n√£o encontrado! A aplica√ß√£o n√£o iniciar√° corretamente." -ForegroundColor Red
    exit 1
}

# 8. Construir e iniciar os servi√ßos
Write-Host "`nüèóÔ∏è Pronto para construir e iniciar os servi√ßos..." -ForegroundColor Cyan
$iniciarServicos = Read-Host "üîÑ Deseja construir e iniciar os servi√ßos agora? (S/n)"
if ($iniciarServicos -ne "n" -and $iniciarServicos -ne "N") {
    # Construir imagens
    Write-Host "`nüèóÔ∏è Construindo imagens Docker..." -ForegroundColor Yellow
    docker-compose build --no-cache
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Falha na constru√ß√£o das imagens!" -ForegroundColor Red
        exit 1
    }
    
    # Iniciar servi√ßos
    Write-Host "`nüöÄ Iniciando servi√ßos..." -ForegroundColor Yellow
    
    # Iniciar primeiro apenas os servi√ßos de infraestrutura
    Write-Host "üîÑ Iniciando servi√ßos de infraestrutura (postgres, redis, minio)..." -ForegroundColor Cyan
    docker-compose up -d postgres redis minio
    
    # Aguardar que os servi√ßos estejam prontos
    Write-Host "‚è≥ Aguardando servi√ßos estarem prontos..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    
    # Iniciar o resto dos servi√ßos
    Write-Host "üîÑ Iniciando servi√ßos restantes..." -ForegroundColor Cyan
    docker-compose up -d
    
    # Verificar status dos servi√ßos
    Write-Host "`nüìä Status dos servi√ßos:" -ForegroundColor Yellow
    docker-compose ps
    
    # Exibir instru√ß√µes para verificar logs
    Write-Host "`nüìã Para verificar logs da aplica√ß√£o, execute:" -ForegroundColor Cyan
    Write-Host "docker-compose logs -f api" -ForegroundColor White
    
    # Exibir URL da aplica√ß√£o
    Write-Host "`nüåê Aplica√ß√£o dispon√≠vel em:" -ForegroundColor Cyan
    Write-Host "http://localhost:3000/api/v1" -ForegroundColor White
    
    # Exibir URL do Swagger (se habilitado)
    Write-Host "`nüìö Documenta√ß√£o Swagger dispon√≠vel em:" -ForegroundColor Cyan
    Write-Host "http://localhost:3000/api/v1/docs" -ForegroundColor White
    
    # Exibir URL do MinIO Console
    Write-Host "`nüíæ Console do MinIO dispon√≠vel em:" -ForegroundColor Cyan
    Write-Host "http://localhost:9001" -ForegroundColor White
    Write-Host "   Usu√°rio: minioadmin" -ForegroundColor White
    Write-Host "   Senha: minioadmin" -ForegroundColor White
    
    # Exibir URL do MailHog
    Write-Host "`nüìß Interface do MailHog dispon√≠vel em:" -ForegroundColor Cyan
    Write-Host "http://localhost:8025" -ForegroundColor White
}

Write-Host "`n‚úÖ Configura√ß√£o do ambiente Docker para PGBen conclu√≠da!" -ForegroundColor Green
Write-Host "üõ†Ô∏è Para gerenciar os servi√ßos, use os comandos docker-compose:" -ForegroundColor Cyan
Write-Host "   - Iniciar: docker-compose up -d" -ForegroundColor White
Write-Host "   - Parar: docker-compose down" -ForegroundColor White
Write-Host "   - Logs: docker-compose logs -f [servi√ßo]" -ForegroundColor White
Write-Host "   - Status: docker-compose ps" -ForegroundColor White
