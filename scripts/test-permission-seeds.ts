#!/usr/bin/env ts-node

/**
 * Script de teste para validar as seeds de permiss√£o
 * 
 * Este script verifica se todas as seeds de permiss√£o foram criadas corretamente
 * e podem ser executadas sem erros de sintaxe ou importa√ß√£o.
 */

import { DataSource } from 'typeorm';
import { config } from 'dotenv';
import { join } from 'path';

// Carregar vari√°veis de ambiente
config({ path: join(__dirname, '..', '.env') });

// Importar todas as seeds de permiss√£o para verificar se n√£o h√° erros de sintaxe
import { PermissionSeeder } from '../src/database/seeds/core/permission.seed';
import { PermissionNotificacaoSeed } from '../src/database/seeds/core/permission-notificacao.seed';
import { PermissionMetricasSeed } from '../src/database/seeds/core/permission-metricas.seed';
import { PermissionIntegradorSeed } from '../src/database/seeds/core/permission-integrador.seed';
import { PermissionJudicialSeed } from '../src/database/seeds/core/permission-judicial.seed';
import { PermissionOcorrenciaSeed } from '../src/database/seeds/core/permission-ocorrencia.seed';
import { PermissionPagamentoSeed } from '../src/database/seeds/core/permission-pagamento.seed';
import { PermissionRecursoSeed } from '../src/database/seeds/core/permission-recurso.seed';
import { PermissionRelatoriosUnificadoSeed } from '../src/database/seeds/core/permission-relatorios-unificado.seed';
import { PermissionRoleMappingSeed } from '../src/database/seeds/core/permission-role-mapping.seed';

/**
 * Lista de todas as seeds de permiss√£o para teste
 */
const PermissionSeeders = [
  { name: 'PermissionNotificacaoSeed', seed: PermissionNotificacaoSeed },
  { name: 'PermissionMetricasSeed', seed: PermissionMetricasSeed },
  { name: 'PermissionIntegradorSeed', seed: PermissionIntegradorSeed },
  { name: 'PermissionJudicialSeed', seed: PermissionJudicialSeed },
  { name: 'PermissionOcorrenciaSeed', seed: PermissionOcorrenciaSeed },
  { name: 'PermissionPagamentoSeed', seed: PermissionPagamentoSeed },
  { name: 'PermissionRecursoSeed', seed: PermissionRecursoSeed },
  { name: 'PermissionRelatoriosUnificadoSeed', seed: PermissionRelatoriosUnificadoSeed },
];

/**
 * Configura√ß√£o do banco de dados para teste
 */
const testDataSource = new DataSource({
  type: 'postgres',
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432'),
  username: process.env.DB_USERNAME || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres',
  database: process.env.DB_DATABASE || 'pgben_test',
  entities: [
    join(__dirname, '..', 'src', '**', '*.entity{.ts,.js}'),
  ],
  synchronize: false,
  logging: false,
});

/**
 * Fun√ß√£o principal de teste
 */
async function testPermissionSeeders(): Promise<void> {
  console.log('üß™ Iniciando testes das seeds de permiss√£o...');
  console.log('=' .repeat(60));
  
  let successCount = 0;
  let errorCount = 0;
  
  // Teste 1: Verificar se todas as seeds podem ser importadas
  console.log('\nüì¶ Teste 1: Verificando importa√ß√µes das seeds...');
  
  for (const { name, seed } of PermissionSeeders) {
    try {
      if (typeof seed.run === 'function') {
        console.log(`‚úÖ ${name}: Importa√ß√£o bem-sucedida`);
        successCount++;
      } else {
        console.log(`‚ùå ${name}: M√©todo 'run' n√£o encontrado`);
        errorCount++;
      }
    } catch (error) {
      console.log(`‚ùå ${name}: Erro na importa√ß√£o - ${error.message}`);
      errorCount++;
    }
  }
  
  // Teste 2: Verificar estrutura das permiss√µes
  console.log('\nüîç Teste 2: Verificando estrutura das permiss√µes...');
  
  const expectedModules = [
    'notificacao',
    'metrica',
    'integrador', 
    'judicial',
    'ocorrencia',
    'pagamento',
    'recurso',
    'relatorios-unificado'
  ];
  
  for (const module of expectedModules) {
    const seedFound = PermissionSeeders.find(s => 
      s.name.toLowerCase().includes(module.replace('-', ''))
    );
    
    if (seedFound) {
      console.log(`‚úÖ M√≥dulo ${module}: Seed encontrada (${seedFound.name})`);
      successCount++;
    } else {
      console.log(`‚ùå M√≥dulo ${module}: Seed n√£o encontrada`);
      errorCount++;
    }
  }
  
  // Teste 3: Verificar se o PermissionSeeder principal foi atualizado
  console.log('\nüîß Teste 3: Verificando PermissionSeeder principal...');
  
  try {
    if (typeof PermissionSeeder.prototype.run === 'function') {
      console.log('‚úÖ PermissionSeeder: M√©todo run dispon√≠vel');
      successCount++;
    } else {
      console.log('‚ùå PermissionSeeder: M√©todo run n√£o encontrado');
      errorCount++;
    }
  } catch (error) {
    console.log(`‚ùå PermissionSeeder: Erro - ${error.message}`);
    errorCount++;
  }
  
  // Teste 4: Verificar PermissionRoleMappingSeed
  console.log('\nüó∫Ô∏è  Teste 4: Verificando PermissionRoleMappingSeed...');
  
  try {
    if (typeof PermissionRoleMappingSeed.run === 'function') {
      console.log('‚úÖ PermissionRoleMappingSeed: M√©todo run dispon√≠vel');
      successCount++;
    } else {
      console.log('‚ùå PermissionRoleMappingSeed: M√©todo run n√£o encontrado');
      errorCount++;
    }
  } catch (error) {
    console.log(`‚ùå PermissionRoleMappingSeed: Erro - ${error.message}`);
    errorCount++;
  }
  
  // Resumo dos testes
  console.log('\n' + '=' .repeat(60));
  console.log('üìä RESUMO DOS TESTES');
  console.log('=' .repeat(60));
  console.log(`‚úÖ Sucessos: ${successCount}`);
  console.log(`‚ùå Erros: ${errorCount}`);
  console.log(`üìà Taxa de sucesso: ${((successCount / (successCount + errorCount)) * 100).toFixed(1)}%`);
  
  if (errorCount === 0) {
    console.log('\nüéâ Todos os testes passaram! As seeds est√£o prontas para execu√ß√£o.');
  } else {
    console.log('\n‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima antes de executar as seeds.');
  }
  
  console.log('\nüí° Pr√≥ximos passos:');
  console.log('   1. Execute: npm run seed:run para aplicar as seeds');
  console.log('   2. Verifique o banco de dados para confirmar as permiss√µes');
  console.log('   3. Teste o sistema com as novas permiss√µes');
}

/**
 * Fun√ß√£o para testar conex√£o com banco (opcional)
 */
async function testDatabaseConnection(): Promise<boolean> {
  try {
    console.log('üîå Testando conex√£o com o banco de dados...');
    await testDataSource.initialize();
    console.log('‚úÖ Conex√£o com banco estabelecida com sucesso');
    await testDataSource.destroy();
    return true;
  } catch (error) {
    console.log(`‚ùå Erro na conex√£o com banco: ${error.message}`);
    return false;
  }
}

/**
 * Execu√ß√£o principal
 */
async function main(): Promise<void> {
  try {
    await testPermissionSeeders();
    
    // Teste opcional de conex√£o com banco
    const testDb = process.argv.includes('--test-db');
    if (testDb) {
      console.log('\n' + '=' .repeat(60));
      await testDatabaseConnection();
    }
    
  } catch (error) {
    console.error('üí• Erro durante a execu√ß√£o dos testes:', error.message);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

export { testPermissionSeeders, testDatabaseConnection };