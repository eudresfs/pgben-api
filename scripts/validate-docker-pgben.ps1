# Script de valida√ß√£o do ambiente Docker para PGBen

Write-Host "‚öôÔ∏è Validando configura√ß√µes Docker para PGBen..." -ForegroundColor Cyan

# 1. Verificar Docker e Docker Compose
Write-Host "üìã Verificando Docker..." -ForegroundColor Yellow
try {
    docker --version
    docker-compose --version
} catch {
    Write-Host "‚ùå Docker ou Docker Compose n√£o est√£o instalados ou acess√≠veis!" -ForegroundColor Red
    exit 1
}

# 2. Verificar e baixar imagens base
Write-Host "üìã Verificando e baixando imagens Docker necess√°rias..." -ForegroundColor Yellow
$requiredImages = @(
    "postgres:14-alpine",
    "redis:alpine",
    "minio/minio",
    "minio/mc",
    "mailhog/mailhog"
)

foreach ($image in $requiredImages) {
    Write-Host "üîÑ Baixando $image..." -ForegroundColor Cyan
    docker pull $image
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è Erro ao baixar $image. Verifique sua conex√£o com a internet." -ForegroundColor Red
    } else {
        Write-Host "‚úÖ Imagem $image baixada com sucesso!" -ForegroundColor Green
    }
}

# 3. Verificar espa√ßo em disco
Write-Host "üìã Verificando espa√ßo em disco..." -ForegroundColor Yellow
Get-PSDrive -PSProvider FileSystem | Format-Table -AutoSize

# 4. Backup de dados (se existentes e se os cont√™ineres estiverem rodando)
Write-Host "üìã Verificando cont√™ineres em execu√ß√£o para poss√≠vel backup..." -ForegroundColor Yellow
$postgresRunning = docker ps | Select-String -Pattern "pgben_postgres" -Quiet
if ($postgresRunning) {
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    Write-Host "üîÑ Realizando backup do PostgreSQL..." -ForegroundColor Cyan
    docker exec pgben_postgres pg_dump -U postgres pgben > "backup_pgben_$timestamp.sql"
    Write-Host "‚úÖ Backup realizado com sucesso em backup_pgben_$timestamp.sql!" -ForegroundColor Green
}

# 5. Verificar arquivo .env (se existir)
Write-Host "üìã Verificando arquivo .env..." -ForegroundColor Yellow
if (Test-Path -Path ".env") {
    Write-Host "‚úÖ Arquivo .env encontrado!" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è Arquivo .env n√£o encontrado. Ser√£o usados valores padr√£o!" -ForegroundColor Yellow
}

# 6. Verificar volumes existentes
Write-Host "üìã Verificando volumes Docker..." -ForegroundColor Yellow
docker volume ls | Select-String -Pattern "pgben"

# 7. Verificar redes
Write-Host "üìã Verificando rede pgben_network..." -ForegroundColor Yellow
$networkExists = docker network ls | Select-String -Pattern "pgben_network" -Quiet
if (-not $networkExists) {
    Write-Host "üîÑ Criando rede pgben_network..." -ForegroundColor Cyan
    docker network create pgben_network
    Write-Host "‚úÖ Rede criada com sucesso!" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Rede pgben_network j√° existe!" -ForegroundColor Green
}

# 8. Verificar portas em uso
Write-Host "üìã Verificando portas necess√°rias..." -ForegroundColor Yellow
$ports = @(3000, 5432, 6379, 9000, 9001, 1025, 8025)
foreach ($port in $ports) {
    $inUse = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
    if ($inUse) {
        Write-Host "‚ö†Ô∏è Porta $port j√° est√° em uso!" -ForegroundColor Yellow
    } else {
        Write-Host "‚úÖ Porta $port est√° dispon√≠vel!" -ForegroundColor Green
    }
}

Write-Host "`n‚úÖ Valida√ß√£o conclu√≠da! Pronto para executar o ambiente Docker." -ForegroundColor Green
Write-Host "Para iniciar o ambiente completo, execute:" -ForegroundColor Cyan
Write-Host "docker-compose up -d" -ForegroundColor White
Write-Host "`nPara iniciar apenas servi√ßos espec√≠ficos, execute:" -ForegroundColor Cyan
Write-Host "docker-compose up -d postgres redis minio" -ForegroundColor White
