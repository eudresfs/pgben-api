version: '3.8'

services:
  pgben-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: pgben-server-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      # Configurações do PostgreSQL
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_NAME=${DB_NAME}
      # Secrets são montados como arquivos em /run/secrets/
      - DB_USER_FILE=/run/secrets/db_user
      - DB_PASS_FILE=/run/secrets/db_password
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - ENCRYPTION_KEY_FILE=/run/secrets/encryption_key
      - AUDIT_SIGNING_KEY_FILE=/run/secrets/audit_signing_key
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY_FILE=/run/secrets/minio_access_key
      - MINIO_SECRET_KEY_FILE=/run/secrets/minio_secret_key
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME:-pgben-documents}
      - MINIO_USE_SSL=false
      - COOKIE_SECRET_FILE=/run/secrets/cookie_secret
      - SESSION_SECRET_FILE=/run/secrets/session_secret
      - CSRF_SECRET_FILE=/run/secrets/csrf_secret
      - SMTP_PASS_FILE=/run/secrets/smtp_password
    secrets:
      - db_user
      - db_password
      - jwt_secret
      - encryption_key
      - audit_signing_key
      - redis_password
      - minio_access_key
      - minio_secret_key
      - cookie_secret
      - session_secret
      - csrf_secret
      - smtp_password
    depends_on:
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - pgben-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    restart: unless-stopped
    command: sh -c 'redis-server --requirepass "$$(cat /run/secrets/redis_password)" --appendonly yes --appendfsync everysec'
    secrets:
      - redis_password
    volumes:
      - redis_data_prod:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    # Redis não expõe porta externa em produção
    #ports:
    #  - "6379:6379"
    networks:
      - pgben-network-prod
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli -a \"$$(cat /run/secrets/redis_password)\" ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

  minio:
    image: minio/minio:latest
    container_name: minio-prod
    restart: unless-stopped
    command: sh -c 'export MINIO_ROOT_USER="$$(cat /run/secrets/minio_access_key)" && export MINIO_ROOT_PASSWORD="$$(cat /run/secrets/minio_secret_key)" && minio server /data --console-address ":9001"'
    environment:
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    secrets:
      - minio_access_key
      - minio_secret_key
    volumes:
      - minio_data_prod:/data
    # MinIO não expõe portas externas em produção; acessível apenas via rede interna
    #ports:
    #  - "9000:9000"
    #  - "9001:9001"
    networks:
      - pgben-network-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

  createbuckets-prod: # Renomeado para evitar conflito com o existente
    image: minio/mc:latest
    container_name: createbuckets-prod
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_BUCKET=${MINIO_BUCKET_NAME:-pgben-documents}
    secrets:
      - minio_access_key
      - minio_secret_key
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      MINIO_ACCESS_KEY=$$(cat /run/secrets/minio_access_key);
      MINIO_SECRET_KEY=$$(cat /run/secrets/minio_secret_key);
      /usr/bin/mc alias set myminio http://minio:9000 $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY;
      /usr/bin/mc mb myminio/$$MINIO_BUCKET --ignore-existing;
      /usr/bin/mc mb myminio/pgben-backups-prod --ignore-existing;
      /usr/bin/mc policy set public myminio/$$MINIO_BUCKET;
      exit 0;
      "
    networks:
      - pgben-network-prod

  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: pgben-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Habilita o endpoint de reload
    ports:
      - "9090:9090"
    networks:
      - pgben-network-prod
    depends_on:
      - pgben-server
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "3"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    secrets:
      - grafana_admin_password
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - pgben-network-prod
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

volumes:
  redis_data_prod:
    driver: local
  minio_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local

networks:
  pgben-network:
    driver: bridge
    name: pgben-network-prod # Nome da network para produção para evitar conflitos
    # external: true # Remover se for criar a rede com este compose, ou manter se a rede já existe

# Secrets para configurações sensíveis
secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  minio_access_key:
    file: ./secrets/minio_access_key.txt
  minio_secret_key:
    file: ./secrets/minio_secret_key.txt
  encryption_key:
    file: ./secrets/encryption_key.txt
  audit_signing_key:
    file: ./secrets/audit_signing_key.txt
  cookie_secret:
    file: ./secrets/cookie_secret.txt
  session_secret:
    file: ./secrets/session_secret.txt
  csrf_secret:
    file: ./secrets/csrf_secret.txt
  smtp_password:
    file: ./secrets/smtp_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt