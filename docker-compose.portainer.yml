# =============================================================================
# Docker Compose para Portainer - PGBEN Server
# =============================================================================
# Este arquivo é otimizado para deploy via Portainer com:
# - Configurações de segurança aprimoradas
# - Health checks robustos
# - Logging estruturado
# - Volumes persistentes
# - Networks isoladas
# - Restart policies adequadas
# =============================================================================

services:
  # =============================================================================
  # PGBEN Server - Aplicação Principal
  # =============================================================================
  pgben-server:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-latest}
    image: pgben-server:latest
    container_name: pgben-server
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Configurações básicas
      - NODE_ENV=production
      - PORT=3000
      - TZ=America/Sao_Paulo
      
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-pgben_prod}
      - DB_USER=${DB_USER:-pgben_user}
      - DB_PASS=${DB_PASS:-pgben_secure_password_2024}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_SSL=false
      - DB_TIMEZONE=America/Sao_Paulo
      
      # JWT Configuration
      - JWT_ALGORITHM=RS256
      - JWT_ACCESS_TOKEN_EXPIRES_IN=30m
      - JWT_REFRESH_TOKEN_EXPIRES_IN=7d
      
      # Security Keys (ALTERE EM PRODUÇÃO)
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456}
      - AUDIT_SIGNING_KEY=${AUDIT_SIGNING_KEY:-audit_key_256_bits_change_in_production_environment}
      - COOKIE_SECRET=${COOKIE_SECRET:-cookie_secret_change_in_production}
      - SESSION_SECRET=${SESSION_SECRET:-session_secret_change_in_production}
      - CSRF_SECRET=${CSRF_SECRET:-csrf_secret_change_in_production}
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pgben_redis_2024}
      - REDIS_DB=0
      - REDIS_TTL=3600
      
      # MinIO
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-pgben_minio_admin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-pgben_minio_secret_2024}
      - MINIO_BUCKET_NAME=pgben-documents
      - MINIO_USE_SSL=false
      
      # Email (MailHog para desenvolvimento)
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=
      - SMTP_PASS=
      - SMTP_FROM=noreply@pgben.local
      
      # Configurações de execução
      - RUN_MIGRATIONS=true
      - RUN_SEEDS=false
      - LOG_LEVEL=info
      - ENABLE_SWAGGER=true
      - ENABLE_CORS=true
      
      # Rate Limiting
      - RATE_LIMIT_TTL=60
      - RATE_LIMIT_LIMIT=100
      
      # File Upload
      - MAX_FILE_SIZE=10485760
      - ALLOWED_FILE_TYPES=pdf,doc,docx,jpg,jpeg,png
    
    volumes:
      - ./keys:/app/keys:ro
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    
    networks:
      - pgben-network
    
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgben.rule=Host(`pgben.local`)"
      - "traefik.http.services.pgben.loadbalancer.server.port=3000"

  # =============================================================================
  # PostgreSQL - Banco de Dados Principal
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: pgben-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-pgben_prod}
      - POSTGRES_USER=${DB_USER:-pgben_user}
      - POSTGRES_PASSWORD=${DB_PASS:-pgben_secure_password_2024}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8
      - TZ=America/Sao_Paulo
      - PGTZ=America/Sao_Paulo
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    ports:
      - "5432:5432"
    
    networks:
      - pgben-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pgben_user} -d ${DB_NAME:-pgben_prod}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
    
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c timezone='America/Sao_Paulo'

  # =============================================================================
  # Redis - Cache e Session Store
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: pgben-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-pgben_redis_2024}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    environment:
      - TZ=America/Sao_Paulo
    
    volumes:
      - redis_data:/data
    
    ports:
      - "6379:6379"
    
    networks:
      - pgben-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-pgben_redis_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
        compress: "true"

  # =============================================================================
  # MinIO - Object Storage
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: pgben-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-pgben_minio_admin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-pgben_minio_secret_2024}
      - MINIO_DEFAULT_BUCKETS=pgben-documents,pgben-backups
      - TZ=America/Sao_Paulo
    
    volumes:
      - minio_data:/data
    
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    
    networks:
      - pgben-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

  # =============================================================================
  # MinIO Client - Configuração Inicial de Buckets
  # =============================================================================
  minio-setup:
    image: minio/mc:latest
    container_name: pgben-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MC_ACCESS_KEY=${MINIO_ACCESS_KEY:-pgben_minio_admin}
      - MC_SECRET_KEY=${MINIO_SECRET_KEY:-pgben_minio_secret_2024}
    
    entrypoint: >
      /bin/sh -c "
      echo 'Aguardando MinIO estar pronto...';
      sleep 10;
      echo 'Configurando cliente MinIO...';
      /usr/bin/mc config host add myminio http://minio:9000 $$MC_ACCESS_KEY $$MC_SECRET_KEY;
      echo 'Criando buckets...';
      /usr/bin/mc mb myminio/pgben-documents --ignore-existing;
      /usr/bin/mc mb myminio/pgben-backups --ignore-existing;
      echo 'Configurando políticas de acesso...';
      /usr/bin/mc anonymous set download myminio/pgben-documents;
      echo 'Configuração do MinIO concluída!';
      exit 0;
      "
    
    networks:
      - pgben-network
    
    restart: "no"

  # =============================================================================
  # MailHog - Servidor de Email para Desenvolvimento/Teste
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: pgben-mailhog
    restart: unless-stopped
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
      - TZ=America/Sao_Paulo
    
    volumes:
      - mailhog_data:/maildir
    
    ports:
      - "1025:1025"  # SMTP Server
      - "8025:8025"  # Web Interface
    
    networks:
      - pgben-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
        compress: "true"

  # =============================================================================
  # Nginx - Reverse Proxy (Opcional)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: pgben-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - pgben-server
    
    networks:
      - pgben-network
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"
    
    profiles:
      - proxy  # Use: docker-compose --profile proxy up

# =============================================================================
# Volumes Persistentes
# =============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio
  
  mailhog_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/mailhog
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/nginx

# =============================================================================
# Networks
# =============================================================================
networks:
  pgben-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "com.pgben.network=main"
      - "com.pgben.environment=production"