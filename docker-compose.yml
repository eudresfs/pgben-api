services:
  # =============================================================================
  # Redis - Cache e Session Store
  # =============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: pgben-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-pgben123}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-pgben123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pgben-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-pgben123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # MailHog - Email Testing
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: pgben-mailhog
    restart: unless-stopped
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - mailhog_data:/maildir
    ports:
      - "1025:1025"  # SMTP Server
      - "8025:8025"  # Web Interface
    networks:
      - pgben-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # =============================================================================
  # MinIO - Object Storage
  # =============================================================================
  minio:
    image: minio/minio:latest
    container_name: pgben-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_DEFAULT_BUCKETS=pgben-documents,pgben-backups
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    networks:
      - pgben-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # =============================================================================
  # MinIO Client - Create Buckets
  # =============================================================================
  createbuckets:
    image: minio/mc:latest
    container_name: pgben-minio-createbuckets
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MC_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MC_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 $MC_ACCESS_KEY $MC_SECRET_KEY;
      /usr/bin/mc mb myminio/pgben-documents;
      /usr/bin/mc mb myminio/pgben-backups;
      /usr/bin/mc policy set public myminio/pgben-documents;      exit 0;
      "
    networks:
      - pgben-network

  # =============================================================================
  # Redis Commander - Redis Web Interface (Opcional)
  # =============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: pgben-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:pgben-redis:6379:0:${REDIS_PASSWORD:-pgben123}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "8081:8081"
    networks:
      - pgben-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - tools  # Use: docker-compose --profile tools up
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# =============================================================================
# Volumes
# =============================================================================
volumes:
  redis_data:
    driver: local
  mailhog_data:
    driver: local
  minio_data:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  pgben-network:
    driver: bridge
    external: true