# Docker Compose para PGBEN Server
# Ambiente completo de desenvolvimento e testes

version: '3.8'

services:
  # =============================================================================
  # Aplicação Principal
  # =============================================================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        NODE_ENV: development
        BUILD_DATE: ${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VCS_REF: ${VCS_REF:-$(git rev-parse HEAD)}
    container_name: pgben-server
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://pgben_user:pgben_password@postgres:5432/pgben_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - ENCRYPTION_KEY=dev-encryption-key-32-characters
      - API_PREFIX=api/v1
      - SWAGGER_ENABLED=true
      - LOG_LEVEL=debug
      - RATE_LIMIT_TTL=60
      - RATE_LIMIT_LIMIT=100
      - FILE_UPLOAD_MAX_SIZE=10485760
      - FILE_UPLOAD_ALLOWED_TYPES=pdf,doc,docx,jpg,jpeg,png
      - CACHE_TTL=300
      - HEALTH_CHECK_TIMEOUT=5000
      - GRACEFUL_SHUTDOWN_TIMEOUT=10000
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pgben-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgben-server.rule=Host(`localhost`)"
      - "traefik.http.services.pgben-server.loadbalancer.server.port=3000"

  # =============================================================================
  # Banco de Dados PostgreSQL
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: pgben-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=pgben_db
      - POSTGRES_USER=pgben_user
      - POSTGRES_PASSWORD=pgben_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - pgben-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pgben_user -d pgben_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=1000

  # =============================================================================
  # Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: pgben-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - pgben-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: redis-server /usr/local/etc/redis/redis.conf

  # =============================================================================
  # Adminer - Interface Web para PostgreSQL
  # =============================================================================
  adminer:
    image: adminer:4-standalone
    container_name: pgben-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - postgres
    networks:
      - pgben-network

  # =============================================================================
  # Redis Commander - Interface Web para Redis
  # =============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: pgben-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      - redis
    networks:
      - pgben-network

  # =============================================================================
  # Prometheus - Monitoramento
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: pgben-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pgben-network

  # =============================================================================
  # Grafana - Dashboards
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: pgben-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - pgben-network

  # =============================================================================
  # Jaeger - Distributed Tracing
  # =============================================================================
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: pgben-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - pgben-network

  # =============================================================================
  # Nginx - Load Balancer/Reverse Proxy (para testes)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: pgben-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - pgben-network

# =============================================================================
# Volumes Persistentes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# Rede
# =============================================================================
networks:
  pgben-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Configurações Adicionais
# =============================================================================

# Para usar este docker-compose:
# 
# Desenvolvimento:
# docker-compose up -d
# 
# Produção (apenas serviços essenciais):
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# 
# Testes:
# docker-compose -f docker-compose.yml -f docker-compose.test.yml up --abort-on-container-exit
# 
# Monitoramento completo:
# docker-compose --profile monitoring up -d
# 
# Parar todos os serviços:
# docker-compose down
# 
# Parar e remover volumes:
# docker-compose down -v
# 
# Ver logs:
# docker-compose logs -f app
# 
# Executar comandos na aplicação:
# docker-compose exec app npm run migration:run
# docker-compose exec app npm run seed:run
    