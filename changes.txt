diff --git a/package-lock.json b/package-lock.json
index 394071d..11cc4c7 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -72,6 +72,7 @@
       "devDependencies": {
         "@eslint/eslintrc": "^3.2.0",
         "@eslint/js": "^9.18.0",
+        "@golevelup/ts-jest": "^0.7.0",
         "@nestjs/cli": "^11.0.0",
         "@nestjs/schematics": "^11.0.0",
         "@nestjs/testing": "^11.1.0",
@@ -83,6 +84,7 @@
         "@types/pdfkit": "^0.13.9",
         "@types/sanitize-filename": "^1.1.28",
         "@types/supertest": "^6.0.3",
+        "autocannon": "^8.0.0",
         "eslint": "^9.18.0",
         "eslint-config-prettier": "^10.0.1",
         "eslint-plugin-prettier": "^5.2.2",
@@ -261,6 +263,13 @@
         "tslib": "^2.1.0"
       }
     },
+    "node_modules/@assemblyscript/loader": {
+      "version": "0.19.23",
+      "resolved": "https://registry.npmjs.org/@assemblyscript/loader/-/loader-0.19.23.tgz",
+      "integrity": "sha512-ulkCYfFbYj01ie1MDOyxv2F6SpRN1TOj7fQxbP07D6HmeR+gr2JLSmINKjga2emB+b1L2KGrFKBTc+e00p54nw==",
+      "dev": true,
+      "license": "Apache-2.0"
+    },
     "node_modules/@aws-crypto/crc32": {
       "version": "5.2.0",
       "resolved": "https://registry.npmjs.org/@aws-crypto/crc32/-/crc32-5.2.0.tgz",
@@ -2120,6 +2129,13 @@
         "ipaddr.js": "^2.1.0"
       }
     },
+    "node_modules/@golevelup/ts-jest": {
+      "version": "0.7.0",
+      "resolved": "https://registry.npmjs.org/@golevelup/ts-jest/-/ts-jest-0.7.0.tgz",
+      "integrity": "sha512-b5Kf+NiEfWuMGUD5bl/Gm/RqojS4Sr/4Q0ySXN4xn3xlkhgPYG6nGLBeNjk3MiM2I3ztVVFfI7SB8ajqDy6Idw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/@hapi/hoek": {
       "version": "9.3.0",
       "resolved": "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz",
@@ -3553,6 +3569,16 @@
       "integrity": "sha512-4aErSrCR/On/e5G2hDP0wjooqDdauzEbIq8hIkIe5pXV0rtWJZvdCEKL0ykZxex+IxIwBp0eGeV48hQN07dXtw==",
       "license": "MIT"
     },
+    "node_modules/@minimistjs/subarg": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/@minimistjs/subarg/-/subarg-1.0.0.tgz",
+      "integrity": "sha512-Q/ONBiM2zNeYUy0mVSO44mWWKYM3UHuEK43PKIOzJCbvUnPoMH1K+gk3cf1kgnCVJFlWmddahQQCmrmBGlk9jQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "minimist": "^1.1.0"
+      }
+    },
     "node_modules/@modelcontextprotocol/sdk": {
       "version": "1.11.0",
       "resolved": "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.11.0.tgz",
@@ -8296,6 +8322,41 @@
         "node": ">=8.0.0"
       }
     },
+    "node_modules/autocannon": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/autocannon/-/autocannon-8.0.0.tgz",
+      "integrity": "sha512-fMMcWc2JPFcUaqHeR6+PbmEpTxCrPZyBUM95oG4w3ngJ8NfBNas/ZXA+pTHXLqJ0UlFVTcy05GC25WxKx/M20A==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@minimistjs/subarg": "^1.0.0",
+        "chalk": "^4.1.0",
+        "char-spinner": "^1.0.1",
+        "cli-table3": "^0.6.0",
+        "color-support": "^1.1.1",
+        "cross-argv": "^2.0.0",
+        "form-data": "^4.0.0",
+        "has-async-hooks": "^1.0.0",
+        "hdr-histogram-js": "^3.0.0",
+        "hdr-histogram-percentiles-obj": "^3.0.0",
+        "http-parser-js": "^0.5.2",
+        "hyperid": "^3.0.0",
+        "lodash.chunk": "^4.2.0",
+        "lodash.clonedeep": "^4.5.0",
+        "lodash.flatten": "^4.4.0",
+        "manage-path": "^2.0.0",
+        "on-net-listen": "^1.1.1",
+        "pretty-bytes": "^5.4.1",
+        "progress": "^2.0.3",
+        "reinterval": "^1.1.0",
+        "retimer": "^3.0.0",
+        "semver": "^7.3.2",
+        "timestring": "^6.0.0"
+      },
+      "bin": {
+        "autocannon": "autocannon.js"
+      }
+    },
     "node_modules/available-typed-arrays": {
       "version": "1.0.7",
       "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
@@ -9156,6 +9217,13 @@
         "node": ">=10"
       }
     },
+    "node_modules/char-spinner": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/char-spinner/-/char-spinner-1.0.1.tgz",
+      "integrity": "sha512-acv43vqJ0+N0rD+Uw3pDHSxP30FHrywu2NO6/wBaHChJIizpDeBUd6NjqhNhy9LGaEAhZAXn46QzmlAvIWd16g==",
+      "dev": true,
+      "license": "ISC"
+    },
     "node_modules/chardet": {
       "version": "0.7.0",
       "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
@@ -9470,6 +9538,16 @@
         "simple-swizzle": "^0.2.2"
       }
     },
+    "node_modules/color-support": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
+      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
+      "dev": true,
+      "license": "ISC",
+      "bin": {
+        "color-support": "bin.js"
+      }
+    },
     "node_modules/colorspace": {
       "version": "1.1.4",
       "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
@@ -9950,6 +10028,13 @@
       "integrity": "sha512-/f6gpQuxDaqXu+1kwQYSckUglPaOrHdbIlBAu0YuW8/Cdb45XwXYNUBXg3r/9Mo6n540Kn/smKcZWko5x99KrQ==",
       "license": "MIT"
     },
+    "node_modules/cross-argv": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/cross-argv/-/cross-argv-2.0.0.tgz",
+      "integrity": "sha512-YIaY9TR5Nxeb8SMdtrU8asWVM4jqJDNDYlKV21LxtYcfNJhp1kEsgSa6qXwXgzN0WQWGODps0+TlGp2xQSHwOg==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/cross-spawn": {
       "version": "7.0.6",
       "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
@@ -12166,6 +12251,13 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/has-async-hooks": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/has-async-hooks/-/has-async-hooks-1.0.0.tgz",
+      "integrity": "sha512-YF0VPGjkxr7AyyQQNykX8zK4PvtEDsUJAPqwu06UFz1lb6EvI53sPh5H1kWxg8NXI5LsfRCZ8uX9NkYDZBb/mw==",
+      "dev": true,
+      "license": "Apache-2.0"
+    },
     "node_modules/has-flag": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
@@ -12236,6 +12328,28 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/hdr-histogram-js": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-3.0.0.tgz",
+      "integrity": "sha512-/EpvQI2/Z98mNFYEnlqJ8Ogful8OpArLG/6Tf2bPnkutBVLIeMVNHjk1ZDfshF2BUweipzbk+dB1hgSB7SIakw==",
+      "dev": true,
+      "license": "BSD",
+      "dependencies": {
+        "@assemblyscript/loader": "^0.19.21",
+        "base64-js": "^1.2.0",
+        "pako": "^1.0.3"
+      },
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/hdr-histogram-percentiles-obj": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/hdr-histogram-percentiles-obj/-/hdr-histogram-percentiles-obj-3.0.0.tgz",
+      "integrity": "sha512-7kIufnBqdsBGcSZLPJwqHT3yhk1QTsSlFsVD3kx5ixH/AlgBs9yM1q6DPhXZ8f8gtdqgh7N7/5btRLpQsS2gHw==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/helmet": {
       "version": "8.1.0",
       "resolved": "https://registry.npmjs.org/helmet/-/helmet-8.1.0.tgz",
@@ -12275,6 +12389,13 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/http-parser-js": {
+      "version": "0.5.10",
+      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
+      "integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/http-proxy-agent": {
       "version": "7.0.2",
       "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
@@ -12325,6 +12446,53 @@
         "node": ">=10.17.0"
       }
     },
+    "node_modules/hyperid": {
+      "version": "3.3.0",
+      "resolved": "https://registry.npmjs.org/hyperid/-/hyperid-3.3.0.tgz",
+      "integrity": "sha512-7qhCVT4MJIoEsNcbhglhdmBKb09QtcmJNiIQGq7js/Khf5FtQQ9bzcAuloeqBeee7XD7JqDeve9KNlQya5tSGQ==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "buffer": "^5.2.1",
+        "uuid": "^8.3.2",
+        "uuid-parse": "^1.1.0"
+      }
+    },
+    "node_modules/hyperid/node_modules/buffer": {
+      "version": "5.7.1",
+      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
+      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT",
+      "dependencies": {
+        "base64-js": "^1.3.1",
+        "ieee754": "^1.1.13"
+      }
+    },
+    "node_modules/hyperid/node_modules/uuid": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
+      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
+      "dev": true,
+      "license": "MIT",
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
     "node_modules/iconv-lite": {
       "version": "0.6.3",
       "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
@@ -13996,6 +14164,20 @@
       "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
       "license": "MIT"
     },
+    "node_modules/lodash.chunk": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/lodash.chunk/-/lodash.chunk-4.2.0.tgz",
+      "integrity": "sha512-ZzydJKfUHJwHa+hF5X66zLFCBrWn5GeF28OHEr4WVWtNDXlQ/IjWKPBiikqKo2ne0+v6JgCgJ0GzJp8k8bHC7w==",
+      "dev": true,
+      "license": "MIT"
+    },
+    "node_modules/lodash.clonedeep": {
+      "version": "4.5.0",
+      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
+      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/lodash.defaults": {
       "version": "4.2.0",
       "resolved": "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz",
@@ -14252,6 +14434,13 @@
         "tmpl": "1.0.5"
       }
     },
+    "node_modules/manage-path": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/manage-path/-/manage-path-2.0.0.tgz",
+      "integrity": "sha512-NJhyB+PJYTpxhxZJ3lecIGgh4kwIY2RAh44XvAz9UlqthlQwtPBf62uBVR8XaD8CRuSjQ6TnZH2lNJkbLPZM2A==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/math-intrinsics": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
@@ -14926,6 +15115,16 @@
         "node": ">= 0.8"
       }
     },
+    "node_modules/on-net-listen": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/on-net-listen/-/on-net-listen-1.1.2.tgz",
+      "integrity": "sha512-y1HRYy8s/RlcBvDUwKXSmkODMdx4KSuIvloCnQYJ2LdBBC1asY4HtfhXwe3UWknLakATZDnbzht2Ijw3M1EqFg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=9.4.0 || ^8.9.4"
+      }
+    },
     "node_modules/once": {
       "version": "1.4.0",
       "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
@@ -15926,6 +16125,19 @@
         "node": ">=6.0.0"
       }
     },
+    "node_modules/pretty-bytes": {
+      "version": "5.6.0",
+      "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz",
+      "integrity": "sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
     "node_modules/pretty-format": {
       "version": "29.7.0",
       "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
@@ -15976,6 +16188,16 @@
       ],
       "license": "MIT"
     },
+    "node_modules/progress": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
+      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
     "node_modules/prom-client": {
       "version": "15.1.3",
       "resolved": "https://registry.npmjs.org/prom-client/-/prom-client-15.1.3.tgz",
@@ -16339,6 +16561,13 @@
       "integrity": "sha512-urBwgfrvVP/eAyXx4hluJivBKzuEbSQs9rKWCrCkbSxNv8mxPcUZKeuoF3Uy4mJl3Lwprp6yy5/39VWigZ4K6Q==",
       "license": "Apache-2.0"
     },
+    "node_modules/reinterval": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/reinterval/-/reinterval-1.1.0.tgz",
+      "integrity": "sha512-QIRet3SYrGp0HUHO88jVskiG6seqUGC5iAG7AwI/BV4ypGcuqk9Du6YQBUOUqm9c8pw1eyLoIaONifRua1lsEQ==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/repeat-string": {
       "version": "1.6.1",
       "resolved": "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz",
@@ -16503,6 +16732,13 @@
         "node": ">=10"
       }
     },
+    "node_modules/retimer": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/retimer/-/retimer-3.0.0.tgz",
+      "integrity": "sha512-WKE0j11Pa0ZJI5YIk0nflGI7SQsfl2ljihVy7ogh7DeQSeYAUi0ubZ/yEueGtDfUPk6GH5LRw1hBdLq4IwUBWA==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/reusify": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
@@ -17961,6 +18197,16 @@
         "readable-stream": "3"
       }
     },
+    "node_modules/timestring": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/timestring/-/timestring-6.0.0.tgz",
+      "integrity": "sha512-wMctrWD2HZZLuIlchlkE2dfXJh7J2KDI9Dwl+2abPYg0mswQHfOAyQW3jJg1pY5VfttSINZuKcXoB3FGypVklA==",
+      "dev": true,
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/tiny-emitter": {
       "version": "2.1.0",
       "resolved": "https://registry.npmjs.org/tiny-emitter/-/tiny-emitter-2.1.0.tgz",
@@ -18886,6 +19132,13 @@
         "uuid": "dist/bin/uuid"
       }
     },
+    "node_modules/uuid-parse": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/uuid-parse/-/uuid-parse-1.1.0.tgz",
+      "integrity": "sha512-OdmXxA8rDsQ7YpNVbKSJkNzTw2I+S5WsbMDnCtIWSQaosNAcWtFuI/YK1TjzUI6nbkgiqEyh8gWngfcv8Asd9A==",
+      "dev": true,
+      "license": "MIT"
+    },
     "node_modules/v8-compile-cache-lib": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
diff --git a/package.json b/package.json
index 36bdbd9..4670f5f 100644
--- a/package.json
+++ b/package.json
@@ -124,6 +124,7 @@
   "devDependencies": {
     "@eslint/eslintrc": "^3.2.0",
     "@eslint/js": "^9.18.0",
+    "@golevelup/ts-jest": "^0.7.0",
     "@nestjs/cli": "^11.0.0",
     "@nestjs/schematics": "^11.0.0",
     "@nestjs/testing": "^11.1.0",
@@ -135,6 +136,7 @@
     "@types/pdfkit": "^0.13.9",
     "@types/sanitize-filename": "^1.1.28",
     "@types/supertest": "^6.0.3",
+    "autocannon": "^8.0.0",
     "eslint": "^9.18.0",
     "eslint-config-prettier": "^10.0.1",
     "eslint-plugin-prettier": "^5.2.2",
diff --git a/src/app.module.ts b/src/app.module.ts
index 5d47f4f..570fbda 100644
--- a/src/app.module.ts
+++ b/src/app.module.ts
@@ -85,9 +85,13 @@ import { getBullConfig } from './config/bull.config';
     // Módulos compartilhados
     SharedModule,
 
+    // Módulos de segurança e observabilidade
+    AuditoriaModule,
+    MetricasModule,
+
     // Módulos da aplicação
-    AuthModule,
     UsuarioModule,
+    AuthModule,
     UnidadeModule,
     CidadaoModule,
     BeneficioModule,
@@ -95,10 +99,6 @@ import { getBullConfig } from './config/bull.config';
     DocumentoModule,
     RelatoriosUnificadoModule,
     NotificacaoModule,
-
-    // Módulos de segurança e observabilidade
-    AuditoriaModule, // Módulo global de auditoria
-    MetricasModule,
   ],
   controllers: [AppController],
   providers: [
diff --git a/src/auth/adapters/usuario-adapter.ts b/src/auth/adapters/usuario-adapter.ts
index 2c73fdf..041736e 100644
--- a/src/auth/adapters/usuario-adapter.ts
+++ b/src/auth/adapters/usuario-adapter.ts
@@ -1,6 +1,8 @@
 import { Expose } from 'class-transformer';
 import { Usuario } from '../../modules/usuario/entities/usuario.entity';
 import { Role } from '../../shared/enums/role.enum';
+import { Permission } from '../entities/permission.entity';
+import { ScopeType } from '../entities/user-permission.entity';
 
 /**
  * DTO para saída de usuário compatível com o serviço de autenticação
@@ -34,10 +36,12 @@ export class UserOutput {
 /**
  * Claims do token de acesso do usuário
  */
-export class UserAccessTokenClaims {
+export interface UserAccessTokenClaims {
   id: string | number;
   username: string;
   roles: Role[];
+  permissions?: string[];
+  permissionScopes?: Record<string, string>;
 }
 
 /**
@@ -65,12 +69,36 @@ export class UsuarioAdapter {
 
   /**
    * Converte um Usuario para UserAccessTokenClaims
+   * 
+   * @param usuario Usuário a ser convertido
+   * @param permissions Lista de permissões do usuário (opcional)
+   * @param permissionScopes Mapeamento de permissões para escopos (opcional)
+   * @returns Claims do token de acesso do usuário
    */
-  static toUserAccessTokenClaims(usuario: Usuario): UserAccessTokenClaims {
-    return {
+  static toUserAccessTokenClaims(
+    usuario: Usuario,
+    permissions?: Permission[],
+    permissionScopes?: Record<string, ScopeType | string>
+  ): UserAccessTokenClaims {
+    const claims: UserAccessTokenClaims = {
       id: usuario.id,
       username: usuario.email, // Usando email como username
       roles: [usuario.role as unknown as Role],
     };
+
+    // Adiciona permissões se disponíveis
+    if (permissions && permissions.length > 0) {
+      claims.permissions = permissions.map(p => p.name);
+    }
+
+    // Adiciona escopos de permissões se disponíveis
+    if (permissionScopes && Object.keys(permissionScopes).length > 0) {
+      claims.permissionScopes = {};
+      for (const [permissionId, scopeType] of Object.entries(permissionScopes)) {
+        claims.permissionScopes[permissionId] = scopeType.toString();
+      }
+    }
+
+    return claims;
   }
 }
diff --git a/src/auth/auth.module.ts b/src/auth/auth.module.ts
index e209d0f..a518a68 100644
--- a/src/auth/auth.module.ts
+++ b/src/auth/auth.module.ts
@@ -1,11 +1,14 @@
 // src/auth/auth.module.ts
-import { Module } from '@nestjs/common';
+import { Module, forwardRef } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { JwtModule } from '@nestjs/jwt';
 import { ConfigModule, ConfigService } from '@nestjs/config';
+import { PermissionModule } from './permission.module';
 
 import { AuthController } from './controllers/auth.controller';
+import { PermissionManagementController } from './controllers/permission-management.controller';
 import { AuthService } from './services/auth.service';
+import { AuthorizationService } from './services/authorization.service';
 import { RefreshTokenService } from './services/refresh-token.service';
 import { RefreshToken } from './entities/refresh-token.entity';
 import { JwtAuthStrategy } from './strategies/jwt-auth.strategy';
@@ -15,10 +18,16 @@ import { UsuarioModule } from '../modules/usuario/usuario.module';
 import { JwtAuthGuard } from './guards/jwt-auth.guard';
 import { RolesGuard } from './guards/roles.guard';
 import { AppLoggerModule } from '../shared/logger/logger.module';
+import { AuditoriaModule } from '../modules/auditoria/auditoria.module';
 
 @Module({
   imports: [
+    // Importa o módulo compartilhado de autenticação
+    PermissionModule,
+    
+    // Configuração do TypeORM para entidades específicas do AuthModule
     TypeOrmModule.forFeature([RefreshToken]),
+    
     JwtModule.registerAsync({
       imports: [ConfigModule],
       inject: [ConfigService],
@@ -29,19 +38,31 @@ import { AppLoggerModule } from '../shared/logger/logger.module';
         },
       }),
     }),
-    UsuarioModule,
+    
+    // ← SOLUÇÃO: forwardRef nos dois módulos que se referenciam
+    forwardRef(() => UsuarioModule),
     AppLoggerModule,
+    forwardRef(() => AuditoriaModule),
+  ],
+  controllers: [
+    AuthController,
+    PermissionManagementController,
   ],
-  controllers: [AuthController],
   providers: [
     AuthService,
     RefreshTokenService,
+    AuthorizationService,
     JwtAuthStrategy,
     JwtRefreshStrategy,
     LocalStrategy,
     JwtAuthGuard,
     RolesGuard,
   ],
-  exports: [AuthService, JwtAuthGuard, RolesGuard],
+  exports: [
+    AuthService,
+    JwtAuthGuard,
+    RolesGuard,
+    PermissionModule,
+  ],
 })
-export class AuthModule {}
+export class AuthModule {}
\ No newline at end of file
diff --git a/src/auth/dtos/auth-register-input.dto.ts b/src/auth/dtos/auth-register-input.dto.ts
index b840b21..112d63d 100644
--- a/src/auth/dtos/auth-register-input.dto.ts
+++ b/src/auth/dtos/auth-register-input.dto.ts
@@ -1,44 +1,116 @@
 import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
-import {
-  IsEmail,
-  IsNotEmpty,
-  IsString,
-  Length,
-  MaxLength,
+import { 
+  IsEmail, 
+  IsNotEmpty, 
+  IsString, 
+  Length, 
+  MaxLength, 
+  Matches, 
+  Validate, 
+  IsArray, 
+  ArrayMinSize, 
+  ArrayMaxSize, 
+  IsBoolean, 
+  IsOptional 
 } from 'class-validator';
-
+import { IsCPF, IsTelefone } from '../../shared/validators/br-validators';
 import { Role } from '../../shared/enums/role.enum';
 
 /**
  * DTO para registro de novo usuário
  */
 export class RegisterInput {
-  @ApiProperty()
-  @IsNotEmpty()
-  @MaxLength(100)
-  @IsString()
+  @ApiProperty({
+    description: 'Nome completo do usuário',
+    example: 'João da Silva',
+  })
+  @IsNotEmpty({ message: 'O nome é obrigatório' })
+  @MaxLength(100, { message: 'O nome deve ter no máximo 100 caracteres' })
+  @IsString({ message: 'O nome deve ser uma string' })
   name: string;
 
-  @ApiProperty()
-  @MaxLength(200)
-  @IsString()
+  @ApiProperty({
+    description: 'Nome de usuário único para login',
+    example: 'joao.silva',
+  })
+  @IsNotEmpty({ message: 'O nome de usuário é obrigatório' })
+  @MaxLength(200, { message: 'O nome de usuário deve ter no máximo 200 caracteres' })
+  @IsString({ message: 'O nome de usuário deve ser uma string' })
   username: string;
 
-  @ApiProperty()
-  @IsNotEmpty()
-  @Length(6, 100)
-  @IsString()
+  @ApiProperty({
+    description: 'Senha do usuário (mínimo 6 caracteres)',
+    example: 'Senha@123',
+  })
+  @IsNotEmpty({ message: 'A senha é obrigatória' })
+  @Length(6, 100, {
+    message: 'A senha deve ter entre 6 e 100 caracteres',
+  })
+  @IsString({ message: 'A senha deve ser uma string' })
   password: string;
 
-  @ApiProperty()
-  @IsNotEmpty()
-  @IsEmail()
-  @MaxLength(100)
+  @ApiProperty({
+    description: 'E-mail do usuário',
+    example: 'joao.silva@example.com',
+  })
+  @IsNotEmpty({ message: 'O e-mail é obrigatório' })
+  @IsEmail({}, { message: 'Informe um endereço de e-mail válido' })
+  @MaxLength(100, { message: 'O e-mail deve ter no máximo 100 caracteres' })
   email: string;
 
-  @ApiProperty({ example: [Role.TECNICO] })
+  @ApiProperty({
+    description: 'Lista de papéis (roles) do usuário',
+    example: [Role.TECNICO],
+    default: [Role.TECNICO],
+  })
+  @IsArray({ message: 'Os papéis devem ser fornecidos como um array' })
+  @ArrayMinSize(1, { message: 'Pelo menos um papel deve ser fornecido' })
+  @ArrayMaxSize(5, { message: 'Máximo de 5 papéis permitidos' })
   roles: Role[] = [Role.TECNICO];
 
-  @ApiPropertyOptional({ example: false })
+  @ApiPropertyOptional({
+    description: 'Indica se a conta está desativada',
+    example: false,
+    default: false,
+  })
+  @IsBoolean({ message: 'O status da conta deve ser um valor booleano' })
+  @IsOptional()
   isAccountDisabled: boolean = false;
+
+  @ApiProperty({
+    example: '123.456.789-00',
+    description: 'CPF do usuário (formato: 123.456.789-00)',
+  })
+  @IsNotEmpty({ message: 'O CPF é obrigatório' })
+  @IsString({ message: 'O CPF deve ser uma string' })
+  @Matches(/^\d{3}\.\d{3}\.\d{3}\-\d{2}$/, {
+    message: 'Formato de CPF inválido. Use o formato: 123.456.789-00',
+  })
+  @Validate(IsCPF, {
+    message: 'CPF inválido ou não existe',
+  })
+  cpf: string;
+
+  @ApiProperty({
+    example: '(84) 98765-4321',
+    description: 'Telefone do usuário com DDD (formato: (XX) XXXXX-XXXX)',
+  })
+  @IsNotEmpty({ message: 'O telefone é obrigatório' })
+  @IsString({ message: 'O telefone deve ser uma string' })
+  @Matches(/\(\d{2}\)\s\d{4,5}-\d{4}$/, {
+    message: 'Formato de telefone inválido. Use: (XX) XXXX-XXXX para fixo ou (XX) XXXXX-XXXX para celular',
+  })
+  @Validate(IsTelefone, {message: ''})
+  telefone: string;
+
+  @ApiProperty({
+    example: '12345',
+    description: 'Número de matrícula do usuário (5 a 10 dígitos)',
+  })
+  @IsNotEmpty({ message: 'O número de matrícula é obrigatório' })
+  @IsString({ message: 'A matrícula deve ser uma string' })
+  @Matches(/^[0-9]{5,10}$/, {
+    message: 'A matrícula deve conter apenas números e ter entre 5 e 10 dígitos',
+  })
+  matricula: string;
 }
diff --git a/src/auth/dtos/auth-token-output.dto.ts b/src/auth/dtos/auth-token-output.dto.ts
index 859dada..a406d2b 100644
--- a/src/auth/dtos/auth-token-output.dto.ts
+++ b/src/auth/dtos/auth-token-output.dto.ts
@@ -23,13 +23,12 @@ export class AuthTokenOutput {
   refreshToken: string;
 }
 
-export class UserAccessTokenClaims {
-  @Expose()
+export interface UserAccessTokenClaims {
   id: string | number;
-  @Expose()
   username: string;
-  @Expose()
-  roles: Role[];
+  roles: string[];
+  permissions?: string[];
+  permissionScopes?: Record<string, string>;
 }
 
 export class UserRefreshTokenClaims {
diff --git a/src/auth/services/auth.service.ts b/src/auth/services/auth.service.ts
index 9c9f098..0e8d5d5 100644
--- a/src/auth/services/auth.service.ts
+++ b/src/auth/services/auth.service.ts
@@ -18,6 +18,7 @@ import { UserOutput, UsuarioAdapter } from '../adapters/usuario-adapter';
 import { RefreshTokenService } from './refresh-token.service';
 import { RefreshTokenInput } from '../dtos/auth-refresh-token-input.dto';
 import { Usuario } from '../../modules/usuario/entities/usuario.entity';
+import { PermissionService } from './permission.service';
 
 @Injectable()
 export class AuthService {
@@ -31,6 +32,7 @@ export class AuthService {
     private jwtService: JwtService,
     private configService: ConfigService,
     private readonly logger: AppLogger,
+    private readonly permissionService: PermissionService,
   ) {
     this.logger.setContext(AuthService.name);
 
@@ -142,8 +144,14 @@ export class AuthService {
       throw new UnauthorizedException('Esta conta de usuário foi desativada');
     }
 
-    // Converter para o formato esperado
-    return UsuarioAdapter.toUserAccessTokenClaims(usuario);
+    // Obter as permissões do usuário
+    const permissions = await this.permissionService.getUserPermissions(usuario.id);
+    
+    // Obter os escopos das permissões
+    const permissionScopes: Record<string, string> = {};
+    
+    // Converter para o formato esperado incluindo permissões
+    return UsuarioAdapter.toUserAccessTokenClaims(usuario, permissions, permissionScopes);
   }
 
   async login(ctx: RequestContext): Promise<AuthTokenOutput> {
@@ -189,7 +197,10 @@ export class AuthService {
       nome: input.name,
       email: input.username,
       senha: input.password,
-      role: (input.roles?.[0] as unknown as Role) || Role.CIDADAO,
+      role: (input.roles?.[0] as unknown as Role) || Role.TECNICO,
+      cpf: input.cpf,
+      telefone: input.telefone,
+      matricula: input.matricula,
     };
 
     // Criar o usuário
@@ -276,6 +287,16 @@ export class AuthService {
       sub: user.id,
       roles: user.roles,
     };
+    
+    // Adicionar permissões ao payload se disponíveis
+    if ('permissions' in user && user.permissions) {
+      payload['permissions'] = user.permissions;
+    }
+    
+    // Adicionar escopos de permissões ao payload se disponíveis
+    if ('permissionScopes' in user && user.permissionScopes) {
+      payload['permissionScopes'] = user.permissionScopes;
+    }
 
     // Garantir que estamos usando o algoritmo RS256 e a chave privada para assinar o token
     const privateKey = Buffer.from(
diff --git a/src/auth/strategies/jwt-auth.strategy.ts b/src/auth/strategies/jwt-auth.strategy.ts
index 7d98e12..71cedaf 100644
--- a/src/auth/strategies/jwt-auth.strategy.ts
+++ b/src/auth/strategies/jwt-auth.strategy.ts
@@ -44,10 +44,24 @@ export class JwtAuthStrategy extends PassportStrategy(
   async validate(payload: any): Promise<UserAccessTokenClaims> {
     // Passport automatically creates a user object, based on the value we return from the validate() method,
     // and assigns it to the Request object as req.user
-    return {
+    
+    // Criar o objeto de claims básico
+    const claims: UserAccessTokenClaims = {
       id: payload.sub,
       username: payload.username,
       roles: payload.roles,
     };
+    
+    // Extrair permissões se presentes no payload
+    if (payload.permissions) {
+      claims.permissions = payload.permissions;
+    }
+    
+    // Extrair escopos de permissões se presentes no payload
+    if (payload.permissionScopes) {
+      claims.permissionScopes = payload.permissionScopes;
+    }
+    
+    return claims;
   }
 }
diff --git a/src/main.ts b/src/main.ts
index fa94fb9..7c200b3 100644
--- a/src/main.ts
+++ b/src/main.ts
@@ -1,6 +1,6 @@
 import { NestFactory } from '@nestjs/core';
 import { AppModule } from './app.module';
-import { ValidationPipe, HttpException, HttpStatus, Logger } from '@nestjs/common';
+import { ValidationPipe, HttpException, HttpStatus, Logger, BadRequestException } from '@nestjs/common';
 import { ResponseInterceptor } from './shared/interceptors/response.interceptor';
 import { HttpExceptionFilter } from './shared/filters/http-exception.filter';
 import { setupSwagger } from './shared/configs/swagger';
@@ -9,51 +9,111 @@ import { ConfigService } from '@nestjs/config';
 import helmet from 'helmet';
 import compression from 'compression';
 import timeout from 'connect-timeout';
+import * as os from 'os';
+import * as fs from 'fs';
+import * as net from 'net';
 
+/**
+ * Verifica se uma porta está disponível
+ */
+async function isPortAvailable(port: number): Promise<boolean> {
+  return new Promise<boolean>((resolve) => {
+    const server = net.createServer();
+    server.once('error', (err: any) => {
+      server.close();
+      if (err.code === 'EADDRINUSE') {
+        resolve(false);
+      } else {
+        // Outro erro, vamos assumir que a porta está disponível
+        resolve(true);
+      }
+    });
+    
+    server.once('listening', () => {
+      server.close();
+      resolve(true);
+    });
+    
+    server.listen(port, '0.0.0.0');
+  });
+}
+
+/**
+ * Função principal de inicialização da aplicação
+ */
 async function bootstrap() {
   const logger = new Logger('Bootstrap');
-  logger.log('Iniciando aplicação PGBen...');
+  logger.log('✨ Iniciando aplicação PGBen...');
+  
+  // Diagnóstico do ambiente
+  logger.log('📊 Informações do Sistema:');
+  logger.log(` - Sistema: ${os.platform()} ${os.release()}`);
+  logger.log(` - Memória: ${Math.round(os.freemem() / 1024 / 1024)}MB livre de ${Math.round(os.totalmem() / 1024 / 1024)}MB`);
+  logger.log(` - CPUs: ${os.cpus().length} núcleos`);
+  logger.log(` - Node.js: ${process.version}`);
+  logger.log(` - Diretório: ${process.cwd()}`);
 
-  /** 1. Cria a aplicação NestJS com Express */
+  /** Cria a aplicação NestJS com Express */
   const app = await NestFactory.create(AppModule, {
     logger: ['error', 'warn', 'log', 'debug'],
     abortOnError: false,
   });
 
-  /** 2. Carrega configurações centralizadas */
+  /** Carrega configurações centralizadas */
   const configService = app.get(ConfigService);
-  const port = configService.get<number>('PORT', 3000);
+  let port = parseInt(process.env.APP_PORT || '3000', 10);
   const env = configService.get<string>('NODE_ENV', 'development');
   const isDev = env === 'development';
   
-  /** 3. Prefixo global */
+  // Verifica se a porta está disponível
+  const portAvailable = await isPortAvailable(port);
+  if (!portAvailable) {
+    logger.warn(`⚠️ Porta ${port} já está em uso!`);
+    // Em ambiente de desenvolvimento, podemos tentar outra porta
+    if (isDev) {
+      const newPort = port + 1;
+      logger.warn(`⚠️ Tentando porta alternativa: ${newPort}`);
+      if (await isPortAvailable(newPort)) {
+        logger.log(`✅ Porta ${newPort} está disponível, usando-a em vez de ${port}`);
+        port = newPort;
+      } else {
+        logger.error(`❌ Porta alternativa ${newPort} também está em uso!`);
+      }
+    }
+  } else {
+    logger.log(`✅ Porta ${port} está disponível`);
+  }
+  
+  /** Prefixo global */
   app.setGlobalPrefix('api');
 
-  /** 4. Middleware de segurança */
+  /** Middleware de segurança */
   app.use(helmet({
     contentSecurityPolicy: isDev ? false : undefined,
   }));
   app.use(compression()); // Compressão gzip
-  app.use(timeout('45s')); // Timeout global para requisições
+  // Configuração corrigida de timeout (apenas ativa o middleware)
+  app.use(timeout('45s')); // Timeout global para requisições - apenas ativa o middleware
   
-  /** 5. CORS */
+  /** CORS */
   app.enableCors({
     origin: isDev ? true : [
-      configService.get<string>('FRONTEND_URL', 'http://localhost:4200'),
+      configService.get<string>('FRONTEND_URL', 'http://localhost:5173'),
       'http://localhost:3000',
       'http://127.0.0.1:3000',
+      '0.0.0.0'
     ],
     methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
     credentials: true,
     allowedHeaders: 'Origin,X-Requested-With,Content-Type,Accept,Authorization',
   });
 
-  /** 6. Swagger */
+  /** Swagger */
   if (isDev || configService.get<boolean>('ENABLE_SWAGGER', false)) {
     setupSwagger(app);
   }
 
-  /** 7. Pipes / interceptors / filters globais */
+  /** Pipes / interceptors / filters globais */
   app.useGlobalPipes(
     new ValidationPipe({
       whitelist: true,
@@ -61,38 +121,224 @@ async function bootstrap() {
       transform: true,
       transformOptions: { enableImplicitConversion: true },
       exceptionFactory: (errors) => {
-        const messages = errors.map((err) => ({
-          property: err.property,
-          constraints: err.constraints || {},
-        }));
-        return new HttpException(
-          { statusCode: 400, message: 'Erro de validação', errors: messages },
-          HttpStatus.BAD_REQUEST,
-        );
+        // Mapear todos os erros de validação
+        const errorMessages = errors.map(error => {
+          // Se houver restrições, pegar a primeira mensagem de erro
+          if (error.constraints) {
+            const firstConstraintKey = Object.keys(error.constraints)[0];
+            return {
+              field: error.property,
+              message: error.constraints[firstConstraintKey],
+              value: error.value,
+            };
+          }
+          return {
+            field: error.property,
+            message: 'Erro de validação',
+            value: error.value,
+          };
+        });
+        
+        // Retornar um objeto de erro estruturado
+        throw new BadRequestException({
+          statusCode: 400,
+          message: 'Erro de validação',
+          errors: errorMessages,
+          error: 'Bad Request',
+        });
       },
     }),
   );
   app.useGlobalInterceptors(new ResponseInterceptor());
   app.useGlobalFilters(new HttpExceptionFilter());
   
-  // Middleware para garantir que requisições com timeout sejam encerradas
+  // Middleware para tratar timeout adequadamente
   app.use((req, res, next) => {
-    if (!req.timedout) next();
+    if (req.timedout) {
+      logger.warn(`⏰ Request timeout: ${req.method} ${req.originalUrl}`);
+      
+      if (!res.headersSent) {
+        return res.status(408).json({
+          statusCode: 408,
+          message: 'Request timeout - operação demorou mais que 45 segundos',
+          error: 'Request Timeout',
+          timestamp: new Date().toISOString(),
+          path: req.originalUrl
+        });
+      }
+      return; // Não chama next() se já teve timeout
+    }
+    
+    next(); // Só chama next() se NÃO teve timeout
+  });
+  
+  // Middleware de debug para requisições (ajuda no diagnóstico)
+  app.use((req, res, next) => {
+    logger.debug(`📝 ${req.method} ${req.originalUrl} - ${req.ip}`);
+    next();
   });
 
-  /** 8. Health-check (ignora falhas para não travar o bootstrap) */
+  /** Health-check (ignora falhas para não travar o bootstrap) */
   try {
     const health = app.get(HealthCheckService);
-    const redisOK = await health.isRedisAvailable();
+    
+    logger.log('🔍 Iniciando verificação de saúde dos serviços...');
+    
+    // Verificamos o Redis com timeout
+    let redisOK = false;
+    try {
+      const redisPromise = health.isRedisAvailable();
+      const timeoutPromise = new Promise<boolean>((_, reject) => {
+        setTimeout(() => reject(new Error('Timeout ao verificar Redis')), 5000);
+      });
+      
+      redisOK = await Promise.race([redisPromise, timeoutPromise]);
+    } catch (redisErr) {
+      logger.warn(`⚠️ Verificação do Redis falhou: ${redisErr.message}`);
+    }
+    
     health.logServicesStatus(redisOK);
   } catch (e) {
-    logger.warn(`Health-check falhou, mas continuando: ${e.message}`);
+    logger.warn(`⚠️ Health-check falhou, mas continuando: ${e.message}`);
   }
 
-  /** 9. Sobe o servidor */
-  const server = await app.listen(port, '0.0.0.0');
-  logger.log('============================================');
-  logger.log(`✅ Servidor online:  http://localhost:${port}`);
+  /** Sobe o servidor */
+  logger.log(`🚀 Tentando iniciar o servidor na porta ${port}...`);
+  
+  try {
+    // Verificamos se há pacotes necessários para teste
+    try {
+      await import('node-fetch');
+    } catch (e) {
+      logger.warn('⚠️ node-fetch não está instalado, instale-o para auto-testes de conectividade');
+      // Vamos continuar sem o auto-teste
+    }
+    
+    // Criamos um arquivo de diagnóstico
+    const logDir = './logs';
+    try {
+      if (!fs.existsSync(logDir)) {
+        fs.mkdirSync(logDir, { recursive: true });
+      }
+      fs.writeFileSync(
+        `${logDir}/server-startup-${new Date().toISOString().replace(/[:.]/g, '-')}.log`,
+        `Iniciando servidor PGBen na porta ${port}\n`+
+        `Ambiente: ${env}\n`+
+        `Sistema: ${os.platform()} ${os.release()}\n`+
+        `Node.js: ${process.version}\n`+
+        `Data: ${new Date().toISOString()}\n`
+      );
+    } catch (e) {
+      logger.warn(`⚠️ Não foi possível criar arquivo de log: ${e.message}`);
+    }
+    
+    // Inicia o servidor com tratamento específico de erros
+    const server = await app.listen(port, '0.0.0.0');
+    
+    // Verificação imediata do bind
+    const address = server.address();
+    logger.log(`✅ Servidor bind realizado:`, JSON.stringify(address, null, 2));
+    logger.log(`✅ Servidor iniciado com sucesso na porta ${port}`);
+    logger.log('============================================');
+    logger.log(`✅ Servidor online:  http://localhost:${port}`);
+    
+    // Auto-teste de conectividade (ajuda no diagnóstico)
+    setTimeout(async () => {
+      try {
+        const testUrls = [
+          `http://localhost:${port}/api`,
+          `http://127.0.0.1:${port}/api`
+        ];
+        
+        logger.log('🧪 Iniciando auto-teste de conectividade...');
+        
+        let allTestsFailed = true;
+        
+        for (const url of testUrls) {
+          try {
+            logger.log(`🧪 Testando: ${url}`);
+            
+            // Utilizamos o módulo http nativo para evitar dependências externas
+            const http = await import('http');
+            
+            const testPromise = new Promise((resolve, reject) => {
+              const req = http.get(url, (res) => {
+                logger.log(`✅ Auto-teste ${url} - Status: ${res.statusCode}`);
+                allTestsFailed = false;
+                resolve(res.statusCode);
+              });
+              
+              req.on('error', (err) => {
+                logger.error(`❌ Auto-teste ${url} - Erro: ${err.message}`);
+                reject(err);
+              });
+              
+              req.setTimeout(5000, () => {
+                req.destroy();
+                logger.error(`❌ Auto-teste ${url} - Erro: Timeout após 5 segundos`);
+                reject(new Error('Timeout'));
+              });
+            });
+            
+            await testPromise.catch(() => {});
+          } catch (err) {
+            logger.error(`❌ Auto-teste ${url} - Erro: ${err.message}`);
+          }
+        }
+        
+        if (allTestsFailed) {
+          logger.warn('⚠️ Todos os auto-testes falharam. Possíveis problemas:');
+          logger.warn('   1. Firewall bloqueando conexões locais');
+          logger.warn('   2. Middleware incorreto bloqueando requisições');
+          logger.warn('   3. Servidor não está realmente ouvindo na porta especificada');
+          logger.warn('⚠️ Executando verificação adicional de socket...');
+          
+          // Teste direto de socket TCP (sem HTTP)
+          try {
+            const net = await import('net');
+            const socket = new net.Socket();
+            
+            const connectPromise = new Promise<boolean>((resolve) => {
+              socket.connect(port, '127.0.0.1', () => {
+                logger.log('✅ Conexão TCP direta bem-sucedida! Servidor está ouvindo.');
+                socket.destroy();
+                resolve(true);
+              });
+              
+              socket.on('error', (err) => {
+                logger.error(`❌ Teste de socket falhou: ${err.message}`);
+                socket.destroy();
+                resolve(false);
+              });
+              
+              socket.setTimeout(3000, () => {
+                logger.error('❌ Teste de socket falhou: Timeout');
+                socket.destroy();
+                resolve(false);
+              });
+            });
+            
+            await connectPromise;
+          } catch (socketErr) {
+            logger.error(`❌ Erro ao testar socket: ${socketErr.message}`);
+          }
+        }
+      } catch (error) {
+        logger.error(`❌ Erro geral no auto-teste: ${error.message}`);
+      }
+    }, 3000);
+  } catch (error) {
+    logger.error(`❌ FALHA CRÍTICA ao fazer bind:`, error);
+    logger.error(`Stack trace:`, error.stack);
+    
+    // Diagnóstico de porta ocupada
+    if (error.code === 'EADDRINUSE') {
+      logger.error(`🚨 Porta ${port} já está em uso!`);
+      logger.error(`Execute: netstat -ano | findstr :${port} para ver o processo`);
+    }
+    
+    throw error;
+  }
   
   if (isDev || configService.get<boolean>('ENABLE_SWAGGER', false)) {
     logger.log(`✅ Swagger:          http://localhost:${port}/api-docs`);
@@ -101,7 +347,7 @@ async function bootstrap() {
   logger.log(`✅ Ambiente:         ${env}`);
   logger.log('============================================');
 
-  /** 10. Configuração para graceful shutdown */
+  /** Configuração para graceful shutdown */
   const signals = ['SIGTERM', 'SIGINT'];
   signals.forEach(signal => {
     process.on(signal, async () => {
diff --git a/src/modules/auditoria/auditoria.module.ts b/src/modules/auditoria/auditoria.module.ts
index 4703da3..a587e9f 100644
--- a/src/modules/auditoria/auditoria.module.ts
+++ b/src/modules/auditoria/auditoria.module.ts
@@ -1,9 +1,9 @@
 import {
+  Global,
   Module,
   NestModule,
   MiddlewareConsumer,
   RequestMethod,
-  Global,
 } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { BullModule } from '@nestjs/bull';
@@ -11,13 +11,18 @@ import { JwtModule } from '@nestjs/jwt';
 import { ConfigModule, ConfigService } from '@nestjs/config';
 import { ScheduleAdapterModule } from '../../shared/schedule/schedule-adapter.module';
 
+// ← ADICIONA: Importa o PermissionModule
+import { PermissionModule } from '../../auth/permission.module';
+
 // Entidades
 import { LogAuditoria } from './entities/log-auditoria.entity';
 
-// Serviços
+// Serviços Core
 import { AuditoriaService } from './services/auditoria.service';
 import { AuditoriaQueueService } from './services/auditoria-queue.service';
 import { AuditoriaQueueProcessor } from './services/auditoria-queue.processor';
+
+// Serviços Especializados
 import { AuditoriaSignatureService } from './services/auditoria-signature.service';
 import { AuditoriaExportacaoService } from './services/auditoria-exportacao.service';
 import { AuditoriaMonitoramentoService } from './services/auditoria-monitoramento.service';
@@ -27,14 +32,14 @@ import { AuditoriaController } from './controllers/auditoria.controller';
 import { AuditoriaExportacaoController } from './controllers/auditoria-exportacao.controller';
 import { AuditoriaMonitoramentoController } from './controllers/auditoria-monitoramento.controller';
 
-// Middleware e Interceptores
+// Middleware
 import { AuditoriaMiddleware } from './middlewares/auditoria.middleware';
 
 // Repositórios
 import { LogAuditoriaRepository } from './repositories/log-auditoria.repository';
 
 /**
- * Módulo de Auditoria
+ * Módulo de Auditoria Unificado
  *
  * Responsável por registrar e gerenciar logs de auditoria do sistema,
  * garantindo a rastreabilidade das operações e compliance com LGPD.
@@ -46,6 +51,7 @@ import { LogAuditoriaRepository } from './repositories/log-auditoria.repository'
  * - Particionamento de tabelas para melhor performance
  * - Exportação de logs em diferentes formatos
  * - Monitoramento de performance e integridade
+ * - Processamento assíncrono via filas
  *
  * Este módulo é global e deve ser importado apenas pelo módulo principal (AppModule).
  * Os serviços são exportados para serem usados em qualquer outro módulo sem necessidade de reimportação.
@@ -53,24 +59,35 @@ import { LogAuditoriaRepository } from './repositories/log-auditoria.repository'
 @Global()
 @Module({
   imports: [
+    PermissionModule,
+    
+    // Configuração do TypeORM para entidades do módulo
     TypeOrmModule.forFeature([LogAuditoria]),
-    // Registramos a fila de auditoria
-    BullModule.registerQueue({
+    
+    // Configuração assíncrona do BullModule
+    BullModule.registerQueueAsync({
       name: 'auditoria',
+      imports: [ConfigModule],
+      useFactory: (configService: ConfigService) => ({
+        redis: {
+          host: configService.get<string>('REDIS_HOST', 'localhost'),
+          port: configService.get<number>('REDIS_PORT', 6379),
+        },
+      }),
+      inject: [ConfigService],
     }),
+    
+    // Módulo de agendamento de tarefas
     ScheduleAdapterModule,
+    
+    // Configuração assíncrona do JwtModule
     JwtModule.registerAsync({
       imports: [ConfigModule],
+      useFactory: (configService: ConfigService) => ({
+        secret: configService.get<string>('JWT_SECRET'),
+        signOptions: { expiresIn: '1d' },
+      }),
       inject: [ConfigService],
-      useFactory: (configService: ConfigService) => {
-        const secret = configService.get<string>('AUDIT_SIGNING_KEY') || 
-                      configService.get<string>('JWT_SECRET') || 
-                      'default-secret-key';
-        return {
-          secret,
-          signOptions: { expiresIn: '100y' },
-        };
-      },
     }),
   ],
   controllers: [
@@ -79,19 +96,25 @@ import { LogAuditoriaRepository } from './repositories/log-auditoria.repository'
     AuditoriaMonitoramentoController,
   ],
   providers: [
+    // Serviços Core
     AuditoriaService,
     AuditoriaQueueService,
-    AuditoriaQueueProcessor, // Agora usa padrão singleton para evitar duplicação
+    AuditoriaQueueProcessor,
+    
+    // Repositórios
+    LogAuditoriaRepository,
+    
+    // Serviços Especializados
     AuditoriaSignatureService,
     AuditoriaExportacaoService,
     AuditoriaMonitoramentoService,
-    LogAuditoriaRepository,
   ],
   exports: [
+    // Exporta os serviços principais para uso em outros módulos
     AuditoriaService,
     AuditoriaQueueService,
-    AuditoriaSignatureService,
     LogAuditoriaRepository,
+    AuditoriaSignatureService,
   ],
 })
 export class AuditoriaModule implements NestModule {
@@ -109,4 +132,4 @@ export class AuditoriaModule implements NestModule {
       )
       .forRoutes({ path: '*', method: RequestMethod.ALL });
   }
-}
+}
\ No newline at end of file
diff --git a/src/modules/auditoria/controllers/auditoria.controller.ts b/src/modules/auditoria/controllers/auditoria.controller.ts
index 149fcb9..9f5854c 100644
--- a/src/modules/auditoria/controllers/auditoria.controller.ts
+++ b/src/modules/auditoria/controllers/auditoria.controller.ts
@@ -20,9 +20,9 @@ import { AuditoriaService } from '../services/auditoria.service';
 import { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';
 import { QueryLogAuditoriaDto } from '../dto/query-log-auditoria.dto';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
-import { Roles } from '../../../auth/decorators/role.decorator';
-import { Role } from '../../../shared/enums/role.enum';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 
 /**
  * Controlador de Auditoria
@@ -32,7 +32,7 @@ import { Role } from '../../../shared/enums/role.enum';
  */
 @ApiTags('Auditoria')
 @Controller('v1/auditoria')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class AuditoriaController {
   constructor(private readonly auditoriaService: AuditoriaService) {}
@@ -42,7 +42,10 @@ export class AuditoriaController {
    * Normalmente os logs são criados automaticamente pelo middleware
    */
   @Post()
-  @Roles(Role.ADMIN)
+  @RequiresPermission({
+    permissionName: 'auditoria.log.criar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Cria um novo log de auditoria manualmente' })
   @ApiResponse({
     status: 201,
@@ -71,7 +74,10 @@ export class AuditoriaController {
    * Busca logs de auditoria com base nos filtros fornecidos
    */
   @Get()
-  @Roles(Role.ADMIN)
+  @RequiresPermission({
+    permissionName: 'auditoria.log.listar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Busca logs de auditoria' })
   @ApiResponse({ status: 200, description: 'Lista de logs de auditoria' })
   @ApiResponse({ status: 403, description: 'Acesso negado' })
@@ -83,7 +89,10 @@ export class AuditoriaController {
    * Busca um log de auditoria pelo ID
    */
   @Get(':id')
-  @Roles(Role.ADMIN)
+  @RequiresPermission({
+    permissionName: 'auditoria.log.visualizar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Busca um log de auditoria pelo ID' })
   @ApiParam({ name: 'id', description: 'ID do log de auditoria' })
   @ApiResponse({ status: 200, description: 'Log de auditoria encontrado' })
@@ -97,7 +106,10 @@ export class AuditoriaController {
    * Busca logs de auditoria por entidade
    */
   @Get('entidade/:entidade/:id')
-  @Roles(Role.ADMIN)
+  @RequiresPermission({
+    permissionName: 'auditoria.log.entidade.visualizar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Busca logs de auditoria por entidade' })
   @ApiParam({ name: 'entidade', description: 'Nome da entidade' })
   @ApiParam({ name: 'id', description: 'ID da entidade' })
@@ -114,7 +126,10 @@ export class AuditoriaController {
    * Busca logs de auditoria por usuário
    */
   @Get('usuario/:id')
-  @Roles(Role.ADMIN)
+  @RequiresPermission({
+    permissionName: 'auditoria.log.usuario.visualizar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Busca logs de auditoria por usuário' })
   @ApiParam({ name: 'id', description: 'ID do usuário' })
   @ApiResponse({
@@ -130,7 +145,10 @@ export class AuditoriaController {
    * Gera relatório de acessos a dados sensíveis por período
    */
   @Get('relatorios/dados-sensiveis')
-  @Roles(Role.ADMIN)
+  @RequiresPermission({
+    permissionName: 'auditoria.relatorio.dados-sensiveis',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({
     summary: 'Gera relatório de acessos a dados sensíveis por período',
   })
diff --git a/src/modules/auditoria/middlewares/auditoria.middleware.ts b/src/modules/auditoria/middlewares/auditoria.middleware.ts
index 260cce6..e9ed5d1 100644
--- a/src/modules/auditoria/middlewares/auditoria.middleware.ts
+++ b/src/modules/auditoria/middlewares/auditoria.middleware.ts
@@ -4,10 +4,9 @@ import { AuditoriaService } from '../services/auditoria.service';
 import { AuditoriaQueueService } from '../services/auditoria-queue.service';
 import { TipoOperacao } from '../enums/tipo-operacao.enum';
 import { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';
-import { BaseDto } from '../../../shared/dtos/base.dto';
 
 /**
- * Middleware de Auditoria
+ * Middleware de Auditoria - VERSÃO CORRIGIDA
  *
  * Responsável por interceptar as requisições HTTP e registrar logs de auditoria
  * automaticamente, garantindo a rastreabilidade das operações realizadas no sistema.
@@ -16,15 +15,16 @@ import { BaseDto } from '../../../shared/dtos/base.dto';
 export class AuditoriaMiddleware implements NestMiddleware {
   private readonly logger = new Logger(AuditoriaMiddleware.name);
 
-  // Lista de endpoints que não devem ser auditados (para evitar poluição de logs)
+  // Lista de endpoints que não devem ser auditados
   private readonly excludedEndpoints = [
-    '/api/v1/health',
-    '/api/v1/metrics',
+    '/api/health',
+    '/api/metrics',
     '/api-docs',
     '/api/v1/auth/login',
+    '/api/v1/auditoria/monitoramento', // Evitar recursão
   ];
 
-  // Lista de campos sensíveis que devem ser monitorados (para compliance com LGPD)
+  // Lista de campos sensíveis
   private readonly camposSensiveis = [
     'cpf',
     'rg',
@@ -46,115 +46,156 @@ export class AuditoriaMiddleware implements NestMiddleware {
   ) {}
 
   /**
-   * Método principal do middleware que intercepta as requisições
+   * Método principal do middleware - VERSÃO CORRIGIDA
    */
-  async use(req: Request, res: Response, next: NextFunction) {
-    // Verifica se o endpoint deve ser auditado
-    if (this.shouldAudit(req)) {
-      // Captura dados da requisição antes de processá-la
-      const { method, originalUrl, body, user, ip } = req;
-      const userAgent = req.headers['user-agent'] as string;
+  use(req: Request, res: Response, next: NextFunction) {
+    // ← CORREÇÃO: Remover async/await da assinatura principal
+    
+    // Verifica se deve auditar ANTES de fazer qualquer coisa
+    if (!this.shouldAudit(req)) {
+      return next(); // ← CORREÇÃO: Return direto sem processamento
+    }
 
-      // Determina o tipo de operação com base no método HTTP
+    try {
+      // Captura dados da requisição
+      const { method, originalUrl, body, user } = req;
+      const ip = req.ip || req.connection.remoteAddress || 'desconhecido'; // ← CORREÇÃO: Garante string
+      const userAgent = req.headers['user-agent'] as string;
       const tipoOperacao = this.mapHttpMethodToOperationType(method);
-
-      // Extrai informações da entidade com base na URL
       const { entidade, entidadeId } = this.extractEntityInfo(originalUrl);
-
-      // Verifica se há dados sensíveis no corpo da requisição
       const dadosSensiveis = this.detectarDadosSensiveis(body);
 
-      // Captura a resposta original para auditar após o processamento
-      const originalSend = res.send;
+      // ← CORREÇÃO: Usar uma abordagem não-intrusiva para capturar resposta
+      let responseBody: any = undefined;
 
-      res.send = function (body) {
-        res.locals.responseBody = body;
-        return originalSend.call(this, body);
+      // Intercepta res.json de forma mais segura
+      const originalJson = res.json;
+      res.json = function(body) {
+        responseBody = body;
+        return originalJson.call(this, body);
       };
 
-      // Continua o processamento da requisição
+      // ← CORREÇÃO: Configurar o listener ANTES de chamar next()
+      res.on('finish', () => {
+        // ← CORREÇÃO: Usar setImmediate para não bloquear o ciclo de evento
+        setImmediate(() => {
+          this.processarAuditoriaAsync(
+            method,
+            originalUrl,
+            body,
+            responseBody,
+            user,
+            ip,
+            userAgent,
+            tipoOperacao,
+            entidade,
+            entidadeId,
+            dadosSensiveis,
+            res.statusCode
+          ).catch(error => {
+            // ← CORREÇÃO: Capturar erros sem travar a aplicação
+            this.logger.error(
+              `Erro ao processar auditoria: ${error.message}`,
+              error.stack,
+            );
+          });
+        });
+      });
+
+      // ← CORREÇÃO: Chamar next() após configurar tudo
       next();
 
-      // Após o processamento, registra o log de auditoria
-      res.on('finish', async () => {
-        try {
-          // Obtém o código de status da resposta
-          const statusCode = res.statusCode;
-
-          // Só registra operações bem-sucedidas (códigos 2xx)
-          if (statusCode >= 200 && statusCode < 300) {
-            // Extrai dados da resposta
-            let responseData: Record<string, any> | undefined = undefined;
-            if (res.locals.responseBody) {
-              try {
-                if (typeof res.locals.responseBody === 'string') {
-                  responseData = JSON.parse(res.locals.responseBody);
-                } else {
-                  responseData = res.locals.responseBody;
-                }
-              } catch (e) {
-                this.logger.warn(
-                  `Erro ao parsear corpo da resposta: ${e.message}`,
-                );
-              }
-            }
-
-            // Cria uma instância do DTO de log de auditoria
-            const logAuditoriaDto = CreateLogAuditoriaDto.plainToInstance(
-              {
-                tipo_operacao: tipoOperacao,
-                entidade_afetada: entidade,
-                entidade_id: entidadeId || '',
-                dados_anteriores:
-                  method === 'PUT' || method === 'PATCH' ? body : undefined,
-                dados_novos:
-                  method === 'POST' || method === 'PUT' || method === 'PATCH'
-                    ? responseData
-                    : undefined,
-                usuario_id: user?.id,
-                ip_origem: ip,
-                user_agent: userAgent,
-                endpoint: originalUrl,
-                metodo_http: method,
-                descricao: `${method} em ${entidade}${entidadeId ? ` (ID: ${entidadeId})` : ''}`,
-                dados_sensiveis_acessados:
-                  dadosSensiveis && dadosSensiveis.length > 0
-                    ? dadosSensiveis
-                    : undefined,
-              },
-              CreateLogAuditoriaDto,
-            );
+    } catch (error) {
+      // ← CORREÇÃO: Em caso de erro, apenas logar e continuar
+      this.logger.error(
+        `Erro no middleware de auditoria: ${error.message}`,
+        error.stack,
+      );
+      next(); // Continuar mesmo com erro
+    }
+  }
 
-            // Enfileira o log de auditoria para processamento assíncrono
-            await this.auditoriaQueueService.enfileirarLogAuditoria(
-              logAuditoriaDto,
-            );
+  /**
+   * Processa a auditoria de forma assíncrona e isolada
+   */
+  private async processarAuditoriaAsync(
+    method: string,
+    originalUrl: string,
+    body: any,
+    responseBody: any,
+    user: any,
+    ip: string,
+    userAgent: string,
+    tipoOperacao: TipoOperacao,
+    entidade: string,
+    entidadeId: string | undefined,
+    dadosSensiveis: string[],
+    statusCode: number
+  ): Promise<void> {
+    try {
+      // Só registra operações bem-sucedidas
+      if (statusCode < 200 || statusCode >= 300) {
+        return;
+      }
 
-            // Se houver acesso a dados sensíveis, enfileira para processamento assíncrono
-            if (dadosSensiveis.length > 0 && user?.id) {
-              await this.auditoriaQueueService.enfileirarAcessoDadosSensiveis(
-                user.id,
-                entidade,
-                entidadeId || '',
-                dadosSensiveis,
-                ip || 'desconhecido',
-                userAgent,
-                originalUrl,
-                method,
-              );
-            }
-          }
-        } catch (error) {
-          // Em caso de erro, apenas loga e não interrompe o fluxo da aplicação
+      // ← CORREÇÃO: Criar DTO de forma simples, sem plainToInstance
+      const logAuditoriaDto: CreateLogAuditoriaDto = {
+        tipo_operacao: tipoOperacao,
+        entidade_afetada: entidade,
+        entidade_id: entidadeId || '',
+        dados_anteriores: (method === 'PUT' || method === 'PATCH') ? body : undefined,
+        dados_novos: (method === 'POST' || method === 'PUT' || method === 'PATCH') ? responseBody : undefined,
+        usuario_id: user?.id,
+        ip_origem: ip, // ← Agora sempre será string
+        user_agent: userAgent,
+        endpoint: originalUrl,
+        metodo_http: method,
+        descricao: `${method} em ${entidade}${entidadeId ? ` (ID: ${entidadeId})` : ''}`,
+        dados_sensiveis_acessados: dadosSensiveis.length > 0 ? dadosSensiveis : undefined,
+        validar: function (validationGroup?: string): void {
+          throw new Error('Function not implemented.');
+        }
+      };
+
+      // ← CORREÇÃO: Usar Promise.allSettled para não travar se uma falhar
+      const promises = [
+        this.auditoriaQueueService.enfileirarLogAuditoria(logAuditoriaDto)
+      ];
+
+      // Se houver dados sensíveis, adiciona à fila
+      if (dadosSensiveis.length > 0 && user?.id) {
+        promises.push(
+          this.auditoriaQueueService.enfileirarAcessoDadosSensiveis(
+            user.id,
+            entidade,
+            entidadeId || '',
+            dadosSensiveis,
+            ip, // ← Agora sempre será string
+            userAgent,
+            originalUrl,
+            method,
+          )
+        );
+      }
+
+      // Executa todas as operações em paralelo
+      const results = await Promise.allSettled(promises);
+      
+      // Loga erros das operações que falharam
+      results.forEach((result, index) => {
+        if (result.status === 'rejected') {
           this.logger.error(
-            `Erro ao registrar log de auditoria: ${error.message}`,
-            error.stack,
+            `Erro na operação de auditoria ${index}: ${result.reason.message}`,
+            result.reason.stack,
           );
         }
       });
-    } else {
-      // Se não for para auditar, apenas continua o fluxo
-      next();
+
+    } catch (error) {
+      this.logger.error(
+        `Erro crítico no processamento de auditoria: ${error.message}`,
+        error.stack,
+      );
     }
   }
 
@@ -280,4 +321,4 @@ export class AuditoriaMiddleware implements NestMiddleware {
 
     return Array.from(camposEncontrados);
   }
-}
+}
\ No newline at end of file
diff --git a/src/modules/auditoria/repositories/log-auditoria.repository.ts b/src/modules/auditoria/repositories/log-auditoria.repository.ts
index 957cd9f..d63a0b0 100644
--- a/src/modules/auditoria/repositories/log-auditoria.repository.ts
+++ b/src/modules/auditoria/repositories/log-auditoria.repository.ts
@@ -1,11 +1,10 @@
-import { Injectable, Logger } from '@nestjs/common';
+import { Injectable, Logger, Inject, Optional } from '@nestjs/common';
 import { InjectRepository } from '@nestjs/typeorm';
 import { Repository, Between, FindOptionsWhere, Raw } from 'typeorm';
 import { LogAuditoria } from '../entities/log-auditoria.entity';
 import { TipoOperacao } from '../enums/tipo-operacao.enum';
 import { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';
 import { QueryLogAuditoriaDto } from '../dto/query-log-auditoria.dto';
-import { AuditoriaSignatureService } from '../services/auditoria-signature.service';
 import * as zlib from 'zlib';
 import { promisify } from 'util';
 
@@ -28,7 +27,6 @@ export class LogAuditoriaRepository {
   constructor(
     @InjectRepository(LogAuditoria)
     private readonly repository: Repository<LogAuditoria>,
-    private readonly signatureService: AuditoriaSignatureService,
   ) {}
 
   /**
@@ -47,16 +45,10 @@ export class LogAuditoriaRepository {
       // Comprimir dados grandes se necessário
       await this.compressLogDataIfNeeded(logAuditoria);
 
-      // Salvar o log
+      // Salvar o log sem assinatura para evitar dependência circular
       const savedLog = await this.repository.save(logAuditoria);
-
-      // Assinar o log para garantir integridade
-      const assinatura = await this.signatureService.assinarLog(savedLog);
-
-      // Armazenar a assinatura (em uma implementação real, seria em uma tabela separada)
-      this.logger.debug(
-        `Log ${savedLog.id} assinado com sucesso: ${assinatura.substring(0, 20)}...`,
-      );
+      
+      this.logger.debug(`Log ${savedLog.id} criado com sucesso`);
 
       return savedLog;
     } catch (error) {
diff --git a/src/modules/auditoria/services/auditoria-queue.processor.ts b/src/modules/auditoria/services/auditoria-queue.processor.ts
index 331ecfd..b0255f3 100644
--- a/src/modules/auditoria/services/auditoria-queue.processor.ts
+++ b/src/modules/auditoria/services/auditoria-queue.processor.ts
@@ -1,9 +1,7 @@
 import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
-import { InjectRepository } from '@nestjs/typeorm';
 import { InjectQueue } from '@nestjs/bull';
 import { Job, Queue } from 'bull';
-import { Repository } from 'typeorm';
-import { LogAuditoria } from '../entities/log-auditoria.entity';
+import { LogAuditoriaRepository } from '../repositories/log-auditoria.repository';
 import { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';
 import { TipoOperacao } from '../enums/tipo-operacao.enum';
 import { registeredProcessors } from '../../../config/bull.config';
@@ -24,8 +22,8 @@ export class AuditoriaQueueProcessor implements OnModuleInit {
   private readonly logger = new Logger(AuditoriaQueueProcessor.name);
 
   constructor(
-    @InjectRepository(LogAuditoria)
-    private readonly logAuditoriaRepository: Repository<LogAuditoria>,
+    // ← MUDANÇA: Use o repository customizado em vez do TypeORM direto
+    private readonly logAuditoriaRepository: LogAuditoriaRepository,
     @InjectQueue('auditoria')
     private readonly auditoriaQueue: Queue,
   ) {}
@@ -68,8 +66,6 @@ export class AuditoriaQueueProcessor implements OnModuleInit {
    *
    * @param job Trabalho contendo os dados do log de auditoria
    */
-  // Removemos o decorador @Process para evitar duplicação
-  // O processamento será feito manualmente no construtor
   async processarLogAuditoria(job: Job<CreateLogAuditoriaDto>): Promise<void> {
     try {
       const logData = job.data;
@@ -77,11 +73,8 @@ export class AuditoriaQueueProcessor implements OnModuleInit {
         `Processando log de auditoria: ${logData.entidade_afetada} - ${logData.tipo_operacao}`,
       );
 
-      // Cria uma nova instância de LogAuditoria com os dados recebidos
-      const logAuditoria = this.logAuditoriaRepository.create(logData);
-
-      // Salva o log no banco de dados
-      const savedLog = await this.logAuditoriaRepository.save(logAuditoria);
+      // ← MUDANÇA: Use o método create do repository customizado
+      const savedLog = await this.logAuditoriaRepository.create(logData);
 
       this.logger.debug(
         `Log de auditoria processado com sucesso: ID ${savedLog.id}`,
@@ -101,8 +94,6 @@ export class AuditoriaQueueProcessor implements OnModuleInit {
    *
    * @param job Trabalho contendo os dados de acesso a dados sensíveis
    */
-  // Removemos o decorador @Process para evitar duplicação
-  // O processamento será feito manualmente no onModuleInit
   async processarAcessoDadosSensiveis(job: Job<any>): Promise<void> {
     try {
       const {
@@ -121,30 +112,31 @@ export class AuditoriaQueueProcessor implements OnModuleInit {
         `Processando acesso a dados sensíveis: ${entidade} - Campos: ${camposSensiveis.join(', ')}`,
       );
 
-      // Cria um log específico para acesso a dados sensíveis
-      // Criamos primeiro uma nova instância da entidade
-      const logAuditoria = new LogAuditoria();
-      
-      // Preenchemos os dados manualmente
-      logAuditoria.tipo_operacao = TipoOperacao.ACCESS;
-      logAuditoria.entidade_afetada = entidade;
-      logAuditoria.entidade_id = entidadeId;
-      logAuditoria.dados_anteriores = {};
-      logAuditoria.dados_novos = {};
-      logAuditoria.usuario_id = usuarioId;
-      logAuditoria.ip_origem = ip;
-      logAuditoria.user_agent = userAgent;
-      logAuditoria.endpoint = endpoint;
-      logAuditoria.metodo_http = metodo;
-      logAuditoria.dados_sensiveis_acessados = camposSensiveis;
-      logAuditoria.data_hora = timestamp || new Date();
-      logAuditoria.descricao = `Acesso a dados sensíveis (${camposSensiveis.join(', ')}) da entidade ${entidade}`;
+      // ← MUDANÇA: Crie um DTO e use o repository customizado
+      const createLogDto: CreateLogAuditoriaDto = {
+        tipo_operacao: TipoOperacao.ACCESS,
+        entidade_afetada: entidade,
+        entidade_id: entidadeId,
+        dados_anteriores: {},
+        dados_novos: {},
+        usuario_id: usuarioId,
+        ip_origem: ip,
+        user_agent: userAgent,
+        endpoint: endpoint,
+        metodo_http: metodo,
+        dados_sensiveis_acessados: camposSensiveis,
+        data_hora: timestamp || new Date(),
+        descricao: `Acesso a dados sensíveis (${camposSensiveis.join(', ')}) da entidade ${entidade}`,
+        validar: function (validationGroup?: string): void {
+          throw new Error('Function not implemented.');
+        }
+      };
 
-      // Salva o log no banco de dados
-      await this.logAuditoriaRepository.save(logAuditoria);
+      // Use o repository customizado
+      const savedLog = await this.logAuditoriaRepository.create(createLogDto);
 
       this.logger.debug(
-        `Acesso a dados sensíveis registrado com sucesso: ID ${logAuditoria.id}`,
+        `Acesso a dados sensíveis registrado com sucesso: ID ${savedLog.id}`,
       );
     } catch (error) {
       this.logger.error(
@@ -155,4 +147,4 @@ export class AuditoriaQueueProcessor implements OnModuleInit {
       throw error;
     }
   }
-}
+}
\ No newline at end of file
diff --git a/src/modules/beneficio/beneficio.module.ts b/src/modules/beneficio/beneficio.module.ts
index 9ca8630..f3a0951 100644
--- a/src/modules/beneficio/beneficio.module.ts
+++ b/src/modules/beneficio/beneficio.module.ts
@@ -1,7 +1,8 @@
 import { Module } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
-import { BeneficioController } from './controllers/beneficio.controller';
-import { BeneficioService } from './services/beneficio.service';
+import { AuthModule } from '@/auth/auth.module'
+
+// Entidades
 import { TipoBeneficio } from './entities/tipo-beneficio.entity';
 import { RequisitoDocumento } from './entities/requisito-documento.entity';
 import { FluxoBeneficio } from './entities/fluxo-beneficio.entity';
@@ -9,15 +10,42 @@ import { CampoDinamicoBeneficio } from './entities/campo-dinamico-beneficio.enti
 import { VersaoSchemaBeneficio } from './entities/versao-schema-beneficio.entity';
 import { SolicitacaoBeneficio } from './entities/solicitacao-beneficio.entity';
 import { HistoricoSolicitacaoBeneficio } from './entities/historico-solicitacao.entity';
+import { EspecificacaoNatalidade } from './entities/especificacao-natalidade.entity';
+import { EspecificacaoAluguelSocial } from './entities/especificacao-aluguel-social.entity';
+import { EspecificacaoFuneral } from './entities/especificacao-funeral.entity';
+import { EspecificacaoCestaBasica } from './entities/especificacao-cesta-basica.entity';
+
+// Controladores
+import { BeneficioController } from './controllers/beneficio.controller';
 import { CampoDinamicoController } from './controllers/campo-dinamico.controller';
 import { FormularioDinamicoController } from './controllers/formulario-dinamico.controller';
 import { SolicitacaoBeneficioController } from './controllers/solicitacao-beneficio.controller';
 import { ExportacaoController } from './controllers/exportacao.controller';
+import { EspecificacaoNatalidadeController } from './controllers/especificacao-natalidade.controller';
+import { EspecificacaoAluguelSocialController } from './controllers/especificacao-aluguel-social.controller';
+import { EspecificacaoFuneralController } from './controllers/especificacao-funeral.controller';
+import { EspecificacaoCestaBasicaController } from './controllers/especificacao-cesta-basica.controller';
+import { FormularioCondicionalController } from './controllers/formulario-condicional.controller';
+
+// Serviços
+import { BeneficioService } from './services/beneficio.service';
 import { CampoDinamicoService } from './services/campo-dinamico.service';
 import { ValidacaoDinamicaService } from './services/validacao-dinamica.service';
 import { DadosDinamicosService } from './services/dados-dinamicos.service';
 import { ExportacaoService } from './services/exportacao.service';
+import { FormularioCondicionalService } from './services/formulario-condicional.service';
+import { EspecificacaoNatalidadeService } from './services/especificacao-natalidade.service';
+import { EspecificacaoAluguelSocialService } from './services/especificacao-aluguel-social.service';
+import { EspecificacaoFuneralService } from './services/especificacao-funeral.service';
+import { EspecificacaoCestaBasicaService } from './services/especificacao-cesta-basica.service';
+
+// Repositórios
 import { TipoBeneficioRepository } from './repositories/tipo-beneficio.repository';
+import { CampoDinamicoRepository } from './repositories/campo-dinamico.repository';
+import { EspecificacaoNatalidadeRepository } from './repositories/especificacao-natalidade.repository';
+import { EspecificacaoAluguelSocialRepository } from './repositories/especificacao-aluguel-social.repository';
+import { EspecificacaoFuneralRepository } from './repositories/especificacao-funeral.repository';
+import { EspecificacaoCestaBasicaRepository } from './repositories/especificacao-cesta-basica.repository';
 
 /**
  * Módulo de benefícios
@@ -35,7 +63,12 @@ import { TipoBeneficioRepository } from './repositories/tipo-beneficio.repositor
       VersaoSchemaBeneficio,
       SolicitacaoBeneficio,
       HistoricoSolicitacaoBeneficio,
+      EspecificacaoNatalidade,
+      EspecificacaoAluguelSocial,
+      EspecificacaoFuneral,
+      EspecificacaoCestaBasica,
     ]),
+    AuthModule,
   ],
   controllers: [
     BeneficioController,
@@ -43,6 +76,11 @@ import { TipoBeneficioRepository } from './repositories/tipo-beneficio.repositor
     FormularioDinamicoController,
     SolicitacaoBeneficioController,
     ExportacaoController,
+    EspecificacaoNatalidadeController,
+    EspecificacaoAluguelSocialController,
+    EspecificacaoFuneralController,
+    EspecificacaoCestaBasicaController,
+    FormularioCondicionalController,
   ],
   providers: [
     BeneficioService,
@@ -50,13 +88,28 @@ import { TipoBeneficioRepository } from './repositories/tipo-beneficio.repositor
     ValidacaoDinamicaService,
     DadosDinamicosService,
     ExportacaoService,
+    EspecificacaoNatalidadeService,
+    EspecificacaoAluguelSocialService,
+    EspecificacaoFuneralService,
+    EspecificacaoCestaBasicaService,
+    FormularioCondicionalService,
     TipoBeneficioRepository,
+    CampoDinamicoRepository,
+    EspecificacaoNatalidadeRepository,
+    EspecificacaoAluguelSocialRepository,
+    EspecificacaoFuneralRepository,
+    EspecificacaoCestaBasicaRepository,
   ],
   exports: [
     BeneficioService,
     CampoDinamicoService,
     ValidacaoDinamicaService,
     DadosDinamicosService,
+    EspecificacaoNatalidadeService,
+    EspecificacaoAluguelSocialService,
+    EspecificacaoFuneralService,
+    EspecificacaoCestaBasicaService,
+    FormularioCondicionalService,
   ],
 })
 export class BeneficioModule {}
diff --git a/src/modules/beneficio/controllers/beneficio.controller.ts b/src/modules/beneficio/controllers/beneficio.controller.ts
index c04612e..e67b23d 100644
--- a/src/modules/beneficio/controllers/beneficio.controller.ts
+++ b/src/modules/beneficio/controllers/beneficio.controller.ts
@@ -22,9 +22,9 @@ import { UpdateTipoBeneficioDto } from '../dto/update-tipo-beneficio.dto';
 import { CreateRequisitoDocumentoDto } from '../dto/create-requisito-documento.dto';
 import { ConfigurarFluxoDto } from '../dto/configurar-fluxo.dto';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
-import { Roles } from '../../../auth/decorators/role.decorator';
-import { Role } from '../../../shared/enums/role.enum';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 
 /**
  * Controlador de benefícios
@@ -33,7 +33,7 @@ import { Role } from '../../../shared/enums/role.enum';
  */
 @ApiTags('Benefícios')
 @Controller('v1/beneficio')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class BeneficioController {
   constructor(private readonly beneficioService: BeneficioService) {}
@@ -42,6 +42,10 @@ export class BeneficioController {
    * Lista todos os tipos de benefícios
    */
   @Get()
+  @RequiresPermission({
+    permissionName: 'beneficio.listar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ 
     summary: 'Listar tipos de benefícios',
     description: 'Retorna uma lista paginada de todos os tipos de benefícios cadastrados no sistema.'
@@ -97,6 +101,10 @@ export class BeneficioController {
    * Obtém detalhes de um tipo de benefício específico
    */
   @Get(':id')
+  @RequiresPermission({
+    permissionName: 'beneficio.visualizar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ 
     summary: 'Obter detalhes de um benefício',
     description: 'Retorna os detalhes completos de um tipo de benefício específico.'
@@ -127,7 +135,10 @@ export class BeneficioController {
    * Cria um novo tipo de benefício
    */
   @Post()
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'beneficio.criar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ 
     summary: 'Criar novo tipo de benefício',
     description: 'Cria um novo tipo de benefício no sistema.'
@@ -175,7 +186,10 @@ export class BeneficioController {
    * Atualiza um tipo de benefício existente
    */
   @Put(':id')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'beneficio.editar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ 
     summary: 'Atualizar tipo de benefício existente',
     description: 'Atualiza os dados de um tipo de benefício existente.'
@@ -235,6 +249,10 @@ export class BeneficioController {
    * Lista requisitos documentais de um benefício
    */
   @Get(':id/requisitos')
+  @RequiresPermission({
+    permissionName: 'beneficio.requisito.listar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Listar requisitos documentais' })
   @ApiResponse({
     status: 200,
@@ -249,7 +267,10 @@ export class BeneficioController {
    * Adiciona requisito documental a um benefício
    */
   @Post(':id/requisitos')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'beneficio.requisito.adicionar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Adicionar requisito documental' })
   @ApiResponse({ status: 201, description: 'Requisito adicionado com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
@@ -265,7 +286,10 @@ export class BeneficioController {
    * Configura fluxo de aprovação de um benefício
    */
   @Put(':id/fluxo')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'beneficio.fluxo.configurar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Configurar fluxo de aprovação' })
   @ApiResponse({ status: 200, description: 'Fluxo configurado com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
diff --git a/src/modules/cidadao/cidadao.module.ts b/src/modules/cidadao/cidadao.module.ts
index d024548..f9c59d4 100644
--- a/src/modules/cidadao/cidadao.module.ts
+++ b/src/modules/cidadao/cidadao.module.ts
@@ -10,6 +10,7 @@ import { CacheModule } from '../../shared/cache';
 import { CidadaoAuditInterceptor } from './interceptors/cidadao-audit.interceptor';
 import { PapelCidadaoService } from './services/papel-cidadao.service';
 import { PapelCidadaoController } from './controllers/papel-cidadao.controller';
+import { AuthModule } from '@/auth/auth.module'
 
 /**
  * Módulo de cidadãos
@@ -21,6 +22,8 @@ import { PapelCidadaoController } from './controllers/papel-cidadao.controller';
   imports: [
     TypeOrmModule.forFeature([Cidadao, PapelCidadao]),
     CacheModule,
+    // Importa o módulo compartilhado de autenticação
+    AuthModule,
   ],
   controllers: [CidadaoController, PapelCidadaoController],
   providers: [
diff --git a/src/modules/cidadao/controllers/cidadao.controller.ts b/src/modules/cidadao/controllers/cidadao.controller.ts
index 5f734de..13c9498 100644
--- a/src/modules/cidadao/controllers/cidadao.controller.ts
+++ b/src/modules/cidadao/controllers/cidadao.controller.ts
@@ -27,7 +27,9 @@ import { CreateCidadaoDto } from '../dto/create-cidadao.dto';
 import { UpdateCidadaoDto } from '../dto/update-cidadao.dto';
 import { CreateComposicaoFamiliarDto } from '../dto/create-composicao-familiar.dto';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 import {
   CidadaoResponseDto,
   CidadaoPaginatedResponseDto,
@@ -41,7 +43,7 @@ import { ApiErrorResponse } from '../../../shared/dtos/api-error-response.dto';
  */
 @ApiTags('Cidadão')
 @Controller('v1/cidadao')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class CidadaoController {
   constructor(private readonly cidadaoService: CidadaoService) {}
@@ -50,6 +52,11 @@ export class CidadaoController {
    * Lista todos os cidadãos com filtros e paginação
    */
   @Get()
+  @RequiresPermission({
+    permissionName: 'cidadao.listar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'user.unidadeId',
+  })
   @ApiOperation({
     summary: 'Listar cidadãos',
     description: 'Retorna uma lista paginada de cidadãos com opções de filtro.',
@@ -125,6 +132,11 @@ export class CidadaoController {
    * Obtém detalhes de um cidadão específico
    */
   @Get(':id')
+  @RequiresPermission({
+    permissionName: 'cidadao.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'cidadao.unidadeId',
+  })
   @ApiOperation({
     summary: 'Obter detalhes de um cidadão',
     description: 'Retorna os detalhes completos de um cidadão pelo seu ID.',
@@ -159,6 +171,11 @@ export class CidadaoController {
    * Cria um novo cidadão
    */
   @Post()
+  @RequiresPermission({
+    permissionName: 'cidadao.criar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'user.unidadeId',
+  })
   @ApiOperation({
     summary: 'Criar cidadão',
     description: 'Cadastra um novo cidadão no sistema.',
@@ -209,6 +226,11 @@ export class CidadaoController {
    * Atualiza um cidadão existente
    */
   @Put(':id')
+  @RequiresPermission({
+    permissionName: 'cidadao.editar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'cidadao.unidadeId',
+  })
   @ApiOperation({
     summary: 'Atualizar cidadão existente',
     description: 'Atualiza os dados de um cidadão existente.',
@@ -261,6 +283,7 @@ export class CidadaoController {
    * Busca cidadão por CPF
    */
   @Get('cpf/:cpf')
+  @RequiresPermission({ permissionName: 'cidadao.buscar.cpf' })
   @ApiOperation({
     summary: 'Buscar cidadão por CPF',
     description: 'Busca um cidadão pelo número do CPF (com ou sem formatação).',
@@ -293,6 +316,7 @@ export class CidadaoController {
    * Busca cidadão por NIS
    */
   @Get('nis/:nis')
+  @RequiresPermission({ permissionName: 'cidadao.buscar.nis' })
   @ApiOperation({
     summary: 'Buscar cidadão por NIS',
     description: 'Busca um cidadão pelo número do NIS (PIS/PASEP).',
@@ -328,6 +352,12 @@ export class CidadaoController {
   @ApiOperation({ summary: 'Histórico de solicitações' })
   @ApiResponse({ status: 200, description: 'Histórico retornado com sucesso' })
   @ApiResponse({ status: 404, description: 'Cidadão não encontrado' })
+  @RequiresPermission({
+    permissionName: 'cidadao.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'cidadao.unidadeId',
+  })
+  @RequiresPermission({ permissionName: 'solicitacao.listar' })
   async findSolicitacoes(@Param('id') id: string) {
     return this.cidadaoService.findSolicitacoesByCidadaoId(id);
   }
@@ -340,6 +370,11 @@ export class CidadaoController {
   @ApiResponse({ status: 201, description: 'Membro adicionado com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
   @ApiResponse({ status: 404, description: 'Cidadão não encontrado' })
+  @RequiresPermission({
+    permissionName: 'cidadao.editar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'cidadao.unidadeId',
+  })
   async addComposicaoFamiliar(
     @Param('id') id: string,
     @Body() createComposicaoFamiliarDto: CreateComposicaoFamiliarDto,
diff --git a/src/modules/cidadao/controllers/papel-cidadao.controller.ts b/src/modules/cidadao/controllers/papel-cidadao.controller.ts
index 37c4e9e..0dacf3e 100644
--- a/src/modules/cidadao/controllers/papel-cidadao.controller.ts
+++ b/src/modules/cidadao/controllers/papel-cidadao.controller.ts
@@ -19,7 +19,9 @@ import {
   ApiQuery,
 } from '@nestjs/swagger';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 import { PapelCidadaoService } from '../services/papel-cidadao.service';
 import { CreatePapelCidadaoDto } from '../dto/create-papel-cidadao.dto';
 import { TipoPapel } from '../entities/papel-cidadao.entity';
@@ -32,7 +34,7 @@ import { TipoPapel } from '../entities/papel-cidadao.entity';
  */
 @ApiTags('Cidadão')
 @Controller('v1/cidadao/papel')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class PapelCidadaoController {
   constructor(private readonly papelCidadaoService: PapelCidadaoService) {}
@@ -41,6 +43,11 @@ export class PapelCidadaoController {
    * Cria um novo papel para um cidadão
    */
   @Post()
+  @RequiresPermission({
+    permissionName: 'cidadao.papel.criar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'cidadao.unidadeId',
+  })
   @ApiOperation({ summary: 'Criar novo papel para um cidadão' })
   @ApiResponse({ status: 201, description: 'Papel criado com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
@@ -65,6 +72,11 @@ export class PapelCidadaoController {
    * Lista todos os papéis de um cidadão
    */
   @Get('cidadao/:cidadaoId')
+  @RequiresPermission({
+    permissionName: 'cidadao.papel.listar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'cidadao.unidadeId',
+  })
   @ApiOperation({ summary: 'Listar papéis de um cidadão' })
   @ApiResponse({
     status: 200,
@@ -79,6 +91,7 @@ export class PapelCidadaoController {
    * Busca cidadãos por tipo de papel
    */
   @Get('tipo/:tipoPapel')
+  @RequiresPermission({ permissionName: 'cidadao.papel.listar' })
   @ApiOperation({ summary: 'Buscar cidadãos por tipo de papel' })
   @ApiResponse({
     status: 200,
@@ -104,6 +117,11 @@ export class PapelCidadaoController {
    * Verifica se um cidadão possui um determinado papel
    */
   @Get('verificar/:cidadaoId/:tipoPapel')
+  @RequiresPermission({
+    permissionName: 'cidadao.papel.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'cidadao.unidadeId',
+  })
   @ApiOperation({
     summary: 'Verificar se um cidadão possui um determinado papel',
   })
@@ -126,6 +144,11 @@ export class PapelCidadaoController {
    * Desativa um papel de um cidadão
    */
   @Delete(':id')
+  @RequiresPermission({
+    permissionName: 'cidadao.papel.excluir',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'papel.cidadao.unidadeId',
+  })
   @ApiOperation({ summary: 'Desativar papel de um cidadão' })
   @ApiResponse({ status: 200, description: 'Papel desativado com sucesso' })
   @ApiResponse({ status: 404, description: 'Papel não encontrado' })
diff --git a/src/modules/cidadao/entities/cidadao.entity.ts b/src/modules/cidadao/entities/cidadao.entity.ts
index a5a5bd3..720d0f0 100644
--- a/src/modules/cidadao/entities/cidadao.entity.ts
+++ b/src/modules/cidadao/entities/cidadao.entity.ts
@@ -21,6 +21,7 @@ import {
 } from 'class-validator';
 import { CPFValidator } from '../validators/cpf-validator';
 import { NISValidator } from '../validators/nis-validator';
+import { TelefoneValidator } from '../validators/telefone-validator';
 import { PapelCidadao } from './papel-cidadao.entity';
 import { ComposicaoFamiliar } from './composicao-familiar.entity';
 
@@ -106,6 +107,7 @@ export class Cidadao {
 
   @Column({ nullable: false })
   @IsNotEmpty({ message: 'Telefone é obrigatório' })
+  @Validate(TelefoneValidator, { message: 'Telefone inválido' })
   telefone: string;
 
   @Column({ nullable: true })
diff --git a/src/modules/configuracao/configuracao.module.ts b/src/modules/configuracao/configuracao.module.ts
index c4d3cf4..8005f5f 100644
--- a/src/modules/configuracao/configuracao.module.ts
+++ b/src/modules/configuracao/configuracao.module.ts
@@ -1,5 +1,6 @@
 import { Module } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
+import { AuthModule } from '@/auth/auth.module'
 import { 
   ParametroService, 
   TemplateService, 
@@ -39,7 +40,9 @@ import {
       Template,
       WorkflowBeneficio,
       ConfiguracaoIntegracao
-    ])
+    ]),
+    // Importa o módulo compartilhado de autenticação
+    AuthModule
   ],
   controllers: [
     ParametroController,
diff --git a/src/modules/configuracao/controllers/parametro.controller.ts b/src/modules/configuracao/controllers/parametro.controller.ts
index a71201e..2694011 100644
--- a/src/modules/configuracao/controllers/parametro.controller.ts
+++ b/src/modules/configuracao/controllers/parametro.controller.ts
@@ -1,5 +1,9 @@
-import { Controller, Get, Post, Put, Delete, Body, Param, Query } from '@nestjs/common';
+import { Controller, Get, Post, Put, Delete, Body, Param, Query, UseGuards } from '@nestjs/common';
 import { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery, ApiBearerAuth } from '@nestjs/swagger';
+import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 import { ParametroService } from '../services/parametro.service';
 import { ParametroCreateDto } from '../dtos/parametro/parametro-create.dto';
 import { ParametroUpdateDto } from '../dtos/parametro/parametro-update.dto';
@@ -11,6 +15,7 @@ import { ParametroResponseDto } from '../dtos/parametro/parametro-response.dto';
 @ApiTags('Configuração - Parâmetros')
 @ApiBearerAuth()
 @Controller('configuracao/parametros')
+@UseGuards(JwtAuthGuard, PermissionGuard)
 export class ParametroController {
   constructor(private readonly parametroService: ParametroService) {}
 
@@ -20,7 +25,10 @@ export class ParametroController {
    * @returns Lista de parâmetros
    */
   @Get()
-  // @Roles('admin')
+  @RequiresPermission({
+    permissionName: 'configuracao.parametro.listar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Buscar todos os parâmetros do sistema' })
   @ApiQuery({ 
     name: 'categoria', 
@@ -44,7 +52,10 @@ export class ParametroController {
    * @returns Parâmetro encontrado
    */
   @Get(':chave')
-  // @Roles('admin')
+  @RequiresPermission({
+    permissionName: 'configuracao.parametro.visualizar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Buscar parâmetro por chave' })
   @ApiParam({ 
     name: 'chave', 
@@ -72,7 +83,10 @@ export class ParametroController {
    * @returns Parâmetro criado
    */
   @Post()
-  // @Roles('admin')
+  @RequiresPermission({
+    permissionName: 'configuracao.parametro.criar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Criar novo parâmetro' })
   @ApiResponse({ 
     status: 201, 
@@ -96,7 +110,10 @@ export class ParametroController {
    * @returns Parâmetro atualizado
    */
   @Put(':chave')
-  // @Roles('admin')
+  @RequiresPermission({
+    permissionName: 'configuracao.parametro.editar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Atualizar parâmetro existente' })
   @ApiParam({ 
     name: 'chave', 
@@ -128,7 +145,10 @@ export class ParametroController {
    * @param chave Chave do parâmetro
    */
   @Delete(':chave')
-  // @Roles('admin')
+  @RequiresPermission({
+    permissionName: 'configuracao.parametro.remover',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Remover parâmetro' })
   @ApiParam({ 
     name: 'chave', 
@@ -157,7 +177,10 @@ export class ParametroController {
    * Limpa o cache de parâmetros
    */
   @Post('cache/limpar')
-  // @Roles('admin')
+  @RequiresPermission({
+    permissionName: 'configuracao.parametro.cache.limpar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Limpar cache de parâmetros' })
   @ApiResponse({ 
     status: 200, 
diff --git a/src/modules/documento/controllers/documento.controller.ts b/src/modules/documento/controllers/documento.controller.ts
index 087f705..19d7fd2 100644
--- a/src/modules/documento/controllers/documento.controller.ts
+++ b/src/modules/documento/controllers/documento.controller.ts
@@ -37,9 +37,9 @@ import { ThumbnailService } from '../services/thumbnail.service';
 import { StorageProviderFactory } from '../factories/storage-provider.factory';
 import { UploadDocumentoDto } from '../dto/upload-documento.dto';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
-import { Roles } from '../../../auth/decorators/role.decorator';
-import { Role } from '../../../shared/enums/role.enum';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 import { Request } from 'express';
 import { Multer } from 'multer';
 
@@ -69,7 +69,7 @@ declare global {
  */
 @ApiTags('Documentos')
 @Controller('v1/documento')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class DocumentoController {
   constructor(
@@ -84,6 +84,11 @@ export class DocumentoController {
    * Lista todos os documentos de uma solicitação
    */
   @Get('solicitacao/:solicitacaoId')
+  @RequiresPermission({
+    permissionName: 'documento.listar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Listar documentos de uma solicitação' })
   @ApiResponse({
     status: 200,
@@ -130,6 +135,11 @@ export class DocumentoController {
    * Obtém detalhes de um documento específico
    */
   @Get(':id')
+  @RequiresPermission({
+    permissionName: 'documento.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'documento.solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Obter detalhes de um documento' })
   @ApiResponse({ status: 200, description: 'Documento encontrado com sucesso' })
   @ApiResponse({ status: 404, description: 'Documento não encontrado' })
@@ -153,6 +163,11 @@ export class DocumentoController {
    * Faz download de um documento
    */
   @Get(':id/download')
+  @RequiresPermission({
+    permissionName: 'documento.download',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'documento.solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Fazer download de um documento' })
   @ApiResponse({ status: 200, description: 'Documento baixado com sucesso' })
   @ApiResponse({ status: 404, description: 'Documento não encontrado' })
@@ -188,6 +203,11 @@ export class DocumentoController {
    * Obtém uma miniatura de um documento de imagem
    */
   @Get(':id/thumbnail')
+  @RequiresPermission({
+    permissionName: 'documento.thumbnail',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'documento.solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Obter miniatura de um documento de imagem' })
   @ApiResponse({ status: 200, description: 'Miniatura gerada com sucesso' })
   @ApiResponse({ status: 404, description: 'Documento não encontrado' })
@@ -251,12 +271,6 @@ export class DocumentoController {
   @ApiResponse({ status: 403, description: 'Acesso negado' })
   @ApiResponse({ status: 415, description: 'Tipo de arquivo não suportado' })
   @ApiResponse({ status: 422, description: 'Arquivo infectado com malware' })
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.TECNICO,
-  )
   async upload(
     @UploadedFile() arquivo: Express.Multer.File,
     @Body() uploadDocumentoDto: UploadDocumentoDto,
@@ -292,6 +306,11 @@ export class DocumentoController {
    * Remove um documento de uma solicitação
    */
   @Delete(':id')
+  @RequiresPermission({
+    permissionName: 'documento.remover',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'documento.solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Remover documento' })
   @ApiResponse({ status: 200, description: 'Documento removido com sucesso' })
   @ApiResponse({ status: 404, description: 'Documento não encontrado' })
@@ -303,12 +322,6 @@ export class DocumentoController {
     type: 'string',
     format: 'uuid',
   })
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.TECNICO,
-  )
   async remove(@Param('id', ParseUUIDPipe) id: string, @Req() req: Request) {
     return this.documentoService.remove(id, req.user);
   }
@@ -317,6 +330,11 @@ export class DocumentoController {
    * Verifica um documento
    */
   @Post(':id/verificar')
+  @RequiresPermission({
+    permissionName: 'documento.verificar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'documento.solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Verificar documento' })
   @ApiResponse({ status: 200, description: 'Documento verificado com sucesso' })
   @ApiResponse({ status: 404, description: 'Documento não encontrado' })
@@ -340,12 +358,6 @@ export class DocumentoController {
       },
     },
   })
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.COORDENADOR,
-  )
   async verificarDocumento(
     @Param('id', ParseUUIDPipe) id: string,
     @Body('observacoes') observacoes: string,
@@ -358,6 +370,11 @@ export class DocumentoController {
    * Verifica um documento em busca de malware
    */
   @Post(':id/scan-malware')
+  @RequiresPermission({
+    permissionName: 'documento.scan.malware',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'documento.solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Verificar documento em busca de malware' })
   @ApiResponse({ status: 200, description: 'Documento verificado com sucesso' })
   @ApiResponse({ status: 404, description: 'Documento não encontrado' })
@@ -370,7 +387,6 @@ export class DocumentoController {
     format: 'uuid',
   })
   @HttpCode(HttpStatus.OK)
-  @Roles(Role.ADMIN, Role.GESTOR)
   async scanMalware(
     @Param('id', ParseUUIDPipe) id: string,
     @Req() req: Request,
diff --git a/src/modules/documento/documento.module.ts b/src/modules/documento/documento.module.ts
index 3a73db0..a5f152e 100644
--- a/src/modules/documento/documento.module.ts
+++ b/src/modules/documento/documento.module.ts
@@ -1,6 +1,7 @@
 import { Module } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { MulterModule } from '@nestjs/platform-express';
+import { AuthModule } from '@/auth/auth.module'
 import { DocumentoController } from './controllers/documento.controller';
 import { DocumentoService } from './services/documento.service';
 import { MalwareScanService } from './services/malware-scan.service';
@@ -32,8 +33,8 @@ import * as crypto from 'crypto';
     TypeOrmModule.forFeature([Documento, DocumentoEnviado]),
     SharedModule,
     SolicitacaoModule,
-    // AuditoriaModule removido - agora é global
     ConfigModule,
+    AuthModule,
     MulterModule.register({
       storage: diskStorage({
         destination: (req, file, cb) => {
diff --git a/src/modules/metricas/metricas.module.ts b/src/modules/metricas/metricas.module.ts
index 8ad5562..d030260 100644
--- a/src/modules/metricas/metricas.module.ts
+++ b/src/modules/metricas/metricas.module.ts
@@ -2,6 +2,7 @@ import { Module, NestModule, MiddlewareConsumer } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { EventEmitterModule } from '@nestjs/event-emitter';
 import { ScheduleAdapterModule } from '../../shared/schedule/schedule-adapter.module';
+import { AuthModule } from '@/auth/auth.module'
 
 // Controladores
 import { MetricasController } from './controllers/metricas.controller';
@@ -66,6 +67,9 @@ import { PrometheusModule } from '@willsoto/nestjs-prometheus';
       MetricaSnapshot,
       MetricaConfiguracao
     ]),
+    
+    // Importa o módulo compartilhado de autenticação
+    AuthModule,
   ],
   
   // Controladores para API
diff --git a/src/modules/notificacao/notificacao.module.ts b/src/modules/notificacao/notificacao.module.ts
index ec70c5f..778e83a 100644
--- a/src/modules/notificacao/notificacao.module.ts
+++ b/src/modules/notificacao/notificacao.module.ts
@@ -2,6 +2,7 @@ import { Module } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { ConfigModule } from '@nestjs/config';
 import { ScheduleAdapterModule } from '../../shared/schedule/schedule-adapter.module';
+import { AuthModule } from '@/auth/auth.module'
 
 // Controladores
 import { NotificacaoController } from './controllers/notificacao.controller';
@@ -29,6 +30,8 @@ import { NotificationTemplate } from './entities/notification-template.entity';
     TypeOrmModule.forFeature([NotificacaoSistema, NotificationTemplate]),
     ScheduleAdapterModule,
     ConfigModule,
+    // Importa o módulo compartilhado de autenticação
+    AuthModule,
   ],
   controllers: [
     NotificacaoController,
diff --git a/src/modules/relatorios-unificado/controllers/relatorios.controller.ts b/src/modules/relatorios-unificado/controllers/relatorios.controller.ts
index 96a5e5f..2e0b542 100644
--- a/src/modules/relatorios-unificado/controllers/relatorios.controller.ts
+++ b/src/modules/relatorios-unificado/controllers/relatorios.controller.ts
@@ -20,9 +20,9 @@ import {
 } from '@nestjs/swagger';
 import { RelatoriosService } from '../services/relatorios.service';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
-import { Roles } from '../../../auth/decorators/role.decorator';
-import { Role } from '../../../shared/enums/role.enum';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 import { Request, Response } from 'express';
 import {
   RelatorioBeneficiosDto,
@@ -38,7 +38,7 @@ import {
  */
 @ApiTags('Relatórios')
 @Controller('v1/relatorios')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class RelatoriosController {
   [x: string]: any;
@@ -53,7 +53,11 @@ export class RelatoriosController {
    * @returns Stream do relatório no formato solicitado
    */
   @Get('beneficios-concedidos')
-  @Roles(Role.ADMIN, Role.GESTOR, Role.TECNICO)
+  @RequiresPermission({
+    permissionName: 'relatorio.beneficios.concedidos',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'query.unidade_id'
+  })
   @ApiOperation({
     summary: 'Gera relatório de benefícios concedidos',
     description:
@@ -144,12 +148,11 @@ export class RelatoriosController {
    * @returns Stream do relatório no formato solicitado
    */
   @Get('solicitacoes-por-status')
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.COORDENADOR,
-  )
+  @RequiresPermission({
+    permissionName: 'relatorio.solicitacoes.status',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'query.unidade_id'
+  })
   @ApiOperation({
     summary: 'Gera relatório de solicitações por status',
     description:
@@ -239,7 +242,10 @@ export class RelatoriosController {
    * @returns Stream do relatório no formato solicitado
    */
   @Get('atendimentos-por-unidade')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'relatorio.atendimentos.unidade',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({
     summary: 'Gera relatório de atendimentos por unidade',
     description:
diff --git a/src/modules/relatorios-unificado/relatorios-unificado.module.ts b/src/modules/relatorios-unificado/relatorios-unificado.module.ts
index 6570292..e45db3c 100644
--- a/src/modules/relatorios-unificado/relatorios-unificado.module.ts
+++ b/src/modules/relatorios-unificado/relatorios-unificado.module.ts
@@ -2,6 +2,7 @@ import { Module } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { CacheModule } from '@nestjs/cache-manager';
 import { APP_INTERCEPTOR } from '@nestjs/core';
+import { AuthModule } from '@/auth/auth.module'
 
 // Entidades
 import { Solicitacao } from '../solicitacao/entities/solicitacao.entity';
@@ -25,10 +26,11 @@ import { RelatoriosAuditInterceptor } from './interceptors';
   imports: [
     TypeOrmModule.forFeature([Solicitacao, Unidade, TipoBeneficio]),
     CacheModule.register({
-      ttl: 60 * 60 * 1000, // Cache válido por 1 hora
-      max: 100, // Máximo de 100 itens no cache
-      isGlobal: false,
+      ttl: 300, // 5 minutos de cache
+      max: 100, // máximo de 100 itens em cache
     }),
+    // Importa o módulo compartilhado de autenticação
+    AuthModule,
   ],
   controllers: [RelatoriosController],
   providers: [
diff --git a/src/modules/solicitacao/controllers/solicitacao.controller.ts b/src/modules/solicitacao/controllers/solicitacao.controller.ts
index ea49d5f..323560f 100644
--- a/src/modules/solicitacao/controllers/solicitacao.controller.ts
+++ b/src/modules/solicitacao/controllers/solicitacao.controller.ts
@@ -26,9 +26,9 @@ import { CreateSolicitacaoDto } from '../dto/create-solicitacao.dto';
 import { UpdateSolicitacaoDto } from '../dto/update-solicitacao.dto';
 import { AvaliarSolicitacaoDto } from '../dto/avaliar-solicitacao.dto';
 import { JwtAuthGuard } from '@/auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
-import { Roles } from '../../../auth/decorators/role.decorator';
-import { Role } from '../../../shared/enums/role.enum';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 import { StatusSolicitacao } from '../entities/solicitacao.entity';
 import { Request } from 'express';
 
@@ -39,7 +39,7 @@ import { Request } from 'express';
  */
 @ApiTags('Solicitações')
 @Controller('v1/solicitacao')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class SolicitacaoController {
   constructor(private readonly solicitacaoService: SolicitacaoService) {}
@@ -48,6 +48,11 @@ export class SolicitacaoController {
    * Lista todas as solicitações com filtros e paginação
    */
   @Get()
+  @RequiresPermission({
+    permissionName: 'solicitacao.listar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'query.unidade_id',
+  })
   @ApiOperation({ summary: 'Listar solicitações' })
   @ApiResponse({
     status: 200,
@@ -132,6 +137,11 @@ export class SolicitacaoController {
    * Obtém detalhes de uma solicitação específica
    */
   @Get(':id')
+  @RequiresPermission({
+    permissionName: 'solicitacao.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Obter detalhes de uma solicitação' })
   @ApiResponse({
     status: 200,
@@ -157,12 +167,11 @@ export class SolicitacaoController {
    * Cria uma nova solicitação de benefício
    */
   @Post()
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.TECNICO,
-  )
+  @RequiresPermission({
+    permissionName: 'solicitacao.criar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'body.unidadeId',
+  })
   @ApiOperation({ summary: 'Criar nova solicitação de benefício' })
   @ApiResponse({ status: 201, description: 'Solicitação criada com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
@@ -178,12 +187,11 @@ export class SolicitacaoController {
    * Atualiza uma solicitação existente
    */
   @Put(':id')
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.TECNICO,
-  )
+  @RequiresPermission({
+    permissionName: 'solicitacao.editar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Atualizar solicitação existente' })
   @ApiBody({
     description: 'Dados da solicitação atualizada',
@@ -256,12 +264,11 @@ export class SolicitacaoController {
    * Submete uma solicitação para análise
    */
   @Put(':id/submeter')
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.TECNICO,
-  )
+  @RequiresPermission({
+    permissionName: 'solicitacao.status.transicao.RASCUNHO.ENVIADA',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Submeter solicitação para análise' })
   @ApiResponse({
     status: 200,
@@ -281,12 +288,21 @@ export class SolicitacaoController {
    * Avalia uma solicitação (aprovar/reprovar)
    */
   @Put(':id/avaliar')
-  @Roles(
-    Role.ADMIN,
-    Role.GESTOR,
-    Role.TECNICO,
-    Role.COORDENADOR,
-  )
+  @RequiresPermission({
+    permissionName: 'solicitacao.status.transicao.ENVIADA.EM_ANALISE',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
+  @RequiresPermission({
+    permissionName: 'solicitacao.status.transicao.EM_ANALISE.APROVADA',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
+  @RequiresPermission({
+    permissionName: 'solicitacao.status.transicao.EM_ANALISE.REJEITADA',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Avaliar solicitação (aprovar/reprovar)' })
   @ApiBody({
     description: 'Dados da avaliação da solicitação',
@@ -323,7 +339,16 @@ export class SolicitacaoController {
    * Libera um benefício aprovado
    */
   @Put(':id/liberar')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'solicitacao.status.transicao.APROVADA.CONCEDIDA',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
+  @RequiresPermission({
+    permissionName: 'beneficio.conceder',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Liberar benefício aprovado' })
   @ApiResponse({ status: 200, description: 'Benefício liberado com sucesso' })
   @ApiResponse({ status: 400, description: 'Benefício não pode ser liberado' })
@@ -337,7 +362,11 @@ export class SolicitacaoController {
    * Cancela uma solicitação
    */
   @Put(':id/cancelar')
-  @Roles(Role.ADMIN, Role.GESTOR, Role.TECNICO)
+  @RequiresPermission({
+    permissionName: 'solicitacao.status.transicao.*.CANCELADA',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Cancelar solicitação' })
   @ApiResponse({
     status: 200,
@@ -357,6 +386,16 @@ export class SolicitacaoController {
    * Lista o histórico de uma solicitação
    */
   @Get(':id/historico')
+  @RequiresPermission({
+    permissionName: 'solicitacao.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
+  @RequiresPermission({
+    permissionName: 'solicitacao.historico.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Listar histórico de uma solicitação' })
   @ApiResponse({ status: 200, description: 'Histórico retornado com sucesso' })
   @ApiResponse({ status: 404, description: 'Solicitação não encontrada' })
@@ -377,6 +416,16 @@ export class SolicitacaoController {
    * Lista as pendências de uma solicitação
    */
   @Get(':id/pendencias')
+  @RequiresPermission({
+    permissionName: 'solicitacao.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
+  @RequiresPermission({
+    permissionName: 'solicitacao.pendencia.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'solicitacao.unidadeId',
+  })
   @ApiOperation({ summary: 'Listar pendências de uma solicitação' })
   @ApiResponse({
     status: 200,
diff --git a/src/modules/solicitacao/solicitacao.module.ts b/src/modules/solicitacao/solicitacao.module.ts
index 8bbc343..a0367ef 100644
--- a/src/modules/solicitacao/solicitacao.module.ts
+++ b/src/modules/solicitacao/solicitacao.module.ts
@@ -1,5 +1,6 @@
 import { Module } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
+import { AuthModule } from '@/auth/auth.module'
 import { SolicitacaoController } from './controllers/solicitacao.controller';
 import { SolicitacaoService } from './services/solicitacao.service';
 import { Solicitacao } from './entities/solicitacao.entity';
@@ -15,6 +16,8 @@ import { Pendencia } from './entities/pendencia.entity';
 @Module({
   imports: [
     TypeOrmModule.forFeature([Solicitacao, HistoricoSolicitacao, Pendencia]),
+    // Importa o módulo compartilhado de autenticação
+    AuthModule,
   ],
   controllers: [SolicitacaoController],
   providers: [SolicitacaoService],
diff --git a/src/modules/unidade/controllers/unidade.controller.ts b/src/modules/unidade/controllers/unidade.controller.ts
index b352e5a..8f6676a 100644
--- a/src/modules/unidade/controllers/unidade.controller.ts
+++ b/src/modules/unidade/controllers/unidade.controller.ts
@@ -21,9 +21,9 @@ import { CreateUnidadeDto } from '../dto/create-unidade.dto';
 import { UpdateUnidadeDto } from '../dto/update-unidade.dto';
 import { UpdateStatusUnidadeDto } from '../dto/update-status-unidade.dto';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
-import { Roles } from '../../../auth/decorators/role.decorator';
-import { Role } from '../../../shared/enums/role.enum';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 
 /**
  * Controlador de unidades
@@ -32,7 +32,7 @@ import { Role } from '../../../shared/enums/role.enum';
  */
 @ApiTags('Unidades')
 @Controller('v1/unidade')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class UnidadeController {
   constructor(private readonly unidadeService: UnidadeService) {}
@@ -41,6 +41,10 @@ export class UnidadeController {
    * Lista todas as unidades com filtros e paginação
    */
   @Get()
+  @RequiresPermission({
+    permissionName: 'unidade.listar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Listar unidades' })
   @ApiResponse({
     status: 200,
@@ -96,6 +100,10 @@ export class UnidadeController {
    * Obtém detalhes de uma unidade específica
    */
   @Get(':id')
+  @RequiresPermission({
+    permissionName: 'unidade.visualizar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Obter detalhes de uma unidade' })
   @ApiResponse({ status: 200, description: 'Unidade encontrada com sucesso' })
   @ApiResponse({ status: 404, description: 'Unidade não encontrada' })
@@ -107,7 +115,10 @@ export class UnidadeController {
    * Cria uma nova unidade
    */
   @Post()
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'unidade.criar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Criar nova unidade' })
   @ApiResponse({ status: 201, description: 'Unidade criada com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
@@ -120,7 +131,10 @@ export class UnidadeController {
    * Atualiza uma unidade existente
    */
   @Put(':id')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'unidade.editar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Atualizar unidade existente' })
   @ApiResponse({ status: 200, description: 'Unidade atualizada com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
@@ -137,7 +151,10 @@ export class UnidadeController {
    * Atualiza o status de uma unidade
    */
   @Patch(':id/status')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'unidade.status.alterar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Ativar/inativar unidade' })
   @ApiResponse({ status: 200, description: 'Status atualizado com sucesso' })
   @ApiResponse({ status: 404, description: 'Unidade não encontrada' })
@@ -152,6 +169,10 @@ export class UnidadeController {
    * Lista os setores de uma unidade específica
    */
   @Get(':id/setor')
+  @RequiresPermission({
+    permissionName: 'unidade.setor.listar',
+    scopeType: ScopeType.GLOBAL
+  })
   @ApiOperation({ summary: 'Listar setores de uma unidade' })
   @ApiResponse({
     status: 200,
diff --git a/src/modules/unidade/unidade.module.ts b/src/modules/unidade/unidade.module.ts
index 4f7b5ab..2f9fd6d 100644
--- a/src/modules/unidade/unidade.module.ts
+++ b/src/modules/unidade/unidade.module.ts
@@ -8,6 +8,7 @@ import { UnidadeRepository } from './repositories/unidade.repository';
 import { SetorRepository } from './repositories/setor.repository';
 import { Unidade } from './entities/unidade.entity';
 import { Setor } from './entities/setor.entity';
+import { AuthModule } from '@/auth/auth.module'
 
 /**
  * Módulo de unidades
@@ -16,7 +17,11 @@ import { Setor } from './entities/setor.entity';
  * incluindo cadastro, atualização e consulta.
  */
 @Module({
-  imports: [TypeOrmModule.forFeature([Unidade, Setor])],
+  imports: [
+    TypeOrmModule.forFeature([Unidade, Setor]),
+    // Importa o módulo compartilhado de autenticação
+    AuthModule,
+  ],
   controllers: [UnidadeController, SetorController],
   providers: [UnidadeService, SetorService, UnidadeRepository, SetorRepository],
   exports: [UnidadeService, SetorService, UnidadeRepository, SetorRepository],
diff --git a/src/modules/usuario/controllers/usuario.controller.ts b/src/modules/usuario/controllers/usuario.controller.ts
index 46a411b..6ffd964 100644
--- a/src/modules/usuario/controllers/usuario.controller.ts
+++ b/src/modules/usuario/controllers/usuario.controller.ts
@@ -23,9 +23,9 @@ import { UpdateUsuarioDto } from '../dto/update-usuario.dto';
 import { UpdateStatusUsuarioDto } from '../dto/update-status-usuario.dto';
 import { UpdateSenhaDto } from '../dto/update-senha.dto';
 import { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';
-import { RolesGuard } from '../../../auth/guards/roles.guard';
-import { Roles } from '../../../auth/decorators/role.decorator';
-import { Role } from '../../../shared/enums/role.enum';
+import { PermissionGuard } from '../../../auth/guards/permission.guard';
+import { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';
+import { ScopeType } from '../../../auth/entities/user-permission.entity';
 
 /**
  * Controlador de usuários
@@ -34,7 +34,7 @@ import { Role } from '../../../shared/enums/role.enum';
  */
 @ApiTags('Usuários')
 @Controller('v1/usuario')
-@UseGuards(JwtAuthGuard, RolesGuard)
+@UseGuards(JwtAuthGuard, PermissionGuard)
 @ApiBearerAuth()
 export class UsuarioController {
   constructor(private readonly usuarioService: UsuarioService) {}
@@ -43,7 +43,11 @@ export class UsuarioController {
    * Lista todos os usuários com filtros e paginação
    */
   @Get()
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'usuario.listar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'query.unidadeId'
+  })
   @ApiOperation({ summary: 'Listar usuários' })
   @ApiResponse({
     status: 200,
@@ -107,7 +111,11 @@ export class UsuarioController {
    * Obtém detalhes de um usuário específico
    */
   @Get(':id')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'usuario.visualizar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'usuario.unidadeId'
+  })
   @ApiOperation({ summary: 'Obter detalhes de um usuário' })
   @ApiResponse({ status: 200, description: 'Usuário encontrado com sucesso' })
   @ApiResponse({ status: 404, description: 'Usuário não encontrado' })
@@ -119,7 +127,11 @@ export class UsuarioController {
    * Cria um novo usuário
    */
   @Post()
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'usuario.criar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'body.unidadeId'
+  })
   @ApiOperation({ summary: 'Criar novo usuário' })
   @ApiResponse({ status: 201, description: 'Usuário criado com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
@@ -135,7 +147,11 @@ export class UsuarioController {
    * Atualiza um usuário existente
    */
   @Put(':id')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'usuario.editar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'usuario.unidadeId'
+  })
   @ApiOperation({ summary: 'Atualizar usuário existente' })
   @ApiResponse({ status: 200, description: 'Usuário atualizado com sucesso' })
   @ApiResponse({ status: 400, description: 'Dados inválidos' })
@@ -155,7 +171,11 @@ export class UsuarioController {
    * Atualiza o status de um usuário
    */
   @Patch(':id/status')
-  @Roles(Role.ADMIN, Role.GESTOR)
+  @RequiresPermission({
+    permissionName: 'usuario.status.alterar',
+    scopeType: ScopeType.UNIT,
+    scopeIdExpression: 'usuario.unidadeId'
+  })
   @ApiOperation({ summary: 'Ativar/inativar usuário' })
   @ApiResponse({ status: 200, description: 'Status atualizado com sucesso' })
   @ApiResponse({ status: 404, description: 'Usuário não encontrado' })
@@ -170,6 +190,11 @@ export class UsuarioController {
    * Altera a senha do usuário
    */
   @Put(':id/senha')
+  @RequiresPermission({
+    permissionName: 'usuario.senha.alterar',
+    scopeType: ScopeType.SELF,
+    scopeIdExpression: 'params.id'
+  })
   @ApiOperation({ summary: 'Alterar senha' })
   @ApiResponse({ status: 200, description: 'Senha alterada com sucesso' })
   @ApiResponse({
@@ -182,10 +207,7 @@ export class UsuarioController {
     @Body() updateSenhaDto: UpdateSenhaDto,
     @Request() req,
   ) {
-    // Verificar se o usuário está alterando a própria senha ou se é um administrador
-    if (req.user.id !== id && req.user.role !== Role.ADMIN) {
-      return { error: 'Você só pode alterar sua própria senha' };
-    }
+    // A verificação agora é feita pelo sistema de permissões granulares
 
     return this.usuarioService.updateSenha(id, updateSenhaDto);
   }
@@ -194,6 +216,10 @@ export class UsuarioController {
    * Obtém o perfil do usuário atual
    */
   @Get('me')
+  @RequiresPermission({
+    permissionName: 'usuario.perfil.visualizar',
+    scopeType: ScopeType.SELF
+  })
   @ApiOperation({ summary: 'Obter perfil do usuário atual' })
   @ApiResponse({ status: 200, description: 'Perfil obtido com sucesso' })
   async getProfile(@Request() req) {
diff --git a/src/modules/usuario/dto/create-usuario.dto.ts b/src/modules/usuario/dto/create-usuario.dto.ts
index e36d6bc..1781a38 100644
--- a/src/modules/usuario/dto/create-usuario.dto.ts
+++ b/src/modules/usuario/dto/create-usuario.dto.ts
@@ -23,6 +23,9 @@ export class CreateUsuarioDto {
   @IsNotEmpty({ message: 'Nome é obrigatório' })
   @MinLength(3, { message: 'Nome deve ter no mínimo 3 caracteres' })
   @MaxLength(100, { message: 'Nome deve ter no máximo 100 caracteres' })
+  @Matches(/^[A-Za-zÀ-ÖØ-öø-ÿ]+ [A-Za-zÀ-ÖØ-öø-ÿ ]+$/, {
+    message: 'O nome do usuário deve ter pelo menos nome e sobrenome',
+  })
   @ApiProperty({
     example: 'João da Silva',
     description: 'Nome completo do usuário',
@@ -61,7 +64,7 @@ export class CreateUsuarioDto {
   senha: string;
 
   @IsString({ message: 'CPF deve ser uma string' })
-  @IsOptional()
+  @IsNotEmpty({ message: 'CPF é obrigatório' })
   @Matches(/^\d{3}\.\d{3}\.\d{3}\-\d{2}$/, {
     message: 'CPF deve estar no formato 123.456.789-00',
   })
@@ -71,35 +74,35 @@ export class CreateUsuarioDto {
   @ApiProperty({
     example: '123.456.789-00',
     description: 'CPF do usuário',
-    required: false,
+    required: true,
   })
-  cpf?: string;
+  cpf: string;
 
   @IsString({ message: 'Telefone deve ser uma string' })
-  @IsOptional()
+  @IsNotEmpty({ message: 'Telefone é obrigatório' })
   @Matches(/^\(\d{2}\)\s\d{4,5}-\d{4}$/, {
     message: 'Telefone deve estar no formato (XX) XXXX-XXXX ou (XX) XXXXX-XXXX',
   })
   @ApiProperty({
     example: '(84) 98765-4321',
     description: 'Telefone do usuário',
-    required: false,
+    required: true,
   })
-  telefone?: string;
+  telefone: string;
 
   @IsString({ message: 'Matrícula deve ser uma string' })
-  @IsOptional()
+  @IsNotEmpty({ message: 'Matrícula é obrigatória' })
   @Matches(/^[0-9]{5,10}$/, {
     message: 'Matrícula deve conter entre 5 e 10 dígitos numéricos',
   })
   @ApiProperty({
     example: '12345',
     description: 'Matrícula do usuário',
-    required: false,
+    required: true,
   })
-  matricula?: string;
+  matricula: string;
 
-  @IsEnum(Role, { message: 'Papel inválido' })
+  @IsEnum(Role, { message: `Cargo não existe, os cargos possíveis são: ${Object.values(Role).join(', ')}` })
   @ApiProperty({
     enum: Role,
     example: Role.TECNICO,
diff --git a/src/modules/usuario/entities/usuario.entity.ts b/src/modules/usuario/entities/usuario.entity.ts
index 3771f09..585e05d 100644
--- a/src/modules/usuario/entities/usuario.entity.ts
+++ b/src/modules/usuario/entities/usuario.entity.ts
@@ -15,6 +15,9 @@ import { Role } from '../../../shared/enums/role.enum';
 import { RefreshToken } from '../../../auth/entities/refresh-token.entity';
 import { Unidade } from '../../unidade/entities/unidade.entity';
 import { Setor } from '../../unidade/entities/setor.entity';
+import { IsCPF, IsTelefone } from '@/shared/validators/br-validators';
+import { IsNotEmpty, IsString, Length, MaxLength, MinLength, Validate } from 'class-validator';
+import { IsStrongPassword } from '@/shared/validators/strong-password.validator';
 
 /**
  * Entidade de usuário
@@ -35,22 +38,35 @@ export class Usuario {
   id: string;
 
   @Column()
+  @IsNotEmpty({ message: 'Nome é obrigatório' })
+  @IsString({ message: 'Nome deve ser uma string' })
+  @MinLength(3, { message: 'Nome deve ter no mínimo 3 caracteres' })
+  @MaxLength(100, { message: 'Nome deve ter no máximo 100 caracteres' })
   nome: string;
 
   @Column({ unique: true })
+  @IsNotEmpty({ message: 'Email é obrigatório' })
   email: string;
 
   @Column({ name: 'senha_hash' })
+  @IsNotEmpty({ message: 'Senha é obrigatória' })
   @Exclude()
+  @Validate(IsStrongPassword, {message: 'A senha não pode conter informações pessoais ou ser uma senha comum'})
   senhaHash: string;
 
-  @Column({ unique: true, nullable: true })
+  @Column({ unique: true, nullable: false })
+  @IsNotEmpty({ message: 'CPF é obrigatório' })
+  @Length(11, 14, { message: 'CPF deve ter entre 11 e 14 caracteres' })
+  @Validate(IsCPF, { message: 'CPF inválido' })
   cpf: string;
 
-  @Column({ nullable: true })
+  @Column({ nullable: false })
+  @IsNotEmpty({ message: 'Telefone é obrigatório' })
+  @Validate(IsTelefone, { message: 'Telefone inválido, deve conter DDD + número (10 ou 11 dígitos no total)' })
   telefone: string;
 
-  @Column({ unique: true, nullable: true })
+  @Column({ unique: true, nullable: false })
+  @MinLength(5, { message: 'Matrícula deve ter no mínimo 5 caracteres' })
   matricula: string;
 
   @Column({
diff --git a/src/modules/usuario/services/usuario.service.ts b/src/modules/usuario/services/usuario.service.ts
index d27e418..68baa9f 100644
--- a/src/modules/usuario/services/usuario.service.ts
+++ b/src/modules/usuario/services/usuario.service.ts
@@ -129,6 +129,8 @@ export class UsuarioService {
       // Usar transação para garantir consistência
       return await this.dataSource.transaction(async (manager) => {
         const usuarioRepo = manager.getRepository('usuario');
+        const unidadeRepo = manager.getRepository('unidade');
+        const setorRepo = manager.getRepository('setor');
 
         // Verificar se email já existe
         const emailExistente = await usuarioRepo.findOne({
@@ -139,27 +141,48 @@ export class UsuarioService {
           throw new ConflictException('Email já está em uso');
         }
 
-        // Verificar se CPF já existe (se fornecido)
-        if (createUsuarioDto.cpf) {
-          const cpfExistente = await usuarioRepo.findOne({
-            where: { cpf: createUsuarioDto.cpf },
-          });
-          if (cpfExistente) {
-            this.logger.warn(`CPF já está em uso: ${createUsuarioDto.cpf}`);
-            throw new ConflictException('CPF já está em uso');
-          }
+        // Verificar se CPF já existe
+        const cpfExistente = await usuarioRepo.findOne({
+          where: { cpf: createUsuarioDto.cpf },
+        });
+        if (cpfExistente) {
+          this.logger.warn(`CPF já está em uso: ${createUsuarioDto.cpf}`);
+          throw new ConflictException('CPF já está em uso');
         }
 
-        // Verificar se matrícula já existe (se fornecida)
-        if (createUsuarioDto.matricula) {
-          const matriculaExistente = await usuarioRepo.findOne({
-            where: { matricula: createUsuarioDto.matricula },
+        // Verificar se matrícula já existe
+        const matriculaExistente = await usuarioRepo.findOne({
+          where: { matricula: createUsuarioDto.matricula },
+        });
+        if (matriculaExistente) {
+          this.logger.warn(
+            `Matrícula já está em uso: ${createUsuarioDto.matricula}`,
+          );
+          throw new ConflictException('Matrícula já está em uso');
+        }
+
+        // Verificar se a unidade existe
+        if (createUsuarioDto.unidadeId) {
+          const unidade = await unidadeRepo.findOne({
+            where: { id: createUsuarioDto.unidadeId },
           });
-          if (matriculaExistente) {
-            this.logger.warn(
-              `Matrícula já está em uso: ${createUsuarioDto.matricula}`,
-            );
-            throw new ConflictException('Matrícula já está em uso');
+          if (!unidade) {
+            this.logger.warn(`Unidade não encontrada: ${createUsuarioDto.unidadeId}`);
+            throw new BadRequestException('Unidade não encontrada');
+          }
+
+          // Verificar se o setor existe e pertence à unidade
+          if (createUsuarioDto.setorId) {
+            const setor = await setorRepo.findOne({
+              where: { 
+                id: createUsuarioDto.setorId,
+                unidadeId: createUsuarioDto.unidadeId 
+              },
+            });
+            if (!setor) {
+              this.logger.warn(`Setor não encontrado para a unidade: ${createUsuarioDto.setorId}`);
+              throw new BadRequestException('Setor não encontrado para a unidade');
+            }
           }
         }
 
@@ -191,11 +214,15 @@ export class UsuarioService {
         // Remover campos sensíveis
         const { senhaHash: _, ...usuarioSemSenha } = usuarioSalvo;
 
-        return usuarioSemSenha;
+        return {
+          data: usuarioSemSenha,
+          meta: null,
+          message: null
+        };
       });
     } catch (error) {
       this.logger.error(`Erro ao criar usuário: ${error.message}`, error.stack);
-      if (error instanceof ConflictException) {
+      if (error instanceof ConflictException || error instanceof BadRequestException) {
         throw error;
       }
       throw new InternalServerErrorException(
diff --git a/src/modules/usuario/usuario.module.ts b/src/modules/usuario/usuario.module.ts
index 71a9a16..83a7427 100644
--- a/src/modules/usuario/usuario.module.ts
+++ b/src/modules/usuario/usuario.module.ts
@@ -1,9 +1,10 @@
-import { Module } from '@nestjs/common';
+import { Module, forwardRef } from '@nestjs/common';
 import { TypeOrmModule } from '@nestjs/typeorm';
 import { UsuarioController } from './controllers/usuario.controller';
 import { UsuarioService } from './services/usuario.service';
 import { UsuarioRepository } from './repositories/usuario.repository';
 import { Usuario } from './entities/usuario.entity';
+import { AuthModule } from '@/auth/auth.module';
 
 /**
  * Módulo de usuários
@@ -12,9 +13,12 @@ import { Usuario } from './entities/usuario.entity';
  * cadastro, autenticação, perfis e permissões.
  */
 @Module({
-  imports: [TypeOrmModule.forFeature([Usuario])],
+  imports: [
+    TypeOrmModule.forFeature([Usuario]),
+    forwardRef(() => AuthModule),
+  ],
   controllers: [UsuarioController],
   providers: [UsuarioService, UsuarioRepository],
   exports: [UsuarioService, UsuarioRepository],
 })
-export class UsuarioModule {}
+export class UsuarioModule {}
\ No newline at end of file
diff --git a/src/shared/filters/http-exception.filter.ts b/src/shared/filters/http-exception.filter.ts
index 04f115f..36ea7b9 100644
--- a/src/shared/filters/http-exception.filter.ts
+++ b/src/shared/filters/http-exception.filter.ts
@@ -5,15 +5,19 @@ import {
   HttpException,
   HttpStatus,
   Logger,
+  BadRequestException,
+  ValidationPipe,
 } from '@nestjs/common';
 import { Request, Response } from 'express';
 import { ApiErrorResponse } from '../dtos/api-error-response.dto';
+import { ValidationError } from 'class-validator';
 
 interface ValidationErrorResponse {
   property: string;
   constraints: {
     [type: string]: string;
   };
+  children?: ValidationErrorResponse[];
 }
 
 /**
@@ -23,6 +27,78 @@ interface ValidationErrorResponse {
 export class HttpExceptionFilter implements ExceptionFilter {
   private readonly logger = new Logger(HttpExceptionFilter.name);
 
+  /**
+   * Extrai a primeira mensagem de erro de validação para usar como mensagem principal
+   */
+  private getFirstValidationErrorMessage(validationErrors: ValidationError[] | Array<{ field: string; messages: string[] }>): string {
+    if (!validationErrors || validationErrors.length === 0) {
+      return 'Erro de validação';
+    }
+    
+    // Verifica se é um array de ValidationError (class-validator)
+    if ('property' in validationErrors[0] || 'constraints' in validationErrors[0]) {
+      const errors = validationErrors as ValidationError[];
+      for (const error of errors) {
+        if (error.constraints) {
+          const constraintMessage = Object.values(error.constraints)[0];
+          if (constraintMessage) {
+            return constraintMessage;
+          }
+        }
+        
+        // Se não encontrou nas constraints, verifica os filhos
+        if (error.children && error.children.length > 0) {
+          const childMessage = this.getFirstValidationErrorMessage(error.children);
+          if (childMessage && childMessage !== 'Erro de validação') {
+            return childMessage;
+          }
+        }
+      }
+    } 
+    // Se for o formato interno { field: string; messages: string[] }
+    else if ('field' in validationErrors[0] && 'messages' in validationErrors[0]) {
+      const errors = validationErrors as Array<{ field: string; messages: string[] }>;
+      for (const error of errors) {
+        if (error.messages && error.messages.length > 0) {
+          return error.messages[0];
+        }
+      }
+    }
+    
+    return 'Erro de validação';
+  }
+  
+  /**
+   * Processa os erros de validação em um formato estruturado
+   */
+  private processValidationErrors(
+    validationErrors: ValidationError[],
+    parentProperty: string = ''
+  ): Array<{ field: string; messages: string[] }> {
+    const result: Array<{ field: string; messages: string[] }> = [];
+    
+    for (const error of validationErrors) {
+      const property = parentProperty ? `${parentProperty}.${error.property}` : error.property;
+      
+      if (error.constraints) {
+        const messages = Object.values(error.constraints);
+        if (messages.length > 0) {
+          result.push({
+            field: property,
+            messages,
+          });
+        }
+      }
+      
+      if (error.children && error.children.length > 0) {
+        const childErrors = this.processValidationErrors(error.children, property);
+        result.push(...childErrors);
+      }
+    }
+    
+    return result;
+  }
+
   catch(exception: unknown, host: ArgumentsHost) {
     const ctx = host.switchToHttp();
     const response = ctx.getResponse<Response>();
@@ -42,28 +118,44 @@ export class HttpExceptionFilter implements ExceptionFilter {
         const responseObj = exceptionResponse as any;
 
         // Trata erros de validação
-        if (Array.isArray(responseObj.message)) {
+        if (exception instanceof BadRequestException) {
           code = 'VALIDATION_ERROR';
-          message = 'Erro de validação';
-          validationErrors = responseObj.message.reduce(
-            (
-              acc: Array<{ field: string; messages: string[] }>,
-              error: string,
-            ) => {
-              const [field, ...errorMsgs] = error.split(' ');
-              const fieldName = field.replace(/^\w+\.(\w+)$/, '$1');
-              const errorMessage = errorMsgs.join(' ').replace(/(^"|"$)/g, '');
-
-              const existingError = acc.find((e) => e.field === fieldName);
-              if (existingError) {
-                existingError.messages.push(errorMessage);
-              } else {
-                acc.push({ field: fieldName, messages: [errorMessage] });
-              }
-              return acc;
-            },
-            [],
-          );
+          
+          // Caso o erro já venha formatado pelo ValidationPipe
+          if (responseObj.errors && Array.isArray(responseObj.errors)) {
+            validationErrors = responseObj.errors.map((err: any) => ({
+              field: err.field || 'geral',
+              messages: [err.message],
+            }));
+            // Converte para o formato ValidationError para usar com getFirstValidationErrorMessage
+            const validationErrorObjects = responseObj.errors.map((err: any) => ({
+              property: err.field || 'geral',
+              constraints: {
+                custom: err.message
+              },
+              children: []
+            }));
+            message = this.getFirstValidationErrorMessage(validationErrorObjects);
+          }
+          // Caso seja um erro de validação do class-validator
+          else if (responseObj.message && Array.isArray(responseObj.message)) {
+            if (responseObj.message[0] && typeof responseObj.message[0] === 'object' && responseObj.message[0].property) {
+              // É um erro de validação do class-validator
+              message = this.getFirstValidationErrorMessage(responseObj.message);
+              validationErrors = this.processValidationErrors(responseObj.message);
+            } else {
+              // É uma lista de mensagens de erro
+              message = responseObj.message[0] || 'Erro de validação';
+              validationErrors = responseObj.message.map((msg: string) => ({
+                field: 'geral',
+                messages: [msg],
+              }));
+            }
+          }
+          // Outros tipos de BadRequest
+          else if (responseObj.message) {
+            message = responseObj.message;
+          }
         } else if (responseObj.message) {
           message = responseObj.message;
           code = responseObj.code || code;
diff --git a/src/shared/request-context/util/index.ts b/src/shared/request-context/util/index.ts
index 5fe58e4..e0f8cf6 100644
--- a/src/shared/request-context/util/index.ts
+++ b/src/shared/request-context/util/index.ts
@@ -19,9 +19,7 @@ export function createRequestContext(request: Request): RequestContext {
 
   // If request.user does not exist, we explicitly set it to null.
   ctx.user = request.user
-    ? plainToClass(UserAccessTokenClaims, request.user, {
-        excludeExtraneousValues: true,
-      })
+    ? request.user as UserAccessTokenClaims
     : null;
 
   return ctx;
diff --git a/validate-docker-pgben.ps1 b/validate-docker-pgben.ps1
deleted file mode 100644
index e69de29..0000000
diff --git a/yarn.lock b/yarn.lock
index 3391a61..3fd927d 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -68,6 +68,11 @@
     ora "5.4.1"
     rxjs "7.8.1"
 
+"@assemblyscript/loader@^0.19.21":
+  version "0.19.23"
+  resolved "https://registry.npmjs.org/@assemblyscript/loader/-/loader-0.19.23.tgz"
+  integrity sha512-ulkCYfFbYj01ie1MDOyxv2F6SpRN1TOj7fQxbP07D6HmeR+gr2JLSmINKjga2emB+b1L2KGrFKBTc+e00p54nw==
+
 "@aws-crypto/crc32@5.2.0":
   version "5.2.0"
   resolved "https://registry.npmjs.org/@aws-crypto/crc32/-/crc32-5.2.0.tgz"
@@ -1156,6 +1161,11 @@
     "@fastify/forwarded" "^3.0.0"
     ipaddr.js "^2.1.0"
 
+"@golevelup/ts-jest@^0.7.0":
+  version "0.7.0"
+  resolved "https://registry.npmjs.org/@golevelup/ts-jest/-/ts-jest-0.7.0.tgz"
+  integrity sha512-b5Kf+NiEfWuMGUD5bl/Gm/RqojS4Sr/4Q0ySXN4xn3xlkhgPYG6nGLBeNjk3MiM2I3ztVVFfI7SB8ajqDy6Idw==
+
 "@hapi/hoek@^9.0.0", "@hapi/hoek@^9.3.0":
   version "9.3.0"
   resolved "https://registry.npmjs.org/@hapi/hoek/-/hoek-9.3.0.tgz"
@@ -1196,29 +1206,10 @@
   resolved "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz"
   integrity sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==
 
-"@img/sharp-libvips-linux-x64@1.1.0":
-  version "1.1.0"
-  resolved "https://registry.npmjs.org/@img/sharp-libvips-linux-x64/-/sharp-libvips-linux-x64-1.1.0.tgz"
-  integrity sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==
-
-"@img/sharp-libvips-linuxmusl-x64@1.1.0":
-  version "1.1.0"
-  resolved "https://registry.npmjs.org/@img/sharp-libvips-linuxmusl-x64/-/sharp-libvips-linuxmusl-x64-1.1.0.tgz"
-  integrity sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==
-
-"@img/sharp-linux-x64@0.34.1":
+"@img/sharp-win32-x64@0.34.1":
   version "0.34.1"
-  resolved "https://registry.npmjs.org/@img/sharp-linux-x64/-/sharp-linux-x64-0.34.1.tgz"
-  integrity sha512-wExv7SH9nmoBW3Wr2gvQopX1k8q2g5V5Iag8Zk6AVENsjwd+3adjwxtp3Dcu2QhOXr8W9NusBU6XcQUohBZ5MA==
-  optionalDependencies:
-    "@img/sharp-libvips-linux-x64" "1.1.0"
-
-"@img/sharp-linuxmusl-x64@0.34.1":
-  version "0.34.1"
-  resolved "https://registry.npmjs.org/@img/sharp-linuxmusl-x64/-/sharp-linuxmusl-x64-0.34.1.tgz"
-  integrity sha512-pax/kTR407vNb9qaSIiWVnQplPcGU8LRIJpDT5o8PdAx5aAA7AS3X9PS8Isw1/WfqgQorPotjrZL3Pqh6C5EBg==
-  optionalDependencies:
-    "@img/sharp-libvips-linuxmusl-x64" "1.1.0"
+  resolved "https://registry.npmjs.org/@img/sharp-win32-x64/-/sharp-win32-x64-0.34.1.tgz"
+  integrity sha512-hw1iIAHpNE8q3uMIRCgGOeDoz9KtFNarFLQclLxr/LK1VBkj8nby18RjFvr6aP7USRYAjTZW6yisnBWMX571Tw==
 
 "@inquirer/checkbox@^4.1.2", "@inquirer/checkbox@^4.1.5":
   version "4.1.5"
@@ -1658,6 +1649,13 @@
   resolved "https://registry.npmjs.org/@microsoft/tsdoc/-/tsdoc-0.15.1.tgz"
   integrity sha512-4aErSrCR/On/e5G2hDP0wjooqDdauzEbIq8hIkIe5pXV0rtWJZvdCEKL0ykZxex+IxIwBp0eGeV48hQN07dXtw==
 
+"@minimistjs/subarg@^1.0.0":
+  version "1.0.0"
+  resolved "https://registry.npmjs.org/@minimistjs/subarg/-/subarg-1.0.0.tgz"
+  integrity sha512-Q/ONBiM2zNeYUy0mVSO44mWWKYM3UHuEK43PKIOzJCbvUnPoMH1K+gk3cf1kgnCVJFlWmddahQQCmrmBGlk9jQ==
+  dependencies:
+    minimist "^1.1.0"
+
 "@modelcontextprotocol/sdk@^1.8.0":
   version "1.11.0"
   resolved "https://registry.npmjs.org/@modelcontextprotocol/sdk/-/sdk-1.11.0.tgz"
@@ -1674,20 +1672,15 @@
     zod "^3.23.8"
     zod-to-json-schema "^3.24.1"
 
-"@msgpackr-extract/msgpackr-extract-linux-x64@3.0.3":
+"@msgpackr-extract/msgpackr-extract-win32-x64@3.0.3":
   version "3.0.3"
-  resolved "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-linux-x64/-/msgpackr-extract-linux-x64-3.0.3.tgz"
-  integrity sha512-cvwNfbP07pKUfq1uH+S6KJ7dT9K8WOE4ZiAcsrSes+UY55E/0jLYc+vq+DO7jlmqRb5zAggExKm0H7O/CBaesg==
-
-"@napi-rs/nice-linux-x64-gnu@1.0.1":
-  version "1.0.1"
-  resolved "https://registry.npmjs.org/@napi-rs/nice-linux-x64-gnu/-/nice-linux-x64-gnu-1.0.1.tgz"
-  integrity sha512-XQAJs7DRN2GpLN6Fb+ZdGFeYZDdGl2Fn3TmFlqEL5JorgWKrQGRUrpGKbgZ25UeZPILuTKJ+OowG2avN8mThBA==
+  resolved "https://registry.npmjs.org/@msgpackr-extract/msgpackr-extract-win32-x64/-/msgpackr-extract-win32-x64-3.0.3.tgz"
+  integrity sha512-x0fWaQtYp4E6sktbsdAqnehxDgEc/VwM7uLsRCYWaiGu0ykYdZPiS8zCWdnjHwyiumousxfBm4SO31eXqwEZhQ==
 
-"@napi-rs/nice-linux-x64-musl@1.0.1":
+"@napi-rs/nice-win32-x64-msvc@1.0.1":
   version "1.0.1"
-  resolved "https://registry.npmjs.org/@napi-rs/nice-linux-x64-musl/-/nice-linux-x64-musl-1.0.1.tgz"
-  integrity sha512-/rodHpRSgiI9o1faq9SZOp/o2QkKQg7T+DK0R5AkbnI/YxvAIEHf2cngjYzLMQSQgUhxym+LFr+UGZx4vK4QdQ==
+  resolved "https://registry.npmjs.org/@napi-rs/nice-win32-x64-msvc/-/nice-win32-x64-msvc-1.0.1.tgz"
+  integrity sha512-JlF+uDcatt3St2ntBG8H02F1mM45i5SF9W+bIKiReVE6wiy3o16oBP/yxt+RZ+N6LbCImJXJ6bXNO2kn9AXicg==
 
 "@napi-rs/nice@^1.0.1":
   version "1.0.1"
@@ -2565,15 +2558,10 @@
     slash "3.0.0"
     source-map "^0.7.3"
 
-"@swc/core-linux-x64-gnu@1.11.24":
-  version "1.11.24"
-  resolved "https://registry.npmjs.org/@swc/core-linux-x64-gnu/-/core-linux-x64-gnu-1.11.24.tgz"
-  integrity sha512-IM7d+STVZD48zxcgo69L0yYptfhaaE9cMZ+9OoMxirNafhKKXwoZuufol1+alEFKc+Wbwp+aUPe/DeWC/Lh3dg==
-
-"@swc/core-linux-x64-musl@1.11.24":
+"@swc/core-win32-x64-msvc@1.11.24":
   version "1.11.24"
-  resolved "https://registry.npmjs.org/@swc/core-linux-x64-musl/-/core-linux-x64-musl-1.11.24.tgz"
-  integrity sha512-DZByJaMVzSfjQKKQn3cqSeqwy6lpMaQDQQ4HPlch9FWtDx/dLcpdIhxssqZXcR2rhaQVIaRQsCqwV6orSDGAGw==
+  resolved "https://registry.npmjs.org/@swc/core-win32-x64-msvc/-/core-win32-x64-msvc-1.11.24.tgz"
+  integrity sha512-sybnXtOsdB+XvzVFlBVGgRHLqp3yRpHK7CrmpuDKszhj/QhmsaZzY/GHSeALlMtLup13M0gqbcQvsTNlAHTg3w==
 
 "@swc/core@^1.10.7", "@swc/core@^1.2.66", "@swc/core@^1.3.62", "@swc/core@>=1.2.50":
   version "1.11.24"
@@ -3561,6 +3549,35 @@ atomic-sleep@^1.0.0:
   resolved "https://registry.npmjs.org/atomic-sleep/-/atomic-sleep-1.0.0.tgz"
   integrity sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==
 
+autocannon@^8.0.0:
+  version "8.0.0"
+  resolved "https://registry.npmjs.org/autocannon/-/autocannon-8.0.0.tgz"
+  integrity sha512-fMMcWc2JPFcUaqHeR6+PbmEpTxCrPZyBUM95oG4w3ngJ8NfBNas/ZXA+pTHXLqJ0UlFVTcy05GC25WxKx/M20A==
+  dependencies:
+    "@minimistjs/subarg" "^1.0.0"
+    chalk "^4.1.0"
+    char-spinner "^1.0.1"
+    cli-table3 "^0.6.0"
+    color-support "^1.1.1"
+    cross-argv "^2.0.0"
+    form-data "^4.0.0"
+    has-async-hooks "^1.0.0"
+    hdr-histogram-js "^3.0.0"
+    hdr-histogram-percentiles-obj "^3.0.0"
+    http-parser-js "^0.5.2"
+    hyperid "^3.0.0"
+    lodash.chunk "^4.2.0"
+    lodash.clonedeep "^4.5.0"
+    lodash.flatten "^4.4.0"
+    manage-path "^2.0.0"
+    on-net-listen "^1.1.1"
+    pretty-bytes "^5.4.1"
+    progress "^2.0.3"
+    reinterval "^1.1.0"
+    retimer "^3.0.0"
+    semver "^7.3.2"
+    timestring "^6.0.0"
+
 available-typed-arrays@^1.0.7:
   version "1.0.7"
   resolved "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz"
@@ -3671,7 +3688,7 @@ bare-events@^2.2.0:
   resolved "https://registry.npmjs.org/bare-events/-/bare-events-2.5.4.tgz"
   integrity sha512-+gFfDkR8pj4/TrWCGUGWmJIkBwuxPS5F+a5yWjOHQt2hHvNZd5YLzadjmDUtFmMM4y429bnKLa8bYBMHcYdnQA==
 
-base64-js@^1.1.2, base64-js@^1.3.0, base64-js@^1.3.1:
+base64-js@^1.1.2, base64-js@^1.2.0, base64-js@^1.3.0, base64-js@^1.3.1:
   version "1.5.1"
   resolved "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz"
   integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==
@@ -4048,6 +4065,11 @@ char-regex@^1.0.2:
   resolved "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz"
   integrity sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==
 
+char-spinner@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.npmjs.org/char-spinner/-/char-spinner-1.0.1.tgz"
+  integrity sha512-acv43vqJ0+N0rD+Uw3pDHSxP30FHrywu2NO6/wBaHChJIizpDeBUd6NjqhNhy9LGaEAhZAXn46QzmlAvIWd16g==
+
 chardet@^0.7.0:
   version "0.7.0"
   resolved "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz"
@@ -4136,7 +4158,7 @@ cli-spinners@^2.5.0:
   resolved "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz"
   integrity sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==
 
-cli-table3@0.6.5:
+cli-table3@^0.6.0, cli-table3@0.6.5:
   version "0.6.5"
   resolved "https://registry.npmjs.org/cli-table3/-/cli-table3-0.6.5.tgz"
   integrity sha512-+W/5efTR7y5HRD7gACw9yQjqMVvEMLBHmboM/kPWam+H+Hmyrgjh6YncVKK122YZkXrLudzTuAukUw9FnMf7IQ==
@@ -4223,6 +4245,11 @@ color-string@^1.6.0, color-string@^1.9.0:
     color-name "^1.0.0"
     simple-swizzle "^0.2.2"
 
+color-support@^1.1.1:
+  version "1.1.3"
+  resolved "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz"
+  integrity sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==
+
 color@^3.1.3:
   version "3.2.1"
   resolved "https://registry.npmjs.org/color/-/color-3.2.1.tgz"
@@ -4478,6 +4505,11 @@ croner@~4.1.92:
   resolved "https://registry.npmjs.org/croner/-/croner-4.1.97.tgz"
   integrity sha512-/f6gpQuxDaqXu+1kwQYSckUglPaOrHdbIlBAu0YuW8/Cdb45XwXYNUBXg3r/9Mo6n540Kn/smKcZWko5x99KrQ==
 
+cross-argv@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.npmjs.org/cross-argv/-/cross-argv-2.0.0.tgz"
+  integrity sha512-YIaY9TR5Nxeb8SMdtrU8asWVM4jqJDNDYlKV21LxtYcfNJhp1kEsgSa6qXwXgzN0WQWGODps0+TlGp2xQSHwOg==
+
 cross-spawn@^7.0.3, cross-spawn@^7.0.6:
   version "7.0.6"
   resolved "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz"
@@ -5876,6 +5908,11 @@ handlebars@^4.7.8:
   optionalDependencies:
     uglify-js "^3.1.4"
 
+has-async-hooks@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.npmjs.org/has-async-hooks/-/has-async-hooks-1.0.0.tgz"
+  integrity sha512-YF0VPGjkxr7AyyQQNykX8zK4PvtEDsUJAPqwu06UFz1lb6EvI53sPh5H1kWxg8NXI5LsfRCZ8uX9NkYDZBb/mw==
+
 has-flag@^4.0.0:
   version "4.0.0"
   resolved "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz"
@@ -5912,6 +5949,20 @@ hasown@^2.0.2:
   dependencies:
     function-bind "^1.1.2"
 
+hdr-histogram-js@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-3.0.0.tgz"
+  integrity sha512-/EpvQI2/Z98mNFYEnlqJ8Ogful8OpArLG/6Tf2bPnkutBVLIeMVNHjk1ZDfshF2BUweipzbk+dB1hgSB7SIakw==
+  dependencies:
+    "@assemblyscript/loader" "^0.19.21"
+    base64-js "^1.2.0"
+    pako "^1.0.3"
+
+hdr-histogram-percentiles-obj@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.npmjs.org/hdr-histogram-percentiles-obj/-/hdr-histogram-percentiles-obj-3.0.0.tgz"
+  integrity sha512-7kIufnBqdsBGcSZLPJwqHT3yhk1QTsSlFsVD3kx5ixH/AlgBs9yM1q6DPhXZ8f8gtdqgh7N7/5btRLpQsS2gHw==
+
 helmet@^8.1.0:
   version "8.1.0"
   resolved "https://registry.npmjs.org/helmet/-/helmet-8.1.0.tgz"
@@ -5948,6 +5999,11 @@ http-errors@~1.6.1:
     setprototypeof "1.1.0"
     statuses ">= 1.4.0 < 2"
 
+http-parser-js@^0.5.2:
+  version "0.5.10"
+  resolved "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz"
+  integrity sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==
+
 http-proxy-agent@^7.0.0, http-proxy-agent@^7.0.1:
   version "7.0.2"
   resolved "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz"
@@ -5977,6 +6033,15 @@ human-signals@^2.1.0:
   resolved "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz"
   integrity sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==
 
+hyperid@^3.0.0:
+  version "3.3.0"
+  resolved "https://registry.npmjs.org/hyperid/-/hyperid-3.3.0.tgz"
+  integrity sha512-7qhCVT4MJIoEsNcbhglhdmBKb09QtcmJNiIQGq7js/Khf5FtQQ9bzcAuloeqBeee7XD7JqDeve9KNlQya5tSGQ==
+  dependencies:
+    buffer "^5.2.1"
+    uuid "^8.3.2"
+    uuid-parse "^1.1.0"
+
 iconv-lite@^0.4.24:
   version "0.4.24"
   resolved "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz"
@@ -6991,6 +7056,16 @@ locter@^2.1.6:
     jiti "^2.4.2"
     yaml "^2.7.0"
 
+lodash.chunk@^4.2.0:
+  version "4.2.0"
+  resolved "https://registry.npmjs.org/lodash.chunk/-/lodash.chunk-4.2.0.tgz"
+  integrity sha512-ZzydJKfUHJwHa+hF5X66zLFCBrWn5GeF28OHEr4WVWtNDXlQ/IjWKPBiikqKo2ne0+v6JgCgJ0GzJp8k8bHC7w==
+
+lodash.clonedeep@^4.5.0:
+  version "4.5.0"
+  resolved "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz"
+  integrity sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==
+
 lodash.defaults@^4.2.0:
   version "4.2.0"
   resolved "https://registry.npmjs.org/lodash.defaults/-/lodash.defaults-4.2.0.tgz"
@@ -7193,6 +7268,11 @@ makeerror@1.0.12:
   dependencies:
     tmpl "1.0.5"
 
+manage-path@^2.0.0:
+  version "2.0.0"
+  resolved "https://registry.npmjs.org/manage-path/-/manage-path-2.0.0.tgz"
+  integrity sha512-NJhyB+PJYTpxhxZJ3lecIGgh4kwIY2RAh44XvAz9UlqthlQwtPBf62uBVR8XaD8CRuSjQ6TnZH2lNJkbLPZM2A==
+
 math-intrinsics@^1.1.0:
   version "1.1.0"
   resolved "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz"
@@ -7365,7 +7445,7 @@ minimatch@^9.0.4:
   dependencies:
     brace-expansion "^2.0.1"
 
-minimist@^1.2.5, minimist@^1.2.6:
+minimist@^1.1.0, minimist@^1.2.5, minimist@^1.2.6:
   version "1.2.8"
   resolved "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz"
   integrity sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==
@@ -7634,6 +7714,11 @@ on-headers@~1.0.1, on-headers@~1.0.2:
   resolved "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz"
   integrity sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==
 
+on-net-listen@^1.1.1:
+  version "1.1.2"
+  resolved "https://registry.npmjs.org/on-net-listen/-/on-net-listen-1.1.2.tgz"
+  integrity sha512-y1HRYy8s/RlcBvDUwKXSmkODMdx4KSuIvloCnQYJ2LdBBC1asY4HtfhXwe3UWknLakATZDnbzht2Ijw3M1EqFg==
+
 once@^1.3.0, once@^1.4.0:
   version "1.4.0"
   resolved "https://registry.npmjs.org/once/-/once-1.4.0.tgz"
@@ -7757,7 +7842,7 @@ pako@^0.2.5:
   resolved "https://registry.npmjs.org/pako/-/pako-0.2.9.tgz"
   integrity sha512-NUcwaKxUxWrZLpDG+z/xZaCgQITkA/Dv4V/T6bw7VON6l1Xz/VnrBqrYjZQ12TamKHzITTfOEIYUj48y2KXImA==
 
-pako@~1.0.2:
+pako@^1.0.3, pako@~1.0.2:
   version "1.0.11"
   resolved "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz"
   integrity sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==
@@ -8185,6 +8270,11 @@ prettier@^3.4.2, prettier@>=3.0.0:
   resolved "https://registry.npmjs.org/prettier/-/prettier-3.5.3.tgz"
   integrity sha512-QQtaxnoDJeAkDvDKWCLiwIXkTgRhwYDEQCghU9Z6q03iyek/rxRh/2lC3HB7P8sWT2xC/y5JDctPLBIGzHKbhw==
 
+pretty-bytes@^5.4.1:
+  version "5.6.0"
+  resolved "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz"
+  integrity sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg==
+
 pretty-format@^29.0.0, pretty-format@^29.7.0:
   version "29.7.0"
   resolved "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz"
@@ -8214,6 +8304,11 @@ process-warning@^5.0.0:
   resolved "https://registry.npmjs.org/process-warning/-/process-warning-5.0.0.tgz"
   integrity sha512-a39t9ApHNx2L4+HBnQKqxxHNs1r7KF+Intd8Q/g1bUh6q0WIp9voPXJ/x0j+ZL45KF1pJd9+q2jLIRMfvEshkA==
 
+progress@^2.0.3:
+  version "2.0.3"
+  resolved "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz"
+  integrity sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==
+
 prom-client@^15.0.0, prom-client@^15.1.3:
   version "15.1.3"
   resolved "https://registry.npmjs.org/prom-client/-/prom-client-15.1.3.tgz"
@@ -8463,6 +8558,11 @@ redis-parser@^3.0.0:
   resolved "https://registry.npmjs.org/reflect-metadata/-/reflect-metadata-0.2.2.tgz"
   integrity sha512-urBwgfrvVP/eAyXx4hluJivBKzuEbSQs9rKWCrCkbSxNv8mxPcUZKeuoF3Uy4mJl3Lwprp6yy5/39VWigZ4K6Q==
 
+reinterval@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.npmjs.org/reinterval/-/reinterval-1.1.0.tgz"
+  integrity sha512-QIRet3SYrGp0HUHO88jVskiG6seqUGC5iAG7AwI/BV4ypGcuqk9Du6YQBUOUqm9c8pw1eyLoIaONifRua1lsEQ==
+
 repeat-string@^1.6.1:
   version "1.6.1"
   resolved "https://registry.npmjs.org/repeat-string/-/repeat-string-1.6.1.tgz"
@@ -8553,6 +8653,11 @@ ret@~0.5.0:
   resolved "https://registry.npmjs.org/ret/-/ret-0.5.0.tgz"
   integrity sha512-I1XxrZSQ+oErkRR4jYbAyEEu2I0avBvvMM5JN+6EBprOGRCs63ENqZ3vjavq8fBw2+62G5LF5XelKwuJpcvcxw==
 
+retimer@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.npmjs.org/retimer/-/retimer-3.0.0.tgz"
+  integrity sha512-WKE0j11Pa0ZJI5YIk0nflGI7SQsfl2ljihVy7ogh7DeQSeYAUi0ubZ/yEueGtDfUPk6GH5LRw1hBdLq4IwUBWA==
+
 reusify@^1.0.4:
   version "1.1.0"
   resolved "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz"
@@ -8747,7 +8852,7 @@ semver@^6.3.1:
   resolved "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz"
   integrity sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==
 
-semver@^7.3.4, semver@^7.3.5, semver@^7.3.8, semver@^7.5.2, semver@^7.5.3, semver@^7.5.4, semver@^7.6.0, semver@^7.6.2, semver@^7.7.1, semver@^7.7.2:
+semver@^7.3.2, semver@^7.3.4, semver@^7.3.5, semver@^7.3.8, semver@^7.5.2, semver@^7.5.3, semver@^7.5.4, semver@^7.6.0, semver@^7.6.2, semver@^7.7.1, semver@^7.7.2:
   version "7.7.2"
   resolved "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz"
   integrity sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==
@@ -9421,6 +9526,11 @@ through2@^4.0.2:
   dependencies:
     readable-stream "3"
 
+timestring@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.npmjs.org/timestring/-/timestring-6.0.0.tgz"
+  integrity sha512-wMctrWD2HZZLuIlchlkE2dfXJh7J2KDI9Dwl+2abPYg0mswQHfOAyQW3jJg1pY5VfttSINZuKcXoB3FGypVklA==
+
 tiny-emitter@^2.1.0:
   version "2.1.0"
   resolved "https://registry.npmjs.org/tiny-emitter/-/tiny-emitter-2.1.0.tgz"
@@ -9803,6 +9913,11 @@ utils-merge@^1.0.1:
   resolved "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz"
   integrity sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==
 
+uuid-parse@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.npmjs.org/uuid-parse/-/uuid-parse-1.1.0.tgz"
+  integrity sha512-OdmXxA8rDsQ7YpNVbKSJkNzTw2I+S5WsbMDnCtIWSQaosNAcWtFuI/YK1TjzUI6nbkgiqEyh8gWngfcv8Asd9A==
+
 uuid@^11.1.0:
   version "11.1.0"
   resolved "https://registry.npmjs.org/uuid/-/uuid-11.1.0.tgz"
@@ -9813,6 +9928,11 @@ uuid@^8.3.0:
   resolved "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz"
   integrity sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==
 
+uuid@^8.3.2:
+  version "8.3.2"
+  resolved "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz"
+  integrity sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==
+
 uuid@^9.0.1:
   version "9.0.1"
   resolved "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz"
