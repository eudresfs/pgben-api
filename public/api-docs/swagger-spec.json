{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "operationId": "Auth_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwaggerBaseApiResponseFor class AuthTokenOutput {\n    accessToken;\n    refreshToken;\n} "
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "User login API",
        "tags": [
          "Autenticação"
        ]
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "operationId": "Auth_registerLocal",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwaggerBaseApiResponseFor class RegisterOutput {\n    id;\n    name;\n    username;\n    roles;\n    email;\n    isAccountDisabled;\n    created_at;\n    updated_at;\n} "
                }
              }
            }
          }
        },
        "summary": "User registration API",
        "tags": [
          "Autenticação"
        ]
      }
    },
    "/api/v1/auth/refresh-token": {
      "post": {
        "operationId": "Auth_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwaggerBaseApiResponseFor class AuthTokenOutput {\n    accessToken;\n    refreshToken;\n} "
                }
              }
            }
          },
          "401": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseApiErrorResponse"
                }
              }
            }
          }
        },
        "summary": "Refresh access token API",
        "tags": [
          "Autenticação"
        ]
      }
    },
    "/api/v1/usuario": {
      "get": {
        "operationId": "Usuario_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Página atual",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Itens por página",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Termo de busca",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Filtro por papel",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filtro por status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unidadeId",
            "required": false,
            "in": "query",
            "description": "Filtro por unidade",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de usuários retornada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar usuários",
        "tags": [
          "Usuários"
        ]
      },
      "post": {
        "operationId": "Usuario_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUsuarioDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Usuário criado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "409": {
            "description": "Email, CPF ou matrícula já em uso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar novo usuário",
        "tags": [
          "Usuários"
        ]
      }
    },
    "/api/v1/usuario/{id}": {
      "get": {
        "operationId": "Usuario_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário encontrado com sucesso"
          },
          "404": {
            "description": "Usuário não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter detalhes de um usuário",
        "tags": [
          "Usuários"
        ]
      },
      "put": {
        "operationId": "Usuario_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUsuarioDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Usuário atualizado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Usuário não encontrado"
          },
          "409": {
            "description": "Email, CPF ou matrícula já em uso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar usuário existente",
        "tags": [
          "Usuários"
        ]
      }
    },
    "/api/v1/usuario/{id}/status": {
      "patch": {
        "operationId": "Usuario_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusUsuarioDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status atualizado com sucesso"
          },
          "404": {
            "description": "Usuário não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Ativar/inativar usuário",
        "tags": [
          "Usuários"
        ]
      }
    },
    "/api/v1/usuario/{id}/senha": {
      "put": {
        "operationId": "Usuario_updateSenha",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSenhaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Senha alterada com sucesso"
          },
          "400": {
            "description": "Dados inválidos ou senha atual incorreta"
          },
          "404": {
            "description": "Usuário não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Alterar senha",
        "tags": [
          "Usuários"
        ]
      }
    },
    "/api/v1/usuario/me": {
      "get": {
        "operationId": "Usuario_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Perfil obtido com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter perfil do usuário atual",
        "tags": [
          "Usuários"
        ]
      }
    },
    "/api/v1/unidade": {
      "get": {
        "operationId": "Unidade_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Página atual",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Itens por página",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Termo de busca",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tipo",
            "required": false,
            "in": "query",
            "description": "Filtro por tipo de unidade",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filtro por status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de unidades retornada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar unidades",
        "tags": [
          "Unidades"
        ]
      },
      "post": {
        "operationId": "Unidade_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnidadeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Unidade criada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "409": {
            "description": "Código já em uso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar nova unidade",
        "tags": [
          "Unidades"
        ]
      }
    },
    "/api/v1/unidade/{id}": {
      "get": {
        "operationId": "Unidade_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unidade encontrada com sucesso"
          },
          "404": {
            "description": "Unidade não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter detalhes de uma unidade",
        "tags": [
          "Unidades"
        ]
      },
      "put": {
        "operationId": "Unidade_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUnidadeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unidade atualizada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Unidade não encontrada"
          },
          "409": {
            "description": "Código já em uso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar unidade existente",
        "tags": [
          "Unidades"
        ]
      }
    },
    "/api/v1/unidade/{id}/status": {
      "patch": {
        "operationId": "Unidade_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusUnidadeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status atualizado com sucesso"
          },
          "404": {
            "description": "Unidade não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Ativar/inativar unidade",
        "tags": [
          "Unidades"
        ]
      }
    },
    "/api/v1/unidade/{id}/setor": {
      "get": {
        "operationId": "Unidade_findSetores",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de setores retornada com sucesso"
          },
          "404": {
            "description": "Unidade não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar setores de uma unidade",
        "tags": [
          "Unidades"
        ]
      }
    },
    "/api/v1/setor": {
      "post": {
        "operationId": "Setor_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSetorDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Setor criado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Unidade não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar novo setor",
        "tags": [
          "Unidades"
        ]
      }
    },
    "/api/v1/setor/{id}": {
      "put": {
        "operationId": "Setor_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSetorDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Setor atualizado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Setor não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar setor existente",
        "tags": [
          "Unidades"
        ]
      },
      "get": {
        "operationId": "Setor_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Setor encontrado com sucesso"
          },
          "404": {
            "description": "Setor não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter detalhes de um setor",
        "tags": [
          "Unidades"
        ]
      }
    },
    "/api/v1/cidadao": {
      "get": {
        "description": "Retorna uma lista paginada de cidadãos com opções de filtro.",
        "operationId": "Cidadao_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Termo de busca (busca por nome, CPF ou NIS)",
            "schema": {
              "example": "Maria",
              "type": "string"
            }
          },
          {
            "name": "bairro",
            "required": false,
            "in": "query",
            "description": "Filtrar por bairro",
            "schema": {
              "example": "Centro",
              "type": "string"
            }
          },
          {
            "name": "ativo",
            "required": false,
            "in": "query",
            "description": "Filtrar por status (true para ativos, false para inativos)",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Número de itens por página (padrão: 10, máximo: 100)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Número da página (padrão: 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de cidadãos retornada com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CidadaoPaginatedResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Não autorizado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar cidadãos",
        "tags": [
          "Cidadão"
        ]
      },
      "post": {
        "description": "Cadastra um novo cidadão no sistema.",
        "operationId": "Cidadao_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCidadaoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cidadão criado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CidadaoResponseDto"
                }
              }
            }
          },
          "201": {
            "description": "Cidadão criado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CidadaoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos fornecidos",
            "schema": {
              "example": {
                "statusCode": 400,
                "message": "CPF inválido",
                "error": "Bad Request"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflito - CPF ou NIS já cadastrado",
            "schema": {
              "example": {
                "statusCode": 409,
                "message": "Já existe um cidadão cadastrado com este CPF",
                "error": "Conflict"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar cidadão",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/{id}": {
      "get": {
        "description": "Retorna os detalhes completos de um cidadão pelo seu ID.",
        "operationId": "Cidadao_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do cidadão",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cidadão encontrado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CidadaoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "ID inválido",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Cidadão não encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter detalhes de um cidadão",
        "tags": [
          "Cidadão"
        ]
      },
      "put": {
        "description": "Atualiza os dados de um cidadão existente.",
        "operationId": "Cidadao_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do cidadão a ser atualizado",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCidadaoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cidadão atualizado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CidadaoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Não autorizado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Acesso negado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Cidadão não encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "CPF ou NIS já em uso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar cidadão existente",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/cpf/{cpf}": {
      "get": {
        "description": "Busca um cidadão pelo número do CPF (com ou sem formatação).",
        "operationId": "Cidadao_findByCpf",
        "parameters": [
          {
            "name": "cpf",
            "required": true,
            "in": "path",
            "description": "CPF do cidadão (com ou sem formatação)",
            "schema": {
              "example": "123.456.789-00",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cidadão encontrado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CidadaoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "CPF inválido",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Cidadão não encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Buscar cidadão por CPF",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/nis/{nis}": {
      "get": {
        "description": "Busca um cidadão pelo número do NIS (PIS/PASEP).",
        "operationId": "Cidadao_findByNis",
        "parameters": [
          {
            "name": "nis",
            "required": true,
            "in": "path",
            "description": "Número do NIS (PIS/PASEP)",
            "schema": {
              "example": "12345678901",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cidadão encontrado com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CidadaoResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "NIS inválido",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Cidadão não encontrado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Buscar cidadão por NIS",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/{id}/solicitacao": {
      "get": {
        "operationId": "Cidadao_findSolicitacoes",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Histórico retornado com sucesso"
          },
          "404": {
            "description": "Cidadão não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Histórico de solicitações",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/{id}/composicao": {
      "post": {
        "operationId": "Cidadao_addComposicaoFamiliar",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComposicaoFamiliarDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Membro adicionado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Cidadão não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Adicionar membro à composição familiar",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/papel": {
      "post": {
        "operationId": "PapelCidadao_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePapelCidadaoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Papel criado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Cidadão não encontrado"
          },
          "409": {
            "description": "Cidadão já possui este papel"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar novo papel para um cidadão",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/papel/cidadao/{cidadaoId}": {
      "get": {
        "operationId": "PapelCidadao_findByCidadaoId",
        "parameters": [
          {
            "name": "cidadaoId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de papéis retornada com sucesso"
          },
          "404": {
            "description": "Cidadão não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar papéis de um cidadão",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/papel/tipo/{tipoPapel}": {
      "get": {
        "operationId": "PapelCidadao_findCidadaosByTipoPapel",
        "parameters": [
          {
            "name": "tipoPapel",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de cidadãos retornada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Buscar cidadãos por tipo de papel",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/papel/verificar/{cidadaoId}/{tipoPapel}": {
      "get": {
        "operationId": "PapelCidadao_verificarPapel",
        "parameters": [
          {
            "name": "cidadaoId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tipoPapel",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Verificação realizada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verificar se um cidadão possui um determinado papel",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/cidadao/papel/{id}": {
      "delete": {
        "operationId": "PapelCidadao_desativar",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Papel desativado com sucesso"
          },
          "404": {
            "description": "Papel não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Desativar papel de um cidadão",
        "tags": [
          "Cidadão"
        ]
      }
    },
    "/api/v1/beneficio": {
      "get": {
        "description": "Retorna uma lista paginada de todos os tipos de benefícios cadastrados no sistema.",
        "operationId": "Beneficio_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Página atual",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Itens por página",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Termo de busca (nome)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ativo",
            "required": false,
            "in": "query",
            "description": "Filtro por status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de benefícios retornada com sucesso",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar tipos de benefícios",
        "tags": [
          "Benefícios"
        ]
      },
      "post": {
        "description": "Cria um novo tipo de benefício no sistema.",
        "operationId": "Beneficio_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTipoBeneficioDto"
              },
              "examples": {
                "Auxílio Emergencial": {
                  "value": ""
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Benefício criado com sucesso",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          },
          "400": {
            "description": "Dados inválidos",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          },
          "409": {
            "description": "Nome já em uso",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar novo tipo de benefício",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{id}": {
      "get": {
        "description": "Retorna os detalhes completos de um tipo de benefício específico.",
        "operationId": "Beneficio_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Benefício encontrado com sucesso",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          },
          "404": {
            "description": "Benefício não encontrado",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter detalhes de um benefício",
        "tags": [
          "Benefícios"
        ]
      },
      "put": {
        "description": "Atualiza os dados de um tipo de benefício existente.",
        "operationId": "Beneficio_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTipoBeneficioDto"
              },
              "examples": {
                "Atualização de Benefício": {
                  "value": ""
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Benefício atualizado com sucesso",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          },
          "400": {
            "description": "Dados inválidos",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          },
          "404": {
            "description": "Benefício não encontrado",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          },
          "409": {
            "description": "Nome já em uso",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar tipo de benefício existente",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{id}/requisitos": {
      "get": {
        "operationId": "Beneficio_findRequisitos",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de requisitos retornada com sucesso"
          },
          "404": {
            "description": "Benefício não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar requisitos documentais",
        "tags": [
          "Benefícios"
        ]
      },
      "post": {
        "operationId": "Beneficio_addRequisito",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRequisitoDocumentoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Requisito adicionado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Benefício não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Adicionar requisito documental",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{id}/fluxo": {
      "put": {
        "operationId": "Beneficio_configurarFluxo",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurarFluxoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Fluxo configurado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Benefício não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Configurar fluxo de aprovação",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{tipoBeneficioId}/campos-dinamicos": {
      "get": {
        "operationId": "CampoDinamico_findAll",
        "parameters": [
          {
            "name": "tipoBeneficioId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de campos dinâmicos retornada com sucesso"
          },
          "404": {
            "description": "Tipo de benefício não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar campos dinâmicos de um benefício",
        "tags": [
          "Benefícios"
        ]
      },
      "post": {
        "operationId": "CampoDinamico_create",
        "parameters": [
          {
            "name": "tipoBeneficioId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCampoDinamicoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Campo dinâmico criado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Tipo de benefício não encontrado"
          },
          "409": {
            "description": "Nome já em uso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar novo campo dinâmico",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{tipoBeneficioId}/campos-dinamicos/{id}": {
      "put": {
        "operationId": "CampoDinamico_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campo dinâmico atualizado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Campo dinâmico não encontrado"
          },
          "409": {
            "description": "Nome já em uso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar campo dinâmico existente",
        "tags": [
          "Benefícios"
        ]
      },
      "delete": {
        "operationId": "CampoDinamico_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Campo dinâmico removido com sucesso"
          },
          "404": {
            "description": "Campo dinâmico não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remover campo dinâmico",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{tipoBeneficioId}/campos-dinamicos/schema": {
      "get": {
        "operationId": "CampoDinamico_getSchemaAtivo",
        "parameters": [
          {
            "name": "tipoBeneficioId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schema retornado com sucesso"
          },
          "404": {
            "description": "Tipo de benefício não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter schema ativo de um benefício",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{tipoBeneficioId}/campos-dinamicos/schema/historico": {
      "get": {
        "operationId": "CampoDinamico_getHistoricoVersoes",
        "parameters": [
          {
            "name": "tipoBeneficioId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Histórico retornado com sucesso"
          },
          "404": {
            "description": "Tipo de benefício não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter histórico de versões do schema",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/beneficio/{tipoBeneficioId}/formulario": {
      "get": {
        "operationId": "FormularioDinamico_getFormularioDinamico",
        "parameters": [
          {
            "name": "tipoBeneficioId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Estrutura de formulário retornada com sucesso"
          },
          "404": {
            "description": "Tipo de benefício não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter estrutura de formulário dinâmico",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/solicitacao": {
      "post": {
        "operationId": "Solicitacao_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSolicitacaoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Solicitação criada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar nova solicitação de benefício",
        "tags": [
          "Solicitações"
        ]
      },
      "get": {
        "operationId": "Solicitacao_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Página atual",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Itens por página",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filtro por status",
            "schema": {
              "enum": [
                "rascunho",
                "pendente",
                "em_analise",
                "aguardando_documentos",
                "aprovada",
                "reprovada",
                "liberada",
                "cancelada"
              ],
              "type": "string"
            }
          },
          {
            "name": "unidade_id",
            "required": false,
            "in": "query",
            "description": "Filtro por unidade",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beneficio_id",
            "required": false,
            "in": "query",
            "description": "Filtro por tipo de benefício",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "protocolo",
            "required": false,
            "in": "query",
            "description": "Busca por protocolo",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_inicio",
            "required": false,
            "in": "query",
            "description": "Data inicial (formato: YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_fim",
            "required": false,
            "in": "query",
            "description": "Data final (formato: YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de solicitações retornada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar solicitações",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/solicitacao/{id}": {
      "get": {
        "operationId": "Solicitacao_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitação encontrada com sucesso"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter detalhes de uma solicitação",
        "tags": [
          "Solicitações"
        ]
      },
      "put": {
        "operationId": "Solicitacao_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Dados da solicitação atualizada",
          "content": {
            "application/json": {
              "schema": {
                "example": {
                  "nome": "João Silva",
                  "cpf": "12345678901",
                  "data_nascimento": "1990-01-01",
                  "endereco": {
                    "logradouro": "Rua Exemplo",
                    "numero": "123",
                    "bairro": "Bairro Exemplo",
                    "cidade": "Cidade Exemplo",
                    "estado": "Estado Exemplo",
                    "cep": "12345678"
                  },
                  "contato": {
                    "telefone": "123456789",
                    "email": "joao.silva@example.com"
                  },
                  "beneficio": {
                    "id": 1,
                    "nome": "Benefício Exemplo"
                  },
                  "status": "EM_ANALISE"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solicitação atualizada com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": 1,
                    "nome": "João Silva",
                    "cpf": "12345678901",
                    "data_nascimento": "1990-01-01",
                    "endereco": {
                      "logradouro": "Rua Exemplo",
                      "numero": "123",
                      "bairro": "Bairro Exemplo",
                      "cidade": "Cidade Exemplo",
                      "estado": "Estado Exemplo",
                      "cep": "12345678"
                    },
                    "contato": {
                      "telefone": "123456789",
                      "email": "joao.silva@example.com"
                    },
                    "beneficio": {
                      "id": 1,
                      "nome": "Benefício Exemplo"
                    },
                    "status": "EM_ANALISE"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar solicitação existente",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/solicitacao/{id}/status": {
      "patch": {
        "description": "Atualiza o status de uma solicitação de benefício e registra o histórico da alteração.",
        "operationId": "SolicitacaoBeneficio_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStatusSolicitacaoDto"
              },
              "examples": {
                "Atualização de Status": {}
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status atualizado com sucesso",
            "content": {
              "application/json": {
                "example": {
                  "message": "Status atualizado com sucesso"
                }
              }
            }
          },
          "400": {
            "description": "Dados inválidos ou transição de status inválida",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          },
          "404": {
            "description": "Solicitação não encontrada",
            "content": {
              "application/json": {
                "example": ""
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar status de uma solicitação de benefício",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/solicitacao/{id}/historico": {
      "get": {
        "operationId": "Solicitacao_getHistorico",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Histórico retornado com sucesso"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar histórico de uma solicitação",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/beneficio/exportacao/csv": {
      "get": {
        "operationId": "Exportacao_exportarCSV",
        "parameters": [
          {
            "name": "data_fim",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_inicio",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tipo_beneficio_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cidadao_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "CSV gerado com sucesso"
          },
          "500": {
            "description": "Erro ao gerar CSV"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Exportar solicitações de benefício em CSV",
        "tags": [
          "Benefícios"
        ]
      }
    },
    "/api/v1/solicitacao/{id}/submeter": {
      "put": {
        "operationId": "Solicitacao_submeterSolicitacao",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitação submetida com sucesso"
          },
          "400": {
            "description": "Solicitação não pode ser submetida"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submeter solicitação para análise",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/solicitacao/{id}/avaliar": {
      "put": {
        "operationId": "Solicitacao_avaliarSolicitacao",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Dados da avaliação da solicitação",
          "content": {
            "application/json": {
              "schema": {
                "example": ""
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Solicitação avaliada com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "example": ""
                }
              }
            }
          },
          "400": {
            "description": "Solicitação não pode ser avaliada"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Avaliar solicitação (aprovar/reprovar)",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/solicitacao/{id}/liberar": {
      "put": {
        "operationId": "Solicitacao_liberarBeneficio",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Benefício liberado com sucesso"
          },
          "400": {
            "description": "Benefício não pode ser liberado"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Liberar benefício aprovado",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/solicitacao/{id}/cancelar": {
      "put": {
        "operationId": "Solicitacao_cancelarSolicitacao",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solicitação cancelada com sucesso"
          },
          "400": {
            "description": "Solicitação não pode ser cancelada"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancelar solicitação",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/solicitacao/{id}/pendencias": {
      "get": {
        "operationId": "Solicitacao_getPendencias",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pendências retornadas com sucesso"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar pendências de uma solicitação",
        "tags": [
          "Solicitações"
        ]
      }
    },
    "/api/v1/documento/solicitacao/{solicitacaoId}": {
      "get": {
        "operationId": "Documento_findBySolicitacao",
        "parameters": [
          {
            "name": "solicitacaoId",
            "required": true,
            "in": "path",
            "description": "ID da solicitação",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "tipo",
            "required": false,
            "in": "query",
            "description": "Filtrar por tipo de documento",
            "schema": {
              "enum": [
                "COMPROVANTE_RESIDENCIA",
                "COMPROVANTE_RENDA",
                "RG",
                "CPF",
                "CARTAO_NIS"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de documentos retornada com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "404": {
            "description": "Solicitação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar documentos de uma solicitação",
        "tags": [
          "Documentos"
        ]
      }
    },
    "/api/v1/documento/{id}": {
      "get": {
        "operationId": "Documento_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do documento",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documento encontrado com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "404": {
            "description": "Documento não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter detalhes de um documento",
        "tags": [
          "Documentos"
        ]
      },
      "delete": {
        "operationId": "Documento_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do documento",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documento removido com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Documento não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remover documento",
        "tags": [
          "Documentos"
        ]
      }
    },
    "/api/v1/documento/{id}/download": {
      "get": {
        "operationId": "Documento_download",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do documento",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documento baixado com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "404": {
            "description": "Documento não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fazer download de um documento",
        "tags": [
          "Documentos"
        ]
      }
    },
    "/api/v1/documento/{id}/thumbnail": {
      "get": {
        "operationId": "Documento_getThumbnail",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do documento",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "size",
            "required": false,
            "in": "query",
            "description": "Tamanho da miniatura",
            "schema": {
              "enum": [
                "pequena",
                "media",
                "grande"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Miniatura gerada com sucesso"
          },
          "400": {
            "description": "Documento não é uma imagem"
          },
          "401": {
            "description": "Não autorizado"
          },
          "404": {
            "description": "Documento não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter miniatura de um documento de imagem",
        "tags": [
          "Documentos"
        ]
      }
    },
    "/api/v1/documento/upload": {
      "post": {
        "operationId": "Documento_upload",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Arquivo do documento e metadados",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadDocumentoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Documento enviado com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Solicitação não encontrada"
          },
          "415": {
            "description": "Tipo de arquivo não suportado"
          },
          "422": {
            "description": "Arquivo infectado com malware"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Fazer upload de documento",
        "tags": [
          "Documentos"
        ]
      }
    },
    "/api/v1/documento/{id}/verificar": {
      "post": {
        "operationId": "Documento_verificarDocumento",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do documento",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "observacoes": {
                    "type": "string",
                    "description": "Observações sobre a verificação do documento",
                    "example": "Documento verificado e validado conforme original"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Documento verificado com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Documento não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verificar documento",
        "tags": [
          "Documentos"
        ]
      }
    },
    "/api/v1/documento/{id}/scan-malware": {
      "post": {
        "operationId": "Documento_scanMalware",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do documento",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Documento verificado com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Documento não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verificar documento em busca de malware",
        "tags": [
          "Documentos"
        ]
      }
    },
    "/api/v1/relatorios/beneficios-concedidos": {
      "get": {
        "description": "Gera um relatório detalhado de benefícios concedidos no período especificado, com opções de filtro por unidade e tipo de benefício. O relatório pode ser gerado em formato PDF, Excel ou CSV.",
        "operationId": "Relatorios_beneficiosConcedidos",
        "parameters": [
          {
            "name": "data_inicio",
            "required": true,
            "in": "query",
            "description": "Data inicial (formato: YYYY-MM-DD)",
            "schema": {
              "example": "2023-01-01",
              "type": "string"
            }
          },
          {
            "name": "data_fim",
            "required": true,
            "in": "query",
            "description": "Data final (formato: YYYY-MM-DD)",
            "schema": {
              "example": "2023-12-31",
              "type": "string"
            }
          },
          {
            "name": "unidade_id",
            "required": false,
            "in": "query",
            "description": "ID da unidade (opcional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tipo_beneficio_id",
            "required": false,
            "in": "query",
            "description": "ID do tipo de benefício (opcional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formato",
            "required": true,
            "in": "query",
            "description": "Formato de saída do relatório",
            "schema": {
              "default": "pdf",
              "type": "string",
              "enum": [
                "pdf",
                "excel",
                "csv"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Parâmetros inválidos - Data inicial e final são obrigatórias"
          },
          "401": {
            "description": "Não autorizado - Token JWT ausente ou inválido"
          },
          "403": {
            "description": "Permissão negada - Usuário não possui permissão para acessar este relatório"
          },
          "500": {
            "description": "Erro interno do servidor"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gera relatório de benefícios concedidos",
        "tags": [
          "Relatórios"
        ]
      }
    },
    "/api/v1/relatorios/solicitacoes-por-status": {
      "get": {
        "description": "Gera um relatório detalhado de solicitações agrupadas por status no período especificado, com opção de filtro por unidade. O relatório pode ser gerado em formato PDF, Excel ou CSV.",
        "operationId": "Relatorios_solicitacoesPorStatus",
        "parameters": [
          {
            "name": "data_inicio",
            "required": true,
            "in": "query",
            "description": "Data inicial (formato: YYYY-MM-DD)",
            "schema": {
              "example": "2023-01-01",
              "type": "string"
            }
          },
          {
            "name": "data_fim",
            "required": true,
            "in": "query",
            "description": "Data final (formato: YYYY-MM-DD)",
            "schema": {
              "example": "2023-12-31",
              "type": "string"
            }
          },
          {
            "name": "unidade_id",
            "required": false,
            "in": "query",
            "description": "ID da unidade (opcional)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formato",
            "required": true,
            "in": "query",
            "description": "Formato de saída do relatório",
            "schema": {
              "default": "pdf",
              "type": "string",
              "enum": [
                "pdf",
                "excel",
                "csv"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Parâmetros inválidos - Data inicial e final são obrigatórias"
          },
          "401": {
            "description": "Não autorizado - Token JWT ausente ou inválido"
          },
          "403": {
            "description": "Permissão negada - Usuário não possui permissão para acessar este relatório"
          },
          "500": {
            "description": "Erro interno do servidor"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gera relatório de solicitações por status",
        "tags": [
          "Relatórios"
        ]
      }
    },
    "/api/v1/relatorios/atendimentos-por-unidade": {
      "get": {
        "description": "Gera um relatório consolidado de atendimentos realizados por cada unidade no período especificado, incluindo contagem de solicitações por status. O relatório pode ser gerado em formato PDF, Excel ou CSV.",
        "operationId": "Relatorios_atendimentosPorUnidade",
        "parameters": [
          {
            "name": "data_inicio",
            "required": true,
            "in": "query",
            "description": "Data inicial (formato: YYYY-MM-DD)",
            "schema": {
              "example": "2023-01-01",
              "type": "string"
            }
          },
          {
            "name": "data_fim",
            "required": true,
            "in": "query",
            "description": "Data final (formato: YYYY-MM-DD)",
            "schema": {
              "example": "2023-12-31",
              "type": "string"
            }
          },
          {
            "name": "formato",
            "required": true,
            "in": "query",
            "description": "Formato de saída do relatório",
            "schema": {
              "default": "pdf",
              "type": "string",
              "enum": [
                "pdf",
                "excel",
                "csv"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Parâmetros inválidos - Data inicial e final são obrigatórias"
          },
          "401": {
            "description": "Não autorizado - Token JWT ausente ou inválido"
          },
          "403": {
            "description": "Permissão negada - Usuário não possui permissão para acessar este relatório"
          },
          "500": {
            "description": "Erro interno do servidor"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gera relatório de atendimentos por unidade",
        "tags": [
          "Relatórios"
        ]
      }
    },
    "/api/v1/notificacao": {
      "get": {
        "operationId": "Notificacao_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Página atual",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Itens por página",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filtro por status",
            "schema": {
              "enum": [
                "pendente",
                "em_processamento",
                "enviada",
                "falha",
                "cancelada",
                "nao_lida",
                "lida",
                "arquivada"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de notificações retornada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar notificações do usuário",
        "tags": [
          "Notificações"
        ]
      },
      "post": {
        "operationId": "Notification_criarNotificacao",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Notificação criada e enviada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar e enviar uma nova notificação",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/{id}": {
      "get": {
        "operationId": "Notification_buscarNotificacaoPorId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notificação encontrada"
          },
          "404": {
            "description": "Notificação não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter notificação por ID",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/{id}/ler": {
      "put": {
        "operationId": "Notification_marcarComoLida",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notificação marcada como lida com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Marcar notificação como lida",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/{id}/arquivar": {
      "put": {
        "operationId": "Notification_arquivarNotificacao",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notificação arquivada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Arquivar notificação",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/todas/ler": {
      "put": {
        "operationId": "Notification_marcarTodasComoLidas",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Todas as notificações marcadas como lidas"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Marcar todas as notificações como lidas",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/contador/nao-lidas": {
      "get": {
        "operationId": "Notification_contadorNaoLidas",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Contador retornado com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter contador de notificações não lidas",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/minhas": {
      "get": {
        "operationId": "Notification_listarMinhasNotificacoes",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de notificações retornada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar minhas notificações",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/templates": {
      "post": {
        "operationId": "NotificationTemplate_criarTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template criado com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar um novo template de notificação",
        "tags": [
          "Notificações"
        ]
      },
      "get": {
        "operationId": "NotificationTemplate_listarTemplates",
        "parameters": [
          {
            "name": "page",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "ativo",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de templates retornada com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar templates de notificação",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/templates/{id}": {
      "get": {
        "operationId": "NotificationTemplate_buscarTemplatePorId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template encontrado"
          },
          "404": {
            "description": "Template não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter template por ID",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/templates/{id}/ativar": {
      "put": {
        "operationId": "NotificationTemplate_ativarTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template ativado com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Ativar template de notificação",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/notificacao/templates/{id}/desativar": {
      "put": {
        "operationId": "NotificationTemplate_desativarTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template desativado com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Desativar template de notificação",
        "tags": [
          "Notificações"
        ]
      }
    },
    "/api/v1/auditoria": {
      "post": {
        "operationId": "Auditoria_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLogAuditoriaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Log de auditoria criado com sucesso"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cria um novo log de auditoria manualmente",
        "tags": [
          "Auditoria"
        ]
      },
      "get": {
        "operationId": "Auditoria_findAll",
        "parameters": [
          {
            "name": "tipo_operacao",
            "required": false,
            "in": "query",
            "description": "Tipo de operação realizada",
            "schema": {
              "example": "READ",
              "type": "string",
              "enum": [
                "CREATE",
                "READ",
                "UPDATE",
                "DELETE",
                "ACCESS",
                "EXPORT",
                "ANONYMIZE",
                "LOGIN",
                "LOGOUT",
                "FAILED_LOGIN"
              ]
            }
          },
          {
            "name": "entidade_afetada",
            "required": false,
            "in": "query",
            "description": "Nome da entidade afetada pela operação",
            "schema": {
              "example": "Cidadao",
              "type": "string"
            }
          },
          {
            "name": "entidade_id",
            "required": false,
            "in": "query",
            "description": "ID da entidade afetada",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "usuario_id",
            "required": false,
            "in": "query",
            "description": "ID do usuário que realizou a operação",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "ip_usuario",
            "required": false,
            "in": "query",
            "description": "IP do usuário que realizou a operação",
            "schema": {
              "example": "192.168.1.1",
              "type": "string"
            }
          },
          {
            "name": "endpoint",
            "required": false,
            "in": "query",
            "description": "Endpoint acessado",
            "schema": {
              "example": "/api/v1/cidadaos",
              "type": "string"
            }
          },
          {
            "name": "metodo_http",
            "required": false,
            "in": "query",
            "description": "Método HTTP utilizado",
            "schema": {
              "example": "GET",
              "type": "string"
            }
          },
          {
            "name": "data_inicial",
            "required": false,
            "in": "query",
            "description": "Data inicial para filtro (formato ISO)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "data_final",
            "required": false,
            "in": "query",
            "description": "Data final para filtro (formato ISO)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "termo_busca",
            "required": false,
            "in": "query",
            "description": "Termo de busca para pesquisa nos dados",
            "schema": {
              "example": "cpf",
              "type": "string"
            }
          },
          {
            "name": "pagina",
            "required": false,
            "in": "query",
            "description": "Número da página para paginação",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "itens_por_pagina",
            "required": false,
            "in": "query",
            "description": "Quantidade de itens por página",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de logs de auditoria"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Busca logs de auditoria",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/{id}": {
      "get": {
        "operationId": "Auditoria_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do log de auditoria",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Log de auditoria encontrado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Log de auditoria não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Busca um log de auditoria pelo ID",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/entidade/{entidade}/{id}": {
      "get": {
        "operationId": "Auditoria_findByEntidade",
        "parameters": [
          {
            "name": "entidade",
            "required": true,
            "in": "path",
            "description": "Nome da entidade",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID da entidade",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de logs de auditoria da entidade"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Busca logs de auditoria por entidade",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/usuario/{id}": {
      "get": {
        "operationId": "Auditoria_findByUsuario",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do usuário",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de logs de auditoria do usuário"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Busca logs de auditoria por usuário",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/relatorios/dados-sensiveis": {
      "get": {
        "operationId": "Auditoria_relatorioAcessosDadosSensiveis",
        "parameters": [
          {
            "name": "data_inicial",
            "required": true,
            "in": "query",
            "description": "Data inicial (formato ISO)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data_final",
            "required": true,
            "in": "query",
            "description": "Data final (formato ISO)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relatório de acessos a dados sensíveis"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gera relatório de acessos a dados sensíveis por período",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/exportacao": {
      "post": {
        "operationId": "AuditoriaExportacao_exportarLogs",
        "parameters": [
          {
            "name": "tipo_operacao",
            "required": false,
            "in": "query",
            "description": "Tipo de operação realizada",
            "schema": {
              "example": "READ",
              "type": "string",
              "enum": [
                "CREATE",
                "READ",
                "UPDATE",
                "DELETE",
                "ACCESS",
                "EXPORT",
                "ANONYMIZE",
                "LOGIN",
                "LOGOUT",
                "FAILED_LOGIN"
              ]
            }
          },
          {
            "name": "entidade_afetada",
            "required": false,
            "in": "query",
            "description": "Nome da entidade afetada pela operação",
            "schema": {
              "example": "Cidadao",
              "type": "string"
            }
          },
          {
            "name": "entidade_id",
            "required": false,
            "in": "query",
            "description": "ID da entidade afetada",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "usuario_id",
            "required": false,
            "in": "query",
            "description": "ID do usuário que realizou a operação",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "ip_usuario",
            "required": false,
            "in": "query",
            "description": "IP do usuário que realizou a operação",
            "schema": {
              "example": "192.168.1.1",
              "type": "string"
            }
          },
          {
            "name": "endpoint",
            "required": false,
            "in": "query",
            "description": "Endpoint acessado",
            "schema": {
              "example": "/api/v1/cidadaos",
              "type": "string"
            }
          },
          {
            "name": "metodo_http",
            "required": false,
            "in": "query",
            "description": "Método HTTP utilizado",
            "schema": {
              "example": "GET",
              "type": "string"
            }
          },
          {
            "name": "data_inicial",
            "required": false,
            "in": "query",
            "description": "Data inicial para filtro (formato ISO)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "data_final",
            "required": false,
            "in": "query",
            "description": "Data final para filtro (formato ISO)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "termo_busca",
            "required": false,
            "in": "query",
            "description": "Termo de busca para pesquisa nos dados",
            "schema": {
              "example": "cpf",
              "type": "string"
            }
          },
          {
            "name": "pagina",
            "required": false,
            "in": "query",
            "description": "Número da página para paginação",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "itens_por_pagina",
            "required": false,
            "in": "query",
            "description": "Quantidade de itens por página",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolicitarExportacaoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Exportação iniciada com sucesso"
          }
        },
        "summary": "Exporta logs de auditoria para o formato especificado",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/exportacao/download/{nomeArquivo}": {
      "get": {
        "operationId": "AuditoriaExportacao_downloadArquivo",
        "parameters": [
          {
            "name": "nomeArquivo",
            "required": true,
            "in": "path",
            "description": "Nome do arquivo de exportação",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Arquivo encontrado e enviado"
          },
          "404": {
            "description": "Arquivo não encontrado"
          }
        },
        "summary": "Baixa um arquivo de exportação pelo nome",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/exportacao/arquivos": {
      "get": {
        "operationId": "AuditoriaExportacao_listarArquivos",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Lista de arquivos retornada com sucesso"
          }
        },
        "summary": "Lista os arquivos de exportação disponíveis",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/monitoramento/estatisticas": {
      "get": {
        "operationId": "AuditoriaMonitoramento_getEstatisticas",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Estatísticas retornadas com sucesso"
          }
        },
        "summary": "Obtém estatísticas do módulo de auditoria",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/monitoramento/saude": {
      "get": {
        "operationId": "AuditoriaMonitoramento_getRelatorioSaude",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Relatório de saúde gerado com sucesso"
          }
        },
        "summary": "Gera relatório de saúde do módulo de auditoria",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/auditoria/monitoramento/atualizar": {
      "get": {
        "operationId": "AuditoriaMonitoramento_forcarAtualizacao",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Estatísticas atualizadas com sucesso"
          }
        },
        "summary": "Força atualização das estatísticas",
        "tags": [
          "Auditoria"
        ]
      }
    },
    "/api/v1/metricas": {
      "get": {
        "operationId": "MetricasDefinicao_listarMetricas",
        "parameters": [
          {
            "name": "codigo",
            "required": false,
            "in": "query",
            "description": "Código da métrica para busca parcial",
            "schema": {
              "example": "tempo",
              "type": "string"
            }
          },
          {
            "name": "nome",
            "required": false,
            "in": "query",
            "description": "Nome da métrica para busca parcial",
            "schema": {
              "example": "Processamento",
              "type": "string"
            }
          },
          {
            "name": "categoria",
            "required": false,
            "in": "query",
            "description": "Categoria da métrica",
            "schema": {
              "example": "processamento",
              "type": "string",
              "enum": [
                "financeiro",
                "operacional",
                "desempenho",
                "qualidade",
                "usuario",
                "beneficio",
                "processamento",
                "sistema"
              ]
            }
          },
          {
            "name": "tipo",
            "required": false,
            "in": "query",
            "description": "Tipo da métrica",
            "schema": {
              "example": "media",
              "type": "string",
              "enum": [
                "contagem",
                "soma",
                "media",
                "minimo",
                "maximo",
                "composta",
                "percentil",
                "cardinalidade",
                "taxa_variacao"
              ]
            }
          },
          {
            "name": "ativa",
            "required": false,
            "in": "query",
            "description": "Status de ativação da métrica",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "tag",
            "required": false,
            "in": "query",
            "description": "Tag para filtrar métricas",
            "schema": {
              "example": "financeiro",
              "type": "string"
            }
          },
          {
            "name": "pagina",
            "required": false,
            "in": "query",
            "description": "Página para paginação de resultados",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limite",
            "required": false,
            "in": "query",
            "description": "Quantidade de itens por página",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de métricas"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Listar métricas com filtros",
        "tags": [
          "Métricas"
        ]
      },
      "post": {
        "operationId": "MetricasDefinicao_criarMetrica",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CriarMetricaDefinicaoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Métrica criada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar nova métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/health": {
      "get": {
        "operationId": "Metricas_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Status de saúde do sistema"
          }
        },
        "summary": "Verificar a saúde do sistema",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/{id}": {
      "put": {
        "operationId": "MetricasDefinicao_atualizarMetrica",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID da métrica",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AtualizarMetricaDefinicaoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Métrica atualizada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar métrica existente",
        "tags": [
          "Métricas"
        ]
      },
      "get": {
        "operationId": "MetricasDefinicao_buscarMetricaPorId",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID da métrica",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Métrica encontrada"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Buscar métrica por ID",
        "tags": [
          "Métricas"
        ]
      },
      "delete": {
        "operationId": "MetricasDefinicao_removerMetrica",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID da métrica",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Métrica removida com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remover métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/codigo/{codigo}": {
      "get": {
        "operationId": "MetricasDefinicao_buscarMetricaPorCodigo",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "description": "Código da métrica",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Métrica encontrada"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Buscar métrica por código",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/configuracao": {
      "post": {
        "operationId": "MetricasDefinicao_criarConfiguracao",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CriarMetricaConfiguracaoDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Configuração criada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Criar configuração para métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/configuracao/{id}": {
      "put": {
        "operationId": "MetricasDefinicao_atualizarConfiguracao",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID da configuração",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AtualizarMetricaConfiguracaoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuração atualizada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Configuração não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Atualizar configuração de métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/configuracao/metrica/{metricaId}": {
      "get": {
        "operationId": "MetricasDefinicao_buscarConfiguracaoPorMetrica",
        "parameters": [
          {
            "name": "metricaId",
            "required": true,
            "in": "path",
            "description": "ID da métrica",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Configuração encontrada"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Configuração não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Buscar configuração de uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/coleta": {
      "post": {
        "operationId": "MetricasDefinicao_coletarMetrica",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColetaManualMetricaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Métrica coletada com sucesso"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Coletar métrica manualmente",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/valor": {
      "post": {
        "operationId": "MetricasDefinicao_consultarValorMetrica",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsultaValorMetricaDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Valor da métrica"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Consultar valor atual de uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/serie-temporal": {
      "post": {
        "operationId": "MetricasDefinicao_consultarSerieTemporalMetrica",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsultaSerieTemporalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Série temporal da métrica"
          },
          "400": {
            "description": "Dados inválidos"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Consultar série temporal de uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/cache/limpar": {
      "post": {
        "operationId": "MetricasDefinicao_limparCache",
        "parameters": [],
        "responses": {
          "204": {
            "description": "Cache limpo com sucesso"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Limpar cache de métricas",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/cache/estatisticas": {
      "get": {
        "operationId": "MetricasDefinicao_obterEstatisticasCache",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Estatísticas do cache"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obter estatísticas do cache de métricas",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/analise/anomalias/snapshot/{id}": {
      "post": {
        "operationId": "MetricasAnomalias_detectarAnomalias",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID do snapshot",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nivel_confianca",
            "required": false,
            "in": "query",
            "description": "Nível de confiança para detecção",
            "schema": {
              "enum": [
                "baixo",
                "medio",
                "alto"
              ],
              "type": "string"
            }
          },
          {
            "name": "janela_temporal",
            "required": false,
            "in": "query",
            "description": "Número de dias a considerar para o histórico",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resultado da detecção de anomalias"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Snapshot não encontrado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Detectar anomalias para um snapshot específico",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/analise/anomalias/batch": {
      "post": {
        "operationId": "MetricasAnomalias_detectarAnomaliasBatch",
        "parameters": [
          {
            "name": "nivel_confianca",
            "required": false,
            "in": "query",
            "description": "Nível de confiança para detecção",
            "schema": {
              "enum": [
                "baixo",
                "medio",
                "alto"
              ],
              "type": "string"
            }
          },
          {
            "name": "janela_temporal",
            "required": false,
            "in": "query",
            "description": "Número de dias a considerar para o histórico",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Lista de anomalias detectadas"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Detectar anomalias em lote para todas as métricas",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/analise/tendencias/metrica/{id}": {
      "post": {
        "operationId": "MetricasAnomalias_analisarTendencias",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "ID da métrica",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resultado da análise de tendências"
          },
          "401": {
            "description": "Não autorizado"
          },
          "403": {
            "description": "Acesso negado"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Analisar tendências para uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/valores/{codigo}": {
      "get": {
        "operationId": "MetricasValores_obterValorAtual",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "codigo",
            "required": true,
            "in": "query",
            "description": "Código da métrica",
            "schema": {
              "example": "tempo_medio_processamento_beneficio",
              "type": "string"
            }
          },
          {
            "name": "dimensoes",
            "required": false,
            "in": "query",
            "description": "Dimensões para filtrar o valor",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Valor da métrica retornado com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtém o valor atual de uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/valores/{codigo}/historico": {
      "get": {
        "operationId": "MetricasValores_obterSerieHistorica",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "codigo",
            "required": true,
            "in": "query",
            "description": "Código da métrica",
            "schema": {
              "example": "tempo_medio_processamento_beneficio",
              "type": "string"
            }
          },
          {
            "name": "data_inicial",
            "required": true,
            "in": "query",
            "description": "Data inicial do período",
            "schema": {
              "format": "date-time",
              "example": "2023-01-01T00:00:00.000Z",
              "type": "string"
            }
          },
          {
            "name": "data_final",
            "required": true,
            "in": "query",
            "description": "Data final do período",
            "schema": {
              "format": "date-time",
              "example": "2023-12-31T23:59:59.999Z",
              "type": "string"
            }
          },
          {
            "name": "granularidade",
            "required": false,
            "in": "query",
            "description": "Granularidade para agregação dos dados",
            "schema": {
              "example": "mes",
              "type": "string",
              "enum": [
                "minuto",
                "hora",
                "dia",
                "semana",
                "mes",
                "trimestre",
                "ano"
              ]
            }
          },
          {
            "name": "dimensoes",
            "required": false,
            "in": "query",
            "description": "Dimensões para filtrar os dados",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          },
          {
            "name": "limite_pontos",
            "required": false,
            "in": "query",
            "description": "Limitar número máximo de pontos na série",
            "schema": {
              "example": 12,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Série histórica retornada com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtém série histórica de valores de uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/valores/{codigo}/comparativo": {
      "get": {
        "operationId": "MetricasValores_compararPeriodos",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "periodo1Inicio",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "periodo1Fim",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "periodo2Inicio",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "periodo2Fim",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "granularidade",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comparativo retornado com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Compara valores de uma métrica entre períodos",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/valores/coleta-manual": {
      "post": {
        "operationId": "MetricasValores_executarColetaManual",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColetaManualMetricaDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Coleta executada com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Executa coleta manual de uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/analise/{codigo}/tendencia": {
      "get": {
        "operationId": "MetricasAnalise_analisarTendencia",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataInicio",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "dataFim",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "granularidade",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Análise de tendência realizada com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Analisa tendência de uma métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/analise/{codigo}/anomalias": {
      "get": {
        "operationId": "MetricasAnalise_detectarAnomalias",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataInicio",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "dataFim",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "sensibilidade",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detecção de anomalias realizada com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Detecta anomalias em série histórica de métrica",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/analise/{codigo}/previsao": {
      "get": {
        "operationId": "MetricasAnalise_gerarPrevisao",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "horizonte",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "intervaloConfianca",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "modelo",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Previsão gerada com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gera previsão baseada em dados históricos",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/dashboard/resumo": {
      "get": {
        "operationId": "MetricasDashboard_obterResumo",
        "parameters": [
          {
            "name": "categorias",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limite",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resumo obtido com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtém resumo das métricas principais",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/dashboard/alertas": {
      "get": {
        "operationId": "MetricasDashboard_listarAlertas",
        "parameters": [
          {
            "name": "prioridade",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limite",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alertas listados com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Lista alertas ativos de anomalias",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/dashboard/kpis": {
      "get": {
        "operationId": "MetricasDashboard_obterKPIs",
        "parameters": [
          {
            "name": "grupo",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibilidade",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "KPIs obtidos com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Obtém KPIs configurados para dashboard",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/exportacao/{codigo}": {
      "get": {
        "operationId": "MetricasExportacao_exportarDadosMetrica",
        "parameters": [
          {
            "name": "codigo",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataInicio",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "dataFim",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "formato",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "incluirMetadados",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dados exportados com sucesso"
          },
          "404": {
            "description": "Métrica não encontrada"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Exporta dados de uma métrica (CSV/JSON)",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/v1/metricas/exportacao/relatorio": {
      "get": {
        "operationId": "MetricasExportacao_gerarRelatorioCompleto",
        "parameters": [
          {
            "name": "formato",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categorias",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "periodo",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Relatório gerado com sucesso"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Gera relatório completo de métricas",
        "tags": [
          "Métricas"
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "Health_check",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/health/ping": {
      "get": {
        "operationId": "Health_ping",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/health/db": {
      "get": {
        "operationId": "Health_checkDatabase",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/health/system": {
      "get": {
        "operationId": "Health_checkSystem",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "required": [
                          "status"
                        ],
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/metrics": {
      "get": {
        "operationId": "Metrics_getMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "metrics"
        ]
      }
    },
    "/api/monitoring/metrics": {
      "get": {
        "description": "Retorna todas as métricas da aplicação no formato do Prometheus",
        "operationId": "EnhancedMetrics_getMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Métricas retornadas com sucesso no formato do Prometheus"
          }
        },
        "summary": "Obter métricas da aplicação",
        "tags": [
          "monitoring"
        ]
      }
    },
    "/api/monitoring/metrics/security": {
      "get": {
        "description": "Retorna métricas relacionadas à segurança e compliance LGPD",
        "operationId": "EnhancedMetrics_getSecurityMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Métricas de segurança retornadas com sucesso"
          }
        },
        "summary": "Obter métricas de segurança",
        "tags": [
          "monitoring"
        ]
      }
    },
    "/api/monitoring/metrics/documents": {
      "get": {
        "description": "Retorna métricas relacionadas a operações com documentos",
        "operationId": "EnhancedMetrics_getDocumentMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Métricas de documentos retornadas com sucesso"
          }
        },
        "summary": "Obter métricas de documentos",
        "tags": [
          "monitoring"
        ]
      }
    },
    "/api/monitoring/metrics/system": {
      "get": {
        "description": "Retorna métricas relacionadas ao sistema (memória, CPU)",
        "operationId": "EnhancedMetrics_getSystemMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Métricas de sistema retornadas com sucesso"
          }
        },
        "summary": "Obter métricas de sistema",
        "tags": [
          "monitoring"
        ]
      }
    },
    "/api": {
      "get": {
        "operationId": "App_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/prometheus": {
      "get": {
        "operationId": "Prometheus_index",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Prometheus"
        ]
      }
    }
  },
  "info": {
    "title": "API de Gestão de Benefícios Eventuais",
    "description": "# API para o Sistema de Gestão de Benefícios Eventuais da SEMTAS\n\n## Visão Geral\nEsta API fornece endpoints para gerenciar o processo completo de solicitação, análise e concessão de benefícios eventuais.\n\n## Autenticação\nA API utiliza autenticação JWT (JSON Web Token). Para acessar endpoints protegidos, é necessário obter um token através do endpoint de login e incluí-lo no cabeçalho das requisições.\n\n## Estrutura da API\nA API está organizada nos seguintes módulos:\n\n- **Autenticação**: Login, refresh token e gerenciamento de senhas\n- **Usuários**: Gerenciamento de usuários do sistema\n- **Cidadãos**: Cadastro e gerenciamento de cidadãos/beneficiários\n- **Unidades**: Gerenciamento de unidades e setores\n- **Benefícios**: Configuração de tipos de benefícios e requisitos\n- **Solicitações**: Gerenciamento do fluxo de solicitações de benefícios\n- **Documentos**: Upload e gerenciamento de documentos\n- **Ocorrências**: Registro de ocorrências relacionadas às solicitações\n- **Notificações**: Sistema de notificações para usuários\n\n## Códigos de Resposta\n\n| Código | Descrição |\n|--------|-----------|\n| 200 | Requisição bem-sucedida |\n| 201 | Recurso criado com sucesso |\n| 204 | Sem conteúdo (operações de exclusão bem-sucedidas) |\n| 400 | Requisição inválida |\n| 401 | Não autenticado |\n| 403 | Acesso negado |\n| 404 | Recurso não encontrado |\n| 500 | Erro interno do servidor |",
    "version": "1.0",
    "contact": {
      "name": "Equipe SEMTAS",
      "url": "https://www.natal.rn.gov.br/semtas",
      "email": "suporte@semtas.natal.rn.gov.br"
    },
    "license": {
      "name": "Uso Interno",
      "url": "https://www.natal.rn.gov.br/semtas/licenca"
    }
  },
  "tags": [
    {
      "name": "auth",
      "description": "Autenticação e autorização"
    },
    {
      "name": "usuarios",
      "description": "Usuários do sistema"
    },
    {
      "name": "cidadaos",
      "description": "Cidadãos e beneficiários"
    },
    {
      "name": "unidades",
      "description": "Unidades e setores"
    },
    {
      "name": "beneficios",
      "description": "Tipos de benefícios"
    },
    {
      "name": "solicitacoes",
      "description": "Solicitações de benefícios"
    },
    {
      "name": "documentos",
      "description": "Documentos"
    },
    {
      "name": "ocorrencias",
      "description": "Ocorrências"
    },
    {
      "name": "notificacoes",
      "description": "Notificações"
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Insira o token JWT",
        "in": "header"
      }
    },
    "schemas": {
      "LoginInput": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "AuthTokenOutput": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "SwaggerBaseApiResponseFor class AuthTokenOutput {\n    accessToken;\n    refreshToken;\n} ": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object"
          },
          "data": {
            "$ref": "#/components/schemas/AuthTokenOutput"
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "BaseApiErrorObject": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "localizedMessage": {
            "type": "string"
          },
          "errorName": {
            "type": "string"
          },
          "details": {
            "type": "object"
          },
          "path": {
            "type": "string"
          },
          "requestId": {
            "type": "string"
          },
          "timestamp": {
            "type": "string"
          }
        },
        "required": [
          "statusCode",
          "message",
          "errorName",
          "details",
          "path",
          "requestId",
          "timestamp"
        ]
      },
      "BaseApiErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/BaseApiErrorObject"
          }
        },
        "required": [
          "error"
        ]
      },
      "RegisterInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "roles": {
            "example": [
              "tecnico_unidade"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isAccountDisabled": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "name",
          "username",
          "password",
          "email",
          "roles"
        ]
      },
      "RegisterOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "roles": {
            "example": [
              "tecnico_unidade"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "type": "string"
          },
          "isAccountDisabled": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "username",
          "roles",
          "email",
          "isAccountDisabled",
          "created_at",
          "updated_at"
        ]
      },
      "SwaggerBaseApiResponseFor class RegisterOutput {\n    id;\n    name;\n    username;\n    roles;\n    email;\n    isAccountDisabled;\n    created_at;\n    updated_at;\n} ": {
        "type": "object",
        "properties": {
          "meta": {
            "type": "object"
          },
          "data": {
            "$ref": "#/components/schemas/RegisterOutput"
          }
        },
        "required": [
          "meta",
          "data"
        ]
      },
      "RefreshTokenInput": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "CreateUsuarioDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "João da Silva",
            "description": "Nome completo do usuário"
          },
          "email": {
            "type": "string",
            "example": "joao.silva@semtas.natal.gov.br",
            "description": "Email do usuário (será usado para login)"
          },
          "senha": {
            "type": "string",
            "example": "Senha@123",
            "description": "Senha do usuário"
          },
          "cpf": {
            "type": "string",
            "example": "123.456.789-00",
            "description": "CPF do usuário"
          },
          "telefone": {
            "type": "string",
            "example": "(84) 98765-4321",
            "description": "Telefone do usuário"
          },
          "matricula": {
            "type": "string",
            "example": "12345",
            "description": "Matrícula do usuário"
          },
          "role": {
            "type": "string",
            "enum": [
              "administrador",
              "gestor_semtas",
              "tecnico_semtas",
              "tecnico_unidade",
              "coordenador_unidade",
              "cidadao"
            ],
            "example": "tecnico_unidade",
            "description": "Papel do usuário no sistema"
          },
          "unidadeId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "ID da unidade do usuário"
          },
          "setorId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "ID do setor do usuário"
          }
        },
        "required": [
          "nome",
          "email",
          "senha",
          "role"
        ]
      },
      "UpdateUsuarioDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "João da Silva",
            "description": "Nome completo do usuário"
          },
          "email": {
            "type": "string",
            "example": "joao.silva@semtas.natal.gov.br",
            "description": "Email do usuário (será usado para login)"
          },
          "cpf": {
            "type": "string",
            "example": "123.456.789-00",
            "description": "CPF do usuário"
          },
          "telefone": {
            "type": "string",
            "example": "(84) 98765-4321",
            "description": "Telefone do usuário"
          },
          "matricula": {
            "type": "string",
            "example": "12345",
            "description": "Matrícula do usuário"
          },
          "role": {
            "type": "string",
            "enum": [
              "administrador",
              "gestor_semtas",
              "tecnico_semtas",
              "tecnico_unidade",
              "coordenador_unidade",
              "cidadao"
            ],
            "example": "tecnico_unidade",
            "description": "Papel do usuário no sistema"
          },
          "unidadeId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "ID da unidade do usuário"
          },
          "setorId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "ID do setor do usuário"
          }
        }
      },
      "UpdateStatusUsuarioDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ativo",
              "inativo"
            ],
            "example": "ativo",
            "description": "Status do usuário"
          }
        },
        "required": [
          "status"
        ]
      },
      "UpdateSenhaDto": {
        "type": "object",
        "properties": {
          "senhaAtual": {
            "type": "string",
            "example": "SenhaAtual@123",
            "description": "Senha atual do usuário"
          },
          "novaSenha": {
            "type": "string",
            "example": "NovaSenha@123",
            "description": "Nova senha do usuário"
          },
          "confirmacaoSenha": {
            "type": "string",
            "example": "NovaSenha@123",
            "description": "Confirmação da nova senha"
          }
        },
        "required": [
          "senhaAtual",
          "novaSenha",
          "confirmacaoSenha"
        ]
      },
      "CreateUnidadeDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "CRAS Cidade Alta",
            "description": "Nome da unidade"
          },
          "codigo": {
            "type": "string",
            "example": "CRAS001",
            "description": "Código único da unidade"
          },
          "sigla": {
            "type": "string",
            "example": "CRAS-CA",
            "description": "Sigla da unidade"
          },
          "tipo": {
            "type": "string",
            "enum": [
              "cras",
              "creas",
              "centro_pop",
              "semtas",
              "outro"
            ],
            "example": "cras",
            "description": "Tipo da unidade"
          },
          "endereco": {
            "type": "string",
            "example": "Rua das Flores, 123, Cidade Alta",
            "description": "Endereço completo da unidade"
          },
          "telefone": {
            "type": "string",
            "example": "(84) 3232-1234",
            "description": "Telefone da unidade"
          },
          "email": {
            "type": "string",
            "example": "cras.cidadealta@semtas.natal.gov.br",
            "description": "Email da unidade"
          },
          "responsavel": {
            "type": "string",
            "example": "Maria da Silva",
            "description": "Nome do responsável pela unidade"
          }
        },
        "required": [
          "nome",
          "codigo",
          "tipo"
        ]
      },
      "UpdateUnidadeDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "CRAS Cidade Alta",
            "description": "Nome da unidade"
          },
          "codigo": {
            "type": "string",
            "example": "CRAS001",
            "description": "Código único da unidade"
          },
          "sigla": {
            "type": "string",
            "example": "CRAS-CA",
            "description": "Sigla da unidade"
          },
          "tipo": {
            "type": "string",
            "enum": [
              "cras",
              "creas",
              "centro_pop",
              "semtas",
              "outro"
            ],
            "example": "cras",
            "description": "Tipo da unidade"
          },
          "tipo_unidade": {
            "type": "string",
            "example": "urbana",
            "description": "Tipo específico da unidade"
          },
          "endereco": {
            "type": "string",
            "example": "Rua das Flores, 123, Cidade Alta",
            "description": "Endereço completo da unidade"
          },
          "telefone": {
            "type": "string",
            "example": "(84) 3232-1234",
            "description": "Telefone da unidade"
          },
          "email": {
            "type": "string",
            "example": "cras.cidadealta@semtas.natal.gov.br",
            "description": "Email da unidade"
          },
          "responsavel": {
            "type": "string",
            "example": "Maria da Silva",
            "description": "Nome do responsável pela unidade"
          }
        }
      },
      "StatusUnidade": {
        "type": "string",
        "enum": [
          "ativo",
          "inativo"
        ],
        "description": "Status da unidade"
      },
      "UpdateStatusUnidadeDto": {
        "type": "object",
        "properties": {
          "status": {
            "example": "ativo",
            "description": "Status da unidade",
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusUnidade"
              }
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateSetorDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "Setor de Atendimento",
            "description": "Nome do setor"
          },
          "descricao": {
            "type": "string",
            "example": "Responsável pelo atendimento inicial aos cidadãos",
            "description": "Descrição das atividades do setor"
          },
          "sigla": {
            "type": "string",
            "example": "SA",
            "description": "Sigla do setor"
          },
          "unidadeId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "ID da unidade à qual o setor pertence"
          },
          "status": {
            "type": "boolean",
            "example": true,
            "description": "Status do setor (ativo/inativo)",
            "default": true
          }
        },
        "required": [
          "nome",
          "unidadeId"
        ]
      },
      "UpdateSetorDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "Setor de Atendimento",
            "description": "Nome do setor"
          },
          "descricao": {
            "type": "string",
            "example": "Responsável pelo atendimento inicial aos cidadãos",
            "description": "Descrição das atividades do setor"
          },
          "sigla": {
            "type": "string",
            "example": "SA",
            "description": "Sigla do setor"
          },
          "unidadeId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "ID da unidade à qual o setor pertence"
          },
          "status": {
            "type": "boolean",
            "example": true,
            "description": "Status do setor (ativo/inativo)"
          }
        }
      },
      "Sexo": {
        "type": "string",
        "enum": [
          "masculino",
          "feminino",
          "outro"
        ],
        "description": "Sexo do cidadão"
      },
      "EnderecoResponseDto": {
        "type": "object",
        "properties": {
          "logradouro": {
            "type": "string",
            "example": "Rua das Flores",
            "description": "Logradouro do endereço"
          },
          "numero": {
            "type": "string",
            "example": "123",
            "description": "Número do endereço"
          },
          "complemento": {
            "type": "string",
            "example": "Apto 101",
            "description": "Complemento do endereço"
          },
          "bairro": {
            "type": "string",
            "example": "Centro",
            "description": "Bairro do endereço"
          },
          "cidade": {
            "type": "string",
            "example": "Natal",
            "description": "Cidade do endereço"
          },
          "estado": {
            "type": "string",
            "example": "RN",
            "description": "Estado do endereço (sigla)"
          },
          "cep": {
            "type": "string",
            "example": "59000-000",
            "description": "CEP do endereço"
          }
        },
        "required": [
          "logradouro",
          "numero",
          "bairro",
          "cidade",
          "estado",
          "cep"
        ]
      },
      "TipoPapel": {
        "type": "string",
        "enum": [
          "beneficiario",
          "requerente",
          "representante_legal"
        ],
        "description": "Tipo de papel do cidadão"
      },
      "PapelCidadaoResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "ID único do papel"
          },
          "cidadao_id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "ID do cidadão associado ao papel"
          },
          "tipo_papel": {
            "example": "beneficiario",
            "description": "Tipo de papel do cidadão",
            "allOf": [
              {
                "$ref": "#/components/schemas/TipoPapel"
              }
            ]
          },
          "metadados": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "grau_parentesco": "Mãe",
              "documento_representacao": "12345",
              "data_validade_representacao": "2026-01-01"
            },
            "description": "Metadados específicos do papel (varia conforme o tipo)"
          },
          "ativo": {
            "type": "boolean",
            "example": true,
            "description": "Indica se o papel está ativo"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z",
            "description": "Data de criação do papel"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z",
            "description": "Data da última atualização do papel"
          }
        },
        "required": [
          "id",
          "cidadao_id",
          "tipo_papel",
          "ativo",
          "created_at",
          "updated_at"
        ]
      },
      "CidadaoResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "ID único do cidadão"
          },
          "nome": {
            "type": "string",
            "example": "Maria da Silva",
            "description": "Nome completo do cidadão"
          },
          "cpf": {
            "type": "string",
            "example": "123.456.789-00",
            "description": "CPF do cidadão"
          },
          "rg": {
            "type": "string",
            "example": "1234567",
            "description": "RG do cidadão"
          },
          "orgaoEmissor": {
            "type": "string",
            "example": "SSP/RN",
            "description": "Órgão emissor do RG"
          },
          "dataNascimento": {
            "type": "string",
            "example": "1990-01-01",
            "description": "Data de nascimento no formato YYYY-MM-DD"
          },
          "sexo": {
            "example": "feminino",
            "description": "Sexo do cidadão",
            "allOf": [
              {
                "$ref": "#/components/schemas/Sexo"
              }
            ]
          },
          "email": {
            "type": "string",
            "example": "maria@example.com",
            "description": "Email do cidadão"
          },
          "telefone": {
            "type": "string",
            "example": "(84) 99999-9999",
            "description": "Telefone do cidadão"
          },
          "nis": {
            "type": "string",
            "example": "12345678901",
            "description": "Número do NIS (PIS/PASEP)"
          },
          "nacionalidade": {
            "type": "string",
            "example": "Brasileira",
            "description": "Nacionalidade do cidadão"
          },
          "estadoCivil": {
            "type": "string",
            "example": "Solteira",
            "description": "Estado civil do cidadão"
          },
          "escolaridade": {
            "type": "string",
            "example": "Ensino Médio Completo",
            "description": "Escolaridade do cidadão"
          },
          "empresa": {
            "type": "string",
            "example": "Empresa XYZ",
            "description": "Nome da empresa onde trabalha"
          },
          "profissao": {
            "type": "string",
            "example": "Auxiliar administrativo",
            "description": "Cargo ou função profissional"
          },
          "rendaMensal": {
            "type": "number",
            "example": 1500.5,
            "description": "Renda mensal"
          },
          "observacoes": {
            "type": "string",
            "example": "Filho com necessidades especiais",
            "description": "Informações adicionais"
          },
          "endereco": {
            "description": "Endereço do cidadão",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnderecoResponseDto"
              }
            ]
          },
          "ativo": {
            "type": "boolean",
            "example": true,
            "description": "Indica se o cidadão está ativo no sistema"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z",
            "description": "Data de criação do registro"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": "2023-01-01T00:00:00.000Z",
            "description": "Data da última atualização do registro"
          },
          "deleted_at": {
            "format": "date-time",
            "type": "string",
            "example": null,
            "description": "Data de desativação do registro, se aplicável"
          },
          "papeis": {
            "description": "Papéis que o cidadão possui no sistema",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PapelCidadaoResponseDto"
            }
          }
        },
        "required": [
          "id",
          "nome",
          "cpf",
          "rg",
          "orgaoEmissor",
          "dataNascimento",
          "sexo",
          "email",
          "telefone",
          "nis",
          "nacionalidade",
          "estadoCivil",
          "escolaridade",
          "empresa",
          "profissao",
          "rendaMensal",
          "observacoes",
          "endereco",
          "ativo",
          "created_at",
          "updated_at"
        ]
      },
      "CidadaoPaginatedResponseDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Lista de cidadãos",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CidadaoResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "properties": {
              "total": {
                "type": "number",
                "example": 100
              },
              "page": {
                "type": "number",
                "example": 1
              },
              "limit": {
                "type": "number",
                "example": 10
              },
              "pages": {
                "type": "number",
                "example": 10
              },
              "hasNext": {
                "type": "boolean",
                "example": true
              },
              "hasPrev": {
                "type": "boolean",
                "example": false
              }
            },
            "description": "Metadados da paginação"
          }
        },
        "required": [
          "items",
          "meta"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Nome do campo que falhou na validação",
            "example": "email"
          },
          "messages": {
            "description": "Mensagens de erro de validação para o campo",
            "example": [
              "O email deve ser um endereço de email válido"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "field",
          "messages"
        ]
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "Código de status HTTP",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Mensagem de erro amigável",
            "example": "Erro de validação"
          },
          "code": {
            "type": "string",
            "description": "Código de erro interno para referência",
            "example": "VALIDATION_ERROR"
          },
          "details": {
            "type": "object",
            "description": "Detalhes adicionais sobre o erro"
          },
          "errors": {
            "description": "Lista de erros de validação",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp do erro",
            "example": "2023-05-16T10:00:00.000Z"
          },
          "path": {
            "type": "string",
            "description": "Caminho da requisição que causou o erro",
            "example": "/api/v1/cidadao"
          }
        },
        "required": [
          "statusCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "PapelCidadaoCreateDto": {
        "type": "object",
        "properties": {
          "tipo_papel": {
            "type": "string",
            "enum": [
              "beneficiario",
              "requerente",
              "representante_legal"
            ],
            "example": "beneficiario",
            "description": "Tipo de papel do cidadão"
          },
          "metadados": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "grau_parentesco": "Mãe",
              "documento_representacao": "12345",
              "data_validade_representacao": "2026-01-01"
            },
            "description": "Metadados específicos do papel (varia conforme o tipo)"
          }
        },
        "required": [
          "tipo_papel"
        ]
      },
      "EnderecoDto": {
        "type": "object",
        "properties": {
          "logradouro": {
            "type": "string",
            "example": "Rua das Flores",
            "description": "Logradouro do endereço"
          },
          "numero": {
            "type": "string",
            "example": "123",
            "description": "Número do endereço"
          },
          "complemento": {
            "type": "string",
            "example": "Apto 101",
            "description": "Complemento do endereço"
          },
          "bairro": {
            "type": "string",
            "example": "Centro",
            "description": "Bairro do endereço"
          },
          "cidade": {
            "type": "string",
            "example": "Natal",
            "description": "Cidade do endereço"
          },
          "estado": {
            "type": "string",
            "example": "RN",
            "description": "Estado do endereço (sigla)"
          },
          "cep": {
            "type": "string",
            "example": "59000-000",
            "description": "CEP do endereço"
          }
        },
        "required": [
          "logradouro",
          "numero",
          "bairro",
          "cidade",
          "estado",
          "cep"
        ]
      },
      "CreateCidadaoDto": {
        "type": "object",
        "properties": {
          "papeis": {
            "description": "Papéis que o cidadão irá assumir no sistema",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PapelCidadaoCreateDto"
            }
          },
          "nome": {
            "type": "string",
            "example": "Maria da Silva",
            "description": "Nome completo do cidadão"
          },
          "cpf": {
            "type": "string",
            "example": "123.456.789-00",
            "description": "CPF do cidadão"
          },
          "rg": {
            "type": "string",
            "example": "1234567",
            "description": "RG do cidadão"
          },
          "data_nascimento": {
            "format": "date-time",
            "type": "string",
            "example": "1985-10-15",
            "description": "Data de nascimento do cidadão"
          },
          "sexo": {
            "type": "string",
            "enum": [
              "masculino",
              "feminino",
              "outro"
            ],
            "example": "feminino",
            "description": "Sexo do cidadão"
          },
          "nis": {
            "type": "string",
            "example": "12345678901",
            "description": "Número de Identificação Social (NIS) do cidadão, utilizado para programas sociais. Obrigatório para beneficiários."
          },
          "nome_social": {
            "type": "string",
            "example": "Maria Santos",
            "description": "Nome social do cidadão (usado para pessoas trans e travestis)"
          },
          "telefone": {
            "type": "string",
            "example": "(84) 98765-4321",
            "description": "Telefone do cidadão para contato"
          },
          "email": {
            "type": "string",
            "example": "email@exemplo.com",
            "description": "Endereço de email do cidadão para contato"
          },
          "endereco": {
            "description": "Endereço do cidadão",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnderecoDto"
              }
            ]
          },
          "renda": {
            "type": "number",
            "example": 1200.5,
            "description": "Renda mensal do cidadão em reais (R$)"
          }
        },
        "required": [
          "nome",
          "cpf",
          "rg",
          "data_nascimento",
          "sexo",
          "endereco"
        ]
      },
      "UpdateCidadaoDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "Maria da Silva",
            "description": "Nome completo do cidadão"
          },
          "rg": {
            "type": "string",
            "example": "1234567",
            "description": "RG do cidadão"
          },
          "data_nascimento": {
            "format": "date-time",
            "type": "string",
            "example": "1985-10-15",
            "description": "Data de nascimento do cidadão"
          },
          "sexo": {
            "type": "string",
            "enum": [
              "masculino",
              "feminino",
              "outro"
            ],
            "example": "feminino",
            "description": "Sexo do cidadão"
          },
          "nis": {
            "type": "string",
            "example": "12345678901",
            "description": "Número de Identificação Social (NIS)"
          },
          "telefone": {
            "type": "string",
            "example": "(84) 98765-4321",
            "description": "Telefone do cidadão"
          },
          "email": {
            "type": "string",
            "example": "maria.silva@email.com",
            "description": "Email do cidadão"
          },
          "endereco": {
            "description": "Endereço do cidadão",
            "allOf": [
              {
                "$ref": "#/components/schemas/EnderecoDto"
              }
            ]
          },
          "renda": {
            "type": "number",
            "example": 1200.5,
            "description": "Renda mensal do cidadão"
          }
        }
      },
      "CreateComposicaoFamiliarDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "example": "João da Silva",
            "description": "Nome completo do membro familiar"
          },
          "parentesco": {
            "type": "string",
            "example": "filho",
            "description": "Relação de parentesco com o cidadão"
          },
          "data_nascimento": {
            "format": "date-time",
            "type": "string",
            "example": "2010-05-20",
            "description": "Data de nascimento do membro familiar"
          },
          "renda": {
            "type": "number",
            "example": 0,
            "description": "Renda mensal do membro familiar"
          }
        },
        "required": [
          "nome",
          "parentesco",
          "data_nascimento"
        ]
      },
      "CreatePapelCidadaoDto": {
        "type": "object",
        "properties": {
          "tipo_papel": {
            "type": "string",
            "enum": [
              "beneficiario",
              "requerente",
              "representante_legal"
            ],
            "example": "beneficiario",
            "description": "Tipo de papel que o cidadão irá assumir"
          },
          "cidadao_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "ID do cidadão que receberá o papel"
          },
          "metadados": {
            "type": "object",
            "additionalProperties": true,
            "example": {
              "grau_parentesco": "Mãe",
              "documento_representacao": "12345",
              "data_validade_representacao": "2026-01-01"
            },
            "description": "Metadados específicos do papel (varia conforme o tipo de papel)"
          }
        },
        "required": [
          "tipo_papel",
          "cidadao_id"
        ]
      },
      "CriteriosElegibilidadeDto": {
        "type": "object",
        "properties": {
          "idade_minima": {
            "type": "number",
            "description": "Idade mínima para elegibilidade"
          },
          "idade_maxima": {
            "type": "number",
            "description": "Idade máxima para elegibilidade"
          },
          "renda_maxima": {
            "type": "number",
            "description": "Renda máxima per capita para elegibilidade"
          },
          "tempo_minimo_residencia": {
            "type": "number",
            "description": "Tempo mínimo de residência no município (em meses)"
          },
          "outros": {
            "description": "Outros critérios de elegibilidade",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateTipoBeneficioDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome do tipo de benefício",
            "example": "Auxílio Moradia"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição detalhada do benefício"
          },
          "periodicidade": {
            "type": "string",
            "description": "Periodicidade do benefício",
            "enum": [
              "unico",
              "mensal",
              "trimestral",
              "semestral",
              "anual"
            ],
            "example": "mensal"
          },
          "base_juridica": {
            "type": "string",
            "description": "Base jurídica que fundamenta o benefício"
          },
          "valor": {
            "type": "number",
            "description": "Valor do benefício",
            "example": 400
          },
          "ativo": {
            "type": "boolean",
            "description": "Status do benefício",
            "default": true
          },
          "criterios_elegibilidade": {
            "description": "Critérios de elegibilidade para o benefício",
            "allOf": [
              {
                "$ref": "#/components/schemas/CriteriosElegibilidadeDto"
              }
            ]
          }
        },
        "required": [
          "nome",
          "descricao",
          "periodicidade",
          "base_juridica",
          "valor"
        ]
      },
      "UpdateTipoBeneficioDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome do tipo de benefício",
            "example": "Auxílio Moradia"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição detalhada do benefício"
          },
          "periodicidade": {
            "type": "string",
            "description": "Periodicidade do benefício",
            "enum": [
              "unico",
              "mensal",
              "trimestral",
              "semestral",
              "anual"
            ],
            "example": "mensal"
          },
          "base_juridica": {
            "type": "string",
            "description": "Base jurídica que fundamenta o benefício"
          },
          "valor": {
            "type": "number",
            "description": "Valor do benefício",
            "example": 400
          },
          "ativo": {
            "type": "boolean",
            "description": "Status do benefício",
            "default": true
          },
          "criterios_elegibilidade": {
            "description": "Critérios de elegibilidade para o benefício",
            "allOf": [
              {
                "$ref": "#/components/schemas/CriteriosElegibilidadeDto"
              }
            ]
          }
        }
      },
      "CreateRequisitoDocumentoDto": {
        "type": "object",
        "properties": {
          "tipo_documento": {
            "type": "string",
            "description": "Tipo do documento requerido",
            "enum": [
              "rg",
              "cpf",
              "comprovante_residencia",
              "comprovante_renda",
              "certidao_nascimento",
              "declaracao_medica",
              "contrato_aluguel",
              "outro"
            ],
            "example": "comprovante_residencia"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição do documento e suas especificações",
            "example": "Comprovante de residência dos últimos 3 meses (conta de água, luz ou telefone)"
          },
          "obrigatorio": {
            "type": "boolean",
            "description": "Indica se o documento é obrigatório para a solicitação",
            "default": true
          },
          "observacoes": {
            "type": "string",
            "description": "Observações adicionais sobre o documento",
            "example": "Caso não possua comprovante em seu nome, apresentar declaração do titular"
          }
        },
        "required": [
          "tipo_documento",
          "descricao",
          "obrigatorio"
        ]
      },
      "EtapaFluxoDto": {
        "type": "object",
        "properties": {
          "ordem": {
            "type": "number",
            "description": "Ordem da etapa no fluxo de aprovação",
            "example": 1
          },
          "nome": {
            "type": "string",
            "description": "Nome da etapa",
            "example": "Análise Técnica"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição da etapa",
            "example": "Análise técnica da documentação e critérios de elegibilidade"
          },
          "tipo_aprovador": {
            "type": "string",
            "description": "Tipo de aprovador responsável pela etapa",
            "enum": [
              "tecnico",
              "coordenador_cras",
              "coordenador_creas",
              "gestor_unidade",
              "gestor_semtas",
              "comissao"
            ],
            "example": "tecnico"
          },
          "prazo_dias": {
            "type": "number",
            "description": "Prazo máximo em dias para conclusão da etapa",
            "example": 5
          }
        },
        "required": [
          "ordem",
          "nome",
          "descricao",
          "tipo_aprovador"
        ]
      },
      "ConfigurarFluxoDto": {
        "type": "object",
        "properties": {
          "descricao": {
            "type": "string",
            "description": "Descrição geral do fluxo de aprovação",
            "example": "Fluxo padrão para aprovação de benefícios eventuais"
          },
          "etapas": {
            "description": "Etapas do fluxo de aprovação",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EtapaFluxoDto"
            }
          }
        },
        "required": [
          "descricao",
          "etapas"
        ]
      },
      "ValidacoesCampoDinamicoDto": {
        "type": "object",
        "properties": {
          "minLength": {
            "type": "number",
            "description": "Valor mínimo para campos numéricos ou tamanho mínimo para strings e arrays"
          },
          "maxLength": {
            "type": "number",
            "description": "Valor máximo para campos numéricos ou tamanho máximo para strings e arrays"
          },
          "min": {
            "type": "object",
            "description": "Valor mínimo para campos numéricos ou data mínima para campos de data"
          },
          "max": {
            "type": "object",
            "description": "Valor máximo para campos numéricos ou data máxima para campos de data"
          },
          "pattern": {
            "type": "string",
            "description": "Expressão regular para validação de strings"
          },
          "enum": {
            "description": "Lista de valores permitidos para o campo",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "format": {
            "type": "string",
            "description": "Formato específico para validação (ex: email, cpf, cep)"
          }
        }
      },
      "CreateCampoDinamicoDto": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label do campo (texto exibido para o usuário)",
            "example": "CPF do Beneficiário"
          },
          "nome": {
            "type": "string",
            "description": "Nome do campo (identificador usado no código)",
            "example": "cpf_beneficiario"
          },
          "tipo": {
            "type": "string",
            "description": "Tipo de dado do campo",
            "enum": [
              "string",
              "number",
              "boolean",
              "date",
              "array",
              "object"
            ],
            "example": "string"
          },
          "obrigatorio": {
            "type": "boolean",
            "description": "Indica se o campo é obrigatório",
            "default": false
          },
          "descricao": {
            "type": "string",
            "description": "Descrição detalhada do campo"
          },
          "validacoes": {
            "description": "Validações específicas para o campo",
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidacoesCampoDinamicoDto"
              }
            ]
          },
          "ordem": {
            "type": "number",
            "description": "Ordem de exibição do campo",
            "default": 1
          },
          "ativo": {
            "type": "boolean",
            "description": "Indica se o campo está ativo",
            "default": true
          }
        },
        "required": [
          "label",
          "nome",
          "tipo",
          "obrigatorio"
        ]
      },
      "CreateSolicitacaoBeneficioDto": {
        "type": "object",
        "properties": {
          "cidadao_id": {
            "type": "string",
            "description": "ID do cidadão solicitante",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tipo_beneficio_id": {
            "type": "string",
            "description": "ID do tipo de benefício solicitado",
            "example": "123e4567-e89b-12d3-a456-426614174001"
          },
          "observacoes": {
            "type": "string",
            "description": "Observações sobre a solicitação"
          },
          "dados_dinamicos": {
            "type": "object",
            "description": "Dados dinâmicos específicos do tipo de benefício",
            "additionalProperties": true,
            "example": {
              "renda_familiar": 1500,
              "tempo_residencia": 24,
              "possui_dependentes": true,
              "numero_dependentes": 2
            }
          }
        },
        "required": [
          "cidadao_id",
          "tipo_beneficio_id",
          "dados_dinamicos"
        ]
      },
      "UpdateStatusSolicitacaoDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Novo status da solicitação",
            "example": "APROVADA",
            "enum": [
              "PENDENTE",
              "ANALISE",
              "APROVADA",
              "REJEITADA",
              "CANCELADA",
              "EM_PROCESSAMENTO",
              "CONCLUIDA"
            ]
          },
          "justificativa": {
            "type": "string",
            "description": "Justificativa para a mudança de status",
            "example": "Documentação completa e requisitos atendidos"
          }
        },
        "required": [
          "status"
        ]
      },
      "DocumentoSolicitacaoDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome do documento",
            "example": "Comprovante de Residência"
          },
          "tipo": {
            "type": "string",
            "description": "Tipo do documento",
            "example": "comprovante_residencia"
          },
          "arquivo_url": {
            "type": "string",
            "description": "URL ou caminho do arquivo",
            "example": "/uploads/documentos/12345.pdf"
          },
          "observacoes": {
            "type": "string",
            "description": "Observações sobre o documento"
          }
        },
        "required": [
          "nome",
          "tipo",
          "arquivo_url"
        ]
      },
      "CreateSolicitacaoDto": {
        "type": "object",
        "properties": {
          "beneficiario_id": {
            "type": "string",
            "description": "ID do cidadão beneficiário"
          },
          "tipo_beneficio_id": {
            "type": "string",
            "description": "ID do tipo de benefício solicitado"
          },
          "unidade_id": {
            "type": "string",
            "description": "ID da unidade onde a solicitação está sendo feita"
          },
          "observacoes": {
            "type": "string",
            "description": "Observações sobre a solicitação"
          },
          "dados_complementares": {
            "type": "object",
            "description": "Dados complementares específicos do tipo de benefício"
          },
          "documentos": {
            "description": "Documentos anexados à solicitação",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentoSolicitacaoDto"
            }
          }
        },
        "required": [
          "beneficiario_id",
          "tipo_beneficio_id",
          "unidade_id",
          "documentos"
        ]
      },
      "UploadDocumentoDto": {
        "type": "object",
        "properties": {
          "solicitacao_id": {
            "type": "string",
            "description": "ID da solicitação à qual o documento pertence",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          "tipo_documento": {
            "type": "string",
            "description": "Tipo do documento",
            "enum": [
              "rg",
              "cpf",
              "comprovante_residencia",
              "comprovante_renda",
              "certidao_nascimento",
              "declaracao_medica",
              "contrato_aluguel",
              "outro"
            ],
            "example": "COMPROVANTE_RESIDENCIA"
          },
          "arquivo": {
            "type": "string",
            "description": "Arquivo do documento",
            "format": "binary"
          },
          "observacoes": {
            "type": "string",
            "description": "Observações sobre o documento",
            "example": "Documento atualizado conforme solicitado"
          },
          "metadados": {
            "type": "object",
            "description": "Metadados adicionais do documento",
            "example": {
              "titulo": "Comprovante de Residência",
              "descricao": "Conta de luz referente ao mês de janeiro/2025",
              "autor": "Companhia Energética",
              "data_documento": "2025-01-15",
              "tags": [
                "residência",
                "conta",
                "luz"
              ]
            }
          },
          "usuario_id": {
            "type": "string",
            "description": "ID do usuário que está fazendo upload (preenchido automaticamente)",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        },
        "required": [
          "solicitacao_id",
          "tipo_documento",
          "arquivo"
        ]
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "destinatario_id": {
            "type": "string",
            "description": "ID do destinatário da notificação",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "template_id": {
            "type": "string",
            "description": "ID do template de notificação",
            "example": "123e4567-e89b-12d3-a456-426614174999"
          },
          "dados_contexto": {
            "type": "object",
            "description": "Dados de contexto para substituição no template",
            "example": {
              "nome": "João Silva",
              "protocolo": "SOL-2025-0001",
              "data_solicitacao": "15/05/2025"
            }
          },
          "data_agendamento": {
            "format": "date-time",
            "type": "string",
            "description": "Data de agendamento para envio (opcional)"
          }
        },
        "required": [
          "destinatario_id",
          "template_id",
          "dados_contexto"
        ]
      },
      "CreateNotificationTemplateDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome do template de notificação",
            "example": "confirmacao-solicitacao"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição do template de notificação",
            "example": "Template para confirmação de abertura de solicitação de benefício"
          },
          "assunto": {
            "type": "string",
            "description": "Assunto da notificação",
            "example": "Confirmação da sua solicitação de benefício"
          },
          "template_conteudo": {
            "type": "string",
            "description": "Conteúdo do template com variáveis no formato {{variavel}}",
            "example": "Olá {{nome}}, sua solicitação de benefício #{{protocolo}} foi registrada com sucesso."
          },
          "canais_suportados": {
            "type": "array",
            "description": "Canais de notificação suportados por este template",
            "example": [
              "email",
              "in_app"
            ],
            "items": {
              "type": "string",
              "enum": [
                "email",
                "in_app",
                "sms",
                "push"
              ]
            }
          },
          "ativo": {
            "type": "boolean",
            "description": "Indica se o template está ativo",
            "default": true
          }
        },
        "required": [
          "nome",
          "descricao",
          "assunto",
          "template_conteudo",
          "canais_suportados",
          "ativo"
        ]
      },
      "CreateLogAuditoriaDto": {
        "type": "object",
        "properties": {
          "tipo_operacao": {
            "type": "string",
            "description": "Tipo de operação realizada",
            "enum": [
              "CREATE",
              "READ",
              "UPDATE",
              "DELETE",
              "ACCESS",
              "EXPORT",
              "ANONYMIZE",
              "LOGIN",
              "LOGOUT",
              "FAILED_LOGIN"
            ],
            "example": "CREATE"
          },
          "entidade_afetada": {
            "type": "string",
            "description": "Nome da entidade afetada pela operação",
            "example": "Usuario"
          },
          "entidade_id": {
            "type": "string",
            "description": "ID da entidade afetada",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "usuario_id": {
            "type": "string",
            "description": "ID do usuário que realizou a operação",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint acessado",
            "example": "/api/v1/usuarios"
          },
          "metodo_http": {
            "type": "string",
            "description": "Método HTTP utilizado",
            "example": "POST"
          },
          "ip_origem": {
            "type": "string",
            "description": "Endereço IP de origem da requisição",
            "example": "192.168.1.1"
          },
          "user_agent": {
            "type": "string",
            "description": "User-Agent do navegador ou cliente",
            "example": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição da operação realizada",
            "example": "Atualização de dados do usuário"
          },
          "dados_anteriores": {
            "type": "object",
            "description": "Dados anteriores à operação",
            "example": {
              "nome": "Nome Antigo",
              "email": "email@antigo.com"
            }
          },
          "dados_novos": {
            "type": "object",
            "description": "Novos dados após a operação",
            "example": {
              "nome": "Nome Novo",
              "email": "email@novo.com"
            }
          },
          "data_hora": {
            "format": "date-time",
            "type": "string",
            "description": "Data e hora da operação",
            "example": "2023-01-01T12:00:00Z"
          },
          "dados_sensiveis_acessados": {
            "description": "Dados sensíveis que foram acessados (LGPD)",
            "example": [
              "cpf",
              "data_nascimento",
              "endereco"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tipo_operacao",
          "entidade_afetada"
        ]
      },
      "SolicitarExportacaoDto": {
        "type": "object",
        "properties": {}
      },
      "CriarMetricaDefinicaoDto": {
        "type": "object",
        "properties": {
          "codigo": {
            "type": "string",
            "description": "Código único da métrica (snake_case)",
            "example": "tempo_medio_processamento_beneficio"
          },
          "nome": {
            "type": "string",
            "description": "Nome de exibição da métrica",
            "example": "Tempo Médio de Processamento de Benefício"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição detalhada da métrica",
            "example": "Calcula o tempo médio de processamento de solicitações de benefício, desde a submissão até a aprovação ou rejeição."
          },
          "tipo": {
            "type": "string",
            "description": "Tipo da métrica",
            "enum": [
              "contagem",
              "soma",
              "media",
              "minimo",
              "maximo",
              "composta",
              "percentil",
              "cardinalidade",
              "taxa_variacao"
            ],
            "example": "media"
          },
          "categoria": {
            "type": "string",
            "description": "Categoria da métrica para organização",
            "enum": [
              "financeiro",
              "operacional",
              "desempenho",
              "qualidade",
              "usuario",
              "beneficio",
              "processamento",
              "sistema"
            ],
            "example": "processamento"
          },
          "unidade": {
            "type": "string",
            "description": "Unidade de medida da métrica",
            "example": "dias"
          },
          "prefixo": {
            "type": "string",
            "description": "Prefixo a ser exibido antes do valor",
            "example": "R$"
          },
          "sufixo": {
            "type": "string",
            "description": "Sufixo a ser exibido após o valor",
            "example": "%"
          },
          "casas_decimais": {
            "type": "number",
            "description": "Número de casas decimais a serem exibidas",
            "example": 2,
            "default": 2
          },
          "sql_consulta": {
            "type": "string",
            "description": "Consulta SQL para coletar dados (para métricas baseadas em banco de dados)",
            "example": "SELECT AVG(EXTRACT(EPOCH FROM (data_conclusao - data_solicitacao))/86400) FROM solicitacao WHERE status = 'concluido' AND data_conclusao BETWEEN ${PERIODO_INICIO} AND ${PERIODO_FIM}"
          },
          "formula_calculo": {
            "type": "string",
            "description": "Fórmula para cálculo (para métricas compostas)",
            "example": "beneficios_aprovados / total_solicitacoes * 100"
          },
          "fonte_dados": {
            "type": "string",
            "description": "Fonte de dados da métrica",
            "example": "banco_dados",
            "default": "banco_dados"
          },
          "agregacao_temporal": {
            "type": "string",
            "description": "Especificação de como agregar os dados em diferentes períodos",
            "example": "media",
            "default": "soma"
          },
          "granularidade": {
            "type": "string",
            "description": "Granularidade mínima de coleta/armazenamento",
            "enum": [
              "minuto",
              "hora",
              "dia",
              "semana",
              "mes",
              "trimestre",
              "ano"
            ],
            "example": "dia",
            "default": "dia"
          },
          "metricas_dependentes": {
            "description": "Referência a outras métricas utilizadas no cálculo (caso seja composta)",
            "example": [
              "beneficios_aprovados",
              "total_solicitacoes"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parametros_especificos": {
            "type": "object",
            "description": "Parâmetros específicos para o tipo de métrica",
            "example": {
              "percentil": 95
            }
          },
          "tags": {
            "description": "Tags para filtrar e categorizar métricas",
            "example": [
              "financeiro",
              "beneficio",
              "prioritario"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "codigo",
          "nome",
          "descricao",
          "tipo",
          "categoria"
        ]
      },
      "AtualizarMetricaDefinicaoDto": {
        "type": "object",
        "properties": {
          "nome": {
            "type": "string",
            "description": "Nome de exibição da métrica",
            "example": "Tempo Médio de Processamento de Benefício"
          },
          "descricao": {
            "type": "string",
            "description": "Descrição detalhada da métrica",
            "example": "Calcula o tempo médio de processamento de solicitações de benefício, desde a submissão até a aprovação ou rejeição."
          },
          "tipo": {
            "type": "string",
            "description": "Tipo da métrica",
            "enum": [
              "contagem",
              "soma",
              "media",
              "minimo",
              "maximo",
              "composta",
              "percentil",
              "cardinalidade",
              "taxa_variacao"
            ],
            "example": "media"
          },
          "categoria": {
            "type": "string",
            "description": "Categoria da métrica para organização",
            "enum": [
              "financeiro",
              "operacional",
              "desempenho",
              "qualidade",
              "usuario",
              "beneficio",
              "processamento",
              "sistema"
            ],
            "example": "processamento"
          },
          "unidade": {
            "type": "string",
            "description": "Unidade de medida da métrica",
            "example": "dias"
          },
          "prefixo": {
            "type": "string",
            "description": "Prefixo a ser exibido antes do valor",
            "example": "R$"
          },
          "sufixo": {
            "type": "string",
            "description": "Sufixo a ser exibido após o valor",
            "example": "%"
          },
          "casas_decimais": {
            "type": "number",
            "description": "Número de casas decimais a serem exibidas",
            "example": 2
          },
          "sql_consulta": {
            "type": "string",
            "description": "Consulta SQL para coletar dados (para métricas baseadas em banco de dados)",
            "example": "SELECT AVG(EXTRACT(EPOCH FROM (data_conclusao - data_solicitacao))/86400) FROM solicitacao WHERE status = 'concluido' AND data_conclusao BETWEEN ${PERIODO_INICIO} AND ${PERIODO_FIM}"
          },
          "formula_calculo": {
            "type": "string",
            "description": "Fórmula para cálculo (para métricas compostas)",
            "example": "beneficios_aprovados / total_solicitacoes * 100"
          },
          "fonte_dados": {
            "type": "string",
            "description": "Fonte de dados da métrica",
            "example": "banco_dados"
          },
          "agregacao_temporal": {
            "type": "string",
            "description": "Especificação de como agregar os dados em diferentes períodos",
            "example": "media"
          },
          "granularidade": {
            "type": "string",
            "description": "Granularidade mínima de coleta/armazenamento",
            "enum": [
              "minuto",
              "hora",
              "dia",
              "semana",
              "mes",
              "trimestre",
              "ano"
            ],
            "example": "dia"
          },
          "metricas_dependentes": {
            "description": "Referência a outras métricas utilizadas no cálculo (caso seja composta)",
            "example": [
              "beneficios_aprovados",
              "total_solicitacoes"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "ativa": {
            "type": "boolean",
            "description": "Flag que indica se a métrica está ativa para coleta",
            "example": true
          },
          "parametros_especificos": {
            "type": "object",
            "description": "Parâmetros específicos para o tipo de métrica",
            "example": {
              "percentil": 95
            }
          },
          "tags": {
            "description": "Tags para filtrar e categorizar métricas",
            "example": [
              "financeiro",
              "beneficio",
              "prioritario"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "calculo_tempo_real": {
            "type": "boolean",
            "description": "Flag que indica se a métrica é calculada em tempo real ou pré-calculada",
            "example": false
          }
        }
      },
      "CriarMetricaConfiguracaoDto": {
        "type": "object",
        "properties": {
          "metrica_id": {
            "type": "string",
            "description": "ID da métrica para a qual a configuração será criada",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "coleta_automatica": {
            "type": "boolean",
            "description": "Habilita ou desabilita a coleta automática",
            "example": true,
            "default": true
          },
          "tipo_agendamento": {
            "type": "string",
            "description": "Tipo de agendamento para coleta automática",
            "enum": [
              "intervalo",
              "cron",
              "evento",
              "manual"
            ],
            "example": "intervalo",
            "default": "intervalo"
          },
          "intervalo_segundos": {
            "type": "number",
            "description": "Valor do intervalo de coleta em segundos (para tipo INTERVALO)",
            "example": 86400,
            "default": 86400
          },
          "expressao_cron": {
            "type": "string",
            "description": "Expressão cron para agendamento complexo (para tipo CRON)",
            "example": "0 0 * * *"
          },
          "nome_evento": {
            "type": "string",
            "description": "Nome do evento que dispara a coleta (para tipo EVENTO)",
            "example": "beneficio_aprovado"
          },
          "max_snapshots": {
            "type": "number",
            "description": "Número máximo de snapshots a serem mantidos (0 = sem limite)",
            "example": 365,
            "default": 0
          },
          "periodo_retencao_dias": {
            "type": "number",
            "description": "Período máximo de retenção em dias (0 = sem limite)",
            "example": 365,
            "default": 365
          },
          "estrategia_amostragem": {
            "type": "string",
            "description": "Estratégia de amostragem para coleta de dados",
            "enum": [
              "completa",
              "aleatoria",
              "sistematica",
              "estratificada"
            ],
            "example": "completa",
            "default": "completa"
          },
          "tamanho_amostra": {
            "type": "number",
            "description": "Tamanho da amostra (quando aplicável)",
            "example": 1000,
            "default": 0
          },
          "cacheamento_habilitado": {
            "type": "boolean",
            "description": "Habilita ou desabilita o cacheamento dos valores",
            "example": true,
            "default": true
          },
          "cache_ttl": {
            "type": "number",
            "description": "Tempo de vida do cache em segundos",
            "example": 300,
            "default": 300
          },
          "alertas": {
            "description": "Configurações de alertas baseados no valor da métrica",
            "example": [
              {
                "tipo": "valor_maximo",
                "valor": 100,
                "mensagem": "Valor excedeu o limite",
                "severidade": "alta"
              },
              {
                "tipo": "valor_minimo",
                "valor": 10,
                "mensagem": "Valor abaixo do mínimo",
                "severidade": "media"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visualizacao": {
            "type": "object",
            "description": "Configurações de visualização",
            "example": {
              "cor": "#FF5500",
              "icone": "chart-line",
              "destaque": true
            }
          },
          "exibir_dashboard": {
            "type": "boolean",
            "description": "Flag que indica se a métrica deve ser exibida em dashboards",
            "example": true,
            "default": true
          },
          "prioridade_dashboard": {
            "type": "number",
            "description": "Prioridade de exibição (ordem) no dashboard (menor = mais importante)",
            "example": 100,
            "default": 100
          }
        },
        "required": [
          "metrica_id"
        ]
      },
      "AtualizarMetricaConfiguracaoDto": {
        "type": "object",
        "properties": {
          "coleta_automatica": {
            "type": "boolean",
            "description": "Habilita ou desabilita a coleta automática",
            "example": true
          },
          "tipo_agendamento": {
            "type": "string",
            "description": "Tipo de agendamento para coleta automática",
            "enum": [
              "intervalo",
              "cron",
              "evento",
              "manual"
            ],
            "example": "intervalo"
          },
          "intervalo_segundos": {
            "type": "number",
            "description": "Valor do intervalo de coleta em segundos (para tipo INTERVALO)",
            "example": 86400
          },
          "expressao_cron": {
            "type": "string",
            "description": "Expressão cron para agendamento complexo (para tipo CRON)",
            "example": "0 0 * * *"
          },
          "nome_evento": {
            "type": "string",
            "description": "Nome do evento que dispara a coleta (para tipo EVENTO)",
            "example": "beneficio_aprovado"
          },
          "max_snapshots": {
            "type": "number",
            "description": "Número máximo de snapshots a serem mantidos (0 = sem limite)",
            "example": 365
          },
          "periodo_retencao_dias": {
            "type": "number",
            "description": "Período máximo de retenção em dias (0 = sem limite)",
            "example": 365
          },
          "estrategia_amostragem": {
            "type": "string",
            "description": "Estratégia de amostragem para coleta de dados",
            "enum": [
              "completa",
              "aleatoria",
              "sistematica",
              "estratificada"
            ],
            "example": "completa"
          },
          "tamanho_amostra": {
            "type": "number",
            "description": "Tamanho da amostra (quando aplicável)",
            "example": 1000
          },
          "cacheamento_habilitado": {
            "type": "boolean",
            "description": "Habilita ou desabilita o cacheamento dos valores",
            "example": true
          },
          "cache_ttl": {
            "type": "number",
            "description": "Tempo de vida do cache em segundos",
            "example": 300
          },
          "alertas": {
            "description": "Configurações de alertas baseados no valor da métrica",
            "example": [
              {
                "tipo": "valor_maximo",
                "valor": 100,
                "mensagem": "Valor excedeu o limite",
                "severidade": "alta"
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "visualizacao": {
            "type": "object",
            "description": "Configurações de visualização",
            "example": {
              "cor": "#FF5500",
              "icone": "chart-line",
              "destaque": true
            }
          },
          "exibir_dashboard": {
            "type": "boolean",
            "description": "Flag que indica se a métrica deve ser exibida em dashboards",
            "example": true
          },
          "prioridade_dashboard": {
            "type": "number",
            "description": "Prioridade de exibição (ordem) no dashboard (menor = mais importante)",
            "example": 100
          }
        }
      },
      "ColetaManualMetricaDto": {
        "type": "object",
        "properties": {
          "codigo": {
            "type": "string",
            "description": "Código da métrica",
            "example": "tempo_medio_processamento_beneficio"
          },
          "dimensoes": {
            "type": "object",
            "description": "Dimensões para filtrar a coleta",
            "example": {
              "regiao": "nordeste",
              "faixa_etaria": "18-25"
            }
          },
          "periodo_inicio": {
            "format": "date-time",
            "type": "string",
            "description": "Data de início do período (se não informado, usa padrão da granularidade)",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "periodo_fim": {
            "format": "date-time",
            "type": "string",
            "description": "Data de fim do período (se não informado, usa data atual)",
            "example": "2023-01-31T23:59:59.999Z"
          }
        },
        "required": [
          "codigo"
        ]
      },
      "ConsultaValorMetricaDto": {
        "type": "object",
        "properties": {
          "codigo": {
            "type": "string",
            "description": "Código da métrica",
            "example": "tempo_medio_processamento_beneficio"
          },
          "dimensoes": {
            "type": "object",
            "description": "Dimensões para filtrar o valor",
            "example": {
              "regiao": "nordeste",
              "faixa_etaria": "18-25"
            }
          }
        },
        "required": [
          "codigo"
        ]
      },
      "ConsultaSerieTemporalDto": {
        "type": "object",
        "properties": {
          "codigo": {
            "type": "string",
            "description": "Código da métrica",
            "example": "tempo_medio_processamento_beneficio"
          },
          "data_inicial": {
            "format": "date-time",
            "type": "string",
            "description": "Data inicial do período",
            "example": "2023-01-01T00:00:00.000Z"
          },
          "data_final": {
            "format": "date-time",
            "type": "string",
            "description": "Data final do período",
            "example": "2023-12-31T23:59:59.999Z"
          },
          "granularidade": {
            "type": "string",
            "description": "Granularidade para agregação dos dados",
            "enum": [
              "minuto",
              "hora",
              "dia",
              "semana",
              "mes",
              "trimestre",
              "ano"
            ],
            "example": "mes"
          },
          "dimensoes": {
            "type": "object",
            "description": "Dimensões para filtrar os dados",
            "example": {
              "regiao": "nordeste"
            }
          },
          "limite_pontos": {
            "type": "number",
            "description": "Limitar número máximo de pontos na série",
            "example": 12
          }
        },
        "required": [
          "codigo",
          "data_inicial",
          "data_final"
        ]
      },
      "Object": {
        "type": "object",
        "properties": {}
      }
    }
  }
}