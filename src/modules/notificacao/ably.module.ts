import { Module, Global, forwardRef } from '@nestjs/common';
import { ConfigModule, ConfigService } from '@nestjs/config';
import { TypeOrmModule } from '@nestjs/typeorm';
import { EventEmitterModule } from '@nestjs/event-emitter';

// Configura√ß√£o
import { AblyConfig } from '../../config/ably.config';

// Servi√ßos Ably
import { AblyService } from './services/ably.service';
import { AblyAuthService } from './services/ably-auth.service';
import { AblyChannelService } from './services/ably-channel.service';
import { NotificationOrchestratorService } from './services/notification-orchestrator.service';

// Controladores
import { AblyController } from './controllers/ably.controller';

// Entidades
import { NotificacaoSistema } from '../../entities/notification.entity';
import { NotificationTemplate } from '../../entities/notification-template.entity';
import { PermissionModule } from '../../auth/permission.module';
import { AuthModule } from '../../auth/auth.module';

/**
 * M√≥dulo Ably - Integra√ß√£o de Notifica√ß√µes em Tempo Real
 *
 * Este m√≥dulo √© respons√°vel por:
 * - Gerenciar conex√µes com o Ably Cloud
 * - Autentica√ß√£o JWT para clientes
 * - Gerenciamento de canais e subscri√ß√µes
 * - Orquestra√ß√£o entre Ably e SSE (fallback)
 * - M√©tricas e monitoramento
 *
 * Funcionalidades:
 * - Notifica√ß√µes em tempo real via WebSockets
 * - Fallback autom√°tico para SSE
 * - Circuit breaker para resili√™ncia
 * - Rate limiting e throttling
 * - Auditoria e logs estruturados
 */
@Global()
@Module({
  imports: [
    ConfigModule,
    EventEmitterModule,
    forwardRef(() => AuthModule),

    PermissionModule,
    TypeOrmModule.forFeature([NotificacaoSistema, NotificationTemplate]),
  ],
  controllers: [AblyController],
  providers: [
    // Configura√ß√£o
    {
      provide: 'ABLY_CONFIG',
      useFactory: (configService: ConfigService) => {
        return new AblyConfig(configService);
      },
      inject: [ConfigService],
    },

    // Servi√ßos principais
    AblyService,
    AblyAuthService,
    AblyChannelService,
    NotificationOrchestratorService,
  ],
  exports: [
    AblyService,
    AblyAuthService,
    AblyChannelService,
    NotificationOrchestratorService,
    'ABLY_CONFIG',
  ],
})
export class AblyModule {
  constructor(
    private readonly ablyService: AblyService,
    private readonly configService: ConfigService,
  ) {
    // Inicializa√ß√£o ass√≠ncrona do Ably
    this.initializeAbly();
  }

  /**
   * Inicializa o servi√ßo Ably de forma ass√≠ncrona
   */
  private async initializeAbly(): Promise<void> {
    try {
      const isAblyEnabled =
        this.configService.get<string>('ABLY_API_KEY') !== 'disabled';

      if (isAblyEnabled) {
        console.log('üöÄ Inicializando integra√ß√£o Ably...');
        // A inicializa√ß√£o real acontece no onModuleInit do AblyService
      } else {
        console.log('‚ö†Ô∏è  Ably desabilitado - funcionando apenas com SSE');
      }
    } catch (error) {
      console.error('‚ùå Erro na inicializa√ß√£o do m√≥dulo Ably:', error);
    }
  }
}
