// Substituir o m√©todo onModuleInit em auditoria-monitoramento.service.ts

/**
 * Configura o agendamento quando o m√≥dulo √© inicializado de forma ass√≠ncrona
 * CORRE√á√ÉO: N√£o bloquear a inicializa√ß√£o do servidor
 */
async onModuleInit(): Promise<void> {
  this.logger.log('‚è© AuditoriaMonitoramentoService inicializado (configura√ß√£o em background)');
  
  // CR√çTICO: Retornar IMEDIATAMENTE sem await
  // A configura√ß√£o acontece em background
  Promise.resolve().then(async () => {
    try {
      this.logger.log('üîÑ Configurando agendamento de estat√≠sticas em background...');
      
      // Aguardar 30 segundos ap√≥s o boot antes de coletar estat√≠sticas
      await new Promise(resolve => setTimeout(resolve, 30000));
      
      // Configurar a atualiza√ß√£o de estat√≠sticas a cada 15 minutos
      this.scheduleAdapter.scheduleInterval(
        'atualizar_estatisticas_auditoria',
        15 * 60 * 1000, // 15 minutos
        () => this.atualizarEstatisticas(),
      );

      this.logger.log('‚úÖ Agendamento de estat√≠sticas configurado com sucesso');
      
      // Executar primeira atualiza√ß√£o ap√≥s 1 minuto
      setTimeout(() => {
        this.atualizarEstatisticas().catch(error => {
          this.logger.error(`Erro na atualiza√ß√£o inicial de estat√≠sticas: ${error.message}`);
        });
      }, 60000);
      
    } catch (error) {
      this.logger.error(
        `Erro ao configurar agendamento de estat√≠sticas: ${error.message}`,
      );
    }
  });
  
  // onModuleInit retorna IMEDIATAMENTE!
}
