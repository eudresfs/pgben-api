import { Test, TestingModule } from '@nestjs/testing';
import { MalwareScanService } from '../malware-scan.service';
import { ConfigService } from '@nestjs/config';
import { Logger } from '@nestjs/common';

// Mock do módulo clamscan
jest.mock('clamscan', () => {
  return {};
});

describe('MalwareScanService', () => {
  let service: MalwareScanService;

  // Mock para o Logger
  const mockLogger = {
    log: jest.fn(),
    error: jest.fn(),
    warn: jest.fn(),
    debug: jest.fn(),
    verbose: jest.fn(),
  };

  // Mock para o ConfigService
  const mockConfigService = {
    get: jest.fn().mockImplementation((key, defaultValue) => {
      const config = {
        CLAMAV_SOCKET: '/var/run/clamav/clamd.ctl',
        CLAMAV_HOST: 'localhost',
        CLAMAV_PORT: 3310,
        CLAMAV_ENABLED: 'false', // Desabilitado para testes
      };
      return config[key] || defaultValue;
    }),
  };

  beforeEach(async () => {
    jest.clearAllMocks();

    const module: TestingModule = await Test.createTestingModule({
      providers: [
        MalwareScanService,
        {
          provide: ConfigService,
          useValue: mockConfigService,
        },
        {
          provide: Logger,
          useValue: mockLogger,
        },
      ],
    }).compile();

    service = module.get<MalwareScanService>(MalwareScanService);

    // Sobrescrever o logger para evitar logs durante os testes
    Object.defineProperty(service, 'logger', { value: mockLogger });
  });

  it('deve ser definido', () => {
    expect(service).toBeDefined();
  });

  describe('scanBuffer', () => {
    it('deve retornar resultado não infectado quando o scanner está desabilitado', async () => {
      // Arrange
      const mockFileBuffer = Buffer.from('arquivo de teste', 'utf-8');
      const mockFileName = 'teste.pdf';

      // Act
      const resultado = await service.scanBuffer(mockFileBuffer, mockFileName);

      // Assert
      expect(resultado).toEqual({
        isInfected: false,
        viruses: [],
        error: 'Scanner de malware não disponível',
      });
      expect(mockLogger.warn).toHaveBeenCalledWith(
        `Verificação de malware ignorada para ${mockFileName}: scanner não disponível`,
      );
    });
  });
});
