d0bb1981f2ca6cf4bc7a2fa2976204ef
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificacaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const notification_entity_1 = require("../../../entities/notification.entity");
const sse_service_1 = require("./sse.service");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
/**
 * Serviço de Notificações
 *
 * Responsável pela lógica de negócio relacionada às notificações
 * enviadas aos usuários do sistema
 */
let NotificacaoService = class NotificacaoService {
    notificacaoRepository;
    sseService;
    constructor(notificacaoRepository, sseService) {
        this.notificacaoRepository = notificacaoRepository;
        this.sseService = sseService;
    }
    /**
     * Lista todas as notificações de um usuário com paginação e filtros
     */
    async findAll(options) {
        const { page = 1, limit = 10, status, userId } = options;
        const queryBuilder = this.notificacaoRepository
            .createQueryBuilder('notificacao')
            .where('notificacao.destinatario_id = :userId', { userId });
        if (status) {
            queryBuilder.andWhere('notificacao.status = :status', { status });
        }
        // Calcular paginação
        const skip = (page - 1) * limit;
        queryBuilder.skip(skip).take(limit);
        // Ordenação padrão (mais recentes primeiro)
        queryBuilder.orderBy('notificacao.created_at', 'DESC');
        // Executar consulta
        const [items, total] = await queryBuilder.getManyAndCount();
        return {
            items,
            meta: {
                total,
                page,
                limit,
                pages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca uma notificação pelo ID
     */
    async findById(id, userId) {
        const notificacao = await this.notificacaoRepository.findOne({
            where: { id },
        });
        if (!notificacao) {
            throw new common_1.NotFoundException(`Notificação com ID ${id} não encontrada`);
        }
        // Verificar se a notificação pertence ao usuário
        if (notificacao.destinatario_id !== userId) {
            throw new common_1.UnauthorizedException('Você não tem permissão para acessar esta notificação');
        }
        return notificacao;
    }
    /**
     * Marca uma notificação como lida
     */
    async marcarComoLida(id, userId) {
        const notificacao = await this.findById(id, userId);
        if (notificacao.status === notification_entity_1.StatusNotificacaoProcessamento.LIDA) {
            return notificacao; // Já está marcada como lida
        }
        // Normalizar o status antes de atualizar
        const statusNormalizado = (0, enum_normalizer_util_1.normalizeEnumFields)({
            status: notification_entity_1.StatusNotificacaoProcessamento.LIDA,
        }).status;
        notificacao.status = statusNormalizado;
        notificacao.data_leitura = new Date();
        return this.notificacaoRepository.save(notificacao);
    }
    /**
     * Marca uma notificação como arquivada
     */
    async arquivar(id, userId) {
        const notificacao = await this.findById(id, userId);
        if (notificacao.status === notification_entity_1.StatusNotificacaoProcessamento.ARQUIVADA) {
            return notificacao; // Já está arquivada
        }
        // Normalizar o status antes de atualizar
        const statusNormalizado = (0, enum_normalizer_util_1.normalizeEnumFields)({
            status: notification_entity_1.StatusNotificacaoProcessamento.ARQUIVADA,
        }).status;
        notificacao.status = statusNormalizado;
        return this.notificacaoRepository.save(notificacao);
    }
    /**
     * Marca todas as notificações do usuário como lidas
     */
    async marcarTodasComoLidas(userId) {
        const agora = new Date();
        await this.notificacaoRepository.update({
            destinatario_id: userId,
            status: notification_entity_1.StatusNotificacaoProcessamento.NAO_LIDA,
        }, {
            status: notification_entity_1.StatusNotificacaoProcessamento.LIDA,
            data_leitura: agora,
        });
        return { message: 'Todas as notificações foram marcadas como lidas' };
    }
    /**
     * Obtém o contador de notificações não lidas do usuário
     */
    async contadorNaoLidas(userId) {
        const count = await this.notificacaoRepository.count({
            where: {
                destinatario_id: userId,
                status: notification_entity_1.StatusNotificacaoProcessamento.NAO_LIDA,
            },
        });
        return { count };
    }
    /**
     * Cria uma nova notificação
     * Este método é utilizado internamente por outros serviços
     */
    async criar(dados) {
        // Normalizar campos de enum antes de criar a notificação
        const dadosNormalizados = (0, enum_normalizer_util_1.normalizeEnumFields)({
            ...dados,
            status: notification_entity_1.StatusNotificacaoProcessamento.NAO_LIDA,
        });
        const notificacao = this.notificacaoRepository.create(dadosNormalizados);
        return this.notificacaoRepository.save(notificacao);
    }
    /**
     * Cria uma notificação de sistema
     */
    async criarNotificacaoSistema(dados) {
        return this.criar({
            ...dados,
            tipo: notification_entity_1.TipoNotificacao.SISTEMA,
        });
    }
    /**
     * Cria uma notificação de solicitação
     */
    async criarNotificacaoSolicitacao(dados) {
        return this.criar({
            destinatario_id: dados.destinatario_id,
            tipo: notification_entity_1.TipoNotificacao.SOLICITACAO,
            titulo: dados.titulo,
            conteudo: dados.conteudo,
            entidade_relacionada_id: dados.solicitacao_id,
            entidade_tipo: 'solicitacao',
            link: dados.link,
        });
    }
    /**
     * Cria uma notificação de pendência
     */
    async criarNotificacaoPendencia(dados) {
        return this.criar({
            destinatario_id: dados.destinatario_id,
            tipo: notification_entity_1.TipoNotificacao.PENDENCIA,
            titulo: dados.titulo,
            conteudo: dados.conteudo,
            entidade_relacionada_id: dados.solicitacao_id,
            entidade_tipo: 'solicitacao',
            link: dados.link,
        });
    }
    /**
     * Cria uma notificação de aprovação
     */
    async criarNotificacaoAprovacao(dados) {
        return this.criar({
            destinatario_id: dados.destinatario_id,
            tipo: notification_entity_1.TipoNotificacao.APROVACAO,
            titulo: dados.titulo,
            conteudo: dados.conteudo,
            entidade_relacionada_id: dados.solicitacao_id,
            entidade_tipo: 'solicitacao',
            link: dados.link,
        });
    }
    /**
     * Cria uma notificação de liberação
     */
    async criarNotificacaoLiberacao(dados) {
        return this.criar({
            destinatario_id: dados.destinatario_id,
            tipo: notification_entity_1.TipoNotificacao.LIBERACAO,
            titulo: dados.titulo,
            conteudo: dados.conteudo,
            entidade_relacionada_id: dados.solicitacao_id,
            entidade_tipo: 'solicitacao',
            link: dados.link,
        });
    }
    /**
     * Cria uma notificação de alerta
     */
    async criarNotificacaoAlerta(dados) {
        return this.criar({
            ...dados,
            tipo: notification_entity_1.TipoNotificacao.ALERTA,
        });
    }
    /**
     * Envia uma notificação com base no tipo fornecido
     * @param dados Dados da notificação a ser enviada
     */
    async enviarNotificacao(dados) {
        // Extrair entidade relacionada dos dados, se fornecida
        const entidadeRelacionadaId = dados.entidade_relacionada_id ||
            (dados.dados && dados.dados.historico_id) ||
            (dados.dados && dados.dados.solicitacao_id);
        const entidadeTipo = dados.entidade_tipo ||
            (dados.dados && dados.dados.historico_id ? 'historico' : undefined) ||
            (dados.dados && dados.dados.solicitacao_id ? 'solicitacao' : undefined);
        // Determinar o tipo de notificação
        let tipoNotificacao;
        if (typeof dados.tipo === 'string') {
            switch (dados.tipo.toUpperCase()) {
                case 'SISTEMA':
                    tipoNotificacao = notification_entity_1.TipoNotificacao.SISTEMA;
                    break;
                case 'SOLICITACAO':
                    tipoNotificacao = notification_entity_1.TipoNotificacao.SOLICITACAO;
                    break;
                case 'PENDENCIA':
                    tipoNotificacao = notification_entity_1.TipoNotificacao.PENDENCIA;
                    break;
                case 'APROVACAO':
                    tipoNotificacao = notification_entity_1.TipoNotificacao.APROVACAO;
                    break;
                case 'LIBERACAO':
                    tipoNotificacao = notification_entity_1.TipoNotificacao.LIBERACAO;
                    break;
                case 'ALERTA':
                    tipoNotificacao = notification_entity_1.TipoNotificacao.ALERTA;
                    break;
                case 'CONVERSAO_PAPEL':
                    tipoNotificacao = notification_entity_1.TipoNotificacao.ALERTA;
                    break;
                default:
                    tipoNotificacao = notification_entity_1.TipoNotificacao.SISTEMA;
            }
        }
        else {
            tipoNotificacao = dados.tipo;
        }
        // Criar a notificação usando o método genérico
        return this.criar({
            destinatario_id: dados.destinatario_id,
            tipo: tipoNotificacao,
            titulo: dados.titulo,
            conteudo: dados.conteudo,
            entidade_relacionada_id: entidadeRelacionadaId,
            entidade_tipo: entidadeTipo,
            link: dados.link,
        });
    }
    /**
     * Cria notificação e envia via SSE em tempo real
     * @param dados Dados da notificação
     * @returns Notificação criada
     */
    async criarEBroadcast(dados) {
        // Cria a notificação no banco de dados
        const notificacao = await this.criar({
            destinatario_id: dados.destinatario_id,
            tipo: dados.tipo,
            titulo: dados.titulo,
            conteudo: dados.conteudo,
            entidade_relacionada_id: dados.entidade_relacionada_id,
            entidade_tipo: dados.entidade_tipo,
            link: dados.link,
        });
        // Envia via SSE se o usuário estiver conectado
        const sseNotification = {
            id: notificacao.id,
            userId: notificacao.destinatario_id,
            type: dados.tipo,
            title: dados.titulo,
            message: dados.conteudo,
            data: notificacao.dados_contexto,
            timestamp: notificacao.created_at,
            priority: dados.prioridade ?? 'medium',
        };
        this.sseService.sendToUser(notificacao.destinatario_id, sseNotification);
        return notificacao;
    }
    /**
     * Envia notificação em massa via SSE
     * @param userIds Lista de IDs dos usuários
     * @param dados Dados da notificação
     * @returns Lista de notificações criadas
     */
    async broadcastParaUsuarios(userIds, dados) {
        // Cria notificações no banco para todos os usuários
        const notificacoes = await Promise.all(userIds.map((userId) => this.criar({
            destinatario_id: userId,
            tipo: dados.tipo,
            titulo: dados.titulo,
            conteudo: dados.conteudo,
            entidade_relacionada_id: dados.entidade_relacionada_id,
            entidade_tipo: dados.entidade_tipo,
            link: dados.link,
        })));
        // Envia via SSE para usuários conectados
        const sseNotification = {
            id: `broadcast-${Date.now()}`, // ID único para broadcast
            type: dados.tipo,
            title: dados.titulo,
            message: dados.conteudo,
            data: dados.dados,
            timestamp: new Date(),
            priority: dados.prioridade ?? 'medium',
        };
        this.sseService.sendToUsers(userIds, sseNotification);
        return notificacoes;
    }
    /**
     * Envia notificação broadcast para todos os usuários conectados
     * @param dados Dados da notificação
     */
    async broadcastGeral(dados) {
        const sseNotification = {
            id: `broadcast-geral-${Date.now()}`,
            type: dados.tipo,
            title: dados.titulo,
            message: dados.conteudo,
            data: dados.dados,
            timestamp: new Date(),
            priority: dados.prioridade ?? 'medium',
        };
        this.sseService.broadcastToAll(sseNotification);
    }
    /**
     * Verifica se um usuário tem conexões SSE ativas
     * @param userId ID do usuário
     * @returns true se o usuário está conectado via SSE
     */
    isUserConnectedSSE(userId) {
        return this.sseService.hasActiveConnections(userId);
    }
    /**
     * Obtém estatísticas das conexões SSE
     * @returns Estatísticas das conexões
     */
    getSSEStats() {
        return this.sseService.getConnectionStats();
    }
};
exports.NotificacaoService = NotificacaoService;
exports.NotificacaoService = NotificacaoService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(notification_entity_1.NotificacaoSistema)),
    __param(1, (0, common_1.Inject)((0, common_1.forwardRef)(() => sse_service_1.SseService))),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof sse_service_1.SseService !== "undefined" && sse_service_1.SseService) === "function" ? _b : Object])
], NotificacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,