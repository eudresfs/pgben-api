{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\repositories\\unidade.repository.ts","mappings":";;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,qCAAiD;AACjD,qEAA0E;AAC1E,2DAAqE;AAErE;;;;GAIG;AAEI,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAGR;IAFZ,UAAU,CAAsB;IAExC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QACxC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,wBAAO,CAAC,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,OAKb;QACC,MAAM,EACJ,IAAI,GAAG,CAAC,EACR,IAAI,GAAG,EAAE,EACT,KAAK,GAAG,EAAE,EACV,KAAK,GAAG,EAAE,UAAU,EAAE,MAAM,EAAE,GAC/B,GAAG,OAAO,IAAI,EAAE,CAAC;QAElB,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;YAClC,IAAI;YACJ,IAAI;YACJ,KAAK;YACL,KAAK;SACN,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACpD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,IAAsB;QACjC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,IAAsB;QAC7C,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,oCAAuB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,YAAY,CAAC,EAAU,EAAE,MAAqB;QAClD,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,oCAAuB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;CACF,CAAA;AAnGY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;yDAIqB,oBAAU,oBAAV,oBAAU;GAH/B,iBAAiB,CAmG7B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\repositories\\unidade.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { Repository, DataSource } from 'typeorm';\nimport { StatusUnidade, Unidade } from '../../../entities/unidade.entity';\nimport { EntityNotFoundException } from '../../../shared/exceptions';\n\n/**\n * Repositório de unidades\n *\n * Responsável por operações de acesso a dados relacionadas a unidades\n */\n@Injectable()\nexport class UnidadeRepository {\n  private repository: Repository<Unidade>;\n\n  constructor(private dataSource: DataSource) {\n    this.repository = this.dataSource.getRepository(Unidade);\n  }\n\n  /**\n   * Busca todas as unidades com filtros e paginação\n   * @param options Opções de filtro e paginação\n   * @returns Lista de unidades paginada\n   */\n  async findAll(options?: {\n    skip?: number;\n    take?: number;\n    where?: any;\n    order?: any;\n  }): Promise<[Unidade[], number]> {\n    const {\n      skip = 0,\n      take = 10,\n      where = {},\n      order = { created_at: 'DESC' },\n    } = options || {};\n\n    return this.repository.findAndCount({\n      skip,\n      take,\n      where,\n      order,\n    });\n  }\n\n  /**\n   * Busca uma unidade pelo ID\n   * @param id ID da unidade\n   * @returns Unidade encontrada ou null\n   */\n  async findById(id: string): Promise<Unidade | null> {\n    return this.repository.findOne({ where: { id } });\n  }\n\n  /**\n   * Busca uma unidade pelo código\n   * @param codigo Código da unidade\n   * @returns Unidade encontrada ou null\n   */\n  async findByCodigo(codigo: string): Promise<Unidade | null> {\n    return this.repository.findOne({ where: { codigo } });\n  }\n\n  /**\n   * Cria uma nova unidade\n   * @param data Dados da unidade\n   * @returns Unidade criada\n   */\n  async create(data: Partial<Unidade>): Promise<Unidade> {\n    const unidade = this.repository.create(data);\n    return this.repository.save(unidade);\n  }\n\n  /**\n   * Atualiza uma unidade existente\n   * @param id ID da unidade\n   * @param data Dados a serem atualizados\n   * @returns Unidade atualizada\n   */\n  async update(id: string, data: Partial<Unidade>): Promise<Unidade> {\n    await this.repository.update(id, data);\n    const unidade = await this.findById(id);\n    if (!unidade) {\n      throw new EntityNotFoundException('Unidade', id);\n    }\n    return unidade;\n  }\n\n  /**\n   * Atualiza o status de uma unidade\n   * @param id ID da unidade\n   * @param status Novo status\n   * @returns Unidade atualizada\n   */\n  async updateStatus(id: string, status: StatusUnidade): Promise<Unidade> {\n    await this.repository.update(id, { status });\n    const unidade = await this.findById(id);\n    if (!unidade) {\n      throw new EntityNotFoundException('Unidade', id);\n    }\n    return unidade;\n  }\n\n  /**\n   * Remove uma unidade (soft delete)\n   * @param id ID da unidade\n   * @returns Resultado da operação\n   */\n  async remove(id: string): Promise<void> {\n    await this.repository.softDelete(id);\n  }\n}\n"],"version":3}