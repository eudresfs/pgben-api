95ca9ff133eaa3546292f3173e2cca16
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateDadosCestaBasicaDto = exports.CreateDadosCestaBasicaDto = void 0;
const class_validator_1 = require("class-validator");
const swagger_1 = require("@nestjs/swagger");
const class_transformer_1 = require("class-transformer");
const enums_1 = require("@/enums");
/**
 * DTO para criação de dados específicos do cidadão para Cesta Básica
 */
class CreateDadosCestaBasicaDto {
    solicitacao_id;
    quantidade_cestas_solicitadas;
    periodo_concessao;
    origem_atendimento;
    numero_pessoas_familia;
    justificativa_quantidade;
    observacoes_especiais;
    tecnico_responsavel;
    unidade_solicitante;
}
exports.CreateDadosCestaBasicaDto = CreateDadosCestaBasicaDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID da solicitação de benefício',
        example: '550e8400-e29b-41d4-a716-446655440000',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da solicitação é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da solicitação inválido' }),
    __metadata("design:type", String)
], CreateDadosCestaBasicaDto.prototype, "solicitacao_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Quantidade de cestas básicas solicitadas',
        example: 2,
        minimum: 1,
        maximum: 12,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Quantidade de cestas é obrigatória' }),
    (0, class_validator_1.IsNumber)({}, { message: 'Quantidade de cestas deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Quantidade mínima é 1 cesta' }),
    (0, class_validator_1.Max)(12, { message: 'Quantidade máxima é 12 cestas' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            const num = parseInt(value, 10);
            return isNaN(num) ? value : num;
        }
        return value;
    }),
    __metadata("design:type", Number)
], CreateDadosCestaBasicaDto.prototype, "quantidade_cestas_solicitadas", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Período de concessão do benefício',
        enum: enums_1.PeriodicidadeEnum,
        example: enums_1.PeriodicidadeEnum.MENSAL,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Período de concessão é obrigatório' }),
    (0, class_validator_1.IsEnum)(enums_1.PeriodicidadeEnum, { message: 'Período de concessão inválido' }),
    __metadata("design:type", typeof (_a = typeof enums_1.PeriodicidadeEnum !== "undefined" && enums_1.PeriodicidadeEnum) === "function" ? _a : Object)
], CreateDadosCestaBasicaDto.prototype, "periodo_concessao", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Origem do atendimento que gerou a solicitação',
        enum: enums_1.OrigemAtendimentoEnum,
        example: enums_1.OrigemAtendimentoEnum.CRAS,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Origem do atendimento é obrigatória' }),
    (0, class_validator_1.IsEnum)(enums_1.OrigemAtendimentoEnum, { message: 'Origem do atendimento inválida' }),
    __metadata("design:type", typeof (_b = typeof enums_1.OrigemAtendimentoEnum !== "undefined" && enums_1.OrigemAtendimentoEnum) === "function" ? _b : Object)
], CreateDadosCestaBasicaDto.prototype, "origem_atendimento", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Número de pessoas na família (para cálculo da quantidade recomendada)',
        example: 4,
        minimum: 1,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Número de pessoas na família deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Número mínimo de pessoas na família é 1' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            const num = parseInt(value, 10);
            return isNaN(num) ? value : num;
        }
        return value;
    }),
    __metadata("design:type", Number)
], CreateDadosCestaBasicaDto.prototype, "numero_pessoas_familia", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Justificativa para a quantidade solicitada (obrigatória se quantidade > recomendada)',
        example: 'Família com necessidades especiais devido a situação de vulnerabilidade extrema.',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.ValidateIf)((o) => {
        // Validação condicional: obrigatória se quantidade > recomendada
        // Regra simples: 1 cesta para até 3 pessoas, +1 a cada 3 pessoas
        const recomendada = o.numero_pessoas_familia
            ? Math.ceil(o.numero_pessoas_familia / 3)
            : 1;
        return o.quantidade_cestas_solicitadas > recomendada + 1;
    }),
    (0, class_validator_1.IsNotEmpty)({
        message: 'Justificativa é obrigatória para quantidade acima do recomendado',
    }),
    (0, class_validator_1.MinLength)(10, { message: 'Justificativa deve ter pelo menos 10 caracteres' }),
    __metadata("design:type", String)
], CreateDadosCestaBasicaDto.prototype, "justificativa_quantidade", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Observações especiais sobre o caso',
        example: 'Família acompanhada pelo PAIF devido a situação de vulnerabilidade.',
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CreateDadosCestaBasicaDto.prototype, "observacoes_especiais", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Nome do técnico responsável pelo acompanhamento',
        example: 'Maria Silva - Assistente Social',
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CreateDadosCestaBasicaDto.prototype, "tecnico_responsavel", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Unidade solicitante (obrigatória para encaminhamentos externos)',
        example: 'CRAS Regional III',
    }),
    (0, class_validator_1.ValidateIf)((o) => o.origem_atendimento === enums_1.OrigemAtendimentoEnum.ENCAMINHAMENTO_EXTERNO),
    (0, class_validator_1.IsNotEmpty)({
        message: 'Unidade solicitante é obrigatória para encaminhamentos externos',
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CreateDadosCestaBasicaDto.prototype, "unidade_solicitante", void 0);
/**
 * DTO para atualização de dados específicos do cidadão para Cesta Básica
 */
class UpdateDadosCestaBasicaDto {
    quantidade_cestas_solicitadas;
    periodo_concessao;
    origem_atendimento;
    numero_pessoas_familia;
    justificativa_quantidade;
    observacoes_especiais;
    tecnico_responsavel;
    unidade_solicitante;
}
exports.UpdateDadosCestaBasicaDto = UpdateDadosCestaBasicaDto;
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Quantidade de cestas básicas solicitadas',
        example: 2,
        minimum: 1,
        maximum: 12,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Quantidade de cestas deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Quantidade mínima é 1 cesta' }),
    (0, class_validator_1.Max)(12, { message: 'Quantidade máxima é 12 cestas' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            const num = parseInt(value, 10);
            return isNaN(num) ? value : num;
        }
        return value;
    }),
    __metadata("design:type", Number)
], UpdateDadosCestaBasicaDto.prototype, "quantidade_cestas_solicitadas", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Período de concessão do benefício',
        enum: enums_1.PeriodicidadeEnum,
        example: enums_1.PeriodicidadeEnum.MENSAL,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEnum)(enums_1.PeriodicidadeEnum, { message: 'Período de concessão inválido' }),
    __metadata("design:type", typeof (_c = typeof enums_1.PeriodicidadeEnum !== "undefined" && enums_1.PeriodicidadeEnum) === "function" ? _c : Object)
], UpdateDadosCestaBasicaDto.prototype, "periodo_concessao", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Origem do atendimento que gerou a solicitação',
        enum: enums_1.OrigemAtendimentoEnum,
        example: enums_1.OrigemAtendimentoEnum.CRAS,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEnum)(enums_1.OrigemAtendimentoEnum, { message: 'Origem do atendimento inválida' }),
    __metadata("design:type", typeof (_d = typeof enums_1.OrigemAtendimentoEnum !== "undefined" && enums_1.OrigemAtendimentoEnum) === "function" ? _d : Object)
], UpdateDadosCestaBasicaDto.prototype, "origem_atendimento", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Número de pessoas na família',
        example: 4,
        minimum: 1,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Número de pessoas na família deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Número mínimo de pessoas na família é 1' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            const num = parseInt(value, 10);
            return isNaN(num) ? value : num;
        }
        return value;
    }),
    __metadata("design:type", Number)
], UpdateDadosCestaBasicaDto.prototype, "numero_pessoas_familia", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Justificativa para a quantidade solicitada',
        example: 'Justificativa atualizada após reavaliação.',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.MinLength)(10, { message: 'Justificativa deve ter pelo menos 10 caracteres' }),
    __metadata("design:type", String)
], UpdateDadosCestaBasicaDto.prototype, "justificativa_quantidade", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Observações especiais sobre o caso',
        example: 'Observações atualizadas.',
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], UpdateDadosCestaBasicaDto.prototype, "observacoes_especiais", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Nome do técnico responsável pelo acompanhamento',
        example: 'João Santos - Assistente Social',
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], UpdateDadosCestaBasicaDto.prototype, "tecnico_responsavel", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Unidade solicitante',
        example: 'CRAS Regional IV',
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], UpdateDadosCestaBasicaDto.prototype, "unidade_solicitante", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,