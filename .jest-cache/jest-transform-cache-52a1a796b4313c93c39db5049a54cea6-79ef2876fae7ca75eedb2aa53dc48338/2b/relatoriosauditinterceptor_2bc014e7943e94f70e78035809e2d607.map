{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\interceptors\\relatorios-audit.interceptor.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\interceptors\\relatorios-audit.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RELATORIOS_CONFIG } from '../config';\n\n/**\n * Interceptor para auditoria de operações do módulo de relatórios\n *\n * Este interceptor registra informações relevantes para auditoria sobre\n * as requisições de relatórios, incluindo tipo de relatório, formato,\n * parâmetros, usuário solicitante e permissões verificadas.\n *\n * Essas informações são importantes para compliance com LGPD, já que\n * os relatórios contêm dados potencialmente sensíveis de cidadãos.\n */\n@Injectable()\nexport class RelatoriosAuditInterceptor implements NestInterceptor {\n  /**\n   * Intercepta a requisição e registra informações de auditoria\n   *\n   * @param context Contexto de execução da requisição\n   * @param next Handler para continuar o processamento da requisição\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest();\n    const { method, path, params, query, body, user } = request;\n    const startTime = Date.now();\n\n    // Se não há serviço de auditoria disponível, apenas continua a execução\n    if (!global.auditoriaService) {\n      return next.handle();\n    }\n\n    // Identifica o tipo de relatório sendo solicitado\n    const reportType = this.extractReportType(path);\n\n    // Log de início de operação\n    global.auditoriaService.registrarLog({\n      categoria: RELATORIOS_CONFIG.AUDIT_CATEGORIES.REPORT_GENERATION,\n      operacao: `RELATORIO_${reportType}_INIT`,\n      detalhes: {\n        metodo: method,\n        caminho: path,\n        tipo: reportType,\n        formato: query.formato || body.formato,\n        parametros: {\n          ...params,\n          ...query,\n          ...body,\n          usuario: user\n            ? { id: user.id, nome: user.nome, cargo: user.cargo }\n            : null,\n        },\n      },\n      usuario: user ? user.id : null,\n      origem: request.ip,\n    });\n\n    // Continua o processamento e registra a conclusão\n    return next.handle().pipe(\n      tap({\n        next: (data) => {\n          // Calcula o tempo de processamento\n          const processingTime = Date.now() - startTime;\n\n          // Log de conclusão bem-sucedida\n          global.auditoriaService.registrarLog({\n            categoria: RELATORIOS_CONFIG.AUDIT_CATEGORIES.REPORT_GENERATION,\n            operacao: `RELATORIO_${reportType}_SUCCESS`,\n            detalhes: {\n              metodo: method,\n              caminho: path,\n              tipo: reportType,\n              formato: query.formato || body.formato,\n              tempoProcessamento: processingTime,\n              tamanhoArquivo: data?.tamanhoBytes || 'N/A',\n            },\n            usuario: user ? user.id : null,\n            origem: request.ip,\n          });\n        },\n        error: (error) => {\n          // Calcula o tempo de processamento\n          const processingTime = Date.now() - startTime;\n\n          // Log de erro\n          global.auditoriaService.registrarLog({\n            categoria: RELATORIOS_CONFIG.AUDIT_CATEGORIES.REPORT_GENERATION,\n            operacao: `RELATORIO_${reportType}_ERROR`,\n            detalhes: {\n              metodo: method,\n              caminho: path,\n              tipo: reportType,\n              formato: query.formato || body.formato,\n              tempoProcessamento: processingTime,\n              erro: {\n                mensagem: error.message,\n                codigo: error.status || 500,\n                stack:\n                  process.env.NODE_ENV !== 'production'\n                    ? error.stack\n                    : undefined,\n              },\n            },\n            usuario: user ? user.id : null,\n            origem: request.ip,\n          });\n        },\n      }),\n    );\n  }\n\n  /**\n   * Extrai o tipo de relatório a partir do caminho da requisição\n   *\n   * @param path Caminho da requisição\n   * @returns Tipo do relatório (BENEFICIOS, SOLICITACOES, ATENDIMENTOS, etc)\n   */\n  private extractReportType(path: string): string {\n    // Extrai o tipo de relatório do caminho\n    if (path.includes('beneficios')) {\n      return 'BENEFICIOS';\n    }\n    if (path.includes('solicitacoes')) {\n      return 'SOLICITACOES';\n    }\n    if (path.includes('atendimentos')) {\n      return 'ATENDIMENTOS';\n    }\n    return 'GENERICO';\n  }\n}\n"],"version":3}