eff9c761c1f3b883ee8fcfef52d7fc7f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelefoneValidator = exports.CEPValidator = exports.NISValidator = exports.CPFValidator = void 0;
exports.IsCPF = IsCPF;
exports.IsNIS = IsNIS;
exports.IsCEP = IsCEP;
exports.IsTelefone = IsTelefone;
const class_validator_1 = require("class-validator");
/**
 * Validador de CPF
 *
 * Verifica se o CPF informado é válido, incluindo cálculo dos dígitos verificadores
 */
let CPFValidator = class CPFValidator {
    validate(cpf, args) {
        if (!cpf) {
            return false;
        }
        // Remove caracteres não numéricos
        cpf = cpf.replace(/[^\d]/g, '');
        // Verifica se tem 11 dígitos
        if (cpf.length !== 11) {
            return false;
        }
        // Verifica se todos os dígitos são iguais (CPF inválido, mas passa na verificação de dígitos)
        if (/^(\d)\1{10}$/.test(cpf)) {
            return false;
        }
        // Cálculo do primeiro dígito verificador
        let soma = 0;
        for (let i = 0; i < 9; i++) {
            soma += parseInt(cpf.charAt(i)) * (10 - i);
        }
        let resto = 11 - (soma % 11);
        const dv1 = resto > 9 ? 0 : resto;
        // Cálculo do segundo dígito verificador
        soma = 0;
        for (let i = 0; i < 10; i++) {
            soma += parseInt(cpf.charAt(i)) * (11 - i);
        }
        resto = 11 - (soma % 11);
        const dv2 = resto > 9 ? 0 : resto;
        // Verifica se os dígitos verificadores estão corretos
        return dv1 === parseInt(cpf.charAt(9)) && dv2 === parseInt(cpf.charAt(10));
    }
    defaultMessage(args) {
        return 'CPF inválido';
    }
};
exports.CPFValidator = CPFValidator;
exports.CPFValidator = CPFValidator = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'cpf', async: false })
], CPFValidator);
/**
 * Validador de NIS (PIS/PASEP/NIT)
 *
 * Verifica se o NIS informado é válido, incluindo cálculo do dígito verificador
 */
let NISValidator = class NISValidator {
    validate(nis, args) {
        if (!nis) {
            return false;
        }
        // Remove caracteres não numéricos
        nis = nis.replace(/[^\d]/g, '');
        // Verifica se tem 11 dígitos
        if (nis.length !== 11) {
            return false;
        }
        // Verifica se todos os dígitos são iguais (NIS inválido, mas passa na verificação de dígitos)
        if (/^(\d)\1{10}$/.test(nis)) {
            return false;
        }
        // Pesos para cálculo do dígito verificador
        const pesos = [3, 2, 9, 8, 7, 6, 5, 4, 3, 2];
        // Cálculo do dígito verificador
        let soma = 0;
        for (let i = 0; i < 10; i++) {
            soma += parseInt(nis.charAt(i)) * pesos[i];
        }
        const resto = soma % 11;
        let dv = 11 - resto;
        if (dv === 10 || dv === 11) {
            dv = 0;
        }
        // Verifica se o dígito verificador está correto
        return dv === parseInt(nis.charAt(10));
    }
    defaultMessage(args) {
        return 'NIS (PIS/PASEP/NIT) inválido';
    }
};
exports.NISValidator = NISValidator;
exports.NISValidator = NISValidator = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'nis', async: false })
], NISValidator);
/**
 * Validador de CEP
 *
 * Verifica se o CEP está no formato correto (apenas validação de formato)
 */
let CEPValidator = class CEPValidator {
    validate(cep, args) {
        if (!cep) {
            return false;
        }
        // Remove caracteres não numéricos
        cep = cep.replace(/[^\d]/g, '');
        // Verifica se tem 8 dígitos
        return cep.length === 8;
    }
    defaultMessage(args) {
        return 'CEP inválido, deve conter 8 dígitos';
    }
};
exports.CEPValidator = CEPValidator;
exports.CEPValidator = CEPValidator = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'cep', async: false })
], CEPValidator);
/**
 * Validador de telefone brasileiro
 *
 * Verifica se o telefone está em um formato válido para Brasil
 */
let TelefoneValidator = class TelefoneValidator {
    validate(telefone, args) {
        if (!telefone) {
            return false;
        }
        // Remove caracteres não numéricos
        telefone = telefone.replace(/[^\d]/g, '');
        // Verifica se tem entre 10 e 11 dígitos (com DDD)
        return telefone.length >= 10 && telefone.length <= 11;
    }
    defaultMessage(args) {
        return 'Telefone inválido, deve conter DDD + número (10 ou 11 dígitos no total)';
    }
};
exports.TelefoneValidator = TelefoneValidator;
exports.TelefoneValidator = TelefoneValidator = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'telefone', async: false })
], TelefoneValidator);
/**
 * Decorator para validação de CPF
 */
function IsCPF(validationOptions) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            name: 'isCPF',
            target: object.constructor,
            propertyName: propertyName,
            options: validationOptions,
            constraints: [],
            validator: CPFValidator,
        });
    };
}
/**
 * Decorator para validação de NIS
 */
function IsNIS(validationOptions) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            name: 'isNIS',
            target: object.constructor,
            propertyName: propertyName,
            options: validationOptions,
            constraints: [],
            validator: NISValidator,
        });
    };
}
/**
 * Decorator para validação de CEP
 */
function IsCEP(validationOptions) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            name: 'isCEP',
            target: object.constructor,
            propertyName: propertyName,
            options: validationOptions,
            constraints: [],
            validator: CEPValidator,
        });
    };
}
/**
 * Decorator para validação de telefone brasileiro
 */
function IsTelefone(validationOptions) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            name: 'isTelefone',
            target: object.constructor,
            propertyName: propertyName,
            options: validationOptions,
            constraints: [],
            validator: TelefoneValidator,
        });
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,