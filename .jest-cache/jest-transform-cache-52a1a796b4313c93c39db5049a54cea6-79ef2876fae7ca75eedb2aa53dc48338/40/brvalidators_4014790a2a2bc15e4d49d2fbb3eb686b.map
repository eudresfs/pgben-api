{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\br-validators.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\br-validators.ts"],"sourcesContent":["import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n  ValidationOptions,\n  registerDecorator,\n} from 'class-validator';\n\n/**\n * Validador de CPF\n *\n * Verifica se o CPF informado é válido, incluindo cálculo dos dígitos verificadores\n */\n@ValidatorConstraint({ name: 'cpf', async: false })\nexport class CPFValidator implements ValidatorConstraintInterface {\n  validate(cpf: string, args: ValidationArguments) {\n    if (!cpf) {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    cpf = cpf.replace(/[^\\d]/g, '');\n\n    // Verifica se tem 11 dígitos\n    if (cpf.length !== 11) {\n      return false;\n    }\n\n    // Verifica se todos os dígitos são iguais (CPF inválido, mas passa na verificação de dígitos)\n    if (/^(\\d)\\1{10}$/.test(cpf)) {\n      return false;\n    }\n\n    // Cálculo do primeiro dígito verificador\n    let soma = 0;\n    for (let i = 0; i < 9; i++) {\n      soma += parseInt(cpf.charAt(i)) * (10 - i);\n    }\n    let resto = 11 - (soma % 11);\n    const dv1 = resto > 9 ? 0 : resto;\n\n    // Cálculo do segundo dígito verificador\n    soma = 0;\n    for (let i = 0; i < 10; i++) {\n      soma += parseInt(cpf.charAt(i)) * (11 - i);\n    }\n    resto = 11 - (soma % 11);\n    const dv2 = resto > 9 ? 0 : resto;\n\n    // Verifica se os dígitos verificadores estão corretos\n    return dv1 === parseInt(cpf.charAt(9)) && dv2 === parseInt(cpf.charAt(10));\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'CPF inválido';\n  }\n}\n\n/**\n * Validador de NIS (PIS/PASEP/NIT)\n *\n * Verifica se o NIS informado é válido, incluindo cálculo do dígito verificador\n */\n@ValidatorConstraint({ name: 'nis', async: false })\nexport class NISValidator implements ValidatorConstraintInterface {\n  validate(nis: string, args: ValidationArguments) {\n    if (!nis) {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    nis = nis.replace(/[^\\d]/g, '');\n\n    // Verifica se tem 11 dígitos\n    if (nis.length !== 11) {\n      return false;\n    }\n\n    // Verifica se todos os dígitos são iguais (NIS inválido, mas passa na verificação de dígitos)\n    if (/^(\\d)\\1{10}$/.test(nis)) {\n      return false;\n    }\n\n    // Pesos para cálculo do dígito verificador\n    const pesos = [3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n\n    // Cálculo do dígito verificador\n    let soma = 0;\n    for (let i = 0; i < 10; i++) {\n      soma += parseInt(nis.charAt(i)) * pesos[i];\n    }\n    const resto = soma % 11;\n    let dv = 11 - resto;\n    if (dv === 10 || dv === 11) {\n      dv = 0;\n    }\n\n    // Verifica se o dígito verificador está correto\n    return dv === parseInt(nis.charAt(10));\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'NIS (PIS/PASEP/NIT) inválido';\n  }\n}\n\n/**\n * Validador de CEP\n *\n * Verifica se o CEP está no formato correto (apenas validação de formato)\n */\n@ValidatorConstraint({ name: 'cep', async: false })\nexport class CEPValidator implements ValidatorConstraintInterface {\n  validate(cep: string, args: ValidationArguments) {\n    if (!cep) {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    cep = cep.replace(/[^\\d]/g, '');\n\n    // Verifica se tem 8 dígitos\n    return cep.length === 8;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'CEP inválido, deve conter 8 dígitos';\n  }\n}\n\n/**\n * Validador de telefone brasileiro\n *\n * Verifica se o telefone está em um formato válido para Brasil\n */\n@ValidatorConstraint({ name: 'telefone', async: false })\nexport class TelefoneValidator implements ValidatorConstraintInterface {\n  validate(telefone: string, args: ValidationArguments) {\n    if (!telefone) {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    telefone = telefone.replace(/[^\\d]/g, '');\n\n    // Verifica se tem entre 10 e 11 dígitos (com DDD)\n    return telefone.length >= 10 && telefone.length <= 11;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'Telefone inválido, deve conter DDD + número (10 ou 11 dígitos no total)';\n  }\n}\n\n/**\n * Decorator para validação de CPF\n */\nexport function IsCPF(validationOptions?: ValidationOptions) {\n  return function (object: object, propertyName: string) {\n    registerDecorator({\n      name: 'isCPF',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: CPFValidator,\n    });\n  };\n}\n\n/**\n * Decorator para validação de NIS\n */\nexport function IsNIS(validationOptions?: ValidationOptions) {\n  return function (object: object, propertyName: string) {\n    registerDecorator({\n      name: 'isNIS',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: NISValidator,\n    });\n  };\n}\n\n/**\n * Decorator para validação de CEP\n */\nexport function IsCEP(validationOptions?: ValidationOptions) {\n  return function (object: object, propertyName: string) {\n    registerDecorator({\n      name: 'isCEP',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: CEPValidator,\n    });\n  };\n}\n\n/**\n * Decorator para validação de telefone brasileiro\n */\nexport function IsTelefone(validationOptions?: ValidationOptions) {\n  return function (object: object, propertyName: string) {\n    registerDecorator({\n      name: 'isTelefone',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: TelefoneValidator,\n    });\n  };\n}\n"],"version":3}