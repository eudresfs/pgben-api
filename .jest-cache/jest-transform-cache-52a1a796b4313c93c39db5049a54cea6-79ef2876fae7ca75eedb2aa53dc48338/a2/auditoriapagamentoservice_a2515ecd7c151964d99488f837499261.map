{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\auditoria-pagamento.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\auditoria-pagamento.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\n\n/**\n * Serviço para registro de auditoria de operações do módulo de pagamento\n * \n * Este serviço implementa a integração com o módulo de auditoria do sistema,\n * registrando todas as operações sensíveis relacionadas a pagamentos,\n * comprovantes e confirmações.\n * \n * @author Equipe PGBen\n */\n@Injectable()\nexport class AuditoriaPagamentoService {\n  // Em uma implementação real, este serviço injetaria o AuditoriaService do módulo de auditoria\n  // constructor(private readonly auditoriaService: AuditoriaService) {}\n\n  /**\n   * Registra uma operação de criação de pagamento\n   * \n   * @param pagamentoId ID do pagamento criado\n   * @param solicitacaoId ID da solicitação relacionada\n   * @param usuarioId ID do usuário que realizou a operação\n   * @param dados Dados do pagamento\n   */\n  async registrarCriacaoPagamento(\n    pagamentoId: string,\n    solicitacaoId: string,\n    usuarioId: string,\n    dados: any\n  ): Promise<void> {\n    // Mascarar dados sensíveis\n    const dadosMascarados = this.mascararDadosSensiveisPagamento(dados);\n\n    // Em uma implementação real, chamaria o serviço de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'CRIACAO_PAGAMENTO',\n    //   entidadeId: pagamentoId,\n    //   tipoEntidade: 'PAGAMENTO',\n    //   entidadeRelacionadaId: solicitacaoId,\n    //   tipoEntidadeRelacionada: 'SOLICITACAO',\n    //   usuarioId,\n    //   dadosAnteriores: null,\n    //   dadosNovos: dadosMascarados,\n    //   ip: '0.0.0.0', // seria obtido do contexto da requisição\n    //   userAgent: 'Sistema', // seria obtido do contexto da requisição\n    //   timestamp: new Date()\n    // });\n\n    console.log(`[AUDITORIA] Criação de pagamento ${pagamentoId} registrada por ${usuarioId}`);\n  }\n\n  /**\n   * Registra uma operação de atualização de status de pagamento\n   * \n   * @param pagamentoId ID do pagamento\n   * @param statusAnterior Status anterior\n   * @param statusNovo Novo status\n   * @param usuarioId ID do usuário que realizou a operação\n   * @param observacoes Observações sobre a mudança (opcional)\n   */\n  async registrarMudancaStatus(\n    pagamentoId: string,\n    statusAnterior: StatusPagamentoEnum,\n    statusNovo: StatusPagamentoEnum,\n    usuarioId: string,\n    observacoes?: string\n  ): Promise<void> {\n    // Em uma implementação real, chamaria o serviço de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'MUDANCA_STATUS_PAGAMENTO',\n    //   entidadeId: pagamentoId,\n    //   tipoEntidade: 'PAGAMENTO',\n    //   usuarioId,\n    //   dadosAnteriores: { status: statusAnterior },\n    //   dadosNovos: { \n    //     status: statusNovo,\n    //     observacoes\n    //   },\n    //   ip: '0.0.0.0', // seria obtido do contexto da requisição\n    //   userAgent: 'Sistema', // seria obtido do contexto da requisição\n    //   timestamp: new Date()\n    // });\n\n    console.log(`[AUDITORIA] Mudança de status do pagamento ${pagamentoId} de ${statusAnterior} para ${statusNovo} registrada por ${usuarioId}`);\n  }\n\n  /**\n   * Registra uma operação de upload de comprovante\n   * \n   * @param comprovanteId ID do comprovante\n   * @param pagamentoId ID do pagamento relacionado\n   * @param usuarioId ID do usuário que realizou a operação\n   * @param dadosComprovante Dados do comprovante\n   */\n  async registrarUploadComprovante(\n    comprovanteId: string,\n    pagamentoId: string,\n    usuarioId: string,\n    dadosComprovante: any\n  ): Promise<void> {\n    // Em uma implementação real, chamaria o serviço de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'UPLOAD_COMPROVANTE',\n    //   entidadeId: comprovanteId,\n    //   tipoEntidade: 'COMPROVANTE_PAGAMENTO',\n    //   entidadeRelacionadaId: pagamentoId,\n    //   tipoEntidadeRelacionada: 'PAGAMENTO',\n    //   usuarioId,\n    //   dadosAnteriores: null,\n    //   dadosNovos: {\n    //     tipoDocumento: dadosComprovante.tipoDocumento,\n    //     nomeArquivo: dadosComprovante.nomeArquivo,\n    //     tamanho: dadosComprovante.tamanho,\n    //     mimeType: dadosComprovante.mimeType\n    //   },\n    //   ip: '0.0.0.0', // seria obtido do contexto da requisição\n    //   userAgent: 'Sistema', // seria obtido do contexto da requisição\n    //   timestamp: new Date()\n    // });\n\n    console.log(`[AUDITORIA] Upload de comprovante ${comprovanteId} para o pagamento ${pagamentoId} registrado por ${usuarioId}`);\n  }\n\n  /**\n   * Registra uma operação de remoção de comprovante\n   * \n   * @param comprovanteId ID do comprovante\n   * @param pagamentoId ID do pagamento relacionado\n   * @param usuarioId ID do usuário que realizou a operação\n   * @param dadosComprovante Dados do comprovante removido\n   */\n  async registrarRemocaoComprovante(\n    comprovanteId: string,\n    pagamentoId: string,\n    usuarioId: string,\n    dadosComprovante: any\n  ): Promise<void> {\n    // Em uma implementação real, chamaria o serviço de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'REMOCAO_COMPROVANTE',\n    //   entidadeId: comprovanteId,\n    //   tipoEntidade: 'COMPROVANTE_PAGAMENTO',\n    //   entidadeRelacionadaId: pagamentoId,\n    //   tipoEntidadeRelacionada: 'PAGAMENTO',\n    //   usuarioId,\n    //   dadosAnteriores: {\n    //     tipoDocumento: dadosComprovante.tipoDocumento,\n    //     nomeArquivo: dadosComprovante.nomeArquivo,\n    //     tamanho: dadosComprovante.tamanho,\n    //     mimeType: dadosComprovante.mimeType\n    //   },\n    //   dadosNovos: null,\n    //   ip: '0.0.0.0', // seria obtido do contexto da requisição\n    //   userAgent: 'Sistema', // seria obtido do contexto da requisição\n    //   timestamp: new Date()\n    // });\n\n    console.log(`[AUDITORIA] Remoção de comprovante ${comprovanteId} do pagamento ${pagamentoId} registrada por ${usuarioId}`);\n  }\n\n  /**\n   * Registra uma operação de confirmação de recebimento\n   * \n   * @param confirmacaoId ID da confirmação\n   * @param pagamentoId ID do pagamento relacionado\n   * @param usuarioId ID do usuário que realizou a operação\n   * @param dadosConfirmacao Dados da confirmação\n   */\n  async registrarConfirmacaoRecebimento(\n    confirmacaoId: string,\n    pagamentoId: string,\n    usuarioId: string,\n    dadosConfirmacao: any\n  ): Promise<void> {\n    // Em uma implementação real, chamaria o serviço de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'CONFIRMACAO_RECEBIMENTO',\n    //   entidadeId: confirmacaoId,\n    //   tipoEntidade: 'CONFIRMACAO_RECEBIMENTO',\n    //   entidadeRelacionadaId: pagamentoId,\n    //   tipoEntidadeRelacionada: 'PAGAMENTO',\n    //   usuarioId,\n    //   dadosAnteriores: null,\n    //   dadosNovos: {\n    //     dataConfirmacao: dadosConfirmacao.dataConfirmacao,\n    //     metodoConfirmacao: dadosConfirmacao.metodoConfirmacao,\n    //     destinatarioId: dadosConfirmacao.destinatarioId,\n    //     observacoes: dadosConfirmacao.observacoes\n    //   },\n    //   ip: '0.0.0.0', // seria obtido do contexto da requisição\n    //   userAgent: 'Sistema', // seria obtido do contexto da requisição\n    //   timestamp: new Date()\n    // });\n\n    console.log(`[AUDITORIA] Confirmação de recebimento ${confirmacaoId} para o pagamento ${pagamentoId} registrada por ${usuarioId}`);\n  }\n\n  /**\n   * Registra um acesso a dados sensíveis\n   * \n   * @param entidadeId ID da entidade acessada\n   * @param tipoEntidade Tipo da entidade\n   * @param usuarioId ID do usuário que realizou o acesso\n   * @param dadosSensiveisAcessados Lista de campos sensíveis acessados\n   */\n  async registrarAcessoDadosSensiveis(\n    entidadeId: string,\n    tipoEntidade: string,\n    usuarioId: string,\n    dadosSensiveisAcessados: string[]\n  ): Promise<void> {\n    // Em uma implementação real, chamaria o serviço de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'ACESSO_DADOS_SENSIVEIS',\n    //   entidadeId,\n    //   tipoEntidade,\n    //   usuarioId,\n    //   dadosAnteriores: null,\n    //   dadosNovos: {\n    //     camposAcessados: dadosSensiveisAcessados,\n    //     justificativa: 'Acesso operacional'\n    //   },\n    //   ip: '0.0.0.0', // seria obtido do contexto da requisição\n    //   userAgent: 'Sistema', // seria obtido do contexto da requisição\n    //   timestamp: new Date()\n    // });\n\n    console.log(`[AUDITORIA] Acesso a dados sensíveis de ${tipoEntidade} ${entidadeId} registrado por ${usuarioId}`);\n  }\n\n  /**\n   * Mascara dados sensíveis de um pagamento para registro em logs\n   * \n   * @param dados Dados originais do pagamento\n   * @returns Dados com informações sensíveis mascaradas\n   */\n  private mascararDadosSensiveisPagamento(dados: any): any {\n    // Clone profundo dos dados\n    const dadosMascarados = JSON.parse(JSON.stringify(dados));\n\n    // Mascarar dados bancários se existirem\n    if (dadosMascarados.dadosBancarios) {\n      if (dadosMascarados.dadosBancarios.agencia) {\n        dadosMascarados.dadosBancarios.agencia = this.mascaraAgencia(dadosMascarados.dadosBancarios.agencia);\n      }\n      \n      if (dadosMascarados.dadosBancarios.conta) {\n        dadosMascarados.dadosBancarios.conta = this.mascaraConta(dadosMascarados.dadosBancarios.conta);\n      }\n      \n      if (dadosMascarados.dadosBancarios.pixChave) {\n        dadosMascarados.dadosBancarios.pixChave = this.mascaraPixChave(\n          dadosMascarados.dadosBancarios.pixChave,\n          dadosMascarados.dadosBancarios.pixTipo\n        );\n      }\n    }\n\n    return dadosMascarados;\n  }\n\n  /**\n   * Mascara uma agência bancária\n   * \n   * @param agencia Número da agência\n   * @returns Agência mascarada\n   */\n  private mascaraAgencia(agencia: string): string {\n    if (!agencia) {return '';}\n    \n    const agenciaLimpa = agencia.replace(/\\D/g, '');\n    \n    if (agenciaLimpa.length <= 2) {\n      return '****';\n    }\n    \n    // Manter o primeiro e o último dígito\n    const inicio = agenciaLimpa.slice(0, 1);\n    const fim = agenciaLimpa.slice(-1);\n    const meio = '*'.repeat(agenciaLimpa.length - 2);\n    \n    return `${inicio}${meio}${fim}`;\n  }\n\n  /**\n   * Mascara uma conta bancária\n   * \n   * @param conta Número da conta\n   * @returns Conta mascarada\n   */\n  private mascaraConta(conta: string): string {\n    if (!conta) {return '';}\n    \n    const contaLimpa = conta.replace(/[^\\dXx]/g, '');\n    \n    if (contaLimpa.length <= 4) {\n      return '****';\n    }\n    \n    // Manter os dois primeiros e os dois últimos dígitos\n    const inicio = contaLimpa.slice(0, 2);\n    const fim = contaLimpa.slice(-2);\n    const meio = '*'.repeat(contaLimpa.length - 4);\n    \n    return `${inicio}${meio}${fim}`;\n  }\n\n  /**\n   * Mascara uma chave PIX\n   * \n   * @param chave Valor da chave PIX\n   * @param tipo Tipo da chave (CPF, email, telefone, aleatoria)\n   * @returns Chave PIX mascarada\n   */\n  private mascaraPixChave(chave: string, tipo: string): string {\n    if (!chave) {return '';}\n    \n    switch (tipo?.toLowerCase()) {\n      case 'cpf':\n        // Formato: ***.123.456-**\n        const cpfLimpo = chave.replace(/\\D/g, '');\n        if (cpfLimpo.length !== 11) {return '***.***.***-**';}\n        \n        return `***.${cpfLimpo.substr(3, 3)}.${cpfLimpo.substr(6, 3)}-**`;\n        \n      case 'email':\n        // Formato: a***@d***.com\n        const partes = chave.split('@');\n        if (partes.length !== 2) {return chave.substring(0, 1) + '***@***';}\n        \n        const usuario = partes[0];\n        const dominio = partes[1];\n        \n        const usuarioMascarado = usuario.substring(0, 1) + '*'.repeat(Math.max(1, usuario.length - 1));\n        \n        const dominioPartes = dominio.split('.');\n        const dominioNome = dominioPartes[0];\n        const dominioExtensao = dominioPartes.slice(1).join('.');\n        \n        const dominioMascarado = dominioNome.substring(0, 1) + '*'.repeat(Math.max(1, dominioNome.length - 1));\n        \n        return `${usuarioMascarado}@${dominioMascarado}.${dominioExtensao}`;\n        \n      case 'telefone':\n        // Formato: (00) *****-6789\n        const telLimpo = chave.replace(/\\D/g, '');\n        if (telLimpo.length < 8) {return '(**) *****-****';}\n        \n        return `(**) *****-${telLimpo.slice(-4)}`;\n        \n      case 'aleatoria':\n        // Formato: ********-****-****-****-************\n        if (chave.length < 8) {return '********';}\n        \n        return chave.substring(0, 8) + '****' + '*'.repeat(chave.length - 12);\n        \n      default:\n        // Mascaramento genérico\n        if (chave.length <= 4) {return '****';}\n        \n        return chave.substring(0, 2) + '*'.repeat(chave.length - 4) + chave.slice(-2);\n    }\n  }\n}\n"],"version":3}