{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\validators\\dados-bancarios-validator.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\validators\\dados-bancarios-validator.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { DadosBancariosValidator } from '../../validators/dados-bancarios-validator';\n\n/**\n * Testes unitários para o validador de dados bancários\n *\n * Verifica o funcionamento correto das validações para informações bancárias,\n * incluindo códigos de banco, agências, contas e dígitos verificadores.\n *\n * @author Equipe PGBen\n */\ndescribe('DadosBancariosValidator', () => {\n  let validator: DadosBancariosValidator;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [DadosBancariosValidator],\n    }).compile();\n\n    validator = module.get<DadosBancariosValidator>(DadosBancariosValidator);\n  });\n\n  describe('validarCodigoBanco', () => {\n    it('deve validar códigos de bancos conhecidos', () => {\n      expect(validator.validarCodigoBanco('001')).toBe(true); // Banco do Brasil\n      expect(validator.validarCodigoBanco('104')).toBe(true); // Caixa\n      expect(validator.validarCodigoBanco('341')).toBe(true); // Itaú\n      expect(validator.validarCodigoBanco('033')).toBe(true); // Santander\n      expect(validator.validarCodigoBanco('237')).toBe(true); // Bradesco\n    });\n\n    it('deve rejeitar códigos de bancos inválidos', () => {\n      expect(validator.validarCodigoBanco('000')).toBe(false);\n      expect(validator.validarCodigoBanco('999')).toBe(false);\n      expect(validator.validarCodigoBanco('ABC')).toBe(false);\n    });\n\n    it('deve rejeitar valores vazios ou nulos', () => {\n      expect(validator.validarCodigoBanco('')).toBe(false);\n      expect(validator.validarCodigoBanco(null)).toBe(false);\n      expect(validator.validarCodigoBanco(undefined)).toBe(false);\n    });\n\n    it('deve rejeitar códigos com formato incorreto', () => {\n      expect(validator.validarCodigoBanco('01')).toBe(false); // muito curto\n      expect(validator.validarCodigoBanco('0001')).toBe(false); // muito longo\n      expect(validator.validarCodigoBanco('001a')).toBe(false); // caracteres não numéricos\n    });\n  });\n\n  describe('obterNomeBanco', () => {\n    it('deve retornar o nome correto para códigos de bancos conhecidos', () => {\n      expect(validator.obterNomeBanco('001')).toBe('Banco do Brasil');\n      expect(validator.obterNomeBanco('104')).toBe('Caixa Econômica Federal');\n      expect(validator.obterNomeBanco('341')).toBe('Itaú');\n      expect(validator.obterNomeBanco('033')).toBe('Santander');\n      expect(validator.obterNomeBanco('237')).toBe('Bradesco');\n    });\n\n    it('deve retornar \"Banco não cadastrado\" para códigos desconhecidos', () => {\n      expect(validator.obterNomeBanco('999')).toBe('Banco não cadastrado');\n      expect(validator.obterNomeBanco('')).toBe('Banco não cadastrado');\n      expect(validator.obterNomeBanco(null)).toBe('Banco não cadastrado');\n      expect(validator.obterNomeBanco(undefined)).toBe('Banco não cadastrado');\n    });\n  });\n\n  describe('validarAgencia', () => {\n    it('deve validar agências com formato correto', () => {\n      expect(validator.validarAgencia('1234')).toBe(true);\n      expect(validator.validarAgencia('0001')).toBe(true);\n      expect(validator.validarAgencia('12345')).toBe(true); // alguns bancos usam 5 dígitos\n    });\n\n    it('deve validar agências com formatação', () => {\n      expect(validator.validarAgencia('1234-5')).toBe(true);\n      expect(validator.validarAgencia('1.234')).toBe(true);\n    });\n\n    it('deve rejeitar agências com formato incorreto', () => {\n      expect(validator.validarAgencia('1')).toBe(false); // muito curto\n      expect(validator.validarAgencia('123456')).toBe(false); // muito longo\n      expect(validator.validarAgencia('123A')).toBe(false); // caracteres não numéricos\n    });\n\n    it('deve rejeitar valores vazios ou nulos', () => {\n      expect(validator.validarAgencia('')).toBe(false);\n      expect(validator.validarAgencia(null)).toBe(false);\n      expect(validator.validarAgencia(undefined)).toBe(false);\n    });\n\n    it('deve aplicar validações específicas por banco', () => {\n      // Banco do Brasil (4 ou 5 dígitos)\n      expect(validator.validarAgencia('1234', '001')).toBe(true);\n      expect(validator.validarAgencia('12345', '001')).toBe(true);\n\n      // Caixa (4 dígitos)\n      expect(validator.validarAgencia('1234', '104')).toBe(true);\n      expect(validator.validarAgencia('12345', '104')).toBe(false);\n\n      // Itaú (4 dígitos)\n      expect(validator.validarAgencia('1234', '341')).toBe(true);\n      expect(validator.validarAgencia('12345', '341')).toBe(false);\n    });\n  });\n\n  describe('validarConta', () => {\n    it('deve validar contas com formato correto', () => {\n      expect(validator.validarConta('12345-6')).toBe(true);\n      expect(validator.validarConta('123456')).toBe(true);\n      expect(validator.validarConta('00001-X')).toBe(true); // com dígito X\n    });\n\n    it('deve validar contas com formatação', () => {\n      expect(validator.validarConta('12345-6')).toBe(true);\n      expect(validator.validarConta('12.345-6')).toBe(true);\n    });\n\n    it('deve rejeitar contas com formato incorreto', () => {\n      expect(validator.validarConta('12')).toBe(false); // muito curto\n      expect(validator.validarConta('12345678901234')).toBe(false); // muito longo\n      expect(validator.validarConta('123A56')).toBe(false); // caracteres não numéricos (exceto X)\n    });\n\n    it('deve rejeitar valores vazios ou nulos', () => {\n      expect(validator.validarConta('')).toBe(false);\n      expect(validator.validarConta(null)).toBe(false);\n      expect(validator.validarConta(undefined)).toBe(false);\n    });\n\n    it('deve aplicar validações específicas por banco', () => {\n      // Banco do Brasil\n      expect(validator.validarConta('12345-6', '001')).toBe(true);\n      expect(validator.validarConta('123456X', '001')).toBe(true);\n\n      // Caixa\n      expect(validator.validarConta('123456-7', '104')).toBe(true);\n\n      // Itaú\n      expect(validator.validarConta('12345-6', '341')).toBe(true);\n      expect(validator.validarConta('1234-5', '341')).toBe(true);\n    });\n  });\n\n  describe('mascaraAgencia', () => {\n    it('deve mascarar corretamente agências', () => {\n      const mascarado = validator.mascaraAgencia('1234');\n      expect(mascarado).toBe('1**4');\n    });\n\n    it('deve retornar asteriscos para agências muito curtas', () => {\n      const mascarado = validator.mascaraAgencia('12');\n      expect(mascarado).toBe('****');\n    });\n\n    it('deve manter o primeiro e último dígito visíveis', () => {\n      const mascarado = validator.mascaraAgencia('12345');\n      expect(mascarado.charAt(0)).toBe('1');\n      expect(mascarado.charAt(mascarado.length - 1)).toBe('5');\n      expect(mascarado.substring(1, mascarado.length - 1)).not.toContain(\n        /[0-9]/,\n      );\n    });\n  });\n\n  describe('mascaraConta', () => {\n    it('deve mascarar corretamente contas', () => {\n      const mascarado = validator.mascaraConta('123456');\n      expect(mascarado).toBe('12**56');\n    });\n\n    it('deve retornar asteriscos para contas muito curtas', () => {\n      const mascarado = validator.mascaraConta('123');\n      expect(mascarado).toBe('****');\n    });\n\n    it('deve manter os dois primeiros e dois últimos dígitos visíveis', () => {\n      const mascarado = validator.mascaraConta('1234567890');\n      expect(mascarado.substring(0, 2)).toBe('12');\n      expect(mascarado.substring(mascarado.length - 2)).toBe('90');\n      expect(mascarado.substring(2, mascarado.length - 2)).not.toContain(\n        /[0-9]/,\n      );\n    });\n  });\n\n  describe('formatarAgencia', () => {\n    it('deve formatar corretamente agências', () => {\n      expect(validator.formatarAgencia('1234')).toBe('1234');\n      expect(validator.formatarAgencia('12-34')).toBe('1234');\n      expect(validator.formatarAgencia('12.34')).toBe('1234');\n    });\n  });\n\n  describe('formatarConta', () => {\n    it('deve formatar corretamente contas', () => {\n      expect(validator.formatarConta('12345X')).toBe('12345-X');\n      expect(validator.formatarConta('123456')).toBe('12345-6');\n      expect(validator.formatarConta('12345-6')).toBe('12345-6');\n    });\n  });\n});\n"],"version":3}