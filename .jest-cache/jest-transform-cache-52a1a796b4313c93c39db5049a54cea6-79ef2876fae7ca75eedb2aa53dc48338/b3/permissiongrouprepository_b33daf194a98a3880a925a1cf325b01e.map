{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-group.repository.ts","mappings":";;;;;;;;;;;;;AAAA,qCAAiD;AACjD,2CAA4C;AAC5C,oFAAyE;AAEzE;;;;;GAKG;AAEI,IAAM,yBAAyB,GAA/B,MAAM,yBAA0B,SAAQ,oBAA2B;IACpD;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,yCAAe,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QADvC,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,UAAU,CAAC,IAAY;QAC3B,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,IAA8B;QAC9C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,WAAW,CAAC,EAAU,EAAE,IAA8B;QAC1D,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,EAAU;QAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrC,OAAO,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1F,CAAC;CACF,CAAA;AA1DY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,yBAAyB,CA0DrC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-group.repository.ts"],"sourcesContent":["import { DataSource, Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { PermissionGroup } from '../../entities/permission-group.entity';\n\n/**\n * Repositório para a entidade PermissionGroup.\n * \n * Fornece métodos para manipulação de grupos de permissões no banco de dados,\n * incluindo busca por nome e operações de CRUD.\n */\n@Injectable()\nexport class PermissionGroupRepository extends Repository<PermissionGroup> {\n  constructor(private dataSource: DataSource) {\n    super(PermissionGroup, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca um grupo de permissões pelo nome.\n   * \n   * @param name Nome do grupo\n   * @returns O grupo encontrado ou null\n   */\n  async findByName(name: string): Promise<PermissionGroup | null> {\n    return this.findOne({ where: { name } });\n  }\n\n  /**\n   * Busca um grupo de permissões pelo ID.\n   * \n   * @param id ID do grupo\n   * @returns O grupo encontrado ou null\n   */\n  async findById(id: string): Promise<PermissionGroup | null> {\n    return this.findOneBy({ id });\n  }\n\n  /**\n   * Cria um novo grupo de permissões.\n   * \n   * @param data Dados do grupo a ser criado\n   * @returns O grupo criado\n   */\n  async createGroup(data: Partial<PermissionGroup>): Promise<PermissionGroup> {\n    const group = this.create(data);\n    return this.save(group);\n  }\n\n  /**\n   * Atualiza um grupo de permissões existente.\n   * \n   * @param id ID do grupo a ser atualizado\n   * @param data Dados atualizados do grupo\n   * @returns O grupo atualizado\n   */\n  async updateGroup(id: string, data: Partial<PermissionGroup>): Promise<PermissionGroup | null> {\n    await this.update(id, data);\n    return this.findOneBy({ id });\n  }\n\n  /**\n   * Remove um grupo de permissões.\n   * \n   * @param id ID do grupo a ser removido\n   * @returns true se o grupo foi removido, false caso contrário\n   */\n  async removeGroup(id: string): Promise<boolean> {\n    const result = await this.delete(id);\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n}\n"],"version":3}