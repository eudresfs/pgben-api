1b0d58c6b62e330abc584e18a6665bd6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGroupRepository = void 0;
const typeorm_1 = require("typeorm");
const common_1 = require("@nestjs/common");
const permission_group_entity_1 = require("../../entities/permission-group.entity");
/**
 * Repositório para a entidade PermissionGroup.
 *
 * Fornece métodos para manipulação de grupos de permissões no banco de dados,
 * incluindo busca por nome e operações de CRUD.
 */
let PermissionGroupRepository = class PermissionGroupRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(permission_group_entity_1.PermissionGroup, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca um grupo de permissões pelo nome.
     *
     * @param name Nome do grupo
     * @returns O grupo encontrado ou null
     */
    async findByName(name) {
        return this.findOne({ where: { name } });
    }
    /**
     * Busca um grupo de permissões pelo ID.
     *
     * @param id ID do grupo
     * @returns O grupo encontrado ou null
     */
    async findById(id) {
        return this.findOneBy({ id });
    }
    /**
     * Cria um novo grupo de permissões.
     *
     * @param data Dados do grupo a ser criado
     * @returns O grupo criado
     */
    async createGroup(data) {
        const group = this.create(data);
        return this.save(group);
    }
    /**
     * Atualiza um grupo de permissões existente.
     *
     * @param id ID do grupo a ser atualizado
     * @param data Dados atualizados do grupo
     * @returns O grupo atualizado
     */
    async updateGroup(id, data) {
        await this.update(id, data);
        return this.findOneBy({ id });
    }
    /**
     * Remove um grupo de permissões.
     *
     * @param id ID do grupo a ser removido
     * @returns true se o grupo foi removido, false caso contrário
     */
    async removeGroup(id) {
        const result = await this.delete(id);
        return result.affected !== null && result.affected !== undefined && result.affected > 0;
    }
};
exports.PermissionGroupRepository = PermissionGroupRepository;
exports.PermissionGroupRepository = PermissionGroupRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], PermissionGroupRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXHJlcG9zaXRvcmllc1xccGVybWlzc2lvbi1ncm91cC5yZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBaUQ7QUFDakQsMkNBQTRDO0FBQzVDLG9GQUF5RTtBQUV6RTs7Ozs7R0FLRztBQUVJLElBQU0seUJBQXlCLEdBQS9CLE1BQU0seUJBQTBCLFNBQVEsb0JBQTJCO0lBQ3BEO0lBQXBCLFlBQW9CLFVBQXNCO1FBQ3hDLEtBQUssQ0FBQyx5Q0FBZSxFQUFFLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFEdkMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUUxQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsVUFBVSxDQUFDLElBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBVTtRQUN2QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBOEI7UUFDOUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBVSxFQUFFLElBQThCO1FBQzFELE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQVU7UUFDMUIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDMUYsQ0FBQztDQUNGLENBQUE7QUExRFksOERBQXlCO29DQUF6Qix5QkFBeUI7SUFEckMsSUFBQSxtQkFBVSxHQUFFO3lEQUVxQixvQkFBVSxvQkFBVixvQkFBVTtHQUQvQix5QkFBeUIsQ0EwRHJDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxhdXRoXFxyZXBvc2l0b3JpZXNcXHBlcm1pc3Npb24tZ3JvdXAucmVwb3NpdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhU291cmNlLCBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgUGVybWlzc2lvbkdyb3VwIH0gZnJvbSAnLi4vLi4vZW50aXRpZXMvcGVybWlzc2lvbi1ncm91cC5lbnRpdHknO1xuXG4vKipcbiAqIFJlcG9zaXTDs3JpbyBwYXJhIGEgZW50aWRhZGUgUGVybWlzc2lvbkdyb3VwLlxuICogXG4gKiBGb3JuZWNlIG3DqXRvZG9zIHBhcmEgbWFuaXB1bGHDp8OjbyBkZSBncnVwb3MgZGUgcGVybWlzc8O1ZXMgbm8gYmFuY28gZGUgZGFkb3MsXG4gKiBpbmNsdWluZG8gYnVzY2EgcG9yIG5vbWUgZSBvcGVyYcOnw7VlcyBkZSBDUlVELlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGVybWlzc2lvbkdyb3VwUmVwb3NpdG9yeSBleHRlbmRzIFJlcG9zaXRvcnk8UGVybWlzc2lvbkdyb3VwPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YVNvdXJjZTogRGF0YVNvdXJjZSkge1xuICAgIHN1cGVyKFBlcm1pc3Npb25Hcm91cCwgZGF0YVNvdXJjZS5jcmVhdGVFbnRpdHlNYW5hZ2VyKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIHVtIGdydXBvIGRlIHBlcm1pc3PDtWVzIHBlbG8gbm9tZS5cbiAgICogXG4gICAqIEBwYXJhbSBuYW1lIE5vbWUgZG8gZ3J1cG9cbiAgICogQHJldHVybnMgTyBncnVwbyBlbmNvbnRyYWRvIG91IG51bGxcbiAgICovXG4gIGFzeW5jIGZpbmRCeU5hbWUobmFtZTogc3RyaW5nKTogUHJvbWlzZTxQZXJtaXNzaW9uR3JvdXAgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZSh7IHdoZXJlOiB7IG5hbWUgfSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSB1bSBncnVwbyBkZSBwZXJtaXNzw7VlcyBwZWxvIElELlxuICAgKiBcbiAgICogQHBhcmFtIGlkIElEIGRvIGdydXBvXG4gICAqIEByZXR1cm5zIE8gZ3J1cG8gZW5jb250cmFkbyBvdSBudWxsXG4gICAqL1xuICBhc3luYyBmaW5kQnlJZChpZDogc3RyaW5nKTogUHJvbWlzZTxQZXJtaXNzaW9uR3JvdXAgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZUJ5KHsgaWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JpYSB1bSBub3ZvIGdydXBvIGRlIHBlcm1pc3PDtWVzLlxuICAgKiBcbiAgICogQHBhcmFtIGRhdGEgRGFkb3MgZG8gZ3J1cG8gYSBzZXIgY3JpYWRvXG4gICAqIEByZXR1cm5zIE8gZ3J1cG8gY3JpYWRvXG4gICAqL1xuICBhc3luYyBjcmVhdGVHcm91cChkYXRhOiBQYXJ0aWFsPFBlcm1pc3Npb25Hcm91cD4pOiBQcm9taXNlPFBlcm1pc3Npb25Hcm91cD4ge1xuICAgIGNvbnN0IGdyb3VwID0gdGhpcy5jcmVhdGUoZGF0YSk7XG4gICAgcmV0dXJuIHRoaXMuc2F2ZShncm91cCk7XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgdW0gZ3J1cG8gZGUgcGVybWlzc8O1ZXMgZXhpc3RlbnRlLlxuICAgKiBcbiAgICogQHBhcmFtIGlkIElEIGRvIGdydXBvIGEgc2VyIGF0dWFsaXphZG9cbiAgICogQHBhcmFtIGRhdGEgRGFkb3MgYXR1YWxpemFkb3MgZG8gZ3J1cG9cbiAgICogQHJldHVybnMgTyBncnVwbyBhdHVhbGl6YWRvXG4gICAqL1xuICBhc3luYyB1cGRhdGVHcm91cChpZDogc3RyaW5nLCBkYXRhOiBQYXJ0aWFsPFBlcm1pc3Npb25Hcm91cD4pOiBQcm9taXNlPFBlcm1pc3Npb25Hcm91cCB8IG51bGw+IHtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShpZCwgZGF0YSk7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZUJ5KHsgaWQgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHVtIGdydXBvIGRlIHBlcm1pc3PDtWVzLlxuICAgKiBcbiAgICogQHBhcmFtIGlkIElEIGRvIGdydXBvIGEgc2VyIHJlbW92aWRvXG4gICAqIEByZXR1cm5zIHRydWUgc2UgbyBncnVwbyBmb2kgcmVtb3ZpZG8sIGZhbHNlIGNhc28gY29udHLDoXJpb1xuICAgKi9cbiAgYXN5bmMgcmVtb3ZlR3JvdXAoaWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZGVsZXRlKGlkKTtcbiAgICByZXR1cm4gcmVzdWx0LmFmZmVjdGVkICE9PSBudWxsICYmIHJlc3VsdC5hZmZlY3RlZCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdC5hZmZlY3RlZCA+IDA7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==