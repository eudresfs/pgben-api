{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\integracao.service.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,2GAAsG;AACtG,gDAA2D;AAG3D,wFAAmF;AACnF,yFAAoF;AACpF,8EAAyE;AAEzE;;;;;;;;GAQG;AAEI,IAAM,iBAAiB,yBAAvB,MAAM,iBAAiB;IAIT;IAHF,MAAM,GAAG,IAAI,eAAM,CAAC,mBAAiB,CAAC,IAAI,CAAC,CAAC;IAE7D,YACmB,oBAAsD;QAAtD,yBAAoB,GAApB,oBAAoB,CAAkC;IACtE,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,WAAW,CACf,IAAyB;QAEzB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClE,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;IACvD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,eAAe,CAAC,MAAc;QAClC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxE,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CACb,0CAA0C,MAAM,kBAAkB,CACnE,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,gBAAgB,CACpB,MAAc,EACd,GAAwB;QAExB,sDAAsD;QACtD,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAEtE,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,0BAA0B;YAC1B,UAAU,GAAG,IAAI,iCAAsB,EAAE,CAAC;YAC1C,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,uDAAuD,MAAM,GAAG,CACjE,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,gEAAgE,MAAM,GAAG,CAC1E,CAAC;QACJ,CAAC;QAED,kCAAkC;QAClC,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC3B,UAAU,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QAC7B,CAAC;QACD,IAAI,GAAG,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;YAChC,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;QACvC,CAAC;QACD,UAAU,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QAC3B,IAAI,GAAG,CAAC,UAAU,EAAE,CAAC;YACnB,UAAU,CAAC,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;QACzC,CAAC;QAED,0CAA0C;QAC1C,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;YACpB,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACzE,CAAC;QAED,mBAAmB;QACnB,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;QAE9D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,MAAc;QAC1B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxE,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CACb,0CAA0C,MAAM,kBAAkB,CACnE,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAC,EAAuB,CAAC,CAAC;QAC3E,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,+BAA+B,MAAM,YAAY,CAAC,CAAC;IACrE,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,aAAa,CACjB,MAAc,EACd,KAAc;QAEd,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QACxE,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CACb,0CAA0C,MAAM,kBAAkB,CACnE,CAAC;QACJ,CAAC;QAED,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QACzB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/D,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,+BAA+B,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,EAAE,CAC7E,CAAC;QACF,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CACrB,IAAwB;QAExB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CACV,GAAsB;QAEtB,IAAI,UAAU,GAAkC,IAAI,CAAC;QAErD,mDAAmD;QACnD,IAAI,GAAG,CAAC,MAAM,EAAE,CAAC;YACf,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACtE,IAAI,CAAC,UAAU,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;gBACrC,MAAM,IAAI,KAAK,CACb,0CAA0C,GAAG,CAAC,MAAM,kBAAkB,CACvE,CAAC;YACJ,CAAC;QACH,CAAC;QAED,0FAA0F;QAC1F,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,YAAY,EAAE,CAAC;YACpC,MAAM,cAAc,GAAG,IAAI,iCAAsB,EAAE,CAAC;YACpD,cAAc,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,yCAAkB,CAAC,WAAW,CAAC,CAAC,cAAc;YAChF,cAAc,CAAC,MAAM,GAAG,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7C,cAAc,CAAC,IAAI,GAAG,yBAAyB,CAAC;YAChD,cAAc,CAAC,YAAY,GAAG,GAAG,CAAC,YAAY,CAAC;YAE/C,sDAAsD;YACtD,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;gBACpB,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,uBAAuB,CACvD,GAAG,CAAC,WAAW,CAChB,CAAC;YACJ,CAAC;YAED,UAAU,GAAG,cAAc,CAAC;QAC9B,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CACb,6DAA6D,CAC9D,CAAC;QACJ,CAAC;QAED,IAAI,CAAC;YACH,sDAAsD;YACtD,QAAQ,UAAU,CAAC,IAAI,EAAE,CAAC;gBACxB,KAAK,yCAAkB,CAAC,KAAK;oBAC3B,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAE5C,KAAK,yCAAkB,CAAC,GAAG;oBACzB,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBAE1C,KAAK,yCAAkB,CAAC,OAAO;oBAC7B,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAE9C,KAAK,yCAAkB,CAAC,WAAW;oBACjC,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBAE1C;oBACE,MAAM,IAAI,KAAK,CACb,iDAAiD,UAAU,CAAC,IAAI,EAAE,CACnE,CAAC;gBACJ,wEAAwE;YAC1E,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,aAAa,GAAG,UAAU,CAAC,MAAM,IAAI,YAAY,CAAC;YACxD,MAAM,IAAI,qDAAwB,CAChC,aAAa,EACb,mBAAmB,KAAK,CAAC,OAAO,EAAE,CACnC,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,uBAAuB,CAAC,WAAgC;QAC9D,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,kFAAkF;QAClF,6DAA6D;QAC7D,sCAAsC;QACtC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACK,0BAA0B,CAChC,yBAAiC;QAEjC,kFAAkF;QAClF,6DAA6D;QAC7D,yCAAyC;QACzC,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC/C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,EAAE,KAAK,CAAC,CAAC;YAChE,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,kBAAkB,CACxB,WAAgC;QAEhC,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,MAAM,SAAS,GAAG,EAAE,GAAG,WAAW,EAAE,CAAC;QAErC,mCAAmC;QACnC,MAAM,eAAe,GAAG;YACtB,OAAO;YACP,UAAU;YACV,QAAQ;YACR,KAAK;YACL,OAAO;YACP,QAAQ;SACT,CAAC;QACF,KAAK,MAAM,KAAK,IAAI,eAAe,EAAE,CAAC;YACpC,IAAI,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;gBACrB,SAAS,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;YAClC,CAAC;QACH,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,WAAW,CACvB,UAAkC;QAElC,gEAAgE;QAChE,6BAA6B;QAC7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iCAAiC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;QAEtE,sCAAsC;QACtC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEzD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,oDAAoD;SAC/D,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,SAAS,CACrB,UAAkC;QAElC,iEAAiE;QACjE,wCAAwC;QACxC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,+BAA+B,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;QAEpE,sCAAsC;QACtC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEzD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,kCAAkC;SAC7C,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,aAAa,CACzB,UAAkC;QAElC,2EAA2E;QAC3E,gDAAgD;QAChD,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,yCAAyC,UAAU,CAAC,MAAM,EAAE,CAC7D,CAAC;QAEF,sCAAsC;QACtC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEzD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,QAAQ,EACN,4EAA4E;SAC/E,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,SAAS,CACrB,UAAkC;QAElC,2DAA2D;QAC3D,4CAA4C;QAC5C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,+BAA+B,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;QAEpE,sCAAsC;QACtC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAEzD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,iCAAiC;SAC5C,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACK,aAAa,CACnB,UAAkC;QAElC,MAAM,GAAG,GAAG,IAAI,+CAAqB,EAAE,CAAC;QACxC,GAAG,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;QAC/B,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC3B,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;QACrC,GAAG,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;QAC3B,GAAG,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;QAE3C,yCAAyC;QACzC,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC;YAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,0BAA0B,CACjD,UAAU,CAAC,WAAW,CACvB,CAAC;YACF,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;QACzD,CAAC;QAED,GAAG,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;QAC7B,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;QACvC,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;QAEvC,OAAO,GAAG,CAAC;IACb,CAAC;CACF,CAAA;AAjZY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,mBAAU,GAAE;yDAK8B,qEAAgC,oBAAhC,qEAAgC;GAJ9D,iBAAiB,CAiZ7B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\integracao.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfiguracaoIntegracaoRepository } from '../repositories/configuracao-integracao.repository';\nimport { ConfiguracaoIntegracao } from '../../../entities';\nimport { IntegracaoUpdateDto } from '../dtos/integracao/integracao-update.dto';\nimport { IntegracaoTestDto } from '../dtos/integracao/integracao-test.dto';\nimport { IntegracaoResponseDto } from '../dtos/integracao/integracao-response.dto';\nimport { IntegracaoTesteException } from '../exceptions/integracao-teste.exception';\nimport { IntegracaoTipoEnum } from '../../../enums/integracao-tipo.enum';\n\n/**\n * Serviço para gerenciamento de configurações de integração externa\n *\n * Responsável por:\n * - Operações CRUD para configurações de integração\n * - Criptografia para credenciais\n * - Suporte a testes de conexão\n * - Mascaramento de dados sensíveis\n */\n@Injectable()\nexport class IntegracaoService {\n  private readonly logger = new Logger(IntegracaoService.name);\n\n  constructor(\n    private readonly integracaoRepository: ConfiguracaoIntegracaoRepository,\n  ) {}\n\n  /**\n   * Busca todas as configurações de integração, convertendo-as para DTOs de resposta\n   * @param tipo Tipo opcional para filtrar\n   * @returns Lista de DTOs de resposta de configurações\n   */\n  async buscarTodas(\n    tipo?: IntegracaoTipoEnum,\n  ): Promise<IntegracaoResponseDto[]> {\n    const integracoes = await this.integracaoRepository.findAll(tipo);\n    return integracoes.map((i) => this.mapearParaDto(i));\n  }\n\n  /**\n   * Busca uma configuração de integração por seu código\n   * @param codigo Código da configuração\n   * @returns DTO de resposta da configuração\n   * @throws Error se a configuração não existir\n   */\n  async buscarPorCodigo(codigo: string): Promise<IntegracaoResponseDto> {\n    const integracao = await this.integracaoRepository.findByCodigo(codigo);\n    if (!integracao) {\n      throw new Error(\n        `Configuração de integração com código '${codigo}' não encontrada`,\n      );\n    }\n    return this.mapearParaDto(integracao);\n  }\n\n  /**\n   * Cria ou atualiza uma configuração de integração\n   * @param codigo Código da configuração\n   * @param dto DTO com dados para atualização\n   * @returns DTO de resposta da configuração atualizada\n   */\n  async atualizarOuCriar(\n    codigo: string,\n    dto: IntegracaoUpdateDto,\n  ): Promise<IntegracaoResponseDto> {\n    // Verificar se já existe configuração com este código\n    let integracao = await this.integracaoRepository.findByCodigo(codigo);\n\n    if (!integracao) {\n      // Criar nova configuração\n      integracao = new ConfiguracaoIntegracao();\n      integracao.codigo = codigo;\n      this.logger.log(\n        `Criando nova configuração de integração com código '${codigo}'`,\n      );\n    } else {\n      this.logger.log(\n        `Atualizando configuração de integração existente com código '${codigo}'`,\n      );\n    }\n\n    // Atualizar dados da configuração\n    if (dto.nome !== undefined) {\n      integracao.nome = dto.nome;\n    }\n    if (dto.descricao !== undefined) {\n      integracao.descricao = dto.descricao;\n    }\n    integracao.tipo = dto.tipo;\n    if (dto.parametros) {\n      integracao.parametros = dto.parametros;\n    }\n\n    // Criptografar credenciais, se fornecidas\n    if (dto.credenciais) {\n      integracao.credenciais = this.criptografarCredenciais(dto.credenciais);\n    }\n\n    // Atualizar status\n    integracao.ativo = dto.ativo !== undefined ? dto.ativo : true;\n\n    const salvo = await this.integracaoRepository.save(integracao);\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Remove uma configuração de integração\n   * @param codigo Código da configuração\n   * @throws Error se a configuração não existir\n   */\n  async remover(codigo: string): Promise<void> {\n    const integracao = await this.integracaoRepository.findByCodigo(codigo);\n    if (!integracao) {\n      throw new Error(\n        `Configuração de integração com código '${codigo}' não encontrada`,\n      );\n    }\n\n    await this.integracaoRepository.remove(integracao.id as unknown as number);\n    this.logger.log(`Configuração de integração '${codigo}' removida`);\n  }\n\n  /**\n   * Ativa ou desativa uma configuração de integração\n   * @param codigo Código da configuração\n   * @param ativo Status de ativação\n   * @returns DTO de resposta da configuração atualizada\n   * @throws Error se a configuração não existir\n   */\n  async alterarStatus(\n    codigo: string,\n    ativo: boolean,\n  ): Promise<IntegracaoResponseDto> {\n    const integracao = await this.integracaoRepository.findByCodigo(codigo);\n    if (!integracao) {\n      throw new Error(\n        `Configuração de integração com código '${codigo}' não encontrada`,\n      );\n    }\n\n    integracao.ativo = ativo;\n    const salvo = await this.integracaoRepository.save(integracao);\n\n    this.logger.log(\n      `Configuração de integração '${codigo}' ${ativo ? 'ativada' : 'desativada'}`,\n    );\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Busca a configuração ativa para um determinado tipo de integração\n   * @param tipo Tipo da integração\n   * @returns DTO de resposta da configuração ou null se não existir\n   */\n  async buscarConfigAtiva(\n    tipo: IntegracaoTipoEnum,\n  ): Promise<IntegracaoResponseDto | null> {\n    const integracao = await this.integracaoRepository.findActiveByTipo(tipo);\n    if (!integracao) {\n      return null;\n    }\n    return this.mapearParaDto(integracao);\n  }\n\n  /**\n   * Testa uma configuração de integração\n   * @param dto DTO com dados para teste\n   * @returns Resultado do teste\n   * @throws IntegracaoTesteException se o teste falhar\n   */\n  async testar(\n    dto: IntegracaoTestDto,\n  ): Promise<{ sucesso: boolean; mensagem: string }> {\n    let integracao: ConfiguracaoIntegracao | null = null;\n\n    // Se for um código, busca a configuração existente\n    if (dto.codigo) {\n      integracao = await this.integracaoRepository.findByCodigo(dto.codigo);\n      if (!integracao && !dto.configuracao) {\n        throw new Error(\n          `Configuração de integração com código '${dto.codigo}' não encontrada`,\n        );\n      }\n    }\n\n    // Se não encontrou pelo código ou configuração fornecida diretamente, cria uma temporária\n    if (!integracao && dto.configuracao) {\n      const tempIntegracao = new ConfiguracaoIntegracao();\n      tempIntegracao.tipo = dto.tipo || IntegracaoTipoEnum.API_EXTERNA; // Tipo padrão\n      tempIntegracao.codigo = 'temp-' + Date.now();\n      tempIntegracao.nome = 'Configuração Temporária';\n      tempIntegracao.configuracao = dto.configuracao;\n\n      // Criptografar credenciais temporárias, se fornecidas\n      if (dto.credenciais) {\n        tempIntegracao.credenciais = this.criptografarCredenciais(\n          dto.credenciais,\n        );\n      }\n\n      integracao = tempIntegracao;\n    }\n\n    if (!integracao) {\n      throw new Error(\n        'É necessário fornecer o código ou a configuração para teste',\n      );\n    }\n\n    try {\n      // Realizar teste específico para o tipo de integração\n      switch (integracao.tipo) {\n        case IntegracaoTipoEnum.EMAIL:\n          return await this.testarEmail(integracao);\n\n        case IntegracaoTipoEnum.SMS:\n          return await this.testarSMS(integracao);\n\n        case IntegracaoTipoEnum.STORAGE:\n          return await this.testarStorage(integracao);\n\n        case IntegracaoTipoEnum.API_EXTERNA:\n          return await this.testarAPI(integracao);\n\n        default:\n          throw new Error(\n            `Tipo de integração não suportado para testes: ${integracao.tipo}`,\n          );\n        // O erro de compilação foi corrigido na classe IntegracaoTesteException\n      }\n    } catch (error) {\n      const codIntegracao = integracao.codigo || 'temporaria';\n      throw new IntegracaoTesteException(\n        codIntegracao,\n        `Falha no teste: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Criptografa as credenciais sensíveis\n   * @param credenciais Credenciais a serem criptografadas\n   * @returns Credenciais criptografadas\n   */\n  private criptografarCredenciais(credenciais: Record<string, any>): string {\n    if (!credenciais) {\n      return '';\n    }\n    // Em uma implementação real, usaríamos uma biblioteca como crypto com AES-256-GCM\n    // Para simplificar neste momento, apenas serializa para JSON\n    // TODO: Implementar criptografia real\n    this.logger.log('Criptografando credenciais sensíveis');\n    return JSON.stringify(credenciais);\n  }\n\n  /**\n   * Descriptografa as credenciais sensíveis\n   * @param credenciaisCriptografadas Credenciais criptografadas\n   * @returns Credenciais descriptografadas\n   */\n  private descriptografarCredenciais(\n    credenciaisCriptografadas: string,\n  ): Record<string, any> {\n    // Em uma implementação real, usaríamos uma biblioteca como crypto com AES-256-GCM\n    // Para simplificar neste momento, apenas deserializa de JSON\n    // TODO: Implementar descriptografia real\n    try {\n      return JSON.parse(credenciaisCriptografadas);\n    } catch (error) {\n      this.logger.error('Erro ao descriptografar credenciais', error);\n      return {};\n    }\n  }\n\n  /**\n   * Mascara credenciais sensíveis para exibição\n   * @param credenciais Credenciais a serem mascaradas\n   * @returns Credenciais mascaradas\n   */\n  private mascaraCredenciais(\n    credenciais: Record<string, any>,\n  ): Record<string, any> {\n    if (!credenciais) {\n      return {};\n    }\n    const resultado = { ...credenciais };\n\n    // Mascarar campos comuns sensíveis\n    const camposSensiveis = [\n      'senha',\n      'password',\n      'secret',\n      'key',\n      'token',\n      'apiKey',\n    ];\n    for (const campo of camposSensiveis) {\n      if (resultado[campo]) {\n        resultado[campo] = '••••••••••';\n      }\n    }\n\n    return resultado;\n  }\n\n  /**\n   * Testa uma configuração de integração de email\n   * @param integracao Configuração a ser testada\n   * @returns Resultado do teste\n   */\n  private async testarEmail(\n    integracao: ConfiguracaoIntegracao,\n  ): Promise<{ sucesso: boolean; mensagem: string }> {\n    // Em uma implementação real, tentaria conectar ao servidor SMTP\n    // e enviar um email de teste\n    this.logger.log(`Testando integração de email: ${integracao.codigo}`);\n\n    // Simulação para fins de demonstração\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    return {\n      sucesso: true,\n      mensagem: 'Conexão com servidor SMTP estabelecida com sucesso',\n    };\n  }\n\n  /**\n   * Testa uma configuração de integração de SMS\n   * @param integracao Configuração a ser testada\n   * @returns Resultado do teste\n   */\n  private async testarSMS(\n    integracao: ConfiguracaoIntegracao,\n  ): Promise<{ sucesso: boolean; mensagem: string }> {\n    // Em uma implementação real, tentaria conectar ao serviço de SMS\n    // e verificar se a API está respondendo\n    this.logger.log(`Testando integração de SMS: ${integracao.codigo}`);\n\n    // Simulação para fins de demonstração\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    return {\n      sucesso: true,\n      mensagem: 'API de SMS respondeu com sucesso',\n    };\n  }\n\n  /**\n   * Testa uma configuração de integração de armazenamento\n   * @param integracao Configuração a ser testada\n   * @returns Resultado do teste\n   */\n  private async testarStorage(\n    integracao: ConfiguracaoIntegracao,\n  ): Promise<{ sucesso: boolean; mensagem: string }> {\n    // Em uma implementação real, tentaria conectar ao serviço de armazenamento\n    // (S3, GCS, MinIO, etc.) e verificar permissões\n    this.logger.log(\n      `Testando integração de armazenamento: ${integracao.codigo}`,\n    );\n\n    // Simulação para fins de demonstração\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    return {\n      sucesso: true,\n      mensagem:\n        'Conexão com serviço de armazenamento estabelecida e permissões verificadas',\n    };\n  }\n\n  /**\n   * Testa uma configuração de integração de API externa\n   * @param integracao Configuração a ser testada\n   * @returns Resultado do teste\n   */\n  private async testarAPI(\n    integracao: ConfiguracaoIntegracao,\n  ): Promise<{ sucesso: boolean; mensagem: string }> {\n    // Em uma implementação real, tentaria fazer uma requisição\n    // para a API externa e verificar a resposta\n    this.logger.log(`Testando integração de API: ${integracao.codigo}`);\n\n    // Simulação para fins de demonstração\n    await new Promise((resolve) => setTimeout(resolve, 500));\n\n    return {\n      sucesso: true,\n      mensagem: 'API respondeu com status 200 OK',\n    };\n  }\n\n  /**\n   * Converte uma entidade ConfiguracaoIntegracao para um DTO de resposta\n   * @param integracao Entidade a ser convertida\n   * @returns DTO de resposta\n   */\n  private mapearParaDto(\n    integracao: ConfiguracaoIntegracao,\n  ): IntegracaoResponseDto {\n    const dto = new IntegracaoResponseDto();\n    dto.codigo = integracao.codigo;\n    dto.nome = integracao.nome;\n    dto.descricao = integracao.descricao;\n    dto.tipo = integracao.tipo;\n    dto.configuracao = integracao.configuracao;\n\n    // Descriptografar e mascarar credenciais\n    if (integracao.credenciais) {\n      const credenciais = this.descriptografarCredenciais(\n        integracao.credenciais,\n      );\n      dto.credenciais = this.mascaraCredenciais(credenciais);\n    }\n\n    dto.ativo = integracao.ativo;\n    dto.created_at = integracao.created_at;\n    dto.updated_at = integracao.updated_at;\n\n    return dto;\n  }\n}\n"],"version":3}