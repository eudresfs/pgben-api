{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\api\\auditoria.api.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\api\\auditoria.api.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { LogAuditoria } from '../../src/modules/auditoria/entities/log-auditoria.entity';\nimport { TipoOperacao } from '../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { JwtService } from '@nestjs/jwt';\nimport { CreateLogAuditoriaDto } from '../../src/modules/auditoria/dto/create-log-auditoria.dto';\n\ndescribe('Auditoria API', () => {\n  let app: INestApplication;\n  let logAuditoriaRepository: Repository<LogAuditoria>;\n  let jwtService: JwtService;\n  let authToken: string;\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({ transform: true }));\n    await app.init();\n\n    logAuditoriaRepository = moduleFixture.get<Repository<LogAuditoria>>(\n      getRepositoryToken(LogAuditoria),\n    );\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    // Gerar token de autenticação para testes\n    authToken = jwtService.sign({\n      id: 'test-user-id',\n      nome: 'Usuário de Teste',\n      email: 'teste@exemplo.com',\n      roles: ['admin'],\n    });\n  });\n\n  beforeEach(async () => {\n    // Limpar logs de auditoria antes de cada teste\n    await logAuditoriaRepository.clear();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('POST /api/auditoria', () => {\n    it('deve criar um log de auditoria', async () => {\n      // Arrange\n      const createLogDto: CreateLogAuditoriaDto = {\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-123',\n        descricao: 'Criação manual de log para teste',\n        dados_anteriores: null,\n        dados_novos: { nome: 'Documento Teste' },\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      };\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .post('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(createLogDto)\n        .expect(201);\n\n      // Assert\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.tipo_operacao).toBe(TipoOperacao.CREATE);\n      expect(response.body.entidade_afetada).toBe('documentos');\n      expect(response.body.entidade_id).toBe('doc-123');\n      expect(response.body.usuario_id).toBe('test-user-id');\n\n      const savedLog = await logAuditoriaRepository.findOne({\n        where: { id: response.body.id },\n      });\n      expect(savedLog).toBeDefined();\n    });\n\n    it('deve validar os campos obrigatórios', async () => {\n      // Arrange\n      const invalidLogDto = {\n        // Faltando tipo_operacao e entidade_afetada, que são obrigatórios\n        entidade_id: 'doc-123',\n        descricao: 'Log inválido para teste',\n        usuario_id: 'test-user-id',\n      };\n\n      // Act & Assert\n      const response = await request(app.getHttpServer())\n        .post('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(invalidLogDto)\n        .expect(400);\n\n      expect(response.body.message).toContain('tipo_operacao');\n      expect(response.body.message).toContain('entidade_afetada');\n    });\n\n    it('deve requerer autenticação', async () => {\n      // Arrange\n      const createLogDto: CreateLogAuditoriaDto = {\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-123',\n        descricao: 'Teste sem autenticação',\n        dados_anteriores: null,\n        dados_novos: null,\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      };\n\n      // Act & Assert\n      await request(app.getHttpServer())\n        .post('/api/auditoria')\n        .send(createLogDto)\n        .expect(401);\n    });\n  });\n\n  describe('GET /api/auditoria', () => {\n    it('deve retornar logs paginados', async () => {\n      // Arrange\n      const logs = [];\n      for (let i = 0; i < 5; i++) {\n        logs.push(\n          logAuditoriaRepository.create({\n            tipo_operacao: TipoOperacao.CREATE,\n            entidade_afetada: 'documentos',\n            entidade_id: `doc-${i}`,\n            descricao: `Log de teste ${i}`,\n            usuario_id: 'test-user-id',\n            ip_origem: '127.0.0.1',\n          }),\n        );\n      }\n      await logAuditoriaRepository.save(logs);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ page: 1, limit: 3 })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(3);\n      expect(response.body.total).toBe(5);\n      expect(response.body.page).toBe(1);\n      expect(response.body.limit).toBe(3);\n      expect(response.body.totalPages).toBe(2);\n    });\n\n    it('deve filtrar logs por tipo de operação', async () => {\n      // Arrange\n      const logs = [\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'documentos',\n          entidade_id: 'doc-1',\n          descricao: 'Criação de documento',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n        }),\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.UPDATE,\n          entidade_afetada: 'documentos',\n          entidade_id: 'doc-1',\n          descricao: 'Atualização de documento',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n        }),\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.DELETE,\n          entidade_afetada: 'documentos',\n          entidade_id: 'doc-2',\n          descricao: 'Exclusão de documento',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n        }),\n      ];\n      await logAuditoriaRepository.save(logs);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ tipo_operacao: TipoOperacao.UPDATE })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(1);\n      expect(response.body.data[0].tipo_operacao).toBe(TipoOperacao.UPDATE);\n    });\n\n    it('deve filtrar logs por entidade afetada', async () => {\n      // Arrange\n      const logs = [\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'documentos',\n          entidade_id: 'doc-1',\n          descricao: 'Criação de documento',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n        }),\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'usuarios',\n          entidade_id: 'user-1',\n          descricao: 'Criação de usuário',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n        }),\n      ];\n      await logAuditoriaRepository.save(logs);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ entidade_afetada: 'usuarios' })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(1);\n      expect(response.body.data[0].entidade_afetada).toBe('usuarios');\n    });\n\n    it('deve filtrar logs por período', async () => {\n      // Arrange\n      const hoje = new Date();\n      const ontem = new Date(hoje);\n      ontem.setDate(ontem.getDate() - 1);\n\n      const anteontem = new Date(hoje);\n      anteontem.setDate(anteontem.getDate() - 2);\n\n      const logs = [\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'documentos',\n          entidade_id: 'doc-1',\n          descricao: 'Log de hoje',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n          created_at: hoje,\n        }),\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'documentos',\n          entidade_id: 'doc-2',\n          descricao: 'Log de ontem',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n          created_at: ontem,\n        }),\n        logAuditoriaRepository.create({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'documentos',\n          entidade_id: 'doc-3',\n          descricao: 'Log de anteontem',\n          usuario_id: 'test-user-id',\n          ip_origem: '127.0.0.1',\n          created_at: anteontem,\n        }),\n      ];\n      await logAuditoriaRepository.save(logs);\n\n      // Formatação das datas para a query\n      const dataInicio = ontem.toISOString().split('T')[0];\n      const dataFim = hoje.toISOString().split('T')[0];\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ data_inicio: dataInicio, data_fim: dataFim })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data.length).toBeGreaterThanOrEqual(2);\n      expect(\n        response.body.data.some((log) => log.descricao === 'Log de hoje'),\n      ).toBe(true);\n      expect(\n        response.body.data.some((log) => log.descricao === 'Log de ontem'),\n      ).toBe(true);\n      expect(\n        response.body.data.some((log) => log.descricao === 'Log de anteontem'),\n      ).toBe(false);\n    });\n  });\n\n  describe('GET /api/auditoria/:id', () => {\n    it('deve retornar um log específico pelo ID', async () => {\n      // Arrange\n      const log = logAuditoriaRepository.create({\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-1',\n        descricao: 'Log para busca por ID',\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      });\n      await logAuditoriaRepository.save(log);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get(`/api/auditoria/${log.id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(response.body.id).toBe(log.id);\n      expect(response.body.descricao).toBe('Log para busca por ID');\n    });\n\n    it('deve retornar 404 para ID inexistente', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .get('/api/auditoria/id-inexistente')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n  });\n\n  describe('GET /api/auditoria/relatorio', () => {\n    it('deve gerar relatório em formato JSON', async () => {\n      // Arrange\n      const logs = [];\n      for (let i = 0; i < 3; i++) {\n        logs.push(\n          logAuditoriaRepository.create({\n            tipo_operacao: TipoOperacao.CREATE,\n            entidade_afetada: 'documentos',\n            entidade_id: `doc-${i}`,\n            descricao: `Log para relatório ${i}`,\n            usuario_id: 'test-user-id',\n            ip_origem: '127.0.0.1',\n          }),\n        );\n      }\n      await logAuditoriaRepository.save(logs);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria/relatorio')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ formato: 'json' })\n        .expect(200);\n\n      // Assert\n      expect(response.body).toHaveLength(3);\n      expect(response.body[0]).toHaveProperty('tipo_operacao');\n      expect(response.body[0]).toHaveProperty('entidade_afetada');\n      expect(response.body[0]).toHaveProperty('descricao');\n    });\n\n    it('deve gerar relatório em formato CSV', async () => {\n      // Arrange\n      const logs = [];\n      for (let i = 0; i < 3; i++) {\n        logs.push(\n          logAuditoriaRepository.create({\n            tipo_operacao: TipoOperacao.CREATE,\n            entidade_afetada: 'documentos',\n            entidade_id: `doc-${i}`,\n            descricao: `Log para relatório ${i}`,\n            usuario_id: 'test-user-id',\n            ip_origem: '127.0.0.1',\n          }),\n        );\n      }\n      await logAuditoriaRepository.save(logs);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria/relatorio')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ formato: 'csv' })\n        .expect(200);\n\n      // Assert\n      expect(response.header['content-type']).toContain('text/csv');\n      expect(response.text).toContain(\n        'tipo_operacao,entidade_afetada,entidade_id',\n      );\n      expect(response.text.split('\\n').length).toBeGreaterThan(3); // Cabeçalho + 3 registros\n    });\n\n    it('deve gerar relatório em formato PDF', async () => {\n      // Arrange\n      const logs = [];\n      for (let i = 0; i < 3; i++) {\n        logs.push(\n          logAuditoriaRepository.create({\n            tipo_operacao: TipoOperacao.CREATE,\n            entidade_afetada: 'documentos',\n            entidade_id: `doc-${i}`,\n            descricao: `Log para relatório ${i}`,\n            usuario_id: 'test-user-id',\n            ip_origem: '127.0.0.1',\n          }),\n        );\n      }\n      await logAuditoriaRepository.save(logs);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria/relatorio')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ formato: 'pdf' })\n        .expect(200);\n\n      // Assert\n      expect(response.header['content-type']).toContain('application/pdf');\n      expect(response.body).toBeInstanceOf(Buffer);\n      expect(response.body.length).toBeGreaterThan(0);\n    });\n  });\n});\n"],"version":3}