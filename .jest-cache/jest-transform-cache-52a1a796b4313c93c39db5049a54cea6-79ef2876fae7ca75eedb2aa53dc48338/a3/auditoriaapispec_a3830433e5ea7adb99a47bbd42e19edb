e09fb5350dfe1cdea0e922a8a8e285e7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const request = __importStar(require("supertest"));
const app_module_1 = require("../../src/app.module");
const typeorm_1 = require("@nestjs/typeorm");
const log_auditoria_entity_1 = require("../../src/modules/auditoria/entities/log-auditoria.entity");
const tipo_operacao_enum_1 = require("../../src/modules/auditoria/enums/tipo-operacao.enum");
const jwt_1 = require("@nestjs/jwt");
describe('Auditoria API', () => {
    let app;
    let logAuditoriaRepository;
    let jwtService;
    let authToken;
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [app_module_1.AppModule],
        }).compile();
        app = moduleFixture.createNestApplication();
        app.useGlobalPipes(new common_1.ValidationPipe({ transform: true }));
        await app.init();
        logAuditoriaRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria));
        jwtService = moduleFixture.get(jwt_1.JwtService);
        // Gerar token de autenticação para testes
        authToken = jwtService.sign({
            id: 'test-user-id',
            nome: 'Usuário de Teste',
            email: 'teste@exemplo.com',
            roles: ['admin'],
        });
    });
    beforeEach(async () => {
        // Limpar logs de auditoria antes de cada teste
        await logAuditoriaRepository.clear();
    });
    afterAll(async () => {
        await app.close();
    });
    describe('POST /api/auditoria', () => {
        it('deve criar um log de auditoria', async () => {
            // Arrange
            const createLogDto = {
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-123',
                descricao: 'Criação manual de log para teste',
                dados_anteriores: null,
                dados_novos: { nome: 'Documento Teste' },
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            };
            // Act
            const response = await request(app.getHttpServer())
                .post('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .send(createLogDto)
                .expect(201);
            // Assert
            expect(response.body).toHaveProperty('id');
            expect(response.body.tipo_operacao).toBe(tipo_operacao_enum_1.TipoOperacao.CREATE);
            expect(response.body.entidade_afetada).toBe('documentos');
            expect(response.body.entidade_id).toBe('doc-123');
            expect(response.body.usuario_id).toBe('test-user-id');
            const savedLog = await logAuditoriaRepository.findOne({
                where: { id: response.body.id },
            });
            expect(savedLog).toBeDefined();
        });
        it('deve validar os campos obrigatórios', async () => {
            // Arrange
            const invalidLogDto = {
                // Faltando tipo_operacao e entidade_afetada, que são obrigatórios
                entidade_id: 'doc-123',
                descricao: 'Log inválido para teste',
                usuario_id: 'test-user-id',
            };
            // Act & Assert
            const response = await request(app.getHttpServer())
                .post('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .send(invalidLogDto)
                .expect(400);
            expect(response.body.message).toContain('tipo_operacao');
            expect(response.body.message).toContain('entidade_afetada');
        });
        it('deve requerer autenticação', async () => {
            // Arrange
            const createLogDto = {
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-123',
                descricao: 'Teste sem autenticação',
                dados_anteriores: null,
                dados_novos: null,
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            };
            // Act & Assert
            await request(app.getHttpServer())
                .post('/api/auditoria')
                .send(createLogDto)
                .expect(401);
        });
    });
    describe('GET /api/auditoria', () => {
        it('deve retornar logs paginados', async () => {
            // Arrange
            const logs = [];
            for (let i = 0; i < 5; i++) {
                logs.push(logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: `doc-${i}`,
                    descricao: `Log de teste ${i}`,
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }));
            }
            await logAuditoriaRepository.save(logs);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ page: 1, limit: 3 })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(3);
            expect(response.body.total).toBe(5);
            expect(response.body.page).toBe(1);
            expect(response.body.limit).toBe(3);
            expect(response.body.totalPages).toBe(2);
        });
        it('deve filtrar logs por tipo de operação', async () => {
            // Arrange
            const logs = [
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: 'doc-1',
                    descricao: 'Criação de documento',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }),
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
                    entidade_afetada: 'documentos',
                    entidade_id: 'doc-1',
                    descricao: 'Atualização de documento',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }),
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.DELETE,
                    entidade_afetada: 'documentos',
                    entidade_id: 'doc-2',
                    descricao: 'Exclusão de documento',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }),
            ];
            await logAuditoriaRepository.save(logs);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(1);
            expect(response.body.data[0].tipo_operacao).toBe(tipo_operacao_enum_1.TipoOperacao.UPDATE);
        });
        it('deve filtrar logs por entidade afetada', async () => {
            // Arrange
            const logs = [
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: 'doc-1',
                    descricao: 'Criação de documento',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }),
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'usuarios',
                    entidade_id: 'user-1',
                    descricao: 'Criação de usuário',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }),
            ];
            await logAuditoriaRepository.save(logs);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ entidade_afetada: 'usuarios' })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(1);
            expect(response.body.data[0].entidade_afetada).toBe('usuarios');
        });
        it('deve filtrar logs por período', async () => {
            // Arrange
            const hoje = new Date();
            const ontem = new Date(hoje);
            ontem.setDate(ontem.getDate() - 1);
            const anteontem = new Date(hoje);
            anteontem.setDate(anteontem.getDate() - 2);
            const logs = [
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: 'doc-1',
                    descricao: 'Log de hoje',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                    created_at: hoje,
                }),
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: 'doc-2',
                    descricao: 'Log de ontem',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                    created_at: ontem,
                }),
                logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: 'doc-3',
                    descricao: 'Log de anteontem',
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                    created_at: anteontem,
                }),
            ];
            await logAuditoriaRepository.save(logs);
            // Formatação das datas para a query
            const dataInicio = ontem.toISOString().split('T')[0];
            const dataFim = hoje.toISOString().split('T')[0];
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ data_inicio: dataInicio, data_fim: dataFim })
                .expect(200);
            // Assert
            expect(response.body.data.length).toBeGreaterThanOrEqual(2);
            expect(response.body.data.some((log) => log.descricao === 'Log de hoje')).toBe(true);
            expect(response.body.data.some((log) => log.descricao === 'Log de ontem')).toBe(true);
            expect(response.body.data.some((log) => log.descricao === 'Log de anteontem')).toBe(false);
        });
    });
    describe('GET /api/auditoria/:id', () => {
        it('deve retornar um log específico pelo ID', async () => {
            // Arrange
            const log = logAuditoriaRepository.create({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-1',
                descricao: 'Log para busca por ID',
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            });
            await logAuditoriaRepository.save(log);
            // Act
            const response = await request(app.getHttpServer())
                .get(`/api/auditoria/${log.id}`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            expect(response.body.id).toBe(log.id);
            expect(response.body.descricao).toBe('Log para busca por ID');
        });
        it('deve retornar 404 para ID inexistente', async () => {
            // Act & Assert
            await request(app.getHttpServer())
                .get('/api/auditoria/id-inexistente')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(404);
        });
    });
    describe('GET /api/auditoria/relatorio', () => {
        it('deve gerar relatório em formato JSON', async () => {
            // Arrange
            const logs = [];
            for (let i = 0; i < 3; i++) {
                logs.push(logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: `doc-${i}`,
                    descricao: `Log para relatório ${i}`,
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }));
            }
            await logAuditoriaRepository.save(logs);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria/relatorio')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ formato: 'json' })
                .expect(200);
            // Assert
            expect(response.body).toHaveLength(3);
            expect(response.body[0]).toHaveProperty('tipo_operacao');
            expect(response.body[0]).toHaveProperty('entidade_afetada');
            expect(response.body[0]).toHaveProperty('descricao');
        });
        it('deve gerar relatório em formato CSV', async () => {
            // Arrange
            const logs = [];
            for (let i = 0; i < 3; i++) {
                logs.push(logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: `doc-${i}`,
                    descricao: `Log para relatório ${i}`,
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }));
            }
            await logAuditoriaRepository.save(logs);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria/relatorio')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ formato: 'csv' })
                .expect(200);
            // Assert
            expect(response.header['content-type']).toContain('text/csv');
            expect(response.text).toContain('tipo_operacao,entidade_afetada,entidade_id');
            expect(response.text.split('\n').length).toBeGreaterThan(3); // Cabeçalho + 3 registros
        });
        it('deve gerar relatório em formato PDF', async () => {
            // Arrange
            const logs = [];
            for (let i = 0; i < 3; i++) {
                logs.push(logAuditoriaRepository.create({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'documentos',
                    entidade_id: `doc-${i}`,
                    descricao: `Log para relatório ${i}`,
                    usuario_id: 'test-user-id',
                    ip_origem: '127.0.0.1',
                }));
            }
            await logAuditoriaRepository.save(logs);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria/relatorio')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ formato: 'pdf' })
                .expect(200);
            // Assert
            expect(response.header['content-type']).toContain('application/pdf');
            expect(response.body).toBeInstanceOf(Buffer);
            expect(response.body.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFx0ZXN0XFxhcGlcXGF1ZGl0b3JpYS5hcGkuc3BlYy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUFzRDtBQUN0RCwyQ0FBa0U7QUFDbEUsbURBQXFDO0FBQ3JDLHFEQUFpRDtBQUNqRCw2Q0FBcUQ7QUFFckQsb0dBQXlGO0FBQ3pGLDZGQUFvRjtBQUNwRixxQ0FBeUM7QUFHekMsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDN0IsSUFBSSxHQUFxQixDQUFDO0lBQzFCLElBQUksc0JBQWdELENBQUM7SUFDckQsSUFBSSxVQUFzQixDQUFDO0lBQzNCLElBQUksU0FBaUIsQ0FBQztJQUV0QixTQUFTLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDbkIsTUFBTSxhQUFhLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQ2xFLE9BQU8sRUFBRSxDQUFDLHNCQUFTLENBQUM7U0FDckIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsR0FBRyxHQUFHLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzVDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSx1QkFBYyxDQUFDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUVqQixzQkFBc0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUN4QyxJQUFBLDRCQUFrQixFQUFDLG1DQUFZLENBQUMsQ0FDakMsQ0FBQztRQUNGLFVBQVUsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFhLGdCQUFVLENBQUMsQ0FBQztRQUV2RCwwQ0FBMEM7UUFDMUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDMUIsRUFBRSxFQUFFLGNBQWM7WUFDbEIsSUFBSSxF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c291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHRlc3RcXGFwaVxcYXVkaXRvcmlhLmFwaS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSU5lc3RBcHBsaWNhdGlvbiwgVmFsaWRhdGlvblBpcGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gJ3N1cGVydGVzdCc7XG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuLi8uLi9zcmMvYXBwLm1vZHVsZSc7XG5pbXBvcnQgeyBnZXRSZXBvc2l0b3J5VG9rZW4gfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHsgTG9nQXVkaXRvcmlhIH0gZnJvbSAnLi4vLi4vc3JjL21vZHVsZXMvYXVkaXRvcmlhL2VudGl0aWVzL2xvZy1hdWRpdG9yaWEuZW50aXR5JztcbmltcG9ydCB7IFRpcG9PcGVyYWNhbyB9IGZyb20gJy4uLy4uL3NyYy9tb2R1bGVzL2F1ZGl0b3JpYS9lbnVtcy90aXBvLW9wZXJhY2FvLmVudW0nO1xuaW1wb3J0IHsgSnd0U2VydmljZSB9IGZyb20gJ0BuZXN0anMvand0JztcbmltcG9ydCB7IENyZWF0ZUxvZ0F1ZGl0b3JpYUR0byB9IGZyb20gJy4uLy4uL3NyYy9tb2R1bGVzL2F1ZGl0b3JpYS9kdG8vY3JlYXRlLWxvZy1hdWRpdG9yaWEuZHRvJztcblxuZGVzY3JpYmUoJ0F1ZGl0b3JpYSBBUEknLCAoKSA9PiB7XG4gIGxldCBhcHA6IElOZXN0QXBwbGljYXRpb247XG4gIGxldCBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5OiBSZXBvc2l0b3J5PExvZ0F1ZGl0b3JpYT47XG4gIGxldCBqd3RTZXJ2aWNlOiBKd3RTZXJ2aWNlO1xuICBsZXQgYXV0aFRva2VuOiBzdHJpbmc7XG5cbiAgYmVmb3JlQWxsKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2R1bGVGaXh0dXJlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGltcG9ydHM6IFtBcHBNb2R1bGVdLFxuICAgIH0pLmNvbXBpbGUoKTtcblxuICAgIGFwcCA9IG1vZHVsZUZpeHR1cmUuY3JlYXRlTmVzdEFwcGxpY2F0aW9uKCk7XG4gICAgYXBwLnVzZUdsb2JhbFBpcGVzKG5ldyBWYWxpZGF0aW9uUGlwZSh7IHRyYW5zZm9ybTogdHJ1ZSB9KSk7XG4gICAgYXdhaXQgYXBwLmluaXQoKTtcblxuICAgIGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnkgPSBtb2R1bGVGaXh0dXJlLmdldDxSZXBvc2l0b3J5PExvZ0F1ZGl0b3JpYT4+KFxuICAgICAgZ2V0UmVwb3NpdG9yeVRva2VuKExvZ0F1ZGl0b3JpYSksXG4gICAgKTtcbiAgICBqd3RTZXJ2aWNlID0gbW9kdWxlRml4dHVyZS5nZXQ8Snd0U2VydmljZT4oSnd0U2VydmljZSk7XG5cbiAgICAvLyBHZXJhciB0b2tlbiBkZSBhdXRlbnRpY2HDp8OjbyBwYXJhIHRlc3Rlc1xuICAgIGF1dGhUb2tlbiA9IGp3dFNlcnZpY2Uuc2lnbih7XG4gICAgICBpZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICBub21lOiAnVXN1w6FyaW8gZGUgVGVzdGUnLFxuICAgICAgZW1haWw6ICd0ZXN0ZUBleGVtcGxvLmNvbScsXG4gICAgICByb2xlczogWydhZG1pbiddLFxuICAgIH0pO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBMaW1wYXIgbG9ncyBkZSBhdWRpdG9yaWEgYW50ZXMgZGUgY2FkYSB0ZXN0ZVxuICAgIGF3YWl0IGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnkuY2xlYXIoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFwcC5jbG9zZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnUE9TVCAvYXBpL2F1ZGl0b3JpYScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBjcmlhciB1bSBsb2cgZGUgYXVkaXRvcmlhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgY3JlYXRlTG9nRHRvOiBDcmVhdGVMb2dBdWRpdG9yaWFEdG8gPSB7XG4gICAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5DUkVBVEUsXG4gICAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdkb2N1bWVudG9zJyxcbiAgICAgICAgZW50aWRhZGVfaWQ6ICdkb2MtMTIzJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnQ3JpYcOnw6NvIG1hbnVhbCBkZSBsb2cgcGFyYSB0ZXN0ZScsXG4gICAgICAgIGRhZG9zX2FudGVyaW9yZXM6IG51bGwsXG4gICAgICAgIGRhZG9zX25vdm9zOiB7IG5vbWU6ICdEb2N1bWVudG8gVGVzdGUnIH0sXG4gICAgICAgIHVzdWFyaW9faWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgICBpcF9vcmlnZW06ICcxMjcuMC4wLjEnLFxuICAgICAgfTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwLmdldEh0dHBTZXJ2ZXIoKSlcbiAgICAgICAgLnBvc3QoJy9hcGkvYXVkaXRvcmlhJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLnNlbmQoY3JlYXRlTG9nRHRvKVxuICAgICAgICAuZXhwZWN0KDIwMSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdpZCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkudGlwb19vcGVyYWNhbykudG9CZShUaXBvT3BlcmFjYW8uQ1JFQVRFKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVudGlkYWRlX2FmZXRhZGEpLnRvQmUoJ2RvY3VtZW50b3MnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmVudGlkYWRlX2lkKS50b0JlKCdkb2MtMTIzJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS51c3VhcmlvX2lkKS50b0JlKCd0ZXN0LXVzZXItaWQnKTtcblxuICAgICAgY29uc3Qgc2F2ZWRMb2cgPSBhd2FpdCBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBpZDogcmVzcG9uc2UuYm9keS5pZCB9LFxuICAgICAgfSk7XG4gICAgICBleHBlY3Qoc2F2ZWRMb2cpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSB2YWxpZGFyIG9zIGNhbXBvcyBvYnJpZ2F0w7NyaW9zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgaW52YWxpZExvZ0R0byA9IHtcbiAgICAgICAgLy8gRmFsdGFuZG8gdGlwb19vcGVyYWNhbyBlIGVudGlkYWRlX2FmZXRhZGEsIHF1ZSBzw6NvIG9icmlnYXTDs3Jpb3NcbiAgICAgICAgZW50aWRhZGVfaWQ6ICdkb2MtMTIzJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnTG9nIGludsOhbGlkbyBwYXJhIHRlc3RlJyxcbiAgICAgICAgdXN1YXJpb19pZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICB9O1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAucG9zdCgnL2FwaS9hdWRpdG9yaWEnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuc2VuZChpbnZhbGlkTG9nRHRvKVxuICAgICAgICAuZXhwZWN0KDQwMCk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1lc3NhZ2UpLnRvQ29udGFpbigndGlwb19vcGVyYWNhbycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCdlbnRpZGFkZV9hZmV0YWRhJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSByZXF1ZXJlciBhdXRlbnRpY2HDp8OjbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGNyZWF0ZUxvZ0R0bzogQ3JlYXRlTG9nQXVkaXRvcmlhRHRvID0ge1xuICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnZG9jdW1lbnRvcycsXG4gICAgICAgIGVudGlkYWRlX2lkOiAnZG9jLTEyMycsXG4gICAgICAgIGRlc2NyaWNhbzogJ1Rlc3RlIHNlbSBhdXRlbnRpY2HDp8OjbycsXG4gICAgICAgIGRhZG9zX2FudGVyaW9yZXM6IG51bGwsXG4gICAgICAgIGRhZG9zX25vdm9zOiBudWxsLFxuICAgICAgICB1c3VhcmlvX2lkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgaXBfb3JpZ2VtOiAnMTI3LjAuMC4xJyxcbiAgICAgIH07XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAucG9zdCgnL2FwaS9hdWRpdG9yaWEnKVxuICAgICAgICAuc2VuZChjcmVhdGVMb2dEdG8pXG4gICAgICAgIC5leHBlY3QoNDAxKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL2F1ZGl0b3JpYScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSByZXRvcm5hciBsb2dzIHBhZ2luYWRvcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGxvZ3MgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIGxvZ3MucHVzaChcbiAgICAgICAgICBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ2RvY3VtZW50b3MnLFxuICAgICAgICAgICAgZW50aWRhZGVfaWQ6IGBkb2MtJHtpfWAsXG4gICAgICAgICAgICBkZXNjcmljYW86IGBMb2cgZGUgdGVzdGUgJHtpfWAsXG4gICAgICAgICAgICB1c3VhcmlvX2lkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgICAgIGlwX29yaWdlbTogJzEyNy4wLjAuMScsXG4gICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBhd2FpdCBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LnNhdmUobG9ncyk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5nZXQoJy9hcGkvYXVkaXRvcmlhJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLnF1ZXJ5KHsgcGFnZTogMSwgbGltaXQ6IDMgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnRvdGFsKS50b0JlKDUpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkucGFnZSkudG9CZSgxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmxpbWl0KS50b0JlKDMpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkudG90YWxQYWdlcykudG9CZSgyKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGZpbHRyYXIgbG9ncyBwb3IgdGlwbyBkZSBvcGVyYcOnw6NvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbG9ncyA9IFtcbiAgICAgICAgbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5DUkVBVEUsXG4gICAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ2RvY3VtZW50b3MnLFxuICAgICAgICAgIGVudGlkYWRlX2lkOiAnZG9jLTEnLFxuICAgICAgICAgIGRlc2NyaWNhbzogJ0NyaWHDp8OjbyBkZSBkb2N1bWVudG8nLFxuICAgICAgICAgIHVzdWFyaW9faWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgICAgIGlwX29yaWdlbTogJzEyNy4wLjAuMScsXG4gICAgICAgIH0pLFxuICAgICAgICBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLlVQREFURSxcbiAgICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnZG9jdW1lbnRvcycsXG4gICAgICAgICAgZW50aWRhZGVfaWQ6ICdkb2MtMScsXG4gICAgICAgICAgZGVzY3JpY2FvOiAnQXR1YWxpemHDp8OjbyBkZSBkb2N1bWVudG8nLFxuICAgICAgICAgIHVzdWFyaW9faWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgICAgIGlwX29yaWdlbTogJzEyNy4wLjAuMScsXG4gICAgICAgIH0pLFxuICAgICAgICBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkRFTEVURSxcbiAgICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnZG9jdW1lbnRvcycsXG4gICAgICAgICAgZW50aWRhZGVfaWQ6ICdkb2MtMicsXG4gICAgICAgICAgZGVzY3JpY2FvOiAnRXhjbHVzw6NvIGRlIGRvY3VtZW50bycsXG4gICAgICAgICAgdXN1YXJpb19pZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICAgICAgaXBfb3JpZ2VtOiAnMTI3LjAuMC4xJyxcbiAgICAgICAgfSksXG4gICAgICBdO1xuICAgICAgYXdhaXQgbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5zYXZlKGxvZ3MpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAuZ2V0KCcvYXBpL2F1ZGl0b3JpYScpXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApXG4gICAgICAgIC5xdWVyeSh7IHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5VUERBVEUgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGFbMF0udGlwb19vcGVyYWNhbykudG9CZShUaXBvT3BlcmFjYW8uVVBEQVRFKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGZpbHRyYXIgbG9ncyBwb3IgZW50aWRhZGUgYWZldGFkYScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGxvZ3MgPSBbXG4gICAgICAgIGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnkuY3JlYXRlKHtcbiAgICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdkb2N1bWVudG9zJyxcbiAgICAgICAgICBlbnRpZGFkZV9pZDogJ2RvYy0xJyxcbiAgICAgICAgICBkZXNjcmljYW86ICdDcmlhw6fDo28gZGUgZG9jdW1lbnRvJyxcbiAgICAgICAgICB1c3VhcmlvX2lkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgICBpcF9vcmlnZW06ICcxMjcuMC4wLjEnLFxuICAgICAgICB9KSxcbiAgICAgICAgbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5DUkVBVEUsXG4gICAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ3VzdWFyaW9zJyxcbiAgICAgICAgICBlbnRpZGFkZV9pZDogJ3VzZXItMScsXG4gICAgICAgICAgZGVzY3JpY2FvOiAnQ3JpYcOnw6NvIGRlIHVzdcOhcmlvJyxcbiAgICAgICAgICB1c3VhcmlvX2lkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgICBpcF9vcmlnZW06ICcxMjcuMC4wLjEnLFxuICAgICAgICB9KSxcbiAgICAgIF07XG4gICAgICBhd2FpdCBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LnNhdmUobG9ncyk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5nZXQoJy9hcGkvYXVkaXRvcmlhJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLnF1ZXJ5KHsgZW50aWRhZGVfYWZldGFkYTogJ3VzdWFyaW9zJyB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YVswXS5lbnRpZGFkZV9hZmV0YWRhKS50b0JlKCd1c3VhcmlvcycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgZmlsdHJhciBsb2dzIHBvciBwZXLDrW9kbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGhvamUgPSBuZXcgRGF0ZSgpO1xuICAgICAgY29uc3Qgb250ZW0gPSBuZXcgRGF0ZShob2plKTtcbiAgICAgIG9udGVtLnNldERhdGUob250ZW0uZ2V0RGF0ZSgpIC0gMSk7XG5cbiAgICAgIGNvbnN0IGFudGVvbnRlbSA9IG5ldyBEYXRlKGhvamUpO1xuICAgICAgYW50ZW9udGVtLnNldERhdGUoYW50ZW9udGVtLmdldERhdGUoKSAtIDIpO1xuXG4gICAgICBjb25zdCBsb2dzID0gW1xuICAgICAgICBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnZG9jdW1lbnRvcycsXG4gICAgICAgICAgZW50aWRhZGVfaWQ6ICdkb2MtMScsXG4gICAgICAgICAgZGVzY3JpY2FvOiAnTG9nIGRlIGhvamUnLFxuICAgICAgICAgIHVzdWFyaW9faWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgICAgIGlwX29yaWdlbTogJzEyNy4wLjAuMScsXG4gICAgICAgICAgY3JlYXRlZF9hdDogaG9qZSxcbiAgICAgICAgfSksXG4gICAgICAgIGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnkuY3JlYXRlKHtcbiAgICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdkb2N1bWVudG9zJyxcbiAgICAgICAgICBlbnRpZGFkZV9pZDogJ2RvYy0yJyxcbiAgICAgICAgICBkZXNjcmljYW86ICdMb2cgZGUgb250ZW0nLFxuICAgICAgICAgIHVzdWFyaW9faWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgICAgIGlwX29yaWdlbTogJzEyNy4wLjAuMScsXG4gICAgICAgICAgY3JlYXRlZF9hdDogb250ZW0sXG4gICAgICAgIH0pLFxuICAgICAgICBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnZG9jdW1lbnRvcycsXG4gICAgICAgICAgZW50aWRhZGVfaWQ6ICdkb2MtMycsXG4gICAgICAgICAgZGVzY3JpY2FvOiAnTG9nIGRlIGFudGVvbnRlbScsXG4gICAgICAgICAgdXN1YXJpb19pZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICAgICAgaXBfb3JpZ2VtOiAnMTI3LjAuMC4xJyxcbiAgICAgICAgICBjcmVhdGVkX2F0OiBhbnRlb250ZW0sXG4gICAgICAgIH0pLFxuICAgICAgXTtcbiAgICAgIGF3YWl0IGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnkuc2F2ZShsb2dzKTtcblxuICAgICAgLy8gRm9ybWF0YcOnw6NvIGRhcyBkYXRhcyBwYXJhIGEgcXVlcnlcbiAgICAgIGNvbnN0IGRhdGFJbmljaW8gPSBvbnRlbS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG4gICAgICBjb25zdCBkYXRhRmltID0gaG9qZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF07XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5nZXQoJy9hcGkvYXVkaXRvcmlhJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLnF1ZXJ5KHsgZGF0YV9pbmljaW86IGRhdGFJbmljaW8sIGRhdGFfZmltOiBkYXRhRmltIH0pXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5kYXRhLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgyKTtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgcmVzcG9uc2UuYm9keS5kYXRhLnNvbWUoKGxvZykgPT4gbG9nLmRlc2NyaWNhbyA9PT0gJ0xvZyBkZSBob2plJyksXG4gICAgICApLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHJlc3BvbnNlLmJvZHkuZGF0YS5zb21lKChsb2cpID0+IGxvZy5kZXNjcmljYW8gPT09ICdMb2cgZGUgb250ZW0nKSxcbiAgICAgICkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgcmVzcG9uc2UuYm9keS5kYXRhLnNvbWUoKGxvZykgPT4gbG9nLmRlc2NyaWNhbyA9PT0gJ0xvZyBkZSBhbnRlb250ZW0nKSxcbiAgICAgICkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdHRVQgL2FwaS9hdWRpdG9yaWEvOmlkJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHJldG9ybmFyIHVtIGxvZyBlc3BlY8OtZmljbyBwZWxvIElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbG9nID0gbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnZG9jdW1lbnRvcycsXG4gICAgICAgIGVudGlkYWRlX2lkOiAnZG9jLTEnLFxuICAgICAgICBkZXNjcmljYW86ICdMb2cgcGFyYSBidXNjYSBwb3IgSUQnLFxuICAgICAgICB1c3VhcmlvX2lkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgaXBfb3JpZ2VtOiAnMTI3LjAuMC4xJyxcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5zYXZlKGxvZyk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5nZXQoYC9hcGkvYXVkaXRvcmlhLyR7bG9nLmlkfWApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApXG4gICAgICAgIC5leHBlY3QoMjAwKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5pZCkudG9CZShsb2cuaWQpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGVzY3JpY2FvKS50b0JlKCdMb2cgcGFyYSBidXNjYSBwb3IgSUQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHJldG9ybmFyIDQwNCBwYXJhIElEIGluZXhpc3RlbnRlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQWN0ICYgQXNzZXJ0XG4gICAgICBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5nZXQoJy9hcGkvYXVkaXRvcmlhL2lkLWluZXhpc3RlbnRlJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLmV4cGVjdCg0MDQpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnR0VUIC9hcGkvYXVkaXRvcmlhL3JlbGF0b3JpbycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBnZXJhciByZWxhdMOzcmlvIGVtIGZvcm1hdG8gSlNPTicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGxvZ3MgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIGxvZ3MucHVzaChcbiAgICAgICAgICBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ2RvY3VtZW50b3MnLFxuICAgICAgICAgICAgZW50aWRhZGVfaWQ6IGBkb2MtJHtpfWAsXG4gICAgICAgICAgICBkZXNjcmljYW86IGBMb2cgcGFyYSByZWxhdMOzcmlvICR7aX1gLFxuICAgICAgICAgICAgdXN1YXJpb19pZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICAgICAgICBpcF9vcmlnZW06ICcxMjcuMC4wLjEnLFxuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXdhaXQgbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5zYXZlKGxvZ3MpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAuZ2V0KCcvYXBpL2F1ZGl0b3JpYS9yZWxhdG9yaW8nKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAucXVlcnkoeyBmb3JtYXRvOiAnanNvbicgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVMZW5ndGgoMyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keVswXSkudG9IYXZlUHJvcGVydHkoJ3RpcG9fb3BlcmFjYW8nKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5WzBdKS50b0hhdmVQcm9wZXJ0eSgnZW50aWRhZGVfYWZldGFkYScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHlbMF0pLnRvSGF2ZVByb3BlcnR5KCdkZXNjcmljYW8nKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGdlcmFyIHJlbGF0w7NyaW8gZW0gZm9ybWF0byBDU1YnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBsb2dzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBsb2dzLnB1c2goXG4gICAgICAgICAgbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgICAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdkb2N1bWVudG9zJyxcbiAgICAgICAgICAgIGVudGlkYWRlX2lkOiBgZG9jLSR7aX1gLFxuICAgICAgICAgICAgZGVzY3JpY2FvOiBgTG9nIHBhcmEgcmVsYXTDs3JpbyAke2l9YCxcbiAgICAgICAgICAgIHVzdWFyaW9faWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgICAgICAgaXBfb3JpZ2VtOiAnMTI3LjAuMC4xJyxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGF3YWl0IGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnkuc2F2ZShsb2dzKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwLmdldEh0dHBTZXJ2ZXIoKSlcbiAgICAgICAgLmdldCgnL2FwaS9hdWRpdG9yaWEvcmVsYXRvcmlvJylcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLnF1ZXJ5KHsgZm9ybWF0bzogJ2NzdicgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJbJ2NvbnRlbnQtdHlwZSddKS50b0NvbnRhaW4oJ3RleHQvY3N2Jyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UudGV4dCkudG9Db250YWluKFxuICAgICAgICAndGlwb19vcGVyYWNhbyxlbnRpZGFkZV9hZmV0YWRhLGVudGlkYWRlX2lkJyxcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzcG9uc2UudGV4dC5zcGxpdCgnXFxuJykubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMyk7IC8vIENhYmXDp2FsaG8gKyAzIHJlZ2lzdHJvc1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgZ2VyYXIgcmVsYXTDs3JpbyBlbSBmb3JtYXRvIFBERicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGxvZ3MgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIGxvZ3MucHVzaChcbiAgICAgICAgICBsb2dBdWRpdG9yaWFSZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ2RvY3VtZW50b3MnLFxuICAgICAgICAgICAgZW50aWRhZGVfaWQ6IGBkb2MtJHtpfWAsXG4gICAgICAgICAgICBkZXNjcmljYW86IGBMb2cgcGFyYSByZWxhdMOzcmlvICR7aX1gLFxuICAgICAgICAgICAgdXN1YXJpb19pZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICAgICAgICBpcF9vcmlnZW06ICcxMjcuMC4wLjEnLFxuICAgICAgICAgIH0pLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgYXdhaXQgbG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5zYXZlKGxvZ3MpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAuZ2V0KCcvYXBpL2F1ZGl0b3JpYS9yZWxhdG9yaW8nKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAucXVlcnkoeyBmb3JtYXRvOiAncGRmJyB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmhlYWRlclsnY29udGVudC10eXBlJ10pLnRvQ29udGFpbignYXBwbGljYXRpb24vcGRmJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9CZUluc3RhbmNlT2YoQnVmZmVyKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9