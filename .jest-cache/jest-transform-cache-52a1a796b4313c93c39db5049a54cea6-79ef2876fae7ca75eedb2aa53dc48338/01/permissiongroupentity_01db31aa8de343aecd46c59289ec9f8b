f4661ff525c04f496716dda26ea5a8d5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGroup = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const status_enum_1 = require("../enums/status.enum");
const usuario_entity_1 = require("./usuario.entity");
/**
 * Entidade que representa um grupo de permissões no sistema.
 *
 * Os grupos permitem organizar permissões logicamente (ex: "Gerenciamento de Cidadãos")
 * e facilitar a atribuição de múltiplas permissões relacionadas.
 */
let PermissionGroup = class PermissionGroup {
    /**
     * Identificador único do grupo
     */
    id;
    /**
     * Nome do grupo
     */
    nome;
    /**
     * Descrição do grupo
     */
    descricao;
    /**
     * Status do grupo (ativo/inativo)
     */
    status;
    /**
     * Data de criação
     */
    created_at;
    /**
     * Data de última atualização
     */
    updated_at;
    /**
     * Usuário que criou o grupo
     */
    criado_por;
    /**
     * Relação com o usuário que criou o grupo
     */
    usuario_criador;
    /**
     * Usuário que atualizou o grupo por último
     */
    atualizado_por;
    /**
     * Relação com o usuário que atualizou o grupo por último
     */
    usuario_atualizador;
    // Getters e setters para compatibilidade com código existente
    get name() {
        return this.nome;
    }
    set name(value) {
        this.nome = value;
    }
    get description() {
        return this.descricao;
    }
    set description(value) {
        this.descricao = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get createdBy() {
        return this.criado_por;
    }
    set createdBy(value) {
        this.criado_por = value;
    }
    get creator() {
        return this.usuario_criador;
    }
    set creator(value) {
        this.usuario_criador = value;
    }
    get updatedBy() {
        return this.atualizado_por;
    }
    set updatedBy(value) {
        this.atualizado_por = value;
    }
    get updater() {
        return this.usuario_atualizador;
    }
    set updater(value) {
        this.usuario_atualizador = value;
    }
    // Métodos utilitários para gerenciar status
    /**
     * Verifica se o grupo está ativo
     */
    isAtivo() {
        return this.status === status_enum_1.Status.ATIVO;
    }
    /**
     * Ativa o grupo
     */
    ativar() {
        this.status = status_enum_1.Status.ATIVO;
    }
    /**
     * Desativa o grupo
     */
    desativar() {
        this.status = status_enum_1.Status.INATIVO;
    }
    /**
     * Verifica se o grupo pode ser deletado
     * (implementar lógica específica conforme regras de negócio)
     */
    podeSerDeletado() {
        // Por enquanto, permite deletar apenas grupos inativos
        return this.status === status_enum_1.Status.INATIVO;
    }
    /**
     * Atualiza o usuário que modificou o grupo
     */
    atualizarPor(usuarioId) {
        this.atualizado_por = usuarioId;
    }
    /**
     * Verifica se o grupo foi criado por um usuário específico
     */
    foiCriadoPor(usuarioId) {
        return this.criado_por === usuarioId;
    }
    /**
     * Verifica se o grupo foi atualizado por um usuário específico
     */
    foiAtualizadoPor(usuarioId) {
        return this.atualizado_por === usuarioId;
    }
    /**
     * Gera uma chave única para o grupo
     */
    getUniqueKey() {
        return `permission_group_${this.nome}_${this.id}`;
    }
    /**
     * Verifica se o grupo tem um nome válido
     */
    hasValidName() {
        return !!this.nome && this.nome.trim().length >= 3;
    }
    /**
     * Verifica se o grupo está em um estado válido
     */
    isValid() {
        return (this.hasValidName() &&
            !!this.descricao &&
            this.descricao.trim().length >= 5 &&
            Object.values(status_enum_1.Status).includes(this.status));
    }
    /**
     * Obtém informações resumidas do grupo
     */
    getSummary() {
        return {
            id: this.id,
            nome: this.nome,
            descricao: this.descricao,
            status: this.status,
            ativo: this.isAtivo(),
        };
    }
    /**
     * Verifica se o grupo foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        if (!this.created_at)
            return false;
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Verifica se o grupo foi atualizado recentemente (últimas 24 horas)
     */
    isAtualizadoRecentemente() {
        if (!this.updated_at)
            return false;
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.updated_at > umDiaAtras;
    }
    /**
     * Calcula a idade do grupo em dias
     */
    getIdadeEmDias() {
        if (!this.created_at)
            return 0;
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
    }
    /**
     * Verifica se o grupo tem criador definido
     */
    temCriador() {
        return !!this.criado_por;
    }
    /**
     * Verifica se o grupo tem atualizador definido
     */
    temAtualizador() {
        return !!this.atualizado_por;
    }
    /**
     * Define o criador do grupo
     */
    definirCriador(usuarioId) {
        this.criado_por = usuarioId;
    }
    /**
     * Obtém uma descrição formatada do grupo
     */
    getDescricaoFormatada() {
        const statusText = this.isAtivo() ? 'Ativo' : 'Inativo';
        return `${this.nome} (${statusText}) - ${this.descricao}`;
    }
    /**
     * Verifica se o grupo pode ser editado
     */
    podeSerEditado() {
        // Grupos ativos podem ser editados
        return this.isAtivo();
    }
    /**
     * Verifica se o nome do grupo é único (para validação)
     */
    isNomeUnico(outrosGrupos) {
        return !outrosGrupos.some((grupo) => grupo.id !== this.id &&
            grupo.nome.toLowerCase() === this.nome.toLowerCase());
    }
    /**
     * Clona o grupo (sem ID e datas)
     */
    clone() {
        return {
            nome: `${this.nome} (Cópia)`,
            descricao: this.descricao,
            status: this.status,
            criado_por: this.criado_por,
        };
    }
};
exports.PermissionGroup = PermissionGroup;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], PermissionGroup.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 100, unique: true, name: 'nome' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome do grupo é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Nome deve ser uma string' }),
    (0, class_validator_1.Length)(3, 100, { message: 'Nome deve ter entre 3 e 100 caracteres' }),
    __metadata("design:type", String)
], PermissionGroup.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 255, name: 'descricao' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Descrição do grupo é obrigatória' }),
    (0, class_validator_1.IsString)({ message: 'Descrição deve ser uma string' }),
    (0, class_validator_1.Length)(5, 255, { message: 'Descrição deve ter entre 5 e 255 caracteres' }),
    __metadata("design:type", String)
], PermissionGroup.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: status_enum_1.Status,
        default: status_enum_1.Status.ATIVO,
        name: 'status',
    }),
    (0, class_validator_1.IsEnum)(status_enum_1.Status, { message: 'Status deve ser ATIVO ou INATIVO' }),
    __metadata("design:type", typeof (_a = typeof status_enum_1.Status !== "undefined" && status_enum_1.Status) === "function" ? _a : Object)
], PermissionGroup.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], PermissionGroup.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], PermissionGroup.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'criado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário criador inválido' }),
    __metadata("design:type", Object)
], PermissionGroup.prototype, "criado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'criado_por' }),
    __metadata("design:type", Object)
], PermissionGroup.prototype, "usuario_criador", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'atualizado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário atualizador inválido' }),
    __metadata("design:type", Object)
], PermissionGroup.prototype, "atualizado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'atualizado_por' }),
    __metadata("design:type", Object)
], PermissionGroup.prototype, "usuario_atualizador", void 0);
exports.PermissionGroup = PermissionGroup = __decorate([
    (0, typeorm_1.Entity)('grupo_permissao'),
    (0, typeorm_1.Index)(['nome'], { unique: true }),
    (0, typeorm_1.Index)(['status']),
    (0, typeorm_1.Index)(['criado_por'])
], PermissionGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,