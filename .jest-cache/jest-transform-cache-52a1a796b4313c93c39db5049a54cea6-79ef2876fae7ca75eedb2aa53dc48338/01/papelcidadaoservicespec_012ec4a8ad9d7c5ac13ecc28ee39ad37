e285f5457bb158454473fd67e2a24d98
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const common_1 = require("@nestjs/common");
const papel_cidadao_service_1 = require("@modules/cidadao/services/papel-cidadao.service");
const cidadao_service_1 = require("@modules/cidadao/services/cidadao.service");
const verificacao_papel_service_1 = require("@modules/cidadao/services/verificacao-papel.service");
const papel_cidadao_entity_1 = require("@modules/cidadao/entities/papel-cidadao.entity");
const tipo_papel_enum_1 = require("@modules/cidadao/enums/tipo-papel.enum");
describe('PapelCidadaoService', () => {
    let service;
    let repository;
    let cidadaoService;
    let verificacaoPapelService;
    let dataSource;
    const mockRepository = {
        create: jest.fn(),
        save: jest.fn(),
        find: jest.fn(),
        findOne: jest.fn(),
        update: jest.fn(),
    };
    const mockCidadaoService = {
        findById: jest.fn(),
    };
    const mockVerificacaoPapelService = {
        verificarConflitoPapeis: jest.fn(),
    };
    const mockQueryRunner = {
        connect: jest.fn(),
        startTransaction: jest.fn(),
        commitTransaction: jest.fn(),
        rollbackTransaction: jest.fn(),
        release: jest.fn(),
        manager: {
            create: jest.fn(),
            save: jest.fn(),
            findOne: jest.fn(),
        },
    };
    const mockDataSource = {
        createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),
        transaction: jest.fn(),
    };
    const mockCidadaoResponse = {
        id: '550e8400-e29b-41d4-a716-446655440000',
        nome: 'João da Silva',
        cpf: '12345678901',
        email: 'joao@example.com',
    };
    const mockPapelCidadao = {
        id: '660e8400-e29b-41d4-a716-446655440000',
        cidadao_id: '550e8400-e29b-41d4-a716-446655440000',
        tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
        ativo: true,
        metadados: {},
        created_at: new Date(),
        updated_at: new Date(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                papel_cidadao_service_1.PapelCidadaoService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(papel_cidadao_entity_1.PapelCidadao),
                    useValue: mockRepository,
                },
                {
                    provide: cidadao_service_1.CidadaoService,
                    useValue: mockCidadaoService,
                },
                {
                    provide: verificacao_papel_service_1.VerificacaoPapelService,
                    useValue: mockVerificacaoPapelService,
                },
                {
                    provide: typeorm_2.DataSource,
                    useValue: mockDataSource,
                },
            ],
        }).compile();
        service = module.get(papel_cidadao_service_1.PapelCidadaoService);
        repository = module.get((0, typeorm_1.getRepositoryToken)(papel_cidadao_entity_1.PapelCidadao));
        cidadaoService = module.get(cidadao_service_1.CidadaoService);
        verificacaoPapelService = module.get(verificacao_papel_service_1.VerificacaoPapelService);
        dataSource = module.get(typeorm_2.DataSource);
        jest.clearAllMocks();
    });
    it('deve estar definido', () => {
        expect(service).toBeDefined();
    });
    describe('create', () => {
        const createPapelDto = {
            cidadao_id: '550e8400-e29b-41d4-a716-446655440000',
            tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
            metadados: {},
        };
        it('deve criar um papel com sucesso', async () => {
            // Mock para verificação de cidadão existente
            mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);
            // Mock para verificação inicial de papel existente
            mockRepository.findOne.mockResolvedValue(null);
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn().mockResolvedValue(mockCidadaoResponse), // Cidadão encontrado na transação
                    create: jest.fn().mockReturnValue(mockPapelCidadao),
                    save: jest.fn().mockResolvedValue(mockPapelCidadao),
                };
                return callback(manager);
            });
            const result = await service.create(createPapelDto);
            expect(mockCidadaoService.findById).toHaveBeenCalledWith(createPapelDto.cidadao_id, false);
            expect(mockRepository.findOne).toHaveBeenCalledWith({
                where: {
                    cidadao_id: createPapelDto.cidadao_id,
                    tipo_papel: createPapelDto.tipo_papel,
                    ativo: true,
                },
            });
            expect(result).toEqual(mockPapelCidadao);
        });
        it('deve lançar NotFoundException quando cidadão não existir', async () => {
            mockCidadaoService.findById.mockResolvedValue(null);
            await expect(service.create(createPapelDto)).rejects.toThrow(common_1.NotFoundException);
            expect(mockCidadaoService.findById).toHaveBeenCalledWith(createPapelDto.cidadao_id, false);
        });
        it('deve lançar ConflictException quando cidadão já possuir o papel', async () => {
            // Mock para verificação de cidadão existente
            mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);
            // Mock para verificação inicial de papel existente - retorna papel existente
            mockRepository.findOne.mockResolvedValue(mockPapelCidadao);
            await expect(service.create(createPapelDto)).rejects.toThrow(common_1.ConflictException);
            expect(mockCidadaoService.findById).toHaveBeenCalledWith(createPapelDto.cidadao_id, false);
            expect(mockRepository.findOne).toHaveBeenCalledWith({
                where: {
                    cidadao_id: createPapelDto.cidadao_id,
                    tipo_papel: createPapelDto.tipo_papel,
                    ativo: true,
                },
            });
        });
        it('deve lançar NotFoundException quando cidadão não existir na transação', async () => {
            // Mock para verificação inicial de papel existente
            mockRepository.findOne.mockResolvedValue(null);
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn().mockResolvedValue(null), // Cidadão não encontrado na transação
                    create: jest.fn(),
                    save: jest.fn(),
                };
                return callback(manager);
            });
            await expect(service.create(createPapelDto)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('createMany', () => {
        const cidadaoId = '550e8400-e29b-41d4-a716-446655440000';
        const papeis = [
            {
                tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                metadados: {},
            },
            {
                tipo_papel: tipo_papel_enum_1.TipoPapel.MEMBRO_COMPOSICAO,
                metadados: {},
            },
        ];
        it('deve criar múltiplos papéis com sucesso', async () => {
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn()
                        .mockResolvedValueOnce(null) // Primeiro papel não existe
                        .mockResolvedValueOnce(mockCidadaoResponse) // Cidadão encontrado para verificação de conflitos do primeiro papel
                        .mockResolvedValueOnce(null) // Segundo papel não existe
                        .mockResolvedValueOnce(mockCidadaoResponse), // Cidadão encontrado para verificação de conflitos do segundo papel
                    create: jest.fn().mockReturnValue([mockPapelCidadao]),
                    save: jest.fn().mockResolvedValue([mockPapelCidadao]),
                };
                return callback(manager);
            });
            mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);
            mockVerificacaoPapelService.verificarConflitoPapeis.mockResolvedValue({
                temConflito: false,
                detalhes: '',
            });
            const result = await service.createMany(cidadaoId, papeis);
            expect(mockCidadaoService.findById).toHaveBeenCalledWith(cidadaoId, false);
            expect(result).toEqual([mockPapelCidadao]);
        });
        it('deve lançar BadRequestException quando lista estiver vazia', async () => {
            await expect(service.createMany(cidadaoId, [])).rejects.toThrow(common_1.BadRequestException);
        });
        it('deve lançar BadRequestException quando houver papéis duplicados', async () => {
            const papeisDuplicados = [
                {
                    tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                    metadados: {},
                },
                {
                    tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                    metadados: {},
                },
            ];
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn(),
                    create: jest.fn(),
                    save: jest.fn(),
                };
                return callback(manager);
            });
            mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);
            await expect(service.createMany(cidadaoId, papeisDuplicados)).rejects.toThrow(common_1.BadRequestException);
        });
        it('deve lançar NotFoundException quando cidadão não existir', async () => {
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn(),
                    create: jest.fn(),
                    save: jest.fn(),
                };
                return callback(manager);
            });
            mockCidadaoService.findById.mockResolvedValue(null);
            await expect(service.createMany(cidadaoId, papeis)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('findByCidadaoId', () => {
        it('deve retornar papéis do cidadão', async () => {
            const papeis = [mockPapelCidadao];
            mockRepository.find.mockResolvedValue(papeis);
            const result = await service.findByCidadaoId('550e8400-e29b-41d4-a716-446655440000');
            expect(mockRepository.find).toHaveBeenCalledWith({
                where: { cidadao_id: '550e8400-e29b-41d4-a716-446655440000', ativo: true },
            });
            expect(result).toEqual(papeis);
        });
        it('deve filtrar por status ativo quando especificado', async () => {
            const papeis = [mockPapelCidadao];
            mockRepository.find.mockResolvedValue(papeis);
            const result = await service.findByCidadaoId('550e8400-e29b-41d4-a716-446655440000');
            expect(mockRepository.find).toHaveBeenCalledWith({
                where: {
                    cidadao_id: '550e8400-e29b-41d4-a716-446655440000',
                    ativo: true,
                },
            });
            expect(result).toEqual(papeis);
        });
    });
    describe('verificarPapel', () => {
        it('deve retornar true quando cidadão possuir o papel ativo', async () => {
            mockRepository.findOne.mockResolvedValue(mockPapelCidadao);
            const result = await service.verificarPapel('550e8400-e29b-41d4-a716-446655440000', tipo_papel_enum_1.TipoPapel.BENEFICIARIO);
            expect(mockRepository.findOne).toHaveBeenCalledWith({
                where: {
                    cidadao_id: '550e8400-e29b-41d4-a716-446655440000',
                    tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                    ativo: true,
                },
            });
            expect(result).toBe(true);
        });
        it('deve retornar false quando cidadão não possuir o papel', async () => {
            mockRepository.findOne.mockResolvedValue(null);
            const result = await service.verificarPapel('550e8400-e29b-41d4-a716-446655440000', tipo_papel_enum_1.TipoPapel.BENEFICIARIO);
            expect(result).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,