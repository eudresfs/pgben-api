{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\config\\jwt.config.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\config\\jwt.config.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable prettier/prettier */\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtModuleOptions } from '@nestjs/jwt';\n\n/**\n * Configuração segura para JWT usando chaves RSA\n * Prioriza carregamento de arquivos sobre chaves em Base64\n */\nexport const createJwtConfig = (\n  configService: ConfigService,\n): JwtModuleOptions => {\n  // Função para carregar chave privada de forma segura\n  const getPrivateKey = (): string => {\n    const keyPath = configService.get<string>('JWT_PRIVATE_KEY_PATH');\n    const keyBase64 = configService.get<string>('JWT_PRIVATE_KEY_BASE64');\n\n    if (keyPath) {\n      try {\n        const fullPath = join(process.cwd(), keyPath);\n        const privateKey = readFileSync(fullPath, 'utf8');\n\n        if (\n          !privateKey.includes('BEGIN PRIVATE KEY') &&\n          !privateKey.includes('BEGIN RSA PRIVATE KEY')\n        ) {\n          throw new Error('Arquivo de chave privada inválido');\n        }\n\n        return privateKey;\n      } catch (error) {\n        throw new Error(\n          `Erro ao carregar chave privada do arquivo ${keyPath}: ${error.message}`,\n        );\n      }\n    }\n\n    if (keyBase64) {\n      try {\n        const privateKey = Buffer.from(keyBase64, 'base64').toString('utf8');\n\n        if (\n          !privateKey.includes('BEGIN PRIVATE KEY') &&\n          !privateKey.includes('BEGIN RSA PRIVATE KEY')\n        ) {\n          throw new Error('Chave privada Base64 inválida');\n        }\n\n        return privateKey;\n      } catch (error) {\n        throw new Error(\n          `Erro ao decodificar chave privada Base64: ${error.message}`,\n        );\n      }\n    }\n\n    throw new Error(\n      'Chave privada JWT não configurada. Configure JWT_PRIVATE_KEY_PATH ou JWT_PRIVATE_KEY_BASE64',\n    );\n  };\n\n  // Função para carregar chave pública de forma segura\n  const getPublicKey = (): string => {\n    const keyPath = configService.get<string>('JWT_PUBLIC_KEY_PATH');\n    const keyBase64 = configService.get<string>('JWT_PUBLIC_KEY_BASE64');\n\n    if (keyPath) {\n      try {\n        const fullPath = join(process.cwd(), keyPath);\n        const publicKey = readFileSync(fullPath, 'utf8');\n\n        if (!publicKey.includes('BEGIN PUBLIC KEY')) {\n          throw new Error('Arquivo de chave pública inválido');\n        }\n\n        return publicKey;\n      } catch (error) {\n        throw new Error(\n          `Erro ao carregar chave pública do arquivo ${keyPath}: ${error.message}`,\n        );\n      }\n    }\n\n    if (keyBase64) {\n      try {\n        const publicKey = Buffer.from(keyBase64, 'base64').toString('utf8');\n\n        if (!publicKey.includes('BEGIN PUBLIC KEY')) {\n          throw new Error('Chave pública Base64 inválida');\n        }\n\n        return publicKey;\n      } catch (error) {\n        throw new Error(\n          `Erro ao decodificar chave pública Base64: ${error.message}`,\n        );\n      }\n    }\n\n    throw new Error(\n      'Chave pública JWT não configurada. Configure JWT_PUBLIC_KEY_PATH ou JWT_PUBLIC_KEY_BASE64',\n    );\n  };\n\n  // Validar algoritmo de assinatura\n  const algorithm = configService.get<string>('JWT_ALGORITHM', 'RS256');\n  if (!['RS256', 'RS384', 'RS512'].includes(algorithm)) {\n    throw new Error(\n      `Algoritmo JWT inválido: ${algorithm}. Use RS256, RS384 ou RS512`,\n    );\n  }\n\n  // Validar tempo de expiração\n  const expiresIn = configService.get<string>(\n    'JWT_ACCESS_TOKEN_EXPIRES_IN',\n    '15m',\n  );\n  const refreshExpiresIn = configService.get<string>(\n    'JWT_REFRESH_TOKEN_EXPIRES_IN',\n    '7d',\n  );\n\n  // Configuração final do JWT\n  return {\n    privateKey: getPrivateKey(),\n    publicKey: getPublicKey(),\n    signOptions: {\n      algorithm: algorithm as 'RS256' | 'RS384' | 'RS512',\n      expiresIn: expiresIn,\n      issuer: configService.get<string>('APP_NAME', 'PGBEN'),\n      audience: configService.get<string>(\n        'FRONTEND_URL',\n        'http://localhost:3001',\n      ),\n    },\n    verifyOptions: {\n      algorithms: [algorithm as 'RS256' | 'RS384' | 'RS512'],\n      issuer: configService.get<string>('APP_NAME', 'PGBEN'),\n      audience: configService.get<string>(\n        'FRONTEND_URL',\n        'http://localhost:3001',\n      ),\n    },\n  };\n};\n\n/**\n * Configuração específica para tokens de refresh\n */\nexport const createJwtRefreshConfig = (\n  configService: ConfigService,\n): JwtModuleOptions => {\n  const baseConfig = createJwtConfig(configService);\n\n  return {\n    ...baseConfig,\n    signOptions: {\n      ...baseConfig.signOptions,\n      expiresIn: configService.get<string>(\n        'JWT_REFRESH_TOKEN_EXPIRES_IN',\n        '7d',\n      ),\n    },\n  };\n};\n\n/**\n * Utilitário para validar configuração JWT na inicialização\n */\nexport const validateJwtConfig = (configService: ConfigService): void => {\n  try {\n    createJwtConfig(configService);\n    console.log('✅ Configuração JWT validada com sucesso');\n  } catch (error) {\n    console.error('❌ Erro na configuração JWT:', error.message);\n    throw error;\n  }\n};\n"],"version":3}