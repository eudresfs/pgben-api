ee3be21d1da7627f8713ad76010b4ed7
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ChaveMonitorService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChaveMonitorService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
/**
 * Serviço de Monitoramento de Chaves
 *
 * Responsável por monitorar a integridade das chaves de criptografia,
 * verificar permissões de arquivo e registrar alterações não autorizadas.
 */
let ChaveMonitorService = ChaveMonitorService_1 = class ChaveMonitorService {
    configService;
    logger = new common_1.Logger(ChaveMonitorService_1.name);
    keyPath;
    keyChecksum;
    lastModified;
    lastPermissions;
    constructor(configService) {
        this.configService = configService;
        this.keyPath =
            this.configService.get('ENCRYPTION_KEY_PATH') ||
                path.join(process.cwd(), 'config', 'encryption.key');
        // Inicializar o monitoramento se a chave existir
        if (fs.existsSync(this.keyPath)) {
            this.inicializarMonitoramento();
        }
        else {
            this.logger.warn('Arquivo de chave não encontrado para monitoramento');
        }
    }
    /**
     * Inicializa o monitoramento da chave
     */
    inicializarMonitoramento() {
        try {
            const stats = fs.statSync(this.keyPath);
            this.lastModified = stats.mtime;
            this.lastPermissions = stats.mode;
            this.keyChecksum = this.calcularChecksum();
            this.logger.log('Monitoramento de chave inicializado com sucesso');
            // Verificar permissões
            this.verificarPermissoes();
        }
        catch (error) {
            this.logger.error(`Erro ao inicializar monitoramento: ${error.message}`);
        }
    }
    /**
     * Calcula o checksum do arquivo de chave
     */
    calcularChecksum() {
        try {
            const fileBuffer = fs.readFileSync(this.keyPath);
            const hashSum = crypto.createHash('sha256');
            hashSum.update(fileBuffer);
            return hashSum.digest('hex');
        }
        catch (error) {
            this.logger.error(`Erro ao calcular checksum: ${error.message}`);
            return '';
        }
    }
    /**
     * Verifica se as permissões do arquivo estão corretas
     */
    verificarPermissoes() {
        try {
            const stats = fs.statSync(this.keyPath);
            const permissoes = stats.mode & 0o777; // Extrair apenas as permissões
            // Em sistemas Unix, verificar se as permissões são 600 (leitura/escrita apenas para o proprietário)
            if (process.platform !== 'win32' && permissoes !== 0o600) {
                this.logger.warn(`Permissões inseguras detectadas no arquivo de chave: ${permissoes.toString(8)}. ` +
                    'Recomendado: 600 (leitura/escrita apenas para o proprietário)');
                // Tentar corrigir as permissões
                try {
                    fs.chmodSync(this.keyPath, 0o600);
                    this.logger.log('Permissões do arquivo de chave corrigidas para 600');
                }
                catch (chmodError) {
                    this.logger.error(`Não foi possível corrigir as permissões: ${chmodError.message}`);
                }
            }
        }
        catch (error) {
            this.logger.error(`Erro ao verificar permissões: ${error.message}`);
        }
    }
    /**
     * Verifica a integridade da chave
     * @returns true se a chave está íntegra, false caso contrário
     */
    verificarIntegridade() {
        if (!fs.existsSync(this.keyPath)) {
            this.logger.error('Arquivo de chave não encontrado durante verificação de integridade');
            return false;
        }
        try {
            // Verificar se o arquivo foi modificado
            const stats = fs.statSync(this.keyPath);
            if (stats.mtime.getTime() !== this.lastModified.getTime()) {
                this.logger.warn('Detectada modificação no arquivo de chave!');
                // Verificar se o conteúdo realmente mudou (checksum)
                const novoChecksum = this.calcularChecksum();
                if (novoChecksum !== this.keyChecksum) {
                    this.logger.error('ALERTA DE SEGURANÇA: Conteúdo do arquivo de chave foi alterado!');
                    return false;
                }
                // Atualizar timestamp se apenas o timestamp mudou mas o conteúdo não
                this.lastModified = stats.mtime;
                this.logger.log('Timestamp do arquivo atualizado, mas conteúdo permanece íntegro');
            }
            // Verificar permissões
            if (stats.mode !== this.lastPermissions) {
                this.logger.warn('Permissões do arquivo de chave foram alteradas!');
                this.verificarPermissoes();
                this.lastPermissions = stats.mode;
            }
            return true;
        }
        catch (error) {
            this.logger.error(`Erro ao verificar integridade: ${error.message}`);
            return false;
        }
    }
    /**
     * Cria um backup da chave
     * @returns true se o backup foi criado com sucesso, false caso contrário
     */
    criarBackup() {
        if (!fs.existsSync(this.keyPath)) {
            this.logger.error('Arquivo de chave não encontrado para backup');
            return false;
        }
        try {
            const backupDir = path.join(path.dirname(this.keyPath), 'backups');
            // Criar diretório de backup se não existir
            if (!fs.existsSync(backupDir)) {
                fs.mkdirSync(backupDir, { recursive: true, mode: 0o700 }); // Permissões restritas
            }
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupPath = path.join(backupDir, `encryption.key.${timestamp}`);
            // Copiar arquivo
            fs.copyFileSync(this.keyPath, backupPath);
            // Definir permissões restritas
            if (process.platform !== 'win32') {
                fs.chmodSync(backupPath, 0o600);
            }
            this.logger.log(`Backup da chave criado com sucesso: ${backupPath}`);
            return true;
        }
        catch (error) {
            this.logger.error(`Erro ao criar backup: ${error.message}`);
            return false;
        }
    }
};
exports.ChaveMonitorService = ChaveMonitorService;
exports.ChaveMonitorService = ChaveMonitorService = ChaveMonitorService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], ChaveMonitorService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,