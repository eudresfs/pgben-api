{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\chave-monitor.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\chave-monitor.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\n\n/**\n * Serviço de Monitoramento de Chaves\n * \n * Responsável por monitorar a integridade das chaves de criptografia,\n * verificar permissões de arquivo e registrar alterações não autorizadas.\n */\n@Injectable()\nexport class ChaveMonitorService {\n  private readonly logger = new Logger(ChaveMonitorService.name);\n  private readonly keyPath: string;\n  private keyChecksum: string;\n  private lastModified: Date;\n  private lastPermissions: number;\n\n  constructor(private configService: ConfigService) {\n    this.keyPath = \n      this.configService.get<string>('ENCRYPTION_KEY_PATH') ||\n      path.join(process.cwd(), 'config', 'encryption.key');\n    \n    // Inicializar o monitoramento se a chave existir\n    if (fs.existsSync(this.keyPath)) {\n      this.inicializarMonitoramento();\n    } else {\n      this.logger.warn('Arquivo de chave não encontrado para monitoramento');\n    }\n  }\n\n  /**\n   * Inicializa o monitoramento da chave\n   */\n  private inicializarMonitoramento(): void {\n    try {\n      const stats = fs.statSync(this.keyPath);\n      this.lastModified = stats.mtime;\n      this.lastPermissions = stats.mode;\n      this.keyChecksum = this.calcularChecksum();\n      \n      this.logger.log('Monitoramento de chave inicializado com sucesso');\n      \n      // Verificar permissões\n      this.verificarPermissoes();\n    } catch (error) {\n      this.logger.error(`Erro ao inicializar monitoramento: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calcula o checksum do arquivo de chave\n   */\n  private calcularChecksum(): string {\n    try {\n      const fileBuffer = fs.readFileSync(this.keyPath);\n      const hashSum = crypto.createHash('sha256');\n      hashSum.update(fileBuffer);\n      return hashSum.digest('hex');\n    } catch (error) {\n      this.logger.error(`Erro ao calcular checksum: ${error.message}`);\n      return '';\n    }\n  }\n\n  /**\n   * Verifica se as permissões do arquivo estão corretas\n   */\n  private verificarPermissoes(): void {\n    try {\n      const stats = fs.statSync(this.keyPath);\n      const permissoes = stats.mode & 0o777; // Extrair apenas as permissões\n      \n      // Em sistemas Unix, verificar se as permissões são 600 (leitura/escrita apenas para o proprietário)\n      if (process.platform !== 'win32' && permissoes !== 0o600) {\n        this.logger.warn(\n          `Permissões inseguras detectadas no arquivo de chave: ${permissoes.toString(8)}. ` +\n          'Recomendado: 600 (leitura/escrita apenas para o proprietário)'\n        );\n        \n        // Tentar corrigir as permissões\n        try {\n          fs.chmodSync(this.keyPath, 0o600);\n          this.logger.log('Permissões do arquivo de chave corrigidas para 600');\n        } catch (chmodError) {\n          this.logger.error(`Não foi possível corrigir as permissões: ${chmodError.message}`);\n        }\n      }\n    } catch (error) {\n      this.logger.error(`Erro ao verificar permissões: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verifica a integridade da chave\n   * @returns true se a chave está íntegra, false caso contrário\n   */\n  public verificarIntegridade(): boolean {\n    if (!fs.existsSync(this.keyPath)) {\n      this.logger.error('Arquivo de chave não encontrado durante verificação de integridade');\n      return false;\n    }\n\n    try {\n      // Verificar se o arquivo foi modificado\n      const stats = fs.statSync(this.keyPath);\n      if (stats.mtime.getTime() !== this.lastModified.getTime()) {\n        this.logger.warn('Detectada modificação no arquivo de chave!');\n        \n        // Verificar se o conteúdo realmente mudou (checksum)\n        const novoChecksum = this.calcularChecksum();\n        if (novoChecksum !== this.keyChecksum) {\n          this.logger.error('ALERTA DE SEGURANÇA: Conteúdo do arquivo de chave foi alterado!');\n          return false;\n        }\n        \n        // Atualizar timestamp se apenas o timestamp mudou mas o conteúdo não\n        this.lastModified = stats.mtime;\n        this.logger.log('Timestamp do arquivo atualizado, mas conteúdo permanece íntegro');\n      }\n      \n      // Verificar permissões\n      if (stats.mode !== this.lastPermissions) {\n        this.logger.warn('Permissões do arquivo de chave foram alteradas!');\n        this.verificarPermissoes();\n        this.lastPermissions = stats.mode;\n      }\n      \n      return true;\n    } catch (error) {\n      this.logger.error(`Erro ao verificar integridade: ${error.message}`);\n      return false;\n    }\n  }\n\n  /**\n   * Cria um backup da chave\n   * @returns true se o backup foi criado com sucesso, false caso contrário\n   */\n  public criarBackup(): boolean {\n    if (!fs.existsSync(this.keyPath)) {\n      this.logger.error('Arquivo de chave não encontrado para backup');\n      return false;\n    }\n\n    try {\n      const backupDir = path.join(path.dirname(this.keyPath), 'backups');\n      \n      // Criar diretório de backup se não existir\n      if (!fs.existsSync(backupDir)) {\n        fs.mkdirSync(backupDir, { recursive: true, mode: 0o700 }); // Permissões restritas\n      }\n      \n      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n      const backupPath = path.join(backupDir, `encryption.key.${timestamp}`);\n      \n      // Copiar arquivo\n      fs.copyFileSync(this.keyPath, backupPath);\n      \n      // Definir permissões restritas\n      if (process.platform !== 'win32') {\n        fs.chmodSync(backupPath, 0o600);\n      }\n      \n      this.logger.log(`Backup da chave criado com sucesso: ${backupPath}`);\n      return true;\n    } catch (error) {\n      this.logger.error(`Erro ao criar backup: ${error.message}`);\n      return false;\n    }\n  }\n}\n"],"version":3}