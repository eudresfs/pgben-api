495d7de71caa8cdece4e88d894e8f6d7
"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJwtConfig = exports.createJwtRefreshConfig = exports.createJwtConfig = void 0;
/* eslint-disable prettier/prettier */
const fs_1 = require("fs");
const path_1 = require("path");
/**
 * Configuração segura para JWT usando chaves RSA
 * Prioriza carregamento de arquivos sobre chaves em Base64
 */
const createJwtConfig = (configService) => {
    // Função para carregar chave privada de forma segura
    const getPrivateKey = () => {
        const keyPath = configService.get('JWT_PRIVATE_KEY_PATH');
        const keyBase64 = configService.get('JWT_PRIVATE_KEY_BASE64');
        if (keyPath) {
            try {
                const fullPath = (0, path_1.join)(process.cwd(), keyPath);
                const privateKey = (0, fs_1.readFileSync)(fullPath, 'utf8');
                if (!privateKey.includes('BEGIN PRIVATE KEY') &&
                    !privateKey.includes('BEGIN RSA PRIVATE KEY')) {
                    throw new Error('Arquivo de chave privada inválido');
                }
                return privateKey;
            }
            catch (error) {
                throw new Error(`Erro ao carregar chave privada do arquivo ${keyPath}: ${error.message}`);
            }
        }
        if (keyBase64) {
            try {
                const privateKey = Buffer.from(keyBase64, 'base64').toString('utf8');
                if (!privateKey.includes('BEGIN PRIVATE KEY') &&
                    !privateKey.includes('BEGIN RSA PRIVATE KEY')) {
                    throw new Error('Chave privada Base64 inválida');
                }
                return privateKey;
            }
            catch (error) {
                throw new Error(`Erro ao decodificar chave privada Base64: ${error.message}`);
            }
        }
        throw new Error('Chave privada JWT não configurada. Configure JWT_PRIVATE_KEY_PATH ou JWT_PRIVATE_KEY_BASE64');
    };
    // Função para carregar chave pública de forma segura
    const getPublicKey = () => {
        const keyPath = configService.get('JWT_PUBLIC_KEY_PATH');
        const keyBase64 = configService.get('JWT_PUBLIC_KEY_BASE64');
        if (keyPath) {
            try {
                const fullPath = (0, path_1.join)(process.cwd(), keyPath);
                const publicKey = (0, fs_1.readFileSync)(fullPath, 'utf8');
                if (!publicKey.includes('BEGIN PUBLIC KEY')) {
                    throw new Error('Arquivo de chave pública inválido');
                }
                return publicKey;
            }
            catch (error) {
                throw new Error(`Erro ao carregar chave pública do arquivo ${keyPath}: ${error.message}`);
            }
        }
        if (keyBase64) {
            try {
                const publicKey = Buffer.from(keyBase64, 'base64').toString('utf8');
                if (!publicKey.includes('BEGIN PUBLIC KEY')) {
                    throw new Error('Chave pública Base64 inválida');
                }
                return publicKey;
            }
            catch (error) {
                throw new Error(`Erro ao decodificar chave pública Base64: ${error.message}`);
            }
        }
        throw new Error('Chave pública JWT não configurada. Configure JWT_PUBLIC_KEY_PATH ou JWT_PUBLIC_KEY_BASE64');
    };
    // Validar algoritmo de assinatura
    const algorithm = configService.get('JWT_ALGORITHM', 'RS256');
    if (!['RS256', 'RS384', 'RS512'].includes(algorithm)) {
        throw new Error(`Algoritmo JWT inválido: ${algorithm}. Use RS256, RS384 ou RS512`);
    }
    // Validar tempo de expiração
    const expiresIn = configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN', '15m');
    const refreshExpiresIn = configService.get('JWT_REFRESH_TOKEN_EXPIRES_IN', '7d');
    // Configuração final do JWT
    return {
        privateKey: getPrivateKey(),
        publicKey: getPublicKey(),
        signOptions: {
            algorithm: algorithm,
            expiresIn: expiresIn,
            issuer: configService.get('APP_NAME', 'PGBEN'),
            audience: configService.get('FRONTEND_URL', 'http://localhost:3001'),
        },
        verifyOptions: {
            algorithms: [algorithm],
            issuer: configService.get('APP_NAME', 'PGBEN'),
            audience: configService.get('FRONTEND_URL', 'http://localhost:3001'),
        },
    };
};
exports.createJwtConfig = createJwtConfig;
/**
 * Configuração específica para tokens de refresh
 */
const createJwtRefreshConfig = (configService) => {
    const baseConfig = (0, exports.createJwtConfig)(configService);
    return {
        ...baseConfig,
        signOptions: {
            ...baseConfig.signOptions,
            expiresIn: configService.get('JWT_REFRESH_TOKEN_EXPIRES_IN', '7d'),
        },
    };
};
exports.createJwtRefreshConfig = createJwtRefreshConfig;
/**
 * Utilitário para validar configuração JWT na inicialização
 */
const validateJwtConfig = (configService) => {
    try {
        (0, exports.createJwtConfig)(configService);
        console.log('✅ Configuração JWT validada com sucesso');
    }
    catch (error) {
        console.error('❌ Erro na configuração JWT:', error.message);
        throw error;
    }
};
exports.validateJwtConfig = validateJwtConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,