a82e905e9891ded565baa1fc8123b7a6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatusTransitionValidator = void 0;
const common_1 = require("@nestjs/common");
const status_pagamento_enum_1 = require("../../../enums/status-pagamento.enum");
/**
 * Serviço para validação de transições de status de pagamento
 *
 * Implementa a lógica de máquina de estados para controlar
 * as transições válidas entre os diferentes status de pagamento.
 *
 * @author Equipe PGBen
 */
let StatusTransitionValidator = class StatusTransitionValidator {
    // Matriz de transições permitidas
    transitions = [
        // De AGENDADO para...
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            allowed: true
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
            allowed: true
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível confirmar um pagamento que ainda não foi liberado'
        },
        // De LIBERADO para...
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
            allowed: true
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
            allowed: true
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível retornar um pagamento liberado para o status agendado'
        },
        // De CONFIRMADO para...
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível retornar um pagamento confirmado para o status agendado'
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível retornar um pagamento confirmado para o status liberado'
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível cancelar um pagamento que já foi confirmado'
        },
        // De CANCELADO para...
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível reativar um pagamento cancelado'
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível liberar um pagamento cancelado'
        },
        {
            from: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
            to: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
            allowed: false,
            reasonIfBlocked: 'Não é possível confirmar um pagamento cancelado'
        }
    ];
    /**
     * Verifica se uma transição de status é permitida
     *
     * @param fromStatus Status atual do pagamento
     * @param toStatus Status desejado
     * @returns Um objeto contendo o resultado da validação e a razão se bloqueado
     */
    canTransition(fromStatus, toStatus) {
        // Se não há mudança de status, é permitido
        if (fromStatus === toStatus) {
            return { allowed: true };
        }
        // Busca a transição correspondente
        const transition = this.transitions.find(t => t.from === fromStatus && t.to === toStatus);
        // Se a transição não está definida, não é permitida
        if (!transition) {
            return {
                allowed: false,
                reason: `Transição de ${fromStatus} para ${toStatus} não está definida`
            };
        }
        // Retorna o resultado da validação
        return {
            allowed: transition.allowed,
            reason: transition.allowed ? undefined : transition.reasonIfBlocked
        };
    }
    /**
     * Obtém todas as transições possíveis a partir de um status
     *
     * @param fromStatus Status atual
     * @returns Lista de status para os quais é possível transicionar
     */
    getPossibleTransitions(fromStatus) {
        return this.transitions
            .filter(t => t.from === fromStatus && t.allowed)
            .map(t => t.to);
    }
    /**
     * Verifica se um pagamento pode ser cancelado
     *
     * @param currentStatus Status atual do pagamento
     * @returns true se o pagamento pode ser cancelado, false caso contrário
     */
    canBeCanceled(currentStatus) {
        return this.canTransition(currentStatus, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO).allowed;
    }
    /**
     * Verifica se um pagamento pode ser confirmado
     *
     * @param currentStatus Status atual do pagamento
     * @returns true se o pagamento pode ser confirmado, false caso contrário
     */
    canBeConfirmed(currentStatus) {
        return this.canTransition(currentStatus, status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO).allowed;
    }
};
exports.StatusTransitionValidator = StatusTransitionValidator;
exports.StatusTransitionValidator = StatusTransitionValidator = __decorate([
    (0, common_1.Injectable)()
], StatusTransitionValidator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,