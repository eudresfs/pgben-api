d8030d1dc2a5221aa34c3a5f7b04dfac
"use strict";
/**
 * Classe base para erros padronizados do sistema SEMTAS
 *
 * Implementa o padrão de erro estruturado conforme definido
 * no catálogo de erros, com suporte a contexto dinâmico,
 * localização e observabilidade.
 *
 * @see docs/ADRs/catalogo-erros.md
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppError = void 0;
const common_1 = require("@nestjs/common");
const catalog_1 = require("./catalog");
/**
 * Classe principal para erros padronizados do sistema
 */
class AppError extends common_1.HttpException {
    /** Código único do erro conforme catálogo */
    errorCode;
    /** Definição completa do erro do catálogo */
    definition;
    /** Contexto dinâmico do erro */
    context;
    /** Timestamp de quando o erro ocorreu */
    timestamp;
    /** Mensagem localizada (se disponível) */
    localizedMessage;
    constructor(errorCode, context = {}, acceptedLanguage = 'pt-BR') {
        const definition = catalog_1.ERROR_CATALOG[errorCode];
        if (!definition) {
            throw new Error(`Código de erro não encontrado no catálogo: ${errorCode}`);
        }
        // Interpolar dados na mensagem se fornecidos
        const message = context.data
            ? AppError.interpolateMessage(definition.message, context.data)
            : definition.message;
        super(message, definition.httpStatus);
        this.name = 'AppError';
        this.errorCode = errorCode;
        this.definition = definition;
        this.context = context;
        this.timestamp = new Date();
        // Definir mensagem localizada
        if (definition.localizedMessages?.[acceptedLanguage]) {
            this.localizedMessage = context.data
                ? AppError.interpolateMessage(definition.localizedMessages[acceptedLanguage], context.data)
                : definition.localizedMessages[acceptedLanguage];
        }
        // Preservar stack trace da causa raiz
        if (context.cause) {
            this.stack = context.cause.stack;
        }
    }
    /**
     * Interpola dados dinâmicos na mensagem usando placeholders
     * Formato: "Erro no campo {fieldName} com valor {value}"
     */
    static interpolateMessage(template, data) {
        return template.replace(/\{([^}]+)\}/g, (match, key) => {
            return data[key]?.toString() || match;
        });
    }
    /**
     * Retorna representação JSON estruturada do erro
     */
    toJSON() {
        return {
            errorCode: this.errorCode,
            message: this.message,
            localizedMessage: this.localizedMessage,
            httpStatus: this.getStatus(),
            category: this.definition.category,
            severity: this.definition.severity,
            timestamp: this.timestamp.toISOString(),
            context: {
                data: this.context.data,
                metadata: this.context.metadata,
                requestId: this.context.requestId,
                userId: this.context.userId,
                operationalContext: this.context.operationalContext,
            },
            legalReference: this.definition.legalReference,
        };
    }
    /**
     * Retorna dados estruturados para logging
     */
    getLogData() {
        return {
            errorCode: this.errorCode,
            category: this.definition.category,
            severity: this.definition.severity,
            httpStatus: this.getStatus(),
            message: this.message,
            localizedMessage: this.localizedMessage,
            timestamp: this.timestamp.toISOString(),
            requestId: this.context.requestId,
            userId: this.context.userId,
            operationalContext: this.context.operationalContext,
            metadata: this.context.metadata,
            legalReference: this.definition.legalReference,
            causedBy: this.context.cause?.message,
        };
    }
    /**
     * Retorna dados seguros para resposta da API (sem informações sensíveis)
     */
    getApiResponse(includeDetails = false) {
        const response = {
            code: this.errorCode,
            message: this.localizedMessage || this.message,
            category: this.definition.category,
            timestamp: this.timestamp.toISOString(),
        };
        if (includeDetails && this.context.data) {
            // Filtrar dados sensíveis antes de incluir
            const safeData = this.filterSensitiveData(this.context.data);
            if (Object.keys(safeData).length > 0) {
                response.details = safeData;
            }
        }
        if (this.definition.legalReference) {
            response.legalReference = this.definition.legalReference;
        }
        return response;
    }
    /**
     * Remove dados sensíveis do contexto para exposição segura
     */
    filterSensitiveData(data) {
        const sensitiveKeys = [
            'password',
            'senha',
            'token',
            'secret',
            'key',
            'cpf',
            'rg',
            'email',
            'telefone',
            'endereco',
            'address',
            'phone',
        ];
        const filtered = {};
        for (const [key, value] of Object.entries(data)) {
            const isSensitive = sensitiveKeys.some((sensitiveKey) => key.toLowerCase().includes(sensitiveKey.toLowerCase()));
            if (!isSensitive) {
                filtered[key] = value;
            }
        }
        return filtered;
    }
    /**
     * Verifica se o erro é crítico baseado na severidade
     */
    isCritical() {
        return this.definition.severity === catalog_1.ErrorSeverity.CRITICAL;
    }
    /**
     * Verifica se o erro é de alta severidade
     */
    isHighSeverity() {
        return this.definition.severity === catalog_1.ErrorSeverity.HIGH || this.isCritical();
    }
    /**
     * Verifica se o erro pertence a uma categoria específica
     */
    isCategory(category) {
        return this.definition.category === category;
    }
    /**
     * Cria uma nova instância do erro com contexto adicional
     */
    withContext(additionalContext) {
        const mergedContext = {
            ...this.context,
            ...additionalContext,
            data: { ...this.context.data, ...additionalContext.data },
            metadata: { ...this.context.metadata, ...additionalContext.metadata },
        };
        return new AppError(this.errorCode, mergedContext);
    }
    /**
     * Factory method para criar erro a partir de código PostgreSQL
     */
    static fromPostgresError(postgresCode, context = {}, acceptedLanguage = 'pt-BR') {
        // Importar o mapa aqui para evitar dependência circular
        const { POSTGRES_ERROR_MAP } = require('./catalog');
        const errorCode = POSTGRES_ERROR_MAP[postgresCode];
        if (!errorCode) {
            // Fallback para erro genérico de sistema
            return new AppError('SYSTEM_DATABASE_ERROR', {
                ...context,
                metadata: {
                    ...context.metadata,
                    postgresCode,
                },
            }, acceptedLanguage);
        }
        return new AppError(errorCode, {
            ...context,
            metadata: {
                ...context.metadata,
                postgresCode,
            },
        }, acceptedLanguage);
    }
}
exports.AppError = AppError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,