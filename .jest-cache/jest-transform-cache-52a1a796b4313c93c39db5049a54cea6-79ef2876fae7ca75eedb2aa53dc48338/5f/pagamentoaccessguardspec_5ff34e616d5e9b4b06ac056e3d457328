c3a20b2b6e4069008ec230a0782fcac6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const pagamento_access_guard_1 = require("../../../guards/pagamento-access.guard");
const pagamento_service_1 = require("../../../services/pagamento.service");
const integracao_solicitacao_service_1 = require("../../../services/integracao-solicitacao.service");
const integracao_cidadao_service_1 = require("../../../services/integracao-cidadao.service");
const pagamento_access_decorator_1 = require("../../../decorators/pagamento-access.decorator");
/**
 * Testes unitários para PagamentoAccessGuard
 *
 * Valida o correto funcionamento do controle de acesso baseado em perfis
 * e unidades para recursos do módulo de pagamento.
 *
 * @author Equipe PGBen
 */
describe('PagamentoAccessGuard', () => {
    let guard;
    let pagamentoService;
    let solicitacaoService;
    let cidadaoService;
    let reflector;
    // Mocks para os testes
    const mockPagamento = {
        id: 'pagamento-id-1',
        solicitacaoId: 'solicitacao-id-1',
        valor: 500,
        status: 'LIBERADO'
    };
    const mockSolicitacaoStatus = {
        id: 'solicitacao-id-1',
        unidadeId: 'unidade-id-1',
        status: 'APROVADA'
    };
    const mockCidadao = {
        id: 'cidadao-id-1',
        nome: 'Maria Silva',
        cpf: '123.456.789-09',
        unidadeId: 'unidade-id-1'
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                pagamento_access_guard_1.PagamentoAccessGuard,
                {
                    provide: core_1.Reflector,
                    useValue: {
                        getAllAndOverride: jest.fn()
                    }
                },
                {
                    provide: pagamento_service_1.PagamentoService,
                    useValue: {
                        findOneWithRelations: jest.fn().mockResolvedValue(mockPagamento),
                        findOne: jest.fn().mockResolvedValue(mockPagamento)
                    }
                },
                {
                    provide: integracao_solicitacao_service_1.IntegracaoSolicitacaoService,
                    useValue: {
                        verificarSolicitacaoAprovada: jest.fn().mockResolvedValue(mockSolicitacaoStatus)
                    }
                },
                {
                    provide: integracao_cidadao_service_1.IntegracaoCidadaoService,
                    useValue: {
                        obterDadosPessoais: jest.fn().mockResolvedValue(mockCidadao)
                    }
                }
            ],
        }).compile();
        guard = module.get(pagamento_access_guard_1.PagamentoAccessGuard);
        reflector = module.get(core_1.Reflector);
        pagamentoService = module.get(pagamento_service_1.PagamentoService);
        solicitacaoService = module.get(integracao_solicitacao_service_1.IntegracaoSolicitacaoService);
        cidadaoService = module.get(integracao_cidadao_service_1.IntegracaoCidadaoService);
    });
    it('deve estar definido', () => {
        expect(guard).toBeDefined();
    });
    describe('canActivate', () => {
        // Mock do contexto de execução
        const mockExecutionContext = {
            switchToHttp: jest.fn().mockReturnValue({
                getRequest: jest.fn().mockReturnValue({
                    user: {
                        id: 'usuario-id-1',
                        perfil: 'operador',
                        unidadeId: 'unidade-id-1'
                    },
                    params: {
                        pagamentoId: 'pagamento-id-1'
                    },
                    method: 'GET',
                    route: {
                        path: '/pagamentos/:pagamentoId'
                    }
                })
            }),
            getHandler: jest.fn(),
            getClass: jest.fn()
        };
        it('deve permitir acesso quando usuário tem perfil permitido', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            // Act
            const resultado = await guard.canActivate(mockExecutionContext);
            // Assert
            expect(resultado).toBeTruthy();
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(pagamento_access_decorator_1.PERFIS_PERMITIDOS_KEY, [mockExecutionContext.getHandler(), mockExecutionContext.getClass()]);
        });
        it('deve negar acesso quando usuário não tem perfil permitido', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin']) // PERFIS_PERMITIDOS_KEY - apenas admin pode acessar
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            // Mudar o perfil do usuário para um não permitido
            const mockContext = {
                ...mockExecutionContext,
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: {
                            id: 'usuario-id-1',
                            perfil: 'atendente', // Perfil não presente na lista de permitidos
                            unidadeId: 'unidade-id-1'
                        },
                        params: {
                            pagamentoId: 'pagamento-id-1'
                        }
                    })
                })
            };
            // Act & Assert
            await expect(guard.canActivate(mockContext)).rejects.toThrow(common_1.ForbiddenException);
        });
        it('deve permitir acesso para admin independente da unidade', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            // Admin de outra unidade
            const mockContext = {
                ...mockExecutionContext,
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: {
                            id: 'usuario-id-1',
                            perfil: 'admin', // Admin pode acessar qualquer unidade
                            unidadeId: 'unidade-id-2' // Unidade diferente
                        },
                        params: {
                            pagamentoId: 'pagamento-id-1'
                        }
                    })
                })
            };
            // Act
            const resultado = await guard.canActivate(mockContext);
            // Assert
            expect(resultado).toBeTruthy();
        });
        it('deve negar acesso quando usuário não é da mesma unidade', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            // Operador de outra unidade
            const mockContext = {
                ...mockExecutionContext,
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: {
                            id: 'usuario-id-1',
                            perfil: 'operador',
                            unidadeId: 'unidade-id-2' // Unidade diferente
                        },
                        params: {
                            pagamentoId: 'pagamento-id-1'
                        }
                    })
                })
            };
            // Act & Assert
            await expect(guard.canActivate(mockContext)).rejects.toThrow(common_1.ForbiddenException);
        });
        it('deve lançar erro quando pagamento não existe', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue(null);
            // Act & Assert
            await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve lançar erro quando solicitação não existe', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            jest.spyOn(solicitacaoService, 'verificarSolicitacaoAprovada').mockResolvedValue(null);
            // Act & Assert
            await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve validar acesso baseado em beneficiário', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            // Request com beneficiário
            const mockContext = {
                ...mockExecutionContext,
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: {
                            id: 'usuario-id-1',
                            perfil: 'operador',
                            unidadeId: 'unidade-id-1'
                        },
                        params: {
                            beneficiarioId: 'cidadao-id-1' // Agora usamos um beneficiário em vez de pagamento
                        }
                    })
                })
            };
            // Act
            const resultado = await guard.canActivate(mockContext);
            // Assert
            expect(resultado).toBeTruthy();
            expect(cidadaoService.obterDadosPessoais).toHaveBeenCalledWith('cidadao-id-1');
        });
        it('deve lançar erro quando beneficiário não existe', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY
            jest.spyOn(cidadaoService, 'obterDadosPessoais').mockResolvedValue(null);
            // Request com beneficiário
            const mockContext = {
                ...mockExecutionContext,
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: {
                            id: 'usuario-id-1',
                            perfil: 'operador',
                            unidadeId: 'unidade-id-1'
                        },
                        params: {
                            beneficiarioId: 'cidadao-inexistente'
                        }
                    })
                })
            };
            // Act & Assert
            await expect(guard.canActivate(mockContext)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve permitir acesso quando verificação de unidade está desativada', async () => {
            // Arrange
            jest.spyOn(reflector, 'getAllAndOverride')
                .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY
                .mockReturnValueOnce(false); // VERIFICAR_UNIDADE_KEY - desativado
            // Operador de outra unidade (normalmente seria negado)
            const mockContext = {
                ...mockExecutionContext,
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: {
                            id: 'usuario-id-1',
                            perfil: 'operador',
                            unidadeId: 'unidade-id-2' // Unidade diferente
                        },
                        params: {
                            pagamentoId: 'pagamento-id-1'
                        }
                    })
                })
            };
            // Act
            const resultado = await guard.canActivate(mockContext);
            // Assert
            expect(resultado).toBeTruthy();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,