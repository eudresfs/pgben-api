{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\guards\\pagamento-access.guard.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\guards\\pagamento-access.guard.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ExecutionContext, ForbiddenException, NotFoundException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\nimport { PagamentoAccessGuard } from '../../../guards/pagamento-access.guard';\nimport { PagamentoService } from '../../../services/pagamento.service';\nimport { IntegracaoSolicitacaoService } from '../../../services/integracao-solicitacao.service';\nimport { IntegracaoCidadaoService } from '../../../services/integracao-cidadao.service';\nimport { PERFIS_PERMITIDOS_KEY, VERIFICAR_UNIDADE_KEY } from '../../../decorators/pagamento-access.decorator';\n\n/**\n * Testes unitários para PagamentoAccessGuard\n * \n * Valida o correto funcionamento do controle de acesso baseado em perfis \n * e unidades para recursos do módulo de pagamento.\n * \n * @author Equipe PGBen\n */\ndescribe('PagamentoAccessGuard', () => {\n  let guard: PagamentoAccessGuard;\n  let pagamentoService: PagamentoService;\n  let solicitacaoService: IntegracaoSolicitacaoService;\n  let cidadaoService: IntegracaoCidadaoService;\n  let reflector: Reflector;\n\n  // Mocks para os testes\n  const mockPagamento = {\n    id: 'pagamento-id-1',\n    solicitacaoId: 'solicitacao-id-1',\n    valor: 500,\n    status: 'LIBERADO'\n  };\n\n  const mockSolicitacaoStatus = {\n    id: 'solicitacao-id-1',\n    unidadeId: 'unidade-id-1',\n    status: 'APROVADA'\n  };\n\n  const mockCidadao = {\n    id: 'cidadao-id-1',\n    nome: 'Maria Silva',\n    cpf: '123.456.789-09',\n    unidadeId: 'unidade-id-1'\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PagamentoAccessGuard,\n        {\n          provide: Reflector,\n          useValue: {\n            getAllAndOverride: jest.fn()\n          }\n        },\n        {\n          provide: PagamentoService,\n          useValue: {\n            findOneWithRelations: jest.fn().mockResolvedValue(mockPagamento),\n            findOne: jest.fn().mockResolvedValue(mockPagamento)\n          }\n        },\n        {\n          provide: IntegracaoSolicitacaoService,\n          useValue: {\n            verificarSolicitacaoAprovada: jest.fn().mockResolvedValue(mockSolicitacaoStatus)\n          }\n        },\n        {\n          provide: IntegracaoCidadaoService,\n          useValue: {\n            obterDadosPessoais: jest.fn().mockResolvedValue(mockCidadao)\n          }\n        }\n      ],\n    }).compile();\n\n    guard = module.get<PagamentoAccessGuard>(PagamentoAccessGuard);\n    reflector = module.get<Reflector>(Reflector);\n    pagamentoService = module.get<PagamentoService>(PagamentoService);\n    solicitacaoService = module.get<IntegracaoSolicitacaoService>(IntegracaoSolicitacaoService);\n    cidadaoService = module.get<IntegracaoCidadaoService>(IntegracaoCidadaoService);\n  });\n\n  it('deve estar definido', () => {\n    expect(guard).toBeDefined();\n  });\n\n  describe('canActivate', () => {\n    // Mock do contexto de execução\n    const mockExecutionContext = {\n      switchToHttp: jest.fn().mockReturnValue({\n        getRequest: jest.fn().mockReturnValue({\n          user: {\n            id: 'usuario-id-1',\n            perfil: 'operador',\n            unidadeId: 'unidade-id-1'\n          },\n          params: {\n            pagamentoId: 'pagamento-id-1'\n          },\n          method: 'GET',\n          route: {\n            path: '/pagamentos/:pagamentoId'\n          }\n        })\n      }),\n      getHandler: jest.fn(),\n      getClass: jest.fn()\n    } as unknown as ExecutionContext;\n\n    it('deve permitir acesso quando usuário tem perfil permitido', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n      \n      // Act\n      const resultado = await guard.canActivate(mockExecutionContext);\n\n      // Assert\n      expect(resultado).toBeTruthy();\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERFIS_PERMITIDOS_KEY,\n        [mockExecutionContext.getHandler(), mockExecutionContext.getClass()]\n      );\n    });\n\n    it('deve negar acesso quando usuário não tem perfil permitido', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin']) // PERFIS_PERMITIDOS_KEY - apenas admin pode acessar\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n\n      // Mudar o perfil do usuário para um não permitido\n      const mockContext = {\n        ...mockExecutionContext,\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: {\n              id: 'usuario-id-1',\n              perfil: 'atendente', // Perfil não presente na lista de permitidos\n              unidadeId: 'unidade-id-1'\n            },\n            params: {\n              pagamentoId: 'pagamento-id-1'\n            }\n          })\n        })\n      } as unknown as ExecutionContext;\n\n      // Act & Assert\n      await expect(guard.canActivate(mockContext)).rejects.toThrow(ForbiddenException);\n    });\n\n    it('deve permitir acesso para admin independente da unidade', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n\n      // Admin de outra unidade\n      const mockContext = {\n        ...mockExecutionContext,\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: {\n              id: 'usuario-id-1',\n              perfil: 'admin', // Admin pode acessar qualquer unidade\n              unidadeId: 'unidade-id-2' // Unidade diferente\n            },\n            params: {\n              pagamentoId: 'pagamento-id-1'\n            }\n          })\n        })\n      } as unknown as ExecutionContext;\n\n      // Act\n      const resultado = await guard.canActivate(mockContext);\n\n      // Assert\n      expect(resultado).toBeTruthy();\n    });\n\n    it('deve negar acesso quando usuário não é da mesma unidade', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n\n      // Operador de outra unidade\n      const mockContext = {\n        ...mockExecutionContext,\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: {\n              id: 'usuario-id-1',\n              perfil: 'operador',\n              unidadeId: 'unidade-id-2' // Unidade diferente\n            },\n            params: {\n              pagamentoId: 'pagamento-id-1'\n            }\n          })\n        })\n      } as unknown as ExecutionContext;\n\n      // Act & Assert\n      await expect(guard.canActivate(mockContext)).rejects.toThrow(ForbiddenException);\n    });\n\n    it('deve lançar erro quando pagamento não existe', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n      \n      jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve lançar erro quando solicitação não existe', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n      \n      jest.spyOn(solicitacaoService, 'verificarSolicitacaoAprovada').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve validar acesso baseado em beneficiário', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n\n      // Request com beneficiário\n      const mockContext = {\n        ...mockExecutionContext,\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: {\n              id: 'usuario-id-1',\n              perfil: 'operador',\n              unidadeId: 'unidade-id-1'\n            },\n            params: {\n              beneficiarioId: 'cidadao-id-1' // Agora usamos um beneficiário em vez de pagamento\n            }\n          })\n        })\n      } as unknown as ExecutionContext;\n\n      // Act\n      const resultado = await guard.canActivate(mockContext);\n\n      // Assert\n      expect(resultado).toBeTruthy();\n      expect(cidadaoService.obterDadosPessoais).toHaveBeenCalledWith('cidadao-id-1');\n    });\n\n    it('deve lançar erro quando beneficiário não existe', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(true); // VERIFICAR_UNIDADE_KEY\n      \n      jest.spyOn(cidadaoService, 'obterDadosPessoais').mockResolvedValue(null);\n\n      // Request com beneficiário\n      const mockContext = {\n        ...mockExecutionContext,\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: {\n              id: 'usuario-id-1',\n              perfil: 'operador',\n              unidadeId: 'unidade-id-1'\n            },\n            params: {\n              beneficiarioId: 'cidadao-inexistente'\n            }\n          })\n        })\n      } as unknown as ExecutionContext;\n\n      // Act & Assert\n      await expect(guard.canActivate(mockContext)).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve permitir acesso quando verificação de unidade está desativada', async () => {\n      // Arrange\n      jest.spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValueOnce(['admin', 'operador']) // PERFIS_PERMITIDOS_KEY\n        .mockReturnValueOnce(false); // VERIFICAR_UNIDADE_KEY - desativado\n\n      // Operador de outra unidade (normalmente seria negado)\n      const mockContext = {\n        ...mockExecutionContext,\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: {\n              id: 'usuario-id-1',\n              perfil: 'operador',\n              unidadeId: 'unidade-id-2' // Unidade diferente\n            },\n            params: {\n              pagamentoId: 'pagamento-id-1'\n            }\n          })\n        })\n      } as unknown as ExecutionContext;\n\n      // Act\n      const resultado = await guard.canActivate(mockContext);\n\n      // Assert\n      expect(resultado).toBeTruthy();\n    });\n  });\n});\n"],"version":3}