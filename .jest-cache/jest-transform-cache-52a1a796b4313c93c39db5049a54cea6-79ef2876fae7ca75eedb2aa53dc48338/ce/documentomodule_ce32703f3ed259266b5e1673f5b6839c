092883b16320842f1b0455c271f9e520
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentoModule = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const platform_express_1 = require("@nestjs/platform-express");
const documento_controller_1 = require("./controllers/documento.controller");
const documento_service_1 = require("./services/documento.service");
const storage_provider_factory_1 = require("./factories/storage-provider.factory");
const local_storage_adapter_1 = require("./adapters/local-storage.adapter");
const s3_storage_adapter_1 = require("./adapters/s3-storage.adapter");
const mime_validation_service_1 = require("./services/mime-validation.service");
const input_sanitizer_validator_1 = require("./validators/input-sanitizer.validator");
const multer_1 = require("multer");
const config_1 = require("@nestjs/config");
const entities_1 = require("../../entities");
const auth_module_1 = require("../../auth/auth.module");
const unified_logger_module_1 = require("../../shared/logging/unified-logger.module");
const unified_logger_service_1 = require("../../shared/logging/unified-logger.service");
const shared_module_1 = require("../../shared/shared.module");
/**
 * Módulo de Documentos
 *
 * Responsável por gerenciar os documentos anexados às solicitações de benefícios,
 * incluindo upload, verificação e remoção.
 */
let DocumentoModule = class DocumentoModule {
};
exports.DocumentoModule = DocumentoModule;
exports.DocumentoModule = DocumentoModule = __decorate([
    (0, common_1.Module)({
        imports: [
            typeorm_1.TypeOrmModule.forFeature([entities_1.Documento]),
            platform_express_1.MulterModule.registerAsync({
                imports: [config_1.ConfigModule],
                useFactory: async (configService) => ({
                    storage: (0, multer_1.memoryStorage)(),
                    fileFilter: (req, file, cb) => {
                        const allowedMimes = [
                            'application/pdf',
                            'image/jpeg',
                            'image/png',
                            'image/gif',
                            'application/msword',
                            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                            'application/vnd.ms-excel',
                            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                        ];
                        if (allowedMimes.includes(file.mimetype)) {
                            cb(null, true);
                        }
                        else {
                            cb(new Error('Tipo de arquivo não permitido'), false);
                        }
                    },
                    limits: {
                        fileSize: configService.get('MAX_FILE_SIZE') || 10 * 1024 * 1024, // 10MB
                    },
                }),
                inject: [config_1.ConfigService],
            }),
            config_1.ConfigModule,
            auth_module_1.AuthModule,
            unified_logger_module_1.UnifiedLoggerModule,
            shared_module_1.SharedModule,
        ],
        controllers: [documento_controller_1.DocumentoController],
        providers: [
            documento_service_1.DocumentoService,
            mime_validation_service_1.MimeValidationService,
            storage_provider_factory_1.StorageProviderFactory,
            local_storage_adapter_1.LocalStorageAdapter,
            {
                provide: s3_storage_adapter_1.S3StorageAdapter,
                useFactory: (configService, unifiedLoggerService) => {
                    // Verifica se todas as configurações AWS estão presentes
                    const bucketName = configService.get('AWS_S3_BUCKET');
                    const region = configService.get('AWS_REGION');
                    const accessKeyId = configService.get('AWS_ACCESS_KEY_ID');
                    const secretAccessKey = configService.get('AWS_SECRET_ACCESS_KEY');
                    if (!bucketName || !region || !accessKeyId || !secretAccessKey) {
                        // Retorna null quando AWS não está configurado completamente
                        // Isso evita erros de injeção de dependência
                        return null;
                    }
                    return new s3_storage_adapter_1.S3StorageAdapter(configService, unifiedLoggerService);
                },
                inject: [config_1.ConfigService, unified_logger_service_1.UnifiedLoggerService],
            },
            input_sanitizer_validator_1.InputSanitizerValidator,
        ],
        exports: [documento_service_1.DocumentoService, storage_provider_factory_1.StorageProviderFactory],
    })
], DocumentoModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,