{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\audit\\controllers\\audit.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\audit\\controllers\\audit.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Query,\n  Param,\n  UseGuards,\n  HttpStatus,\n  ParseUUIDPipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiQuery,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { Throttle } from '@nestjs/throttler';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/role.decorator';\nimport { GetUser } from '../../auth/decorators/get-user.decorator';\nimport { GetClientInfo } from '../../common/decorators/get-client-info.decorator';\nimport { AuditService } from '../services/audit.service';\nimport {\n  CreateAuditLogDto,\n  AuditLogQueryDto,\n  AuditLogResponseDto,\n  AuditLogStatsDto,\n} from '../dto/audit-log.dto';\nimport { Usuario } from '../../entities/usuario.entity';\nimport { ClientInfo } from '../../common/interfaces/client-info.interface';\n\n@ApiTags('Auditoria')\n@Controller('audit')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\nexport class AuditController {\n  constructor(private readonly auditService: AuditService) {}\n\n  @Post('logs')\n  @Roles('ADMIN', 'GESTOR')\n  @Throttle({ default: { limit: 10, ttl: 60000 } }) // 10 requests per minute\n  @ApiOperation({\n    summary: 'Criar log de auditoria',\n    description: 'Cria um novo registro de auditoria no sistema',\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Log de auditoria criado com sucesso',\n    type: AuditLogResponseDto,\n  })\n  @ApiResponse({\n    status: HttpStatus.BAD_REQUEST,\n    description: 'Dados inválidos fornecidos',\n  })\n  @ApiResponse({\n    status: HttpStatus.FORBIDDEN,\n    description: 'Acesso negado - permissões insuficientes',\n  })\n  async createLog(\n    @Body(ValidationPipe) createAuditLogDto: CreateAuditLogDto,\n    @GetUser() user: Usuario,\n    @GetClientInfo() clientInfo: ClientInfo,\n  ): Promise<AuditLogResponseDto> {\n    // Adiciona informações do cliente se não fornecidas\n    const logData = {\n      ...createAuditLogDto,\n      client_ip: createAuditLogDto.client_ip || clientInfo.ip,\n      user_agent: createAuditLogDto.user_agent || clientInfo.userAgent,\n    };\n\n    const log = await this.auditService.createLog(logData);\n    return this.mapToResponseDto(log);\n  }\n\n  @Get('logs')\n  @Roles('ADMIN', 'GESTOR', 'AUDITOR')\n  @Throttle({ default: { limit: 30, ttl: 60000 } }) // 30 requests per minute\n  @ApiOperation({\n    summary: 'Listar logs de auditoria',\n    description: 'Busca logs de auditoria com filtros e paginação',\n  })\n  @ApiQuery({\n    name: 'usuario_id',\n    required: false,\n    description: 'Filtrar por ID do usuário',\n  })\n  @ApiQuery({\n    name: 'action',\n    required: false,\n    description: 'Filtrar por ação',\n  })\n  @ApiQuery({\n    name: 'resource_type',\n    required: false,\n    description: 'Filtrar por tipo de recurso',\n  })\n  @ApiQuery({\n    name: 'severity',\n    required: false,\n    description: 'Filtrar por severidade',\n  })\n  @ApiQuery({\n    name: 'start_date',\n    required: false,\n    description: 'Data de início (ISO 8601)',\n  })\n  @ApiQuery({\n    name: 'end_date',\n    required: false,\n    description: 'Data de fim (ISO 8601)',\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    description: 'Número da página',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    description: 'Itens por página',\n  })\n  @ApiQuery({\n    name: 'security_events_only',\n    required: false,\n    description: 'Filtrar apenas eventos de segurança',\n  })\n  @ApiQuery({\n    name: 'critical_only',\n    required: false,\n    description: 'Filtrar apenas eventos críticos',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Lista de logs de auditoria',\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'array',\n          items: { $ref: '#/components/schemas/AuditLogResponseDto' },\n        },\n        total: { type: 'number' },\n        page: { type: 'number' },\n        limit: { type: 'number' },\n        totalPages: { type: 'number' },\n      },\n    },\n  })\n  async findLogs(@Query(ValidationPipe) queryDto: AuditLogQueryDto): Promise<{\n    data: AuditLogResponseDto[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return await this.auditService.findLogs(queryDto);\n  }\n\n  @Get('logs/:id')\n  @Roles('ADMIN', 'GESTOR', 'AUDITOR')\n  @Throttle({ default: { limit: 60, ttl: 60000 } }) // 60 requests per minute\n  @ApiOperation({\n    summary: 'Buscar log específico',\n    description: 'Busca um log de auditoria específico por ID',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do log de auditoria',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Log de auditoria encontrado',\n    type: AuditLogResponseDto,\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Log de auditoria não encontrado',\n  })\n  async findLogById(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise<AuditLogResponseDto | null> {\n    return await this.auditService.findLogById(id);\n  }\n\n  @Get('stats')\n  @Roles('ADMIN', 'GESTOR')\n  @Throttle({ default: { limit: 10, ttl: 60000 } }) // 10 requests per minute\n  @ApiOperation({\n    summary: 'Estatísticas de auditoria',\n    description: 'Gera estatísticas e métricas dos logs de auditoria',\n  })\n  @ApiQuery({\n    name: 'start_date',\n    required: false,\n    description: 'Data de início para análise (ISO 8601)',\n  })\n  @ApiQuery({\n    name: 'end_date',\n    required: false,\n    description: 'Data de fim para análise (ISO 8601)',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Estatísticas de auditoria',\n    type: AuditLogStatsDto,\n  })\n  async getStats(\n    @Query('start_date') startDate?: string,\n    @Query('end_date') endDate?: string,\n  ): Promise<AuditLogStatsDto> {\n    const start = startDate ? new Date(startDate) : undefined;\n    const end = endDate ? new Date(endDate) : undefined;\n\n    return await this.auditService.getStats(start, end);\n  }\n\n  @Post('cleanup')\n  @Roles('ADMIN')\n  @Throttle({ default: { limit: 1, ttl: 300000 } }) // 1 request per 5 minutes\n  @ApiOperation({\n    summary: 'Limpeza manual de logs',\n    description:\n      'Executa limpeza manual de logs antigos (apenas administradores)',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Limpeza executada com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' },\n        timestamp: { type: 'string' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.FORBIDDEN,\n    description: 'Acesso negado - apenas administradores',\n  })\n  async manualCleanup(\n    @GetUser() user: Usuario,\n    @GetClientInfo() clientInfo: ClientInfo,\n  ): Promise<{ message: string; timestamp: string }> {\n    // Log da ação administrativa\n    await this.auditService.logUserAction(\n      user.id,\n      'SYSTEM_CONFIG' as any,\n      'AuditLog',\n      undefined,\n      'Limpeza manual de logs executada',\n      { action: 'manual_cleanup' },\n      {\n        ip: clientInfo.ip,\n        userAgent: clientInfo.userAgent,\n        method: 'POST',\n        url: '/api/audit/cleanup',\n      },\n    );\n\n    await this.auditService.cleanupOldLogs();\n\n    return {\n      message: 'Limpeza de logs executada com sucesso',\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Get('security-events')\n  @Roles('ADMIN', 'GESTOR', 'AUDITOR')\n  @Throttle({ default: { limit: 20, ttl: 60000 } }) // 20 requests per minute\n  @ApiOperation({\n    summary: 'Eventos de segurança recentes',\n    description: 'Lista eventos de segurança das últimas 24 horas',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Lista de eventos de segurança',\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'array',\n          items: { $ref: '#/components/schemas/AuditLogResponseDto' },\n        },\n        total: { type: 'number' },\n      },\n    },\n  })\n  async getSecurityEvents(): Promise<{\n    data: AuditLogResponseDto[];\n    total: number;\n  }> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - 24 * 60 * 60 * 1000); // 24h atrás\n\n    const result = await this.auditService.findLogs({\n      start_date: startDate.toISOString(),\n      end_date: endDate.toISOString(),\n      security_events_only: true,\n      sort_by: 'created_at',\n      sort_order: 'DESC',\n      limit: 100,\n    });\n\n    return {\n      data: result.data,\n      total: result.total,\n    };\n  }\n\n  @Get('critical-events')\n  @Roles('ADMIN', 'GESTOR')\n  @Throttle({ default: { limit: 20, ttl: 60000 } }) // 20 requests per minute\n  @ApiOperation({\n    summary: 'Eventos críticos recentes',\n    description: 'Lista eventos críticos das últimas 24 horas',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Lista de eventos críticos',\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'array',\n          items: { $ref: '#/components/schemas/AuditLogResponseDto' },\n        },\n        total: { type: 'number' },\n      },\n    },\n  })\n  async getCriticalEvents(): Promise<{\n    data: AuditLogResponseDto[];\n    total: number;\n  }> {\n    const endDate = new Date();\n    const startDate = new Date(endDate.getTime() - 24 * 60 * 60 * 1000); // 24h atrás\n\n    const result = await this.auditService.findLogs({\n      start_date: startDate.toISOString(),\n      end_date: endDate.toISOString(),\n      critical_only: true,\n      sort_by: 'created_at',\n      sort_order: 'DESC',\n      limit: 50,\n    });\n\n    return {\n      data: result.data,\n      total: result.total,\n    };\n  }\n\n  /**\n   * Método privado para mapear entidade para DTO\n   */\n  private mapToResponseDto(log: any): AuditLogResponseDto {\n    return {\n      id: log.id,\n      usuario_id: log.usuario_id,\n      usuario: log.usuario\n        ? {\n            id: log.usuario.id,\n            nome: log.usuario.nome,\n            email: log.usuario.email,\n          }\n        : undefined,\n      action: log.action,\n      resource_type: log.resource_type,\n      resource_id: log.resource_id,\n      description: log.description,\n      severity: log.severity,\n      client_ip: log.client_ip,\n      user_agent: log.user_agent,\n      created_at: log.created_at,\n      metadata: log.metadata,\n    };\n  }\n}\n"],"version":3}