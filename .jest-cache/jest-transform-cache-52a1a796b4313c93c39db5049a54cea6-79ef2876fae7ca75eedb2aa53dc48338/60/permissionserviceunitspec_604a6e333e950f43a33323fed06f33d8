8fceaa1d0f07fd0e281daf1331e636b4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const permission_service_1 = require("@/auth/services/permission.service");
const permission_repository_1 = require("@/auth/repositories/permission.repository");
const role_permission_repository_1 = require("@/auth/repositories/role-permission.repository");
const user_permission_repository_1 = require("@/auth/repositories/user-permission.repository");
const permission_scope_repository_1 = require("@/auth/repositories/permission-scope.repository");
const cache_manager_1 = require("@nestjs/cache-manager");
const auditoria_service_1 = require("@modules/auditoria/services/auditoria.service");
const user_permission_entity_1 = require("@/auth/entities/user-permission.entity");
/**
 * Testes unitários para o PermissionService
 *
 * Estes testes verificam o funcionamento do serviço de permissões,
 * responsável por verificar se um usuário tem permissão para acessar
 * determinados recursos e funcionalidades.
 */
describe('PermissionService', () => {
    let service;
    let permissionRepository;
    let rolePermissionRepository;
    let userPermissionRepository;
    let permissionScopeRepository;
    let cacheManager;
    let auditoriaService;
    beforeEach(async () => {
        // Mocks dos repositórios e dependências
        const mockPermissionRepository = {
            findByName: jest.fn(),
            findById: jest.fn(),
            findByComposite: jest.fn(),
            findComposedPermissions: jest.fn(),
        };
        const mockRolePermissionRepository = {
            findPermissionsByUserRoles: jest.fn(),
        };
        const mockUserPermissionRepository = {
            findByUserAndPermission: jest.fn(),
            findValidPermissions: jest.fn(),
            createUserPermission: jest.fn(),
            updateUserPermission: jest.fn(),
        };
        const mockPermissionScopeRepository = {
            findByPermission: jest.fn(),
        };
        const mockCacheManager = {
            get: jest.fn(),
            set: jest.fn(),
            del: jest.fn(),
        };
        const mockAuditoriaService = {
            create: jest.fn().mockImplementation(() => Promise.resolve({})),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                permission_service_1.PermissionService,
                {
                    provide: permission_repository_1.PermissionRepository,
                    useValue: mockPermissionRepository,
                },
                {
                    provide: role_permission_repository_1.RolePermissionRepository,
                    useValue: mockRolePermissionRepository,
                },
                {
                    provide: user_permission_repository_1.UserPermissionRepository,
                    useValue: mockUserPermissionRepository,
                },
                {
                    provide: permission_scope_repository_1.PermissionScopeRepository,
                    useValue: mockPermissionScopeRepository,
                },
                {
                    provide: cache_manager_1.CACHE_MANAGER,
                    useValue: mockCacheManager,
                },
                {
                    provide: auditoria_service_1.AuditoriaService,
                    useValue: mockAuditoriaService,
                },
            ],
        }).compile();
        service = module.get(permission_service_1.PermissionService);
        permissionRepository = module.get(permission_repository_1.PermissionRepository);
        rolePermissionRepository = module.get(role_permission_repository_1.RolePermissionRepository);
        userPermissionRepository = module.get(user_permission_repository_1.UserPermissionRepository);
        permissionScopeRepository = module.get(permission_scope_repository_1.PermissionScopeRepository);
        cacheManager = module.get(cache_manager_1.CACHE_MANAGER);
        auditoriaService = module.get(auditoria_service_1.AuditoriaService);
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
    describe('hasPermission', () => {
        const userId = 'user-123';
        const permissionName = 'solicitacao.listar';
        const options = {
            userId,
            permissionName,
            scopeType: user_permission_entity_1.ScopeType.UNIT,
            scopeId: 'unidade-123',
        };
        it('deve retornar true quando encontrar permissão em cache', async () => {
            // Mock do cache retornando true
            cacheManager.get.mockResolvedValueOnce(true);
            const result = await service.hasPermission(options);
            expect(cacheManager.get).toHaveBeenCalledWith(expect.stringContaining(userId));
            expect(result).toBe(true);
        });
        it('deve verificar permissão direta quando não estiver em cache', async () => {
            // Cache não encontrou a permissão
            cacheManager.get.mockResolvedValueOnce(undefined);
            // O usuário tem a permissão direta
            const mockPermission = { id: 'perm-123', name: permissionName };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findValidPermissions.mockResolvedValueOnce([{
                    id: 'user-perm-123',
                    permissionId: mockPermission.id,
                    scopeType: user_permission_entity_1.ScopeType.UNIT,
                    scopeId: 'unidade-123',
                    granted: true,
                    validUntil: new Date(Date.now() + 86400000), // Válido por mais 1 dia
                }]);
            const result = await service.hasPermission(options);
            expect(permissionRepository.findByName).toHaveBeenCalledWith(permissionName);
            expect(userPermissionRepository.findValidPermissions).toHaveBeenCalledWith(userId, mockPermission.id);
            expect(cacheManager.set).toHaveBeenCalledWith(expect.stringContaining(userId), true, expect.any(Number));
            expect(result).toBe(true);
        });
        it('deve verificar permissão de role quando não tiver permissão direta', async () => {
            // Cache não encontrou a permissão
            cacheManager.get.mockResolvedValueOnce(undefined);
            // O usuário não tem permissão direta
            const mockPermission = { id: 'perm-123', name: permissionName };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findValidPermissions.mockResolvedValueOnce([]);
            // Mas tem permissão via role
            rolePermissionRepository.findPermissionsByUserRoles.mockResolvedValueOnce([{
                    permissionId: mockPermission.id,
                    roleName: 'ADMIN'
                }]);
            const result = await service.hasPermission(options);
            expect(rolePermissionRepository.findPermissionsByUserRoles).toHaveBeenCalledWith(userId, mockPermission.id);
            expect(cacheManager.set).toHaveBeenCalledWith(expect.stringContaining(userId), true, expect.any(Number));
            expect(result).toBe(true);
        });
        it('deve verificar permissão composta quando não tiver permissão direta nem via role', async () => {
            // Cache não encontrou a permissão
            cacheManager.get.mockResolvedValueOnce(undefined);
            // O usuário não tem permissão direta nem via role
            const mockPermission = { id: 'perm-123', name: permissionName, isComposite: true };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findValidPermissions.mockResolvedValueOnce([]);
            rolePermissionRepository.findPermissionsByUserRoles.mockResolvedValueOnce([]);
            // É uma permissão composta
            const childPermission = { id: 'child-perm-123', name: 'solicitacao.visualizar' };
            permissionRepository.findComposedPermissions.mockResolvedValueOnce([childPermission]);
            // E o usuário tem a permissão filha
            userPermissionRepository.findValidPermissions.mockResolvedValueOnce([{
                    id: 'user-perm-456',
                    permissionId: childPermission.id,
                    scopeType: user_permission_entity_1.ScopeType.UNIT,
                    scopeId: 'unidade-123',
                    granted: true,
                    validUntil: null,
                }]);
            const result = await service.hasPermission(options);
            expect(permissionRepository.findComposedPermissions).toHaveBeenCalledWith(mockPermission.id);
            expect(userPermissionRepository.findValidPermissions).toHaveBeenCalledWith(userId, childPermission.id);
            expect(cacheManager.set).toHaveBeenCalledWith(expect.stringContaining(userId), true, expect.any(Number));
            expect(result).toBe(true);
        });
        it('deve retornar false quando o usuário não tem nenhuma permissão', async () => {
            // Cache não encontrou a permissão
            cacheManager.get.mockResolvedValueOnce(undefined);
            // O usuário não tem permissão direta, via role ou composta
            const mockPermission = { id: 'perm-123', name: permissionName, isComposite: false };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findValidPermissions.mockResolvedValueOnce([]);
            rolePermissionRepository.findPermissionsByUserRoles.mockResolvedValueOnce([]);
            const result = await service.hasPermission(options);
            expect(cacheManager.set).toHaveBeenCalledWith(expect.stringContaining(userId), false, expect.any(Number));
            expect(result).toBe(false);
        });
    });
    describe('grantPermission', () => {
        it('deve atribuir uma nova permissão a um usuário', async () => {
            const userId = 'user-123';
            const permissionName = 'solicitacao.listar';
            const scopeType = user_permission_entity_1.ScopeType.UNIT;
            const scopeId = 'unidade-123';
            const createdBy = 'admin-user';
            const mockPermission = { id: 'perm-123', name: permissionName };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(null);
            userPermissionRepository.createUserPermission.mockResolvedValueOnce({
                id: 'user-perm-123',
                userId,
                permissionId: mockPermission.id,
                scopeType,
                scopeId,
                granted: true,
                createdBy,
            });
            const result = await service.grantPermission(userId, permissionName, scopeType, scopeId, null, createdBy);
            expect(permissionRepository.findByName).toHaveBeenCalledWith(permissionName);
            expect(userPermissionRepository.findByUserAndPermission).toHaveBeenCalledWith(userId, mockPermission.id, scopeType, scopeId);
            expect(userPermissionRepository.createUserPermission).toHaveBeenCalledWith({
                userId,
                permissionId: mockPermission.id,
                granted: true,
                scopeType,
                scopeId,
                validUntil: null,
                createdBy,
            });
            expect(auditoriaService.create).toHaveBeenCalled();
            expect(result).toBe(true);
        });
        it('deve atualizar uma permissão existente', async () => {
            const userId = 'user-123';
            const permissionName = 'solicitacao.listar';
            const scopeType = user_permission_entity_1.ScopeType.UNIT;
            const scopeId = 'unidade-123';
            const createdBy = 'admin-user';
            const mockPermission = { id: 'perm-123', name: permissionName };
            const existingPermission = {
                id: 'user-perm-123',
                userId,
                permissionId: mockPermission.id,
                scopeType,
                scopeId,
                granted: false,
            };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(existingPermission);
            userPermissionRepository.updateUserPermission.mockResolvedValueOnce({
                ...existingPermission,
                granted: true,
                updatedBy: createdBy,
            });
            const result = await service.grantPermission(userId, permissionName, scopeType, scopeId, null, createdBy);
            expect(userPermissionRepository.updateUserPermission).toHaveBeenCalledWith(existingPermission.id, {
                granted: true,
                validUntil: null,
                updatedBy: createdBy,
            });
            expect(auditoriaService.create).toHaveBeenCalled();
            expect(result).toBe(true);
        });
    });
    describe('revokePermission', () => {
        it('deve revogar uma permissão existente', async () => {
            const userId = 'user-123';
            const permissionName = 'solicitacao.listar';
            const scopeType = user_permission_entity_1.ScopeType.UNIT;
            const scopeId = 'unidade-123';
            const createdBy = 'admin-user';
            const mockPermission = { id: 'perm-123', name: permissionName };
            const existingPermission = {
                id: 'user-perm-123',
                userId,
                permissionId: mockPermission.id,
                scopeType,
                scopeId,
                granted: true,
            };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(existingPermission);
            userPermissionRepository.updateUserPermission.mockResolvedValueOnce({
                ...existingPermission,
                granted: false,
                updatedBy: createdBy,
            });
            const result = await service.revokePermission(userId, permissionName, scopeType, scopeId, createdBy);
            expect(userPermissionRepository.updateUserPermission).toHaveBeenCalledWith(existingPermission.id, {
                granted: false,
                updatedBy: createdBy,
            });
            expect(auditoriaService.create).toHaveBeenCalled();
            expect(result).toBe(true);
        });
        it('deve retornar false quando a permissão não existe', async () => {
            const userId = 'user-123';
            const permissionName = 'solicitacao.listar';
            const scopeType = user_permission_entity_1.ScopeType.UNIT;
            const scopeId = 'unidade-123';
            const createdBy = 'admin-user';
            const mockPermission = { id: 'perm-123', name: permissionName };
            permissionRepository.findByName.mockResolvedValueOnce(mockPermission);
            userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(null);
            const result = await service.revokePermission(userId, permissionName, scopeType, scopeId, createdBy);
            expect(userPermissionRepository.updateUserPermission).not.toHaveBeenCalled();
            expect(auditoriaService.criarLog).not.toHaveBeenCalled();
            expect(result).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,