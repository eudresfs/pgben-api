6c1511a135261b1118959c93a794cca5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsuarioController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const usuario_service_1 = require("../services/usuario.service");
const create_usuario_dto_1 = require("../dto/create-usuario.dto");
const update_usuario_dto_1 = require("../dto/update-usuario.dto");
const update_status_usuario_dto_1 = require("../dto/update-status-usuario.dto");
const update_senha_dto_1 = require("../dto/update-senha.dto");
const alterar_senha_primeiro_acesso_dto_1 = require("../dto/alterar-senha-primeiro-acesso.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const primeiro_acesso_guard_1 = require("../../../auth/guards/primeiro-acesso.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const allow_primeiro_acesso_decorator_1 = require("../../../auth/decorators/allow-primeiro-acesso.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
/**
 * Controlador de usuários
 *
 * Responsável por gerenciar as rotas relacionadas a usuários
 */
let UsuarioController = class UsuarioController {
    usuarioService;
    constructor(usuarioService) {
        this.usuarioService = usuarioService;
    }
    /**
     * Lista todos os usuários com filtros e paginação
     */
    async findAll(page, limit, search, role, status, unidade_id) {
        return this.usuarioService.findAll({
            page: page ? +page : undefined,
            limit: limit ? +limit : undefined,
            search,
            role,
            status,
            unidade_id,
        });
    }
    /**
     * Retorna todas as roles (papéis) disponíveis no sistema
     */
    async findAllRoles() {
        return this.usuarioService.findAllRoles();
    }
    /**
     * Obtém o perfil do usuário atual
     */
    async getProfile(req) {
        return this.usuarioService.getProfile(req.user.id);
    }
    /**
     * Obtém detalhes de um usuário específico
     */
    async findOne(id) {
        return this.usuarioService.findById(id);
    }
    /**
     * Cria um novo usuário
     */
    async create(createUsuarioDto) {
        return this.usuarioService.create(createUsuarioDto);
    }
    /**
     * Atualiza um usuário existente
     */
    async update(id, updateUsuarioDto) {
        return this.usuarioService.update(id, updateUsuarioDto);
    }
    /**
     * Atualiza o status de um usuário
     */
    async updateStatus(id, updateStatusUsuarioDto) {
        return this.usuarioService.updateStatus(id, updateStatusUsuarioDto);
    }
    /**
     * Altera a senha do usuário
     */
    async updateSenha(id, updateSenhaDto, req) {
        // A verificação agora é feita pelo sistema de permissões granulares
        return this.usuarioService.updateSenha(id, updateSenhaDto);
    }
    /**
     * Altera a senha no primeiro acesso
     */
    async alterarSenhaPrimeiroAcesso(alterarSenhaDto, req) {
        const userId = req.user.sub;
        return this.usuarioService.alterarSenhaPrimeiroAcesso(userId, alterarSenhaDto);
    }
    /**
     * Remove um usuário (soft delete)
     */
    async remove(id) {
        return this.usuarioService.remove(id);
    }
};
exports.UsuarioController = UsuarioController;
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.listar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'query.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar usuários' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de usuários retornada com sucesso',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        type: Number,
        description: 'Página atual',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        description: 'Itens por página',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'search',
        required: false,
        type: String,
        description: 'Termo de busca',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'role',
        required: false,
        type: String,
        description: 'Filtro por papel',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'status',
        required: false,
        type: String,
        description: 'Filtro por status',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'unidade_id',
        required: false,
        type: String,
        description: 'Filtro por unidade',
    }),
    __param(0, (0, common_1.Query)('page')),
    __param(1, (0, common_1.Query)('limit')),
    __param(2, (0, common_1.Query)('search')),
    __param(3, (0, common_1.Query)('role')),
    __param(4, (0, common_1.Query)('status')),
    __param(5, (0, common_1.Query)('unidade_id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number, String, String, String, String]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('roles'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.listar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar todas as roles disponíveis' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de roles retornada com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "findAllRoles", null);
__decorate([
    (0, common_1.Get)('me'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.perfil.visualizar',
        scopeType: user_permission_entity_1.ScopeType.SELF
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Obter perfil do usuário atual' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Perfil obtido com sucesso' }),
    __param(0, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "getProfile", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'usuario.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Obter detalhes de um usuário' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Usuário encontrado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Usuário não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "findOne", null);
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.criar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'body.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Criar novo usuário' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Usuário criado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Email, CPF ou matrícula já em uso',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_usuario_dto_1.CreateUsuarioDto !== "undefined" && create_usuario_dto_1.CreateUsuarioDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "create", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.editar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'usuario.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Atualizar usuário existente' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Usuário atualizado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Usuário não encontrado' }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Email, CPF ou matrícula já em uso',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof update_usuario_dto_1.UpdateUsuarioDto !== "undefined" && update_usuario_dto_1.UpdateUsuarioDto) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "update", null);
__decorate([
    (0, common_1.Patch)(':id/status'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.status.alterar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'usuario.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Ativar/inativar usuário' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Status atualizado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Usuário não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_d = typeof update_status_usuario_dto_1.UpdateStatusUsuarioDto !== "undefined" && update_status_usuario_dto_1.UpdateStatusUsuarioDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "updateStatus", null);
__decorate([
    (0, common_1.Put)(':id/senha'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.senha.alterar',
        scopeType: user_permission_entity_1.ScopeType.SELF,
        scopeIdExpression: 'params.id'
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Alterar senha' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Senha alterada com sucesso' }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou senha atual incorreta',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Usuário não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof update_senha_dto_1.UpdateSenhaDto !== "undefined" && update_senha_dto_1.UpdateSenhaDto) === "function" ? _e : Object, Object]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "updateSenha", null);
__decorate([
    (0, common_1.Put)('/primeiro-acesso/alterar-senha'),
    (0, allow_primeiro_acesso_decorator_1.AllowPrimeiroAcesso)(),
    (0, swagger_1.ApiOperation)({ summary: 'Alterar senha no primeiro acesso' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Senha alterada com sucesso' }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou usuário não está em primeiro acesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Usuário não encontrado' }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_f = typeof alterar_senha_primeiro_acesso_dto_1.AlterarSenhaPrimeiroAcessoDto !== "undefined" && alterar_senha_primeiro_acesso_dto_1.AlterarSenhaPrimeiroAcessoDto) === "function" ? _f : Object, Object]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "alterarSenhaPrimeiroAcesso", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'usuario.remover',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'usuario.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Remover usuário (soft delete)' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Usuário removido com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Usuário não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], UsuarioController.prototype, "remove", null);
exports.UsuarioController = UsuarioController = __decorate([
    (0, swagger_1.ApiTags)('Usuários'),
    (0, common_1.Controller)('usuario'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, primeiro_acesso_guard_1.PrimeiroAcessoGuard) // PermissionGuard removido temporariamente para teste 1.1
    ,
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof usuario_service_1.UsuarioService !== "undefined" && usuario_service_1.UsuarioService) === "function" ? _a : Object])
], UsuarioController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,