{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\services\\permission.service.unit.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\services\\permission.service.unit.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { PermissionService, PermissionCheckOptions } from '@/auth/services/permission.service';\nimport { PermissionRepository } from '@/auth/repositories/permission.repository';\nimport { RolePermissionRepository } from '@/auth/repositories/role-permission.repository';\nimport { UserPermissionRepository } from '@/auth/repositories/user-permission.repository';\nimport { PermissionScopeRepository } from '@/auth/repositories/permission-scope.repository';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { AuditoriaService } from '@modules/auditoria/services/auditoria.service';\nimport { ScopeType } from '@/auth/entities/user-permission.entity';\nimport { Permission } from '@/auth/entities/permission.entity';\nimport { TipoOperacao } from '@modules/auditoria/enums/tipo-operacao.enum';\n\n/**\n * Testes unitários para o PermissionService\n * \n * Estes testes verificam o funcionamento do serviço de permissões,\n * responsável por verificar se um usuário tem permissão para acessar\n * determinados recursos e funcionalidades.\n */\ndescribe('PermissionService', () => {\n  let service: PermissionService;\n  let permissionRepository: PermissionRepository;\n  let rolePermissionRepository: RolePermissionRepository;\n  let userPermissionRepository: UserPermissionRepository;\n  let permissionScopeRepository: PermissionScopeRepository;\n  let cacheManager: jest.Mocked<any>;\n  let auditoriaService: jest.Mocked<AuditoriaService>;\n\n  beforeEach(async () => {\n    // Mocks dos repositórios e dependências\n    const mockPermissionRepository = {\n      findByName: jest.fn(),\n      findById: jest.fn(),\n      findByComposite: jest.fn(),\n      findComposedPermissions: jest.fn(),\n    };\n\n    const mockRolePermissionRepository = {\n      findPermissionsByUserRoles: jest.fn(),\n    };\n\n    const mockUserPermissionRepository = {\n      findByUserAndPermission: jest.fn(),\n      findValidPermissions: jest.fn(),\n      createUserPermission: jest.fn(),\n      updateUserPermission: jest.fn(),\n    };\n\n    const mockPermissionScopeRepository = {\n      findByPermission: jest.fn(),\n    };\n\n    const mockCacheManager = {\n      get: jest.fn(),\n      set: jest.fn(),\n      del: jest.fn(),\n    };\n\n    const mockAuditoriaService = {\n      create: jest.fn().mockImplementation(() => Promise.resolve({})),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PermissionService,\n        {\n          provide: PermissionRepository,\n          useValue: mockPermissionRepository,\n        },\n        {\n          provide: RolePermissionRepository,\n          useValue: mockRolePermissionRepository,\n        },\n        {\n          provide: UserPermissionRepository,\n          useValue: mockUserPermissionRepository,\n        },\n        {\n          provide: PermissionScopeRepository,\n          useValue: mockPermissionScopeRepository,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n        {\n          provide: AuditoriaService,\n          useValue: mockAuditoriaService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<PermissionService>(PermissionService);\n    permissionRepository = module.get<PermissionRepository>(PermissionRepository);\n    rolePermissionRepository = module.get<RolePermissionRepository>(RolePermissionRepository);\n    userPermissionRepository = module.get<UserPermissionRepository>(UserPermissionRepository);\n    permissionScopeRepository = module.get<PermissionScopeRepository>(PermissionScopeRepository);\n    cacheManager = module.get(CACHE_MANAGER);\n    auditoriaService = module.get<AuditoriaService>(AuditoriaService);\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('hasPermission', () => {\n    const userId = 'user-123';\n    const permissionName = 'solicitacao.listar';\n    const options: PermissionCheckOptions = {\n      userId,\n      permissionName,\n      scopeType: ScopeType.UNIT,\n      scopeId: 'unidade-123',\n    };\n\n    it('deve retornar true quando encontrar permissão em cache', async () => {\n      // Mock do cache retornando true\n      cacheManager.get.mockResolvedValueOnce(true);\n\n      const result = await service.hasPermission(options);\n\n      expect(cacheManager.get).toHaveBeenCalledWith(\n        expect.stringContaining(userId),\n      );\n      expect(result).toBe(true);\n    });\n\n    it('deve verificar permissão direta quando não estiver em cache', async () => {\n      // Cache não encontrou a permissão\n      cacheManager.get.mockResolvedValueOnce(undefined);\n      \n      // O usuário tem a permissão direta\n      const mockPermission = { id: 'perm-123', name: permissionName } as Permission;\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findValidPermissions.mockResolvedValueOnce([{\n        id: 'user-perm-123',\n        permissionId: mockPermission.id,\n        scopeType: ScopeType.UNIT,\n        scopeId: 'unidade-123',\n        granted: true,\n        validUntil: new Date(Date.now() + 86400000), // Válido por mais 1 dia\n      }]);\n\n      const result = await service.hasPermission(options);\n\n      expect(permissionRepository.findByName).toHaveBeenCalledWith(permissionName);\n      expect(userPermissionRepository.findValidPermissions).toHaveBeenCalledWith(\n        userId,\n        mockPermission.id\n      );\n      expect(cacheManager.set).toHaveBeenCalledWith(\n        expect.stringContaining(userId),\n        true,\n        expect.any(Number)\n      );\n      expect(result).toBe(true);\n    });\n\n    it('deve verificar permissão de role quando não tiver permissão direta', async () => {\n      // Cache não encontrou a permissão\n      cacheManager.get.mockResolvedValueOnce(undefined);\n      \n      // O usuário não tem permissão direta\n      const mockPermission = { id: 'perm-123', name: permissionName } as Permission;\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findValidPermissions.mockResolvedValueOnce([]);\n      \n      // Mas tem permissão via role\n      rolePermissionRepository.findPermissionsByUserRoles.mockResolvedValueOnce([{\n        permissionId: mockPermission.id,\n        roleName: 'ADMIN'\n      }]);\n\n      const result = await service.hasPermission(options);\n\n      expect(rolePermissionRepository.findPermissionsByUserRoles).toHaveBeenCalledWith(\n        userId,\n        mockPermission.id\n      );\n      expect(cacheManager.set).toHaveBeenCalledWith(\n        expect.stringContaining(userId),\n        true,\n        expect.any(Number)\n      );\n      expect(result).toBe(true);\n    });\n\n    it('deve verificar permissão composta quando não tiver permissão direta nem via role', async () => {\n      // Cache não encontrou a permissão\n      cacheManager.get.mockResolvedValueOnce(undefined);\n      \n      // O usuário não tem permissão direta nem via role\n      const mockPermission = { id: 'perm-123', name: permissionName, isComposite: true } as Permission;\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findValidPermissions.mockResolvedValueOnce([]);\n      rolePermissionRepository.findPermissionsByUserRoles.mockResolvedValueOnce([]);\n      \n      // É uma permissão composta\n      const childPermission = { id: 'child-perm-123', name: 'solicitacao.visualizar' } as Permission;\n      permissionRepository.findComposedPermissions.mockResolvedValueOnce([childPermission]);\n      \n      // E o usuário tem a permissão filha\n      userPermissionRepository.findValidPermissions.mockResolvedValueOnce([{\n        id: 'user-perm-456',\n        permissionId: childPermission.id,\n        scopeType: ScopeType.UNIT,\n        scopeId: 'unidade-123',\n        granted: true,\n        validUntil: null,\n      }]);\n\n      const result = await service.hasPermission(options);\n\n      expect(permissionRepository.findComposedPermissions).toHaveBeenCalledWith(mockPermission.id);\n      expect(userPermissionRepository.findValidPermissions).toHaveBeenCalledWith(\n        userId,\n        childPermission.id\n      );\n      expect(cacheManager.set).toHaveBeenCalledWith(\n        expect.stringContaining(userId),\n        true,\n        expect.any(Number)\n      );\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando o usuário não tem nenhuma permissão', async () => {\n      // Cache não encontrou a permissão\n      cacheManager.get.mockResolvedValueOnce(undefined);\n      \n      // O usuário não tem permissão direta, via role ou composta\n      const mockPermission = { id: 'perm-123', name: permissionName, isComposite: false } as Permission;\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findValidPermissions.mockResolvedValueOnce([]);\n      rolePermissionRepository.findPermissionsByUserRoles.mockResolvedValueOnce([]);\n\n      const result = await service.hasPermission(options);\n\n      expect(cacheManager.set).toHaveBeenCalledWith(\n        expect.stringContaining(userId),\n        false,\n        expect.any(Number)\n      );\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('grantPermission', () => {\n    it('deve atribuir uma nova permissão a um usuário', async () => {\n      const userId = 'user-123';\n      const permissionName = 'solicitacao.listar';\n      const scopeType = ScopeType.UNIT;\n      const scopeId = 'unidade-123';\n      const createdBy = 'admin-user';\n\n      const mockPermission = { id: 'perm-123', name: permissionName } as Permission;\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(null);\n      userPermissionRepository.createUserPermission.mockResolvedValueOnce({\n        id: 'user-perm-123',\n        userId,\n        permissionId: mockPermission.id,\n        scopeType,\n        scopeId,\n        granted: true,\n        createdBy,\n      });\n\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        null,\n        createdBy,\n      );\n\n      expect(permissionRepository.findByName).toHaveBeenCalledWith(permissionName);\n      expect(userPermissionRepository.findByUserAndPermission).toHaveBeenCalledWith(\n        userId,\n        mockPermission.id,\n        scopeType,\n        scopeId,\n      );\n      expect(userPermissionRepository.createUserPermission).toHaveBeenCalledWith({\n        userId,\n        permissionId: mockPermission.id,\n        granted: true,\n        scopeType,\n        scopeId,\n        validUntil: null,\n        createdBy,\n      });\n      expect(auditoriaService.create).toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n\n    it('deve atualizar uma permissão existente', async () => {\n      const userId = 'user-123';\n      const permissionName = 'solicitacao.listar';\n      const scopeType = ScopeType.UNIT;\n      const scopeId = 'unidade-123';\n      const createdBy = 'admin-user';\n\n      const mockPermission = { id: 'perm-123', name: permissionName } as Permission;\n      const existingPermission = {\n        id: 'user-perm-123',\n        userId,\n        permissionId: mockPermission.id,\n        scopeType,\n        scopeId,\n        granted: false,\n      };\n\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(existingPermission);\n      userPermissionRepository.updateUserPermission.mockResolvedValueOnce({\n        ...existingPermission,\n        granted: true,\n        updatedBy: createdBy,\n      });\n\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        null,\n        createdBy,\n      );\n\n      expect(userPermissionRepository.updateUserPermission).toHaveBeenCalledWith(\n        existingPermission.id,\n        {\n          granted: true,\n          validUntil: null,\n          updatedBy: createdBy,\n        },\n      );\n      expect(auditoriaService.create).toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('revokePermission', () => {\n    it('deve revogar uma permissão existente', async () => {\n      const userId = 'user-123';\n      const permissionName = 'solicitacao.listar';\n      const scopeType = ScopeType.UNIT;\n      const scopeId = 'unidade-123';\n      const createdBy = 'admin-user';\n\n      const mockPermission = { id: 'perm-123', name: permissionName } as Permission;\n      const existingPermission = {\n        id: 'user-perm-123',\n        userId,\n        permissionId: mockPermission.id,\n        scopeType,\n        scopeId,\n        granted: true,\n      };\n\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(existingPermission);\n      userPermissionRepository.updateUserPermission.mockResolvedValueOnce({\n        ...existingPermission,\n        granted: false,\n        updatedBy: createdBy,\n      });\n\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        createdBy,\n      );\n\n      expect(userPermissionRepository.updateUserPermission).toHaveBeenCalledWith(\n        existingPermission.id,\n        {\n          granted: false,\n          updatedBy: createdBy,\n        },\n      );\n      expect(auditoriaService.create).toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando a permissão não existe', async () => {\n      const userId = 'user-123';\n      const permissionName = 'solicitacao.listar';\n      const scopeType = ScopeType.UNIT;\n      const scopeId = 'unidade-123';\n      const createdBy = 'admin-user';\n\n      const mockPermission = { id: 'perm-123', name: permissionName } as Permission;\n\n      permissionRepository.findByName.mockResolvedValueOnce(mockPermission);\n      userPermissionRepository.findByUserAndPermission.mockResolvedValueOnce(null);\n\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        createdBy,\n      );\n\n      expect(userPermissionRepository.updateUserPermission).not.toHaveBeenCalled();\n      expect(auditoriaService.criarLog).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n  });\n});\n"],"version":3}