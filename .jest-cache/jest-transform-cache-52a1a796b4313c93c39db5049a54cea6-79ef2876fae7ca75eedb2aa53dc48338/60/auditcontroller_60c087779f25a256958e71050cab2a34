2ed9df52bdc1d4cd64ff219c1ca3f32b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const throttler_1 = require("@nestjs/throttler");
const jwt_auth_guard_1 = require("../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../auth/guards/roles.guard");
const role_decorator_1 = require("../../auth/decorators/role.decorator");
const get_user_decorator_1 = require("../../auth/decorators/get-user.decorator");
const get_client_info_decorator_1 = require("../../common/decorators/get-client-info.decorator");
const audit_service_1 = require("../services/audit.service");
const audit_log_dto_1 = require("../dto/audit-log.dto");
const usuario_entity_1 = require("../../entities/usuario.entity");
const client_info_interface_1 = require("../../common/interfaces/client-info.interface");
let AuditController = class AuditController {
    auditService;
    constructor(auditService) {
        this.auditService = auditService;
    }
    async createLog(createAuditLogDto, user, clientInfo) {
        // Adiciona informações do cliente se não fornecidas
        const logData = {
            ...createAuditLogDto,
            client_ip: createAuditLogDto.client_ip || clientInfo.ip,
            user_agent: createAuditLogDto.user_agent || clientInfo.userAgent,
        };
        const log = await this.auditService.createLog(logData);
        return this.mapToResponseDto(log);
    }
    async findLogs(queryDto) {
        return await this.auditService.findLogs(queryDto);
    }
    async findLogById(id) {
        return await this.auditService.findLogById(id);
    }
    async getStats(startDate, endDate) {
        const start = startDate ? new Date(startDate) : undefined;
        const end = endDate ? new Date(endDate) : undefined;
        return await this.auditService.getStats(start, end);
    }
    async manualCleanup(user, clientInfo) {
        // Log da ação administrativa
        await this.auditService.logUserAction(user.id, 'SYSTEM_CONFIG', 'AuditLog', undefined, 'Limpeza manual de logs executada', { action: 'manual_cleanup' }, {
            ip: clientInfo.ip,
            userAgent: clientInfo.userAgent,
            method: 'POST',
            url: '/api/audit/cleanup',
        });
        await this.auditService.cleanupOldLogs();
        return {
            message: 'Limpeza de logs executada com sucesso',
            timestamp: new Date().toISOString(),
        };
    }
    async getSecurityEvents() {
        const endDate = new Date();
        const startDate = new Date(endDate.getTime() - 24 * 60 * 60 * 1000); // 24h atrás
        const result = await this.auditService.findLogs({
            start_date: startDate.toISOString(),
            end_date: endDate.toISOString(),
            security_events_only: true,
            sort_by: 'created_at',
            sort_order: 'DESC',
            limit: 100,
        });
        return {
            data: result.data,
            total: result.total,
        };
    }
    async getCriticalEvents() {
        const endDate = new Date();
        const startDate = new Date(endDate.getTime() - 24 * 60 * 60 * 1000); // 24h atrás
        const result = await this.auditService.findLogs({
            start_date: startDate.toISOString(),
            end_date: endDate.toISOString(),
            critical_only: true,
            sort_by: 'created_at',
            sort_order: 'DESC',
            limit: 50,
        });
        return {
            data: result.data,
            total: result.total,
        };
    }
    /**
     * Método privado para mapear entidade para DTO
     */
    mapToResponseDto(log) {
        return {
            id: log.id,
            usuario_id: log.usuario_id,
            usuario: log.usuario
                ? {
                    id: log.usuario.id,
                    nome: log.usuario.nome,
                    email: log.usuario.email,
                }
                : undefined,
            action: log.action,
            resource_type: log.resource_type,
            resource_id: log.resource_id,
            description: log.description,
            severity: log.severity,
            client_ip: log.client_ip,
            user_agent: log.user_agent,
            created_at: log.created_at,
            metadata: log.metadata,
        };
    }
};
exports.AuditController = AuditController;
__decorate([
    (0, common_1.Post)('logs'),
    (0, role_decorator_1.Roles)('ADMIN', 'GESTOR'),
    (0, throttler_1.Throttle)({ default: { limit: 10, ttl: 60000 } }) // 10 requests per minute
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Criar log de auditoria',
        description: 'Cria um novo registro de auditoria no sistema',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.CREATED,
        description: 'Log de auditoria criado com sucesso',
        type: audit_log_dto_1.AuditLogResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos fornecidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.FORBIDDEN,
        description: 'Acesso negado - permissões insuficientes',
    }),
    __param(0, (0, common_1.Body)(common_1.ValidationPipe)),
    __param(1, (0, get_user_decorator_1.GetUser)()),
    __param(2, (0, get_client_info_decorator_1.GetClientInfo)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof audit_log_dto_1.CreateAuditLogDto !== "undefined" && audit_log_dto_1.CreateAuditLogDto) === "function" ? _b : Object, typeof (_c = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _c : Object, typeof (_d = typeof client_info_interface_1.ClientInfo !== "undefined" && client_info_interface_1.ClientInfo) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], AuditController.prototype, "createLog", null);
__decorate([
    (0, common_1.Get)('logs'),
    (0, role_decorator_1.Roles)('ADMIN', 'GESTOR', 'AUDITOR'),
    (0, throttler_1.Throttle)({ default: { limit: 30, ttl: 60000 } }) // 30 requests per minute
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Listar logs de auditoria',
        description: 'Busca logs de auditoria com filtros e paginação',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'usuario_id',
        required: false,
        description: 'Filtrar por ID do usuário',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'action',
        required: false,
        description: 'Filtrar por ação',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'resource_type',
        required: false,
        description: 'Filtrar por tipo de recurso',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'severity',
        required: false,
        description: 'Filtrar por severidade',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'start_date',
        required: false,
        description: 'Data de início (ISO 8601)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'end_date',
        required: false,
        description: 'Data de fim (ISO 8601)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        description: 'Número da página',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        description: 'Itens por página',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'security_events_only',
        required: false,
        description: 'Filtrar apenas eventos de segurança',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'critical_only',
        required: false,
        description: 'Filtrar apenas eventos críticos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Lista de logs de auditoria',
        schema: {
            type: 'object',
            properties: {
                data: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/AuditLogResponseDto' },
                },
                total: { type: 'number' },
                page: { type: 'number' },
                limit: { type: 'number' },
                totalPages: { type: 'number' },
            },
        },
    }),
    __param(0, (0, common_1.Query)(common_1.ValidationPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_f = typeof audit_log_dto_1.AuditLogQueryDto !== "undefined" && audit_log_dto_1.AuditLogQueryDto) === "function" ? _f : Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], AuditController.prototype, "findLogs", null);
__decorate([
    (0, common_1.Get)('logs/:id'),
    (0, role_decorator_1.Roles)('ADMIN', 'GESTOR', 'AUDITOR'),
    (0, throttler_1.Throttle)({ default: { limit: 60, ttl: 60000 } }) // 60 requests per minute
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar log específico',
        description: 'Busca um log de auditoria específico por ID',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do log de auditoria',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Log de auditoria encontrado',
        type: audit_log_dto_1.AuditLogResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Log de auditoria não encontrado',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], AuditController.prototype, "findLogById", null);
__decorate([
    (0, common_1.Get)('stats'),
    (0, role_decorator_1.Roles)('ADMIN', 'GESTOR'),
    (0, throttler_1.Throttle)({ default: { limit: 10, ttl: 60000 } }) // 10 requests per minute
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Estatísticas de auditoria',
        description: 'Gera estatísticas e métricas dos logs de auditoria',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'start_date',
        required: false,
        description: 'Data de início para análise (ISO 8601)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'end_date',
        required: false,
        description: 'Data de fim para análise (ISO 8601)',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Estatísticas de auditoria',
        type: audit_log_dto_1.AuditLogStatsDto,
    }),
    __param(0, (0, common_1.Query)('start_date')),
    __param(1, (0, common_1.Query)('end_date')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], AuditController.prototype, "getStats", null);
__decorate([
    (0, common_1.Post)('cleanup'),
    (0, role_decorator_1.Roles)('ADMIN'),
    (0, throttler_1.Throttle)({ default: { limit: 1, ttl: 300000 } }) // 1 request per 5 minutes
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Limpeza manual de logs',
        description: 'Executa limpeza manual de logs antigos (apenas administradores)',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Limpeza executada com sucesso',
        schema: {
            type: 'object',
            properties: {
                message: { type: 'string' },
                timestamp: { type: 'string' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.FORBIDDEN,
        description: 'Acesso negado - apenas administradores',
    }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, get_client_info_decorator_1.GetClientInfo)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_k = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _k : Object, typeof (_l = typeof client_info_interface_1.ClientInfo !== "undefined" && client_info_interface_1.ClientInfo) === "function" ? _l : Object]),
    __metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], AuditController.prototype, "manualCleanup", null);
__decorate([
    (0, common_1.Get)('security-events'),
    (0, role_decorator_1.Roles)('ADMIN', 'GESTOR', 'AUDITOR'),
    (0, throttler_1.Throttle)({ default: { limit: 20, ttl: 60000 } }) // 20 requests per minute
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Eventos de segurança recentes',
        description: 'Lista eventos de segurança das últimas 24 horas',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Lista de eventos de segurança',
        schema: {
            type: 'object',
            properties: {
                data: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/AuditLogResponseDto' },
                },
                total: { type: 'number' },
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_o = typeof Promise !== "undefined" && Promise) === "function" ? _o : Object)
], AuditController.prototype, "getSecurityEvents", null);
__decorate([
    (0, common_1.Get)('critical-events'),
    (0, role_decorator_1.Roles)('ADMIN', 'GESTOR'),
    (0, throttler_1.Throttle)({ default: { limit: 20, ttl: 60000 } }) // 20 requests per minute
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Eventos críticos recentes',
        description: 'Lista eventos críticos das últimas 24 horas',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Lista de eventos críticos',
        schema: {
            type: 'object',
            properties: {
                data: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/AuditLogResponseDto' },
                },
                total: { type: 'number' },
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_p = typeof Promise !== "undefined" && Promise) === "function" ? _p : Object)
], AuditController.prototype, "getCriticalEvents", null);
exports.AuditController = AuditController = __decorate([
    (0, swagger_1.ApiTags)('Auditoria'),
    (0, common_1.Controller)('audit'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof audit_service_1.AuditService !== "undefined" && audit_service_1.AuditService) === "function" ? _a : Object])
], AuditController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,