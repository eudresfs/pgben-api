{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\util\\template-engine.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\util\\template-engine.ts"],"sourcesContent":["import * as Handlebars from 'handlebars';\nimport { TemplateInvalidoException } from '../exceptions';\n\n/**\n * Motor de renderização de templates baseado em Handlebars.\n * Fornece funcionalidades para renderizar templates com variáveis,\n * condicionais e loops, além de helpers para formatação.\n */\nexport class TemplateEngine {\n  // Armazena templates compilados em cache para melhor performance\n  private static templatesCompilados = new Map<\n    string,\n    HandlebarsTemplateDelegate\n  >();\n\n  constructor() {\n    // Garantir que os helpers estejam registrados\n    TemplateEngine.inicializar();\n  }\n\n  /**\n   * Registra os helpers personalizados do Handlebars.\n   * Executado uma vez na inicialização.\n   */\n  /**\n   * Compila um template para uso posterior\n   *\n   * @param templateString - String contendo o template com placeholders\n   * @returns Template compilado pronto para renderização\n   * @throws Error se a compilação falhar\n   */\n  compile(templateString: string): any {\n    try {\n      return Handlebars.compile(templateString, { strict: false });\n    } catch (error) {\n      throw new Error(`Erro na compilação do template: ${error.message}`);\n    }\n  }\n\n  /**\n   * Renderiza um template com os dados fornecidos\n   *\n   * @param templateString - String contendo o template com placeholders\n   * @param dados - Objeto com dados para substituir os placeholders\n   * @param opcoes - Opções adicionais como sanitização\n   * @returns String com o template renderizado\n   */\n  async render(\n    templateString: string,\n    dados: Record<string, any>,\n    opcoes: { sanitize?: boolean } = {},\n  ): Promise<string> {\n    try {\n      // Se solicitado, sanitiza os dados para prevenir XSS\n      const dadosFinal = opcoes.sanitize\n        ? TemplateEngine.sanitizarDados(dados)\n        : dados;\n\n      // Compila o template\n      const template = this.compile(templateString);\n\n      // Renderiza com os dados\n      return template(dadosFinal);\n    } catch (error) {\n      throw new Error(`Erro na renderização do template: ${error.message}`);\n    }\n  }\n\n  static inicializar(): void {\n    // Helper para formatação de data\n    Handlebars.registerHelper(\n      'formatarData',\n      function (data: Date | string, formato: string) {\n        if (!data) {\n          return '';\n        }\n\n        const dataObj = data instanceof Date ? data : new Date(data);\n        if (isNaN(dataObj.getTime())) {\n          return data;\n        }\n\n        // Formato padrão DD/MM/YYYY\n        if (!formato || formato === 'data') {\n          return `${dataObj.getDate().toString().padStart(2, '0')}/${(dataObj.getMonth() + 1).toString().padStart(2, '0')}/${dataObj.getFullYear()}`;\n        }\n\n        // Formato data e hora DD/MM/YYYY HH:MM\n        if (formato === 'dataHora') {\n          return `${dataObj.getDate().toString().padStart(2, '0')}/${(dataObj.getMonth() + 1).toString().padStart(2, '0')}/${dataObj.getFullYear()} ${dataObj.getHours().toString().padStart(2, '0')}:${dataObj.getMinutes().toString().padStart(2, '0')}`;\n        }\n\n        return data;\n      },\n    );\n\n    // Helper para formatação de moeda\n    Handlebars.registerHelper('formatarMoeda', function (valor: number) {\n      if (valor === undefined || valor === null) {\n        return '';\n      }\n\n      return new Intl.NumberFormat('pt-BR', {\n        style: 'currency',\n        currency: 'BRL',\n      }).format(valor);\n    });\n\n    // Helper para formatação de CPF: XXX.XXX.XXX-XX\n    Handlebars.registerHelper('formatarCpf', function (cpf: string) {\n      if (!cpf || typeof cpf !== 'string') {\n        return cpf;\n      }\n\n      // Remove caracteres não numéricos\n      const cpfNumerico = cpf.replace(/\\D/g, '');\n\n      // Verifica se tem 11 dígitos\n      if (cpfNumerico.length !== 11) {\n        return cpf;\n      }\n\n      // Formato: XXX.XXX.XXX-XX\n      return `${cpfNumerico.substring(0, 3)}.${cpfNumerico.substring(3, 6)}.${cpfNumerico.substring(6, 9)}-${cpfNumerico.substring(9, 11)}`;\n    });\n\n    // Helper para formatação de texto maiúsculo\n    Handlebars.registerHelper('maiusculo', function (texto: string) {\n      if (!texto) {\n        return '';\n      }\n      return texto.toUpperCase();\n    });\n\n    // Helper para formatação de texto minúsculo\n    Handlebars.registerHelper('minusculo', function (texto: string) {\n      if (!texto) {\n        return '';\n      }\n      return texto.toLowerCase();\n    });\n\n    // Helper para formatação de primeira letra maiúscula\n    Handlebars.registerHelper('capitalizar', function (texto: string) {\n      if (!texto) {\n        return '';\n      }\n      return texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();\n    });\n  }\n\n  /**\n   * Renderiza um template com os dados fornecidos.\n   *\n   * @param templateString - String contendo o template com placeholders\n   * @param dados - Objeto com dados para substituir os placeholders\n   * @param templateId - Identificador do template (para cache e mensagens de erro)\n   * @returns String com o template renderizado\n   * @throws TemplateInvalidoException se a renderização falhar\n   */\n  static renderizar(\n    templateString: string,\n    dados: Record<string, any>,\n    templateId: string,\n  ): string {\n    try {\n      // Tenta obter o template compilado do cache\n      let templateCompilado = this.templatesCompilados.get(templateId);\n\n      // Se não existir no cache, compila e armazena\n      if (!templateCompilado) {\n        templateCompilado = Handlebars.compile(templateString, {\n          strict: false,\n        });\n        this.templatesCompilados.set(templateId, templateCompilado);\n      }\n\n      // Renderiza o template com os dados\n      return templateCompilado(dados);\n    } catch (error) {\n      // Em caso de erro, lança exceção específica\n      throw new TemplateInvalidoException(\n        templateId,\n        `Erro na renderização: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Sanitiza dados antes da renderização para prevenir ataques XSS.\n   *\n   * @param dados - Objeto com dados a serem sanitizados\n   * @returns Objeto com dados sanitizados\n   */\n  static sanitizarDados(dados: Record<string, any>): Record<string, any> {\n    const resultado: Record<string, any> = {};\n\n    // Função recursiva para sanitizar strings em objetos aninhados\n    const sanitizarValor = (valor: any): any => {\n      if (typeof valor === 'string') {\n        // Escapa códigos HTML para prevenir XSS\n        return Handlebars.escapeExpression(valor);\n      } else if (Array.isArray(valor)) {\n        return valor.map(sanitizarValor);\n      } else if (valor !== null && typeof valor === 'object') {\n        const obj: Record<string, any> = {};\n        for (const key in valor) {\n          if (Object.prototype.hasOwnProperty.call(valor, key)) {\n            obj[key] = sanitizarValor(valor[key]);\n          }\n        }\n        return obj;\n      }\n      return valor;\n    };\n\n    // Aplica sanitização a todas as propriedades do objeto\n    for (const key in dados) {\n      if (Object.prototype.hasOwnProperty.call(dados, key)) {\n        resultado[key] = sanitizarValor(dados[key]);\n      }\n    }\n\n    return resultado;\n  }\n\n  /**\n   * Valida a existência de variáveis usadas no template.\n   *\n   * @param templateString - String contendo o template com placeholders\n   * @param variaveis - Array de nomes de variáveis disponíveis\n   * @returns Array de variáveis não definidas (vazio se todas existirem)\n   */\n  static validarVariaveis(\n    templateString: string,\n    variaveis: string[],\n  ): string[] {\n    // Expressão regular para encontrar variáveis no formato {{variavel}}\n    // Ignora helpers, condicionais e loops ({{#if}}, {{#each}}, {{formatarData}})\n    const regex = /{{([^#/][^{}]+)}}/g;\n    const matches = templateString.matchAll(regex);\n    const variaveisEncontradas = new Set<string>();\n\n    // Coleta todas as variáveis encontradas no template\n    for (const match of matches) {\n      const variavel = match[1].trim().split(' ')[0];\n      // Ignora helpers e operadores\n      if (\n        !variavel.startsWith('formatarData') &&\n        !variavel.startsWith('formatarMoeda') &&\n        !variavel.startsWith('formatarCpf') &&\n        !variavel.startsWith('maiusculo') &&\n        !variavel.startsWith('minusculo') &&\n        !variavel.startsWith('capitalizar') &&\n        !variavel.includes('.')\n      ) {\n        variaveisEncontradas.add(variavel);\n      }\n    }\n\n    // Verifica quais variáveis encontradas não estão disponíveis\n    const variaveisNaoDefinidas: string[] = [];\n    for (const variavel of variaveisEncontradas) {\n      if (!variaveis.includes(variavel)) {\n        variaveisNaoDefinidas.push(variavel);\n      }\n    }\n\n    return variaveisNaoDefinidas;\n  }\n}\n"],"version":3}