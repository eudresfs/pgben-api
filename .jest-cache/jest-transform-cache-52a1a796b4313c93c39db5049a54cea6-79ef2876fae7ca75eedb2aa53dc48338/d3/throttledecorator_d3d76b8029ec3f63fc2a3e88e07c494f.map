{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\common\\decorators\\throttle.decorator.ts","mappings":";;;AAAA,2CAAiD;AACjD,iDAA6C;AAE7C;;;;;GAKG;AAEH;;;;;GAKG;AACI,MAAM,YAAY,GAAG,GAAG,EAAE;IAC/B,OAAO,IAAA,wBAAe,EACpB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CACjD,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,YAAY,gBAIvB;AAEF;;;;;GAKG;AACI,MAAM,cAAc,GAAG,GAAG,EAAE;IACjC,OAAO,IAAA,wBAAe,EACpB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CACjD,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,cAAc,kBAIzB;AAEF;;;;;GAKG;AACI,MAAM,WAAW,GAAG,GAAG,EAAE;IAC9B,OAAO,IAAA,wBAAe,EACpB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAClD,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,WAAW,eAItB;AAEF;;;;;GAKG;AACI,MAAM,gBAAgB,GAAG,GAAG,EAAE;IACnC,OAAO,IAAA,wBAAe,EACpB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CACjD,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,gBAAgB,oBAI3B;AAEF;;;;;GAKG;AACI,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,OAAO,IAAA,wBAAe,EACpB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,CAClD,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,qBAAqB,yBAIhC;AAEF;;;;;GAKG;AACI,MAAM,eAAe,GAAG,GAAG,EAAE;IAClC,OAAO,IAAA,wBAAe,EACpB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CAClD,CAAC;AACJ,CAAC,CAAC;AAJW,QAAA,eAAe,mBAI1B;AAEF;;;;;;GAMG;AACI,MAAM,cAAc,GAAG,CAAC,KAAa,EAAE,GAAW,EAAE,EAAE;IAC3D,OAAO,IAAA,wBAAe,EAAC,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;AAChE,CAAC,CAAC;AAFW,QAAA,cAAc,kBAEzB;AAEF;;;GAGG;AACI,MAAM,YAAY,GAAG,GAAG,EAAE;IAC/B,OAAO,IAAA,wBAAe,EAAC,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AACtE,CAAC,CAAC;AAFW,QAAA,YAAY,gBAEvB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\common\\decorators\\throttle.decorator.ts"],"sourcesContent":["import { applyDecorators } from '@nestjs/common';\nimport { Throttle } from '@nestjs/throttler';\n\n/**\n * Decorators customizados para Rate Limiting - Sistema SEMTAS\n *\n * Fornece decorators pré-configurados para diferentes tipos de endpoints\n * com limites apropriados para cada caso de uso.\n */\n\n/**\n * Rate limiting para endpoints de autenticação\n * Mais restritivo para prevenir ataques de força bruta\n *\n * Limite: 5 tentativas por 5 minutos\n */\nexport const ThrottleAuth = () => {\n  return applyDecorators(\n    Throttle({ default: { limit: 5, ttl: 300000 } }), // 5 tentativas em 5 minutos\n  );\n};\n\n/**\n * Rate limiting para endpoints de upload de documentos\n * Limite moderado para uploads de arquivos\n *\n * Limite: 10 uploads por minuto\n */\nexport const ThrottleUpload = () => {\n  return applyDecorators(\n    Throttle({ default: { limit: 10, ttl: 60000 } }), // 10 uploads por minuto\n  );\n};\n\n/**\n * Rate limiting para API geral\n * Limite mais generoso para operações normais\n *\n * Limite: 200 requests por minuto\n */\nexport const ThrottleApi = () => {\n  return applyDecorators(\n    Throttle({ default: { limit: 200, ttl: 60000 } }), // 200 requests por minuto\n  );\n};\n\n/**\n * Rate limiting para endpoints críticos\n * Muito restritivo para operações sensíveis\n *\n * Limite: 3 tentativas por 10 minutos\n */\nexport const ThrottleCritical = () => {\n  return applyDecorators(\n    Throttle({ default: { limit: 3, ttl: 600000 } }), // 3 tentativas em 10 minutos\n  );\n};\n\n/**\n * Rate limiting para recuperação de senha\n * Restritivo para prevenir spam de emails\n *\n * Limite: 3 tentativas por hora\n */\nexport const ThrottlePasswordReset = () => {\n  return applyDecorators(\n    Throttle({ default: { limit: 3, ttl: 3600000 } }), // 3 tentativas por hora\n  );\n};\n\n/**\n * Rate limiting para relatórios\n * Moderado para operações que consomem recursos\n *\n * Limite: 20 requests por 5 minutos\n */\nexport const ThrottleReports = () => {\n  return applyDecorators(\n    Throttle({ default: { limit: 20, ttl: 300000 } }), // 20 requests em 5 minutos\n  );\n};\n\n/**\n * Rate limiting customizável\n * Permite definir limites específicos\n *\n * @param limit - Número máximo de requests\n * @param ttl - Tempo em milissegundos\n */\nexport const ThrottleCustom = (limit: number, ttl: number) => {\n  return applyDecorators(Throttle({ default: { limit, ttl } }));\n};\n\n/**\n * Pular rate limiting para endpoints específicos\n * Útil para health checks e métricas\n */\nexport const SkipThrottle = () => {\n  return applyDecorators(Throttle({ default: { limit: 0, ttl: 0 } }));\n};\n"],"version":3}