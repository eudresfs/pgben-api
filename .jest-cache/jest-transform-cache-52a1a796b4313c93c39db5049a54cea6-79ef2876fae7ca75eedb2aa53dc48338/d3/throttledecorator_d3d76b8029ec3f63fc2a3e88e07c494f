f7baa52525f82c1690c3e4b89118dd7d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkipThrottle = exports.ThrottleCustom = exports.ThrottleReports = exports.ThrottlePasswordReset = exports.ThrottleCritical = exports.ThrottleApi = exports.ThrottleUpload = exports.ThrottleAuth = void 0;
const common_1 = require("@nestjs/common");
const throttler_1 = require("@nestjs/throttler");
/**
 * Decorators customizados para Rate Limiting - Sistema SEMTAS
 *
 * Fornece decorators pré-configurados para diferentes tipos de endpoints
 * com limites apropriados para cada caso de uso.
 */
/**
 * Rate limiting para endpoints de autenticação
 * Mais restritivo para prevenir ataques de força bruta
 *
 * Limite: 5 tentativas por 5 minutos
 */
const ThrottleAuth = () => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit: 5, ttl: 300000 } }));
};
exports.ThrottleAuth = ThrottleAuth;
/**
 * Rate limiting para endpoints de upload de documentos
 * Limite moderado para uploads de arquivos
 *
 * Limite: 10 uploads por minuto
 */
const ThrottleUpload = () => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit: 10, ttl: 60000 } }));
};
exports.ThrottleUpload = ThrottleUpload;
/**
 * Rate limiting para API geral
 * Limite mais generoso para operações normais
 *
 * Limite: 200 requests por minuto
 */
const ThrottleApi = () => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit: 200, ttl: 60000 } }));
};
exports.ThrottleApi = ThrottleApi;
/**
 * Rate limiting para endpoints críticos
 * Muito restritivo para operações sensíveis
 *
 * Limite: 3 tentativas por 10 minutos
 */
const ThrottleCritical = () => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit: 3, ttl: 600000 } }));
};
exports.ThrottleCritical = ThrottleCritical;
/**
 * Rate limiting para recuperação de senha
 * Restritivo para prevenir spam de emails
 *
 * Limite: 3 tentativas por hora
 */
const ThrottlePasswordReset = () => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit: 3, ttl: 3600000 } }));
};
exports.ThrottlePasswordReset = ThrottlePasswordReset;
/**
 * Rate limiting para relatórios
 * Moderado para operações que consomem recursos
 *
 * Limite: 20 requests por 5 minutos
 */
const ThrottleReports = () => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit: 20, ttl: 300000 } }));
};
exports.ThrottleReports = ThrottleReports;
/**
 * Rate limiting customizável
 * Permite definir limites específicos
 *
 * @param limit - Número máximo de requests
 * @param ttl - Tempo em milissegundos
 */
const ThrottleCustom = (limit, ttl) => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit, ttl } }));
};
exports.ThrottleCustom = ThrottleCustom;
/**
 * Pular rate limiting para endpoints específicos
 * Útil para health checks e métricas
 */
const SkipThrottle = () => {
    return (0, common_1.applyDecorators)((0, throttler_1.Throttle)({ default: { limit: 0, ttl: 0 } }));
};
exports.SkipThrottle = SkipThrottle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGNvbW1vblxcZGVjb3JhdG9yc1xcdGhyb3R0bGUuZGVjb3JhdG9yLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUFpRDtBQUNqRCxpREFBNkM7QUFFN0M7Ozs7O0dBS0c7QUFFSDs7Ozs7R0FLRztBQUNJLE1BQU0sWUFBWSxHQUFHLEdBQUcsRUFBRTtJQUMvQixPQUFPLElBQUEsd0JBQWUsRUFDcEIsSUFBQSxvQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUNqRCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBSlcsUUFBQSxZQUFZLGdCQUl2QjtBQUVGOzs7OztHQUtHO0FBQ0ksTUFBTSxjQUFjLEdBQUcsR0FBRyxFQUFFO0lBQ2pDLE9BQU8sSUFBQSx3QkFBZSxFQUNwQixJQUFBLG9CQUFRLEVBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQ2pELENBQUM7QUFDSixDQUFDLENBQUM7QUFKVyxRQUFBLGNBQWMsa0JBSXpCO0FBRUY7Ozs7O0dBS0c7QUFDSSxNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUU7SUFDOUIsT0FBTyxJQUFBLHdCQUFlLEVBQ3BCLElBQUEsb0JBQVEsRUFBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FDbEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUpXLFFBQUEsV0FBVyxlQUl0QjtBQUVGOzs7OztHQUtHO0FBQ0ksTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLEVBQUU7SUFDbkMsT0FBTyxJQUFBLHdCQUFlLEVBQ3BCLElBQUEsb0JBQVEsRUFBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FDakQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUpXLFFBQUEsZ0JBQWdCLG9CQUkzQjtBQUVGOzs7OztHQUtHO0FBQ0ksTUFBTSxxQkFBcUIsR0FBRyxHQUFHLEVBQUU7SUFDeEMsT0FBTyxJQUFBLHdCQUFlLEVBQ3BCLElBQUEsb0JBQVEsRUFBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FDbEQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUpXLFFBQUEscUJBQXFCLHlCQUloQztBQUVGOzs7OztHQUtHO0FBQ0ksTUFBTSxlQUFlLEdBQUcsR0FBRyxFQUFFO0lBQ2xDLE9BQU8sSUFBQSx3QkFBZSxFQUNwQixJQUFBLG9CQUFRLEVBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQ2xELENBQUM7QUFDSixDQUFDLENBQUM7QUFKVyxRQUFBLGVBQWUsbUJBSTFCO0FBRUY7Ozs7OztHQU1HO0FBQ0ksTUFBTSxjQUFjLEdBQUcsQ0FBQyxLQUFhLEVBQUUsR0FBVyxFQUFFLEVBQUU7SUFDM0QsT0FBTyxJQUFBLHdCQUFlLEVBQUMsSUFBQSxvQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUMsQ0FBQztBQUZXLFFBQUEsY0FBYyxrQkFFekI7QUFFRjs7O0dBR0c7QUFDSSxNQUFNLFlBQVksR0FBRyxHQUFHLEVBQUU7SUFDL0IsT0FBTyxJQUFBLHdCQUFlLEVBQUMsSUFBQSxvQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQyxDQUFDO0FBRlcsUUFBQSxZQUFZLGdCQUV2QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcY29tbW9uXFxkZWNvcmF0b3JzXFx0aHJvdHRsZS5kZWNvcmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwbHlEZWNvcmF0b3JzIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgVGhyb3R0bGUgfSBmcm9tICdAbmVzdGpzL3Rocm90dGxlcic7XG5cbi8qKlxuICogRGVjb3JhdG9ycyBjdXN0b21pemFkb3MgcGFyYSBSYXRlIExpbWl0aW5nIC0gU2lzdGVtYSBTRU1UQVNcbiAqXG4gKiBGb3JuZWNlIGRlY29yYXRvcnMgcHLDqS1jb25maWd1cmFkb3MgcGFyYSBkaWZlcmVudGVzIHRpcG9zIGRlIGVuZHBvaW50c1xuICogY29tIGxpbWl0ZXMgYXByb3ByaWFkb3MgcGFyYSBjYWRhIGNhc28gZGUgdXNvLlxuICovXG5cbi8qKlxuICogUmF0ZSBsaW1pdGluZyBwYXJhIGVuZHBvaW50cyBkZSBhdXRlbnRpY2HDp8Ojb1xuICogTWFpcyByZXN0cml0aXZvIHBhcmEgcHJldmVuaXIgYXRhcXVlcyBkZSBmb3LDp2EgYnJ1dGFcbiAqXG4gKiBMaW1pdGU6IDUgdGVudGF0aXZhcyBwb3IgNSBtaW51dG9zXG4gKi9cbmV4cG9ydCBjb25zdCBUaHJvdHRsZUF1dGggPSAoKSA9PiB7XG4gIHJldHVybiBhcHBseURlY29yYXRvcnMoXG4gICAgVGhyb3R0bGUoeyBkZWZhdWx0OiB7IGxpbWl0OiA1LCB0dGw6IDMwMDAwMCB9IH0pLCAvLyA1IHRlbnRhdGl2YXMgZW0gNSBtaW51dG9zXG4gICk7XG59O1xuXG4vKipcbiAqIFJhdGUgbGltaXRpbmcgcGFyYSBlbmRwb2ludHMgZGUgdXBsb2FkIGRlIGRvY3VtZW50b3NcbiAqIExpbWl0ZSBtb2RlcmFkbyBwYXJhIHVwbG9hZHMgZGUgYXJxdWl2b3NcbiAqXG4gKiBMaW1pdGU6IDEwIHVwbG9hZHMgcG9yIG1pbnV0b1xuICovXG5leHBvcnQgY29uc3QgVGhyb3R0bGVVcGxvYWQgPSAoKSA9PiB7XG4gIHJldHVybiBhcHBseURlY29yYXRvcnMoXG4gICAgVGhyb3R0bGUoeyBkZWZhdWx0OiB7IGxpbWl0OiAxMCwgdHRsOiA2MDAwMCB9IH0pLCAvLyAxMCB1cGxvYWRzIHBvciBtaW51dG9cbiAgKTtcbn07XG5cbi8qKlxuICogUmF0ZSBsaW1pdGluZyBwYXJhIEFQSSBnZXJhbFxuICogTGltaXRlIG1haXMgZ2VuZXJvc28gcGFyYSBvcGVyYcOnw7VlcyBub3JtYWlzXG4gKlxuICogTGltaXRlOiAyMDAgcmVxdWVzdHMgcG9yIG1pbnV0b1xuICovXG5leHBvcnQgY29uc3QgVGhyb3R0bGVBcGkgPSAoKSA9PiB7XG4gIHJldHVybiBhcHBseURlY29yYXRvcnMoXG4gICAgVGhyb3R0bGUoeyBkZWZhdWx0OiB7IGxpbWl0OiAyMDAsIHR0bDogNjAwMDAgfSB9KSwgLy8gMjAwIHJlcXVlc3RzIHBvciBtaW51dG9cbiAgKTtcbn07XG5cbi8qKlxuICogUmF0ZSBsaW1pdGluZyBwYXJhIGVuZHBvaW50cyBjcsOtdGljb3NcbiAqIE11aXRvIHJlc3RyaXRpdm8gcGFyYSBvcGVyYcOnw7VlcyBzZW5zw612ZWlzXG4gKlxuICogTGltaXRlOiAzIHRlbnRhdGl2YXMgcG9yIDEwIG1pbnV0b3NcbiAqL1xuZXhwb3J0IGNvbnN0IFRocm90dGxlQ3JpdGljYWwgPSAoKSA9PiB7XG4gIHJldHVybiBhcHBseURlY29yYXRvcnMoXG4gICAgVGhyb3R0bGUoeyBkZWZhdWx0OiB7IGxpbWl0OiAzLCB0dGw6IDYwMDAwMCB9IH0pLCAvLyAzIHRlbnRhdGl2YXMgZW0gMTAgbWludXRvc1xuICApO1xufTtcblxuLyoqXG4gKiBSYXRlIGxpbWl0aW5nIHBhcmEgcmVjdXBlcmHDp8OjbyBkZSBzZW5oYVxuICogUmVzdHJpdGl2byBwYXJhIHByZXZlbmlyIHNwYW0gZGUgZW1haWxzXG4gKlxuICogTGltaXRlOiAzIHRlbnRhdGl2YXMgcG9yIGhvcmFcbiAqL1xuZXhwb3J0IGNvbnN0IFRocm90dGxlUGFzc3dvcmRSZXNldCA9ICgpID0+IHtcbiAgcmV0dXJuIGFwcGx5RGVjb3JhdG9ycyhcbiAgICBUaHJvdHRsZSh7IGRlZmF1bHQ6IHsgbGltaXQ6IDMsIHR0bDogMzYwMDAwMCB9IH0pLCAvLyAzIHRlbnRhdGl2YXMgcG9yIGhvcmFcbiAgKTtcbn07XG5cbi8qKlxuICogUmF0ZSBsaW1pdGluZyBwYXJhIHJlbGF0w7NyaW9zXG4gKiBNb2RlcmFkbyBwYXJhIG9wZXJhw6fDtWVzIHF1ZSBjb25zb21lbSByZWN1cnNvc1xuICpcbiAqIExpbWl0ZTogMjAgcmVxdWVzdHMgcG9yIDUgbWludXRvc1xuICovXG5leHBvcnQgY29uc3QgVGhyb3R0bGVSZXBvcnRzID0gKCkgPT4ge1xuICByZXR1cm4gYXBwbHlEZWNvcmF0b3JzKFxuICAgIFRocm90dGxlKHsgZGVmYXVsdDogeyBsaW1pdDogMjAsIHR0bDogMzAwMDAwIH0gfSksIC8vIDIwIHJlcXVlc3RzIGVtIDUgbWludXRvc1xuICApO1xufTtcblxuLyoqXG4gKiBSYXRlIGxpbWl0aW5nIGN1c3RvbWl6w6F2ZWxcbiAqIFBlcm1pdGUgZGVmaW5pciBsaW1pdGVzIGVzcGVjw61maWNvc1xuICpcbiAqIEBwYXJhbSBsaW1pdCAtIE7Dum1lcm8gbcOheGltbyBkZSByZXF1ZXN0c1xuICogQHBhcmFtIHR0bCAtIFRlbXBvIGVtIG1pbGlzc2VndW5kb3NcbiAqL1xuZXhwb3J0IGNvbnN0IFRocm90dGxlQ3VzdG9tID0gKGxpbWl0OiBudW1iZXIsIHR0bDogbnVtYmVyKSA9PiB7XG4gIHJldHVybiBhcHBseURlY29yYXRvcnMoVGhyb3R0bGUoeyBkZWZhdWx0OiB7IGxpbWl0LCB0dGwgfSB9KSk7XG59O1xuXG4vKipcbiAqIFB1bGFyIHJhdGUgbGltaXRpbmcgcGFyYSBlbmRwb2ludHMgZXNwZWPDrWZpY29zXG4gKiDDmnRpbCBwYXJhIGhlYWx0aCBjaGVja3MgZSBtw6l0cmljYXNcbiAqL1xuZXhwb3J0IGNvbnN0IFNraXBUaHJvdHRsZSA9ICgpID0+IHtcbiAgcmV0dXJuIGFwcGx5RGVjb3JhdG9ycyhUaHJvdHRsZSh7IGRlZmF1bHQ6IHsgbGltaXQ6IDAsIHR0bDogMCB9IH0pKTtcbn07XG4iXSwidmVyc2lvbiI6M30=