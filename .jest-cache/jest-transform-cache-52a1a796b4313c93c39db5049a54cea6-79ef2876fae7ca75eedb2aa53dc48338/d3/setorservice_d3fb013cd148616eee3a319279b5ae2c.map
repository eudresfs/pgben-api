{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\services\\setor.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\services\\setor.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  InternalServerErrorException,\n  Logger,\n  BadRequestException,\n  ConflictException,\n} from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { SetorRepository } from '../repositories/setor.repository';\nimport { UnidadeRepository } from '../repositories/unidade.repository';\nimport { CreateSetorDto } from '../dto/create-setor.dto';\nimport { UpdateSetorDto } from '../dto/update-setor.dto';\nimport { Setor } from '../../../entities/setor.entity';\n\n/**\n * Serviço de setores\n *\n * Responsável pela lógica de negócio relacionada a setores\n */\n@Injectable()\nexport class SetorService {\n  private readonly logger = new Logger(SetorService.name);\n\n  constructor(\n    private readonly dataSource: DataSource,\n    private readonly setorRepository: SetorRepository,\n    private readonly unidadeRepository: UnidadeRepository,\n  ) {}\n\n  /**\n   * Cria um novo setor\n   * @param createSetorDto Dados do setor\n   * @returns Setor criado\n   */\n  async create(createSetorDto: CreateSetorDto) {\n    this.logger.log(\n      `Iniciando criação de setor: ${JSON.stringify(createSetorDto)}`,\n    );\n\n    // Validações iniciais\n    if (!createSetorDto.unidade_id) {\n      this.logger.error('ID da unidade não fornecido');\n      throw new BadRequestException('ID da unidade é obrigatório');\n    }\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        const unidadeRepo = manager.getRepository('unidade');\n        const setorRepo = manager.getRepository('setor');\n\n        // Verificar se a unidade existe\n        this.logger.log(\n          `Buscando unidade com ID: ${createSetorDto.unidade_id}`,\n        );\n        const unidade = await unidadeRepo.findOne({\n          where: { id: createSetorDto.unidade_id },\n        });\n        if (!unidade) {\n          this.logger.error(\n            `Unidade não encontrada: ${createSetorDto.unidade_id}`,\n          );\n          throw new NotFoundException(\n            `Unidade com ID ${createSetorDto.unidade_id} não encontrada`,\n          );\n        }\n\n        // Verificar se já existe um setor com o mesmo nome na mesma unidade\n        if (createSetorDto.nome) {\n          const setorExistente = await setorRepo.findOne({\n            where: {\n              nome: createSetorDto.nome,\n              unidade_id: createSetorDto.unidade_id,\n            },\n          });\n\n          if (setorExistente) {\n            this.logger.error(\n              `Já existe um setor com o nome '${createSetorDto.nome}' nesta unidade`,\n            );\n            throw new ConflictException(\n              `Já existe um setor com o nome '${createSetorDto.nome}' nesta unidade`,\n            );\n          }\n        }\n\n        // Verificar se já existe um setor com a mesma sigla na mesma unidade (se fornecida)\n        if (createSetorDto.sigla) {\n          const setorExistente = await setorRepo.findOne({\n            where: {\n              sigla: createSetorDto.sigla,\n              unidade_id: createSetorDto.unidade_id,\n            },\n          });\n\n          if (setorExistente) {\n            this.logger.error(\n              `Já existe um setor com a sigla '${createSetorDto.sigla}' nesta unidade`,\n            );\n            throw new ConflictException(\n              `Já existe um setor com a sigla '${createSetorDto.sigla}' nesta unidade`,\n            );\n          }\n        }\n\n        // Mapear DTO para a entidade\n        const { unidade_id, ...setorData } = createSetorDto;\n\n        // Criar o objeto do setor com os dados básicos\n        const setor = new Setor();\n        Object.assign(setor, setorData);\n        setor.unidade_id = unidade_id;\n\n        this.logger.log(`Dados do setor mapeados: ${JSON.stringify(setor)}`);\n\n        // Criar setor\n        const setorCriado = await setorRepo.save(setor);\n        this.logger.log(`Setor criado com sucesso: ${setorCriado.id}`);\n\n        return setorCriado;\n      });\n    } catch (error) {\n      this.logger.error(`Erro ao criar setor: ${error.message}`, error.stack);\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // Se for um erro de validação do banco de dados\n      if (error.code === '23505') {\n        // Código de violação de chave única\n        throw new ConflictException('Já existe um setor com estes dados');\n      }\n\n      // Se for um erro de chave estrangeira\n      if (error.code === '23503') {\n        throw new BadRequestException('Dados de relacionamento inválidos');\n      }\n\n      throw new InternalServerErrorException(\n        'Falha ao criar setor. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Atualiza um setor existente\n   * @param id ID do setor\n   * @param updateSetorDto Dados a serem atualizados\n   * @returns Setor atualizado\n   */\n  async update(id: string, updateSetorDto: UpdateSetorDto) {\n    this.logger.log(\n      `Atualizando setor ${id} com dados: ${JSON.stringify(updateSetorDto)}`,\n    );\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        const setorRepo = manager.getRepository('setor');\n        const unidadeRepo = manager.getRepository('unidade');\n\n        // Verificar se setor existe\n        const setorExistente = await setorRepo.findOne({ where: { id } });\n        if (!setorExistente) {\n          this.logger.error(`Setor não encontrado: ${id}`);\n          throw new NotFoundException(`Setor com ID ${id} não encontrado`);\n        }\n\n        // Verificar se a unidade existe (se fornecida)\n        let novaUnidadeId = setorExistente.unidade_id;\n        if (\n          updateSetorDto.unidade_id &&\n          updateSetorDto.unidade_id !== setorExistente.unidade_id\n        ) {\n          this.logger.log(\n            `Validando unidade com ID: ${updateSetorDto.unidade_id}`,\n          );\n          const unidade = await unidadeRepo.findOne({\n            where: { id: updateSetorDto.unidade_id },\n          });\n          if (!unidade) {\n            this.logger.error(\n              `Unidade não encontrada: ${updateSetorDto.unidade_id}`,\n            );\n            throw new NotFoundException(\n              `Unidade com ID ${updateSetorDto.unidade_id} não encontrada`,\n            );\n          }\n          novaUnidadeId = updateSetorDto.unidade_id;\n        }\n\n        // Verificar se já existe um setor com o mesmo nome na mesma unidade (se o nome for alterado)\n        if (\n          updateSetorDto.nome &&\n          updateSetorDto.nome !== setorExistente.nome\n        ) {\n          const setorExistenteComMesmoNome = await setorRepo.findOne({\n            where: {\n              nome: updateSetorDto.nome,\n              unidade_id: novaUnidadeId,\n              id: { $ne: id }, // Excluir o próprio setor da busca\n            },\n          });\n\n          if (setorExistenteComMesmoNome) {\n            this.logger.error(\n              `Já existe um setor com o nome '${updateSetorDto.nome}' nesta unidade`,\n            );\n            throw new ConflictException(\n              `Já existe um setor com o nome '${updateSetorDto.nome}' nesta unidade`,\n            );\n          }\n        }\n\n        // Verificar se já existe um setor com a mesma sigla na mesma unidade (se a sigla for alterada)\n        if (\n          updateSetorDto.sigla &&\n          updateSetorDto.sigla !== setorExistente.sigla\n        ) {\n          const setorExistenteComMesmaSigla = await setorRepo.findOne({\n            where: {\n              sigla: updateSetorDto.sigla,\n              unidade_id: novaUnidadeId,\n              id: { $ne: id }, // Excluir o próprio setor da busca\n            },\n          });\n\n          if (setorExistenteComMesmaSigla) {\n            this.logger.error(\n              `Já existe um setor com a sigla '${updateSetorDto.sigla}' nesta unidade`,\n            );\n            throw new ConflictException(\n              `Já existe um setor com a sigla '${updateSetorDto.sigla}' nesta unidade`,\n            );\n          }\n        }\n\n        // Atualizar os demais campos\n        const { unidade_id, ...setorData } = updateSetorDto;\n\n        // Atualizar setor\n        await setorRepo.update(id, {\n          ...setorData,\n          unidade_id: novaUnidadeId,\n        });\n\n        // Buscar setor atualizado\n        const setorAtualizado = await setorRepo.findOne({ where: { id } });\n        if (!setorAtualizado) {\n          throw new NotFoundException(\n            `Setor com ID ${id} não encontrado após atualização`,\n          );\n        }\n\n        this.logger.log(`Setor ${id} atualizado com sucesso`);\n\n        return setorAtualizado;\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar setor ${id}: ${error.message}`,\n        error.stack,\n      );\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      // Se for um erro de validação do banco de dados\n      if (error.code === '23505') {\n        // Código de violação de chave única\n        throw new ConflictException('Já existe um setor com estes dados');\n      }\n\n      throw new InternalServerErrorException(\n        'Falha ao atualizar setor. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Busca um setor pelo ID\n   * @param id ID do setor\n   * @returns Setor encontrado\n   */\n  async findById(id: string) {\n    this.logger.log(`Buscando setor com ID: ${id}`);\n\n    try {\n      const setor = await this.setorRepository.findById(id);\n\n      if (!setor) {\n        this.logger.warn(`Setor não encontrado: ${id}`);\n        throw new NotFoundException('Setor não encontrado');\n      }\n\n      return setor;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar setor ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Falha ao buscar setor. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Busca setores por unidade\n   * @param unidadeId ID da unidade\n   * @returns Lista de setores da unidade\n   */\n  async findByUnidadeId(unidadeId: string) {\n    this.logger.log(`Buscando setores da unidade com ID: ${unidadeId}`);\n\n    try {\n      // Verificar se a unidade existe\n      const unidade = await this.unidadeRepository.findById(unidadeId);\n      if (!unidade) {\n        this.logger.warn(`Unidade não encontrada: ${unidadeId}`);\n        throw new NotFoundException('Unidade não encontrada');\n      }\n\n      // Buscar setores\n      const setores = await this.setorRepository.findByUnidadeId(unidadeId);\n      this.logger.log(\n        `Encontrados ${setores.length} setores para a unidade ${unidadeId}`,\n      );\n\n      return {\n        items: setores,\n        meta: {\n          total: setores.length,\n          unidadeId,\n        },\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar setores da unidade ${unidadeId}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Falha ao buscar setores. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"],"version":3}