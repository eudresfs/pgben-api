{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-monitoramento.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-monitoramento.service.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  Repository,\n  DataSource,\n  Raw,\n  Not,\n  IsNull,\n  MoreThanOrEqual,\n} from 'typeorm';\nimport { LogAuditoria } from '../../../entities/log-auditoria.entity';\nimport { ConfigService } from '@nestjs/config';\nimport { TipoOperacao } from '../../../enums/tipo-operacao.enum';\nimport { ScheduleAdapterService } from '../../../shared/schedule/schedule-adapter.service';\n\n/**\n * Interface para estatísticas de auditoria\n */\nexport interface EstatisticasAuditoria {\n  /**\n   * Total de logs\n   */\n  totalLogs: number;\n\n  /**\n   * Total de logs por tipo de operação\n   */\n  logsPorTipoOperacao: Record<string, number>;\n\n  /**\n   * Total de logs por entidade\n   */\n  logsPorEntidade: Record<string, number>;\n\n  /**\n   * Total de logs com dados sensíveis\n   */\n  logsComDadosSensiveis: number;\n\n  /**\n   * Total de logs por período (últimas 24h, 7 dias, 30 dias)\n   */\n  logsPorPeriodo: {\n    ultimas24h: number;\n    ultimos7dias: number;\n    ultimos30dias: number;\n  };\n\n  /**\n   * Tamanho estimado do banco de dados de auditoria\n   */\n  tamanhoEstimadoBD: {\n    tamanhoTotal: string;\n    tamanhoIndices: string;\n    tamanhoTabelas: string;\n  };\n\n  /**\n   * Métricas de performance\n   */\n  metricas: {\n    tempoMedioInsercao: number;\n    tempoMedioConsulta: number;\n    taxaErros: number;\n  };\n\n  /**\n   * Data da última atualização\n   */\n  dataAtualizacao: Date;\n}\n\n/**\n * Serviço para monitoramento do módulo de auditoria\n */\n@Injectable()\nexport class AuditoriaMonitoramentoService implements OnModuleInit {\n  private readonly logger = new Logger(AuditoriaMonitoramentoService.name);\n  private estatisticas: EstatisticasAuditoria;\n  private metricas: {\n    temposInsercao: number[];\n    temposConsulta: number[];\n    erros: number;\n    totalOperacoes: number;\n  };\n\n  constructor(\n    @InjectRepository(LogAuditoria)\n    private readonly logAuditoriaRepository: Repository<LogAuditoria>,\n    private readonly dataSource: DataSource,\n    private readonly configService: ConfigService,\n    private readonly scheduleAdapter: ScheduleAdapterService,\n  ) {\n    // Inicializar métricas\n    this.metricas = {\n      temposInsercao: [],\n      temposConsulta: [],\n      erros: 0,\n      totalOperacoes: 0,\n    };\n\n    // Inicializar estatísticas\n    this.estatisticas = {\n      totalLogs: 0,\n      logsPorTipoOperacao: {},\n      logsPorEntidade: {},\n      logsComDadosSensiveis: 0,\n      logsPorPeriodo: {\n        ultimas24h: 0,\n        ultimos7dias: 0,\n        ultimos30dias: 0,\n      },\n      tamanhoEstimadoBD: {\n        tamanhoTotal: '0 KB',\n        tamanhoIndices: '0 KB',\n        tamanhoTabelas: '0 KB',\n      },\n      metricas: {\n        tempoMedioInsercao: 0,\n        tempoMedioConsulta: 0,\n        taxaErros: 0,\n      },\n      dataAtualizacao: new Date(),\n    };\n\n    // Estatísticas serão atualizadas pelo agendamento configurado no onModuleInit\n  }\n\n  /**\n   * Registra tempo de inserção\n   *\n   * @param tempoMs Tempo em milissegundos\n   */\n  registrarTempoInsercao(tempoMs: number): void {\n    this.metricas.temposInsercao.push(tempoMs);\n    this.metricas.totalOperacoes++;\n\n    // Limitar o tamanho do array para evitar consumo excessivo de memória\n    if (this.metricas.temposInsercao.length > 1000) {\n      this.metricas.temposInsercao.shift();\n    }\n  }\n\n  /**\n   * Registra tempo de consulta\n   *\n   * @param tempoMs Tempo em milissegundos\n   */\n  registrarTempoConsulta(tempoMs: number): void {\n    this.metricas.temposConsulta.push(tempoMs);\n    this.metricas.totalOperacoes++;\n\n    // Limitar o tamanho do array para evitar consumo excessivo de memória\n    if (this.metricas.temposConsulta.length > 1000) {\n      this.metricas.temposConsulta.shift();\n    }\n  }\n\n  /**\n   * Registra erro\n   */\n  registrarErro(): void {\n    this.metricas.erros++;\n    this.metricas.totalOperacoes++;\n  }\n\n  /**\n   * Obtém estatísticas atualizadas\n   *\n   * @returns Estatísticas de auditoria\n   */\n  getEstatisticas(): EstatisticasAuditoria {\n    return this.estatisticas;\n  }\n\n  /**\n   * Configura o agendamento quando o módulo é inicializado\n   */\n  async onModuleInit(): Promise<void> {\n    try {\n      // TEMPORARIAMENTE DESABILITADO: Executar uma vez inicialmente (sem await para não bloquear a inicialização)\n      // this.atualizarEstatisticas().catch(error => {\n      //   this.logger.error(`Erro na atualização inicial de estatísticas: ${error.message}`);\n      // });\n\n      // Configurar a atualização de estatísticas a cada 15 minutos (reduzir frequência)\n      this.scheduleAdapter.scheduleInterval(\n        'atualizar_estatisticas_auditoria',\n        15 * 60 * 1000, // 15 minutos em milissegundos\n        () => this.atualizarEstatisticas(),\n      );\n\n      this.logger.log(\n        'Agendamento de estatísticas de auditoria configurado com sucesso (execução inicial desabilitada)',\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao configurar agendamento de estatísticas: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Atualiza estatísticas periodicamente\n   */\n  async atualizarEstatisticas(): Promise<void> {\n    try {\n      this.logger.debug('Atualizando estatísticas de auditoria...');\n\n      // Atualizar totais\n      this.estatisticas.totalLogs = await this.logAuditoriaRepository.count();\n\n      // Atualizar logs por tipo de operação\n      const tiposOperacao = Object.values(TipoOperacao);\n      for (const tipo of tiposOperacao) {\n        const count = await this.logAuditoriaRepository.count({\n          where: { tipo_operacao: tipo as TipoOperacao },\n        });\n        this.estatisticas.logsPorTipoOperacao[tipo] = count;\n      }\n\n      // Atualizar logs por entidade (top 10)\n      const entidadesResult: Array<{\n        entidade_afetada: string;\n        total: string;\n      }> = await this.dataSource.query(`\n          SELECT entidade_afetada, COUNT(*) as total\n          FROM logs_auditoria\n          GROUP BY entidade_afetada\n          ORDER BY total DESC\n          LIMIT 10\n        `);\n\n      this.estatisticas.logsPorEntidade = {};\n      for (const row of entidadesResult) {\n        if (row.entidade_afetada) {\n          this.estatisticas.logsPorEntidade[row.entidade_afetada] =\n            parseInt(row.total, 10) || 0;\n        }\n      }\n\n      // Atualizar logs com dados sensíveis\n      try {\n        this.estatisticas.logsComDadosSensiveis =\n          await this.logAuditoriaRepository.count({\n            where: {\n              dados_sensiveis_acessados: Not(IsNull()),\n            },\n          });\n      } catch (error) {\n        this.logger.warn(\n          `Erro ao contar logs com dados sensíveis: ${error.message}`,\n        );\n        this.estatisticas.logsComDadosSensiveis = 0;\n      }\n\n      // Atualizar logs por período\n      const agora = new Date();\n\n      try {\n        // Últimas 24 horas\n        const ultimas24h = new Date(agora);\n        ultimas24h.setHours(agora.getHours() - 24);\n\n        this.estatisticas.logsPorPeriodo.ultimas24h =\n          await this.logAuditoriaRepository.count({\n            where: {\n              created_at: MoreThanOrEqual(ultimas24h),\n            },\n          });\n\n        // Últimos 7 dias\n        const ultimos7dias = new Date(agora);\n        ultimos7dias.setDate(agora.getDate() - 7);\n\n        this.estatisticas.logsPorPeriodo.ultimos7dias =\n          await this.logAuditoriaRepository.count({\n            where: {\n              created_at: MoreThanOrEqual(ultimos7dias),\n            },\n          });\n\n        // Últimos 30 dias\n        const ultimos30dias = new Date(agora);\n        ultimos30dias.setDate(agora.getDate() - 30);\n\n        this.estatisticas.logsPorPeriodo.ultimos30dias =\n          await this.logAuditoriaRepository.count({\n            where: {\n              created_at: MoreThanOrEqual(ultimos30dias),\n            },\n          });\n      } catch (error) {\n        this.logger.warn(`Erro ao contar logs por período: ${error.message}`);\n        this.estatisticas.logsPorPeriodo = {\n          ultimas24h: 0,\n          ultimos7dias: 0,\n          ultimos30dias: 0,\n        };\n      }\n\n      // Atualizar tamanho estimado do banco de dados\n      const tamanhoResult = await this.dataSource.query(`\n        SELECT\n          pg_size_pretty(pg_total_relation_size('logs_auditoria')) as tamanho_total,\n          pg_size_pretty(pg_indexes_size('logs_auditoria')) as tamanho_indices,\n          pg_size_pretty(pg_relation_size('logs_auditoria')) as tamanho_tabela\n      `);\n\n      if (tamanhoResult.length > 0) {\n        this.estatisticas.tamanhoEstimadoBD = {\n          tamanhoTotal: tamanhoResult[0].tamanho_total,\n          tamanhoIndices: tamanhoResult[0].tamanho_indices,\n          tamanhoTabelas: tamanhoResult[0].tamanho_tabela,\n        };\n      }\n\n      // Atualizar métricas\n      const tempoMedioInsercao =\n        this.metricas.temposInsercao.length > 0\n          ? this.metricas.temposInsercao.reduce((a, b) => a + b, 0) /\n            this.metricas.temposInsercao.length\n          : 0;\n\n      const tempoMedioConsulta =\n        this.metricas.temposConsulta.length > 0\n          ? this.metricas.temposConsulta.reduce((a, b) => a + b, 0) /\n            this.metricas.temposConsulta.length\n          : 0;\n\n      const taxaErros =\n        this.metricas.totalOperacoes > 0\n          ? (this.metricas.erros / this.metricas.totalOperacoes) * 100\n          : 0;\n\n      this.estatisticas.metricas = {\n        tempoMedioInsercao,\n        tempoMedioConsulta,\n        taxaErros,\n      };\n\n      // Atualizar data de atualização\n      this.estatisticas.dataAtualizacao = new Date();\n\n      this.logger.log('Estatísticas de auditoria atualizadas com sucesso');\n\n      // Verificar alertas\n      this.verificarAlertas();\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n\n      this.logger.error(\n        `Erro ao atualizar estatísticas: ${errorMessage}`,\n        errorStack,\n      );\n    }\n  }\n\n  /**\n   * Verifica condições para alertas\n   */\n  private verificarAlertas(): void {\n    try {\n      // Verificar taxa de erros\n      const limiteErros = this.configService.get<number>(\n        'AUDITORIA_LIMITE_TAXA_ERROS',\n        5,\n      );\n\n      if (this.estatisticas.metricas.taxaErros > limiteErros) {\n        this.logger.warn(\n          `ALERTA: Taxa de erros acima do limite (${this.estatisticas.metricas.taxaErros.toFixed(2)}%)`,\n        );\n      }\n\n      // Verificar tempo médio de inserção\n      const limiteTempoInsercao = this.configService.get<number>(\n        'AUDITORIA_LIMITE_TEMPO_INSERCAO',\n        500,\n      );\n\n      if (this.estatisticas.metricas.tempoMedioInsercao > limiteTempoInsercao) {\n        this.logger.warn(\n          `ALERTA: Tempo médio de inserção acima do limite (${this.estatisticas.metricas.tempoMedioInsercao.toFixed(2)}ms)`,\n        );\n      }\n\n      // Verificar tempo médio de consulta\n      const limiteTempoConsulta = this.configService.get<number>(\n        'AUDITORIA_LIMITE_TEMPO_CONSULTA',\n        1000,\n      );\n\n      if (this.estatisticas.metricas.tempoMedioConsulta > limiteTempoConsulta) {\n        this.logger.warn(\n          `ALERTA: Tempo médio de consulta acima do limite (${this.estatisticas.metricas.tempoMedioConsulta.toFixed(2)}ms)`,\n        );\n      }\n\n      // Verificar crescimento rápido\n      const crescimentoDiario = this.estatisticas.logsPorPeriodo.ultimas24h;\n      const limiteCrescimentoDiario = this.configService.get<number>(\n        'AUDITORIA_LIMITE_CRESCIMENTO_DIARIO',\n        10000,\n      );\n\n      if (crescimentoDiario > limiteCrescimentoDiario) {\n        this.logger.warn(\n          `ALERTA: Crescimento diário acima do limite (${crescimentoDiario} logs nas últimas 24h)`,\n        );\n      }\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n\n      this.logger.error(\n        `Erro ao verificar alertas: ${errorMessage}`,\n        errorStack,\n      );\n    }\n  }\n\n  /**\n   * Gera relatório de saúde do módulo de auditoria\n   *\n   * @returns Relatório de saúde\n   */\n  async gerarRelatorioSaude(): Promise<any> {\n    try {\n      // Atualizar estatísticas para garantir dados recentes\n      await this.atualizarEstatisticas();\n\n      // Verificar partições\n      const particoesResult = await this.dataSource.query(`\n        SELECT\n          child.relname AS nome_particao,\n          pg_size_pretty(pg_relation_size(child.oid)) AS tamanho,\n          pg_stat_get_numscans(child.oid) AS num_scans\n        FROM pg_inherits\n        JOIN pg_class parent ON pg_inherits.inhparent = parent.oid\n        JOIN pg_class child ON pg_inherits.inhrelid = child.oid\n        JOIN pg_namespace nmsp_child ON nmsp_child.oid = child.relnamespace\n        JOIN pg_namespace nmsp_parent ON nmsp_parent.oid = parent.relnamespace\n        WHERE parent.relname = 'logs_auditoria'\n        ORDER BY child.relname\n      `);\n\n      // Verificar índices\n      const indicesResult = await this.dataSource.query(`\n        SELECT\n          indexname AS nome_indice,\n          indexdef AS definicao,\n          idx_scan AS num_scans,\n          idx_tup_read AS tuplas_lidas,\n          idx_tup_fetch AS tuplas_buscadas\n        FROM pg_stat_user_indexes\n        JOIN pg_indexes ON pg_stat_user_indexes.indexrelname = pg_indexes.indexname\n        WHERE tablename = 'logs_auditoria'\n        ORDER BY idx_scan DESC\n      `);\n\n      // Verificar operações lentas\n      const operacoesLentasResult = await this.dataSource.query(`\n        SELECT\n          query,\n          calls,\n          total_time / calls AS avg_time,\n          rows\n        FROM pg_stat_statements\n        WHERE query ILIKE '%logs_auditoria%'\n        ORDER BY avg_time DESC\n        LIMIT 5\n      `);\n\n      // Calcular saúde geral (0-100%)\n      let saudeGeral = 100;\n\n      // Penalizar por alta taxa de erros\n      if (this.estatisticas.metricas.taxaErros > 0) {\n        saudeGeral -= Math.min(50, this.estatisticas.metricas.taxaErros * 5);\n      }\n\n      // Penalizar por tempos de resposta altos\n      const tempoInsercaoIdeal = 100; // ms\n      const tempoConsultaIdeal = 200; // ms\n\n      if (this.estatisticas.metricas.tempoMedioInsercao > tempoInsercaoIdeal) {\n        const penalidade = Math.min(\n          25,\n          ((this.estatisticas.metricas.tempoMedioInsercao -\n            tempoInsercaoIdeal) /\n            tempoInsercaoIdeal) *\n            10,\n        );\n        saudeGeral -= penalidade;\n      }\n\n      if (this.estatisticas.metricas.tempoMedioConsulta > tempoConsultaIdeal) {\n        const penalidade = Math.min(\n          25,\n          ((this.estatisticas.metricas.tempoMedioConsulta -\n            tempoConsultaIdeal) /\n            tempoConsultaIdeal) *\n            10,\n        );\n        saudeGeral -= penalidade;\n      }\n\n      // Garantir que a saúde não seja negativa\n      saudeGeral = Math.max(0, saudeGeral);\n\n      // Determinar status com base na saúde\n      let status = 'Ótimo';\n\n      if (saudeGeral < 60) {\n        status = 'Crítico';\n      } else if (saudeGeral < 80) {\n        status = 'Alerta';\n      } else if (saudeGeral < 90) {\n        status = 'Bom';\n      }\n\n      // Gerar recomendações\n      const recomendacoes: string[] = [];\n\n      if (this.estatisticas.metricas.taxaErros > 5) {\n        recomendacoes.push(\n          'Investigar e corrigir erros frequentes no módulo de auditoria',\n        );\n      }\n\n      if (this.estatisticas.metricas.tempoMedioInsercao > 500) {\n        recomendacoes.push('Otimizar processo de inserção de logs');\n      }\n\n      if (this.estatisticas.metricas.tempoMedioConsulta > 1000) {\n        recomendacoes.push('Revisar índices e otimizar consultas');\n      }\n\n      // Verificar índices não utilizados\n      const indicesNaoUtilizados = (\n        indicesResult as Array<{ num_scans: string; nome_indice: string }>\n      ).filter((indice) => indice.num_scans === '0');\n\n      if (indicesNaoUtilizados.length > 0) {\n        recomendacoes.push(\n          `Considerar remover índices não utilizados: ${indicesNaoUtilizados.map((i) => i.nome_indice).join(', ')}`,\n        );\n      }\n\n      return {\n        saudeGeral: {\n          pontuacao: Math.round(saudeGeral),\n          status,\n          dataAvaliacao: new Date(),\n        },\n        estatisticas: this.estatisticas,\n        detalhes: {\n          particoes: particoesResult,\n          indices: indicesResult,\n          operacoesLentas: operacoesLentasResult,\n        },\n        recomendacoes,\n      };\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n\n      this.logger.error(\n        `Erro ao gerar relatório de saúde: ${errorMessage}`,\n        errorStack,\n      );\n      throw error;\n    }\n  }\n}\n"],"version":3}