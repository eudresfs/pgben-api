b82fd2e0385df9e353d030b166de4282
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuditoriaMonitoramentoService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaMonitoramentoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const log_auditoria_entity_1 = require("../../../entities/log-auditoria.entity");
const config_1 = require("@nestjs/config");
const tipo_operacao_enum_1 = require("../../../enums/tipo-operacao.enum");
const schedule_adapter_service_1 = require("../../../shared/schedule/schedule-adapter.service");
/**
 * Serviço para monitoramento do módulo de auditoria
 */
let AuditoriaMonitoramentoService = AuditoriaMonitoramentoService_1 = class AuditoriaMonitoramentoService {
    logAuditoriaRepository;
    dataSource;
    configService;
    scheduleAdapter;
    logger = new common_1.Logger(AuditoriaMonitoramentoService_1.name);
    estatisticas;
    metricas;
    constructor(logAuditoriaRepository, dataSource, configService, scheduleAdapter) {
        this.logAuditoriaRepository = logAuditoriaRepository;
        this.dataSource = dataSource;
        this.configService = configService;
        this.scheduleAdapter = scheduleAdapter;
        // Inicializar métricas
        this.metricas = {
            temposInsercao: [],
            temposConsulta: [],
            erros: 0,
            totalOperacoes: 0,
        };
        // Inicializar estatísticas
        this.estatisticas = {
            totalLogs: 0,
            logsPorTipoOperacao: {},
            logsPorEntidade: {},
            logsComDadosSensiveis: 0,
            logsPorPeriodo: {
                ultimas24h: 0,
                ultimos7dias: 0,
                ultimos30dias: 0,
            },
            tamanhoEstimadoBD: {
                tamanhoTotal: '0 KB',
                tamanhoIndices: '0 KB',
                tamanhoTabelas: '0 KB',
            },
            metricas: {
                tempoMedioInsercao: 0,
                tempoMedioConsulta: 0,
                taxaErros: 0,
            },
            dataAtualizacao: new Date(),
        };
        // Estatísticas serão atualizadas pelo agendamento configurado no onModuleInit
    }
    /**
     * Registra tempo de inserção
     *
     * @param tempoMs Tempo em milissegundos
     */
    registrarTempoInsercao(tempoMs) {
        this.metricas.temposInsercao.push(tempoMs);
        this.metricas.totalOperacoes++;
        // Limitar o tamanho do array para evitar consumo excessivo de memória
        if (this.metricas.temposInsercao.length > 1000) {
            this.metricas.temposInsercao.shift();
        }
    }
    /**
     * Registra tempo de consulta
     *
     * @param tempoMs Tempo em milissegundos
     */
    registrarTempoConsulta(tempoMs) {
        this.metricas.temposConsulta.push(tempoMs);
        this.metricas.totalOperacoes++;
        // Limitar o tamanho do array para evitar consumo excessivo de memória
        if (this.metricas.temposConsulta.length > 1000) {
            this.metricas.temposConsulta.shift();
        }
    }
    /**
     * Registra erro
     */
    registrarErro() {
        this.metricas.erros++;
        this.metricas.totalOperacoes++;
    }
    /**
     * Obtém estatísticas atualizadas
     *
     * @returns Estatísticas de auditoria
     */
    getEstatisticas() {
        return this.estatisticas;
    }
    /**
     * Configura o agendamento quando o módulo é inicializado
     */
    async onModuleInit() {
        try {
            // TEMPORARIAMENTE DESABILITADO: Executar uma vez inicialmente (sem await para não bloquear a inicialização)
            // this.atualizarEstatisticas().catch(error => {
            //   this.logger.error(`Erro na atualização inicial de estatísticas: ${error.message}`);
            // });
            // Configurar a atualização de estatísticas a cada 15 minutos (reduzir frequência)
            this.scheduleAdapter.scheduleInterval('atualizar_estatisticas_auditoria', 15 * 60 * 1000, // 15 minutos em milissegundos
            () => this.atualizarEstatisticas());
            this.logger.log('Agendamento de estatísticas de auditoria configurado com sucesso (execução inicial desabilitada)');
        }
        catch (error) {
            this.logger.error(`Erro ao configurar agendamento de estatísticas: ${error.message}`);
        }
    }
    /**
     * Atualiza estatísticas periodicamente
     */
    async atualizarEstatisticas() {
        try {
            this.logger.debug('Atualizando estatísticas de auditoria...');
            // Atualizar totais
            this.estatisticas.totalLogs = await this.logAuditoriaRepository.count();
            // Atualizar logs por tipo de operação
            const tiposOperacao = Object.values(tipo_operacao_enum_1.TipoOperacao);
            for (const tipo of tiposOperacao) {
                const count = await this.logAuditoriaRepository.count({
                    where: { tipo_operacao: tipo },
                });
                this.estatisticas.logsPorTipoOperacao[tipo] = count;
            }
            // Atualizar logs por entidade (top 10)
            const entidadesResult = await this.dataSource.query(`
          SELECT entidade_afetada, COUNT(*) as total
          FROM logs_auditoria
          GROUP BY entidade_afetada
          ORDER BY total DESC
          LIMIT 10
        `);
            this.estatisticas.logsPorEntidade = {};
            for (const row of entidadesResult) {
                if (row.entidade_afetada) {
                    this.estatisticas.logsPorEntidade[row.entidade_afetada] =
                        parseInt(row.total, 10) || 0;
                }
            }
            // Atualizar logs com dados sensíveis
            try {
                this.estatisticas.logsComDadosSensiveis =
                    await this.logAuditoriaRepository.count({
                        where: {
                            dados_sensiveis_acessados: (0, typeorm_2.Not)((0, typeorm_2.IsNull)()),
                        },
                    });
            }
            catch (error) {
                this.logger.warn(`Erro ao contar logs com dados sensíveis: ${error.message}`);
                this.estatisticas.logsComDadosSensiveis = 0;
            }
            // Atualizar logs por período
            const agora = new Date();
            try {
                // Últimas 24 horas
                const ultimas24h = new Date(agora);
                ultimas24h.setHours(agora.getHours() - 24);
                this.estatisticas.logsPorPeriodo.ultimas24h =
                    await this.logAuditoriaRepository.count({
                        where: {
                            created_at: (0, typeorm_2.MoreThanOrEqual)(ultimas24h),
                        },
                    });
                // Últimos 7 dias
                const ultimos7dias = new Date(agora);
                ultimos7dias.setDate(agora.getDate() - 7);
                this.estatisticas.logsPorPeriodo.ultimos7dias =
                    await this.logAuditoriaRepository.count({
                        where: {
                            created_at: (0, typeorm_2.MoreThanOrEqual)(ultimos7dias),
                        },
                    });
                // Últimos 30 dias
                const ultimos30dias = new Date(agora);
                ultimos30dias.setDate(agora.getDate() - 30);
                this.estatisticas.logsPorPeriodo.ultimos30dias =
                    await this.logAuditoriaRepository.count({
                        where: {
                            created_at: (0, typeorm_2.MoreThanOrEqual)(ultimos30dias),
                        },
                    });
            }
            catch (error) {
                this.logger.warn(`Erro ao contar logs por período: ${error.message}`);
                this.estatisticas.logsPorPeriodo = {
                    ultimas24h: 0,
                    ultimos7dias: 0,
                    ultimos30dias: 0,
                };
            }
            // Atualizar tamanho estimado do banco de dados
            const tamanhoResult = await this.dataSource.query(`
        SELECT
          pg_size_pretty(pg_total_relation_size('logs_auditoria')) as tamanho_total,
          pg_size_pretty(pg_indexes_size('logs_auditoria')) as tamanho_indices,
          pg_size_pretty(pg_relation_size('logs_auditoria')) as tamanho_tabela
      `);
            if (tamanhoResult.length > 0) {
                this.estatisticas.tamanhoEstimadoBD = {
                    tamanhoTotal: tamanhoResult[0].tamanho_total,
                    tamanhoIndices: tamanhoResult[0].tamanho_indices,
                    tamanhoTabelas: tamanhoResult[0].tamanho_tabela,
                };
            }
            // Atualizar métricas
            const tempoMedioInsercao = this.metricas.temposInsercao.length > 0
                ? this.metricas.temposInsercao.reduce((a, b) => a + b, 0) /
                    this.metricas.temposInsercao.length
                : 0;
            const tempoMedioConsulta = this.metricas.temposConsulta.length > 0
                ? this.metricas.temposConsulta.reduce((a, b) => a + b, 0) /
                    this.metricas.temposConsulta.length
                : 0;
            const taxaErros = this.metricas.totalOperacoes > 0
                ? (this.metricas.erros / this.metricas.totalOperacoes) * 100
                : 0;
            this.estatisticas.metricas = {
                tempoMedioInsercao,
                tempoMedioConsulta,
                taxaErros,
            };
            // Atualizar data de atualização
            this.estatisticas.dataAtualizacao = new Date();
            this.logger.log('Estatísticas de auditoria atualizadas com sucesso');
            // Verificar alertas
            this.verificarAlertas();
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
            const errorStack = error instanceof Error ? error.stack : undefined;
            this.logger.error(`Erro ao atualizar estatísticas: ${errorMessage}`, errorStack);
        }
    }
    /**
     * Verifica condições para alertas
     */
    verificarAlertas() {
        try {
            // Verificar taxa de erros
            const limiteErros = this.configService.get('AUDITORIA_LIMITE_TAXA_ERROS', 5);
            if (this.estatisticas.metricas.taxaErros > limiteErros) {
                this.logger.warn(`ALERTA: Taxa de erros acima do limite (${this.estatisticas.metricas.taxaErros.toFixed(2)}%)`);
            }
            // Verificar tempo médio de inserção
            const limiteTempoInsercao = this.configService.get('AUDITORIA_LIMITE_TEMPO_INSERCAO', 500);
            if (this.estatisticas.metricas.tempoMedioInsercao > limiteTempoInsercao) {
                this.logger.warn(`ALERTA: Tempo médio de inserção acima do limite (${this.estatisticas.metricas.tempoMedioInsercao.toFixed(2)}ms)`);
            }
            // Verificar tempo médio de consulta
            const limiteTempoConsulta = this.configService.get('AUDITORIA_LIMITE_TEMPO_CONSULTA', 1000);
            if (this.estatisticas.metricas.tempoMedioConsulta > limiteTempoConsulta) {
                this.logger.warn(`ALERTA: Tempo médio de consulta acima do limite (${this.estatisticas.metricas.tempoMedioConsulta.toFixed(2)}ms)`);
            }
            // Verificar crescimento rápido
            const crescimentoDiario = this.estatisticas.logsPorPeriodo.ultimas24h;
            const limiteCrescimentoDiario = this.configService.get('AUDITORIA_LIMITE_CRESCIMENTO_DIARIO', 10000);
            if (crescimentoDiario > limiteCrescimentoDiario) {
                this.logger.warn(`ALERTA: Crescimento diário acima do limite (${crescimentoDiario} logs nas últimas 24h)`);
            }
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
            const errorStack = error instanceof Error ? error.stack : undefined;
            this.logger.error(`Erro ao verificar alertas: ${errorMessage}`, errorStack);
        }
    }
    /**
     * Gera relatório de saúde do módulo de auditoria
     *
     * @returns Relatório de saúde
     */
    async gerarRelatorioSaude() {
        try {
            // Atualizar estatísticas para garantir dados recentes
            await this.atualizarEstatisticas();
            // Verificar partições
            const particoesResult = await this.dataSource.query(`
        SELECT
          child.relname AS nome_particao,
          pg_size_pretty(pg_relation_size(child.oid)) AS tamanho,
          pg_stat_get_numscans(child.oid) AS num_scans
        FROM pg_inherits
        JOIN pg_class parent ON pg_inherits.inhparent = parent.oid
        JOIN pg_class child ON pg_inherits.inhrelid = child.oid
        JOIN pg_namespace nmsp_child ON nmsp_child.oid = child.relnamespace
        JOIN pg_namespace nmsp_parent ON nmsp_parent.oid = parent.relnamespace
        WHERE parent.relname = 'logs_auditoria'
        ORDER BY child.relname
      `);
            // Verificar índices
            const indicesResult = await this.dataSource.query(`
        SELECT
          indexname AS nome_indice,
          indexdef AS definicao,
          idx_scan AS num_scans,
          idx_tup_read AS tuplas_lidas,
          idx_tup_fetch AS tuplas_buscadas
        FROM pg_stat_user_indexes
        JOIN pg_indexes ON pg_stat_user_indexes.indexrelname = pg_indexes.indexname
        WHERE tablename = 'logs_auditoria'
        ORDER BY idx_scan DESC
      `);
            // Verificar operações lentas
            const operacoesLentasResult = await this.dataSource.query(`
        SELECT
          query,
          calls,
          total_time / calls AS avg_time,
          rows
        FROM pg_stat_statements
        WHERE query ILIKE '%logs_auditoria%'
        ORDER BY avg_time DESC
        LIMIT 5
      `);
            // Calcular saúde geral (0-100%)
            let saudeGeral = 100;
            // Penalizar por alta taxa de erros
            if (this.estatisticas.metricas.taxaErros > 0) {
                saudeGeral -= Math.min(50, this.estatisticas.metricas.taxaErros * 5);
            }
            // Penalizar por tempos de resposta altos
            const tempoInsercaoIdeal = 100; // ms
            const tempoConsultaIdeal = 200; // ms
            if (this.estatisticas.metricas.tempoMedioInsercao > tempoInsercaoIdeal) {
                const penalidade = Math.min(25, ((this.estatisticas.metricas.tempoMedioInsercao -
                    tempoInsercaoIdeal) /
                    tempoInsercaoIdeal) *
                    10);
                saudeGeral -= penalidade;
            }
            if (this.estatisticas.metricas.tempoMedioConsulta > tempoConsultaIdeal) {
                const penalidade = Math.min(25, ((this.estatisticas.metricas.tempoMedioConsulta -
                    tempoConsultaIdeal) /
                    tempoConsultaIdeal) *
                    10);
                saudeGeral -= penalidade;
            }
            // Garantir que a saúde não seja negativa
            saudeGeral = Math.max(0, saudeGeral);
            // Determinar status com base na saúde
            let status = 'Ótimo';
            if (saudeGeral < 60) {
                status = 'Crítico';
            }
            else if (saudeGeral < 80) {
                status = 'Alerta';
            }
            else if (saudeGeral < 90) {
                status = 'Bom';
            }
            // Gerar recomendações
            const recomendacoes = [];
            if (this.estatisticas.metricas.taxaErros > 5) {
                recomendacoes.push('Investigar e corrigir erros frequentes no módulo de auditoria');
            }
            if (this.estatisticas.metricas.tempoMedioInsercao > 500) {
                recomendacoes.push('Otimizar processo de inserção de logs');
            }
            if (this.estatisticas.metricas.tempoMedioConsulta > 1000) {
                recomendacoes.push('Revisar índices e otimizar consultas');
            }
            // Verificar índices não utilizados
            const indicesNaoUtilizados = indicesResult.filter((indice) => indice.num_scans === '0');
            if (indicesNaoUtilizados.length > 0) {
                recomendacoes.push(`Considerar remover índices não utilizados: ${indicesNaoUtilizados.map((i) => i.nome_indice).join(', ')}`);
            }
            return {
                saudeGeral: {
                    pontuacao: Math.round(saudeGeral),
                    status,
                    dataAvaliacao: new Date(),
                },
                estatisticas: this.estatisticas,
                detalhes: {
                    particoes: particoesResult,
                    indices: indicesResult,
                    operacoesLentas: operacoesLentasResult,
                },
                recomendacoes,
            };
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
            const errorStack = error instanceof Error ? error.stack : undefined;
            this.logger.error(`Erro ao gerar relatório de saúde: ${errorMessage}`, errorStack);
            throw error;
        }
    }
};
exports.AuditoriaMonitoramentoService = AuditoriaMonitoramentoService;
exports.AuditoriaMonitoramentoService = AuditoriaMonitoramentoService = AuditoriaMonitoramentoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(log_auditoria_entity_1.LogAuditoria)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _b : Object, typeof (_c = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _c : Object, typeof (_d = typeof schedule_adapter_service_1.ScheduleAdapterService !== "undefined" && schedule_adapter_service_1.ScheduleAdapterService) === "function" ? _d : Object])
], AuditoriaMonitoramentoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,