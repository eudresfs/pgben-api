{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\jwt-blacklist.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\jwt-blacklist.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Get,\n  Delete,\n  Body,\n  Param,\n  Query,\n  HttpCode,\n  HttpStatus,\n  UseGuards,\n  UseInterceptors,\n  Ip,\n  Headers,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBody,\n  ApiParam,\n  ApiQuery,\n  ApiBearerAuth,\n  ApiHeader,\n} from '@nestjs/swagger';\nimport { JwtBlacklistService } from '../services/jwt-blacklist.service';\nimport {\n  AddToBlacklistDto,\n  CheckBlacklistDto,\n  InvalidateUserTokensDto,\n  BlacklistResponseDto,\n  CheckBlacklistResponseDto,\n  BlacklistQueryDto,\n  BlacklistStatsDto,\n} from '../dtos/jwt-blacklist.dto';\nimport { JwtBlacklist } from '../../entities/jwt-blacklist.entity';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { RolesGuard } from '../guards/roles.guard';\nimport { Roles } from '../decorators/role.decorator';\nimport { GetUser } from '../decorators/get-user.decorator';\nimport { Usuario } from '../../entities/usuario.entity';\nimport {\n  ThrottleApi,\n  ThrottleCritical,\n} from '../../common/decorators/throttle.decorator';\nimport { LoggingInterceptor } from '../../common/interceptors/logging.interceptor';\n\n/**\n * Controller de Blacklist de Tokens JWT\n *\n * Gerencia tokens JWT invalidados para prevenir reutilização\n * de tokens comprometidos ou revogados\n */\n@Controller('auth/blacklist')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@UseInterceptors(LoggingInterceptor)\n@ApiBearerAuth()\nexport class JwtBlacklistController {\n  constructor(private readonly jwtBlacklistService: JwtBlacklistService) {}\n\n  /**\n   * Adiciona um token à blacklist\n   */\n  @Post('add')\n  @HttpCode(HttpStatus.OK)\n  @Roles('ADMIN', 'SUPER_ADMIN')\n  @ThrottleCritical()\n  @ApiOperation({\n    summary: 'Adicionar token à blacklist',\n    description:\n      'Invalida um token JWT específico adicionando-o à blacklist (apenas administradores)',\n  })\n  @ApiBody({ type: AddToBlacklistDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Token adicionado à blacklist com sucesso',\n    type: BlacklistResponseDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - Permissões insuficientes',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Muitas tentativas - Rate limit excedido',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Erro interno do servidor',\n  })\n  async addToBlacklist(\n    @Body() addToBlacklistDto: AddToBlacklistDto,\n  ): Promise<BlacklistResponseDto> {\n    return this.jwtBlacklistService.addToBlacklist(addToBlacklistDto);\n  }\n\n  /**\n   * Verifica se um token está na blacklist\n   */\n  @Post('check')\n  @HttpCode(HttpStatus.OK)\n  @Roles('ADMIN', 'SUPER_ADMIN', 'AUDITOR')\n  @ThrottleApi()\n  @ApiOperation({\n    summary: 'Verificar se token está na blacklist',\n    description: 'Verifica se um token JWT específico está invalidado',\n  })\n  @ApiBody({ type: CheckBlacklistDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Status do token na blacklist',\n    type: CheckBlacklistResponseDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - Permissões insuficientes',\n  })\n  async checkBlacklist(\n    @Body() checkBlacklistDto: CheckBlacklistDto,\n  ): Promise<CheckBlacklistResponseDto> {\n    return this.jwtBlacklistService.isTokenBlacklisted(checkBlacklistDto);\n  }\n\n  /**\n   * Invalida todos os tokens de um usuário\n   */\n  @Post('invalidate-user/:userId')\n  @HttpCode(HttpStatus.OK)\n  @Roles('ADMIN', 'SUPER_ADMIN')\n  @ThrottleCritical()\n  @ApiOperation({\n    summary: 'Invalidar todos os tokens de um usuário',\n    description:\n      'Adiciona todos os tokens ativos de um usuário à blacklist (apenas administradores)',\n  })\n  @ApiParam({\n    name: 'userId',\n    description: 'ID do usuário',\n    example: 'user-uuid-v4',\n  })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        reason: {\n          type: 'string',\n          description: 'Motivo da invalidação',\n          example: 'security_breach',\n        },\n        token_type: {\n          type: 'string',\n          enum: ['access', 'refresh', 'all'],\n          description: 'Tipo de token a invalidar',\n          example: 'all',\n        },\n      },\n      required: ['reason'],\n    },\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Tokens do usuário invalidados com sucesso',\n    type: BlacklistResponseDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - Permissões insuficientes',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Usuário não encontrado',\n  })\n  @ApiHeader({\n    name: 'User-Agent',\n    description: 'User Agent do cliente',\n    required: false,\n  })\n  async invalidateUserTokens(\n    @Param('userId') userId: string,\n    @Body() body: { reason: string; token_type?: 'access' | 'refresh' | 'all' },\n    @Ip() clientIp: string,\n    @Headers('user-agent') userAgent?: string,\n  ): Promise<BlacklistResponseDto> {\n    const invalidateDto: InvalidateUserTokensDto = {\n      usuario_id: userId,\n      reason: body.reason,\n      token_type: body.token_type,\n      client_ip: clientIp,\n      user_agent: userAgent,\n    };\n\n    // TODO: Buscar tokens ativos do usuário do RefreshTokenService\n    // Por enquanto, retornamos uma resposta simulada\n    const activeTokens: Array<{\n      jti: string;\n      token_type: 'access' | 'refresh';\n      expires_at: Date;\n    }> = [];\n\n    return this.jwtBlacklistService.invalidateUserTokens(\n      invalidateDto,\n      activeTokens,\n    );\n  }\n\n  /**\n   * Remove um token da blacklist\n   */\n  @Delete('remove/:jti')\n  @Roles('SUPER_ADMIN')\n  @ThrottleCritical()\n  @ApiOperation({\n    summary: 'Remover token da blacklist',\n    description:\n      'Remove um token específico da blacklist (apenas super administradores)',\n  })\n  @ApiParam({\n    name: 'jti',\n    description: 'JWT ID do token',\n    example: 'jti-uuid-v4',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Token removido da blacklist com sucesso',\n    type: BlacklistResponseDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - Permissões insuficientes',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Token não encontrado na blacklist',\n  })\n  async removeFromBlacklist(\n    @Param('jti') jti: string,\n  ): Promise<BlacklistResponseDto> {\n    return this.jwtBlacklistService.removeFromBlacklist(jti);\n  }\n\n  /**\n   * Lista tokens na blacklist\n   */\n  @Get('list')\n  @Roles('ADMIN', 'SUPER_ADMIN')\n  @ThrottleApi()\n  @ApiOperation({\n    summary: 'Listar tokens na blacklist',\n    description:\n      'Lista tokens invalidados com filtros e paginação (apenas administradores)',\n  })\n  @ApiQuery({\n    name: 'usuario_id',\n    required: false,\n    description: 'Filtrar por ID do usuário',\n    example: 'user-uuid-v4',\n  })\n  @ApiQuery({\n    name: 'token_type',\n    required: false,\n    enum: ['access', 'refresh'],\n    description: 'Filtrar por tipo de token',\n  })\n  @ApiQuery({\n    name: 'reason',\n    required: false,\n    description: 'Filtrar por motivo da invalidação',\n    example: 'user_logout',\n  })\n  @ApiQuery({\n    name: 'only_active',\n    required: false,\n    type: 'boolean',\n    description: 'Incluir apenas tokens ainda válidos',\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: 'number',\n    description: 'Página para paginação',\n    example: 1,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: 'number',\n    description: 'Itens por página (máximo 100)',\n    example: 10,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de tokens na blacklist',\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'array',\n          items: { $ref: '#/components/schemas/JwtBlacklist' },\n        },\n        total: { type: 'number' },\n        page: { type: 'number' },\n        limit: { type: 'number' },\n        totalPages: { type: 'number' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - Permissões insuficientes',\n  })\n  async listBlacklistedTokens(@Query() queryDto: BlacklistQueryDto): Promise<{\n    data: JwtBlacklist[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    return this.jwtBlacklistService.listBlacklistedTokens(queryDto);\n  }\n\n  /**\n   * Obtém estatísticas da blacklist\n   */\n  @Get('stats')\n  @Roles('ADMIN', 'SUPER_ADMIN')\n  @ThrottleApi()\n  @ApiOperation({\n    summary: 'Estatísticas da blacklist',\n    description:\n      'Obtém estatísticas detalhadas da blacklist de tokens (apenas administradores)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Estatísticas da blacklist',\n    type: BlacklistStatsDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - Permissões insuficientes',\n  })\n  async getBlacklistStats(): Promise<BlacklistStatsDto> {\n    return this.jwtBlacklistService.getBlacklistStats();\n  }\n\n  /**\n   * Limpa tokens expirados da blacklist\n   */\n  @Post('cleanup')\n  @HttpCode(HttpStatus.OK)\n  @Roles('ADMIN', 'SUPER_ADMIN')\n  @ThrottleCritical()\n  @ApiOperation({\n    summary: 'Limpar tokens expirados',\n    description:\n      'Remove tokens expirados da blacklist (apenas administradores)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Tokens expirados removidos com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string' },\n        deletedCount: { type: 'number' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - Permissões insuficientes',\n  })\n  async cleanupExpiredTokens(): Promise<{\n    message: string;\n    deletedCount: number;\n  }> {\n    const deletedCount = await this.jwtBlacklistService.cleanupExpiredTokens();\n\n    return {\n      message: 'Tokens expirados removidos com sucesso',\n      deletedCount,\n    };\n  }\n\n  /**\n   * Invalida o próprio token do usuário (logout)\n   */\n  @Post('logout')\n  @HttpCode(HttpStatus.OK)\n  @ThrottleApi()\n  @ApiOperation({\n    summary: 'Logout - Invalidar token atual',\n    description: 'Invalida o token atual do usuário autenticado',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Logout realizado com sucesso',\n    type: BlacklistResponseDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiHeader({\n    name: 'Authorization',\n    description: 'Bearer token',\n    required: true,\n  })\n  @ApiHeader({\n    name: 'User-Agent',\n    description: 'User Agent do cliente',\n    required: false,\n  })\n  async logout(\n    @GetUser() user: Usuario,\n    @Headers('authorization') authHeader: string,\n    @Ip() clientIp: string,\n    @Headers('user-agent') userAgent?: string,\n  ): Promise<BlacklistResponseDto> {\n    // Extrair token do header Authorization\n    const token = authHeader?.replace('Bearer ', '');\n    if (!token) {\n      throw new Error('Token não encontrado');\n    }\n\n    const jti = this.jwtBlacklistService.extractJtiFromToken(token);\n    if (!jti) {\n      throw new Error('Token inválido');\n    }\n\n    // Decodificar token para obter data de expiração\n    const decoded = JSON.parse(\n      Buffer.from(token.split('.')[1], 'base64').toString(),\n    );\n    const expiresAt = new Date(decoded.exp * 1000);\n\n    const addToBlacklistDto: AddToBlacklistDto = {\n      jti,\n      usuario_id: user.id,\n      token_type: 'access',\n      expires_at: expiresAt.toISOString(),\n      reason: 'user_logout',\n      client_ip: clientIp,\n      user_agent: userAgent,\n      metadata: {\n        logout_timestamp: new Date().toISOString(),\n        user_initiated: true,\n      },\n    };\n\n    return this.jwtBlacklistService.addToBlacklist(addToBlacklistDto);\n  }\n\n  /**\n   * Logout global - Invalida todos os tokens do usuário\n   */\n  @Post('logout-all')\n  @HttpCode(HttpStatus.OK)\n  @ThrottleApi()\n  @ApiOperation({\n    summary: 'Logout Global - Invalidar todos os tokens',\n    description:\n      'Invalida todos os tokens ativos do usuário autenticado (access e refresh)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Logout global realizado com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n          example: 'Todos os tokens do usuário foram invalidados',\n        },\n        success: {\n          type: 'boolean',\n          example: true,\n        },\n        affected_count: {\n          type: 'number',\n          example: 3,\n        },\n        timestamp: {\n          type: 'string',\n          example: '2024-01-15T10:30:00Z',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiHeader({\n    name: 'Authorization',\n    description: 'Bearer token',\n    required: true,\n  })\n  @ApiHeader({\n    name: 'User-Agent',\n    description: 'User Agent do cliente',\n    required: false,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n  })\n  @ApiHeader({\n    name: 'Authorization',\n    description: 'Bearer token',\n    required: true,\n  })\n  @ApiHeader({\n    name: 'User-Agent',\n    description: 'User Agent do cliente',\n    required: false,\n  })\n  async logoutAll(\n    @GetUser() user: Usuario,\n    @Ip() clientIp: string,\n    @Headers('user-agent') userAgent?: string,\n  ): Promise<{\n    message: string;\n    success: boolean;\n    affected_count: number;\n    timestamp: string;\n  }> {\n    const invalidateDto: InvalidateUserTokensDto = {\n      usuario_id: user.id,\n      reason: 'user_logout_all',\n      client_ip: clientIp,\n      user_agent: userAgent,\n      metadata: {\n        logout_all_timestamp: new Date().toISOString(),\n        user_initiated: true,\n        action: 'global_logout',\n      },\n    };\n\n    // Obter tokens ativos do usuário (simulação - implemente conforme sua lógica)\n    const activeTokens = []; // Substitua por sua lógica para obter tokens ativos\n\n    const result = await this.jwtBlacklistService.invalidateUserTokens(\n      invalidateDto,\n      activeTokens,\n    );\n\n    return {\n      message: 'Todos os tokens do usuário foram invalidados',\n      success: true,\n      affected_count: result.affected_count || 0,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n"],"version":3}