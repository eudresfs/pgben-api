{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\controllers\\dados-beneficio.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\controllers\\dados-beneficio.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  ParseUUIDPipe,\n  UseGuards,\n  HttpStatus,\n  BadRequestException,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiBody,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../../auth/guards/roles.guard';\nimport { Roles } from '../../../auth/decorators/role.decorator';\nimport { UserRole } from '../../../enums';\nimport { DadosBeneficioFactoryService } from '../services/dados-beneficio-factory.service';\nimport {\n  TipoDadosBeneficio,\n  IDadosBeneficio,\n  ICreateDadosBeneficioDto,\n  IUpdateDadosBeneficioDto,\n} from '../interfaces/dados-beneficio.interface';\n\n/**\n * Controlador centralizado para gerenciar dados de todos os tipos de benefícios\n *\n * Este controlador unifica o acesso a dados específicos de benefícios,\n * eliminando a necessidade de múltiplos controladores separados.\n */\n@ApiTags('Benefícios')\n@Controller('dados-beneficio')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\nexport class DadosBeneficioController {\n  constructor(\n    private readonly dadosBeneficioFactoryService: DadosBeneficioFactoryService,\n  ) {}\n\n  /**\n   * Listar tipos de benefícios suportados\n   */\n  @Get('tipos')\n  @ApiOperation({\n    summary: 'Listar tipos de benefícios suportados',\n    description:\n      'Retorna todos os tipos de benefícios que possuem dados específicos',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Lista de tipos de benefícios suportados',\n    schema: {\n      type: 'object',\n      properties: {\n        tipos: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              codigo: { type: 'string', example: 'aluguel-social' },\n              nome: { type: 'string', example: 'Aluguel Social' },\n              descricao: {\n                type: 'string',\n                example: 'Dados específicos para solicitação de Aluguel Social',\n              },\n            },\n          },\n        },\n      },\n    },\n  })\n  async getTiposSuportados() {\n    const tipos = this.dadosBeneficioFactoryService.getSupportedTypes();\n    return {\n      tipos: tipos.map((tipo) => ({\n        codigo: tipo,\n        ...this.dadosBeneficioFactoryService.getTypeMetadata(tipo),\n      })),\n    };\n  }\n\n  /**\n   * Criar dados específicos para um tipo de benefício\n   */\n  @Post(':tipo')\n  @ApiOperation({\n    summary: 'Criar dados específicos de benefício',\n    description:\n      'Cria dados específicos para uma solicitação de benefício baseado no tipo',\n  })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo do benefício',\n    enum: TipoDadosBeneficio,\n    example: TipoDadosBeneficio.ALUGUEL_SOCIAL,\n  })\n  @ApiBody({\n    description:\n      'Dados específicos do benefício (estrutura varia conforme o tipo)',\n    schema: {\n      type: 'object',\n      properties: {\n        solicitacao_id: {\n          type: 'string',\n          format: 'uuid',\n          description: 'ID da solicitação',\n        },\n      },\n      required: ['solicitacao_id'],\n      additionalProperties: true,\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.CREATED,\n    description: 'Dados específicos criados com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', format: 'uuid' },\n        solicitacao_id: { type: 'string', format: 'uuid' },\n        createdAt: { type: 'string', format: 'date-time' },\n        updatedAt: { type: 'string', format: 'date-time' },\n      },\n      additionalProperties: true,\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.BAD_REQUEST,\n    description: 'Tipo de benefício inválido ou dados inválidos',\n  })\n  async create(\n    @Param('tipo') tipo: string,\n    @Body() createDto: ICreateDadosBeneficioDto,\n  ): Promise<IDadosBeneficio> {\n    return this.dadosBeneficioFactoryService.create(tipo, createDto);\n  }\n\n  /**\n   * Buscar dados específicos por ID\n   */\n  @Get(':tipo/:id')\n  @ApiOperation({\n    summary: 'Buscar dados específicos por ID',\n    description: 'Retorna os dados específicos de um benefício pelo ID',\n  })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo do benefício',\n    enum: TipoDadosBeneficio,\n    example: TipoDadosBeneficio.ALUGUEL_SOCIAL,\n  })\n  @ApiParam({ name: 'id', description: 'ID dos dados específicos' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Dados específicos encontrados',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', format: 'uuid' },\n        solicitacao_id: { type: 'string', format: 'uuid' },\n        createdAt: { type: 'string', format: 'date-time' },\n        updatedAt: { type: 'string', format: 'date-time' },\n      },\n      additionalProperties: true,\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Dados específicos não encontrados',\n  })\n  async findOne(\n    @Param('tipo') tipo: string,\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise<IDadosBeneficio> {\n    return this.dadosBeneficioFactoryService.findOne(tipo, id);\n  }\n\n  /**\n   * Buscar dados específicos por solicitação\n   */\n  @Get(':tipo/solicitacao/:solicitacaoId')\n  @ApiOperation({\n    summary: 'Buscar dados específicos por solicitação',\n    description: 'Retorna os dados específicos de uma solicitação de benefício',\n  })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo do benefício',\n    enum: TipoDadosBeneficio,\n    example: TipoDadosBeneficio.ALUGUEL_SOCIAL,\n  })\n  @ApiParam({ name: 'solicitacaoId', description: 'ID da solicitação' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Dados específicos encontrados',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', format: 'uuid' },\n        solicitacao_id: { type: 'string', format: 'uuid' },\n        createdAt: { type: 'string', format: 'date-time' },\n        updatedAt: { type: 'string', format: 'date-time' },\n      },\n      additionalProperties: true,\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Dados específicos não encontrados para esta solicitação',\n  })\n  async findBySolicitacao(\n    @Param('tipo') tipo: string,\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n  ): Promise<IDadosBeneficio> {\n    return this.dadosBeneficioFactoryService.findBySolicitacao(\n      tipo,\n      solicitacaoId,\n    );\n  }\n\n  /**\n   * Atualizar dados específicos\n   */\n  @Patch(':tipo/:id')\n  @ApiOperation({\n    summary: 'Atualizar dados específicos',\n    description: 'Atualiza dados específicos de um benefício',\n  })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo do benefício',\n    enum: TipoDadosBeneficio,\n    example: TipoDadosBeneficio.ALUGUEL_SOCIAL,\n  })\n  @ApiParam({ name: 'id', description: 'ID dos dados específicos' })\n  @ApiBody({\n    description: 'Dados para atualização (estrutura varia conforme o tipo)',\n    schema: {\n      type: 'object',\n      additionalProperties: true,\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Dados específicos atualizados com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        id: { type: 'string', format: 'uuid' },\n        solicitacao_id: { type: 'string', format: 'uuid' },\n        createdAt: { type: 'string', format: 'date-time' },\n        updatedAt: { type: 'string', format: 'date-time' },\n      },\n      additionalProperties: true,\n    },\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Dados específicos não encontrados',\n  })\n  async update(\n    @Param('tipo') tipo: string,\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateDto: IUpdateDadosBeneficioDto,\n  ): Promise<IDadosBeneficio> {\n    return this.dadosBeneficioFactoryService.update(tipo, id, updateDto);\n  }\n\n  /**\n   * Remover dados específicos\n   */\n  @Delete(':tipo/:id')\n  @ApiOperation({\n    summary: 'Remover dados específicos',\n    description: 'Remove dados específicos de um benefício',\n  })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo do benefício',\n    enum: TipoDadosBeneficio,\n    example: TipoDadosBeneficio.ALUGUEL_SOCIAL,\n  })\n  @ApiParam({ name: 'id', description: 'ID dos dados específicos' })\n  @ApiResponse({\n    status: HttpStatus.NO_CONTENT,\n    description: 'Dados específicos removidos com sucesso',\n  })\n  @ApiResponse({\n    status: HttpStatus.NOT_FOUND,\n    description: 'Dados específicos não encontrados',\n  })\n  async remove(\n    @Param('tipo') tipo: string,\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise<void> {\n    return this.dadosBeneficioFactoryService.remove(tipo, id);\n  }\n\n  /**\n   * Verificar se existem dados para uma solicitação\n   */\n  @Get(':tipo/solicitacao/:solicitacaoId/exists')\n  @ApiOperation({\n    summary: 'Verificar existência de dados por solicitação',\n    description: 'Verifica se existem dados específicos para uma solicitação',\n  })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo do benefício',\n    enum: TipoDadosBeneficio,\n    example: TipoDadosBeneficio.ALUGUEL_SOCIAL,\n  })\n  @ApiParam({ name: 'solicitacaoId', description: 'ID da solicitação' })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Resultado da verificação',\n    schema: {\n      type: 'object',\n      properties: {\n        exists: { type: 'boolean' },\n        tipo: { type: 'string' },\n        solicitacao_id: { type: 'string', format: 'uuid' },\n      },\n    },\n  })\n  async checkExists(\n    @Param('tipo') tipo: string,\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n  ) {\n    const exists = await this.dadosBeneficioFactoryService.existsBySolicitacao(\n      tipo,\n      solicitacaoId,\n    );\n    return {\n      exists,\n      tipo,\n      solicitacao_id: solicitacaoId,\n    };\n  }\n}\n"],"version":3}