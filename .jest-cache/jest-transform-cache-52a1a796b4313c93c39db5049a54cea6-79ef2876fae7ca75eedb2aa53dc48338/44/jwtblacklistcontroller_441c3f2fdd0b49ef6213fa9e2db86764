a62e3cb253363e1c9c21eb8edcb4e456
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtBlacklistController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_blacklist_service_1 = require("../services/jwt-blacklist.service");
const jwt_blacklist_dto_1 = require("../dtos/jwt-blacklist.dto");
const jwt_auth_guard_1 = require("../guards/jwt-auth.guard");
const roles_guard_1 = require("../guards/roles.guard");
const role_decorator_1 = require("../decorators/role.decorator");
const get_user_decorator_1 = require("../decorators/get-user.decorator");
const usuario_entity_1 = require("../../entities/usuario.entity");
const throttle_decorator_1 = require("../../common/decorators/throttle.decorator");
const logging_interceptor_1 = require("../../common/interceptors/logging.interceptor");
/**
 * Controller de Blacklist de Tokens JWT
 *
 * Gerencia tokens JWT invalidados para prevenir reutilização
 * de tokens comprometidos ou revogados
 */
let JwtBlacklistController = class JwtBlacklistController {
    jwtBlacklistService;
    constructor(jwtBlacklistService) {
        this.jwtBlacklistService = jwtBlacklistService;
    }
    /**
     * Adiciona um token à blacklist
     */
    async addToBlacklist(addToBlacklistDto) {
        return this.jwtBlacklistService.addToBlacklist(addToBlacklistDto);
    }
    /**
     * Verifica se um token está na blacklist
     */
    async checkBlacklist(checkBlacklistDto) {
        return this.jwtBlacklistService.isTokenBlacklisted(checkBlacklistDto);
    }
    /**
     * Invalida todos os tokens de um usuário
     */
    async invalidateUserTokens(userId, body, clientIp, userAgent) {
        const invalidateDto = {
            usuario_id: userId,
            reason: body.reason,
            token_type: body.token_type,
            client_ip: clientIp,
            user_agent: userAgent,
        };
        // TODO: Buscar tokens ativos do usuário do RefreshTokenService
        // Por enquanto, retornamos uma resposta simulada
        const activeTokens = [];
        return this.jwtBlacklistService.invalidateUserTokens(invalidateDto, activeTokens);
    }
    /**
     * Remove um token da blacklist
     */
    async removeFromBlacklist(jti) {
        return this.jwtBlacklistService.removeFromBlacklist(jti);
    }
    /**
     * Lista tokens na blacklist
     */
    async listBlacklistedTokens(queryDto) {
        return this.jwtBlacklistService.listBlacklistedTokens(queryDto);
    }
    /**
     * Obtém estatísticas da blacklist
     */
    async getBlacklistStats() {
        return this.jwtBlacklistService.getBlacklistStats();
    }
    /**
     * Limpa tokens expirados da blacklist
     */
    async cleanupExpiredTokens() {
        const deletedCount = await this.jwtBlacklistService.cleanupExpiredTokens();
        return {
            message: 'Tokens expirados removidos com sucesso',
            deletedCount,
        };
    }
    /**
     * Invalida o próprio token do usuário (logout)
     */
    async logout(user, authHeader, clientIp, userAgent) {
        // Extrair token do header Authorization
        const token = authHeader?.replace('Bearer ', '');
        if (!token) {
            throw new Error('Token não encontrado');
        }
        const jti = this.jwtBlacklistService.extractJtiFromToken(token);
        if (!jti) {
            throw new Error('Token inválido');
        }
        // Decodificar token para obter data de expiração
        const decoded = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
        const expiresAt = new Date(decoded.exp * 1000);
        const addToBlacklistDto = {
            jti,
            usuario_id: user.id,
            token_type: 'access',
            expires_at: expiresAt.toISOString(),
            reason: 'user_logout',
            client_ip: clientIp,
            user_agent: userAgent,
            metadata: {
                logout_timestamp: new Date().toISOString(),
                user_initiated: true,
            },
        };
        return this.jwtBlacklistService.addToBlacklist(addToBlacklistDto);
    }
    /**
     * Logout global - Invalida todos os tokens do usuário
     */
    async logoutAll(user, clientIp, userAgent) {
        const invalidateDto = {
            usuario_id: user.id,
            reason: 'user_logout_all',
            client_ip: clientIp,
            user_agent: userAgent,
            metadata: {
                logout_all_timestamp: new Date().toISOString(),
                user_initiated: true,
                action: 'global_logout',
            },
        };
        // Obter tokens ativos do usuário (simulação - implemente conforme sua lógica)
        const activeTokens = []; // Substitua por sua lógica para obter tokens ativos
        const result = await this.jwtBlacklistService.invalidateUserTokens(invalidateDto, activeTokens);
        return {
            message: 'Todos os tokens do usuário foram invalidados',
            success: true,
            affected_count: result.affected_count || 0,
            timestamp: new Date().toISOString(),
        };
    }
};
exports.JwtBlacklistController = JwtBlacklistController;
__decorate([
    (0, common_1.Post)('add'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, role_decorator_1.Roles)('ADMIN', 'SUPER_ADMIN'),
    (0, throttle_decorator_1.ThrottleCritical)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Adicionar token à blacklist',
        description: 'Invalida um token JWT específico adicionando-o à blacklist (apenas administradores)',
    }),
    (0, swagger_1.ApiBody)({ type: jwt_blacklist_dto_1.AddToBlacklistDto }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Token adicionado à blacklist com sucesso',
        type: jwt_blacklist_dto_1.BlacklistResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - Permissões insuficientes',
    }),
    (0, swagger_1.ApiResponse)({
        status: 429,
        description: 'Muitas tentativas - Rate limit excedido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 500,
        description: 'Erro interno do servidor',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof jwt_blacklist_dto_1.AddToBlacklistDto !== "undefined" && jwt_blacklist_dto_1.AddToBlacklistDto) === "function" ? _b : Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], JwtBlacklistController.prototype, "addToBlacklist", null);
__decorate([
    (0, common_1.Post)('check'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, role_decorator_1.Roles)('ADMIN', 'SUPER_ADMIN', 'AUDITOR'),
    (0, throttle_decorator_1.ThrottleApi)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Verificar se token está na blacklist',
        description: 'Verifica se um token JWT específico está invalidado',
    }),
    (0, swagger_1.ApiBody)({ type: jwt_blacklist_dto_1.CheckBlacklistDto }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status do token na blacklist',
        type: jwt_blacklist_dto_1.CheckBlacklistResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - Permissões insuficientes',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_d = typeof jwt_blacklist_dto_1.CheckBlacklistDto !== "undefined" && jwt_blacklist_dto_1.CheckBlacklistDto) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], JwtBlacklistController.prototype, "checkBlacklist", null);
__decorate([
    (0, common_1.Post)('invalidate-user/:userId'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, role_decorator_1.Roles)('ADMIN', 'SUPER_ADMIN'),
    (0, throttle_decorator_1.ThrottleCritical)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Invalidar todos os tokens de um usuário',
        description: 'Adiciona todos os tokens ativos de um usuário à blacklist (apenas administradores)',
    }),
    (0, swagger_1.ApiParam)({
        name: 'userId',
        description: 'ID do usuário',
        example: 'user-uuid-v4',
    }),
    (0, swagger_1.ApiBody)({
        schema: {
            type: 'object',
            properties: {
                reason: {
                    type: 'string',
                    description: 'Motivo da invalidação',
                    example: 'security_breach',
                },
                token_type: {
                    type: 'string',
                    enum: ['access', 'refresh', 'all'],
                    description: 'Tipo de token a invalidar',
                    example: 'all',
                },
            },
            required: ['reason'],
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Tokens do usuário invalidados com sucesso',
        type: jwt_blacklist_dto_1.BlacklistResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - Permissões insuficientes',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Usuário não encontrado',
    }),
    (0, swagger_1.ApiHeader)({
        name: 'User-Agent',
        description: 'User Agent do cliente',
        required: false,
    }),
    __param(0, (0, common_1.Param)('userId')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Ip)()),
    __param(3, (0, common_1.Headers)('user-agent')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, String, String]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], JwtBlacklistController.prototype, "invalidateUserTokens", null);
__decorate([
    (0, common_1.Delete)('remove/:jti'),
    (0, role_decorator_1.Roles)('SUPER_ADMIN'),
    (0, throttle_decorator_1.ThrottleCritical)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Remover token da blacklist',
        description: 'Remove um token específico da blacklist (apenas super administradores)',
    }),
    (0, swagger_1.ApiParam)({
        name: 'jti',
        description: 'JWT ID do token',
        example: 'jti-uuid-v4',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Token removido da blacklist com sucesso',
        type: jwt_blacklist_dto_1.BlacklistResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - Permissões insuficientes',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Token não encontrado na blacklist',
    }),
    __param(0, (0, common_1.Param)('jti')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], JwtBlacklistController.prototype, "removeFromBlacklist", null);
__decorate([
    (0, common_1.Get)('list'),
    (0, role_decorator_1.Roles)('ADMIN', 'SUPER_ADMIN'),
    (0, throttle_decorator_1.ThrottleApi)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Listar tokens na blacklist',
        description: 'Lista tokens invalidados com filtros e paginação (apenas administradores)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'usuario_id',
        required: false,
        description: 'Filtrar por ID do usuário',
        example: 'user-uuid-v4',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'token_type',
        required: false,
        enum: ['access', 'refresh'],
        description: 'Filtrar por tipo de token',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'reason',
        required: false,
        description: 'Filtrar por motivo da invalidação',
        example: 'user_logout',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'only_active',
        required: false,
        type: 'boolean',
        description: 'Incluir apenas tokens ainda válidos',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        type: 'number',
        description: 'Página para paginação',
        example: 1,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: 'number',
        description: 'Itens por página (máximo 100)',
        example: 10,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de tokens na blacklist',
        schema: {
            type: 'object',
            properties: {
                data: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/JwtBlacklist' },
                },
                total: { type: 'number' },
                page: { type: 'number' },
                limit: { type: 'number' },
                totalPages: { type: 'number' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - Permissões insuficientes',
    }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_h = typeof jwt_blacklist_dto_1.BlacklistQueryDto !== "undefined" && jwt_blacklist_dto_1.BlacklistQueryDto) === "function" ? _h : Object]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], JwtBlacklistController.prototype, "listBlacklistedTokens", null);
__decorate([
    (0, common_1.Get)('stats'),
    (0, role_decorator_1.Roles)('ADMIN', 'SUPER_ADMIN'),
    (0, throttle_decorator_1.ThrottleApi)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Estatísticas da blacklist',
        description: 'Obtém estatísticas detalhadas da blacklist de tokens (apenas administradores)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Estatísticas da blacklist',
        type: jwt_blacklist_dto_1.BlacklistStatsDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - Permissões insuficientes',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], JwtBlacklistController.prototype, "getBlacklistStats", null);
__decorate([
    (0, common_1.Post)('cleanup'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, role_decorator_1.Roles)('ADMIN', 'SUPER_ADMIN'),
    (0, throttle_decorator_1.ThrottleCritical)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Limpar tokens expirados',
        description: 'Remove tokens expirados da blacklist (apenas administradores)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Tokens expirados removidos com sucesso',
        schema: {
            type: 'object',
            properties: {
                message: { type: 'string' },
                deletedCount: { type: 'number' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - Permissões insuficientes',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], JwtBlacklistController.prototype, "cleanupExpiredTokens", null);
__decorate([
    (0, common_1.Post)('logout'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, throttle_decorator_1.ThrottleApi)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Logout - Invalidar token atual',
        description: 'Invalida o token atual do usuário autenticado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Logout realizado com sucesso',
        type: jwt_blacklist_dto_1.BlacklistResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiHeader)({
        name: 'Authorization',
        description: 'Bearer token',
        required: true,
    }),
    (0, swagger_1.ApiHeader)({
        name: 'User-Agent',
        description: 'User Agent do cliente',
        required: false,
    }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Headers)('authorization')),
    __param(2, (0, common_1.Ip)()),
    __param(3, (0, common_1.Headers)('user-agent')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_m = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _m : Object, String, String, String]),
    __metadata("design:returntype", typeof (_o = typeof Promise !== "undefined" && Promise) === "function" ? _o : Object)
], JwtBlacklistController.prototype, "logout", null);
__decorate([
    (0, common_1.Post)('logout-all'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, throttle_decorator_1.ThrottleApi)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Logout Global - Invalidar todos os tokens',
        description: 'Invalida todos os tokens ativos do usuário autenticado (access e refresh)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Logout global realizado com sucesso',
        schema: {
            type: 'object',
            properties: {
                message: {
                    type: 'string',
                    example: 'Todos os tokens do usuário foram invalidados',
                },
                success: {
                    type: 'boolean',
                    example: true,
                },
                affected_count: {
                    type: 'number',
                    example: 3,
                },
                timestamp: {
                    type: 'string',
                    example: '2024-01-15T10:30:00Z',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiHeader)({
        name: 'Authorization',
        description: 'Bearer token',
        required: true,
    }),
    (0, swagger_1.ApiHeader)({
        name: 'User-Agent',
        description: 'User Agent do cliente',
        required: false,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiHeader)({
        name: 'Authorization',
        description: 'Bearer token',
        required: true,
    }),
    (0, swagger_1.ApiHeader)({
        name: 'User-Agent',
        description: 'User Agent do cliente',
        required: false,
    }),
    __param(0, (0, get_user_decorator_1.GetUser)()),
    __param(1, (0, common_1.Ip)()),
    __param(2, (0, common_1.Headers)('user-agent')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_p = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _p : Object, String, String]),
    __metadata("design:returntype", typeof (_q = typeof Promise !== "undefined" && Promise) === "function" ? _q : Object)
], JwtBlacklistController.prototype, "logoutAll", null);
exports.JwtBlacklistController = JwtBlacklistController = __decorate([
    (0, common_1.Controller)('auth/blacklist'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, common_1.UseInterceptors)(logging_interceptor_1.LoggingInterceptor),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof jwt_blacklist_service_1.JwtBlacklistService !== "undefined" && jwt_blacklist_service_1.JwtBlacklistService) === "function" ? _a : Object])
], JwtBlacklistController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,