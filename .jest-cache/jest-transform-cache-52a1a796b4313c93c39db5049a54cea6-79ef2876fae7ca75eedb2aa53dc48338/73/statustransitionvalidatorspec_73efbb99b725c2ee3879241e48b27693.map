{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\validators\\status-transition-validator.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\validators\\status-transition-validator.spec.ts"],"sourcesContent":["import { StatusTransitionValidator } from '../../../validators/status-transition-validator';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\n\ndescribe('StatusTransitionValidator', () => {\n  let validator: StatusTransitionValidator;\n\n  beforeEach(() => {\n    validator = new StatusTransitionValidator();\n  });\n\n  describe('canTransition', () => {\n    it('deve permitir transição de AGENDADO para LIBERADO', () => {\n      const result = validator.canTransition(\n        StatusPagamentoEnum.AGENDADO, \n        StatusPagamentoEnum.LIBERADO\n      );\n      \n      expect(result.allowed).toBeTruthy();\n      expect(result.message).toBe('Transição permitida');\n    });\n\n    it('deve permitir transição de LIBERADO para CONFIRMADO', () => {\n      const result = validator.canTransition(\n        StatusPagamentoEnum.LIBERADO, \n        StatusPagamentoEnum.CONFIRMADO\n      );\n      \n      expect(result.allowed).toBeTruthy();\n      expect(result.message).toBe('Transição permitida');\n    });\n\n    it('deve permitir transição de AGENDADO para CANCELADO', () => {\n      const result = validator.canTransition(\n        StatusPagamentoEnum.AGENDADO, \n        StatusPagamentoEnum.CANCELADO\n      );\n      \n      expect(result.allowed).toBeTruthy();\n      expect(result.message).toBe('Transição permitida');\n    });\n\n    it('deve permitir transição de LIBERADO para CANCELADO', () => {\n      const result = validator.canTransition(\n        StatusPagamentoEnum.LIBERADO, \n        StatusPagamentoEnum.CANCELADO\n      );\n      \n      expect(result.allowed).toBeTruthy();\n      expect(result.message).toBe('Transição permitida');\n    });\n\n    it('deve rejeitar transição de CONFIRMADO para LIBERADO', () => {\n      const result = validator.canTransition(\n        StatusPagamentoEnum.CONFIRMADO, \n        StatusPagamentoEnum.LIBERADO\n      );\n      \n      expect(result.allowed).toBeFalsy();\n      expect(result.message).toContain('não permitida');\n    });\n\n    it('deve rejeitar transição de CANCELADO para qualquer outro status', () => {\n      const resultParaLiberado = validator.canTransition(\n        StatusPagamentoEnum.CANCELADO, \n        StatusPagamentoEnum.LIBERADO\n      );\n      \n      const resultParaConfirmado = validator.canTransition(\n        StatusPagamentoEnum.CANCELADO, \n        StatusPagamentoEnum.CONFIRMADO\n      );\n      \n      const resultParaAgendado = validator.canTransition(\n        StatusPagamentoEnum.CANCELADO, \n        StatusPagamentoEnum.AGENDADO\n      );\n      \n      expect(resultParaLiberado.allowed).toBeFalsy();\n      expect(resultParaConfirmado.allowed).toBeFalsy();\n      expect(resultParaAgendado.allowed).toBeFalsy();\n    });\n\n    it('deve rejeitar transição para o mesmo status', () => {\n      const resultAgendado = validator.canTransition(\n        StatusPagamentoEnum.AGENDADO, \n        StatusPagamentoEnum.AGENDADO\n      );\n      \n      const resultLiberado = validator.canTransition(\n        StatusPagamentoEnum.LIBERADO, \n        StatusPagamentoEnum.LIBERADO\n      );\n      \n      expect(resultAgendado.allowed).toBeFalsy();\n      expect(resultLiberado.allowed).toBeFalsy();\n      expect(resultAgendado.message).toContain('mesmo status');\n      expect(resultLiberado.message).toContain('mesmo status');\n    });\n\n    it('deve rejeitar transição para status inválido', () => {\n      const result = validator.canTransition(\n        StatusPagamentoEnum.AGENDADO, \n        'STATUS_INEXISTENTE' as StatusPagamentoEnum\n      );\n      \n      expect(result.allowed).toBeFalsy();\n      expect(result.message).toContain('inválido');\n    });\n\n    it('deve rejeitar transição de CONFIRMADO para CANCELADO', () => {\n      const result = validator.canTransition(\n        StatusPagamentoEnum.CONFIRMADO, \n        StatusPagamentoEnum.CANCELADO\n      );\n      \n      expect(result.allowed).toBeFalsy();\n      expect(result.message).toContain('não permitida');\n    });\n  });\n\n  describe('getValidTransitions', () => {\n    it('deve retornar as transições válidas para AGENDADO', () => {\n      const transitions = validator.getValidTransitions(StatusPagamentoEnum.AGENDADO);\n      \n      expect(transitions).toContain(StatusPagamentoEnum.LIBERADO);\n      expect(transitions).toContain(StatusPagamentoEnum.CANCELADO);\n      expect(transitions.length).toBe(2);\n    });\n\n    it('deve retornar as transições válidas para LIBERADO', () => {\n      const transitions = validator.getValidTransitions(StatusPagamentoEnum.LIBERADO);\n      \n      expect(transitions).toContain(StatusPagamentoEnum.CONFIRMADO);\n      expect(transitions).toContain(StatusPagamentoEnum.CANCELADO);\n      expect(transitions.length).toBe(2);\n    });\n\n    it('deve retornar lista vazia para CONFIRMADO', () => {\n      const transitions = validator.getValidTransitions(StatusPagamentoEnum.CONFIRMADO);\n      \n      expect(transitions.length).toBe(0);\n    });\n\n    it('deve retornar lista vazia para CANCELADO', () => {\n      const transitions = validator.getValidTransitions(StatusPagamentoEnum.CANCELADO);\n      \n      expect(transitions.length).toBe(0);\n    });\n\n    it('deve retornar lista vazia para status inválido', () => {\n      const transitions = validator.getValidTransitions('STATUS_INEXISTENTE' as StatusPagamentoEnum);\n      \n      expect(transitions.length).toBe(0);\n    });\n  });\n\n  describe('getTransitionMatrix', () => {\n    it('deve retornar a matriz de transição completa', () => {\n      const matrix = validator.getTransitionMatrix();\n      \n      // Verifica se a matriz tem a estrutura esperada\n      expect(matrix).toBeDefined();\n      expect(Object.keys(matrix)).toContain(StatusPagamentoEnum.AGENDADO);\n      expect(Object.keys(matrix)).toContain(StatusPagamentoEnum.LIBERADO);\n      expect(Object.keys(matrix)).toContain(StatusPagamentoEnum.CONFIRMADO);\n      expect(Object.keys(matrix)).toContain(StatusPagamentoEnum.CANCELADO);\n      \n      // Verifica transições específicas\n      expect(matrix[StatusPagamentoEnum.AGENDADO]).toContain(StatusPagamentoEnum.LIBERADO);\n      expect(matrix[StatusPagamentoEnum.LIBERADO]).toContain(StatusPagamentoEnum.CONFIRMADO);\n      expect(matrix[StatusPagamentoEnum.CONFIRMADO].length).toBe(0);\n      expect(matrix[StatusPagamentoEnum.CANCELADO].length).toBe(0);\n    });\n  });\n});\n"],"version":3}