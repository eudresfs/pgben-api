9059ff8e620b4108dba6f1c36899542b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoricoConversaoPapel = void 0;
const typeorm_1 = require("typeorm");
const cidadao_entity_1 = require("./cidadao.entity");
const tipo_papel_enum_1 = require("../enums/tipo-papel.enum");
/**
 * Entidade de Histórico de Conversão de Papel
 *
 * Registra o histórico de conversões de papéis de cidadãos no sistema,
 * permitindo rastrear quando um cidadão foi convertido de um papel para outro.
 */
let HistoricoConversaoPapel = class HistoricoConversaoPapel {
    id;
    cidadao_id;
    cidadao;
    papel_anterior;
    papel_novo;
    composicao_familiar_id;
    usuario_id;
    justificativa;
    notificacao_enviada;
    tecnico_notificado_id;
    created_at;
    // Getters e Setters
    get cidadaoId() {
        return this.cidadao_id;
    }
    set cidadaoId(value) {
        this.cidadao_id = value;
    }
    get usuarioId() {
        return this.usuario_id;
    }
    set usuarioId(value) {
        this.usuario_id = value;
    }
    get composicaoFamiliarId() {
        return this.composicao_familiar_id;
    }
    set composicaoFamiliarId(value) {
        this.composicao_familiar_id = value;
    }
    get tecnicoNotificadoId() {
        return this.tecnico_notificado_id;
    }
    set tecnicoNotificadoId(value) {
        this.tecnico_notificado_id = value;
    }
    get createdAt() {
        return this.created_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se a conversão foi criada recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se a notificação foi enviada
     */
    isNotificacaoEnviada() {
        return this.notificacao_enviada;
    }
    /**
     * Verifica se tem técnico notificado
     */
    temTecnicoNotificado() {
        return !!this.tecnico_notificado_id;
    }
    /**
     * Verifica se tem composição familiar associada
     */
    temComposicaoFamiliar() {
        return !!this.composicao_familiar_id;
    }
    /**
     * Verifica se é uma promoção (papel novo é "superior" ao anterior)
     */
    isPromocao() {
        const hierarquia = {
            [tipo_papel_enum_1.TipoPapel.DEPENDENTE]: 1,
            [tipo_papel_enum_1.TipoPapel.BENEFICIARIO]: 2,
            [tipo_papel_enum_1.TipoPapel.REPRESENTANTE_LEGAL]: 3,
            [tipo_papel_enum_1.TipoPapel.REQUERENTE]: 4,
        };
        return hierarquia[this.papel_novo] > hierarquia[this.papel_anterior];
    }
    /**
     * Verifica se é uma redução de papel
     */
    isReducao() {
        const hierarquia = {
            [tipo_papel_enum_1.TipoPapel.DEPENDENTE]: 1,
            [tipo_papel_enum_1.TipoPapel.BENEFICIARIO]: 2,
            [tipo_papel_enum_1.TipoPapel.REPRESENTANTE_LEGAL]: 3,
            [tipo_papel_enum_1.TipoPapel.REQUERENTE]: 4,
        };
        return hierarquia[this.papel_novo] < hierarquia[this.papel_anterior];
    }
    /**
     * Verifica se é uma mudança lateral (mesmo nível hierárquico)
     */
    isMudancaLateral() {
        return !this.isPromocao() && !this.isReducao();
    }
    /**
     * Obtém a descrição do papel anterior
     */
    getDescricaoPapelAnterior() {
        const descricoes = {
            [tipo_papel_enum_1.TipoPapel.REQUERENTE]: 'Responsável Familiar',
            [tipo_papel_enum_1.TipoPapel.BENEFICIARIO]: 'Beneficiário',
            [tipo_papel_enum_1.TipoPapel.REPRESENTANTE_LEGAL]: 'Representante Legal',
            [tipo_papel_enum_1.TipoPapel.DEPENDENTE]: 'Dependente',
        };
        return descricoes[this.papel_anterior] || this.papel_anterior;
    }
    /**
     * Obtém a descrição do papel novo
     */
    getDescricaoPapelNovo() {
        const descricoes = {
            [tipo_papel_enum_1.TipoPapel.REQUERENTE]: 'Responsável Familiar',
            [tipo_papel_enum_1.TipoPapel.BENEFICIARIO]: 'Beneficiário',
            [tipo_papel_enum_1.TipoPapel.REPRESENTANTE_LEGAL]: 'Representante Legal',
            [tipo_papel_enum_1.TipoPapel.DEPENDENTE]: 'Dependente',
        };
        return descricoes[this.papel_novo] || this.papel_novo;
    }
    /**
     * Obtém a descrição da mudança
     */
    getDescricaoMudanca() {
        const anterior = this.getDescricaoPapelAnterior();
        const novo = this.getDescricaoPapelNovo();
        if (this.isPromocao()) {
            return `Promoção: ${anterior} → ${novo}`;
        }
        else if (this.isReducao()) {
            return `Redução: ${anterior} → ${novo}`;
        }
        else {
            return `Mudança: ${anterior} → ${novo}`;
        }
    }
    /**
     * Verifica se pertence a um cidadão específico
     */
    pertenceAoCidadao(cidadaoId) {
        return this.cidadao_id === cidadaoId;
    }
    /**
     * Verifica se foi executado por um usuário específico
     */
    foiExecutadoPorUsuario(usuarioId) {
        return this.usuario_id === usuarioId;
    }
    /**
     * Verifica se o técnico notificado é específico
     */
    tecnicoNotificadoEh(tecnicoId) {
        return this.tecnico_notificado_id === tecnicoId;
    }
    /**
     * Obtém um resumo da conversão
     */
    getSummary() {
        const mudanca = this.getDescricaoMudanca();
        const data = this.getCriacaoFormatada();
        const notificacao = this.isNotificacaoEnviada() ? ' (Notificado)' : '';
        return `${mudanca} em ${data}${notificacao}`;
    }
    /**
     * Gera uma chave única para o histórico
     */
    getUniqueKey() {
        return `historico_${this.cidadao_id}_${this.created_at.getTime()}`;
    }
    /**
     * Verifica se o histórico é consistente
     */
    isConsistente() {
        // Verifica se tem cidadão
        if (!this.cidadao_id)
            return false;
        // Verifica se tem usuário
        if (!this.usuario_id)
            return false;
        // Verifica se tem papéis válidos
        if (!this.papel_anterior || !this.papel_novo)
            return false;
        // Verifica se os papéis são diferentes
        if (this.papel_anterior === this.papel_novo)
            return false;
        // Verifica se tem justificativa
        if (!this.justificativa || this.justificativa.trim().length === 0)
            return false;
        return true;
    }
    /**
     * Clona o histórico (sem ID)
     */
    clone() {
        return {
            cidadao_id: this.cidadao_id,
            papel_anterior: this.papel_anterior,
            papel_novo: this.papel_novo,
            composicao_familiar_id: this.composicao_familiar_id,
            usuario_id: this.usuario_id,
            justificativa: this.justificativa,
            notificacao_enviada: this.notificacao_enviada,
            tecnico_notificado_id: this.tecnico_notificado_id,
        };
    }
    /**
     * Verifica se é uma conversão crítica (requer atenção especial)
     */
    isCritico() {
        // Conversões para responsável familiar são críticas
        if (this.papel_novo === tipo_papel_enum_1.TipoPapel.REQUERENTE)
            return true;
        // Remoção de responsável familiar é crítica
        if (this.papel_anterior === tipo_papel_enum_1.TipoPapel.REQUERENTE)
            return true;
        // Conversões recentes sem notificação são críticas
        if (this.isCriadoRecentemente() && !this.isNotificacaoEnviada())
            return true;
        return false;
    }
    /**
     * Verifica se requer aprovação adicional
     */
    requerAprovacao() {
        // Mudanças para responsável familiar requerem aprovação
        if (this.papel_novo === tipo_papel_enum_1.TipoPapel.REQUERENTE)
            return true;
        // Reduções de papel requerem aprovação
        if (this.isReducao())
            return true;
        return false;
    }
    /**
     * Obtém o tipo de impacto da conversão
     */
    getTipoImpacto() {
        if (this.isCritico())
            return 'ALTO';
        if (this.requerAprovacao())
            return 'MEDIO';
        return 'BAIXO';
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
        });
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            papel_anterior: this.papel_anterior,
            papel_novo: this.papel_novo,
            notificacao_enviada: this.notificacao_enviada,
            created_at: this.created_at,
        };
    }
    /**
     * Verifica se a notificação está pendente há muito tempo
     */
    notificacaoPendenteMuitoTempo() {
        if (this.isNotificacaoEnviada())
            return false;
        const seteDiasAtras = new Date();
        seteDiasAtras.setDate(seteDiasAtras.getDate() - 7);
        return this.created_at < seteDiasAtras;
    }
    /**
     * Obtém sugestões de ação para o histórico
     */
    getSugestoesAcao() {
        const sugestoes = [];
        if (!this.isNotificacaoEnviada()) {
            sugestoes.push('Enviar notificação sobre a conversão');
        }
        if (this.notificacaoPendenteMuitoTempo()) {
            sugestoes.push('Notificação pendente há mais de 7 dias - verificar urgência');
        }
        if (this.isCritico() && !this.temTecnicoNotificado()) {
            sugestoes.push('Conversão crítica - notificar técnico responsável');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar consistência dos dados do histórico');
        }
        return sugestoes;
    }
    /**
     * Verifica se pode ser auditado
     */
    podeSerAuditado() {
        return this.isConsistente() && this.getIdadeRegistroEmDias() >= 1;
    }
    /**
     * Obtém estatísticas da conversão
     */
    getEstatisticas() {
        return {
            tipo_mudanca: this.isPromocao()
                ? 'PROMOCAO'
                : this.isReducao()
                    ? 'REDUCAO'
                    : 'LATERAL',
            impacto: this.getTipoImpacto(),
            dias_desde_conversao: this.getIdadeRegistroEmDias(),
            notificacao_status: this.isNotificacaoEnviada() ? 'ENVIADA' : 'PENDENTE',
        };
    }
};
exports.HistoricoConversaoPapel = HistoricoConversaoPapel;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], HistoricoConversaoPapel.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'cidadao_id', type: 'uuid' }),
    __metadata("design:type", String)
], HistoricoConversaoPapel.prototype, "cidadao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => cidadao_entity_1.Cidadao, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'cidadao_id' }),
    __metadata("design:type", typeof (_a = typeof cidadao_entity_1.Cidadao !== "undefined" && cidadao_entity_1.Cidadao) === "function" ? _a : Object)
], HistoricoConversaoPapel.prototype, "cidadao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        name: 'papel_anterior',
        type: 'enum',
        enum: tipo_papel_enum_1.TipoPapel,
        enumName: 'tipo_papel',
    }),
    __metadata("design:type", typeof (_b = typeof tipo_papel_enum_1.PaperType !== "undefined" && tipo_papel_enum_1.PaperType) === "function" ? _b : Object)
], HistoricoConversaoPapel.prototype, "papel_anterior", void 0);
__decorate([
    (0, typeorm_1.Column)({
        name: 'papel_novo',
        type: 'enum',
        enum: tipo_papel_enum_1.TipoPapel,
        enumName: 'tipo_papel',
    }),
    __metadata("design:type", typeof (_c = typeof tipo_papel_enum_1.PaperType !== "undefined" && tipo_papel_enum_1.PaperType) === "function" ? _c : Object)
], HistoricoConversaoPapel.prototype, "papel_novo", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'composicao_familiar_id', type: 'uuid', nullable: true }),
    __metadata("design:type", String)
], HistoricoConversaoPapel.prototype, "composicao_familiar_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'usuario_id', type: 'uuid' }),
    __metadata("design:type", String)
], HistoricoConversaoPapel.prototype, "usuario_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'justificativa', type: 'text' }),
    __metadata("design:type", String)
], HistoricoConversaoPapel.prototype, "justificativa", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'notificacao_enviada', type: 'boolean', default: false }),
    __metadata("design:type", Boolean)
], HistoricoConversaoPapel.prototype, "notificacao_enviada", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'tecnico_notificado_id', type: 'uuid', nullable: true }),
    __metadata("design:type", String)
], HistoricoConversaoPapel.prototype, "tecnico_notificado_id", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], HistoricoConversaoPapel.prototype, "created_at", void 0);
exports.HistoricoConversaoPapel = HistoricoConversaoPapel = __decorate([
    (0, typeorm_1.Entity)('historico_conversao_papel'),
    (0, typeorm_1.Index)(['cidadao_id', 'created_at'])
], HistoricoConversaoPapel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,