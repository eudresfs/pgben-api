acc3d77eccf19e1e5b4a8b422e1d2dcf
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var PrazoSolicitacaoService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrazoSolicitacaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const exceptions_1 = require("../../../shared/exceptions");
const config_1 = require("@nestjs/config");
/**
 * Serviço responsável pelo gerenciamento de prazos das solicitações
 *
 * Este serviço implementa funcionalidades para:
 * - Calcular e definir prazos com base no tipo de solicitação e status
 * - Atualizar prazos quando ocorrerem mudanças de status
 * - Identificar solicitações com prazos vencidos ou próximos do vencimento
 * - Aplicar regras especiais para solicitações com determinação judicial
 */
let PrazoSolicitacaoService = PrazoSolicitacaoService_1 = class PrazoSolicitacaoService {
    solicitacaoRepository;
    configService;
    logger = new common_1.Logger(PrazoSolicitacaoService_1.name);
    configuracaoPrazos;
    constructor(solicitacaoRepository, configService) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.configService = configService;
        // Carregar configuração de prazos padrão
        this.configuracaoPrazos = {
            analise: this.configService.get('PRAZO_ANALISE_DIAS', 7),
            documentos: this.configService.get('PRAZO_DOCUMENTOS_DIAS', 15),
            processamento: this.configService.get('PRAZO_PROCESSAMENTO_DIAS', 5),
            prioridadeJudicial: this.configService.get('FATOR_PRIORIDADE_JUDICIAL', 0.5),
        };
    }
    /**
     * Calcula e define o prazo de análise para uma solicitação
     * @param solicitacaoId ID da solicitação
     * @returns Data do prazo de análise
     */
    async definirPrazoAnalise(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new exceptions_1.EntityNotFoundException('Solicitação', solicitacaoId);
        }
        // Calcular prazo com base na configuração
        let prazoEmDias = this.configuracaoPrazos.analise;
        // Aplicar prioridade se for determinação judicial
        if (solicitacao.determinacao_judicial_flag) {
            prazoEmDias = Math.ceil(prazoEmDias * this.configuracaoPrazos.prioridadeJudicial);
            this.logger.log(`Prazo reduzido para determinação judicial: ${prazoEmDias} dias`);
        }
        // Calcular data do prazo
        const dataPrazo = new Date();
        dataPrazo.setDate(dataPrazo.getDate() + prazoEmDias);
        // Atualizar a solicitação
        solicitacao.prazo_analise = dataPrazo;
        await this.solicitacaoRepository.save(solicitacao);
        return dataPrazo;
    }
    /**
     * Calcula e define o prazo para envio de documentos
     * @param solicitacaoId ID da solicitação
     * @returns Data do prazo para documentos
     */
    async definirPrazoDocumentos(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new exceptions_1.EntityNotFoundException('Solicitação', solicitacaoId);
        }
        // Calcular prazo com base na configuração
        let prazoEmDias = this.configuracaoPrazos.documentos;
        // Aplicar prioridade se for determinação judicial
        if (solicitacao.determinacao_judicial_flag) {
            prazoEmDias = Math.ceil(prazoEmDias * this.configuracaoPrazos.prioridadeJudicial);
            this.logger.log(`Prazo reduzido para determinação judicial: ${prazoEmDias} dias`);
        }
        // Calcular data do prazo
        const dataPrazo = new Date();
        dataPrazo.setDate(dataPrazo.getDate() + prazoEmDias);
        // Atualizar a solicitação
        solicitacao.prazo_documentos = dataPrazo;
        await this.solicitacaoRepository.save(solicitacao);
        return dataPrazo;
    }
    /**
     * Calcula e define o prazo de processamento
     * @param solicitacaoId ID da solicitação
     * @returns Data do prazo de processamento
     */
    async definirPrazoProcessamento(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new exceptions_1.EntityNotFoundException('Solicitação', solicitacaoId);
        }
        // Calcular prazo com base na configuração
        let prazoEmDias = this.configuracaoPrazos.processamento;
        // Aplicar prioridade se for determinação judicial
        if (solicitacao.determinacao_judicial_flag) {
            prazoEmDias = Math.ceil(prazoEmDias * this.configuracaoPrazos.prioridadeJudicial);
            this.logger.log(`Prazo reduzido para determinação judicial: ${prazoEmDias} dias`);
        }
        // Calcular data do prazo
        const dataPrazo = new Date();
        dataPrazo.setDate(dataPrazo.getDate() + prazoEmDias);
        // Atualizar a solicitação
        solicitacao.prazo_processamento = dataPrazo;
        await this.solicitacaoRepository.save(solicitacao);
        return dataPrazo;
    }
    /**
     * Atualiza os prazos da solicitação com base em sua transição de estado
     * @param solicitacaoId ID da solicitação
     * @param novoStatus Novo status da solicitação
     */
    async atualizarPrazosTransicao(solicitacaoId, novoStatus) {
        try {
            // Definir prazos com base no novo status
            switch (novoStatus) {
                case solicitacao_entity_1.StatusSolicitacao.EM_ANALISE:
                    await this.definirPrazoAnalise(solicitacaoId);
                    break;
                case solicitacao_entity_1.StatusSolicitacao.AGUARDANDO_DOCUMENTOS:
                    await this.definirPrazoDocumentos(solicitacaoId);
                    break;
                case solicitacao_entity_1.StatusSolicitacao.EM_PROCESSAMENTO:
                    await this.definirPrazoProcessamento(solicitacaoId);
                    break;
                // Para outros estados, os prazos anteriores são mantidos ou podem ser limpos
                case solicitacao_entity_1.StatusSolicitacao.APROVADA:
                case solicitacao_entity_1.StatusSolicitacao.INDEFERIDA:
                case solicitacao_entity_1.StatusSolicitacao.CANCELADA:
                case solicitacao_entity_1.StatusSolicitacao.CONCLUIDA:
                case solicitacao_entity_1.StatusSolicitacao.ARQUIVADA:
                    // Limpar prazos ativos pois não são mais relevantes
                    await this.limparPrazos(solicitacaoId);
                    break;
            }
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar prazos: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Limpa os prazos ativos de uma solicitação
     * @param solicitacaoId ID da solicitação
     */
    async limparPrazos(solicitacaoId) {
        try {
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: solicitacaoId },
            });
            if (solicitacao) {
                solicitacao.prazo_analise = null;
                solicitacao.prazo_documentos = null;
                solicitacao.prazo_processamento = null;
                await this.solicitacaoRepository.save(solicitacao);
            }
        }
        catch (error) {
            this.logger.error(`Erro ao limpar prazos: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Verifica se os prazos da solicitação estão vencidos
     * @param solicitacaoId ID da solicitação
     * @returns Objeto com informações de vencimento de prazos
     */
    async verificarPrazosVencidos(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new exceptions_1.EntityNotFoundException('Solicitação', solicitacaoId);
        }
        const agora = new Date();
        const resultado = {
            analiseVencida: false,
            documentosVencidos: false,
            processamentoVencido: false,
            diasAtraso: 0,
        };
        // Verificar prazo de análise
        if (solicitacao.prazo_analise && agora > solicitacao.prazo_analise) {
            resultado.analiseVencida = true;
            resultado.diasAtraso = Math.floor((agora.getTime() - solicitacao.prazo_analise.getTime()) /
                (1000 * 60 * 60 * 24));
        }
        // Verificar prazo de documentos
        if (solicitacao.prazo_documentos && agora > solicitacao.prazo_documentos) {
            resultado.documentosVencidos = true;
            const diasAtrasoDoc = Math.floor((agora.getTime() - solicitacao.prazo_documentos.getTime()) /
                (1000 * 60 * 60 * 24));
            resultado.diasAtraso = Math.max(resultado.diasAtraso, diasAtrasoDoc);
        }
        // Verificar prazo de processamento
        if (solicitacao.prazo_processamento &&
            agora > solicitacao.prazo_processamento) {
            resultado.processamentoVencido = true;
            const diasAtrasoProc = Math.floor((agora.getTime() - solicitacao.prazo_processamento.getTime()) /
                (1000 * 60 * 60 * 24));
            resultado.diasAtraso = Math.max(resultado.diasAtraso, diasAtrasoProc);
        }
        return resultado;
    }
    /**
     * Encontra solicitações com prazos vencidos
     * @param tiposPrazo Tipos de prazo a serem verificados
     * @returns Lista de solicitações com prazos vencidos
     */
    async listarSolicitacoesComPrazosVencidos(tiposPrazo = [
        'analise',
        'documentos',
        'processamento',
    ]) {
        const agora = new Date();
        const queryBuilder = this.solicitacaoRepository.createQueryBuilder('solicitacao');
        // Construir condições para a consulta
        const condicoesArray = [];
        if (tiposPrazo.includes('analise')) {
            condicoesArray.push('solicitacao.prazo_analise IS NOT NULL AND solicitacao.prazo_analise < :agora');
        }
        if (tiposPrazo.includes('documentos')) {
            condicoesArray.push('solicitacao.prazo_documentos IS NOT NULL AND solicitacao.prazo_documentos < :agora');
        }
        if (tiposPrazo.includes('processamento')) {
            condicoesArray.push('solicitacao.prazo_processamento IS NOT NULL AND solicitacao.prazo_processamento < :agora');
        }
        if (condicoesArray.length === 0) {
            return [];
        }
        // Combinar as condições com OR
        const whereCondition = `(${condicoesArray.join(' OR ')})`;
        // Aplicar a condição WHERE
        queryBuilder.where(whereCondition, { agora });
        // Priorizar determinações judiciais
        queryBuilder.orderBy('solicitacao.determinacao_judicial_flag', 'DESC');
        // Depois ordenar por data de prazo mais antiga
        const leastExpr = 'LEAST(' +
            'COALESCE(solicitacao.prazo_analise, :dataFutura), ' +
            'COALESCE(solicitacao.prazo_documentos, :dataFutura), ' +
            'COALESCE(solicitacao.prazo_processamento, :dataFutura))';
        queryBuilder.addOrderBy(leastExpr, 'ASC');
        queryBuilder.setParameter('dataFutura', new Date('2099-12-31'));
        return queryBuilder.getMany();
    }
};
exports.PrazoSolicitacaoService = PrazoSolicitacaoService;
exports.PrazoSolicitacaoService = PrazoSolicitacaoService = PrazoSolicitacaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _b : Object])
], PrazoSolicitacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,