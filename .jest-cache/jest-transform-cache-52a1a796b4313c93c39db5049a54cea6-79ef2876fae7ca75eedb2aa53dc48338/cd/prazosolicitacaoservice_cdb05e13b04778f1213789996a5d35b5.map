{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\prazo-solicitacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\prazo-solicitacao.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../../entities/solicitacao.entity';\nimport { EntityNotFoundException } from '../../../shared/exceptions';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Interface para configuração de prazos\n */\ninterface ConfiguracaoPrazos {\n  analise: number; // em dias\n  documentos: number; // em dias\n  processamento: number; // em dias\n  prioridadeJudicial: number; // fator multiplicador para redução de prazo (0-1)\n}\n\n/**\n * Serviço responsável pelo gerenciamento de prazos das solicitações\n *\n * Este serviço implementa funcionalidades para:\n * - Calcular e definir prazos com base no tipo de solicitação e status\n * - Atualizar prazos quando ocorrerem mudanças de status\n * - Identificar solicitações com prazos vencidos ou próximos do vencimento\n * - Aplicar regras especiais para solicitações com determinação judicial\n */\n@Injectable()\nexport class PrazoSolicitacaoService {\n  private readonly logger = new Logger(PrazoSolicitacaoService.name);\n  private configuracaoPrazos: ConfiguracaoPrazos;\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    private readonly configService: ConfigService,\n  ) {\n    // Carregar configuração de prazos padrão\n    this.configuracaoPrazos = {\n      analise: this.configService.get<number>('PRAZO_ANALISE_DIAS', 7),\n      documentos: this.configService.get<number>('PRAZO_DOCUMENTOS_DIAS', 15),\n      processamento: this.configService.get<number>(\n        'PRAZO_PROCESSAMENTO_DIAS',\n        5,\n      ),\n      prioridadeJudicial: this.configService.get<number>(\n        'FATOR_PRIORIDADE_JUDICIAL',\n        0.5,\n      ),\n    };\n  }\n\n  /**\n   * Calcula e define o prazo de análise para uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @returns Data do prazo de análise\n   */\n  async definirPrazoAnalise(solicitacaoId: string): Promise<Date> {\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      throw new EntityNotFoundException('Solicitação', solicitacaoId);\n    }\n\n    // Calcular prazo com base na configuração\n    let prazoEmDias = this.configuracaoPrazos.analise;\n\n    // Aplicar prioridade se for determinação judicial\n    if (solicitacao.determinacao_judicial_flag) {\n      prazoEmDias = Math.ceil(\n        prazoEmDias * this.configuracaoPrazos.prioridadeJudicial,\n      );\n      this.logger.log(\n        `Prazo reduzido para determinação judicial: ${prazoEmDias} dias`,\n      );\n    }\n\n    // Calcular data do prazo\n    const dataPrazo = new Date();\n    dataPrazo.setDate(dataPrazo.getDate() + prazoEmDias);\n\n    // Atualizar a solicitação\n    solicitacao.prazo_analise = dataPrazo;\n    await this.solicitacaoRepository.save(solicitacao);\n\n    return dataPrazo;\n  }\n\n  /**\n   * Calcula e define o prazo para envio de documentos\n   * @param solicitacaoId ID da solicitação\n   * @returns Data do prazo para documentos\n   */\n  async definirPrazoDocumentos(solicitacaoId: string): Promise<Date> {\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      throw new EntityNotFoundException('Solicitação', solicitacaoId);\n    }\n\n    // Calcular prazo com base na configuração\n    let prazoEmDias = this.configuracaoPrazos.documentos;\n\n    // Aplicar prioridade se for determinação judicial\n    if (solicitacao.determinacao_judicial_flag) {\n      prazoEmDias = Math.ceil(\n        prazoEmDias * this.configuracaoPrazos.prioridadeJudicial,\n      );\n      this.logger.log(\n        `Prazo reduzido para determinação judicial: ${prazoEmDias} dias`,\n      );\n    }\n\n    // Calcular data do prazo\n    const dataPrazo = new Date();\n    dataPrazo.setDate(dataPrazo.getDate() + prazoEmDias);\n\n    // Atualizar a solicitação\n    solicitacao.prazo_documentos = dataPrazo;\n    await this.solicitacaoRepository.save(solicitacao);\n\n    return dataPrazo;\n  }\n\n  /**\n   * Calcula e define o prazo de processamento\n   * @param solicitacaoId ID da solicitação\n   * @returns Data do prazo de processamento\n   */\n  async definirPrazoProcessamento(solicitacaoId: string): Promise<Date> {\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      throw new EntityNotFoundException('Solicitação', solicitacaoId);\n    }\n\n    // Calcular prazo com base na configuração\n    let prazoEmDias = this.configuracaoPrazos.processamento;\n\n    // Aplicar prioridade se for determinação judicial\n    if (solicitacao.determinacao_judicial_flag) {\n      prazoEmDias = Math.ceil(\n        prazoEmDias * this.configuracaoPrazos.prioridadeJudicial,\n      );\n      this.logger.log(\n        `Prazo reduzido para determinação judicial: ${prazoEmDias} dias`,\n      );\n    }\n\n    // Calcular data do prazo\n    const dataPrazo = new Date();\n    dataPrazo.setDate(dataPrazo.getDate() + prazoEmDias);\n\n    // Atualizar a solicitação\n    solicitacao.prazo_processamento = dataPrazo;\n    await this.solicitacaoRepository.save(solicitacao);\n\n    return dataPrazo;\n  }\n\n  /**\n   * Atualiza os prazos da solicitação com base em sua transição de estado\n   * @param solicitacaoId ID da solicitação\n   * @param novoStatus Novo status da solicitação\n   */\n  async atualizarPrazosTransicao(\n    solicitacaoId: string,\n    novoStatus: StatusSolicitacao,\n  ): Promise<void> {\n    try {\n      // Definir prazos com base no novo status\n      switch (novoStatus) {\n        case StatusSolicitacao.EM_ANALISE:\n          await this.definirPrazoAnalise(solicitacaoId);\n          break;\n\n        case StatusSolicitacao.AGUARDANDO_DOCUMENTOS:\n          await this.definirPrazoDocumentos(solicitacaoId);\n          break;\n\n        case StatusSolicitacao.EM_PROCESSAMENTO:\n          await this.definirPrazoProcessamento(solicitacaoId);\n          break;\n\n        // Para outros estados, os prazos anteriores são mantidos ou podem ser limpos\n        case StatusSolicitacao.APROVADA:\n        case StatusSolicitacao.INDEFERIDA:\n        case StatusSolicitacao.CANCELADA:\n        case StatusSolicitacao.CONCLUIDA:\n        case StatusSolicitacao.ARQUIVADA:\n          // Limpar prazos ativos pois não são mais relevantes\n          await this.limparPrazos(solicitacaoId);\n          break;\n      }\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar prazos: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Limpa os prazos ativos de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   */\n  private async limparPrazos(solicitacaoId: string): Promise<void> {\n    try {\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: solicitacaoId },\n      });\n\n      if (solicitacao) {\n        solicitacao.prazo_analise = null;\n        solicitacao.prazo_documentos = null;\n        solicitacao.prazo_processamento = null;\n        await this.solicitacaoRepository.save(solicitacao);\n      }\n    } catch (error) {\n      this.logger.error(`Erro ao limpar prazos: ${error.message}`, error.stack);\n      throw error;\n    }\n  }\n\n  /**\n   * Verifica se os prazos da solicitação estão vencidos\n   * @param solicitacaoId ID da solicitação\n   * @returns Objeto com informações de vencimento de prazos\n   */\n  async verificarPrazosVencidos(solicitacaoId: string): Promise<{\n    analiseVencida: boolean;\n    documentosVencidos: boolean;\n    processamentoVencido: boolean;\n    diasAtraso: number;\n  }> {\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      throw new EntityNotFoundException('Solicitação', solicitacaoId);\n    }\n\n    const agora = new Date();\n    const resultado = {\n      analiseVencida: false,\n      documentosVencidos: false,\n      processamentoVencido: false,\n      diasAtraso: 0,\n    };\n\n    // Verificar prazo de análise\n    if (solicitacao.prazo_analise && agora > solicitacao.prazo_analise) {\n      resultado.analiseVencida = true;\n      resultado.diasAtraso = Math.floor(\n        (agora.getTime() - solicitacao.prazo_analise.getTime()) /\n          (1000 * 60 * 60 * 24),\n      );\n    }\n\n    // Verificar prazo de documentos\n    if (solicitacao.prazo_documentos && agora > solicitacao.prazo_documentos) {\n      resultado.documentosVencidos = true;\n      const diasAtrasoDoc = Math.floor(\n        (agora.getTime() - solicitacao.prazo_documentos.getTime()) /\n          (1000 * 60 * 60 * 24),\n      );\n      resultado.diasAtraso = Math.max(resultado.diasAtraso, diasAtrasoDoc);\n    }\n\n    // Verificar prazo de processamento\n    if (\n      solicitacao.prazo_processamento &&\n      agora > solicitacao.prazo_processamento\n    ) {\n      resultado.processamentoVencido = true;\n      const diasAtrasoProc = Math.floor(\n        (agora.getTime() - solicitacao.prazo_processamento.getTime()) /\n          (1000 * 60 * 60 * 24),\n      );\n      resultado.diasAtraso = Math.max(resultado.diasAtraso, diasAtrasoProc);\n    }\n\n    return resultado;\n  }\n\n  /**\n   * Encontra solicitações com prazos vencidos\n   * @param tiposPrazo Tipos de prazo a serem verificados\n   * @returns Lista de solicitações com prazos vencidos\n   */\n  async listarSolicitacoesComPrazosVencidos(\n    tiposPrazo: ('analise' | 'documentos' | 'processamento')[] = [\n      'analise',\n      'documentos',\n      'processamento',\n    ],\n  ): Promise<Solicitacao[]> {\n    const agora = new Date();\n    const queryBuilder =\n      this.solicitacaoRepository.createQueryBuilder('solicitacao');\n\n    // Construir condições para a consulta\n    const condicoesArray: string[] = [];\n\n    if (tiposPrazo.includes('analise')) {\n      condicoesArray.push(\n        'solicitacao.prazo_analise IS NOT NULL AND solicitacao.prazo_analise < :agora',\n      );\n    }\n\n    if (tiposPrazo.includes('documentos')) {\n      condicoesArray.push(\n        'solicitacao.prazo_documentos IS NOT NULL AND solicitacao.prazo_documentos < :agora',\n      );\n    }\n\n    if (tiposPrazo.includes('processamento')) {\n      condicoesArray.push(\n        'solicitacao.prazo_processamento IS NOT NULL AND solicitacao.prazo_processamento < :agora',\n      );\n    }\n\n    if (condicoesArray.length === 0) {\n      return [];\n    }\n\n    // Combinar as condições com OR\n    const whereCondition = `(${condicoesArray.join(' OR ')})`;\n\n    // Aplicar a condição WHERE\n    queryBuilder.where(whereCondition, { agora });\n\n    // Priorizar determinações judiciais\n    queryBuilder.orderBy('solicitacao.determinacao_judicial_flag', 'DESC');\n\n    // Depois ordenar por data de prazo mais antiga\n    const leastExpr =\n      'LEAST(' +\n      'COALESCE(solicitacao.prazo_analise, :dataFutura), ' +\n      'COALESCE(solicitacao.prazo_documentos, :dataFutura), ' +\n      'COALESCE(solicitacao.prazo_processamento, :dataFutura))';\n\n    queryBuilder.addOrderBy(leastExpr, 'ASC');\n    queryBuilder.setParameter('dataFutura', new Date('2099-12-31'));\n\n    return queryBuilder.getMany();\n  }\n}\n"],"version":3}