{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\workflow-beneficio.repository.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAqC;AACrC,gDAAsD;AAEtD;;;;GAIG;AAEI,IAAM,2BAA2B,GAAjC,MAAM,2BAA2B;IAGnB;IAFnB,YAEmB,UAAyC;QAAzC,eAAU,GAAV,UAAU,CAA+B;IACzD,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CACvB,eAAuB;QAEvB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,EAAE,iBAAiB,EAAE,eAAe,EAAE;SAC9C,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;SAC9B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,QAA2B;QACpC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,qBAAqB,CAAC,eAAuB;QACjD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;YACxC,KAAK,EAAE,EAAE,iBAAiB,EAAE,eAAe,EAAE;SAC9C,CAAC,CAAC;QACH,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;CACF,CAAA;AAzDY,kEAA2B;sCAA3B,2BAA2B;IADvC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,4BAAiB,CAAC,CAAA;yDACP,oBAAU,oBAAV,oBAAU;GAH9B,2BAA2B,CAyDvC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\workflow-beneficio.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { WorkflowBeneficio } from '../../../entities';\n\n/**\n * Repositório para gerenciamento de workflows de benefícios\n *\n * Fornece operações de acesso a dados para entidade WorkflowBeneficio\n */\n@Injectable()\nexport class WorkflowBeneficioRepository {\n  constructor(\n    @InjectRepository(WorkflowBeneficio)\n    private readonly repository: Repository<WorkflowBeneficio>,\n  ) {}\n\n  /**\n   * Encontra um workflow pelo ID do tipo de benefício\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns Workflow encontrado ou null\n   */\n  async findByTipoBeneficio(\n    tipoBeneficioId: string,\n  ): Promise<WorkflowBeneficio | null> {\n    return this.repository.findOne({\n      where: { tipo_beneficio_id: tipoBeneficioId },\n    });\n  }\n\n  /**\n   * Busca todos os workflows de benefício\n   * @returns Lista de workflows\n   */\n  async findAll(): Promise<WorkflowBeneficio[]> {\n    return this.repository.find({\n      order: { created_at: 'DESC' },\n    });\n  }\n\n  /**\n   * Salva um workflow no banco de dados\n   * @param workflow Workflow a ser salvo\n   * @returns Workflow salvo\n   */\n  async save(workflow: WorkflowBeneficio): Promise<WorkflowBeneficio> {\n    return this.repository.save(workflow);\n  }\n\n  /**\n   * Remove um workflow do banco de dados\n   * @param id ID do workflow a ser removido\n   */\n  async remove(id: number): Promise<void> {\n    await this.repository.delete(id);\n  }\n\n  /**\n   * Verifica se existe um workflow para o tipo de benefício especificado\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns true se existir, false caso contrário\n   */\n  async existsByTipoBeneficio(tipoBeneficioId: string): Promise<boolean> {\n    const count = await this.repository.count({\n      where: { tipo_beneficio_id: tipoBeneficioId },\n    });\n    return count > 0;\n  }\n}\n"],"version":3}