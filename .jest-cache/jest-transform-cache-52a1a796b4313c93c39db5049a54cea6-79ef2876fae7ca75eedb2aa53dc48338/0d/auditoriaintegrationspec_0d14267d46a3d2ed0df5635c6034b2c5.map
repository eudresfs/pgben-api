{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\integration\\auditoria-integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\integration\\auditoria-integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AuditoriaModule } from '../../../../src/modules/auditoria/auditoria.module';\nimport { LogAuditoria } from '../../../../src/modules/auditoria/entities/log-auditoria.entity';\nimport { TipoOperacao } from '../../../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { AuditoriaMiddleware } from '../../../../src/modules/auditoria/middlewares/auditoria.middleware';\nimport { AuditoriaService } from '../../../../src/modules/auditoria/services/auditoria.service';\nimport { AuditoriaQueueService } from '../../../../src/modules/auditoria/services/auditoria-queue.service';\nimport { BullModule, getQueueToken } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport { CreateLogAuditoriaDto } from '../../../../src/modules/auditoria/dto/create-log-auditoria.dto';\n\ndescribe('Auditoria Integration Tests', () => {\n  let app: INestApplication;\n  let logAuditoriaRepository: Repository<LogAuditoria>;\n  let auditoriaService: AuditoriaService;\n  let auditoriaQueueService: AuditoriaQueueService;\n  let auditoriaQueue: Queue;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        AuditoriaModule,\n        BullModule.registerQueue({\n          name: 'auditoria',\n        }),\n      ],\n    })\n      .overrideProvider(getRepositoryToken(LogAuditoria))\n      .useValue({\n        create: jest.fn().mockImplementation((dto) => dto),\n        save: jest.fn().mockResolvedValue({ id: 'mock-log-id' }),\n        find: jest.fn().mockResolvedValue([]),\n        findOne: jest.fn().mockResolvedValue(null),\n      })\n      .overrideProvider(getQueueToken('auditoria'))\n      .useValue({\n        add: jest.fn().mockResolvedValue({ id: 'mock-job-id' }),\n        process: jest.fn(),\n        on: jest.fn(),\n      })\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    app.use(\n      moduleFixture\n        .get<AuditoriaMiddleware>(AuditoriaMiddleware)\n        .use.bind(moduleFixture.get<AuditoriaMiddleware>(AuditoriaMiddleware)),\n    );\n\n    logAuditoriaRepository = moduleFixture.get<Repository<LogAuditoria>>(\n      getRepositoryToken(LogAuditoria),\n    );\n    auditoriaService = moduleFixture.get<AuditoriaService>(AuditoriaService);\n    auditoriaQueueService = moduleFixture.get<AuditoriaQueueService>(\n      AuditoriaQueueService,\n    );\n    auditoriaQueue = moduleFixture.get<Queue>(getQueueToken('auditoria'));\n\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  describe('Fluxo de auditoria completo', () => {\n    it('deve registrar log de auditoria quando uma requisição é processada', async () => {\n      // Simula uma requisição HTTP que será interceptada pelo middleware\n      await request(app.getHttpServer())\n        .get('/api/v1/usuarios')\n        .set('User-Agent', 'test-agent')\n        .expect(404); // 404 porque não temos o endpoint real configurado neste teste\n\n      // Verifica se o serviço de fila foi chamado para enfileirar o log\n      expect(auditoriaQueue.add).toHaveBeenCalledWith(\n        'registrar-log',\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.READ,\n          entidade_afetada: 'Usuario',\n        }),\n        expect.any(Object),\n      );\n    });\n\n    it('deve detectar e registrar acesso a dados sensíveis', async () => {\n      // Simula uma requisição com dados sensíveis\n      await request(app.getHttpServer())\n        .post('/api/v1/usuarios')\n        .send({\n          nome: 'Usuário Teste',\n          cpf: '123.456.789-00',\n          email: 'teste@exemplo.com',\n          endereco: {\n            cep: '12345-678',\n            logradouro: 'Rua Teste',\n            numero: 123,\n            bairro: 'Bairro Teste',\n            cidade: 'Cidade Teste',\n            uf: 'SP',\n          },\n        })\n        .set('User-Agent', 'test-agent')\n        .expect(404); // 404 porque não temos o endpoint real configurado neste teste\n\n      // Verifica se o serviço de fila foi chamado para enfileirar o acesso a dados sensíveis\n      expect(auditoriaQueue.add).toHaveBeenCalledWith(\n        'registrar-acesso-dados-sensiveis',\n        expect.objectContaining({\n          dados_sensiveis_acessados: expect.arrayContaining([\n            'cpf',\n            'endereco',\n          ]),\n        }),\n        expect.any(Object),\n      );\n    });\n  });\n\n  describe('Integração entre serviços', () => {\n    it('deve criar log de auditoria através do serviço', async () => {\n      const logDto = new CreateLogAuditoriaDto();\n      logDto.tipo_operacao = TipoOperacao.CREATE;\n      logDto.entidade_afetada = 'Usuario';\n      logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';\n      logDto.descricao = 'Criação de novo usuário';\n      logDto.ip_origem = '192.168.1.1';\n      logDto.usuario_id = 'mock-user-id';\n\n      const result = await auditoriaService.create(logDto);\n\n      expect(logAuditoriaRepository.create).toHaveBeenCalledWith(logDto);\n      expect(logAuditoriaRepository.save).toHaveBeenCalled();\n      expect(result).toEqual({ id: 'mock-log-id' });\n    });\n\n    it('deve enfileirar log de auditoria através do serviço de fila', async () => {\n      const logDto = new CreateLogAuditoriaDto();\n      logDto.tipo_operacao = TipoOperacao.CREATE;\n      logDto.entidade_afetada = 'Usuario';\n      logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';\n      logDto.descricao = 'Criação de novo usuário';\n      logDto.ip_origem = '192.168.1.1';\n      logDto.usuario_id = 'mock-user-id';\n\n      await auditoriaQueueService.enfileirarLogAuditoria(logDto);\n\n      expect(auditoriaQueue.add).toHaveBeenCalledWith(\n        'registrar-log',\n        logDto,\n        expect.objectContaining({\n          attempts: 3,\n          backoff: expect.objectContaining({\n            type: 'exponential',\n            delay: 1000,\n          }),\n        }),\n      );\n    });\n  });\n\n  describe('Validação de DTOs', () => {\n    it('deve validar corretamente o DTO de log de auditoria', async () => {\n      const logDto = new CreateLogAuditoriaDto();\n      // Não preenchemos campos obrigatórios\n\n      // Mockamos o método save para simular falha na validação\n      jest\n        .spyOn(logAuditoriaRepository, 'save')\n        .mockRejectedValueOnce(new Error('Validation failed'));\n\n      await expect(auditoriaService.create(logDto)).rejects.toThrow();\n    });\n\n    it('deve aceitar DTO de log de auditoria válido', async () => {\n      const logDto = new CreateLogAuditoriaDto();\n      logDto.tipo_operacao = TipoOperacao.CREATE;\n      logDto.entidade_afetada = 'Usuario';\n      logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';\n      logDto.descricao = 'Criação de novo usuário';\n      logDto.ip_origem = '192.168.1.1';\n      logDto.usuario_id = 'mock-user-id';\n\n      await auditoriaService.create(logDto);\n\n      expect(logAuditoriaRepository.save).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}