6bb6e207ab1a3bb0994bcac33a8b515d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const request = __importStar(require("supertest"));
const typeorm_1 = require("@nestjs/typeorm");
const auditoria_module_1 = require("../../../../src/modules/auditoria/auditoria.module");
const log_auditoria_entity_1 = require("../../../../src/modules/auditoria/entities/log-auditoria.entity");
const tipo_operacao_enum_1 = require("../../../../src/modules/auditoria/enums/tipo-operacao.enum");
const auditoria_middleware_1 = require("../../../../src/modules/auditoria/middlewares/auditoria.middleware");
const auditoria_service_1 = require("../../../../src/modules/auditoria/services/auditoria.service");
const auditoria_queue_service_1 = require("../../../../src/modules/auditoria/services/auditoria-queue.service");
const bull_1 = require("@nestjs/bull");
const create_log_auditoria_dto_1 = require("../../../../src/modules/auditoria/dto/create-log-auditoria.dto");
describe('Auditoria Integration Tests', () => {
    let app;
    let logAuditoriaRepository;
    let auditoriaService;
    let auditoriaQueueService;
    let auditoriaQueue;
    beforeEach(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [
                auditoria_module_1.AuditoriaModule,
                bull_1.BullModule.registerQueue({
                    name: 'auditoria',
                }),
            ],
        })
            .overrideProvider((0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria))
            .useValue({
            create: jest.fn().mockImplementation((dto) => dto),
            save: jest.fn().mockResolvedValue({ id: 'mock-log-id' }),
            find: jest.fn().mockResolvedValue([]),
            findOne: jest.fn().mockResolvedValue(null),
        })
            .overrideProvider((0, bull_1.getQueueToken)('auditoria'))
            .useValue({
            add: jest.fn().mockResolvedValue({ id: 'mock-job-id' }),
            process: jest.fn(),
            on: jest.fn(),
        })
            .compile();
        app = moduleFixture.createNestApplication();
        app.use(moduleFixture
            .get(auditoria_middleware_1.AuditoriaMiddleware)
            .use.bind(moduleFixture.get(auditoria_middleware_1.AuditoriaMiddleware)));
        logAuditoriaRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria));
        auditoriaService = moduleFixture.get(auditoria_service_1.AuditoriaService);
        auditoriaQueueService = moduleFixture.get(auditoria_queue_service_1.AuditoriaQueueService);
        auditoriaQueue = moduleFixture.get((0, bull_1.getQueueToken)('auditoria'));
        await app.init();
    });
    afterEach(async () => {
        await app.close();
    });
    describe('Fluxo de auditoria completo', () => {
        it('deve registrar log de auditoria quando uma requisição é processada', async () => {
            // Simula uma requisição HTTP que será interceptada pelo middleware
            await request(app.getHttpServer())
                .get('/api/v1/usuarios')
                .set('User-Agent', 'test-agent')
                .expect(404); // 404 porque não temos o endpoint real configurado neste teste
            // Verifica se o serviço de fila foi chamado para enfileirar o log
            expect(auditoriaQueue.add).toHaveBeenCalledWith('registrar-log', expect.objectContaining({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
                entidade_afetada: 'Usuario',
            }), expect.any(Object));
        });
        it('deve detectar e registrar acesso a dados sensíveis', async () => {
            // Simula uma requisição com dados sensíveis
            await request(app.getHttpServer())
                .post('/api/v1/usuarios')
                .send({
                nome: 'Usuário Teste',
                cpf: '123.456.789-00',
                email: 'teste@exemplo.com',
                endereco: {
                    cep: '12345-678',
                    logradouro: 'Rua Teste',
                    numero: 123,
                    bairro: 'Bairro Teste',
                    cidade: 'Cidade Teste',
                    uf: 'SP',
                },
            })
                .set('User-Agent', 'test-agent')
                .expect(404); // 404 porque não temos o endpoint real configurado neste teste
            // Verifica se o serviço de fila foi chamado para enfileirar o acesso a dados sensíveis
            expect(auditoriaQueue.add).toHaveBeenCalledWith('registrar-acesso-dados-sensiveis', expect.objectContaining({
                dados_sensiveis_acessados: expect.arrayContaining([
                    'cpf',
                    'endereco',
                ]),
            }), expect.any(Object));
        });
    });
    describe('Integração entre serviços', () => {
        it('deve criar log de auditoria através do serviço', async () => {
            const logDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            logDto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.CREATE;
            logDto.entidade_afetada = 'Usuario';
            logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';
            logDto.descricao = 'Criação de novo usuário';
            logDto.ip_origem = '192.168.1.1';
            logDto.usuario_id = 'mock-user-id';
            const result = await auditoriaService.create(logDto);
            expect(logAuditoriaRepository.create).toHaveBeenCalledWith(logDto);
            expect(logAuditoriaRepository.save).toHaveBeenCalled();
            expect(result).toEqual({ id: 'mock-log-id' });
        });
        it('deve enfileirar log de auditoria através do serviço de fila', async () => {
            const logDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            logDto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.CREATE;
            logDto.entidade_afetada = 'Usuario';
            logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';
            logDto.descricao = 'Criação de novo usuário';
            logDto.ip_origem = '192.168.1.1';
            logDto.usuario_id = 'mock-user-id';
            await auditoriaQueueService.enfileirarLogAuditoria(logDto);
            expect(auditoriaQueue.add).toHaveBeenCalledWith('registrar-log', logDto, expect.objectContaining({
                attempts: 3,
                backoff: expect.objectContaining({
                    type: 'exponential',
                    delay: 1000,
                }),
            }));
        });
    });
    describe('Validação de DTOs', () => {
        it('deve validar corretamente o DTO de log de auditoria', async () => {
            const logDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            // Não preenchemos campos obrigatórios
            // Mockamos o método save para simular falha na validação
            jest
                .spyOn(logAuditoriaRepository, 'save')
                .mockRejectedValueOnce(new Error('Validation failed'));
            await expect(auditoriaService.create(logDto)).rejects.toThrow();
        });
        it('deve aceitar DTO de log de auditoria válido', async () => {
            const logDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            logDto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.CREATE;
            logDto.entidade_afetada = 'Usuario';
            logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';
            logDto.descricao = 'Criação de novo usuário';
            logDto.ip_origem = '192.168.1.1';
            logDto.usuario_id = 'mock-user-id';
            await auditoriaService.create(logDto);
            expect(logAuditoriaRepository.save).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,