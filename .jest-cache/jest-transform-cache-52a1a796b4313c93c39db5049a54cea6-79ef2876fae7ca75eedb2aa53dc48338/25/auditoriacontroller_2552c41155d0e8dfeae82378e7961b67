c58939c090cd0b684c57522b133938d8
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const auditoria_service_1 = require("../services/auditoria.service");
const create_log_auditoria_dto_1 = require("../dto/create-log-auditoria.dto");
const query_log_auditoria_dto_1 = require("../dto/query-log-auditoria.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
/**
 * Controlador de Auditoria
 *
 * Responsável por expor as funcionalidades de auditoria via API REST.
 * Permite consultar logs de auditoria e gerar relatórios.
 */
let AuditoriaController = class AuditoriaController {
    auditoriaService;
    constructor(auditoriaService) {
        this.auditoriaService = auditoriaService;
    }
    /**
     * Cria um novo log de auditoria manualmente
     * Normalmente os logs são criados automaticamente pelo middleware
     */
    create(createLogAuditoriaDto, req) {
        // Adiciona informações do usuário logado
        if (!createLogAuditoriaDto.usuario_id && req.user) {
            createLogAuditoriaDto.usuario_id = req.user.id;
        }
        // Adiciona informações da requisição
        if (!createLogAuditoriaDto.ip_origem) {
            createLogAuditoriaDto.ip_origem = req.ip;
        }
        if (!createLogAuditoriaDto.user_agent) {
            createLogAuditoriaDto.user_agent = req.headers['user-agent'];
        }
        return this.auditoriaService.create(createLogAuditoriaDto);
    }
    /**
     * Busca logs de auditoria com base nos filtros fornecidos
     */
    findAll(queryParams) {
        return this.auditoriaService.findAll(queryParams);
    }
    /**
     * Busca um log de auditoria pelo ID
     */
    findOne(id) {
        return this.auditoriaService.findOne(id);
    }
    /**
     * Busca logs de auditoria por entidade
     */
    findByEntidade(entidade, id) {
        return this.auditoriaService.findByEntidade(entidade, id);
    }
    /**
     * Busca logs de auditoria por usuário
     */
    findByUsuario(id) {
        return this.auditoriaService.findByUsuario(id);
    }
    /**
     * Gera relatório de acessos a dados sensíveis por período
     */
    relatorioAcessosDadosSensiveis(dataInicial, dataFinal) {
        return this.auditoriaService.relatorioAcessosDadosSensiveis(new Date(dataInicial), new Date(dataFinal));
    }
};
exports.AuditoriaController = AuditoriaController;
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.criar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Cria um novo log de auditoria manualmente' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Log de auditoria criado com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_log_auditoria_dto_1.CreateLogAuditoriaDto !== "undefined" && create_log_auditoria_dto_1.CreateLogAuditoriaDto) === "function" ? _b : Object, Object]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.listar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca logs de auditoria' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Lista de logs de auditoria' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof query_log_auditoria_dto_1.QueryLogAuditoriaDto !== "undefined" && query_log_auditoria_dto_1.QueryLogAuditoriaDto) === "function" ? _c : Object]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca um log de auditoria pelo ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do log de auditoria' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Log de auditoria encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Log de auditoria não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findOne", null);
__decorate([
    (0, common_1.Get)('entidade/:entidade/:id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.entidade.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca logs de auditoria por entidade' }),
    (0, swagger_1.ApiParam)({ name: 'entidade', description: 'Nome da entidade' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID da entidade' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de logs de auditoria da entidade',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('entidade')),
    __param(1, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findByEntidade", null);
__decorate([
    (0, common_1.Get)('usuario/:id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.usuario.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca logs de auditoria por usuário' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do usuário' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de logs de auditoria do usuário',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findByUsuario", null);
__decorate([
    (0, common_1.Get)('relatorios/dados-sensiveis'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.relatorio.dados-sensiveis',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Gera relatório de acessos a dados sensíveis por período',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'data_inicial',
        description: 'Data inicial (formato ISO)',
        required: true,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'data_final',
        description: 'Data final (formato ISO)',
        required: true,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Relatório de acessos a dados sensíveis',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Query)('data_inicial')),
    __param(1, (0, common_1.Query)('data_final')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "relatorioAcessosDadosSensiveis", null);
exports.AuditoriaController = AuditoriaController = __decorate([
    (0, swagger_1.ApiTags)('Auditoria'),
    (0, common_1.Controller)('auditoria'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof auditoria_service_1.AuditoriaService !== "undefined" && auditoria_service_1.AuditoriaService) === "function" ? _a : Object])
], AuditoriaController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGF1ZGl0b3JpYVxcY29udHJvbGxlcnNcXGF1ZGl0b3JpYS5jb250cm9sbGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FVd0I7QUFDeEIsNkNBT3lCO0FBQ3pCLHFFQUFpRTtBQUNqRSw4RUFBd0U7QUFDeEUsNEVBQXNFO0FBQ3RFLHdFQUFtRTtBQUNuRSw0RUFBd0U7QUFDeEUsMEdBQTRGO0FBQzVGLHFGQUFxRTtBQUVyRTs7Ozs7R0FLRztBQUtJLElBQU0sbUJBQW1CLEdBQXpCLE1BQU0sbUJBQW1CO0lBQ0Q7SUFBN0IsWUFBNkIsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBRyxDQUFDO0lBRW5FOzs7T0FHRztJQVlILE1BQU0sQ0FBUyxxQkFBNEMsRUFBUyxHQUFHO1FBQ3JFLHlDQUF5QztRQUN6QyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNsRCxxQkFBcUIsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDakQsQ0FBQztRQUVELHFDQUFxQztRQUNyQyxJQUFJLENBQUMscUJBQXFCLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDckMscUJBQXFCLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDM0MsQ0FBQztRQUVELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUN0QyxxQkFBcUIsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvRCxDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVEOztPQUVH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LGlCQUFPLEVBQUMsV0FBVyxDQUFDO0lBQ3BCLElBQUEsbUJBQVUsRUFBQyxXQUFXLENBQUM7SUFDdkIsSUFBQSxrQkFBUyxFQUFDLDZCQUFZLEVBQUUsa0NBQWUsQ0FBQztJQUN4QyxJQUFBLHVCQUFhLEdBQUU7eURBRWlDLG9DQUFnQixvQkFBaEIsb0NBQWdCO0dBRHBELG1CQUFtQixDQWlKL0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGF1ZGl0b3JpYVxcY29udHJvbGxlcnNcXGF1ZGl0b3JpYS5jb250cm9sbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbnRyb2xsZXIsXG4gIEdldCxcbiAgUG9zdCxcbiAgQm9keSxcbiAgUGFyYW0sXG4gIFBhcnNlVVVJRFBpcGUsXG4gIFF1ZXJ5LFxuICBVc2VHdWFyZHMsXG4gIFJlcSxcbn0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHtcbiAgQXBpVGFncyxcbiAgQXBpT3BlcmF0aW9uLFxuICBBcGlSZXNwb25zZSxcbiAgQXBpQmVhcmVyQXV0aCxcbiAgQXBpUGFyYW0sXG4gIEFwaVF1ZXJ5LFxufSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xuaW1wb3J0IHsgQXVkaXRvcmlhU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2F1ZGl0b3JpYS5zZXJ2aWNlJztcbmltcG9ydCB7IENyZWF0ZUxvZ0F1ZGl0b3JpYUR0byB9IGZyb20gJy4uL2R0by9jcmVhdGUtbG9nLWF1ZGl0b3JpYS5kdG8nO1xuaW1wb3J0IHsgUXVlcnlMb2dBdWRpdG9yaWFEdG8gfSBmcm9tICcuLi9kdG8vcXVlcnktbG9nLWF1ZGl0b3JpYS5kdG8nO1xuaW1wb3J0IHsgSnd0QXV0aEd1YXJkIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9ndWFyZHMvand0LWF1dGguZ3VhcmQnO1xuaW1wb3J0IHsgUGVybWlzc2lvbkd1YXJkIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9ndWFyZHMvcGVybWlzc2lvbi5ndWFyZCc7XG5pbXBvcnQgeyBSZXF1aXJlc1Blcm1pc3Npb24gfSBmcm9tICcuLi8uLi8uLi9hdXRoL2RlY29yYXRvcnMvcmVxdWlyZXMtcGVybWlzc2lvbi5kZWNvcmF0b3InO1xuaW1wb3J0IHsgU2NvcGVUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZW50aXRpZXMvdXNlci1wZXJtaXNzaW9uLmVudGl0eSc7XG5cbi8qKlxuICogQ29udHJvbGFkb3IgZGUgQXVkaXRvcmlhXG4gKlxuICogUmVzcG9uc8OhdmVsIHBvciBleHBvciBhcyBmdW5jaW9uYWxpZGFkZXMgZGUgYXVkaXRvcmlhIHZpYSBBUEkgUkVTVC5cbiAqIFBlcm1pdGUgY29uc3VsdGFyIGxvZ3MgZGUgYXVkaXRvcmlhIGUgZ2VyYXIgcmVsYXTDs3Jpb3MuXG4gKi9cbkBBcGlUYWdzKCdBdWRpdG9yaWEnKVxuQENvbnRyb2xsZXIoJ2F1ZGl0b3JpYScpXG5AVXNlR3VhcmRzKEp3dEF1dGhHdWFyZCwgUGVybWlzc2lvbkd1YXJkKVxuQEFwaUJlYXJlckF1dGgoKVxuZXhwb3J0IGNsYXNzIEF1ZGl0b3JpYUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGF1ZGl0b3JpYVNlcnZpY2U6IEF1ZGl0b3JpYVNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIENyaWEgdW0gbm92byBsb2cgZGUgYXVkaXRvcmlhIG1hbnVhbG1lbnRlXG4gICAqIE5vcm1hbG1lbnRlIG9zIGxvZ3Mgc8OjbyBjcmlhZG9zIGF1dG9tYXRpY2FtZW50ZSBwZWxvIG1pZGRsZXdhcmVcbiAgICovXG4gIEBQb3N0KClcbiAgQFJlcXVpcmVzUGVybWlzc2lvbih7XG4gICAgcGVybWlzc2lvbk5hbWU6ICdhdWRpdG9yaWEubG9nLmNyaWFyJyxcbiAgICBzY29wZVR5cGU6IFNjb3BlVHlwZS5HTE9CQUwsXG4gIH0pXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnQ3JpYSB1bSBub3ZvIGxvZyBkZSBhdWRpdG9yaWEgbWFudWFsbWVudGUnIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDEsXG4gICAgZGVzY3JpcHRpb246ICdMb2cgZGUgYXVkaXRvcmlhIGNyaWFkbyBjb20gc3VjZXNzbycsXG4gIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDAzLCBkZXNjcmlwdGlvbjogJ0FjZXNzbyBuZWdhZG8nIH0pXG4gIGNyZWF0ZShAQm9keSgpIGNyZWF0ZUxvZ0F1ZGl0b3JpYUR0bzogQ3JlYXRlTG9nQXVkaXRvcmlhRHRvLCBAUmVxKCkgcmVxKSB7XG4gICAgLy8gQWRpY2lvbmEgaW5mb3JtYcOnw7VlcyBkbyB1c3XDoXJpbyBsb2dhZG9cbiAgICBpZiAoIWNyZWF0ZUxvZ0F1ZGl0b3JpYUR0by51c3VhcmlvX2lkICYmIHJlcS51c2VyKSB7XG4gICAgICBjcmVhdGVMb2dBdWRpdG9yaWFEdG8udXN1YXJpb19pZCA9IHJlcS51c2VyLmlkO1xuICAgIH1cblxuICAgIC8vIEFkaWNpb25hIGluZm9ybWHDp8O1ZXMgZGEgcmVxdWlzacOnw6NvXG4gICAgaWYgKCFjcmVhdGVMb2dBdWRpdG9yaWFEdG8uaXBfb3JpZ2VtKSB7XG4gICAgICBjcmVhdGVMb2dBdWRpdG9yaWFEdG8uaXBfb3JpZ2VtID0gcmVxLmlwO1xuICAgIH1cblxuICAgIGlmICghY3JlYXRlTG9nQXVkaXRvcmlhRHRvLnVzZXJfYWdlbnQpIHtcbiAgICAgIGNyZWF0ZUxvZ0F1ZGl0b3JpYUR0by51c2VyX2FnZW50ID0gcmVxLmhlYWRlcnNbJ3VzZXItYWdlbnQnXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZShjcmVhdGVMb2dBdWRpdG9yaWFEdG8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIGxvZ3MgZGUgYXVkaXRvcmlhIGNvbSBiYXNlIG5vcyBmaWx0cm9zIGZvcm5lY2lkb3NcbiAgICovXG4gIEBHZXQoKVxuICBAUmVxdWlyZXNQZXJtaXNzaW9uKHtcbiAgICBwZXJtaXNzaW9uTmFtZTogJ2F1ZGl0b3JpYS5sb2cubGlzdGFyJyxcbiAgICBzY29wZVR5cGU6IFNjb3BlVHlwZS5HTE9CQUwsXG4gIH0pXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnQnVzY2EgbG9ncyBkZSBhdWRpdG9yaWEnIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogMjAwLCBkZXNjcmlwdGlvbjogJ0xpc3RhIGRlIGxvZ3MgZGUgYXVkaXRvcmlhJyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMywgZGVzY3JpcHRpb246ICdBY2Vzc28gbmVnYWRvJyB9KVxuICBmaW5kQWxsKEBRdWVyeSgpIHF1ZXJ5UGFyYW1zOiBRdWVyeUxvZ0F1ZGl0b3JpYUR0bykge1xuICAgIHJldHVybiB0aGlzLmF1ZGl0b3JpYVNlcnZpY2UuZmluZEFsbChxdWVyeVBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgdW0gbG9nIGRlIGF1ZGl0b3JpYSBwZWxvIElEXG4gICAqL1xuICBAR2V0KCc6aWQnKVxuICBAUmVxdWlyZXNQZXJtaXNzaW9uKHtcbiAgICBwZXJtaXNzaW9uTmFtZTogJ2F1ZGl0b3JpYS5sb2cudmlzdWFsaXphcicsXG4gICAgc2NvcGVUeXBlOiBTY29wZVR5cGUuR0xPQkFMLFxuICB9KVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0J1c2NhIHVtIGxvZyBkZSBhdWRpdG9yaWEgcGVsbyBJRCcgfSlcbiAgQEFwaVBhcmFtKHsgbmFtZTogJ2lkJywgZGVzY3JpcHRpb246ICdJRCBkbyBsb2cgZGUgYXVkaXRvcmlhJyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246ICdMb2cgZGUgYXVkaXRvcmlhIGVuY29udHJhZG8nIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA0LCBkZXNjcmlwdGlvbjogJ0xvZyBkZSBhdWRpdG9yaWEgbsOjbyBlbmNvbnRyYWRvJyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMywgZGVzY3JpcHRpb246ICdBY2Vzc28gbmVnYWRvJyB9KVxuICBmaW5kT25lKEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVkaXRvcmlhU2VydmljZS5maW5kT25lKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSBsb2dzIGRlIGF1ZGl0b3JpYSBwb3IgZW50aWRhZGVcbiAgICovXG4gIEBHZXQoJ2VudGlkYWRlLzplbnRpZGFkZS86aWQnKVxuICBAUmVxdWlyZXNQZXJtaXNzaW9uKHtcbiAgICBwZXJtaXNzaW9uTmFtZTogJ2F1ZGl0b3JpYS5sb2cuZW50aWRhZGUudmlzdWFsaXphcicsXG4gICAgc2NvcGVUeXBlOiBTY29wZVR5cGUuR0xPQkFMLFxuICB9KVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0J1c2NhIGxvZ3MgZGUgYXVkaXRvcmlhIHBvciBlbnRpZGFkZScgfSlcbiAgQEFwaVBhcmFtKHsgbmFtZTogJ2VudGlkYWRlJywgZGVzY3JpcHRpb246ICdOb21lIGRhIGVudGlkYWRlJyB9KVxuICBAQXBpUGFyYW0oeyBuYW1lOiAnaWQnLCBkZXNjcmlwdGlvbjogJ0lEIGRhIGVudGlkYWRlJyB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnTGlzdGEgZGUgbG9ncyBkZSBhdWRpdG9yaWEgZGEgZW50aWRhZGUnLFxuICB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMywgZGVzY3JpcHRpb246ICdBY2Vzc28gbmVnYWRvJyB9KVxuICBmaW5kQnlFbnRpZGFkZShcbiAgICBAUGFyYW0oJ2VudGlkYWRlJykgZW50aWRhZGU6IHN0cmluZyxcbiAgICBAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZyxcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVkaXRvcmlhU2VydmljZS5maW5kQnlFbnRpZGFkZShlbnRpZGFkZSwgaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIGxvZ3MgZGUgYXVkaXRvcmlhIHBvciB1c3XDoXJpb1xuICAgKi9cbiAgQEdldCgndXN1YXJpby86aWQnKVxuICBAUmVxdWlyZXNQZXJtaXNzaW9uKHtcbiAgICBwZXJtaXNzaW9uTmFtZTogJ2F1ZGl0b3JpYS5sb2cudXN1YXJpby52aXN1YWxpemFyJyxcbiAgICBzY29wZVR5cGU6IFNjb3BlVHlwZS5HTE9CQUwsXG4gIH0pXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnQnVzY2EgbG9ncyBkZSBhdWRpdG9yaWEgcG9yIHVzdcOhcmlvJyB9KVxuICBAQXBpUGFyYW0oeyBuYW1lOiAnaWQnLCBkZXNjcmlwdGlvbjogJ0lEIGRvIHVzdcOhcmlvJyB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnTGlzdGEgZGUgbG9ncyBkZSBhdWRpdG9yaWEgZG8gdXN1w6FyaW8nLFxuICB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMywgZGVzY3JpcHRpb246ICdBY2Vzc28gbmVnYWRvJyB9KVxuICBmaW5kQnlVc3VhcmlvKEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBpZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVkaXRvcmlhU2VydmljZS5maW5kQnlVc3VhcmlvKGlkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXJhIHJlbGF0w7NyaW8gZGUgYWNlc3NvcyBhIGRhZG9zIHNlbnPDrXZlaXMgcG9yIHBlcsOtb2RvXG4gICAqL1xuICBAR2V0KCdyZWxhdG9yaW9zL2RhZG9zLXNlbnNpdmVpcycpXG4gIEBSZXF1aXJlc1Blcm1pc3Npb24oe1xuICAgIHBlcm1pc3Npb25OYW1lOiAnYXVkaXRvcmlhLnJlbGF0b3Jpby5kYWRvcy1zZW5zaXZlaXMnLFxuICAgIHNjb3BlVHlwZTogU2NvcGVUeXBlLkdMT0JBTCxcbiAgfSlcbiAgQEFwaU9wZXJhdGlvbih7XG4gICAgc3VtbWFyeTogJ0dlcmEgcmVsYXTDs3JpbyBkZSBhY2Vzc29zIGEgZGFkb3Mgc2Vuc8OtdmVpcyBwb3IgcGVyw61vZG8nLFxuICB9KVxuICBAQXBpUXVlcnkoe1xuICAgIG5hbWU6ICdkYXRhX2luaWNpYWwnLFxuICAgIGRlc2NyaXB0aW9uOiAnRGF0YSBpbmljaWFsIChmb3JtYXRvIElTTyknLFxuICAgIHJlcXVpcmVkOiB0cnVlLFxuICB9KVxuICBAQXBpUXVlcnkoe1xuICAgIG5hbWU6ICdkYXRhX2ZpbmFsJyxcbiAgICBkZXNjcmlwdGlvbjogJ0RhdGEgZmluYWwgKGZvcm1hdG8gSVNPKScsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgZGVzY3JpcHRpb246ICdSZWxhdMOzcmlvIGRlIGFjZXNzb3MgYSBkYWRvcyBzZW5zw612ZWlzJyxcbiAgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDMsIGRlc2NyaXB0aW9uOiAnQWNlc3NvIG5lZ2FkbycgfSlcbiAgcmVsYXRvcmlvQWNlc3Nvc0RhZG9zU2Vuc2l2ZWlzKFxuICAgIEBRdWVyeSgnZGF0YV9pbmljaWFsJykgZGF0YUluaWNpYWw6IHN0cmluZyxcbiAgICBAUXVlcnkoJ2RhdGFfZmluYWwnKSBkYXRhRmluYWw6IHN0cmluZyxcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuYXVkaXRvcmlhU2VydmljZS5yZWxhdG9yaW9BY2Vzc29zRGFkb3NTZW5zaXZlaXMoXG4gICAgICBuZXcgRGF0ZShkYXRhSW5pY2lhbCksXG4gICAgICBuZXcgRGF0ZShkYXRhRmluYWwpLFxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==