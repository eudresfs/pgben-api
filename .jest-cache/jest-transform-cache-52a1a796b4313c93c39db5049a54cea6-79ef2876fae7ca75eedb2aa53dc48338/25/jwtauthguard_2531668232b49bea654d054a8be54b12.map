{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\guards\\jwt-auth.guard.ts","mappings":";;;;;;;;;;;;;AAAA,oCAAoC;AACpC,2CAIwB;AACxB,uCAAyC;AACzC,+CAA6C;AAC7C,qCAAyC;AACzC,sEAAmE;AACnE,qEAA+D;AAC/D,6EAAwE;AAGjE,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,IAAA,oBAAS,EAAC,qCAAiB,CAAC;IAElD;IACA;IACA;IAHV,YACU,SAAoB,EACpB,UAAsB,EACtB,mBAAwC;QAEhD,KAAK,EAAE,CAAC;QAJA,cAAS,GAAT,SAAS,CAAW;QACpB,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;IAGlD,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,OAAyB;QACzC,gDAAgD;QAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAU,gCAAa,EAAE;YACxE,OAAO,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,QAAQ,EAAE;SACnB,CAAC,CAAC;QAEH,0DAA0D;QAC1D,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,mDAAmD;QACnD,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC;QAEjD,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,8BAAqB,CAAC,qCAAqC,CAAC,CAAC;QACzE,CAAC;QAED,+BAA+B;QAC/B,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAEtC,IAAI,CAAC;YACH,uCAAuC;YACvC,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAQ,CAAC;YAE1D,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC;gBACvC,MAAM,IAAI,8BAAqB,CAAC,qCAAqC,CAAC,CAAC;YACzE,CAAC;YAED,mEAAmE;YACnE,MAAM,oBAAoB,GACxB,MAAM,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC;gBAChD,GAAG,EAAE,YAAY,CAAC,GAAG;aACtB,CAAC,CAAC;YAEL,IAAI,oBAAoB,CAAC,cAAc,EAAE,CAAC;gBACxC,MAAM,IAAI,8BAAqB,CAAC,oBAAoB,CAAC,CAAC;YACxD,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,8BAAqB,EAAE,CAAC;gBAC3C,MAAM,KAAK,CAAC;YACd,CAAC;YACD,oEAAoE;QACtE,CAAC;QAED,+CAA+C;QAC/C,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAChD,OAAO,MAAiB,CAAC;IAC3B,CAAC;IAED,aAAa,CAAC,GAAQ,EAAE,IAAS,EAAE,IAAS;QAC1C,uEAAuE;QACvE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACjB,MAAM,CACJ,GAAG;gBACH,IAAI,8BAAqB,CACvB,IAAI,YAAY,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,uBAAuB,CAC/D,CACF,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAzEY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;yDAGU,gBAAS,oBAAT,gBAAS,oDACR,gBAAU,oBAAV,gBAAU,oDACD,2CAAmB,oBAAnB,2CAAmB;GAJvC,YAAY,CAyExB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\guards\\jwt-auth.guard.ts"],"sourcesContent":["// src/auth/guards/jwt-auth.guard.ts\nimport {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { JwtService } from '@nestjs/jwt';\nimport { STRATEGY_JWT_AUTH } from '../constants/strategy.constant';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\nimport { JwtBlacklistService } from '../services/jwt-blacklist.service';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(STRATEGY_JWT_AUTH) {\n  constructor(\n    private reflector: Reflector,\n    private jwtService: JwtService,\n    private jwtBlacklistService: JwtBlacklistService,\n  ) {\n    super();\n  }\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    // Verificar se a rota está marcada como pública\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    // Se a rota for pública, permitir acesso sem autenticação\n    if (isPublic) {\n      return true;\n    }\n\n    // Adicionando verificações de token nos cabeçalhos\n    const request = context.switchToHttp().getRequest();\n    const authHeader = request.headers.authorization;\n\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      throw new UnauthorizedException('Token de autenticação não fornecido');\n    }\n\n    // Extrair o token do cabeçalho\n    const token = authHeader.substring(7);\n\n    try {\n      // Decodificar o token para obter o JTI\n      const decodedToken = this.jwtService.decode(token) as any;\n\n      if (!decodedToken || !decodedToken.jti) {\n        throw new UnauthorizedException('Token inválido - JTI não encontrado');\n      }\n\n      // Verificar se o token está na blacklist, usando o formato correto\n      const checkBlacklistResult =\n        await this.jwtBlacklistService.isTokenBlacklisted({\n          jti: decodedToken.jti,\n        });\n\n      if (checkBlacklistResult.is_blacklisted) {\n        throw new UnauthorizedException('Token foi revogado');\n      }\n    } catch (error) {\n      if (error instanceof UnauthorizedException) {\n        throw error;\n      }\n      // Se houver erro na decodificação, deixar o passport lidar com isso\n    }\n\n    // Continuar com a validação padrão do passport\n    const result = await super.canActivate(context);\n    return result as boolean;\n  }\n\n  handleRequest(err: any, user: any, info: any) {\n    // Você pode lançar uma exceção com base nos argumentos \"info\" ou \"err\"\n    if (err || !user) {\n      throw (\n        err ||\n        new UnauthorizedException(\n          info instanceof Error ? info.message : 'Falha na autenticação',\n        )\n      );\n    }\n    return user;\n  }\n}\n"],"version":3}