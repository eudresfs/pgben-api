{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\relatorios.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\relatorios.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { RelatoriosService } from '../services/relatorios.service';\nimport { TempFilesService } from '../services/temp-files.service';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../solicitacao/entities/solicitacao.entity';\nimport { Unidade, StatusUnidade } from '../../unidade/entities/unidade.entity';\nimport { TipoBeneficio } from '../../beneficio/entities/tipo-beneficio.entity';\nimport { Role } from '../../../shared/enums/role.enum';\nimport { UnauthorizedException } from '@nestjs/common';\n\ndescribe('RelatoriosService', () => {\n  let service: RelatoriosService;\n\n  // Mocks para repositórios\n  const mockSolicitacaoRepository = {\n    createQueryBuilder: jest.fn().mockReturnValue({\n      select: jest.fn().mockReturnThis(),\n      leftJoin: jest.fn().mockReturnThis(),\n      where: jest.fn().mockReturnThis(),\n      andWhere: jest.fn().mockReturnThis(),\n      getMany: jest.fn().mockResolvedValue([]),\n    }),\n    count: jest.fn().mockResolvedValue(0),\n  };\n\n  const mockUnidadeRepository = {\n    find: jest.fn().mockResolvedValue([]),\n    findOne: jest.fn().mockResolvedValue(null),\n  };\n\n  const mockTipoBeneficioRepository = {\n    find: jest.fn().mockResolvedValue([]),\n    findOne: jest.fn().mockResolvedValue(null),\n  };\n\n  // Mock para o serviço de arquivos temporários\n  const mockTempFilesService = {\n    createTempFile: jest.fn().mockResolvedValue('/tmp/test.pdf'),\n    removeTempFile: jest.fn().mockResolvedValue(undefined),\n  };\n\n  // Mock para o Cache Manager\n  const mockCacheManager = {\n    get: jest.fn().mockResolvedValue(null),\n    set: jest.fn().mockResolvedValue(undefined),\n  };\n\n  // Dados de exemplo para testes\n  const mockSolicitacoes = [\n    {\n      id: '1',\n      protocolo: 'PROT-001',\n      data_abertura: new Date('2025-01-05'),\n      data_liberacao: new Date('2025-01-10'),\n      status: 'LIBERADA',\n      beneficiario: {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '12345678900',\n      },\n      tipo_beneficio: {\n        id: '1',\n        nome: 'Cesta Básica',\n        valor: 150,\n      },\n      unidade: {\n        id: '1',\n        nome: 'CRAS Centro',\n      },\n    },\n  ];\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        RelatoriosService,\n        {\n          provide: getRepositoryToken(Solicitacao),\n          useValue: mockSolicitacaoRepository,\n        },\n        {\n          provide: getRepositoryToken(Unidade),\n          useValue: mockUnidadeRepository,\n        },\n        {\n          provide: getRepositoryToken(TipoBeneficio),\n          useValue: mockTipoBeneficioRepository,\n        },\n        {\n          provide: TempFilesService,\n          useValue: mockTempFilesService,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n      ],\n    }).compile();\n\n    service = module.get<RelatoriosService>(RelatoriosService);\n\n    // Limpar todos os mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('gerarRelatorioBeneficiosConcedidos', () => {\n    it('deve rejeitar usuários sem permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' };\n\n      await expect(\n        service.gerarRelatorioBeneficiosConcedidos({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('deve aceitar usuários com permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: Role.ADMIN };\n\n      // Configurar mock para retornar dados\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        leftJoin: jest.fn().mockReturnThis(),\n        where: jest.fn().mockReturnThis(),\n        andWhere: jest.fn().mockReturnThis(),\n        getMany: jest.fn().mockResolvedValue([]),\n      };\n\n      mockSolicitacaoRepository.createQueryBuilder.mockReturnValue(\n        mockQueryBuilder,\n      );\n\n      // Não deve lançar exceção\n      await expect(\n        service.gerarRelatorioBeneficiosConcedidos({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).resolves.toBeDefined();\n    });\n  });\n\n  describe('gerarRelatorioSolicitacoesPorStatus', () => {\n    it('deve rejeitar usuários sem permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' };\n\n      await expect(\n        service.gerarRelatorioSolicitacoesPorStatus({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('deve aceitar usuários com permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: Role.ADMIN };\n\n      // Configurar mock para retornar dados\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        leftJoin: jest.fn().mockReturnThis(),\n        where: jest.fn().mockReturnThis(),\n        andWhere: jest.fn().mockReturnThis(),\n        getMany: jest.fn().mockResolvedValue([]),\n      };\n\n      mockSolicitacaoRepository.createQueryBuilder.mockReturnValue(\n        mockQueryBuilder,\n      );\n\n      // Não deve lançar exceção\n      await expect(\n        service.gerarRelatorioSolicitacoesPorStatus({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).resolves.toBeDefined();\n    });\n  });\n\n  describe('gerarRelatorioAtendimentosPorUnidade', () => {\n    it('deve rejeitar usuários sem permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' };\n\n      await expect(\n        service.gerarRelatorioAtendimentosPorUnidade({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('deve aceitar usuários com permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: Role.ADMIN };\n\n      // Configurar mock para retornar unidades\n      mockUnidadeRepository.find.mockResolvedValue([\n        { id: '1', nome: 'Unidade A', status: StatusUnidade.ATIVO },\n        { id: '2', nome: 'Unidade B', status: StatusUnidade.ATIVO },\n      ]);\n\n      // Configurar mock para contagem\n      mockSolicitacaoRepository.count\n        .mockResolvedValueOnce(10) // Total unidade 1\n        .mockResolvedValueOnce(5) // Liberadas unidade 1\n        .mockResolvedValueOnce(15) // Total unidade 2\n        .mockResolvedValueOnce(8); // Liberadas unidade 2\n\n      // Não deve lançar exceção\n      await expect(\n        service.gerarRelatorioAtendimentosPorUnidade({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).resolves.toBeDefined();\n    });\n  });\n\n  it('deve verificar permissões do usuário', async () => {\n    const options = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' },\n    };\n\n    await expect(\n      service.gerarRelatorioBeneficiosConcedidos(options),\n    ).rejects.toThrow('Você não tem permissão para gerar este relatório');\n  });\n\n  it('deve buscar do cache se disponível', async () => {\n    const mockCacheData = {\n      buffer: Buffer.from('cached content'),\n      contentType: 'application/pdf',\n    };\n    mockCacheManager.get.mockResolvedValueOnce(mockCacheData);\n\n    const pdfOptions = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    };\n\n    const result = await service.gerarRelatorioBeneficiosConcedidos(pdfOptions);\n\n    expect(result).toEqual(mockCacheData);\n    expect(mockCacheManager.get).toHaveBeenCalledWith(\n      expect.stringContaining('relatorio-beneficios-concedidos'),\n    );\n    // Não deve chamar a estratégia se o cache está disponível\n    expect(mockTempFilesService.createTempFile).not.toHaveBeenCalled();\n  });\n\n  it('deve gerar relatório em PDF quando solicitado', async () => {\n    // Configurar mock do repositório\n    mockSolicitacaoRepository.createQueryBuilder.mockReturnValue({\n      select: jest.fn().mockReturnThis(),\n      leftJoin: jest.fn().mockReturnThis(),\n      where: jest.fn().mockReturnThis(),\n      andWhere: jest.fn().mockReturnThis(),\n      getMany: jest.fn().mockResolvedValue(mockSolicitacoes),\n    });\n\n    const result = await service.gerarRelatorioBeneficiosConcedidos({\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    });\n\n    expect(result).toBeDefined();\n    expect(mockTempFilesService.createTempFile).toHaveBeenCalledWith(\n      'relatorio-beneficios-concedidos',\n      expect.any(Object),\n      expect.objectContaining({\n        dataInicio: expect.any(Date),\n        dataFim: expect.any(Date),\n      }),\n    );\n    expect(mockCacheManager.set).toHaveBeenCalled();\n  });\n\n  it('deve gerar relatório em Excel quando solicitado', async () => {\n    const excelOptions = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'excel' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    };\n\n    await service.gerarRelatorioBeneficiosConcedidos(excelOptions);\n\n    expect(mockTempFilesService.createTempFile).toHaveBeenCalled();\n    expect(mockTempFilesService.removeTempFile).not.toHaveBeenCalled();\n  });\n\n  it('deve gerar relatório em CSV quando solicitado', async () => {\n    const csvOptions = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'csv' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    };\n\n    const result = await service.gerarRelatorioBeneficiosConcedidos(csvOptions);\n\n    expect(result).toBeDefined();\n    expect(mockTempFilesService.createTempFile).toHaveBeenCalledWith(\n      'relatorio-beneficios-concedidos',\n      expect.any(Array),\n      expect.objectContaining({\n        dataInicio: expect.any(Date),\n        dataFim: expect.any(Date),\n      }),\n    );\n    expect(mockCacheManager.set).toHaveBeenCalled();\n    expect(mockUnidadeRepository.find).toHaveBeenCalledWith({\n      where: { status: 'ATIVO' },\n    });\n    expect(mockSolicitacaoRepository.count).toHaveBeenCalledTimes(4);\n  });\n\n  it('deve filtrar por unidade quando especificado', async () => {\n    const optionsComUnidade = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n      unidadeId: '1',\n    };\n\n    mockUnidadeRepository.findOne.mockResolvedValueOnce({\n      id: 1,\n      nome: 'Unidade Teste',\n    });\n\n    await service.gerarRelatorioBeneficiosConcedidos(optionsComUnidade);\n\n    expect(mockUnidadeRepository.findOne).toHaveBeenCalledWith({\n      where: { id: 1 },\n    });\n    expect(\n      mockSolicitacaoRepository.createQueryBuilder().andWhere,\n    ).toHaveBeenCalledWith(\n      expect.stringContaining('unidade.id = :unidadeId'),\n      expect.objectContaining({ unidadeId: 1 }),\n    );\n  });\n\n  it('deve filtrar por tipo de benefício quando especificado', async () => {\n    const optionsComTipoBeneficio = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n      tipoBeneficioId: '1',\n    };\n\n    mockTipoBeneficioRepository.findOne.mockResolvedValueOnce({\n      id: 1,\n      nome: 'Auxílio Moradia',\n    });\n\n    await service.gerarRelatorioBeneficiosConcedidos(optionsComTipoBeneficio);\n\n    expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n      where: { id: 1 },\n    });\n    expect(\n      mockSolicitacaoRepository.createQueryBuilder().andWhere,\n    ).toHaveBeenCalledWith(\n      expect.stringContaining('tipoBeneficio.id = :tipoBeneficioId'),\n      expect.objectContaining({ tipoBeneficioId: 1 }),\n    );\n  });\n});\n\ndescribe('RelatoriosService', () => {\n  let service: RelatoriosService;\n\n  // Mocks para repositórios\n  const mockSolicitacaoRepository = {\n    createQueryBuilder: jest.fn().mockReturnValue({\n      select: jest.fn().mockReturnThis(),\n      leftJoin: jest.fn().mockReturnThis(),\n      where: jest.fn().mockReturnThis(),\n      andWhere: jest.fn().mockReturnThis(),\n      getMany: jest.fn().mockResolvedValue([]),\n    }),\n    count: jest.fn().mockResolvedValue(0),\n  };\n\n  const mockUnidadeRepository = {\n    find: jest.fn().mockResolvedValue([]),\n    findOne: jest.fn().mockResolvedValue(null),\n  };\n\n  const mockTipoBeneficioRepository = {\n    find: jest.fn().mockResolvedValue([]),\n    findOne: jest.fn().mockResolvedValue(null),\n  };\n\n  // Mock para o serviço de arquivos temporários\n  const mockTempFilesService = {\n    createTempFile: jest.fn().mockResolvedValue('/tmp/test.pdf'),\n    removeTempFile: jest.fn().mockResolvedValue(undefined),\n  };\n\n  // Mock para o Cache Manager\n  const mockCacheManager = {\n    get: jest.fn().mockResolvedValue(null),\n    set: jest.fn().mockResolvedValue(undefined),\n  };\n\n  // Dados de exemplo para testes\n  const mockSolicitacoes = [\n    {\n      id: '1',\n      protocolo: 'PROT-001',\n      data_abertura: new Date('2025-01-05'),\n      data_liberacao: new Date('2025-01-10'),\n      status: 'LIBERADA',\n      beneficiario: {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '12345678900',\n      },\n      tipo_beneficio: {\n        id: '1',\n        nome: 'Cesta Básica',\n        valor: 150,\n      },\n      unidade: {\n        id: '1',\n        nome: 'CRAS Centro',\n      },\n    },\n  ];\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        RelatoriosService,\n        {\n          provide: getRepositoryToken(Solicitacao),\n          useValue: mockSolicitacaoRepository,\n        },\n        {\n          provide: getRepositoryToken(Unidade),\n          useValue: mockUnidadeRepository,\n        },\n        {\n          provide: getRepositoryToken(TipoBeneficio),\n          useValue: mockTipoBeneficioRepository,\n        },\n        {\n          provide: TempFilesService,\n          useValue: mockTempFilesService,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n      ],\n    }).compile();\n\n    service = module.get<RelatoriosService>(RelatoriosService);\n\n    // Limpar todos os mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('gerarRelatorioBeneficiosConcedidos', () => {\n    it('deve rejeitar usuários sem permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' };\n\n      await expect(\n        service.gerarRelatorioBeneficiosConcedidos({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('deve aceitar usuários com permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: Role.ADMIN };\n\n      // Configurar mock para retornar dados\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        leftJoin: jest.fn().mockReturnThis(),\n        where: jest.fn().mockReturnThis(),\n        andWhere: jest.fn().mockReturnThis(),\n        getMany: jest.fn().mockResolvedValue([]),\n      };\n\n      mockSolicitacaoRepository.createQueryBuilder.mockReturnValue(\n        mockQueryBuilder,\n      );\n\n      // Não deve lançar exceção\n      await expect(\n        service.gerarRelatorioBeneficiosConcedidos({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).resolves.toBeDefined();\n    });\n  });\n\n  describe('gerarRelatorioSolicitacoesPorStatus', () => {\n    it('deve rejeitar usuários sem permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' };\n\n      await expect(\n        service.gerarRelatorioSolicitacoesPorStatus({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('deve aceitar usuários com permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: Role.ADMIN };\n\n      // Configurar mock para retornar dados\n      const mockQueryBuilder = {\n        select: jest.fn().mockReturnThis(),\n        leftJoin: jest.fn().mockReturnThis(),\n        where: jest.fn().mockReturnThis(),\n        andWhere: jest.fn().mockReturnThis(),\n        getMany: jest.fn().mockResolvedValue([]),\n      };\n\n      mockSolicitacaoRepository.createQueryBuilder.mockReturnValue(\n        mockQueryBuilder,\n      );\n\n      // Não deve lançar exceção\n      await expect(\n        service.gerarRelatorioSolicitacoesPorStatus({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).resolves.toBeDefined();\n    });\n  });\n\n  describe('gerarRelatorioAtendimentosPorUnidade', () => {\n    it('deve rejeitar usuários sem permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' };\n\n      await expect(\n        service.gerarRelatorioAtendimentosPorUnidade({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).rejects.toThrow(UnauthorizedException);\n    });\n\n    it('deve aceitar usuários com permissão', async () => {\n      const mockUser = { id: 1, nome: 'Usuário Teste', role: Role.ADMIN };\n\n      // Configurar mock para retornar unidades\n      mockUnidadeRepository.find.mockResolvedValue([\n        { id: '1', nome: 'Unidade A', status: StatusUnidade.ATIVO },\n        { id: '2', nome: 'Unidade B', status: StatusUnidade.ATIVO },\n      ]);\n\n      // Configurar mock para contagem\n      mockSolicitacaoRepository.count\n        .mockResolvedValueOnce(10) // Total unidade 1\n        .mockResolvedValueOnce(5) // Liberadas unidade 1\n        .mockResolvedValueOnce(15) // Total unidade 2\n        .mockResolvedValueOnce(8); // Liberadas unidade 2\n\n      // Não deve lançar exceção\n      await expect(\n        service.gerarRelatorioAtendimentosPorUnidade({\n          dataInicio: '2025-01-01',\n          dataFim: '2025-01-31',\n          formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n          user: mockUser,\n        }),\n      ).resolves.toBeDefined();\n    });\n  });\n\n  it('deve verificar permissões do usuário', async () => {\n    const options = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: 'CIDADAO' },\n    };\n\n    await expect(\n      service.gerarRelatorioBeneficiosConcedidos(options),\n    ).rejects.toThrow('Você não tem permissão para gerar este relatório');\n  });\n\n  it('deve buscar do cache se disponível', async () => {\n    const mockCacheData = {\n      buffer: Buffer.from('cached content'),\n      contentType: 'application/pdf',\n    };\n    mockCacheManager.get.mockResolvedValueOnce(mockCacheData);\n\n    const pdfOptions = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    };\n\n    const result = await service.gerarRelatorioBeneficiosConcedidos(pdfOptions);\n\n    expect(result).toEqual(mockCacheData);\n    expect(mockCacheManager.get).toHaveBeenCalledWith(\n      expect.stringContaining('relatorio-beneficios-concedidos'),\n    );\n    // Não deve chamar a estratégia se o cache está disponível\n    expect(mockTempFilesService.createTempFile).not.toHaveBeenCalled();\n  });\n\n  it('deve gerar relatório em PDF quando solicitado', async () => {\n    // Configurar mock do repositório\n    mockSolicitacaoRepository.createQueryBuilder.mockReturnValue({\n      select: jest.fn().mockReturnThis(),\n      leftJoin: jest.fn().mockReturnThis(),\n      where: jest.fn().mockReturnThis(),\n      andWhere: jest.fn().mockReturnThis(),\n      getMany: jest.fn().mockResolvedValue(mockSolicitacoes),\n    });\n\n    const result = await service.gerarRelatorioBeneficiosConcedidos({\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    });\n\n    expect(result).toBeDefined();\n    expect(mockTempFilesService.createTempFile).toHaveBeenCalledWith(\n      'relatorio-beneficios-concedidos',\n      expect.any(Object),\n      expect.objectContaining({\n        dataInicio: expect.any(Date),\n        dataFim: expect.any(Date),\n      }),\n    );\n    expect(mockCacheManager.set).toHaveBeenCalled();\n  });\n\n  it('deve gerar relatório em Excel quando solicitado', async () => {\n    const excelOptions = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'excel' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    };\n\n    await service.gerarRelatorioBeneficiosConcedidos(excelOptions);\n\n    expect(mockTempFilesService.createTempFile).toHaveBeenCalled();\n    expect(mockTempFilesService.removeTempFile).not.toHaveBeenCalled();\n  });\n\n  it('deve gerar relatório em CSV quando solicitado', async () => {\n    const csvOptions = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'csv' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n    };\n\n    const result = await service.gerarRelatorioBeneficiosConcedidos(csvOptions);\n\n    expect(result).toBeDefined();\n    expect(mockTempFilesService.createTempFile).toHaveBeenCalledWith(\n      'relatorio-beneficios-concedidos',\n      expect.any(Array),\n      expect.objectContaining({\n        dataInicio: expect.any(Date),\n        dataFim: expect.any(Date),\n      }),\n    );\n    expect(mockCacheManager.set).toHaveBeenCalled();\n    expect(mockUnidadeRepository.find).toHaveBeenCalledWith({\n      where: { status: 'ATIVO' },\n    });\n    expect(mockSolicitacaoRepository.count).toHaveBeenCalledTimes(4);\n  });\n\n  it('deve filtrar por unidade quando especificado', async () => {\n    const optionsComUnidade = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n      unidadeId: '1',\n    };\n\n    mockUnidadeRepository.findOne.mockResolvedValueOnce({\n      id: 1,\n      nome: 'Unidade Teste',\n    });\n\n    await service.gerarRelatorioBeneficiosConcedidos(optionsComUnidade);\n\n    expect(mockUnidadeRepository.findOne).toHaveBeenCalledWith({\n      where: { id: 1 },\n    });\n    expect(\n      mockSolicitacaoRepository.createQueryBuilder().andWhere,\n    ).toHaveBeenCalledWith(\n      expect.stringContaining('unidade.id = :unidadeId'),\n      expect.objectContaining({ unidadeId: 1 }),\n    );\n  });\n\n  it('deve filtrar por tipo de benefício quando especificado', async () => {\n    const optionsComTipoBeneficio = {\n      dataInicio: '2025-01-01',\n      dataFim: '2025-01-31',\n      formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n      user: { id: 1, nome: 'Usuário Teste', role: Role.ADMIN },\n      tipoBeneficioId: '1',\n    };\n\n    mockTipoBeneficioRepository.findOne.mockResolvedValueOnce({\n      id: 1,\n      nome: 'Auxílio Moradia',\n    });\n\n    await service.gerarRelatorioBeneficiosConcedidos(optionsComTipoBeneficio);\n\n    expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n      where: { id: 1 },\n    });\n    expect(\n      mockSolicitacaoRepository.createQueryBuilder().andWhere,\n    ).toHaveBeenCalledWith(\n      expect.stringContaining('tipoBeneficio.id = :tipoBeneficioId'),\n      expect.objectContaining({ tipoBeneficioId: 1 }),\n    );\n  });\n});\n"],"version":3}