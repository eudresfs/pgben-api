{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\controllers\\auditoria.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\controllers\\auditoria.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  ParseUUIDPipe,\n  Query,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { AuditoriaService } from '../services/auditoria.service';\nimport { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';\nimport { QueryLogAuditoriaDto } from '../dto/query-log-auditoria.dto';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { ScopeType } from '../../../entities/user-permission.entity';\n\n/**\n * Controlador de Auditoria\n *\n * Responsável por expor as funcionalidades de auditoria via API REST.\n * Permite consultar logs de auditoria e gerar relatórios.\n */\n@ApiTags('Auditoria')\n@Controller('auditoria')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class AuditoriaController {\n  constructor(private readonly auditoriaService: AuditoriaService) {}\n\n  /**\n   * Cria um novo log de auditoria manualmente\n   * Normalmente os logs são criados automaticamente pelo middleware\n   */\n  @Post()\n  @RequiresPermission({\n    permissionName: 'auditoria.log.criar',\n    scopeType: ScopeType.GLOBAL,\n  })\n  @ApiOperation({ summary: 'Cria um novo log de auditoria manualmente' })\n  @ApiResponse({\n    status: 201,\n    description: 'Log de auditoria criado com sucesso',\n  })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  create(@Body() createLogAuditoriaDto: CreateLogAuditoriaDto, @Req() req) {\n    // Adiciona informações do usuário logado\n    if (!createLogAuditoriaDto.usuario_id && req.user) {\n      createLogAuditoriaDto.usuario_id = req.user.id;\n    }\n\n    // Adiciona informações da requisição\n    if (!createLogAuditoriaDto.ip_origem) {\n      createLogAuditoriaDto.ip_origem = req.ip;\n    }\n\n    if (!createLogAuditoriaDto.user_agent) {\n      createLogAuditoriaDto.user_agent = req.headers['user-agent'];\n    }\n\n    return this.auditoriaService.create(createLogAuditoriaDto);\n  }\n\n  /**\n   * Busca logs de auditoria com base nos filtros fornecidos\n   */\n  @Get()\n  @RequiresPermission({\n    permissionName: 'auditoria.log.listar',\n    scopeType: ScopeType.GLOBAL,\n  })\n  @ApiOperation({ summary: 'Busca logs de auditoria' })\n  @ApiResponse({ status: 200, description: 'Lista de logs de auditoria' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  findAll(@Query() queryParams: QueryLogAuditoriaDto) {\n    return this.auditoriaService.findAll(queryParams);\n  }\n\n  /**\n   * Busca um log de auditoria pelo ID\n   */\n  @Get(':id')\n  @RequiresPermission({\n    permissionName: 'auditoria.log.visualizar',\n    scopeType: ScopeType.GLOBAL,\n  })\n  @ApiOperation({ summary: 'Busca um log de auditoria pelo ID' })\n  @ApiParam({ name: 'id', description: 'ID do log de auditoria' })\n  @ApiResponse({ status: 200, description: 'Log de auditoria encontrado' })\n  @ApiResponse({ status: 404, description: 'Log de auditoria não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.auditoriaService.findOne(id);\n  }\n\n  /**\n   * Busca logs de auditoria por entidade\n   */\n  @Get('entidade/:entidade/:id')\n  @RequiresPermission({\n    permissionName: 'auditoria.log.entidade.visualizar',\n    scopeType: ScopeType.GLOBAL,\n  })\n  @ApiOperation({ summary: 'Busca logs de auditoria por entidade' })\n  @ApiParam({ name: 'entidade', description: 'Nome da entidade' })\n  @ApiParam({ name: 'id', description: 'ID da entidade' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de logs de auditoria da entidade',\n  })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  findByEntidade(\n    @Param('entidade') entidade: string,\n    @Param('id', ParseUUIDPipe) id: string,\n  ) {\n    return this.auditoriaService.findByEntidade(entidade, id);\n  }\n\n  /**\n   * Busca logs de auditoria por usuário\n   */\n  @Get('usuario/:id')\n  @RequiresPermission({\n    permissionName: 'auditoria.log.usuario.visualizar',\n    scopeType: ScopeType.GLOBAL,\n  })\n  @ApiOperation({ summary: 'Busca logs de auditoria por usuário' })\n  @ApiParam({ name: 'id', description: 'ID do usuário' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de logs de auditoria do usuário',\n  })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  findByUsuario(@Param('id', ParseUUIDPipe) id: string) {\n    return this.auditoriaService.findByUsuario(id);\n  }\n\n  /**\n   * Gera relatório de acessos a dados sensíveis por período\n   */\n  @Get('relatorios/dados-sensiveis')\n  @RequiresPermission({\n    permissionName: 'auditoria.relatorio.dados-sensiveis',\n    scopeType: ScopeType.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Gera relatório de acessos a dados sensíveis por período',\n  })\n  @ApiQuery({\n    name: 'data_inicial',\n    description: 'Data inicial (formato ISO)',\n    required: true,\n  })\n  @ApiQuery({\n    name: 'data_final',\n    description: 'Data final (formato ISO)',\n    required: true,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Relatório de acessos a dados sensíveis',\n  })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  relatorioAcessosDadosSensiveis(\n    @Query('data_inicial') dataInicial: string,\n    @Query('data_final') dataFinal: string,\n  ) {\n    return this.auditoriaService.relatorioAcessosDadosSensiveis(\n      new Date(dataInicial),\n      new Date(dataFinal),\n    );\n  }\n}\n"],"version":3}