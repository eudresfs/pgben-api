{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\metrics.interceptor.ts","mappings":";;;;;;;;;;;;;AAAA,2CAKwB;AAExB,8CAAqC;AACrC,uDAAmD;AAEnD;;;;;;;GAOG;AAEI,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IACA;IAA7B,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAE/D,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;QACnC,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;QACjC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,OAAO,CAAC;QAEhC,oEAAoE;QACpE,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAEvC,mDAAmD;QACnD,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEnE,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;QAEnC,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CACvB,IAAA,eAAG,EAAC;YACF,IAAI,EAAE,GAAG,EAAE;gBACT,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACnC,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;gBAEvC,iCAAiC;gBACjC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACzD,MAAM,eAAe,GAAG,OAAO,GAAG,WAAW,GAAG,GAAG,CAAC;gBAEpD,qBAAqB;gBACrB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;gBACjE,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAC3C,MAAM,EACN,KAAK,EACL,UAAU,EACV,eAAe,CAChB,CAAC;gBAEF,mDAAmD;gBACnD,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACrE,CAAC;YACD,KAAK,EAAE,CAAC,KAAK,EAAE,EAAE;gBACf,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,IAAI,GAAG,CAAC;gBAEvC,iCAAiC;gBACjC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBACzD,MAAM,eAAe,GAAG,OAAO,GAAG,WAAW,GAAG,GAAG,CAAC;gBAEpD,qBAAqB;gBACrB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;gBACjE,IAAI,CAAC,cAAc,CAAC,yBAAyB,CAC3C,MAAM,EACN,KAAK,EACL,UAAU,EACV,eAAe,CAChB,CAAC;gBAEF,mDAAmD;gBACnD,IAAI,CAAC,cAAc,CAAC,+BAA+B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACrE,CAAC;SACF,CAAC,CACH,CAAC;IACJ,CAAC;IAED;;;OAGG;IACK,cAAc,CAAC,GAAW;QAChC,uBAAuB;QACvB,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAE/B,oDAAoD;QACpD,OAAO,IAAI;aACR,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC;aACzB,OAAO,CACN,kEAAkE,EAClE,QAAQ,CACT,CAAC;IACN,CAAC;CACF,CAAA;AA7EY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;yDAEkC,gCAAc,oBAAd,gCAAc;GADhD,kBAAkB,CA6E9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\metrics.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { MetricsService } from './metrics.service';\n\n/**\n * Interceptor de Métricas\n *\n * Intercepta todas as requisições HTTP e registra métricas como:\n * - Contador de requisições\n * - Duração das requisições\n * - Requisições em andamento\n */\n@Injectable()\nexport class MetricsInterceptor implements NestInterceptor {\n  constructor(private readonly metricsService: MetricsService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const ctx = context.switchToHttp();\n    const request = ctx.getRequest();\n    const { method, url } = request;\n\n    // Extrair a rota base sem parâmetros para evitar cardinalidade alta\n    const route = this.normalizeRoute(url);\n\n    // Incrementar contador de requisições em andamento\n    this.metricsService.incrementHttpRequestsInProgress(method, route);\n\n    const startTime = process.hrtime();\n\n    return next.handle().pipe(\n      tap({\n        next: () => {\n          const response = ctx.getResponse();\n          const statusCode = response.statusCode;\n\n          // Calcular duração da requisição\n          const [seconds, nanoseconds] = process.hrtime(startTime);\n          const durationSeconds = seconds + nanoseconds / 1e9;\n\n          // Registrar métricas\n          this.metricsService.recordHttpRequest(method, route, statusCode);\n          this.metricsService.recordHttpRequestDuration(\n            method,\n            route,\n            statusCode,\n            durationSeconds,\n          );\n\n          // Decrementar contador de requisições em andamento\n          this.metricsService.decrementHttpRequestsInProgress(method, route);\n        },\n        error: (error) => {\n          const statusCode = error.status || 500;\n\n          // Calcular duração da requisição\n          const [seconds, nanoseconds] = process.hrtime(startTime);\n          const durationSeconds = seconds + nanoseconds / 1e9;\n\n          // Registrar métricas\n          this.metricsService.recordHttpRequest(method, route, statusCode);\n          this.metricsService.recordHttpRequestDuration(\n            method,\n            route,\n            statusCode,\n            durationSeconds,\n          );\n\n          // Decrementar contador de requisições em andamento\n          this.metricsService.decrementHttpRequestsInProgress(method, route);\n        },\n      }),\n    );\n  }\n\n  /**\n   * Normaliza a rota para evitar cardinalidade alta nas métricas\n   * Exemplo: /users/123 -> /users/:id\n   */\n  private normalizeRoute(url: string): string {\n    // Remover query string\n    const path = url.split('?')[0];\n\n    // Substituir IDs numéricos e UUIDs por placeholders\n    return path\n      .replace(/\\/\\d+/g, '/:id')\n      .replace(\n        /\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/gi,\n        '/:uuid',\n      );\n  }\n}\n"],"version":3}