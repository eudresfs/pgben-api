{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\documento.integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\documento.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Documento } from '../../src/modules/documento/entities/documento.entity';\nimport { TipoDocumento } from '../../src/modules/beneficio/entities/requisito-documento.entity';\nimport { JwtService } from '@nestjs/jwt';\nimport { MinioService } from '../../src/shared/services/minio.service';\nimport { Solicitacao, StatusSolicitacao } from '../../src/modules/solicitacao/entities/solicitacao.entity';\n\ndescribe('Documento (Integração)', () => {\n  let app: INestApplication;\n  let documentoRepository: Repository<Documento>;\n  let solicitacaoRepository: Repository<Solicitacao>;\n  let jwtService: JwtService;\n  let minioService: MinioService;\n  let authToken: string;\n\n  // Mock do MinioService para evitar chamadas reais ao MinIO\n  const mockMinioService = {\n    uploadArquivo: jest.fn(),\n    downloadArquivo: jest.fn(),\n    removerArquivo: jest.fn(),\n    gerarUrlPresigned: jest.fn(),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    })\n      .overrideProvider(MinioService)\n      .useValue(mockMinioService)\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n\n    documentoRepository = moduleFixture.get<Repository<Documento>>(\n      getRepositoryToken(Documento),\n    );\n    solicitacaoRepository = moduleFixture.get<Repository<Solicitacao>>(\n      getRepositoryToken(Solicitacao),\n    );\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    // Gerar token de autenticação para testes\n    authToken = jwtService.sign({\n      id: 'test-user-id',\n      nome: 'Usuário de Teste',\n      email: 'teste@exemplo.com',\n      roles: ['admin'],\n    });\n  });\n\n  beforeEach(async () => {\n    // Limpar documentos antes de cada teste\n    const documentos = await documentoRepository.find();\n    if (documentos.length > 0) {\n      await documentoRepository.remove(documentos);\n    }\n\n    // Criar solicitações de teste usando o método create para evitar problemas com campos especiais\n    const solicitacao1 = solicitacaoRepository.create({\n       id: '550e8400-e29b-41d4-a716-446655440000',\n       protocolo: 'SOL202400001',\n       status: StatusSolicitacao.PENDENTE,\n       beneficiario_id: '550e8400-e29b-41d4-a716-446655440002',\n       tipo_beneficio_id: '550e8400-e29b-41d4-a716-446655440003',\n       unidade_id: '550e8400-e29b-41d4-a716-446655440004',\n       tecnico_id: '550e8400-e29b-41d4-a716-446655440005',\n       data_abertura: new Date(),\n       observacoes: 'Teste 1'\n     });\n     await solicitacaoRepository.save(solicitacao1);\n\n     const solicitacao2 = solicitacaoRepository.create({\n       id: '550e8400-e29b-41d4-a716-446655440001',\n       protocolo: 'SOL202400002',\n       status: StatusSolicitacao.EM_ANALISE,\n       beneficiario_id: '550e8400-e29b-41d4-a716-446655440002',\n       tipo_beneficio_id: '550e8400-e29b-41d4-a716-446655440003',\n       unidade_id: '550e8400-e29b-41d4-a716-446655440004',\n       tecnico_id: '550e8400-e29b-41d4-a716-446655440005',\n       data_abertura: new Date(),\n       observacoes: 'Teste 2'\n     });\n     await solicitacaoRepository.save(solicitacao2);\n\n    jest.clearAllMocks();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('Upload de documentos', () => {\n    it('deve permitir upload de documento não sensível', async () => {\n      // Arrange\n      const mockFile = Buffer.from('conteúdo do arquivo de teste');\n      const mockUploadResult = {\n        nomeArquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-123.pdf',\n        tamanho: mockFile.length,\n        hash: 'hash-do-arquivo',\n        metadados: {\n          criptografado: false\n        },\n        etag: 'etag-do-arquivo',\n      };\n\n      mockMinioService.uploadArquivo.mockResolvedValue(mockUploadResult);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .post('/api/documentos/upload')\n        .set('Authorization', `Bearer ${authToken}`)\n        .field('solicitacao_id', '550e8400-e29b-41d4-a716-446655440000')\n        .field('tipo_documento', 'comprovante')\n        .field('descricao', 'Comprovante de residência')\n        .field('sensivel', 'false')\n        .attach('arquivo', mockFile, 'documento.pdf')\n        .expect(201);\n\n      // Assert\n      expect(mockMinioService.uploadArquivo).toHaveBeenCalledWith(\n        expect.any(Buffer),\n        'documento.pdf',\n        '550e8400-e29b-41d4-a716-446655440000',\n        'comprovante',\n        false,\n      );\n\n      expect(response.body).toEqual(\n        expect.objectContaining({\n          nome_arquivo: mockUploadResult.nomeArquivo,\n          tamanho: mockUploadResult.tamanho,\n          hash: mockUploadResult.hash,\n          metadados: {\n          criptografado: false\n        },\n        }),\n      );\n\n      const savedDocumento = await documentoRepository.findOne({\n        where: { nome_arquivo: mockUploadResult.nomeArquivo },\n      });\n      expect(savedDocumento).toBeDefined();\n      expect(savedDocumento!.metadados.criptografado).toBe(false);\n    });\n\n    it('deve permitir upload de documento sensível com criptografia', async () => {\n      // Arrange\n      const mockFile = Buffer.from('conteúdo do arquivo sensível');\n      const mockUploadResult = {\n        nomeArquivo: '550e8400-e29b-41d4-a716-446655440000/laudo/documento-123.pdf',\n        tamanho: mockFile.length,\n        etag: 'etag-do-arquivo-sensivel',\n        metadados: {\n          hash: 'hash-do-arquivo-sensivel',\n          criptografado: true,\n          criptografia: {\n            iv: 'iv-base64',\n            authTag: 'auth-tag-base64',\n            algoritmo: 'aes-256-gcm'\n          }\n        },\n      };\n\n      mockMinioService.uploadArquivo.mockResolvedValue(mockUploadResult);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .post('/api/documentos/upload')\n        .set('Authorization', `Bearer ${authToken}`)\n        .field('solicitacao_id', '550e8400-e29b-41d4-a716-446655440000')\n        .field('tipo_documento', 'laudo')\n        .field('descricao', 'Laudo médico')\n        .field('sensivel', 'true')\n        .attach('arquivo', mockFile, 'laudo.pdf')\n        .expect(201);\n\n      // Assert\n      expect(mockMinioService.uploadArquivo).toHaveBeenCalledWith(\n        expect.any(Buffer),\n        'laudo.pdf',\n        '550e8400-e29b-41d4-a716-446655440000',\n        'laudo',\n        true,\n      );\n\n      expect(response.body).toEqual(\n        expect.objectContaining({\n          nome_arquivo: mockUploadResult.nomeArquivo,\n          tamanho: mockUploadResult.tamanho,\n          metadados: expect.objectContaining({\n            hash: mockUploadResult.metadados.hash,\n            criptografado: true,\n            criptografia: expect.objectContaining({\n              iv: mockUploadResult.metadados.criptografia.iv,\n              authTag: mockUploadResult.metadados.criptografia.authTag,\n            })\n          }),\n        }),\n      );\n\n      const savedDocumento = await documentoRepository.findOne({\n        where: { nome_arquivo: mockUploadResult.nomeArquivo },\n      });\n      expect(savedDocumento).toBeDefined();\n      expect(savedDocumento!.metadados.criptografado).toBe(true);\n      expect(savedDocumento!.metadados.criptografia?.iv).toBe(mockUploadResult.metadados.criptografia.iv);\n      expect(savedDocumento!.metadados.criptografia?.authTag).toBe(mockUploadResult.metadados.criptografia.authTag);\n    });\n  });\n\n  describe('Download de documentos', () => {\n    it('deve permitir download de documento não sensível', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-123.pdf',\n        nome_original: 'comprovante.pdf',\n        caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-123.pdf',\n        tipo: TipoDocumento.COMPROVANTE_RESIDENCIA,\n        descricao: 'Comprovante de residência',\n        solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',\n        tamanho: 1024,\n        mimetype: 'application/pdf',\n        data_upload: new Date(),\n        metadados: {\n          hash: 'hash-do-arquivo',\n          criptografado: false\n        },\n        usuario_upload: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      const mockDownloadResult = {\n        buffer: Buffer.from('conteúdo do arquivo de teste'),\n        nomeOriginal: 'comprovante.pdf',\n        tamanho: 1024,\n        metadados: {\n          criptografado: false\n        },\n      };\n\n      mockMinioService.downloadArquivo.mockResolvedValue(mockDownloadResult);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get(`/api/documentos/download/${documento.id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(mockMinioService.downloadArquivo).toHaveBeenCalledWith(\n        documento.nome_arquivo,\n      );\n\n      expect(response.headers['content-disposition']).toContain(\n        'attachment; filename=\"comprovante.pdf\"',\n      );\n      expect(response.headers['content-type']).toContain('application/pdf');\n      expect(response.body).toEqual(expect.any(Buffer));\n    });\n\n    it('deve permitir download de documento sensível criptografado', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/laudo/documento-123.pdf',\n        nome_original: 'laudo.pdf',\n        caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/laudo/documento-123.pdf',\n        tipo: TipoDocumento.DECLARACAO_MEDICA,\n        descricao: 'Laudo médico',\n        solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',\n        tamanho: 1024,\n        mimetype: 'application/pdf',\n        data_upload: new Date(),\n        metadados: {\n          hash: 'hash-do-arquivo-sensivel',\n          criptografado: true,\n          criptografia: {\n            iv: 'iv-base64',\n            authTag: 'auth-tag-base64',\n            algoritmo: 'aes-256-gcm'\n          }\n        },\n        usuario_upload: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      const mockDownloadResult = {\n        buffer: Buffer.from('conteúdo descriptografado do arquivo sensível'),\n        nomeOriginal: 'laudo.pdf',\n        tamanho: 1024,\n        metadados: {\n          criptografado: true\n        },\n      };\n\n      mockMinioService.downloadArquivo.mockResolvedValue(mockDownloadResult);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get(`/api/documentos/download/${documento.id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(mockMinioService.downloadArquivo).toHaveBeenCalledWith(\n        documento.nome_arquivo,\n      );\n\n      expect(response.headers['content-disposition']).toContain(\n        'attachment; filename=\"laudo.pdf\"',\n      );\n      expect(response.headers['content-type']).toContain('application/pdf');\n      expect(response.body).toEqual(expect.any(Buffer));\n    });\n  });\n\n  describe('Listagem de documentos', () => {\n    it('deve listar documentos por solicitação', async () => {\n      // Arrange\n      const documentos = [\n        documentoRepository.create({\n          nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',\n          nome_original: 'comprovante.pdf',\n          caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',\n          tipo: TipoDocumento.COMPROVANTE_RESIDENCIA,\n          descricao: 'Comprovante de residência',\n          solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',\n          tamanho: 1024,\n          mimetype: 'application/pdf',\n          data_upload: new Date(),\n        metadados: {\n          hash: 'hash-1',\n          criptografado: false\n        },\n        usuario_upload: 'test-user-id',\n        }),\n        documentoRepository.create({\n          nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/laudo/documento-2.pdf',\n          nome_original: 'laudo.pdf',\n          caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/laudo/documento-2.pdf',\n          tipo: TipoDocumento.DECLARACAO_MEDICA,\n          descricao: 'Laudo médico',\n          solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',\n          tamanho: 2048,\n          mimetype: 'application/pdf',\n          data_upload: new Date(),\n        metadados: {\n          hash: 'hash-2',\n          criptografado: true,\n          criptografia: {\n            iv: 'iv-base64',\n            authTag: 'auth-tag-base64',\n            algoritmo: 'aes-256-gcm'\n          }\n        },\n        usuario_upload: 'test-user-id',\n        }),\n      ];\n      await documentoRepository.save(documentos);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/documentos')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ solicitacao_id: '550e8400-e29b-41d4-a716-446655440000' })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(2);\n      expect(response.body.data[0].solicitacao_id).toBe('550e8400-e29b-41d4-a716-446655440000');\n      expect(response.body.data[1].solicitacao_id).toBe('550e8400-e29b-41d4-a716-446655440000');\n    });\n\n    it('deve listar documentos por tipo', async () => {\n      // Arrange\n      const documentos = [\n          documentoRepository.create({\n            nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',\n            nome_original: 'comprovante.pdf',\n            caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',\n            tipo: TipoDocumento.COMPROVANTE_RESIDENCIA,\n            descricao: 'Comprovante de residência',\n            solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',\n            tamanho: 1024,\n            mimetype: 'application/pdf',\n            data_upload: new Date(),\n          metadados: {\n            hash: 'hash-1',\n            criptografado: false\n          },\n          usuario_upload: 'test-user-id',\n          }),\n          documentoRepository.create({\n            nome_arquivo: '550e8400-e29b-41d4-a716-446655440001/comprovante/documento-3.pdf',\n             nome_original: 'comprovante2.pdf',\n            caminho: '/uploads/550e8400-e29b-41d4-a716-446655440001/comprovante/documento-3.pdf',\n             tipo: TipoDocumento.COMPROVANTE_RENDA,\n             descricao: 'Comprovante de renda',\n           solicitacao_id: '550e8400-e29b-41d4-a716-446655440001',\n           tamanho: 1536,\n           mimetype: 'application/pdf',\n           data_upload: new Date(),\n          metadados: {\n            hash: 'hash-3',\n            criptografado: false\n          },\n          usuario_upload: 'test-user-id',\n          }),\n        ];\n      await documentoRepository.save(documentos);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/documentos')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ tipo_documento: 'comprovante' })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(2);\n      expect(response.body.data[0].tipo).toBe(TipoDocumento.COMPROVANTE_RESIDENCIA);\n      expect(response.body.data[1].tipo).toBe(TipoDocumento.COMPROVANTE_RENDA);\n    });\n  });\n\n  describe('Exclusão de documentos', () => {\n    it('deve permitir excluir um documento', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',\n        nome_original: 'comprovante.pdf',\n        caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',\n        tipo: TipoDocumento.COMPROVANTE_RESIDENCIA,\n        descricao: 'Comprovante de residência',\n        solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',\n        tamanho: 1024,\n        mimetype: 'application/pdf',\n        data_upload: new Date(),\n        metadados: {\n          hash: 'hash-1',\n          criptografado: false\n        },\n        usuario_upload: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      mockMinioService.removerArquivo.mockResolvedValue(undefined);\n\n      // Act\n      await request(app.getHttpServer())\n        .delete(`/api/documentos/${documento.id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(mockMinioService.removerArquivo).toHaveBeenCalledWith(\n        documento.nome_arquivo,\n      );\n\n      const documentoExcluido = await documentoRepository.findOne({\n        where: { id: documento.id },\n      });\n      expect(documentoExcluido).toBeNull();\n    });\n  });\n});\n"],"version":3}