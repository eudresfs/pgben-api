4a82b5deb5de237a4fbcf02b842a6ebb
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumValidationHelper = exports.IsEnumValueConstraint = void 0;
exports.IsEnumValue = IsEnumValue;
const class_validator_1 = require("class-validator");
/**
 * Validador customizado para enums com mensagens de erro aprimoradas
 *
 * Características:
 * - Mensagens de erro mais amigáveis
 * - Sugestões de valores válidos
 * - Suporte a case-insensitive (opcional)
 * - Formatação automática de valores
 */
let IsEnumValueConstraint = class IsEnumValueConstraint {
    validate(value, args) {
        const [enumObject, options] = args.constraints;
        const { caseSensitive = true } = options || {};
        if (value === null || value === undefined) {
            return false;
        }
        const enumValues = Object.values(enumObject);
        if (caseSensitive) {
            return enumValues.includes(value);
        }
        // Comparação case-insensitive
        const valueStr = String(value).toLowerCase();
        return enumValues.some((enumValue) => String(enumValue).toLowerCase() === valueStr);
    }
    defaultMessage(args) {
        const [enumObject, options] = args.constraints;
        const { enumName, caseSensitive = true } = options || {};
        const enumValues = Object.values(enumObject);
        const property = args.property;
        const value = args.value;
        // Encontrar valores similares para sugestões
        const suggestions = this.findSimilarValues(value, enumValues);
        let message = `O campo '${property}' deve ser um dos valores válidos`;
        if (enumName) {
            message += ` para ${enumName}`;
        }
        message += `: ${enumValues.join(', ')}`;
        if (suggestions.length > 0) {
            message += `. Você quis dizer: ${suggestions.join(', ')}?`;
        }
        if (!caseSensitive) {
            message += ' (não diferencia maiúsculas/minúsculas)';
        }
        return message;
    }
    /**
     * Encontra valores similares usando distância de Levenshtein simplificada
     */
    findSimilarValues(input, enumValues) {
        if (!input || typeof input !== 'string') {
            return [];
        }
        const inputStr = input.toLowerCase();
        const suggestions = [];
        for (const enumValue of enumValues) {
            const enumStr = String(enumValue).toLowerCase();
            const distance = this.levenshteinDistance(inputStr, enumStr);
            // Considerar como sugestão se a distância for pequena
            if (distance <= Math.max(2, Math.floor(enumStr.length * 0.3))) {
                suggestions.push({ value: String(enumValue), distance });
            }
        }
        // Ordenar por distância e retornar os 3 melhores
        return suggestions
            .sort((a, b) => a.distance - b.distance)
            .slice(0, 3)
            .map((s) => s.value);
    }
    /**
     * Calcula a distância de Levenshtein entre duas strings
     */
    levenshteinDistance(str1, str2) {
        const matrix = Array(str2.length + 1)
            .fill(null)
            .map(() => Array(str1.length + 1).fill(null));
        for (let i = 0; i <= str1.length; i++) {
            matrix[0][i] = i;
        }
        for (let j = 0; j <= str2.length; j++) {
            matrix[j][0] = j;
        }
        for (let j = 1; j <= str2.length; j++) {
            for (let i = 1; i <= str1.length; i++) {
                const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;
                matrix[j][i] = Math.min(matrix[j][i - 1] + 1, // deletion
                matrix[j - 1][i] + 1, // insertion
                matrix[j - 1][i - 1] + indicator);
            }
        }
        return matrix[str2.length][str1.length];
    }
};
exports.IsEnumValueConstraint = IsEnumValueConstraint;
exports.IsEnumValueConstraint = IsEnumValueConstraint = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'isEnumValue', async: false })
], IsEnumValueConstraint);
/**
 * Decorator para validação de enum com mensagens aprimoradas
 *
 * @param enumObject - O objeto enum a ser validado
 * @param options - Opções de validação
 * @param validationOptions - Opções padrão do class-validator
 *
 * @example
 * ```typescript
 * enum StatusEnum {
 *   ATIVO = 'ATIVO',
 *   INATIVO = 'INATIVO',
 *   PENDENTE = 'PENDENTE'
 * }
 *
 * class CreateUserDto {
 *   @IsEnumValue(StatusEnum, {
 *     enumName: 'Status do Usuário',
 *     caseSensitive: false
 *   })
 *   status: StatusEnum;
 * }
 * ```
 */
function IsEnumValue(enumObject, options, validationOptions) {
    return function (object, propertyName) {
        (0, class_validator_1.registerDecorator)({
            target: object.constructor,
            propertyName: propertyName,
            options: validationOptions,
            constraints: [enumObject, options],
            validator: IsEnumValueConstraint,
        });
    };
}
/**
 * Utilitário para criar mensagens de erro padronizadas para enums
 */
class EnumValidationHelper {
    /**
     * Cria uma mensagem de erro padronizada para enum
     */
    static createEnumMessage(enumObject, enumName, fieldName) {
        const values = Object.values(enumObject).join(', ');
        const field = fieldName || 'campo';
        const name = enumName || 'enum';
        return `O ${field} deve ser um dos valores válidos para ${name}: ${values}`;
    }
    /**
     * Verifica se um valor é válido para o enum
     */
    static isValidEnumValue(value, enumObject) {
        return Object.values(enumObject).includes(value);
    }
    /**
     * Normaliza um valor para o enum (útil para case-insensitive)
     */
    static normalizeEnumValue(value, enumObject, caseSensitive = true) {
        if (!value)
            return value;
        const enumValues = Object.values(enumObject);
        if (caseSensitive) {
            return enumValues.find((enumValue) => enumValue === value);
        }
        const valueStr = String(value).toLowerCase();
        return enumValues.find((enumValue) => String(enumValue).toLowerCase() === valueStr);
    }
    /**
     * Obtém todos os valores válidos de um enum
     */
    static getEnumValues(enumObject) {
        return Object.values(enumObject);
    }
    /**
     * Obtém todas as chaves de um enum
     */
    static getEnumKeys(enumObject) {
        return Object.keys(enumObject);
    }
}
exports.EnumValidationHelper = EnumValidationHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,