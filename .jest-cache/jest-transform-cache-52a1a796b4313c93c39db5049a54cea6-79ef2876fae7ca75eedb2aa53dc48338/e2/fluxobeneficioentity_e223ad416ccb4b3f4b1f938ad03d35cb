4217735fc6a2594c532ffb6c70f6f0ad
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluxoBeneficio = exports.TipoEtapa = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const tipo_beneficio_entity_1 = require("./tipo-beneficio.entity");
const role_enum_1 = require("../enums/role.enum");
var TipoEtapa;
(function (TipoEtapa) {
    TipoEtapa["ABERTURA"] = "abertura";
    TipoEtapa["ANALISE_DOCUMENTOS"] = "analise_documentos";
    TipoEtapa["ANALISE_TECNICA"] = "analise_tecnica";
    TipoEtapa["APROVACAO"] = "aprovacao";
    TipoEtapa["LIBERACAO"] = "liberacao";
})(TipoEtapa || (exports.TipoEtapa = TipoEtapa = {}));
let FluxoBeneficio = class FluxoBeneficio {
    id;
    tipo_beneficio_id;
    tipo_beneficio;
    nome_etapa;
    tipo_etapa;
    ordem;
    perfil_responsavel;
    setor_id;
    descricao;
    obrigatorio;
    permite_retorno;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se o fluxo foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se foi removido
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se está ativo
     */
    isAtivo() {
        return !this.removed_at;
    }
    /**
     * Verifica se é obrigatório
     */
    isObrigatorio() {
        return this.obrigatorio;
    }
    /**
     * Verifica se permite retorno
     */
    permiteRetorno() {
        return this.permite_retorno;
    }
    /**
     * Verifica se tem setor definido
     */
    temSetor() {
        return (this.setor_id !== null &&
            this.setor_id !== undefined &&
            this.setor_id.trim() !== '');
    }
    /**
     * Verifica se tem descrição
     */
    temDescricao() {
        return (this.descricao !== null &&
            this.descricao !== undefined &&
            this.descricao.trim() !== '');
    }
    /**
     * Obtém a descrição do tipo de etapa
     */
    getDescricaoTipoEtapa() {
        const descricoes = {
            [TipoEtapa.ABERTURA]: 'Abertura da Solicitação',
            [TipoEtapa.ANALISE_DOCUMENTOS]: 'Análise de Documentos',
            [TipoEtapa.ANALISE_TECNICA]: 'Análise Técnica',
            [TipoEtapa.APROVACAO]: 'Aprovação',
            [TipoEtapa.LIBERACAO]: 'Liberação do Benefício',
        };
        return descricoes[this.tipo_etapa] || 'Tipo de etapa desconhecido';
    }
    /**
     * Obtém a descrição do perfil responsável
     */
    getDescricaoPerfilResponsavel() {
        const descricoes = {
            [role_enum_1.Role.ADMIN]: 'Administrador',
            [role_enum_1.Role.GESTOR]: 'Gestor',
            [role_enum_1.Role.TECNICO]: 'Técnico',
            [role_enum_1.Role.COORDENADOR]: 'Coordenador',
            [role_enum_1.Role.ASSISTENTE_SOCIAL]: 'Assistente Social',
            [role_enum_1.Role.AUDITOR]: 'Auditor',
        };
        return (descricoes[this.perfil_responsavel] ||
            'Perfil desconhecido');
    }
    /**
     * Verifica se é a primeira etapa do fluxo
     */
    isPrimeiraEtapa() {
        return this.ordem === 1;
    }
    /**
     * Verifica se é uma etapa de análise
     */
    isEtapaAnalise() {
        return (this.tipo_etapa === TipoEtapa.ANALISE_DOCUMENTOS ||
            this.tipo_etapa === TipoEtapa.ANALISE_TECNICA);
    }
    /**
     * Verifica se é uma etapa de decisão
     */
    isEtapaDecisao() {
        return this.tipo_etapa === TipoEtapa.APROVACAO;
    }
    /**
     * Verifica se é a etapa final
     */
    isEtapaFinal() {
        return this.tipo_etapa === TipoEtapa.LIBERACAO;
    }
    /**
     * Verifica se é uma etapa crítica (obrigatória e não permite retorno)
     */
    isEtapaCritica() {
        return this.isObrigatorio() && !this.permiteRetorno();
    }
    /**
     * Obtém o nível de criticidade da etapa
     */
    getNivelCriticidade() {
        let pontos = 0;
        if (this.isObrigatorio())
            pontos += 2;
        if (!this.permiteRetorno())
            pontos += 2;
        if (this.isEtapaDecisao() || this.isEtapaFinal())
            pontos += 1;
        if (pontos <= 2)
            return 'BAIXA';
        if (pontos <= 4)
            return 'MEDIA';
        return 'ALTA';
    }
    /**
     * Verifica se pertence a um tipo de benefício
     */
    pertenceAoTipoBeneficio(tipoBeneficioId) {
        return this.tipo_beneficio_id === tipoBeneficioId;
    }
    /**
     * Obtém um resumo da etapa
     */
    getSummary() {
        const obrigatorio = this.isObrigatorio() ? 'Obrigatória' : 'Opcional';
        const retorno = this.permiteRetorno()
            ? 'Permite retorno'
            : 'Não permite retorno';
        return `${this.ordem}. ${this.nome_etapa} (${obrigatorio}, ${retorno})`;
    }
    /**
     * Gera uma chave única para a etapa
     */
    getUniqueKey() {
        return `fluxo_${this.tipo_beneficio_id}_${this.ordem}`;
    }
    /**
     * Verifica se a etapa é consistente
     */
    isConsistente() {
        // Verifica se tem tipo de benefício
        if (!this.tipo_beneficio_id)
            return false;
        // Verifica se tem nome da etapa
        if (!this.nome_etapa || this.nome_etapa.trim() === '')
            return false;
        // Verifica se ordem é válida
        if (this.ordem < 1)
            return false;
        // Verifica se tipo de etapa é válido
        if (!Object.values(TipoEtapa).includes(this.tipo_etapa))
            return false;
        // Verifica se perfil responsável é válido
        if (!Object.values(role_enum_1.Role).includes(this.perfil_responsavel))
            return false;
        return true;
    }
    /**
     * Verifica se pode ser removida
     */
    podeSerRemovida() {
        // Não pode remover se já foi removida
        if (this.foiRemovido())
            return false;
        // Primeira etapa geralmente não pode ser removida
        if (this.isPrimeiraEtapa())
            return false;
        // Etapas obrigatórias precisam de cuidado especial
        if (this.isObrigatorio())
            return false;
        return true;
    }
    /**
     * Clona a etapa (sem ID)
     */
    clone() {
        return {
            tipo_beneficio_id: this.tipo_beneficio_id,
            nome_etapa: this.nome_etapa,
            tipo_etapa: this.tipo_etapa,
            ordem: this.ordem,
            perfil_responsavel: this.perfil_responsavel,
            setor_id: this.setor_id,
            descricao: this.descricao,
            obrigatorio: this.obrigatorio,
            permite_retorno: this.permite_retorno,
        };
    }
    /**
     * Verifica se é uma etapa flexível
     */
    isFlexivel() {
        return !this.isObrigatorio() && this.permiteRetorno();
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            tipo_beneficio_id: this.tipo_beneficio_id,
            nome_etapa: this.nome_etapa,
            tipo_etapa: this.tipo_etapa,
            ordem: this.ordem,
            perfil_responsavel: this.perfil_responsavel,
            obrigatorio: this.obrigatorio,
            permite_retorno: this.permite_retorno,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para a etapa
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.temDescricao()) {
            sugestoes.push('Adicionar descrição detalhada da etapa');
        }
        if (!this.temSetor()) {
            sugestoes.push('Definir setor responsável pela etapa');
        }
        if (this.isEtapaCritica() && !this.temDescricao()) {
            sugestoes.push('Etapa crítica deve ter descrição detalhada');
        }
        if (this.isEtapaAnalise() && this.permiteRetorno()) {
            sugestoes.push('Considerar não permitir retorno em etapas de análise');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências nos dados');
        }
        return sugestoes;
    }
    /**
     * Verifica se precisa de atualização (dados muito antigos)
     */
    precisaAtualizacao() {
        // Fluxos com mais de 6 meses podem precisar de revisão
        const seisMesesAtras = new Date();
        seisMesesAtras.setMonth(seisMesesAtras.getMonth() - 6);
        return this.updated_at < seisMesesAtras;
    }
    /**
     * Obtém estatísticas da etapa
     */
    getEstatisticas() {
        return {
            ordem: this.ordem,
            tipoEtapa: this.getDescricaoTipoEtapa(),
            perfilResponsavel: this.getDescricaoPerfilResponsavel(),
            obrigatorio: this.isObrigatorio(),
            permiteRetorno: this.permiteRetorno(),
            nivelCriticidade: this.getNivelCriticidade(),
            temSetor: this.temSetor(),
            temDescricao: this.temDescricao(),
        };
    }
    /**
     * Simula a execução da etapa
     */
    simularExecucao(dados) {
        const motivos = [];
        const observacoes = [];
        // Verifica se o perfil do usuário pode executar a etapa
        if (dados.perfilUsuario !== this.perfil_responsavel) {
            motivos.push(`Perfil ${dados.perfilUsuario} não autorizado. Requer: ${this.perfil_responsavel}`);
        }
        // Verifica se o setor do usuário corresponde (se definido)
        if (this.temSetor() && dados.setorUsuario !== this.setor_id) {
            motivos.push('Usuário não pertence ao setor responsável pela etapa');
        }
        // Observações sobre a etapa
        if (this.isObrigatorio()) {
            observacoes.push('Esta é uma etapa obrigatória');
        }
        if (!this.permiteRetorno()) {
            observacoes.push('Atenção: Esta etapa não permite retorno');
        }
        if (this.isEtapaFinal()) {
            observacoes.push('Esta é a etapa final do processo');
        }
        return {
            podeExecutar: motivos.length === 0,
            motivos,
            observacoes,
        };
    }
};
exports.FluxoBeneficio = FluxoBeneficio;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], FluxoBeneficio.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de benefício é obrigatório' }),
    __metadata("design:type", String)
], FluxoBeneficio.prototype, "tipo_beneficio_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => tipo_beneficio_entity_1.TipoBeneficio, (tipoBeneficio) => tipoBeneficio.id, {
        onDelete: 'CASCADE',
    }),
    (0, typeorm_1.JoinColumn)({ name: 'tipo_beneficio_id' }),
    __metadata("design:type", typeof (_a = typeof tipo_beneficio_entity_1.TipoBeneficio !== "undefined" && tipo_beneficio_entity_1.TipoBeneficio) === "function" ? _a : Object)
], FluxoBeneficio.prototype, "tipo_beneficio", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome da etapa é obrigatório' }),
    __metadata("design:type", String)
], FluxoBeneficio.prototype, "nome_etapa", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: TipoEtapa,
        enumName: 'tipo_etapa',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de etapa é obrigatório' }),
    (0, class_validator_1.IsEnum)(TipoEtapa, { message: 'Tipo de etapa inválido' }),
    __metadata("design:type", String)
], FluxoBeneficio.prototype, "tipo_etapa", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Ordem deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Ordem deve ser maior que zero' }),
    __metadata("design:type", Number)
], FluxoBeneficio.prototype, "ordem", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: role_enum_1.Role,
        enumName: 'perfil_responsavel',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Perfil responsável é obrigatório' }),
    (0, class_validator_1.IsEnum)(role_enum_1.Role, { message: 'Perfil responsável inválido' }),
    __metadata("design:type", typeof (_b = typeof role_enum_1.Role !== "undefined" && role_enum_1.Role) === "function" ? _b : Object)
], FluxoBeneficio.prototype, "perfil_responsavel", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], FluxoBeneficio.prototype, "setor_id", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], FluxoBeneficio.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    __metadata("design:type", Boolean)
], FluxoBeneficio.prototype, "obrigatorio", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: false }),
    __metadata("design:type", Boolean)
], FluxoBeneficio.prototype, "permite_retorno", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], FluxoBeneficio.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], FluxoBeneficio.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], FluxoBeneficio.prototype, "removed_at", void 0);
exports.FluxoBeneficio = FluxoBeneficio = __decorate([
    (0, typeorm_1.Entity)('fluxo_beneficio'),
    (0, typeorm_1.Index)(['tipo_beneficio_id', 'ordem'], { unique: true })
], FluxoBeneficio);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,