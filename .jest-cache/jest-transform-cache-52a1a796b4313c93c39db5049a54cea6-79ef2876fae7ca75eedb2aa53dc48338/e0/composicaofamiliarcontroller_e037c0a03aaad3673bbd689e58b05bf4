e385c9f6ae7261a601e49b860b72bf36
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ComposicaoFamiliarController_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComposicaoFamiliarController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const api_error_response_dto_1 = require("../../../shared/dtos/api-error-response.dto");
const create_composicao_familiar_dto_1 = require("../dto/create-composicao-familiar.dto");
const update_composicao_familiar_dto_1 = require("../dto/update-composicao-familiar.dto");
const composicao_familiar_response_dto_1 = require("../dto/composicao-familiar-response.dto");
const composicao_familiar_service_1 = require("../services/composicao-familiar.service");
const cidadao_audit_interceptor_1 = require("../interceptors/cidadao-audit.interceptor");
const common_2 = require("@nestjs/common");
/**
 * Controlador de Composição Familiar
 *
 * Responsável por gerenciar as rotas relacionadas aos membros da composição familiar dos cidadãos
 */
let ComposicaoFamiliarController = ComposicaoFamiliarController_1 = class ComposicaoFamiliarController {
    composicaoFamiliarService;
    logger = new common_1.Logger(ComposicaoFamiliarController_1.name);
    constructor(composicaoFamiliarService) {
        this.composicaoFamiliarService = composicaoFamiliarService;
    }
    /**
     * Cria um novo membro da composição familiar
     */
    async create(createComposicaoFamiliarDto, req) {
        const startTime = Date.now();
        const requestId = `CF-CREATE-${Date.now()}`;
        this.logger.log(`[${requestId}] Início da criação de membro da composição familiar`);
        try {
            const result = await this.composicaoFamiliarService.create(createComposicaoFamiliarDto, req?.user?.id);
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`[${requestId}] Operação lenta (create): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Lista membros da composição familiar por cidadão
     */
    async findByCidadao(cidadaoId, page, limit) {
        const startTime = Date.now();
        const requestId = `CF-LIST-${cidadaoId.substring(0, 8)}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início da listagem de composição familiar`);
        try {
            const result = await this.composicaoFamiliarService.findByCidadao(cidadaoId, { page, limit });
            const totalTime = Date.now() - startTime;
            if (totalTime > 300) {
                this.logger.warn(`[${requestId}] Operação lenta (findByCidadao): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Busca um membro específico da composição familiar
     */
    async findOne(id) {
        const startTime = Date.now();
        const requestId = `CF-GET-${id.substring(0, 8)}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início da busca de membro da composição familiar`);
        try {
            const result = await this.composicaoFamiliarService.findOne(id);
            const totalTime = Date.now() - startTime;
            if (totalTime > 200) {
                this.logger.warn(`[${requestId}] Operação lenta (findOne): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Atualiza um membro da composição familiar
     */
    async update(id, updateComposicaoFamiliarDto, req) {
        const startTime = Date.now();
        const requestId = `CF-UPDATE-${id.substring(0, 8)}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início da atualização de membro da composição familiar`);
        try {
            const result = await this.composicaoFamiliarService.update(id, updateComposicaoFamiliarDto, req?.user?.id);
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`[${requestId}] Operação lenta (update): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Remove um membro da composição familiar
     */
    async remove(id, req) {
        const startTime = Date.now();
        const requestId = `CF-DELETE-${id.substring(0, 8)}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início da remoção de membro da composição familiar`);
        try {
            await this.composicaoFamiliarService.remove(id, req?.user?.id);
            const totalTime = Date.now() - startTime;
            if (totalTime > 300) {
                this.logger.warn(`[${requestId}] Operação lenta (remove): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return { message: 'Membro da composição familiar removido com sucesso' };
        }
        catch (error) {
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Busca membros da composição familiar por CPF
     */
    async findByCpf(cpf) {
        const startTime = Date.now();
        const requestId = `CF-CPF-${cpf.substring(0, 4)}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início da busca por CPF`);
        try {
            const result = await this.composicaoFamiliarService.findByCpf(cpf);
            const totalTime = Date.now() - startTime;
            if (totalTime > 200) {
                this.logger.warn(`[${requestId}] Operação lenta (findByCpf): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
};
exports.ComposicaoFamiliarController = ComposicaoFamiliarController;
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.editar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Criar membro da composição familiar',
        description: 'Adiciona um novo membro à composição familiar de um cidadão.',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Membro da composição familiar criado com sucesso',
        type: composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto,
    }),
    (0, swagger_1.ApiBadRequestResponse)({
        description: 'Dados inválidos fornecidos',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiConflictResponse)({
        description: 'CPF já cadastrado na composição familiar',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiNotFoundResponse)({
        description: 'Cidadão não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_composicao_familiar_dto_1.CreateComposicaoFamiliarDto !== "undefined" && create_composicao_familiar_dto_1.CreateComposicaoFamiliarDto) === "function" ? _b : Object, Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], ComposicaoFamiliarController.prototype, "create", null);
__decorate([
    (0, common_1.Get)('cidadao/:cidadaoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Listar membros da composição familiar',
        description: 'Retorna uma lista paginada dos membros da composição familiar de um cidadão.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'cidadaoId',
        description: 'ID do cidadão',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        type: Number,
        description: 'Número da página (padrão: 1)',
        example: 1,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        description: 'Itens por página (padrão: 10, máximo: 100)',
        example: 10,
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Lista de membros da composição familiar retornada com sucesso',
        type: composicao_familiar_response_dto_1.ComposicaoFamiliarPaginatedResponseDto,
    }),
    (0, swagger_1.ApiNotFoundResponse)({
        description: 'Cidadão não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('cidadaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),
    __param(2, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(10), common_1.ParseIntPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number, Number]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], ComposicaoFamiliarController.prototype, "findByCidadao", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'composicaoFamiliar.cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar membro da composição familiar',
        description: 'Retorna os dados de um membro específico da composição familiar.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do membro da composição familiar',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Membro da composição familiar encontrado',
        type: composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto,
    }),
    (0, swagger_1.ApiNotFoundResponse)({
        description: 'Membro da composição familiar não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], ComposicaoFamiliarController.prototype, "findOne", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.editar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'composicaoFamiliar.cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualizar membro da composição familiar',
        description: 'Atualiza os dados de um membro da composição familiar.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do membro da composição familiar',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Membro da composição familiar atualizado com sucesso',
        type: composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto,
    }),
    (0, swagger_1.ApiBadRequestResponse)({
        description: 'Dados inválidos fornecidos',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiConflictResponse)({
        description: 'CPF já cadastrado na composição familiar',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiNotFoundResponse)({
        description: 'Membro da composição familiar não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof update_composicao_familiar_dto_1.UpdateComposicaoFamiliarDto !== "undefined" && update_composicao_familiar_dto_1.UpdateComposicaoFamiliarDto) === "function" ? _f : Object, Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], ComposicaoFamiliarController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.editar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'composicaoFamiliar.cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Remover membro da composição familiar',
        description: 'Remove um membro da composição familiar (soft delete).',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do membro da composição familiar',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Membro da composição familiar removido com sucesso',
    }),
    (0, swagger_1.ApiNotFoundResponse)({
        description: 'Membro da composição familiar não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], ComposicaoFamiliarController.prototype, "remove", null);
__decorate([
    (0, common_1.Get)('buscar/cpf/:cpf'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'user.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar membro por CPF',
        description: 'Busca membros da composição familiar pelo CPF.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'cpf',
        description: 'CPF do membro (apenas números)',
        type: 'string',
        example: '12345678901',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Membros encontrados',
        type: [composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto],
    }),
    __param(0, (0, common_1.Param)('cpf')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], ComposicaoFamiliarController.prototype, "findByCpf", null);
exports.ComposicaoFamiliarController = ComposicaoFamiliarController = ComposicaoFamiliarController_1 = __decorate([
    (0, swagger_1.ApiTags)('Cidadão'),
    (0, swagger_1.ApiExtraModels)(composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto, composicao_familiar_response_dto_1.ComposicaoFamiliarPaginatedResponseDto),
    (0, common_1.Controller)('composicao-familiar'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_2.UseInterceptors)(cidadao_audit_interceptor_1.CidadaoAuditInterceptor),
    __metadata("design:paramtypes", [typeof (_a = typeof composicao_familiar_service_1.ComposicaoFamiliarService !== "undefined" && composicao_familiar_service_1.ComposicaoFamiliarService) === "function" ? _a : Object])
], ComposicaoFamiliarController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,