b53f28faa1bf6f398696a29e8241ff52
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TipoBeneficioRepository = void 0;
const typeorm_1 = require("typeorm");
const tipo_beneficio_entity_1 = require("../../../entities/tipo-beneficio.entity");
const common_1 = require("@nestjs/common");
/**
 * Repositório customizado para TipoBeneficio
 * Fornece métodos otimizados para consultas específicas
 */
let TipoBeneficioRepository = class TipoBeneficioRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(tipo_beneficio_entity_1.TipoBeneficio, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca tipos de benefício por critérios em campos JSON
     *
     * @param criteria Critérios de busca em formato de objeto
     * @returns Lista de tipos de benefício que atendem aos critérios
     */
    async findByJsonCriteria(criteria) {
        const queryBuilder = this.createQueryBuilder('tipo_beneficio');
        Object.keys(criteria).forEach((key) => {
            const value = criteria[key];
            // Construir condição para busca em campo JSON
            queryBuilder.andWhere(`tipo_beneficio.criterios_elegibilidade->>'${key}' = :${key}`, { [key]: value });
        });
        return queryBuilder.getMany();
    }
    /**
     * Busca tipos de benefício por critérios de idade e renda
     *
     * @param idade Idade do cidadão
     * @param renda Renda per capita do cidadão
     * @returns Lista de tipos de benefício elegíveis para os critérios informados
     */
    async findByCriteriosElegibilidade(idade, renda) {
        return this.createQueryBuilder('tipo_beneficio')
            .where('tipo_beneficio.ativo = :ativo', { ativo: true })
            .andWhere(`
        (
          (tipo_beneficio.criterios_elegibilidade->>'idade_minima')::int IS NULL OR
          (tipo_beneficio.criterios_elegibilidade->>'idade_minima')::int <= :idade
        )
      `, { idade })
            .andWhere(`
        (
          (tipo_beneficio.criterios_elegibilidade->>'idade_maxima')::int IS NULL OR
          (tipo_beneficio.criterios_elegibilidade->>'idade_maxima')::int >= :idade
        )
      `, { idade })
            .andWhere(`
        (
          (tipo_beneficio.criterios_elegibilidade->>'renda_maxima')::float IS NULL OR
          (tipo_beneficio.criterios_elegibilidade->>'renda_maxima')::float >= :renda
        )
      `, { renda })
            .getMany();
    }
    /**
     * Busca tipos de benefício por texto em campos JSON
     *
     * Utiliza índice GIN para busca eficiente
     *
     * @param termo Termo de busca
     * @returns Lista de tipos de benefício que contêm o termo
     */
    async findByJsonText(termo) {
        // Usar operador @> para busca em campos JSONB
        return this.createQueryBuilder('tipo_beneficio')
            .where(`tipo_beneficio.criterios_elegibilidade::text ILIKE :termo`, {
            termo: `%${termo}%`,
        })
            .getMany();
    }
};
exports.TipoBeneficioRepository = TipoBeneficioRepository;
exports.TipoBeneficioRepository = TipoBeneficioRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], TipoBeneficioRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGJlbmVmaWNpb1xccmVwb3NpdG9yaWVzXFx0aXBvLWJlbmVmaWNpby5yZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBaUQ7QUFDakQsbUZBQXdFO0FBQ3hFLDJDQUE0QztBQUc1Qzs7O0dBR0c7QUFFSSxJQUFNLHVCQUF1QixHQUE3QixNQUFNLHVCQUF3QixTQUFRLG9CQUF5QjtJQUNoRDtJQUFwQixZQUFvQixVQUFzQjtRQUN4QyxLQUFLLENBQUMscUNBQWEsRUFBRSxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBRHJDLGVBQVUsR0FBVixVQUFVLENBQVk7SUFFMUMsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLGtCQUFrQixDQUFDLFFBRXhCO1FBQ0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFL0QsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNwQyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFNUIsOENBQThDO1lBQzlDLFlBQVksQ0FBQyxRQUFRLENBQ25CLDZDQUE2QyxHQUFHLFFBQVEsR0FBRyxFQUFFLEVBQzdELEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FDakIsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyw0QkFBNEIsQ0FDaEMsS0FBYSxFQUNiLEtBQWE7UUFFYixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQzthQUM3QyxLQUFLLENBQUMsK0JBQStCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDdkQsUUFBUSxDQUNQOzs7OztPQUtELEVBQ0MsRUFBRSxLQUFLLEVBQUUsQ0FDVjthQUNBLFFBQVEsQ0FDUDs7Ozs7T0FLRCxFQUNDLEVBQUUsS0FBSyxFQUFFLENBQ1Y7YUFDQSxRQUFRLENBQ1A7Ozs7O09BS0QsRUFDQyxFQUFFLEtBQUssRUFBRSxDQUNWO2FBQ0EsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBYTtRQUNoQyw4Q0FBOEM7UUFDOUMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7YUFDN0MsS0FBSyxDQUFDLDJEQUEyRCxFQUFFO1lBQ2xFLEtBQUssRUFBRSxJQUFJLEtBQUssR0FBRztTQUNwQixDQUFDO2FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQTtBQXZGWSwwREFBdUI7a0NBQXZCLHVCQUF1QjtJQURuQyxJQUFBLG1CQUFVLEdBQUU7eURBRXFCLG9CQUFVLG9CQUFWLG9CQUFVO0dBRC9CLHVCQUF1QixDQXVGbkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGJlbmVmaWNpb1xccmVwb3NpdG9yaWVzXFx0aXBvLWJlbmVmaWNpby5yZXBvc2l0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcG9zaXRvcnksIERhdGFTb3VyY2UgfSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCB7IFRpcG9CZW5lZmljaW8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdGllcy90aXBvLWJlbmVmaWNpby5lbnRpdHknO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IEZpbmRNYW55T3B0aW9ucywgRmluZE9uZU9wdGlvbnMgfSBmcm9tICd0eXBlb3JtJztcblxuLyoqXG4gKiBSZXBvc2l0w7NyaW8gY3VzdG9taXphZG8gcGFyYSBUaXBvQmVuZWZpY2lvXG4gKiBGb3JuZWNlIG3DqXRvZG9zIG90aW1pemFkb3MgcGFyYSBjb25zdWx0YXMgZXNwZWPDrWZpY2FzXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaXBvQmVuZWZpY2lvUmVwb3NpdG9yeSBleHRlbmRzIFJlcG9zaXRvcnk8VGlwb0JlbmVmaWNpbz4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTb3VyY2U6IERhdGFTb3VyY2UpIHtcbiAgICBzdXBlcihUaXBvQmVuZWZpY2lvLCBkYXRhU291cmNlLmNyZWF0ZUVudGl0eU1hbmFnZXIoKSk7XG4gIH1cbiAgLyoqXG4gICAqIEJ1c2NhIHRpcG9zIGRlIGJlbmVmw61jaW8gcG9yIGNyaXTDqXJpb3MgZW0gY2FtcG9zIEpTT05cbiAgICpcbiAgICogQHBhcmFtIGNyaXRlcmlhIENyaXTDqXJpb3MgZGUgYnVzY2EgZW0gZm9ybWF0byBkZSBvYmpldG9cbiAgICogQHJldHVybnMgTGlzdGEgZGUgdGlwb3MgZGUgYmVuZWbDrWNpbyBxdWUgYXRlbmRlbSBhb3MgY3JpdMOpcmlvc1xuICAgKi9cbiAgYXN5bmMgZmluZEJ5SnNvbkNyaXRlcmlhKGNyaXRlcmlhOiB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xuICB9KTogUHJvbWlzZTxUaXBvQmVuZWZpY2lvW10+IHtcbiAgICBjb25zdCBxdWVyeUJ1aWxkZXIgPSB0aGlzLmNyZWF0ZVF1ZXJ5QnVpbGRlcigndGlwb19iZW5lZmljaW8nKTtcblxuICAgIE9iamVjdC5rZXlzKGNyaXRlcmlhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3JpdGVyaWFba2V5XTtcblxuICAgICAgLy8gQ29uc3RydWlyIGNvbmRpw6fDo28gcGFyYSBidXNjYSBlbSBjYW1wbyBKU09OXG4gICAgICBxdWVyeUJ1aWxkZXIuYW5kV2hlcmUoXG4gICAgICAgIGB0aXBvX2JlbmVmaWNpby5jcml0ZXJpb3NfZWxlZ2liaWxpZGFkZS0+Picke2tleX0nID0gOiR7a2V5fWAsXG4gICAgICAgIHsgW2tleV06IHZhbHVlIH0sXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHF1ZXJ5QnVpbGRlci5nZXRNYW55KCk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgdGlwb3MgZGUgYmVuZWbDrWNpbyBwb3IgY3JpdMOpcmlvcyBkZSBpZGFkZSBlIHJlbmRhXG4gICAqXG4gICAqIEBwYXJhbSBpZGFkZSBJZGFkZSBkbyBjaWRhZMOjb1xuICAgKiBAcGFyYW0gcmVuZGEgUmVuZGEgcGVyIGNhcGl0YSBkbyBjaWRhZMOjb1xuICAgKiBAcmV0dXJucyBMaXN0YSBkZSB0aXBvcyBkZSBiZW5lZsOtY2lvIGVsZWfDrXZlaXMgcGFyYSBvcyBjcml0w6lyaW9zIGluZm9ybWFkb3NcbiAgICovXG4gIGFzeW5jIGZpbmRCeUNyaXRlcmlvc0VsZWdpYmlsaWRhZGUoXG4gICAgaWRhZGU6IG51bWJlcixcbiAgICByZW5kYTogbnVtYmVyLFxuICApOiBQcm9taXNlPFRpcG9CZW5lZmljaW9bXT4ge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVF1ZXJ5QnVpbGRlcigndGlwb19iZW5lZmljaW8nKVxuICAgICAgLndoZXJlKCd0aXBvX2JlbmVmaWNpby5hdGl2byA9IDphdGl2bycsIHsgYXRpdm86IHRydWUgfSlcbiAgICAgIC5hbmRXaGVyZShcbiAgICAgICAgYFxuICAgICAgICAoXG4gICAgICAgICAgKHRpcG9fYmVuZWZpY2lvLmNyaXRlcmlvc19lbGVnaWJpbGlkYWRlLT4+J2lkYWRlX21pbmltYScpOjppbnQgSVMgTlVMTCBPUlxuICAgICAgICAgICh0aXBvX2JlbmVmaWNpby5jcml0ZXJpb3NfZWxlZ2liaWxpZGFkZS0+PidpZGFkZV9taW5pbWEnKTo6aW50IDw9IDppZGFkZVxuICAgICAgICApXG4gICAgICBgLFxuICAgICAgICB7IGlkYWRlIH0sXG4gICAgICApXG4gICAgICAuYW5kV2hlcmUoXG4gICAgICAgIGBcbiAgICAgICAgKFxuICAgICAgICAgICh0aXBvX2JlbmVmaWNpby5jcml0ZXJpb3NfZWxlZ2liaWxpZGFkZS0+PidpZGFkZV9tYXhpbWEnKTo6aW50IElTIE5VTEwgT1JcbiAgICAgICAgICAodGlwb19iZW5lZmljaW8uY3JpdGVyaW9zX2VsZWdpYmlsaWRhZGUtPj4naWRhZGVfbWF4aW1hJyk6OmludCA+PSA6aWRhZGVcbiAgICAgICAgKVxuICAgICAgYCxcbiAgICAgICAgeyBpZGFkZSB9LFxuICAgICAgKVxuICAgICAgLmFuZFdoZXJlKFxuICAgICAgICBgXG4gICAgICAgIChcbiAgICAgICAgICAodGlwb19iZW5lZmljaW8uY3JpdGVyaW9zX2VsZWdpYmlsaWRhZGUtPj4ncmVuZGFfbWF4aW1hJyk6OmZsb2F0IElTIE5VTEwgT1JcbiAgICAgICAgICAodGlwb19iZW5lZmljaW8uY3JpdGVyaW9zX2VsZWdpYmlsaWRhZGUtPj4ncmVuZGFfbWF4aW1hJyk6OmZsb2F0ID49IDpyZW5kYVxuICAgICAgICApXG4gICAgICBgLFxuICAgICAgICB7IHJlbmRhIH0sXG4gICAgICApXG4gICAgICAuZ2V0TWFueSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIHRpcG9zIGRlIGJlbmVmw61jaW8gcG9yIHRleHRvIGVtIGNhbXBvcyBKU09OXG4gICAqXG4gICAqIFV0aWxpemEgw61uZGljZSBHSU4gcGFyYSBidXNjYSBlZmljaWVudGVcbiAgICpcbiAgICogQHBhcmFtIHRlcm1vIFRlcm1vIGRlIGJ1c2NhXG4gICAqIEByZXR1cm5zIExpc3RhIGRlIHRpcG9zIGRlIGJlbmVmw61jaW8gcXVlIGNvbnTDqm0gbyB0ZXJtb1xuICAgKi9cbiAgYXN5bmMgZmluZEJ5SnNvblRleHQodGVybW86IHN0cmluZyk6IFByb21pc2U8VGlwb0JlbmVmaWNpb1tdPiB7XG4gICAgLy8gVXNhciBvcGVyYWRvciBAPiBwYXJhIGJ1c2NhIGVtIGNhbXBvcyBKU09OQlxuICAgIHJldHVybiB0aGlzLmNyZWF0ZVF1ZXJ5QnVpbGRlcigndGlwb19iZW5lZmljaW8nKVxuICAgICAgLndoZXJlKGB0aXBvX2JlbmVmaWNpby5jcml0ZXJpb3NfZWxlZ2liaWxpZGFkZTo6dGV4dCBJTElLRSA6dGVybW9gLCB7XG4gICAgICAgIHRlcm1vOiBgJSR7dGVybW99JWAsXG4gICAgICB9KVxuICAgICAgLmdldE1hbnkoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9