{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\tipo-beneficio.repository.ts","mappings":";;;;;;;;;;;;;AAAA,qCAAiD;AACjD,mFAAwE;AACxE,2CAA4C;AAG5C;;;GAGG;AAEI,IAAM,uBAAuB,GAA7B,MAAM,uBAAwB,SAAQ,oBAAyB;IAChD;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,qCAAa,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QADrC,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IACD;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB,CAAC,QAExB;QACC,MAAM,YAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QAE/D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACpC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAE5B,8CAA8C;YAC9C,YAAY,CAAC,QAAQ,CACnB,6CAA6C,GAAG,QAAQ,GAAG,EAAE,EAC7D,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CACjB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,4BAA4B,CAChC,KAAa,EACb,KAAa;QAEb,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;aAC7C,KAAK,CAAC,+BAA+B,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;aACvD,QAAQ,CACP;;;;;OAKD,EACC,EAAE,KAAK,EAAE,CACV;aACA,QAAQ,CACP;;;;;OAKD,EACC,EAAE,KAAK,EAAE,CACV;aACA,QAAQ,CACP;;;;;OAKD,EACC,EAAE,KAAK,EAAE,CACV;aACA,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,cAAc,CAAC,KAAa;QAChC,8CAA8C;QAC9C,OAAO,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC;aAC7C,KAAK,CAAC,2DAA2D,EAAE;YAClE,KAAK,EAAE,IAAI,KAAK,GAAG;SACpB,CAAC;aACD,OAAO,EAAE,CAAC;IACf,CAAC;CACF,CAAA;AAvFY,0DAAuB;kCAAvB,uBAAuB;IADnC,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,uBAAuB,CAuFnC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\tipo-beneficio.repository.ts"],"sourcesContent":["import { Repository, DataSource } from 'typeorm';\nimport { TipoBeneficio } from '../../../entities/tipo-beneficio.entity';\nimport { Injectable } from '@nestjs/common';\nimport { FindManyOptions, FindOneOptions } from 'typeorm';\n\n/**\n * Repositório customizado para TipoBeneficio\n * Fornece métodos otimizados para consultas específicas\n */\n@Injectable()\nexport class TipoBeneficioRepository extends Repository<TipoBeneficio> {\n  constructor(private dataSource: DataSource) {\n    super(TipoBeneficio, dataSource.createEntityManager());\n  }\n  /**\n   * Busca tipos de benefício por critérios em campos JSON\n   *\n   * @param criteria Critérios de busca em formato de objeto\n   * @returns Lista de tipos de benefício que atendem aos critérios\n   */\n  async findByJsonCriteria(criteria: {\n    [key: string]: any;\n  }): Promise<TipoBeneficio[]> {\n    const queryBuilder = this.createQueryBuilder('tipo_beneficio');\n\n    Object.keys(criteria).forEach((key) => {\n      const value = criteria[key];\n\n      // Construir condição para busca em campo JSON\n      queryBuilder.andWhere(\n        `tipo_beneficio.criterios_elegibilidade->>'${key}' = :${key}`,\n        { [key]: value },\n      );\n    });\n\n    return queryBuilder.getMany();\n  }\n\n  /**\n   * Busca tipos de benefício por critérios de idade e renda\n   *\n   * @param idade Idade do cidadão\n   * @param renda Renda per capita do cidadão\n   * @returns Lista de tipos de benefício elegíveis para os critérios informados\n   */\n  async findByCriteriosElegibilidade(\n    idade: number,\n    renda: number,\n  ): Promise<TipoBeneficio[]> {\n    return this.createQueryBuilder('tipo_beneficio')\n      .where('tipo_beneficio.ativo = :ativo', { ativo: true })\n      .andWhere(\n        `\n        (\n          (tipo_beneficio.criterios_elegibilidade->>'idade_minima')::int IS NULL OR\n          (tipo_beneficio.criterios_elegibilidade->>'idade_minima')::int <= :idade\n        )\n      `,\n        { idade },\n      )\n      .andWhere(\n        `\n        (\n          (tipo_beneficio.criterios_elegibilidade->>'idade_maxima')::int IS NULL OR\n          (tipo_beneficio.criterios_elegibilidade->>'idade_maxima')::int >= :idade\n        )\n      `,\n        { idade },\n      )\n      .andWhere(\n        `\n        (\n          (tipo_beneficio.criterios_elegibilidade->>'renda_maxima')::float IS NULL OR\n          (tipo_beneficio.criterios_elegibilidade->>'renda_maxima')::float >= :renda\n        )\n      `,\n        { renda },\n      )\n      .getMany();\n  }\n\n  /**\n   * Busca tipos de benefício por texto em campos JSON\n   *\n   * Utiliza índice GIN para busca eficiente\n   *\n   * @param termo Termo de busca\n   * @returns Lista de tipos de benefício que contêm o termo\n   */\n  async findByJsonText(termo: string): Promise<TipoBeneficio[]> {\n    // Usar operador @> para busca em campos JSONB\n    return this.createQueryBuilder('tipo_beneficio')\n      .where(`tipo_beneficio.criterios_elegibilidade::text ILIKE :termo`, {\n        termo: `%${termo}%`,\n      })\n      .getMany();\n  }\n}\n"],"version":3}