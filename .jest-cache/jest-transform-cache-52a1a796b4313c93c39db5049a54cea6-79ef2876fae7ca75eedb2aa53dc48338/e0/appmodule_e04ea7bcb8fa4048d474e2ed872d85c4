dcd34fea1a229c814d3e652afd4cc867
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppModule = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const typeorm_1 = require("@nestjs/typeorm");
const cache_manager_1 = require("@nestjs/cache-manager");
const throttler_1 = require("@nestjs/throttler");
const throttler_config_1 = require("./config/throttler.config");
const app_controller_1 = require("./app.controller");
const app_service_1 = require("./app.service");
const monitoring_module_1 = require("./shared/monitoring/monitoring.module");
const auth_module_1 = require("./auth/auth.module");
const permission_shared_module_1 = require("./shared/permission/permission-shared.module");
const auditoria_shared_module_1 = require("./shared/auditoria/auditoria-shared.module");
const usuario_module_1 = require("./modules/usuario/usuario.module");
const unidade_module_1 = require("./modules/unidade/unidade.module");
const cidadao_module_1 = require("./modules/cidadao/cidadao.module");
const beneficio_module_1 = require("./modules/beneficio/beneficio.module");
const documento_module_1 = require("./modules/documento/documento.module");
const metricas_module_1 = require("./modules/metricas/metricas.module");
const audit_module_1 = require("./audit/audit.module");
const recurso_module_1 = require("./modules/recurso/recurso.module");
const logs_module_1 = require("./modules/logs/logs.module");
const core_1 = require("@nestjs/core");
const error_catalog_1 = require("./shared/exceptions/error-catalog");
const unified_logger_module_1 = require("./shared/logging/unified-logger.module");
const resilience_module_1 = require("./shared/modules/resilience.module");
const email_module_1 = require("./shared/modules/email.module");
let AppModule = class AppModule {
    constructor() {
        console.log('✅ AppModule inicializado - com autenticação');
    }
}; //
exports.AppModule = AppModule;
exports.AppModule = AppModule = __decorate([
    (0, common_1.Module)({
        imports: [
            config_1.ConfigModule.forRoot({
                isGlobal: true,
                envFilePath: '.env',
            }),
            // Cache para relatórios e autenticação
            cache_manager_1.CacheModule.register({
                isGlobal: true,
                ttl: 3600, // tempo de vida do cache: 1 hora
                max: 100, // máximo de 100 itens no cache
            }),
            // Rate limiting - configuração robusta com múltiplos throttlers
            throttler_1.ThrottlerModule.forRootAsync({
                imports: [config_1.ConfigModule],
                inject: [config_1.ConfigService],
                useFactory: throttler_config_1.createThrottlerConfig,
            }),
            // Configuração do TypeORM
            typeorm_1.TypeOrmModule.forRootAsync({
                imports: [config_1.ConfigModule],
                inject: [config_1.ConfigService],
                useFactory: (configService) => ({
                    type: 'postgres',
                    host: configService.get('DB_HOST', 'localhost'),
                    port: parseInt(configService.get('DB_PORT', '5432')),
                    username: configService.get('DB_USER', 'postgres'),
                    password: configService.get('DB_PASS', 'postgres'),
                    database: configService.get('DB_NAME', 'pgben'),
                    entities: [__dirname + '/**/*.entity{.ts,.js}'],
                    synchronize: false,
                    logging: configService.get('NODE_ENV') === 'development',
                    maxQueryExecutionTime: 10000,
                    extra: {
                        max: parseInt(configService.get('DB_POOL_MAX', '20')),
                        min: parseInt(configService.get('DB_POOL_MIN', '5')),
                        idleTimeoutMillis: parseInt(configService.get('DB_POOL_IDLE', '30000')),
                        connectionTimeoutMillis: parseInt(configService.get('DB_POOL_CONN_TIMEOUT', '5000')),
                        allowExitOnIdle: false,
                    },
                }),
            }),
            // Módulo de monitoramento
            monitoring_module_1.MonitoringModule,
            // Módulos compartilhados
            email_module_1.EmailModule, // Módulo de email
            unified_logger_module_1.UnifiedLoggerModule,
            permission_shared_module_1.PermissionSharedModule,
            auditoria_shared_module_1.AuditoriaSharedModule,
            resilience_module_1.ResilienceModule, // Reabilitado após correções no Redis/Cache
            // Módulo de autenticação
            auth_module_1.AuthModule,
            // Módulo de usuários
            usuario_module_1.UsuarioModule,
            // Módulo de unidades
            unidade_module_1.UnidadeModule,
            // Módulo de cidadãos
            cidadao_module_1.CidadaoModule,
            // Módulo de benefícios
            beneficio_module_1.BeneficioModule,
            // Módulo de docuentos
            documento_module_1.DocumentoModule,
            // Módulo de auditoria e logging
            audit_module_1.AuditModule,
            // Módulo de métricas
            metricas_module_1.MetricasModule,
            // Módulo de recursos de primeira instância
            recurso_module_1.RecursoModule,
            // Módulo de logs de auditoria
            logs_module_1.LogsModule,
        ],
        controllers: [app_controller_1.AppController],
        providers: [
            app_service_1.AppService,
            error_catalog_1.CatalogAwareExceptionFilter,
            // Aplicar rate limiting globalmente
            {
                provide: core_1.APP_GUARD,
                useClass: throttler_1.ThrottlerGuard,
            },
        ],
    }),
    __metadata("design:paramtypes", [])
], AppModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,