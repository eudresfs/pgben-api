{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\workflow-solicitacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\workflow-solicitacao.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  ForbiddenException,\n  InternalServerErrorException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, DataSource } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n  HistoricoSolicitacao,\n  Pendencia,\n  StatusPendencia,\n} from '../../../entities';\nimport { TransicaoEstadoService } from './transicao-estado.service';\nimport { ValidacaoSolicitacaoService } from './validacao-solicitacao.service';\nimport { PrazoSolicitacaoService } from './prazo-solicitacao.service';\n\n/**\n * Interface para o resultado da transição de estado\n */\nexport interface ResultadoTransicaoEstado {\n  sucesso: boolean;\n  mensagem: string;\n  status_anterior?: StatusSolicitacao;\n  status_atual?: StatusSolicitacao;\n  solicitacao?: Solicitacao;\n}\n\n/**\n * Serviço de Workflow de Solicitação\n *\n * Responsável por gerenciar as transições de estado das solicitações,\n * garantindo que as regras de negócio sejam respeitadas.\n */\n@Injectable()\nexport class WorkflowSolicitacaoService {\n  private readonly logger = new Logger(WorkflowSolicitacaoService.name);\n\n  // As transições permitidas agora são gerenciadas pelo TransicaoEstadoService\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    @InjectRepository(HistoricoSolicitacao)\n    private readonly historicoRepository: Repository<HistoricoSolicitacao>,\n    @InjectRepository(Pendencia)\n    private readonly pendenciaRepository: Repository<Pendencia>,\n    private readonly dataSource: DataSource,\n    private readonly transicaoEstadoService: TransicaoEstadoService,\n    private readonly validacaoService: ValidacaoSolicitacaoService,\n    private readonly prazoService: PrazoSolicitacaoService,\n  ) {}\n\n  /**\n   * Verifica se uma transição de estado é permitida\n   * @param estadoAtual Estado atual da solicitação\n   * @param novoEstado Novo estado desejado\n   * @returns Boolean indicando se a transição é permitida\n   */\n  isTransicaoPermitida(\n    estadoAtual: StatusSolicitacao,\n    novoEstado: StatusSolicitacao,\n  ): boolean {\n    return this.transicaoEstadoService.isTransicaoValida(\n      estadoAtual,\n      novoEstado,\n    );\n  }\n\n  /**\n   * Realiza a transição de estado de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param novoEstado Novo estado da solicitação\n   * @param usuarioId ID do usuário que está realizando a transição\n   * @param observacao Observação sobre a transição (opcional)\n   * @returns Resultado da transição, incluindo a solicitação atualizada\n   * @throws BadRequestException se a transição não for permitida\n   * @throws NotFoundException se a solicitação não for encontrada\n   */\n  async realizarTransicao(\n    solicitacaoId: string,\n    novoEstado: StatusSolicitacao,\n    usuarioId: string,\n    observacao?: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    this.logger.log(\n      `Iniciando transição da solicitação ${solicitacaoId} para o estado ${novoEstado}`,\n    );\n\n    // Buscar a solicitação para validar a transição\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      throw new NotFoundException(\n        `Solicitação com ID ${solicitacaoId} não encontrada`,\n      );\n    }\n\n    const estadoAtual = solicitacao.status;\n    this.logger.log(`Estado atual: ${estadoAtual}, Novo estado: ${novoEstado}`);\n\n    // Verificar se a transição é permitida\n    try {\n      await this.transicaoEstadoService.verificarTransicaoPermitida(\n        estadoAtual,\n        novoEstado,\n        usuarioId,\n      );\n    } catch (error) {\n      if (error instanceof ForbiddenException) {\n        throw new ForbiddenException(\n          `Usuário não tem permissão para realizar esta transição: ${error.message}`,\n        );\n      }\n      throw new BadRequestException(\n        `Transição inválida de ${estadoAtual} para ${novoEstado}: ${error.message}`,\n      );\n    }\n\n    // Preparar o registro de histórico\n    const historicoRegistro = {\n      solicitacao_id: solicitacaoId,\n      status_anterior: estadoAtual,\n      status_atual: novoEstado,\n      usuario_id: usuarioId,\n      observacao:\n        observacao || `Transição de ${estadoAtual} para ${novoEstado}`,\n      dados_alterados: {\n        status: {\n          de: estadoAtual,\n          para: novoEstado,\n        },\n      },\n    };\n\n    // Iniciar transação para garantir consistência\n    let resultado: ResultadoTransicaoEstado = {\n      sucesso: false,\n      mensagem: '',\n    };\n\n    try {\n      // Executar a transação\n      await this.dataSource.transaction(async (transactionalEntityManager) => {\n        // 1. Atualizar o status da solicitação\n        // Controle de versão otimista - verifica a versão atual antes de atualizar\n        const solicitacaoAtualizada = await transactionalEntityManager\n          .createQueryBuilder()\n          .update(Solicitacao)\n          .set({\n            status: novoEstado,\n            // Incrementar a versão\n            version: () => '\"version\" + 1',\n          })\n          .where('id = :id AND version = :version', {\n            id: solicitacaoId,\n            version: solicitacao.version,\n          })\n          .returning('*')\n          .execute();\n\n        if (solicitacaoAtualizada.affected === 0) {\n          throw new BadRequestException(\n            'A solicitação foi modificada por outro usuário. Por favor, recarregue e tente novamente.',\n          );\n        }\n\n        // 2. Registrar a mudança no histórico\n        await transactionalEntityManager\n          .getRepository(HistoricoSolicitacao)\n          .save(historicoRegistro);\n\n        // Buscar a solicitação atualizada para retornar\n        const solicitacaoFinal = await transactionalEntityManager\n          .getRepository(Solicitacao)\n          .findOne({ where: { id: solicitacaoId } });\n\n        if (!solicitacaoFinal) {\n          throw new InternalServerErrorException(\n            'Erro ao buscar solicitação após atualização',\n          );\n        }\n\n        resultado = {\n          sucesso: true,\n          solicitacao: solicitacaoFinal,\n          mensagem: `Solicitação alterada com sucesso para ${novoEstado}`,\n        };\n      });\n\n      this.logger.log(\n        `Transição da solicitação ${solicitacaoId} para ${novoEstado} concluída com sucesso`,\n      );\n\n      // Atualizar os prazos com base no novo estado da solicitação\n      try {\n        await this.prazoService.atualizarPrazosTransicao(\n          solicitacaoId,\n          novoEstado,\n        );\n        this.logger.log(\n          `Prazos atualizados para a solicitação ${solicitacaoId}`,\n        );\n      } catch (prazoError) {\n        // Apenas logar o erro sem interromper o fluxo principal\n        this.logger.error(\n          `Erro ao atualizar prazos para a solicitação ${solicitacaoId}: ${prazoError.message}`,\n          prazoError.stack,\n        );\n      }\n\n      return resultado;\n    } catch (error) {\n      this.logger.error(\n        `Erro na transição da solicitação ${solicitacaoId}: ${error.message}`,\n        error.stack,\n      );\n\n      if (\n        error instanceof BadRequestException ||\n        error instanceof ForbiddenException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      }\n\n      throw new InternalServerErrorException(\n        `Erro ao realizar transição: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Obtém os estados possíveis para uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de estados possíveis\n   */\n  async getEstadosPossiveis(\n    solicitacaoId: string,\n  ): Promise<StatusSolicitacao[]> {\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      throw new NotFoundException('Solicitação não encontrada');\n    }\n\n    return this.transicaoEstadoService.getEstadosPossiveis(solicitacao.status);\n  }\n\n  /**\n   * Cria uma nova solicitação no estado RASCUNHO\n   * @param solicitacaoData Dados da solicitação\n   * @returns Solicitação criada\n   */\n  async criarRascunho(\n    solicitacaoData: Partial<Solicitacao>,\n  ): Promise<Solicitacao> {\n    const solicitacao = this.solicitacaoRepository.create({\n      ...solicitacaoData,\n      status: StatusSolicitacao.RASCUNHO,\n      created_at: new Date(),\n      updated_at: new Date(),\n    });\n\n    return this.solicitacaoRepository.save(solicitacao);\n  }\n\n  /**\n   * Submete um rascunho de solicitação, alterando seu estado para PENDENTE\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está submetendo o rascunho\n   * @returns Resultado da transição\n   */\n  async submeterRascunho(\n    solicitacaoId: string,\n    usuarioId: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.ABERTA,\n      usuarioId,\n      'Solicitação submetida',\n    );\n  }\n\n  /**\n   * Envia uma solicitação para análise, alterando seu estado para EM_ANALISE\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está enviando a solicitação\n   * @returns Resultado da transição\n   */\n  async enviarParaAnalise(\n    solicitacaoId: string,\n    usuarioId: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.EM_ANALISE,\n      usuarioId,\n      'Solicitação enviada para análise',\n    );\n  }\n\n  /**\n   * Inicia a análise de uma solicitação, alterando seu estado para EM_ANALISE\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está iniciando a análise\n   * @returns Resultado da transição\n   */\n  async iniciarAnalise(\n    solicitacaoId: string,\n    usuarioId: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.EM_ANALISE,\n      usuarioId,\n      'Análise iniciada',\n    );\n  }\n\n  /**\n   * Aprova uma solicitação, alterando seu estado para APROVADA\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está aprovando a solicitação\n   * @param observacao Observação sobre a aprovação\n   * @returns Resultado da transição\n   */\n  async aprovarSolicitacao(\n    solicitacaoId: string,\n    usuarioId: string,\n    observacao: string,\n    parecerSemtas: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    // Primeiro, atualizar o parecer SEMTAS na solicitação\n    await this.solicitacaoRepository.update(solicitacaoId, {\n      parecer_semtas: parecerSemtas,\n      aprovador_id: usuarioId,\n      data_aprovacao: new Date(),\n    });\n\n    // Validar se a solicitação pode ser aprovada (regras de negócio)\n    await this.validacaoService.validarAprovacao(solicitacaoId);\n\n    // Se passar na validação, realizar a transição\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.APROVADA,\n      usuarioId,\n      observacao,\n    );\n  }\n\n  /**\n   * Libera uma solicitação aprovada, alterando seu estado para LIBERADA\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está liberando a solicitação\n   * @returns Resultado da transição\n   */\n  async liberarSolicitacao(\n    solicitacaoId: string,\n    usuarioId: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    // Validar se a solicitação pode ser liberada (regras de negócio)\n    await this.validacaoService.validarLiberacao(solicitacaoId);\n\n    // Registrar o liberador da solicitação e a data de liberação\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (solicitacao) {\n      solicitacao.liberador_id = usuarioId;\n      solicitacao.data_liberacao = new Date();\n      await this.solicitacaoRepository.save(solicitacao);\n    } else {\n      throw new NotFoundException('Solicitação não encontrada');\n    }\n\n    // Se passar na validação, realizar a transição\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.LIBERADA,\n      usuarioId,\n      'Solicitação liberada',\n    );\n  }\n\n  /**\n   * Rejeita uma solicitação, alterando seu estado para INDEFERIDA\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está rejeitando a solicitação\n   * @param motivo Motivo da rejeição\n   * @returns Resultado da transição\n   */\n  async rejeitarSolicitacao(\n    solicitacaoId: string,\n    usuarioId: string,\n    motivo: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.INDEFERIDA,\n      usuarioId,\n      motivo || 'Solicitação reprovada',\n    );\n  }\n\n  /**\n   * Cancela uma solicitação, alterando seu estado para CANCELADA\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está cancelando a solicitação\n   * @param motivo Motivo do cancelamento\n   * @returns Resultado da transição\n   */\n  async cancelarSolicitacao(\n    solicitacaoId: string,\n    usuarioId: string,\n    motivo: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    // Validar se a solicitação pode ser cancelada (regras de negócio)\n    await this.validacaoService.validarCancelamento(solicitacaoId);\n\n    // Se passar na validação, realizar a transição\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.CANCELADA,\n      usuarioId,\n      motivo || 'Solicitação cancelada',\n    );\n  }\n\n  /**\n   * Inicia o processamento de uma solicitação, alterando seu estado para EM_PROCESSAMENTO\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está iniciando o processamento\n   * @returns Resultado da transição\n   */\n  async iniciarProcessamento(\n    solicitacaoId: string,\n    usuarioId: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.EM_PROCESSAMENTO,\n      usuarioId,\n      'Processamento iniciado',\n    );\n  }\n\n  /**\n   * Conclui uma solicitação, alterando seu estado para CONCLUIDA\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está concluindo a solicitação\n   * @returns Resultado da transição\n   */\n  async concluirSolicitacao(\n    solicitacaoId: string,\n    usuarioId: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    // Validar se a solicitação pode ser concluída (regras de negócio)\n    await this.validacaoService.validarConclusao(solicitacaoId);\n\n    // Se passar na validação, realizar a transição\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.CONCLUIDA,\n      usuarioId,\n      'Solicitação concluída',\n    );\n  }\n\n  /**\n   * Arquiva uma solicitação, alterando seu estado para ARQUIVADA\n   * @param solicitacaoId ID da solicitação\n   * @param usuarioId ID do usuário que está arquivando a solicitação\n   * @returns Resultado da transição\n   */\n  async arquivarSolicitacao(\n    solicitacaoId: string,\n    usuarioId: string,\n  ): Promise<ResultadoTransicaoEstado> {\n    // Validar se a solicitação pode ser arquivada (regras de negócio)\n    await this.validacaoService.validarArquivamento(solicitacaoId);\n\n    // Se passar na validação, realizar a transição\n    return this.realizarTransicao(\n      solicitacaoId,\n      StatusSolicitacao.ARQUIVADA,\n      usuarioId,\n      'Solicitação arquivada',\n    );\n  }\n\n  /**\n   * Atualiza o status de uma solicitação com informações adicionais para conformidade\n   * @param solicitacaoId ID da solicitação\n   * @param novoStatus Novo status desejado\n   * @param usuarioId ID do usuário que está atualizando o status\n   * @param dadosAdicionais Dados adicionais para a atualização\n   * @returns Resultado da transição\n   */\n  async atualizarStatus(\n    solicitacaoId: string,\n    novoStatus: StatusSolicitacao,\n    usuarioId: string,\n    dadosAdicionais: {\n      observacao?: string;\n      processo_judicial_id?: string;\n      determinacao_judicial_id?: string;\n      justificativa?: string;\n    },\n  ): Promise<ResultadoTransicaoEstado> {\n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      // Buscar a solicitação\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: solicitacaoId },\n      });\n\n      if (!solicitacao) {\n        throw new NotFoundException('Solicitação não encontrada');\n      }\n\n      // Verificar se a transição é permitida\n      if (!this.isTransicaoPermitida(solicitacao.status, novoStatus)) {\n        throw new ForbiddenException(\n          `Transição de estado de ${solicitacao.status} para ${novoStatus} não é permitida`,\n        );\n      }\n\n      // Construir a observação com os dados adicionais\n      let observacaoCompleta = dadosAdicionais.observacao || '';\n\n      if (dadosAdicionais.justificativa) {\n        observacaoCompleta += `\\nJustificativa: ${dadosAdicionais.justificativa}`;\n      }\n\n      if (dadosAdicionais.processo_judicial_id) {\n        observacaoCompleta += `\\nProcesso Judicial ID: ${dadosAdicionais.processo_judicial_id}`;\n      }\n\n      if (dadosAdicionais.determinacao_judicial_id) {\n        observacaoCompleta += `\\nDeterminação Judicial ID: ${dadosAdicionais.determinacao_judicial_id}`;\n      }\n\n      // Salvar o estado anterior para o retorno\n      const statusAnterior = solicitacao.status;\n\n      // Preparar dados adicionais para atualização\n      const updateData: any = {\n        status: novoStatus,\n        updated_at: new Date(),\n      };\n\n      // Adicionar dados adicionais, se existirem\n      if (dadosAdicionais.processo_judicial_id) {\n        updateData.processo_judicial_id = dadosAdicionais.processo_judicial_id;\n        updateData.determinacao_judicial_flag = true;\n      }\n\n      if (dadosAdicionais.determinacao_judicial_id) {\n        updateData.determinacao_judicial_id =\n          dadosAdicionais.determinacao_judicial_id;\n        updateData.determinacao_judicial_flag = true;\n      }\n\n      // Atualizar a solicitação usando o queryRunner\n      await queryRunner.manager.update(\n        Solicitacao,\n        { id: solicitacaoId },\n        updateData,\n      );\n\n      // Registrar a transição no histórico\n      const historico = new HistoricoSolicitacao();\n      historico.solicitacao_id = solicitacaoId;\n      historico.status_anterior = statusAnterior;\n      historico.status_atual = novoStatus;\n      historico.usuario_id = usuarioId;\n      historico.observacao =\n        observacaoCompleta ||\n        `Status atualizado de ${statusAnterior} para ${novoStatus}`;\n      historico.created_at = new Date();\n\n      await queryRunner.manager.save(HistoricoSolicitacao, historico);\n\n      await queryRunner.commitTransaction();\n\n      return {\n        sucesso: true,\n        mensagem: `Status atualizado com sucesso de ${statusAnterior} para ${novoStatus}`,\n        status_anterior: statusAnterior,\n        status_atual: novoStatus,\n      };\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n\n      // Verificar se é um erro de versão (conflito de concorrência)\n      if (\n        error.name === 'QueryFailedError' &&\n        (error.message.includes('version') ||\n          error.message.includes('version mismatch'))\n      ) {\n        throw new BadRequestException(\n          'A solicitação foi modificada por outro usuário enquanto você a editava. ' +\n            'Por favor, atualize a página e tente novamente.',\n        );\n      }\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ForbiddenException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao atualizar status da solicitação: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao atualizar status da solicitação',\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n}\n"],"version":3}