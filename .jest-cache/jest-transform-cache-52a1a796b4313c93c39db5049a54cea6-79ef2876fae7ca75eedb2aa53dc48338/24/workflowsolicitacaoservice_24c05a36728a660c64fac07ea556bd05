d4e306cf33442e58cce1908541f856cc
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var WorkflowSolicitacaoService_1;
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowSolicitacaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const entities_1 = require("../../../entities");
const transicao_estado_service_1 = require("./transicao-estado.service");
const validacao_solicitacao_service_1 = require("./validacao-solicitacao.service");
const prazo_solicitacao_service_1 = require("./prazo-solicitacao.service");
/**
 * Serviço de Workflow de Solicitação
 *
 * Responsável por gerenciar as transições de estado das solicitações,
 * garantindo que as regras de negócio sejam respeitadas.
 */
let WorkflowSolicitacaoService = WorkflowSolicitacaoService_1 = class WorkflowSolicitacaoService {
    solicitacaoRepository;
    historicoRepository;
    pendenciaRepository;
    dataSource;
    transicaoEstadoService;
    validacaoService;
    prazoService;
    logger = new common_1.Logger(WorkflowSolicitacaoService_1.name);
    // As transições permitidas agora são gerenciadas pelo TransicaoEstadoService
    constructor(solicitacaoRepository, historicoRepository, pendenciaRepository, dataSource, transicaoEstadoService, validacaoService, prazoService) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.historicoRepository = historicoRepository;
        this.pendenciaRepository = pendenciaRepository;
        this.dataSource = dataSource;
        this.transicaoEstadoService = transicaoEstadoService;
        this.validacaoService = validacaoService;
        this.prazoService = prazoService;
    }
    /**
     * Verifica se uma transição de estado é permitida
     * @param estadoAtual Estado atual da solicitação
     * @param novoEstado Novo estado desejado
     * @returns Boolean indicando se a transição é permitida
     */
    isTransicaoPermitida(estadoAtual, novoEstado) {
        return this.transicaoEstadoService.isTransicaoValida(estadoAtual, novoEstado);
    }
    /**
     * Realiza a transição de estado de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param novoEstado Novo estado da solicitação
     * @param usuarioId ID do usuário que está realizando a transição
     * @param observacao Observação sobre a transição (opcional)
     * @returns Resultado da transição, incluindo a solicitação atualizada
     * @throws BadRequestException se a transição não for permitida
     * @throws NotFoundException se a solicitação não for encontrada
     */
    async realizarTransicao(solicitacaoId, novoEstado, usuarioId, observacao) {
        this.logger.log(`Iniciando transição da solicitação ${solicitacaoId} para o estado ${novoEstado}`);
        // Buscar a solicitação para validar a transição
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new common_1.NotFoundException(`Solicitação com ID ${solicitacaoId} não encontrada`);
        }
        const estadoAtual = solicitacao.status;
        this.logger.log(`Estado atual: ${estadoAtual}, Novo estado: ${novoEstado}`);
        // Verificar se a transição é permitida
        try {
            await this.transicaoEstadoService.verificarTransicaoPermitida(estadoAtual, novoEstado, usuarioId);
        }
        catch (error) {
            if (error instanceof common_1.ForbiddenException) {
                throw new common_1.ForbiddenException(`Usuário não tem permissão para realizar esta transição: ${error.message}`);
            }
            throw new common_1.BadRequestException(`Transição inválida de ${estadoAtual} para ${novoEstado}: ${error.message}`);
        }
        // Preparar o registro de histórico
        const historicoRegistro = {
            solicitacao_id: solicitacaoId,
            status_anterior: estadoAtual,
            status_atual: novoEstado,
            usuario_id: usuarioId,
            observacao: observacao || `Transição de ${estadoAtual} para ${novoEstado}`,
            dados_alterados: {
                status: {
                    de: estadoAtual,
                    para: novoEstado,
                },
            },
        };
        // Iniciar transação para garantir consistência
        let resultado = {
            sucesso: false,
            mensagem: '',
        };
        try {
            // Executar a transação
            await this.dataSource.transaction(async (transactionalEntityManager) => {
                // 1. Atualizar o status da solicitação
                // Controle de versão otimista - verifica a versão atual antes de atualizar
                const solicitacaoAtualizada = await transactionalEntityManager
                    .createQueryBuilder()
                    .update(entities_1.Solicitacao)
                    .set({
                    status: novoEstado,
                    // Incrementar a versão
                    version: () => '"version" + 1',
                })
                    .where('id = :id AND version = :version', {
                    id: solicitacaoId,
                    version: solicitacao.version,
                })
                    .returning('*')
                    .execute();
                if (solicitacaoAtualizada.affected === 0) {
                    throw new common_1.BadRequestException('A solicitação foi modificada por outro usuário. Por favor, recarregue e tente novamente.');
                }
                // 2. Registrar a mudança no histórico
                await transactionalEntityManager
                    .getRepository(entities_1.HistoricoSolicitacao)
                    .save(historicoRegistro);
                // Buscar a solicitação atualizada para retornar
                const solicitacaoFinal = await transactionalEntityManager
                    .getRepository(entities_1.Solicitacao)
                    .findOne({ where: { id: solicitacaoId } });
                if (!solicitacaoFinal) {
                    throw new common_1.InternalServerErrorException('Erro ao buscar solicitação após atualização');
                }
                resultado = {
                    sucesso: true,
                    solicitacao: solicitacaoFinal,
                    mensagem: `Solicitação alterada com sucesso para ${novoEstado}`,
                };
            });
            this.logger.log(`Transição da solicitação ${solicitacaoId} para ${novoEstado} concluída com sucesso`);
            // Atualizar os prazos com base no novo estado da solicitação
            try {
                await this.prazoService.atualizarPrazosTransicao(solicitacaoId, novoEstado);
                this.logger.log(`Prazos atualizados para a solicitação ${solicitacaoId}`);
            }
            catch (prazoError) {
                // Apenas logar o erro sem interromper o fluxo principal
                this.logger.error(`Erro ao atualizar prazos para a solicitação ${solicitacaoId}: ${prazoError.message}`, prazoError.stack);
            }
            return resultado;
        }
        catch (error) {
            this.logger.error(`Erro na transição da solicitação ${solicitacaoId}: ${error.message}`, error.stack);
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.ForbiddenException ||
                error instanceof common_1.NotFoundException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException(`Erro ao realizar transição: ${error.message}`);
        }
    }
    /**
     * Obtém os estados possíveis para uma solicitação
     * @param solicitacaoId ID da solicitação
     * @returns Lista de estados possíveis
     */
    async getEstadosPossiveis(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new common_1.NotFoundException('Solicitação não encontrada');
        }
        return this.transicaoEstadoService.getEstadosPossiveis(solicitacao.status);
    }
    /**
     * Cria uma nova solicitação no estado RASCUNHO
     * @param solicitacaoData Dados da solicitação
     * @returns Solicitação criada
     */
    async criarRascunho(solicitacaoData) {
        const solicitacao = this.solicitacaoRepository.create({
            ...solicitacaoData,
            status: entities_1.StatusSolicitacao.RASCUNHO,
            created_at: new Date(),
            updated_at: new Date(),
        });
        return this.solicitacaoRepository.save(solicitacao);
    }
    /**
     * Submete um rascunho de solicitação, alterando seu estado para PENDENTE
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está submetendo o rascunho
     * @returns Resultado da transição
     */
    async submeterRascunho(solicitacaoId, usuarioId) {
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.ABERTA, usuarioId, 'Solicitação submetida');
    }
    /**
     * Envia uma solicitação para análise, alterando seu estado para EM_ANALISE
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está enviando a solicitação
     * @returns Resultado da transição
     */
    async enviarParaAnalise(solicitacaoId, usuarioId) {
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.EM_ANALISE, usuarioId, 'Solicitação enviada para análise');
    }
    /**
     * Inicia a análise de uma solicitação, alterando seu estado para EM_ANALISE
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está iniciando a análise
     * @returns Resultado da transição
     */
    async iniciarAnalise(solicitacaoId, usuarioId) {
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.EM_ANALISE, usuarioId, 'Análise iniciada');
    }
    /**
     * Aprova uma solicitação, alterando seu estado para APROVADA
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está aprovando a solicitação
     * @param observacao Observação sobre a aprovação
     * @returns Resultado da transição
     */
    async aprovarSolicitacao(solicitacaoId, usuarioId, observacao, parecerSemtas) {
        // Primeiro, atualizar o parecer SEMTAS na solicitação
        await this.solicitacaoRepository.update(solicitacaoId, {
            parecer_semtas: parecerSemtas,
            aprovador_id: usuarioId,
            data_aprovacao: new Date(),
        });
        // Validar se a solicitação pode ser aprovada (regras de negócio)
        await this.validacaoService.validarAprovacao(solicitacaoId);
        // Se passar na validação, realizar a transição
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.APROVADA, usuarioId, observacao);
    }
    /**
     * Libera uma solicitação aprovada, alterando seu estado para LIBERADA
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está liberando a solicitação
     * @returns Resultado da transição
     */
    async liberarSolicitacao(solicitacaoId, usuarioId) {
        // Validar se a solicitação pode ser liberada (regras de negócio)
        await this.validacaoService.validarLiberacao(solicitacaoId);
        // Registrar o liberador da solicitação e a data de liberação
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (solicitacao) {
            solicitacao.liberador_id = usuarioId;
            solicitacao.data_liberacao = new Date();
            await this.solicitacaoRepository.save(solicitacao);
        }
        else {
            throw new common_1.NotFoundException('Solicitação não encontrada');
        }
        // Se passar na validação, realizar a transição
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.LIBERADA, usuarioId, 'Solicitação liberada');
    }
    /**
     * Rejeita uma solicitação, alterando seu estado para INDEFERIDA
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está rejeitando a solicitação
     * @param motivo Motivo da rejeição
     * @returns Resultado da transição
     */
    async rejeitarSolicitacao(solicitacaoId, usuarioId, motivo) {
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.INDEFERIDA, usuarioId, motivo || 'Solicitação reprovada');
    }
    /**
     * Cancela uma solicitação, alterando seu estado para CANCELADA
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está cancelando a solicitação
     * @param motivo Motivo do cancelamento
     * @returns Resultado da transição
     */
    async cancelarSolicitacao(solicitacaoId, usuarioId, motivo) {
        // Validar se a solicitação pode ser cancelada (regras de negócio)
        await this.validacaoService.validarCancelamento(solicitacaoId);
        // Se passar na validação, realizar a transição
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.CANCELADA, usuarioId, motivo || 'Solicitação cancelada');
    }
    /**
     * Inicia o processamento de uma solicitação, alterando seu estado para EM_PROCESSAMENTO
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está iniciando o processamento
     * @returns Resultado da transição
     */
    async iniciarProcessamento(solicitacaoId, usuarioId) {
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.EM_PROCESSAMENTO, usuarioId, 'Processamento iniciado');
    }
    /**
     * Conclui uma solicitação, alterando seu estado para CONCLUIDA
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está concluindo a solicitação
     * @returns Resultado da transição
     */
    async concluirSolicitacao(solicitacaoId, usuarioId) {
        // Validar se a solicitação pode ser concluída (regras de negócio)
        await this.validacaoService.validarConclusao(solicitacaoId);
        // Se passar na validação, realizar a transição
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.CONCLUIDA, usuarioId, 'Solicitação concluída');
    }
    /**
     * Arquiva uma solicitação, alterando seu estado para ARQUIVADA
     * @param solicitacaoId ID da solicitação
     * @param usuarioId ID do usuário que está arquivando a solicitação
     * @returns Resultado da transição
     */
    async arquivarSolicitacao(solicitacaoId, usuarioId) {
        // Validar se a solicitação pode ser arquivada (regras de negócio)
        await this.validacaoService.validarArquivamento(solicitacaoId);
        // Se passar na validação, realizar a transição
        return this.realizarTransicao(solicitacaoId, entities_1.StatusSolicitacao.ARQUIVADA, usuarioId, 'Solicitação arquivada');
    }
    /**
     * Atualiza o status de uma solicitação com informações adicionais para conformidade
     * @param solicitacaoId ID da solicitação
     * @param novoStatus Novo status desejado
     * @param usuarioId ID do usuário que está atualizando o status
     * @param dadosAdicionais Dados adicionais para a atualização
     * @returns Resultado da transição
     */
    async atualizarStatus(solicitacaoId, novoStatus, usuarioId, dadosAdicionais) {
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Buscar a solicitação
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: solicitacaoId },
            });
            if (!solicitacao) {
                throw new common_1.NotFoundException('Solicitação não encontrada');
            }
            // Verificar se a transição é permitida
            if (!this.isTransicaoPermitida(solicitacao.status, novoStatus)) {
                throw new common_1.ForbiddenException(`Transição de estado de ${solicitacao.status} para ${novoStatus} não é permitida`);
            }
            // Construir a observação com os dados adicionais
            let observacaoCompleta = dadosAdicionais.observacao || '';
            if (dadosAdicionais.justificativa) {
                observacaoCompleta += `\nJustificativa: ${dadosAdicionais.justificativa}`;
            }
            if (dadosAdicionais.processo_judicial_id) {
                observacaoCompleta += `\nProcesso Judicial ID: ${dadosAdicionais.processo_judicial_id}`;
            }
            if (dadosAdicionais.determinacao_judicial_id) {
                observacaoCompleta += `\nDeterminação Judicial ID: ${dadosAdicionais.determinacao_judicial_id}`;
            }
            // Salvar o estado anterior para o retorno
            const statusAnterior = solicitacao.status;
            // Preparar dados adicionais para atualização
            const updateData = {
                status: novoStatus,
                updated_at: new Date(),
            };
            // Adicionar dados adicionais, se existirem
            if (dadosAdicionais.processo_judicial_id) {
                updateData.processo_judicial_id = dadosAdicionais.processo_judicial_id;
                updateData.determinacao_judicial_flag = true;
            }
            if (dadosAdicionais.determinacao_judicial_id) {
                updateData.determinacao_judicial_id =
                    dadosAdicionais.determinacao_judicial_id;
                updateData.determinacao_judicial_flag = true;
            }
            // Atualizar a solicitação usando o queryRunner
            await queryRunner.manager.update(entities_1.Solicitacao, { id: solicitacaoId }, updateData);
            // Registrar a transição no histórico
            const historico = new entities_1.HistoricoSolicitacao();
            historico.solicitacao_id = solicitacaoId;
            historico.status_anterior = statusAnterior;
            historico.status_atual = novoStatus;
            historico.usuario_id = usuarioId;
            historico.observacao =
                observacaoCompleta ||
                    `Status atualizado de ${statusAnterior} para ${novoStatus}`;
            historico.created_at = new Date();
            await queryRunner.manager.save(entities_1.HistoricoSolicitacao, historico);
            await queryRunner.commitTransaction();
            return {
                sucesso: true,
                mensagem: `Status atualizado com sucesso de ${statusAnterior} para ${novoStatus}`,
                status_anterior: statusAnterior,
                status_atual: novoStatus,
            };
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            // Verificar se é um erro de versão (conflito de concorrência)
            if (error.name === 'QueryFailedError' &&
                (error.message.includes('version') ||
                    error.message.includes('version mismatch'))) {
                throw new common_1.BadRequestException('A solicitação foi modificada por outro usuário enquanto você a editava. ' +
                    'Por favor, atualize a página e tente novamente.');
            }
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.ForbiddenException ||
                error instanceof common_1.BadRequestException) {
                throw error;
            }
            this.logger.error(`Erro ao atualizar status da solicitação: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao atualizar status da solicitação');
        }
        finally {
            await queryRunner.release();
        }
    }
};
exports.WorkflowSolicitacaoService = WorkflowSolicitacaoService;
exports.WorkflowSolicitacaoService = WorkflowSolicitacaoService = WorkflowSolicitacaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(entities_1.Solicitacao)),
    __param(1, (0, typeorm_1.InjectRepository)(entities_1.HistoricoSolicitacao)),
    __param(2, (0, typeorm_1.InjectRepository)(entities_1.Pendencia)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _d : Object, typeof (_e = typeof transicao_estado_service_1.TransicaoEstadoService !== "undefined" && transicao_estado_service_1.TransicaoEstadoService) === "function" ? _e : Object, typeof (_f = typeof validacao_solicitacao_service_1.ValidacaoSolicitacaoService !== "undefined" && validacao_solicitacao_service_1.ValidacaoSolicitacaoService) === "function" ? _f : Object, typeof (_g = typeof prazo_solicitacao_service_1.PrazoSolicitacaoService !== "undefined" && prazo_solicitacao_service_1.PrazoSolicitacaoService) === "function" ? _g : Object])
], WorkflowSolicitacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,