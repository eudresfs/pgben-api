05854575046cf490a283d345a9c8d586
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegradorController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const integrador_service_1 = require("../services/integrador.service");
const integrador_token_service_1 = require("../services/integrador-token.service");
const create_integrador_dto_1 = require("../dto/create-integrador.dto");
const update_integrador_dto_1 = require("../dto/update-integrador.dto");
const create_token_dto_1 = require("../dto/create-token.dto");
const revoke_token_dto_1 = require("../dto/revoke-token.dto");
const integrador_response_dto_1 = require("../dto/integrador-response.dto");
const token_response_dto_1 = require("../dto/token-response.dto");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
/**
 * Controller para gerenciamento de integradores e seus tokens.
 * Requer autenticação administrativa e papel de ADMIN para acesso.
 */
let IntegradorController = class IntegradorController {
    integradorService;
    tokenService;
    constructor(integradorService, tokenService) {
        this.integradorService = integradorService;
        this.tokenService = tokenService;
    }
    /**
     * Cria um novo integrador.
     */
    create(createIntegradorDto) {
        return this.integradorService.create(createIntegradorDto);
    }
    /**
     * Lista todos os integradores cadastrados.
     */
    findAll() {
        return this.integradorService.findAll();
    }
    /**
     * Obtém detalhes de um integrador específico.
     */
    findOne(id) {
        return this.integradorService.findOne(id);
    }
    /**
     * Atualiza dados de um integrador.
     */
    update(id, updateIntegradorDto) {
        return this.integradorService.update(id, updateIntegradorDto);
    }
    /**
     * Remove um integrador do sistema.
     */
    async remove(id) {
        await this.integradorService.remove(id);
    }
    /**
     * Ativa ou desativa um integrador.
     */
    toggleStatus(id, ativo) {
        return this.integradorService.toggleAtivo(id, ativo);
    }
    /**
     * Lista todos os tokens de um integrador.
     */
    findAllTokens(id) {
        return this.tokenService.findAllByIntegrador(id);
    }
    /**
     * Cria um novo token para um integrador.
     */
    async createToken(id, createTokenDto) {
        const result = await this.tokenService.createToken(id, createTokenDto);
        return {
            token: result.token,
            tokenInfo: result.tokenInfo,
        };
    }
    /**
     * Revoga um token existente.
     */
    revogarToken(tokenId, revokeTokenDto) {
        return this.tokenService.revogarToken(tokenId, revokeTokenDto.motivo);
    }
};
exports.IntegradorController = IntegradorController;
__decorate([
    (0, common_1.Post)(),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Cria um novo integrador' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Integrador criado com sucesso',
        type: integrador_response_dto_1.IntegradorResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Já existe um integrador com este nome',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof create_integrador_dto_1.CreateIntegradorDto !== "undefined" && create_integrador_dto_1.CreateIntegradorDto) === "function" ? _c : Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], IntegradorController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Lista todos os integradores' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de integradores retornada com sucesso',
        type: [integrador_response_dto_1.IntegradorResponseDto],
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], IntegradorController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém um integrador pelo ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Integrador encontrado',
        type: integrador_response_dto_1.IntegradorResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], IntegradorController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Atualiza um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Integrador atualizado com sucesso',
        type: integrador_response_dto_1.IntegradorResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_g = typeof update_integrador_dto_1.UpdateIntegradorDto !== "undefined" && update_integrador_dto_1.UpdateIntegradorDto) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], IntegradorController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiOperation)({ summary: 'Remove um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'Integrador removido com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], IntegradorController.prototype, "remove", null);
__decorate([
    (0, common_1.Patch)(':id/status'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Ativa ou desativa um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status do integrador atualizado com sucesso',
        type: integrador_response_dto_1.IntegradorResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)('ativo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Boolean]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], IntegradorController.prototype, "toggleStatus", null);
__decorate([
    (0, common_1.Get)(':id/tokens'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Lista todos os tokens de um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de tokens retornada com sucesso',
        type: [token_response_dto_1.TokenResponseDto],
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], IntegradorController.prototype, "findAllTokens", null);
__decorate([
    (0, common_1.Post)(':id/tokens'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Cria um novo token para um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Token criado com sucesso',
        schema: {
            properties: {
                token: {
                    type: 'string',
                    description: 'Token JWT gerado (exibido apenas uma vez)',
                    example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...',
                },
                tokenInfo: {
                    $ref: '#/components/schemas/TokenResponseDto',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou integrador inativo',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_m = typeof create_token_dto_1.CreateTokenDto !== "undefined" && create_token_dto_1.CreateTokenDto) === "function" ? _m : Object]),
    __metadata("design:returntype", Promise)
], IntegradorController.prototype, "createToken", null);
__decorate([
    (0, common_1.Patch)(':id/tokens/:tokenId/revogar'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Revoga um token' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiParam)({ name: 'tokenId', description: 'ID do token', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Token revogado com sucesso',
        type: token_response_dto_1.TokenResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Token já revogado' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Token não encontrado' }),
    __param(0, (0, common_1.Param)('tokenId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_o = typeof revoke_token_dto_1.RevokeTokenDto !== "undefined" && revoke_token_dto_1.RevokeTokenDto) === "function" ? _o : Object]),
    __metadata("design:returntype", typeof (_p = typeof Promise !== "undefined" && Promise) === "function" ? _p : Object)
], IntegradorController.prototype, "revogarToken", null);
exports.IntegradorController = IntegradorController = __decorate([
    (0, swagger_1.ApiTags)('Integradores'),
    (0, common_1.Controller)('integradores'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof integrador_service_1.IntegradorService !== "undefined" && integrador_service_1.IntegradorService) === "function" ? _a : Object, typeof (_b = typeof integrador_token_service_1.IntegradorTokenService !== "undefined" && integrador_token_service_1.IntegradorTokenService) === "function" ? _b : Object])
], IntegradorController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,