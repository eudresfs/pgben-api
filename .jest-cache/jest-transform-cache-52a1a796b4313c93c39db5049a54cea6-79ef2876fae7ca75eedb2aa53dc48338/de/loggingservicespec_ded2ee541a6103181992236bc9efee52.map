{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\tests\\logging.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\tests\\logging.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { LoggingService } from '../logging.service';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n/**\n * Testes unitários para o serviço de logging\n *\n * Verifica o funcionamento dos métodos de log em diferentes níveis\n * e com diferentes tipos de informações\n */\ndescribe('LoggingService', () => {\n  let service: LoggingService;\n\n  // Mock do logger Winston\n  const mockLogger = {\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n    verbose: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n    jest.spyOn(global, 'Date').mockImplementation(() => {\n      return {\n        toISOString: () => '2025-05-13T18:00:00.000Z',\n      } as unknown as Date;\n    });\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        LoggingService,\n        {\n          provide: WINSTON_MODULE_PROVIDER,\n          useValue: mockLogger,\n        },\n      ],\n    }).compile();\n\n    service = module.get<LoggingService>(LoggingService);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('info', () => {\n    it('deve registrar uma mensagem de nível info', () => {\n      const message = 'Mensagem de informação';\n      const context = 'TestContext';\n      const meta = { key: 'value' };\n\n      service.info(message, context, meta);\n\n      expect(mockLogger.info).toHaveBeenCalledWith(message, {\n        context,\n        key: 'value',\n        timestamp: '2025-05-13T18:00:00.000Z',\n      });\n    });\n\n    it('deve lidar com chamadas sem contexto ou meta', () => {\n      const message = 'Mensagem de informação';\n\n      service.info(message);\n\n      expect(mockLogger.info).toHaveBeenCalledWith(message, {\n        context: undefined,\n        timestamp: '2025-05-13T18:00:00.000Z',\n      });\n    });\n  });\n\n  describe('error', () => {\n    it('deve registrar uma mensagem de nível error com trace', () => {\n      const message = 'Mensagem de erro';\n      const trace = 'Stack trace';\n      const context = 'TestContext';\n      const meta = { key: 'value' };\n\n      service.error(message, trace, context, meta);\n\n      expect(mockLogger.error).toHaveBeenCalledWith(message, {\n        trace,\n        context,\n        key: 'value',\n        timestamp: '2025-05-13T18:00:00.000Z',\n      });\n    });\n\n    it('deve lidar com chamadas sem trace, contexto ou meta', () => {\n      const message = 'Mensagem de erro';\n\n      service.error(message);\n\n      expect(mockLogger.error).toHaveBeenCalledWith(message, {\n        trace: undefined,\n        context: undefined,\n        timestamp: '2025-05-13T18:00:00.000Z',\n      });\n    });\n  });\n\n  describe('warn', () => {\n    it('deve registrar uma mensagem de nível warn', () => {\n      const message = 'Mensagem de aviso';\n      const context = 'TestContext';\n      const meta = { key: 'value' };\n\n      service.warn(message, context, meta);\n\n      expect(mockLogger.warn).toHaveBeenCalledWith(message, {\n        context,\n        key: 'value',\n        timestamp: '2025-05-13T18:00:00.000Z',\n      });\n    });\n  });\n\n  describe('debug', () => {\n    it('deve registrar uma mensagem de nível debug', () => {\n      const message = 'Mensagem de debug';\n      const context = 'TestContext';\n      const meta = { key: 'value' };\n\n      service.debug(message, context, meta);\n\n      expect(mockLogger.debug).toHaveBeenCalledWith(message, {\n        context,\n        key: 'value',\n        timestamp: '2025-05-13T18:00:00.000Z',\n      });\n    });\n  });\n\n  describe('verbose', () => {\n    it('deve registrar uma mensagem de nível verbose', () => {\n      const message = 'Mensagem verbose';\n      const context = 'TestContext';\n      const meta = { key: 'value' };\n\n      service.verbose(message, context, meta);\n\n      expect(mockLogger.verbose).toHaveBeenCalledWith(message, {\n        context,\n        key: 'value',\n        timestamp: '2025-05-13T18:00:00.000Z',\n      });\n    });\n  });\n\n  describe('logDatabase', () => {\n    it('deve registrar uma operação de banco de dados', () => {\n      const operation = 'INSERT';\n      const entity = 'Usuario';\n      const duration = 150;\n      const query = 'INSERT INTO usuarios (nome, email) VALUES (?, ?)';\n\n      service.logDatabase(operation, entity, duration, query);\n\n      expect(mockLogger.debug).toHaveBeenCalledWith(\n        `DB: ${operation} ${entity} - ${duration}ms`,\n        {\n          context: 'Database',\n          operation,\n          entity,\n          duration,\n          query,\n          timestamp: '2025-05-13T18:00:00.000Z',\n        },\n      );\n    });\n\n    it('deve lidar com chamadas sem query', () => {\n      const operation = 'SELECT';\n      const entity = 'Usuario';\n      const duration = 50;\n\n      service.logDatabase(operation, entity, duration);\n\n      expect(mockLogger.debug).toHaveBeenCalledWith(\n        `DB: ${operation} ${entity} - ${duration}ms`,\n        {\n          context: 'Database',\n          operation,\n          entity,\n          duration,\n          query: undefined,\n          timestamp: '2025-05-13T18:00:00.000Z',\n        },\n      );\n    });\n  });\n\n  describe('logAuth', () => {\n    it('deve registrar uma operação de autenticação bem-sucedida', () => {\n      const operation = 'LOGIN';\n      const userId = 'user-123';\n      const success = true;\n      const ip = '192.168.1.1';\n      const userAgent = 'Mozilla/5.0';\n\n      service.logAuth(operation, userId, success, ip, userAgent);\n\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        `Auth: ${operation} - Usuário: ${userId} - Sucesso: ${success}`,\n        {\n          context: 'Authentication',\n          operation,\n          userId,\n          success,\n          ip,\n          userAgent,\n          timestamp: '2025-05-13T18:00:00.000Z',\n        },\n      );\n    });\n\n    it('deve registrar uma operação de autenticação sem sucesso', () => {\n      const operation = 'LOGIN';\n      const userId = 'user-123';\n      const success = false;\n\n      service.logAuth(operation, userId, success);\n\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        `Auth: ${operation} - Usuário: ${userId} - Sucesso: ${success}`,\n        {\n          context: 'Authentication',\n          operation,\n          userId,\n          success,\n          ip: undefined,\n          userAgent: undefined,\n          timestamp: '2025-05-13T18:00:00.000Z',\n        },\n      );\n    });\n  });\n\n  describe('logBusiness', () => {\n    it('deve registrar uma operação de negócio com detalhes', () => {\n      const operation = 'APROVAR';\n      const entity = 'Solicitacao';\n      const entityId = 'solicitacao-123';\n      const userId = 'user-123';\n      const details = { motivo: 'Documentação completa', status: 'APROVADO' };\n\n      service.logBusiness(operation, entity, entityId, userId, details);\n\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        `Business: ${operation} ${entity} ${entityId} - Usuário: ${userId}`,\n        {\n          context: 'Business',\n          operation,\n          entity,\n          entityId,\n          userId,\n          details,\n          timestamp: '2025-05-13T18:00:00.000Z',\n        },\n      );\n    });\n\n    it('deve registrar uma operação de negócio sem detalhes', () => {\n      const operation = 'VISUALIZAR';\n      const entity = 'Beneficio';\n      const entityId = 'beneficio-123';\n      const userId = 'user-123';\n\n      service.logBusiness(operation, entity, entityId, userId);\n\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        `Business: ${operation} ${entity} ${entityId} - Usuário: ${userId}`,\n        {\n          context: 'Business',\n          operation,\n          entity,\n          entityId,\n          userId,\n          details: undefined,\n          timestamp: '2025-05-13T18:00:00.000Z',\n        },\n      );\n    });\n  });\n});\n"],"version":3}