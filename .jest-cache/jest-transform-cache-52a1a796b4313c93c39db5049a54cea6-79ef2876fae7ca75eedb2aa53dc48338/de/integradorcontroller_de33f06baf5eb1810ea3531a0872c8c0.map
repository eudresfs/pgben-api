{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\controllers\\integrador.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAYwB;AACxB,6CAMyB;AACzB,uEAAmE;AACnE,mFAA8E;AAC9E,wEAAmE;AACnE,wEAAmE;AACnE,8DAAyD;AACzD,8DAAyD;AACzD,4EAAuE;AACvE,kEAA6D;AAC7D,4EAAgE;AAEhE,wEAAmE;AACnE,kEAA8D;AAC9D,+EAAkE;AAElE;;;GAGG;AAKI,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAEZ;IACA;IAFnB,YACmB,iBAAoC,EACpC,YAAoC;QADpC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,iBAAY,GAAZ,YAAY,CAAwB;IACpD,CAAC;IAEJ;;OAEG;IAcH,MAAM,CACI,mBAAwC;QAEhD,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;IAC5D,CAAC;IAED;;OAEG;IASH,OAAO;QACL,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;IAC1C,CAAC;IAED;;OAEG;IAWH,OAAO,CACuB,EAAU;QAEtC,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC;IAED;;OAEG;IAYH,MAAM,CACwB,EAAU,EAC9B,mBAAwC;QAEhD,OAAO,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IAQG,AAAN,KAAK,CAAC,MAAM,CAA6B,EAAU;QACjD,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED;;OAEG;IAWH,YAAY,CACkB,EAAU,EACvB,KAAc;QAE7B,OAAO,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;IAED;;OAEG;IAWH,aAAa,CACiB,EAAU;QAEtC,OAAO,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IA0BG,AAAN,KAAK,CAAC,WAAW,CACa,EAAU,EAC9B,cAA8B;QAEtC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;QAEvE,OAAO;YACL,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,SAAS,EAAE,MAAM,CAAC,SAAS;SAC5B,CAAC;IACJ,CAAC;IAED;;OAEG;IAaH,YAAY,CACuB,OAAe,EACxC,cAA8B;QAEtC,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;IACxE,CAAC;CACF,CAAA;AArMY,oDAAoB;AAsB/B;IAbC,IAAA,aAAI,GAAE;IACN,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;IACpD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,+BAA+B;QAC5C,IAAI,EAAE,+CAAqB;KAC5B,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,iBAAiB,EAAE,CAAC;IAC5D,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,uCAAuC;KACrD,CAAC;IAEC,WAAA,IAAA,aAAI,GAAE,CAAA;;yDAAsB,2CAAmB,oBAAnB,2CAAmB;wDAC/C,OAAO,oBAAP,OAAO;kDAET;AAaD;IARC,IAAA,YAAG,GAAE;IACL,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC;IACxD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,6CAA6C;QAC1D,IAAI,EAAE,CAAC,+CAAqB,CAAC;KAC9B,CAAC;;;wDACS,OAAO,oBAAP,OAAO;mDAEjB;AAeD;IAVC,IAAA,YAAG,EAAC,KAAK,CAAC;IACV,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC;IACxD,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,uBAAuB;QACpC,IAAI,EAAE,+CAAqB;KAC5B,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAEpE,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;;;wDAC1B,OAAO,oBAAP,OAAO;mDAET;AAgBD;IAXC,IAAA,cAAK,EAAC,KAAK,CAAC;IACZ,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACnD,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,mCAAmC;QAChD,IAAI,EAAE,+CAAqB;KAC5B,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,iBAAiB,EAAE,CAAC;IAC5D,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAEpE,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;IAC1B,WAAA,IAAA,aAAI,GAAE,CAAA;;iEAAsB,2CAAmB,oBAAnB,2CAAmB;wDAC/C,OAAO,oBAAP,OAAO;kDAET;AAYK;IAPL,IAAA,eAAM,EAAC,KAAK,CAAC;IACb,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,iBAAQ,EAAC,mBAAU,CAAC,UAAU,CAAC;IAC/B,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC;IACjD,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,iCAAiC,EAAE,CAAC;IAC5E,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IACzD,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;;;wDAAc,OAAO,oBAAP,OAAO;kDAE5D;AAeD;IAVC,IAAA,cAAK,EAAC,YAAY,CAAC;IACnB,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC;IAC5D,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,6CAA6C;QAC1D,IAAI,EAAE,+CAAqB;KAC5B,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAEpE,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;IAC1B,WAAA,IAAA,aAAI,EAAC,OAAO,CAAC,CAAA;;;wDACb,OAAO,oBAAP,OAAO;wDAET;AAeD;IAVC,IAAA,YAAG,EAAC,YAAY,CAAC;IACjB,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,wCAAwC,EAAE,CAAC;IACnE,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,uCAAuC;QACpD,IAAI,EAAE,CAAC,qCAAgB,CAAC;KACzB,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAEpE,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;;;wDAC1B,OAAO,oBAAP,OAAO;yDAET;AA8BK;IAzBL,IAAA,aAAI,EAAC,YAAY,CAAC;IAClB,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,uCAAuC,EAAE,CAAC;IAClE,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,0BAA0B;QACvC,MAAM,EAAE;YACN,UAAU,EAAE;gBACV,KAAK,EAAE;oBACL,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,2CAA2C;oBACxD,OAAO,EAAE,yCAAyC;iBACnD;gBACD,SAAS,EAAE;oBACT,IAAI,EAAE,uCAAuC;iBAC9C;aACF;SACF;KACF,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,uCAAuC;KACrD,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAEpE,WAAA,IAAA,cAAK,EAAC,IAAI,EAAE,sBAAa,CAAC,CAAA;IAC1B,WAAA,IAAA,aAAI,GAAE,CAAA;;iEAAiB,iCAAc,oBAAd,iCAAc;;uDAQvC;AAiBD;IAZC,IAAA,cAAK,EAAC,6BAA6B,CAAC;IACpC,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,CAAC;IAClB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC5C,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,kBAAkB,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,kBAAQ,EAAC,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,aAAa,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACzE,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,4BAA4B;QACzC,IAAI,EAAE,qCAAgB;KACvB,CAAC;IACD,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC;IAC9D,IAAA,qBAAW,EAAC,EAAE,MAAM,EAAE,GAAG,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IAE/D,WAAA,IAAA,cAAK,EAAC,SAAS,EAAE,sBAAa,CAAC,CAAA;IAC/B,WAAA,IAAA,aAAI,GAAE,CAAA;;iEAAiB,iCAAc,oBAAd,iCAAc;wDACrC,OAAO,oBAAP,OAAO;wDAET;+BApMU,oBAAoB;IAJhC,IAAA,iBAAO,EAAC,cAAc,CAAC;IACvB,IAAA,mBAAU,EAAC,cAAc,CAAC;IAC1B,IAAA,kBAAS,EAAC,6BAAY,EAAE,wBAAU,CAAC;IACnC,IAAA,uBAAa,GAAE;yDAGwB,sCAAiB,oBAAjB,sCAAiB,oDACtB,iDAAsB,oBAAtB,iDAAsB;GAH5C,oBAAoB,CAqMhC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\controllers\\integrador.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  HttpCode,\n  HttpStatus,\n  ParseUUIDPipe,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { IntegradorService } from '../services/integrador.service';\nimport { IntegradorTokenService } from '../services/integrador-token.service';\nimport { CreateIntegradorDto } from '../dto/create-integrador.dto';\nimport { UpdateIntegradorDto } from '../dto/update-integrador.dto';\nimport { CreateTokenDto } from '../dto/create-token.dto';\nimport { RevokeTokenDto } from '../dto/revoke-token.dto';\nimport { IntegradorResponseDto } from '../dto/integrador-response.dto';\nimport { TokenResponseDto } from '../dto/token-response.dto';\nimport { Roles } from '../../../auth/decorators/role.decorator';\nimport { Role } from '../../../auth/enums/role.enum';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../../auth/guards/roles.guard';\nimport { ROLES } from '../../../shared/constants/roles.constants';\n\n/**\n * Controller para gerenciamento de integradores e seus tokens.\n * Requer autenticação administrativa e papel de ADMIN para acesso.\n */\n@ApiTags('Integradores')\n@Controller('integradores')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\nexport class IntegradorController {\n  constructor(\n    private readonly integradorService: IntegradorService,\n    private readonly tokenService: IntegradorTokenService,\n  ) {}\n\n  /**\n   * Cria um novo integrador.\n   */\n  @Post()\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Cria um novo integrador' })\n  @ApiResponse({\n    status: 201,\n    description: 'Integrador criado com sucesso',\n    type: IntegradorResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  @ApiResponse({\n    status: 409,\n    description: 'Já existe um integrador com este nome',\n  })\n  create(\n    @Body() createIntegradorDto: CreateIntegradorDto,\n  ): Promise<IntegradorResponseDto> {\n    return this.integradorService.create(createIntegradorDto);\n  }\n\n  /**\n   * Lista todos os integradores cadastrados.\n   */\n  @Get()\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Lista todos os integradores' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de integradores retornada com sucesso',\n    type: [IntegradorResponseDto],\n  })\n  findAll(): Promise<IntegradorResponseDto[]> {\n    return this.integradorService.findAll();\n  }\n\n  /**\n   * Obtém detalhes de um integrador específico.\n   */\n  @Get(':id')\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Obtém um integrador pelo ID' })\n  @ApiParam({ name: 'id', description: 'ID do integrador', type: 'string' })\n  @ApiResponse({\n    status: 200,\n    description: 'Integrador encontrado',\n    type: IntegradorResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Integrador não encontrado' })\n  findOne(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise<IntegradorResponseDto> {\n    return this.integradorService.findOne(id);\n  }\n\n  /**\n   * Atualiza dados de um integrador.\n   */\n  @Patch(':id')\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Atualiza um integrador' })\n  @ApiParam({ name: 'id', description: 'ID do integrador', type: 'string' })\n  @ApiResponse({\n    status: 200,\n    description: 'Integrador atualizado com sucesso',\n    type: IntegradorResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  @ApiResponse({ status: 404, description: 'Integrador não encontrado' })\n  update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateIntegradorDto: UpdateIntegradorDto,\n  ): Promise<IntegradorResponseDto> {\n    return this.integradorService.update(id, updateIntegradorDto);\n  }\n\n  /**\n   * Remove um integrador do sistema.\n   */\n  @Delete(':id')\n  @Roles(ROLES.ADMIN)\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Remove um integrador' })\n  @ApiParam({ name: 'id', description: 'ID do integrador', type: 'string' })\n  @ApiResponse({ status: 204, description: 'Integrador removido com sucesso' })\n  @ApiResponse({ status: 404, description: 'Integrador não encontrado' })\n  async remove(@Param('id', ParseUUIDPipe) id: string): Promise<void> {\n    await this.integradorService.remove(id);\n  }\n\n  /**\n   * Ativa ou desativa um integrador.\n   */\n  @Patch(':id/status')\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Ativa ou desativa um integrador' })\n  @ApiParam({ name: 'id', description: 'ID do integrador', type: 'string' })\n  @ApiResponse({\n    status: 200,\n    description: 'Status do integrador atualizado com sucesso',\n    type: IntegradorResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Integrador não encontrado' })\n  toggleStatus(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body('ativo') ativo: boolean,\n  ): Promise<IntegradorResponseDto> {\n    return this.integradorService.toggleAtivo(id, ativo);\n  }\n\n  /**\n   * Lista todos os tokens de um integrador.\n   */\n  @Get(':id/tokens')\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Lista todos os tokens de um integrador' })\n  @ApiParam({ name: 'id', description: 'ID do integrador', type: 'string' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de tokens retornada com sucesso',\n    type: [TokenResponseDto],\n  })\n  @ApiResponse({ status: 404, description: 'Integrador não encontrado' })\n  findAllTokens(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise<TokenResponseDto[]> {\n    return this.tokenService.findAllByIntegrador(id);\n  }\n\n  /**\n   * Cria um novo token para um integrador.\n   */\n  @Post(':id/tokens')\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Cria um novo token para um integrador' })\n  @ApiParam({ name: 'id', description: 'ID do integrador', type: 'string' })\n  @ApiResponse({\n    status: 201,\n    description: 'Token criado com sucesso',\n    schema: {\n      properties: {\n        token: {\n          type: 'string',\n          description: 'Token JWT gerado (exibido apenas uma vez)',\n          example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...',\n        },\n        tokenInfo: {\n          $ref: '#/components/schemas/TokenResponseDto',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou integrador inativo',\n  })\n  @ApiResponse({ status: 404, description: 'Integrador não encontrado' })\n  async createToken(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() createTokenDto: CreateTokenDto,\n  ) {\n    const result = await this.tokenService.createToken(id, createTokenDto);\n\n    return {\n      token: result.token,\n      tokenInfo: result.tokenInfo,\n    };\n  }\n\n  /**\n   * Revoga um token existente.\n   */\n  @Patch(':id/tokens/:tokenId/revogar')\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ summary: 'Revoga um token' })\n  @ApiParam({ name: 'id', description: 'ID do integrador', type: 'string' })\n  @ApiParam({ name: 'tokenId', description: 'ID do token', type: 'string' })\n  @ApiResponse({\n    status: 200,\n    description: 'Token revogado com sucesso',\n    type: TokenResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Token já revogado' })\n  @ApiResponse({ status: 404, description: 'Token não encontrado' })\n  revogarToken(\n    @Param('tokenId', ParseUUIDPipe) tokenId: string,\n    @Body() revokeTokenDto: RevokeTokenDto,\n  ): Promise<TokenResponseDto> {\n    return this.tokenService.revogarToken(tokenId, revokeTokenDto.motivo);\n  }\n}\n"],"version":3}