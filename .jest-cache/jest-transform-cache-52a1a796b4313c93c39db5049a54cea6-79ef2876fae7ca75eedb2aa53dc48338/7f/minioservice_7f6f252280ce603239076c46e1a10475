d8a89416e9bc407e6153ba147df84a9b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MinioService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MinioService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const Minio = __importStar(require("minio"));
const criptografia_service_1 = require("./criptografia.service");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const crypto = __importStar(require("crypto"));
/**
 * Serviço de integração com MinIO
 *
 * Responsável por gerenciar o armazenamento de documentos no MinIO,
 * com suporte a criptografia para dados sensíveis.
 */
let MinioService = MinioService_1 = class MinioService {
    configService;
    criptografiaService;
    logger = new common_1.Logger(MinioService_1.name);
    minioClient;
    bucketName;
    tempDir;
    // Removida lista de documentos sensíveis - agora usa a lista centralizada no CriptografiaService
    constructor(configService, criptografiaService) {
        this.configService = configService;
        this.criptografiaService = criptografiaService;
        // Configuração do cliente MinIO
        const useSSL = this.configService.get('MINIO_USE_SSL') === 'true';
        this.logger.log(`Configurando MinIO com SSL: ${useSSL}`);
        this.minioClient = new Minio.Client({
            endPoint: this.configService.get('MINIO_ENDPOINT', 'localhost'),
            port: this.configService.get('MINIO_PORT', 9000),
            useSSL: useSSL,
            accessKey: this.configService.get('MINIO_ACCESS_KEY', 'minioadmin'),
            secretKey: this.configService.get('MINIO_SECRET_KEY', 'minioadmin'),
        });
        // Nome do bucket para armazenamento de documentos
        this.bucketName = this.configService.get('MINIO_BUCKET_NAME', 'pgben-documentos');
        this.logger.log(`Usando bucket: ${this.bucketName}`);
        // Diretório temporário para arquivos em processamento
        this.tempDir = path.join(os.tmpdir(), 'pgben-temp');
        if (!fs.existsSync(this.tempDir)) {
            fs.mkdirSync(this.tempDir, { recursive: true });
        }
    }
    /**
     * Inicialização do módulo
     * Verifica se o bucket existe e cria se necessário
     */
    async onModuleInit() {
        try {
            const bucketExists = await this.minioClient.bucketExists(this.bucketName);
            if (!bucketExists) {
                await this.minioClient.makeBucket(this.bucketName, 'us-east-1');
                this.logger.log(`Bucket '${this.bucketName}' criado com sucesso`);
            }
            else {
                this.logger.log(`Bucket '${this.bucketName}' já existe`);
            }
        }
        catch (error) {
            this.logger.error(`Erro ao verificar/criar bucket: ${error.message}`);
        }
    }
    /**
     * Verifica se um tipo de documento deve ser criptografado
     * @param tipoDocumento Tipo do documento
     * @returns true se o documento deve ser criptografado, false caso contrário
     */
    documentoRequerCriptografia(tipoDocumento) {
        return this.criptografiaService.deveSerCriptografado(tipoDocumento);
    }
    /**
     * Gera um nome único para o arquivo no MinIO
     * @param nomeOriginal Nome original do arquivo
     * @param solicitacaoId ID da solicitação
     * @param tipoDocumento Tipo do documento
     * @returns Nome único para o arquivo
     */
    gerarNomeArquivo(nomeOriginal, solicitacaoId, tipoDocumento) {
        const extensao = path.extname(nomeOriginal);
        const timestamp = Date.now();
        const randomString = crypto.randomBytes(8).toString('hex');
        return `${solicitacaoId}/${tipoDocumento}/${timestamp}-${randomString}${extensao}`;
    }
    /**
     * Faz upload de um arquivo para o MinIO
     * @param arquivo Buffer do arquivo
     * @param nomeOriginal Nome original do arquivo
     * @param solicitacaoId ID da solicitação
     * @param tipoDocumento Tipo do documento
     * @returns Metadados do arquivo armazenado
     */
    async uploadArquivo(arquivo, nomeOriginal, solicitacaoId, tipoDocumento) {
        // Gerar nome único para o arquivo
        const nomeArquivo = this.gerarNomeArquivo(nomeOriginal, solicitacaoId, tipoDocumento);
        // Calcular hash do arquivo original para verificação de integridade
        const hash = this.criptografiaService.gerarHash(arquivo);
        // Verificar se o documento deve ser criptografado
        const criptografar = this.documentoRequerCriptografia(tipoDocumento);
        let arquivoFinal = arquivo;
        const metadados = {
            'Content-Type': this.detectarMimeType(nomeOriginal),
            'X-Amz-Meta-Original-Name': nomeOriginal,
            'X-Amz-Meta-Hash': hash,
            'X-Amz-Meta-Encrypted': criptografar ? 'true' : 'false',
        };
        // Se o documento for sensível, criptografar
        if (criptografar) {
            try {
                // Criptografar o arquivo
                const { dadosCriptografados, iv, authTag } = this.criptografiaService.criptografarBuffer(arquivo);
                // Usar o arquivo criptografado
                arquivoFinal = dadosCriptografados;
                // Adicionar metadados de criptografia
                metadados['X-Amz-Meta-IV'] = iv.toString('base64');
                metadados['X-Amz-Meta-AuthTag'] = authTag.toString('base64');
                this.logger.log(`Arquivo ${nomeArquivo} criptografado com sucesso`);
            }
            catch (error) {
                this.logger.error(`Erro ao criptografar arquivo: ${error.message}`);
                throw new Error(`Falha ao criptografar documento: ${error.message}`);
            }
        }
        try {
            // Fazer upload do arquivo para o MinIO
            await this.minioClient.putObject(this.bucketName, nomeArquivo, arquivoFinal, arquivoFinal.length, metadados);
            this.logger.log(`Arquivo ${nomeArquivo} enviado para o MinIO com sucesso`);
            return {
                nomeArquivo,
                tamanho: arquivo.length, // Tamanho original, não o criptografado
                hash,
                criptografado: criptografar,
                metadados: {
                    tipoDocumento,
                    solicitacaoId,
                    nomeOriginal,
                },
            };
        }
        catch (error) {
            this.logger.error(`Erro ao enviar arquivo para o MinIO: ${error.message}`);
            throw new Error(`Falha ao armazenar documento: ${error.message}`);
        }
    }
    /**
     * Baixa um arquivo do MinIO
     * @param nomeArquivo Nome do arquivo no MinIO
     * @returns Buffer com o conteúdo original do arquivo (descriptografado se necessário)
     */
    async downloadArquivo(nomeArquivo) {
        try {
            // Obter metadados do arquivo
            const stat = await this.minioClient.statObject(this.bucketName, nomeArquivo);
            // Criar arquivo temporário para download
            const tempFilePath = path.join(this.tempDir, `download-${Date.now()}-${path.basename(nomeArquivo)}`);
            // Baixar arquivo do MinIO
            await this.minioClient.fGetObject(this.bucketName, nomeArquivo, tempFilePath);
            // Ler arquivo baixado
            const arquivoCriptografado = fs.readFileSync(tempFilePath);
            // Verificar se o arquivo está criptografado
            const criptografado = stat.metaData['x-amz-meta-encrypted'] === 'true';
            let arquivoFinal = arquivoCriptografado;
            // Se estiver criptografado, descriptografar
            if (criptografado) {
                const iv = Buffer.from(stat.metaData['x-amz-meta-iv'], 'base64');
                const authTag = Buffer.from(stat.metaData['x-amz-meta-authtag'], 'base64');
                try {
                    arquivoFinal = this.criptografiaService.descriptografarBuffer(arquivoCriptografado, iv, authTag);
                    this.logger.log(`Arquivo ${nomeArquivo} descriptografado com sucesso`);
                }
                catch (error) {
                    this.logger.error(`Erro ao descriptografar arquivo: ${error.message}`);
                    throw new Error(`Falha ao descriptografar documento: ${error.message}`);
                }
            }
            // Verificar integridade do arquivo
            const hashOriginal = stat.metaData['x-amz-meta-hash'];
            const hashCalculado = this.criptografiaService.gerarHash(arquivoFinal);
            if (hashOriginal !== hashCalculado) {
                this.logger.error(`Integridade do arquivo ${nomeArquivo} comprometida`);
                throw new Error('A integridade do documento foi comprometida. O hash não corresponde ao original.');
            }
            // Remover arquivo temporário
            fs.unlinkSync(tempFilePath);
            return {
                arquivo: arquivoFinal,
                metadados: {
                    nomeOriginal: stat.metaData['x-amz-meta-original-name'],
                    contentType: stat.metaData['content-type'],
                    tamanho: arquivoFinal.length,
                    criptografado,
                },
            };
        }
        catch (error) {
            this.logger.error(`Erro ao baixar arquivo do MinIO: ${error.message}`);
            throw new Error(`Falha ao recuperar documento: ${error.message}`);
        }
    }
    /**
     * Remove um arquivo do MinIO
     * @param nomeArquivo Nome do arquivo no MinIO
     */
    async removerArquivo(nomeArquivo) {
        try {
            await this.minioClient.removeObject(this.bucketName, nomeArquivo);
            this.logger.log(`Arquivo ${nomeArquivo} removido do MinIO com sucesso`);
        }
        catch (error) {
            this.logger.error(`Erro ao remover arquivo do MinIO: ${error.message}`);
            throw new Error(`Falha ao remover documento: ${error.message}`);
        }
    }
    /**
     * Detecta o tipo MIME de um arquivo com base na extensão
     * @param nomeArquivo Nome do arquivo
     * @returns Tipo MIME do arquivo
     */
    detectarMimeType(nomeArquivo) {
        const extensao = path.extname(nomeArquivo).toLowerCase();
        const mimeTypes = {
            '.pdf': 'application/pdf',
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg',
            '.png': 'image/png',
            '.gif': 'image/gif',
            '.tiff': 'image/tiff',
            '.tif': 'image/tiff',
            '.doc': 'application/msword',
            '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            '.xls': 'application/vnd.ms-excel',
            '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            '.ppt': 'application/vnd.ms-powerpoint',
            '.pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            '.txt': 'text/plain',
            '.zip': 'application/zip',
            '.rar': 'application/x-rar-compressed',
            '.7z': 'application/x-7z-compressed',
            '.tar': 'application/x-tar',
            '.gz': 'application/gzip',
        };
        return mimeTypes[extensao] || 'application/octet-stream';
    }
    /**
     * Gera uma URL pré-assinada para acesso temporário a um arquivo
     * @param nomeArquivo Nome do arquivo no MinIO
     * @param expiracaoSegundos Tempo de expiração da URL em segundos
     * @returns URL pré-assinada
     */
    async gerarUrlPreAssinada(nomeArquivo, expiracaoSegundos = 3600) {
        try {
            return await this.minioClient.presignedGetObject(this.bucketName, nomeArquivo, expiracaoSegundos);
        }
        catch (error) {
            this.logger.error(`Erro ao gerar URL pré-assinada: ${error.message}`);
            throw new Error(`Falha ao gerar URL para acesso ao documento: ${error.message}`);
        }
    }
};
exports.MinioService = MinioService;
exports.MinioService = MinioService = MinioService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof criptografia_service_1.CriptografiaService !== "undefined" && criptografia_service_1.CriptografiaService) === "function" ? _b : Object])
], MinioService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,