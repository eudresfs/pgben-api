a8dc992457838fb014e5366ce3f002ba
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const auditoria_service_1 = require("../services/auditoria.service");
const create_log_auditoria_dto_1 = require("../dto/create-log-auditoria.dto");
const query_log_auditoria_dto_1 = require("../dto/query-log-auditoria.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
/**
 * Controlador de Auditoria
 *
 * Responsável por expor as funcionalidades de auditoria via API REST.
 * Permite consultar logs de auditoria e gerar relatórios.
 */
let AuditoriaController = class AuditoriaController {
    auditoriaService;
    constructor(auditoriaService) {
        this.auditoriaService = auditoriaService;
    }
    /**
     * Cria um novo log de auditoria manualmente
     * Normalmente os logs são criados automaticamente pelo middleware
     */
    create(createLogAuditoriaDto, req) {
        // Adiciona informações do usuário logado
        if (!createLogAuditoriaDto.usuario_id && req.user) {
            createLogAuditoriaDto.usuario_id = req.user.id;
        }
        // Adiciona informações da requisição
        if (!createLogAuditoriaDto.ip_origem) {
            createLogAuditoriaDto.ip_origem = req.ip;
        }
        if (!createLogAuditoriaDto.user_agent) {
            createLogAuditoriaDto.user_agent = req.headers['user-agent'];
        }
        return this.auditoriaService.create(createLogAuditoriaDto);
    }
    /**
     * Busca logs de auditoria com base nos filtros fornecidos
     */
    findAll(queryParams) {
        return this.auditoriaService.findAll(queryParams);
    }
    /**
     * Busca um log de auditoria pelo ID
     */
    findOne(id) {
        return this.auditoriaService.findOne(id);
    }
    /**
     * Busca logs de auditoria por entidade
     */
    findByEntidade(entidade, id) {
        return this.auditoriaService.findByEntidade(entidade, id);
    }
    /**
     * Busca logs de auditoria por usuário
     */
    findByUsuario(id) {
        return this.auditoriaService.findByUsuario(id);
    }
    /**
     * Gera relatório de acessos a dados sensíveis por período
     */
    relatorioAcessosDadosSensiveis(dataInicial, dataFinal) {
        return this.auditoriaService.relatorioAcessosDadosSensiveis(new Date(dataInicial), new Date(dataFinal));
    }
};
exports.AuditoriaController = AuditoriaController;
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.criar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Cria um novo log de auditoria manualmente' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Log de auditoria criado com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_log_auditoria_dto_1.CreateLogAuditoriaDto !== "undefined" && create_log_auditoria_dto_1.CreateLogAuditoriaDto) === "function" ? _b : Object, Object]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.listar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca logs de auditoria' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Lista de logs de auditoria' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof query_log_auditoria_dto_1.QueryLogAuditoriaDto !== "undefined" && query_log_auditoria_dto_1.QueryLogAuditoriaDto) === "function" ? _c : Object]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca um log de auditoria pelo ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do log de auditoria' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Log de auditoria encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Log de auditoria não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findOne", null);
__decorate([
    (0, common_1.Get)('entidade/:entidade/:id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.entidade.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca logs de auditoria por entidade' }),
    (0, swagger_1.ApiParam)({ name: 'entidade', description: 'Nome da entidade' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID da entidade' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de logs de auditoria da entidade',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('entidade')),
    __param(1, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findByEntidade", null);
__decorate([
    (0, common_1.Get)('usuario/:id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.log.usuario.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Busca logs de auditoria por usuário' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do usuário' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de logs de auditoria do usuário',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "findByUsuario", null);
__decorate([
    (0, common_1.Get)('relatorios/dados-sensiveis'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'auditoria.relatorio.dados-sensiveis',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Gera relatório de acessos a dados sensíveis por período',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'data_inicial',
        description: 'Data inicial (formato ISO)',
        required: true,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'data_final',
        description: 'Data final (formato ISO)',
        required: true,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Relatório de acessos a dados sensíveis',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    __param(0, (0, common_1.Query)('data_inicial')),
    __param(1, (0, common_1.Query)('data_final')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", void 0)
], AuditoriaController.prototype, "relatorioAcessosDadosSensiveis", null);
exports.AuditoriaController = AuditoriaController = __decorate([
    (0, swagger_1.ApiTags)('Auditoria'),
    (0, common_1.Controller)('auditoria'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof auditoria_service_1.AuditoriaService !== "undefined" && auditoria_service_1.AuditoriaService) === "function" ? _a : Object])
], AuditoriaController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,