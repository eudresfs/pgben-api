{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\adapters\\usuario-adapter.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\adapters\\usuario-adapter.ts"],"sourcesContent":["import { Expose } from 'class-transformer';\nimport { Usuario } from '../../entities/usuario.entity';\nimport { RoleType } from '../../shared/constants/roles.constants';\nimport { Permission } from '../../entities/permission.entity';\nimport { ScopeType, TipoEscopo } from '../../entities/user-permission.entity';\n\n/**\n * DTO para saída de usuário compatível com o serviço de autenticação\n */\nexport class UserOutput {\n  @Expose()\n  id: string | number;\n\n  @Expose()\n  name: string;\n\n  @Expose()\n  username: string;\n\n  @Expose()\n  email: string;\n\n  @Expose()\n  isAccountDisabled: boolean;\n\n  @Expose()\n  created_at: string;\n\n  @Expose()\n  updated_at: string;\n\n  @Expose()\n  roles: RoleType[];\n}\n\n/**\n * Claims do token de acesso do usuário\n */\nexport interface UserAccessTokenClaims {\n  id: string | number;\n  username: string;\n  roles: RoleType[];\n  permissions?: string[];\n  permissionScopes?: Record<string, string>;\n}\n\n/**\n * Adaptador para converter a entidade Usuario para o formato esperado pelo serviço de autenticação\n */\nexport class UsuarioAdapter {\n  /**\n   * Converte um Usuario para UserOutput\n   */\n  static toUserOutput(usuario: Usuario): UserOutput {\n    const userOutput = new UserOutput();\n    userOutput.id = usuario.id;\n    userOutput.name = usuario.nome;\n    userOutput.username = usuario.email; // Usando email como username\n    userOutput.email = usuario.email;\n    userOutput.isAccountDisabled = usuario.status === 'inativo';\n    userOutput.created_at =\n      usuario.created_at?.toISOString() || new Date().toISOString();\n    userOutput.updated_at =\n      usuario.updated_at?.toISOString() || new Date().toISOString();\n    // Obter o nome da role a partir da entidade Role\n    userOutput.roles = usuario.role ? [usuario.role.nome as RoleType] : [];\n\n    return userOutput;\n  }\n\n  /**\n   * Converte um Usuario para UserAccessTokenClaims\n   *\n   * @param usuario Usuário a ser convertido\n   * @param permissions Lista de permissões do usuário (opcional)\n   * @param permissionScopes Mapeamento de permissões para escopos (opcional)\n   * @returns Claims do token de acesso do usuário\n   */\n  static toUserAccessTokenClaims(\n    usuario: Usuario,\n    permissions?: Permission[],\n    permissionScopes?: Record<string, TipoEscopo | string>,\n  ): UserAccessTokenClaims {\n    const claims: UserAccessTokenClaims = {\n      id: usuario.id,\n      username: usuario.email, // Usando email como username\n      roles: usuario.role ? [usuario.role.nome as RoleType] : [],\n    };\n\n    // Adiciona permissões se disponíveis\n    if (permissions && permissions.length > 0) {\n      claims.permissions = permissions.map((p) => p.nome);\n    }\n\n    // Adiciona escopos de permissões se disponíveis\n    if (permissionScopes && Object.keys(permissionScopes).length > 0) {\n      claims.permissionScopes = {};\n      for (const [permissionId, scopeType] of Object.entries(\n        permissionScopes,\n      )) {\n        claims.permissionScopes[permissionId] = scopeType.toString();\n      }\n    }\n\n    return claims;\n  }\n}\n"],"version":3}