{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\info-bancaria.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\info-bancaria.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  Query,\n  UseGuards,\n  ParseUUIDPipe,\n  ValidationPipe,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { InfoBancariaService } from '../services/info-bancaria.service';\nimport { CreateInfoBancariaDto } from '../dto/create-info-bancaria.dto';\nimport { UpdateInfoBancariaDto } from '../dto/update-info-bancaria.dto';\nimport { InfoBancariaResponseDto } from '../dto/info-bancaria-response.dto';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { TipoEscopo } from '@/entities/user-permission.entity';\n\n/**\n * Controller para gerenciamento de informações bancárias\n *\n * Responsável pelos endpoints relacionados às informações bancárias dos cidadãos,\n * incluindo contas poupança social do Banco do Brasil e dados PIX.\n */\n@ApiTags('Cidadão')\n@Controller('cidadao/info-bancaria')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class InfoBancariaController {\n  constructor(private readonly infoBancariaService: InfoBancariaService) {}\n\n  /**\n   * Cria uma nova informação bancária\n   */\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @RequiresPermission({\n    permissionName: 'info_bancaria.criar',\n    scopeType: TipoEscopo.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Criar informação bancária',\n    description:\n      'Cria uma nova informação bancária para um cidadão, incluindo dados de conta poupança social e PIX',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Informação bancária criada com sucesso',\n    type: InfoBancariaResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos fornecidos',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão não encontrado',\n  })\n  @ApiResponse({\n    status: 409,\n    description:\n      'Cidadão já possui informação bancária ativa ou chave PIX já está em uso',\n  })\n  async create(\n    @Body(ValidationPipe) createInfoBancariaDto: CreateInfoBancariaDto,\n  ): Promise<InfoBancariaResponseDto> {\n    return await this.infoBancariaService.create(createInfoBancariaDto);\n  }\n\n  /**\n   * Lista todas as informações bancárias com filtros\n   */\n  @Get()\n  @RequiresPermission({\n    permissionName: 'info_bancaria.visualizar',\n    scopeType: TipoEscopo.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Listar informações bancárias',\n    description:\n      'Lista todas as informações bancárias com filtros opcionais e paginação',\n  })\n  @ApiQuery({\n    name: 'skip',\n    required: false,\n    type: Number,\n    description: 'Número de registros para pular (paginação)',\n    example: 0,\n  })\n  @ApiQuery({\n    name: 'take',\n    required: false,\n    type: Number,\n    description: 'Número de registros para retornar',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'cidadao_id',\n    required: false,\n    type: String,\n    description: 'Filtrar por ID do cidadão',\n  })\n  @ApiQuery({\n    name: 'banco',\n    required: false,\n    type: String,\n    description: 'Filtrar por código do banco',\n    example: '001',\n  })\n  @ApiQuery({\n    name: 'ativo',\n    required: false,\n    type: Boolean,\n    description: 'Filtrar por status ativo',\n    example: true,\n  })\n  @ApiQuery({\n    name: 'includeRelations',\n    required: false,\n    type: Boolean,\n    description: 'Incluir dados do cidadão',\n    example: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de informações bancárias retornada com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        data: {\n          type: 'array',\n          items: { $ref: '#/components/schemas/InfoBancariaResponseDto' },\n        },\n        total: {\n          type: 'number',\n          description: 'Total de registros encontrados',\n        },\n      },\n    },\n  })\n  async findAll(\n    @Query('skip') skip?: number,\n    @Query('take') take?: number,\n    @Query('cidadao_id') cidadao_id?: string,\n    @Query('banco') banco?: string,\n    @Query('ativo') ativo?: boolean,\n    @Query('includeRelations') includeRelations?: boolean,\n  ): Promise<{ data: InfoBancariaResponseDto[]; total: number }> {\n    return await this.infoBancariaService.findAll({\n      skip: skip ? Number(skip) : undefined,\n      take: take ? Number(take) : undefined,\n      cidadao_id,\n      banco,\n      ativo,\n      includeRelations,\n    });\n  }\n\n  /**\n   * Busca informação bancária por ID\n   */\n  @Get(':id')\n  @RequiresPermission({\n    permissionName: 'info_bancaria.visualizar',\n    scopeType: TipoEscopo.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Buscar informação bancária por ID',\n    description: 'Retorna uma informação bancária específica pelo seu ID',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID da informação bancária',\n    type: String,\n    format: 'uuid',\n  })\n  @ApiQuery({\n    name: 'includeRelations',\n    required: false,\n    type: Boolean,\n    description: 'Incluir dados do cidadão',\n    example: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Informação bancária encontrada',\n    type: InfoBancariaResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Informação bancária não encontrada',\n  })\n  async findOne(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Query('includeRelations') includeRelations?: boolean,\n  ): Promise<InfoBancariaResponseDto> {\n    return await this.infoBancariaService.findById(id, includeRelations);\n  }\n\n  /**\n   * Busca informação bancária por ID do cidadão\n   */\n  @Get('cidadao/:cidadaoId')\n  @RequiresPermission({\n    permissionName: 'info_bancaria.visualizar',\n    scopeType: TipoEscopo.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Buscar informação bancária por ID do cidadão',\n    description: 'Retorna a informação bancária ativa de um cidadão específico',\n  })\n  @ApiParam({\n    name: 'cidadaoId',\n    description: 'ID do cidadão',\n    type: String,\n    format: 'uuid',\n  })\n  @ApiQuery({\n    name: 'includeRelations',\n    required: false,\n    type: Boolean,\n    description: 'Incluir dados do cidadão',\n    example: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Informação bancária encontrada',\n    type: InfoBancariaResponseDto,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Cidadão não possui informação bancária',\n    schema: { type: 'null' },\n  })\n  async findByCidadaoId(\n    @Param('cidadaoId', ParseUUIDPipe) cidadaoId: string,\n    @Query('includeRelations') includeRelations?: boolean,\n  ): Promise<InfoBancariaResponseDto | null> {\n    return await this.infoBancariaService.findByCidadaoId(\n      cidadaoId,\n      includeRelations,\n    );\n  }\n\n  /**\n   * Atualiza informação bancária\n   */\n  @Patch(':id')\n  @RequiresPermission({\n    permissionName: 'info_bancaria.atualizar',\n    scopeType: TipoEscopo.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Atualizar informação bancária',\n    description: 'Atualiza uma informação bancária existente',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID da informação bancária',\n    type: String,\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Informação bancária atualizada com sucesso',\n    type: InfoBancariaResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos fornecidos',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Informação bancária não encontrada',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Chave PIX já está em uso',\n  })\n  async update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body(ValidationPipe) updateInfoBancariaDto: UpdateInfoBancariaDto,\n  ): Promise<InfoBancariaResponseDto> {\n    return await this.infoBancariaService.update(id, updateInfoBancariaDto);\n  }\n\n  /**\n   * Desativa informação bancária\n   */\n  @Patch(':id/deactivate')\n  @RequiresPermission({\n    permissionName: 'info_bancaria.atualizar',\n    scopeType: TipoEscopo.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Desativar informação bancária',\n    description: 'Desativa uma informação bancária sem removê-la do sistema',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID da informação bancária',\n    type: String,\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Informação bancária desativada com sucesso',\n    type: InfoBancariaResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Informação bancária não encontrada',\n  })\n  async deactivate(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise<InfoBancariaResponseDto> {\n    return await this.infoBancariaService.deactivate(id);\n  }\n\n  /**\n   * Remove informação bancária\n   */\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @RequiresPermission({\n    permissionName: 'info_bancaria.excluir',\n    scopeType: TipoEscopo.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Remover informação bancária',\n    description: 'Remove uma informação bancária do sistema (soft delete)',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID da informação bancária',\n    type: String,\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Informação bancária removida com sucesso',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Informação bancária não encontrada',\n  })\n  async remove(@Param('id', ParseUUIDPipe) id: string): Promise<void> {\n    return await this.infoBancariaService.remove(id);\n  }\n}\n"],"version":3}