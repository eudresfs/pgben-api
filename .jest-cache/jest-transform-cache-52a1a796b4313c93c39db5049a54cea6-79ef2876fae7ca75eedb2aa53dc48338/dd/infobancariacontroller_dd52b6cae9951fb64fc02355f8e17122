c1e5f5993f23c1dec1fb7ad1af30ab5c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfoBancariaController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const info_bancaria_service_1 = require("../services/info-bancaria.service");
const create_info_bancaria_dto_1 = require("../dto/create-info-bancaria.dto");
const update_info_bancaria_dto_1 = require("../dto/update-info-bancaria.dto");
const info_bancaria_response_dto_1 = require("../dto/info-bancaria-response.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("@/entities/user-permission.entity");
/**
 * Controller para gerenciamento de informações bancárias
 *
 * Responsável pelos endpoints relacionados às informações bancárias dos cidadãos,
 * incluindo contas poupança social do Banco do Brasil e dados PIX.
 */
let InfoBancariaController = class InfoBancariaController {
    infoBancariaService;
    constructor(infoBancariaService) {
        this.infoBancariaService = infoBancariaService;
    }
    /**
     * Cria uma nova informação bancária
     */
    async create(createInfoBancariaDto) {
        return await this.infoBancariaService.create(createInfoBancariaDto);
    }
    /**
     * Lista todas as informações bancárias com filtros
     */
    async findAll(skip, take, cidadao_id, banco, ativo, includeRelations) {
        return await this.infoBancariaService.findAll({
            skip: skip ? Number(skip) : undefined,
            take: take ? Number(take) : undefined,
            cidadao_id,
            banco,
            ativo,
            includeRelations,
        });
    }
    /**
     * Busca informação bancária por ID
     */
    async findOne(id, includeRelations) {
        return await this.infoBancariaService.findById(id, includeRelations);
    }
    /**
     * Busca informação bancária por ID do cidadão
     */
    async findByCidadaoId(cidadaoId, includeRelations) {
        return await this.infoBancariaService.findByCidadaoId(cidadaoId, includeRelations);
    }
    /**
     * Atualiza informação bancária
     */
    async update(id, updateInfoBancariaDto) {
        return await this.infoBancariaService.update(id, updateInfoBancariaDto);
    }
    /**
     * Desativa informação bancária
     */
    async deactivate(id) {
        return await this.infoBancariaService.deactivate(id);
    }
    /**
     * Remove informação bancária
     */
    async remove(id) {
        return await this.infoBancariaService.remove(id);
    }
};
exports.InfoBancariaController = InfoBancariaController;
__decorate([
    (0, common_1.Post)(),
    (0, common_1.HttpCode)(common_1.HttpStatus.CREATED),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'info_bancaria.criar',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Criar informação bancária',
        description: 'Cria uma nova informação bancária para um cidadão, incluindo dados de conta poupança social e PIX',
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Informação bancária criada com sucesso',
        type: info_bancaria_response_dto_1.InfoBancariaResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos fornecidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão não encontrado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Cidadão já possui informação bancária ativa ou chave PIX já está em uso',
    }),
    __param(0, (0, common_1.Body)(common_1.ValidationPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_info_bancaria_dto_1.CreateInfoBancariaDto !== "undefined" && create_info_bancaria_dto_1.CreateInfoBancariaDto) === "function" ? _b : Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], InfoBancariaController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'info_bancaria.visualizar',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Listar informações bancárias',
        description: 'Lista todas as informações bancárias com filtros opcionais e paginação',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'skip',
        required: false,
        type: Number,
        description: 'Número de registros para pular (paginação)',
        example: 0,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'take',
        required: false,
        type: Number,
        description: 'Número de registros para retornar',
        example: 10,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'cidadao_id',
        required: false,
        type: String,
        description: 'Filtrar por ID do cidadão',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'banco',
        required: false,
        type: String,
        description: 'Filtrar por código do banco',
        example: '001',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'ativo',
        required: false,
        type: Boolean,
        description: 'Filtrar por status ativo',
        example: true,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'includeRelations',
        required: false,
        type: Boolean,
        description: 'Incluir dados do cidadão',
        example: false,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de informações bancárias retornada com sucesso',
        schema: {
            type: 'object',
            properties: {
                data: {
                    type: 'array',
                    items: { $ref: '#/components/schemas/InfoBancariaResponseDto' },
                },
                total: {
                    type: 'number',
                    description: 'Total de registros encontrados',
                },
            },
        },
    }),
    __param(0, (0, common_1.Query)('skip')),
    __param(1, (0, common_1.Query)('take')),
    __param(2, (0, common_1.Query)('cidadao_id')),
    __param(3, (0, common_1.Query)('banco')),
    __param(4, (0, common_1.Query)('ativo')),
    __param(5, (0, common_1.Query)('includeRelations')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number, String, String, Boolean, Boolean]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], InfoBancariaController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'info_bancaria.visualizar',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar informação bancária por ID',
        description: 'Retorna uma informação bancária específica pelo seu ID',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da informação bancária',
        type: String,
        format: 'uuid',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'includeRelations',
        required: false,
        type: Boolean,
        description: 'Incluir dados do cidadão',
        example: false,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Informação bancária encontrada',
        type: info_bancaria_response_dto_1.InfoBancariaResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Informação bancária não encontrada',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Query)('includeRelations')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Boolean]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], InfoBancariaController.prototype, "findOne", null);
__decorate([
    (0, common_1.Get)('cidadao/:cidadaoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'info_bancaria.visualizar',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar informação bancária por ID do cidadão',
        description: 'Retorna a informação bancária ativa de um cidadão específico',
    }),
    (0, swagger_1.ApiParam)({
        name: 'cidadaoId',
        description: 'ID do cidadão',
        type: String,
        format: 'uuid',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'includeRelations',
        required: false,
        type: Boolean,
        description: 'Incluir dados do cidadão',
        example: false,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Informação bancária encontrada',
        type: info_bancaria_response_dto_1.InfoBancariaResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Cidadão não possui informação bancária',
        schema: { type: 'null' },
    }),
    __param(0, (0, common_1.Param)('cidadaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Query)('includeRelations')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Boolean]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], InfoBancariaController.prototype, "findByCidadaoId", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'info_bancaria.atualizar',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualizar informação bancária',
        description: 'Atualiza uma informação bancária existente',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da informação bancária',
        type: String,
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Informação bancária atualizada com sucesso',
        type: info_bancaria_response_dto_1.InfoBancariaResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos fornecidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Informação bancária não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Chave PIX já está em uso',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)(common_1.ValidationPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_g = typeof update_info_bancaria_dto_1.UpdateInfoBancariaDto !== "undefined" && update_info_bancaria_dto_1.UpdateInfoBancariaDto) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], InfoBancariaController.prototype, "update", null);
__decorate([
    (0, common_1.Patch)(':id/deactivate'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'info_bancaria.atualizar',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Desativar informação bancária',
        description: 'Desativa uma informação bancária sem removê-la do sistema',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da informação bancária',
        type: String,
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Informação bancária desativada com sucesso',
        type: info_bancaria_response_dto_1.InfoBancariaResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Informação bancária não encontrada',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], InfoBancariaController.prototype, "deactivate", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'info_bancaria.excluir',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Remover informação bancária',
        description: 'Remove uma informação bancária do sistema (soft delete)',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da informação bancária',
        type: String,
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Informação bancária removida com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Informação bancária não encontrada',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], InfoBancariaController.prototype, "remove", null);
exports.InfoBancariaController = InfoBancariaController = __decorate([
    (0, swagger_1.ApiTags)('Cidadão'),
    (0, common_1.Controller)('cidadao/info-bancaria'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof info_bancaria_service_1.InfoBancariaService !== "undefined" && info_bancaria_service_1.InfoBancariaService) === "function" ? _a : Object])
], InfoBancariaController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,