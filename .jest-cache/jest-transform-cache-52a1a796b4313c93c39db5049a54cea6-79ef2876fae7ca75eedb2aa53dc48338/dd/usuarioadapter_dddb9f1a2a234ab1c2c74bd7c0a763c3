8f37c79ea0635e3bc1da8adcdce121b4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsuarioAdapter = exports.UserOutput = void 0;
const class_transformer_1 = require("class-transformer");
/**
 * DTO para saída de usuário compatível com o serviço de autenticação
 */
class UserOutput {
    id;
    name;
    username;
    email;
    isAccountDisabled;
    created_at;
    updated_at;
    roles;
}
exports.UserOutput = UserOutput;
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", Object)
], UserOutput.prototype, "id", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], UserOutput.prototype, "name", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], UserOutput.prototype, "username", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], UserOutput.prototype, "email", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", Boolean)
], UserOutput.prototype, "isAccountDisabled", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], UserOutput.prototype, "created_at", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", String)
], UserOutput.prototype, "updated_at", void 0);
__decorate([
    (0, class_transformer_1.Expose)(),
    __metadata("design:type", Array)
], UserOutput.prototype, "roles", void 0);
/**
 * Adaptador para converter a entidade Usuario para o formato esperado pelo serviço de autenticação
 */
class UsuarioAdapter {
    /**
     * Converte um Usuario para UserOutput
     */
    static toUserOutput(usuario) {
        const userOutput = new UserOutput();
        userOutput.id = usuario.id;
        userOutput.name = usuario.nome;
        userOutput.username = usuario.email; // Usando email como username
        userOutput.email = usuario.email;
        userOutput.isAccountDisabled = usuario.status === 'inativo';
        userOutput.created_at =
            usuario.created_at?.toISOString() || new Date().toISOString();
        userOutput.updated_at =
            usuario.updated_at?.toISOString() || new Date().toISOString();
        // Obter o nome da role a partir da entidade Role
        userOutput.roles = usuario.role ? [usuario.role.nome] : [];
        return userOutput;
    }
    /**
     * Converte um Usuario para UserAccessTokenClaims
     *
     * @param usuario Usuário a ser convertido
     * @param permissions Lista de permissões do usuário (opcional)
     * @param permissionScopes Mapeamento de permissões para escopos (opcional)
     * @returns Claims do token de acesso do usuário
     */
    static toUserAccessTokenClaims(usuario, permissions, permissionScopes) {
        const claims = {
            id: usuario.id,
            username: usuario.email, // Usando email como username
            roles: usuario.role ? [usuario.role.nome] : [],
        };
        // Adiciona permissões se disponíveis
        if (permissions && permissions.length > 0) {
            claims.permissions = permissions.map((p) => p.nome);
        }
        // Adiciona escopos de permissões se disponíveis
        if (permissionScopes && Object.keys(permissionScopes).length > 0) {
            claims.permissionScopes = {};
            for (const [permissionId, scopeType] of Object.entries(permissionScopes)) {
                claims.permissionScopes[permissionId] = scopeType.toString();
            }
        }
        return claims;
    }
}
exports.UsuarioAdapter = UsuarioAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXGFkYXB0ZXJzXFx1c3VhcmlvLWFkYXB0ZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEseURBQTJDO0FBTTNDOztHQUVHO0FBQ0gsTUFBYSxVQUFVO0lBRXJCLEVBQUUsQ0FBa0I7SUFHcEIsSUFBSSxDQUFTO0lBR2IsUUFBUSxDQUFTO0lBR2pCLEtBQUssQ0FBUztJQUdkLGlCQUFpQixDQUFVO0lBRzNCLFVBQVUsQ0FBUztJQUduQixVQUFVLENBQVM7SUFHbkIsS0FBSyxDQUFhO0NBQ25CO0FBeEJELGdDQXdCQztBQXRCQztJQURDLElBQUEsMEJBQU0sR0FBRTs7c0NBQ1c7QUFHcEI7SUFEQyxJQUFBLDBCQUFNLEdBQUU7O3dDQUNJO0FBR2I7SUFEQyxJQUFBLDBCQUFNLEdBQUU7OzRDQUNRO0FBR2pCO0lBREMsSUFBQSwwQkFBTSxHQUFFOzt5Q0FDSztBQUdkO0lBREMsSUFBQSwwQkFBTSxHQUFFOztxREFDa0I7QUFHM0I7SUFEQyxJQUFBLDBCQUFNLEdBQUU7OzhDQUNVO0FBR25CO0lBREMsSUFBQSwwQkFBTSxHQUFFOzs4Q0FDVTtBQUduQjtJQURDLElBQUEsMEJBQU0sR0FBRTs7eUNBQ1M7QUFjcEI7O0dBRUc7QUFDSCxNQUFhLGNBQWM7SUFDekI7O09BRUc7SUFDSCxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQWdCO1FBQ2xDLE1BQU0sVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDcEMsVUFBVSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQzNCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMvQixVQUFVLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyw2QkFBNkI7UUFDbEUsVUFBVSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ2pDLFVBQVUsQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQztRQUM1RCxVQUFVLENBQUMsVUFBVTtZQUNuQixPQUFPLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDaEUsVUFBVSxDQUFDLFVBQVU7WUFDbkIsT0FBTyxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2hFLGlEQUFpRDtRQUNqRCxVQUFVLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUV2RSxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILE1BQU0sQ0FBQyx1QkFBdUIsQ0FDNUIsT0FBZ0IsRUFDaEIsV0FBMEIsRUFDMUIsZ0JBQXNEO1FBRXRELE1BQU0sTUFBTSxHQUEwQjtZQUNwQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEVBQUU7WUFDZCxRQUFRLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSw2QkFBNkI7WUFDdEQsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7U0FDM0QsQ0FBQztRQUVGLHFDQUFxQztRQUNyQyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFFRCxnREFBZ0Q7UUFDaEQsSUFBSSxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2pFLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7WUFDN0IsS0FBSyxNQUFNLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQ3BELGdCQUFnQixDQUNqQixFQUFFLENBQUM7Z0JBQ0YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMvRCxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRjtBQXpERCx3Q0F5REMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXGFkYXB0ZXJzXFx1c3VhcmlvLWFkYXB0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwb3NlIH0gZnJvbSAnY2xhc3MtdHJhbnNmb3JtZXInO1xuaW1wb3J0IHsgVXN1YXJpbyB9IGZyb20gJy4uLy4uL2VudGl0aWVzL3VzdWFyaW8uZW50aXR5JztcbmltcG9ydCB7IFJvbGVUeXBlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9yb2xlcy5jb25zdGFudHMnO1xuaW1wb3J0IHsgUGVybWlzc2lvbiB9IGZyb20gJy4uLy4uL2VudGl0aWVzL3Blcm1pc3Npb24uZW50aXR5JztcbmltcG9ydCB7IFNjb3BlVHlwZSwgVGlwb0VzY29wbyB9IGZyb20gJy4uLy4uL2VudGl0aWVzL3VzZXItcGVybWlzc2lvbi5lbnRpdHknO1xuXG4vKipcbiAqIERUTyBwYXJhIHNhw61kYSBkZSB1c3XDoXJpbyBjb21wYXTDrXZlbCBjb20gbyBzZXJ2acOnbyBkZSBhdXRlbnRpY2HDp8Ojb1xuICovXG5leHBvcnQgY2xhc3MgVXNlck91dHB1dCB7XG4gIEBFeHBvc2UoKVxuICBpZDogc3RyaW5nIHwgbnVtYmVyO1xuXG4gIEBFeHBvc2UoKVxuICBuYW1lOiBzdHJpbmc7XG5cbiAgQEV4cG9zZSgpXG4gIHVzZXJuYW1lOiBzdHJpbmc7XG5cbiAgQEV4cG9zZSgpXG4gIGVtYWlsOiBzdHJpbmc7XG5cbiAgQEV4cG9zZSgpXG4gIGlzQWNjb3VudERpc2FibGVkOiBib29sZWFuO1xuXG4gIEBFeHBvc2UoKVxuICBjcmVhdGVkX2F0OiBzdHJpbmc7XG5cbiAgQEV4cG9zZSgpXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZztcblxuICBARXhwb3NlKClcbiAgcm9sZXM6IFJvbGVUeXBlW107XG59XG5cbi8qKlxuICogQ2xhaW1zIGRvIHRva2VuIGRlIGFjZXNzbyBkbyB1c3XDoXJpb1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJBY2Nlc3NUb2tlbkNsYWltcyB7XG4gIGlkOiBzdHJpbmcgfCBudW1iZXI7XG4gIHVzZXJuYW1lOiBzdHJpbmc7XG4gIHJvbGVzOiBSb2xlVHlwZVtdO1xuICBwZXJtaXNzaW9ucz86IHN0cmluZ1tdO1xuICBwZXJtaXNzaW9uU2NvcGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbn1cblxuLyoqXG4gKiBBZGFwdGFkb3IgcGFyYSBjb252ZXJ0ZXIgYSBlbnRpZGFkZSBVc3VhcmlvIHBhcmEgbyBmb3JtYXRvIGVzcGVyYWRvIHBlbG8gc2VydmnDp28gZGUgYXV0ZW50aWNhw6fDo29cbiAqL1xuZXhwb3J0IGNsYXNzIFVzdWFyaW9BZGFwdGVyIHtcbiAgLyoqXG4gICAqIENvbnZlcnRlIHVtIFVzdWFyaW8gcGFyYSBVc2VyT3V0cHV0XG4gICAqL1xuICBzdGF0aWMgdG9Vc2VyT3V0cHV0KHVzdWFyaW86IFVzdWFyaW8pOiBVc2VyT3V0cHV0IHtcbiAgICBjb25zdCB1c2VyT3V0cHV0ID0gbmV3IFVzZXJPdXRwdXQoKTtcbiAgICB1c2VyT3V0cHV0LmlkID0gdXN1YXJpby5pZDtcbiAgICB1c2VyT3V0cHV0Lm5hbWUgPSB1c3VhcmlvLm5vbWU7XG4gICAgdXNlck91dHB1dC51c2VybmFtZSA9IHVzdWFyaW8uZW1haWw7IC8vIFVzYW5kbyBlbWFpbCBjb21vIHVzZXJuYW1lXG4gICAgdXNlck91dHB1dC5lbWFpbCA9IHVzdWFyaW8uZW1haWw7XG4gICAgdXNlck91dHB1dC5pc0FjY291bnREaXNhYmxlZCA9IHVzdWFyaW8uc3RhdHVzID09PSAnaW5hdGl2byc7XG4gICAgdXNlck91dHB1dC5jcmVhdGVkX2F0ID1cbiAgICAgIHVzdWFyaW8uY3JlYXRlZF9hdD8udG9JU09TdHJpbmcoKSB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgdXNlck91dHB1dC51cGRhdGVkX2F0ID1cbiAgICAgIHVzdWFyaW8udXBkYXRlZF9hdD8udG9JU09TdHJpbmcoKSB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgLy8gT2J0ZXIgbyBub21lIGRhIHJvbGUgYSBwYXJ0aXIgZGEgZW50aWRhZGUgUm9sZVxuICAgIHVzZXJPdXRwdXQucm9sZXMgPSB1c3VhcmlvLnJvbGUgPyBbdXN1YXJpby5yb2xlLm5vbWUgYXMgUm9sZVR5cGVdIDogW107XG5cbiAgICByZXR1cm4gdXNlck91dHB1dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0ZSB1bSBVc3VhcmlvIHBhcmEgVXNlckFjY2Vzc1Rva2VuQ2xhaW1zXG4gICAqXG4gICAqIEBwYXJhbSB1c3VhcmlvIFVzdcOhcmlvIGEgc2VyIGNvbnZlcnRpZG9cbiAgICogQHBhcmFtIHBlcm1pc3Npb25zIExpc3RhIGRlIHBlcm1pc3PDtWVzIGRvIHVzdcOhcmlvIChvcGNpb25hbClcbiAgICogQHBhcmFtIHBlcm1pc3Npb25TY29wZXMgTWFwZWFtZW50byBkZSBwZXJtaXNzw7VlcyBwYXJhIGVzY29wb3MgKG9wY2lvbmFsKVxuICAgKiBAcmV0dXJucyBDbGFpbXMgZG8gdG9rZW4gZGUgYWNlc3NvIGRvIHVzdcOhcmlvXG4gICAqL1xuICBzdGF0aWMgdG9Vc2VyQWNjZXNzVG9rZW5DbGFpbXMoXG4gICAgdXN1YXJpbzogVXN1YXJpbyxcbiAgICBwZXJtaXNzaW9ucz86IFBlcm1pc3Npb25bXSxcbiAgICBwZXJtaXNzaW9uU2NvcGVzPzogUmVjb3JkPHN0cmluZywgVGlwb0VzY29wbyB8IHN0cmluZz4sXG4gICk6IFVzZXJBY2Nlc3NUb2tlbkNsYWltcyB7XG4gICAgY29uc3QgY2xhaW1zOiBVc2VyQWNjZXNzVG9rZW5DbGFpbXMgPSB7XG4gICAgICBpZDogdXN1YXJpby5pZCxcbiAgICAgIHVzZXJuYW1lOiB1c3VhcmlvLmVtYWlsLCAvLyBVc2FuZG8gZW1haWwgY29tbyB1c2VybmFtZVxuICAgICAgcm9sZXM6IHVzdWFyaW8ucm9sZSA/IFt1c3VhcmlvLnJvbGUubm9tZSBhcyBSb2xlVHlwZV0gOiBbXSxcbiAgICB9O1xuXG4gICAgLy8gQWRpY2lvbmEgcGVybWlzc8O1ZXMgc2UgZGlzcG9uw612ZWlzXG4gICAgaWYgKHBlcm1pc3Npb25zICYmIHBlcm1pc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsYWltcy5wZXJtaXNzaW9ucyA9IHBlcm1pc3Npb25zLm1hcCgocCkgPT4gcC5ub21lKTtcbiAgICB9XG5cbiAgICAvLyBBZGljaW9uYSBlc2NvcG9zIGRlIHBlcm1pc3PDtWVzIHNlIGRpc3BvbsOtdmVpc1xuICAgIGlmIChwZXJtaXNzaW9uU2NvcGVzICYmIE9iamVjdC5rZXlzKHBlcm1pc3Npb25TY29wZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNsYWltcy5wZXJtaXNzaW9uU2NvcGVzID0ge307XG4gICAgICBmb3IgKGNvbnN0IFtwZXJtaXNzaW9uSWQsIHNjb3BlVHlwZV0gb2YgT2JqZWN0LmVudHJpZXMoXG4gICAgICAgIHBlcm1pc3Npb25TY29wZXMsXG4gICAgICApKSB7XG4gICAgICAgIGNsYWltcy5wZXJtaXNzaW9uU2NvcGVzW3Blcm1pc3Npb25JZF0gPSBzY29wZVR5cGUudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xhaW1zO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=