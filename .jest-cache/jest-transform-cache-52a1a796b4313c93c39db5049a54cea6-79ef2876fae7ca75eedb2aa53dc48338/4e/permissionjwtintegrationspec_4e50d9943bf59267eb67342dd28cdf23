98c777c41f3000b93f47e23ff9346b11
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const request = __importStar(require("supertest"));
const jwt_1 = require("@nestjs/jwt");
const config_1 = require("@nestjs/config");
const app_module_1 = require("@/app.module");
const permission_service_1 = require("@/auth/services/permission.service");
const user_permission_entity_1 = require("@/auth/entities/user-permission.entity");
const permission_repository_1 = require("@/auth/repositories/permission.repository");
const user_permission_repository_1 = require("@/auth/repositories/user-permission.repository");
/**
 * Testes de integração para o sistema de permissões com JWT
 *
 * Estes testes verificam a interação entre o JwtService, PermissionService e PermissionGuard,
 * focando especialmente na extração de permissões do token JWT e na validação dessas
 * permissões para acessar endpoints protegidos.
 */
describe('Permission JWT Integration', () => {
    let app;
    let jwtService;
    let configService;
    let permissionService;
    let permissionRepository;
    let userPermissionRepository;
    beforeAll(async () => {
        // Criar um módulo de teste com o AppModule
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [app_module_1.AppModule],
        }).compile();
        // Iniciar a aplicação
        app = moduleFixture.createNestApplication();
        await app.init();
        // Obter os serviços necessários
        jwtService = app.get(jwt_1.JwtService);
        configService = app.get(config_1.ConfigService);
        permissionService = app.get(permission_service_1.PermissionService);
        permissionRepository = app.get(permission_repository_1.PermissionRepository);
        userPermissionRepository = app.get(user_permission_repository_1.UserPermissionRepository);
    });
    afterAll(async () => {
        await app.close();
    });
    describe('Extração de permissões do JWT', () => {
        it('deve verificar permissões extraídas do JWT', async () => {
            // Mock de um usuário com permissões
            const testUser = {
                id: 'user-test-123',
                username: 'test.user@example.com',
                roles: ['ADMIN'],
                nome: 'Usuário de Teste',
            };
            // Criar um token JWT para o usuário
            const privateKey = Buffer.from(configService.get('JWT_PRIVATE_KEY_BASE64', ''), 'base64').toString('utf8');
            const accessToken = jwtService.sign({
                ...testUser,
                sub: testUser.id,
            }, {
                secret: privateKey,
                algorithm: 'RS256',
                expiresIn: '1h',
            });
            // Criar permissões de teste
            const testPermission = await permissionRepository.save({
                name: 'test.permission',
                description: 'Permissão de teste',
                isComposite: false,
            });
            // Atribuir permissão ao usuário
            await userPermissionRepository.save({
                userId: testUser.id,
                permissionId: testPermission.id,
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                granted: true,
                validUntil: null,
                createdBy: 'system',
            });
            // Verificar se o usuário tem a permissão
            const hasPermission = await permissionService.hasPermission({
                userId: testUser.id,
                permissionName: 'test.permission',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            });
            expect(hasPermission).toBe(true);
            // Tentar acessar um endpoint protegido
            const response = await request(app.getHttpServer())
                .get('/api/protected-endpoint')
                .set('Authorization', `Bearer ${accessToken}`);
            // Se o endpoint estiver configurado corretamente,
            // deve retornar 200 OK se o usuário tiver permissão,
            // ou 403 Forbidden se não tiver
            expect([200, 403]).toContain(response.status);
        });
    });
    describe('Casos especiais de autorização', () => {
        it('deve verificar permissões compostas', async () => {
            // Criar permissão composta de teste
            const parentPermission = await permissionRepository.save({
                name: 'test.composite.permission',
                description: 'Permissão composta de teste',
                isComposite: true,
            });
            const childPermission = await permissionRepository.save({
                name: 'test.child.permission',
                description: 'Permissão filha de teste',
                isComposite: false,
            });
            // Estabelecer relação de composição
            await permissionRepository.establishComposition(parentPermission.id, childPermission.id);
            // Atribuir permissão filha ao usuário
            await userPermissionRepository.save({
                userId: 'user-test-123',
                permissionId: childPermission.id,
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                granted: true,
                validUntil: null,
                createdBy: 'system',
            });
            // Verificar se o usuário tem a permissão composta
            const hasCompositePermission = await permissionService.hasPermission({
                userId: 'user-test-123',
                permissionName: 'test.composite.permission',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            });
            expect(hasCompositePermission).toBe(true);
        });
        it('deve verificar permissões com escopo de unidade', async () => {
            // Criar permissão com escopo UNIT
            const unitPermission = await permissionRepository.save({
                name: 'test.unit.permission',
                description: 'Permissão com escopo de unidade',
                isComposite: false,
            });
            // Atribuir permissão ao usuário com escopo UNIT
            await userPermissionRepository.save({
                userId: 'user-test-123',
                permissionId: unitPermission.id,
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'unidade-test-123',
                granted: true,
                validUntil: null,
                createdBy: 'system',
            });
            // Verificar se o usuário tem a permissão para a unidade específica
            const hasUnitPermission = await permissionService.hasPermission({
                userId: 'user-test-123',
                permissionName: 'test.unit.permission',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'unidade-test-123',
            });
            expect(hasUnitPermission).toBe(true);
            // Verificar que o usuário não tem a permissão para outra unidade
            const hasOtherUnitPermission = await permissionService.hasPermission({
                userId: 'user-test-123',
                permissionName: 'test.unit.permission',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'unidade-test-456',
            });
            expect(hasOtherUnitPermission).toBe(false);
        });
        it('deve verificar permissões temporárias (com data de validade)', async () => {
            // Criar permissão temporária
            const temporaryPermission = await permissionRepository.save({
                name: 'test.temporary.permission',
                description: 'Permissão temporária',
                isComposite: false,
            });
            // Data de validade no futuro
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 7); // Válida por 7 dias
            // Atribuir permissão temporária ao usuário
            await userPermissionRepository.save({
                userId: 'user-test-123',
                permissionId: temporaryPermission.id,
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                granted: true,
                validUntil: futureDate,
                createdBy: 'system',
            });
            // Verificar se o usuário tem a permissão temporária
            const hasTemporaryPermission = await permissionService.hasPermission({
                userId: 'user-test-123',
                permissionName: 'test.temporary.permission',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            });
            expect(hasTemporaryPermission).toBe(true);
            // Data de validade no passado
            const pastDate = new Date();
            pastDate.setDate(pastDate.getDate() - 7); // Expirada há 7 dias
            // Atribuir permissão expirada ao usuário
            await userPermissionRepository.save({
                userId: 'user-test-123',
                permissionId: temporaryPermission.id, // Mesma permissão, mas com outra validade
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                granted: true,
                validUntil: pastDate,
                createdBy: 'system',
            });
            // Verificar que o usuário não tem a permissão expirada
            const hasExpiredPermission = await permissionService.hasPermission({
                userId: 'user-test-123',
                permissionName: 'test.temporary.permission',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            });
            expect(hasExpiredPermission).toBe(true); // Ainda é true porque a primeira permissão está válida
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,