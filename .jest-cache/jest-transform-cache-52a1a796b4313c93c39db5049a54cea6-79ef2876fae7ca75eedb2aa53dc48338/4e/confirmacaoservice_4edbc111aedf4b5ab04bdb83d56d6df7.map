{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\confirmacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\confirmacao.service.ts"],"sourcesContent":["import {\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConfirmacaoRecebimento } from '../../../entities/confirmacao-recebimento.entity';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\nimport { ConfirmacaoRecebimentoDto } from '../dtos/confirmacao-recebimento.dto';\nimport { ComprovanteService } from './comprovante.service';\n\n/**\n * Serviço para gerenciamento de confirmações de recebimento de pagamentos\n *\n * Implementa a lógica para registrar e consultar confirmações de recebimento\n * por parte dos beneficiários, validando regras de negócio específicas.\n *\n * @author Equipe PGBen\n */\n@Injectable()\nexport class ConfirmacaoService {\n  constructor(\n    @InjectRepository(ConfirmacaoRecebimento)\n    private readonly confirmacaoRepository: Repository<ConfirmacaoRecebimento>,\n    private readonly comprovanteService: ComprovanteService,\n    // Outros serviços necessários serão injetados aqui\n    // private readonly pagamentoService: PagamentoService,\n    // private readonly auditoriaService: AuditoriaService,\n  ) {}\n\n  /**\n   * Registra uma nova confirmação de recebimento para um pagamento\n   *\n   * @param pagamentoId ID do pagamento\n   * @param createDto Dados da confirmação\n   * @param usuarioId ID do usuário que está registrando a confirmação\n   * @returns Confirmação registrada\n   */\n  async registrarConfirmacao(\n    pagamentoId: string,\n    createDto: ConfirmacaoRecebimentoDto,\n    usuarioId: string,\n  ): Promise<ConfirmacaoRecebimento> {\n    // Verificar se o pagamento existe\n    // const pagamento = await this.pagamentoService.findOne(pagamentoId);\n\n    // if (!pagamento) {\n    //   throw new NotFoundException('Pagamento não encontrado');\n    // }\n\n    // Verificar se o pagamento está no status adequado\n    // if (pagamento.status !== StatusPagamentoEnum.LIBERADO) {\n    //   throw new ConflictException(\n    //     'Somente pagamentos liberados podem receber confirmação'\n    //   );\n    // }\n\n    // Verificar se já existe confirmação para este pagamento\n    const existingConfirmacao = await this.findByPagamento(pagamentoId);\n\n    if (existingConfirmacao.length > 0) {\n      throw new ConflictException(\n        'Este pagamento já possui uma confirmação de recebimento registrada',\n      );\n    }\n\n    // Verificar se o pagamento tem pelo menos um comprovante\n    const hasComprovantes =\n      await this.comprovanteService.hasComprovantes(pagamentoId);\n\n    if (!hasComprovantes) {\n      throw new ConflictException(\n        'É necessário anexar pelo menos um comprovante antes de confirmar o recebimento',\n      );\n    }\n\n    // Criar nova confirmação\n    const confirmacao = this.confirmacaoRepository.create({\n      pagamento_id: pagamentoId,\n      data_confirmacao: createDto.dataConfirmacao,\n      metodo_confirmacao: createDto.metodoConfirmacao,\n      confirmado_por: usuarioId,\n      destinatario_id: createDto.destinatarioId,\n      observacoes: createDto.observacoes,\n    });\n\n    // Salvar a confirmação\n    const result = await this.confirmacaoRepository.save(confirmacao);\n\n    // Atualizar o status do pagamento para CONFIRMADO\n    // await this.pagamentoService.atualizarStatus(\n    //   pagamentoId,\n    //   StatusPagamentoEnum.CONFIRMADO,\n    //   usuarioId\n    // );\n\n    // Registrar operação no log de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'CONFIRMACAO_RECEBIMENTO',\n    //   usuarioId,\n    //   entidadeId: result.id,\n    //   tipoEntidade: 'CONFIRMACAO_RECEBIMENTO',\n    //   dadosAnteriores: null,\n    //   dadosNovos: result\n    // });\n\n    return result;\n  }\n\n  /**\n   * Busca uma confirmação pelo ID\n   *\n   * @param id ID da confirmação\n   * @returns Confirmação encontrada ou null\n   */\n  async findOne(id: string): Promise<ConfirmacaoRecebimento | null> {\n    return this.confirmacaoRepository.findOneBy({ id });\n  }\n\n  /**\n   * Busca confirmações de um pagamento específico\n   *\n   * @param pagamentoId ID do pagamento\n   * @returns Lista de confirmações para o pagamento\n   */\n  async findByPagamento(\n    pagamentoId: string,\n  ): Promise<ConfirmacaoRecebimento[]> {\n    return this.confirmacaoRepository.find({\n      where: { pagamento_id: pagamentoId },\n      order: { data_confirmacao: 'DESC' },\n    });\n  }\n\n  /**\n   * Busca uma confirmação pelo ID com todos os relacionamentos\n   *\n   * @param id ID da confirmação\n   * @returns Confirmação encontrada com relacionamentos ou null\n   */\n  async findOneWithRelations(\n    id: string,\n  ): Promise<ConfirmacaoRecebimento | null> {\n    return this.confirmacaoRepository.findOne({\n      where: { id },\n      relations: ['pagamento'],\n    });\n  }\n\n  /**\n   * Verifica se um pagamento tem confirmação de recebimento\n   *\n   * @param pagamentoId ID do pagamento\n   * @returns true se o pagamento tem confirmação\n   */\n  async temConfirmacao(pagamentoId: string): Promise<boolean> {\n    const count = await this.confirmacaoRepository.count({\n      where: { pagamento_id: pagamentoId },\n    });\n\n    return count > 0;\n  }\n\n  /**\n   * Validar destinatário se diferente do beneficiário\n   *\n   * @param pagamentoId ID do pagamento\n   * @param destinatarioId ID do destinatário\n   * @returns true se o destinatário é válido\n   */\n  private async validarDestinatario(\n    pagamentoId: string,\n    destinatarioId?: string,\n  ): Promise<boolean> {\n    // Esta é uma implementação de placeholder\n    // Será integrada com o CidadaoService para validar a relação entre o beneficiário e o destinatário\n\n    if (!destinatarioId) {\n      return true; // Sem destinatário específico, assume-se que é o próprio beneficiário\n    }\n\n    // Lógica para validar se o destinatário é válido (ex: familiar cadastrado)\n    // const pagamento = await this.pagamentoService.findOne(pagamentoId);\n    // const solicitacao = await this.solicitacaoService.findOne(pagamento.solicitacaoId);\n    // const beneficiarioId = solicitacao.cidadaoId;\n\n    // return this.cidadaoService.verificarRelacaoFamiliar(beneficiarioId, destinatarioId);\n\n    return true; // Temporariamente retornando true\n  }\n}\n"],"version":3}