{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\composicao-familiar.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\composicao-familiar.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { getRepositoryToken } from '@nestjs/typeorm';\r\nimport { Repository, DataSource, QueryRunner } from 'typeorm';\r\nimport { ComposicaoFamiliarService } from './composicao-familiar.service';\r\nimport { ComposicaoFamiliar } from '../entities/composicao-familiar.entity';\r\nimport { Cidadao } from '../entities/cidadao.entity';\r\nimport { CreateComposicaoFamiliarDto } from '../dto/create-composicao-familiar.dto';\r\nimport { UpdateComposicaoFamiliarDto } from '../dto/update-composicao-familiar.dto';\r\nimport {\r\n  NotFoundException,\r\n  ConflictException,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport { CacheService } from '../../../shared/cache';\r\nimport { EscolaridadeEnum } from '../enums/escolaridade.enum';\r\nimport { ParentescoEnum } from '../enums/parentesco.enum';\r\n\r\ndescribe('ComposicaoFamiliarService', () => {\r\n  let service: ComposicaoFamiliarService;\r\n  let composicaoFamiliarRepository: Repository<ComposicaoFamiliar>;\r\n  let cidadaoRepository: Repository<Cidadao>;\r\n  let cacheService: CacheService;\r\n  let dataSource: DataSource;\r\n  let queryRunner: QueryRunner;\r\n\r\n  const mockQueryRunner = {\r\n    connect: jest.fn(),\r\n    startTransaction: jest.fn(),\r\n    commitTransaction: jest.fn(),\r\n    rollbackTransaction: jest.fn(),\r\n    release: jest.fn(),\r\n    manager: {\r\n      save: jest.fn(),\r\n    },\r\n  };\r\n\r\n  const mockDataSource = {\r\n    createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),\r\n  };\r\n\r\n  const mockComposicaoFamiliarRepository = {\r\n    create: jest.fn(),\r\n    save: jest.fn(),\r\n    findOne: jest.fn(),\r\n    find: jest.fn(),\r\n    findAndCount: jest.fn(),\r\n  };\r\n\r\n  const mockCidadaoRepository = {\r\n    findOne: jest.fn(),\r\n  };\r\n\r\n  const mockCacheService = {\r\n    get: jest.fn(),\r\n    set: jest.fn(),\r\n    del: jest.fn(),\r\n  };\r\n\r\n  const mockCidadao = {\r\n    id: '123e4567-e89b-12d3-a456-426614174001',\r\n    cpf: '98765432100',\r\n    nome: 'Maria Silva',\r\n  };\r\n\r\n  const mockComposicaoFamiliar = {\r\n    id: '123e4567-e89b-12d3-a456-426614174000',\r\n    cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\r\n    nome: 'João Silva',\r\n    cpf: '12345678900',\r\n    nis: '12345678901',\r\n    idade: 25,\r\n    ocupacao: 'Estudante',\r\n    escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\r\n    parentesco: ParentescoEnum.FILHO,\r\n    renda: 1500.00,\r\n    observacoes: 'Observações de teste',\r\n    created_at: new Date('2024-01-01T10:00:00Z'),\r\n    updated_at: new Date('2024-01-01T10:00:00Z'),\r\n    removed_at: null,\r\n    cidadao: mockCidadao,\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        ComposicaoFamiliarService,\r\n        {\r\n          provide: getRepositoryToken(ComposicaoFamiliar),\r\n          useValue: mockComposicaoFamiliarRepository,\r\n        },\r\n        {\r\n          provide: getRepositoryToken(Cidadao),\r\n          useValue: mockCidadaoRepository,\r\n        },\r\n        {\r\n          provide: CacheService,\r\n          useValue: mockCacheService,\r\n        },\r\n        {\r\n          provide: DataSource,\r\n          useValue: mockDataSource,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<ComposicaoFamiliarService>(ComposicaoFamiliarService);\r\n    composicaoFamiliarRepository = module.get<Repository<ComposicaoFamiliar>>(\r\n      getRepositoryToken(ComposicaoFamiliar),\r\n    );\r\n    cidadaoRepository = module.get<Repository<Cidadao>>(getRepositoryToken(Cidadao));\r\n    cacheService = module.get<CacheService>(CacheService);\r\n    dataSource = module.get<DataSource>(DataSource);\r\n    queryRunner = mockQueryRunner as any;\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe('create', () => {\r\n    const createDto: CreateComposicaoFamiliarDto = {\r\n      cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\r\n      nome: 'João Silva',\r\n      cpf: '123.456.789-00',\r\n      nis: '12345678901',\r\n      idade: 25,\r\n      ocupacao: 'Estudante',\r\n      escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\r\n      parentesco: ParentescoEnum.FILHO,\r\n      renda: 1500.00,\r\n      observacoes: 'Observações de teste',\r\n    };\r\n\r\n    const userId = 'user123';\r\n\r\n    beforeEach(() => {\r\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\r\n      mockComposicaoFamiliarRepository.create.mockReturnValue(mockComposicaoFamiliar);\r\n      mockQueryRunner.manager.save.mockResolvedValue(mockComposicaoFamiliar);\r\n      mockCacheService.set.mockResolvedValue(undefined);\r\n      mockCacheService.del.mockResolvedValue(undefined);\r\n    });\r\n\r\n    it('should create a new composicao familiar member successfully', async () => {\r\n      const result = await service.create(createDto, userId);\r\n\r\n      expect(cidadaoRepository.findOne).toHaveBeenCalledWith({\r\n        where: { id: createDto.cidadao_id },\r\n      });\r\n      expect(composicaoFamiliarRepository.create).toHaveBeenCalledWith({\r\n        ...createDto,\r\n        cpf: '12345678900',\r\n      });\r\n      expect(queryRunner.manager.save).toHaveBeenCalled();\r\n      expect(queryRunner.commitTransaction).toHaveBeenCalled();\r\n      expect(result).toBeDefined();\r\n      expect(result.nome).toBe(createDto.nome);\r\n    });\r\n\r\n    it('should throw NotFoundException when cidadao does not exist', async () => {\r\n      mockCidadaoRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.create(createDto, userId))\r\n        .rejects.toThrow(NotFoundException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw BadRequestException for invalid CPF', async () => {\r\n      const invalidCpfDto = { ...createDto, cpf: '123' };\r\n\r\n      await expect(service.create(invalidCpfDto, userId))\r\n        .rejects.toThrow(BadRequestException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw ConflictException when member with same CPF exists', async () => {\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(mockComposicaoFamiliar);\r\n\r\n      await expect(service.create(createDto, userId))\r\n        .rejects.toThrow(ConflictException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw ConflictException when CPF is same as cidadao CPF', async () => {\r\n      const sameCpfDto = { ...createDto, cpf: '987.654.321-00' };\r\n\r\n      await expect(service.create(sameCpfDto, userId))\r\n        .rejects.toThrow(ConflictException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw ConflictException when member with same name exists', async () => {\r\n      mockComposicaoFamiliarRepository.findOne\r\n        .mockResolvedValueOnce(null) // CPF check\r\n        .mockResolvedValueOnce(mockComposicaoFamiliar); // Name check\r\n\r\n      await expect(service.create(createDto, userId))\r\n        .rejects.toThrow(ConflictException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should handle transaction rollback on error', async () => {\r\n      mockQueryRunner.manager.save.mockRejectedValue(new Error('Database error'));\r\n\r\n      await expect(service.create(createDto, userId))\r\n        .rejects.toThrow('Database error');\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n      expect(queryRunner.release).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('findByCidadao', () => {\r\n    const cidadaoId = '123e4567-e89b-12d3-a456-426614174001';\r\n    const options = { page: 1, limit: 10 };\r\n\r\n    beforeEach(() => {\r\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      mockComposicaoFamiliarRepository.findAndCount.mockResolvedValue([\r\n        [mockComposicaoFamiliar],\r\n        1,\r\n      ]);\r\n      mockComposicaoFamiliarRepository.find.mockResolvedValue([mockComposicaoFamiliar]);\r\n      mockCacheService.set.mockResolvedValue(undefined);\r\n    });\r\n\r\n    it('should return paginated composicao familiar members', async () => {\r\n      const result = await service.findByCidadao(cidadaoId, options);\r\n\r\n      expect(cidadaoRepository.findOne).toHaveBeenCalledWith({\r\n        where: { id: cidadaoId },\r\n      });\r\n      expect(composicaoFamiliarRepository.findAndCount).toHaveBeenCalledWith({\r\n        where: {\r\n          cidadao_id: cidadaoId,\r\n          removed_at: null,\r\n        },\r\n        order: {\r\n          created_at: 'DESC',\r\n        },\r\n        skip: 0,\r\n        take: 10,\r\n      });\r\n      expect(result.data).toHaveLength(1);\r\n      expect(result.meta.total).toBe(1);\r\n      expect(result.estatisticas).toBeDefined();\r\n    });\r\n\r\n    it('should return cached result when available', async () => {\r\n      const cachedResult = {\r\n        data: [mockComposicaoFamiliar],\r\n        meta: { total: 1, page: 1, limit: 10, totalPages: 1, hasNext: false, hasPrev: false },\r\n        estatisticas: { totalMembros: 1, rendaTotal: 1500, rendaMedia: 1500, idadeMedia: 25, membrosComRenda: 1 },\r\n      };\r\n      mockCacheService.get.mockResolvedValue(cachedResult);\r\n\r\n      const result = await service.findByCidadao(cidadaoId, options);\r\n\r\n      expect(result).toEqual(cachedResult);\r\n      expect(composicaoFamiliarRepository.findAndCount).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw NotFoundException when cidadao does not exist', async () => {\r\n      mockCidadaoRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.findByCidadao(cidadaoId, options))\r\n        .rejects.toThrow(NotFoundException);\r\n    });\r\n\r\n    it('should calculate correct pagination metadata', async () => {\r\n      mockComposicaoFamiliarRepository.findAndCount.mockResolvedValue([\r\n        [mockComposicaoFamiliar, mockComposicaoFamiliar],\r\n        25,\r\n      ]);\r\n\r\n      const result = await service.findByCidadao(cidadaoId, { page: 2, limit: 10 });\r\n\r\n      expect(result.meta.total).toBe(25);\r\n      expect(result.meta.page).toBe(2);\r\n      expect(result.meta.totalPages).toBe(3);\r\n      expect(result.meta.hasNext).toBe(true);\r\n      expect(result.meta.hasPrev).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('findOne', () => {\r\n    const id = '123e4567-e89b-12d3-a456-426614174000';\r\n\r\n    beforeEach(() => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(mockComposicaoFamiliar);\r\n      mockCacheService.set.mockResolvedValue(undefined);\r\n    });\r\n\r\n    it('should return a composicao familiar member', async () => {\r\n      const result = await service.findOne(id);\r\n\r\n      expect(composicaoFamiliarRepository.findOne).toHaveBeenCalledWith({\r\n        where: {\r\n          id,\r\n          removed_at: null,\r\n        },\r\n        relations: ['cidadao'],\r\n      });\r\n      expect(result).toBeDefined();\r\n      expect(result.id).toBe(id);\r\n    });\r\n\r\n    it('should return cached result when available', async () => {\r\n      const cachedResult = { id, nome: 'João Silva' };\r\n      mockCacheService.get.mockResolvedValue(cachedResult);\r\n\r\n      const result = await service.findOne(id);\r\n\r\n      expect(result).toEqual(cachedResult);\r\n      expect(composicaoFamiliarRepository.findOne).not.toHaveBeenCalled();\r\n    });\r\n\r\n    it('should throw NotFoundException when member does not exist', async () => {\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.findOne(id))\r\n        .rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('update', () => {\r\n    const id = '123e4567-e89b-12d3-a456-426614174000';\r\n    const updateDto: UpdateComposicaoFamiliarDto = {\r\n      nome: 'João Silva Atualizado',\r\n      renda: 2000.00,\r\n    };\r\n    const userId = 'user123';\r\n\r\n    beforeEach(() => {\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(mockComposicaoFamiliar);\r\n      mockQueryRunner.manager.save.mockResolvedValue({\r\n        ...mockComposicaoFamiliar,\r\n        ...updateDto,\r\n      });\r\n      mockCacheService.set.mockResolvedValue(undefined);\r\n      mockCacheService.del.mockResolvedValue(undefined);\r\n    });\r\n\r\n    it('should update a composicao familiar member successfully', async () => {\r\n      const result = await service.update(id, updateDto, userId);\r\n\r\n      expect(composicaoFamiliarRepository.findOne).toHaveBeenCalledWith({\r\n        where: {\r\n          id,\r\n          removed_at: null,\r\n        },\r\n        relations: ['cidadao'],\r\n      });\r\n      expect(queryRunner.manager.save).toHaveBeenCalled();\r\n      expect(queryRunner.commitTransaction).toHaveBeenCalled();\r\n      expect(result.nome).toBe(updateDto.nome);\r\n    });\r\n\r\n    it('should throw NotFoundException when member does not exist', async () => {\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.update(id, updateDto, userId))\r\n        .rejects.toThrow(NotFoundException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should validate CPF when updating', async () => {\r\n      const updateWithCpf = { ...updateDto, cpf: '123' };\r\n\r\n      await expect(service.update(id, updateWithCpf, userId))\r\n        .rejects.toThrow(BadRequestException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should check for duplicate CPF when updating', async () => {\r\n      const updateWithCpf = { ...updateDto, cpf: '111.111.111-11' };\r\n      mockComposicaoFamiliarRepository.findOne\r\n        .mockResolvedValueOnce(mockComposicaoFamiliar) // Initial find\r\n        .mockResolvedValueOnce({ ...mockComposicaoFamiliar, id: 'different-id' }); // Duplicate check\r\n\r\n      await expect(service.update(id, updateWithCpf, userId))\r\n        .rejects.toThrow(ConflictException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n\r\n    it('should check for duplicate name when updating', async () => {\r\n      const updateWithName = { ...updateDto, nome: 'Nome Duplicado' };\r\n      mockComposicaoFamiliarRepository.findOne\r\n        .mockResolvedValueOnce(mockComposicaoFamiliar) // Initial find\r\n        .mockResolvedValueOnce(null) // CPF check (not applicable)\r\n        .mockResolvedValueOnce({ ...mockComposicaoFamiliar, id: 'different-id' }); // Name check\r\n\r\n      await expect(service.update(id, updateWithName, userId))\r\n        .rejects.toThrow(ConflictException);\r\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\r\n    });\r\n  });\r\n\r\n  describe('remove', () => {\r\n    const id = '123e4567-e89b-12d3-a456-426614174000';\r\n    const userId = 'user123';\r\n\r\n    beforeEach(() => {\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(mockComposicaoFamiliar);\r\n      mockComposicaoFamiliarRepository.save.mockResolvedValue({\r\n        ...mockComposicaoFamiliar,\r\n        removed_at: new Date(),\r\n      });\r\n      mockCacheService.del.mockResolvedValue(undefined);\r\n    });\r\n\r\n    it('should remove a composicao familiar member (soft delete)', async () => {\r\n      await service.remove(id, userId);\r\n\r\n      expect(composicaoFamiliarRepository.findOne).toHaveBeenCalledWith({\r\n        where: {\r\n          id,\r\n          removed_at: null,\r\n        },\r\n      });\r\n      expect(composicaoFamiliarRepository.save).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          ...mockComposicaoFamiliar,\r\n          removed_at: expect.any(Date),\r\n        }),\r\n      );\r\n    });\r\n\r\n    it('should throw NotFoundException when member does not exist', async () => {\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\r\n\r\n      await expect(service.remove(id, userId))\r\n        .rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe('findByCpf', () => {\r\n    const cpf = '12345678900';\r\n\r\n    beforeEach(() => {\r\n      mockComposicaoFamiliarRepository.find.mockResolvedValue([mockComposicaoFamiliar]);\r\n    });\r\n\r\n    it('should return composicao familiar members by CPF', async () => {\r\n      const result = await service.findByCpf(cpf);\r\n\r\n      expect(composicaoFamiliarRepository.find).toHaveBeenCalledWith({\r\n        where: {\r\n          cpf,\r\n          removed_at: null,\r\n        },\r\n        relations: ['cidadao'],\r\n        order: {\r\n          created_at: 'DESC',\r\n        },\r\n      });\r\n      expect(result).toHaveLength(1);\r\n      expect(result[0].cpf).toBe('123.456.789-00');\r\n    });\r\n\r\n    it('should throw BadRequestException for invalid CPF length', async () => {\r\n      await expect(service.findByCpf('123'))\r\n        .rejects.toThrow(BadRequestException);\r\n    });\r\n\r\n    it('should return empty array when no members found', async () => {\r\n      mockComposicaoFamiliarRepository.find.mockResolvedValue([]);\r\n\r\n      const result = await service.findByCpf(cpf);\r\n\r\n      expect(result).toEqual([]);\r\n    });\r\n\r\n    it('should clean CPF format before search', async () => {\r\n      await service.findByCpf('123.456.789-00');\r\n\r\n      expect(composicaoFamiliarRepository.find).toHaveBeenCalledWith(\r\n        expect.objectContaining({\r\n          where: expect.objectContaining({\r\n            cpf: '12345678900',\r\n          }),\r\n        }),\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Cache management', () => {\r\n    it('should invalidate related cache when creating member', async () => {\r\n      const createDto: CreateComposicaoFamiliarDto = {\r\n        cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\r\n        nome: 'João Silva',\r\n        cpf: '123.456.789-00',\r\n        nis: '12345678901',\r\n        idade: 25,\r\n        ocupacao: 'Estudante',\r\n        escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\r\n        parentesco: ParentescoEnum.FILHO,\r\n      };\r\n\r\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\r\n      mockComposicaoFamiliarRepository.create.mockReturnValue(mockComposicaoFamiliar);\r\n      mockQueryRunner.manager.save.mockResolvedValue(mockComposicaoFamiliar);\r\n\r\n      await service.create(createDto, 'user123');\r\n\r\n      expect(cacheService.del).toHaveBeenCalledWith(\r\n        expect.stringContaining('composicao_familiar:cidadao:'),\r\n      );\r\n    });\r\n\r\n    it('should set cache after successful operations', async () => {\r\n      mockCacheService.get.mockResolvedValue(null);\r\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(mockComposicaoFamiliar);\r\n\r\n      await service.findOne('123e4567-e89b-12d3-a456-426614174000');\r\n\r\n      expect(cacheService.set).toHaveBeenCalledWith(\r\n        expect.stringContaining('composicao_familiar:id:'),\r\n        expect.any(Object),\r\n        3600,\r\n      );\r\n    });\r\n  });\r\n\r\n  describe('Statistics calculation', () => {\r\n    it('should calculate correct statistics', async () => {\r\n      const membrosComRenda = [\r\n        { ...mockComposicaoFamiliar, renda: 1000, idade: 20 },\r\n        { ...mockComposicaoFamiliar, renda: 2000, idade: 30 },\r\n        { ...mockComposicaoFamiliar, renda: null, idade: 25 },\r\n      ];\r\n\r\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\r\n      mockComposicaoFamiliarRepository.findAndCount.mockResolvedValue([membrosComRenda, 3]);\r\n      mockComposicaoFamiliarRepository.find.mockResolvedValue(membrosComRenda);\r\n\r\n      const result = await service.findByCidadao('cidadao-id', { page: 1, limit: 10 });\r\n\r\n      expect(result.estatisticas.totalMembros).toBe(3);\r\n      expect(result.estatisticas.rendaTotal).toBe(3000);\r\n      expect(result.estatisticas.rendaMedia).toBe(1500);\r\n      expect(result.estatisticas.idadeMedia).toBe(25);\r\n      expect(result.estatisticas.membrosComRenda).toBe(2);\r\n    });\r\n  });\r\n});"],"version":3}