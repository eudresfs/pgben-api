5ad44125416858f092fcd9bfda78b8d7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmacaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const confirmacao_recebimento_entity_1 = require("../../../entities/confirmacao-recebimento.entity");
const comprovante_service_1 = require("./comprovante.service");
/**
 * Serviço para gerenciamento de confirmações de recebimento de pagamentos
 *
 * Implementa a lógica para registrar e consultar confirmações de recebimento
 * por parte dos beneficiários, validando regras de negócio específicas.
 *
 * @author Equipe PGBen
 */
let ConfirmacaoService = class ConfirmacaoService {
    confirmacaoRepository;
    comprovanteService;
    constructor(confirmacaoRepository, comprovanteService) {
        this.confirmacaoRepository = confirmacaoRepository;
        this.comprovanteService = comprovanteService;
    }
    /**
     * Registra uma nova confirmação de recebimento para um pagamento
     *
     * @param pagamentoId ID do pagamento
     * @param createDto Dados da confirmação
     * @param usuarioId ID do usuário que está registrando a confirmação
     * @returns Confirmação registrada
     */
    async registrarConfirmacao(pagamentoId, createDto, usuarioId) {
        // Verificar se o pagamento existe
        // const pagamento = await this.pagamentoService.findOne(pagamentoId);
        // if (!pagamento) {
        //   throw new NotFoundException('Pagamento não encontrado');
        // }
        // Verificar se o pagamento está no status adequado
        // if (pagamento.status !== StatusPagamentoEnum.LIBERADO) {
        //   throw new ConflictException(
        //     'Somente pagamentos liberados podem receber confirmação'
        //   );
        // }
        // Verificar se já existe confirmação para este pagamento
        const existingConfirmacao = await this.findByPagamento(pagamentoId);
        if (existingConfirmacao.length > 0) {
            throw new common_1.ConflictException('Este pagamento já possui uma confirmação de recebimento registrada');
        }
        // Verificar se o pagamento tem pelo menos um comprovante
        const hasComprovantes = await this.comprovanteService.hasComprovantes(pagamentoId);
        if (!hasComprovantes) {
            throw new common_1.ConflictException('É necessário anexar pelo menos um comprovante antes de confirmar o recebimento');
        }
        // Criar nova confirmação
        const confirmacao = this.confirmacaoRepository.create({
            pagamento_id: pagamentoId,
            data_confirmacao: createDto.dataConfirmacao,
            metodo_confirmacao: createDto.metodoConfirmacao,
            confirmado_por: usuarioId,
            destinatario_id: createDto.destinatarioId,
            observacoes: createDto.observacoes,
        });
        // Salvar a confirmação
        const result = await this.confirmacaoRepository.save(confirmacao);
        // Atualizar o status do pagamento para CONFIRMADO
        // await this.pagamentoService.atualizarStatus(
        //   pagamentoId,
        //   StatusPagamentoEnum.CONFIRMADO,
        //   usuarioId
        // );
        // Registrar operação no log de auditoria
        // await this.auditoriaService.registrarOperacao({
        //   tipoOperacao: 'CONFIRMACAO_RECEBIMENTO',
        //   usuarioId,
        //   entidadeId: result.id,
        //   tipoEntidade: 'CONFIRMACAO_RECEBIMENTO',
        //   dadosAnteriores: null,
        //   dadosNovos: result
        // });
        return result;
    }
    /**
     * Busca uma confirmação pelo ID
     *
     * @param id ID da confirmação
     * @returns Confirmação encontrada ou null
     */
    async findOne(id) {
        return this.confirmacaoRepository.findOneBy({ id });
    }
    /**
     * Busca confirmações de um pagamento específico
     *
     * @param pagamentoId ID do pagamento
     * @returns Lista de confirmações para o pagamento
     */
    async findByPagamento(pagamentoId) {
        return this.confirmacaoRepository.find({
            where: { pagamento_id: pagamentoId },
            order: { data_confirmacao: 'DESC' },
        });
    }
    /**
     * Busca uma confirmação pelo ID com todos os relacionamentos
     *
     * @param id ID da confirmação
     * @returns Confirmação encontrada com relacionamentos ou null
     */
    async findOneWithRelations(id) {
        return this.confirmacaoRepository.findOne({
            where: { id },
            relations: ['pagamento'],
        });
    }
    /**
     * Verifica se um pagamento tem confirmação de recebimento
     *
     * @param pagamentoId ID do pagamento
     * @returns true se o pagamento tem confirmação
     */
    async temConfirmacao(pagamentoId) {
        const count = await this.confirmacaoRepository.count({
            where: { pagamento_id: pagamentoId },
        });
        return count > 0;
    }
    /**
     * Validar destinatário se diferente do beneficiário
     *
     * @param pagamentoId ID do pagamento
     * @param destinatarioId ID do destinatário
     * @returns true se o destinatário é válido
     */
    async validarDestinatario(pagamentoId, destinatarioId) {
        // Esta é uma implementação de placeholder
        // Será integrada com o CidadaoService para validar a relação entre o beneficiário e o destinatário
        if (!destinatarioId) {
            return true; // Sem destinatário específico, assume-se que é o próprio beneficiário
        }
        // Lógica para validar se o destinatário é válido (ex: familiar cadastrado)
        // const pagamento = await this.pagamentoService.findOne(pagamentoId);
        // const solicitacao = await this.solicitacaoService.findOne(pagamento.solicitacaoId);
        // const beneficiarioId = solicitacao.cidadaoId;
        // return this.cidadaoService.verificarRelacaoFamiliar(beneficiarioId, destinatarioId);
        return true; // Temporariamente retornando true
    }
};
exports.ConfirmacaoService = ConfirmacaoService;
exports.ConfirmacaoService = ConfirmacaoService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(confirmacao_recebimento_entity_1.ConfirmacaoRecebimento)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof comprovante_service_1.ComprovanteService !== "undefined" && comprovante_service_1.ComprovanteService) === "function" ? _b : Object])
], ConfirmacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,