{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador-auth.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador-auth.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { UnauthorizedException, Logger } from '@nestjs/common';\nimport { Request } from 'express';\nimport { IntegradorAuthService } from '../services/integrador-auth.service';\nimport { IntegradorTokenService } from '../services/integrador-token.service';\nimport { TokenRevogado } from '../entities/token-revogado.entity';\n\n/**\n * Testes unitários para o serviço de autenticação de integradores.\n * Valida extração de tokens, verificação de permissões e validação de requisições.\n */\ndescribe('IntegradorAuthService', () => {\n  let service: IntegradorAuthService;\n  let tokenService: IntegradorTokenService;\n  let tokenRevogadoRepository: any;\n\n  // Mock do serviço de tokens\n  const mockTokenService = {\n    validateToken: jest.fn(),\n    hasRequiredScopes: jest.fn(),\n    isIpAllowed: jest.fn(),\n  };\n\n  // Mock do repositório de tokens revogados\n  const mockTokenRevogadoRepository = {\n    findOne: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    // Mock do Logger para evitar problemas durante testes\n    jest.spyOn(Logger, 'error').mockImplementation(() => {});\n    jest.spyOn(Logger, 'warn').mockImplementation(() => {});\n    jest.spyOn(Logger, 'log').mockImplementation(() => {});\n    jest.spyOn(Logger, 'debug').mockImplementation(() => {});\n    jest.spyOn(Logger, 'verbose').mockImplementation(() => {});\n    \n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        IntegradorAuthService,\n        {\n          provide: IntegradorTokenService,\n          useValue: mockTokenService,\n        },\n        {\n          provide: getRepositoryToken(TokenRevogado),\n          useValue: mockTokenRevogadoRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<IntegradorAuthService>(IntegradorAuthService);\n    tokenService = module.get<IntegradorTokenService>(IntegradorTokenService);\n    tokenRevogadoRepository = module.get(getRepositoryToken(TokenRevogado));\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('extractTokenFromHeader', () => {\n    it('deve extrair corretamente o token do cabeçalho Authorization', () => {\n      // Arrange\n      const token = 'jwt-token-string';\n      const request = {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      } as Request;\n\n      // Act\n      const result = service.extractTokenFromHeader(request);\n\n      // Assert\n      expect(result).toEqual(token);\n    });\n\n    it('deve retornar null quando não há cabeçalho Authorization', () => {\n      // Arrange\n      const request = {\n        headers: {},\n      } as Request;\n\n      // Act\n      const result = service.extractTokenFromHeader(request);\n\n      // Assert\n      expect(result).toBeNull();\n    });\n\n    it('deve retornar null quando o formato do cabeçalho Authorization é inválido', () => {\n      // Arrange\n      const request = {\n        headers: {\n          authorization: 'InvalidFormat jwt-token-string',\n        },\n      } as Request;\n\n      // Act\n      const result = service.extractTokenFromHeader(request);\n\n      // Assert\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('getIpFromRequest', () => {\n    it('deve extrair IP do cabeçalho X-Forwarded-For', () => {\n      // Arrange\n      const realIp = '192.168.1.1';\n      const request = {\n        headers: {\n          'x-forwarded-for': `${realIp}, 10.0.0.1, 172.16.0.1`,\n        },\n        ip: '10.0.0.1',\n      } as unknown as Request;\n\n      // Act\n      const result = service.getIpFromRequest(request);\n\n      // Assert\n      expect(result).toEqual(realIp);\n    });\n\n    it('deve usar request.ip quando não há X-Forwarded-For', () => {\n      // Arrange\n      const requestIp = '10.0.0.1';\n      const request = {\n        headers: {},\n        ip: requestIp,\n      } as unknown as Request;\n\n      // Act\n      const result = service.getIpFromRequest(request);\n\n      // Assert\n      expect(result).toEqual(requestIp);\n    });\n\n    it('deve usar request.socket.remoteAddress como fallback', () => {\n      // Arrange\n      const socketIp = '172.16.0.1';\n      const request = {\n        headers: {},\n        ip: null,\n        socket: {\n          remoteAddress: socketIp,\n        },\n      } as unknown as Request;\n\n      // Act\n      const result = service.getIpFromRequest(request);\n\n      // Assert\n      expect(result).toEqual(socketIp);\n    });\n  });\n\n  describe('validateRequest', () => {\n    it('deve validar uma requisição com sucesso', async () => {\n      // Arrange\n      const token = 'jwt-token-string';\n      const integrador = {\n        id: 'integrador-id',\n        nome: 'Integrador Teste',\n        ativo: true,\n      };\n      const payload = {\n        sub: 'integrador:integrador-id',\n        integrador,\n      };\n      const ipAddress = '192.168.1.1';\n      const request = {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      } as unknown as Request;\n\n      // Configurar mocks\n      service.extractTokenFromHeader = jest.fn().mockReturnValue(token);\n      service.getIpFromRequest = jest.fn().mockReturnValue(ipAddress);\n      mockTokenService.validateToken.mockResolvedValue(payload);\n      mockTokenService.isIpAllowed.mockReturnValue(true);\n\n      // Act\n      const result = await service.validateRequest(request);\n\n      // Assert\n      expect(service.extractTokenFromHeader).toHaveBeenCalledWith(request);\n      expect(mockTokenService.validateToken).toHaveBeenCalledWith(token);\n      expect(service.getIpFromRequest).toHaveBeenCalledWith(request);\n      expect(mockTokenService.isIpAllowed).toHaveBeenCalledWith(integrador, ipAddress);\n      expect(result).toEqual(payload);\n      expect(request['integrador']).toEqual(integrador);\n      expect(request['integradorTokenPayload']).toEqual(payload);\n    });\n\n    it('deve lançar UnauthorizedException quando não há token', async () => {\n      // Arrange\n      const request = {\n        headers: {},\n      } as Request;\n\n      service.extractTokenFromHeader = jest.fn().mockReturnValue(null);\n\n      // Act & Assert\n      await expect(service.validateRequest(request))\n        .rejects.toThrow(UnauthorizedException);\n      expect(service.extractTokenFromHeader).toHaveBeenCalledWith(request);\n      expect(mockTokenService.validateToken).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar UnauthorizedException quando token é inválido', async () => {\n      // Arrange\n      const token = 'invalid-token';\n      const request = {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      } as unknown as Request;\n\n      service.extractTokenFromHeader = jest.fn().mockReturnValue(token);\n      mockTokenService.validateToken.mockRejectedValue(\n        new UnauthorizedException('Token inválido')\n      );\n\n      // Act & Assert\n      await expect(service.validateRequest(request))\n        .rejects.toThrow(UnauthorizedException);\n      expect(service.extractTokenFromHeader).toHaveBeenCalledWith(request);\n      expect(mockTokenService.validateToken).toHaveBeenCalledWith(token);\n    });\n\n    it('deve lançar UnauthorizedException quando IP não é permitido', async () => {\n      // Arrange\n      const token = 'jwt-token-string';\n      const integrador = {\n        id: 'integrador-id',\n        nome: 'Integrador Teste',\n        ativo: true,\n        ipPermitidos: ['10.0.0.1', '172.16.0.1'],\n      };\n      const payload = {\n        sub: 'integrador:integrador-id',\n        integrador,\n      };\n      const ipAddress = '192.168.1.1'; // IP não permitido\n      const request = {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      } as unknown as Request;\n\n      service.extractTokenFromHeader = jest.fn().mockReturnValue(token);\n      service.getIpFromRequest = jest.fn().mockReturnValue(ipAddress);\n      mockTokenService.validateToken.mockResolvedValue(payload);\n      mockTokenService.isIpAllowed.mockReturnValue(false);\n\n      // Act & Assert\n      await expect(service.validateRequest(request))\n        .rejects.toThrow(UnauthorizedException);\n      expect(service.extractTokenFromHeader).toHaveBeenCalledWith(request);\n      expect(mockTokenService.validateToken).toHaveBeenCalledWith(token);\n      expect(service.getIpFromRequest).toHaveBeenCalledWith(request);\n      expect(mockTokenService.isIpAllowed).toHaveBeenCalledWith(integrador, ipAddress);\n    });\n  });\n\n  describe('checkPermissions', () => {\n    it('deve retornar true quando token tem as permissões necessárias', () => {\n      // Arrange\n      const payload = {\n        scopes: ['read:dados_basicos', 'write:solicitacoes'],\n      };\n      const requiredScopes = ['read:dados_basicos'];\n      const request = {\n        integradorTokenPayload: payload,\n      } as unknown as Request;\n\n      mockTokenService.hasRequiredScopes.mockReturnValue(true);\n\n      // Act\n      const result = service.checkPermissions(request, requiredScopes);\n\n      // Assert\n      expect(mockTokenService.hasRequiredScopes).toHaveBeenCalledWith(payload, requiredScopes);\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando token não tem as permissões necessárias', () => {\n      // Arrange\n      const payload = {\n        scopes: ['read:dados_basicos'],\n      };\n      const requiredScopes = ['write:solicitacoes'];\n      const request = {\n        integradorTokenPayload: payload,\n      } as unknown as Request;\n\n      mockTokenService.hasRequiredScopes.mockReturnValue(false);\n\n      // Act\n      const result = service.checkPermissions(request, requiredScopes);\n\n      // Assert\n      expect(mockTokenService.hasRequiredScopes).toHaveBeenCalledWith(payload, requiredScopes);\n      expect(result).toBe(false);\n    });\n\n    it('deve retornar false quando não há payload no request', () => {\n      // Arrange\n      const requiredScopes = ['read:dados_basicos'];\n      const request = {} as Request;\n\n      // Act\n      const result = service.checkPermissions(request, requiredScopes);\n\n      // Assert\n      expect(mockTokenService.hasRequiredScopes).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isTokenRevogado', () => {\n    it('deve retornar true quando token está na lista de revogados', async () => {\n      // Arrange\n      const tokenHash = 'token-hash';\n      mockTokenRevogadoRepository.findOne.mockResolvedValue({\n        id: 'revogado-id',\n        tokenHash,\n      });\n\n      // Act\n      const result = await service.isTokenRevogado(tokenHash);\n\n      // Assert\n      expect(mockTokenRevogadoRepository.findOne).toHaveBeenCalledWith({\n        where: { tokenHash }\n      });\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando token não está na lista de revogados', async () => {\n      // Arrange\n      const tokenHash = 'token-hash';\n      mockTokenRevogadoRepository.findOne.mockResolvedValue(null);\n\n      // Act\n      const result = await service.isTokenRevogado(tokenHash);\n\n      // Assert\n      expect(mockTokenRevogadoRepository.findOne).toHaveBeenCalledWith({\n        where: { tokenHash }\n      });\n      expect(result).toBe(false);\n    });\n  });\n});\n"],"version":3}