628c1eb509cf39a515714d06c43780a4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGroupMappingRepository = void 0;
const typeorm_1 = require("typeorm");
const common_1 = require("@nestjs/common");
const permission_group_mapping_entity_1 = require("../../entities/permission-group-mapping.entity");
/**
 * Repositório para a entidade PermissionGroupMapping.
 *
 * Fornece métodos para manipulação de mapeamentos entre permissões e grupos no banco de dados,
 * incluindo busca por grupo, permissão e operações de CRUD.
 */
let PermissionGroupMappingRepository = class PermissionGroupMappingRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(permission_group_mapping_entity_1.PermissionGroupMapping, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca mapeamentos por ID de grupo.
     *
     * @param groupId ID do grupo
     * @returns Lista de mapeamentos encontrados
     */
    async findByGroupId(groupId) {
        return this.find({ where: { groupId } });
    }
    /**
     * Busca mapeamentos por ID de permissão.
     *
     * @param permissionId ID da permissão
     * @returns Lista de mapeamentos encontrados
     */
    async findByPermissionId(permissionId) {
        return this.find({ where: { permissionId } });
    }
    /**
     * Busca mapeamento por ID de grupo e ID de permissão.
     *
     * @param groupId ID do grupo
     * @param permissionId ID da permissão
     * @returns O mapeamento encontrado ou null
     */
    async findByGroupAndPermission(groupId, permissionId) {
        return this.findOne({ where: { groupId, permissionId } });
    }
    /**
     * Cria um novo mapeamento entre grupo e permissão.
     *
     * @param data Dados do mapeamento a ser criado
     * @returns O mapeamento criado
     */
    async createMapping(data) {
        const mapping = this.create(data);
        return this.save(mapping);
    }
    /**
     * Remove um mapeamento entre grupo e permissão.
     *
     * @param id ID do mapeamento a ser removido
     * @returns true se o mapeamento foi removido, false caso contrário
     */
    async removeMapping(id) {
        const result = await this.delete(id);
        return result.affected !== null && result.affected !== undefined && result.affected > 0;
    }
    /**
     * Remove todos os mapeamentos de um grupo.
     *
     * @param groupId ID do grupo
     * @returns true se os mapeamentos foram removidos, false caso contrário
     */
    async removeMappingsByGroupId(groupId) {
        const result = await this.delete({ groupId });
        return result.affected !== null && result.affected !== undefined && result.affected > 0;
    }
    /**
     * Remove todos os mapeamentos de uma permissão.
     *
     * @param permissionId ID da permissão
     * @returns true se os mapeamentos foram removidos, false caso contrário
     */
    async removeMappingsByPermissionId(permissionId) {
        const result = await this.delete({ permissionId });
        return result.affected !== null && result.affected !== undefined && result.affected > 0;
    }
};
exports.PermissionGroupMappingRepository = PermissionGroupMappingRepository;
exports.PermissionGroupMappingRepository = PermissionGroupMappingRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], PermissionGroupMappingRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXHJlcG9zaXRvcmllc1xccGVybWlzc2lvbi1ncm91cC1tYXBwaW5nLnJlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLHFDQUFpRDtBQUNqRCwyQ0FBNEM7QUFDNUMsb0dBQXdGO0FBRXhGOzs7OztHQUtHO0FBRUksSUFBTSxnQ0FBZ0MsR0FBdEMsTUFBTSxnQ0FBaUMsU0FBUSxvQkFBa0M7SUFDbEU7SUFBcEIsWUFBb0IsVUFBc0I7UUFDeEMsS0FBSyxDQUFDLHdEQUFzQixFQUFFLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFEOUMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUUxQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQWU7UUFDakMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxZQUFvQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxPQUFlLEVBQUUsWUFBb0I7UUFDbEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsYUFBYSxDQUFDLElBQXFDO1FBQ3ZELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBVTtRQUM1QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsdUJBQXVCLENBQUMsT0FBZTtRQUMzQyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLElBQUksTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDMUYsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLDRCQUE0QixDQUFDLFlBQW9CO1FBQ3JELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDbkQsT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVMsSUFBSSxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUMxRixDQUFDO0NBQ0YsQ0FBQTtBQS9FWSw0RUFBZ0M7MkNBQWhDLGdDQUFnQztJQUQ1QyxJQUFBLG1CQUFVLEdBQUU7eURBRXFCLG9CQUFVLG9CQUFWLG9CQUFVO0dBRC9CLGdDQUFnQyxDQStFNUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXHJlcG9zaXRvcmllc1xccGVybWlzc2lvbi1ncm91cC1tYXBwaW5nLnJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSwgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IFBlcm1pc3Npb25Hcm91cE1hcHBpbmcgfSBmcm9tICcuLi8uLi9lbnRpdGllcy9wZXJtaXNzaW9uLWdyb3VwLW1hcHBpbmcuZW50aXR5JztcblxuLyoqXG4gKiBSZXBvc2l0w7NyaW8gcGFyYSBhIGVudGlkYWRlIFBlcm1pc3Npb25Hcm91cE1hcHBpbmcuXG4gKiBcbiAqIEZvcm5lY2UgbcOpdG9kb3MgcGFyYSBtYW5pcHVsYcOnw6NvIGRlIG1hcGVhbWVudG9zIGVudHJlIHBlcm1pc3PDtWVzIGUgZ3J1cG9zIG5vIGJhbmNvIGRlIGRhZG9zLFxuICogaW5jbHVpbmRvIGJ1c2NhIHBvciBncnVwbywgcGVybWlzc8OjbyBlIG9wZXJhw6fDtWVzIGRlIENSVUQuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQZXJtaXNzaW9uR3JvdXBNYXBwaW5nUmVwb3NpdG9yeSBleHRlbmRzIFJlcG9zaXRvcnk8UGVybWlzc2lvbkdyb3VwTWFwcGluZz4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTb3VyY2U6IERhdGFTb3VyY2UpIHtcbiAgICBzdXBlcihQZXJtaXNzaW9uR3JvdXBNYXBwaW5nLCBkYXRhU291cmNlLmNyZWF0ZUVudGl0eU1hbmFnZXIoKSk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgbWFwZWFtZW50b3MgcG9yIElEIGRlIGdydXBvLlxuICAgKiBcbiAgICogQHBhcmFtIGdyb3VwSWQgSUQgZG8gZ3J1cG9cbiAgICogQHJldHVybnMgTGlzdGEgZGUgbWFwZWFtZW50b3MgZW5jb250cmFkb3NcbiAgICovXG4gIGFzeW5jIGZpbmRCeUdyb3VwSWQoZ3JvdXBJZDogc3RyaW5nKTogUHJvbWlzZTxQZXJtaXNzaW9uR3JvdXBNYXBwaW5nW10+IHtcbiAgICByZXR1cm4gdGhpcy5maW5kKHsgd2hlcmU6IHsgZ3JvdXBJZCB9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIG1hcGVhbWVudG9zIHBvciBJRCBkZSBwZXJtaXNzw6NvLlxuICAgKiBcbiAgICogQHBhcmFtIHBlcm1pc3Npb25JZCBJRCBkYSBwZXJtaXNzw6NvXG4gICAqIEByZXR1cm5zIExpc3RhIGRlIG1hcGVhbWVudG9zIGVuY29udHJhZG9zXG4gICAqL1xuICBhc3luYyBmaW5kQnlQZXJtaXNzaW9uSWQocGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPFBlcm1pc3Npb25Hcm91cE1hcHBpbmdbXT4ge1xuICAgIHJldHVybiB0aGlzLmZpbmQoeyB3aGVyZTogeyBwZXJtaXNzaW9uSWQgfSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSBtYXBlYW1lbnRvIHBvciBJRCBkZSBncnVwbyBlIElEIGRlIHBlcm1pc3PDo28uXG4gICAqIFxuICAgKiBAcGFyYW0gZ3JvdXBJZCBJRCBkbyBncnVwb1xuICAgKiBAcGFyYW0gcGVybWlzc2lvbklkIElEIGRhIHBlcm1pc3PDo29cbiAgICogQHJldHVybnMgTyBtYXBlYW1lbnRvIGVuY29udHJhZG8gb3UgbnVsbFxuICAgKi9cbiAgYXN5bmMgZmluZEJ5R3JvdXBBbmRQZXJtaXNzaW9uKGdyb3VwSWQ6IHN0cmluZywgcGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPFBlcm1pc3Npb25Hcm91cE1hcHBpbmcgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZSh7IHdoZXJlOiB7IGdyb3VwSWQsIHBlcm1pc3Npb25JZCB9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyaWEgdW0gbm92byBtYXBlYW1lbnRvIGVudHJlIGdydXBvIGUgcGVybWlzc8Ojby5cbiAgICogXG4gICAqIEBwYXJhbSBkYXRhIERhZG9zIGRvIG1hcGVhbWVudG8gYSBzZXIgY3JpYWRvXG4gICAqIEByZXR1cm5zIE8gbWFwZWFtZW50byBjcmlhZG9cbiAgICovXG4gIGFzeW5jIGNyZWF0ZU1hcHBpbmcoZGF0YTogUGFydGlhbDxQZXJtaXNzaW9uR3JvdXBNYXBwaW5nPik6IFByb21pc2U8UGVybWlzc2lvbkdyb3VwTWFwcGluZz4ge1xuICAgIGNvbnN0IG1hcHBpbmcgPSB0aGlzLmNyZWF0ZShkYXRhKTtcbiAgICByZXR1cm4gdGhpcy5zYXZlKG1hcHBpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB1bSBtYXBlYW1lbnRvIGVudHJlIGdydXBvIGUgcGVybWlzc8Ojby5cbiAgICogXG4gICAqIEBwYXJhbSBpZCBJRCBkbyBtYXBlYW1lbnRvIGEgc2VyIHJlbW92aWRvXG4gICAqIEByZXR1cm5zIHRydWUgc2UgbyBtYXBlYW1lbnRvIGZvaSByZW1vdmlkbywgZmFsc2UgY2FzbyBjb250csOhcmlvXG4gICAqL1xuICBhc3luYyByZW1vdmVNYXBwaW5nKGlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmRlbGV0ZShpZCk7XG4gICAgcmV0dXJuIHJlc3VsdC5hZmZlY3RlZCAhPT0gbnVsbCAmJiByZXN1bHQuYWZmZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQuYWZmZWN0ZWQgPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0b2RvcyBvcyBtYXBlYW1lbnRvcyBkZSB1bSBncnVwby5cbiAgICogXG4gICAqIEBwYXJhbSBncm91cElkIElEIGRvIGdydXBvXG4gICAqIEByZXR1cm5zIHRydWUgc2Ugb3MgbWFwZWFtZW50b3MgZm9yYW0gcmVtb3ZpZG9zLCBmYWxzZSBjYXNvIGNvbnRyw6FyaW9cbiAgICovXG4gIGFzeW5jIHJlbW92ZU1hcHBpbmdzQnlHcm91cElkKGdyb3VwSWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZGVsZXRlKHsgZ3JvdXBJZCB9KTtcbiAgICByZXR1cm4gcmVzdWx0LmFmZmVjdGVkICE9PSBudWxsICYmIHJlc3VsdC5hZmZlY3RlZCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdC5hZmZlY3RlZCA+IDA7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRvZG9zIG9zIG1hcGVhbWVudG9zIGRlIHVtYSBwZXJtaXNzw6NvLlxuICAgKiBcbiAgICogQHBhcmFtIHBlcm1pc3Npb25JZCBJRCBkYSBwZXJtaXNzw6NvXG4gICAqIEByZXR1cm5zIHRydWUgc2Ugb3MgbWFwZWFtZW50b3MgZm9yYW0gcmVtb3ZpZG9zLCBmYWxzZSBjYXNvIGNvbnRyw6FyaW9cbiAgICovXG4gIGFzeW5jIHJlbW92ZU1hcHBpbmdzQnlQZXJtaXNzaW9uSWQocGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmRlbGV0ZSh7IHBlcm1pc3Npb25JZCB9KTtcbiAgICByZXR1cm4gcmVzdWx0LmFmZmVjdGVkICE9PSBudWxsICYmIHJlc3VsdC5hZmZlY3RlZCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdC5hZmZlY3RlZCA+IDA7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==