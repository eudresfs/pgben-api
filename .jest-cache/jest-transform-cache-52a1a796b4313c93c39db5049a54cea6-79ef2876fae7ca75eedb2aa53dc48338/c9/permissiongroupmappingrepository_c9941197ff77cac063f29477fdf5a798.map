{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-group-mapping.repository.ts","mappings":";;;;;;;;;;;;;AAAA,qCAAiD;AACjD,2CAA4C;AAC5C,oGAAwF;AAExF;;;;;GAKG;AAEI,IAAM,gCAAgC,GAAtC,MAAM,gCAAiC,SAAQ,oBAAkC;IAClE;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,wDAAsB,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAD9C,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,aAAa,CAAC,OAAe;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB,CAAC,YAAoB;QAC3C,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,wBAAwB,CAAC,OAAe,EAAE,YAAoB;QAClE,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,aAAa,CAAC,IAAqC;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,aAAa,CAAC,EAAU;QAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrC,OAAO,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1F,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,uBAAuB,CAAC,OAAe;QAC3C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC9C,OAAO,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1F,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,4BAA4B,CAAC,YAAoB;QACrD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1F,CAAC;CACF,CAAA;AA/EY,4EAAgC;2CAAhC,gCAAgC;IAD5C,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,gCAAgC,CA+E5C","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-group-mapping.repository.ts"],"sourcesContent":["import { DataSource, Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { PermissionGroupMapping } from '../../entities/permission-group-mapping.entity';\n\n/**\n * Repositório para a entidade PermissionGroupMapping.\n * \n * Fornece métodos para manipulação de mapeamentos entre permissões e grupos no banco de dados,\n * incluindo busca por grupo, permissão e operações de CRUD.\n */\n@Injectable()\nexport class PermissionGroupMappingRepository extends Repository<PermissionGroupMapping> {\n  constructor(private dataSource: DataSource) {\n    super(PermissionGroupMapping, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca mapeamentos por ID de grupo.\n   * \n   * @param groupId ID do grupo\n   * @returns Lista de mapeamentos encontrados\n   */\n  async findByGroupId(groupId: string): Promise<PermissionGroupMapping[]> {\n    return this.find({ where: { groupId } });\n  }\n\n  /**\n   * Busca mapeamentos por ID de permissão.\n   * \n   * @param permissionId ID da permissão\n   * @returns Lista de mapeamentos encontrados\n   */\n  async findByPermissionId(permissionId: string): Promise<PermissionGroupMapping[]> {\n    return this.find({ where: { permissionId } });\n  }\n\n  /**\n   * Busca mapeamento por ID de grupo e ID de permissão.\n   * \n   * @param groupId ID do grupo\n   * @param permissionId ID da permissão\n   * @returns O mapeamento encontrado ou null\n   */\n  async findByGroupAndPermission(groupId: string, permissionId: string): Promise<PermissionGroupMapping | null> {\n    return this.findOne({ where: { groupId, permissionId } });\n  }\n\n  /**\n   * Cria um novo mapeamento entre grupo e permissão.\n   * \n   * @param data Dados do mapeamento a ser criado\n   * @returns O mapeamento criado\n   */\n  async createMapping(data: Partial<PermissionGroupMapping>): Promise<PermissionGroupMapping> {\n    const mapping = this.create(data);\n    return this.save(mapping);\n  }\n\n  /**\n   * Remove um mapeamento entre grupo e permissão.\n   * \n   * @param id ID do mapeamento a ser removido\n   * @returns true se o mapeamento foi removido, false caso contrário\n   */\n  async removeMapping(id: string): Promise<boolean> {\n    const result = await this.delete(id);\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n\n  /**\n   * Remove todos os mapeamentos de um grupo.\n   * \n   * @param groupId ID do grupo\n   * @returns true se os mapeamentos foram removidos, false caso contrário\n   */\n  async removeMappingsByGroupId(groupId: string): Promise<boolean> {\n    const result = await this.delete({ groupId });\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n\n  /**\n   * Remove todos os mapeamentos de uma permissão.\n   * \n   * @param permissionId ID da permissão\n   * @returns true se os mapeamentos foram removidos, false caso contrário\n   */\n  async removeMappingsByPermissionId(permissionId: string): Promise<boolean> {\n    const result = await this.delete({ permissionId });\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n}\n"],"version":3}