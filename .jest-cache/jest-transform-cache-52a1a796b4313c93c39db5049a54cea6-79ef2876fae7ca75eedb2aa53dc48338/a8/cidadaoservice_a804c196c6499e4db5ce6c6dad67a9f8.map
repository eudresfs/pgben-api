{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\cidadao.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CASwB;AACxB,2DAKoC;AACpC,iDAAqD;AACrD,2EAAuE;AAGvE,sEAGqC;AACrC,yDAAkE;AAClE,mEAA8D;AAG9D,qDAAyC;AACzC,qFAAiF;AAEjF;;;;GAIG;AAEI,IAAM,cAAc,sBAApB,MAAM,cAAc;IAqBN;IACA;IAEA;IAvBF,MAAM,GAAG,IAAI,eAAM,CAAC,gBAAc,CAAC,IAAI,CAAC,CAAC;IAC1D,8DAA8D;IAC7C,aAAa,GAAG;QAC/B,OAAO,EAAE,IAAI,EAAE,oCAAoC;QACnD,IAAI,EAAE,GAAG,EAAE,oDAAoD;QAC/D,KAAK,EAAE,EAAE,EAAE,0BAA0B;QACrC,OAAO,EAAE,IAAI,EAAE,iBAAiB;KACjC,CAAC;IACe,YAAY,GAAG,UAAU,CAAC;IAE3C;;;;OAIG;IACK,MAAM,CAAC,UAAkB;QAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC;IACtE,CAAC;IAED,YACmB,iBAAoC,EACpC,YAA0B,EAE1B,mBAAwC;QAHxC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,iBAAY,GAAZ,YAAY,CAAc;QAE1B,wBAAmB,GAAnB,mBAAmB,CAAqB;IACxD,CAAC;IAEJ;;;;OAIG;IACH;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,OAMb;QACC,MAAM,EAAE,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,IAAI,EAAE,CAAC;QAE1E,oBAAoB;QACpB,MAAM,KAAK,GAAQ,EAAE,CAAC;QAEtB,6CAA6C;QAC7C,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,GAAG,GAAG;gBACV,EAAE,IAAI,EAAE,EAAE,MAAM,EAAE,IAAI,MAAM,GAAG,EAAE,EAAE;gBACnC,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;gBACrD,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE;aACtD,CAAC;QACJ,CAAC;QAED,2BAA2B;QAC3B,IAAI,MAAM,EAAE,CAAC;YACX,KAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC;QACvD,CAAC;QAED,2CAA2C;QAC3C,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC;QAC/B,CAAC;QAED,+BAA+B;QAC/B,MAAM,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC;QAEhC,IAAI,CAAC;YACH,8DAA8D;YAC9D,MAAM,CAAC,QAAQ,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;gBAC7D,KAAK;gBACL,IAAI;gBACJ,IAAI,EAAE,KAAK;gBACX,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE;gBACtB,gBAAgB,EAAE,KAAK,EAAE,2CAA2C;aACrE,CAAC,CAAC;YAEH,iCAAiC;YACjC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;YACvC,MAAM,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC;YAC7B,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,CAAC;YAEzB,gCAAgC;YAChC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACrC,IAAA,mCAAe,EAAC,yCAAkB,EAAE,OAAO,EAAE;gBAC3C,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;aAChC,CAAC,CACH,CAAC;YAEF,OAAO;gBACL,KAAK;gBACL,IAAI,EAAE;oBACJ,KAAK;oBACL,IAAI;oBACJ,KAAK;oBACL,KAAK;oBACL,OAAO;oBACP,OAAO;iBACR;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,qCAA4B,CAAC,yBAAyB,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,QAAQ,CACZ,EAAU,EACV,gBAAgB,GAAG,KAAK;QAExB,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,MAAM,EAAE,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAEvF,4BAA4B;QAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAqB,QAAQ,CAAC,CAAC;QACzE,IAAI,MAAM,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,EAAE,EAAE,CAAC,CAAC;YACrD,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC,IAAA,wBAAM,EAAC,EAAE,CAAC,EAAE,CAAC;YAChB,MAAM,IAAI,4BAAmB,CAAC,4BAA4B,CAAC,CAAC;QAC9D,CAAC;QAED,IAAI,CAAC;YACH,uFAAuF;YACvF,MAAM,cAAc,GAAG,gBAAgB;gBACrC,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC;oBACE,IAAI;oBACJ,MAAM;oBACN,KAAK;oBACL,KAAK;oBACL,UAAU;oBACV,UAAU;oBACV,YAAY;oBACZ,YAAY;oBACZ,YAAY;iBACb,CAAC;YAEN,+CAA+C;YAC/C,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CACnD,EAAE,EACF,gBAAgB,EAChB,cAAc,CACf,CAAC;YAEF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,CAAC,CAAC;YACxD,CAAC;YAED,MAAM,UAAU,GAAG,IAAA,mCAAe,EAAC,yCAAkB,EAAE,OAAO,EAAE;gBAC9D,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;aAChC,CAAC,CAAC;YAEH,0DAA0D;YAC1D,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;YAE5D,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IACE,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,4BAAmB,EACpC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,kCAAkC,KAAK,CAAC,OAAO,EAAE,EACjD,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,qCAA4B,CAAC,0BAA0B,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACH;;;OAGG;IACK,UAAU,CAAC,QAAgB;QACjC,0BAA0B;QAC1B,IAAI,QAAQ,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YAC3B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,uCAAuC;QACvC,IAAI,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YAClC,OAAO,KAAK,CAAC;QACf,CAAC;QAED,2DAA2D;QAC3D,oEAAoE;QACpE,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;;;;;OAWG;IACK,gBAAgB,CACtB,KAAa,EACb,KAAU,EACV,MAAc,IAAI;QAElB,+DAA+D;QAC/D,UAAU,CAAC,KAAK,IAAI,EAAE;YACpB,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACjD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,oDAAoD;gBACpD,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,sBAAsB,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,SAAS,KAAK,CAAC,OAAO,EAAE,CACrE,CAAC;YACJ,CAAC;QACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,iDAAiD;IAC3D,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,KAAK,CAAC,SAAS,CACb,GAAW,EACX,gBAAgB,GAAG,KAAK,EACxB,cAAyB;QAEzB,wDAAwD;QACxD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,SAAS,GAAG,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAExD,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YAC9B,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;QACrD,CAAC;QAED,4BAA4B;QAC5B,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAExC,4CAA4C;QAC5C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,4BAAmB,CAAC,cAAc,CAAC,CAAC;QAChD,CAAC;QAED,IAAI,CAAC;YACH,2BAA2B;YAC3B,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,OAAO,QAAQ,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAE9F,sDAAsD;YACtD,IAAI,aAAa,GAAmC,SAAS,CAAC;YAC9D,IAAI,CAAC;gBACH,6DAA6D;gBAC7D,MAAM,YAAY,GAChB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAqB,QAAQ,CAAC,CAAC;gBACtD,MAAM,cAAc,GAAG,IAAI,OAAO,CAAY,CAAC,OAAO,EAAE,EAAE;oBACxD,UAAU,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,0CAA0C;gBACtF,CAAC,CAAC,CAAC;gBACH,aAAa,GAAG,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC;oBAClC,YAAY;oBACZ,cAAc;iBACf,CAAC,CAAuB,CAAC;YAC5B,CAAC;YAAC,OAAO,UAAU,EAAE,CAAC;gBACpB,4DAA4D;gBAC5D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,SAAS,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC,CAAC;YACxE,CAAC;YAED,gDAAgD;YAChD,IAAI,aAAa,EAAE,CAAC;gBAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,SAAS,GAAG,CAAC,CAAC;gBAC9C,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,wCAAwC;YACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,SAAS,GAAG,CAAC,CAAC;YAE/C,qDAAqD;YACrD,MAAM,MAAM,GAAG,cAAc,IAAI;gBAC/B,IAAI;gBACJ,MAAM;gBACN,KAAK;gBACL,KAAK;gBACL,UAAU;gBACV,iBAAiB;gBACjB,UAAU;gBACV,YAAY;gBACZ,YAAY;gBACZ,YAAY;aACb,CAAC;YAEF,uCAAuC;YACvC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CACpD,QAAQ,EACR,gBAAgB,EAChB,MAAM,CACP,CAAC;YAEF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,CAAC,CAAC;YACxD,CAAC;YAED,wDAAwD;YACxD,MAAM,UAAU,GAAG,IAAA,mCAAe,EAAC,yCAAkB,EAAE,OAAO,EAAE;gBAC9D,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;aAChC,CAAC,CAAC;YAEH,+DAA+D;YAC/D,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAEpE,6CAA6C;YAC7C,IAAI,CAAC,gBAAgB,CACnB,GAAG,IAAI,CAAC,YAAY,MAAM,OAAO,CAAC,EAAE,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,EAC7E,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,CAAC;YAEF,+BAA+B;YAC/B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACzC,IAAI,SAAS,GAAG,GAAG,EAAE,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,SAAS,MAAM,SAAS,IAAI,CAAC,CAAC;YACvE,CAAC;YAED,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IACE,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,4BAAmB,EACpC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,mCAAmC,QAAQ,MAAM,KAAK,CAAC,OAAO,EAAE,EAChE,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,qCAA4B,CAAC,gCAAgC,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IACD,iCAAiC;IAEjC;;;;;;;OAOG;IACH,KAAK,CAAC,SAAS,CACb,GAAW,EACX,gBAAgB,GAAG,KAAK;QAExB,2CAA2C;QAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,SAAS,GAAG,OAAO,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QACpF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,SAAS,6BAA6B,CAAC,CAAC;QAE5D,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YAC9B,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;QACrD,CAAC;QAED,4BAA4B;QAC5B,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAExC,cAAc;QACd,IAAI,QAAQ,CAAC,MAAM,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACzD,MAAM,IAAI,4BAAmB,CAAC,yBAAyB,CAAC,CAAC;QAC3D,CAAC;QAED,IAAI,CAAC;YACH,mDAAmD;YACnD,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,OAAO,QAAQ,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YAE9F,IAAI,aAAa,GAA8B,IAAI,CAAC;YACpD,IAAI,CAAC;gBACH,mDAAmD;gBACnD,MAAM,YAAY,GAChB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAqB,QAAQ,CAAC,CAAC;gBACtD,aAAa,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC;oBACjC,YAAY;oBACZ,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE;wBAC5B,UAAU,CAAC,GAAG,EAAE;4BACd,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,SAAS,8BAA8B,CAAC,CAAC;4BAC9D,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,uCAAuC;oBAClD,CAAC,CAAC;iBACH,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,UAAU,EAAE,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,IAAI,SAAS,4BAA4B,UAAU,CAAC,OAAO,EAAE,CAC9D,CAAC;gBACF,8CAA8C;YAChD,CAAC;YAED,IAAI,aAAa,EAAE,CAAC;gBAClB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBACzC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,IAAI,SAAS,iCAAiC,QAAQ,OAAO,SAAS,IAAI,CAC3E,CAAC;gBACF,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,qDAAqD;YACrD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,IAAI,SAAS,kCAAkC,QAAQ,wBAAwB,CAChF,CAAC;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAE/B,mCAAmC;YACnC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CACpD,QAAQ,EACR,gBAAgB,CACjB,CAAC;YAEF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,IAAI,SAAS,+BAA+B,SAAS,IAAI,CAC1D,CAAC;gBACF,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,GAAG,iBAAiB,CAAC,CAAC;YACvE,CAAC;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC;YACxC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,IAAI,SAAS,qCAAqC,MAAM,IAAI,CAC7D,CAAC;YAEF,qBAAqB;YACrB,MAAM,UAAU,GAAG,IAAA,mCAAe,EAAC,yCAAkB,EAAE,OAAO,EAAE;gBAC9D,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;aAChC,CAAC,CAAC;YAEH,6CAA6C;YAC7C,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAEpE,2EAA2E;YAC3E,IAAI,OAAO,CAAC,EAAE,EAAE,CAAC;gBACf,IAAI,CAAC,gBAAgB,CACnB,GAAG,IAAI,CAAC,YAAY,MAAM,OAAO,CAAC,EAAE,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,EAC7E,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,CAAC;YACJ,CAAC;YAED,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;gBAChB,IAAI,CAAC,gBAAgB,CACnB,GAAG,IAAI,CAAC,YAAY,OAAO,OAAO,CAAC,GAAG,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,EAC/E,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,CAAC;YACJ,CAAC;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,SAAS,0BAA0B,SAAS,IAAI,CAAC,CAAC;YAEtE,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,IAAI,SAAS,aAAa,SAAS,OAAO,KAAK,CAAC,OAAO,EAAE,CAC1D,CAAC;YAEF,IACE,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,4BAAmB,EACpC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YACD,MAAM,IAAI,qCAA4B,CAAC,gCAAgC,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,cAAc,CAClB,QAAgB,EAChB,gBAAgB,GAAG,KAAK;QAExB,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YACxC,MAAM,IAAI,4BAAmB,CAAC,wBAAwB,CAAC,CAAC;QAC1D,CAAC;QAED,iCAAiC;QACjC,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAElD,uEAAuE;QACvE,IAAI,aAAa,CAAC,MAAM,GAAG,EAAE,IAAI,aAAa,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;YAC3D,MAAM,IAAI,4BAAmB,CAAC,oCAAoC,CAAC,CAAC;QACtE,CAAC;QAED,IAAI,CAAC;YACH,kBAAkB;YAClB,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,YAAY,aAAa,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACxG,MAAM,aAAa,GACjB,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAqB,QAAQ,CAAC,CAAC;YAE5D,IAAI,aAAa,EAAE,CAAC;gBAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,sCAAsC,aAAa,EAAE,CACtD,CAAC;gBACF,OAAO,aAAa,CAAC;YACvB,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,aAAa,EAAE,CAAC,CAAC;YAC1E,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CACzD,aAAa,EACb,gBAAgB,CACjB,CAAC;YAEF,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,CAAC,CAAC;YACxD,CAAC;YAED,MAAM,UAAU,GAAG,IAAA,mCAAe,EAAC,yCAAkB,EAAE,OAAO,EAAE;gBAC9D,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;aAChC,CAAC,CAAC;YAEH,qBAAqB;YACrB,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;YAE1E,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IACE,KAAK,YAAY,4BAAmB;gBACpC,KAAK,YAAY,0BAAiB,EAClC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,wCAAwC,KAAK,CAAC,OAAO,EAAE,EACvD,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,qCAA4B,CACpC,qCAAqC,CACtC,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,UAAU,CACd,IAAY,EACZ,gBAAgB,GAAG,KAAK;QAExB,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1D,MAAM,IAAI,4BAAmB,CAAC,uCAAuC,CAAC,CAAC;QACzE,CAAC;QAED,IAAI,CAAC;YACH,kBAAkB;YAClB,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,QAAQ,IAAI,CAAC,WAAW,EAAE,IAAI,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACzG,MAAM,cAAc,GAClB,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAuB,QAAQ,CAAC,CAAC;YAE9D,IAAI,cAAc,EAAE,CAAC;gBACnB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,IAAI,EAAE,CAAC,CAAC;gBAC5D,OAAO,cAAc,CAAC;YACxB,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,IAAI,EAAE,CAAC,CAAC;YAC7D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,CACtD,IAAI,EACJ,gBAAgB,CACjB,CAAC;YAEF,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAC3C,IAAA,mCAAe,EAAC,yCAAkB,EAAE,OAAO,EAAE;gBAC3C,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;aAChC,CAAC,CACH,CAAC;YAEF,qFAAqF;YACrF,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CACzB,QAAQ,EACR,WAAW,EACX,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAC3B,CAAC;YAEF,OAAO,WAAW,CAAC;QACrB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,4BAAmB,EAAE,CAAC;gBACzC,MAAM,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,qCAAqC,KAAK,CAAC,OAAO,EAAE,EACpD,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,qCAA4B,CACpC,kCAAkC,CACnC,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,aAAa,CAAC,YAOnB;QACC,MAAM,EACJ,EAAE,EACF,GAAG,EACH,GAAG,EACH,QAAQ,EACR,IAAI,EACJ,gBAAgB,GAAG,KAAK,GACzB,GAAG,YAAY,CAAC;QAEjB,gDAAgD;QAChD,MAAM,UAAU,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,MAAM,CACtD,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CACxC,CAAC;QAEF,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,4BAAmB,CAC3B,0EAA0E,CAC3E,CAAC;QACJ,CAAC;QAED,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,4BAAmB,CAC3B,8CAA8C,CAC/C,CAAC;QACJ,CAAC;QAED,IAAI,CAAC;YACH,gDAAgD;YAChD,IAAI,EAAE,EAAE,CAAC;gBACP,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;YACnD,CAAC;YAED,IAAI,GAAG,EAAE,CAAC;gBACR,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;YACrD,CAAC;YAED,IAAI,GAAG,EAAE,CAAC;gBACR,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;YACrD,CAAC;YAED,IAAI,QAAQ,EAAE,CAAC;gBACb,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAC/D,CAAC;YAED,IAAI,IAAI,EAAE,CAAC;gBACT,OAAO,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;YACvD,CAAC;YAED,+DAA+D;YAC/D,MAAM,IAAI,4BAAmB,CAAC,6BAA6B,CAAC,CAAC;QAC/D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IACE,KAAK,YAAY,4BAAmB;gBACpC,KAAK,YAAY,0BAAiB,EAClC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,uCAAuC,KAAK,CAAC,OAAO,EAAE,EACtD,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,qCAA4B,CAAC,wBAAwB,CAAC,CAAC;QACnE,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACH;;;;;OAKG;IACH;;;;;OAKG;IACK,KAAK,CAAC,eAAe,CAC3B,OAAY,EACZ,GAAY,EACZ,GAAY;QAEZ,IAAI,CAAC;YACH,MAAM,IAAI,GAAG;gBACX,GAAG,IAAI,CAAC,YAAY,MAAM,OAAO,CAAC,EAAE,QAAQ;gBAC5C,GAAG,IAAI,CAAC,YAAY,MAAM,OAAO,CAAC,EAAE,OAAO;gBAC3C,GAAG,IAAI,CAAC,YAAY,QAAQ;aAC7B,CAAC;YAEF,0BAA0B;YAC1B,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;gBACvB,MAAM,cAAc,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAC/D,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,OAAO,cAAc,QAAQ,CAAC,CAAC;gBAC7D,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,OAAO,cAAc,OAAO,CAAC,CAAC;YAC9D,CAAC;YAED,0BAA0B;YAC1B,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;gBACvB,MAAM,cAAc,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAC/D,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,OAAO,cAAc,QAAQ,CAAC,CAAC;gBAC7D,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,OAAO,cAAc,OAAO,CAAC,CAAC;YAC9D,CAAC;YAED,wDAAwD;YACxD,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAEjE,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,oCAAoC,OAAO,CAAC,EAAE,KAAK,IAAI,CAAC,MAAM,SAAS,CACxE,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,4BAA4B,KAAK,CAAC,OAAO,EAAE,EAC3C,KAAK,CAAC,KAAK,CACZ,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,KAAK,CAAC,kBAAkB,CAC9B,OAA2B,EAC3B,gBAAgB,GAAG,KAAK;QAExB,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YACtD,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACnC,MAAM,eAAe,GAAmB,EAAE,CAAC;YAE3C,mDAAmD;YACnD,eAAe,CAAC,IAAI,CAClB,IAAI,CAAC,YAAY,CAAC,GAAG,CACnB,GAAG,IAAI,CAAC,YAAY,MAAM,OAAO,CAAC,EAAE,IAAI,SAAS,EAAE,EACnD,OAAO,EACP,GAAG,CACJ,CACF,CAAC;YAEF,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;gBAChB,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACtD,eAAe,CAAC,IAAI,CAClB,IAAI,CAAC,YAAY,CAAC,GAAG,CACnB,GAAG,IAAI,CAAC,YAAY,OAAO,cAAc,IAAI,SAAS,EAAE,EACxD,OAAO,EACP,GAAG,CACJ,CACF,CAAC;YACJ,CAAC;YAED,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;gBAChB,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACtD,eAAe,CAAC,IAAI,CAClB,IAAI,CAAC,YAAY,CAAC,GAAG,CACnB,GAAG,IAAI,CAAC,YAAY,OAAO,cAAc,IAAI,SAAS,EAAE,EACxD,OAAO,EACP,GAAG,CACJ,CACF,CAAC;YACJ,CAAC;YAED,kDAAkD;YAClD,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAEnC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,oCAAoC,OAAO,CAAC,EAAE,KAAK,eAAe,CAAC,MAAM,YAAY,CACtF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,4BAA4B,KAAK,CAAC,OAAO,EAAE,EAC3C,KAAK,CAAC,KAAK,CACZ,CAAC;QACJ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CACV,gBAAkC,EAClC,SAAiB,EACjB,MAAc;QAEd,cAAc;QACd,IAAI,CAAC,gBAAgB,CAAC,GAAG,IAAI,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YAChE,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;QACrD,CAAC;QAED,kCAAkC;QAClC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACzD,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,IAAI,CAAC;QAElE,yBAAyB;QACzB,IAAI,QAAQ,CAAC,MAAM,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACzD,MAAM,IAAI,4BAAmB,CAAC,yBAAyB,CAAC,CAAC;QAC3D,CAAC;QAED,sCAAsC;QACtC,IAAI,gBAAgB,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC;YACrC,IAAI,QAAQ,CAAC,MAAM,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACzD,MAAM,IAAI,4BAAmB,CAAC,yBAAyB,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC;QAED,IAAI,CAAC;YACH,iDAAiD;YACjD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAEnE,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,IAAI,0BAAiB,CACzB,8CAA8C,CAC/C,CAAC;YACJ,CAAC;YAED,gEAAgE;YAChE,IAAI,QAAQ,EAAE,CAAC;gBACb,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;gBAEnE,IAAI,SAAS,EAAE,CAAC;oBACd,MAAM,IAAI,0BAAiB,CACzB,8CAA8C,CAC/C,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,2EAA2E;YAC3E,MAAM,EAAE,MAAM,EAAE,mBAAmB,EAAE,GAAG,WAAW,EAAE,GAAG,gBAAgB,CAAC;YAEzE,2CAA2C;YAC3C,MAAM,gBAAgB,GAAG,IAAA,0CAAmB,EAAC;gBAC3C,GAAG,WAAW;gBACd,GAAG,EAAE,QAAQ;gBACb,GAAG,CAAC,QAAQ,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;aACnC,CAAC,CAAC;YAEH,kBAAkB;YAClB,MAAM,aAAa,GACjB,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAExD,6CAA6C;YAC7C,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAChC,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,CACvC,aAAa,CAAC,EAAE,EAChB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;oBACrB,UAAU,EAAE,KAAK,CAAC,UAAU;oBAC5B,SAAS,EAAE,KAAK,CAAC,SAAS;iBAC3B,CAAC,CAAC,CACJ,CAAC;YACJ,CAAC;YAED,0CAA0C;YAC1C,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAC3D,aAAa,CAAC,EAAE,CACjB,CAAC;YAEF,OAAO,IAAA,mCAAe,EAAC,yCAAkB,EAAE,eAAe,EAAE;gBAC1D,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;aAChC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,iCAAiC;YACjC,IACE,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,4BAAmB;gBACpC,KAAK,YAAY,qBAAQ,EACzB,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YAED,2DAA2D;YAC3D,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;gBACf,4CAA4C;gBAC5C,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;oBAC3B,IAAI,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;wBACtC,IAAA,8BAAiB,EAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;oBACD,IAAI,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,EAAE,CAAC;wBAClD,IAAA,8BAAiB,EAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;gBACH,CAAC;gBAED,6CAA6C;gBAC7C,IAAA,mCAAsB,EAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE;oBACxC,kBAAkB,EAAE;wBAClB,MAAM,EAAE,SAAS;wBACjB,SAAS,EAAE,QAAQ;wBACnB,UAAU,EAAE,SAAS;qBACtB;oBACD,QAAQ,EAAE;wBACR,UAAU,EAAE,KAAK,CAAC,UAAU;wBAC5B,KAAK,EAAE,KAAK,CAAC,KAAK;wBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;wBACpB,MAAM,EAAE,KAAK,CAAC,MAAM;qBACrB;iBACF,CAAC,CAAC;YACL,CAAC;YAED,6BAA6B;YAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,KAAK,CAAC,OAAO,EAAE,EAAE;gBAC3D,KAAK,EAAE,KAAK,CAAC,OAAO;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,UAAU,EAAE,KAAK,CAAC,UAAU;gBAC5B,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,KAAK,EAAE,KAAK,CAAC,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,IAAI,qCAA4B,CACpC,+FAA+F,CAChG,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,MAAM,CACV,EAAU,EACV,gBAAkC,EAClC,MAAc;QAEd,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE1D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,CAAC,CAAC;YACxD,CAAC;YAED,MAAM,UAAU,GAAQ,EAAE,GAAG,gBAAgB,EAAE,CAAC;YAEhD,8EAA8E;YAC9E,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC;gBACzB,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAEzD,IAAI,QAAQ,KAAK,OAAO,CAAC,GAAG,EAAE,CAAC;oBAC7B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;oBAEnE,IAAI,SAAS,EAAE,CAAC;wBACd,MAAM,IAAI,0BAAiB,CACzB,8CAA8C,CAC/C,CAAC;oBACJ,CAAC;oBAED,4BAA4B;oBAC5B,UAAU,CAAC,GAAG,GAAG,QAAQ,CAAC;gBAC5B,CAAC;YACH,CAAC;YAED,8EAA8E;YAC9E,IAAI,KAAK,IAAI,gBAAgB,EAAE,CAAC;gBAC9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG;oBACnC,CAAC,CAAC,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;oBACzC,CAAC,CAAC,IAAI,CAAC;gBAET,IAAI,QAAQ,KAAK,OAAO,CAAC,GAAG,EAAE,CAAC;oBAC7B,IAAI,QAAQ,EAAE,CAAC;wBACb,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;wBAEnE,IAAI,SAAS,EAAE,CAAC;4BACd,MAAM,IAAI,0BAAiB,CACzB,8CAA8C,CAC/C,CAAC;wBACJ,CAAC;oBACH,CAAC;oBAED,4BAA4B;oBAC5B,UAAU,CAAC,GAAG,GAAG,QAAQ,CAAC;gBAC5B,CAAC;YACH,CAAC;YAED,wEAAwE;YAExE,+CAA+C;YAC/C,MAAM,cAAc,GAAG,IAAA,0CAAmB,EAAC,UAAU,CAAC,CAAC;YAEvD,sBAAsB;YACtB,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAC3D,EAAE,EACF,cAAc,CACf,CAAC;YAEF,kBAAkB;YAClB,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;YAE9C,MAAM,UAAU,GAAG,IAAA,mCAAe,EAChC,yCAAkB,EAClB,iBAAiB,EACjB;gBACE,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,IAAI;aAC/B,CACF,CAAC;YAEF,kCAAkC;YAClC,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CACzB,GAAG,IAAI,CAAC,YAAY,MAAM,iBAAiB,CAAC,EAAE,EAAE,EAChD,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,CAAC;YACF,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CACzB,GAAG,IAAI,CAAC,YAAY,OAAO,iBAAiB,CAAC,GAAG,EAAE,EAClD,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,CAAC;YAEF,IAAI,iBAAiB,CAAC,GAAG,EAAE,CAAC;gBAC1B,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CACzB,GAAG,IAAI,CAAC,YAAY,OAAO,iBAAiB,CAAC,GAAG,EAAE,EAClD,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,CAAC;YACJ,CAAC;YAED,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,iCAAiC;YACjC,IACE,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,4BAAmB;gBACpC,KAAK,YAAY,qBAAQ,EACzB,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YAED,2DAA2D;YAC3D,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;gBACf,4CAA4C;gBAC5C,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;oBAC3B,IAAI,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC;wBAC9D,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACzD,IAAA,8BAAiB,EAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;oBACD,IAAI,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC;wBAC9D,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;wBACzD,IAAA,8BAAiB,EAAC,QAAQ,CAAC,CAAC;oBAC9B,CAAC;gBACH,CAAC;gBAED,6CAA6C;gBAC7C,IAAA,mCAAsB,EAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE;oBACxC,kBAAkB,EAAE;wBAClB,MAAM,EAAE,SAAS;wBACjB,SAAS,EAAE,QAAQ;wBACnB,UAAU,EAAE,SAAS;wBACrB,QAAQ,EAAE,EAAE;qBACb;oBACD,QAAQ,EAAE;wBACR,UAAU,EAAE,KAAK,CAAC,UAAU;wBAC5B,KAAK,EAAE,KAAK,CAAC,KAAK;wBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;wBACpB,MAAM,EAAE,KAAK,CAAC,MAAM;qBACrB;iBACF,CAAC,CAAC;YACL,CAAC;YAED,6BAA6B;YAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,KAAK,CAAC,OAAO,EAAE,EAAE;gBAC/D,KAAK,EAAE,KAAK,CAAC,OAAO;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,UAAU,EAAE,KAAK,CAAC,UAAU;gBAC5B,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,KAAK,EAAE,KAAK,CAAC,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,IAAI,qCAA4B,CACpC,mGAAmG,CACpG,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,MAAc;QACrC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;YAC5B,MAAM,IAAI,4BAAmB,CAAC,kBAAkB,CAAC,CAAC;QACpD,CAAC;QAED,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAE1D,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,CAAC,CAAC;YACxD,CAAC;YAED,uBAAuB;YACvB,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,EAAE;gBACtC,UAAU,EAAE,IAAI,IAAI,EAAE;aACvB,CAAC,CAAC;YAEH,kBAAkB;YAClB,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,iCAAiC;YACjC,IACE,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,4BAAmB,EACpC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YAED,2DAA2D;YAC3D,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;gBACf,IAAA,mCAAsB,EAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE;oBACxC,kBAAkB,EAAE;wBAClB,MAAM,EAAE,SAAS;wBACjB,SAAS,EAAE,QAAQ;wBACnB,UAAU,EAAE,SAAS;wBACrB,QAAQ,EAAE,EAAE;qBACb;oBACD,QAAQ,EAAE;wBACR,UAAU,EAAE,KAAK,CAAC,UAAU;wBAC5B,KAAK,EAAE,KAAK,CAAC,KAAK;wBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;wBACpB,MAAM,EAAE,KAAK,CAAC,MAAM;qBACrB;iBACF,CAAC,CAAC;YACL,CAAC;YAED,6BAA6B;YAC7B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,KAAK,CAAC,OAAO,EAAE,EAAE;gBAC7D,KAAK,EAAE,KAAK,CAAC,OAAO;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,UAAU,EAAE,KAAK,CAAC,UAAU;gBAC5B,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,KAAK,EAAE,KAAK,CAAC,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,IAAI,qCAA4B,CACpC,iGAAiG,CAClG,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,2BAA2B,CAAC,SAAiB;QACjD,uBAAuB;QACvB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAAC,OAQlB;QACC,IAAI,CAAC;YACH,+CAA+C;YAC/C,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,YAAY,UAAU,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;YACzE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAErD,IAAI,MAAM,EAAE,CAAC;gBACX,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,QAAQ,EAAE,CAAC,CAAC;gBACtE,OAAO,MAAM,CAAC;YAChB,CAAC;YAED,qDAAqD;YACrD,MAAM,KAAK,GAAQ,EAAE,CAAC;YAEtB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,oDAAoD;gBACpD,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;YAC9B,CAAC;YAED,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;gBACnB,uDAAuD;gBACvD,KAAK,CAAC,iBAAiB,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;YAC5C,CAAC;YAED,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;gBACtB,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC;YACvC,CAAC;YAED,+DAA+D;YAC/D,MAAM,cAAc,GAAG;gBACrB,IAAI;gBACJ,MAAM;gBACN,KAAK;gBACL,KAAK;gBACL,UAAU;gBACV,UAAU;gBACV,YAAY;gBACZ,YAAY;gBACZ,YAAY;aACb,CAAC;YAEF,yDAAyD;YACzD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC;gBACvD,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,YAAY;gBACxC,cAAc,EAAE,OAAO,CAAC,cAAc,IAAI,MAAM;gBAChD,KAAK;gBACL,gBAAgB,EAAE,KAAK;gBACvB,cAAc;aACf,CAAC,CAAC;YAEH,iCAAiC;YACjC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAC5C,IAAA,mCAAe,EAAC,yCAAkB,EAAE,OAAO,EAAE;gBAC3C,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,IAAI;aAC/B,CAAC,CACH,CAAC;YAEF,gDAAgD;YAChD,MAAM,QAAQ,GAAG;gBACf,KAAK,EAAE,QAAQ;gBACf,IAAI,EAAE;oBACJ,KAAK,EAAE,QAAQ,CAAC,MAAM;oBACtB,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,WAAW,EAAE,MAAM,CAAC,WAAW;iBAChC;aACF,CAAC;YAEF,uDAAuD;YACvD,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAErE,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,qDAAqD,KAAK,CAAC,OAAO,EAAE,EACpE,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,qCAA4B,CAAC,yBAAyB,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,qBAAqB,CACzB,SAAiB,EACjB,2BAAgC,EAChC,MAAc;QAEd,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAEjE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,MAAM,IAAI,0BAAiB,CAAC,wBAAwB,CAAC,CAAC;YACxD,CAAC;YAED,8DAA8D;YAC9D,MAAM,iBAAiB,GACrB,MAAM,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAChD,SAAS,EACT,2BAA2B,CAC5B,CAAC;YAEJ,kBAAkB;YAClB,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;YAE9C,MAAM,UAAU,GAAG,IAAA,mCAAe,EAChC,yCAAkB,EAClB,iBAAiB,EACjB;gBACE,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,IAAI;aAC/B,CACF,CAAC;YAEF,kBAAkB;YAClB,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CACzB,GAAG,IAAI,CAAC,YAAY,MAAM,iBAAiB,CAAC,EAAE,EAAE,EAChD,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CACvB,CAAC;YAEF,OAAO,UAAU,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,gDAAgD;YAChD,IACE,KAAK,YAAY,0BAAiB;gBAClC,KAAK,YAAY,4BAAmB;gBACpC,KAAK,YAAY,0BAAiB,EAClC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,mDAAmD,KAAK,CAAC,OAAO,EAAE,EAClE,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,qCAA4B,CACpC,gDAAgD,CACjD,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAA;AAp2CY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;IAwBR,WAAA,IAAA,eAAM,EAAC,IAAA,mBAAU,EAAC,GAAG,EAAE,CAAC,2CAAmB,CAAC,CAAC,CAAA;yDAFV,sCAAiB,oBAAjB,sCAAiB,oDACtB,oBAAY,oBAAZ,oBAAY,oDAEL,2CAAmB,oBAAnB,2CAAmB;GAxBhD,cAAc,CAo2C1B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\cidadao.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n  InternalServerErrorException,\n  Logger,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport {\n  AppError,\n  throwFromPostgresError,\n  throwDuplicateCpf,\n  throwDuplicateNis,\n} from '../../../shared/exceptions';\nimport { CacheService } from '../../../shared/cache';\nimport { CidadaoRepository } from '../repositories/cidadao.repository';\nimport { CreateCidadaoDto } from '../dto/create-cidadao.dto';\nimport { UpdateCidadaoDto } from '../dto/update-cidadao.dto';\nimport {\n  CidadaoResponseDto,\n  CidadaoPaginatedResponseDto,\n} from '../dto/cidadao-response.dto';\nimport { plainToClass, plainToInstance } from 'class-transformer';\nimport { PapelCidadaoService } from './papel-cidadao.service';\nimport { CPFValidator } from '../validators/cpf-validator';\nimport { NISValidator } from '../validators/nis-validator';\nimport { isUUID } from 'class-validator';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\n\n/**\n * Serviço de cidadãos\n *\n * Responsável pela lógica de negócio relacionada a cidadãos/beneficiários\n */\n@Injectable()\nexport class CidadaoService {\n  private readonly logger = new Logger(CidadaoService.name);\n  // TTLs dinâmicos para diferentes tipos de entidades/operações\n  private readonly CACHE_TTL_MAP = {\n    cidadao: 3600, // 1 hora para registros individuais\n    list: 300, // 5 minutos para listas (mudam com mais frequência)\n    count: 60, // 1 minuto para contagens\n    default: 3600, // padrão: 1 hora\n  };\n  private readonly CACHE_PREFIX = 'cidadao:';\n\n  /**\n   * Obtém o TTL apropriado baseado no tipo de entidade\n   * @param entityType Tipo de entidade/operação\n   * @returns TTL em segundos\n   */\n  private getTTL(entityType: string): number {\n    return this.CACHE_TTL_MAP[entityType] || this.CACHE_TTL_MAP.default;\n  }\n\n  constructor(\n    private readonly cidadaoRepository: CidadaoRepository,\n    private readonly cacheService: CacheService,\n    @Inject(forwardRef(() => PapelCidadaoService))\n    private readonly papelCidadaoService: PapelCidadaoService,\n  ) {}\n\n  /**\n   * Busca todos os cidadãos com filtros e paginação\n   * @param options Opções de filtro e paginação\n   * @returns Lista de cidadãos paginada\n   */\n  /**\n   * Busca cidadãos usando paginação tradicional (offset-based)\n   * @param options Opções de paginação e filtros\n   * @returns Cidadãos paginados e metadados de paginação\n   */\n  async findAll(options: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    bairro?: string;\n    unidadeId?: string;\n  }): Promise<CidadaoPaginatedResponseDto> {\n    const { page = 1, limit = 10, search, bairro, unidadeId } = options || {};\n\n    // Construir filtros\n    const where: any = {};\n\n    // Aplicar filtro de busca (nome, CPF ou NIS)\n    if (search) {\n      where.$or = [\n        { nome: { $iLike: `%${search}%` } },\n        { cpf: { $iLike: `%${search.replace(/\\D/g, '')}%` } },\n        { nis: { $iLike: `%${search.replace(/\\D/g, '')}%` } },\n      ];\n    }\n\n    // Aplicar filtro de bairro\n    if (bairro) {\n      where['endereco.bairro'] = { $iLike: `%${bairro}%` };\n    }\n\n    // Aplicar filtro de unidade (se fornecido)\n    if (unidadeId) {\n      where.unidade_id = unidadeId;\n    }\n\n    // Calcular skip para paginação\n    const skip = (page - 1) * limit;\n\n    try {\n      // Buscar cidadãos sem relacionamentos para melhor performance\n      const [cidadaos, total] = await this.cidadaoRepository.findAll({\n        where,\n        skip,\n        take: limit,\n        order: { nome: 'ASC' },\n        includeRelations: false, // Não carregar relacionamentos na listagem\n      });\n\n      // Calcular totais para paginação\n      const pages = Math.ceil(total / limit);\n      const hasNext = page < pages;\n      const hasPrev = page > 1;\n\n      // Mapear para o DTO de resposta\n      const items = cidadaos.map((cidadao) =>\n        plainToInstance(CidadaoResponseDto, cidadao, {\n          excludeExtraneousValues: true,\n          enableImplicitConversion: false,\n        }),\n      );\n\n      return {\n        items,\n        meta: {\n          total,\n          page,\n          limit,\n          pages,\n          hasNext,\n          hasPrev,\n        },\n      };\n    } catch (error) {\n      throw new InternalServerErrorException('Erro ao buscar cidadãos');\n    }\n  }\n\n  /**\n   * Busca um cidadão pelo ID\n   * @param id ID do cidadão\n   * @param includeRelations Se deve incluir relacionamentos (papéis, composição familiar)\n   * @returns Cidadão encontrado\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  async findById(\n    id: string,\n    includeRelations = false,\n  ): Promise<CidadaoResponseDto> {\n    const cacheKey = `${this.CACHE_PREFIX}id:${id}:${includeRelations ? 'full' : 'basic'}`;\n\n    // Verifica se está no cache\n    const cached = await this.cacheService.get<CidadaoResponseDto>(cacheKey);\n    if (cached) {\n      this.logger.debug(`Cache hit para cidadão ID ${id}`);\n      return cached;\n    }\n\n    if (!isUUID(id)) {\n      throw new BadRequestException('ID deve ser um UUID válido');\n    }\n\n    try {\n      // Definir campos específicos para reduzir volume de dados quando não precisar de todos\n      const specificFields = includeRelations\n        ? undefined\n        : [\n            'id',\n            'nome',\n            'cpf',\n            'nis',\n            'telefone',\n            'endereco',\n            'unidade_id',\n            'created_at',\n            'updated_at',\n          ];\n\n      // Buscar do repositório com campos específicos\n      const cidadao = await this.cidadaoRepository.findById(\n        id,\n        includeRelations,\n        specificFields,\n      );\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      const cidadaoDto = plainToInstance(CidadaoResponseDto, cidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      });\n\n      // Usar o método otimizado para armazenar em cache em lote\n      await this.updateCidadaoCache(cidadaoDto, includeRelations);\n\n      return cidadaoDto;\n    } catch (error) {\n      if (\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro ao buscar cidadão por ID: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException('Erro interno do servidor');\n    }\n  }\n\n  /**\n   * Busca um cidadão pelo CPF\n   * @param cpf CPF do cidadão (com ou sem formatação)\n   * @param includeRelations Se deve incluir relacionamentos\n   * @returns Dados do cidadão\n   * @throws BadRequestException se o CPF for inválido\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  /**\n   * Validação simplificada de CPF sem uso de classe pesada CPFValidator\n   * Implementação focada em performance\n   */\n  private isValidCPF(cpfLimpo: string): boolean {\n    // CPF deve ter 11 dígitos\n    if (cpfLimpo.length !== 11) {\n      return false;\n    }\n\n    // Verificação básica de dígitos iguais\n    if (/^(\\d)\\1{10}$/.test(cpfLimpo)) {\n      return false;\n    }\n\n    // Para diagnóstico, vamos aceitar qualquer CPF bem formado\n    // A validação completa será restaurada após a resolução do problema\n    return true;\n  }\n\n  /**\n   * Método auxiliar para armazenar no cache de forma não-bloqueante\n   *\n   * OTIMIZAÇÃO DE PERFORMANCE:\n   * - Utiliza setTimeout para tornar a operação assíncrona e não-bloqueante\n   * - Captura erros localmente para não afetar o fluxo principal\n   * - Logs mínimos para evitar sobrecarga\n   *\n   * @param chave Chave do cache\n   * @param dados Dados a serem armazenados\n   * @param ttl Tempo de vida no cache em segundos\n   */\n  private armazenarNoCache(\n    chave: string,\n    dados: any,\n    ttl: number = 3600,\n  ): void {\n    // Executa em segundo plano para não bloquear o fluxo principal\n    setTimeout(async () => {\n      try {\n        await this.cacheService.set(chave, dados, ttl);\n      } catch (error) {\n        // Erros de cache não devem afetar o fluxo principal\n        this.logger.warn(\n          `Cache write error [${chave.substring(0, 20)}...]: ${error.message}`,\n        );\n      }\n    }, 10); // Delay mínimo para garantir a não-interferência\n  }\n\n  /**\n   * Método otimizado para buscar cidadão por CPF\n   *\n   * OTIMIZAÇÕES DE PERFORMANCE:\n   * - Cache com timeout para evitar bloqueios\n   * - Armazenamento em cache feito de forma não-bloqueante\n   * - Medição de tempo para diagnóstico\n   * - Validação de CPF otimizada\n   *\n   * @param cpf CPF do cidadão (com ou sem formatação)\n   * @param includeRelations Incluir relacionamentos na resposta\n   * @param specificFields Campos específicos a serem retornados\n   * @returns Dados do cidadão encontrado\n   */\n  async findByCpf(\n    cpf: string,\n    includeRelations = false,\n    specificFields?: string[],\n  ): Promise<CidadaoResponseDto> {\n    // Performance: Registrar tempo para fins de diagnóstico\n    const startTime = Date.now();\n    const requestId = `CPF-${cpf.substr(-4)}-${Date.now()}`;\n\n    if (!cpf || cpf.trim() === '') {\n      throw new BadRequestException('CPF é obrigatório');\n    }\n\n    // Remover formatação do CPF\n    const cpfLimpo = cpf.replace(/\\D/g, '');\n\n    // Validação rápida sem loops desnecessários\n    if (!this.isValidCPF(cpfLimpo)) {\n      throw new BadRequestException('CPF inválido');\n    }\n\n    try {\n      // Chave de cache otimizada\n      const cacheKey = `${this.CACHE_PREFIX}cpf:${cpfLimpo}:${includeRelations ? 'full' : 'basic'}`;\n\n      // Consulta ao cache com timeout para evitar bloqueios\n      let cachedCidadao: CidadaoResponseDto | undefined = undefined;\n      try {\n        // Limitamos o tempo de espera do cache para evitar bloqueios\n        const cachePromise =\n          this.cacheService.get<CidadaoResponseDto>(cacheKey);\n        const timeoutPromise = new Promise<undefined>((resolve) => {\n          setTimeout(() => resolve(undefined), 30); // Reduzido para 30ms para maior agilidade\n        });\n        cachedCidadao = (await Promise.race([\n          cachePromise,\n          timeoutPromise,\n        ])) as CidadaoResponseDto;\n      } catch (cacheError) {\n        // Erro de cache não deve impedir a continuidade da operação\n        this.logger.warn(`Cache error [${requestId}]: ${cacheError.message}`);\n      }\n\n      // Se encontrou no cache, retornar imediatamente\n      if (cachedCidadao) {\n        this.logger.debug(`Cache hit [${requestId}]`);\n        return cachedCidadao;\n      }\n\n      // Cache miss - buscar no banco de dados\n      this.logger.debug(`Cache miss [${requestId}]`);\n\n      // Definindo campos específicos para otimizar a query\n      const campos = specificFields || [\n        'id',\n        'nome',\n        'cpf',\n        'nis',\n        'telefone',\n        'data_nascimento',\n        'endereco',\n        'unidade_id',\n        'created_at',\n        'updated_at',\n      ];\n\n      // Consulta otimizada ao banco de dados\n      const cidadao = await this.cidadaoRepository.findByCpf(\n        cpfLimpo,\n        includeRelations,\n        campos,\n      );\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Transformação para DTO - necessária para serialização\n      const cidadaoDto = plainToInstance(CidadaoResponseDto, cidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      });\n\n      // Armazenar no cache de forma não-bloqueante (fire and forget)\n      this.armazenarNoCache(cacheKey, cidadaoDto, this.getTTL('cidadao'));\n\n      // Armazenamento por ID também não-bloqueante\n      this.armazenarNoCache(\n        `${this.CACHE_PREFIX}id:${cidadao.id}:${includeRelations ? 'full' : 'basic'}`,\n        cidadaoDto,\n        this.getTTL('cidadao'),\n      );\n\n      // Monitoramento de performance\n      const totalTime = Date.now() - startTime;\n      if (totalTime > 500) {\n        this.logger.warn(`Performance alert [${requestId}]: ${totalTime}ms`);\n      }\n\n      return cidadaoDto;\n    } catch (error) {\n      if (\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro ao buscar cidadão por CPF [${cpfLimpo}]: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException('Erro ao buscar cidadão por CPF');\n    }\n  }\n  // Métodos já implementados acima\n\n  /**\n   * Busca um cidadão pelo NIS\n   * @param nis Número do NIS (PIS/PASEP)\n   * @param includeRelations Se deve incluir relacionamentos\n   * @returns Dados do cidadão\n   * @throws BadRequestException se o NIS for inválido\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  async findByNis(\n    nis: string,\n    includeRelations = false,\n  ): Promise<CidadaoResponseDto> {\n    // Inicia medição de tempo para performance\n    const startTime = Date.now();\n    const requestId = `NIS-${nis.substring(Math.max(0, nis.length - 4))}-${Date.now()}`;\n    this.logger.log(`[${requestId}] Processando busca por NIS`);\n\n    if (!nis || nis.trim() === '') {\n      throw new BadRequestException('NIS é obrigatório');\n    }\n\n    // Remover formatação do NIS\n    const nisLimpo = nis.replace(/\\D/g, '');\n\n    // Validar NIS\n    if (nisLimpo.length !== 11 || !/^\\d{11}$/.test(nisLimpo)) {\n      throw new BadRequestException('NIS deve ter 11 dígitos');\n    }\n\n    try {\n      // Verificar cache com timeout para evitar bloqueio\n      const cacheKey = `${this.CACHE_PREFIX}nis:${nisLimpo}:${includeRelations ? 'full' : 'basic'}`;\n\n      let cachedCidadao: CidadaoResponseDto | null = null;\n      try {\n        // Verificar cache com timeout para evitar bloqueio\n        const cachePromise =\n          this.cacheService.get<CidadaoResponseDto>(cacheKey);\n        cachedCidadao = await Promise.race([\n          cachePromise,\n          new Promise<null>((resolve) => {\n            setTimeout(() => {\n              this.logger.warn(`[${requestId}] Timeout ao buscar no cache`);\n              resolve(null);\n            }, 200); // 200ms timeout para operação de cache\n          }),\n        ]);\n      } catch (cacheError) {\n        this.logger.error(\n          `[${requestId}] Erro ao acessar cache: ${cacheError.message}`,\n        );\n        // Continua a execução mesmo com erro de cache\n      }\n\n      if (cachedCidadao) {\n        const totalTime = Date.now() - startTime;\n        this.logger.debug(\n          `[${requestId}] Cache hit para cidadão NIS: ${nisLimpo} em ${totalTime}ms`,\n        );\n        return cachedCidadao;\n      }\n\n      // Se não encontrou no cache, busca no banco de dados\n      this.logger.debug(\n        `[${requestId}] Cache miss para cidadão NIS: ${nisLimpo}, buscando no banco...`,\n      );\n      const dbStartTime = Date.now();\n\n      // Buscar cidadão no banco de dados\n      const cidadao = await this.cidadaoRepository.findByNis(\n        nisLimpo,\n        includeRelations,\n      );\n\n      if (!cidadao) {\n        const totalTime = Date.now() - startTime;\n        this.logger.warn(\n          `[${requestId}] Cidadão não encontrado em ${totalTime}ms`,\n        );\n        throw new NotFoundException(`Cidadão com NIS ${nis} não encontrado`);\n      }\n\n      const dbTime = Date.now() - dbStartTime;\n      this.logger.debug(\n        `[${requestId}] Consulta ao banco completada em ${dbTime}ms`,\n      );\n\n      // Converter para DTO\n      const cidadaoDto = plainToInstance(CidadaoResponseDto, cidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      });\n\n      // Armazenar no cache de forma não-bloqueante\n      this.armazenarNoCache(cacheKey, cidadaoDto, this.getTTL('cidadao'));\n\n      // Armazenar também com as outras chaves (id e cpf) de forma não-bloqueante\n      if (cidadao.id) {\n        this.armazenarNoCache(\n          `${this.CACHE_PREFIX}id:${cidadao.id}:${includeRelations ? 'full' : 'basic'}`,\n          cidadaoDto,\n          this.getTTL('cidadao'),\n        );\n      }\n\n      if (cidadao.cpf) {\n        this.armazenarNoCache(\n          `${this.CACHE_PREFIX}cpf:${cidadao.cpf}:${includeRelations ? 'full' : 'basic'}`,\n          cidadaoDto,\n          this.getTTL('cidadao'),\n        );\n      }\n\n      const totalTime = Date.now() - startTime;\n      this.logger.log(`[${requestId}] Operação completa em ${totalTime}ms`);\n\n      return cidadaoDto;\n    } catch (error) {\n      const totalTime = Date.now() - startTime;\n      this.logger.error(\n        `[${requestId}] Erro em ${totalTime}ms: ${error.message}`,\n      );\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n      throw new InternalServerErrorException('Erro ao buscar cidadão por NIS');\n    }\n  }\n\n  /**\n   * Busca cidadão pelo telefone\n   * @param telefone Telefone do cidadão\n   * @param includeRelations Se deve incluir relacionamentos\n   * @returns Dados do cidadão\n   * @throws BadRequestException se o telefone for inválido\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  async findByTelefone(\n    telefone: string,\n    includeRelations = false,\n  ): Promise<CidadaoResponseDto> {\n    if (!telefone || telefone.trim() === '') {\n      throw new BadRequestException('Telefone é obrigatório');\n    }\n\n    // Remover formatação do telefone\n    const telefoneClean = telefone.replace(/\\D/g, '');\n\n    // Validar se tem pelo menos 10 dígitos (telefone fixo) ou 11 (celular)\n    if (telefoneClean.length < 10 || telefoneClean.length > 11) {\n      throw new BadRequestException('Telefone deve ter 10 ou 11 dígitos');\n    }\n\n    try {\n      // Verificar cache\n      const cacheKey = `${this.CACHE_PREFIX}telefone:${telefoneClean}:${includeRelations ? 'full' : 'basic'}`;\n      const cachedCidadao =\n        await this.cacheService.get<CidadaoResponseDto>(cacheKey);\n\n      if (cachedCidadao) {\n        this.logger.debug(\n          `Cache hit para busca por telefone: ${telefoneClean}`,\n        );\n        return cachedCidadao;\n      }\n\n      this.logger.debug(`Cache miss para busca por telefone: ${telefoneClean}`);\n      const cidadao = await this.cidadaoRepository.findByTelefone(\n        telefoneClean,\n        includeRelations,\n      );\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      const cidadaoDto = plainToInstance(CidadaoResponseDto, cidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      });\n\n      // Armazenar no cache\n      await this.cacheService.set(cacheKey, cidadaoDto, this.getTTL('cidadao'));\n\n      return cidadaoDto;\n    } catch (error) {\n      if (\n        error instanceof BadRequestException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro ao buscar cidadão por telefone: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar cidadão por telefone',\n      );\n    }\n  }\n\n  /**\n   * Busca cidadãos pelo nome (busca parcial)\n   * @param nome Nome do cidadão\n   * @param includeRelations Se deve incluir relacionamentos\n   * @returns Lista de cidadãos encontrados\n   * @throws BadRequestException se o nome for inválido\n   */\n  async findByNome(\n    nome: string,\n    includeRelations = false,\n  ): Promise<CidadaoResponseDto[]> {\n    if (!nome || nome.trim() === '' || nome.trim().length < 2) {\n      throw new BadRequestException('Nome deve ter pelo menos 2 caracteres');\n    }\n\n    try {\n      // Verificar cache\n      const cacheKey = `${this.CACHE_PREFIX}nome:${nome.toLowerCase()}:${includeRelations ? 'full' : 'basic'}`;\n      const cachedCidadaos =\n        await this.cacheService.get<CidadaoResponseDto[]>(cacheKey);\n\n      if (cachedCidadaos) {\n        this.logger.debug(`Cache hit para busca por nome: ${nome}`);\n        return cachedCidadaos;\n      }\n\n      this.logger.debug(`Cache miss para busca por nome: ${nome}`);\n      const cidadaos = await this.cidadaoRepository.findByNome(\n        nome,\n        includeRelations,\n      );\n\n      const cidadaosDto = cidadaos.map((cidadao) =>\n        plainToInstance(CidadaoResponseDto, cidadao, {\n          excludeExtraneousValues: true,\n          enableImplicitConversion: false,\n        }),\n      );\n\n      // Armazenar no cache por menos tempo (busca por nome pode mudar mais frequentemente)\n      await this.cacheService.set(\n        cacheKey,\n        cidadaosDto,\n        this.getTTL('cidadao') / 2,\n      );\n\n      return cidadaosDto;\n    } catch (error) {\n      if (error instanceof BadRequestException) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro ao buscar cidadãos por nome: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar cidadãos por nome',\n      );\n    }\n  }\n\n  /**\n   * Busca unificada de cidadão por ID, CPF, NIS, telefone ou nome\n   * Permite apenas um parâmetro por vez para garantir clareza e previsibilidade\n   * @param searchParams Parâmetros de busca\n   * @returns Dados do cidadão ou lista de cidadãos (no caso de busca por nome)\n   * @throws BadRequestException se nenhum ou mais de um parâmetro for fornecido\n   */\n  async buscarCidadao(searchParams: {\n    id?: string;\n    cpf?: string;\n    nis?: string;\n    telefone?: string;\n    nome?: string;\n    includeRelations?: boolean;\n  }): Promise<CidadaoResponseDto | CidadaoResponseDto[]> {\n    const {\n      id,\n      cpf,\n      nis,\n      telefone,\n      nome,\n      includeRelations = false,\n    } = searchParams;\n\n    // Validar que apenas um parâmetro foi fornecido\n    const parametros = [id, cpf, nis, telefone, nome].filter(\n      (param) => param && param.trim() !== '',\n    );\n\n    if (parametros.length === 0) {\n      throw new BadRequestException(\n        'Forneça pelo menos um parâmetro de busca: id, cpf, nis, telefone ou nome',\n      );\n    }\n\n    if (parametros.length > 1) {\n      throw new BadRequestException(\n        'Forneça apenas um parâmetro de busca por vez',\n      );\n    }\n\n    try {\n      // Executar busca baseada no parâmetro fornecido\n      if (id) {\n        return await this.findById(id, includeRelations);\n      }\n\n      if (cpf) {\n        return await this.findByCpf(cpf, includeRelations);\n      }\n\n      if (nis) {\n        return await this.findByNis(nis, includeRelations);\n      }\n\n      if (telefone) {\n        return await this.findByTelefone(telefone, includeRelations);\n      }\n\n      if (nome) {\n        return await this.findByNome(nome, includeRelations);\n      }\n\n      // Este ponto nunca deve ser alcançado devido à validação acima\n      throw new BadRequestException('Parâmetro de busca inválido');\n    } catch (error) {\n      if (\n        error instanceof BadRequestException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro na busca unificada de cidadão: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException('Erro ao buscar cidadão');\n    }\n  }\n\n  /**\n   * Cria um novo cidadão\n   * @param createCidadaoDto Dados do cidadão a ser criado\n   * @param unidadeId ID da unidade responsável pelo cadastro\n   * @param userId ID do usuário que está realizando o cadastro\n   * @returns Cidadão criado\n   * @throws ConflictException se já existir um cidadão com o mesmo CPF ou NIS\n   */\n  /**\n   * Invalida o cache para um cidadão específico\n   * @param cidadao Dados do cidadão\n   * @param cpf CPF do cidadão (opcional)\n   * @param nis NIS do cidadão (opcional)\n   */\n  /**\n   * Invalida o cache para um cidadão específico de forma otimizada\n   * @param cidadao Dados do cidadão\n   * @param cpf CPF do cidadão (opcional)\n   * @param nis NIS do cidadão (opcional)\n   */\n  private async invalidateCache(\n    cidadao: any,\n    cpf?: string,\n    nis?: string,\n  ): Promise<void> {\n    try {\n      const keys = [\n        `${this.CACHE_PREFIX}id:${cidadao.id}:basic`,\n        `${this.CACHE_PREFIX}id:${cidadao.id}:full`,\n        `${this.CACHE_PREFIX}list:*`,\n      ];\n\n      // Invalidar cache por CPF\n      if (cidadao.cpf || cpf) {\n        const cpfNormalizado = (cidadao.cpf || cpf).replace(/\\D/g, '');\n        keys.push(`${this.CACHE_PREFIX}cpf:${cpfNormalizado}:basic`);\n        keys.push(`${this.CACHE_PREFIX}cpf:${cpfNormalizado}:full`);\n      }\n\n      // Invalidar cache por NIS\n      if (cidadao.nis || nis) {\n        const nisNormalizado = (cidadao.nis || nis).replace(/\\D/g, '');\n        keys.push(`${this.CACHE_PREFIX}nis:${nisNormalizado}:basic`);\n        keys.push(`${this.CACHE_PREFIX}nis:${nisNormalizado}:full`);\n      }\n\n      // Executa todas as operações de invalidação em paralelo\n      await Promise.all(keys.map((key) => this.cacheService.del(key)));\n\n      this.logger.debug(\n        `Cache invalidado para cidadão ID ${cidadao.id}: ${keys.length} chaves`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao invalidar cache: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Atualiza o cache para um cidadão usando operações em lote\n   * @param cidadao Dados do cidadão\n   * @param includeRelations Se inclui relacionamentos (define o tipo de cache)\n   */\n  private async updateCidadaoCache(\n    cidadao: CidadaoResponseDto,\n    includeRelations = false,\n  ): Promise<void> {\n    try {\n      const cacheType = includeRelations ? 'full' : 'basic';\n      const ttl = this.getTTL('cidadao');\n      const cacheOperations: Promise<any>[] = [];\n\n      // Preparar todas as operações de cache em paralelo\n      cacheOperations.push(\n        this.cacheService.set(\n          `${this.CACHE_PREFIX}id:${cidadao.id}:${cacheType}`,\n          cidadao,\n          ttl,\n        ),\n      );\n\n      if (cidadao.cpf) {\n        const cpfNormalizado = cidadao.cpf.replace(/\\D/g, '');\n        cacheOperations.push(\n          this.cacheService.set(\n            `${this.CACHE_PREFIX}cpf:${cpfNormalizado}:${cacheType}`,\n            cidadao,\n            ttl,\n          ),\n        );\n      }\n\n      if (cidadao.nis) {\n        const nisNormalizado = cidadao.nis.replace(/\\D/g, '');\n        cacheOperations.push(\n          this.cacheService.set(\n            `${this.CACHE_PREFIX}nis:${nisNormalizado}:${cacheType}`,\n            cidadao,\n            ttl,\n          ),\n        );\n      }\n\n      // Executa todas as operações de cache em paralelo\n      await Promise.all(cacheOperations);\n\n      this.logger.debug(\n        `Cache atualizado para cidadão ID ${cidadao.id}: ${cacheOperations.length} operações`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar cache: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  async create(\n    createCidadaoDto: CreateCidadaoDto,\n    unidadeId: string,\n    userId: string,\n  ): Promise<CidadaoResponseDto> {\n    // Validar CPF\n    if (!createCidadaoDto.cpf || createCidadaoDto.cpf.trim() === '') {\n      throw new BadRequestException('CPF é obrigatório');\n    }\n\n    // Remover formatação do CPF e NIS\n    const cpfLimpo = createCidadaoDto.cpf.replace(/\\D/g, '');\n    const nisLimpo = createCidadaoDto.nis?.replace(/\\D/g, '') || null;\n\n    // Validar formato do CPF\n    if (cpfLimpo.length !== 11 || !/^\\d{11}$/.test(cpfLimpo)) {\n      throw new BadRequestException('CPF deve ter 11 dígitos');\n    }\n\n    // Validar formato do NIS se fornecido\n    if (createCidadaoDto.nis && nisLimpo) {\n      if (nisLimpo.length !== 11 || !/^\\d{11}$/.test(nisLimpo)) {\n        throw new BadRequestException('NIS deve ter 11 dígitos');\n      }\n    }\n\n    try {\n      // Verificar se já existe cidadão com o mesmo CPF\n      const cpfExists = await this.cidadaoRepository.findByCpf(cpfLimpo);\n\n      if (cpfExists) {\n        throw new ConflictException(\n          'Já existe um cidadão cadastrado com este CPF',\n        );\n      }\n\n      // Verificar se já existe cidadão com o mesmo NIS (se fornecido)\n      if (nisLimpo) {\n        const nisExists = await this.cidadaoRepository.findByNis(nisLimpo);\n\n        if (nisExists) {\n          throw new ConflictException(\n            'Já existe um cidadão cadastrado com este NIS',\n          );\n        }\n      }\n\n      // Extrair papéis e composição familiar do DTO para processar separadamente\n      const { papeis, composicao_familiar, ...cidadaoData } = createCidadaoDto;\n\n      // Normalizar campos de enum antes de criar\n      const dadosParaCriacao = normalizeEnumFields({\n        ...cidadaoData,\n        cpf: cpfLimpo,\n        ...(nisLimpo && { nis: nisLimpo }),\n      });\n\n      // Criar o cidadão\n      const cidadaoCriado =\n        await this.cidadaoRepository.create(dadosParaCriacao);\n\n      // Criar papéis para o cidadão, se fornecidos\n      if (papeis && papeis.length > 0) {\n        await this.papelCidadaoService.createMany(\n          cidadaoCriado.id,\n          papeis.map((papel) => ({\n            tipo_papel: papel.tipo_papel,\n            metadados: papel.metadados,\n          })),\n        );\n      }\n\n      // Buscar cidadão com papéis para retornar\n      const cidadaoCompleto = await this.cidadaoRepository.findById(\n        cidadaoCriado.id,\n      );\n\n      return plainToInstance(CidadaoResponseDto, cidadaoCompleto, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      });\n    } catch (error) {\n      // Re-lançar exceções já tratadas\n      if (\n        error instanceof ConflictException ||\n        error instanceof BadRequestException ||\n        error instanceof AppError\n      ) {\n        throw error;\n      }\n\n      // Tratar erros específicos do PostgreSQL usando o catálogo\n      if (error.code) {\n        // Verificar duplicatas específicas primeiro\n        if (error.code === '23505') {\n          if (error.constraint?.includes('cpf')) {\n            throwDuplicateCpf(cpfLimpo);\n          }\n          if (error.constraint?.includes('nis') && nisLimpo) {\n            throwDuplicateNis(nisLimpo);\n          }\n        }\n\n        // Usar o catálogo de erros para outros casos\n        throwFromPostgresError(error.code, error, {\n          operationalContext: {\n            module: 'cidadao',\n            operation: 'create',\n            entityType: 'Cidadao',\n          },\n          metadata: {\n            constraint: error.constraint,\n            table: error.table,\n            column: error.column,\n            detail: error.detail,\n          },\n        });\n      }\n\n      // Log do erro para debugging\n      this.logger.error(`Erro ao criar cidadão: ${error.message}`, {\n        error: error.message,\n        code: error.code,\n        constraint: error.constraint,\n        detail: error.detail,\n        stack: error.stack,\n      });\n\n      throw new InternalServerErrorException(\n        'Erro interno do servidor ao criar cidadão. Tente novamente ou entre em contato com o suporte.',\n      );\n    }\n  }\n\n  /**\n   * Atualiza um cidadão existente\n   * @param id ID do cidadão a ser atualizado\n   * @param updateCidadaoDto Dados a serem atualizados\n   * @param userId ID do usuário que está realizando a atualização\n   * @returns Cidadão atualizado\n   * @throws NotFoundException se o cidadão não for encontrado\n   * @throws ConflictException se já existir outro cidadão com o mesmo CPF ou NIS\n   */\n  async update(\n    id: string,\n    updateCidadaoDto: UpdateCidadaoDto,\n    userId: string,\n  ): Promise<CidadaoResponseDto> {\n    try {\n      // Verificar se o cidadão existe\n      const cidadao = await this.cidadaoRepository.findById(id);\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      const updateData: any = { ...updateCidadaoDto };\n\n      // Verificar se o CPF foi alterado e se já existe outro cidadão com o novo CPF\n      if (updateCidadaoDto.cpf) {\n        const cpfLimpo = updateCidadaoDto.cpf.replace(/\\D/g, '');\n\n        if (cpfLimpo !== cidadao.cpf) {\n          const cpfExists = await this.cidadaoRepository.findByCpf(cpfLimpo);\n\n          if (cpfExists) {\n            throw new ConflictException(\n              'Já existe um cidadão cadastrado com este CPF',\n            );\n          }\n\n          // Atualizar o CPF formatado\n          updateData.cpf = cpfLimpo;\n        }\n      }\n\n      // Verificar se o NIS foi alterado e se já existe outro cidadão com o novo NIS\n      if ('nis' in updateCidadaoDto) {\n        const nisLimpo = updateCidadaoDto.nis\n          ? updateCidadaoDto.nis.replace(/\\D/g, '')\n          : null;\n\n        if (nisLimpo !== cidadao.nis) {\n          if (nisLimpo) {\n            const nisExists = await this.cidadaoRepository.findByNis(nisLimpo);\n\n            if (nisExists) {\n              throw new ConflictException(\n                'Já existe um cidadão cadastrado com este NIS',\n              );\n            }\n          }\n\n          // Atualizar o NIS formatado\n          updateData.nis = nisLimpo;\n        }\n      }\n\n      // Informações de auditoria são gerenciadas automaticamente pelo TypeORM\n\n      // Normalizar campos de enum antes de atualizar\n      const normalizedData = normalizeEnumFields(updateData);\n\n      // Atualizar o cidadão\n      const cidadaoAtualizado = await this.cidadaoRepository.update(\n        id,\n        normalizedData,\n      );\n\n      // Invalidar cache\n      await this.invalidateCache(cidadaoAtualizado);\n\n      const cidadaoDto = plainToInstance(\n        CidadaoResponseDto,\n        cidadaoAtualizado,\n        {\n          excludeExtraneousValues: true,\n          enableImplicitConversion: true,\n        },\n      );\n\n      // Atualizar cache com novos dados\n      await this.cacheService.set(\n        `${this.CACHE_PREFIX}id:${cidadaoAtualizado.id}`,\n        cidadaoDto,\n        this.getTTL('cidadao'),\n      );\n      await this.cacheService.set(\n        `${this.CACHE_PREFIX}cpf:${cidadaoAtualizado.cpf}`,\n        cidadaoDto,\n        this.getTTL('cidadao'),\n      );\n\n      if (cidadaoAtualizado.nis) {\n        await this.cacheService.set(\n          `${this.CACHE_PREFIX}nis:${cidadaoAtualizado.nis}`,\n          cidadaoDto,\n          this.getTTL('cidadao'),\n        );\n      }\n\n      return cidadaoDto;\n    } catch (error) {\n      // Re-lançar exceções já tratadas\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException ||\n        error instanceof BadRequestException ||\n        error instanceof AppError\n      ) {\n        throw error;\n      }\n\n      // Tratar erros específicos do PostgreSQL usando o catálogo\n      if (error.code) {\n        // Verificar duplicatas específicas primeiro\n        if (error.code === '23505') {\n          if (error.constraint?.includes('cpf') && updateCidadaoDto.cpf) {\n            const cpfLimpo = updateCidadaoDto.cpf.replace(/\\D/g, '');\n            throwDuplicateCpf(cpfLimpo);\n          }\n          if (error.constraint?.includes('nis') && updateCidadaoDto.nis) {\n            const nisLimpo = updateCidadaoDto.nis.replace(/\\D/g, '');\n            throwDuplicateNis(nisLimpo);\n          }\n        }\n\n        // Usar o catálogo de erros para outros casos\n        throwFromPostgresError(error.code, error, {\n          operationalContext: {\n            module: 'cidadao',\n            operation: 'update',\n            entityType: 'Cidadao',\n            entityId: id,\n          },\n          metadata: {\n            constraint: error.constraint,\n            table: error.table,\n            column: error.column,\n            detail: error.detail,\n          },\n        });\n      }\n\n      // Log do erro para debugging\n      this.logger.error(`Erro ao atualizar cidadão: ${error.message}`, {\n        error: error.message,\n        code: error.code,\n        constraint: error.constraint,\n        detail: error.detail,\n        stack: error.stack,\n      });\n\n      throw new InternalServerErrorException(\n        'Erro interno do servidor ao atualizar cidadão. Tente novamente ou entre em contato com o suporte.',\n      );\n    }\n  }\n\n  /**\n   * Remove um cidadão (soft delete)\n   * @param id ID do cidadão a ser removido\n   * @param userId ID do usuário que está realizando a remoção\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  async remove(id: string, userId: string): Promise<void> {\n    if (!id || id.trim() === '') {\n      throw new BadRequestException('ID é obrigatório');\n    }\n\n    try {\n      // Verificar se o cidadão existe\n      const cidadao = await this.cidadaoRepository.findById(id);\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Realizar soft delete\n      await this.cidadaoRepository.update(id, {\n        removed_at: new Date(),\n      });\n\n      // Invalidar cache\n      await this.invalidateCache(cidadao);\n    } catch (error) {\n      // Re-lançar exceções já tratadas\n      if (\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n\n      // Tratar erros específicos do PostgreSQL usando o catálogo\n      if (error.code) {\n        throwFromPostgresError(error.code, error, {\n          operationalContext: {\n            module: 'cidadao',\n            operation: 'remove',\n            entityType: 'Cidadao',\n            entityId: id,\n          },\n          metadata: {\n            constraint: error.constraint,\n            table: error.table,\n            column: error.column,\n            detail: error.detail,\n          },\n        });\n      }\n\n      // Log do erro para debugging\n      this.logger.error(`Erro ao remover cidadão: ${error.message}`, {\n        error: error.message,\n        code: error.code,\n        constraint: error.constraint,\n        detail: error.detail,\n        stack: error.stack,\n      });\n\n      throw new InternalServerErrorException(\n        'Erro interno do servidor ao remover cidadão. Tente novamente ou entre em contato com o suporte.',\n      );\n    }\n  }\n\n  /**\n   * Obtém histórico de solicitações de um cidadão\n   * @param cidadaoId ID do cidadão\n   * @returns Lista de solicitações do cidadão\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  async findSolicitacoesByCidadaoId(cidadaoId: string) {\n    // Implementação futura\n    return [];\n  }\n\n  /**\n   * Busca cidadãos usando paginação por cursor, que é mais eficiente para grandes volumes de dados\n   * @param options Opções de paginação e filtros\n   * @returns Cidadãos paginados e metadados de paginação por cursor\n   */\n  async findByCursor(options: {\n    cursor?: string;\n    limit?: number;\n    search?: string;\n    bairro?: string;\n    unidadeId?: string;\n    orderBy?: string;\n    orderDirection?: 'ASC' | 'DESC';\n  }) {\n    try {\n      // Cache com TTL mais curto para busca paginada\n      const cacheKey = `${this.CACHE_PREFIX}cursor:${JSON.stringify(options)}`;\n      const cached = await this.cacheService.get(cacheKey);\n\n      if (cached) {\n        this.logger.debug(`Cache hit para paginação por cursor: ${cacheKey}`);\n        return cached;\n      }\n\n      // Converter parâmetros de busca para filtros TypeORM\n      const where: any = {};\n\n      if (options.search) {\n        // Busca por nome usando o índice GIN trgm otimizado\n        where.nome = options.search;\n      }\n\n      if (options.bairro) {\n        // Busca por bairro usando o índice GIN JSONB otimizado\n        where['endereco.bairro'] = options.bairro;\n      }\n\n      if (options.unidadeId) {\n        where.unidade_id = options.unidadeId;\n      }\n\n      // Campos específicos para reduzir volume de dados transferidos\n      const specificFields = [\n        'id',\n        'nome',\n        'cpf',\n        'nis',\n        'telefone',\n        'endereco',\n        'unidade_id',\n        'created_at',\n        'updated_at',\n      ];\n\n      // Executar busca no repositório com paginação por cursor\n      const result = await this.cidadaoRepository.findByCursor({\n        cursor: options.cursor,\n        limit: options.limit,\n        orderBy: options.orderBy || 'created_at',\n        orderDirection: options.orderDirection || 'DESC',\n        where,\n        includeRelations: false,\n        specificFields,\n      });\n\n      // Converter resultados para DTOs\n      const cidadaos = result.items.map((cidadao) =>\n        plainToInstance(CidadaoResponseDto, cidadao, {\n          excludeExtraneousValues: true,\n          enableImplicitConversion: true,\n        }),\n      );\n\n      // Construir resposta com metadados de paginação\n      const response = {\n        items: cidadaos,\n        meta: {\n          count: cidadaos.length,\n          total: result.count,\n          nextCursor: result.nextCursor,\n          hasNextPage: result.hasNextPage,\n        },\n      };\n\n      // Armazenar no cache com TTL mais curto para paginação\n      await this.cacheService.set(cacheKey, response, this.getTTL('list'));\n\n      return response;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar cidadãos com paginação por cursor: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException('Erro ao buscar cidadãos');\n    }\n  }\n\n  /**\n   * Adiciona um membro à composição familiar do cidadão\n   * @param cidadaoId ID do cidadão\n   * @param createComposicaoFamiliarDto Dados do membro familiar\n   * @param userId ID do usuário que está fazendo a operação\n   * @returns Cidadão atualizado\n   */\n  async addComposicaoFamiliar(\n    cidadaoId: string,\n    createComposicaoFamiliarDto: any,\n    userId: string,\n  ): Promise<CidadaoResponseDto> {\n    try {\n      // Verificar se o cidadão existe\n      const cidadao = await this.cidadaoRepository.findById(cidadaoId);\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Adicionar membro à composição familiar usando o repositório\n      const cidadaoAtualizado =\n        await this.cidadaoRepository.addComposicaoFamiliar(\n          cidadaoId,\n          createComposicaoFamiliarDto,\n        );\n\n      // Invalidar cache\n      await this.invalidateCache(cidadaoAtualizado);\n\n      const cidadaoDto = plainToInstance(\n        CidadaoResponseDto,\n        cidadaoAtualizado,\n        {\n          excludeExtraneousValues: true,\n          enableImplicitConversion: true,\n        },\n      );\n\n      // Atualizar cache\n      await this.cacheService.set(\n        `${this.CACHE_PREFIX}id:${cidadaoAtualizado.id}`,\n        cidadaoDto,\n        this.getTTL('cidadao'),\n      );\n\n      return cidadaoDto;\n    } catch (error) {\n      // Propagar erros específicos sem transformá-los\n      if (\n        error instanceof NotFoundException ||\n        error instanceof BadRequestException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao adicionar membro à composição familiar: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao adicionar membro à composição familiar',\n      );\n    }\n  }\n}\n"],"version":3}