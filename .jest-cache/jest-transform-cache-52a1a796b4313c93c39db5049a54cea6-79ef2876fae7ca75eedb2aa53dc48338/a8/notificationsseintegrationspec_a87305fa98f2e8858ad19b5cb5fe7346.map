{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\tests\\notification-sse.integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\tests\\notification-sse.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PassportModule } from '@nestjs/passport';\nimport * as request from 'supertest';\nimport { Repository } from 'typeorm';\nimport { getRepositoryToken } from '@nestjs/typeorm';\n\nimport { NotificacaoModule } from '../notificacao.module';\nimport { NotificacaoSistema } from '../entities/notificacao-sistema.entity';\nimport { NotificationTemplate } from '../entities/notification-template.entity';\nimport { SseService } from '../services/sse.service';\nimport { NotificacaoService } from '../services/notificacao.service';\nimport { AuthModule } from '../../auth/auth.module';\nimport { User } from '../../user/entities/user.entity';\n\ndescribe('Notification SSE Integration', () => {\n  let app: INestApplication;\n  let notificacaoService: NotificacaoService;\n  let sseService: SseService;\n  let notificacaoRepository: Repository<NotificacaoSistema>;\n  let userRepository: Repository<User>;\n  let jwtToken: string;\n  let testUser: User;\n\n  const mockConfigService = {\n    get: jest.fn((key: string) => {\n      const config = {\n        JWT_SECRET: 'test-secret',\n        JWT_EXPIRES_IN: '1h',\n        SSE_HEARTBEAT_INTERVAL: 30000,\n        SSE_CONNECTION_TIMEOUT: 300000,\n        SSE_MAX_CONNECTIONS_PER_USER: 5,\n        DATABASE_URL: 'sqlite::memory:',\n      };\n      return config[key];\n    }),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n        }),\n        TypeOrmModule.forRootAsync({\n          imports: [ConfigModule],\n          useFactory: () => ({\n            type: 'sqlite',\n            database: ':memory:',\n            entities: [NotificacaoSistema, NotificationTemplate, User],\n            synchronize: true,\n            logging: false,\n          }),\n          inject: [ConfigService],\n        }),\n        PassportModule.register({ defaultStrategy: 'jwt' }),\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: (configService: ConfigService) => ({\n            secret: configService.get('JWT_SECRET'),\n            signOptions: {\n              expiresIn: configService.get('JWT_EXPIRES_IN'),\n            },\n          }),\n          inject: [ConfigService],\n        }),\n        NotificacaoModule,\n      ],\n      providers: [\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n      ],\n    })\n      .overrideProvider(ConfigService)\n      .useValue(mockConfigService)\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n\n    notificacaoService = moduleFixture.get<NotificacaoService>(NotificacaoService);\n    sseService = moduleFixture.get<SseService>(SseService);\n    notificacaoRepository = moduleFixture.get<Repository<NotificacaoSistema>>(\n      getRepositoryToken(NotificacaoSistema),\n    );\n    userRepository = moduleFixture.get<Repository<User>>(\n      getRepositoryToken(User),\n    );\n\n    // Criar usuário de teste\n    testUser = userRepository.create({\n      id: 'test-user-id',\n      email: 'test@example.com',\n      nome: 'Test User',\n      roles: ['user'],\n    });\n    await userRepository.save(testUser);\n\n    // Gerar token JWT para testes\n    const jwtService = moduleFixture.get('JwtService');\n    jwtToken = await jwtService.signAsync({\n      id: testUser.id,\n      email: testUser.email,\n      roles: testUser.roles,\n    });\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  beforeEach(async () => {\n    // Limpar dados entre testes\n    await notificacaoRepository.clear();\n    sseService.clearAllConnections();\n  });\n\n  describe('SSE Connection Endpoints', () => {\n    it('should establish SSE connection with valid token', (done) => {\n      request(app.getHttpServer())\n        .get(`/v1/notificacao/sse?token=${jwtToken}`)\n        .expect(200)\n        .expect('Content-Type', /text\\/plain/)\n        .expect('Cache-Control', 'no-cache')\n        .expect('Connection', 'keep-alive')\n        .end((err, res) => {\n          if (err) return done(err);\n          \n          // Verificar se a conexão foi estabelecida\n          const stats = sseService.getConnectionStats();\n          expect(stats.totalConnections).toBe(1);\n          expect(stats.activeUsers).toBe(1);\n          \n          done();\n        });\n    });\n\n    it('should reject SSE connection without token', () => {\n      return request(app.getHttpServer())\n        .get('/v1/notificacao/sse')\n        .expect(403);\n    });\n\n    it('should reject SSE connection with invalid token', () => {\n      return request(app.getHttpServer())\n        .get('/v1/notificacao/sse?token=invalid-token')\n        .expect(403);\n    });\n\n    it('should get SSE connection statistics', () => {\n      return request(app.getHttpServer())\n        .get('/v1/notificacao/sse/stats')\n        .set('Authorization', `Bearer ${jwtToken}`)\n        .expect(200)\n        .expect((res) => {\n          expect(res.body).toHaveProperty('totalConnections');\n          expect(res.body).toHaveProperty('activeUsers');\n          expect(res.body).toHaveProperty('connectionsPerUser');\n          expect(res.body).toHaveProperty('uptime');\n        });\n    });\n\n    it('should check user SSE connection status', () => {\n      return request(app.getHttpServer())\n        .get(`/v1/notificacao/sse/status/${testUser.id}`)\n        .set('Authorization', `Bearer ${jwtToken}`)\n        .expect(200)\n        .expect((res) => {\n          expect(res.body).toHaveProperty('isConnected');\n          expect(res.body).toHaveProperty('connectionCount');\n          expect(res.body).toHaveProperty('userId', testUser.id);\n        });\n    });\n  });\n\n  describe('Real-time Notification Broadcasting', () => {\n    let sseConnection: any;\n\n    beforeEach((done) => {\n      // Estabelecer conexão SSE para testes\n      sseConnection = request(app.getHttpServer())\n        .get(`/v1/notificacao/sse?token=${jwtToken}`)\n        .buffer(false)\n        .parse((res, callback) => {\n          res.on('data', (chunk) => {\n            const data = chunk.toString();\n            if (data.includes('data:')) {\n              try {\n                const jsonData = JSON.parse(data.split('data: ')[1]);\n                sseConnection.emit('notification', jsonData);\n              } catch (e) {\n                // Ignorar dados que não são JSON (como heartbeat)\n              }\n            }\n          });\n          callback(null, res);\n        });\n      \n      setTimeout(done, 100); // Aguardar estabelecimento da conexão\n    });\n\n    afterEach(() => {\n      if (sseConnection) {\n        sseConnection.abort();\n      }\n    });\n\n    it('should receive notification via SSE when created', (done) => {\n      const notificationData = {\n        tipo: 'info',\n        titulo: 'Teste SSE',\n        conteudo: 'Notificação de teste via SSE',\n        destinatario_id: testUser.id,\n      };\n\n      sseConnection.on('notification', (data) => {\n        expect(data.type).toBe('notification');\n        expect(data.data.titulo).toBe(notificationData.titulo);\n        expect(data.data.conteudo).toBe(notificationData.conteudo);\n        expect(data.data.destinatario_id).toBe(testUser.id);\n        done();\n      });\n\n      // Criar notificação que deve ser enviada via SSE\n      setTimeout(async () => {\n        await notificacaoService.criarEBroadcast(\n          notificationData.destinatario_id,\n          notificationData.tipo,\n          notificationData.titulo,\n          notificationData.conteudo,\n        );\n      }, 50);\n    });\n\n    it('should receive heartbeat events', (done) => {\n      let heartbeatReceived = false;\n\n      sseConnection.on('data', (chunk) => {\n        const data = chunk.toString();\n        if (data.includes('event: heartbeat')) {\n          heartbeatReceived = true;\n          expect(data).toContain('event: heartbeat');\n          expect(data).toContain('data: {\"timestamp\"');\n          done();\n        }\n      });\n\n      // Aguardar heartbeat (configurado para 30s, mas pode ser forçado)\n      setTimeout(() => {\n        if (!heartbeatReceived) {\n          done(new Error('Heartbeat não recebido'));\n        }\n      }, 5000);\n    });\n\n    it('should handle multiple notifications in sequence', (done) => {\n      const notifications = [\n        { titulo: 'Notificação 1', conteudo: 'Conteúdo 1' },\n        { titulo: 'Notificação 2', conteudo: 'Conteúdo 2' },\n        { titulo: 'Notificação 3', conteudo: 'Conteúdo 3' },\n      ];\n      \n      let receivedCount = 0;\n      const receivedNotifications = [];\n\n      sseConnection.on('notification', (data) => {\n        receivedNotifications.push(data.data);\n        receivedCount++;\n        \n        if (receivedCount === notifications.length) {\n          expect(receivedNotifications).toHaveLength(3);\n          expect(receivedNotifications[0].titulo).toBe('Notificação 1');\n          expect(receivedNotifications[1].titulo).toBe('Notificação 2');\n          expect(receivedNotifications[2].titulo).toBe('Notificação 3');\n          done();\n        }\n      });\n\n      // Enviar múltiplas notificações\n      setTimeout(async () => {\n        for (const notification of notifications) {\n          await notificacaoService.criarEBroadcast(\n            testUser.id,\n            'info',\n            notification.titulo,\n            notification.conteudo,\n          );\n          await new Promise(resolve => setTimeout(resolve, 10)); // Pequeno delay\n        }\n      }, 50);\n    });\n  });\n\n  describe('Notification API Integration with SSE', () => {\n    it('should create notification and broadcast via SSE', async () => {\n      const notificationData = {\n        tipo: 'success',\n        titulo: 'Benefício Aprovado',\n        conteudo: 'Seu benefício foi aprovado com sucesso',\n        destinatario_id: testUser.id,\n      };\n\n      // Criar notificação via API\n      const response = await request(app.getHttpServer())\n        .post('/v1/notificacao')\n        .set('Authorization', `Bearer ${jwtToken}`)\n        .send(notificationData)\n        .expect(201);\n\n      expect(response.body.id).toBeDefined();\n      expect(response.body.titulo).toBe(notificationData.titulo);\n      \n      // Verificar se foi salva no banco\n      const savedNotification = await notificacaoRepository.findOne({\n        where: { id: response.body.id },\n      });\n      \n      expect(savedNotification).toBeDefined();\n      expect(savedNotification.titulo).toBe(notificationData.titulo);\n    });\n\n    it('should mark notification as read and update SSE stats', async () => {\n      // Criar notificação\n      const notification = await notificacaoService.criar(\n        testUser.id,\n        'info',\n        'Teste Leitura',\n        'Conteúdo de teste',\n      );\n\n      // Marcar como lida\n      await request(app.getHttpServer())\n        .put(`/v1/notificacao/${notification.id}/ler`)\n        .set('Authorization', `Bearer ${jwtToken}`)\n        .expect(200);\n\n      // Verificar se foi marcada como lida\n      const updatedNotification = await notificacaoRepository.findOne({\n        where: { id: notification.id },\n      });\n      \n      expect(updatedNotification.lida).toBe(true);\n      expect(updatedNotification.data_leitura).toBeDefined();\n    });\n\n    it('should get unread notification count', async () => {\n      // Criar algumas notificações\n      await notificacaoService.criar(testUser.id, 'info', 'Teste 1', 'Conteúdo 1');\n      await notificacaoService.criar(testUser.id, 'info', 'Teste 2', 'Conteúdo 2');\n      await notificacaoService.criar(testUser.id, 'info', 'Teste 3', 'Conteúdo 3');\n\n      const response = await request(app.getHttpServer())\n        .get('/v1/notificacao/contador/nao-lidas')\n        .set('Authorization', `Bearer ${jwtToken}`)\n        .expect(200);\n\n      expect(response.body.count).toBe(3);\n    });\n\n    it('should list user notifications with pagination', async () => {\n      // Criar várias notificações\n      for (let i = 1; i <= 15; i++) {\n        await notificacaoService.criar(\n          testUser.id,\n          'info',\n          `Notificação ${i}`,\n          `Conteúdo da notificação ${i}`,\n        );\n      }\n\n      const response = await request(app.getHttpServer())\n        .get('/v1/notificacao/minhas?page=1&limit=10')\n        .set('Authorization', `Bearer ${jwtToken}`)\n        .expect(200);\n\n      expect(response.body.data).toHaveLength(10);\n      expect(response.body.total).toBe(15);\n      expect(response.body.page).toBe(1);\n      expect(response.body.totalPages).toBe(2);\n    });\n  });\n\n  describe('SSE Service Integration', () => {\n    it('should handle multiple connections from same user', async () => {\n      // Simular múltiplas conexões do mesmo usuário\n      const connection1 = sseService.createConnection(testUser.id, {} as any);\n      const connection2 = sseService.createConnection(testUser.id, {} as any);\n      const connection3 = sseService.createConnection(testUser.id, {} as any);\n\n      const stats = sseService.getConnectionStats();\n      expect(stats.totalConnections).toBe(3);\n      expect(stats.activeUsers).toBe(1);\n      expect(stats.connectionsPerUser[testUser.id]).toBe(3);\n\n      // Remover uma conexão\n      sseService.removeConnection(connection1.id);\n      \n      const updatedStats = sseService.getConnectionStats();\n      expect(updatedStats.totalConnections).toBe(2);\n      expect(updatedStats.connectionsPerUser[testUser.id]).toBe(2);\n    });\n\n    it('should enforce connection limits per user', () => {\n      // Tentar criar mais conexões que o limite\n      const connections = [];\n      \n      for (let i = 0; i < 7; i++) { // Limite é 5\n        try {\n          const connection = sseService.createConnection(testUser.id, {} as any);\n          connections.push(connection);\n        } catch (error) {\n          expect(error.message).toContain('limite máximo');\n        }\n      }\n      \n      expect(connections.length).toBeLessThanOrEqual(5);\n    });\n\n    it('should broadcast to all connected users', async () => {\n      // Criar usuários adicionais\n      const user2 = userRepository.create({\n        id: 'user-2',\n        email: 'user2@example.com',\n        nome: 'User 2',\n        roles: ['user'],\n      });\n      await userRepository.save(user2);\n\n      // Criar conexões para ambos usuários\n      sseService.createConnection(testUser.id, {} as any);\n      sseService.createConnection(user2.id, {} as any);\n\n      // Broadcast geral\n      const notification = {\n        type: 'announcement',\n        data: {\n          titulo: 'Anúncio Geral',\n          conteudo: 'Mensagem para todos os usuários',\n        },\n      };\n\n      const result = sseService.broadcastToAll(notification);\n      expect(result.success).toBe(true);\n      expect(result.sentCount).toBe(2);\n    });\n\n    it('should clean up inactive connections', async () => {\n      // Criar conexão\n      const connection = sseService.createConnection(testUser.id, {} as any);\n      \n      expect(sseService.getConnectionStats().totalConnections).toBe(1);\n      \n      // Simular conexão inativa (timeout)\n      connection.lastActivity = Date.now() - 400000; // 400 segundos atrás\n      \n      // Executar limpeza\n      sseService.cleanupInactiveConnections();\n      \n      expect(sseService.getConnectionStats().totalConnections).toBe(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle database errors gracefully', async () => {\n      // Simular erro no banco\n      jest.spyOn(notificacaoRepository, 'save').mockRejectedValueOnce(\n        new Error('Database connection failed'),\n      );\n\n      try {\n        await notificacaoService.criar(\n          testUser.id,\n          'error',\n          'Teste Erro',\n          'Conteúdo de teste',\n        );\n      } catch (error) {\n        expect(error.message).toContain('Database connection failed');\n      }\n    });\n\n    it('should handle SSE connection errors', () => {\n      const mockResponse = {\n        writeHead: jest.fn(),\n        write: jest.fn().mockImplementation(() => {\n          throw new Error('Connection lost');\n        }),\n        end: jest.fn(),\n        on: jest.fn(),\n      };\n\n      expect(() => {\n        sseService.createConnection(testUser.id, mockResponse as any);\n      }).not.toThrow();\n    });\n\n    it('should handle invalid notification data', async () => {\n      const invalidData = {\n        tipo: '', // Tipo vazio\n        titulo: '', // Título vazio\n        conteudo: 'Conteúdo válido',\n        destinatario_id: 'invalid-user-id',\n      };\n\n      await request(app.getHttpServer())\n        .post('/v1/notificacao')\n        .set('Authorization', `Bearer ${jwtToken}`)\n        .send(invalidData)\n        .expect(400);\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should handle high volume of notifications', async () => {\n      const startTime = Date.now();\n      const notificationCount = 100;\n      \n      const promises = [];\n      for (let i = 0; i < notificationCount; i++) {\n        promises.push(\n          notificacaoService.criar(\n            testUser.id,\n            'info',\n            `Notificação ${i}`,\n            `Conteúdo ${i}`,\n          ),\n        );\n      }\n      \n      await Promise.all(promises);\n      \n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      expect(duration).toBeLessThan(5000); // Deve completar em menos de 5 segundos\n      \n      const count = await notificacaoRepository.count({\n        where: { destinatario_id: testUser.id },\n      });\n      expect(count).toBe(notificationCount);\n    });\n\n    it('should handle multiple concurrent SSE connections', () => {\n      const connectionCount = 50;\n      const connections = [];\n      \n      const startTime = Date.now();\n      \n      for (let i = 0; i < connectionCount; i++) {\n        const mockResponse = {\n          writeHead: jest.fn(),\n          write: jest.fn(),\n          end: jest.fn(),\n          on: jest.fn(),\n        };\n        \n        const connection = sseService.createConnection(\n          `user-${i}`,\n          mockResponse as any,\n        );\n        connections.push(connection);\n      }\n      \n      const endTime = Date.now();\n      const duration = endTime - startTime;\n      \n      expect(duration).toBeLessThan(1000); // Deve completar em menos de 1 segundo\n      expect(sseService.getConnectionStats().totalConnections).toBe(connectionCount);\n    });\n  });\n});"],"version":3}