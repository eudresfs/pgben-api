44445f5021d067606e17779537cad6e3
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var CidadaoService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CidadaoService = void 0;
const common_1 = require("@nestjs/common");
const exceptions_1 = require("../../../shared/exceptions");
const cache_1 = require("../../../shared/cache");
const cidadao_repository_1 = require("../repositories/cidadao.repository");
const cidadao_response_dto_1 = require("../dto/cidadao-response.dto");
const class_transformer_1 = require("class-transformer");
const papel_cidadao_service_1 = require("./papel-cidadao.service");
const class_validator_1 = require("class-validator");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
/**
 * Serviço de cidadãos
 *
 * Responsável pela lógica de negócio relacionada a cidadãos/beneficiários
 */
let CidadaoService = CidadaoService_1 = class CidadaoService {
    cidadaoRepository;
    cacheService;
    papelCidadaoService;
    logger = new common_1.Logger(CidadaoService_1.name);
    // TTLs dinâmicos para diferentes tipos de entidades/operações
    CACHE_TTL_MAP = {
        cidadao: 3600, // 1 hora para registros individuais
        list: 300, // 5 minutos para listas (mudam com mais frequência)
        count: 60, // 1 minuto para contagens
        default: 3600, // padrão: 1 hora
    };
    CACHE_PREFIX = 'cidadao:';
    /**
     * Obtém o TTL apropriado baseado no tipo de entidade
     * @param entityType Tipo de entidade/operação
     * @returns TTL em segundos
     */
    getTTL(entityType) {
        return this.CACHE_TTL_MAP[entityType] || this.CACHE_TTL_MAP.default;
    }
    constructor(cidadaoRepository, cacheService, papelCidadaoService) {
        this.cidadaoRepository = cidadaoRepository;
        this.cacheService = cacheService;
        this.papelCidadaoService = papelCidadaoService;
    }
    /**
     * Busca todos os cidadãos com filtros e paginação
     * @param options Opções de filtro e paginação
     * @returns Lista de cidadãos paginada
     */
    /**
     * Busca cidadãos usando paginação tradicional (offset-based)
     * @param options Opções de paginação e filtros
     * @returns Cidadãos paginados e metadados de paginação
     */
    async findAll(options) {
        const { page = 1, limit = 10, search, bairro, unidadeId } = options || {};
        // Construir filtros
        const where = {};
        // Aplicar filtro de busca (nome, CPF ou NIS)
        if (search) {
            where.$or = [
                { nome: { $iLike: `%${search}%` } },
                { cpf: { $iLike: `%${search.replace(/\D/g, '')}%` } },
                { nis: { $iLike: `%${search.replace(/\D/g, '')}%` } },
            ];
        }
        // Aplicar filtro de bairro
        if (bairro) {
            where['endereco.bairro'] = { $iLike: `%${bairro}%` };
        }
        // Aplicar filtro de unidade (se fornecido)
        if (unidadeId) {
            where.unidade_id = unidadeId;
        }
        // Calcular skip para paginação
        const skip = (page - 1) * limit;
        try {
            // Buscar cidadãos sem relacionamentos para melhor performance
            const [cidadaos, total] = await this.cidadaoRepository.findAll({
                where,
                skip,
                take: limit,
                order: { nome: 'ASC' },
                includeRelations: false, // Não carregar relacionamentos na listagem
            });
            // Calcular totais para paginação
            const pages = Math.ceil(total / limit);
            const hasNext = page < pages;
            const hasPrev = page > 1;
            // Mapear para o DTO de resposta
            const items = cidadaos.map((cidadao) => (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadao, {
                excludeExtraneousValues: true,
                enableImplicitConversion: false,
            }));
            return {
                items,
                meta: {
                    total,
                    page,
                    limit,
                    pages,
                    hasNext,
                    hasPrev,
                },
            };
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Erro ao buscar cidadãos');
        }
    }
    /**
     * Busca um cidadão pelo ID
     * @param id ID do cidadão
     * @param includeRelations Se deve incluir relacionamentos (papéis, composição familiar)
     * @returns Cidadão encontrado
     * @throws NotFoundException se o cidadão não for encontrado
     */
    async findById(id, includeRelations = false) {
        const cacheKey = `${this.CACHE_PREFIX}id:${id}:${includeRelations ? 'full' : 'basic'}`;
        // Verifica se está no cache
        const cached = await this.cacheService.get(cacheKey);
        if (cached) {
            this.logger.debug(`Cache hit para cidadão ID ${id}`);
            return cached;
        }
        if (!(0, class_validator_1.isUUID)(id)) {
            throw new common_1.BadRequestException('ID deve ser um UUID válido');
        }
        try {
            // Definir campos específicos para reduzir volume de dados quando não precisar de todos
            const specificFields = includeRelations
                ? undefined
                : [
                    'id',
                    'nome',
                    'cpf',
                    'nis',
                    'telefone',
                    'endereco',
                    'unidade_id',
                    'created_at',
                    'updated_at',
                ];
            // Buscar do repositório com campos específicos
            const cidadao = await this.cidadaoRepository.findById(id, includeRelations, specificFields);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            const cidadaoDto = (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadao, {
                excludeExtraneousValues: true,
                enableImplicitConversion: false,
            });
            // Usar o método otimizado para armazenar em cache em lote
            await this.updateCidadaoCache(cidadaoDto, includeRelations);
            return cidadaoDto;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.BadRequestException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar cidadão por ID: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro interno do servidor');
        }
    }
    /**
     * Busca um cidadão pelo CPF
     * @param cpf CPF do cidadão (com ou sem formatação)
     * @param includeRelations Se deve incluir relacionamentos
     * @returns Dados do cidadão
     * @throws BadRequestException se o CPF for inválido
     * @throws NotFoundException se o cidadão não for encontrado
     */
    /**
     * Validação simplificada de CPF sem uso de classe pesada CPFValidator
     * Implementação focada em performance
     */
    isValidCPF(cpfLimpo) {
        // CPF deve ter 11 dígitos
        if (cpfLimpo.length !== 11) {
            return false;
        }
        // Verificação básica de dígitos iguais
        if (/^(\d)\1{10}$/.test(cpfLimpo)) {
            return false;
        }
        // Para diagnóstico, vamos aceitar qualquer CPF bem formado
        // A validação completa será restaurada após a resolução do problema
        return true;
    }
    /**
     * Método auxiliar para armazenar no cache de forma não-bloqueante
     *
     * OTIMIZAÇÃO DE PERFORMANCE:
     * - Utiliza setTimeout para tornar a operação assíncrona e não-bloqueante
     * - Captura erros localmente para não afetar o fluxo principal
     * - Logs mínimos para evitar sobrecarga
     *
     * @param chave Chave do cache
     * @param dados Dados a serem armazenados
     * @param ttl Tempo de vida no cache em segundos
     */
    armazenarNoCache(chave, dados, ttl = 3600) {
        // Executa em segundo plano para não bloquear o fluxo principal
        setTimeout(async () => {
            try {
                await this.cacheService.set(chave, dados, ttl);
            }
            catch (error) {
                // Erros de cache não devem afetar o fluxo principal
                this.logger.warn(`Cache write error [${chave.substring(0, 20)}...]: ${error.message}`);
            }
        }, 10); // Delay mínimo para garantir a não-interferência
    }
    /**
     * Método otimizado para buscar cidadão por CPF
     *
     * OTIMIZAÇÕES DE PERFORMANCE:
     * - Cache com timeout para evitar bloqueios
     * - Armazenamento em cache feito de forma não-bloqueante
     * - Medição de tempo para diagnóstico
     * - Validação de CPF otimizada
     *
     * @param cpf CPF do cidadão (com ou sem formatação)
     * @param includeRelations Incluir relacionamentos na resposta
     * @param specificFields Campos específicos a serem retornados
     * @returns Dados do cidadão encontrado
     */
    async findByCpf(cpf, includeRelations = false, specificFields) {
        // Performance: Registrar tempo para fins de diagnóstico
        const startTime = Date.now();
        const requestId = `CPF-${cpf.substr(-4)}-${Date.now()}`;
        if (!cpf || cpf.trim() === '') {
            throw new common_1.BadRequestException('CPF é obrigatório');
        }
        // Remover formatação do CPF
        const cpfLimpo = cpf.replace(/\D/g, '');
        // Validação rápida sem loops desnecessários
        if (!this.isValidCPF(cpfLimpo)) {
            throw new common_1.BadRequestException('CPF inválido');
        }
        try {
            // Chave de cache otimizada
            const cacheKey = `${this.CACHE_PREFIX}cpf:${cpfLimpo}:${includeRelations ? 'full' : 'basic'}`;
            // Consulta ao cache com timeout para evitar bloqueios
            let cachedCidadao = undefined;
            try {
                // Limitamos o tempo de espera do cache para evitar bloqueios
                const cachePromise = this.cacheService.get(cacheKey);
                const timeoutPromise = new Promise((resolve) => {
                    setTimeout(() => resolve(undefined), 30); // Reduzido para 30ms para maior agilidade
                });
                cachedCidadao = (await Promise.race([
                    cachePromise,
                    timeoutPromise,
                ]));
            }
            catch (cacheError) {
                // Erro de cache não deve impedir a continuidade da operação
                this.logger.warn(`Cache error [${requestId}]: ${cacheError.message}`);
            }
            // Se encontrou no cache, retornar imediatamente
            if (cachedCidadao) {
                this.logger.debug(`Cache hit [${requestId}]`);
                return cachedCidadao;
            }
            // Cache miss - buscar no banco de dados
            this.logger.debug(`Cache miss [${requestId}]`);
            // Definindo campos específicos para otimizar a query
            const campos = specificFields || [
                'id',
                'nome',
                'cpf',
                'nis',
                'telefone',
                'data_nascimento',
                'endereco',
                'unidade_id',
                'created_at',
                'updated_at',
            ];
            // Consulta otimizada ao banco de dados
            const cidadao = await this.cidadaoRepository.findByCpf(cpfLimpo, includeRelations, campos);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Transformação para DTO - necessária para serialização
            const cidadaoDto = (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadao, {
                excludeExtraneousValues: true,
                enableImplicitConversion: false,
            });
            // Armazenar no cache de forma não-bloqueante (fire and forget)
            this.armazenarNoCache(cacheKey, cidadaoDto, this.getTTL('cidadao'));
            // Armazenamento por ID também não-bloqueante
            this.armazenarNoCache(`${this.CACHE_PREFIX}id:${cidadao.id}:${includeRelations ? 'full' : 'basic'}`, cidadaoDto, this.getTTL('cidadao'));
            // Monitoramento de performance
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`Performance alert [${requestId}]: ${totalTime}ms`);
            }
            return cidadaoDto;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.BadRequestException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar cidadão por CPF [${cpfLimpo}]: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar cidadão por CPF');
        }
    }
    // Métodos já implementados acima
    /**
     * Busca um cidadão pelo NIS
     * @param nis Número do NIS (PIS/PASEP)
     * @param includeRelations Se deve incluir relacionamentos
     * @returns Dados do cidadão
     * @throws BadRequestException se o NIS for inválido
     * @throws NotFoundException se o cidadão não for encontrado
     */
    async findByNis(nis, includeRelations = false) {
        // Inicia medição de tempo para performance
        const startTime = Date.now();
        const requestId = `NIS-${nis.substring(Math.max(0, nis.length - 4))}-${Date.now()}`;
        this.logger.log(`[${requestId}] Processando busca por NIS`);
        if (!nis || nis.trim() === '') {
            throw new common_1.BadRequestException('NIS é obrigatório');
        }
        // Remover formatação do NIS
        const nisLimpo = nis.replace(/\D/g, '');
        // Validar NIS
        if (nisLimpo.length !== 11 || !/^\d{11}$/.test(nisLimpo)) {
            throw new common_1.BadRequestException('NIS deve ter 11 dígitos');
        }
        try {
            // Verificar cache com timeout para evitar bloqueio
            const cacheKey = `${this.CACHE_PREFIX}nis:${nisLimpo}:${includeRelations ? 'full' : 'basic'}`;
            let cachedCidadao = null;
            try {
                // Verificar cache com timeout para evitar bloqueio
                const cachePromise = this.cacheService.get(cacheKey);
                cachedCidadao = await Promise.race([
                    cachePromise,
                    new Promise((resolve) => {
                        setTimeout(() => {
                            this.logger.warn(`[${requestId}] Timeout ao buscar no cache`);
                            resolve(null);
                        }, 200); // 200ms timeout para operação de cache
                    }),
                ]);
            }
            catch (cacheError) {
                this.logger.error(`[${requestId}] Erro ao acessar cache: ${cacheError.message}`);
                // Continua a execução mesmo com erro de cache
            }
            if (cachedCidadao) {
                const totalTime = Date.now() - startTime;
                this.logger.debug(`[${requestId}] Cache hit para cidadão NIS: ${nisLimpo} em ${totalTime}ms`);
                return cachedCidadao;
            }
            // Se não encontrou no cache, busca no banco de dados
            this.logger.debug(`[${requestId}] Cache miss para cidadão NIS: ${nisLimpo}, buscando no banco...`);
            const dbStartTime = Date.now();
            // Buscar cidadão no banco de dados
            const cidadao = await this.cidadaoRepository.findByNis(nisLimpo, includeRelations);
            if (!cidadao) {
                const totalTime = Date.now() - startTime;
                this.logger.warn(`[${requestId}] Cidadão não encontrado em ${totalTime}ms`);
                throw new common_1.NotFoundException(`Cidadão com NIS ${nis} não encontrado`);
            }
            const dbTime = Date.now() - dbStartTime;
            this.logger.debug(`[${requestId}] Consulta ao banco completada em ${dbTime}ms`);
            // Converter para DTO
            const cidadaoDto = (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadao, {
                excludeExtraneousValues: true,
                enableImplicitConversion: false,
            });
            // Armazenar no cache de forma não-bloqueante
            this.armazenarNoCache(cacheKey, cidadaoDto, this.getTTL('cidadao'));
            // Armazenar também com as outras chaves (id e cpf) de forma não-bloqueante
            if (cidadao.id) {
                this.armazenarNoCache(`${this.CACHE_PREFIX}id:${cidadao.id}:${includeRelations ? 'full' : 'basic'}`, cidadaoDto, this.getTTL('cidadao'));
            }
            if (cidadao.cpf) {
                this.armazenarNoCache(`${this.CACHE_PREFIX}cpf:${cidadao.cpf}:${includeRelations ? 'full' : 'basic'}`, cidadaoDto, this.getTTL('cidadao'));
            }
            const totalTime = Date.now() - startTime;
            this.logger.log(`[${requestId}] Operação completa em ${totalTime}ms`);
            return cidadaoDto;
        }
        catch (error) {
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.BadRequestException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Erro ao buscar cidadão por NIS');
        }
    }
    /**
     * Busca cidadão pelo telefone
     * @param telefone Telefone do cidadão
     * @param includeRelations Se deve incluir relacionamentos
     * @returns Dados do cidadão
     * @throws BadRequestException se o telefone for inválido
     * @throws NotFoundException se o cidadão não for encontrado
     */
    async findByTelefone(telefone, includeRelations = false) {
        if (!telefone || telefone.trim() === '') {
            throw new common_1.BadRequestException('Telefone é obrigatório');
        }
        // Remover formatação do telefone
        const telefoneClean = telefone.replace(/\D/g, '');
        // Validar se tem pelo menos 10 dígitos (telefone fixo) ou 11 (celular)
        if (telefoneClean.length < 10 || telefoneClean.length > 11) {
            throw new common_1.BadRequestException('Telefone deve ter 10 ou 11 dígitos');
        }
        try {
            // Verificar cache
            const cacheKey = `${this.CACHE_PREFIX}telefone:${telefoneClean}:${includeRelations ? 'full' : 'basic'}`;
            const cachedCidadao = await this.cacheService.get(cacheKey);
            if (cachedCidadao) {
                this.logger.debug(`Cache hit para busca por telefone: ${telefoneClean}`);
                return cachedCidadao;
            }
            this.logger.debug(`Cache miss para busca por telefone: ${telefoneClean}`);
            const cidadao = await this.cidadaoRepository.findByTelefone(telefoneClean, includeRelations);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            const cidadaoDto = (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadao, {
                excludeExtraneousValues: true,
                enableImplicitConversion: false,
            });
            // Armazenar no cache
            await this.cacheService.set(cacheKey, cidadaoDto, this.getTTL('cidadao'));
            return cidadaoDto;
        }
        catch (error) {
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar cidadão por telefone: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar cidadão por telefone');
        }
    }
    /**
     * Busca cidadãos pelo nome (busca parcial)
     * @param nome Nome do cidadão
     * @param includeRelations Se deve incluir relacionamentos
     * @returns Lista de cidadãos encontrados
     * @throws BadRequestException se o nome for inválido
     */
    async findByNome(nome, includeRelations = false) {
        if (!nome || nome.trim() === '' || nome.trim().length < 2) {
            throw new common_1.BadRequestException('Nome deve ter pelo menos 2 caracteres');
        }
        try {
            // Verificar cache
            const cacheKey = `${this.CACHE_PREFIX}nome:${nome.toLowerCase()}:${includeRelations ? 'full' : 'basic'}`;
            const cachedCidadaos = await this.cacheService.get(cacheKey);
            if (cachedCidadaos) {
                this.logger.debug(`Cache hit para busca por nome: ${nome}`);
                return cachedCidadaos;
            }
            this.logger.debug(`Cache miss para busca por nome: ${nome}`);
            const cidadaos = await this.cidadaoRepository.findByNome(nome, includeRelations);
            const cidadaosDto = cidadaos.map((cidadao) => (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadao, {
                excludeExtraneousValues: true,
                enableImplicitConversion: false,
            }));
            // Armazenar no cache por menos tempo (busca por nome pode mudar mais frequentemente)
            await this.cacheService.set(cacheKey, cidadaosDto, this.getTTL('cidadao') / 2);
            return cidadaosDto;
        }
        catch (error) {
            if (error instanceof common_1.BadRequestException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar cidadãos por nome: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar cidadãos por nome');
        }
    }
    /**
     * Busca unificada de cidadão por ID, CPF, NIS, telefone ou nome
     * Permite apenas um parâmetro por vez para garantir clareza e previsibilidade
     * @param searchParams Parâmetros de busca
     * @returns Dados do cidadão ou lista de cidadãos (no caso de busca por nome)
     * @throws BadRequestException se nenhum ou mais de um parâmetro for fornecido
     */
    async buscarCidadao(searchParams) {
        const { id, cpf, nis, telefone, nome, includeRelations = false, } = searchParams;
        // Validar que apenas um parâmetro foi fornecido
        const parametros = [id, cpf, nis, telefone, nome].filter((param) => param && param.trim() !== '');
        if (parametros.length === 0) {
            throw new common_1.BadRequestException('Forneça pelo menos um parâmetro de busca: id, cpf, nis, telefone ou nome');
        }
        if (parametros.length > 1) {
            throw new common_1.BadRequestException('Forneça apenas um parâmetro de busca por vez');
        }
        try {
            // Executar busca baseada no parâmetro fornecido
            if (id) {
                return await this.findById(id, includeRelations);
            }
            if (cpf) {
                return await this.findByCpf(cpf, includeRelations);
            }
            if (nis) {
                return await this.findByNis(nis, includeRelations);
            }
            if (telefone) {
                return await this.findByTelefone(telefone, includeRelations);
            }
            if (nome) {
                return await this.findByNome(nome, includeRelations);
            }
            // Este ponto nunca deve ser alcançado devido à validação acima
            throw new common_1.BadRequestException('Parâmetro de busca inválido');
        }
        catch (error) {
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro na busca unificada de cidadão: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar cidadão');
        }
    }
    /**
     * Cria um novo cidadão
     * @param createCidadaoDto Dados do cidadão a ser criado
     * @param unidadeId ID da unidade responsável pelo cadastro
     * @param userId ID do usuário que está realizando o cadastro
     * @returns Cidadão criado
     * @throws ConflictException se já existir um cidadão com o mesmo CPF ou NIS
     */
    /**
     * Invalida o cache para um cidadão específico
     * @param cidadao Dados do cidadão
     * @param cpf CPF do cidadão (opcional)
     * @param nis NIS do cidadão (opcional)
     */
    /**
     * Invalida o cache para um cidadão específico de forma otimizada
     * @param cidadao Dados do cidadão
     * @param cpf CPF do cidadão (opcional)
     * @param nis NIS do cidadão (opcional)
     */
    async invalidateCache(cidadao, cpf, nis) {
        try {
            const keys = [
                `${this.CACHE_PREFIX}id:${cidadao.id}:basic`,
                `${this.CACHE_PREFIX}id:${cidadao.id}:full`,
                `${this.CACHE_PREFIX}list:*`,
            ];
            // Invalidar cache por CPF
            if (cidadao.cpf || cpf) {
                const cpfNormalizado = (cidadao.cpf || cpf).replace(/\D/g, '');
                keys.push(`${this.CACHE_PREFIX}cpf:${cpfNormalizado}:basic`);
                keys.push(`${this.CACHE_PREFIX}cpf:${cpfNormalizado}:full`);
            }
            // Invalidar cache por NIS
            if (cidadao.nis || nis) {
                const nisNormalizado = (cidadao.nis || nis).replace(/\D/g, '');
                keys.push(`${this.CACHE_PREFIX}nis:${nisNormalizado}:basic`);
                keys.push(`${this.CACHE_PREFIX}nis:${nisNormalizado}:full`);
            }
            // Executa todas as operações de invalidação em paralelo
            await Promise.all(keys.map((key) => this.cacheService.del(key)));
            this.logger.debug(`Cache invalidado para cidadão ID ${cidadao.id}: ${keys.length} chaves`);
        }
        catch (error) {
            this.logger.error(`Erro ao invalidar cache: ${error.message}`, error.stack);
        }
    }
    /**
     * Atualiza o cache para um cidadão usando operações em lote
     * @param cidadao Dados do cidadão
     * @param includeRelations Se inclui relacionamentos (define o tipo de cache)
     */
    async updateCidadaoCache(cidadao, includeRelations = false) {
        try {
            const cacheType = includeRelations ? 'full' : 'basic';
            const ttl = this.getTTL('cidadao');
            const cacheOperations = [];
            // Preparar todas as operações de cache em paralelo
            cacheOperations.push(this.cacheService.set(`${this.CACHE_PREFIX}id:${cidadao.id}:${cacheType}`, cidadao, ttl));
            if (cidadao.cpf) {
                const cpfNormalizado = cidadao.cpf.replace(/\D/g, '');
                cacheOperations.push(this.cacheService.set(`${this.CACHE_PREFIX}cpf:${cpfNormalizado}:${cacheType}`, cidadao, ttl));
            }
            if (cidadao.nis) {
                const nisNormalizado = cidadao.nis.replace(/\D/g, '');
                cacheOperations.push(this.cacheService.set(`${this.CACHE_PREFIX}nis:${nisNormalizado}:${cacheType}`, cidadao, ttl));
            }
            // Executa todas as operações de cache em paralelo
            await Promise.all(cacheOperations);
            this.logger.debug(`Cache atualizado para cidadão ID ${cidadao.id}: ${cacheOperations.length} operações`);
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar cache: ${error.message}`, error.stack);
        }
    }
    async create(createCidadaoDto, unidadeId, userId) {
        // Validar CPF
        if (!createCidadaoDto.cpf || createCidadaoDto.cpf.trim() === '') {
            throw new common_1.BadRequestException('CPF é obrigatório');
        }
        // Remover formatação do CPF e NIS
        const cpfLimpo = createCidadaoDto.cpf.replace(/\D/g, '');
        const nisLimpo = createCidadaoDto.nis?.replace(/\D/g, '') || null;
        // Validar formato do CPF
        if (cpfLimpo.length !== 11 || !/^\d{11}$/.test(cpfLimpo)) {
            throw new common_1.BadRequestException('CPF deve ter 11 dígitos');
        }
        // Validar formato do NIS se fornecido
        if (createCidadaoDto.nis && nisLimpo) {
            if (nisLimpo.length !== 11 || !/^\d{11}$/.test(nisLimpo)) {
                throw new common_1.BadRequestException('NIS deve ter 11 dígitos');
            }
        }
        try {
            // Verificar se já existe cidadão com o mesmo CPF
            const cpfExists = await this.cidadaoRepository.findByCpf(cpfLimpo);
            if (cpfExists) {
                throw new common_1.ConflictException('Já existe um cidadão cadastrado com este CPF');
            }
            // Verificar se já existe cidadão com o mesmo NIS (se fornecido)
            if (nisLimpo) {
                const nisExists = await this.cidadaoRepository.findByNis(nisLimpo);
                if (nisExists) {
                    throw new common_1.ConflictException('Já existe um cidadão cadastrado com este NIS');
                }
            }
            // Extrair papéis e composição familiar do DTO para processar separadamente
            const { papeis, composicao_familiar, ...cidadaoData } = createCidadaoDto;
            // Normalizar campos de enum antes de criar
            const dadosParaCriacao = (0, enum_normalizer_util_1.normalizeEnumFields)({
                ...cidadaoData,
                cpf: cpfLimpo,
                ...(nisLimpo && { nis: nisLimpo }),
            });
            // Criar o cidadão
            const cidadaoCriado = await this.cidadaoRepository.create(dadosParaCriacao);
            // Criar papéis para o cidadão, se fornecidos
            if (papeis && papeis.length > 0) {
                await this.papelCidadaoService.createMany(cidadaoCriado.id, papeis.map((papel) => ({
                    tipo_papel: papel.tipo_papel,
                    metadados: papel.metadados,
                })));
            }
            // Buscar cidadão com papéis para retornar
            const cidadaoCompleto = await this.cidadaoRepository.findById(cidadaoCriado.id);
            return (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadaoCompleto, {
                excludeExtraneousValues: true,
                enableImplicitConversion: false,
            });
        }
        catch (error) {
            // Re-lançar exceções já tratadas
            if (error instanceof common_1.ConflictException ||
                error instanceof common_1.BadRequestException ||
                error instanceof exceptions_1.AppError) {
                throw error;
            }
            // Tratar erros específicos do PostgreSQL usando o catálogo
            if (error.code) {
                // Verificar duplicatas específicas primeiro
                if (error.code === '23505') {
                    if (error.constraint?.includes('cpf')) {
                        (0, exceptions_1.throwDuplicateCpf)(cpfLimpo);
                    }
                    if (error.constraint?.includes('nis') && nisLimpo) {
                        (0, exceptions_1.throwDuplicateNis)(nisLimpo);
                    }
                }
                // Usar o catálogo de erros para outros casos
                (0, exceptions_1.throwFromPostgresError)(error.code, error, {
                    operationalContext: {
                        module: 'cidadao',
                        operation: 'create',
                        entityType: 'Cidadao',
                    },
                    metadata: {
                        constraint: error.constraint,
                        table: error.table,
                        column: error.column,
                        detail: error.detail,
                    },
                });
            }
            // Log do erro para debugging
            this.logger.error(`Erro ao criar cidadão: ${error.message}`, {
                error: error.message,
                code: error.code,
                constraint: error.constraint,
                detail: error.detail,
                stack: error.stack,
            });
            throw new common_1.InternalServerErrorException('Erro interno do servidor ao criar cidadão. Tente novamente ou entre em contato com o suporte.');
        }
    }
    /**
     * Atualiza um cidadão existente
     * @param id ID do cidadão a ser atualizado
     * @param updateCidadaoDto Dados a serem atualizados
     * @param userId ID do usuário que está realizando a atualização
     * @returns Cidadão atualizado
     * @throws NotFoundException se o cidadão não for encontrado
     * @throws ConflictException se já existir outro cidadão com o mesmo CPF ou NIS
     */
    async update(id, updateCidadaoDto, userId) {
        try {
            // Verificar se o cidadão existe
            const cidadao = await this.cidadaoRepository.findById(id);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            const updateData = { ...updateCidadaoDto };
            // Verificar se o CPF foi alterado e se já existe outro cidadão com o novo CPF
            if (updateCidadaoDto.cpf) {
                const cpfLimpo = updateCidadaoDto.cpf.replace(/\D/g, '');
                if (cpfLimpo !== cidadao.cpf) {
                    const cpfExists = await this.cidadaoRepository.findByCpf(cpfLimpo);
                    if (cpfExists) {
                        throw new common_1.ConflictException('Já existe um cidadão cadastrado com este CPF');
                    }
                    // Atualizar o CPF formatado
                    updateData.cpf = cpfLimpo;
                }
            }
            // Verificar se o NIS foi alterado e se já existe outro cidadão com o novo NIS
            if ('nis' in updateCidadaoDto) {
                const nisLimpo = updateCidadaoDto.nis
                    ? updateCidadaoDto.nis.replace(/\D/g, '')
                    : null;
                if (nisLimpo !== cidadao.nis) {
                    if (nisLimpo) {
                        const nisExists = await this.cidadaoRepository.findByNis(nisLimpo);
                        if (nisExists) {
                            throw new common_1.ConflictException('Já existe um cidadão cadastrado com este NIS');
                        }
                    }
                    // Atualizar o NIS formatado
                    updateData.nis = nisLimpo;
                }
            }
            // Informações de auditoria são gerenciadas automaticamente pelo TypeORM
            // Normalizar campos de enum antes de atualizar
            const normalizedData = (0, enum_normalizer_util_1.normalizeEnumFields)(updateData);
            // Atualizar o cidadão
            const cidadaoAtualizado = await this.cidadaoRepository.update(id, normalizedData);
            // Invalidar cache
            await this.invalidateCache(cidadaoAtualizado);
            const cidadaoDto = (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadaoAtualizado, {
                excludeExtraneousValues: true,
                enableImplicitConversion: true,
            });
            // Atualizar cache com novos dados
            await this.cacheService.set(`${this.CACHE_PREFIX}id:${cidadaoAtualizado.id}`, cidadaoDto, this.getTTL('cidadao'));
            await this.cacheService.set(`${this.CACHE_PREFIX}cpf:${cidadaoAtualizado.cpf}`, cidadaoDto, this.getTTL('cidadao'));
            if (cidadaoAtualizado.nis) {
                await this.cacheService.set(`${this.CACHE_PREFIX}nis:${cidadaoAtualizado.nis}`, cidadaoDto, this.getTTL('cidadao'));
            }
            return cidadaoDto;
        }
        catch (error) {
            // Re-lançar exceções já tratadas
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.ConflictException ||
                error instanceof common_1.BadRequestException ||
                error instanceof exceptions_1.AppError) {
                throw error;
            }
            // Tratar erros específicos do PostgreSQL usando o catálogo
            if (error.code) {
                // Verificar duplicatas específicas primeiro
                if (error.code === '23505') {
                    if (error.constraint?.includes('cpf') && updateCidadaoDto.cpf) {
                        const cpfLimpo = updateCidadaoDto.cpf.replace(/\D/g, '');
                        (0, exceptions_1.throwDuplicateCpf)(cpfLimpo);
                    }
                    if (error.constraint?.includes('nis') && updateCidadaoDto.nis) {
                        const nisLimpo = updateCidadaoDto.nis.replace(/\D/g, '');
                        (0, exceptions_1.throwDuplicateNis)(nisLimpo);
                    }
                }
                // Usar o catálogo de erros para outros casos
                (0, exceptions_1.throwFromPostgresError)(error.code, error, {
                    operationalContext: {
                        module: 'cidadao',
                        operation: 'update',
                        entityType: 'Cidadao',
                        entityId: id,
                    },
                    metadata: {
                        constraint: error.constraint,
                        table: error.table,
                        column: error.column,
                        detail: error.detail,
                    },
                });
            }
            // Log do erro para debugging
            this.logger.error(`Erro ao atualizar cidadão: ${error.message}`, {
                error: error.message,
                code: error.code,
                constraint: error.constraint,
                detail: error.detail,
                stack: error.stack,
            });
            throw new common_1.InternalServerErrorException('Erro interno do servidor ao atualizar cidadão. Tente novamente ou entre em contato com o suporte.');
        }
    }
    /**
     * Remove um cidadão (soft delete)
     * @param id ID do cidadão a ser removido
     * @param userId ID do usuário que está realizando a remoção
     * @throws NotFoundException se o cidadão não for encontrado
     */
    async remove(id, userId) {
        if (!id || id.trim() === '') {
            throw new common_1.BadRequestException('ID é obrigatório');
        }
        try {
            // Verificar se o cidadão existe
            const cidadao = await this.cidadaoRepository.findById(id);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Realizar soft delete
            await this.cidadaoRepository.update(id, {
                removed_at: new Date(),
            });
            // Invalidar cache
            await this.invalidateCache(cidadao);
        }
        catch (error) {
            // Re-lançar exceções já tratadas
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.BadRequestException) {
                throw error;
            }
            // Tratar erros específicos do PostgreSQL usando o catálogo
            if (error.code) {
                (0, exceptions_1.throwFromPostgresError)(error.code, error, {
                    operationalContext: {
                        module: 'cidadao',
                        operation: 'remove',
                        entityType: 'Cidadao',
                        entityId: id,
                    },
                    metadata: {
                        constraint: error.constraint,
                        table: error.table,
                        column: error.column,
                        detail: error.detail,
                    },
                });
            }
            // Log do erro para debugging
            this.logger.error(`Erro ao remover cidadão: ${error.message}`, {
                error: error.message,
                code: error.code,
                constraint: error.constraint,
                detail: error.detail,
                stack: error.stack,
            });
            throw new common_1.InternalServerErrorException('Erro interno do servidor ao remover cidadão. Tente novamente ou entre em contato com o suporte.');
        }
    }
    /**
     * Obtém histórico de solicitações de um cidadão
     * @param cidadaoId ID do cidadão
     * @returns Lista de solicitações do cidadão
     * @throws NotFoundException se o cidadão não for encontrado
     */
    async findSolicitacoesByCidadaoId(cidadaoId) {
        // Implementação futura
        return [];
    }
    /**
     * Busca cidadãos usando paginação por cursor, que é mais eficiente para grandes volumes de dados
     * @param options Opções de paginação e filtros
     * @returns Cidadãos paginados e metadados de paginação por cursor
     */
    async findByCursor(options) {
        try {
            // Cache com TTL mais curto para busca paginada
            const cacheKey = `${this.CACHE_PREFIX}cursor:${JSON.stringify(options)}`;
            const cached = await this.cacheService.get(cacheKey);
            if (cached) {
                this.logger.debug(`Cache hit para paginação por cursor: ${cacheKey}`);
                return cached;
            }
            // Converter parâmetros de busca para filtros TypeORM
            const where = {};
            if (options.search) {
                // Busca por nome usando o índice GIN trgm otimizado
                where.nome = options.search;
            }
            if (options.bairro) {
                // Busca por bairro usando o índice GIN JSONB otimizado
                where['endereco.bairro'] = options.bairro;
            }
            if (options.unidadeId) {
                where.unidade_id = options.unidadeId;
            }
            // Campos específicos para reduzir volume de dados transferidos
            const specificFields = [
                'id',
                'nome',
                'cpf',
                'nis',
                'telefone',
                'endereco',
                'unidade_id',
                'created_at',
                'updated_at',
            ];
            // Executar busca no repositório com paginação por cursor
            const result = await this.cidadaoRepository.findByCursor({
                cursor: options.cursor,
                limit: options.limit,
                orderBy: options.orderBy || 'created_at',
                orderDirection: options.orderDirection || 'DESC',
                where,
                includeRelations: false,
                specificFields,
            });
            // Converter resultados para DTOs
            const cidadaos = result.items.map((cidadao) => (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadao, {
                excludeExtraneousValues: true,
                enableImplicitConversion: true,
            }));
            // Construir resposta com metadados de paginação
            const response = {
                items: cidadaos,
                meta: {
                    count: cidadaos.length,
                    total: result.count,
                    nextCursor: result.nextCursor,
                    hasNextPage: result.hasNextPage,
                },
            };
            // Armazenar no cache com TTL mais curto para paginação
            await this.cacheService.set(cacheKey, response, this.getTTL('list'));
            return response;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar cidadãos com paginação por cursor: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar cidadãos');
        }
    }
    /**
     * Adiciona um membro à composição familiar do cidadão
     * @param cidadaoId ID do cidadão
     * @param createComposicaoFamiliarDto Dados do membro familiar
     * @param userId ID do usuário que está fazendo a operação
     * @returns Cidadão atualizado
     */
    async addComposicaoFamiliar(cidadaoId, createComposicaoFamiliarDto, userId) {
        try {
            // Verificar se o cidadão existe
            const cidadao = await this.cidadaoRepository.findById(cidadaoId);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Adicionar membro à composição familiar usando o repositório
            const cidadaoAtualizado = await this.cidadaoRepository.addComposicaoFamiliar(cidadaoId, createComposicaoFamiliarDto);
            // Invalidar cache
            await this.invalidateCache(cidadaoAtualizado);
            const cidadaoDto = (0, class_transformer_1.plainToInstance)(cidadao_response_dto_1.CidadaoResponseDto, cidadaoAtualizado, {
                excludeExtraneousValues: true,
                enableImplicitConversion: true,
            });
            // Atualizar cache
            await this.cacheService.set(`${this.CACHE_PREFIX}id:${cidadaoAtualizado.id}`, cidadaoDto, this.getTTL('cidadao'));
            return cidadaoDto;
        }
        catch (error) {
            // Propagar erros específicos sem transformá-los
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.BadRequestException ||
                error instanceof common_1.ConflictException) {
                throw error;
            }
            this.logger.error(`Erro ao adicionar membro à composição familiar: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao adicionar membro à composição familiar');
        }
    }
};
exports.CidadaoService = CidadaoService;
exports.CidadaoService = CidadaoService = CidadaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(2, (0, common_1.Inject)((0, common_1.forwardRef)(() => papel_cidadao_service_1.PapelCidadaoService))),
    __metadata("design:paramtypes", [typeof (_a = typeof cidadao_repository_1.CidadaoRepository !== "undefined" && cidadao_repository_1.CidadaoRepository) === "function" ? _a : Object, typeof (_b = typeof cache_1.CacheService !== "undefined" && cache_1.CacheService) === "function" ? _b : Object, typeof (_c = typeof papel_cidadao_service_1.PapelCidadaoService !== "undefined" && papel_cidadao_service_1.PapelCidadaoService) === "function" ? _c : Object])
], CidadaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,