e534115aaa42c053d2c41508292c3e5c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const dados_sociais_controller_1 = require("./dados-sociais.controller");
const dados_sociais_service_1 = require("../services/dados-sociais.service");
const common_1 = require("@nestjs/common");
const enums_1 = require("../../../shared/enums");
describe('DadosSociaisController', () => {
    let controller;
    let service;
    const mockDadosSociais = {
        id: '1',
        cidadao_id: 'cidadao-1',
        escolaridade: enums_1.EscolaridadeEnum.MEDIO_COMPLETO,
        publico_prioritario: enums_1.PublicoPrioritarioEnum.PESSOA_IDOSA,
        renda: 1500.0,
        ocupacao: 'Vendedor',
        recebe_pbf: true,
        valor_pbf: 400.0,
        recebe_bpc: false,
        tipo_bpc: null,
        valor_bpc: null,
        curso_profissionalizante: 'Curso de Informática',
        interesse_curso_profissionalizante: true,
        situacao_trabalho: enums_1.SituacaoTrabalhoEnum.EMPREGADO,
        area_trabalho: 'Vendas',
        familiar_apto_trabalho: true,
        area_interesse_familiar: 'Administração',
        observacoes: 'Observações de teste',
        created_at: new Date(),
        updated_at: new Date(),
        deleted_at: null,
        cidadao: null,
    };
    const mockDadosSociaisService = {
        create: jest.fn(),
        findByCidadaoId: jest.fn(),
        update: jest.fn(),
        remove: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [dados_sociais_controller_1.DadosSociaisController],
            providers: [
                {
                    provide: dados_sociais_service_1.DadosSociaisService,
                    useValue: mockDadosSociaisService,
                },
            ],
        }).compile();
        controller = module.get(dados_sociais_controller_1.DadosSociaisController);
        service = module.get(dados_sociais_service_1.DadosSociaisService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('create', () => {
        const createDto = {
            escolaridade: enums_1.EscolaridadeEnum.MEDIO_COMPLETO,
            publico_prioritario: enums_1.PublicoPrioritarioEnum.PESSOA_IDOSA,
            renda: 1500.0,
            ocupacao: 'Vendedor',
            recebe_pbf: true,
            valor_pbf: 400.0,
            recebe_bpc: false,
            curso_profissionalizante: 'Curso de Informática',
            interesse_curso_profissionalizante: true,
            situacao_trabalho: enums_1.SituacaoTrabalhoEnum.EMPREGADO,
            area_trabalho: 'Vendas',
            familiar_apto_trabalho: true,
            area_interesse_familiar: 'Administração',
            observacoes: 'Observações de teste',
        };
        it('should create dados sociais successfully', async () => {
            mockDadosSociaisService.create.mockResolvedValue(mockDadosSociais);
            const result = await controller.create('cidadao-1', createDto);
            expect(service.create).toHaveBeenCalledWith('cidadao-1', createDto);
            expect(result).toEqual(mockDadosSociais);
        });
        it('should throw NotFoundException when cidadao not found', async () => {
            mockDadosSociaisService.create.mockRejectedValue(new common_1.NotFoundException('Cidadão com ID cidadao-1 não encontrado'));
            await expect(controller.create('cidadao-1', createDto)).rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw ConflictException when dados sociais already exist', async () => {
            mockDadosSociaisService.create.mockRejectedValue(new common_1.ConflictException('Cidadão cidadao-1 já possui dados sociais cadastrados'));
            await expect(controller.create('cidadao-1', createDto)).rejects.toThrow(common_1.ConflictException);
        });
    });
    describe('findByCidadaoId', () => {
        it('should return dados sociais for valid cidadao', async () => {
            mockDadosSociaisService.findByCidadaoId.mockResolvedValue(mockDadosSociais);
            const result = await controller.findByCidadaoId('cidadao-1');
            expect(service.findByCidadaoId).toHaveBeenCalledWith('cidadao-1');
            expect(result).toEqual(mockDadosSociais);
        });
        it('should throw NotFoundException when cidadao not found', async () => {
            mockDadosSociaisService.findByCidadaoId.mockRejectedValue(new common_1.NotFoundException('Cidadão com ID cidadao-1 não encontrado'));
            await expect(controller.findByCidadaoId('cidadao-1')).rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw NotFoundException when dados sociais not found', async () => {
            mockDadosSociaisService.findByCidadaoId.mockRejectedValue(new common_1.NotFoundException('Dados sociais não encontrados para o cidadão cidadao-1'));
            await expect(controller.findByCidadaoId('cidadao-1')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        const updateDto = {
            renda: 1800.0,
            ocupacao: 'Gerente de Vendas',
            observacoes: 'Observações atualizadas',
        };
        it('should update dados sociais successfully', async () => {
            const updatedDadosSociais = {
                ...mockDadosSociais,
                ...updateDto,
            };
            mockDadosSociaisService.update.mockResolvedValue(updatedDadosSociais);
            const result = await controller.update('cidadao-1', updateDto);
            expect(service.update).toHaveBeenCalledWith('cidadao-1', updateDto);
            expect(result).toEqual(updatedDadosSociais);
        });
        it('should throw NotFoundException when dados sociais not found', async () => {
            mockDadosSociaisService.update.mockRejectedValue(new common_1.NotFoundException('Dados sociais não encontrados para o cidadão cidadao-1'));
            await expect(controller.update('cidadao-1', updateDto)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('remove', () => {
        it('should remove dados sociais successfully', async () => {
            mockDadosSociaisService.remove.mockResolvedValue(undefined);
            await controller.remove('cidadao-1');
            expect(service.remove).toHaveBeenCalledWith('cidadao-1');
        });
        it('should throw NotFoundException when dados sociais not found', async () => {
            mockDadosSociaisService.remove.mockRejectedValue(new common_1.NotFoundException('Dados sociais não encontrados para o cidadão cidadao-1'));
            await expect(controller.remove('cidadao-1')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('validation', () => {
        it('should validate UUID format for cidadaoId parameter', () => {
            // Este teste seria implementado com validação de pipe UUID
            // Por enquanto, apenas verificamos se o controller está definido
            expect(controller).toBeDefined();
        });
        it('should validate CreateDadosSociaisDto', () => {
            // Este teste seria implementado com validação de DTO
            // Por enquanto, apenas verificamos se o controller está definido
            expect(controller).toBeDefined();
        });
        it('should validate UpdateDadosSociaisDto', () => {
            // Este teste seria implementado com validação de DTO
            // Por enquanto, apenas verificamos se o controller está definido
            expect(controller).toBeDefined();
        });
    });
    describe('authorization', () => {
        it('should require authentication for all endpoints', () => {
            // Este teste seria implementado com verificação de guards
            // Por enquanto, apenas verificamos se o controller está definido
            expect(controller).toBeDefined();
        });
        it('should require proper permissions for CRUD operations', () => {
            // Este teste seria implementado com verificação de permissions
            // Por enquanto, apenas verificamos se o controller está definido
            expect(controller).toBeDefined();
        });
    });
    describe('error handling', () => {
        it('should handle service errors gracefully', async () => {
            mockDadosSociaisService.findByCidadaoId.mockRejectedValue(new Error('Database connection error'));
            await expect(controller.findByCidadaoId('cidadao-1')).rejects.toThrow(Error);
        });
        it('should propagate validation errors', async () => {
            const createDto = {}; // DTO inválido
            // Este teste seria mais completo com validação real
            expect(controller).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,