8c8e1f7a315916ca723ce9aadf486be1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const jwt_1 = require("@nestjs/jwt");
const config_1 = require("@nestjs/config");
const passport_1 = require("@nestjs/passport");
const request = __importStar(require("supertest"));
const typeorm_2 = require("@nestjs/typeorm");
const notificacao_module_1 = require("../notificacao.module");
const notificacao_sistema_entity_1 = require("../entities/notificacao-sistema.entity");
const notification_template_entity_1 = require("../entities/notification-template.entity");
const sse_service_1 = require("../services/sse.service");
const notificacao_service_1 = require("../services/notificacao.service");
const user_entity_1 = require("../../user/entities/user.entity");
describe('Notification SSE Integration', () => {
    let app;
    let notificacaoService;
    let sseService;
    let notificacaoRepository;
    let userRepository;
    let jwtToken;
    let testUser;
    const mockConfigService = {
        get: jest.fn((key) => {
            const config = {
                JWT_SECRET: 'test-secret',
                JWT_EXPIRES_IN: '1h',
                SSE_HEARTBEAT_INTERVAL: 30000,
                SSE_CONNECTION_TIMEOUT: 300000,
                SSE_MAX_CONNECTIONS_PER_USER: 5,
                DATABASE_URL: 'sqlite::memory:',
            };
            return config[key];
        }),
    };
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                }),
                typeorm_1.TypeOrmModule.forRootAsync({
                    imports: [config_1.ConfigModule],
                    useFactory: () => ({
                        type: 'sqlite',
                        database: ':memory:',
                        entities: [notificacao_sistema_entity_1.NotificacaoSistema, notification_template_entity_1.NotificationTemplate, user_entity_1.User],
                        synchronize: true,
                        logging: false,
                    }),
                    inject: [config_1.ConfigService],
                }),
                passport_1.PassportModule.register({ defaultStrategy: 'jwt' }),
                jwt_1.JwtModule.registerAsync({
                    imports: [config_1.ConfigModule],
                    useFactory: (configService) => ({
                        secret: configService.get('JWT_SECRET'),
                        signOptions: {
                            expiresIn: configService.get('JWT_EXPIRES_IN'),
                        },
                    }),
                    inject: [config_1.ConfigService],
                }),
                notificacao_module_1.NotificacaoModule,
            ],
            providers: [
                {
                    provide: config_1.ConfigService,
                    useValue: mockConfigService,
                },
            ],
        })
            .overrideProvider(config_1.ConfigService)
            .useValue(mockConfigService)
            .compile();
        app = moduleFixture.createNestApplication();
        await app.init();
        notificacaoService = moduleFixture.get(notificacao_service_1.NotificacaoService);
        sseService = moduleFixture.get(sse_service_1.SseService);
        notificacaoRepository = moduleFixture.get((0, typeorm_2.getRepositoryToken)(notificacao_sistema_entity_1.NotificacaoSistema));
        userRepository = moduleFixture.get((0, typeorm_2.getRepositoryToken)(user_entity_1.User));
        // Criar usuário de teste
        testUser = userRepository.create({
            id: 'test-user-id',
            email: 'test@example.com',
            nome: 'Test User',
            roles: ['user'],
        });
        await userRepository.save(testUser);
        // Gerar token JWT para testes
        const jwtService = moduleFixture.get('JwtService');
        jwtToken = await jwtService.signAsync({
            id: testUser.id,
            email: testUser.email,
            roles: testUser.roles,
        });
    });
    afterAll(async () => {
        await app.close();
    });
    beforeEach(async () => {
        // Limpar dados entre testes
        await notificacaoRepository.clear();
        sseService.clearAllConnections();
    });
    describe('SSE Connection Endpoints', () => {
        it('should establish SSE connection with valid token', (done) => {
            request(app.getHttpServer())
                .get(`/v1/notificacao/sse?token=${jwtToken}`)
                .expect(200)
                .expect('Content-Type', /text\/plain/)
                .expect('Cache-Control', 'no-cache')
                .expect('Connection', 'keep-alive')
                .end((err, res) => {
                if (err)
                    return done(err);
                // Verificar se a conexão foi estabelecida
                const stats = sseService.getConnectionStats();
                expect(stats.totalConnections).toBe(1);
                expect(stats.activeUsers).toBe(1);
                done();
            });
        });
        it('should reject SSE connection without token', () => {
            return request(app.getHttpServer())
                .get('/v1/notificacao/sse')
                .expect(403);
        });
        it('should reject SSE connection with invalid token', () => {
            return request(app.getHttpServer())
                .get('/v1/notificacao/sse?token=invalid-token')
                .expect(403);
        });
        it('should get SSE connection statistics', () => {
            return request(app.getHttpServer())
                .get('/v1/notificacao/sse/stats')
                .set('Authorization', `Bearer ${jwtToken}`)
                .expect(200)
                .expect((res) => {
                expect(res.body).toHaveProperty('totalConnections');
                expect(res.body).toHaveProperty('activeUsers');
                expect(res.body).toHaveProperty('connectionsPerUser');
                expect(res.body).toHaveProperty('uptime');
            });
        });
        it('should check user SSE connection status', () => {
            return request(app.getHttpServer())
                .get(`/v1/notificacao/sse/status/${testUser.id}`)
                .set('Authorization', `Bearer ${jwtToken}`)
                .expect(200)
                .expect((res) => {
                expect(res.body).toHaveProperty('isConnected');
                expect(res.body).toHaveProperty('connectionCount');
                expect(res.body).toHaveProperty('userId', testUser.id);
            });
        });
    });
    describe('Real-time Notification Broadcasting', () => {
        let sseConnection;
        beforeEach((done) => {
            // Estabelecer conexão SSE para testes
            sseConnection = request(app.getHttpServer())
                .get(`/v1/notificacao/sse?token=${jwtToken}`)
                .buffer(false)
                .parse((res, callback) => {
                res.on('data', (chunk) => {
                    const data = chunk.toString();
                    if (data.includes('data:')) {
                        try {
                            const jsonData = JSON.parse(data.split('data: ')[1]);
                            sseConnection.emit('notification', jsonData);
                        }
                        catch (e) {
                            // Ignorar dados que não são JSON (como heartbeat)
                        }
                    }
                });
                callback(null, res);
            });
            setTimeout(done, 100); // Aguardar estabelecimento da conexão
        });
        afterEach(() => {
            if (sseConnection) {
                sseConnection.abort();
            }
        });
        it('should receive notification via SSE when created', (done) => {
            const notificationData = {
                tipo: 'info',
                titulo: 'Teste SSE',
                conteudo: 'Notificação de teste via SSE',
                destinatario_id: testUser.id,
            };
            sseConnection.on('notification', (data) => {
                expect(data.type).toBe('notification');
                expect(data.data.titulo).toBe(notificationData.titulo);
                expect(data.data.conteudo).toBe(notificationData.conteudo);
                expect(data.data.destinatario_id).toBe(testUser.id);
                done();
            });
            // Criar notificação que deve ser enviada via SSE
            setTimeout(async () => {
                await notificacaoService.criarEBroadcast(notificationData.destinatario_id, notificationData.tipo, notificationData.titulo, notificationData.conteudo);
            }, 50);
        });
        it('should receive heartbeat events', (done) => {
            let heartbeatReceived = false;
            sseConnection.on('data', (chunk) => {
                const data = chunk.toString();
                if (data.includes('event: heartbeat')) {
                    heartbeatReceived = true;
                    expect(data).toContain('event: heartbeat');
                    expect(data).toContain('data: {"timestamp"');
                    done();
                }
            });
            // Aguardar heartbeat (configurado para 30s, mas pode ser forçado)
            setTimeout(() => {
                if (!heartbeatReceived) {
                    done(new Error('Heartbeat não recebido'));
                }
            }, 5000);
        });
        it('should handle multiple notifications in sequence', (done) => {
            const notifications = [
                { titulo: 'Notificação 1', conteudo: 'Conteúdo 1' },
                { titulo: 'Notificação 2', conteudo: 'Conteúdo 2' },
                { titulo: 'Notificação 3', conteudo: 'Conteúdo 3' },
            ];
            let receivedCount = 0;
            const receivedNotifications = [];
            sseConnection.on('notification', (data) => {
                receivedNotifications.push(data.data);
                receivedCount++;
                if (receivedCount === notifications.length) {
                    expect(receivedNotifications).toHaveLength(3);
                    expect(receivedNotifications[0].titulo).toBe('Notificação 1');
                    expect(receivedNotifications[1].titulo).toBe('Notificação 2');
                    expect(receivedNotifications[2].titulo).toBe('Notificação 3');
                    done();
                }
            });
            // Enviar múltiplas notificações
            setTimeout(async () => {
                for (const notification of notifications) {
                    await notificacaoService.criarEBroadcast(testUser.id, 'info', notification.titulo, notification.conteudo);
                    await new Promise(resolve => setTimeout(resolve, 10)); // Pequeno delay
                }
            }, 50);
        });
    });
    describe('Notification API Integration with SSE', () => {
        it('should create notification and broadcast via SSE', async () => {
            const notificationData = {
                tipo: 'success',
                titulo: 'Benefício Aprovado',
                conteudo: 'Seu benefício foi aprovado com sucesso',
                destinatario_id: testUser.id,
            };
            // Criar notificação via API
            const response = await request(app.getHttpServer())
                .post('/v1/notificacao')
                .set('Authorization', `Bearer ${jwtToken}`)
                .send(notificationData)
                .expect(201);
            expect(response.body.id).toBeDefined();
            expect(response.body.titulo).toBe(notificationData.titulo);
            // Verificar se foi salva no banco
            const savedNotification = await notificacaoRepository.findOne({
                where: { id: response.body.id },
            });
            expect(savedNotification).toBeDefined();
            expect(savedNotification.titulo).toBe(notificationData.titulo);
        });
        it('should mark notification as read and update SSE stats', async () => {
            // Criar notificação
            const notification = await notificacaoService.criar(testUser.id, 'info', 'Teste Leitura', 'Conteúdo de teste');
            // Marcar como lida
            await request(app.getHttpServer())
                .put(`/v1/notificacao/${notification.id}/ler`)
                .set('Authorization', `Bearer ${jwtToken}`)
                .expect(200);
            // Verificar se foi marcada como lida
            const updatedNotification = await notificacaoRepository.findOne({
                where: { id: notification.id },
            });
            expect(updatedNotification.lida).toBe(true);
            expect(updatedNotification.data_leitura).toBeDefined();
        });
        it('should get unread notification count', async () => {
            // Criar algumas notificações
            await notificacaoService.criar(testUser.id, 'info', 'Teste 1', 'Conteúdo 1');
            await notificacaoService.criar(testUser.id, 'info', 'Teste 2', 'Conteúdo 2');
            await notificacaoService.criar(testUser.id, 'info', 'Teste 3', 'Conteúdo 3');
            const response = await request(app.getHttpServer())
                .get('/v1/notificacao/contador/nao-lidas')
                .set('Authorization', `Bearer ${jwtToken}`)
                .expect(200);
            expect(response.body.count).toBe(3);
        });
        it('should list user notifications with pagination', async () => {
            // Criar várias notificações
            for (let i = 1; i <= 15; i++) {
                await notificacaoService.criar(testUser.id, 'info', `Notificação ${i}`, `Conteúdo da notificação ${i}`);
            }
            const response = await request(app.getHttpServer())
                .get('/v1/notificacao/minhas?page=1&limit=10')
                .set('Authorization', `Bearer ${jwtToken}`)
                .expect(200);
            expect(response.body.data).toHaveLength(10);
            expect(response.body.total).toBe(15);
            expect(response.body.page).toBe(1);
            expect(response.body.totalPages).toBe(2);
        });
    });
    describe('SSE Service Integration', () => {
        it('should handle multiple connections from same user', async () => {
            // Simular múltiplas conexões do mesmo usuário
            const connection1 = sseService.createConnection(testUser.id, {});
            const connection2 = sseService.createConnection(testUser.id, {});
            const connection3 = sseService.createConnection(testUser.id, {});
            const stats = sseService.getConnectionStats();
            expect(stats.totalConnections).toBe(3);
            expect(stats.activeUsers).toBe(1);
            expect(stats.connectionsPerUser[testUser.id]).toBe(3);
            // Remover uma conexão
            sseService.removeConnection(connection1.id);
            const updatedStats = sseService.getConnectionStats();
            expect(updatedStats.totalConnections).toBe(2);
            expect(updatedStats.connectionsPerUser[testUser.id]).toBe(2);
        });
        it('should enforce connection limits per user', () => {
            // Tentar criar mais conexões que o limite
            const connections = [];
            for (let i = 0; i < 7; i++) { // Limite é 5
                try {
                    const connection = sseService.createConnection(testUser.id, {});
                    connections.push(connection);
                }
                catch (error) {
                    expect(error.message).toContain('limite máximo');
                }
            }
            expect(connections.length).toBeLessThanOrEqual(5);
        });
        it('should broadcast to all connected users', async () => {
            // Criar usuários adicionais
            const user2 = userRepository.create({
                id: 'user-2',
                email: 'user2@example.com',
                nome: 'User 2',
                roles: ['user'],
            });
            await userRepository.save(user2);
            // Criar conexões para ambos usuários
            sseService.createConnection(testUser.id, {});
            sseService.createConnection(user2.id, {});
            // Broadcast geral
            const notification = {
                type: 'announcement',
                data: {
                    titulo: 'Anúncio Geral',
                    conteudo: 'Mensagem para todos os usuários',
                },
            };
            const result = sseService.broadcastToAll(notification);
            expect(result.success).toBe(true);
            expect(result.sentCount).toBe(2);
        });
        it('should clean up inactive connections', async () => {
            // Criar conexão
            const connection = sseService.createConnection(testUser.id, {});
            expect(sseService.getConnectionStats().totalConnections).toBe(1);
            // Simular conexão inativa (timeout)
            connection.lastActivity = Date.now() - 400000; // 400 segundos atrás
            // Executar limpeza
            sseService.cleanupInactiveConnections();
            expect(sseService.getConnectionStats().totalConnections).toBe(0);
        });
    });
    describe('Error Handling', () => {
        it('should handle database errors gracefully', async () => {
            // Simular erro no banco
            jest.spyOn(notificacaoRepository, 'save').mockRejectedValueOnce(new Error('Database connection failed'));
            try {
                await notificacaoService.criar(testUser.id, 'error', 'Teste Erro', 'Conteúdo de teste');
            }
            catch (error) {
                expect(error.message).toContain('Database connection failed');
            }
        });
        it('should handle SSE connection errors', () => {
            const mockResponse = {
                writeHead: jest.fn(),
                write: jest.fn().mockImplementation(() => {
                    throw new Error('Connection lost');
                }),
                end: jest.fn(),
                on: jest.fn(),
            };
            expect(() => {
                sseService.createConnection(testUser.id, mockResponse);
            }).not.toThrow();
        });
        it('should handle invalid notification data', async () => {
            const invalidData = {
                tipo: '', // Tipo vazio
                titulo: '', // Título vazio
                conteudo: 'Conteúdo válido',
                destinatario_id: 'invalid-user-id',
            };
            await request(app.getHttpServer())
                .post('/v1/notificacao')
                .set('Authorization', `Bearer ${jwtToken}`)
                .send(invalidData)
                .expect(400);
        });
    });
    describe('Performance Tests', () => {
        it('should handle high volume of notifications', async () => {
            const startTime = Date.now();
            const notificationCount = 100;
            const promises = [];
            for (let i = 0; i < notificationCount; i++) {
                promises.push(notificacaoService.criar(testUser.id, 'info', `Notificação ${i}`, `Conteúdo ${i}`));
            }
            await Promise.all(promises);
            const endTime = Date.now();
            const duration = endTime - startTime;
            expect(duration).toBeLessThan(5000); // Deve completar em menos de 5 segundos
            const count = await notificacaoRepository.count({
                where: { destinatario_id: testUser.id },
            });
            expect(count).toBe(notificationCount);
        });
        it('should handle multiple concurrent SSE connections', () => {
            const connectionCount = 50;
            const connections = [];
            const startTime = Date.now();
            for (let i = 0; i < connectionCount; i++) {
                const mockResponse = {
                    writeHead: jest.fn(),
                    write: jest.fn(),
                    end: jest.fn(),
                    on: jest.fn(),
                };
                const connection = sseService.createConnection(`user-${i}`, mockResponse);
                connections.push(connection);
            }
            const endTime = Date.now();
            const duration = endTime - startTime;
            expect(duration).toBeLessThan(1000); // Deve completar em menos de 1 segundo
            expect(sseService.getConnectionStats().totalConnections).toBe(connectionCount);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,