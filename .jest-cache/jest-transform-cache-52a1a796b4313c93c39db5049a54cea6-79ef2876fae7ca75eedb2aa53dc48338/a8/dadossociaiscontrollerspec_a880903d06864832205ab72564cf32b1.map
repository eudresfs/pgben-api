{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\dados-sociais.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\dados-sociais.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { DadosSociaisController } from './dados-sociais.controller';\nimport { DadosSociaisService } from '../services/dados-sociais.service';\nimport { CreateDadosSociaisDto } from '../dto/create-dados-sociais.dto';\nimport { UpdateDadosSociaisDto } from '../dto/update-dados-sociais.dto';\nimport { DadosSociais } from '../entities/dados-sociais.entity';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport {\n  EscolaridadeEnum,\n  PublicoPrioritarioEnum,\n  SituacaoTrabalhoEnum,\n  TipoBpcEnum,\n} from '../../../shared/enums';\n\ndescribe('DadosSociaisController', () => {\n  let controller: DadosSociaisController;\n  let service: DadosSociaisService;\n\n  const mockDadosSociais: DadosSociais = {\n    id: '1',\n    cidadao_id: 'cidadao-1',\n    escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n    publico_prioritario: PublicoPrioritarioEnum.PESSOA_IDOSA,\n    renda: 1500.0,\n    ocupacao: 'Vendedor',\n    recebe_pbf: true,\n    valor_pbf: 400.0,\n    recebe_bpc: false,\n    tipo_bpc: null,\n    valor_bpc: null,\n    curso_profissionalizante: 'Curso de Informática',\n    interesse_curso_profissionalizante: true,\n    situacao_trabalho: SituacaoTrabalhoEnum.EMPREGADO,\n    area_trabalho: 'Vendas',\n    familiar_apto_trabalho: true,\n    area_interesse_familiar: 'Administração',\n    observacoes: 'Observações de teste',\n    created_at: new Date(),\n    updated_at: new Date(),\n    deleted_at: null,\n    cidadao: null,\n  };\n\n  const mockDadosSociaisService = {\n    create: jest.fn(),\n    findByCidadaoId: jest.fn(),\n    update: jest.fn(),\n    remove: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [DadosSociaisController],\n      providers: [\n        {\n          provide: DadosSociaisService,\n          useValue: mockDadosSociaisService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<DadosSociaisController>(DadosSociaisController);\n    service = module.get<DadosSociaisService>(DadosSociaisService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('create', () => {\n    const createDto: CreateDadosSociaisDto = {\n      escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n      publico_prioritario: PublicoPrioritarioEnum.PESSOA_IDOSA,\n      renda: 1500.0,\n      ocupacao: 'Vendedor',\n      recebe_pbf: true,\n      valor_pbf: 400.0,\n      recebe_bpc: false,\n      curso_profissionalizante: 'Curso de Informática',\n      interesse_curso_profissionalizante: true,\n      situacao_trabalho: SituacaoTrabalhoEnum.EMPREGADO,\n      area_trabalho: 'Vendas',\n      familiar_apto_trabalho: true,\n      area_interesse_familiar: 'Administração',\n      observacoes: 'Observações de teste',\n    };\n\n    it('should create dados sociais successfully', async () => {\n      mockDadosSociaisService.create.mockResolvedValue(mockDadosSociais);\n\n      const result = await controller.create('cidadao-1', createDto);\n\n      expect(service.create).toHaveBeenCalledWith('cidadao-1', createDto);\n      expect(result).toEqual(mockDadosSociais);\n    });\n\n    it('should throw NotFoundException when cidadao not found', async () => {\n      mockDadosSociaisService.create.mockRejectedValue(\n        new NotFoundException('Cidadão com ID cidadao-1 não encontrado'),\n      );\n\n      await expect(controller.create('cidadao-1', createDto)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('should throw ConflictException when dados sociais already exist', async () => {\n      mockDadosSociaisService.create.mockRejectedValue(\n        new ConflictException(\n          'Cidadão cidadao-1 já possui dados sociais cadastrados',\n        ),\n      );\n\n      await expect(controller.create('cidadao-1', createDto)).rejects.toThrow(\n        ConflictException,\n      );\n    });\n  });\n\n  describe('findByCidadaoId', () => {\n    it('should return dados sociais for valid cidadao', async () => {\n      mockDadosSociaisService.findByCidadaoId.mockResolvedValue(\n        mockDadosSociais,\n      );\n\n      const result = await controller.findByCidadaoId('cidadao-1');\n\n      expect(service.findByCidadaoId).toHaveBeenCalledWith('cidadao-1');\n      expect(result).toEqual(mockDadosSociais);\n    });\n\n    it('should throw NotFoundException when cidadao not found', async () => {\n      mockDadosSociaisService.findByCidadaoId.mockRejectedValue(\n        new NotFoundException('Cidadão com ID cidadao-1 não encontrado'),\n      );\n\n      await expect(controller.findByCidadaoId('cidadao-1')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('should throw NotFoundException when dados sociais not found', async () => {\n      mockDadosSociaisService.findByCidadaoId.mockRejectedValue(\n        new NotFoundException(\n          'Dados sociais não encontrados para o cidadão cidadao-1',\n        ),\n      );\n\n      await expect(controller.findByCidadaoId('cidadao-1')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('update', () => {\n    const updateDto: UpdateDadosSociaisDto = {\n      renda: 1800.0,\n      ocupacao: 'Gerente de Vendas',\n      observacoes: 'Observações atualizadas',\n    };\n\n    it('should update dados sociais successfully', async () => {\n      const updatedDadosSociais = {\n        ...mockDadosSociais,\n        ...updateDto,\n      };\n      mockDadosSociaisService.update.mockResolvedValue(updatedDadosSociais);\n\n      const result = await controller.update('cidadao-1', updateDto);\n\n      expect(service.update).toHaveBeenCalledWith('cidadao-1', updateDto);\n      expect(result).toEqual(updatedDadosSociais);\n    });\n\n    it('should throw NotFoundException when dados sociais not found', async () => {\n      mockDadosSociaisService.update.mockRejectedValue(\n        new NotFoundException(\n          'Dados sociais não encontrados para o cidadão cidadao-1',\n        ),\n      );\n\n      await expect(controller.update('cidadao-1', updateDto)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('remove', () => {\n    it('should remove dados sociais successfully', async () => {\n      mockDadosSociaisService.remove.mockResolvedValue(undefined);\n\n      await controller.remove('cidadao-1');\n\n      expect(service.remove).toHaveBeenCalledWith('cidadao-1');\n    });\n\n    it('should throw NotFoundException when dados sociais not found', async () => {\n      mockDadosSociaisService.remove.mockRejectedValue(\n        new NotFoundException(\n          'Dados sociais não encontrados para o cidadão cidadao-1',\n        ),\n      );\n\n      await expect(controller.remove('cidadao-1')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('validation', () => {\n    it('should validate UUID format for cidadaoId parameter', () => {\n      // Este teste seria implementado com validação de pipe UUID\n      // Por enquanto, apenas verificamos se o controller está definido\n      expect(controller).toBeDefined();\n    });\n\n    it('should validate CreateDadosSociaisDto', () => {\n      // Este teste seria implementado com validação de DTO\n      // Por enquanto, apenas verificamos se o controller está definido\n      expect(controller).toBeDefined();\n    });\n\n    it('should validate UpdateDadosSociaisDto', () => {\n      // Este teste seria implementado com validação de DTO\n      // Por enquanto, apenas verificamos se o controller está definido\n      expect(controller).toBeDefined();\n    });\n  });\n\n  describe('authorization', () => {\n    it('should require authentication for all endpoints', () => {\n      // Este teste seria implementado com verificação de guards\n      // Por enquanto, apenas verificamos se o controller está definido\n      expect(controller).toBeDefined();\n    });\n\n    it('should require proper permissions for CRUD operations', () => {\n      // Este teste seria implementado com verificação de permissions\n      // Por enquanto, apenas verificamos se o controller está definido\n      expect(controller).toBeDefined();\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle service errors gracefully', async () => {\n      mockDadosSociaisService.findByCidadaoId.mockRejectedValue(\n        new Error('Database connection error'),\n      );\n\n      await expect(controller.findByCidadaoId('cidadao-1')).rejects.toThrow(\n        Error,\n      );\n    });\n\n    it('should propagate validation errors', async () => {\n      const createDto = {} as CreateDadosSociaisDto; // DTO inválido\n\n      // Este teste seria mais completo com validação real\n      expect(controller).toBeDefined();\n    });\n  });\n});\n"],"version":3}