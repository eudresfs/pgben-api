78315ef6686d461abb491958bd95d61d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const logger_service_1 = require("../../shared/logger/logger.service");
const request_context_dto_1 = require("../../shared/request-context/request-context.dto");
const auth_login_input_dto_1 = require("../dtos/auth-login-input.dto");
const auth_register_input_dto_1 = require("../dtos/auth-register-input.dto");
const auth_service_1 = require("../services/auth.service");
const auth_controller_1 = require("./auth.controller");
describe('AuthController', () => {
    let moduleRef;
    let authController;
    const mockedAuthService = {
        register: jest.fn(),
        login: jest.fn(),
        refreshToken: jest.fn(),
    };
    const mockedLogger = { setContext: jest.fn(), log: jest.fn() };
    beforeEach(async () => {
        moduleRef = await testing_1.Test.createTestingModule({
            controllers: [auth_controller_1.AuthController],
            providers: [
                { provide: auth_service_1.AuthService, useValue: mockedAuthService },
                { provide: logger_service_1.AppLogger, useValue: mockedLogger },
            ],
        }).compile();
        authController = moduleRef.get(auth_controller_1.AuthController);
    });
    it('should be defined', () => {
        expect(authController).toBeDefined();
    });
    const ctx = new request_context_dto_1.RequestContext();
    describe('registerLocal', () => {
        it('should register new user', async () => {
            const registerInputDto = new auth_register_input_dto_1.RegisterInput();
            registerInputDto.name = 'John Doe';
            registerInputDto.username = 'john@example.com';
            registerInputDto.password = '123123';
            jest
                .spyOn(mockedAuthService, 'register')
                .mockImplementation(async () => null);
            expect(await authController.registerLocal(ctx, registerInputDto)).toEqual({
                data: null,
                meta: {},
            });
        });
    });
    describe('login', () => {
        it('should login user', async () => {
            const loginInputDto = new auth_login_input_dto_1.LoginInput();
            loginInputDto.username = 'john@example.com';
            loginInputDto.password = '123123';
            jest.spyOn(mockedAuthService, 'login').mockImplementation(() => null);
            expect(await authController.login(ctx, loginInputDto)).toEqual({
                data: null,
                meta: {},
            });
        });
    });
    describe('refreshToken', () => {
        let refreshTokenInputDto;
        let authToken;
        beforeEach(() => {
            refreshTokenInputDto = {
                refreshToken: 'refresh_token',
            };
            authToken = {
                accessToken: 'new_access_token',
                refreshToken: 'new_refresh_token',
            };
            jest
                .spyOn(mockedAuthService, 'refreshToken')
                .mockImplementation(async () => authToken);
        });
        it('should generate refresh token', async () => {
            const response = await authController.refreshToken(ctx, refreshTokenInputDto);
            expect(mockedAuthService.refreshToken).toBeCalledWith(ctx);
            expect(response.data).toEqual(authToken);
        });
        afterEach(() => {
            jest.resetAllMocks();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,