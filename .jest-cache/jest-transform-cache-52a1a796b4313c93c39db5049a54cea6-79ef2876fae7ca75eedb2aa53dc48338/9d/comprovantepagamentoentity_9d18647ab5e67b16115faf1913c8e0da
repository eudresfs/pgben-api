3051719b081287c509e36590424996be
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComprovantePagamento = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const pagamento_entity_1 = require("./pagamento.entity");
const usuario_entity_1 = require("./usuario.entity");
/**
 * Entidade que representa um comprovante de pagamento no sistema.
 *
 * Esta entidade armazena informações sobre documentos comprobatórios
 * anexados para comprovar a realização de pagamentos.
 *
 * @author Equipe PGBen
 */
let ComprovantePagamento = class ComprovantePagamento {
    /**
     * Identificador único do comprovante
     */
    id;
    /**
     * Referência ao pagamento relacionado a este comprovante
     */
    pagamento_id;
    /**
     * Tipo de documento (ex: "comprovante_transferencia", "recibo", etc.)
     */
    tipo_documento;
    /**
     * Nome original do arquivo enviado
     */
    nome_arquivo;
    /**
     * Caminho/identificador do arquivo no sistema de armazenamento
     */
    caminho_arquivo;
    /**
     * Tamanho do arquivo em bytes
     */
    tamanho;
    /**
     * Tipo MIME do arquivo
     */
    mime_type;
    /**
     * Data de upload do comprovante
     */
    data_upload;
    /**
     * Referência ao usuário que fez o upload do comprovante
     */
    uploaded_por;
    /**
     * Data de criação do registro
     */
    created_at;
    /**
     * Data da última atualização do registro
     */
    updated_at;
    /**
     * Relacionamento com a entidade Pagamento
     */
    pagamento;
    /**
     * Relacionamento com a entidade Usuario
     */
    responsavel_upload;
};
exports.ComprovantePagamento = ComprovantePagamento;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], ComprovantePagamento.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'pagamento_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do pagamento é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do pagamento deve ser um UUID válido' }),
    __metadata("design:type", String)
], ComprovantePagamento.prototype, "pagamento_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'tipo_documento' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de documento é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Tipo de documento deve ser uma string' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Tipo de documento deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], ComprovantePagamento.prototype, "tipo_documento", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'nome_arquivo' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome do arquivo é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Nome do arquivo deve ser uma string' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Nome do arquivo deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], ComprovantePagamento.prototype, "nome_arquivo", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'caminho_arquivo' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Caminho do arquivo é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Caminho do arquivo deve ser uma string' }),
    (0, class_validator_1.MaxLength)(500, { message: 'Caminho do arquivo deve ter no máximo 500 caracteres' }),
    __metadata("design:type", String)
], ComprovantePagamento.prototype, "caminho_arquivo", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tamanho do arquivo é obrigatório' }),
    (0, class_validator_1.IsNumber)({}, { message: 'Tamanho deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Tamanho deve ser maior que zero' }),
    __metadata("design:type", Number)
], ComprovantePagamento.prototype, "tamanho", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'mime_type' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo MIME é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Tipo MIME deve ser uma string' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Tipo MIME deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], ComprovantePagamento.prototype, "mime_type", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'data_upload', type: 'timestamp' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Data de upload é obrigatória' }),
    __metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], ComprovantePagamento.prototype, "data_upload", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'uploaded_por' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do usuário responsável pelo upload é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário deve ser um UUID válido' }),
    __metadata("design:type", String)
], ComprovantePagamento.prototype, "uploaded_por", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], ComprovantePagamento.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], ComprovantePagamento.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => pagamento_entity_1.Pagamento, pagamento => pagamento.id),
    (0, typeorm_1.JoinColumn)({ name: 'pagamento_id' }),
    __metadata("design:type", typeof (_d = typeof pagamento_entity_1.Pagamento !== "undefined" && pagamento_entity_1.Pagamento) === "function" ? _d : Object)
], ComprovantePagamento.prototype, "pagamento", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, usuario => usuario.id),
    (0, typeorm_1.JoinColumn)({ name: 'uploaded_por' }),
    __metadata("design:type", typeof (_e = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _e : Object)
], ComprovantePagamento.prototype, "responsavel_upload", void 0);
exports.ComprovantePagamento = ComprovantePagamento = __decorate([
    (0, typeorm_1.Entity)('comprovante_pagamento')
], ComprovantePagamento);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,