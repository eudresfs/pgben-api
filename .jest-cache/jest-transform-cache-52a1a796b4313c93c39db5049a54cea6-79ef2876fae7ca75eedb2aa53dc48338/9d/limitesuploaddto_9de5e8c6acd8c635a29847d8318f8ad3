1b2b0aad5969657a6937d27d7d523cb8
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitesUploadDto = void 0;
const swagger_1 = require("@nestjs/swagger");
const class_validator_1 = require("class-validator");
/**
 * DTO para configuração de limites de upload de arquivos no sistema.
 */
class LimitesUploadDto {
    tamanho_maximo;
    formatos_permitidos;
    quantidade_maxima_arquivos;
    // Aliases para compatibilidade com o serviço
    /**
     * Alias para quantidade_maxima_arquivos - quantidade total de arquivos permitidos
     */
    get arquivos_maximo() {
        return this.quantidade_maxima_arquivos;
    }
    set arquivos_maximo(value) {
        this.quantidade_maxima_arquivos = value;
    }
    /**
     * Alias para formatos_permitidos - tipos de arquivos permitidos
     */
    get tipos_permitidos() {
        return this.formatos_permitidos;
    }
    set tipos_permitidos(value) {
        this.formatos_permitidos = value;
    }
    /**
     * Alias para quantidade_maxima_arquivos - máximo de arquivos por requisição
     */
    get max_por_requisicao() {
        return this.quantidade_maxima_arquivos;
    }
    set max_por_requisicao(value) {
        this.quantidade_maxima_arquivos = value;
    }
}
exports.LimitesUploadDto = LimitesUploadDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tamanho máximo de upload em bytes',
        example: 5242880, // 5MB
        minimum: 1024,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'O tamanho máximo é obrigatório' }),
    (0, class_validator_1.IsInt)({ message: 'O tamanho máximo deve ser um número inteiro' }),
    (0, class_validator_1.Min)(1024, { message: 'O tamanho máximo deve ser no mínimo 1024 bytes' }),
    __metadata("design:type", Number)
], LimitesUploadDto.prototype, "tamanho_maximo", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Lista de formatos permitidos para upload (extensões ou MIME types)',
        example: ['pdf', 'jpg', 'jpeg', 'png', 'docx'],
        type: [String],
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Os formatos permitidos são obrigatórios' }),
    (0, class_validator_1.IsArray)({ message: 'Os formatos permitidos devem estar em um array' }),
    (0, class_validator_1.IsString)({ each: true, message: 'Cada formato deve ser uma string' }),
    __metadata("design:type", Array)
], LimitesUploadDto.prototype, "formatos_permitidos", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Quantidade máxima de arquivos por operação de upload',
        example: 10,
        minimum: 1,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'A quantidade máxima de arquivos é obrigatória' }),
    (0, class_validator_1.IsInt)({
        message: 'A quantidade máxima de arquivos deve ser um número inteiro',
    }),
    (0, class_validator_1.Min)(1, { message: 'A quantidade máxima de arquivos deve ser no mínimo 1' }),
    __metadata("design:type", Number)
], LimitesUploadDto.prototype, "quantidade_maxima_arquivos", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNvbmZpZ3VyYWNhb1xcZHRvc1xcbGltaXRlc1xcbGltaXRlcy11cGxvYWQuZHRvLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZDQUE4QztBQUM5QyxxREFBNEU7QUFFNUU7O0dBRUc7QUFDSCxNQUFhLGdCQUFnQjtJQVMzQixjQUFjLENBQVM7SUFXdkIsbUJBQW1CLENBQVc7SUFZOUIsMEJBQTBCLENBQVM7SUFFbkMsNkNBQTZDO0lBRTdDOztPQUVHO0lBQ0gsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLGVBQWUsQ0FBQyxLQUFhO1FBQy9CLElBQUksQ0FBQywwQkFBMEIsR0FBRyxLQUFLLENBQUM7SUFDMUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksZ0JBQWdCLENBQUMsS0FBZTtRQUNsQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksa0JBQWtCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLGtCQUFrQixDQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLEtBQUssQ0FBQztJQUMxQyxDQUFDO0NBQ0Y7QUFwRUQsNENBb0VDO0FBM0RDO0lBUkMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUFFLG1DQUFtQztRQUNoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU07UUFDeEIsT0FBTyxFQUFFLElBQUk7S0FDZCxDQUFDO0lBQ0QsSUFBQSw0QkFBVSxFQUFDLEVBQUUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLENBQUM7SUFDekQsSUFBQSx1QkFBSyxFQUFDLEVBQUUsT0FBTyxFQUFFLDZDQUE2QyxFQUFFLENBQUM7SUFDakUsSUFBQSxxQkFBRyxFQUFDLElBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxnREFBZ0QsRUFBRSxDQUFDOzt3REFDbEQ7QUFXdkI7SUFUQyxJQUFBLHFCQUFXLEVBQUM7UUFDWCxXQUFXLEVBQ1Qsb0VBQW9FO1FBQ3RFLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUM7UUFDOUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDO0tBQ2YsQ0FBQztJQUNELElBQUEsNEJBQVUsRUFBQyxFQUFFLE9BQU8sRUFBRSx5Q0FBeUMsRUFBRSxDQUFDO0lBQ2xFLElBQUEseUJBQU8sRUFBQyxFQUFFLE9BQU8sRUFBRSxnREFBZ0QsRUFBRSxDQUFDO0lBQ3RFLElBQUEsMEJBQVEsRUFBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLENBQUM7OzZEQUN4QztBQVk5QjtJQVZDLElBQUEscUJBQVcsRUFBQztRQUNYLFdBQVcsRUFBRSxzREFBc0Q7UUFDbkUsT0FBTyxFQUFFLEVBQUU7UUFDWCxPQUFPLEVBQUUsQ0FBQztLQUNYLENBQUM7SUFDRCxJQUFBLDRCQUFVLEVBQUMsRUFBRSxPQUFPLEVBQUUsK0NBQStDLEVBQUUsQ0FBQztJQUN4RSxJQUFBLHVCQUFLLEVBQUM7UUFDTCxPQUFPLEVBQUUsNERBQTREO0tBQ3RFLENBQUM7SUFDRCxJQUFBLHFCQUFHLEVBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLHNEQUFzRCxFQUFFLENBQUM7O29FQUN6QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcY29uZmlndXJhY2FvXFxkdG9zXFxsaW1pdGVzXFxsaW1pdGVzLXVwbG9hZC5kdG8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpUHJvcGVydHkgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xuaW1wb3J0IHsgSXNBcnJheSwgSXNJbnQsIElzTm90RW1wdHksIElzU3RyaW5nLCBNaW4gfSBmcm9tICdjbGFzcy12YWxpZGF0b3InO1xuXG4vKipcbiAqIERUTyBwYXJhIGNvbmZpZ3VyYcOnw6NvIGRlIGxpbWl0ZXMgZGUgdXBsb2FkIGRlIGFycXVpdm9zIG5vIHNpc3RlbWEuXG4gKi9cbmV4cG9ydCBjbGFzcyBMaW1pdGVzVXBsb2FkRHRvIHtcbiAgQEFwaVByb3BlcnR5KHtcbiAgICBkZXNjcmlwdGlvbjogJ1RhbWFuaG8gbcOheGltbyBkZSB1cGxvYWQgZW0gYnl0ZXMnLFxuICAgIGV4YW1wbGU6IDUyNDI4ODAsIC8vIDVNQlxuICAgIG1pbmltdW06IDEwMjQsXG4gIH0pXG4gIEBJc05vdEVtcHR5KHsgbWVzc2FnZTogJ08gdGFtYW5obyBtw6F4aW1vIMOpIG9icmlnYXTDs3JpbycgfSlcbiAgQElzSW50KHsgbWVzc2FnZTogJ08gdGFtYW5obyBtw6F4aW1vIGRldmUgc2VyIHVtIG7Dum1lcm8gaW50ZWlybycgfSlcbiAgQE1pbigxMDI0LCB7IG1lc3NhZ2U6ICdPIHRhbWFuaG8gbcOheGltbyBkZXZlIHNlciBubyBtw61uaW1vIDEwMjQgYnl0ZXMnIH0pXG4gIHRhbWFuaG9fbWF4aW1vOiBudW1iZXI7XG5cbiAgQEFwaVByb3BlcnR5KHtcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgICdMaXN0YSBkZSBmb3JtYXRvcyBwZXJtaXRpZG9zIHBhcmEgdXBsb2FkIChleHRlbnPDtWVzIG91IE1JTUUgdHlwZXMpJyxcbiAgICBleGFtcGxlOiBbJ3BkZicsICdqcGcnLCAnanBlZycsICdwbmcnLCAnZG9jeCddLFxuICAgIHR5cGU6IFtTdHJpbmddLFxuICB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdPcyBmb3JtYXRvcyBwZXJtaXRpZG9zIHPDo28gb2JyaWdhdMOzcmlvcycgfSlcbiAgQElzQXJyYXkoeyBtZXNzYWdlOiAnT3MgZm9ybWF0b3MgcGVybWl0aWRvcyBkZXZlbSBlc3RhciBlbSB1bSBhcnJheScgfSlcbiAgQElzU3RyaW5nKHsgZWFjaDogdHJ1ZSwgbWVzc2FnZTogJ0NhZGEgZm9ybWF0byBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBmb3JtYXRvc19wZXJtaXRpZG9zOiBzdHJpbmdbXTtcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnUXVhbnRpZGFkZSBtw6F4aW1hIGRlIGFycXVpdm9zIHBvciBvcGVyYcOnw6NvIGRlIHVwbG9hZCcsXG4gICAgZXhhbXBsZTogMTAsXG4gICAgbWluaW11bTogMSxcbiAgfSlcbiAgQElzTm90RW1wdHkoeyBtZXNzYWdlOiAnQSBxdWFudGlkYWRlIG3DoXhpbWEgZGUgYXJxdWl2b3Mgw6kgb2JyaWdhdMOzcmlhJyB9KVxuICBASXNJbnQoe1xuICAgIG1lc3NhZ2U6ICdBIHF1YW50aWRhZGUgbcOheGltYSBkZSBhcnF1aXZvcyBkZXZlIHNlciB1bSBuw7ptZXJvIGludGVpcm8nLFxuICB9KVxuICBATWluKDEsIHsgbWVzc2FnZTogJ0EgcXVhbnRpZGFkZSBtw6F4aW1hIGRlIGFycXVpdm9zIGRldmUgc2VyIG5vIG3DrW5pbW8gMScgfSlcbiAgcXVhbnRpZGFkZV9tYXhpbWFfYXJxdWl2b3M6IG51bWJlcjtcblxuICAvLyBBbGlhc2VzIHBhcmEgY29tcGF0aWJpbGlkYWRlIGNvbSBvIHNlcnZpw6dvXG5cbiAgLyoqXG4gICAqIEFsaWFzIHBhcmEgcXVhbnRpZGFkZV9tYXhpbWFfYXJxdWl2b3MgLSBxdWFudGlkYWRlIHRvdGFsIGRlIGFycXVpdm9zIHBlcm1pdGlkb3NcbiAgICovXG4gIGdldCBhcnF1aXZvc19tYXhpbW8oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5xdWFudGlkYWRlX21heGltYV9hcnF1aXZvcztcbiAgfVxuXG4gIHNldCBhcnF1aXZvc19tYXhpbW8odmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMucXVhbnRpZGFkZV9tYXhpbWFfYXJxdWl2b3MgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGlhcyBwYXJhIGZvcm1hdG9zX3Blcm1pdGlkb3MgLSB0aXBvcyBkZSBhcnF1aXZvcyBwZXJtaXRpZG9zXG4gICAqL1xuICBnZXQgdGlwb3NfcGVybWl0aWRvcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0b3NfcGVybWl0aWRvcztcbiAgfVxuXG4gIHNldCB0aXBvc19wZXJtaXRpZG9zKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuZm9ybWF0b3NfcGVybWl0aWRvcyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsaWFzIHBhcmEgcXVhbnRpZGFkZV9tYXhpbWFfYXJxdWl2b3MgLSBtw6F4aW1vIGRlIGFycXVpdm9zIHBvciByZXF1aXNpw6fDo29cbiAgICovXG4gIGdldCBtYXhfcG9yX3JlcXVpc2ljYW8oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5xdWFudGlkYWRlX21heGltYV9hcnF1aXZvcztcbiAgfVxuXG4gIHNldCBtYXhfcG9yX3JlcXVpc2ljYW8odmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMucXVhbnRpZGFkZV9tYXhpbWFfYXJxdWl2b3MgPSB2YWx1ZTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9