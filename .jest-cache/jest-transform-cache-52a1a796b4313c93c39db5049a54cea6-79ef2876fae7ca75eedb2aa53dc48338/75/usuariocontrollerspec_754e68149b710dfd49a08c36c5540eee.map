{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\controllers\\usuario.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\controllers\\usuario.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { UsuarioController } from './usuario.controller';\nimport { UsuarioService } from '../services/usuario.service';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { CreateUsuarioDto } from '../dto/create-usuario.dto';\nimport { UpdateUsuarioDto } from '../dto/update-usuario.dto';\nimport { UpdateStatusUsuarioDto } from '../dto/update-status-usuario.dto';\nimport { UpdateSenhaDto } from '../dto/update-senha.dto';\nimport { Usuario } from '../entities/usuario.entity';\nimport { TipoUnidade, StatusUnidade } from '../../unidade/entities/unidade.entity';\n\n/**\n * Testes unitários para o UsuarioController\n * \n * Cobertura de testes:\n * - Listagem de usuários com filtros\n * - Busca por ID\n * - Perfil do usuário atual\n * - Criação de usuários\n * - Atualização de dados\n * - Atualização de status\n * - Atualização de senha\n * - Remoção de usuários\n */\ndescribe('UsuarioController', () => {\n  let controller: UsuarioController;\n  let service: jest.Mocked<UsuarioService>;\n\n  const mockUsuario: Usuario = {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    nome: 'João da Silva',\n    email: 'joao.silva@semtas.natal.gov.br',\n    cpf: '123.456.789-00',\n    telefone: '(84) 99999-9999',\n    matricula: '12345',\n    senhaHash: '$2b$12$hashedpassword',\n    role_id: 'ASSISTENTE_SOCIAL',\n    status: 'ativo',\n    primeiro_acesso: false,\n    unidadeId: 'unidade-123',\n    setorId: 'setor-123',\n    created_at: new Date(),\n    updated_at: new Date(),\n    // Relacionamentos obrigatórios\n    role: {\n      id: 'role-123',\n      nome: 'admin',\n      descricao: 'Administrador',\n      ativo: true,\n      usuarios: [],\n      created_at: new Date(),\n      updated_at: new Date()\n    },\n    unidade: {\n      id: 'unidade-123',\n      nome: 'Unidade Teste',\n      codigo: 'UN001',\n      sigla: 'UT',\n      tipo: TipoUnidade.CRAS,\n      endereco: 'Endereço Teste',\n      telefone: '(84) 99999-9999',\n      email: 'unidade@teste.com',\n      responsavel_matricula: '12345',\n      status: StatusUnidade.ATIVO,\n      usuarios: [],\n      setores: [],\n      created_at: new Date(),\n      updated_at: new Date(),\n      removed_at: null\n    },\n    setor: {\n      id: 'setor-123',\n      nome: 'Setor Teste',\n      descricao: 'Setor de Teste',\n      unidade_id: 'unidade-123',\n      unidade: {\n        id: 'unidade-123',\n        nome: 'Unidade Teste',\n        codigo: 'UN001',\n        sigla: 'UT',\n        tipo: TipoUnidade.CRAS,\n        endereco: 'Rua Teste, 123',\n        telefone: '(84) 99999-9999',\n        email: 'unidade@teste.com',\n        responsavel_matricula: '12345',\n        status: StatusUnidade.ATIVO,\n        usuarios: [],\n          setores: [],\n          created_at: new Date(),\n          updated_at: new Date(),\n          removed_at: null\n       },\n      usuarios: [],\n      created_at: new Date(),\n      updated_at: new Date()\n    },\n    refreshTokens: []\n  };\n\n  const mockRequest = {\n    user: {\n      id: '123e4567-e89b-12d3-a456-426614174000',\n      email: 'joao.silva@semtas.natal.gov.br',\n      role: 'ASSISTENTE_SOCIAL'\n    }\n  };\n\n  beforeEach(async () => {\n    const mockService = {\n      findAll: jest.fn(),\n      findById: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      updateStatus: jest.fn(),\n      updateSenha: jest.fn(),\n      remove: jest.fn(),\n      getProfile: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [UsuarioController],\n      providers: [\n        {\n          provide: UsuarioService,\n          useValue: mockService,\n        },\n      ],\n    })\n    .overrideGuard(JwtAuthGuard)\n    .useValue({ canActivate: jest.fn(() => true) })\n    .overrideGuard(PermissionGuard)\n    .useValue({ canActivate: jest.fn(() => true) })\n    .compile();\n\n    controller = module.get<UsuarioController>(UsuarioController);\n    service = module.get(UsuarioService);\n  });\n\n  describe('findAll', () => {\n    it('deve retornar lista de usuários com paginação', async () => {\n      const mockResult = {\n        items: [mockUsuario],\n        meta: {\n          total: 1,\n          page: 1,\n          limit: 10,\n          totalPages: 1\n        }\n      };\n\n      service.findAll.mockResolvedValue(mockResult);\n\n      const result = await controller.findAll(1, 10, 'João', 'ASSISTENTE_SOCIAL', 'ativo', 'unidade-123');\n\n      expect(result).toEqual(mockResult);\n      expect(service.findAll).toHaveBeenCalledWith({\n        page: 1,\n        limit: 10,\n        search: 'João',\n        role: 'ASSISTENTE_SOCIAL',\n        status: StatusUnidade.ATIVO,\n        unidadeId: 'unidade-123'\n      });\n    });\n\n    it('deve usar valores padrão quando parâmetros não fornecidos', async () => {\n      const mockResult = {\n        items: [mockUsuario],\n        meta: {\n          total: 1,\n          page: 1,\n          limit: 10,\n          totalPages: 1\n        }\n      };\n      service.findAll.mockResolvedValue(mockResult);\n\n      await controller.findAll();\n\n      expect(service.findAll).toHaveBeenCalledWith({\n        page: undefined,\n        limit: undefined,\n        search: undefined,\n        role: undefined,\n        status: undefined,\n        unidadeId: undefined\n      });\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar usuário por ID', async () => {\n      service.findById.mockResolvedValue(mockUsuario);\n\n      const result = await controller.findOne('123e4567-e89b-12d3-a456-426614174000');\n\n      expect(result).toEqual(mockUsuario);\n      expect(service.findById).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000');\n    });\n  });\n\n  describe('getProfile', () => {\n    it('deve retornar perfil do usuário atual', async () => {\n      service.getProfile.mockResolvedValue(mockUsuario);\n\n      const result = await controller.getProfile(mockRequest);\n\n      expect(result).toEqual(mockUsuario);\n      expect(service.getProfile).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000');\n    });\n  });\n\n  describe('create', () => {\n    it('deve criar novo usuário', async () => {\n      const createDto: CreateUsuarioDto = {\n        nome: 'João da Silva',\n        email: 'joao.silva@semtas.natal.gov.br',\n        senha: 'Senha@123',\n        cpf: '123.456.789-00',\n        telefone: '(84) 99999-9999',\n        matricula: '12345',\n        role_id: 'ASSISTENTE_SOCIAL',\n        unidade_id: 'unidade-123',\n        setor_id: 'setor-123'\n      };\n      \n      const mockResponse = {\n        data: mockUsuario,\n        meta: null,\n        message: null\n      };\n      \n      service.create.mockResolvedValue(mockResponse);\n\n      const result = await controller.create(createDto);\n\n      expect(result).toEqual(mockResponse);\n      expect(service.create).toHaveBeenCalledWith(createDto);\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar usuário', async () => {\n      const updateDto: UpdateUsuarioDto = {\n        nome: 'João Silva Santos',\n        cpf: '123.456.789-00',\n        telefone: '(84) 88888-8888'\n      };\n      \n      const mockResponse = {\n        data: { ...mockUsuario, ...updateDto },\n        meta: null,\n        message: null\n      };\n      \n      service.update.mockResolvedValue(mockResponse);\n\n      const result = await controller.update('123e4567-e89b-12d3-a456-426614174000', updateDto);\n\n      expect(result).toEqual(mockResponse);\n      expect(service.update).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000', updateDto);\n    });\n  });\n\n  describe('updateStatus', () => {\n    it('deve atualizar status do usuário', async () => {\n      const updateStatusDto: UpdateStatusUsuarioDto = {\n        status: 'inativo'\n      };\n      \n      const { senhaHash, ...usuarioAtualizado } = { ...mockUsuario, status: 'inativo' };\n      \n      service.updateStatus.mockResolvedValue(usuarioAtualizado);\n\n      const result = await controller.updateStatus('123e4567-e89b-12d3-a456-426614174000', updateStatusDto);\n\n      expect(result).toEqual(usuarioAtualizado);\n      expect(service.updateStatus).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000', updateStatusDto);\n    });\n  });\n\n  describe('updateSenha', () => {\n    it('deve atualizar senha do usuário', async () => {\n      const updateSenhaDto: UpdateSenhaDto = {\n        senhaAtual: 'senhaAtual123',\n        novaSenha: 'novaSenha123',\n        confirmacaoSenha: 'novaSenha123'\n      };\n      const mockResponse = { message: 'Senha atualizada com sucesso' };\n      service.updateSenha.mockResolvedValue(mockResponse);\n\n      const result = await controller.updateSenha('123e4567-e89b-12d3-a456-426614174000', updateSenhaDto, mockRequest);\n\n      expect(result).toEqual(mockResponse);\n      expect(service.updateSenha).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000', updateSenhaDto);\n    });\n  });\n\n  describe('remove', () => {\n    it('deve remover usuário', async () => {\n      const mockResponse = { message: 'Usuário removido com sucesso' };\n      service.remove.mockResolvedValue(undefined);\n\n      const result = await controller.remove('123e4567-e89b-12d3-a456-426614174000');\n\n      expect(service.remove).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000');\n    });\n  });\n\n  it('deve estar definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  it('deve ter service injetado', () => {\n    expect(service).toBeDefined();\n  });\n});"],"version":3}