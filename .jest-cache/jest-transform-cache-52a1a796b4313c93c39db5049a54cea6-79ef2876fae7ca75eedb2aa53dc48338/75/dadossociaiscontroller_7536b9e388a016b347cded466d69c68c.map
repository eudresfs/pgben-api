{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\dados-sociais.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\dados-sociais.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  UseGuards,\n  HttpStatus,\n  HttpCode,\n  ParseUUIDPipe,\n  UseInterceptors,\n  BadRequestException,\n  ConflictException,\n  InternalServerErrorException,\n  NotFoundException,\n  Logger,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { DadosSociaisService } from '../services/dados-sociais.service';\nimport { CreateDadosSociaisDto } from '../dto/create-dados-sociais.dto';\nimport { UpdateDadosSociaisDto } from '../dto/update-dados-sociais.dto';\nimport { DadosSociaisResponseDto } from '../dto/dados-sociais-response.dto';\nimport { CidadaoAuditInterceptor } from '../interceptors/cidadao-audit.interceptor';\nimport { DadosSociais } from '../../../entities/dados-sociais.entity';\n\n/**\n * Controller responsável pelo gerenciamento dos dados sociais dos cidadãos\n *\n * Fornece endpoints para CRUD completo dos dados sociais, incluindo:\n * - Criação de dados sociais para um cidadão\n * - Consulta de dados sociais existentes\n * - Atualização de dados sociais\n * - Remoção de dados sociais\n *\n * Todas as operações incluem validações de negócio e auditoria automática.\n */\n@ApiTags('Cidadão')\n@Controller('cidadao')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\n@UseInterceptors(CidadaoAuditInterceptor)\nexport class DadosSociaisController {\n  constructor(\n    private readonly dadosSociaisService: DadosSociaisService,\n    private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Cria dados sociais para um cidadão específico\n   *\n   * Valida se o cidadão existe e se não possui dados sociais já cadastrados.\n   * Calcula automaticamente a renda per capita baseada na composição familiar.\n   */\n  @Post(':id/dados-sociais')\n  @HttpCode(HttpStatus.CREATED)\n  @RequiresPermission({ permissionName: 'cidadao:dados-sociais:create' })\n  @ApiOperation({\n    summary: 'Criar dados sociais para um cidadão',\n    description:\n      'Cria novos dados sociais para um cidadão. Valida automaticamente a consistência dos dados de benefícios (PBF/BPC) e calcula a renda per capita familiar.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do cidadão',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Dados sociais criados com sucesso',\n    type: DadosSociaisResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description:\n      'Dados inválidos - Verifique os campos obrigatórios e valores dos benefícios',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string', example: 'Dados de benefícios inválidos' },\n        errors: {\n          type: 'array',\n          items: { type: 'string' },\n          example: [\n            'Valor do PBF é obrigatório e deve ser maior que zero quando recebe_pbf é verdadeiro',\n          ],\n        },\n        statusCode: { type: 'number', example: 400 },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Token de autenticação inválido ou expirado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Usuário sem permissão para criar dados sociais',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão não encontrado',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Conflito - Dados sociais já existem para este cidadão',\n    schema: {\n      type: 'object',\n      properties: {\n        message: {\n          type: 'string',\n          example: 'Dados sociais já existem para este cidadão',\n        },\n        statusCode: { type: 'number', example: 409 },\n      },\n    },\n  })\n  async create(\n    @Param('id', ParseUUIDPipe) cidadaoId: string,\n    @Body() createDadosSociaisDto: CreateDadosSociaisDto,\n  ): Promise<DadosSociaisResponseDto> {\n    try {\n      const dadosSociais = await this.dadosSociaisService.create(\n        cidadaoId,\n        createDadosSociaisDto,\n      );\n      return new DadosSociaisResponseDto(dadosSociais);\n    } catch (error) {\n      if (\n        error instanceof BadRequestException ||\n        error instanceof ConflictException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro ao criar dados sociais para cidadão ${cidadaoId}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro interno do servidor ao criar dados sociais',\n      );\n    }\n  }\n\n  /**\n   * Busca os dados sociais de um cidadão específico\n   *\n   * Retorna os dados sociais completos incluindo informações calculadas\n   * como renda per capita e status de benefícios.\n   */\n  @Get(':id/dados-sociais')\n  @RequiresPermission({ permissionName: 'cidadao:dados-sociais:read' })\n  @ApiOperation({\n    summary: 'Buscar dados sociais de um cidadão',\n    description:\n      'Retorna os dados sociais completos do cidadão especificado, incluindo cálculos automáticos.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do cidadão',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Dados sociais encontrados',\n    type: DadosSociaisResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão ou dados sociais não encontrados',\n  })\n  async findByCidadaoId(\n    @Param('id', ParseUUIDPipe) cidadaoId: string,\n  ): Promise<DadosSociaisResponseDto> {\n    const dadosSociais =\n      await this.dadosSociaisService.findByCidadaoId(cidadaoId);\n    return new DadosSociaisResponseDto(dadosSociais);\n  }\n\n  /**\n   * Atualiza os dados sociais de um cidadão\n   *\n   * Permite atualização parcial dos dados sociais.\n   * Recalcula automaticamente valores derivados como renda per capita.\n   */\n  @Put(':id/dados-sociais')\n  @RequiresPermission({ permissionName: 'cidadao:dados-sociais:update' })\n  @ApiOperation({\n    summary: 'Atualizar dados sociais de um cidadão',\n    description:\n      'Atualiza dados sociais existentes. Revalida automaticamente a consistência dos dados de benefícios e recalcula a renda per capita familiar.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID único dos dados sociais a serem atualizados',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Dados sociais atualizados com sucesso',\n    type: DadosSociaisResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description:\n      'Dados inválidos - Verifique os campos e valores dos benefícios',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string', example: 'Dados de benefícios inválidos' },\n        errors: {\n          type: 'array',\n          items: { type: 'string' },\n          example: ['Valor do BPC não pode exceder R$ 10.000,00'],\n        },\n        statusCode: { type: 'number', example: 400 },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Token de autenticação inválido ou expirado',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Usuário sem permissão para atualizar dados sociais',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Dados sociais não encontrados',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string', example: 'Dados sociais não encontrados' },\n        statusCode: { type: 'number', example: 404 },\n      },\n    },\n  })\n  async update(\n    @Param('id', ParseUUIDPipe) cidadaoId: string,\n    @Body() updateDadosSociaisDto: UpdateDadosSociaisDto,\n  ): Promise<DadosSociaisResponseDto> {\n    try {\n      const dadosSociais = await this.dadosSociaisService.update(\n        cidadaoId,\n        updateDadosSociaisDto,\n      );\n      return new DadosSociaisResponseDto(dadosSociais);\n    } catch (error) {\n      if (\n        error instanceof BadRequestException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro ao atualizar dados sociais ${cidadaoId}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro interno do servidor ao atualizar dados sociais',\n      );\n    }\n  }\n\n  /**\n   * Remove os dados sociais de um cidadão\n   *\n   * Realiza soft delete dos dados sociais, mantendo histórico para auditoria.\n   * Verifica dependências antes da remoção.\n   */\n  @Delete(':id/dados-sociais')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @RequiresPermission({ permissionName: 'cidadao:dados-sociais:delete' })\n  @ApiOperation({\n    summary: 'Remover dados sociais de um cidadão',\n    description:\n      'Remove os dados sociais do cidadão (soft delete). Verifica dependências antes da remoção.',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do cidadão',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Dados sociais removidos com sucesso',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão ou dados sociais não encontrados',\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'Não é possível remover dados sociais devido a dependências',\n  })\n  async remove(@Param('id', ParseUUIDPipe) cidadaoId: string): Promise<void> {\n    await this.dadosSociaisService.remove(cidadaoId);\n  }\n}\n"],"version":3}