e6c75a6c1929d22c4252fa507b1c324d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PixValidator = void 0;
const common_1 = require("@nestjs/common");
const uuid_1 = require("uuid");
/**
 * Serviço para validação de chaves PIX
 *
 * Implementa funções para validar os diferentes tipos de chaves PIX
 * (CPF, e-mail, telefone, chave aleatória) de acordo com as regras do Bacen.
 *
 * @author Equipe PGBen
 */
let PixValidator = class PixValidator {
    validarChavePix(arg0, arg1) {
        throw new Error('Method not implemented.');
    }
    mascaraChavePix(arg0, arg1) {
        throw new Error('Method not implemented.');
    }
    obterTipoChavePix(arg0) {
        // Mascara UUID: mostra apenas os primeiros 8 caracteres
        throw new Error('Method not implemented.');
    }
    /**
     * Valida uma chave PIX baseada no seu tipo
     *
     * @param key Chave PIX a ser validada
     * @param keyType Tipo da chave PIX ('cpf', 'email', 'telefone', 'aleatorio')
     * @returns true se a chave for válida para o tipo especificado, false caso contrário
     */
    validatePixKey(key, keyType) {
        if (!key) {
            return false;
        }
        switch (keyType) {
            case 'cpf':
                return this.validateCpfKey(key);
            case 'email':
                return this.validateEmailKey(key);
            case 'telefone':
                return this.validatePhoneKey(key);
            case 'aleatorio':
                return this.validateRandomKey(key);
            default:
                return false;
        }
    }
    /**
     * Valida uma chave PIX do tipo CPF
     *
     * @param key Chave PIX do tipo CPF (apenas números, 11 dígitos)
     * @returns true se for um CPF válido, false caso contrário
     */
    validateCpfKey(key) {
        // Remove caracteres não numéricos
        const cpf = key.replace(/\D/g, '');
        // Verifica se tem 11 dígitos
        if (cpf.length !== 11) {
            return false;
        }
        // Verifica se todos os dígitos são iguais (caso inválido)
        if (/^(\d)\1+$/.test(cpf)) {
            return false;
        }
        // Algoritmo de validação do CPF
        let sum = 0;
        let remainder;
        // Primeiro dígito verificador
        for (let i = 1; i <= 9; i++) {
            sum += parseInt(cpf.substring(i - 1, i)) * (11 - i);
        }
        remainder = (sum * 10) % 11;
        if (remainder === 10 || remainder === 11) {
            remainder = 0;
        }
        if (remainder !== parseInt(cpf.substring(9, 10))) {
            return false;
        }
        // Segundo dígito verificador
        sum = 0;
        for (let i = 1; i <= 10; i++) {
            sum += parseInt(cpf.substring(i - 1, i)) * (12 - i);
        }
        remainder = (sum * 10) % 11;
        if (remainder === 10 || remainder === 11) {
            remainder = 0;
        }
        if (remainder !== parseInt(cpf.substring(10, 11))) {
            return false;
        }
        return true;
    }
    /**
     * Valida uma chave PIX do tipo e-mail
     *
     * @param key Chave PIX do tipo e-mail
     * @returns true se for um e-mail válido, false caso contrário
     */
    validateEmailKey(key) {
        // Regex para validação básica de e-mail
        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
        // Verifica o formato básico do e-mail
        if (!emailRegex.test(key)) {
            return false;
        }
        // Verificações adicionais
        if (key.length > 77) {
            // Limitação do Bacen
            return false;
        }
        // Não pode ter espaços
        if (/\s/.test(key)) {
            return false;
        }
        return true;
    }
    /**
     * Valida uma chave PIX do tipo telefone brasileiro
     *
     * @param key Chave PIX do tipo telefone (formato +5599999999999)
     * @returns true se for um telefone válido, false caso contrário
     */
    validatePhoneKey(key) {
        // Regex para validação de telefone no formato +55 seguido de DDD e número
        const phoneRegex = /^\+55[1-9]{2}9?[0-9]{8}$/;
        // Remove caracteres não numéricos exceto o "+"
        const phone = key.replace(/[^\d+]/g, '');
        // Verifica o formato do telefone
        return phoneRegex.test(phone);
    }
    /**
     * Valida uma chave PIX do tipo aleatório (UUID)
     *
     * @param key Chave PIX do tipo aleatório (UUID)
     * @returns true se for um UUID válido, false caso contrário
     */
    validateRandomKey(key) {
        // Verifica se é um UUID válido
        return (0, uuid_1.validate)(key);
    }
    /**
     * Mascara uma chave PIX para exibição segura
     *
     * @param key Chave PIX original
     * @param keyType Tipo da chave PIX ('cpf', 'email', 'telefone', 'aleatorio')
     * @returns Chave mascarada para exibição
     */
    maskPixKey(key, keyType) {
        if (!key) {
            return '';
        }
        switch (keyType) {
            case 'cpf':
                // Mascara CPF: 123.456.789-00 -> ***.456.789-**
                return key.replace(/^(\d{3})\.(\d{3})\.(\d{3})-(\d{2})$/, '***.$2.$3-**');
            case 'email':
                // Mascara email: usuario@dominio.com -> u****@****.com
                return key.replace(/^([a-zA-Z0-9])[a-zA-Z0-9._%+-]+@([a-zA-Z0-9])[a-zA-Z0-9.-]+(\.[a-zA-Z]{2,})$/, '$1****@$2****$3');
            case 'telefone':
                // Mascara telefone: +5599999999999 -> +55*****99999
                return key.replace(/^\+55([0-9]{2})([0-9]{5})([0-9]{4})$/, '+55$1*****$3');
            case 'aleatorio':
                // Mascara UUID: mostra apenas os primeiros 8 caracteres
                return key.substring(0, 8) + '********-****-****-****-************';
            default:
                return '********';
        }
    }
};
exports.PixValidator = PixValidator;
exports.PixValidator = PixValidator = __decorate([
    (0, common_1.Injectable)()
], PixValidator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,