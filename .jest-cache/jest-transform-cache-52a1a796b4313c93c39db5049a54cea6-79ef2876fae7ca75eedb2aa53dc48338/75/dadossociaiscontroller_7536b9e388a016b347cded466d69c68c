083c0d9a6c2795f66e337250c9b087e7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosSociaisController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const dados_sociais_service_1 = require("../services/dados-sociais.service");
const create_dados_sociais_dto_1 = require("../dto/create-dados-sociais.dto");
const update_dados_sociais_dto_1 = require("../dto/update-dados-sociais.dto");
const dados_sociais_response_dto_1 = require("../dto/dados-sociais-response.dto");
const cidadao_audit_interceptor_1 = require("../interceptors/cidadao-audit.interceptor");
/**
 * Controller responsável pelo gerenciamento dos dados sociais dos cidadãos
 *
 * Fornece endpoints para CRUD completo dos dados sociais, incluindo:
 * - Criação de dados sociais para um cidadão
 * - Consulta de dados sociais existentes
 * - Atualização de dados sociais
 * - Remoção de dados sociais
 *
 * Todas as operações incluem validações de negócio e auditoria automática.
 */
let DadosSociaisController = class DadosSociaisController {
    dadosSociaisService;
    logger;
    constructor(dadosSociaisService, logger) {
        this.dadosSociaisService = dadosSociaisService;
        this.logger = logger;
    }
    /**
     * Cria dados sociais para um cidadão específico
     *
     * Valida se o cidadão existe e se não possui dados sociais já cadastrados.
     * Calcula automaticamente a renda per capita baseada na composição familiar.
     */
    async create(cidadaoId, createDadosSociaisDto) {
        try {
            const dadosSociais = await this.dadosSociaisService.create(cidadaoId, createDadosSociaisDto);
            return new dados_sociais_response_dto_1.DadosSociaisResponseDto(dadosSociais);
        }
        catch (error) {
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.ConflictException ||
                error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao criar dados sociais para cidadão ${cidadaoId}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro interno do servidor ao criar dados sociais');
        }
    }
    /**
     * Busca os dados sociais de um cidadão específico
     *
     * Retorna os dados sociais completos incluindo informações calculadas
     * como renda per capita e status de benefícios.
     */
    async findByCidadaoId(cidadaoId) {
        const dadosSociais = await this.dadosSociaisService.findByCidadaoId(cidadaoId);
        return new dados_sociais_response_dto_1.DadosSociaisResponseDto(dadosSociais);
    }
    /**
     * Atualiza os dados sociais de um cidadão
     *
     * Permite atualização parcial dos dados sociais.
     * Recalcula automaticamente valores derivados como renda per capita.
     */
    async update(cidadaoId, updateDadosSociaisDto) {
        try {
            const dadosSociais = await this.dadosSociaisService.update(cidadaoId, updateDadosSociaisDto);
            return new dados_sociais_response_dto_1.DadosSociaisResponseDto(dadosSociais);
        }
        catch (error) {
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao atualizar dados sociais ${cidadaoId}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro interno do servidor ao atualizar dados sociais');
        }
    }
    /**
     * Remove os dados sociais de um cidadão
     *
     * Realiza soft delete dos dados sociais, mantendo histórico para auditoria.
     * Verifica dependências antes da remoção.
     */
    async remove(cidadaoId) {
        await this.dadosSociaisService.remove(cidadaoId);
    }
};
exports.DadosSociaisController = DadosSociaisController;
__decorate([
    (0, common_1.Post)(':id/dados-sociais'),
    (0, common_1.HttpCode)(common_1.HttpStatus.CREATED),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao:dados-sociais:create' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Criar dados sociais para um cidadão',
        description: 'Cria novos dados sociais para um cidadão. Valida automaticamente a consistência dos dados de benefícios (PBF/BPC) e calcula a renda per capita familiar.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do cidadão',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Dados sociais criados com sucesso',
        type: dados_sociais_response_dto_1.DadosSociaisResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos - Verifique os campos obrigatórios e valores dos benefícios',
        schema: {
            type: 'object',
            properties: {
                message: { type: 'string', example: 'Dados de benefícios inválidos' },
                errors: {
                    type: 'array',
                    items: { type: 'string' },
                    example: [
                        'Valor do PBF é obrigatório e deve ser maior que zero quando recebe_pbf é verdadeiro',
                    ],
                },
                statusCode: { type: 'number', example: 400 },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Token de autenticação inválido ou expirado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Usuário sem permissão para criar dados sociais',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão não encontrado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Conflito - Dados sociais já existem para este cidadão',
        schema: {
            type: 'object',
            properties: {
                message: {
                    type: 'string',
                    example: 'Dados sociais já existem para este cidadão',
                },
                statusCode: { type: 'number', example: 409 },
            },
        },
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof create_dados_sociais_dto_1.CreateDadosSociaisDto !== "undefined" && create_dados_sociais_dto_1.CreateDadosSociaisDto) === "function" ? _c : Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], DadosSociaisController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(':id/dados-sociais'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao:dados-sociais:read' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar dados sociais de um cidadão',
        description: 'Retorna os dados sociais completos do cidadão especificado, incluindo cálculos automáticos.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do cidadão',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Dados sociais encontrados',
        type: dados_sociais_response_dto_1.DadosSociaisResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão ou dados sociais não encontrados',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], DadosSociaisController.prototype, "findByCidadaoId", null);
__decorate([
    (0, common_1.Put)(':id/dados-sociais'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao:dados-sociais:update' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualizar dados sociais de um cidadão',
        description: 'Atualiza dados sociais existentes. Revalida automaticamente a consistência dos dados de benefícios e recalcula a renda per capita familiar.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID único dos dados sociais a serem atualizados',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Dados sociais atualizados com sucesso',
        type: dados_sociais_response_dto_1.DadosSociaisResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos - Verifique os campos e valores dos benefícios',
        schema: {
            type: 'object',
            properties: {
                message: { type: 'string', example: 'Dados de benefícios inválidos' },
                errors: {
                    type: 'array',
                    items: { type: 'string' },
                    example: ['Valor do BPC não pode exceder R$ 10.000,00'],
                },
                statusCode: { type: 'number', example: 400 },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Token de autenticação inválido ou expirado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Usuário sem permissão para atualizar dados sociais',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Dados sociais não encontrados',
        schema: {
            type: 'object',
            properties: {
                message: { type: 'string', example: 'Dados sociais não encontrados' },
                statusCode: { type: 'number', example: 404 },
            },
        },
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof update_dados_sociais_dto_1.UpdateDadosSociaisDto !== "undefined" && update_dados_sociais_dto_1.UpdateDadosSociaisDto) === "function" ? _f : Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], DadosSociaisController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id/dados-sociais'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao:dados-sociais:delete' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Remover dados sociais de um cidadão',
        description: 'Remove os dados sociais do cidadão (soft delete). Verifica dependências antes da remoção.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do cidadão',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Dados sociais removidos com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão ou dados sociais não encontrados',
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Não é possível remover dados sociais devido a dependências',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], DadosSociaisController.prototype, "remove", null);
exports.DadosSociaisController = DadosSociaisController = __decorate([
    (0, swagger_1.ApiTags)('Cidadão'),
    (0, common_1.Controller)('cidadao'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.UseInterceptors)(cidadao_audit_interceptor_1.CidadaoAuditInterceptor),
    __metadata("design:paramtypes", [typeof (_a = typeof dados_sociais_service_1.DadosSociaisService !== "undefined" && dados_sociais_service_1.DadosSociaisService) === "function" ? _a : Object, typeof (_b = typeof common_1.Logger !== "undefined" && common_1.Logger) === "function" ? _b : Object])
], DadosSociaisController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,