{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\guards\\permission.guard.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\guards\\permission.guard.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { PermissionGuard } from './permission.guard';\nimport { PermissionService } from '../services/permission.service';\nimport { ScopeType } from '../entities/user-permission.entity';\nimport { PERMISSION_REQUIREMENTS_KEY } from '../decorators/requires-permission.decorator';\nimport { createMock } from '@golevelup/ts-jest';\nimport { Logger } from '@nestjs/common';\n\n// Mock para o serviço de permissões\nconst mockPermissionService = {\n  hasPermission: jest.fn(),\n};\n\ndescribe('PermissionGuard', () => {\n  let guard: PermissionGuard;\n  let reflector: Reflector;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PermissionGuard,\n        {\n          provide: PermissionService,\n          useValue: mockPermissionService,\n        },\n        {\n          provide: Reflector,\n          useValue: {\n            get: jest.fn(),\n            getAllAndOverride: jest.fn(),\n          },\n        },\n        {\n          provide: Logger,\n          useValue: {\n            log: jest.fn(),\n            error: jest.fn(),\n            warn: jest.fn(),\n            debug: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    guard = module.get<PermissionGuard>(PermissionGuard);\n    reflector = module.get<Reflector>(Reflector);\n  });\n\n  it('should be defined', () => {\n    expect(guard).toBeDefined();\n  });\n\n  describe('canActivate', () => {\n    it('should allow access when no permission is required', async () => {\n      // Arrange\n      const context = createMock<ExecutionContext>();\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(undefined);\n\n      // Act\n      const result = await guard.canActivate(context);\n\n      // Assert\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERMISSION_REQUIREMENTS_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      expect(result).toBe(true);\n    });\n\n    it('should allow access when user has required permission', async () => {\n      // Arrange\n      const permissionOptions = {\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      const context = createMock<ExecutionContext>({\n        switchToHttp: () => ({\n          getRequest: () => ({\n            user: { id: 'user-123' },\n            params: {},\n            query: {},\n          }),\n        }),\n      });\n\n      jest\n        .spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValue(permissionOptions);\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await guard.canActivate(context);\n\n      // Assert\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERMISSION_REQUIREMENTS_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(result).toBe(true);\n    });\n\n    it('should deny access when user does not have required permission', async () => {\n      // Arrange\n      const permissionOptions = {\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      const context = createMock<ExecutionContext>({\n        switchToHttp: () => ({\n          getRequest: () => ({\n            user: { id: 'user-123' },\n            params: {},\n            query: {},\n          }),\n        }),\n      });\n\n      jest\n        .spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValue(permissionOptions);\n      mockPermissionService.hasPermission.mockResolvedValue(false);\n\n      // Act & Assert\n      await expect(guard.canActivate(context)).rejects.toThrow(\n        UnauthorizedException,\n      );\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERMISSION_REQUIREMENTS_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n    });\n\n    it('should extract scopeId from request params when scopeType is UNIT', async () => {\n      // Arrange\n      const permissionOptions = {\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeIdParam: 'userId',\n      };\n\n      const context = createMock<ExecutionContext>({\n        switchToHttp: () => ({\n          getRequest: () => ({\n            user: { id: 'user-123' },\n            params: { userId: 'target-user-456' },\n            query: {},\n          }),\n        }),\n      });\n\n      jest\n        .spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValue(permissionOptions);\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await guard.canActivate(context);\n\n      // Assert\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERMISSION_REQUIREMENTS_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeId: 'target-user-456',\n      });\n      expect(result).toBe(true);\n    });\n\n    it('should extract scopeId from request query when scopeType is UNIT and param not found', async () => {\n      // Arrange\n      const permissionOptions = {\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeIdParam: 'userId',\n      };\n\n      const context = createMock<ExecutionContext>({\n        switchToHttp: () => ({\n          getRequest: () => ({\n            user: { id: 'user-123' },\n            params: {},\n            query: { userId: 'target-user-456' },\n          }),\n        }),\n      });\n\n      jest\n        .spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValue(permissionOptions);\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await guard.canActivate(context);\n\n      // Assert\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERMISSION_REQUIREMENTS_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeId: 'target-user-456',\n      });\n      expect(result).toBe(true);\n    });\n\n    it('should throw UnauthorizedException when user is not authenticated', async () => {\n      // Arrange\n      const permissionOptions = {\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      const context = createMock<ExecutionContext>({\n        switchToHttp: () => ({\n          getRequest: () => ({\n            user: undefined,\n            params: {},\n            query: {},\n          }),\n        }),\n      });\n\n      jest\n        .spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValue(permissionOptions);\n\n      // Act & Assert\n      await expect(guard.canActivate(context)).rejects.toThrow(\n        UnauthorizedException,\n      );\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERMISSION_REQUIREMENTS_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      expect(mockPermissionService.hasPermission).not.toHaveBeenCalled();\n    });\n\n    it('should throw UnauthorizedException when scopeId is required but not found', async () => {\n      // Arrange\n      const permissionOptions = {\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeIdParam: 'userId',\n      };\n\n      const context = createMock<ExecutionContext>({\n        switchToHttp: () => ({\n          getRequest: () => ({\n            user: { id: 'user-123' },\n            params: {},\n            query: {},\n          }),\n        }),\n      });\n\n      jest\n        .spyOn(reflector, 'getAllAndOverride')\n        .mockReturnValue(permissionOptions);\n\n      // Act & Assert\n      await expect(guard.canActivate(context)).rejects.toThrow(\n        UnauthorizedException,\n      );\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        PERMISSION_REQUIREMENTS_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      expect(mockPermissionService.hasPermission).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}