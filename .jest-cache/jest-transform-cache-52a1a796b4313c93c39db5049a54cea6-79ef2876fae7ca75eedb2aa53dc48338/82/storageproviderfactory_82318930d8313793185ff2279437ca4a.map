{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\factories\\storage-provider.factory.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\factories\\storage-provider.factory.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  StorageProvider,\n  TipoStorageProvider,\n} from '../interfaces/storage-provider.interface';\nimport { S3StorageAdapter } from '../adapters/s3-storage.adapter';\nimport { LocalStorageAdapter } from '../adapters/local-storage.adapter';\nimport { MinioService } from '../../../shared/services/minio.service';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Factory para criação de provedores de armazenamento\n *\n * Permite selecionar o provedor de armazenamento adequado\n * com base na configuração do sistema\n */\n@Injectable()\nexport class StorageProviderFactory {\n  private readonly logger = new Logger(StorageProviderFactory.name);\n  private readonly defaultProvider: TipoStorageProvider;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly s3StorageAdapter: S3StorageAdapter,\n    private readonly localStorageAdapter: LocalStorageAdapter,\n    private readonly minioService: MinioService,\n  ) {\n    this.defaultProvider = this.configService.get<TipoStorageProvider>(\n      'STORAGE_PROVIDER',\n      TipoStorageProvider.MINIO,\n    );\n\n    this.logger.log(\n      `Provedor de armazenamento padrão: ${this.defaultProvider}`,\n    );\n\n    // Inicializar o diretório de uploads local se necessário\n    if (this.defaultProvider === TipoStorageProvider.LOCAL) {\n      const uploadsDir = this.configService.get<string>(\n        'UPLOADS_DIR',\n        path.join(process.cwd(), 'uploads'),\n      );\n      if (!fs.existsSync(uploadsDir)) {\n        fs.mkdirSync(uploadsDir, { recursive: true });\n        this.logger.log(`Diretório de uploads criado: ${uploadsDir}`);\n      }\n    }\n  }\n\n  /**\n   * Obtém o provedor de armazenamento padrão\n   * @returns Provedor de armazenamento\n   */\n  getProvider(): StorageProvider {\n    return this.createProvider(this.defaultProvider);\n  }\n\n  /**\n   * Cria um provedor de armazenamento com base no tipo especificado\n   * @param type Tipo de provedor de armazenamento (opcional, usa o padrão se não especificado)\n   * @returns Provedor de armazenamento\n   */\n  createProvider(type?: TipoStorageProvider): StorageProvider {\n    const providerType = type || this.defaultProvider;\n\n    this.logger.debug(`Criando provedor de armazenamento: ${providerType}`);\n\n    switch (providerType) {\n      case TipoStorageProvider.S3:\n        if (!this.s3StorageAdapter) {\n          this.logger.warn(\n            'S3 não está configurado. Usando armazenamento local como fallback.',\n          );\n          return this.localStorageAdapter;\n        }\n        return this.s3StorageAdapter;\n\n      case TipoStorageProvider.MINIO:\n        return this.createMinioAdapter();\n\n      case TipoStorageProvider.LOCAL:\n        return this.localStorageAdapter;\n\n      default:\n        this.logger.warn(\n          `Tipo de provedor desconhecido: ${providerType}. Usando provedor padrão: ${this.defaultProvider}`,\n        );\n        // Evitar recursão infinita usando diretamente o provedor padrão\n        if (this.defaultProvider === TipoStorageProvider.S3) {\n          if (!this.s3StorageAdapter) {\n            this.logger.warn(\n              'S3 não está configurado. Usando armazenamento local como fallback.',\n            );\n            return this.localStorageAdapter;\n          }\n          return this.s3StorageAdapter;\n        } else if (this.defaultProvider === TipoStorageProvider.MINIO) {\n          return this.createMinioAdapter();\n        } else {\n          return this.localStorageAdapter;\n        }\n    }\n  }\n\n  /**\n   * Cria um adaptador para o MinIO que implementa a interface StorageProvider\n   * @returns Adaptador para o MinIO\n   */\n  private createMinioAdapter(): StorageProvider {\n    // Adaptar o MinioService para a interface StorageProvider\n    return {\n      nome: 'MinIO',\n\n      salvarArquivo: async (\n        buffer: Buffer,\n        nomeArquivo: string,\n        mimetype: string,\n        metadados?: Record<string, any>,\n      ): Promise<string> => {\n        // Extrair solicitação ID e tipo de documento dos metadados, se disponíveis\n        const solicitacaoId = metadados?.solicitacaoId || 'default';\n        const tipoDocumento = metadados?.tipoDocumento || 'OUTRO';\n\n        // Fazer upload usando o MinioService\n        const resultado = await this.minioService.uploadArquivo(\n          buffer,\n          nomeArquivo,\n          solicitacaoId,\n          tipoDocumento,\n        );\n\n        return resultado.nomeArquivo;\n      },\n\n      obterArquivo: async (caminho: string): Promise<Buffer> => {\n        // Fazer download usando o MinioService\n        const resultado = await this.minioService.downloadArquivo(caminho);\n        return resultado.arquivo;\n      },\n\n      removerArquivo: async (caminho: string): Promise<void> => {\n        await this.minioService.removerArquivo(caminho);\n      },\n      upload: async (\n        buffer: Buffer,\n        key: string,\n        mimetype: string,\n        metadata?: Record<string, any>,\n      ): Promise<string> => {\n        // Usar o método salvarArquivo para manter consistência\n        return this.minioService\n          .uploadArquivo(buffer, key, 'default', 'OUTRO')\n          .then((result) => result.nomeArquivo);\n      },\n\n      download: async (key: string): Promise<Buffer> => {\n        // Usar o método obterArquivo para manter consistência\n        return this.minioService\n          .downloadArquivo(key)\n          .then((result) => result.arquivo);\n      },\n\n      delete: async (key: string): Promise<void> => {\n        // Usar o método removerArquivo para manter consistência\n        return this.minioService.removerArquivo(key);\n      },\n\n      getUrl: async (key: string, expiresIn?: number): Promise<string> => {\n        return this.minioService.gerarUrlPreAssinada(key, expiresIn || 3600);\n      },\n\n      exists: async (key: string): Promise<boolean> => {\n        try {\n          // Tentar fazer download para verificar se existe\n          await this.minioService.downloadArquivo(key);\n          return true;\n        } catch (error) {\n          if (error.message && error.message.includes('not found')) {\n            return false;\n          }\n          throw error; // Propagar outros erros\n        }\n      },\n\n      copy: async (\n        sourceKey: string,\n        destinationKey: string,\n      ): Promise<string> => {\n        // Implementar cópia baixando e fazendo upload novamente\n        const resultado = await this.minioService.downloadArquivo(sourceKey);\n\n        // Extrair partes da chave de destino\n        const parts = destinationKey.split('/');\n        const solicitacaoId = parts[0] || 'default';\n        const tipoDocumento = parts[1] || 'OUTRO';\n        const nomeOriginal = parts.length > 2 ? parts[2] : destinationKey;\n\n        // Fazer upload com a nova chave\n        const resultadoUpload = await this.minioService.uploadArquivo(\n          resultado.arquivo,\n          nomeOriginal,\n          solicitacaoId,\n          tipoDocumento,\n        );\n\n        return resultadoUpload.nomeArquivo;\n      },\n\n      list: async (prefix: string, maxKeys?: number): Promise<string[]> => {\n        try {\n          // Implementação básica usando cliente Minio diretamente\n          const client = (MinioService as any).client;\n          if (client && typeof client.listObjects === 'function') {\n            const objects: string[] = [];\n            const stream = client.listObjects(\n              process.env.MINIO_BUCKET_NAME || 'documents',\n              prefix,\n              true,\n            );\n\n            return new Promise((resolve, reject) => {\n              stream.on('data', (obj: any) => {\n                if (obj.name && (!maxKeys || objects.length < maxKeys)) {\n                  objects.push(obj.name);\n                }\n              });\n              stream.on('end', () => resolve(objects));\n              stream.on('error', reject);\n            });\n          }\n\n          this.logger.warn('Cliente MinIO não disponível para listagem');\n          return [];\n        } catch (error) {\n          this.logger.error('Erro ao listar arquivos no MinIO:', error);\n          return [];\n        }\n      },\n    };\n  }\n}\n"],"version":3}