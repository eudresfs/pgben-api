dd08f36d2d31829c6cc2c62d71e4ead4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const permission_guard_1 = require("./permission.guard");
const permission_service_1 = require("../services/permission.service");
const user_permission_entity_1 = require("../entities/user-permission.entity");
const requires_permission_decorator_1 = require("../decorators/requires-permission.decorator");
const ts_jest_1 = require("@golevelup/ts-jest");
const common_2 = require("@nestjs/common");
// Mock para o serviço de permissões
const mockPermissionService = {
    hasPermission: jest.fn(),
};
describe('PermissionGuard', () => {
    let guard;
    let reflector;
    beforeEach(async () => {
        jest.clearAllMocks();
        const module = await testing_1.Test.createTestingModule({
            providers: [
                permission_guard_1.PermissionGuard,
                {
                    provide: permission_service_1.PermissionService,
                    useValue: mockPermissionService,
                },
                {
                    provide: core_1.Reflector,
                    useValue: {
                        get: jest.fn(),
                        getAllAndOverride: jest.fn(),
                    },
                },
                {
                    provide: common_2.Logger,
                    useValue: {
                        log: jest.fn(),
                        error: jest.fn(),
                        warn: jest.fn(),
                        debug: jest.fn(),
                    },
                },
            ],
        }).compile();
        guard = module.get(permission_guard_1.PermissionGuard);
        reflector = module.get(core_1.Reflector);
    });
    it('should be defined', () => {
        expect(guard).toBeDefined();
    });
    describe('canActivate', () => {
        it('should allow access when no permission is required', async () => {
            // Arrange
            const context = (0, ts_jest_1.createMock)();
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(undefined);
            // Act
            const result = await guard.canActivate(context);
            // Assert
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, [context.getHandler(), context.getClass()]);
            expect(result).toBe(true);
        });
        it('should allow access when user has required permission', async () => {
            // Arrange
            const permissionOptions = {
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            };
            const context = (0, ts_jest_1.createMock)({
                switchToHttp: () => ({
                    getRequest: () => ({
                        user: { id: 'user-123' },
                        params: {},
                        query: {},
                    }),
                }),
            });
            jest
                .spyOn(reflector, 'getAllAndOverride')
                .mockReturnValue(permissionOptions);
            mockPermissionService.hasPermission.mockResolvedValue(true);
            // Act
            const result = await guard.canActivate(context);
            // Assert
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, [context.getHandler(), context.getClass()]);
            expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({
                userId: 'user-123',
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                scopeId: undefined,
            });
            expect(result).toBe(true);
        });
        it('should deny access when user does not have required permission', async () => {
            // Arrange
            const permissionOptions = {
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            };
            const context = (0, ts_jest_1.createMock)({
                switchToHttp: () => ({
                    getRequest: () => ({
                        user: { id: 'user-123' },
                        params: {},
                        query: {},
                    }),
                }),
            });
            jest
                .spyOn(reflector, 'getAllAndOverride')
                .mockReturnValue(permissionOptions);
            mockPermissionService.hasPermission.mockResolvedValue(false);
            // Act & Assert
            await expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, [context.getHandler(), context.getClass()]);
            expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({
                userId: 'user-123',
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                scopeId: undefined,
            });
        });
        it('should extract scopeId from request params when scopeType is UNIT', async () => {
            // Arrange
            const permissionOptions = {
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeIdParam: 'userId',
            };
            const context = (0, ts_jest_1.createMock)({
                switchToHttp: () => ({
                    getRequest: () => ({
                        user: { id: 'user-123' },
                        params: { userId: 'target-user-456' },
                        query: {},
                    }),
                }),
            });
            jest
                .spyOn(reflector, 'getAllAndOverride')
                .mockReturnValue(permissionOptions);
            mockPermissionService.hasPermission.mockResolvedValue(true);
            // Act
            const result = await guard.canActivate(context);
            // Assert
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, [context.getHandler(), context.getClass()]);
            expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({
                userId: 'user-123',
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'target-user-456',
            });
            expect(result).toBe(true);
        });
        it('should extract scopeId from request query when scopeType is UNIT and param not found', async () => {
            // Arrange
            const permissionOptions = {
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeIdParam: 'userId',
            };
            const context = (0, ts_jest_1.createMock)({
                switchToHttp: () => ({
                    getRequest: () => ({
                        user: { id: 'user-123' },
                        params: {},
                        query: { userId: 'target-user-456' },
                    }),
                }),
            });
            jest
                .spyOn(reflector, 'getAllAndOverride')
                .mockReturnValue(permissionOptions);
            mockPermissionService.hasPermission.mockResolvedValue(true);
            // Act
            const result = await guard.canActivate(context);
            // Assert
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, [context.getHandler(), context.getClass()]);
            expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({
                userId: 'user-123',
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'target-user-456',
            });
            expect(result).toBe(true);
        });
        it('should throw UnauthorizedException when user is not authenticated', async () => {
            // Arrange
            const permissionOptions = {
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            };
            const context = (0, ts_jest_1.createMock)({
                switchToHttp: () => ({
                    getRequest: () => ({
                        user: undefined,
                        params: {},
                        query: {},
                    }),
                }),
            });
            jest
                .spyOn(reflector, 'getAllAndOverride')
                .mockReturnValue(permissionOptions);
            // Act & Assert
            await expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, [context.getHandler(), context.getClass()]);
            expect(mockPermissionService.hasPermission).not.toHaveBeenCalled();
        });
        it('should throw UnauthorizedException when scopeId is required but not found', async () => {
            // Arrange
            const permissionOptions = {
                permissionName: 'usuario.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeIdParam: 'userId',
            };
            const context = (0, ts_jest_1.createMock)({
                switchToHttp: () => ({
                    getRequest: () => ({
                        user: { id: 'user-123' },
                        params: {},
                        query: {},
                    }),
                }),
            });
            jest
                .spyOn(reflector, 'getAllAndOverride')
                .mockReturnValue(permissionOptions);
            // Act & Assert
            await expect(guard.canActivate(context)).rejects.toThrow(common_1.UnauthorizedException);
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, [context.getHandler(), context.getClass()]);
            expect(mockPermissionService.hasPermission).not.toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,