3fc595b519ed637b754737f6cf5e3000
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasDefinicaoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const express_1 = require("express");
const metricas_definicao_service_1 = require("../services/metricas-definicao.service");
const metricas_coleta_service_1 = require("../services/metricas-coleta.service");
const metricas_cache_service_1 = require("../services/metricas-cache.service");
const metrica_definicao_dto_1 = require("../dto/metrica-definicao.dto");
const metrica_configuracao_dto_1 = require("../dto/metrica-configuracao.dto");
const metrica_snapshot_dto_1 = require("../dto/metrica-snapshot.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
/**
 * Controlador para gerenciamento de métricas
 */
let MetricasDefinicaoController = class MetricasDefinicaoController {
    metricasService;
    coletaService;
    cacheService;
    constructor(metricasService, coletaService, cacheService) {
        this.metricasService = metricasService;
        this.coletaService = coletaService;
        this.cacheService = cacheService;
    }
    /**
     * Cria uma nova definição de métrica
     */
    async criarMetrica(dto, req) {
        // Obter usuário atual da requisição
        const usuarioId = req.user?.['sub'] || 'sistema';
        const usuarioNome = req.user?.['nome'] || 'Sistema';
        return this.metricasService.criarMetrica(dto, usuarioId, usuarioNome);
    }
    /**
     * Atualiza uma definição de métrica existente
     */
    async atualizarMetrica(id, dto, req) {
        // Obter usuário atual da requisição
        const usuarioId = req.user?.['sub'] || 'sistema';
        const usuarioNome = req.user?.['nome'] || 'Sistema';
        return this.metricasService.atualizarMetrica(id, dto, usuarioId, usuarioNome);
    }
    /**
     * Busca uma métrica pelo ID
     */
    async buscarMetricaPorId(id) {
        const metrica = await this.metricasService.buscarMetricaPorId(id);
        if (!metrica) {
            throw new common_1.HttpException('Métrica não encontrada', common_1.HttpStatus.NOT_FOUND);
        }
        return metrica;
    }
    /**
     * Busca uma métrica pelo código
     */
    async buscarMetricaPorCodigo(codigo) {
        const metrica = await this.metricasService.buscarMetricaPorCodigo(codigo);
        if (!metrica) {
            throw new common_1.HttpException('Métrica não encontrada', common_1.HttpStatus.NOT_FOUND);
        }
        return metrica;
    }
    /**
     * Lista métricas com filtros e paginação
     */
    async listarMetricas(filtros) {
        return this.metricasService.listarMetricas(filtros);
    }
    /**
     * Remove uma métrica (exclusão lógica)
     */
    async removerMetrica(id) {
        await this.metricasService.removerMetrica(id);
    }
    /**
     * Cria configuração para uma métrica
     */
    async criarConfiguracao(dto, req) {
        // Obter usuário atual da requisição
        const usuarioId = req.user?.['sub'] || 'sistema';
        const usuarioNome = req.user?.['nome'] || 'Sistema';
        return this.metricasService.criarConfiguracao(dto, usuarioId, usuarioNome);
    }
    /**
     * Atualiza configuração de uma métrica
     */
    async atualizarConfiguracao(id, dto, req) {
        // Obter usuário atual da requisição
        const usuarioId = req.user?.['sub'] || 'sistema';
        const usuarioNome = req.user?.['nome'] || 'Sistema';
        return this.metricasService.atualizarConfiguracao(id, dto, usuarioId, usuarioNome);
    }
    /**
     * Busca configuração de uma métrica
     */
    async buscarConfiguracaoPorMetrica(metricaId) {
        const configuracao = await this.metricasService.buscarConfiguracaoPorMetrica(metricaId);
        if (!configuracao) {
            throw new common_1.HttpException('Configuração não encontrada', common_1.HttpStatus.NOT_FOUND);
        }
        return configuracao;
    }
    /**
     * Coleta manualmente uma métrica específica
     */
    async coletarMetrica(dto) {
        return this.coletaService.coletarMetricaManual(dto.codigo, dto.dimensoes);
    }
    /**
     * Consulta o valor atual de uma métrica
     */
    async consultarValorMetrica(dto) {
        const metrica = await this.metricasService.buscarMetricaPorCodigo(dto.codigo);
        if (!metrica) {
            throw new common_1.HttpException('Métrica não encontrada', common_1.HttpStatus.NOT_FOUND);
        }
        // Buscar último snapshot
        const snapshot = await this.cacheService.obterUltimoSnapshot(metrica.id, dto.dimensoes);
        if (!snapshot) {
            throw new common_1.HttpException('Nenhum valor disponível para a métrica', common_1.HttpStatus.NOT_FOUND);
        }
        return {
            metrica: {
                id: metrica.id,
                codigo: metrica.codigo,
                nome: metrica.nome,
                descricao: metrica.descricao,
                unidade: metrica.unidade,
                prefixo: metrica.prefixo,
                sufixo: metrica.sufixo,
            },
            snapshot: {
                id: snapshot.id,
                valor: snapshot.valor,
                valor_formatado: snapshot.valor_formatado,
                periodo_inicio: snapshot.periodo_inicio,
                periodo_fim: snapshot.periodo_fim,
                dimensoes: snapshot.dimensoes,
                data_coleta: snapshot.created_at,
            },
        };
    }
    /**
     * Consulta série temporal de uma métrica
     */
    async consultarSerieTemporalMetrica(dto) {
        const metrica = await this.metricasService.buscarMetricaPorCodigo(dto.codigo);
        if (!metrica) {
            throw new common_1.HttpException('Métrica não encontrada', common_1.HttpStatus.NOT_FOUND);
        }
        // Buscar snapshots para o período
        const snapshots = await this.cacheService.obterSerieTemporal(metrica.id, dto.data_inicial, dto.data_final, dto.dimensoes);
        return {
            metrica: {
                id: metrica.id,
                codigo: metrica.codigo,
                nome: metrica.nome,
                descricao: metrica.descricao,
                unidade: metrica.unidade,
                prefixo: metrica.prefixo,
                sufixo: metrica.sufixo,
            },
            periodo: {
                inicio: dto.data_inicial,
                fim: dto.data_final,
                granularidade: dto.granularidade || metrica.granularidade,
            },
            dimensoes: dto.dimensoes || {},
            pontos: snapshots.map((s) => ({
                valor: s.valor,
                valor_formatado: s.valor_formatado,
                periodo_inicio: s.periodo_inicio,
                periodo_fim: s.periodo_fim,
            })),
        };
    }
    /**
     * Limpa o cache de métricas
     */
    async limparCache() {
        this.cacheService.limparCacheCompleto();
    }
    /**
     * Obtém estatísticas de uso do cache
     */
    async obterEstatisticasCache() {
        return this.cacheService.obterEstatisticas();
    }
};
exports.MetricasDefinicaoController = MetricasDefinicaoController;
__decorate([
    (0, common_1.Post)(),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Criar nova métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.CREATED,
        description: 'Métrica criada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_d = typeof metrica_definicao_dto_1.CriarMetricaDefinicaoDto !== "undefined" && metrica_definicao_dto_1.CriarMetricaDefinicaoDto) === "function" ? _d : Object, typeof (_e = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "criarMetrica", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Atualizar métrica existente' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID da métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Métrica atualizada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof metrica_definicao_dto_1.AtualizarMetricaDefinicaoDto !== "undefined" && metrica_definicao_dto_1.AtualizarMetricaDefinicaoDto) === "function" ? _f : Object, typeof (_g = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _g : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "atualizarMetrica", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar métrica por ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID da métrica' }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Métrica encontrada' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "buscarMetricaPorId", null);
__decorate([
    (0, common_1.Get)('codigo/:codigo'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar métrica por código' }),
    (0, swagger_1.ApiParam)({ name: 'codigo', description: 'Código da métrica' }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Métrica encontrada' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('codigo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "buscarMetricaPorCodigo", null);
__decorate([
    (0, common_1.Get)(),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({ summary: 'Listar métricas com filtros' }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Lista de métricas' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_h = typeof metrica_definicao_dto_1.FiltroMetricasDto !== "undefined" && metrica_definicao_dto_1.FiltroMetricasDto) === "function" ? _h : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "listarMetricas", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiOperation)({ summary: 'Remover métrica' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID da métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'Métrica removida com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "removerMetrica", null);
__decorate([
    (0, common_1.Post)('configuracao'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Criar configuração para métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.CREATED,
        description: 'Configuração criada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_j = typeof metrica_configuracao_dto_1.CriarMetricaConfiguracaoDto !== "undefined" && metrica_configuracao_dto_1.CriarMetricaConfiguracaoDto) === "function" ? _j : Object, typeof (_k = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _k : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "criarConfiguracao", null);
__decorate([
    (0, common_1.Put)('configuracao/:id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Atualizar configuração de métrica' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID da configuração' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Configuração atualizada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Configuração não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_l = typeof metrica_configuracao_dto_1.AtualizarMetricaConfiguracaoDto !== "undefined" && metrica_configuracao_dto_1.AtualizarMetricaConfiguracaoDto) === "function" ? _l : Object, typeof (_m = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _m : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "atualizarConfiguracao", null);
__decorate([
    (0, common_1.Get)('configuracao/metrica/:metricaId'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar configuração de uma métrica' }),
    (0, swagger_1.ApiParam)({ name: 'metricaId', description: 'ID da métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Configuração encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Configuração não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('metricaId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "buscarConfiguracaoPorMetrica", null);
__decorate([
    (0, common_1.Post)('coleta'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Coletar métrica manualmente' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Métrica coletada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_o = typeof metrica_snapshot_dto_1.ColetaManualMetricaDto !== "undefined" && metrica_snapshot_dto_1.ColetaManualMetricaDto) === "function" ? _o : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "coletarMetrica", null);
__decorate([
    (0, common_1.Post)('valor'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Consultar valor atual de uma métrica' }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Valor da métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_p = typeof metrica_snapshot_dto_1.ConsultaValorMetricaDto !== "undefined" && metrica_snapshot_dto_1.ConsultaValorMetricaDto) === "function" ? _p : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "consultarValorMetrica", null);
__decorate([
    (0, common_1.Post)('serie-temporal'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({ summary: 'Consultar série temporal de uma métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Série temporal da métrica',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.BAD_REQUEST,
        description: 'Dados inválidos',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_q = typeof metrica_snapshot_dto_1.ConsultaSerieTemporalDto !== "undefined" && metrica_snapshot_dto_1.ConsultaSerieTemporalDto) === "function" ? _q : Object]),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "consultarSerieTemporalMetrica", null);
__decorate([
    (0, common_1.Post)('cache/limpar'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiOperation)({ summary: 'Limpar cache de métricas' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NO_CONTENT,
        description: 'Cache limpo com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "limparCache", null);
__decorate([
    (0, common_1.Get)('cache/estatisticas'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Obter estatísticas do cache de métricas' }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.OK, description: 'Estatísticas do cache' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MetricasDefinicaoController.prototype, "obterEstatisticasCache", null);
exports.MetricasDefinicaoController = MetricasDefinicaoController = __decorate([
    (0, swagger_1.ApiTags)('Métricas e Dashboard'),
    (0, common_1.Controller)('metricas'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof metricas_definicao_service_1.MetricasService !== "undefined" && metricas_definicao_service_1.MetricasService) === "function" ? _a : Object, typeof (_b = typeof metricas_coleta_service_1.MetricasColetaService !== "undefined" && metricas_coleta_service_1.MetricasColetaService) === "function" ? _b : Object, typeof (_c = typeof metricas_cache_service_1.MetricasCacheService !== "undefined" && metricas_cache_service_1.MetricasCacheService) === "function" ? _c : Object])
], MetricasDefinicaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,