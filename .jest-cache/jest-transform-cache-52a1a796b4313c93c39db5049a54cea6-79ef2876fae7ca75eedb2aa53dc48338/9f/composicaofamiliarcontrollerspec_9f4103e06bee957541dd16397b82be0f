6734f8e9688a3d6d0c71ae0c69c699b0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const composicao_familiar_controller_1 = require("./composicao-familiar.controller");
const composicao_familiar_service_1 = require("../services/composicao-familiar.service");
const common_1 = require("@nestjs/common");
const escolaridade_enum_1 = require("../enums/escolaridade.enum");
const parentesco_enum_1 = require("../enums/parentesco.enum");
describe('ComposicaoFamiliarController', () => {
    let controller;
    let service;
    const mockComposicaoFamiliarService = {
        create: jest.fn(),
        findByCidadao: jest.fn(),
        findOne: jest.fn(),
        update: jest.fn(),
        remove: jest.fn(),
        findByCpf: jest.fn(),
    };
    const mockComposicaoFamiliarResponse = {
        id: '123e4567-e89b-12d3-a456-426614174000',
        cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
        nome: 'João Silva',
        cpf: '123.456.789-00',
        nis: '12345678901',
        idade: 25,
        ocupacao: 'Estudante',
        escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_INCOMPLETO,
        parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
        renda: 1500.0,
        observacoes: 'Observações de teste',
        created_at: new Date('2024-01-01T10:00:00Z'),
        updated_at: new Date('2024-01-01T10:00:00Z'),
        ativo: true,
        cpf_formatado: '',
        escolaridade_descricao: '',
        parentesco_descricao: '',
    };
    const mockPaginatedResponse = {
        data: [mockComposicaoFamiliarResponse],
        meta: {
            total: 1,
            page: 1,
            limit: 10,
            totalPages: 1,
            hasNext: false,
            hasPrev: false,
        },
        estatisticas: {
            totalMembros: 1,
            rendaTotal: 1500.0,
            rendaMedia: 1500.0,
            idadeMedia: 25,
            membrosComRenda: 1,
        },
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [composicao_familiar_controller_1.ComposicaoFamiliarController],
            providers: [
                {
                    provide: composicao_familiar_service_1.ComposicaoFamiliarService,
                    useValue: mockComposicaoFamiliarService,
                },
            ],
        }).compile();
        controller = module.get(composicao_familiar_controller_1.ComposicaoFamiliarController);
        service = module.get(composicao_familiar_service_1.ComposicaoFamiliarService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('create', () => {
        const createDto = {
            cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
            nome: 'João Silva',
            cpf: '12345678900',
            nis: '12345678901',
            idade: 25,
            ocupacao: 'Estudante',
            escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
            parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
            renda: 1500.0,
            observacoes: 'Observações de teste',
        };
        const mockRequest = {
            user: { id: 'user123' },
        };
        it('should create a new composicao familiar member', async () => {
            mockComposicaoFamiliarService.create.mockResolvedValue(mockComposicaoFamiliarResponse);
            const result = await controller.create(createDto, mockRequest);
            expect(service.create).toHaveBeenCalledWith(createDto, 'user123');
            expect(result).toEqual(mockComposicaoFamiliarResponse);
        });
        it('should throw ConflictException when member already exists', async () => {
            mockComposicaoFamiliarService.create.mockRejectedValue(new common_1.ConflictException('Já existe um membro com este CPF na composição familiar'));
            await expect(controller.create(createDto, mockRequest)).rejects.toThrow(common_1.ConflictException);
        });
        it('should throw BadRequestException for invalid data', async () => {
            mockComposicaoFamiliarService.create.mockRejectedValue(new common_1.BadRequestException('CPF inválido'));
            await expect(controller.create(createDto, mockRequest)).rejects.toThrow(common_1.BadRequestException);
        });
    });
    describe('findByCidadao', () => {
        const cidadaoId = '123e4567-e89b-12d3-a456-426614174001';
        const query = { page: 1, limit: 10 };
        it('should return paginated composicao familiar members', async () => {
            mockComposicaoFamiliarService.findByCidadao.mockResolvedValue(mockPaginatedResponse);
            const result = await controller.findByCidadao(cidadaoId, query.page, query.limit);
            expect(service.findByCidadao).toHaveBeenCalledWith(cidadaoId, query);
            expect(result).toEqual(mockPaginatedResponse);
        });
        it('should throw NotFoundException when cidadao does not exist', async () => {
            mockComposicaoFamiliarService.findByCidadao.mockRejectedValue(new common_1.NotFoundException('Cidadão não encontrado'));
            await expect(controller.findByCidadao(cidadaoId, 1, 10)).rejects.toThrow(common_1.NotFoundException);
        });
        it('should use default pagination values', async () => {
            mockComposicaoFamiliarService.findByCidadao.mockResolvedValue(mockPaginatedResponse);
            await controller.findByCidadao(cidadaoId, 1, 10);
            expect(service.findByCidadao).toHaveBeenCalledWith(cidadaoId, {
                page: 1,
                limit: 10,
            });
        });
    });
    describe('findOne', () => {
        const id = '123e4567-e89b-12d3-a456-426614174000';
        it('should return a composicao familiar member', async () => {
            mockComposicaoFamiliarService.findOne.mockResolvedValue(mockComposicaoFamiliarResponse);
            const result = await controller.findOne(id);
            expect(service.findOne).toHaveBeenCalledWith(id);
            expect(result).toEqual(mockComposicaoFamiliarResponse);
        });
        it('should throw NotFoundException when member does not exist', async () => {
            mockComposicaoFamiliarService.findOne.mockRejectedValue(new common_1.NotFoundException('Membro da composição familiar não encontrado'));
            await expect(controller.findOne(id)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        const id = '123e4567-e89b-12d3-a456-426614174000';
        const updateDto = {
            nome: 'João Silva Atualizado',
            renda: 2000.0,
        };
        const mockRequest = {
            user: { id: 'user123' },
        };
        it('should update a composicao familiar member', async () => {
            const updatedResponse = {
                ...mockComposicaoFamiliarResponse,
                nome: 'João Silva Atualizado',
                renda: 2000.0,
            };
            mockComposicaoFamiliarService.update.mockResolvedValue(updatedResponse);
            const result = await controller.update(id, updateDto, mockRequest);
            expect(service.update).toHaveBeenCalledWith(id, updateDto, 'user123');
            expect(result).toEqual(updatedResponse);
        });
        it('should throw NotFoundException when member does not exist', async () => {
            mockComposicaoFamiliarService.update.mockRejectedValue(new common_1.NotFoundException('Membro da composição familiar não encontrado'));
            await expect(controller.update(id, updateDto, mockRequest)).rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw ConflictException for duplicate data', async () => {
            mockComposicaoFamiliarService.update.mockRejectedValue(new common_1.ConflictException('Já existe um membro com este nome na composição familiar'));
            await expect(controller.update(id, updateDto, mockRequest)).rejects.toThrow(common_1.ConflictException);
        });
    });
    describe('remove', () => {
        const id = '123e4567-e89b-12d3-a456-426614174000';
        const mockRequest = {
            user: { id: 'user123' },
        };
        it('should remove a composicao familiar member', async () => {
            mockComposicaoFamiliarService.remove.mockResolvedValue(undefined);
            await controller.remove(id, mockRequest);
            expect(service.remove).toHaveBeenCalledWith(id, 'user123');
        });
        it('should throw NotFoundException when member does not exist', async () => {
            mockComposicaoFamiliarService.remove.mockRejectedValue(new common_1.NotFoundException('Membro da composição familiar não encontrado'));
            await expect(controller.remove(id, mockRequest)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('findByCpf', () => {
        const cpf = '12345678900';
        it('should return composicao familiar members by CPF', async () => {
            const expectedResponse = [mockComposicaoFamiliarResponse];
            mockComposicaoFamiliarService.findByCpf.mockResolvedValue(expectedResponse);
            const result = await controller.findByCpf(cpf);
            expect(service.findByCpf).toHaveBeenCalledWith(cpf);
            expect(result).toEqual(expectedResponse);
        });
        it('should throw BadRequestException for invalid CPF', async () => {
            mockComposicaoFamiliarService.findByCpf.mockRejectedValue(new common_1.BadRequestException('CPF deve ter 11 dígitos'));
            await expect(controller.findByCpf('123')).rejects.toThrow(common_1.BadRequestException);
        });
        it('should return empty array when no members found', async () => {
            mockComposicaoFamiliarService.findByCpf.mockResolvedValue([]);
            const result = await controller.findByCpf(cpf);
            expect(result).toEqual([]);
        });
    });
    describe('Input validation', () => {
        it('should validate UUID format for ID parameters', async () => {
            const invalidId = 'invalid-uuid';
            // O controller deve validar UUIDs através dos decorators
            // Este teste verifica se a validação está configurada corretamente
            expect(() => {
                // Simulação de validação de UUID
                const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
                if (!uuidRegex.test(invalidId)) {
                    throw new common_1.BadRequestException('ID deve ser um UUID válido');
                }
            }).toThrow(common_1.BadRequestException);
        });
        it('should validate pagination parameters', () => {
            const invalidQuery = { page: -1, limit: 0 };
            // Validação de parâmetros de paginação
            expect(() => {
                if (invalidQuery.page < 1 || invalidQuery.limit < 1) {
                    throw new common_1.BadRequestException('Parâmetros de paginação inválidos');
                }
            }).toThrow(common_1.BadRequestException);
        });
    });
    describe('Error handling', () => {
        it('should handle service errors gracefully', async () => {
            const createDto = {
                cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
                nome: 'João Silva',
                cpf: '12345678900',
                nis: '12345678901',
                idade: 25,
                ocupacao: 'Estudante',
                escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
                parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
            };
            const mockRequest = { user: { id: 'user123' } };
            mockComposicaoFamiliarService.create.mockRejectedValue(new Error('Erro interno do servidor'));
            await expect(controller.create(createDto, mockRequest)).rejects.toThrow('Erro interno do servidor');
        });
    });
    describe('Authorization', () => {
        it('should extract user ID from request', async () => {
            const createDto = {
                cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
                nome: 'João Silva',
                cpf: '12345678900',
                nis: '12345678901',
                idade: 25,
                ocupacao: 'Estudante',
                escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
                parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
            };
            const mockRequest = { user: { id: 'user123' } };
            mockComposicaoFamiliarService.create.mockResolvedValue(mockComposicaoFamiliarResponse);
            await controller.create(createDto, mockRequest);
            expect(service.create).toHaveBeenCalledWith(createDto, 'user123');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNpZGFkYW9cXGNvbnRyb2xsZXJzXFxjb21wb3NpY2FvLWZhbWlsaWFyLmNvbnRyb2xsZXIuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFzRDtBQUN0RCxxRkFBZ0Y7QUFDaEYseUZBQW9GO0FBT3BGLDJDQUl3QjtBQUN4QixrRUFBOEQ7QUFDOUQsOERBQTBEO0FBRTFELFFBQVEsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7SUFDNUMsSUFBSSxVQUF3QyxDQUFDO0lBQzdDLElBQUksT0FBa0MsQ0FBQztJQUV2QyxNQUFNLDZCQUE2QixHQUFHO1FBQ3BDLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2pCLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ3hCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2pCLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ3JCLENBQUM7SUFFRixNQUFNLDhCQUE4QixHQUFrQztRQUNwRSxFQUFFLEVBQUUsc0NBQXNDO1FBQzFDLFVBQVUsRUFBRSxzQ0FBc0M7UUFDbEQsSUFBSSxFQUFFLFlBQVk7UUFDbEIsR0FBRyxFQUFFLGdCQUFnQjtRQUNyQixHQUFHLEVBQUUsYUFBYTtRQUNsQixLQUFLLEVBQUUsRUFBRTtRQUNULFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFlBQVksRUFBRSxvQ0FBZ0IsQ0FBQyxnQkFBZ0I7UUFDL0MsVUFBVSxFQUFFLGdDQUFjLENBQUMsS0FBSztRQUNoQyxLQUFLLEVBQUUsTUFBTTtRQUNiLFdBQVcsRUFBRSxzQkFBc0I7UUFDbkMsVUFBVSxFQUFFLElBQUksSUFBSSxDQUFDLHNCQUFzQixD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Q0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDN0IsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25ELE1BQU0sU0FBUyxHQUFnQztnQkFDN0MsVUFBVSxFQUFFLHNDQUFzQztnQkFDbEQsSUFBSSxFQUFFLFlBQVk7Z0JBQ2xCLEdBQUcsRUFBRSxhQUFhO2dCQUNsQixHQUFHLEVBQUUsYUFBYTtnQkFDbEIsS0FBSyxFQUFFLEVBQUU7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLFlBQVksRUFBRSxvQ0FBZ0IsQ0FBQyxjQUFjO2dCQUM3QyxVQUFVLEVBQUUsZ0NBQWMsQ0FBQyxLQUFLO2FBQ2pDLENBQUM7WUFFRixNQUFNLFdBQVcsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDO1lBQ2hELDZCQUE2QixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FDcEQsOEJBQThCLENBQy9CLENBQUM7WUFFRixNQUFNLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFdBQWtCLENBQUMsQ0FBQztZQUV2RCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNpZGFkYW9cXGNvbnRyb2xsZXJzXFxjb21wb3NpY2FvLWZhbWlsaWFyLmNvbnRyb2xsZXIuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcbmltcG9ydCB7IENvbXBvc2ljYW9GYW1pbGlhckNvbnRyb2xsZXIgfSBmcm9tICcuL2NvbXBvc2ljYW8tZmFtaWxpYXIuY29udHJvbGxlcic7XG5pbXBvcnQgeyBDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvY29tcG9zaWNhby1mYW1pbGlhci5zZXJ2aWNlJztcbmltcG9ydCB7IENyZWF0ZUNvbXBvc2ljYW9GYW1pbGlhckR0byB9IGZyb20gJy4uL2R0by9jcmVhdGUtY29tcG9zaWNhby1mYW1pbGlhci5kdG8nO1xuaW1wb3J0IHsgVXBkYXRlQ29tcG9zaWNhb0ZhbWlsaWFyRHRvIH0gZnJvbSAnLi4vZHRvL3VwZGF0ZS1jb21wb3NpY2FvLWZhbWlsaWFyLmR0byc7XG5pbXBvcnQge1xuICBDb21wb3NpY2FvRmFtaWxpYXJSZXNwb25zZUR0byxcbiAgQ29tcG9zaWNhb0ZhbWlsaWFyUGFnaW5hdGVkUmVzcG9uc2VEdG8sXG59IGZyb20gJy4uL2R0by9jb21wb3NpY2FvLWZhbWlsaWFyLXJlc3BvbnNlLmR0byc7XG5pbXBvcnQge1xuICBOb3RGb3VuZEV4Y2VwdGlvbixcbiAgQ29uZmxpY3RFeGNlcHRpb24sXG4gIEJhZFJlcXVlc3RFeGNlcHRpb24sXG59IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IEVzY29sYXJpZGFkZUVudW0gfSBmcm9tICcuLi9lbnVtcy9lc2NvbGFyaWRhZGUuZW51bSc7XG5pbXBvcnQgeyBQYXJlbnRlc2NvRW51bSB9IGZyb20gJy4uL2VudW1zL3BhcmVudGVzY28uZW51bSc7XG5cbmRlc2NyaWJlKCdDb21wb3NpY2FvRmFtaWxpYXJDb250cm9sbGVyJywgKCkgPT4ge1xuICBsZXQgY29udHJvbGxlcjogQ29tcG9zaWNhb0ZhbWlsaWFyQ29udHJvbGxlcjtcbiAgbGV0IHNlcnZpY2U6IENvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2U7XG5cbiAgY29uc3QgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UgPSB7XG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgZmluZEJ5Q2lkYWRhbzogamVzdC5mbigpLFxuICAgIGZpbmRPbmU6IGplc3QuZm4oKSxcbiAgICB1cGRhdGU6IGplc3QuZm4oKSxcbiAgICByZW1vdmU6IGplc3QuZm4oKSxcbiAgICBmaW5kQnlDcGY6IGplc3QuZm4oKSxcbiAgfTtcblxuICBjb25zdCBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyUmVzcG9uc2U6IENvbXBvc2ljYW9GYW1pbGlhclJlc3BvbnNlRHRvID0ge1xuICAgIGlkOiAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwJyxcbiAgICBjaWRhZGFvX2lkOiAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAxJyxcbiAgICBub21lOiAnSm/Do28gU2lsdmEnLFxuICAgIGNwZjogJzEyMy40NTYuNzg5LTAwJyxcbiAgICBuaXM6ICcxMjM0NTY3ODkwMScsXG4gICAgaWRhZGU6IDI1LFxuICAgIG9jdXBhY2FvOiAnRXN0dWRhbnRlJyxcbiAgICBlc2NvbGFyaWRhZGU6IEVzY29sYXJpZGFkZUVudW0uTUVESU9fSU5DT01QTEVUTyxcbiAgICBwYXJlbnRlc2NvOiBQYXJlbnRlc2NvRW51bS5GSUxITyxcbiAgICByZW5kYTogMTUwMC4wLFxuICAgIG9ic2VydmFjb2VzOiAnT2JzZXJ2YcOnw7VlcyBkZSB0ZXN0ZScsXG4gICAgY3JlYXRlZF9hdDogbmV3IERhdGUoJzIwMjQtMDEtMDFUMTA6MDA6MDBaJyksXG4gICAgdXBkYXRlZF9hdDogbmV3IERhdGUoJzIwMjQtMDEtMDFUMTA6MDA6MDBaJyksXG4gICAgYXRpdm86IHRydWUsXG4gICAgY3BmX2Zvcm1hdGFkbzogJycsXG4gICAgZXNjb2xhcmlkYWRlX2Rlc2NyaWNhbzogJycsXG4gICAgcGFyZW50ZXNjb19kZXNjcmljYW86ICcnLFxuICB9O1xuXG4gIGNvbnN0IG1vY2tQYWdpbmF0ZWRSZXNwb25zZTogQ29tcG9zaWNhb0ZhbWlsaWFyUGFnaW5hdGVkUmVzcG9uc2VEdG8gPSB7XG4gICAgZGF0YTogW21vY2tDb21wb3NpY2FvRmFtaWxpYXJSZXNwb25zZV0sXG4gICAgbWV0YToge1xuICAgICAgdG90YWw6IDEsXG4gICAgICBwYWdlOiAxLFxuICAgICAgbGltaXQ6IDEwLFxuICAgICAgdG90YWxQYWdlczogMSxcbiAgICAgIGhhc05leHQ6IGZhbHNlLFxuICAgICAgaGFzUHJldjogZmFsc2UsXG4gICAgfSxcbiAgICBlc3RhdGlzdGljYXM6IHtcbiAgICAgIHRvdGFsTWVtYnJvczogMSxcbiAgICAgIHJlbmRhVG90YWw6IDE1MDAuMCxcbiAgICAgIHJlbmRhTWVkaWE6IDE1MDAuMCxcbiAgICAgIGlkYWRlTWVkaWE6IDI1LFxuICAgICAgbWVtYnJvc0NvbVJlbmRhOiAxLFxuICAgIH0sXG4gIH07XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGNvbnRyb2xsZXJzOiBbQ29tcG9zaWNhb0ZhbWlsaWFyQ29udHJvbGxlcl0sXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IG1vY2tDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KS5jb21waWxlKCk7XG5cbiAgICBjb250cm9sbGVyID0gbW9kdWxlLmdldDxDb21wb3NpY2FvRmFtaWxpYXJDb250cm9sbGVyPihcbiAgICAgIENvbXBvc2ljYW9GYW1pbGlhckNvbnRyb2xsZXIsXG4gICAgKTtcbiAgICBzZXJ2aWNlID0gbW9kdWxlLmdldDxDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlPihDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBkZWZpbmVkJywgKCkgPT4ge1xuICAgIGV4cGVjdChjb250cm9sbGVyKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JlYXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IGNyZWF0ZUR0bzogQ3JlYXRlQ29tcG9zaWNhb0ZhbWlsaWFyRHRvID0ge1xuICAgICAgY2lkYWRhb19pZDogJzEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMScsXG4gICAgICBub21lOiAnSm/Do28gU2lsdmEnLFxuICAgICAgY3BmOiAnMTIzNDU2Nzg5MDAnLFxuICAgICAgbmlzOiAnMTIzNDU2Nzg5MDEnLFxuICAgICAgaWRhZGU6IDI1LFxuICAgICAgb2N1cGFjYW86ICdFc3R1ZGFudGUnLFxuICAgICAgZXNjb2xhcmlkYWRlOiBFc2NvbGFyaWRhZGVFbnVtLk1FRElPX0NPTVBMRVRPLFxuICAgICAgcGFyZW50ZXNjbzogUGFyZW50ZXNjb0VudW0uRklMSE8sXG4gICAgICByZW5kYTogMTUwMC4wLFxuICAgICAgb2JzZXJ2YWNvZXM6ICdPYnNlcnZhw6fDtWVzIGRlIHRlc3RlJyxcbiAgICB9O1xuXG4gICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICB1c2VyOiB7IGlkOiAndXNlcjEyMycgfSxcbiAgICB9O1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBuZXcgY29tcG9zaWNhbyBmYW1pbGlhciBtZW1iZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoXG4gICAgICAgIG1vY2tDb21wb3NpY2FvRmFtaWxpYXJSZXNwb25zZSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuY3JlYXRlKGNyZWF0ZUR0bywgbW9ja1JlcXVlc3QgYXMgYW55KTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2UuY3JlYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjcmVhdGVEdG8sICd1c2VyMTIzJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tDb21wb3NpY2FvRmFtaWxpYXJSZXNwb25zZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IENvbmZsaWN0RXhjZXB0aW9uIHdoZW4gbWVtYmVyIGFscmVhZHkgZXhpc3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UuY3JlYXRlLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgICBuZXcgQ29uZmxpY3RFeGNlcHRpb24oXG4gICAgICAgICAgJ0rDoSBleGlzdGUgdW0gbWVtYnJvIGNvbSBlc3RlIENQRiBuYSBjb21wb3Npw6fDo28gZmFtaWxpYXInLFxuICAgICAgICApLFxuICAgICAgKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBjb250cm9sbGVyLmNyZWF0ZShjcmVhdGVEdG8sIG1vY2tSZXF1ZXN0IGFzIGFueSksXG4gICAgICApLnJlamVjdHMudG9UaHJvdyhDb25mbGljdEV4Y2VwdGlvbik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IEJhZFJlcXVlc3RFeGNlcHRpb24gZm9yIGludmFsaWQgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlLmNyZWF0ZS5tb2NrUmVqZWN0ZWRWYWx1ZShcbiAgICAgICAgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ0NQRiBpbnbDoWxpZG8nKSxcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgY29udHJvbGxlci5jcmVhdGUoY3JlYXRlRHRvLCBtb2NrUmVxdWVzdCBhcyBhbnkpLFxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coQmFkUmVxdWVzdEV4Y2VwdGlvbik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdmaW5kQnlDaWRhZGFvJywgKCkgPT4ge1xuICAgIGNvbnN0IGNpZGFkYW9JZCA9ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDEnO1xuICAgIGNvbnN0IHF1ZXJ5ID0geyBwYWdlOiAxLCBsaW1pdDogMTAgfTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIHBhZ2luYXRlZCBjb21wb3NpY2FvIGZhbWlsaWFyIG1lbWJlcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS5maW5kQnlDaWRhZGFvLm1vY2tSZXNvbHZlZFZhbHVlKFxuICAgICAgICBtb2NrUGFnaW5hdGVkUmVzcG9uc2UsXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmZpbmRCeUNpZGFkYW8oXG4gICAgICAgIGNpZGFkYW9JZCxcbiAgICAgICAgcXVlcnkucGFnZSxcbiAgICAgICAgcXVlcnkubGltaXQsXG4gICAgICApO1xuXG4gICAgICBleHBlY3Qoc2VydmljZS5maW5kQnlDaWRhZGFvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjaWRhZGFvSWQsIHF1ZXJ5KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1BhZ2luYXRlZFJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgTm90Rm91bmRFeGNlcHRpb24gd2hlbiBjaWRhZGFvIGRvZXMgbm90IGV4aXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UuZmluZEJ5Q2lkYWRhby5tb2NrUmVqZWN0ZWRWYWx1ZShcbiAgICAgICAgbmV3IE5vdEZvdW5kRXhjZXB0aW9uKCdDaWRhZMOjbyBuw6NvIGVuY29udHJhZG8nKSxcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChjb250cm9sbGVyLmZpbmRCeUNpZGFkYW8oY2lkYWRhb0lkLCAxLCAxMCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgTm90Rm91bmRFeGNlcHRpb24sXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1c2UgZGVmYXVsdCBwYWdpbmF0aW9uIHZhbHVlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlLmZpbmRCeUNpZGFkYW8ubW9ja1Jlc29sdmVkVmFsdWUoXG4gICAgICAgIG1vY2tQYWdpbmF0ZWRSZXNwb25zZSxcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGNvbnRyb2xsZXIuZmluZEJ5Q2lkYWRhbyhjaWRhZGFvSWQsIDEsIDEwKTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2UuZmluZEJ5Q2lkYWRhbykudG9IYXZlQmVlbkNhbGxlZFdpdGgoY2lkYWRhb0lkLCB7XG4gICAgICAgIHBhZ2U6IDEsXG4gICAgICAgIGxpbWl0OiAxMCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmluZE9uZScsICgpID0+IHtcbiAgICBjb25zdCBpZCA9ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBjb21wb3NpY2FvIGZhbWlsaWFyIG1lbWJlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlLmZpbmRPbmUubW9ja1Jlc29sdmVkVmFsdWUoXG4gICAgICAgIG1vY2tDb21wb3NpY2FvRmFtaWxpYXJSZXNwb25zZSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZmluZE9uZShpZCk7XG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLmZpbmRPbmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGlkKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0NvbXBvc2ljYW9GYW1pbGlhclJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgTm90Rm91bmRFeGNlcHRpb24gd2hlbiBtZW1iZXIgZG9lcyBub3QgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS5maW5kT25lLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgICBuZXcgTm90Rm91bmRFeGNlcHRpb24oJ01lbWJybyBkYSBjb21wb3Npw6fDo28gZmFtaWxpYXIgbsOjbyBlbmNvbnRyYWRvJyksXG4gICAgICApO1xuXG4gICAgICBhd2FpdCBleHBlY3QoY29udHJvbGxlci5maW5kT25lKGlkKSkucmVqZWN0cy50b1Rocm93KE5vdEZvdW5kRXhjZXB0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3VwZGF0ZScsICgpID0+IHtcbiAgICBjb25zdCBpZCA9ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnO1xuICAgIGNvbnN0IHVwZGF0ZUR0bzogVXBkYXRlQ29tcG9zaWNhb0ZhbWlsaWFyRHRvID0ge1xuICAgICAgbm9tZTogJ0pvw6NvIFNpbHZhIEF0dWFsaXphZG8nLFxuICAgICAgcmVuZGE6IDIwMDAuMCxcbiAgICB9O1xuXG4gICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICB1c2VyOiB7IGlkOiAndXNlcjEyMycgfSxcbiAgICB9O1xuXG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgYSBjb21wb3NpY2FvIGZhbWlsaWFyIG1lbWJlcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRSZXNwb25zZSA9IHtcbiAgICAgICAgLi4ubW9ja0NvbXBvc2ljYW9GYW1pbGlhclJlc3BvbnNlLFxuICAgICAgICBub21lOiAnSm/Do28gU2lsdmEgQXR1YWxpemFkbycsXG4gICAgICAgIHJlbmRhOiAyMDAwLjAsXG4gICAgICB9O1xuICAgICAgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UudXBkYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHVwZGF0ZWRSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIudXBkYXRlKGlkLCB1cGRhdGVEdG8sIG1vY2tSZXF1ZXN0IGFzIGFueSk7XG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLnVwZGF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoaWQsIHVwZGF0ZUR0bywgJ3VzZXIxMjMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwodXBkYXRlZFJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgTm90Rm91bmRFeGNlcHRpb24gd2hlbiBtZW1iZXIgZG9lcyBub3QgZXhpc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS51cGRhdGUubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBOb3RGb3VuZEV4Y2VwdGlvbignTWVtYnJvIGRhIGNvbXBvc2nDp8OjbyBmYW1pbGlhciBuw6NvIGVuY29udHJhZG8nKSxcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgY29udHJvbGxlci51cGRhdGUoaWQsIHVwZGF0ZUR0bywgbW9ja1JlcXVlc3QgYXMgYW55KSxcbiAgICAgICkucmVqZWN0cy50b1Rocm93KE5vdEZvdW5kRXhjZXB0aW9uKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgQ29uZmxpY3RFeGNlcHRpb24gZm9yIGR1cGxpY2F0ZSBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UudXBkYXRlLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgICBuZXcgQ29uZmxpY3RFeGNlcHRpb24oXG4gICAgICAgICAgJ0rDoSBleGlzdGUgdW0gbWVtYnJvIGNvbSBlc3RlIG5vbWUgbmEgY29tcG9zacOnw6NvIGZhbWlsaWFyJyxcbiAgICAgICAgKSxcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgY29udHJvbGxlci51cGRhdGUoaWQsIHVwZGF0ZUR0bywgbW9ja1JlcXVlc3QgYXMgYW55KSxcbiAgICAgICkucmVqZWN0cy50b1Rocm93KENvbmZsaWN0RXhjZXB0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlbW92ZScsICgpID0+IHtcbiAgICBjb25zdCBpZCA9ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnO1xuICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0ge1xuICAgICAgdXNlcjogeyBpZDogJ3VzZXIxMjMnIH0sXG4gICAgfTtcblxuICAgIGl0KCdzaG91bGQgcmVtb3ZlIGEgY29tcG9zaWNhbyBmYW1pbGlhciBtZW1iZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS5yZW1vdmUubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgYXdhaXQgY29udHJvbGxlci5yZW1vdmUoaWQsIG1vY2tSZXF1ZXN0IGFzIGFueSk7XG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLnJlbW92ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoaWQsICd1c2VyMTIzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRocm93IE5vdEZvdW5kRXhjZXB0aW9uIHdoZW4gbWVtYmVyIGRvZXMgbm90IGV4aXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UucmVtb3ZlLm1vY2tSZWplY3RlZFZhbHVlKFxuICAgICAgICBuZXcgTm90Rm91bmRFeGNlcHRpb24oJ01lbWJybyBkYSBjb21wb3Npw6fDo28gZmFtaWxpYXIgbsOjbyBlbmNvbnRyYWRvJyksXG4gICAgICApO1xuXG4gICAgICBhd2FpdCBleHBlY3QoY29udHJvbGxlci5yZW1vdmUoaWQsIG1vY2tSZXF1ZXN0IGFzIGFueSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgTm90Rm91bmRFeGNlcHRpb24sXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmluZEJ5Q3BmJywgKCkgPT4ge1xuICAgIGNvbnN0IGNwZiA9ICcxMjM0NTY3ODkwMCc7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBjb21wb3NpY2FvIGZhbWlsaWFyIG1lbWJlcnMgYnkgQ1BGJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXhwZWN0ZWRSZXNwb25zZSA9IFttb2NrQ29tcG9zaWNhb0ZhbWlsaWFyUmVzcG9uc2VdO1xuICAgICAgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclNlcnZpY2UuZmluZEJ5Q3BmLm1vY2tSZXNvbHZlZFZhbHVlKFxuICAgICAgICBleHBlY3RlZFJlc3BvbnNlLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5maW5kQnlDcGYoY3BmKTtcblxuICAgICAgZXhwZWN0KHNlcnZpY2UuZmluZEJ5Q3BmKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjcGYpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgQmFkUmVxdWVzdEV4Y2VwdGlvbiBmb3IgaW52YWxpZCBDUEYnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS5maW5kQnlDcGYubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBCYWRSZXF1ZXN0RXhjZXB0aW9uKCdDUEYgZGV2ZSB0ZXIgMTEgZMOtZ2l0b3MnKSxcbiAgICAgICk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChjb250cm9sbGVyLmZpbmRCeUNwZignMTIzJykpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgQmFkUmVxdWVzdEV4Y2VwdGlvbixcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBlbXB0eSBhcnJheSB3aGVuIG5vIG1lbWJlcnMgZm91bmQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS5maW5kQnlDcGYubW9ja1Jlc29sdmVkVmFsdWUoW10pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmZpbmRCeUNwZihjcGYpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKFtdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0lucHV0IHZhbGlkYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBVVUlEIGZvcm1hdCBmb3IgSUQgcGFyYW1ldGVycycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWRJZCA9ICdpbnZhbGlkLXV1aWQnO1xuXG4gICAgICAvLyBPIGNvbnRyb2xsZXIgZGV2ZSB2YWxpZGFyIFVVSURzIGF0cmF2w6lzIGRvcyBkZWNvcmF0b3JzXG4gICAgICAvLyBFc3RlIHRlc3RlIHZlcmlmaWNhIHNlIGEgdmFsaWRhw6fDo28gZXN0w6EgY29uZmlndXJhZGEgY29ycmV0YW1lbnRlXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAvLyBTaW11bGHDp8OjbyBkZSB2YWxpZGHDp8OjbyBkZSBVVUlEXG4gICAgICAgIGNvbnN0IHV1aWRSZWdleCA9XG4gICAgICAgICAgL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfSQvaTtcbiAgICAgICAgaWYgKCF1dWlkUmVnZXgudGVzdChpbnZhbGlkSWQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ0lEIGRldmUgc2VyIHVtIFVVSUQgdsOhbGlkbycpO1xuICAgICAgICB9XG4gICAgICB9KS50b1Rocm93KEJhZFJlcXVlc3RFeGNlcHRpb24pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBwYWdpbmF0aW9uIHBhcmFtZXRlcnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkUXVlcnkgPSB7IHBhZ2U6IC0xLCBsaW1pdDogMCB9O1xuXG4gICAgICAvLyBWYWxpZGHDp8OjbyBkZSBwYXLDom1ldHJvcyBkZSBwYWdpbmHDp8Ojb1xuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKGludmFsaWRRdWVyeS5wYWdlIDwgMSB8fCBpbnZhbGlkUXVlcnkubGltaXQgPCAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ1BhcsOibWV0cm9zIGRlIHBhZ2luYcOnw6NvIGludsOhbGlkb3MnKTtcbiAgICAgICAgfVxuICAgICAgfSkudG9UaHJvdyhCYWRSZXF1ZXN0RXhjZXB0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Vycm9yIGhhbmRsaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNlcnZpY2UgZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVEdG86IENyZWF0ZUNvbXBvc2ljYW9GYW1pbGlhckR0byA9IHtcbiAgICAgICAgY2lkYWRhb19pZDogJzEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMScsXG4gICAgICAgIG5vbWU6ICdKb8OjbyBTaWx2YScsXG4gICAgICAgIGNwZjogJzEyMzQ1Njc4OTAwJyxcbiAgICAgICAgbmlzOiAnMTIzNDU2Nzg5MDEnLFxuICAgICAgICBpZGFkZTogMjUsXG4gICAgICAgIG9jdXBhY2FvOiAnRXN0dWRhbnRlJyxcbiAgICAgICAgZXNjb2xhcmlkYWRlOiBFc2NvbGFyaWRhZGVFbnVtLk1FRElPX0NPTVBMRVRPLFxuICAgICAgICBwYXJlbnRlc2NvOiBQYXJlbnRlc2NvRW51bS5GSUxITyxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0geyB1c2VyOiB7IGlkOiAndXNlcjEyMycgfSB9O1xuXG4gICAgICBtb2NrQ29tcG9zaWNhb0ZhbWlsaWFyU2VydmljZS5jcmVhdGUubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBFcnJvcignRXJybyBpbnRlcm5vIGRvIHNlcnZpZG9yJyksXG4gICAgICApO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIGNvbnRyb2xsZXIuY3JlYXRlKGNyZWF0ZUR0bywgbW9ja1JlcXVlc3QgYXMgYW55KSxcbiAgICAgICkucmVqZWN0cy50b1Rocm93KCdFcnJvIGludGVybm8gZG8gc2Vydmlkb3InKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0F1dGhvcml6YXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBleHRyYWN0IHVzZXIgSUQgZnJvbSByZXF1ZXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY3JlYXRlRHRvOiBDcmVhdGVDb21wb3NpY2FvRmFtaWxpYXJEdG8gPSB7XG4gICAgICAgIGNpZGFkYW9faWQ6ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDEnLFxuICAgICAgICBub21lOiAnSm/Do28gU2lsdmEnLFxuICAgICAgICBjcGY6ICcxMjM0NTY3ODkwMCcsXG4gICAgICAgIG5pczogJzEyMzQ1Njc4OTAxJyxcbiAgICAgICAgaWRhZGU6IDI1LFxuICAgICAgICBvY3VwYWNhbzogJ0VzdHVkYW50ZScsXG4gICAgICAgIGVzY29sYXJpZGFkZTogRXNjb2xhcmlkYWRlRW51bS5NRURJT19DT01QTEVUTyxcbiAgICAgICAgcGFyZW50ZXNjbzogUGFyZW50ZXNjb0VudW0uRklMSE8sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IHsgdXNlcjogeyBpZDogJ3VzZXIxMjMnIH0gfTtcbiAgICAgIG1vY2tDb21wb3NpY2FvRmFtaWxpYXJTZXJ2aWNlLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShcbiAgICAgICAgbW9ja0NvbXBvc2ljYW9GYW1pbGlhclJlc3BvbnNlLFxuICAgICAgKTtcblxuICAgICAgYXdhaXQgY29udHJvbGxlci5jcmVhdGUoY3JlYXRlRHRvLCBtb2NrUmVxdWVzdCBhcyBhbnkpO1xuXG4gICAgICBleHBlY3Qoc2VydmljZS5jcmVhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGNyZWF0ZUR0bywgJ3VzZXIxMjMnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==