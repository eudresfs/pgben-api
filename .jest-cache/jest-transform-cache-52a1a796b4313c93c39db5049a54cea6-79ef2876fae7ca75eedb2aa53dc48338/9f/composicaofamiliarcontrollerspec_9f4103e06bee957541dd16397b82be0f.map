{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\composicao-familiar.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\composicao-familiar.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ComposicaoFamiliarController } from './composicao-familiar.controller';\nimport { ComposicaoFamiliarService } from '../services/composicao-familiar.service';\nimport { CreateComposicaoFamiliarDto } from '../dto/create-composicao-familiar.dto';\nimport { UpdateComposicaoFamiliarDto } from '../dto/update-composicao-familiar.dto';\nimport {\n  ComposicaoFamiliarResponseDto,\n  ComposicaoFamiliarPaginatedResponseDto,\n} from '../dto/composicao-familiar-response.dto';\nimport {\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { EscolaridadeEnum } from '../enums/escolaridade.enum';\nimport { ParentescoEnum } from '../enums/parentesco.enum';\n\ndescribe('ComposicaoFamiliarController', () => {\n  let controller: ComposicaoFamiliarController;\n  let service: ComposicaoFamiliarService;\n\n  const mockComposicaoFamiliarService = {\n    create: jest.fn(),\n    findByCidadao: jest.fn(),\n    findOne: jest.fn(),\n    update: jest.fn(),\n    remove: jest.fn(),\n    findByCpf: jest.fn(),\n  };\n\n  const mockComposicaoFamiliarResponse: ComposicaoFamiliarResponseDto = {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\n    nome: 'João Silva',\n    cpf: '123.456.789-00',\n    nis: '12345678901',\n    idade: 25,\n    ocupacao: 'Estudante',\n    escolaridade: EscolaridadeEnum.MEDIO_INCOMPLETO,\n    parentesco: ParentescoEnum.FILHO,\n    renda: 1500.0,\n    observacoes: 'Observações de teste',\n    created_at: new Date('2024-01-01T10:00:00Z'),\n    updated_at: new Date('2024-01-01T10:00:00Z'),\n    ativo: true,\n    cpf_formatado: '',\n    escolaridade_descricao: '',\n    parentesco_descricao: '',\n  };\n\n  const mockPaginatedResponse: ComposicaoFamiliarPaginatedResponseDto = {\n    data: [mockComposicaoFamiliarResponse],\n    meta: {\n      total: 1,\n      page: 1,\n      limit: 10,\n      totalPages: 1,\n      hasNext: false,\n      hasPrev: false,\n    },\n    estatisticas: {\n      totalMembros: 1,\n      rendaTotal: 1500.0,\n      rendaMedia: 1500.0,\n      idadeMedia: 25,\n      membrosComRenda: 1,\n    },\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [ComposicaoFamiliarController],\n      providers: [\n        {\n          provide: ComposicaoFamiliarService,\n          useValue: mockComposicaoFamiliarService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<ComposicaoFamiliarController>(\n      ComposicaoFamiliarController,\n    );\n    service = module.get<ComposicaoFamiliarService>(ComposicaoFamiliarService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('create', () => {\n    const createDto: CreateComposicaoFamiliarDto = {\n      cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\n      nome: 'João Silva',\n      cpf: '12345678900',\n      nis: '12345678901',\n      idade: 25,\n      ocupacao: 'Estudante',\n      escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n      parentesco: ParentescoEnum.FILHO,\n      renda: 1500.0,\n      observacoes: 'Observações de teste',\n    };\n\n    const mockRequest = {\n      user: { id: 'user123' },\n    };\n\n    it('should create a new composicao familiar member', async () => {\n      mockComposicaoFamiliarService.create.mockResolvedValue(\n        mockComposicaoFamiliarResponse,\n      );\n\n      const result = await controller.create(createDto, mockRequest as any);\n\n      expect(service.create).toHaveBeenCalledWith(createDto, 'user123');\n      expect(result).toEqual(mockComposicaoFamiliarResponse);\n    });\n\n    it('should throw ConflictException when member already exists', async () => {\n      mockComposicaoFamiliarService.create.mockRejectedValue(\n        new ConflictException(\n          'Já existe um membro com este CPF na composição familiar',\n        ),\n      );\n\n      await expect(\n        controller.create(createDto, mockRequest as any),\n      ).rejects.toThrow(ConflictException);\n    });\n\n    it('should throw BadRequestException for invalid data', async () => {\n      mockComposicaoFamiliarService.create.mockRejectedValue(\n        new BadRequestException('CPF inválido'),\n      );\n\n      await expect(\n        controller.create(createDto, mockRequest as any),\n      ).rejects.toThrow(BadRequestException);\n    });\n  });\n\n  describe('findByCidadao', () => {\n    const cidadaoId = '123e4567-e89b-12d3-a456-426614174001';\n    const query = { page: 1, limit: 10 };\n\n    it('should return paginated composicao familiar members', async () => {\n      mockComposicaoFamiliarService.findByCidadao.mockResolvedValue(\n        mockPaginatedResponse,\n      );\n\n      const result = await controller.findByCidadao(\n        cidadaoId,\n        query.page,\n        query.limit,\n      );\n\n      expect(service.findByCidadao).toHaveBeenCalledWith(cidadaoId, query);\n      expect(result).toEqual(mockPaginatedResponse);\n    });\n\n    it('should throw NotFoundException when cidadao does not exist', async () => {\n      mockComposicaoFamiliarService.findByCidadao.mockRejectedValue(\n        new NotFoundException('Cidadão não encontrado'),\n      );\n\n      await expect(controller.findByCidadao(cidadaoId, 1, 10)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('should use default pagination values', async () => {\n      mockComposicaoFamiliarService.findByCidadao.mockResolvedValue(\n        mockPaginatedResponse,\n      );\n\n      await controller.findByCidadao(cidadaoId, 1, 10);\n\n      expect(service.findByCidadao).toHaveBeenCalledWith(cidadaoId, {\n        page: 1,\n        limit: 10,\n      });\n    });\n  });\n\n  describe('findOne', () => {\n    const id = '123e4567-e89b-12d3-a456-426614174000';\n\n    it('should return a composicao familiar member', async () => {\n      mockComposicaoFamiliarService.findOne.mockResolvedValue(\n        mockComposicaoFamiliarResponse,\n      );\n\n      const result = await controller.findOne(id);\n\n      expect(service.findOne).toHaveBeenCalledWith(id);\n      expect(result).toEqual(mockComposicaoFamiliarResponse);\n    });\n\n    it('should throw NotFoundException when member does not exist', async () => {\n      mockComposicaoFamiliarService.findOne.mockRejectedValue(\n        new NotFoundException('Membro da composição familiar não encontrado'),\n      );\n\n      await expect(controller.findOne(id)).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('update', () => {\n    const id = '123e4567-e89b-12d3-a456-426614174000';\n    const updateDto: UpdateComposicaoFamiliarDto = {\n      nome: 'João Silva Atualizado',\n      renda: 2000.0,\n    };\n\n    const mockRequest = {\n      user: { id: 'user123' },\n    };\n\n    it('should update a composicao familiar member', async () => {\n      const updatedResponse = {\n        ...mockComposicaoFamiliarResponse,\n        nome: 'João Silva Atualizado',\n        renda: 2000.0,\n      };\n      mockComposicaoFamiliarService.update.mockResolvedValue(updatedResponse);\n\n      const result = await controller.update(id, updateDto, mockRequest as any);\n\n      expect(service.update).toHaveBeenCalledWith(id, updateDto, 'user123');\n      expect(result).toEqual(updatedResponse);\n    });\n\n    it('should throw NotFoundException when member does not exist', async () => {\n      mockComposicaoFamiliarService.update.mockRejectedValue(\n        new NotFoundException('Membro da composição familiar não encontrado'),\n      );\n\n      await expect(\n        controller.update(id, updateDto, mockRequest as any),\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('should throw ConflictException for duplicate data', async () => {\n      mockComposicaoFamiliarService.update.mockRejectedValue(\n        new ConflictException(\n          'Já existe um membro com este nome na composição familiar',\n        ),\n      );\n\n      await expect(\n        controller.update(id, updateDto, mockRequest as any),\n      ).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('remove', () => {\n    const id = '123e4567-e89b-12d3-a456-426614174000';\n    const mockRequest = {\n      user: { id: 'user123' },\n    };\n\n    it('should remove a composicao familiar member', async () => {\n      mockComposicaoFamiliarService.remove.mockResolvedValue(undefined);\n\n      await controller.remove(id, mockRequest as any);\n\n      expect(service.remove).toHaveBeenCalledWith(id, 'user123');\n    });\n\n    it('should throw NotFoundException when member does not exist', async () => {\n      mockComposicaoFamiliarService.remove.mockRejectedValue(\n        new NotFoundException('Membro da composição familiar não encontrado'),\n      );\n\n      await expect(controller.remove(id, mockRequest as any)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('findByCpf', () => {\n    const cpf = '12345678900';\n\n    it('should return composicao familiar members by CPF', async () => {\n      const expectedResponse = [mockComposicaoFamiliarResponse];\n      mockComposicaoFamiliarService.findByCpf.mockResolvedValue(\n        expectedResponse,\n      );\n\n      const result = await controller.findByCpf(cpf);\n\n      expect(service.findByCpf).toHaveBeenCalledWith(cpf);\n      expect(result).toEqual(expectedResponse);\n    });\n\n    it('should throw BadRequestException for invalid CPF', async () => {\n      mockComposicaoFamiliarService.findByCpf.mockRejectedValue(\n        new BadRequestException('CPF deve ter 11 dígitos'),\n      );\n\n      await expect(controller.findByCpf('123')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('should return empty array when no members found', async () => {\n      mockComposicaoFamiliarService.findByCpf.mockResolvedValue([]);\n\n      const result = await controller.findByCpf(cpf);\n\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('Input validation', () => {\n    it('should validate UUID format for ID parameters', async () => {\n      const invalidId = 'invalid-uuid';\n\n      // O controller deve validar UUIDs através dos decorators\n      // Este teste verifica se a validação está configurada corretamente\n      expect(() => {\n        // Simulação de validação de UUID\n        const uuidRegex =\n          /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n        if (!uuidRegex.test(invalidId)) {\n          throw new BadRequestException('ID deve ser um UUID válido');\n        }\n      }).toThrow(BadRequestException);\n    });\n\n    it('should validate pagination parameters', () => {\n      const invalidQuery = { page: -1, limit: 0 };\n\n      // Validação de parâmetros de paginação\n      expect(() => {\n        if (invalidQuery.page < 1 || invalidQuery.limit < 1) {\n          throw new BadRequestException('Parâmetros de paginação inválidos');\n        }\n      }).toThrow(BadRequestException);\n    });\n  });\n\n  describe('Error handling', () => {\n    it('should handle service errors gracefully', async () => {\n      const createDto: CreateComposicaoFamiliarDto = {\n        cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\n        nome: 'João Silva',\n        cpf: '12345678900',\n        nis: '12345678901',\n        idade: 25,\n        ocupacao: 'Estudante',\n        escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n        parentesco: ParentescoEnum.FILHO,\n      };\n\n      const mockRequest = { user: { id: 'user123' } };\n\n      mockComposicaoFamiliarService.create.mockRejectedValue(\n        new Error('Erro interno do servidor'),\n      );\n\n      await expect(\n        controller.create(createDto, mockRequest as any),\n      ).rejects.toThrow('Erro interno do servidor');\n    });\n  });\n\n  describe('Authorization', () => {\n    it('should extract user ID from request', async () => {\n      const createDto: CreateComposicaoFamiliarDto = {\n        cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\n        nome: 'João Silva',\n        cpf: '12345678900',\n        nis: '12345678901',\n        idade: 25,\n        ocupacao: 'Estudante',\n        escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n        parentesco: ParentescoEnum.FILHO,\n      };\n\n      const mockRequest = { user: { id: 'user123' } };\n      mockComposicaoFamiliarService.create.mockResolvedValue(\n        mockComposicaoFamiliarResponse,\n      );\n\n      await controller.create(createDto, mockRequest as any);\n\n      expect(service.create).toHaveBeenCalledWith(createDto, 'user123');\n    });\n  });\n});\n"],"version":3}