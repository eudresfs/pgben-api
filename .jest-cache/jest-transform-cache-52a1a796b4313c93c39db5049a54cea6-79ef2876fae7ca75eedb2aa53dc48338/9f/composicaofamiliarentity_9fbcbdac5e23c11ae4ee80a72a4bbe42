e447316a64edc3135dfefe55910a0262
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComposicaoFamiliar = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const cidadao_entity_1 = require("./cidadao.entity");
const escolaridade_enum_1 = require("../enums/escolaridade.enum");
const cpf_validator_1 = require("../modules/cidadao/validators/cpf-validator");
const parentesco_enum_1 = require("../enums/parentesco.enum");
let ComposicaoFamiliar = class ComposicaoFamiliar {
    id;
    cidadao_id;
    cidadao;
    nome;
    cpf;
    nis;
    idade;
    ocupacao;
    escolaridade;
    parentesco;
    renda;
    observacoes;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get cidadaoId() {
        return this.cidadao_id;
    }
    set cidadaoId(value) {
        this.cidadao_id = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se o membro foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se o membro foi removido
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se o membro está ativo
     */
    isAtivo() {
        return !this.removed_at;
    }
    /**
     * Verifica se é menor de idade
     */
    isMenorIdade() {
        return this.idade < 18;
    }
    /**
     * Verifica se é maior de idade
     */
    isMaiorIdade() {
        return this.idade >= 18;
    }
    /**
     * Verifica se é idoso (65 anos ou mais)
     */
    isIdoso() {
        return this.idade >= 65;
    }
    /**
     * Verifica se é criança (0-12 anos)
     */
    isCrianca() {
        return this.idade >= 0 && this.idade <= 12;
    }
    /**
     * Verifica se é adolescente (13-17 anos)
     */
    isAdolescente() {
        return this.idade >= 13 && this.idade <= 17;
    }
    /**
     * Verifica se é adulto (18-64 anos)
     */
    isAdulto() {
        return this.idade >= 18 && this.idade <= 64;
    }
    /**
     * Obtém a faixa etária
     */
    getFaixaEtaria() {
        if (this.isCrianca())
            return 'Criança';
        if (this.isAdolescente())
            return 'Adolescente';
        if (this.isAdulto())
            return 'Adulto';
        if (this.isIdoso())
            return 'Idoso';
        return 'Indefinido';
    }
    /**
     * Verifica se tem renda
     */
    temRenda() {
        return this.renda !== null && this.renda !== undefined && this.renda > 0;
    }
    /**
     * Obtém a renda formatada
     */
    getRendaFormatada() {
        if (!this.temRenda())
            return 'Sem renda';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(this.renda);
    }
    /**
     * Verifica se tem NIS
     */
    temNIS() {
        return !!(this.nis && this.nis.trim());
    }
    /**
     * Verifica se é cônjuge
     */
    isConjuge() {
        return this.parentesco === parentesco_enum_1.ParentescoEnum.CONJUGE;
    }
    /**
     * Verifica se é filho(a)
     */
    isFilho() {
        return this.parentesco === parentesco_enum_1.ParentescoEnum.FILHO;
    }
    /**
     * Verifica se é pai/mãe
     */
    isPai() {
        return this.parentesco === parentesco_enum_1.ParentescoEnum.PAI || this.parentesco === parentesco_enum_1.ParentescoEnum.MAE;
    }
    /**
     * Verifica se é irmão(ã)
     */
    isIrmao() {
        return this.parentesco === parentesco_enum_1.ParentescoEnum.IRMAO;
    }
    /**
     * Verifica se é avô/avó
     */
    isAvo() {
        return this.parentesco === parentesco_enum_1.ParentescoEnum.AVO;
    }
    /**
     * Verifica se é neto(a)
     */
    isNeto() {
        return this.parentesco === parentesco_enum_1.ParentescoEnum.NETO;
    }
    /**
     * Obtém a descrição do parentesco
     */
    getDescricaoParentesco() {
        const descricoes = {
            [parentesco_enum_1.ParentescoEnum.CONJUGE]: 'Cônjuge',
            [parentesco_enum_1.ParentescoEnum.FILHO]: 'Filho(a)',
            [parentesco_enum_1.ParentescoEnum.PAI]: 'Pai',
            [parentesco_enum_1.ParentescoEnum.MAE]: 'Mãe',
            [parentesco_enum_1.ParentescoEnum.IRMAO]: 'Irmão(ã)',
            [parentesco_enum_1.ParentescoEnum.AVO]: 'Avô/Avó',
            [parentesco_enum_1.ParentescoEnum.NETO]: 'Neto(a)',
            [parentesco_enum_1.ParentescoEnum.TIO]: 'Tio(a)',
            [parentesco_enum_1.ParentescoEnum.SOBRINHO]: 'Sobrinho(a)',
            [parentesco_enum_1.ParentescoEnum.OUTRO]: 'Outro',
        };
        return descricoes[this.parentesco] || this.parentesco;
    }
    /**
     * Obtém a descrição da escolaridade
     */
    getDescricaoEscolaridade() {
        const descricoes = {
            [escolaridade_enum_1.EscolaridadeEnum.ANALFABETO]: 'Analfabeto',
            [escolaridade_enum_1.EscolaridadeEnum.FUNDAMENTAL_INCOMPLETO]: 'Fundamental Incompleto',
            [escolaridade_enum_1.EscolaridadeEnum.FUNDAMENTAL_COMPLETO]: 'Fundamental Completo',
            [escolaridade_enum_1.EscolaridadeEnum.MEDIO_INCOMPLETO]: 'Médio Incompleto',
            [escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO]: 'Médio Completo',
            [escolaridade_enum_1.EscolaridadeEnum.SUPERIOR_INCOMPLETO]: 'Superior Incompleto',
            [escolaridade_enum_1.EscolaridadeEnum.SUPERIOR_COMPLETO]: 'Superior Completo',
            [escolaridade_enum_1.EscolaridadeEnum.POS_GRADUACAO]: 'Pós-graduação',
        };
        return descricoes[this.escolaridade] || this.escolaridade;
    }
    /**
     * Verifica se pertence a um cidadão específico
     */
    pertenceAoCidadao(cidadaoId) {
        return this.cidadao_id === cidadaoId;
    }
    /**
     * Obtém um resumo do membro familiar
     */
    getSummary() {
        const renda = this.temRenda() ? ` - ${this.getRendaFormatada()}` : ' - Sem renda';
        return `${this.nome} (${this.getDescricaoParentesco()}, ${this.idade} anos)${renda}`;
    }
    /**
     * Gera uma chave única para o membro
     */
    getUniqueKey() {
        return `${this.cidadao_id}_${this.cpf}_${this.parentesco}`;
    }
    /**
     * Verifica se os dados são consistentes
     */
    isConsistente() {
        // Verifica se tem cidadão
        if (!this.cidadao_id)
            return false;
        // Verifica se tem nome
        if (!this.nome || !this.nome.trim())
            return false;
        // Verifica se tem CPF
        if (!this.cpf || !this.cpf.trim())
            return false;
        // Verifica se a idade é válida
        if (this.idade < 0 || this.idade > 150)
            return false;
        // Verifica se tem ocupação
        if (!this.ocupacao || !this.ocupacao.trim())
            return false;
        // Se tem renda, deve ser positiva
        if (this.renda !== null && this.renda !== undefined && this.renda < 0) {
            return false;
        }
        return true;
    }
    /**
     * Verifica se pode ser removido
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        // Outras validações específicas podem ser adicionadas
        return true;
    }
    /**
     * Clona o membro familiar (sem ID)
     */
    clone() {
        return {
            cidadao_id: this.cidadao_id,
            nome: this.nome,
            cpf: this.cpf,
            nis: this.nis,
            idade: this.idade,
            ocupacao: this.ocupacao,
            escolaridade: this.escolaridade,
            parentesco: this.parentesco,
            renda: this.renda,
            observacoes: this.observacoes,
        };
    }
    /**
     * Verifica se é dependente econômico (menor de idade ou sem renda)
     */
    isDependenteEconomico() {
        return this.isMenorIdade() || !this.temRenda();
    }
    /**
     * Verifica se contribui para a renda familiar
     */
    contribuiParaRenda() {
        return this.temRenda() && this.isMaiorIdade();
    }
    /**
     * Obtém o CPF formatado
     */
    getCpfFormatado() {
        if (!this.cpf)
            return '';
        const cpfLimpo = this.cpf.replace(/\D/g, '');
        return cpfLimpo.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            nome: this.nome.substring(0, 3) + '***',
            idade: this.idade,
            parentesco: this.parentesco,
            escolaridade: this.escolaridade,
            ocupacao: this.ocupacao,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Verifica se é prioritário para benefícios (idoso, criança, deficiente)
     */
    isPrioritario() {
        return this.isIdoso() || this.isCrianca();
    }
    /**
     * Obtém sugestões de verificação para o membro
     */
    getSugestoesVerificacao() {
        const sugestoes = [];
        if (!this.temNIS()) {
            sugestoes.push('Cadastrar NIS do membro familiar');
        }
        if (this.isMaiorIdade() && !this.temRenda() && !this.ocupacao.toLowerCase().includes('estudante')) {
            sugestoes.push('Verificar situação de trabalho/renda');
        }
        if (!this.observacoes && this.isPrioritario()) {
            sugestoes.push('Adicionar observações sobre condições especiais');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar consistência dos dados do membro');
        }
        return sugestoes;
    }
    /**
     * Calcula a contribuição percentual para a renda familiar
     */
    getContribuicaoPercentual(rendaFamiliarTotal) {
        if (!this.temRenda() || !rendaFamiliarTotal || rendaFamiliarTotal <= 0) {
            return 0;
        }
        return (this.renda / rendaFamiliarTotal) * 100;
    }
};
exports.ComposicaoFamiliar = ComposicaoFamiliar;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], ComposicaoFamiliar.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do cidadão é obrigatório' }),
    __metadata("design:type", String)
], ComposicaoFamiliar.prototype, "cidadao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => cidadao_entity_1.Cidadao, (cidadao) => cidadao.composicao_familiar, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'cidadao_id' }),
    __metadata("design:type", typeof (_a = typeof cidadao_entity_1.Cidadao !== "undefined" && cidadao_entity_1.Cidadao) === "function" ? _a : Object)
], ComposicaoFamiliar.prototype, "cidadao", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome é obrigatório' }),
    __metadata("design:type", String)
], ComposicaoFamiliar.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: false }),
    (0, class_validator_1.IsNotEmpty)({ message: 'CPF é obrigatório' }),
    (0, class_validator_1.Length)(11, 14, { message: 'CPF deve ter entre 11 e 14 caracteres' }),
    (0, class_validator_1.Validate)(cpf_validator_1.CPFValidator, { message: 'CPF inválido' }),
    __metadata("design:type", String)
], ComposicaoFamiliar.prototype, "cpf", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsNotEmpty)({ message: 'NIS do parente é obrigatório' }),
    __metadata("design:type", String)
], ComposicaoFamiliar.prototype, "nis", void 0);
__decorate([
    (0, typeorm_1.Column)('integer'),
    (0, class_validator_1.IsNotEmpty)({ message: 'Idade do parente é obrigatório' }),
    (0, class_validator_1.IsNumber)({}, { message: 'Idade deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Idade não pode ser negativa' }),
    __metadata("design:type", Number)
], ComposicaoFamiliar.prototype, "idade", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome é obrigatório' }),
    __metadata("design:type", String)
], ComposicaoFamiliar.prototype, "ocupacao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: escolaridade_enum_1.EscolaridadeEnum,
        enumName: 'escolaridade_enum',
        nullable: false,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Escolaridade é obrigatória' }),
    (0, class_validator_1.IsEnum)(escolaridade_enum_1.EscolaridadeEnum, { message: 'Escolaridade inválida' }),
    __metadata("design:type", typeof (_b = typeof escolaridade_enum_1.EscolaridadeEnum !== "undefined" && escolaridade_enum_1.EscolaridadeEnum) === "function" ? _b : Object)
], ComposicaoFamiliar.prototype, "escolaridade", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: parentesco_enum_1.ParentescoEnum,
        enumName: 'parentesco',
        default: parentesco_enum_1.ParentescoEnum.OUTRO,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Parentesco é obrigatório' }),
    __metadata("design:type", typeof (_c = typeof parentesco_enum_1.ParentescoEnum !== "undefined" && parentesco_enum_1.ParentescoEnum) === "function" ? _c : Object)
], ComposicaoFamiliar.prototype, "parentesco", void 0);
__decorate([
    (0, typeorm_1.Column)('decimal', { precision: 10, scale: 2, nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Renda deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Renda não pode ser negativa' }),
    __metadata("design:type", Number)
], ComposicaoFamiliar.prototype, "renda", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], ComposicaoFamiliar.prototype, "observacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], ComposicaoFamiliar.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], ComposicaoFamiliar.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], ComposicaoFamiliar.prototype, "removed_at", void 0);
exports.ComposicaoFamiliar = ComposicaoFamiliar = __decorate([
    (0, typeorm_1.Entity)('composicao_familiar'),
    (0, typeorm_1.Index)(['cidadao_id', 'nome'], { unique: true })
], ComposicaoFamiliar);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,