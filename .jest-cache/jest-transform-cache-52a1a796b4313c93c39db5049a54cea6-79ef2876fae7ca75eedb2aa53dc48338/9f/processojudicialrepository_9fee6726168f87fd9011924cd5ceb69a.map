{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\repositories\\processo-judicial.repository.ts","mappings":";;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,qCAAiD;AACjD,yFAA8E;AAE9E;;;;GAIG;AAEI,IAAM,0BAA0B,GAAhC,MAAM,0BAA2B,SAAQ,oBAA4B;IACtD;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,2CAAgB,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QADxC,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc;QAC/B,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,eAAe,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,uBAAuB,CAAC,UAAkB;QAC9C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;aACpD,QAAQ,CACP,aAAa,EACb,aAAa,EACb,gDAAgD,CACjD;aACA,KAAK,CAAC,mBAAmB,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC;aAC9C,QAAQ,CAAC,4BAA4B,CAAC;aACtC,QAAQ,EAAE,CAAC;QAEd,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;CACF,CAAA;AAlCY,gEAA0B;qCAA1B,0BAA0B;IADtC,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,0BAA0B,CAkCtC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\repositories\\processo-judicial.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { ProcessoJudicial } from '../../../entities/processo-judicial.entity';\n\n/**\n * Repositório personalizado para ProcessoJudicial\n *\n * Fornece métodos especializados para acesso e manipulação de processos judiciais\n */\n@Injectable()\nexport class ProcessoJudicialRepository extends Repository<ProcessoJudicial> {\n  constructor(private dataSource: DataSource) {\n    super(ProcessoJudicial, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca um processo judicial pelo número\n   *\n   * @param numero Número do processo judicial\n   * @returns Processo judicial encontrado ou null\n   */\n  async findByNumero(numero: string): Promise<ProcessoJudicial | null> {\n    return this.findOne({ where: { numero_processo: numero } });\n  }\n\n  /**\n   * Verifica se um processo judicial está vinculado a alguma solicitação\n   *\n   * @param processoId ID do processo judicial\n   * @returns true se estiver vinculado, false caso contrário\n   */\n  async isVinculadoASolicitacao(processoId: string): Promise<boolean> {\n    const count = await this.createQueryBuilder('processo')\n      .leftJoin(\n        'solicitacao',\n        'solicitacao',\n        'solicitacao.processo_judicial_id = processo.id',\n      )\n      .where('processo.id = :id', { id: processoId })\n      .andWhere('solicitacao.id IS NOT NULL')\n      .getCount();\n\n    return count > 0;\n  }\n}\n"],"version":3}