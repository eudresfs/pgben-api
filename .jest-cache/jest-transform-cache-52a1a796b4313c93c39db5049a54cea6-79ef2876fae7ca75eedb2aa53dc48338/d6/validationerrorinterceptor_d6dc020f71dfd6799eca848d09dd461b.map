{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\validation-error.interceptor.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\validation-error.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ValidationError } from 'class-validator';\n\n/**\n * Interceptor para melhorar o tratamento de erros de validação\n * \n * Características:\n * - Melhora mensagens de erro de enum\n * - Agrupa erros por campo\n * - Fornece sugestões para valores inválidos\n * - Padroniza formato de resposta de erro\n */\n@Injectable()\nexport class ValidationErrorInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    return next.handle().pipe(\n      catchError((error) => {\n        if (error instanceof BadRequestException) {\n          const response = error.getResponse();\n          \n          // Se for um erro de validação do class-validator\n          if (this.isValidationError(response)) {\n            const enhancedError = this.enhanceValidationError(response);\n            return throwError(() => new BadRequestException(enhancedError));\n          }\n        }\n        \n        return throwError(() => error);\n      })\n    );\n  }\n  \n  /**\n   * Verifica se é um erro de validação\n   */\n  private isValidationError(response: any): boolean {\n    return (\n      response &&\n      typeof response === 'object' &&\n      (Array.isArray(response.message) || \n       (response.error === 'Bad Request' && Array.isArray(response.message)))\n    );\n  }\n  \n  /**\n   * Melhora os erros de validação\n   */\n  private enhanceValidationError(response: any): any {\n    const messages = Array.isArray(response.message) \n      ? response.message \n      : response.message || [];\n    \n    const enhancedMessages = messages.map((message: string) => \n      this.enhanceErrorMessage(message)\n    );\n    \n    // Agrupar erros por campo\n    const groupedErrors = this.groupErrorsByField(enhancedMessages);\n    \n    return {\n      error: 'Erro de Validação',\n      message: 'Os dados fornecidos contêm erros de validação',\n      details: groupedErrors,\n      timestamp: new Date().toISOString(),\n      statusCode: 400,\n    };\n  }\n  \n  /**\n   * Melhora mensagens de erro individuais\n   */\n  private enhanceErrorMessage(message: string): string {\n    // Melhorar mensagens de enum\n    if (message.includes('must be one of the following values')) {\n      return this.enhanceEnumErrorMessage(message);\n    }\n    \n    // Melhorar mensagens de tipo\n    if (message.includes('must be a') || message.includes('must be an')) {\n      return this.enhanceTypeErrorMessage(message);\n    }\n    \n    // Melhorar mensagens de tamanho\n    if (message.includes('must be longer than') || message.includes('must be shorter than')) {\n      return this.enhanceLengthErrorMessage(message);\n    }\n    \n    // Melhorar mensagens de valor numérico\n    if (message.includes('must not be less than') || message.includes('must not be greater than')) {\n      return this.enhanceNumericErrorMessage(message);\n    }\n    \n    return message;\n  }\n  \n  /**\n   * Melhora mensagens de erro de enum\n   */\n  private enhanceEnumErrorMessage(message: string): string {\n    // Extrair o nome do campo\n    const fieldMatch = message.match(/^(\\w+)\\s/);\n    const field = fieldMatch ? fieldMatch[1] : 'campo';\n    \n    // Extrair os valores válidos\n    const valuesMatch = message.match(/\\[(.*?)\\]/);\n    const values = valuesMatch ? valuesMatch[1] : '';\n    \n    if (values) {\n      return `O campo '${field}' deve ser um dos seguintes valores: ${values}`;\n    }\n    \n    return message;\n  }\n  \n  /**\n   * Melhora mensagens de erro de tipo\n   */\n  private enhanceTypeErrorMessage(message: string): string {\n    const typeMap: Record<string, string> = {\n      'string': 'texto',\n      'number': 'número',\n      'boolean': 'verdadeiro ou falso',\n      'array': 'lista',\n      'object': 'objeto',\n      'date': 'data válida',\n      'email': 'email válido',\n      'url': 'URL válida',\n    };\n    \n    let enhancedMessage = message;\n    \n    Object.entries(typeMap).forEach(([english, portuguese]) => {\n      enhancedMessage = enhancedMessage.replace(\n        new RegExp(`must be a ${english}`, 'gi'),\n        `deve ser um ${portuguese}`\n      );\n      enhancedMessage = enhancedMessage.replace(\n        new RegExp(`must be an ${english}`, 'gi'),\n        `deve ser um ${portuguese}`\n      );\n    });\n    \n    return enhancedMessage;\n  }\n  \n  /**\n   * Melhora mensagens de erro de tamanho\n   */\n  private enhanceLengthErrorMessage(message: string): string {\n    return message\n      .replace(/must be longer than (\\d+) characters?/gi, 'deve ter mais de $1 caracteres')\n      .replace(/must be shorter than (\\d+) characters?/gi, 'deve ter menos de $1 caracteres')\n      .replace(/must contain at least (\\d+) characters?/gi, 'deve conter pelo menos $1 caracteres')\n      .replace(/must contain at most (\\d+) characters?/gi, 'deve conter no máximo $1 caracteres');\n  }\n  \n  /**\n   * Melhora mensagens de erro numérico\n   */\n  private enhanceNumericErrorMessage(message: string): string {\n    return message\n      .replace(/must not be less than (\\d+(?:\\.\\d+)?)/gi, 'deve ser maior ou igual a $1')\n      .replace(/must not be greater than (\\d+(?:\\.\\d+)?)/gi, 'deve ser menor ou igual a $1')\n      .replace(/must be a positive number/gi, 'deve ser um número positivo')\n      .replace(/must be a negative number/gi, 'deve ser um número negativo');\n  }\n  \n  /**\n   * Agrupa erros por campo\n   */\n  private groupErrorsByField(messages: string[]): Record<string, string[]> {\n    const grouped: Record<string, string[]> = {};\n    \n    messages.forEach((message) => {\n      // Tentar extrair o nome do campo da mensagem\n      const fieldMatch = message.match(/^(\\w+)\\s/) || \n                        message.match(/campo '(\\w+)'/) ||\n                        message.match(/field '(\\w+)'/);\n      \n      const field = fieldMatch ? fieldMatch[1] : 'geral';\n      \n      if (!grouped[field]) {\n        grouped[field] = [];\n      }\n      \n      // Remover o nome do campo da mensagem se estiver no início\n      const cleanMessage = message.replace(/^\\w+\\s/, '').trim();\n      grouped[field].push(cleanMessage || message);\n    });\n    \n    return grouped;\n  }\n}\n\n/**\n * Utilitários para criação de mensagens de erro padronizadas\n */\nexport class ValidationMessageHelper {\n  /**\n   * Cria mensagem de erro para campo obrigatório\n   */\n  static required(fieldName: string): string {\n    return `O campo '${fieldName}' é obrigatório`;\n  }\n  \n  /**\n   * Cria mensagem de erro para tipo inválido\n   */\n  static invalidType(fieldName: string, expectedType: string): string {\n    const typeMap: Record<string, string> = {\n      'string': 'texto',\n      'number': 'número',\n      'boolean': 'verdadeiro ou falso',\n      'array': 'lista',\n      'object': 'objeto',\n      'date': 'data válida',\n      'email': 'email válido',\n      'url': 'URL válida',\n    };\n    \n    const type = typeMap[expectedType.toLowerCase()] || expectedType;\n    return `O campo '${fieldName}' deve ser ${type}`;\n  }\n  \n  /**\n   * Cria mensagem de erro para tamanho inválido\n   */\n  static invalidLength(\n    fieldName: string,\n    min?: number,\n    max?: number\n  ): string {\n    if (min && max) {\n      return `O campo '${fieldName}' deve ter entre ${min} e ${max} caracteres`;\n    }\n    if (min) {\n      return `O campo '${fieldName}' deve ter pelo menos ${min} caracteres`;\n    }\n    if (max) {\n      return `O campo '${fieldName}' deve ter no máximo ${max} caracteres`;\n    }\n    return `O campo '${fieldName}' tem tamanho inválido`;\n  }\n  \n  /**\n   * Cria mensagem de erro para valor numérico inválido\n   */\n  static invalidRange(\n    fieldName: string,\n    min?: number,\n    max?: number\n  ): string {\n    if (min !== undefined && max !== undefined) {\n      return `O campo '${fieldName}' deve estar entre ${min} e ${max}`;\n    }\n    if (min !== undefined) {\n      return `O campo '${fieldName}' deve ser maior ou igual a ${min}`;\n    }\n    if (max !== undefined) {\n      return `O campo '${fieldName}' deve ser menor ou igual a ${max}`;\n    }\n    return `O campo '${fieldName}' está fora do intervalo válido`;\n  }\n  \n  /**\n   * Cria mensagem de erro para formato inválido\n   */\n  static invalidFormat(fieldName: string, format: string): string {\n    const formatMap: Record<string, string> = {\n      'email': 'email válido (exemplo: usuario@dominio.com)',\n      'cpf': 'CPF válido (exemplo: 123.456.789-00)',\n      'cnpj': 'CNPJ válido (exemplo: 12.345.678/0001-90)',\n      'phone': 'telefone válido (exemplo: (11) 99999-9999)',\n      'date': 'data válida (exemplo: 2023-12-31)',\n      'url': 'URL válida (exemplo: https://exemplo.com)',\n    };\n    \n    const formatDescription = formatMap[format.toLowerCase()] || format;\n    return `O campo '${fieldName}' deve ter o formato: ${formatDescription}`;\n  }\n}"],"version":3}