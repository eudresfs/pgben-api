6baf347b05ae1c912900031201db9d73
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegradorTokenService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const jwt_1 = require("@nestjs/jwt");
const crypto = __importStar(require("crypto"));
const entities_1 = require("../../../entities");
const token_response_dto_1 = require("../dto/token-response.dto");
const integrador_service_1 = require("./integrador.service");
/**
 * Serviço responsável pelo gerenciamento de tokens de acesso para integradores.
 * Implementa funcionalidades de geração, validação, revogação e consulta de tokens.
 */
let IntegradorTokenService = class IntegradorTokenService {
    tokenRepository;
    tokenRevogadoRepository;
    integradorService;
    jwtService;
    constructor(tokenRepository, tokenRevogadoRepository, integradorService, jwtService) {
        this.tokenRepository = tokenRepository;
        this.tokenRevogadoRepository = tokenRevogadoRepository;
        this.integradorService = integradorService;
        this.jwtService = jwtService;
    }
    /**
     * Gera um hash seguro de um token.
     * @param token Token a ser convertido em hash
     * @returns Hash do token
     */
    generateTokenHash(token) {
        return crypto.createHash('sha256').update(token).digest('hex');
    }
    /**
     * Cria um novo token para um integrador.
     * @param integradorId ID do integrador
     * @param createTokenDto Dados para criação do token
     * @returns Token gerado e informações associadas
     */
    async createToken(integradorId, createTokenDto) {
        // Verificar se o integrador existe e está ativo
        const integrador = await this.integradorService.findById(integradorId);
        if (!integrador.ativo) {
            throw new common_1.BadRequestException('Não é possível criar token para um integrador inativo');
        }
        // Validar escopos solicitados
        if (createTokenDto.escopos && createTokenDto.escopos.length > 0) {
            // Se o integrador tem permissões definidas, verificar se todos os escopos solicitados são permitidos
            if (integrador.permissoesEscopo &&
                integrador.permissoesEscopo.length > 0) {
                const escoposNaoPermitidos = createTokenDto.escopos.filter((escopo) => !integrador.permissoesEscopo.includes(escopo));
                if (escoposNaoPermitidos.length > 0) {
                    throw new common_1.BadRequestException(`Escopos não permitidos para este integrador: ${escoposNaoPermitidos.join(', ')}`);
                }
            }
        }
        // Configurar expiração (se aplicável)
        let dataExpiracao = null;
        let expiresIn = undefined;
        if (!createTokenDto.semExpiracao && createTokenDto.diasValidade) {
            dataExpiracao = new Date();
            dataExpiracao.setDate(dataExpiracao.getDate() + createTokenDto.diasValidade);
            expiresIn = `${createTokenDto.diasValidade}d`;
        }
        // Criar payload do JWT
        const payload = {
            sub: `integrador:${integradorId}`,
            name: integrador.nome,
            type: 'api_token',
            scopes: createTokenDto.escopos || [],
        };
        // Gerar o token JWT
        const tokenOptions = {};
        if (expiresIn) {
            tokenOptions.expiresIn = expiresIn;
        }
        const token = this.jwtService.sign(payload, tokenOptions);
        const tokenHash = this.generateTokenHash(token);
        // Criar registro do token no banco
        const tokenEntity = this.tokenRepository.create({
            integrador: { id: integradorId }, // Usando o relacionamento
            nome: createTokenDto.nome,
            descricao: createTokenDto.descricao,
            tokenHash,
            escopos: createTokenDto.escopos,
            dataExpiracao: dataExpiracao || undefined, // Garante que seja undefined se for null
        });
        const savedToken = await this.tokenRepository.save(tokenEntity);
        return {
            token, // O token JWT completo - só será exposto uma vez
            tokenInfo: new token_response_dto_1.TokenResponseDto(savedToken),
        };
    }
    /**
     * Obtém todos os tokens associados a um integrador.
     * @param integradorId ID do integrador
     * @returns Lista de tokens
     */
    async findAllByIntegrador(integradorId) {
        // Verificar se o integrador existe
        await this.integradorService.findById(integradorId);
        const tokens = await this.tokenRepository.find({
            where: { integradorId },
            order: { dataCriacao: 'DESC' },
        });
        return tokens.map((token) => new token_response_dto_1.TokenResponseDto(token));
    }
    /**
     * Obtém informações de um token específico.
     * @param id ID do token
     * @returns Informações do token
     */
    async findOne(id) {
        const token = await this.tokenRepository.findOne({ where: { id } });
        if (!token) {
            throw new common_1.NotFoundException(`Token com ID ${id} não encontrado`);
        }
        return new token_response_dto_1.TokenResponseDto(token);
    }
    /**
     * Revoga um token.
     * @param id ID do token
     * @param motivo Motivo da revogação
     * @returns Informações do token revogado
     */
    async revogarToken(id, motivo) {
        const token = await this.tokenRepository.findOne({ where: { id } });
        if (!token) {
            throw new common_1.NotFoundException(`Token com ID ${id} não encontrado`);
        }
        if (token.revogado) {
            throw new common_1.BadRequestException('Token já está revogado');
        }
        // Atualizar o registro do token
        token.revogado = true;
        token.dataRevogacao = new Date();
        token.motivoRevogacao = motivo;
        const updatedToken = await this.tokenRepository.save(token);
        // Adicionar à lista de tokens revogados para validação rápida
        const tokenRevogado = this.tokenRevogadoRepository.create({
            tokenHash: token.tokenHash,
            integradorId: token.integradorId,
            motivoRevogacao: motivo,
            dataExpiracao: token.dataExpiracao,
            // Configura a data para remoção do registro da lista de revogados
            // (para depois da expiração natural, ou um período padrão se não expirar)
            dataLimpeza: token.dataExpiracao || new Date(Date.now() + 1000 * 60 * 60 * 24 * 90), // 90 dias se não tiver expiração
        });
        await this.tokenRevogadoRepository.save(tokenRevogado);
        return new token_response_dto_1.TokenResponseDto(updatedToken);
    }
    /**
     * Valida um token e retorna suas informações.
     * @param token Token JWT a ser validado
     * @returns Payload decodificado se válido
     * @throws UnauthorizedException se o token for inválido
     */
    async validateToken(token) {
        try {
            // Verificar assinatura do token
            const payload = this.jwtService.verify(token);
            // Verificar tipo de token
            if (payload.type !== 'api_token') {
                throw new common_1.UnauthorizedException('Tipo de token inválido');
            }
            // Extrair ID do integrador do subject
            const subParts = payload.sub.split(':');
            if (subParts.length !== 2 || subParts[0] !== 'integrador') {
                throw new common_1.UnauthorizedException('Formato de token inválido');
            }
            const integradorId = subParts[1];
            // Verificar se o token foi revogado
            const tokenHash = this.generateTokenHash(token);
            const tokenRevogado = await this.tokenRevogadoRepository.findOne({
                where: { tokenHash },
            });
            if (tokenRevogado) {
                throw new common_1.UnauthorizedException('Token revogado');
            }
            // Verificar se o integrador existe e está ativo
            const integrador = await this.integradorService.findById(integradorId);
            if (!integrador.ativo) {
                throw new common_1.UnauthorizedException('Integrador desativado');
            }
            // Registrar o último acesso
            await this.integradorService.registrarAcesso(integradorId);
            // Buscar o token no banco para atualizar último uso
            const tokenInfo = await this.tokenRepository.findOne({
                where: { tokenHash },
            });
            if (tokenInfo) {
                tokenInfo.ultimoUso = new Date();
                await this.tokenRepository.save(tokenInfo);
            }
            // Adicionar integrador ao payload para uso posterior
            return {
                ...payload,
                integrador,
            };
        }
        catch (error) {
            throw new common_1.UnauthorizedException('Token inválido: ' + (error.message || 'erro desconhecido'));
        }
    }
    /**
     * Verifica se um token tem as permissões necessárias.
     * @param payload Payload do token já validado
     * @param requiredScopes Escopos requeridos
     * @returns True se o token tiver todos os escopos necessários
     */
    hasRequiredScopes(payload, requiredScopes) {
        if (!requiredScopes || requiredScopes.length === 0) {
            return true;
        }
        if (!payload.scopes || payload.scopes.length === 0) {
            return false;
        }
        // Verificar se o token possui todos os escopos necessários
        return requiredScopes.every((requiredScope) => payload.scopes.includes(requiredScope));
    }
    /**
     * Verifica se um acesso está permitido por restrição de IP.
     * @param integrador Objeto do integrador
     * @param ipAddress Endereço IP de origem da requisição
     * @returns True se o acesso for permitido
     */
    isIpAllowed(integrador, ipAddress) {
        // Se não houver restrições de IP, permitir acesso
        if (!integrador.ipPermitidos || integrador.ipPermitidos.length === 0) {
            return true;
        }
        // Verificar se o IP está na lista de permitidos
        return integrador.ipPermitidos.includes(ipAddress);
    }
    /**
     * Limpa tokens revogados antigos da lista de revogação.
     * Esta função pode ser executada periodicamente para manter a tabela otimizada.
     */
    async limparTokensRevogadosExpirados() {
        const result = await this.tokenRevogadoRepository
            .createQueryBuilder()
            .delete()
            .from(entities_1.TokenRevogado)
            .where('dataLimpeza < :now', { now: new Date() })
            .execute();
        return result.affected || 0;
    }
};
exports.IntegradorTokenService = IntegradorTokenService;
exports.IntegradorTokenService = IntegradorTokenService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(entities_1.IntegradorToken)),
    __param(1, (0, typeorm_1.InjectRepository)(entities_1.TokenRevogado)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof integrador_service_1.IntegradorService !== "undefined" && integrador_service_1.IntegradorService) === "function" ? _c : Object, typeof (_d = typeof jwt_1.JwtService !== "undefined" && jwt_1.JwtService) === "function" ? _d : Object])
], IntegradorTokenService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,