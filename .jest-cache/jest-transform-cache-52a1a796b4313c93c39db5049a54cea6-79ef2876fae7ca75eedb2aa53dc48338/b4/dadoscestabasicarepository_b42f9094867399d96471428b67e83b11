d09b515ebe3da4d43d72cf2dd75233d0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosCestaBasicaRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const dados_cesta_basica_entity_1 = require("../../../entities/dados-cesta-basica.entity");
/**
 * Repositório customizado para DadosCestaBasica
 * Extende o repositório base do TypeORM com métodos específicos
 */
let DadosCestaBasicaRepository = class DadosCestaBasicaRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(dados_cesta_basica_entity_1.DadosCestaBasica, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Buscar dados de cesta básica por solicitação com relacionamentos
     */
    async findBySolicitacaoWithRelations(solicitacaoId) {
        return this.findOne({
            where: { solicitacao_id: solicitacaoId },
            relations: [
                'solicitacao',
                'solicitacao.cidadao',
                'solicitacao.tipo_beneficio',
            ],
        });
    }
    /**
     * Buscar dados por período de concessão
     */
    async findByPeriodoConcessao(periodoConcessao) {
        return this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')
            .where('dados.periodo_concessao = :periodoConcessao', {
            periodoConcessao,
        })
            .orderBy('dados.created_at', 'DESC')
            .getMany();
    }
    /**
     * Buscar dados por origem do atendimento
     */
    async findByOrigemAtendimento(origemAtendimento) {
        return this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')
            .where('dados.origem_atendimento = :origemAtendimento', {
            origemAtendimento,
        })
            .orderBy('dados.created_at', 'DESC')
            .getMany();
    }
    /**
     * Buscar dados por quantidade de cestas
     */
    async findByQuantidadeCestas(quantidadeMinima, quantidadeMaxima) {
        const query = this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')
            .where('dados.quantidade_cestas_solicitadas >= :quantidadeMinima', {
            quantidadeMinima,
        });
        if (quantidadeMaxima) {
            query.andWhere('dados.quantidade_cestas_solicitadas <= :quantidadeMaxima', { quantidadeMaxima });
        }
        return query
            .orderBy('dados.quantidade_cestas_solicitadas', 'DESC')
            .getMany();
    }
    /**
     * Buscar estatísticas de cesta básica
     */
    async getEstatisticas() {
        const totalSolicitacoes = await this.count();
        // Total de cestas e média
        const cestasResult = await this.createQueryBuilder('dados')
            .select('SUM(dados.quantidade_cestas_solicitadas)', 'totalCestas')
            .addSelect('AVG(dados.quantidade_cestas_solicitadas)', 'mediaCestas')
            .getRawOne();
        const totalCestas = parseInt(cestasResult.totalCestas) || 0;
        const mediaCestasPorSolicitacao = parseFloat(cestasResult.mediaCestas) || 0;
        // Estatísticas por período de concessão
        const porPeriodoResult = await this.createQueryBuilder('dados')
            .select('dados.periodo_concessao', 'periodo')
            .addSelect('COUNT(*)', 'quantidade')
            .groupBy('dados.periodo_concessao')
            .getRawMany();
        const porPeriodoConcessao = porPeriodoResult.reduce((acc, item) => {
            acc[item.periodo] = parseInt(item.quantidade);
            return acc;
        }, {});
        // Estatísticas por origem do atendimento
        const porOrigemResult = await this.createQueryBuilder('dados')
            .select('dados.origem_atendimento', 'origem')
            .addSelect('COUNT(*)', 'quantidade')
            .groupBy('dados.origem_atendimento')
            .getRawMany();
        const porOrigemAtendimento = porOrigemResult.reduce((acc, item) => {
            acc[item.origem] = parseInt(item.quantidade);
            return acc;
        }, {});
        // Estatísticas por quantidade de cestas
        const porQuantidadeResult = await this.createQueryBuilder('dados')
            .select(`CASE 
          WHEN dados.quantidade_cestas_solicitadas = 1 THEN '1 cesta'
          WHEN dados.quantidade_cestas_solicitadas = 2 THEN '2 cestas'
          WHEN dados.quantidade_cestas_solicitadas = 3 THEN '3 cestas'
          WHEN dados.quantidade_cestas_solicitadas BETWEEN 4 AND 5 THEN '4-5 cestas'
          ELSE 'Mais de 5 cestas'
        END`, 'faixa')
            .addSelect('COUNT(*)', 'quantidade')
            .groupBy('faixa')
            .getRawMany();
        const porQuantidadeCestas = porQuantidadeResult.reduce((acc, item) => {
            acc[item.faixa] = parseInt(item.quantidade);
            return acc;
        }, {});
        return {
            totalSolicitacoes,
            totalCestas,
            mediaCestasPorSolicitacao,
            porPeriodoConcessao,
            porOrigemAtendimento,
            porQuantidadeCestas,
        };
    }
    /**
     * Buscar dados de cesta básica com filtros avançados
     */
    async findWithFilters(filters) {
        const query = this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.cidadao', 'cidadao');
        if (filters.periodoConcessao) {
            query.andWhere('dados.periodo_concessao = :periodoConcessao', {
                periodoConcessao: filters.periodoConcessao,
            });
        }
        if (filters.origemAtendimento) {
            query.andWhere('dados.origem_atendimento = :origemAtendimento', {
                origemAtendimento: filters.origemAtendimento,
            });
        }
        if (filters.quantidadeMinima) {
            query.andWhere('dados.quantidade_cestas_solicitadas >= :quantidadeMinima', {
                quantidadeMinima: filters.quantidadeMinima,
            });
        }
        if (filters.quantidadeMaxima) {
            query.andWhere('dados.quantidade_cestas_solicitadas <= :quantidadeMaxima', {
                quantidadeMaxima: filters.quantidadeMaxima,
            });
        }
        if (filters.dataInicioSolicitacao && filters.dataFimSolicitacao) {
            query.andWhere('solicitacao.created_at BETWEEN :dataInicio AND :dataFim', {
                dataInicio: filters.dataInicioSolicitacao,
                dataFim: filters.dataFimSolicitacao,
            });
        }
        const total = await query.getCount();
        if (filters.page && filters.limit) {
            query.skip((filters.page - 1) * filters.limit).take(filters.limit);
        }
        query.orderBy('dados.created_at', 'DESC');
        const data = await query.getMany();
        return { data, total };
    }
    /**
     * Buscar distribuição de cestas por mês
     */
    async getCestasPorMes(ano) {
        return this.createQueryBuilder('dados')
            .leftJoin('dados.solicitacao', 'solicitacao')
            .select('EXTRACT(MONTH FROM solicitacao.created_at)', 'mes')
            .addSelect('COUNT(*)', 'quantidade')
            .addSelect('SUM(dados.quantidade_cestas_solicitadas)', 'totalCestas')
            .where('EXTRACT(YEAR FROM solicitacao.created_at) = :ano', { ano })
            .groupBy('EXTRACT(MONTH FROM solicitacao.created_at)')
            .orderBy('mes', 'ASC')
            .getRawMany()
            .then((results) => results.map((item) => ({
            mes: parseInt(item.mes),
            quantidade: parseInt(item.quantidade),
            totalCestas: parseInt(item.totalCestas),
        })));
    }
    /**
     * Buscar famílias que receberam cestas múltiplas vezes
     */
    async findFamiliasRecorrentes(minimoSolicitacoes = 2) {
        return this.createQueryBuilder('dados')
            .leftJoin('dados.solicitacao', 'solicitacao')
            .leftJoin('solicitacao.cidadao', 'cidadao')
            .select('cidadao.id', 'cidadao_id')
            .addSelect('cidadao.nome_completo', 'nome_cidadao')
            .addSelect('COUNT(*)', 'total_solicitacoes')
            .addSelect('SUM(dados.quantidade_cestas_solicitadas)', 'total_cestas')
            .groupBy('cidadao.id, cidadao.nome_completo')
            .having('COUNT(*) >= :minimoSolicitacoes', { minimoSolicitacoes })
            .orderBy('total_solicitacoes', 'DESC')
            .getRawMany()
            .then((results) => results.map((item) => ({
            cidadao_id: item.cidadao_id,
            nome_cidadao: item.nome_cidadao,
            total_solicitacoes: parseInt(item.total_solicitacoes),
            total_cestas: parseInt(item.total_cestas),
        })));
    }
    /**
     * Verificar se cidadão já recebeu cesta no período
     */
    async verificarCestaRecente(cidadaoId, diasLimite = 30) {
        const dataLimite = new Date();
        dataLimite.setDate(dataLimite.getDate() - diasLimite);
        return this.createQueryBuilder('dados')
            .leftJoin('dados.solicitacao', 'solicitacao')
            .where('solicitacao.cidadao_id = :cidadaoId', { cidadaoId })
            .andWhere('solicitacao.created_at >= :dataLimite', { dataLimite })
            .orderBy('solicitacao.created_at', 'DESC')
            .getOne();
    }
};
exports.DadosCestaBasicaRepository = DadosCestaBasicaRepository;
exports.DadosCestaBasicaRepository = DadosCestaBasicaRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], DadosCestaBasicaRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,