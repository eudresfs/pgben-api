{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-cesta-basica.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-cesta-basica.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { DadosCestaBasica } from '../../../entities/dados-cesta-basica.entity';\nimport { PeriodicidadeEnum, OrigemAtendimentoEnum } from '@/enums';\n\n/**\n * Repositório customizado para DadosCestaBasica\n * Extende o repositório base do TypeORM com métodos específicos\n */\n@Injectable()\nexport class DadosCestaBasicaRepository extends Repository<DadosCestaBasica> {\n  constructor(private dataSource: DataSource) {\n    super(DadosCestaBasica, dataSource.createEntityManager());\n  }\n\n  /**\n   * Buscar dados de cesta básica por solicitação com relacionamentos\n   */\n  async findBySolicitacaoWithRelations(\n    solicitacaoId: string,\n  ): Promise<DadosCestaBasica | null> {\n    return this.findOne({\n      where: { solicitacao_id: solicitacaoId },\n      relations: [\n        'solicitacao',\n        'solicitacao.cidadao',\n        'solicitacao.tipo_beneficio',\n      ],\n    });\n  }\n\n  /**\n   * Buscar dados por período de concessão\n   */\n  async findByPeriodoConcessao(\n    periodoConcessao: PeriodicidadeEnum,\n  ): Promise<DadosCestaBasica[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.periodo_concessao = :periodoConcessao', {\n        periodoConcessao,\n      })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por origem do atendimento\n   */\n  async findByOrigemAtendimento(\n    origemAtendimento: OrigemAtendimentoEnum,\n  ): Promise<DadosCestaBasica[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.origem_atendimento = :origemAtendimento', {\n        origemAtendimento,\n      })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por quantidade de cestas\n   */\n  async findByQuantidadeCestas(\n    quantidadeMinima: number,\n    quantidadeMaxima?: number,\n  ): Promise<DadosCestaBasica[]> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.quantidade_cestas_solicitadas >= :quantidadeMinima', {\n        quantidadeMinima,\n      });\n\n    if (quantidadeMaxima) {\n      query.andWhere(\n        'dados.quantidade_cestas_solicitadas <= :quantidadeMaxima',\n        { quantidadeMaxima },\n      );\n    }\n\n    return query\n      .orderBy('dados.quantidade_cestas_solicitadas', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar estatísticas de cesta básica\n   */\n  async getEstatisticas(): Promise<{\n    totalSolicitacoes: number;\n    totalCestas: number;\n    mediaCestasPorSolicitacao: number;\n    porPeriodoConcessao: Record<string, number>;\n    porOrigemAtendimento: Record<string, number>;\n    porQuantidadeCestas: Record<string, number>;\n  }> {\n    const totalSolicitacoes = await this.count();\n\n    // Total de cestas e média\n    const cestasResult = await this.createQueryBuilder('dados')\n      .select('SUM(dados.quantidade_cestas_solicitadas)', 'totalCestas')\n      .addSelect('AVG(dados.quantidade_cestas_solicitadas)', 'mediaCestas')\n      .getRawOne();\n\n    const totalCestas = parseInt(cestasResult.totalCestas) || 0;\n    const mediaCestasPorSolicitacao = parseFloat(cestasResult.mediaCestas) || 0;\n\n    // Estatísticas por período de concessão\n    const porPeriodoResult = await this.createQueryBuilder('dados')\n      .select('dados.periodo_concessao', 'periodo')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.periodo_concessao')\n      .getRawMany();\n\n    const porPeriodoConcessao = porPeriodoResult.reduce((acc, item) => {\n      acc[item.periodo] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por origem do atendimento\n    const porOrigemResult = await this.createQueryBuilder('dados')\n      .select('dados.origem_atendimento', 'origem')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.origem_atendimento')\n      .getRawMany();\n\n    const porOrigemAtendimento = porOrigemResult.reduce((acc, item) => {\n      acc[item.origem] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por quantidade de cestas\n    const porQuantidadeResult = await this.createQueryBuilder('dados')\n      .select(\n        `CASE \n          WHEN dados.quantidade_cestas_solicitadas = 1 THEN '1 cesta'\n          WHEN dados.quantidade_cestas_solicitadas = 2 THEN '2 cestas'\n          WHEN dados.quantidade_cestas_solicitadas = 3 THEN '3 cestas'\n          WHEN dados.quantidade_cestas_solicitadas BETWEEN 4 AND 5 THEN '4-5 cestas'\n          ELSE 'Mais de 5 cestas'\n        END`,\n        'faixa',\n      )\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('faixa')\n      .getRawMany();\n\n    const porQuantidadeCestas = porQuantidadeResult.reduce((acc, item) => {\n      acc[item.faixa] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    return {\n      totalSolicitacoes,\n      totalCestas,\n      mediaCestasPorSolicitacao,\n      porPeriodoConcessao,\n      porOrigemAtendimento,\n      porQuantidadeCestas,\n    };\n  }\n\n  /**\n   * Buscar dados de cesta básica com filtros avançados\n   */\n  async findWithFilters(filters: {\n    periodoConcessao?: PeriodicidadeEnum;\n    origemAtendimento?: OrigemAtendimentoEnum;\n    quantidadeMinima?: number;\n    quantidadeMaxima?: number;\n    dataInicioSolicitacao?: Date;\n    dataFimSolicitacao?: Date;\n    page?: number;\n    limit?: number;\n  }): Promise<{ data: DadosCestaBasica[]; total: number }> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao');\n\n    if (filters.periodoConcessao) {\n      query.andWhere('dados.periodo_concessao = :periodoConcessao', {\n        periodoConcessao: filters.periodoConcessao,\n      });\n    }\n\n    if (filters.origemAtendimento) {\n      query.andWhere('dados.origem_atendimento = :origemAtendimento', {\n        origemAtendimento: filters.origemAtendimento,\n      });\n    }\n\n    if (filters.quantidadeMinima) {\n      query.andWhere(\n        'dados.quantidade_cestas_solicitadas >= :quantidadeMinima',\n        {\n          quantidadeMinima: filters.quantidadeMinima,\n        },\n      );\n    }\n\n    if (filters.quantidadeMaxima) {\n      query.andWhere(\n        'dados.quantidade_cestas_solicitadas <= :quantidadeMaxima',\n        {\n          quantidadeMaxima: filters.quantidadeMaxima,\n        },\n      );\n    }\n\n    if (filters.dataInicioSolicitacao && filters.dataFimSolicitacao) {\n      query.andWhere(\n        'solicitacao.created_at BETWEEN :dataInicio AND :dataFim',\n        {\n          dataInicio: filters.dataInicioSolicitacao,\n          dataFim: filters.dataFimSolicitacao,\n        },\n      );\n    }\n\n    const total = await query.getCount();\n\n    if (filters.page && filters.limit) {\n      query.skip((filters.page - 1) * filters.limit).take(filters.limit);\n    }\n\n    query.orderBy('dados.created_at', 'DESC');\n\n    const data = await query.getMany();\n\n    return { data, total };\n  }\n\n  /**\n   * Buscar distribuição de cestas por mês\n   */\n  async getCestasPorMes(\n    ano: number,\n  ): Promise<{ mes: number; quantidade: number; totalCestas: number }[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoin('dados.solicitacao', 'solicitacao')\n      .select('EXTRACT(MONTH FROM solicitacao.created_at)', 'mes')\n      .addSelect('COUNT(*)', 'quantidade')\n      .addSelect('SUM(dados.quantidade_cestas_solicitadas)', 'totalCestas')\n      .where('EXTRACT(YEAR FROM solicitacao.created_at) = :ano', { ano })\n      .groupBy('EXTRACT(MONTH FROM solicitacao.created_at)')\n      .orderBy('mes', 'ASC')\n      .getRawMany()\n      .then((results) =>\n        results.map((item) => ({\n          mes: parseInt(item.mes),\n          quantidade: parseInt(item.quantidade),\n          totalCestas: parseInt(item.totalCestas),\n        })),\n      );\n  }\n\n  /**\n   * Buscar famílias que receberam cestas múltiplas vezes\n   */\n  async findFamiliasRecorrentes(minimoSolicitacoes: number = 2): Promise<\n    {\n      cidadao_id: string;\n      nome_cidadao: string;\n      total_solicitacoes: number;\n      total_cestas: number;\n    }[]\n  > {\n    return this.createQueryBuilder('dados')\n      .leftJoin('dados.solicitacao', 'solicitacao')\n      .leftJoin('solicitacao.cidadao', 'cidadao')\n      .select('cidadao.id', 'cidadao_id')\n      .addSelect('cidadao.nome_completo', 'nome_cidadao')\n      .addSelect('COUNT(*)', 'total_solicitacoes')\n      .addSelect('SUM(dados.quantidade_cestas_solicitadas)', 'total_cestas')\n      .groupBy('cidadao.id, cidadao.nome_completo')\n      .having('COUNT(*) >= :minimoSolicitacoes', { minimoSolicitacoes })\n      .orderBy('total_solicitacoes', 'DESC')\n      .getRawMany()\n      .then((results) =>\n        results.map((item) => ({\n          cidadao_id: item.cidadao_id,\n          nome_cidadao: item.nome_cidadao,\n          total_solicitacoes: parseInt(item.total_solicitacoes),\n          total_cestas: parseInt(item.total_cestas),\n        })),\n      );\n  }\n\n  /**\n   * Verificar se cidadão já recebeu cesta no período\n   */\n  async verificarCestaRecente(\n    cidadaoId: string,\n    diasLimite: number = 30,\n  ): Promise<DadosCestaBasica | null> {\n    const dataLimite = new Date();\n    dataLimite.setDate(dataLimite.getDate() - diasLimite);\n\n    return this.createQueryBuilder('dados')\n      .leftJoin('dados.solicitacao', 'solicitacao')\n      .where('solicitacao.cidadao_id = :cidadaoId', { cidadaoId })\n      .andWhere('solicitacao.created_at >= :dataLimite', { dataLimite })\n      .orderBy('solicitacao.created_at', 'DESC')\n      .getOne();\n  }\n}\n"],"version":3}