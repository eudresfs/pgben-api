{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\tests\\beneficio.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\tests\\beneficio.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BeneficioService } from '../services/beneficio.service';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport {\n  TipoBeneficio,\n  Periodicidade,\n} from '../entities/tipo-beneficio.entity';\nimport {\n  RequisitoDocumento,\n  TipoDocumentoEnum,\n} from '../entities/requisito-documento.entity';\nimport { FluxoBeneficio } from '../entities/fluxo-beneficio.entity';\nimport {\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { TipoAprovador } from '../dto/configurar-fluxo.dto';\n\n/**\n * Testes unitários para o serviço de benefícios\n *\n * Verifica o funcionamento das operações CRUD e regras de negócio\n * relacionadas aos tipos de benefícios disponíveis no sistema\n */\ndescribe('BeneficioService', () => {\n  let service: BeneficioService;\n\n  // Mock do query builder\n  const mockQueryBuilder = {\n    where: jest.fn().mockReturnThis(),\n    andWhere: jest.fn().mockReturnThis(),\n    orderBy: jest.fn().mockReturnThis(),\n    skip: jest.fn().mockReturnThis(),\n    take: jest.fn().mockReturnThis(),\n    getManyAndCount: jest.fn(),\n    getOne: jest.fn(),\n  };\n\n  // Mock do repositório de tipo de benefícios\n  const mockTipoBeneficioRepository = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n    save: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    createQueryBuilder: jest.fn(() => mockQueryBuilder),\n  };\n\n  // Mock do repositório de requisitos de documento\n  const mockRequisitoDocumentoRepository = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n    save: jest.fn(),\n    create: jest.fn(),\n  };\n\n  // Mock do repositório de fluxo de benefício\n  const mockFluxoBeneficioRepository = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n    save: jest.fn(),\n    create: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        BeneficioService,\n        {\n          provide: getRepositoryToken(TipoBeneficio),\n          useValue: mockTipoBeneficioRepository,\n        },\n        {\n          provide: getRepositoryToken(RequisitoDocumento),\n          useValue: mockRequisitoDocumentoRepository,\n        },\n        {\n          provide: getRepositoryToken(FluxoBeneficio),\n          useValue: mockFluxoBeneficioRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<BeneficioService>(BeneficioService);\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista paginada de benefícios', async () => {\n      const mockBeneficios = [\n        {\n          id: '1',\n          nome: 'Cesta Básica',\n          descricao:\n            'Benefício de cesta básica para famílias em vulnerabilidade',\n          valor: 150.0,\n          ativo: true,\n        },\n        {\n          id: '2',\n          nome: 'Auxílio Moradia',\n          descricao: 'Benefício para auxílio de aluguel',\n          valor: 300.0,\n          ativo: true,\n        },\n      ];\n\n      mockQueryBuilder.getManyAndCount.mockResolvedValue([mockBeneficios, 2]);\n\n      const result = await service.findAll({ page: 1, limit: 10 });\n\n      expect(result).toEqual({\n        items: mockBeneficios,\n        meta: {\n          total: 2,\n          page: 1,\n          limit: 10,\n          pages: Math.ceil(2 / 10),\n        },\n      });\n      expect(mockTipoBeneficioRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockQueryBuilder.getManyAndCount).toHaveBeenCalled();\n    });\n\n    it('deve aplicar filtros quando fornecidos', async () => {\n      const mockBeneficios = [\n        {\n          id: '1',\n          nome: 'Cesta Básica',\n          descricao:\n            'Benefício de cesta básica para famílias em vulnerabilidade',\n          valor: 150.0,\n          ativo: true,\n        },\n      ];\n\n      mockQueryBuilder.getManyAndCount.mockResolvedValue([mockBeneficios, 1]);\n\n      const result = await service.findAll({\n        page: 1,\n        limit: 10,\n        search: 'Cesta',\n        ativo: true,\n      });\n\n      expect(result).toEqual({\n        items: mockBeneficios,\n        meta: {\n          total: 1,\n          page: 1,\n          limit: 10,\n          pages: Math.ceil(1 / 10),\n        },\n      });\n      expect(mockTipoBeneficioRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockQueryBuilder.where).toHaveBeenCalled();\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalled();\n      expect(mockQueryBuilder.getManyAndCount).toHaveBeenCalled();\n    });\n  });\n\n  describe('findById', () => {\n    it('deve retornar um benefício quando encontrado', async () => {\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        ativo: true,\n        requisito_documento: [],\n      };\n\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(mockBeneficio);\n\n      const result = await service.findById('1');\n\n      expect(result).toEqual(mockBeneficio);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '1' },\n        relations: ['requisito_documento'],\n      });\n    });\n\n    it('deve lançar NotFoundException quando o benefício não é encontrado', async () => {\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.findById('999')).rejects.toThrow(NotFoundException);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '999' },\n        relations: ['requisito_documento'],\n      });\n    });\n  });\n\n  describe('create', () => {\n    it('deve criar um novo benefício quando os dados são válidos', async () => {\n      const createBeneficioDto = {\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        periodicidade: Periodicidade.MENSAL,\n        base_juridica: 'Lei Municipal 123/2023',\n        criterios_elegibilidade: {\n          idade_minima: 18,\n          renda_maxima: 1500,\n          outros: ['Residir no município'],\n        },\n      };\n\n      const mockBeneficio = {\n        id: '1',\n        ...createBeneficioDto,\n        ativo: true,\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n\n      // Verificar se já existe um benefício com o mesmo nome\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(null);\n\n      // Criar o benefício\n      mockTipoBeneficioRepository.create.mockReturnValue(mockBeneficio);\n      mockTipoBeneficioRepository.save.mockResolvedValue(mockBeneficio);\n\n      const result = await service.create(createBeneficioDto);\n\n      expect(result).toEqual(mockBeneficio);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n        where: { nome: 'Cesta Básica' },\n      });\n      expect(mockTipoBeneficioRepository.create).toHaveBeenCalledWith(\n        createBeneficioDto,\n      );\n      expect(mockTipoBeneficioRepository.save).toHaveBeenCalledWith(\n        mockBeneficio,\n      );\n    });\n\n    it('deve lançar ConflictException quando já existe um benefício com o mesmo nome', async () => {\n      const createBeneficioDto = {\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        periodicidade: Periodicidade.MENSAL,\n        base_juridica: 'Lei Municipal 123/2023',\n        criterios_elegibilidade: {\n          idade_minima: 18,\n          renda_maxima: 1500,\n          outros: ['Residir no município'],\n        },\n      };\n\n      // Simular que já existe um benefício com o mesmo nome\n      mockTipoBeneficioRepository.findOne.mockResolvedValue({\n        id: '2',\n        nome: 'Cesta Básica',\n      });\n\n      await expect(service.create(createBeneficioDto)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n        where: { nome: 'Cesta Básica' },\n      });\n      expect(mockTipoBeneficioRepository.create).not.toHaveBeenCalled();\n      expect(mockTipoBeneficioRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar um benefício existente', async () => {\n      const updateBeneficioDto = {\n        nome: 'Cesta Básica Atualizada',\n        valor: 200.0,\n      };\n\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        ativo: true,\n        requisito_documento: [],\n      };\n\n      const mockUpdatedBeneficio = {\n        ...mockBeneficio,\n        ...updateBeneficioDto,\n      };\n\n      // Buscar o benefício existente\n      mockTipoBeneficioRepository.findOne.mockImplementation((options) => {\n        if (options.where.id === '1') {\n          return Promise.resolve(mockBeneficio);\n        }\n        if (options.where.nome === 'Cesta Básica Atualizada') {\n          return Promise.resolve(null);\n        }\n        return Promise.resolve(null);\n      });\n\n      // Salvar as atualizações\n      mockTipoBeneficioRepository.save.mockResolvedValue(mockUpdatedBeneficio);\n\n      const result = await service.update('1', updateBeneficioDto);\n\n      expect(result).toEqual(mockUpdatedBeneficio);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '1' },\n        relations: ['requisito_documento'],\n      });\n      expect(mockTipoBeneficioRepository.save).toHaveBeenCalledWith({\n        ...mockBeneficio,\n        ...updateBeneficioDto,\n      });\n    });\n\n    it('deve lançar NotFoundException quando o benefício não existe', async () => {\n      const updateBeneficioDto = {\n        nome: 'Cesta Básica Atualizada',\n      };\n\n      // Simular que o benefício não existe\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.update('999', updateBeneficioDto)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '999' },\n        relations: ['requisito_documento'],\n      });\n      expect(mockTipoBeneficioRepository.save).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar ConflictException quando tenta atualizar para um nome já existente', async () => {\n      const updateBeneficioDto = {\n        nome: 'Auxílio Moradia',\n      };\n\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        ativo: true,\n        requisito_documento: [],\n      };\n\n      // Buscar o benefício a ser atualizado\n      mockTipoBeneficioRepository.findOne.mockImplementation((options) => {\n        if (options.where.id === '1') {\n          return Promise.resolve(mockBeneficio);\n        }\n        if (options.where.nome === 'Auxílio Moradia') {\n          return Promise.resolve({\n            id: '2',\n            nome: 'Auxílio Moradia',\n          });\n        }\n        return Promise.resolve(null);\n      });\n\n      await expect(service.update('1', updateBeneficioDto)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledTimes(2);\n      expect(mockTipoBeneficioRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  // Testes para findRequisitosByBeneficioId\n  describe('findRequisitosByBeneficioId', () => {\n    it('deve retornar os requisitos documentais de um benefício', async () => {\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n        requisito_documento: [],\n      };\n\n      const mockRequisitos = [\n        {\n          id: '1',\n          nome: 'CPF',\n          obrigatorio: true,\n          tipo_beneficio: mockBeneficio,\n        },\n        {\n          id: '2',\n          nome: 'Comprovante de Residência',\n          obrigatorio: true,\n          tipo_beneficio: mockBeneficio,\n        },\n      ];\n\n      // Verificar se o benefício existe\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(mockBeneficio);\n\n      // Retornar requisitos\n      mockRequisitoDocumentoRepository.find.mockResolvedValue(mockRequisitos);\n\n      const result = await service.findRequisitosByBeneficioId('1');\n\n      expect(result).toEqual(mockRequisitos);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '1' },\n        relations: ['requisito_documento'],\n      });\n      expect(mockRequisitoDocumentoRepository.find).toHaveBeenCalledWith({\n        where: { tipo_beneficio: { id: '1' } },\n        order: { obrigatorio: 'DESC', tipo_documento: 'ASC' },\n      });\n    });\n  });\n\n  // Testes para addRequisito\n  describe('addRequisito', () => {\n    it('deve adicionar um requisito documental a um benefício', async () => {\n      const createRequisitoDto = {\n        tipo_documento: TipoDocumentoEnum.CPF,\n        nome: 'CPF do Solicitante',\n        descricao: 'Documento de identificação',\n        obrigatorio: true,\n      };\n\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n      };\n\n      const mockRequisito = {\n        id: '1',\n        ...createRequisitoDto,\n        tipo_beneficio: mockBeneficio,\n      };\n\n      // Verificar se o benefício existe\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(mockBeneficio);\n\n      // Verificar se já existe um requisito com o mesmo nome\n      mockRequisitoDocumentoRepository.findOne.mockResolvedValue(null);\n\n      // Criar e salvar o requisito\n      mockRequisitoDocumentoRepository.create.mockReturnValue(mockRequisito);\n      mockRequisitoDocumentoRepository.save.mockResolvedValue(mockRequisito);\n\n      const result = await service.addRequisito('1', createRequisitoDto);\n\n      expect(result).toEqual(mockRequisito);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalled();\n      expect(mockRequisitoDocumentoRepository.findOne).toHaveBeenCalled();\n      expect(mockRequisitoDocumentoRepository.create).toHaveBeenCalledWith({\n        ...createRequisitoDto,\n        tipo_beneficio: mockBeneficio,\n      });\n      expect(mockRequisitoDocumentoRepository.save).toHaveBeenCalledWith(\n        mockRequisito,\n      );\n    });\n  });\n\n  // Testes para configurarFluxo\n  describe('configurarFluxo', () => {\n    it('deve configurar o fluxo de aprovação de um benefício', async () => {\n      const configurarFluxoDto = {\n        descricao: 'Fluxo de aprovação para cesta básica',\n        etapas: [\n          {\n            ordem: 1,\n            nome: 'Análise técnica',\n            descricao: 'Verificação inicial dos documentos',\n            tipo_aprovador: TipoAprovador.TECNICO,\n            prazo_dias: 2,\n          },\n          {\n            ordem: 2,\n            nome: 'Aprovação coordenação',\n            descricao: 'Aprovação pela coordenação da unidade',\n            tipo_aprovador: TipoAprovador.GESTOR_UNIDADE,\n            prazo_dias: 3,\n          },\n        ],\n      };\n\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n      };\n\n      const mockFluxo = {\n        id: '1',\n        ...configurarFluxoDto,\n        tipo_beneficio: mockBeneficio,\n      };\n\n      // Verificar se o benefício existe\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(mockBeneficio);\n\n      // Verificar se já existe um fluxo para este benefício\n      mockFluxoBeneficioRepository.find.mockResolvedValue([]);\n\n      // Criar e salvar o fluxo\n      const mockEtapa1 = {\n        tipo_beneficio: mockBeneficio,\n        nome_etapa: configurarFluxoDto.etapas[0].nome,\n        ordem: configurarFluxoDto.etapas[0].ordem,\n        descricao: configurarFluxoDto.etapas[0].descricao,\n        tipo_etapa: configurarFluxoDto.etapas[0].tipo_aprovador,\n        perfil_responsavel: configurarFluxoDto.etapas[0].tipo_aprovador,\n        obrigatorio: true,\n        permite_retorno: false,\n        setor_id: '2',\n      };\n\n      const mockEtapa2 = {\n        tipo_beneficio: mockBeneficio,\n        nome_etapa: configurarFluxoDto.etapas[1].nome,\n        ordem: configurarFluxoDto.etapas[1].ordem,\n        descricao: configurarFluxoDto.etapas[1].descricao,\n        tipo_etapa: configurarFluxoDto.etapas[1].tipo_aprovador,\n        perfil_responsavel: configurarFluxoDto.etapas[1].tipo_aprovador,\n        obrigatorio: true,\n        permite_retorno: false,\n        setor_id: '3',\n      };\n\n      mockFluxoBeneficioRepository.create.mockReturnValueOnce(mockEtapa1);\n      mockFluxoBeneficioRepository.create.mockReturnValueOnce(mockEtapa2);\n      mockFluxoBeneficioRepository.save.mockResolvedValue([\n        mockEtapa1,\n        mockEtapa2,\n      ]);\n\n      const result = await service.configurarFluxo('1', configurarFluxoDto);\n\n      expect(result).toEqual([mockEtapa1, mockEtapa2]);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalled();\n      expect(mockFluxoBeneficioRepository.find).toHaveBeenCalled();\n      // Verificar se create foi chamado para cada etapa\n      expect(mockFluxoBeneficioRepository.create).toHaveBeenCalledTimes(2);\n\n      // Verificar a primeira chamada (primeira etapa)\n      expect(\n        mockFluxoBeneficioRepository.create.mock.calls[0][0],\n      ).toMatchObject({\n        tipo_beneficio: mockBeneficio,\n        nome_etapa: configurarFluxoDto.etapas[0].nome,\n        ordem: configurarFluxoDto.etapas[0].ordem,\n        descricao: configurarFluxoDto.etapas[0].descricao,\n      });\n\n      // Verificar a segunda chamada (segunda etapa)\n      expect(\n        mockFluxoBeneficioRepository.create.mock.calls[1][0],\n      ).toMatchObject({\n        tipo_beneficio: mockBeneficio,\n        nome_etapa: configurarFluxoDto.etapas[1].nome,\n        ordem: configurarFluxoDto.etapas[1].ordem,\n        descricao: configurarFluxoDto.etapas[1].descricao,\n      });\n      expect(mockFluxoBeneficioRepository.save).toHaveBeenCalledWith([\n        mockEtapa1,\n        mockEtapa2,\n      ]);\n    });\n\n    it('deve lançar BadRequestException quando o fluxo não contém etapas', async () => {\n      const configurarFluxoDto = {\n        descricao: 'Fluxo de aprovação para cesta básica',\n        etapas: [],\n      };\n\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n      };\n\n      // Verificar se o benefício existe\n      mockTipoBeneficioRepository.findOne.mockResolvedValue(mockBeneficio);\n\n      await expect(\n        service.configurarFluxo('1', configurarFluxoDto),\n      ).rejects.toThrow(BadRequestException);\n      expect(mockTipoBeneficioRepository.findOne).toHaveBeenCalled();\n      expect(mockFluxoBeneficioRepository.save).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}