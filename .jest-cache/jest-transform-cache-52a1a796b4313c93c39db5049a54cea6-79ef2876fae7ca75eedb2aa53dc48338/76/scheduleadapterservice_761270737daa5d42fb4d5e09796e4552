8d726271a4179355bdee63cd0adcc9c6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ScheduleAdapterService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleAdapterService = void 0;
const common_1 = require("@nestjs/common");
/**
 * Serviço adaptador para agendamento
 *
 * Este serviço implementa uma solução alternativa para o agendamento de tarefas
 * enquanto resolvemos os problemas de compatibilidade com o ScheduleModule.
 */
let ScheduleAdapterService = ScheduleAdapterService_1 = class ScheduleAdapterService {
    logger = new common_1.Logger(ScheduleAdapterService_1.name);
    intervals = new Map();
    timeouts = new Map();
    /**
     * Agenda uma tarefa para ser executada em intervalos regulares
     *
     * @param name Nome único para identificar a tarefa
     * @param milliseconds Intervalo em milissegundos
     * @param callback Função a ser executada
     */
    scheduleInterval(name, milliseconds, callback) {
        // Cancela o intervalo existente, se houver
        this.cancelInterval(name);
        // Cria um novo intervalo
        const interval = setInterval(async () => {
            try {
                await callback();
            }
            catch (error) {
                this.logger.error(`Erro ao executar tarefa agendada ${name}: ${error.message}`);
            }
        }, milliseconds);
        // Armazena o intervalo para referência futura
        this.intervals.set(name, interval);
        this.logger.log(`Tarefa ${name} agendada para executar a cada ${milliseconds}ms`);
    }
    /**
     * Cancela uma tarefa agendada
     *
     * @param name Nome da tarefa a ser cancelada
     */
    cancelInterval(name) {
        const interval = this.intervals.get(name);
        if (interval) {
            clearInterval(interval);
            this.intervals.delete(name);
            this.logger.log(`Tarefa ${name} cancelada`);
        }
    }
    /**
     * Agenda uma tarefa para ser executada diariamente em um horário específico
     *
     * @param name Nome único para identificar a tarefa
     * @param hour Hora do dia (0-23)
     * @param minute Minuto (0-59)
     * @param callback Função a ser executada
     */
    scheduleDailyTask(name, hour, minute, callback) {
        this.cancelInterval(name);
        const calculateNextRun = () => {
            const now = new Date();
            const nextRun = new Date(now.getFullYear(), now.getMonth(), now.getDate(), hour, minute, 0);
            // Se o horário já passou hoje, agendar para amanhã
            if (nextRun.getTime() <= now.getTime()) {
                nextRun.setDate(nextRun.getDate() + 1);
            }
            return nextRun.getTime() - now.getTime();
        };
        const scheduleNext = () => {
            const timeUntilNextRun = calculateNextRun();
            const timeout = setTimeout(async () => {
                try {
                    await callback();
                }
                catch (error) {
                    this.logger.error(`Erro ao executar tarefa diária ${name}: ${error.message}`);
                }
                // Agenda a próxima execução
                scheduleNext();
            }, timeUntilNextRun);
            this.intervals.set(name, timeout);
            this.logger.log(`Tarefa diária ${name} agendada para executar em ${Math.floor(timeUntilNextRun / 1000 / 60)} minutos`);
        };
        // Inicia o agendamento
        scheduleNext();
    }
    /**
     * Agenda uma tarefa para ser executada uma única vez em uma data específica
     *
     * @param name Nome único para identificar a tarefa
     * @param date Data e hora para execução da tarefa
     * @param callback Função a ser executada
     */
    scheduleOnce(name, date, callback) {
        // Cancela o timeout existente, se houver
        this.cancelTimeout(name);
        const now = new Date();
        const delay = date.getTime() - now.getTime();
        if (delay <= 0) {
            // Se a data já passou, executar imediatamente
            callback().catch((error) => {
                this.logger.error(`Erro ao executar tarefa agendada ${name}: ${error.message}`);
            });
            return;
        }
        // Criar um novo timeout
        const timeout = setTimeout(async () => {
            try {
                await callback();
                // Remover da lista após execução
                this.timeouts.delete(name);
            }
            catch (error) {
                this.logger.error(`Erro ao executar tarefa agendada ${name}: ${error.message}`);
            }
        }, delay);
        // Armazenar o timeout para referência futura
        this.timeouts.set(name, timeout);
        this.logger.log(`Tarefa ${name} agendada para executar em ${new Date(now.getTime() + delay).toISOString()}`);
    }
    /**
     * Cancela um timeout agendado
     *
     * @param name Nome da tarefa a ser cancelada
     */
    cancelTimeout(name) {
        const timeout = this.timeouts.get(name);
        if (timeout) {
            clearTimeout(timeout);
            this.timeouts.delete(name);
            this.logger.log(`Timeout ${name} cancelado`);
        }
    }
};
exports.ScheduleAdapterService = ScheduleAdapterService;
exports.ScheduleAdapterService = ScheduleAdapterService = ScheduleAdapterService_1 = __decorate([
    (0, common_1.Injectable)()
], ScheduleAdapterService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,