{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\controllers\\resilience-monitoring.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\controllers\\resilience-monitoring.controller.ts"],"sourcesContent":["import { Controller, Get, Post, HttpCode, HttpStatus, UseGuards } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';\nimport { ResilientAuditoriaService } from '../services/resilient-auditoria.service';\nimport { HybridCacheService } from '../services/hybrid-cache.service';\nimport { HealthCheckService } from '../services/health-check.service';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { Roles } from '../../auth/decorators/role.decorator';\nimport { ROLES } from '../constants/roles.constants';\nimport type { RoleType } from '../constants/roles.constants';\n\ninterface ResilienceStatus {\n  timestamp: string;\n  overall: 'healthy' | 'degraded' | 'critical';\n  services: {\n    cache: {\n      status: 'healthy' | 'degraded' | 'critical';\n      l1Available: boolean;\n      l2Available: boolean;\n      metrics: any;\n    };\n    auditoria: {\n      status: 'healthy' | 'degraded' | 'critical';\n      queueAvailable: boolean;\n      syncFallbackActive: boolean;\n      fileBackupActive: boolean;\n      metrics: any;\n    };\n    redis: {\n      status: 'up' | 'down' | 'degraded';\n      latency?: number;\n      lastCheck: string;\n    };\n    database: {\n      status: 'up' | 'down' | 'degraded';\n      latency?: number;\n      lastCheck: string;\n    };\n  };\n  alerts: Array<{\n    severity: 'warning' | 'critical';\n    service: string;\n    message: string;\n    timestamp: string;\n  }>;\n}\n\n/**\n * Controller de Monitoramento de Resiliência\n * \n * Fornece endpoints para monitorar o status e métricas dos serviços resilientes:\n * - Status geral do sistema\n * - Métricas detalhadas de cache\n * - Métricas de auditoria\n * - Health checks de serviços externos\n * - Alertas e notificações\n * \n * Acesso restrito a administradores do sistema\n */\n@ApiTags('Monitoramento de Resiliência')\n@Controller('api/resilience')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\nexport class ResilienceMonitoringController {\n  constructor(\n    private readonly resilientAuditoriaService: ResilientAuditoriaService,\n    private readonly hybridCacheService: HybridCacheService,\n    private readonly healthCheckService: HealthCheckService\n  ) {}\n\n  /**\n   * Obtém status geral de resiliência do sistema\n   */\n  @Get('status')\n  @Roles(ROLES.ADMIN, ROLES.GESTOR)\n  @ApiOperation({ \n    summary: 'Status geral de resiliência',\n    description: 'Retorna o status consolidado de todos os serviços resilientes do sistema'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Status de resiliência obtido com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        timestamp: { type: 'string', format: 'date-time' },\n        overall: { type: 'string', enum: ['healthy', 'degraded', 'critical'] },\n        services: { type: 'object' },\n        alerts: { type: 'array' }\n      }\n    }\n  })\n  async getResilienceStatus(): Promise<ResilienceStatus> {\n    const timestamp = new Date().toISOString();\n    \n    // Obter status dos serviços\n    // Verificar status dos serviços\n    const redisAvailable = await this.healthCheckService.isRedisAvailable();\n    const servicesStatus = {\n      redis: {\n        status: redisAvailable ? 'up' as const : 'down' as const,\n        lastCheck: new Date().toISOString(),\n        latency: redisAvailable ? 5 : undefined\n      },\n      database: {\n        status: 'up' as const, // Assumindo que o banco está sempre disponível se a aplicação está rodando\n        lastCheck: new Date().toISOString(),\n        latency: 10\n      }\n    };\n    const cacheMetrics = this.hybridCacheService.getMetrics();\n    const auditoriaMetrics = this.resilientAuditoriaService.getMetrics();\n    \n    // Avaliar status do cache\n    const cacheStatus = this.evaluateCacheStatus(cacheMetrics, servicesStatus.redis?.status === 'up');\n    \n    // Avaliar status da auditoria\n    const auditoriaStatus = this.evaluateAuditoriaStatus(auditoriaMetrics, servicesStatus.redis?.status === 'up');\n    \n    // Gerar alertas\n    const alerts = this.generateAlerts(cacheMetrics, auditoriaMetrics, servicesStatus);\n    \n    // Determinar status geral\n    const overall = this.determineOverallStatus(cacheStatus.status, auditoriaStatus.status, servicesStatus);\n    \n    return {\n      timestamp,\n      overall,\n      services: {\n        cache: cacheStatus,\n        auditoria: auditoriaStatus,\n        redis: {\n          status: servicesStatus.redis?.status || 'down',\n          latency: servicesStatus.redis?.latency,\n          lastCheck: servicesStatus.redis?.lastCheck || timestamp\n        },\n        database: {\n          status: servicesStatus.database?.status || 'down',\n          latency: servicesStatus.database?.latency,\n          lastCheck: servicesStatus.database?.lastCheck || timestamp\n        }\n      },\n      alerts\n    };\n  }\n\n  /**\n   * Obtém métricas detalhadas do cache híbrido\n   */\n  @Get('cache/metrics')\n  @Roles(ROLES.ADMIN, ROLES.GESTOR)\n  @ApiOperation({ \n    summary: 'Métricas do cache híbrido',\n    description: 'Retorna métricas detalhadas do sistema de cache em múltiplas camadas'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Métricas do cache obtidas com sucesso'\n  })\n  async getCacheMetrics() {\n    const metrics = this.hybridCacheService.getMetrics();\n    // Verificar status dos serviços\n    const redisAvailable = await this.healthCheckService.isRedisAvailable();\n    const servicesStatus = {\n      redis: {\n        status: redisAvailable ? 'up' as const : 'down' as const,\n        lastCheck: new Date().toISOString(),\n        latency: redisAvailable ? 5 : undefined\n      },\n      database: {\n        status: 'up' as const, // Assumindo que o banco está sempre disponível se a aplicação está rodando\n        lastCheck: new Date().toISOString(),\n        latency: 10\n      }\n    };\n    \n    return {\n      timestamp: new Date().toISOString(),\n      l1Cache: {\n        size: metrics.l1Size,\n        maxSize: metrics.l1MaxSize,\n        utilizationRate: (metrics.l1Size / metrics.l1MaxSize) * 100,\n        hitRate: metrics.l1HitRate,\n        hits: metrics.l1Hits,\n        misses: metrics.l1Misses\n      },\n      l2Cache: {\n        available: servicesStatus.redis?.status === 'up',\n        hitRate: metrics.l2HitRate,\n        hits: metrics.l2Hits,\n        misses: metrics.l2Misses,\n        failovers: metrics.failovers\n      },\n      overall: {\n        hitRate: metrics.overallHitRate,\n        evictions: metrics.evictions,\n        warmingOperations: metrics.warmingOperations,\n        criticalKeysCount: metrics.criticalKeysCount,\n        pendingOperations: metrics.pendingOperations\n      },\n      performance: {\n        l1ResponseTime: '< 1ms',\n        l2ResponseTime: servicesStatus.redis?.latency ? `${servicesStatus.redis.latency}ms` : 'N/A'\n      }\n    };\n  }\n\n  /**\n   * Obtém métricas detalhadas da auditoria resiliente\n   */\n  @Get('auditoria/metrics')\n  @Roles(ROLES.ADMIN, ROLES.GESTOR)\n  @ApiOperation({ \n    summary: 'Métricas da auditoria resiliente',\n    description: 'Retorna métricas detalhadas do sistema de auditoria com fallbacks'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Métricas da auditoria obtidas com sucesso'\n  })\n  async getAuditoriaMetrics() {\n    const metrics = this.resilientAuditoriaService.getMetrics();\n    // Verificar status dos serviços\n    const redisAvailable = await this.healthCheckService.isRedisAvailable();\n    const servicesStatus = {\n      redis: {\n        status: redisAvailable ? 'up' as const : 'down' as const,\n        lastCheck: new Date().toISOString(),\n        latency: redisAvailable ? 5 : undefined\n      },\n      database: {\n        status: 'up' as const, // Assumindo que o banco está sempre disponível se a aplicação está rodando\n        lastCheck: new Date().toISOString(),\n        latency: 10\n      }\n    };\n    \n    const totalOperations = metrics.queueSuccesses + metrics.queueFailures;\n    \n    return {\n      timestamp: new Date().toISOString(),\n      queue: {\n        available: servicesStatus.redis?.status === 'up',\n        successRate: metrics.queueSuccessRate,\n        successes: metrics.queueSuccesses,\n        failures: metrics.queueFailures,\n        totalOperations\n      },\n      fallbacks: {\n        syncFallbackUsage: metrics.fallbackUsageRate,\n        syncFallbacks: metrics.syncFallbacks,\n        fileBackupUsage: metrics.backupUsageRate,\n        fileBackups: metrics.fileBackups\n      },\n      recovery: {\n        recoveredLogs: metrics.recoveredLogs,\n        lastRecoveryRun: 'Informação não disponível' // Implementar se necessário\n      },\n      reliability: {\n        dataLossRisk: this.calculateDataLossRisk(metrics),\n        systemResilience: this.calculateSystemResilience(metrics, servicesStatus.redis?.status === 'up')\n      }\n    };\n  }\n\n  /**\n   * Força execução de cache warming\n   */\n  @Post('cache/warm')\n  @HttpCode(HttpStatus.OK)\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ \n    summary: 'Força cache warming',\n    description: 'Executa manualmente o processo de aquecimento do cache para chaves críticas'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Cache warming executado com sucesso'\n  })\n  async forceCacheWarming() {\n    await this.hybridCacheService.performCacheWarming();\n    \n    return {\n      message: 'Cache warming executado com sucesso',\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Força execução de recuperação de logs de auditoria\n   */\n  @Post('auditoria/recover')\n  @HttpCode(HttpStatus.OK)\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ \n    summary: 'Força recuperação de logs',\n    description: 'Executa manualmente o processo de recuperação de logs de auditoria em backup'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Recuperação de logs executada com sucesso'\n  })\n  async forceAuditoriaRecovery() {\n    await this.resilientAuditoriaService.processBackupAuditLogs();\n    \n    return {\n      message: 'Recuperação de logs de auditoria executada com sucesso',\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Reseta métricas (útil para testes e manutenção)\n   */\n  @Post('metrics/reset')\n  @HttpCode(HttpStatus.OK)\n  @Roles(ROLES.ADMIN)\n  @ApiOperation({ \n    summary: 'Reseta métricas',\n    description: 'Reseta todas as métricas de resiliência (use com cuidado)'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Métricas resetadas com sucesso'\n  })\n  async resetMetrics() {\n    this.hybridCacheService.resetMetrics();\n    this.resilientAuditoriaService.resetMetrics();\n    \n    return {\n      message: 'Métricas de resiliência resetadas com sucesso',\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Métodos privados para avaliação de status\n\n  private evaluateCacheStatus(metrics: any, redisAvailable: boolean) {\n    let status: 'healthy' | 'degraded' | 'critical';\n    \n    if (metrics.overallHitRate >= 80 && redisAvailable) {\n      status = 'healthy';\n    } else if (metrics.overallHitRate >= 60 || !redisAvailable) {\n      status = 'degraded';\n    } else {\n      status = 'critical';\n    }\n    \n    return {\n      status,\n      l1Available: true, // L1 sempre disponível\n      l2Available: redisAvailable,\n      metrics\n    };\n  }\n\n  private evaluateAuditoriaStatus(metrics: any, redisAvailable: boolean) {\n    let status: 'healthy' | 'degraded' | 'critical';\n    \n    if (metrics.queueSuccessRate >= 95 && redisAvailable) {\n      status = 'healthy';\n    } else if (metrics.queueSuccessRate >= 80 || metrics.fallbackUsageRate < 20) {\n      status = 'degraded';\n    } else {\n      status = 'critical';\n    }\n    \n    return {\n      status,\n      queueAvailable: redisAvailable,\n      syncFallbackActive: metrics.syncFallbacks > 0,\n      fileBackupActive: metrics.fileBackups > 0,\n      metrics\n    };\n  }\n\n  private determineOverallStatus(\n    cacheStatus: string,\n    auditoriaStatus: string,\n    servicesStatus: any\n  ): 'healthy' | 'degraded' | 'critical' {\n    const statuses = [cacheStatus, auditoriaStatus];\n    \n    // Se algum serviço crítico está down\n    if (servicesStatus.database?.status === 'down') {\n      return 'critical';\n    }\n    \n    // Se algum componente está crítico\n    if (statuses.includes('critical')) {\n      return 'critical';\n    }\n    \n    // Se algum componente está degradado\n    if (statuses.includes('degraded') || servicesStatus.redis?.status === 'down') {\n      return 'degraded';\n    }\n    \n    return 'healthy';\n  }\n\n  private generateAlerts(cacheMetrics: any, auditoriaMetrics: any, servicesStatus: any) {\n    const alerts: any[] = [];\n    const timestamp = new Date().toISOString();\n    \n    // Alertas de cache\n    if (cacheMetrics.overallHitRate < 60) {\n      alerts.push({\n        severity: 'warning',\n        service: 'cache',\n        message: `Taxa de hit do cache baixa: ${cacheMetrics.overallHitRate.toFixed(1)}%`,\n        timestamp\n      });\n    }\n    \n    if (cacheMetrics.failovers > 10) {\n      alerts.push({\n        severity: 'critical',\n        service: 'cache',\n        message: `Muitos failovers do cache L2: ${cacheMetrics.failovers}`,\n        timestamp\n      });\n    }\n    \n    // Alertas de auditoria\n    if (auditoriaMetrics.queueSuccessRate < 90) {\n      alerts.push({\n        severity: 'warning',\n        service: 'auditoria',\n        message: `Taxa de sucesso da fila de auditoria baixa: ${auditoriaMetrics.queueSuccessRate.toFixed(1)}%`,\n        timestamp\n      });\n    }\n    \n    if (auditoriaMetrics.fileBackups > 0) {\n      alerts.push({\n        severity: 'critical',\n        service: 'auditoria',\n        message: `Logs de auditoria sendo salvos em backup: ${auditoriaMetrics.fileBackups}`,\n        timestamp\n      });\n    }\n    \n    // Alertas de serviços externos\n    if (servicesStatus.redis?.status === 'down') {\n      alerts.push({\n        severity: 'critical',\n        service: 'redis',\n        message: 'Redis indisponível - sistema operando em modo degradado',\n        timestamp\n      });\n    }\n    \n    if (servicesStatus.database?.status === 'down') {\n      alerts.push({\n        severity: 'critical',\n        service: 'database',\n        message: 'Banco de dados indisponível',\n        timestamp\n      });\n    }\n    \n    return alerts;\n  }\n\n  private calculateDataLossRisk(metrics: any): 'low' | 'medium' | 'high' {\n    if (metrics.fileBackups > 0) {\n      return 'high';\n    }\n    \n    if (metrics.queueSuccessRate < 95) {\n      return 'medium';\n    }\n    \n    return 'low';\n  }\n\n  private calculateSystemResilience(metrics: any, redisAvailable: boolean): number {\n    let score = 100;\n    \n    // Penalizar por falhas na fila\n    if (metrics.queueSuccessRate < 100) {\n      score -= (100 - metrics.queueSuccessRate) * 0.5;\n    }\n    \n    // Penalizar por uso de fallbacks\n    score -= metrics.fallbackUsageRate * 0.3;\n    \n    // Penalizar por backups em arquivo\n    score -= metrics.backupUsageRate * 0.8;\n    \n    // Penalizar por Redis indisponível\n    if (!redisAvailable) {\n      score -= 20;\n    }\n    \n    return Math.max(0, Math.min(100, score));\n  }\n}"],"version":3}