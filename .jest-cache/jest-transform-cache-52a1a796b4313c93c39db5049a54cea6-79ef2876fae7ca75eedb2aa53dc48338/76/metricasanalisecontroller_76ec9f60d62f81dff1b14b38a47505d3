0901c2030f53ae4a1c9beb1a7c08188f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasAnaliseController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../shared/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
const metricas_service_1 = require("../services/metricas.service");
const metricas_anomalia_service_1 = require("../services/metricas-anomalia.service");
/**
 * Controlador para análise de métricas
 *
 * Este controlador fornece endpoints para:
 * 1. Analisar tendências de métricas
 * 2. Detectar anomalias em séries históricas
 * 3. Gerar previsões baseadas em dados históricos
 */
let MetricasAnaliseController = class MetricasAnaliseController {
    metricasService;
    metricasAnomaliasService;
    constructor(metricasService, metricasAnomaliasService) {
        this.metricasService = metricasService;
        this.metricasAnomaliasService = metricasAnomaliasService;
    }
    /**
     * Analisa a tendência de uma métrica específica
     */
    async analisarTendencia(codigo, dataInicio, dataFim, granularidade) {
        return this.metricasAnomaliasService.analisarTendencias(codigo, dataInicio, dataFim, { granularidade: granularidade || 'diaria' });
    }
    /**
     * Detecta anomalias em uma série histórica de métrica
     */
    async detectarAnomalias(codigo, dataInicio, dataFim, sensibilidade) {
        return this.metricasAnomaliasService.detectarAnomaliasPorCodigo(codigo, dataInicio, dataFim);
    }
    /**
     * Gera previsão baseada em dados históricos de uma métrica
     */
    async gerarPrevisao(codigo, horizonte, intervaloConfianca, modelo) {
        // Implementação temporária até que o método seja adicionado ao serviço
        return {
            codigo,
            horizonte,
            intervaloConfianca,
            modelo,
            previsao: [{ data: new Date(), valor: 0 }],
            mensagem: 'Funcionalidade em desenvolvimento',
        };
    }
};
exports.MetricasAnaliseController = MetricasAnaliseController;
__decorate([
    (0, common_1.Get)(':codigo/tendencia'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Analisa tendência de uma métrica' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Análise de tendência realizada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Query)('dataInicio')),
    __param(2, (0, common_1.Query)('dataFim')),
    __param(3, (0, common_1.Query)('granularidade')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object, typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object, String]),
    __metadata("design:returntype", Promise)
], MetricasAnaliseController.prototype, "analisarTendencia", null);
__decorate([
    (0, common_1.Get)(':codigo/anomalias'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Detecta anomalias em série histórica de métrica' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Detecção de anomalias realizada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Query)('dataInicio')),
    __param(2, (0, common_1.Query)('dataFim')),
    __param(3, (0, common_1.Query)('sensibilidade')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object, typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object, Number]),
    __metadata("design:returntype", Promise)
], MetricasAnaliseController.prototype, "detectarAnomalias", null);
__decorate([
    (0, common_1.Get)(':codigo/previsao'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Gera previsão baseada em dados históricos' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Previsão gerada com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Query)('horizonte')),
    __param(2, (0, common_1.Query)('intervaloConfianca')),
    __param(3, (0, common_1.Query)('modelo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number, Number, String]),
    __metadata("design:returntype", Promise)
], MetricasAnaliseController.prototype, "gerarPrevisao", null);
exports.MetricasAnaliseController = MetricasAnaliseController = __decorate([
    (0, swagger_1.ApiTags)('Métricas e Dashboard'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, common_1.Controller)('metricas/analise'),
    __metadata("design:paramtypes", [typeof (_a = typeof metricas_service_1.MetricasService !== "undefined" && metricas_service_1.MetricasService) === "function" ? _a : Object, typeof (_b = typeof metricas_anomalia_service_1.MetricasAnomaliasService !== "undefined" && metricas_anomalia_service_1.MetricasAnomaliasService) === "function" ? _b : Object])
], MetricasAnaliseController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,