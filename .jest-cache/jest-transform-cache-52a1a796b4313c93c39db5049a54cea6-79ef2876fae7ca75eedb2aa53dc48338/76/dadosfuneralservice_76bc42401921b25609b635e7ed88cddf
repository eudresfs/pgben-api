2f83bcd7c99620b616794fa84550c30f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosFuneralService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const dados_funeral_entity_1 = require("../../../entities/dados-funeral.entity");
/**
 * Serviço para gerenciar dados específicos de Auxílio Funeral
 */
let DadosFuneralService = class DadosFuneralService {
    dadosFuneralRepository;
    constructor(dadosFuneralRepository) {
        this.dadosFuneralRepository = dadosFuneralRepository;
    }
    /**
     * Criar dados de funeral para uma solicitação
     */
    async create(createDto) {
        // Verificar se já existem dados para esta solicitação
        const existingData = await this.dadosFuneralRepository.findOne({
            where: { solicitacao_id: createDto.solicitacao_id },
        });
        if (existingData) {
            throw new Error('Já existem dados de funeral para esta solicitação');
        }
        const dadosFuneral = this.dadosFuneralRepository.create(createDto);
        return this.dadosFuneralRepository.save(dadosFuneral);
    }
    /**
     * Buscar dados de funeral por ID
     */
    async findOne(id) {
        const dadosFuneral = await this.dadosFuneralRepository.findOne({
            where: { id },
            relations: ['solicitacao'],
        });
        if (!dadosFuneral) {
            throw new common_1.NotFoundException('Dados de funeral não encontrados');
        }
        return dadosFuneral;
    }
    /**
     * Buscar dados de funeral por solicitação
     */
    async findBySolicitacao(solicitacaoId) {
        const dadosFuneral = await this.dadosFuneralRepository.findOne({
            where: { solicitacao_id: solicitacaoId },
            relations: ['solicitacao'],
        });
        if (!dadosFuneral) {
            throw new common_1.NotFoundException('Dados de funeral não encontrados para esta solicitação');
        }
        return dadosFuneral;
    }
    /**
     * Atualizar dados de funeral
     */
    async update(id, updateDto) {
        const dadosFuneral = await this.findOne(id);
        // Atualizar apenas os campos fornecidos
        Object.assign(dadosFuneral, updateDto);
        return this.dadosFuneralRepository.save(dadosFuneral);
    }
    /**
     * Remover dados de funeral
     */
    async remove(id) {
        const dadosFuneral = await this.findOne(id);
        await this.dadosFuneralRepository.remove(dadosFuneral);
    }
    /**
     * Verificar se existem dados de funeral para uma solicitação
     */
    async existsBySolicitacao(solicitacaoId) {
        const count = await this.dadosFuneralRepository.count({
            where: { solicitacao_id: solicitacaoId },
        });
        return count > 0;
    }
    /**
     * Buscar todos os dados de funeral com paginação
     */
    async findAll(page = 1, limit = 10) {
        const [data, total] = await this.dadosFuneralRepository.findAndCount({
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
    /**
     * Buscar dados por grau de parentesco
     */
    async findByGrauParentesco(grauParentesco, page = 1, limit = 10) {
        const [data, total] = await this.dadosFuneralRepository.findAndCount({
            where: { grau_parentesco_requerente: grauParentesco },
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
    /**
     * Buscar dados por período de óbito
     */
    async findByPeriodoObito(dataInicio, dataFim, page = 1, limit = 10) {
        const [data, total] = await this.dadosFuneralRepository.findAndCount({
            where: {
                data_obito: {
                    gte: dataInicio,
                    lte: dataFim,
                },
            },
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { data_obito: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
};
exports.DadosFuneralService = DadosFuneralService;
exports.DadosFuneralService = DadosFuneralService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(dados_funeral_entity_1.DadosFuneral)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], DadosFuneralService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,