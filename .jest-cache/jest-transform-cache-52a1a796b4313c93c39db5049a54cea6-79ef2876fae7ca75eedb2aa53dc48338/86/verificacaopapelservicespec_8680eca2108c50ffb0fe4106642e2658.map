{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\verificacao-papel.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\verificacao-papel.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository, DataSource } from 'typeorm';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport { VerificacaoPapelService } from '@modules/cidadao/services/verificacao-papel.service';\nimport { CidadaoService } from '@modules/cidadao/services/cidadao.service';\nimport { HistoricoConversaoPapelService } from '@modules/cidadao/services/historico-conversao-papel.service';\nimport { PapelCidadaoService } from '@modules/cidadao/services/papel-cidadao.service';\nimport { PapelCidadao } from '@modules/cidadao/entities/papel-cidadao.entity';\nimport { TipoPapel } from '@modules/cidadao/enums/tipo-papel.enum';\nimport { RegraConflitoPapel } from '@modules/cidadao/entities/regra-conflito-papel.entity';\nimport { ComposicaoFamiliar } from '@modules/cidadao/entities/composicao-familiar.entity';\nimport { Cidadao } from '@modules/cidadao/entities/cidadao.entity';\nimport { CidadaoResponseDto } from '@modules/cidadao/dto/cidadao-response.dto';\n\ndescribe('VerificacaoPapelService', () => {\n  let service: VerificacaoPapelService;\n  let papelRepository: Repository<PapelCidadao>;\n  let historicoService: HistoricoConversaoPapelService;\n  let dataSource: DataSource;\n\n  const mockCidadaoRepository = {\n    findOne: jest.fn(),\n  };\n\n  const mockPapelRepository = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n    create: jest.fn(),\n    save: jest.fn(),\n    update: jest.fn(),\n  };\n\n\n\n  const mockComposicaoFamiliarRepository = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n  };\n\n  const mockCidadaoService = {\n    findById: jest.fn(),\n  };\n\n  const mockHistoricoService = {\n    criarHistorico: jest.fn(),\n  };\n\n  const mockQueryRunner = {\n    connect: jest.fn(),\n    startTransaction: jest.fn(),\n    commitTransaction: jest.fn(),\n    rollbackTransaction: jest.fn(),\n    release: jest.fn(),\n    manager: {\n      find: jest.fn(),\n      findOne: jest.fn(),\n      create: jest.fn(),\n      save: jest.fn(),\n      update: jest.fn(),\n    },\n  };\n\n  const mockDataSource = {\n    createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),\n    transaction: jest.fn(),\n  };\n\n  const mockCidadao: Cidadao = {\n    id: '550e8400-e29b-41d4-a716-446655440000',\n    nome: 'João da Silva',\n    cpf: '12345678901',\n    email: 'joao@example.com',\n  } as Cidadao;\n\n  const mockCidadaoResponse: CidadaoResponseDto = {\n    id: '550e8400-e29b-41d4-a716-446655440000',\n    nome: 'João da Silva',\n    cpf: '12345678901',\n    email: 'joao@example.com',\n  } as CidadaoResponseDto;\n\n  const mockPapelCidadao: PapelCidadao = {\n    id: '660e8400-e29b-41d4-a716-446655440000',\n    cidadao_id: '550e8400-e29b-41d4-a716-446655440000',\n    tipo_papel: TipoPapel.MEMBRO_COMPOSICAO,\n    ativo: true,\n    metadados: {},\n    created_at: new Date(),\n    updated_at: new Date(),\n  } as PapelCidadao;\n\n\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        VerificacaoPapelService,\n        {\n          provide: getRepositoryToken(Cidadao),\n          useValue: mockCidadaoRepository,\n        },\n        {\n          provide: getRepositoryToken(PapelCidadao),\n          useValue: mockPapelRepository,\n        },\n\n        {\n          provide: getRepositoryToken(ComposicaoFamiliar),\n          useValue: mockComposicaoFamiliarRepository,\n        },\n        {\n          provide: CidadaoService,\n          useValue: mockCidadaoService,\n        },\n        {\n          provide: HistoricoConversaoPapelService,\n          useValue: mockHistoricoService,\n        },\n        {\n          provide: DataSource,\n          useValue: mockDataSource,\n        },\n        {\n          provide: PapelCidadaoService,\n          useValue: {\n            create: jest.fn(),\n            findById: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<VerificacaoPapelService>(VerificacaoPapelService);\n    papelRepository = module.get<Repository<PapelCidadao>>(getRepositoryToken(PapelCidadao));\n\n    historicoService = module.get<HistoricoConversaoPapelService>(\n      HistoricoConversaoPapelService,\n    );\n    dataSource = module.get<DataSource>(DataSource);\n\n    jest.clearAllMocks();\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('verificarConflitoPapeis', () => {\n    const cpf = '12345678901';\n    const novoPapel = TipoPapel.BENEFICIARIO;\n\n    it('deve retornar sem conflito quando não há papéis ativos', async () => {\n      mockCidadaoRepository.findOne.mockResolvedValue({\n        ...mockCidadao,\n        papeis: [],\n      });\n\n      const result = await service.verificarConflitoPapeis(cpf);\n\n      expect(result.temConflito).toBe(false);\n      expect(result.detalhes).toBe('Nenhum papel ativo encontrado');\n    });\n\n    it('deve retornar sem conflito quando não há regras de conflito', async () => {\n      mockCidadaoRepository.findOne.mockResolvedValue({\n        ...mockCidadao,\n        papeis: [],\n      });\n\n      const result = await service.verificarConflitoPapeis(cpf);\n\n      expect(result.temConflito).toBe(false);\n      expect(result.detalhes).toBe('Nenhum papel ativo encontrado');\n    });\n\n    it('deve detectar conflito quando há regra de conflito ativa', async () => {\n      const cidadaoComPapeis = {\n        ...mockCidadao,\n        papeis: [\n          {\n            ...mockPapelCidadao,\n            tipo_papel: 'beneficiario',\n            ativo: true,\n          },\n          {\n            id: '2',\n            cidadao_id: mockCidadao.id,\n            tipo_papel: 'requerente',\n            ativo: true,\n          },\n        ],\n      };\n\n      mockCidadaoRepository.findOne.mockResolvedValue(cidadaoComPapeis);\n\n      const result = await service.verificarConflitoPapeis(cpf);\n\n      expect(result.temConflito).toBe(true);\n      expect(result.detalhes).toContain('beneficiário e requerente simultaneamente');\n    });\n\n    it('deve buscar cidadão com papéis', async () => {\n      mockCidadaoRepository.findOne.mockResolvedValue({\n        ...mockCidadao,\n        papeis: [],\n      });\n\n      await service.verificarConflitoPapeis(cpf);\n\n      expect(mockCidadaoRepository.findOne).toHaveBeenCalledWith({\n        where: { cpf },\n        relations: ['papeis'],\n      });\n    });\n\n    it('deve retornar resultado válido quando cidadão não existe', async () => {\n      mockCidadaoRepository.findOne.mockResolvedValue(null);\n\n      const result = await service.verificarConflitoPapeis(cpf);\n\n      expect(result.temConflito).toBe(false);\n      expect(result.detalhes).toBe('Cidadão não encontrado');\n    });\n  });\n\n  describe('converterParaBeneficiario', () => {\n    const cidadaoId = '550e8400-e29b-41d4-a716-446655440000';\n    const motivo = 'Conversão para beneficiário';\n\n    it('deve converter um membro da composição para beneficiário', async () => {\n      const novoPapel = {\n        id: '880e8400-e29b-41d4-a716-446655440000',\n        cidadao_id: cidadaoId,\n        tipo_papel: 'beneficiario',\n        ativo: true,\n        metadados: {},\n        created_at: new Date(),\n        updated_at: new Date(),\n      } as PapelCidadao;\n\n      const papelMembroComposicao = {\n        ...mockPapelCidadao,\n        tipo_papel: 'membro_composicao',\n        ativo: true,\n      };\n\n      const cidadaoComPapeis = {\n        ...mockCidadao,\n        papeis: [papelMembroComposicao],\n      };\n\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn()\n            .mockResolvedValueOnce(cidadaoComPapeis), // busca do cidadão com papéis\n          find: jest.fn(),\n          update: jest.fn().mockResolvedValue({ affected: 1 }),\n          create: jest.fn().mockReturnValue(novoPapel),\n          save: jest.fn().mockResolvedValue(novoPapel),\n        };\n        return callback(manager);\n      });\n\n      mockHistoricoService.criarHistorico.mockResolvedValue({ id: 'historico-id' });\n\n      const result = await service.converterParaBeneficiario(cidadaoId, motivo);\n\n      expect(result.sucesso).toBe(true);\n      expect(result.mensagem).toBe('Conversão para beneficiário realizada com sucesso');\n      expect(result.historicoId).toBeDefined();\n      expect(mockHistoricoService.criarHistorico).toHaveBeenCalled();\n    });\n\n    it('deve lançar NotFoundException quando cidadão não existir', async () => {\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn().mockResolvedValue(null),\n          find: jest.fn(),\n          update: jest.fn(),\n          create: jest.fn(),\n          save: jest.fn(),\n        };\n        return callback(manager);\n      });\n\n      await expect(service.converterParaBeneficiario(cidadaoId, motivo)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('deve lançar ConflictException quando cidadão já for beneficiário', async () => {\n      const papelBeneficiario = {\n        ...mockPapelCidadao,\n        tipo_papel: 'beneficiario',\n        ativo: true,\n      };\n\n      const cidadaoComBeneficiario = {\n        ...mockCidadao,\n        papeis: [papelBeneficiario],\n      };\n\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn()\n            .mockResolvedValueOnce(cidadaoComBeneficiario), // busca do cidadão com papel beneficiário\n          find: jest.fn(),\n          update: jest.fn(),\n          create: jest.fn(),\n          save: jest.fn(),\n        };\n        return callback(manager);\n      });\n\n      await expect(service.converterParaBeneficiario(cidadaoId, motivo))\n        .rejects.toThrow('Cidadão já é beneficiário');\n    });\n\n    it('deve desativar papéis conflitantes durante a conversão', async () => {\n      const novoPapel = {\n        id: '880e8400-e29b-41d4-a716-446655440000',\n        cidadao_id: cidadaoId,\n        tipo_papel: 'beneficiario',\n        ativo: true,\n        metadados: {},\n        created_at: new Date(),\n        updated_at: new Date(),\n      } as PapelCidadao;\n\n      const papelMembroComposicao = {\n        ...mockPapelCidadao,\n        tipo_papel: 'membro_composicao',\n        ativo: true,\n      };\n\n      const cidadaoComPapeis = {\n        ...mockCidadao,\n        papeis: [papelMembroComposicao],\n      };\n\n      const mockManager = {\n        findOne: jest.fn()\n          .mockResolvedValueOnce(cidadaoComPapeis), // busca do cidadão com papéis\n        find: jest.fn(),\n        update: jest.fn().mockResolvedValue({ affected: 1 }),\n        create: jest.fn().mockReturnValue(novoPapel),\n        save: jest.fn().mockResolvedValue(novoPapel),\n      };\n\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        return callback(mockManager);\n      });\n\n      mockHistoricoService.criarHistorico.mockResolvedValue({ id: 'historico-id' });\n\n      await service.converterParaBeneficiario(cidadaoId, motivo);\n\n      // Verifica se o save foi chamado duas vezes (desativar papel antigo + criar novo papel)\n      expect(mockManager.save).toHaveBeenCalledTimes(2);\n      \n      // Verifica se o papel antigo foi desativado (primeira chamada)\n      expect(mockManager.save).toHaveBeenNthCalledWith(1, \n        expect.objectContaining({\n          id: papelMembroComposicao.id,\n          ativo: false,\n        })\n      );\n      \n      // Verifica se o novo papel foi criado (segunda chamada)\n      expect(mockManager.save).toHaveBeenNthCalledWith(2, novoPapel);\n    });\n\n    it('deve criar histórico de conversão', async () => {\n      const novoPapel = {\n        id: '880e8400-e29b-41d4-a716-446655440000',\n        cidadao_id: cidadaoId,\n        tipo_papel: 'beneficiario',\n        ativo: true,\n        metadados: {},\n        created_at: new Date(),\n        updated_at: new Date(),\n      } as PapelCidadao;\n\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn()\n            .mockResolvedValueOnce(mockCidadao) // busca do cidadão\n            .mockResolvedValueOnce(null), // verificação de papel existente\n          find: jest.fn()\n            .mockResolvedValueOnce([mockPapelCidadao]), // papéis ativos\n          update: jest.fn().mockResolvedValue({ affected: 1 }),\n          create: jest.fn().mockReturnValue(novoPapel),\n          save: jest.fn().mockResolvedValue(novoPapel),\n        };\n        return callback(manager);\n      });\n\n      mockHistoricoService.criarHistorico.mockResolvedValue({});\n\n      await service.converterParaBeneficiario(cidadaoId, motivo);\n\n      expect(mockHistoricoService.criarHistorico).toHaveBeenCalledWith({\n        cidadao_id: cidadaoId,\n        papel_anterior: 'membro_composicao',\n        papel_novo: 'beneficiario',\n        justificativa: motivo,\n      }, 'sistema');\n    });\n  });\n});"],"version":3}