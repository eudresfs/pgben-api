bfe3a8d8122585c71c46474c6c294825
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var NotificacaoService_1;
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificacaoService = exports.TipoNotificacao = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const prazo_solicitacao_service_1 = require("./prazo-solicitacao.service");
const priorizacao_solicitacao_service_1 = require("./priorizacao-solicitacao.service");
const config_1 = require("@nestjs/config");
const event_emitter_1 = require("@nestjs/event-emitter");
/**
 * Tipos de notificação disponíveis no sistema
 */
var TipoNotificacao;
(function (TipoNotificacao) {
    TipoNotificacao["PRAZO_EXPIRADO"] = "prazo_expirado";
    TipoNotificacao["PRAZO_PROXIMO"] = "prazo_proximo";
    TipoNotificacao["DETERMINACAO_JUDICIAL"] = "determinacao_judicial";
    TipoNotificacao["PENDENCIA_ABERTA"] = "pendencia_aberta";
    TipoNotificacao["ALTERACAO_STATUS"] = "alteracao_status";
    TipoNotificacao["SOLICITACAO_ATRIBUIDA"] = "solicitacao_atribuida";
    TipoNotificacao["MONITORAMENTO_PENDENTE"] = "monitoramento_pendente";
    TipoNotificacao["MONITORAMENTO_PROXIMO"] = "monitoramento_proximo";
    TipoNotificacao["VISITA_MONITORAMENTO_REGISTRADA"] = "visita_monitoramento_registrada";
})(TipoNotificacao || (exports.TipoNotificacao = TipoNotificacao = {}));
/**
 * Serviço responsável pelo gerenciamento de notificações contextuais
 *
 * Este serviço implementa funcionalidades para:
 * - Gerar notificações para eventos importantes
 * - Verificar regularmente prazos e emitir alertas
 * - Notificar usuários sobre alterações em solicitações
 * - Emitir alertas para determinações judiciais
 */
let NotificacaoService = NotificacaoService_1 = class NotificacaoService {
    solicitacaoRepository;
    prazoService;
    priorizacaoService;
    configService;
    eventEmitter;
    logger = new common_1.Logger(NotificacaoService_1.name);
    constructor(solicitacaoRepository, prazoService, priorizacaoService, configService, eventEmitter) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.prazoService = prazoService;
        this.priorizacaoService = priorizacaoService;
        this.configService = configService;
        this.eventEmitter = eventEmitter;
    }
    /**
     * Envia uma notificação para o sistema
     * @param notificacao Dados da notificação a ser enviada
     */
    enviarNotificacao(notificacao) {
        try {
            this.logger.log(`Enviando notificação: ${notificacao.titulo}`);
            // Emitir evento para o sistema de notificações
            this.eventEmitter.emit('notificacao.criada', notificacao);
            // Em um ambiente real, aqui poderia haver integrações com:
            // - Sistema de e-mail
            // - Notificações push
            // - SMS
            // - Webhooks para sistemas externos
            this.logger.log(`Notificação enviada com sucesso: ${notificacao.titulo}`);
        }
        catch (error) {
            this.logger.error(`Erro ao enviar notificação: ${error.message}`, error.stack);
        }
    }
    /**
     * Notifica sobre uma alteração de status de solicitação
     * @param solicitacao Solicitação que teve o status alterado
     * @param statusAnterior Status anterior da solicitação
     * @param observacao Observação opcional sobre a alteração
     */
    notificarAlteracaoStatus(solicitacao, statusAnterior, observacao) {
        // Identificar os destinatários da notificação
        const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);
        // Construir a mensagem da notificação
        const mensagem = `A solicitação ${solicitacao.protocolo} foi alterada de ${statusAnterior} para ${solicitacao.status}${observacao ? `: ${observacao}` : '.'}`;
        // Determinar a prioridade da notificação
        const prioridade = solicitacao.determinacao_judicial_flag
            ? 'alta'
            : 'normal';
        // Enviar notificação para cada destinatário
        for (const destinatarioId of destinatarios) {
            this.enviarNotificacao({
                tipo: TipoNotificacao.ALTERACAO_STATUS,
                titulo: `Solicitação ${solicitacao.protocolo} - Alteração de Status`,
                mensagem,
                solicitacaoId: solicitacao.id,
                protocolo: solicitacao.protocolo,
                destinatarioId,
                dados: {
                    statusAnterior,
                    statusAtual: solicitacao.status,
                    determinacaoJudicial: solicitacao.determinacao_judicial_flag,
                },
                prioridade,
            });
        }
    }
    /**
     * Identifica os destinatários para uma notificação de alteração de solicitação
     * @param solicitacao Solicitação alterada
     * @returns Lista de IDs de usuários que devem receber a notificação
     */
    identificarDestinatariosAlteracao(solicitacao) {
        const destinatarios = new Set();
        // Técnico responsável
        if (solicitacao.tecnico_id) {
            destinatarios.add(solicitacao.tecnico_id);
        }
        // Aprovador (se houver)
        if (solicitacao.aprovador_id) {
            destinatarios.add(solicitacao.aprovador_id);
        }
        // Liberador (se houver)
        if (solicitacao.liberador_id) {
            destinatarios.add(solicitacao.liberador_id);
        }
        // Em um ambiente real, aqui também buscaríamos:
        // - Gerentes da unidade
        // - Usuários com papel específico de acompanhamento
        // - Administradores do sistema
        return Array.from(destinatarios);
    }
    /**
     * Notifica sobre um prazo expirado de solicitação
     * @param solicitacao Solicitação com prazo expirado
     * @param tipoPrazo Tipo de prazo expirado
     */
    notificarPrazoExpirado(solicitacao, tipoPrazo) {
        const prazoData = solicitacao[`prazo_${tipoPrazo}`];
        if (!prazoData) {
            return;
        }
        const diasAtraso = Math.floor((new Date().getTime() - prazoData.getTime()) / (1000 * 60 * 60 * 24));
        // Construir a mensagem da notificação
        const mensagem = `O prazo de ${tipoPrazo} da solicitação ${solicitacao.protocolo} expirou há ${diasAtraso} dias. Estado atual: ${solicitacao.status}.`;
        // Determinar prioridade com base no atraso e determinação judicial
        let prioridade = 'normal';
        if (solicitacao.determinacao_judicial_flag) {
            prioridade = diasAtraso > 5 ? 'urgente' : 'alta';
        }
        else {
            prioridade = diasAtraso > 10 ? 'alta' : 'normal';
        }
        // Enviar notificação para os destinatários
        const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);
        for (const destinatarioId of destinatarios) {
            this.enviarNotificacao({
                tipo: TipoNotificacao.PRAZO_EXPIRADO,
                titulo: `PRAZO EXPIRADO - Solicitação ${solicitacao.protocolo}`,
                mensagem,
                solicitacaoId: solicitacao.id,
                protocolo: solicitacao.protocolo,
                destinatarioId,
                dados: {
                    tipoPrazo,
                    diasAtraso,
                    determinacaoJudicial: solicitacao.determinacao_judicial_flag,
                },
                prioridade,
                dataVencimento: prazoData,
            });
        }
    }
    /**
     * Notifica sobre a atribuição de uma nova solicitação a um técnico
     * @param solicitacao Solicitação atribuída
     * @param tecnicoId ID do técnico responsável
     */
    notificarSolicitacaoAtribuida(solicitacao, tecnicoId) {
        // Determinar prioridade com base na determinação judicial
        const prioridade = solicitacao.determinacao_judicial_flag
            ? 'alta'
            : 'normal';
        // Construir a mensagem da notificação
        const mensagem = `A solicitação ${solicitacao.protocolo} foi atribuída a você. Estado atual: ${solicitacao.status}.${solicitacao.determinacao_judicial_flag
            ? ' ATENÇÃO: Esta solicitação tem determinação judicial e requer tratamento prioritário.'
            : ''}`;
        // Enviar notificação para o técnico
        this.enviarNotificacao({
            tipo: TipoNotificacao.SOLICITACAO_ATRIBUIDA,
            titulo: `Nova Solicitação Atribuída - ${solicitacao.protocolo}`,
            mensagem,
            solicitacaoId: solicitacao.id,
            protocolo: solicitacao.protocolo,
            destinatarioId: tecnicoId,
            dados: {
                determinacaoJudicial: solicitacao.determinacao_judicial_flag,
                status: solicitacao.status,
            },
            prioridade,
        });
    }
    /**
     * Notifica sobre uma determinação judicial associada a uma solicitação
     * @param solicitacao Solicitação com determinação judicial
     */
    notificarDeterminacaoJudicial(solicitacao) {
        if (!solicitacao.determinacao_judicial_flag) {
            return;
        }
        // Construir a mensagem da notificação
        const mensagem = `ATENÇÃO: A solicitação ${solicitacao.protocolo} está associada a uma determinação judicial e requer tratamento prioritário. Estado atual: ${solicitacao.status}.`;
        // Enviar notificação para os destinatários
        const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);
        for (const destinatarioId of destinatarios) {
            this.enviarNotificacao({
                tipo: TipoNotificacao.DETERMINACAO_JUDICIAL,
                titulo: `DETERMINAÇÃO JUDICIAL - Solicitação ${solicitacao.protocolo}`,
                mensagem,
                solicitacaoId: solicitacao.id,
                protocolo: solicitacao.protocolo,
                destinatarioId,
                dados: {
                    determinacaoJudicialId: solicitacao.determinacao_judicial_id,
                    status: solicitacao.status,
                },
                prioridade: 'urgente',
            });
        }
    }
    /**
     * Executa verificação diária de prazos e gera notificações para prazos vencidos ou próximos
     * Este método deve ser executado por um agendador (scheduler) em intervalos regulares
     */
    /**
     * Notifica sobre visita de monitoramento pendente para Aluguel Social
     * @param solicitacao Solicitação de Aluguel Social com visita pendente
     * @param dataLimite Data limite para realizar a visita
     */
    notificarMonitoramentoPendente(solicitacao, dataLimite) {
        // Identificar os destinatários da notificação
        const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);
        // Formatar a data limite para exibição
        const dataFormatada = dataLimite.toLocaleDateString('pt-BR');
        // Construir a mensagem da notificação
        const mensagem = `A solicitação de Aluguel Social ${solicitacao.protocolo} requer visita de monitoramento. ` +
            `Data limite: ${dataFormatada}. Por favor, realize a visita e registre no sistema.`;
        // Enviar notificação para cada destinatário
        for (const destinatarioId of destinatarios) {
            this.enviarNotificacao({
                tipo: TipoNotificacao.MONITORAMENTO_PENDENTE,
                titulo: `Monitoramento Pendente - Aluguel Social ${solicitacao.protocolo}`,
                mensagem,
                solicitacaoId: solicitacao.id,
                protocolo: solicitacao.protocolo,
                destinatarioId,
                dados: {
                    tipoBeneficio: 'aluguel_social',
                    dataLimite: dataLimite.toISOString(),
                    ultimaVisita: solicitacao.dados_complementares?.visitas_monitoramento?.[solicitacao.dados_complementares.visitas_monitoramento.length - 1]?.data || null,
                },
                prioridade: 'alta',
                dataVencimento: dataLimite,
            });
        }
    }
    /**
     * Notifica sobre visita de monitoramento que está se aproximando
     * @param solicitacao Solicitação de Aluguel Social com visita se aproximando
     * @param dataProximaVisita Data da próxima visita programada
     * @param diasRestantes Número de dias restantes até a data da visita
     */
    notificarMonitoramentoProximo(solicitacao, dataProximaVisita, diasRestantes) {
        // Identificar os destinatários da notificação
        const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);
        // Formatar a data da próxima visita para exibição
        const dataFormatada = dataProximaVisita.toLocaleDateString('pt-BR');
        // Construir a mensagem da notificação
        const mensagem = `A solicitação de Aluguel Social ${solicitacao.protocolo} requer visita de monitoramento em breve. ` +
            `Data programada: ${dataFormatada} (${diasRestantes} dias restantes). ` +
            `Por favor, planeje a visita.`;
        // Enviar notificação para cada destinatário
        for (const destinatarioId of destinatarios) {
            this.enviarNotificacao({
                tipo: TipoNotificacao.MONITORAMENTO_PROXIMO,
                titulo: `Monitoramento Próximo - Aluguel Social ${solicitacao.protocolo}`,
                mensagem,
                solicitacaoId: solicitacao.id,
                protocolo: solicitacao.protocolo,
                destinatarioId,
                dados: {
                    tipoBeneficio: 'aluguel_social',
                    dataProximaVisita: dataProximaVisita.toISOString(),
                    diasRestantes,
                    ultimaVisita: solicitacao.dados_complementares?.visitas_monitoramento?.[solicitacao.dados_complementares.visitas_monitoramento.length - 1]?.data || null,
                },
                prioridade: 'normal',
                dataVencimento: dataProximaVisita,
            });
        }
    }
    /**
     * Notifica sobre o registro de uma visita de monitoramento
     * @param solicitacao Solicitação de Aluguel Social com visita registrada
     * @param dataVisita Data da visita realizada
     * @param proximaVisita Data da próxima visita programada
     */
    notificarVisitaMonitoramentoRegistrada(solicitacao, dataVisita, proximaVisita) {
        // Identificar os destinatários da notificação
        const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);
        // Formatar as datas para exibição
        const dataVisitaFormatada = dataVisita.toLocaleDateString('pt-BR');
        const proximaVisitaFormatada = proximaVisita.toLocaleDateString('pt-BR');
        // Construir a mensagem da notificação
        const mensagem = `Foi registrada uma visita de monitoramento para a solicitação de Aluguel Social ${solicitacao.protocolo} ` +
            `em ${dataVisitaFormatada}. A próxima visita está programada para ${proximaVisitaFormatada}.`;
        // Enviar notificação para cada destinatário
        for (const destinatarioId of destinatarios) {
            this.enviarNotificacao({
                tipo: TipoNotificacao.VISITA_MONITORAMENTO_REGISTRADA,
                titulo: `Visita de Monitoramento Registrada - Aluguel Social ${solicitacao.protocolo}`,
                mensagem,
                solicitacaoId: solicitacao.id,
                protocolo: solicitacao.protocolo,
                destinatarioId,
                dados: {
                    tipoBeneficio: 'aluguel_social',
                    dataVisita: dataVisita.toISOString(),
                    proximaVisita: proximaVisita.toISOString(),
                    totalVisitas: solicitacao.dados_complementares?.visitas_monitoramento?.length ||
                        1,
                },
                prioridade: 'baixa',
            });
        }
    }
    async verificarPrazosENotificar() {
        this.logger.log('Iniciando verificação diária de prazos...');
        try {
            // Buscar solicitações com prazos vencidos
            const solicitacoesComPrazosVencidos = await this.prazoService.listarSolicitacoesComPrazosVencidos();
            this.logger.log(`Encontradas ${solicitacoesComPrazosVencidos.length} solicitações com prazos vencidos`);
            // Gerar notificações para cada solicitação com prazo vencido
            for (const solicitacao of solicitacoesComPrazosVencidos) {
                // Verificar cada tipo de prazo
                if (solicitacao.prazo_analise &&
                    new Date() > solicitacao.prazo_analise) {
                    this.notificarPrazoExpirado(solicitacao, 'analise');
                }
                if (solicitacao.prazo_documentos &&
                    new Date() > solicitacao.prazo_documentos) {
                    this.notificarPrazoExpirado(solicitacao, 'documentos');
                }
                if (solicitacao.prazo_processamento &&
                    new Date() > solicitacao.prazo_processamento) {
                    this.notificarPrazoExpirado(solicitacao, 'processamento');
                }
            }
            this.logger.log('Verificação de prazos concluída com sucesso');
        }
        catch (error) {
            this.logger.error(`Erro ao verificar prazos: ${error.message}`, error.stack);
        }
    }
};
exports.NotificacaoService = NotificacaoService;
exports.NotificacaoService = NotificacaoService = NotificacaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof prazo_solicitacao_service_1.PrazoSolicitacaoService !== "undefined" && prazo_solicitacao_service_1.PrazoSolicitacaoService) === "function" ? _b : Object, typeof (_c = typeof priorizacao_solicitacao_service_1.PriorizacaoSolicitacaoService !== "undefined" && priorizacao_solicitacao_service_1.PriorizacaoSolicitacaoService) === "function" ? _c : Object, typeof (_d = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _d : Object, typeof (_e = typeof event_emitter_1.EventEmitter2 !== "undefined" && event_emitter_1.EventEmitter2) === "function" ? _e : Object])
], NotificacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,