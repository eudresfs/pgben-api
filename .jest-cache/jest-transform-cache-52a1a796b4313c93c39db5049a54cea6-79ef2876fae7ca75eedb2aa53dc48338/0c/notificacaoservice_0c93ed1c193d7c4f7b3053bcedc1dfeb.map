{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\notificacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\notificacao.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../../entities/solicitacao.entity';\nimport { PrazoSolicitacaoService } from './prazo-solicitacao.service';\nimport { PriorizacaoSolicitacaoService } from './priorizacao-solicitacao.service';\nimport { ConfigService } from '@nestjs/config';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\n/**\n * Tipos de notificação disponíveis no sistema\n */\nexport enum TipoNotificacao {\n  PRAZO_EXPIRADO = 'prazo_expirado',\n  PRAZO_PROXIMO = 'prazo_proximo',\n  DETERMINACAO_JUDICIAL = 'determinacao_judicial',\n  PENDENCIA_ABERTA = 'pendencia_aberta',\n  ALTERACAO_STATUS = 'alteracao_status',\n  SOLICITACAO_ATRIBUIDA = 'solicitacao_atribuida',\n  MONITORAMENTO_PENDENTE = 'monitoramento_pendente',\n  MONITORAMENTO_PROXIMO = 'monitoramento_proximo',\n  VISITA_MONITORAMENTO_REGISTRADA = 'visita_monitoramento_registrada',\n}\n\n/**\n * Interface para os dados de uma notificação\n */\nexport interface DadosNotificacao {\n  tipo: TipoNotificacao;\n  titulo: string;\n  mensagem: string;\n  solicitacaoId?: string;\n  protocolo?: string;\n  destinatarioId?: string;\n  dados?: Record<string, any>;\n  prioridade: 'baixa' | 'normal' | 'alta' | 'urgente';\n  dataVencimento?: Date;\n  lida?: boolean;\n}\n\n/**\n * Serviço responsável pelo gerenciamento de notificações contextuais\n *\n * Este serviço implementa funcionalidades para:\n * - Gerar notificações para eventos importantes\n * - Verificar regularmente prazos e emitir alertas\n * - Notificar usuários sobre alterações em solicitações\n * - Emitir alertas para determinações judiciais\n */\n@Injectable()\nexport class NotificacaoService {\n  private readonly logger = new Logger(NotificacaoService.name);\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    private readonly prazoService: PrazoSolicitacaoService,\n    private readonly priorizacaoService: PriorizacaoSolicitacaoService,\n    private readonly configService: ConfigService,\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  /**\n   * Envia uma notificação para o sistema\n   * @param notificacao Dados da notificação a ser enviada\n   */\n  enviarNotificacao(notificacao: DadosNotificacao): void {\n    try {\n      this.logger.log(`Enviando notificação: ${notificacao.titulo}`);\n\n      // Emitir evento para o sistema de notificações\n      this.eventEmitter.emit('notificacao.criada', notificacao);\n\n      // Em um ambiente real, aqui poderia haver integrações com:\n      // - Sistema de e-mail\n      // - Notificações push\n      // - SMS\n      // - Webhooks para sistemas externos\n\n      this.logger.log(`Notificação enviada com sucesso: ${notificacao.titulo}`);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao enviar notificação: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Notifica sobre uma alteração de status de solicitação\n   * @param solicitacao Solicitação que teve o status alterado\n   * @param statusAnterior Status anterior da solicitação\n   * @param observacao Observação opcional sobre a alteração\n   */\n  notificarAlteracaoStatus(\n    solicitacao: Solicitacao,\n    statusAnterior: StatusSolicitacao,\n    observacao?: string,\n  ): void {\n    // Identificar os destinatários da notificação\n    const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);\n\n    // Construir a mensagem da notificação\n    const mensagem = `A solicitação ${solicitacao.protocolo} foi alterada de ${statusAnterior} para ${solicitacao.status}${\n      observacao ? `: ${observacao}` : '.'\n    }`;\n\n    // Determinar a prioridade da notificação\n    const prioridade = solicitacao.determinacao_judicial_flag\n      ? 'alta'\n      : 'normal';\n\n    // Enviar notificação para cada destinatário\n    for (const destinatarioId of destinatarios) {\n      this.enviarNotificacao({\n        tipo: TipoNotificacao.ALTERACAO_STATUS,\n        titulo: `Solicitação ${solicitacao.protocolo} - Alteração de Status`,\n        mensagem,\n        solicitacaoId: solicitacao.id,\n        protocolo: solicitacao.protocolo,\n        destinatarioId,\n        dados: {\n          statusAnterior,\n          statusAtual: solicitacao.status,\n          determinacaoJudicial: solicitacao.determinacao_judicial_flag,\n        },\n        prioridade,\n      });\n    }\n  }\n\n  /**\n   * Identifica os destinatários para uma notificação de alteração de solicitação\n   * @param solicitacao Solicitação alterada\n   * @returns Lista de IDs de usuários que devem receber a notificação\n   */\n  private identificarDestinatariosAlteracao(\n    solicitacao: Solicitacao,\n  ): string[] {\n    const destinatarios = new Set<string>();\n\n    // Técnico responsável\n    if (solicitacao.tecnico_id) {\n      destinatarios.add(solicitacao.tecnico_id);\n    }\n\n    // Aprovador (se houver)\n    if (solicitacao.aprovador_id) {\n      destinatarios.add(solicitacao.aprovador_id);\n    }\n\n    // Liberador (se houver)\n    if (solicitacao.liberador_id) {\n      destinatarios.add(solicitacao.liberador_id);\n    }\n\n    // Em um ambiente real, aqui também buscaríamos:\n    // - Gerentes da unidade\n    // - Usuários com papel específico de acompanhamento\n    // - Administradores do sistema\n\n    return Array.from(destinatarios);\n  }\n\n  /**\n   * Notifica sobre um prazo expirado de solicitação\n   * @param solicitacao Solicitação com prazo expirado\n   * @param tipoPrazo Tipo de prazo expirado\n   */\n  notificarPrazoExpirado(\n    solicitacao: Solicitacao,\n    tipoPrazo: 'analise' | 'documentos' | 'processamento',\n  ): void {\n    const prazoData = solicitacao[`prazo_${tipoPrazo}`] as Date;\n    if (!prazoData) {\n      return;\n    }\n\n    const diasAtraso = Math.floor(\n      (new Date().getTime() - prazoData.getTime()) / (1000 * 60 * 60 * 24),\n    );\n\n    // Construir a mensagem da notificação\n    const mensagem = `O prazo de ${tipoPrazo} da solicitação ${solicitacao.protocolo} expirou há ${diasAtraso} dias. Estado atual: ${solicitacao.status}.`;\n\n    // Determinar prioridade com base no atraso e determinação judicial\n    let prioridade: 'baixa' | 'normal' | 'alta' | 'urgente' = 'normal';\n\n    if (solicitacao.determinacao_judicial_flag) {\n      prioridade = diasAtraso > 5 ? 'urgente' : 'alta';\n    } else {\n      prioridade = diasAtraso > 10 ? 'alta' : 'normal';\n    }\n\n    // Enviar notificação para os destinatários\n    const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);\n    for (const destinatarioId of destinatarios) {\n      this.enviarNotificacao({\n        tipo: TipoNotificacao.PRAZO_EXPIRADO,\n        titulo: `PRAZO EXPIRADO - Solicitação ${solicitacao.protocolo}`,\n        mensagem,\n        solicitacaoId: solicitacao.id,\n        protocolo: solicitacao.protocolo,\n        destinatarioId,\n        dados: {\n          tipoPrazo,\n          diasAtraso,\n          determinacaoJudicial: solicitacao.determinacao_judicial_flag,\n        },\n        prioridade,\n        dataVencimento: prazoData,\n      });\n    }\n  }\n\n  /**\n   * Notifica sobre a atribuição de uma nova solicitação a um técnico\n   * @param solicitacao Solicitação atribuída\n   * @param tecnicoId ID do técnico responsável\n   */\n  notificarSolicitacaoAtribuida(\n    solicitacao: Solicitacao,\n    tecnicoId: string,\n  ): void {\n    // Determinar prioridade com base na determinação judicial\n    const prioridade = solicitacao.determinacao_judicial_flag\n      ? 'alta'\n      : 'normal';\n\n    // Construir a mensagem da notificação\n    const mensagem = `A solicitação ${solicitacao.protocolo} foi atribuída a você. Estado atual: ${solicitacao.status}.${\n      solicitacao.determinacao_judicial_flag\n        ? ' ATENÇÃO: Esta solicitação tem determinação judicial e requer tratamento prioritário.'\n        : ''\n    }`;\n\n    // Enviar notificação para o técnico\n    this.enviarNotificacao({\n      tipo: TipoNotificacao.SOLICITACAO_ATRIBUIDA,\n      titulo: `Nova Solicitação Atribuída - ${solicitacao.protocolo}`,\n      mensagem,\n      solicitacaoId: solicitacao.id,\n      protocolo: solicitacao.protocolo,\n      destinatarioId: tecnicoId,\n      dados: {\n        determinacaoJudicial: solicitacao.determinacao_judicial_flag,\n        status: solicitacao.status,\n      },\n      prioridade,\n    });\n  }\n\n  /**\n   * Notifica sobre uma determinação judicial associada a uma solicitação\n   * @param solicitacao Solicitação com determinação judicial\n   */\n  notificarDeterminacaoJudicial(solicitacao: Solicitacao): void {\n    if (!solicitacao.determinacao_judicial_flag) {\n      return;\n    }\n\n    // Construir a mensagem da notificação\n    const mensagem = `ATENÇÃO: A solicitação ${solicitacao.protocolo} está associada a uma determinação judicial e requer tratamento prioritário. Estado atual: ${solicitacao.status}.`;\n\n    // Enviar notificação para os destinatários\n    const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);\n    for (const destinatarioId of destinatarios) {\n      this.enviarNotificacao({\n        tipo: TipoNotificacao.DETERMINACAO_JUDICIAL,\n        titulo: `DETERMINAÇÃO JUDICIAL - Solicitação ${solicitacao.protocolo}`,\n        mensagem,\n        solicitacaoId: solicitacao.id,\n        protocolo: solicitacao.protocolo,\n        destinatarioId,\n        dados: {\n          determinacaoJudicialId: solicitacao.determinacao_judicial_id,\n          status: solicitacao.status,\n        },\n        prioridade: 'urgente',\n      });\n    }\n  }\n\n  /**\n   * Executa verificação diária de prazos e gera notificações para prazos vencidos ou próximos\n   * Este método deve ser executado por um agendador (scheduler) em intervalos regulares\n   */\n  /**\n   * Notifica sobre visita de monitoramento pendente para Aluguel Social\n   * @param solicitacao Solicitação de Aluguel Social com visita pendente\n   * @param dataLimite Data limite para realizar a visita\n   */\n  notificarMonitoramentoPendente(\n    solicitacao: Solicitacao,\n    dataLimite: Date,\n  ): void {\n    // Identificar os destinatários da notificação\n    const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);\n\n    // Formatar a data limite para exibição\n    const dataFormatada = dataLimite.toLocaleDateString('pt-BR');\n\n    // Construir a mensagem da notificação\n    const mensagem =\n      `A solicitação de Aluguel Social ${solicitacao.protocolo} requer visita de monitoramento. ` +\n      `Data limite: ${dataFormatada}. Por favor, realize a visita e registre no sistema.`;\n\n    // Enviar notificação para cada destinatário\n    for (const destinatarioId of destinatarios) {\n      this.enviarNotificacao({\n        tipo: TipoNotificacao.MONITORAMENTO_PENDENTE,\n        titulo: `Monitoramento Pendente - Aluguel Social ${solicitacao.protocolo}`,\n        mensagem,\n        solicitacaoId: solicitacao.id,\n        protocolo: solicitacao.protocolo,\n        destinatarioId,\n        dados: {\n          tipoBeneficio: 'aluguel_social',\n          dataLimite: dataLimite.toISOString(),\n          ultimaVisita:\n            solicitacao.dados_complementares?.visitas_monitoramento?.[\n              solicitacao.dados_complementares.visitas_monitoramento.length - 1\n            ]?.data || null,\n        },\n        prioridade: 'alta',\n        dataVencimento: dataLimite,\n      });\n    }\n  }\n\n  /**\n   * Notifica sobre visita de monitoramento que está se aproximando\n   * @param solicitacao Solicitação de Aluguel Social com visita se aproximando\n   * @param dataProximaVisita Data da próxima visita programada\n   * @param diasRestantes Número de dias restantes até a data da visita\n   */\n  notificarMonitoramentoProximo(\n    solicitacao: Solicitacao,\n    dataProximaVisita: Date,\n    diasRestantes: number,\n  ): void {\n    // Identificar os destinatários da notificação\n    const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);\n\n    // Formatar a data da próxima visita para exibição\n    const dataFormatada = dataProximaVisita.toLocaleDateString('pt-BR');\n\n    // Construir a mensagem da notificação\n    const mensagem =\n      `A solicitação de Aluguel Social ${solicitacao.protocolo} requer visita de monitoramento em breve. ` +\n      `Data programada: ${dataFormatada} (${diasRestantes} dias restantes). ` +\n      `Por favor, planeje a visita.`;\n\n    // Enviar notificação para cada destinatário\n    for (const destinatarioId of destinatarios) {\n      this.enviarNotificacao({\n        tipo: TipoNotificacao.MONITORAMENTO_PROXIMO,\n        titulo: `Monitoramento Próximo - Aluguel Social ${solicitacao.protocolo}`,\n        mensagem,\n        solicitacaoId: solicitacao.id,\n        protocolo: solicitacao.protocolo,\n        destinatarioId,\n        dados: {\n          tipoBeneficio: 'aluguel_social',\n          dataProximaVisita: dataProximaVisita.toISOString(),\n          diasRestantes,\n          ultimaVisita:\n            solicitacao.dados_complementares?.visitas_monitoramento?.[\n              solicitacao.dados_complementares.visitas_monitoramento.length - 1\n            ]?.data || null,\n        },\n        prioridade: 'normal',\n        dataVencimento: dataProximaVisita,\n      });\n    }\n  }\n\n  /**\n   * Notifica sobre o registro de uma visita de monitoramento\n   * @param solicitacao Solicitação de Aluguel Social com visita registrada\n   * @param dataVisita Data da visita realizada\n   * @param proximaVisita Data da próxima visita programada\n   */\n  notificarVisitaMonitoramentoRegistrada(\n    solicitacao: Solicitacao,\n    dataVisita: Date,\n    proximaVisita: Date,\n  ): void {\n    // Identificar os destinatários da notificação\n    const destinatarios = this.identificarDestinatariosAlteracao(solicitacao);\n\n    // Formatar as datas para exibição\n    const dataVisitaFormatada = dataVisita.toLocaleDateString('pt-BR');\n    const proximaVisitaFormatada = proximaVisita.toLocaleDateString('pt-BR');\n\n    // Construir a mensagem da notificação\n    const mensagem =\n      `Foi registrada uma visita de monitoramento para a solicitação de Aluguel Social ${solicitacao.protocolo} ` +\n      `em ${dataVisitaFormatada}. A próxima visita está programada para ${proximaVisitaFormatada}.`;\n\n    // Enviar notificação para cada destinatário\n    for (const destinatarioId of destinatarios) {\n      this.enviarNotificacao({\n        tipo: TipoNotificacao.VISITA_MONITORAMENTO_REGISTRADA,\n        titulo: `Visita de Monitoramento Registrada - Aluguel Social ${solicitacao.protocolo}`,\n        mensagem,\n        solicitacaoId: solicitacao.id,\n        protocolo: solicitacao.protocolo,\n        destinatarioId,\n        dados: {\n          tipoBeneficio: 'aluguel_social',\n          dataVisita: dataVisita.toISOString(),\n          proximaVisita: proximaVisita.toISOString(),\n          totalVisitas:\n            solicitacao.dados_complementares?.visitas_monitoramento?.length ||\n            1,\n        },\n        prioridade: 'baixa',\n      });\n    }\n  }\n\n  async verificarPrazosENotificar(): Promise<void> {\n    this.logger.log('Iniciando verificação diária de prazos...');\n\n    try {\n      // Buscar solicitações com prazos vencidos\n      const solicitacoesComPrazosVencidos =\n        await this.prazoService.listarSolicitacoesComPrazosVencidos();\n\n      this.logger.log(\n        `Encontradas ${solicitacoesComPrazosVencidos.length} solicitações com prazos vencidos`,\n      );\n\n      // Gerar notificações para cada solicitação com prazo vencido\n      for (const solicitacao of solicitacoesComPrazosVencidos) {\n        // Verificar cada tipo de prazo\n        if (\n          solicitacao.prazo_analise &&\n          new Date() > solicitacao.prazo_analise\n        ) {\n          this.notificarPrazoExpirado(solicitacao, 'analise');\n        }\n\n        if (\n          solicitacao.prazo_documentos &&\n          new Date() > solicitacao.prazo_documentos\n        ) {\n          this.notificarPrazoExpirado(solicitacao, 'documentos');\n        }\n\n        if (\n          solicitacao.prazo_processamento &&\n          new Date() > solicitacao.prazo_processamento\n        ) {\n          this.notificarPrazoExpirado(solicitacao, 'processamento');\n        }\n      }\n\n      this.logger.log('Verificação de prazos concluída com sucesso');\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar prazos: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n}\n"],"version":3}