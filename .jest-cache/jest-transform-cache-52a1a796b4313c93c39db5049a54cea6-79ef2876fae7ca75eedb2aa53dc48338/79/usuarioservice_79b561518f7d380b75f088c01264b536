f165cba061c2d4187bcf68ee3a61c950
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var UsuarioService_1;
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsuarioService = void 0;
const common_1 = require("@nestjs/common");
const usuario_errors_1 = require("../../../shared/exceptions/error-catalog/domains/usuario.errors");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const bcrypt = __importStar(require("bcrypt"));
const usuario_repository_1 = require("../repositories/usuario.repository");
const usuario_entity_1 = require("../../../entities/usuario.entity");
const role_entity_1 = require("../../../entities/role.entity");
const status_enum_1 = require("../../../enums/status.enum");
const notification_manager_service_1 = require("../../notificacao/services/notification-manager.service");
const notification_template_entity_1 = require("../../../entities/notification-template.entity");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
const domains_1 = require("@/shared/exceptions/error-catalog/domains");
/**
 * Serviço de usuários
 *
 * Responsável pela lógica de negócio relacionada a usuários
 */
let UsuarioService = UsuarioService_1 = class UsuarioService {
    dataSource;
    usuarioRepository;
    notificationManager;
    templateRepository;
    roleRepository;
    logger = new common_1.Logger(UsuarioService_1.name);
    SALT_ROUNDS = 12; // Aumentando a segurança do hash
    MAX_LOGIN_ATTEMPTS = 5; // Máximo de tentativas de login
    LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutos em ms
    constructor(dataSource, usuarioRepository, notificationManager, templateRepository, roleRepository) {
        this.dataSource = dataSource;
        this.usuarioRepository = usuarioRepository;
        this.notificationManager = notificationManager;
        this.templateRepository = templateRepository;
        this.roleRepository = roleRepository;
    }
    /**
     * Gera uma senha aleatória segura que atende aos critérios de validação
     * @returns Senha aleatória de 12 caracteres
     */
    generateRandomPassword() {
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const numbers = '0123456789';
        const symbols = '@$!%*?&#';
        // Garantir pelo menos um caractere de cada tipo obrigatório
        let password = '';
        password += lowercase[Math.floor(Math.random() * lowercase.length)];
        password += uppercase[Math.floor(Math.random() * uppercase.length)];
        password += numbers[Math.floor(Math.random() * numbers.length)];
        password += symbols[Math.floor(Math.random() * symbols.length)];
        // Completar com caracteres aleatórios até 12 caracteres
        const allChars = lowercase + uppercase + numbers + symbols;
        for (let i = 4; i < 12; i++) {
            password += allChars[Math.floor(Math.random() * allChars.length)];
        }
        // Embaralhar a senha para evitar padrões previsíveis
        return password
            .split('')
            .sort(() => Math.random() - 0.5)
            .join('');
    }
    /**
     * Envia credenciais por email para usuário recém-criado
     * @param usuario Usuário criado
     * @param senha Senha em texto plano
     */
    async enviarCredenciaisPorEmail(usuario, senha) {
        try {
            // Buscar template de credenciais
            const template = await this.templateRepository.findOne({
                where: { nome: 'Credenciais de Acesso - Novo Usuário' },
            });
            if (!template) {
                this.logger.error('Template de credenciais não encontrado');
                return;
            }
            // Dados para o template
            const dadosTemplate = {
                nome: usuario.nome,
                email: usuario.email,
                senha: senha,
                matricula: usuario.matricula,
                sistema_url: process.env.FRONTEND_URL || 'https://pgben.natal.rn.gov.br',
                data_criacao: new Date().toLocaleDateString('pt-BR'),
            };
            // Criar notificação
            await this.notificationManager.criarNotificacao({
                template_id: template.id,
                destinatario_id: usuario.id,
                dados_contexto: dadosTemplate,
            });
            this.logger.log(`Credenciais enviadas por email para: ${usuario.email}`);
        }
        catch (error) {
            this.logger.error(`Erro ao enviar credenciais por email: ${error.message}`);
            // Não falhar a criação do usuário por erro no envio do email
        }
    }
    /**
     * Busca todos os usuários com filtros e paginação
     * @param options Opções de filtro e paginação
     * @returns Lista de usuários paginada
     */
    async findAll(options) {
        const { page = 1, limit = 10, search, role, status, unidade_id, } = options || {};
        // Construir filtros
        const where = {};
        if (search) {
            where.nome = { $iLike: `%${search}%` };
        }
        if (role) {
            where.role = role;
        }
        if (status) {
            where.status = status;
        }
        if (unidade_id) {
            where.unidade_id = unidade_id;
        }
        // Calcular skip para paginação
        const skip = (page - 1) * limit;
        // Buscar usuários
        const [usuarios, total] = await this.usuarioRepository.findAll({
            skip,
            take: limit,
            where,
        });
        // Remover campos sensíveis
        const usuariosSemSenha = usuarios.map((usuario) => {
            const { senhaHash, ...usuarioSemSenha } = usuario;
            return usuarioSemSenha;
        });
        return {
            items: usuariosSemSenha,
            meta: {
                total,
                page,
                limit,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca um usuário pelo ID
     * @param id ID do usuário
     * @returns Usuário encontrado
     */
    async findById(id) {
        const usuario = await this.usuarioRepository.findById(id);
        if (!usuario) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
        // Remover campos sensíveis
        const { senhaHash, ...usuarioSemSenha } = usuario;
        return usuarioSemSenha;
    }
    /**
     * Cria um novo usuário
     * @param createUsuarioDto Dados do usuário
     * @returns Usuário criado
     */
    async create(createUsuarioDto) {
        this.logger.log(`Iniciando criação de usuário: ${createUsuarioDto.email}`);
        try {
            // Usar transação para garantir consistência
            return await this.dataSource.transaction(async (manager) => {
                const usuarioRepo = manager.getRepository('usuario');
                const unidadeRepo = manager.getRepository('unidade');
                const setorRepo = manager.getRepository('setor');
                // Verificar se email já existe
                const emailExistente = await usuarioRepo.findOne({
                    where: { email: createUsuarioDto.email },
                });
                if (emailExistente) {
                    this.logger.warn(`Email já está em uso: ${createUsuarioDto.email}`);
                    (0, usuario_errors_1.throwDuplicateEmail)(createUsuarioDto.email);
                }
                // Verificar se CPF já existe
                const cpfExistente = await usuarioRepo.findOne({
                    where: { cpf: createUsuarioDto.cpf },
                });
                if (cpfExistente) {
                    this.logger.warn(`CPF já está em uso: ${createUsuarioDto.cpf}`);
                    (0, domains_1.throwDuplicateCpf)(createUsuarioDto.cpf);
                }
                // Verificar se matrícula já existe
                const matriculaExistente = await usuarioRepo.findOne({
                    where: { matricula: createUsuarioDto.matricula },
                });
                if (matriculaExistente) {
                    this.logger.warn(`Matrícula já está em uso: ${createUsuarioDto.matricula}`);
                    (0, usuario_errors_1.throwDuplicateMatricula)(createUsuarioDto.matricula);
                }
                // Verificar se a unidade existe
                if (createUsuarioDto.unidade_id) {
                    const unidade = await unidadeRepo.findOne({
                        where: { id: createUsuarioDto.unidade_id },
                    });
                    if (!unidade) {
                        this.logger.warn(`Unidade não encontrada: ${createUsuarioDto.unidade_id}`);
                        // Note: Unit not found check needs to be implemented with appropriate error
                    }
                    // Verificar se o setor existe e pertence à unidade
                    if (createUsuarioDto.setor_id) {
                        const setor = await setorRepo.findOne({
                            where: {
                                id: createUsuarioDto.setor_id,
                                unidade_id: createUsuarioDto.unidade_id,
                            },
                        });
                        if (!setor) {
                            this.logger.warn(`Setor não encontrado para a unidade: ${createUsuarioDto.setor_id}`);
                            // Note: Sector not found check needs to be implemented with appropriate error
                        }
                    }
                }
                // Determinar senha a ser usada
                let senhaParaUso;
                let senhaGerada = false;
                if (createUsuarioDto.senha) {
                    senhaParaUso = createUsuarioDto.senha;
                }
                else {
                    senhaParaUso = this.generateRandomPassword();
                    senhaGerada = true;
                    this.logger.log(`Senha gerada automaticamente para usuário: ${createUsuarioDto.email}`);
                }
                // Gerar hash da senha com maior segurança
                const senhaHash = await bcrypt.hash(senhaParaUso, this.SALT_ROUNDS);
                // Normalizar campos de enum antes de criar
                const normalizedData = (0, enum_normalizer_util_1.normalizeEnumFields)({
                    nome: createUsuarioDto.nome,
                    email: createUsuarioDto.email.toLowerCase(), // Normalizar email para minúsculas
                    senhaHash,
                    cpf: createUsuarioDto.cpf,
                    telefone: createUsuarioDto.telefone,
                    matricula: createUsuarioDto.matricula,
                    role_id: createUsuarioDto.role_id,
                    unidade_id: createUsuarioDto.unidade_id,
                    setor_id: createUsuarioDto.setor_id,
                    primeiro_acesso: true, // Sempre true para novos usuários
                    ultimo_login: null,
                    tentativas_login: 0,
                });
                // Criar usuário
                const novoUsuario = usuarioRepo.create(normalizedData);
                const usuarioSalvo = await usuarioRepo.save(novoUsuario);
                // Enviar credenciais por email se senha foi gerada
                if (senhaGerada) {
                    await this.enviarCredenciaisPorEmail(usuarioSalvo, senhaParaUso);
                }
                this.logger.log(`Usuário criado com sucesso: ${usuarioSalvo.id}`);
                // Remover campos sensíveis
                const { senhaHash: _, ...usuarioSemSenha } = usuarioSalvo;
                return {
                    data: usuarioSemSenha,
                    meta: null,
                    message: senhaGerada
                        ? 'Usuário criado com sucesso. Credenciais enviadas por email.'
                        : 'Usuário criado com sucesso.',
                };
            });
        }
        catch (error) {
            this.logger.error(`Erro ao criar usuário: ${error.message}`, error.stack);
            if (error instanceof Error) {
                throw error;
            }
            // Note: Internal error handling needs to be implemented with appropriate error
        }
    }
    /**
     * Atualiza um usuário existente
     * @param id ID do usuário
     * @param updateUsuarioDto Dados a serem atualizados
     * @returns Usuário atualizado
     */
    async update(id, updateUsuarioDto) {
        this.logger.log(`Iniciando atualização do usuário ${id}`);
        try {
            // Usar transação para garantir consistência
            return await this.dataSource.transaction(async (manager) => {
                const usuarioRepo = manager.getRepository('usuario');
                // Verificar se usuário existe
                const usuario = await usuarioRepo.findOne({ where: { id } });
                if (!usuario) {
                    this.logger.warn(`Usuário não encontrado: ${id}`);
                    (0, usuario_errors_1.throwUserNotFound)(id);
                }
                // Verificar se email já existe (se fornecido)
                if (updateUsuarioDto.email &&
                    updateUsuarioDto.email.toLowerCase() !== usuario.email.toLowerCase()) {
                    const emailExistente = await usuarioRepo.findOne({
                        where: { email: updateUsuarioDto.email.toLowerCase() },
                    });
                    if (emailExistente) {
                        this.logger.warn(`Email já está em uso: ${updateUsuarioDto.email}`);
                        (0, usuario_errors_1.throwDuplicateEmail)(updateUsuarioDto.email);
                    }
                    // Normalizar email para minúsculas
                    updateUsuarioDto.email = updateUsuarioDto.email.toLowerCase();
                }
                // Verificar se CPF já existe (se fornecido)
                if (updateUsuarioDto.cpf && updateUsuarioDto.cpf !== usuario.cpf) {
                    const cpfExistente = await usuarioRepo.findOne({
                        where: { cpf: updateUsuarioDto.cpf },
                    });
                    if (cpfExistente) {
                        this.logger.warn(`CPF já está em uso: ${updateUsuarioDto.cpf}`);
                        // Note: CPF duplication check needs to be implemented with appropriate error
                    }
                }
                // Verificar se matrícula já existe (se fornecida)
                if (updateUsuarioDto.matricula &&
                    updateUsuarioDto.matricula !== usuario.matricula) {
                    const matriculaExistente = await usuarioRepo.findOne({
                        where: { matricula: updateUsuarioDto.matricula },
                    });
                    if (matriculaExistente) {
                        this.logger.warn(`Matrícula já está em uso: ${updateUsuarioDto.matricula}`);
                        (0, usuario_errors_1.throwDuplicateMatricula)(updateUsuarioDto.matricula);
                    }
                }
                // Normalizar campos de enum antes de atualizar
                const normalizedData = (0, enum_normalizer_util_1.normalizeEnumFields)(updateUsuarioDto);
                // Atualizar usuário
                await usuarioRepo.update(id, normalizedData);
                // Buscar usuário atualizado
                const usuarioAtualizado = await usuarioRepo.findOne({ where: { id } });
                if (!usuarioAtualizado) {
                    (0, usuario_errors_1.throwUserNotFound)(id);
                }
                this.logger.log(`Usuário ${id} atualizado com sucesso`);
                // Remover campos sensíveis
                const { senhaHash, ...usuarioSemSenha } = usuarioAtualizado;
                return usuarioSemSenha;
            });
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar usuário ${id}: ${error.message}`, error.stack);
            if (error instanceof Error) {
                throw error;
            }
            // Note: Internal error handling needs to be implemented with appropriate error
        }
    }
    /**
     * Atualiza o status de um usuário
     * @param id ID do usuário
     * @param updateStatusUsuarioDto Novo status
     * @returns Usuário atualizado
     */
    async updateStatus(id, updateStatusUsuarioDto) {
        // Verificar se usuário existe
        const usuario = await this.usuarioRepository.findById(id);
        if (!usuario) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
        // Atualizar status
        const usuarioAtualizado = await this.usuarioRepository.updateStatus(id, updateStatusUsuarioDto.status);
        // Remover campos sensíveis
        const { senhaHash, ...usuarioSemSenha } = usuarioAtualizado;
        return usuarioSemSenha;
    }
    /**
     * Atualiza a senha de um usuário
     * @param id ID do usuário
     * @param updateSenhaDto Dados da nova senha
     * @returns Mensagem de sucesso
     */
    async updateSenha(id, updateSenhaDto) {
        this.logger.log(`Iniciando atualização de senha do usuário ${id}`);
        try {
            // Usar transação para garantir consistência
            return await this.dataSource.transaction(async (manager) => {
                const usuarioRepo = manager.getRepository('usuario');
                // Verificar se usuário existe
                const usuario = await usuarioRepo.findOne({ where: { id } });
                if (!usuario) {
                    this.logger.warn(`Usuário não encontrado: ${id}`);
                    (0, usuario_errors_1.throwUserNotFound)(id);
                }
                // Verificar se a senha atual está correta
                const senhaCorreta = await bcrypt.compare(updateSenhaDto.senhaAtual, usuario.senhaHash);
                if (!senhaCorreta) {
                    this.logger.warn(`Tentativa de alteração de senha com senha atual incorreta: ${id}`);
                    // Incrementar contador de tentativas falhas para prevenção de ataques de força bruta
                    await usuarioRepo.update(id, {
                        tentativas_login: () => '"tentativas_login" + 1',
                    });
                    (0, usuario_errors_1.throwInvalidCredentials)(usuario.email);
                }
                // Verificar se a nova senha e a confirmação coincidem
                if (updateSenhaDto.novaSenha !== updateSenhaDto.confirmacaoSenha) {
                    this.logger.warn(`Nova senha e confirmação não coincidem: ${id}`);
                    (0, usuario_errors_1.throwPasswordMismatch)();
                }
                // Verificar se a nova senha é diferente da atual
                if (updateSenhaDto.novaSenha === updateSenhaDto.senhaAtual) {
                    (0, usuario_errors_1.throwWeakPassword)(); // Note: Same password logic needs review
                }
                // Gerar hash da nova senha com maior segurança
                const senhaHash = await bcrypt.hash(updateSenhaDto.novaSenha, this.SALT_ROUNDS);
                // Atualizar senha e resetar contador de tentativas
                await usuarioRepo.update(id, {
                    senhaHash,
                    tentativas_login: 0,
                    primeiro_acesso: false,
                    ultimo_login: new Date(),
                });
                this.logger.log(`Senha do usuário ${id} atualizada com sucesso`);
                return { message: 'Senha atualizada com sucesso' };
            });
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar senha do usuário ${id}: ${error.message}`, error.stack);
            if (error instanceof Error) {
                throw error;
            }
            // Note: Internal error handling needs to be implemented with appropriate error
        }
    }
    /**
     * Obtém o perfil do usuário atual
     * @param userId ID do usuário atual
     * @returns Perfil do usuário
     */
    async getProfile(userId) {
        return this.findById(userId);
    }
    /**
     * Busca um usuário pelo email (para autenticação)
     * @param email Email do usuário
     * @returns Usuário encontrado ou null
     */
    async findByEmail(email) {
        this.logger.log(`Buscando usuário por email: ${email}`);
        try {
            // Normalizar email para minúsculas para evitar problemas de case sensitivity
            const normalizedEmail = email.toLowerCase();
            const usuario = await this.usuarioRepository.findByEmail(normalizedEmail);
            if (!usuario) {
                this.logger.warn(`Tentativa de login com email inexistente: ${normalizedEmail}`, { context: 'SECURITY_LOGIN_ATTEMPT', email: normalizedEmail });
            }
            return usuario;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar usuário por email: ${error.message}`, error.stack);
            return null;
        }
    }
    /**
     * Verifica se o usuário está bloqueado por excesso de tentativas
     * @param usuario Usuário a ser verificado
     * @returns true se estiver bloqueado
     */
    isUserLocked(usuario) {
        if (!usuario.tentativas_login ||
            usuario.tentativas_login < this.MAX_LOGIN_ATTEMPTS) {
            return false;
        }
        const lastAttempt = usuario.ultimo_login || new Date(0);
        const timeSinceLastAttempt = Date.now() - lastAttempt.getTime();
        return timeSinceLastAttempt < this.LOCKOUT_DURATION;
    }
    /**
     * Incrementa o contador de tentativas de login
     * @param userId ID do usuário
     */
    async incrementLoginAttempts(userId) {
        try {
            await this.dataSource.transaction(async (manager) => {
                const usuarioRepo = manager.getRepository(usuario_entity_1.Usuario);
                await usuarioRepo.increment({ id: userId }, 'tentativas_login', 1);
                await usuarioRepo.update(userId, {
                    ultimo_login: new Date(),
                });
            });
            this.logger.warn(`Tentativa de login falhada incrementada para usuário: ${userId}`, { context: 'SECURITY_LOGIN_FAILED', userId });
        }
        catch (error) {
            this.logger.error(`Erro ao incrementar tentativas de login: ${error.message}`, error.stack);
        }
    }
    /**
     * Reseta o contador de tentativas de login
     * @param userId ID do usuário
     */
    async resetLoginAttempts(userId) {
        try {
            await this.usuarioRepository.updateStatus(userId, status_enum_1.Status.ATIVO);
            await this.dataSource.transaction(async (manager) => {
                const usuarioRepo = manager.getRepository(usuario_entity_1.Usuario);
                await usuarioRepo.update(userId, {
                    tentativas_login: 0,
                    ultimo_login: new Date(),
                });
            });
            this.logger.log(`Login bem-sucedido - tentativas resetadas para usuário: ${userId}`, { context: 'SECURITY_LOGIN_SUCCESS', userId });
        }
        catch (error) {
            this.logger.error(`Erro ao resetar tentativas de login: ${error.message}`, error.stack);
        }
    }
    /**
     * Valida credenciais de login com controle de tentativas
     * @param email Email do usuário
     * @param senha Senha do usuário
     * @returns Usuário se credenciais válidas, null caso contrário
     */
    async validateUserCredentials(email, senha) {
        const usuario = await this.findByEmail(email);
        if (!usuario) {
            return null;
        }
        // Verificar se usuário está bloqueado
        if (this.isUserLocked(usuario)) {
            this.logger.warn(`Tentativa de login em conta bloqueada: ${usuario.id}`, {
                context: 'SECURITY_BLOCKED_LOGIN_ATTEMPT',
                userId: usuario.id,
                email: usuario.email,
                attempts: usuario.tentativas_login,
            });
            (0, usuario_errors_1.throwAccountBlocked)(usuario.id); // Note: Using userId instead of email
        }
        // Verificar senha
        const senhaValida = await bcrypt.compare(senha, usuario.senhaHash);
        if (!senhaValida) {
            await this.incrementLoginAttempts(usuario.id);
            this.logger.warn(`Tentativa de login com senha incorreta: ${usuario.id}`, {
                context: 'SECURITY_INVALID_PASSWORD',
                userId: usuario.id,
                email: usuario.email,
                attempts: (usuario.tentativas_login || 0) + 1,
            });
            (0, usuario_errors_1.throwInvalidCredentials)(email);
        }
        // Login bem-sucedido - resetar tentativas
        await this.resetLoginAttempts(usuario.id);
        return usuario;
    }
    /**
     * Remove um usuário (soft delete)
     * @param id - ID do usuário a ser removido
     * @returns Promise<void>
     */
    async remove(id) {
        this.logger.log(`Iniciando remoção do usuário: ${id}`);
        try {
            // Verifica se o usuário existe
            const usuario = await this.usuarioRepository.findById(id);
            if (!usuario) {
                this.logger.warn(`Usuário não encontrado para remoção: ${id}`);
                (0, usuario_errors_1.throwUserNotFound)(id);
            }
            // Realiza o soft delete
            await this.usuarioRepository.remove(id);
            this.logger.log(`Usuário removido com sucesso: ${id}`);
        }
        catch (error) {
            this.logger.error(`Erro ao remover usuário ${id}: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Altera a senha do usuário no primeiro acesso
     * @param userId ID do usuário
     * @param alterarSenhaDto Dados da nova senha
     * @returns Resultado da operação
     */
    /**
     * Busca todas as roles disponíveis no sistema
     * @returns Lista de roles com id, nome e descrição
     */
    async findAllRoles() {
        this.logger.log('Buscando todas as roles disponíveis');
        try {
            const roles = await this.roleRepository.find({
                select: ['id', 'nome', 'descricao', 'status'],
                where: { status: status_enum_1.Status.ATIVO },
                order: { nome: 'ASC' },
            });
            return {
                data: roles,
                meta: { total: roles.length },
                message: 'Roles retornadas com sucesso',
            };
        }
        catch (error) {
            this.logger.error(`Erro ao buscar roles: ${error.message}`, error.stack);
            // Note: Internal error handling needs to be implemented with appropriate error
        }
    }
    async alterarSenhaPrimeiroAcesso(userId, alterarSenhaDto) {
        this.logger.log(`Iniciando alteração de senha no primeiro acesso para usuário ${userId}`);
        try {
            // Verificar se as senhas coincidem (validação adicional no backend)
            if (alterarSenhaDto.nova_senha !== alterarSenhaDto.confirmar_senha) {
                (0, usuario_errors_1.throwPasswordMismatch)();
            }
            // Usar transação para garantir consistência
            return await this.dataSource.transaction(async (manager) => {
                const usuarioRepo = manager.getRepository('usuario');
                // Buscar usuário
                const usuario = await usuarioRepo.findOne({ where: { id: userId } });
                if (!usuario) {
                    this.logger.warn(`Usuário não encontrado: ${userId}`);
                    (0, usuario_errors_1.throwUserNotFound)(userId);
                }
                // Verificar se está em primeiro acesso
                if (!usuario.primeiro_acesso) {
                    this.logger.warn(`Usuário ${userId} não está em primeiro acesso`);
                    throw new common_1.BadRequestException('Usuário não está em primeiro acesso. Esta operação só é permitida para usuários que ainda não alteraram sua senha inicial.');
                }
                // Gerar hash da nova senha
                const novoHash = await bcrypt.hash(alterarSenhaDto.nova_senha, 12);
                // Atualizar senha e marcar como não sendo mais primeiro acesso
                await usuarioRepo.update(userId, {
                    senhaHash: novoHash,
                    primeiro_acesso: false,
                    updated_at: new Date(),
                });
                this.logger.log(`Senha alterada com sucesso no primeiro acesso para usuário ${userId}`);
                return {
                    data: null,
                    meta: null,
                    message: 'Senha alterada com sucesso. Você pode agora acessar o sistema normalmente.',
                };
            });
        }
        catch (error) {
            this.logger.error(`Erro ao alterar senha no primeiro acesso para usuário ${userId}: ${error.message}`, error.stack);
            if (error instanceof Error) {
                throw error;
            }
            // Note: Internal error handling needs to be implemented with appropriate error
        }
    }
};
exports.UsuarioService = UsuarioService;
exports.UsuarioService = UsuarioService = UsuarioService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(3, (0, typeorm_1.InjectRepository)(notification_template_entity_1.NotificationTemplate)),
    __param(4, (0, typeorm_1.InjectRepository)(role_entity_1.Role)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _a : Object, typeof (_b = typeof usuario_repository_1.UsuarioRepository !== "undefined" && usuario_repository_1.UsuarioRepository) === "function" ? _b : Object, typeof (_c = typeof notification_manager_service_1.NotificationManagerService !== "undefined" && notification_manager_service_1.NotificationManagerService) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object])
], UsuarioService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,