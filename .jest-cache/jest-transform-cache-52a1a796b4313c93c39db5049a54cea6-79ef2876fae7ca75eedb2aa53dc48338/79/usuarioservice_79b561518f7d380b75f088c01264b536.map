{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\services\\usuario.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\services\\usuario.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException } from '@nestjs/common';\nimport {\n  throwUserNotFound,\n  throwDuplicateEmail,\n  throwDuplicateMatricula,\n  throwInvalidCredentials,\n  throwAccountBlocked,\n  throwWeakPassword,\n  throwFirstAccessRequired,\n  throwEmailSendFailed,\n  throwInsufficientPermissions,\n  throwPasswordMismatch,\n} from '../../../shared/exceptions/error-catalog/domains/usuario.errors';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { DataSource, DeepPartial, Repository } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport { UsuarioRepository } from '../repositories/usuario.repository';\nimport { CreateUsuarioDto } from '../dto/create-usuario.dto';\nimport { UpdateUsuarioDto } from '../dto/update-usuario.dto';\nimport { UpdateStatusUsuarioDto } from '../dto/update-status-usuario.dto';\nimport { UpdateSenhaDto } from '../dto/update-senha.dto';\nimport { AlterarSenhaPrimeiroAcessoDto } from '../dto/alterar-senha-primeiro-acesso.dto';\nimport { Usuario } from '../../../entities/usuario.entity';\nimport { Role } from '../../../entities/role.entity';\nimport { Status } from '../../../enums/status.enum';\nimport { NotificationManagerService } from '../../notificacao/services/notification-manager.service';\nimport { NotificationTemplate } from '../../../entities/notification-template.entity';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\nimport { throwDuplicateCpf } from '@/shared/exceptions/error-catalog/domains';\n\n/**\n * Serviço de usuários\n *\n * Responsável pela lógica de negócio relacionada a usuários\n */\n@Injectable()\nexport class UsuarioService {\n  private readonly logger = new Logger(UsuarioService.name);\n  private readonly SALT_ROUNDS = 12; // Aumentando a segurança do hash\n  private readonly MAX_LOGIN_ATTEMPTS = 5; // Máximo de tentativas de login\n  private readonly LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutos em ms\n\n  constructor(\n    private readonly dataSource: DataSource,\n    private readonly usuarioRepository: UsuarioRepository,\n    private readonly notificationManager: NotificationManagerService,\n    @InjectRepository(NotificationTemplate)\n    private readonly templateRepository: Repository<NotificationTemplate>,\n    @InjectRepository(Role)\n    private readonly roleRepository: Repository<Role>,\n  ) {}\n\n  /**\n   * Gera uma senha aleatória segura que atende aos critérios de validação\n   * @returns Senha aleatória de 12 caracteres\n   */\n  private generateRandomPassword(): string {\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const numbers = '0123456789';\n    const symbols = '@$!%*?&#';\n\n    // Garantir pelo menos um caractere de cada tipo obrigatório\n    let password = '';\n    password += lowercase[Math.floor(Math.random() * lowercase.length)];\n    password += uppercase[Math.floor(Math.random() * uppercase.length)];\n    password += numbers[Math.floor(Math.random() * numbers.length)];\n    password += symbols[Math.floor(Math.random() * symbols.length)];\n\n    // Completar com caracteres aleatórios até 12 caracteres\n    const allChars = lowercase + uppercase + numbers + symbols;\n    for (let i = 4; i < 12; i++) {\n      password += allChars[Math.floor(Math.random() * allChars.length)];\n    }\n\n    // Embaralhar a senha para evitar padrões previsíveis\n    return password\n      .split('')\n      .sort(() => Math.random() - 0.5)\n      .join('');\n  }\n\n  /**\n   * Envia credenciais por email para usuário recém-criado\n   * @param usuario Usuário criado\n   * @param senha Senha em texto plano\n   */\n  private async enviarCredenciaisPorEmail(\n    usuario: Usuario,\n    senha: string,\n  ): Promise<void> {\n    try {\n      // Buscar template de credenciais\n      const template = await this.templateRepository.findOne({\n        where: { nome: 'Credenciais de Acesso - Novo Usuário' },\n      });\n\n      if (!template) {\n        this.logger.error('Template de credenciais não encontrado');\n        return;\n      }\n\n      // Dados para o template\n      const dadosTemplate = {\n        nome: usuario.nome,\n        email: usuario.email,\n        senha: senha,\n        matricula: usuario.matricula,\n        sistema_url:\n          process.env.FRONTEND_URL || 'https://pgben.natal.rn.gov.br',\n        data_criacao: new Date().toLocaleDateString('pt-BR'),\n      };\n\n      // Criar notificação\n      await this.notificationManager.criarNotificacao({\n        template_id: template.id,\n        destinatario_id: usuario.id,\n        dados_contexto: dadosTemplate,\n      });\n\n      this.logger.log(`Credenciais enviadas por email para: ${usuario.email}`);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao enviar credenciais por email: ${error.message}`,\n      );\n      // Não falhar a criação do usuário por erro no envio do email\n    }\n  }\n\n  /**\n   * Busca todos os usuários com filtros e paginação\n   * @param options Opções de filtro e paginação\n   * @returns Lista de usuários paginada\n   */\n  async findAll(options?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    role?: string;\n    status?: string;\n    unidade_id?: string;\n  }) {\n    const {\n      page = 1,\n      limit = 10,\n      search,\n      role,\n      status,\n      unidade_id,\n    } = options || {};\n\n    // Construir filtros\n    const where: any = {};\n\n    if (search) {\n      where.nome = { $iLike: `%${search}%` };\n    }\n\n    if (role) {\n      where.role = role;\n    }\n\n    if (status) {\n      where.status = status;\n    }\n\n    if (unidade_id) {\n      where.unidade_id = unidade_id;\n    }\n\n    // Calcular skip para paginação\n    const skip = (page - 1) * limit;\n\n    // Buscar usuários\n    const [usuarios, total] = await this.usuarioRepository.findAll({\n      skip,\n      take: limit,\n      where,\n    });\n\n    // Remover campos sensíveis\n    const usuariosSemSenha = usuarios.map((usuario) => {\n      const { senhaHash, ...usuarioSemSenha } = usuario;\n      return usuarioSemSenha;\n    });\n\n    return {\n      items: usuariosSemSenha,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Busca um usuário pelo ID\n   * @param id ID do usuário\n   * @returns Usuário encontrado\n   */\n  async findById(id: string) {\n    const usuario = await this.usuarioRepository.findById(id);\n\n    if (!usuario) {\n      throwUserNotFound(id);\n    }\n\n    // Remover campos sensíveis\n    const { senhaHash, ...usuarioSemSenha } = usuario;\n\n    return usuarioSemSenha;\n  }\n\n  /**\n   * Cria um novo usuário\n   * @param createUsuarioDto Dados do usuário\n   * @returns Usuário criado\n   */\n  async create(createUsuarioDto: CreateUsuarioDto) {\n    this.logger.log(`Iniciando criação de usuário: ${createUsuarioDto.email}`);\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        const usuarioRepo = manager.getRepository('usuario');\n        const unidadeRepo = manager.getRepository('unidade');\n        const setorRepo = manager.getRepository('setor');\n\n        // Verificar se email já existe\n        const emailExistente = await usuarioRepo.findOne({\n          where: { email: createUsuarioDto.email },\n        });\n        if (emailExistente) {\n          this.logger.warn(`Email já está em uso: ${createUsuarioDto.email}`);\n          throwDuplicateEmail(createUsuarioDto.email);\n        }\n\n        // Verificar se CPF já existe\n        const cpfExistente = await usuarioRepo.findOne({\n          where: { cpf: createUsuarioDto.cpf },\n        });\n        if (cpfExistente) {\n          this.logger.warn(`CPF já está em uso: ${createUsuarioDto.cpf}`);\n          throwDuplicateCpf(createUsuarioDto.cpf);\n        }\n\n        // Verificar se matrícula já existe\n        const matriculaExistente = await usuarioRepo.findOne({\n          where: { matricula: createUsuarioDto.matricula },\n        });\n        if (matriculaExistente) {\n          this.logger.warn(\n            `Matrícula já está em uso: ${createUsuarioDto.matricula}`,\n          );\n          throwDuplicateMatricula(createUsuarioDto.matricula);\n        }\n\n        // Verificar se a unidade existe\n        if (createUsuarioDto.unidade_id) {\n          const unidade = await unidadeRepo.findOne({\n            where: { id: createUsuarioDto.unidade_id },\n          });\n          if (!unidade) {\n            this.logger.warn(\n              `Unidade não encontrada: ${createUsuarioDto.unidade_id}`,\n            );\n            // Note: Unit not found check needs to be implemented with appropriate error\n          }\n\n          // Verificar se o setor existe e pertence à unidade\n          if (createUsuarioDto.setor_id) {\n            const setor = await setorRepo.findOne({\n              where: {\n                id: createUsuarioDto.setor_id,\n                unidade_id: createUsuarioDto.unidade_id,\n              },\n            });\n            if (!setor) {\n              this.logger.warn(\n                `Setor não encontrado para a unidade: ${createUsuarioDto.setor_id}`,\n              );\n              // Note: Sector not found check needs to be implemented with appropriate error\n            }\n          }\n        }\n\n        // Determinar senha a ser usada\n        let senhaParaUso: string;\n        let senhaGerada = false;\n\n        if (createUsuarioDto.senha) {\n          senhaParaUso = createUsuarioDto.senha;\n        } else {\n          senhaParaUso = this.generateRandomPassword();\n          senhaGerada = true;\n          this.logger.log(\n            `Senha gerada automaticamente para usuário: ${createUsuarioDto.email}`,\n          );\n        }\n\n        // Gerar hash da senha com maior segurança\n        const senhaHash = await bcrypt.hash(senhaParaUso, this.SALT_ROUNDS);\n\n        // Normalizar campos de enum antes de criar\n        const normalizedData = normalizeEnumFields({\n          nome: createUsuarioDto.nome,\n          email: createUsuarioDto.email.toLowerCase(), // Normalizar email para minúsculas\n          senhaHash,\n          cpf: createUsuarioDto.cpf,\n          telefone: createUsuarioDto.telefone,\n          matricula: createUsuarioDto.matricula,\n          role_id: createUsuarioDto.role_id,\n          unidade_id: createUsuarioDto.unidade_id,\n          setor_id: createUsuarioDto.setor_id,\n          primeiro_acesso: true, // Sempre true para novos usuários\n          ultimo_login: null,\n          tentativas_login: 0,\n        });\n\n        // Criar usuário\n        const novoUsuario = usuarioRepo.create(normalizedData);\n\n        const usuarioSalvo = await usuarioRepo.save(novoUsuario);\n\n        // Enviar credenciais por email se senha foi gerada\n        if (senhaGerada) {\n          await this.enviarCredenciaisPorEmail(\n            usuarioSalvo as Usuario,\n            senhaParaUso,\n          );\n        }\n\n        this.logger.log(`Usuário criado com sucesso: ${usuarioSalvo.id}`);\n\n        // Remover campos sensíveis\n        const { senhaHash: _, ...usuarioSemSenha } = usuarioSalvo;\n\n        return {\n          data: usuarioSemSenha,\n          meta: null,\n          message: senhaGerada\n            ? 'Usuário criado com sucesso. Credenciais enviadas por email.'\n            : 'Usuário criado com sucesso.',\n        };\n      });\n    } catch (error) {\n      this.logger.error(`Erro ao criar usuário: ${error.message}`, error.stack);\n      if (error instanceof Error) {\n        throw error;\n      }\n      // Note: Internal error handling needs to be implemented with appropriate error\n    }\n  }\n\n  /**\n   * Atualiza um usuário existente\n   * @param id ID do usuário\n   * @param updateUsuarioDto Dados a serem atualizados\n   * @returns Usuário atualizado\n   */\n  async update(id: string, updateUsuarioDto: UpdateUsuarioDto) {\n    this.logger.log(`Iniciando atualização do usuário ${id}`);\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        const usuarioRepo = manager.getRepository('usuario');\n\n        // Verificar se usuário existe\n        const usuario = await usuarioRepo.findOne({ where: { id } });\n        if (!usuario) {\n          this.logger.warn(`Usuário não encontrado: ${id}`);\n          throwUserNotFound(id);\n        }\n\n        // Verificar se email já existe (se fornecido)\n        if (\n          updateUsuarioDto.email &&\n          updateUsuarioDto.email.toLowerCase() !== usuario.email.toLowerCase()\n        ) {\n          const emailExistente = await usuarioRepo.findOne({\n            where: { email: updateUsuarioDto.email.toLowerCase() },\n          });\n          if (emailExistente) {\n            this.logger.warn(`Email já está em uso: ${updateUsuarioDto.email}`);\n            throwDuplicateEmail(updateUsuarioDto.email);\n          }\n          // Normalizar email para minúsculas\n          updateUsuarioDto.email = updateUsuarioDto.email.toLowerCase();\n        }\n\n        // Verificar se CPF já existe (se fornecido)\n        if (updateUsuarioDto.cpf && updateUsuarioDto.cpf !== usuario.cpf) {\n          const cpfExistente = await usuarioRepo.findOne({\n            where: { cpf: updateUsuarioDto.cpf },\n          });\n          if (cpfExistente) {\n            this.logger.warn(`CPF já está em uso: ${updateUsuarioDto.cpf}`);\n            // Note: CPF duplication check needs to be implemented with appropriate error\n          }\n        }\n\n        // Verificar se matrícula já existe (se fornecida)\n        if (\n          updateUsuarioDto.matricula &&\n          updateUsuarioDto.matricula !== usuario.matricula\n        ) {\n          const matriculaExistente = await usuarioRepo.findOne({\n            where: { matricula: updateUsuarioDto.matricula },\n          });\n          if (matriculaExistente) {\n            this.logger.warn(\n              `Matrícula já está em uso: ${updateUsuarioDto.matricula}`,\n            );\n            throwDuplicateMatricula(updateUsuarioDto.matricula);\n          }\n        }\n\n        // Normalizar campos de enum antes de atualizar\n        const normalizedData = normalizeEnumFields(updateUsuarioDto);\n\n        // Atualizar usuário\n        await usuarioRepo.update(id, normalizedData);\n\n        // Buscar usuário atualizado\n        const usuarioAtualizado = await usuarioRepo.findOne({ where: { id } });\n        if (!usuarioAtualizado) {\n          throwUserNotFound(id);\n        }\n\n        this.logger.log(`Usuário ${id} atualizado com sucesso`);\n\n        // Remover campos sensíveis\n        const { senhaHash, ...usuarioSemSenha } = usuarioAtualizado;\n\n        return usuarioSemSenha;\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar usuário ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof Error) {\n        throw error;\n      }\n      // Note: Internal error handling needs to be implemented with appropriate error\n    }\n  }\n\n  /**\n   * Atualiza o status de um usuário\n   * @param id ID do usuário\n   * @param updateStatusUsuarioDto Novo status\n   * @returns Usuário atualizado\n   */\n  async updateStatus(\n    id: string,\n    updateStatusUsuarioDto: UpdateStatusUsuarioDto,\n  ) {\n    // Verificar se usuário existe\n    const usuario = await this.usuarioRepository.findById(id);\n    if (!usuario) {\n      throwUserNotFound(id);\n    }\n\n    // Atualizar status\n    const usuarioAtualizado = await this.usuarioRepository.updateStatus(\n      id,\n      updateStatusUsuarioDto.status,\n    );\n\n    // Remover campos sensíveis\n    const { senhaHash, ...usuarioSemSenha } = usuarioAtualizado;\n\n    return usuarioSemSenha;\n  }\n\n  /**\n   * Atualiza a senha de um usuário\n   * @param id ID do usuário\n   * @param updateSenhaDto Dados da nova senha\n   * @returns Mensagem de sucesso\n   */\n  async updateSenha(id: string, updateSenhaDto: UpdateSenhaDto) {\n    this.logger.log(`Iniciando atualização de senha do usuário ${id}`);\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        const usuarioRepo = manager.getRepository('usuario');\n\n        // Verificar se usuário existe\n        const usuario = await usuarioRepo.findOne({ where: { id } });\n        if (!usuario) {\n          this.logger.warn(`Usuário não encontrado: ${id}`);\n          throwUserNotFound(id);\n        }\n\n        // Verificar se a senha atual está correta\n        const senhaCorreta = await bcrypt.compare(\n          updateSenhaDto.senhaAtual,\n          usuario.senhaHash,\n        );\n        if (!senhaCorreta) {\n          this.logger.warn(\n            `Tentativa de alteração de senha com senha atual incorreta: ${id}`,\n          );\n          // Incrementar contador de tentativas falhas para prevenção de ataques de força bruta\n          await usuarioRepo.update(id, {\n            tentativas_login: () => '\"tentativas_login\" + 1',\n          });\n          throwInvalidCredentials(usuario.email);\n        }\n\n        // Verificar se a nova senha e a confirmação coincidem\n        if (updateSenhaDto.novaSenha !== updateSenhaDto.confirmacaoSenha) {\n          this.logger.warn(`Nova senha e confirmação não coincidem: ${id}`);\n          throwPasswordMismatch();\n        }\n\n        // Verificar se a nova senha é diferente da atual\n        if (updateSenhaDto.novaSenha === updateSenhaDto.senhaAtual) {\n          throwWeakPassword(); // Note: Same password logic needs review\n        }\n\n        // Gerar hash da nova senha com maior segurança\n        const senhaHash = await bcrypt.hash(\n          updateSenhaDto.novaSenha,\n          this.SALT_ROUNDS,\n        );\n\n        // Atualizar senha e resetar contador de tentativas\n        await usuarioRepo.update(id, {\n          senhaHash,\n          tentativas_login: 0,\n          primeiro_acesso: false,\n          ultimo_login: new Date(),\n        });\n\n        this.logger.log(`Senha do usuário ${id} atualizada com sucesso`);\n\n        return { message: 'Senha atualizada com sucesso' };\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar senha do usuário ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof Error) {\n        throw error;\n      }\n      // Note: Internal error handling needs to be implemented with appropriate error\n    }\n  }\n\n  /**\n   * Obtém o perfil do usuário atual\n   * @param userId ID do usuário atual\n   * @returns Perfil do usuário\n   */\n  async getProfile(userId: string) {\n    return this.findById(userId);\n  }\n\n  /**\n   * Busca um usuário pelo email (para autenticação)\n   * @param email Email do usuário\n   * @returns Usuário encontrado ou null\n   */\n  async findByEmail(email: string): Promise<Usuario | null> {\n    this.logger.log(`Buscando usuário por email: ${email}`);\n\n    try {\n      // Normalizar email para minúsculas para evitar problemas de case sensitivity\n      const normalizedEmail = email.toLowerCase();\n      const usuario = await this.usuarioRepository.findByEmail(normalizedEmail);\n\n      if (!usuario) {\n        this.logger.warn(\n          `Tentativa de login com email inexistente: ${normalizedEmail}`,\n          { context: 'SECURITY_LOGIN_ATTEMPT', email: normalizedEmail },\n        );\n      }\n\n      return usuario;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar usuário por email: ${error.message}`,\n        error.stack,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Verifica se o usuário está bloqueado por excesso de tentativas\n   * @param usuario Usuário a ser verificado\n   * @returns true se estiver bloqueado\n   */\n  private isUserLocked(usuario: Usuario): boolean {\n    if (\n      !usuario.tentativas_login ||\n      usuario.tentativas_login < this.MAX_LOGIN_ATTEMPTS\n    ) {\n      return false;\n    }\n\n    const lastAttempt = usuario.ultimo_login || new Date(0);\n    const timeSinceLastAttempt = Date.now() - lastAttempt.getTime();\n\n    return timeSinceLastAttempt < this.LOCKOUT_DURATION;\n  }\n\n  /**\n   * Incrementa o contador de tentativas de login\n   * @param userId ID do usuário\n   */\n  private async incrementLoginAttempts(userId: string): Promise<void> {\n    try {\n      await this.dataSource.transaction(async (manager) => {\n        const usuarioRepo = manager.getRepository(Usuario);\n        await usuarioRepo.increment({ id: userId }, 'tentativas_login', 1);\n        await usuarioRepo.update(userId, {\n          ultimo_login: new Date(),\n        } as DeepPartial<Usuario>);\n      });\n\n      this.logger.warn(\n        `Tentativa de login falhada incrementada para usuário: ${userId}`,\n        { context: 'SECURITY_LOGIN_FAILED', userId },\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao incrementar tentativas de login: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Reseta o contador de tentativas de login\n   * @param userId ID do usuário\n   */\n  private async resetLoginAttempts(userId: string): Promise<void> {\n    try {\n      await this.usuarioRepository.updateStatus(userId, Status.ATIVO);\n      await this.dataSource.transaction(async (manager) => {\n        const usuarioRepo = manager.getRepository(Usuario);\n        await usuarioRepo.update(userId, {\n          tentativas_login: 0,\n          ultimo_login: new Date(),\n        } as DeepPartial<Usuario>);\n      });\n\n      this.logger.log(\n        `Login bem-sucedido - tentativas resetadas para usuário: ${userId}`,\n        { context: 'SECURITY_LOGIN_SUCCESS', userId },\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao resetar tentativas de login: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Valida credenciais de login com controle de tentativas\n   * @param email Email do usuário\n   * @param senha Senha do usuário\n   * @returns Usuário se credenciais válidas, null caso contrário\n   */\n  async validateUserCredentials(\n    email: string,\n    senha: string,\n  ): Promise<Usuario | null> {\n    const usuario = await this.findByEmail(email);\n\n    if (!usuario) {\n      return null;\n    }\n\n    // Verificar se usuário está bloqueado\n    if (this.isUserLocked(usuario)) {\n      this.logger.warn(`Tentativa de login em conta bloqueada: ${usuario.id}`, {\n        context: 'SECURITY_BLOCKED_LOGIN_ATTEMPT',\n        userId: usuario.id,\n        email: usuario.email,\n        attempts: usuario.tentativas_login,\n      });\n      throwAccountBlocked(usuario.id); // Note: Using userId instead of email\n    }\n\n    // Verificar senha\n    const senhaValida = await bcrypt.compare(senha, usuario.senhaHash);\n\n    if (!senhaValida) {\n      await this.incrementLoginAttempts(usuario.id);\n\n      this.logger.warn(\n        `Tentativa de login com senha incorreta: ${usuario.id}`,\n        {\n          context: 'SECURITY_INVALID_PASSWORD',\n          userId: usuario.id,\n          email: usuario.email,\n          attempts: (usuario.tentativas_login || 0) + 1,\n        },\n      );\n\n      throwInvalidCredentials(email);\n    }\n\n    // Login bem-sucedido - resetar tentativas\n    await this.resetLoginAttempts(usuario.id);\n\n    return usuario;\n  }\n\n  /**\n   * Remove um usuário (soft delete)\n   * @param id - ID do usuário a ser removido\n   * @returns Promise<void>\n   */\n  async remove(id: string): Promise<void> {\n    this.logger.log(`Iniciando remoção do usuário: ${id}`);\n\n    try {\n      // Verifica se o usuário existe\n      const usuario = await this.usuarioRepository.findById(id);\n      if (!usuario) {\n        this.logger.warn(`Usuário não encontrado para remoção: ${id}`);\n        throwUserNotFound(id);\n      }\n\n      // Realiza o soft delete\n      await this.usuarioRepository.remove(id);\n\n      this.logger.log(`Usuário removido com sucesso: ${id}`);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao remover usuário ${id}: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Altera a senha do usuário no primeiro acesso\n   * @param userId ID do usuário\n   * @param alterarSenhaDto Dados da nova senha\n   * @returns Resultado da operação\n   */\n  /**\n   * Busca todas as roles disponíveis no sistema\n   * @returns Lista de roles com id, nome e descrição\n   */\n  async findAllRoles() {\n    this.logger.log('Buscando todas as roles disponíveis');\n\n    try {\n      const roles = await this.roleRepository.find({\n        select: ['id', 'nome', 'descricao', 'status'],\n        where: { status: Status.ATIVO },\n        order: { nome: 'ASC' },\n      });\n\n      return {\n        data: roles,\n        meta: { total: roles.length },\n        message: 'Roles retornadas com sucesso',\n      };\n    } catch (error) {\n      this.logger.error(`Erro ao buscar roles: ${error.message}`, error.stack);\n      // Note: Internal error handling needs to be implemented with appropriate error\n    }\n  }\n\n  async alterarSenhaPrimeiroAcesso(\n    userId: string,\n    alterarSenhaDto: AlterarSenhaPrimeiroAcessoDto,\n  ) {\n    this.logger.log(\n      `Iniciando alteração de senha no primeiro acesso para usuário ${userId}`,\n    );\n\n    try {\n      // Verificar se as senhas coincidem (validação adicional no backend)\n      if (alterarSenhaDto.nova_senha !== alterarSenhaDto.confirmar_senha) {\n        throwPasswordMismatch();\n      }\n\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        const usuarioRepo = manager.getRepository('usuario');\n\n        // Buscar usuário\n        const usuario = await usuarioRepo.findOne({ where: { id: userId } });\n        if (!usuario) {\n          this.logger.warn(`Usuário não encontrado: ${userId}`);\n          throwUserNotFound(userId);\n        }\n\n        // Verificar se está em primeiro acesso\n        if (!usuario.primeiro_acesso) {\n          this.logger.warn(`Usuário ${userId} não está em primeiro acesso`);\n          throw new BadRequestException(\n            'Usuário não está em primeiro acesso. Esta operação só é permitida para usuários que ainda não alteraram sua senha inicial.',\n          );\n        }\n\n        // Gerar hash da nova senha\n        const novoHash = await bcrypt.hash(alterarSenhaDto.nova_senha, 12);\n\n        // Atualizar senha e marcar como não sendo mais primeiro acesso\n        await usuarioRepo.update(userId, {\n          senhaHash: novoHash,\n          primeiro_acesso: false,\n          updated_at: new Date(),\n        });\n\n        this.logger.log(\n          `Senha alterada com sucesso no primeiro acesso para usuário ${userId}`,\n        );\n\n        return {\n          data: null,\n          meta: null,\n          message:\n            'Senha alterada com sucesso. Você pode agora acessar o sistema normalmente.',\n        };\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao alterar senha no primeiro acesso para usuário ${userId}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof Error) {\n        throw error;\n      }\n      // Note: Internal error handling needs to be implemented with appropriate error\n    }\n  }\n}\n"],"version":3}