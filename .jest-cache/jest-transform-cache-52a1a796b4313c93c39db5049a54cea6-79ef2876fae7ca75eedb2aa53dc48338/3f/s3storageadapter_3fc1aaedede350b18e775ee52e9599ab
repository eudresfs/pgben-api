1d6d768260bc8558b7a48fc0fa7f8965
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var S3StorageAdapter_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3StorageAdapter = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const client_s3_1 = require("@aws-sdk/client-s3");
const s3_request_presigner_1 = require("@aws-sdk/s3-request-presigner");
const unified_logger_service_1 = require("../../../shared/logging/unified-logger.service");
/**
 * Adaptador para armazenamento de documentos no Amazon S3
 *
 * Implementa a interface StorageProvider para integração com o Amazon S3
 */
let S3StorageAdapter = S3StorageAdapter_1 = class S3StorageAdapter {
    configService;
    nome = 'S3';
    logger = new common_1.Logger(S3StorageAdapter_1.name);
    unifiedLogger;
    s3Client;
    bucketName;
    maxRetries;
    retryDelay;
    constructor(configService, unifiedLoggerService) {
        this.configService = configService;
        this.unifiedLogger = unifiedLoggerService.child({ context: S3StorageAdapter_1.name });
        const bucketName = this.configService.get('AWS_S3_BUCKET');
        if (!bucketName) {
            throw new Error('AWS_S3_BUCKET configuration is required');
        }
        this.bucketName = bucketName;
        this.maxRetries = this.configService.get('STORAGE_MAX_RETRIES', 3);
        this.retryDelay = this.configService.get('STORAGE_RETRY_DELAY', 1000);
        const region = this.configService.get('AWS_REGION');
        const accessKeyId = this.configService.get('AWS_ACCESS_KEY_ID');
        const secretAccessKey = this.configService.get('AWS_SECRET_ACCESS_KEY');
        if (!region || !accessKeyId || !secretAccessKey) {
            throw new Error('AWS credentials (AWS_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) are required');
        }
        this.s3Client = new client_s3_1.S3Client({
            region,
            credentials: {
                accessKeyId,
                secretAccessKey,
            },
            maxAttempts: this.maxRetries,
        });
        this.validateConfiguration();
    }
    validateConfiguration() {
        const requiredConfigs = [
            'AWS_S3_BUCKET',
            'AWS_REGION',
            'AWS_ACCESS_KEY_ID',
            'AWS_SECRET_ACCESS_KEY'
        ];
        const missingConfigs = requiredConfigs.filter(config => !this.configService.get(config));
        if (missingConfigs.length > 0) {
            const error = `Configurações S3 ausentes: ${missingConfigs.join(', ')}`;
            this.unifiedLogger.error('Configuração S3 inválida', { missingConfigs });
            throw new Error(error);
        }
        this.unifiedLogger.debug('Configuração S3 validada com sucesso', {
            bucket: this.bucketName,
            region: this.configService.get('AWS_REGION'),
            maxRetries: this.maxRetries
        });
    }
    async retryOperation(operation, operationName, maxRetries = this.maxRetries) {
        let lastError = new Error('Operação falhou após todas as tentativas');
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await operation();
            }
            catch (error) {
                lastError = error;
                if (attempt === maxRetries) {
                    this.unifiedLogger.error(`Operação S3 falhou após ${maxRetries} tentativas: ${operationName}`, {
                        operationName,
                        attempts: maxRetries,
                        error: error.message,
                        errorCode: error.name
                    });
                    break;
                }
                const delay = this.retryDelay * Math.pow(2, attempt - 1);
                this.unifiedLogger.warn(`Tentativa ${attempt}/${maxRetries} falhou para ${operationName}, tentando novamente em ${delay}ms`, {
                    operationName,
                    attempt,
                    maxRetries,
                    delay,
                    error: error.message
                });
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
        throw lastError;
    }
    handleS3Error(error, operation, key) {
        const errorInfo = {
            operation,
            key,
            errorName: error.name,
            errorCode: error.$metadata?.httpStatusCode,
            errorMessage: error.message
        };
        this.unifiedLogger.error(`Erro S3 na operação ${operation}`, errorInfo);
        if (error instanceof client_s3_1.NoSuchKey) {
            return new Error(`Arquivo não encontrado: ${key}`);
        }
        if (error instanceof client_s3_1.S3ServiceException) {
            const statusCode = error.$metadata?.httpStatusCode;
            if (statusCode === 403) {
                return new Error('Acesso negado ao S3. Verifique as credenciais.');
            }
            if (statusCode === 404) {
                return new Error(`Bucket ou arquivo não encontrado: ${key || this.bucketName}`);
            }
            if (statusCode && statusCode >= 500) {
                return new Error('Erro interno do S3. Tente novamente.');
            }
        }
        return new Error(`Erro S3 na operação ${operation}: ${error.message}`);
    }
    /**
     * Salva um arquivo no armazenamento S3
     * @param buffer Buffer do arquivo
     * @param nomeArquivo Nome do arquivo
     * @param mimetype Tipo MIME do arquivo
     * @param metadados Metadados opcionais do arquivo
     * @returns Caminho ou identificador do arquivo armazenado
     */
    async salvarArquivo(buffer, nomeArquivo, mimetype, metadados) {
        return this.upload(buffer, nomeArquivo, mimetype, metadados);
    }
    /**
     * Obtém um arquivo do armazenamento S3
     * @param caminho Caminho ou identificador do arquivo
     * @returns Buffer do arquivo
     */
    async obterArquivo(caminho) {
        return this.download(caminho);
    }
    /**
     * Remove um arquivo do armazenamento S3
     * @param caminho Caminho ou identificador do arquivo
     */
    async removerArquivo(caminho) {
        return this.delete(caminho);
    }
    /**
     * Faz upload de um arquivo para o S3
     * @param buffer Buffer do arquivo
     * @param key Chave única para identificar o arquivo
     * @param mimetype Tipo MIME do arquivo
     * @param metadata Metadados opcionais do arquivo
     * @returns Caminho do arquivo no S3
     */
    async upload(buffer, key, mimetype, metadata) {
        const startTime = Date.now();
        try {
            this.unifiedLogger.debug(`Iniciando upload S3`, {
                key,
                mimetype,
                tamanho: buffer.length,
                bucket: this.bucketName,
                metadata
            });
            // Preparar metadados para o S3
            const s3Metadata = {};
            if (metadata) {
                // Converter todos os valores para string, pois o S3 só aceita strings como metadados
                Object.entries(metadata).forEach(([k, v]) => {
                    s3Metadata[k] = typeof v === 'string' ? v : JSON.stringify(v);
                });
            }
            // Enviar arquivo para o S3 com retry
            const uploadOperation = async () => {
                const command = new client_s3_1.PutObjectCommand({
                    Bucket: this.bucketName,
                    Key: key,
                    Body: buffer,
                    ContentType: mimetype,
                    Metadata: s3Metadata,
                });
                return await this.s3Client.send(command);
            };
            await this.retryOperation(uploadOperation, `upload S3 [${key}]`);
            const duration = Date.now() - startTime;
            this.unifiedLogger.info(`Upload S3 concluído com sucesso`, {
                key,
                bucket: this.bucketName,
                tamanho: buffer.length,
                duracao: duration,
                mimetype
            });
            return key;
        }
        catch (error) {
            const duration = Date.now() - startTime;
            this.unifiedLogger.error(`Falha no upload S3`, {
                key,
                bucket: this.bucketName,
                tamanho: buffer.length,
                duracao: duration,
                error: error.message
            });
            throw this.handleS3Error(error, 'upload', key);
        }
    }
    /**
     * Faz download de um arquivo do S3
     * @param key Chave do arquivo
     * @returns Buffer do arquivo
     */
    async download(key) {
        const startTime = Date.now();
        try {
            this.unifiedLogger.debug(`Iniciando download S3`, {
                key,
                bucket: this.bucketName
            });
            // Obter arquivo do S3 com retry
            const downloadOperation = async () => {
                const command = new client_s3_1.GetObjectCommand({
                    Bucket: this.bucketName,
                    Key: key,
                });
                return await this.s3Client.send(command);
            };
            const response = await this.retryOperation(downloadOperation, `download S3 [${key}]`);
            // Converter stream para buffer
            const chunks = [];
            const stream = response.Body;
            if (!stream) {
                throw new Error('Resposta do S3 não contém dados');
            }
            for await (const chunk of stream) {
                chunks.push(chunk);
            }
            const buffer = Buffer.concat(chunks);
            const duration = Date.now() - startTime;
            this.unifiedLogger.info(`Download S3 concluído com sucesso`, {
                key,
                bucket: this.bucketName,
                tamanho: buffer.length,
                duracao: duration
            });
            return buffer;
        }
        catch (error) {
            const duration = Date.now() - startTime;
            this.unifiedLogger.error(`Falha no download S3`, {
                key,
                bucket: this.bucketName,
                duracao: duration,
                error: error.message
            });
            throw this.handleS3Error(error, 'download', key);
        }
    }
    /**
     * Remove um arquivo do S3
     * @param key Chave do arquivo
     */
    async delete(key) {
        const startTime = Date.now();
        try {
            this.unifiedLogger.debug(`Iniciando remoção S3`, {
                key,
                bucket: this.bucketName
            });
            // Remover arquivo do S3 com retry
            const deleteOperation = async () => {
                const command = new client_s3_1.DeleteObjectCommand({
                    Bucket: this.bucketName,
                    Key: key,
                });
                return await this.s3Client.send(command);
            };
            await this.retryOperation(deleteOperation, `delete S3 [${key}]`);
            const duration = Date.now() - startTime;
            this.unifiedLogger.info(`Remoção S3 concluída com sucesso`, {
                key,
                bucket: this.bucketName,
                duracao: duration
            });
        }
        catch (error) {
            const duration = Date.now() - startTime;
            this.unifiedLogger.error(`Falha na remoção S3`, {
                key,
                bucket: this.bucketName,
                duracao: duration,
                error: error.message
            });
            // Para delete, não é crítico se o arquivo não existir
            if (error instanceof client_s3_1.NoSuchKey) {
                this.unifiedLogger.warn(`Arquivo já não existe no S3`, { key });
                return; // Sucesso silencioso
            }
            throw this.handleS3Error(error, 'delete', key);
        }
    }
    /**
     * Obtém a URL de acesso a um arquivo no S3
     * @param key Chave do arquivo
     * @param expiresIn Tempo de expiração da URL em segundos (padrão: 3600)
     * @returns URL assinada para acesso ao arquivo
     */
    async getUrl(key, expiresIn = 3600) {
        try {
            this.logger.debug(`Gerando URL assinada para: ${key} (expira em ${expiresIn}s)`);
            // Gerar URL assinada
            const command = new client_s3_1.GetObjectCommand({
                Bucket: this.bucketName,
                Key: key,
            });
            const url = await (0, s3_request_presigner_1.getSignedUrl)(this.s3Client, command, { expiresIn });
            return url;
        }
        catch (error) {
            this.logger.error(`Erro ao gerar URL assinada: ${error.message}`);
            throw new Error(`Erro ao gerar URL assinada: ${error.message}`);
        }
    }
    /**
     * Verifica se um arquivo existe no S3
     * @param key Chave do arquivo
     * @returns true se o arquivo existe, false caso contrário
     */
    async exists(key) {
        try {
            this.logger.debug(`Verificando existência do arquivo: ${key}`);
            // Verificar se o arquivo existe
            const command = new client_s3_1.HeadObjectCommand({
                Bucket: this.bucketName,
                Key: key,
            });
            await this.s3Client.send(command);
            return true;
        }
        catch (error) {
            if (error.name === 'NotFound') {
                return false;
            }
            this.logger.error(`Erro ao verificar existência do arquivo: ${error.message}`);
            throw new Error(`Erro ao verificar existência do arquivo: ${error.message}`);
        }
    }
    /**
     * Copia um arquivo de uma chave para outra no S3
     * @param sourceKey Chave do arquivo de origem
     * @param destinationKey Chave do arquivo de destino
     * @returns Chave do arquivo copiado
     */
    async copy(sourceKey, destinationKey) {
        try {
            this.logger.debug(`Copiando arquivo de ${sourceKey} para ${destinationKey}`);
            // Copiar arquivo
            const command = new client_s3_1.CopyObjectCommand({
                Bucket: this.bucketName,
                CopySource: `${this.bucketName}/${sourceKey}`,
                Key: destinationKey,
            });
            await this.s3Client.send(command);
            this.logger.debug(`Arquivo copiado com sucesso para: ${destinationKey}`);
            return destinationKey;
        }
        catch (error) {
            this.logger.error(`Erro ao copiar arquivo: ${error.message}`);
            throw new Error(`Erro ao copiar arquivo: ${error.message}`);
        }
    }
    /**
     * Lista arquivos com um prefixo específico no S3
     * @param prefix Prefixo para filtrar arquivos
     * @param maxKeys Número máximo de chaves a retornar (padrão: 1000)
     * @returns Lista de chaves de arquivos
     */
    async list(prefix, maxKeys = 1000) {
        try {
            this.logger.debug(`Listando arquivos com prefixo: ${prefix} (max: ${maxKeys})`);
            // Listar arquivos
            const command = new client_s3_1.ListObjectsV2Command({
                Bucket: this.bucketName,
                Prefix: prefix,
                MaxKeys: maxKeys,
            });
            const response = await this.s3Client.send(command);
            // Extrair chaves
            const keys = (response.Contents || [])
                .map((item) => item.Key)
                .filter(Boolean);
            this.logger.debug(`Encontrados ${keys.length} arquivos com prefixo: ${prefix}`);
            return keys;
        }
        catch (error) {
            this.logger.error(`Erro ao listar arquivos: ${error.message}`);
            throw new Error(`Erro ao listar arquivos: ${error.message}`);
        }
    }
};
exports.S3StorageAdapter = S3StorageAdapter;
exports.S3StorageAdapter = S3StorageAdapter = S3StorageAdapter_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof unified_logger_service_1.UnifiedLoggerService !== "undefined" && unified_logger_service_1.UnifiedLoggerService) === "function" ? _b : Object])
], S3StorageAdapter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,