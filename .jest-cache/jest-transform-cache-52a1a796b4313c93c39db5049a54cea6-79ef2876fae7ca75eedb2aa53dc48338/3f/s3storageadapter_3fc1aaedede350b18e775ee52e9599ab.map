{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\adapters\\s3-storage.adapter.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\adapters\\s3-storage.adapter.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  S3Client,\n  PutObjectCommand,\n  GetObjectCommand,\n  DeleteObjectCommand,\n  CopyObjectCommand,\n  HeadObjectCommand,\n  ListObjectsV2Command,\n  NoSuchKey,\n  S3ServiceException,\n} from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { Readable } from 'stream';\nimport { StorageProvider } from '../interfaces/storage-provider.interface';\nimport { MetadadosDocumento } from '../interfaces/metadados.interface';\nimport { UnifiedLoggerService } from '../../../shared/logging/unified-logger.service';\n\n/**\n * Adaptador para armazenamento de documentos no Amazon S3\n *\n * Implementa a interface StorageProvider para integração com o Amazon S3\n */\n@Injectable()\nexport class S3StorageAdapter implements StorageProvider {\n  readonly nome = 'S3';\n  private readonly logger = new Logger(S3StorageAdapter.name);\n  private readonly unifiedLogger: UnifiedLoggerService;\n  private readonly s3Client: S3Client;\n  private readonly bucketName: string;\n  private readonly maxRetries: number;\n  private readonly retryDelay: number;\n\n  constructor(\n    private readonly configService: ConfigService,\n    unifiedLoggerService: UnifiedLoggerService\n  ) {\n    this.unifiedLogger = unifiedLoggerService.child({ context: S3StorageAdapter.name });\n    \n    const bucketName = this.configService.get<string>('AWS_S3_BUCKET');\n    if (!bucketName) {\n      throw new Error('AWS_S3_BUCKET configuration is required');\n    }\n    this.bucketName = bucketName;\n    \n    this.maxRetries = this.configService.get<number>('STORAGE_MAX_RETRIES', 3);\n    this.retryDelay = this.configService.get<number>('STORAGE_RETRY_DELAY', 1000);\n    \n    const region = this.configService.get<string>('AWS_REGION');\n    const accessKeyId = this.configService.get<string>('AWS_ACCESS_KEY_ID');\n    const secretAccessKey = this.configService.get<string>('AWS_SECRET_ACCESS_KEY');\n    \n    if (!region || !accessKeyId || !secretAccessKey) {\n      throw new Error('AWS credentials (AWS_REGION, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY) are required');\n    }\n    \n    this.s3Client = new S3Client({\n      region,\n      credentials: {\n        accessKeyId,\n        secretAccessKey,\n      },\n      maxAttempts: this.maxRetries,\n    });\n    \n    this.validateConfiguration();\n  }\n  \n  private validateConfiguration(): void {\n    const requiredConfigs = [\n      'AWS_S3_BUCKET',\n      'AWS_REGION',\n      'AWS_ACCESS_KEY_ID',\n      'AWS_SECRET_ACCESS_KEY'\n    ];\n    \n    const missingConfigs = requiredConfigs.filter(\n      config => !this.configService.get(config)\n    );\n    \n    if (missingConfigs.length > 0) {\n      const error = `Configurações S3 ausentes: ${missingConfigs.join(', ')}`;\n      this.unifiedLogger.error('Configuração S3 inválida', { missingConfigs });\n      throw new Error(error);\n    }\n    \n    this.unifiedLogger.debug('Configuração S3 validada com sucesso', {\n      bucket: this.bucketName,\n      region: this.configService.get('AWS_REGION'),\n      maxRetries: this.maxRetries\n    });\n  }\n  \n  private async retryOperation<T>(\n    operation: () => Promise<T>,\n    operationName: string,\n    maxRetries: number = this.maxRetries\n  ): Promise<T> {\n    let lastError: Error = new Error('Operação falhou após todas as tentativas');\n    \n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n        \n        if (attempt === maxRetries) {\n          this.unifiedLogger.error(\n            `Operação S3 falhou após ${maxRetries} tentativas: ${operationName}`,\n            {\n              operationName,\n              attempts: maxRetries,\n              error: error.message,\n              errorCode: error.name\n            }\n          );\n          break;\n        }\n        \n        const delay = this.retryDelay * Math.pow(2, attempt - 1);\n        this.unifiedLogger.warn(\n          `Tentativa ${attempt}/${maxRetries} falhou para ${operationName}, tentando novamente em ${delay}ms`,\n          {\n            operationName,\n            attempt,\n            maxRetries,\n            delay,\n            error: error.message\n          }\n        );\n        \n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError;\n  }\n  \n  private handleS3Error(error: any, operation: string, key?: string): Error {\n    const errorInfo = {\n      operation,\n      key,\n      errorName: error.name,\n      errorCode: error.$metadata?.httpStatusCode,\n      errorMessage: error.message\n    };\n    \n    this.unifiedLogger.error(`Erro S3 na operação ${operation}`, errorInfo);\n    \n    if (error instanceof NoSuchKey) {\n      return new Error(`Arquivo não encontrado: ${key}`);\n    }\n    \n    if (error instanceof S3ServiceException) {\n      const statusCode = error.$metadata?.httpStatusCode;\n      if (statusCode === 403) {\n        return new Error('Acesso negado ao S3. Verifique as credenciais.');\n      }\n      if (statusCode === 404) {\n        return new Error(`Bucket ou arquivo não encontrado: ${key || this.bucketName}`);\n      }\n      if (statusCode && statusCode >= 500) {\n        return new Error('Erro interno do S3. Tente novamente.');\n      }\n    }\n    \n    return new Error(`Erro S3 na operação ${operation}: ${error.message}`);\n  }\n\n  /**\n   * Salva um arquivo no armazenamento S3\n   * @param buffer Buffer do arquivo\n   * @param nomeArquivo Nome do arquivo\n   * @param mimetype Tipo MIME do arquivo\n   * @param metadados Metadados opcionais do arquivo\n   * @returns Caminho ou identificador do arquivo armazenado\n   */\n  async salvarArquivo(\n    buffer: Buffer,\n    nomeArquivo: string,\n    mimetype: string,\n    metadados?: Record<string, any>,\n  ): Promise<string> {\n    return this.upload(buffer, nomeArquivo, mimetype, metadados);\n  }\n\n  /**\n   * Obtém um arquivo do armazenamento S3\n   * @param caminho Caminho ou identificador do arquivo\n   * @returns Buffer do arquivo\n   */\n  async obterArquivo(caminho: string): Promise<Buffer> {\n    return this.download(caminho);\n  }\n\n  /**\n   * Remove um arquivo do armazenamento S3\n   * @param caminho Caminho ou identificador do arquivo\n   */\n  async removerArquivo(caminho: string): Promise<void> {\n    return this.delete(caminho);\n  }\n\n  /**\n   * Faz upload de um arquivo para o S3\n   * @param buffer Buffer do arquivo\n   * @param key Chave única para identificar o arquivo\n   * @param mimetype Tipo MIME do arquivo\n   * @param metadata Metadados opcionais do arquivo\n   * @returns Caminho do arquivo no S3\n   */\n  async upload(\n    buffer: Buffer,\n    key: string,\n    mimetype: string,\n    metadata?: Record<string, any>,\n  ): Promise<string> {\n    const startTime = Date.now();\n    \n    try {\n      this.unifiedLogger.debug(`Iniciando upload S3`, {\n        key,\n        mimetype,\n        tamanho: buffer.length,\n        bucket: this.bucketName,\n        metadata\n      });\n\n      // Preparar metadados para o S3\n      const s3Metadata: Record<string, string> = {};\n      if (metadata) {\n        // Converter todos os valores para string, pois o S3 só aceita strings como metadados\n        Object.entries(metadata).forEach(([k, v]) => {\n          s3Metadata[k] = typeof v === 'string' ? v : JSON.stringify(v);\n        });\n      }\n\n      // Enviar arquivo para o S3 com retry\n      const uploadOperation = async () => {\n        const command = new PutObjectCommand({\n          Bucket: this.bucketName,\n          Key: key,\n          Body: buffer,\n          ContentType: mimetype,\n          Metadata: s3Metadata,\n        });\n        \n        return await this.s3Client.send(command);\n      };\n      \n      await this.retryOperation(uploadOperation, `upload S3 [${key}]`);\n      \n      const duration = Date.now() - startTime;\n      this.unifiedLogger.info(`Upload S3 concluído com sucesso`, {\n        key,\n        bucket: this.bucketName,\n        tamanho: buffer.length,\n        duracao: duration,\n        mimetype\n      });\n\n      return key;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.unifiedLogger.error(`Falha no upload S3`, {\n        key,\n        bucket: this.bucketName,\n        tamanho: buffer.length,\n        duracao: duration,\n        error: error.message\n      });\n      \n      throw this.handleS3Error(error, 'upload', key);\n    }\n  }\n\n  /**\n   * Faz download de um arquivo do S3\n   * @param key Chave do arquivo\n   * @returns Buffer do arquivo\n   */\n  async download(key: string): Promise<Buffer> {\n    const startTime = Date.now();\n    \n    try {\n      this.unifiedLogger.debug(`Iniciando download S3`, {\n        key,\n        bucket: this.bucketName\n      });\n\n      // Obter arquivo do S3 com retry\n      const downloadOperation = async () => {\n        const command = new GetObjectCommand({\n          Bucket: this.bucketName,\n          Key: key,\n        });\n        \n        return await this.s3Client.send(command);\n      };\n      \n      const response = await this.retryOperation(downloadOperation, `download S3 [${key}]`);\n\n      // Converter stream para buffer\n      const chunks: Uint8Array[] = [];\n      const stream = response.Body as Readable;\n      \n      if (!stream) {\n        throw new Error('Resposta do S3 não contém dados');\n      }\n      \n      for await (const chunk of stream) {\n        chunks.push(chunk);\n      }\n\n      const buffer = Buffer.concat(chunks);\n      const duration = Date.now() - startTime;\n      \n      this.unifiedLogger.info(`Download S3 concluído com sucesso`, {\n        key,\n        bucket: this.bucketName,\n        tamanho: buffer.length,\n        duracao: duration\n      });\n\n      return buffer;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.unifiedLogger.error(`Falha no download S3`, {\n        key,\n        bucket: this.bucketName,\n        duracao: duration,\n        error: error.message\n      });\n      \n      throw this.handleS3Error(error, 'download', key);\n    }\n  }\n\n  /**\n   * Remove um arquivo do S3\n   * @param key Chave do arquivo\n   */\n  async delete(key: string): Promise<void> {\n    const startTime = Date.now();\n    \n    try {\n      this.unifiedLogger.debug(`Iniciando remoção S3`, {\n        key,\n        bucket: this.bucketName\n      });\n\n      // Remover arquivo do S3 com retry\n      const deleteOperation = async () => {\n        const command = new DeleteObjectCommand({\n          Bucket: this.bucketName,\n          Key: key,\n        });\n        \n        return await this.s3Client.send(command);\n      };\n      \n      await this.retryOperation(deleteOperation, `delete S3 [${key}]`);\n      \n      const duration = Date.now() - startTime;\n      this.unifiedLogger.info(`Remoção S3 concluída com sucesso`, {\n        key,\n        bucket: this.bucketName,\n        duracao: duration\n      });\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.unifiedLogger.error(`Falha na remoção S3`, {\n        key,\n        bucket: this.bucketName,\n        duracao: duration,\n        error: error.message\n      });\n      \n      // Para delete, não é crítico se o arquivo não existir\n      if (error instanceof NoSuchKey) {\n        this.unifiedLogger.warn(`Arquivo já não existe no S3`, { key });\n        return; // Sucesso silencioso\n      }\n      \n      throw this.handleS3Error(error, 'delete', key);\n    }\n  }\n\n  /**\n   * Obtém a URL de acesso a um arquivo no S3\n   * @param key Chave do arquivo\n   * @param expiresIn Tempo de expiração da URL em segundos (padrão: 3600)\n   * @returns URL assinada para acesso ao arquivo\n   */\n  async getUrl(key: string, expiresIn: number = 3600): Promise<string> {\n    try {\n      this.logger.debug(\n        `Gerando URL assinada para: ${key} (expira em ${expiresIn}s)`,\n      );\n\n      // Gerar URL assinada\n      const command = new GetObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      const url = await getSignedUrl(this.s3Client, command, { expiresIn });\n      return url;\n    } catch (error) {\n      this.logger.error(`Erro ao gerar URL assinada: ${error.message}`);\n      throw new Error(`Erro ao gerar URL assinada: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verifica se um arquivo existe no S3\n   * @param key Chave do arquivo\n   * @returns true se o arquivo existe, false caso contrário\n   */\n  async exists(key: string): Promise<boolean> {\n    try {\n      this.logger.debug(`Verificando existência do arquivo: ${key}`);\n\n      // Verificar se o arquivo existe\n      const command = new HeadObjectCommand({\n        Bucket: this.bucketName,\n        Key: key,\n      });\n\n      await this.s3Client.send(command);\n      return true;\n    } catch (error) {\n      if (error.name === 'NotFound') {\n        return false;\n      }\n\n      this.logger.error(\n        `Erro ao verificar existência do arquivo: ${error.message}`,\n      );\n      throw new Error(\n        `Erro ao verificar existência do arquivo: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Copia um arquivo de uma chave para outra no S3\n   * @param sourceKey Chave do arquivo de origem\n   * @param destinationKey Chave do arquivo de destino\n   * @returns Chave do arquivo copiado\n   */\n  async copy(sourceKey: string, destinationKey: string): Promise<string> {\n    try {\n      this.logger.debug(\n        `Copiando arquivo de ${sourceKey} para ${destinationKey}`,\n      );\n\n      // Copiar arquivo\n      const command = new CopyObjectCommand({\n        Bucket: this.bucketName,\n        CopySource: `${this.bucketName}/${sourceKey}`,\n        Key: destinationKey,\n      });\n\n      await this.s3Client.send(command);\n      this.logger.debug(`Arquivo copiado com sucesso para: ${destinationKey}`);\n\n      return destinationKey;\n    } catch (error) {\n      this.logger.error(`Erro ao copiar arquivo: ${error.message}`);\n      throw new Error(`Erro ao copiar arquivo: ${error.message}`);\n    }\n  }\n\n  /**\n   * Lista arquivos com um prefixo específico no S3\n   * @param prefix Prefixo para filtrar arquivos\n   * @param maxKeys Número máximo de chaves a retornar (padrão: 1000)\n   * @returns Lista de chaves de arquivos\n   */\n  async list(prefix: string, maxKeys: number = 1000): Promise<string[]> {\n    try {\n      this.logger.debug(\n        `Listando arquivos com prefixo: ${prefix} (max: ${maxKeys})`,\n      );\n\n      // Listar arquivos\n      const command = new ListObjectsV2Command({\n        Bucket: this.bucketName,\n        Prefix: prefix,\n        MaxKeys: maxKeys,\n      });\n\n      const response = await this.s3Client.send(command);\n\n      // Extrair chaves\n      const keys = (response.Contents || [])\n        .map((item) => item.Key)\n        .filter(Boolean) as string[];\n      this.logger.debug(\n        `Encontrados ${keys.length} arquivos com prefixo: ${prefix}`,\n      );\n\n      return keys;\n    } catch (error) {\n      this.logger.error(`Erro ao listar arquivos: ${error.message}`);\n      throw new Error(`Erro ao listar arquivos: ${error.message}`);\n    }\n  }\n}\n"],"version":3}