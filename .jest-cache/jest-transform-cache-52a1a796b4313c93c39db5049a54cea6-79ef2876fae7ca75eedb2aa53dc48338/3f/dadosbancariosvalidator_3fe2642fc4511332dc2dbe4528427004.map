{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\validators\\dados-bancarios-validator.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\validators\\dados-bancarios-validator.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\n\n/**\n * Validador de dados bancários\n * \n * Implementa validações específicas para informações bancárias,\n * incluindo validação de agência, conta e dígitos verificadores.\n * \n * @author Equipe PGBen\n */\n@Injectable()\nexport class DadosBancariosValidator {\n  /**\n   * Códigos dos principais bancos brasileiros\n   */\n  private readonly codigosBancos = {\n    '001': 'Banco do Brasil',\n    '033': 'Santander',\n    '104': 'Caixa Econômica Federal',\n    '237': 'Bradesco',\n    '341': 'Itaú',\n    '260': 'Nubank',\n    '077': 'Inter',\n    '212': 'Banco Original',\n    '336': 'C6 Bank',\n    '756': 'Sicoob',\n    '748': 'Sicredi',\n    // Outros bancos podem ser adicionados conforme necessário\n  };\n\n  /**\n   * Valida um código de banco\n   * \n   * @param codigo Código do banco (3 dígitos)\n   * @returns true se o código for válido\n   */\n  validarCodigoBanco(codigo: string): boolean {\n    if (!codigo || !/^\\d{3}$/.test(codigo)) {\n      return false;\n    }\n    \n    return Object.keys(this.codigosBancos).includes(codigo);\n  }\n\n  /**\n   * Obtém o nome do banco a partir do código\n   * \n   * @param codigo Código do banco\n   * @returns Nome do banco ou 'Banco não cadastrado'\n   */\n  obterNomeBanco(codigo: string): string {\n    return this.codigosBancos[codigo] || 'Banco não cadastrado';\n  }\n\n  /**\n   * Valida um número de agência bancária\n   * \n   * @param agencia Número da agência\n   * @param codigoBanco Código do banco (opcional)\n   * @returns true se a agência for válida\n   */\n  validarAgencia(agencia: string, codigoBanco?: string): boolean {\n    // Remover caracteres não numéricos\n    const agenciaLimpa = agencia.replace(/\\D/g, '');\n    \n    // Verificação básica (a maioria dos bancos usa 4 dígitos)\n    if (!agenciaLimpa || agenciaLimpa.length < 2 || agenciaLimpa.length > 5) {\n      return false;\n    }\n\n    // Validações específicas por banco\n    if (codigoBanco) {\n      switch (codigoBanco) {\n        case '001': // Banco do Brasil\n          return /^\\d{4,5}$/.test(agenciaLimpa);\n        case '104': // Caixa\n          return /^\\d{4}$/.test(agenciaLimpa);\n        case '341': // Itaú\n          return /^\\d{4}$/.test(agenciaLimpa);\n        case '033': // Santander\n          return /^\\d{4}$/.test(agenciaLimpa);\n        case '237': // Bradesco\n          return /^\\d{4}$/.test(agenciaLimpa);\n        default:\n          return /^\\d{2,5}$/.test(agenciaLimpa);\n      }\n    }\n    \n    // Validação genérica\n    return /^\\d{2,5}$/.test(agenciaLimpa);\n  }\n\n  /**\n   * Valida um número de conta bancária\n   * \n   * @param conta Número da conta com ou sem dígito\n   * @param codigoBanco Código do banco (opcional)\n   * @returns true se a conta for válida\n   */\n  validarConta(conta: string, codigoBanco?: string): boolean {\n    // Remover caracteres não numéricos e traços\n    const contaLimpa = conta.replace(/[^\\dXx]/g, '');\n    \n    // Verificação básica\n    if (!contaLimpa || contaLimpa.length < 3 || contaLimpa.length > 13) {\n      return false;\n    }\n\n    // Validações específicas por banco\n    if (codigoBanco) {\n      switch (codigoBanco) {\n        case '001': // Banco do Brasil\n          return /^\\d{5,8}[\\dXx]$/.test(contaLimpa);\n        case '104': // Caixa\n          return /^\\d{6,11}[\\dXx]$/.test(contaLimpa);\n        case '341': // Itaú\n          return /^\\d{4,5}[\\dXx]$/.test(contaLimpa);\n        case '033': // Santander\n          return /^\\d{6,8}$/.test(contaLimpa);\n        case '237': // Bradesco\n          return /^\\d{6,7}[\\dXx]$/.test(contaLimpa);\n        default:\n          return /^\\d{2,12}[\\dXx]?$/.test(contaLimpa);\n      }\n    }\n    \n    // Validação genérica\n    return /^\\d{2,12}[\\dXx]?$/.test(contaLimpa);\n  }\n\n  /**\n   * Valida o dígito verificador de uma conta\n   * \n   * @param conta Número da conta sem dígito\n   * @param digito Dígito verificador\n   * @param codigoBanco Código do banco\n   * @returns true se o dígito for válido\n   */\n  validarDigitoVerificador(conta: string, digito: string, codigoBanco: string): boolean {\n    // Implementação simplificada - em produção, cada banco teria seu próprio algoritmo\n    // Esta é uma validação genérica que não representa o algoritmo real de cada banco\n    \n    const contaLimpa = conta.replace(/\\D/g, '');\n    const digitoLimpo = digito.toUpperCase();\n    \n    // Alguns bancos usam X como dígito\n    if (digitoLimpo === 'X') {\n      return true; // Aceitar X como válido para bancos que o utilizam\n    }\n    \n    // Para dígitos numéricos, fazer uma validação simples\n    if (/^\\d$/.test(digitoLimpo)) {\n      // Soma dos dígitos multiplicados por pesos\n      let soma = 0;\n      const pesos = [2, 3, 4, 5, 6, 7, 8, 9];\n      \n      for (let i = 0; i < contaLimpa.length; i++) {\n        const peso = pesos[i % pesos.length];\n        soma += parseInt(contaLimpa.charAt(contaLimpa.length - 1 - i)) * peso;\n      }\n      \n      // Cálculo do dígito (simplificado)\n      const resto = soma % 11;\n      const digitoCalculado = resto === 0 ? '0' : resto === 1 ? '0' : (11 - resto).toString();\n      \n      return digitoCalculado === digitoLimpo;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Formata uma agência para exibição\n   * \n   * @param agencia Número da agência\n   * @returns Agência formatada\n   */\n  formatarAgencia(agencia: string): string {\n    const agenciaLimpa = agencia.replace(/\\D/g, '');\n    \n    // Formato padrão: 0000\n    if (agenciaLimpa.length === 4) {\n      return agenciaLimpa;\n    }\n    \n    // Outros formatos\n    return agenciaLimpa;\n  }\n\n  /**\n   * Formata uma conta para exibição\n   * \n   * @param conta Número da conta com ou sem dígito\n   * @returns Conta formatada\n   */\n  formatarConta(conta: string): string {\n    const contaLimpa = conta.replace(/[^\\dXx]/g, '');\n    \n    // Extrair dígito verificador (último caractere)\n    const digito = contaLimpa.slice(-1);\n    const numero = contaLimpa.slice(0, -1);\n    \n    // Formato padrão: 00000-0\n    return `${numero}-${digito}`;\n  }\n\n  /**\n   * Mascara uma conta para exibição segura\n   * \n   * @param conta Número da conta completo\n   * @returns Conta mascarada\n   */\n  mascaraConta(conta: string): string {\n    const contaLimpa = conta.replace(/[^\\dXx]/g, '');\n    \n    if (contaLimpa.length <= 4) {\n      return '****';\n    }\n    \n    // Manter os dois primeiros e os dois últimos dígitos\n    const inicio = contaLimpa.slice(0, 2);\n    const fim = contaLimpa.slice(-2);\n    const meio = '*'.repeat(contaLimpa.length - 4);\n    \n    return `${inicio}${meio}${fim}`;\n  }\n\n  /**\n   * Mascara uma agência para exibição segura\n   * \n   * @param agencia Número da agência\n   * @returns Agência mascarada\n   */\n  mascaraAgencia(agencia: string): string {\n    const agenciaLimpa = agencia.replace(/\\D/g, '');\n    \n    if (agenciaLimpa.length <= 2) {\n      return '****';\n    }\n    \n    // Manter o primeiro e o último dígito\n    const inicio = agenciaLimpa.slice(0, 1);\n    const fim = agenciaLimpa.slice(-1);\n    const meio = '*'.repeat(agenciaLimpa.length - 2);\n    \n    return `${inicio}${meio}${fim}`;\n  }\n}\n"],"version":3}