{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\strategies\\jwt-refresh.strategy.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,2CAA+C;AAC/C,+CAAoD;AACpD,+CAAqE;AACrE,2BAAkC;AAClC,+BAA4B;AAE5B,sEAAsE;AAI/D,IAAM,kBAAkB,0BAAxB,MAAM,kBAAmB,SAAQ,IAAA,2BAAgB,EACtD,uBAAQ,EACR,wCAAoB,CACrB;IAG8B;IAFZ,MAAM,GAAG,IAAI,eAAM,CAAC,oBAAkB,CAAC,IAAI,CAAC,CAAC;IAE9D,YAA6B,aAA4B;QACvD,4DAA4D;QAC5D,MAAM,SAAS,GAAG,oBAAkB,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QAElE,6BAA6B;QAC7B,KAAK,CAAC;YACJ,cAAc,EAAE,yBAAU,CAAC,aAAa,CAAC,cAAc,CAAC;YACxD,gBAAgB,EAAE,KAAK;YACvB,WAAW,EAAE,SAAS;YACtB,UAAU,EAAE,CAAC,OAAO,CAAC;YACrB,mBAAmB,EAAE;gBACnB,UAAU,EAAE,CAAC,OAAO,CAAC;aACtB;SACiB,CAAC,CAAC;QAbK,kBAAa,GAAb,aAAa,CAAe;IAczD,CAAC;IAED;;OAEG;IACK,MAAM,CAAC,aAAa,CAAC,aAA4B;QACvD,MAAM,aAAa,GAAG,aAAa,CAAC,GAAG,CAAS,qBAAqB,CAAC,CAAC;QAEvE,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;QAC9D,CAAC;QAED,IAAI,CAAC;YACH,sCAAsC;YACtC,MAAM,SAAS,GAAG,IAAA,iBAAY,EAC5B,IAAA,WAAI,EAAC,OAAO,CAAC,GAAG,EAAE,EAAE,aAAa,CAAC,EAClC,MAAM,CACP,CAAC,IAAI,EAAE,CAAC;YAET,6BAA6B;YAC7B,IACE,CAAC,SAAS,CAAC,UAAU,CAAC,4BAA4B,CAAC;gBACnD,CAAC,SAAS,CAAC,QAAQ,CAAC,0BAA0B,CAAC,EAC/C,CAAC;gBACD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;YACvD,CAAC;YAED,OAAO,SAAS,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,oBAAkB,CAAC,IAAI,CAAC,CAAC;YACnD,MAAM,YAAY,GAAG,0CAA0C,KAAK,CAAC,OAAO,EAAE,CAAC;YAC/E,MAAM,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;QAChC,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,OAAY;QACzB,gGAAgG;QAChG,8CAA8C;QAC9C,OAAO,EAAE,EAAE,EAAE,OAAO,CAAC,GAAG,EAAE,CAAC;IAC7B,CAAC;CACF,CAAA;AAlEY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;yDAOiC,sBAAa,oBAAb,sBAAa;GAN9C,kBAAkB,CAkE9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\strategies\\jwt-refresh.strategy.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy, StrategyOptions } from 'passport-jwt';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nimport { STRATEGY_JWT_REFRESH } from '../constants/strategy.constant';\nimport { UserRefreshTokenClaims } from '../dtos/auth-token-output.dto';\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(\n  Strategy,\n  STRATEGY_JWT_REFRESH,\n) {\n  private readonly logger = new Logger(JwtRefreshStrategy.name);\n\n  constructor(private readonly configService: ConfigService) {\n    // Carregar a chave pública antes de configurar a estratégia\n    const publicKey = JwtRefreshStrategy.loadPublicKey(configService);\n\n    // Configuração da estratégia\n    super({\n      jwtFromRequest: ExtractJwt.fromBodyField('refreshToken'),\n      ignoreExpiration: false,\n      secretOrKey: publicKey,\n      algorithms: ['RS256'],\n      jsonWebTokenOptions: {\n        algorithms: ['RS256'],\n      },\n    } as StrategyOptions);\n  }\n\n  /**\n   * Carrega a chave pública do arquivo especificado em JWT_PUBLIC_KEY_PATH\n   */\n  private static loadPublicKey(configService: ConfigService): string {\n    const publicKeyPath = configService.get<string>('JWT_PUBLIC_KEY_PATH');\n\n    if (!publicKeyPath) {\n      throw new Error('JWT_PUBLIC_KEY_PATH não está configurado');\n    }\n\n    try {\n      // Carregar a chave pública do arquivo\n      const publicKey = readFileSync(\n        join(process.cwd(), publicKeyPath),\n        'utf8',\n      ).trim();\n\n      // Validar o formato da chave\n      if (\n        !publicKey.startsWith('-----BEGIN PUBLIC KEY-----') ||\n        !publicKey.endsWith('-----END PUBLIC KEY-----')\n      ) {\n        throw new Error('Formato de chave pública inválido');\n      }\n\n      return publicKey;\n    } catch (error) {\n      const logger = new Logger(JwtRefreshStrategy.name);\n      const errorMessage = `Falha ao carregar a chave pública JWT: ${error.message}`;\n      logger.error(errorMessage, error.stack);\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Valida o payload do token JWT\n   * @param payload Payload do token JWT\n   * @returns Objeto com as informações do usuário autenticado\n   */\n  async validate(payload: any): Promise<UserRefreshTokenClaims> {\n    // Passport automaticamente cria um objeto user com base no valor retornado do método validate()\n    // e o atribui ao objeto Request como req.user\n    return { id: payload.sub };\n  }\n}\n"],"version":3}