b403278942c74ce91ea33367c8c982d8
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CEPValidator = void 0;
const class_validator_1 = require("class-validator");
/**
 * Validador personalizado para CEP brasileiro
 *
 * Aceita formatos:
 * - 00000-000 (com hífen)
 * - 00000000 (sem formatação)
 */
let CEPValidator = class CEPValidator {
    validate(text, args) {
        if (!text) {
            return true;
        } // Permite valores vazios (use @IsNotEmpty se quiser tornar obrigatório)
        // Remove todos os caracteres não numéricos
        const cepLimpo = text.replace(/\D/g, '');
        // Verifica se o CEP tem 8 dígitos
        if (cepLimpo.length !== 8) {
            return false;
        }
        // Verifica se o CEP não é uma sequência de dígitos iguais (00000000, 11111111, etc.)
        if (/^(\d)\1{7}$/.test(cepLimpo)) {
            return false;
        }
        return true;
    }
    defaultMessage(args) {
        return 'CEP inválido. Formato esperado: 00000-000 ou 00000000';
    }
};
exports.CEPValidator = CEPValidator;
exports.CEPValidator = CEPValidator = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'cepValidator', async: false })
], CEPValidator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNpZGFkYW9cXHZhbGlkYXRvcnNcXGNlcC12YWxpZGF0b3IudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEscURBSXlCO0FBRXpCOzs7Ozs7R0FNRztBQUVJLElBQU0sWUFBWSxHQUFsQixNQUFNLFlBQVk7SUFDdkIsUUFBUSxDQUFDLElBQVksRUFBRSxJQUF5QjtRQUM5QyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDVixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyx3RUFBd0U7UUFFMUUsMkNBQTJDO1FBQzNDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXpDLGtDQUFrQztRQUNsQyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDMUIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQscUZBQXFGO1FBQ3JGLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQ2pDLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUF5QjtRQUN0QyxPQUFPLHVEQUF1RCxDQUFDO0lBQ2pFLENBQUM7Q0FDRixDQUFBO0FBekJZLG9DQUFZO3VCQUFaLFlBQVk7SUFEeEIsSUFBQSxxQ0FBbUIsRUFBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO0dBQy9DLFlBQVksQ0F5QnhCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxjaWRhZGFvXFx2YWxpZGF0b3JzXFxjZXAtdmFsaWRhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFZhbGlkYXRvckNvbnN0cmFpbnQsXG4gIFZhbGlkYXRvckNvbnN0cmFpbnRJbnRlcmZhY2UsXG4gIFZhbGlkYXRpb25Bcmd1bWVudHMsXG59IGZyb20gJ2NsYXNzLXZhbGlkYXRvcic7XG5cbi8qKlxuICogVmFsaWRhZG9yIHBlcnNvbmFsaXphZG8gcGFyYSBDRVAgYnJhc2lsZWlyb1xuICpcbiAqIEFjZWl0YSBmb3JtYXRvczpcbiAqIC0gMDAwMDAtMDAwIChjb20gaMOtZmVuKVxuICogLSAwMDAwMDAwMCAoc2VtIGZvcm1hdGHDp8OjbylcbiAqL1xuQFZhbGlkYXRvckNvbnN0cmFpbnQoeyBuYW1lOiAnY2VwVmFsaWRhdG9yJywgYXN5bmM6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgQ0VQVmFsaWRhdG9yIGltcGxlbWVudHMgVmFsaWRhdG9yQ29uc3RyYWludEludGVyZmFjZSB7XG4gIHZhbGlkYXRlKHRleHQ6IHN0cmluZywgYXJnczogVmFsaWRhdGlvbkFyZ3VtZW50cykge1xuICAgIGlmICghdGV4dCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyBQZXJtaXRlIHZhbG9yZXMgdmF6aW9zICh1c2UgQElzTm90RW1wdHkgc2UgcXVpc2VyIHRvcm5hciBvYnJpZ2F0w7NyaW8pXG5cbiAgICAvLyBSZW1vdmUgdG9kb3Mgb3MgY2FyYWN0ZXJlcyBuw6NvIG51bcOpcmljb3NcbiAgICBjb25zdCBjZXBMaW1wbyA9IHRleHQucmVwbGFjZSgvXFxEL2csICcnKTtcblxuICAgIC8vIFZlcmlmaWNhIHNlIG8gQ0VQIHRlbSA4IGTDrWdpdG9zXG4gICAgaWYgKGNlcExpbXBvLmxlbmd0aCAhPT0gOCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZlcmlmaWNhIHNlIG8gQ0VQIG7Do28gw6kgdW1hIHNlcXXDqm5jaWEgZGUgZMOtZ2l0b3MgaWd1YWlzICgwMDAwMDAwMCwgMTExMTExMTEsIGV0Yy4pXG4gICAgaWYgKC9eKFxcZClcXDF7N30kLy50ZXN0KGNlcExpbXBvKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZGVmYXVsdE1lc3NhZ2UoYXJnczogVmFsaWRhdGlvbkFyZ3VtZW50cykge1xuICAgIHJldHVybiAnQ0VQIGludsOhbGlkby4gRm9ybWF0byBlc3BlcmFkbzogMDAwMDAtMDAwIG91IDAwMDAwMDAwJztcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9