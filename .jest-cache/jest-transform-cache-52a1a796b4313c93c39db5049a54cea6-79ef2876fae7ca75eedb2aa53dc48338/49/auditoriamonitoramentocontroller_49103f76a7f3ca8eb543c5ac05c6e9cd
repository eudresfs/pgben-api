431005b68fa6213e00a2424a471365a2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AuditoriaMonitoramentoController_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaMonitoramentoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const auditoria_monitoramento_service_1 = require("../services/auditoria-monitoramento.service");
/**
 * Controlador para monitoramento do módulo de auditoria
 */
let AuditoriaMonitoramentoController = AuditoriaMonitoramentoController_1 = class AuditoriaMonitoramentoController {
    auditoriaMonitoramentoService;
    logger = new common_1.Logger(AuditoriaMonitoramentoController_1.name);
    constructor(auditoriaMonitoramentoService) {
        this.auditoriaMonitoramentoService = auditoriaMonitoramentoService;
    }
    /**
     * Obtém estatísticas do módulo de auditoria
     */
    async getEstatisticas() {
        try {
            return this.auditoriaMonitoramentoService.getEstatisticas();
        }
        catch (error) {
            this.logger.error(`Erro ao obter estatísticas: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Gera relatório de saúde do módulo de auditoria
     */
    async getRelatorioSaude() {
        try {
            return this.auditoriaMonitoramentoService.gerarRelatorioSaude();
        }
        catch (error) {
            this.logger.error(`Erro ao gerar relatório de saúde: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Força atualização das estatísticas
     */
    async forcarAtualizacao() {
        try {
            await this.auditoriaMonitoramentoService.atualizarEstatisticas();
            return {
                mensagem: 'Estatísticas atualizadas com sucesso',
                timestamp: new Date(),
            };
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar estatísticas: ${error.message}`, error.stack);
            throw error;
        }
    }
};
exports.AuditoriaMonitoramentoController = AuditoriaMonitoramentoController;
__decorate([
    (0, common_1.Get)('estatisticas'),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém estatísticas do módulo de auditoria' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Estatísticas retornadas com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AuditoriaMonitoramentoController.prototype, "getEstatisticas", null);
__decorate([
    (0, common_1.Get)('saude'),
    (0, swagger_1.ApiOperation)({ summary: 'Gera relatório de saúde do módulo de auditoria' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Relatório de saúde gerado com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AuditoriaMonitoramentoController.prototype, "getRelatorioSaude", null);
__decorate([
    (0, common_1.Get)('atualizar'),
    (0, swagger_1.ApiOperation)({ summary: 'Força atualização das estatísticas' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Estatísticas atualizadas com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AuditoriaMonitoramentoController.prototype, "forcarAtualizacao", null);
exports.AuditoriaMonitoramentoController = AuditoriaMonitoramentoController = AuditoriaMonitoramentoController_1 = __decorate([
    (0, swagger_1.ApiTags)('Auditoria'),
    (0, common_1.Controller)('auditoria/monitoramento'),
    __metadata("design:paramtypes", [typeof (_a = typeof auditoria_monitoramento_service_1.AuditoriaMonitoramentoService !== "undefined" && auditoria_monitoramento_service_1.AuditoriaMonitoramentoService) === "function" ? _a : Object])
], AuditoriaMonitoramentoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGF1ZGl0b3JpYVxcY29udHJvbGxlcnNcXGF1ZGl0b3JpYS1tb25pdG9yYW1lbnRvLmNvbnRyb2xsZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBeUQ7QUFDekQsNkNBQXFFO0FBQ3JFLGlHQUE0RjtBQUU1Rjs7R0FFRztBQUdJLElBQU0sZ0NBQWdDLHdDQUF0QyxNQUFNLGdDQUFnQztJQUl4QjtJQUhGLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxrQ0FBZ0MsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU1RSxZQUNtQiw2QkFBNEQ7UUFBNUQsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUErQjtJQUM1RSxDQUFDO0lBRUo7O09BRUc7SUFPRyxBQUFOLEtBQUssQ0FBQyxlQUFlO1FBQ25CLElBQUksQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQzlELENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsK0JBQStCLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFDOUMsS0FBSyxDQUFDLEtBQUssQ0FDWixDQUFDO1lBQ0YsTUFBTSxLQUFLLENBQUM7UUFDZCxDQUFDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBT0csQUFBTixLQUFLLENBQUMsaUJBQWlCO1FBQ3JCLElBQUksQ0FBQztZQUNILE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDbEUsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixxQ0FBcUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUNwRCxLQUFLLENBQUMsS0FBSyxDQUNaLENBQUM7WUFDRixNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFPRyxBQUFOLEtBQUssQ0FBQyxpQkFBaUI7UUFDckIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsNkJBQTZCLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUNqRSxPQUFPO2dCQUNMLFFBQVEsRUFBRSxzQ0FBc0M7Z0JBQ2hELFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTthQUN0QixDQUFDO1FBQ0osQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixtQ0FBbUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUNsRCxLQUFLLENBQUMsS0FBSyxDQUNaLENBQUM7WUFDRixNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQXpFWSw0RUFBZ0M7QUFnQnJDO0lBTkwsSUFBQSxZQUFHLEVBQUMsY0FBYyxDQUFDO0lBQ25CLElBQUEsc0JBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSwyQ0FBMkMsRUFBRSxDQUFDO0lBQ3RFLElBQUEscUJBQVcsRUFBQztRQUNYLE1BQU0sRUFBRSxHQUFHO1FBQ1gsV0FBVyxFQUFFLHFDQUFxQztLQUNuRCxDQUFDOzs7O3VFQVdEO0FBV0s7SUFOTCxJQUFBLFlBQUcsRUFBQyxPQUFPLENBQUM7SUFDWixJQUFBLHNCQUFZLEVBQUMsRUFBRSxPQUFPLEVBQUUsZ0RBQWdELEVBQUUsQ0FBQztJQUMzRSxJQUFBLHFCQUFXLEVBQUM7UUFDWCxNQUFNLEVBQUUsR0FBRztRQUNYLFdBQVcsRUFBRSx1Q0FBdUM7S0FDckQsQ0FBQzs7Ozt5RUFXRDtBQVdLO0lBTkwsSUFBQSxZQUFHLEVBQUMsV0FBVyxDQUFDO0lBQ2hCLElBQUEsc0JBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxDQUFDO0lBQy9ELElBQUEscUJBQVcsRUFBQztRQUNYLE1BQU0sRUFBRSxHQUFHO1FBQ1gsV0FBVyxFQUFFLHNDQUFzQztLQUNwRCxDQUFDOzs7O3lFQWVEOzJDQXhFVSxnQ0FBZ0M7SUFGNUMsSUFBQSxpQkFBTyxFQUFDLFdBQVcsQ0FBQztJQUNwQixJQUFBLG1CQUFVLEVBQUMseUJBQXlCLENBQUM7eURBS2MsK0RBQTZCLG9CQUE3QiwrREFBNkI7R0FKcEUsZ0NBQWdDLENBeUU1QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcYXVkaXRvcmlhXFxjb250cm9sbGVyc1xcYXVkaXRvcmlhLW1vbml0b3JhbWVudG8uY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sbGVyLCBHZXQsIExvZ2dlciB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IEFwaVRhZ3MsIEFwaU9wZXJhdGlvbiwgQXBpUmVzcG9uc2UgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xuaW1wb3J0IHsgQXVkaXRvcmlhTW9uaXRvcmFtZW50b1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hdWRpdG9yaWEtbW9uaXRvcmFtZW50by5zZXJ2aWNlJztcblxuLyoqXG4gKiBDb250cm9sYWRvciBwYXJhIG1vbml0b3JhbWVudG8gZG8gbcOzZHVsbyBkZSBhdWRpdG9yaWFcbiAqL1xuQEFwaVRhZ3MoJ0F1ZGl0b3JpYScpXG5AQ29udHJvbGxlcignYXVkaXRvcmlhL21vbml0b3JhbWVudG8nKVxuZXhwb3J0IGNsYXNzIEF1ZGl0b3JpYU1vbml0b3JhbWVudG9Db250cm9sbGVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKEF1ZGl0b3JpYU1vbml0b3JhbWVudG9Db250cm9sbGVyLm5hbWUpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXVkaXRvcmlhTW9uaXRvcmFtZW50b1NlcnZpY2U6IEF1ZGl0b3JpYU1vbml0b3JhbWVudG9TZXJ2aWNlLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIE9idMOpbSBlc3RhdMOtc3RpY2FzIGRvIG3Ds2R1bG8gZGUgYXVkaXRvcmlhXG4gICAqL1xuICBAR2V0KCdlc3RhdGlzdGljYXMnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ09idMOpbSBlc3RhdMOtc3RpY2FzIGRvIG3Ds2R1bG8gZGUgYXVkaXRvcmlhJyB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnRXN0YXTDrXN0aWNhcyByZXRvcm5hZGFzIGNvbSBzdWNlc3NvJyxcbiAgfSlcbiAgYXN5bmMgZ2V0RXN0YXRpc3RpY2FzKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdGhpcy5hdWRpdG9yaWFNb25pdG9yYW1lbnRvU2VydmljZS5nZXRFc3RhdGlzdGljYXMoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIGBFcnJvIGFvIG9idGVyIGVzdGF0w61zdGljYXM6ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBlcnJvci5zdGFjayxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VyYSByZWxhdMOzcmlvIGRlIHNhw7pkZSBkbyBtw7NkdWxvIGRlIGF1ZGl0b3JpYVxuICAgKi9cbiAgQEdldCgnc2F1ZGUnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0dlcmEgcmVsYXTDs3JpbyBkZSBzYcO6ZGUgZG8gbcOzZHVsbyBkZSBhdWRpdG9yaWEnIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgZGVzY3JpcHRpb246ICdSZWxhdMOzcmlvIGRlIHNhw7pkZSBnZXJhZG8gY29tIHN1Y2Vzc28nLFxuICB9KVxuICBhc3luYyBnZXRSZWxhdG9yaW9TYXVkZSgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMuYXVkaXRvcmlhTW9uaXRvcmFtZW50b1NlcnZpY2UuZ2VyYXJSZWxhdG9yaW9TYXVkZSgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEVycm8gYW8gZ2VyYXIgcmVsYXTDs3JpbyBkZSBzYcO6ZGU6ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBlcnJvci5zdGFjayxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRm9yw6dhIGF0dWFsaXphw6fDo28gZGFzIGVzdGF0w61zdGljYXNcbiAgICovXG4gIEBHZXQoJ2F0dWFsaXphcicpXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnRm9yw6dhIGF0dWFsaXphw6fDo28gZGFzIGVzdGF0w61zdGljYXMnIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgZGVzY3JpcHRpb246ICdFc3RhdMOtc3RpY2FzIGF0dWFsaXphZGFzIGNvbSBzdWNlc3NvJyxcbiAgfSlcbiAgYXN5bmMgZm9yY2FyQXR1YWxpemFjYW8oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuYXVkaXRvcmlhTW9uaXRvcmFtZW50b1NlcnZpY2UuYXR1YWxpemFyRXN0YXRpc3RpY2FzKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZW5zYWdlbTogJ0VzdGF0w61zdGljYXMgYXR1YWxpemFkYXMgY29tIHN1Y2Vzc28nLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEVycm8gYW8gYXR1YWxpemFyIGVzdGF0w61zdGljYXM6ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBlcnJvci5zdGFjayxcbiAgICAgICk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==