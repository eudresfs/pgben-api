{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\controllers\\auditoria-monitoramento.controller.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAAyD;AACzD,6CAAqE;AACrE,iGAA4F;AAE5F;;GAEG;AAGI,IAAM,gCAAgC,wCAAtC,MAAM,gCAAgC;IAIxB;IAHF,MAAM,GAAG,IAAI,eAAM,CAAC,kCAAgC,CAAC,IAAI,CAAC,CAAC;IAE5E,YACmB,6BAA4D;QAA5D,kCAA6B,GAA7B,6BAA6B,CAA+B;IAC5E,CAAC;IAEJ;;OAEG;IAOG,AAAN,KAAK,CAAC,eAAe;QACnB,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,6BAA6B,CAAC,eAAe,EAAE,CAAC;QAC9D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,+BAA+B,KAAK,CAAC,OAAO,EAAE,EAC9C,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IAOG,AAAN,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC;YACH,OAAO,IAAI,CAAC,6BAA6B,CAAC,mBAAmB,EAAE,CAAC;QAClE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,qCAAqC,KAAK,CAAC,OAAO,EAAE,EACpD,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IAOG,AAAN,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,6BAA6B,CAAC,qBAAqB,EAAE,CAAC;YACjE,OAAO;gBACL,QAAQ,EAAE,sCAAsC;gBAChD,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,mCAAmC,KAAK,CAAC,OAAO,EAAE,EAClD,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AAzEY,4EAAgC;AAgBrC;IANL,IAAA,YAAG,EAAC,cAAc,CAAC;IACnB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,2CAA2C,EAAE,CAAC;IACtE,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,qCAAqC;KACnD,CAAC;;;;uEAWD;AAWK;IANL,IAAA,YAAG,EAAC,OAAO,CAAC;IACZ,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,gDAAgD,EAAE,CAAC;IAC3E,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,uCAAuC;KACrD,CAAC;;;;yEAWD;AAWK;IANL,IAAA,YAAG,EAAC,WAAW,CAAC;IAChB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,oCAAoC,EAAE,CAAC;IAC/D,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,sCAAsC;KACpD,CAAC;;;;yEAeD;2CAxEU,gCAAgC;IAF5C,IAAA,iBAAO,EAAC,WAAW,CAAC;IACpB,IAAA,mBAAU,EAAC,yBAAyB,CAAC;yDAKc,+DAA6B,oBAA7B,+DAA6B;GAJpE,gCAAgC,CAyE5C","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\controllers\\auditoria-monitoramento.controller.ts"],"sourcesContent":["import { Controller, Get, Logger } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\nimport { AuditoriaMonitoramentoService } from '../services/auditoria-monitoramento.service';\n\n/**\n * Controlador para monitoramento do módulo de auditoria\n */\n@ApiTags('Auditoria')\n@Controller('auditoria/monitoramento')\nexport class AuditoriaMonitoramentoController {\n  private readonly logger = new Logger(AuditoriaMonitoramentoController.name);\n\n  constructor(\n    private readonly auditoriaMonitoramentoService: AuditoriaMonitoramentoService,\n  ) {}\n\n  /**\n   * Obtém estatísticas do módulo de auditoria\n   */\n  @Get('estatisticas')\n  @ApiOperation({ summary: 'Obtém estatísticas do módulo de auditoria' })\n  @ApiResponse({\n    status: 200,\n    description: 'Estatísticas retornadas com sucesso',\n  })\n  async getEstatisticas() {\n    try {\n      return this.auditoriaMonitoramentoService.getEstatisticas();\n    } catch (error) {\n      this.logger.error(\n        `Erro ao obter estatísticas: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Gera relatório de saúde do módulo de auditoria\n   */\n  @Get('saude')\n  @ApiOperation({ summary: 'Gera relatório de saúde do módulo de auditoria' })\n  @ApiResponse({\n    status: 200,\n    description: 'Relatório de saúde gerado com sucesso',\n  })\n  async getRelatorioSaude() {\n    try {\n      return this.auditoriaMonitoramentoService.gerarRelatorioSaude();\n    } catch (error) {\n      this.logger.error(\n        `Erro ao gerar relatório de saúde: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Força atualização das estatísticas\n   */\n  @Get('atualizar')\n  @ApiOperation({ summary: 'Força atualização das estatísticas' })\n  @ApiResponse({\n    status: 200,\n    description: 'Estatísticas atualizadas com sucesso',\n  })\n  async forcarAtualizacao() {\n    try {\n      await this.auditoriaMonitoramentoService.atualizarEstatisticas();\n      return {\n        mensagem: 'Estatísticas atualizadas com sucesso',\n        timestamp: new Date(),\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar estatísticas: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n}\n"],"version":3}