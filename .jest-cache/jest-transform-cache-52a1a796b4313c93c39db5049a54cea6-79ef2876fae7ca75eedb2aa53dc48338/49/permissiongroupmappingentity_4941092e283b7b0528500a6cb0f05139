73a1550e3778dfdd9863b4814f4cde86
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGroupMapping = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const permission_entity_1 = require("./permission.entity");
const permission_group_entity_1 = require("./permission-group.entity");
const usuario_entity_1 = require("./usuario.entity");
/**
 * Entidade que representa o relacionamento muitos-para-muitos entre permissões e grupos.
 *
 * Esta entidade permite associar permissões a grupos, facilitando a organização
 * e atribuição de permissões relacionadas.
 */
let PermissionGroupMapping = class PermissionGroupMapping {
    /**
     * Identificador único do mapeamento
     */
    id;
    /**
     * Referência à permissão
     */
    permissao_id;
    /**
     * Relação com a permissão
     */
    permissao;
    /**
     * Referência ao grupo
     */
    grupo_id;
    /**
     * Relação com o grupo
     */
    grupo;
    /**
     * Data de criação
     */
    created_at;
    /**
     * Usuário que criou o mapeamento
     */
    criado_por;
    /**
     * Relação com o usuário que criou o mapeamento
     */
    usuario_criador;
    // Getters e setters para compatibilidade com código existente
    get permissionId() {
        return this.permissao_id;
    }
    set permissionId(value) {
        this.permissao_id = value;
    }
    get permission() {
        return this.permissao;
    }
    set permission(value) {
        this.permissao = value;
    }
    get groupId() {
        return this.grupo_id;
    }
    set groupId(value) {
        this.grupo_id = value;
    }
    get group() {
        return this.grupo;
    }
    set group(value) {
        this.grupo = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get createdBy() {
        return this.criado_por;
    }
    set createdBy(value) {
        this.criado_por = value;
    }
    /**
     * Verifica se o mapeamento foi criado por um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se foi criado pelo usuário
     */
    foiCriadoPor(usuarioId) {
        return this.criado_por === usuarioId;
    }
    /**
     * Obtém uma chave única para o mapeamento
     * @returns chave única baseada em permissão e grupo
     */
    getUniqueKey() {
        return `${this.permissao_id}:${this.grupo_id}`;
    }
    /**
     * Verifica se o mapeamento é válido
     * @returns true se tem permissão e grupo válidos
     */
    isValido() {
        return !!(this.permissao_id && this.grupo_id);
    }
    /**
     * Define o criador do mapeamento
     * @param usuarioId ID do usuário criador
     */
    definirCriador(usuarioId) {
        this.criado_por = usuarioId;
    }
    /**
     * Verifica se o mapeamento pertence a um grupo específico
     * @param grupoId ID do grupo
     * @returns true se pertence ao grupo
     */
    pertenceAoGrupo(grupoId) {
        return this.grupo_id === grupoId;
    }
    /**
     * Verifica se o mapeamento contém uma permissão específica
     * @param permissaoId ID da permissão
     * @returns true se contém a permissão
     */
    contemPermissao(permissaoId) {
        return this.permissao_id === permissaoId;
    }
    /**
     * Verifica se o mapeamento foi criado recentemente (últimas 24 horas)
     * @returns true se foi criado recentemente
     */
    isCriadoRecentemente() {
        if (!this.created_at)
            return false;
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do mapeamento em dias
     * @returns idade em dias
     */
    getIdadeEmDias() {
        if (!this.created_at)
            return 0;
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
    }
    /**
     * Verifica se o mapeamento tem criador definido
     * @returns true se tem criador
     */
    temCriador() {
        return !!this.criado_por;
    }
    /**
     * Obtém informações resumidas do mapeamento
     * @returns objeto com informações resumidas
     */
    getSummary() {
        return {
            id: this.id,
            permissao_id: this.permissao_id,
            grupo_id: this.grupo_id,
            criado_por: this.criado_por,
            created_at: this.created_at,
            idadeEmDias: this.getIdadeEmDias(),
            permissaoNome: this.permissao?.nome,
            grupoNome: this.grupo?.nome,
        };
    }
    /**
     * Verifica se o mapeamento é compatível com outro mapeamento
     * @param otherMapping Outro mapeamento
     * @returns true se são compatíveis (mesmo grupo)
     */
    isCompatibleWith(otherMapping) {
        return this.grupo_id === otherMapping.grupo_id;
    }
    /**
     * Gera uma chave única estendida para o mapeamento
     * @returns chave única estendida
     */
    getExtendedUniqueKey() {
        return `permission_group_mapping_${this.permissao_id}_${this.grupo_id}_${this.id}`;
    }
    /**
     * Verifica se o mapeamento está em estado consistente
     * @returns true se está consistente
     */
    isConsistente() {
        return (!!this.id && !!this.permissao_id && !!this.grupo_id && !!this.created_at);
    }
    /**
     * Obtém uma descrição legível do mapeamento
     * @returns descrição formatada
     */
    getDescricao() {
        const permissaoNome = this.permissao?.nome || 'Permissão não carregada';
        const grupoNome = this.grupo?.nome || 'Grupo não carregado';
        return `Grupo "${grupoNome}" -> Permissão: ${permissaoNome}`;
    }
    /**
     * Verifica se o mapeamento pode ser removido
     * @returns true se pode ser removido
     */
    podeSerRemovido() {
        // Por padrão, todos os mapeamentos podem ser removidos
        // Esta lógica pode ser expandida conforme regras de negócio
        return true;
    }
    /**
     * Clona o mapeamento (sem ID e data)
     * @returns mapeamento clonado
     */
    clone() {
        return {
            permissao_id: this.permissao_id,
            grupo_id: this.grupo_id,
            criado_por: this.criado_por,
        };
    }
    /**
     * Verifica se o mapeamento é para uma permissão de administrador
     * @returns true se é permissão de admin
     */
    isAdminPermission() {
        return this.permissao?.isAdminPermission() || false;
    }
    /**
     * Verifica se o mapeamento é para uma permissão de sistema
     * @returns true se é permissão de sistema
     */
    isSystemPermission() {
        return this.permissao?.isSystemPermission() || false;
    }
    /**
     * Obtém o nível de criticidade baseado na permissão
     * @returns nível de criticidade
     */
    getCriticalityLevel() {
        return this.permissao?.getCriticalityLevel() || 'LOW';
    }
    /**
     * Verifica se o grupo está ativo
     * @returns true se o grupo está ativo
     */
    isGrupoAtivo() {
        return this.grupo?.isAtivo() || false;
    }
    /**
     * Verifica se a permissão está ativa
     * @returns true se a permissão está ativa
     */
    isPermissaoAtiva() {
        return this.permissao?.isAtiva() || false;
    }
    /**
     * Verifica se tanto o grupo quanto a permissão estão ativos
     * @returns true se ambos estão ativos
     */
    isAtivo() {
        return this.isGrupoAtivo() && this.isPermissaoAtiva();
    }
    /**
     * Formata a data de criação para exibição
     * @returns data formatada
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
        });
    }
    /**
     * Remove informações sensíveis para logs
     * @returns objeto sanitizado
     */
    toSafeLog() {
        return {
            id: this.id,
            permissao_id: this.permissao_id,
            grupo_id: this.grupo_id,
            criado_por: this.criado_por,
            created_at: this.created_at,
            isAtivo: this.isAtivo(),
            criticalityLevel: this.getCriticalityLevel(),
        };
    }
};
exports.PermissionGroupMapping = PermissionGroupMapping;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], PermissionGroupMapping.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', name: 'permissao_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da permissão é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da permissão inválido' }),
    __metadata("design:type", String)
], PermissionGroupMapping.prototype, "permissao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => permission_entity_1.Permission, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'permissao_id' }),
    __metadata("design:type", typeof (_a = typeof permission_entity_1.Permission !== "undefined" && permission_entity_1.Permission) === "function" ? _a : Object)
], PermissionGroupMapping.prototype, "permissao", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', name: 'grupo_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do grupo é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do grupo inválido' }),
    __metadata("design:type", String)
], PermissionGroupMapping.prototype, "grupo_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => permission_group_entity_1.PermissionGroup, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'grupo_id' }),
    __metadata("design:type", typeof (_b = typeof permission_group_entity_1.PermissionGroup !== "undefined" && permission_group_entity_1.PermissionGroup) === "function" ? _b : Object)
], PermissionGroupMapping.prototype, "grupo", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], PermissionGroupMapping.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'criado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do criador inválido' }),
    __metadata("design:type", Object)
], PermissionGroupMapping.prototype, "criado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'criado_por' }),
    __metadata("design:type", Object)
], PermissionGroupMapping.prototype, "usuario_criador", void 0);
exports.PermissionGroupMapping = PermissionGroupMapping = __decorate([
    (0, typeorm_1.Entity)('mapeamento_grupo_permissao'),
    (0, typeorm_1.Index)(['permissao_id', 'grupo_id'], { unique: true }),
    (0, typeorm_1.Index)(['permissao_id']),
    (0, typeorm_1.Index)(['grupo_id']),
    (0, typeorm_1.Index)(['criado_por']),
    (0, typeorm_1.Index)(['created_at'])
], PermissionGroupMapping);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,