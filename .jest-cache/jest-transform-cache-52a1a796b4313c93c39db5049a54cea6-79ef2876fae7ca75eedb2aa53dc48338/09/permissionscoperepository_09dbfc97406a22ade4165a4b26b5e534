b14dd7716baa5a303505b79b28f4a4db
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionScopeRepository = void 0;
const typeorm_1 = require("typeorm");
const common_1 = require("@nestjs/common");
const permission_scope_entity_1 = require("../../entities/permission-scope.entity");
/**
 * Repositório para a entidade PermissionScope.
 *
 * Fornece métodos para manipulação de escopos padrão para permissões no banco de dados,
 * incluindo busca por permissão, tipo de escopo e operações de CRUD.
 */
let PermissionScopeRepository = class PermissionScopeRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(permission_scope_entity_1.PermissionScope, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca escopo por ID de permissão.
     *
     * @param permissionId ID da permissão
     * @returns O escopo encontrado ou null
     */
    async findByPermissionId(permissionId) {
        return this.findOne({ where: { permissao_id: permissionId } });
    }
    /**
     * Busca escopos por tipo de escopo padrão.
     *
     * @param defaultScopeType Tipo de escopo padrão
     * @returns Lista de escopos encontrados
     */
    async findByDefaultScopeType(defaultScopeType) {
        return this.find({ where: { tipo_escopo_padrao: defaultScopeType } });
    }
    /**
     * Busca escopos por tipo de escopo padrão com permissões relacionadas.
     *
     * @param defaultScopeType Tipo de escopo padrão
     * @returns Lista de escopos encontrados com permissões relacionadas
     */
    async findByDefaultScopeTypeWithPermissions(defaultScopeType) {
        return this.createQueryBuilder('escopo_permissao')
            .leftJoinAndSelect('escopo_permissao.permissao', 'permissao')
            .where('escopo_permissao.tipo_escopo_padrao = :defaultScopeType', { defaultScopeType })
            .getMany();
    }
    /**
     * Cria um novo escopo padrão para uma permissão.
     *
     * @param data Dados do escopo a ser criado
     * @returns O escopo criado
     */
    async createPermissionScope(data) {
        const permissionScope = this.create(data);
        return this.save(permissionScope);
    }
    /**
     * Atualiza um escopo padrão existente.
     *
     * @param id ID do escopo a ser atualizado
     * @param data Dados atualizados do escopo
     * @returns O escopo atualizado ou null se não encontrado
     */
    async updatePermissionScope(id, data) {
        await this.update(id, data);
        return this.findOneBy({ id });
    }
    /**
     * Remove um escopo padrão.
     *
     * @param id ID do escopo a ser removido
     * @returns true se o escopo foi removido, false caso contrário
     */
    async removePermissionScope(id) {
        const result = await this.delete(id);
        return result.affected !== null && result.affected !== undefined && result.affected > 0;
    }
    /**
     * Remove todos os escopos padrão de uma permissão.
     *
     * @param permissionId ID da permissão
     * @returns true se os escopos foram removidos, false caso contrário
     */
    async removePermissionScopesByPermissionId(permissionId) {
        const result = await this.delete({ permissao_id: permissionId });
        return result.affected !== null && result.affected !== undefined && result.affected > 0;
    }
};
exports.PermissionScopeRepository = PermissionScopeRepository;
exports.PermissionScopeRepository = PermissionScopeRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], PermissionScopeRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXHJlcG9zaXRvcmllc1xccGVybWlzc2lvbi1zY29wZS5yZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBaUQ7QUFDakQsMkNBQTRDO0FBQzVDLG9GQUF5RTtBQUd6RTs7Ozs7R0FLRztBQUVJLElBQU0seUJBQXlCLEdBQS9CLE1BQU0seUJBQTBCLFNBQVEsb0JBQTJCO0lBQ3BEO0lBQXBCLFlBQW9CLFVBQXNCO1FBQ3hDLEtBQUssQ0FBQyx5Q0FBZSxFQUFFLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFEdkMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUUxQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsa0JBQWtCLENBQUMsWUFBb0I7UUFDM0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsc0JBQXNCLENBQUMsZ0JBQTRCO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxnQkFBNEI7UUFDdEUsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7YUFDL0MsaUJBQWlCLENBQUMsNEJBQTRCLEVBQUUsV0FBVyxDQUFDO2FBQzVELEtBQUssQ0FBQyx5REFBeUQsRUFBRSxFQUFFLGdCQUFnQixFQUFFLENBQUM7YUFDdEYsT0FBTyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBOEI7UUFDeEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxFQUFVLEVBQUUsSUFBOEI7UUFDcEUsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxFQUFVO1FBQ3BDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxZQUFvQjtRQUM3RCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUNqRSxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQzFGLENBQUM7Q0FDRixDQUFBO0FBbEZZLDhEQUF5QjtvQ0FBekIseUJBQXlCO0lBRHJDLElBQUEsbUJBQVUsR0FBRTt5REFFcUIsb0JBQVUsb0JBQVYsb0JBQVU7R0FEL0IseUJBQXlCLENBa0ZyQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcYXV0aFxccmVwb3NpdG9yaWVzXFxwZXJtaXNzaW9uLXNjb3BlLnJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YVNvdXJjZSwgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IFBlcm1pc3Npb25TY29wZSB9IGZyb20gJy4uLy4uL2VudGl0aWVzL3Blcm1pc3Npb24tc2NvcGUuZW50aXR5JztcbmltcG9ydCB7IFRpcG9Fc2NvcG8gfSBmcm9tICcuLi8uLi9lbnRpdGllcy91c2VyLXBlcm1pc3Npb24uZW50aXR5JztcblxuLyoqXG4gKiBSZXBvc2l0w7NyaW8gcGFyYSBhIGVudGlkYWRlIFBlcm1pc3Npb25TY29wZS5cbiAqIFxuICogRm9ybmVjZSBtw6l0b2RvcyBwYXJhIG1hbmlwdWxhw6fDo28gZGUgZXNjb3BvcyBwYWRyw6NvIHBhcmEgcGVybWlzc8O1ZXMgbm8gYmFuY28gZGUgZGFkb3MsXG4gKiBpbmNsdWluZG8gYnVzY2EgcG9yIHBlcm1pc3PDo28sIHRpcG8gZGUgZXNjb3BvIGUgb3BlcmHDp8O1ZXMgZGUgQ1JVRC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25TY29wZVJlcG9zaXRvcnkgZXh0ZW5kcyBSZXBvc2l0b3J5PFBlcm1pc3Npb25TY29wZT4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTb3VyY2U6IERhdGFTb3VyY2UpIHtcbiAgICBzdXBlcihQZXJtaXNzaW9uU2NvcGUsIGRhdGFTb3VyY2UuY3JlYXRlRW50aXR5TWFuYWdlcigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSBlc2NvcG8gcG9yIElEIGRlIHBlcm1pc3PDo28uXG4gICAqIFxuICAgKiBAcGFyYW0gcGVybWlzc2lvbklkIElEIGRhIHBlcm1pc3PDo29cbiAgICogQHJldHVybnMgTyBlc2NvcG8gZW5jb250cmFkbyBvdSBudWxsXG4gICAqL1xuICBhc3luYyBmaW5kQnlQZXJtaXNzaW9uSWQocGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPFBlcm1pc3Npb25TY29wZSB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5maW5kT25lKHsgd2hlcmU6IHsgcGVybWlzc2FvX2lkOiBwZXJtaXNzaW9uSWQgfSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSBlc2NvcG9zIHBvciB0aXBvIGRlIGVzY29wbyBwYWRyw6NvLlxuICAgKiBcbiAgICogQHBhcmFtIGRlZmF1bHRTY29wZVR5cGUgVGlwbyBkZSBlc2NvcG8gcGFkcsOjb1xuICAgKiBAcmV0dXJucyBMaXN0YSBkZSBlc2NvcG9zIGVuY29udHJhZG9zXG4gICAqL1xuICBhc3luYyBmaW5kQnlEZWZhdWx0U2NvcGVUeXBlKGRlZmF1bHRTY29wZVR5cGU6IFRpcG9Fc2NvcG8pOiBQcm9taXNlPFBlcm1pc3Npb25TY29wZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZmluZCh7IHdoZXJlOiB7IHRpcG9fZXNjb3BvX3BhZHJhbzogZGVmYXVsdFNjb3BlVHlwZSB9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIGVzY29wb3MgcG9yIHRpcG8gZGUgZXNjb3BvIHBhZHLDo28gY29tIHBlcm1pc3PDtWVzIHJlbGFjaW9uYWRhcy5cbiAgICogXG4gICAqIEBwYXJhbSBkZWZhdWx0U2NvcGVUeXBlIFRpcG8gZGUgZXNjb3BvIHBhZHLDo29cbiAgICogQHJldHVybnMgTGlzdGEgZGUgZXNjb3BvcyBlbmNvbnRyYWRvcyBjb20gcGVybWlzc8O1ZXMgcmVsYWNpb25hZGFzXG4gICAqL1xuICBhc3luYyBmaW5kQnlEZWZhdWx0U2NvcGVUeXBlV2l0aFBlcm1pc3Npb25zKGRlZmF1bHRTY29wZVR5cGU6IFRpcG9Fc2NvcG8pOiBQcm9taXNlPFBlcm1pc3Npb25TY29wZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUXVlcnlCdWlsZGVyKCdlc2NvcG9fcGVybWlzc2FvJylcbiAgICAgIC5sZWZ0Sm9pbkFuZFNlbGVjdCgnZXNjb3BvX3Blcm1pc3Nhby5wZXJtaXNzYW8nLCAncGVybWlzc2FvJylcbiAgICAgIC53aGVyZSgnZXNjb3BvX3Blcm1pc3Nhby50aXBvX2VzY29wb19wYWRyYW8gPSA6ZGVmYXVsdFNjb3BlVHlwZScsIHsgZGVmYXVsdFNjb3BlVHlwZSB9KVxuICAgICAgLmdldE1hbnkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmlhIHVtIG5vdm8gZXNjb3BvIHBhZHLDo28gcGFyYSB1bWEgcGVybWlzc8Ojby5cbiAgICogXG4gICAqIEBwYXJhbSBkYXRhIERhZG9zIGRvIGVzY29wbyBhIHNlciBjcmlhZG9cbiAgICogQHJldHVybnMgTyBlc2NvcG8gY3JpYWRvXG4gICAqL1xuICBhc3luYyBjcmVhdGVQZXJtaXNzaW9uU2NvcGUoZGF0YTogUGFydGlhbDxQZXJtaXNzaW9uU2NvcGU+KTogUHJvbWlzZTxQZXJtaXNzaW9uU2NvcGU+IHtcbiAgICBjb25zdCBwZXJtaXNzaW9uU2NvcGUgPSB0aGlzLmNyZWF0ZShkYXRhKTtcbiAgICByZXR1cm4gdGhpcy5zYXZlKHBlcm1pc3Npb25TY29wZSk7XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgdW0gZXNjb3BvIHBhZHLDo28gZXhpc3RlbnRlLlxuICAgKiBcbiAgICogQHBhcmFtIGlkIElEIGRvIGVzY29wbyBhIHNlciBhdHVhbGl6YWRvXG4gICAqIEBwYXJhbSBkYXRhIERhZG9zIGF0dWFsaXphZG9zIGRvIGVzY29wb1xuICAgKiBAcmV0dXJucyBPIGVzY29wbyBhdHVhbGl6YWRvIG91IG51bGwgc2UgbsOjbyBlbmNvbnRyYWRvXG4gICAqL1xuICBhc3luYyB1cGRhdGVQZXJtaXNzaW9uU2NvcGUoaWQ6IHN0cmluZywgZGF0YTogUGFydGlhbDxQZXJtaXNzaW9uU2NvcGU+KTogUHJvbWlzZTxQZXJtaXNzaW9uU2NvcGUgfCBudWxsPiB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoaWQsIGRhdGEpO1xuICAgIHJldHVybiB0aGlzLmZpbmRPbmVCeSh7IGlkIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB1bSBlc2NvcG8gcGFkcsOjby5cbiAgICogXG4gICAqIEBwYXJhbSBpZCBJRCBkbyBlc2NvcG8gYSBzZXIgcmVtb3ZpZG9cbiAgICogQHJldHVybnMgdHJ1ZSBzZSBvIGVzY29wbyBmb2kgcmVtb3ZpZG8sIGZhbHNlIGNhc28gY29udHLDoXJpb1xuICAgKi9cbiAgYXN5bmMgcmVtb3ZlUGVybWlzc2lvblNjb3BlKGlkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmRlbGV0ZShpZCk7XG4gICAgcmV0dXJuIHJlc3VsdC5hZmZlY3RlZCAhPT0gbnVsbCAmJiByZXN1bHQuYWZmZWN0ZWQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQuYWZmZWN0ZWQgPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0b2RvcyBvcyBlc2NvcG9zIHBhZHLDo28gZGUgdW1hIHBlcm1pc3PDo28uXG4gICAqIFxuICAgKiBAcGFyYW0gcGVybWlzc2lvbklkIElEIGRhIHBlcm1pc3PDo29cbiAgICogQHJldHVybnMgdHJ1ZSBzZSBvcyBlc2NvcG9zIGZvcmFtIHJlbW92aWRvcywgZmFsc2UgY2FzbyBjb250csOhcmlvXG4gICAqL1xuICBhc3luYyByZW1vdmVQZXJtaXNzaW9uU2NvcGVzQnlQZXJtaXNzaW9uSWQocGVybWlzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmRlbGV0ZSh7IHBlcm1pc3Nhb19pZDogcGVybWlzc2lvbklkIH0pO1xuICAgIHJldHVybiByZXN1bHQuYWZmZWN0ZWQgIT09IG51bGwgJiYgcmVzdWx0LmFmZmVjdGVkICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0LmFmZmVjdGVkID4gMDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9