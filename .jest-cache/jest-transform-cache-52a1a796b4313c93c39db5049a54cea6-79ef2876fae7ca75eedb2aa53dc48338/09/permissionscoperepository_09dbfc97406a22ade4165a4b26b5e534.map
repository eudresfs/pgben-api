{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-scope.repository.ts","mappings":";;;;;;;;;;;;;AAAA,qCAAiD;AACjD,2CAA4C;AAC5C,oFAAyE;AAGzE;;;;;GAKG;AAEI,IAAM,yBAAyB,GAA/B,MAAM,yBAA0B,SAAQ,oBAA2B;IACpD;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,yCAAe,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QADvC,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB,CAAC,YAAoB;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,sBAAsB,CAAC,gBAA4B;QACvD,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACxE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qCAAqC,CAAC,gBAA4B;QACtE,OAAO,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;aAC/C,iBAAiB,CAAC,4BAA4B,EAAE,WAAW,CAAC;aAC5D,KAAK,CAAC,yDAAyD,EAAE,EAAE,gBAAgB,EAAE,CAAC;aACtF,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qBAAqB,CAAC,IAA8B;QACxD,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,qBAAqB,CAAC,EAAU,EAAE,IAA8B;QACpE,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qBAAqB,CAAC,EAAU;QACpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrC,OAAO,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1F,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,oCAAoC,CAAC,YAAoB;QAC7D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1F,CAAC;CACF,CAAA;AAlFY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,yBAAyB,CAkFrC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-scope.repository.ts"],"sourcesContent":["import { DataSource, Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { PermissionScope } from '../../entities/permission-scope.entity';\nimport { TipoEscopo } from '../../entities/user-permission.entity';\n\n/**\n * Repositório para a entidade PermissionScope.\n * \n * Fornece métodos para manipulação de escopos padrão para permissões no banco de dados,\n * incluindo busca por permissão, tipo de escopo e operações de CRUD.\n */\n@Injectable()\nexport class PermissionScopeRepository extends Repository<PermissionScope> {\n  constructor(private dataSource: DataSource) {\n    super(PermissionScope, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca escopo por ID de permissão.\n   * \n   * @param permissionId ID da permissão\n   * @returns O escopo encontrado ou null\n   */\n  async findByPermissionId(permissionId: string): Promise<PermissionScope | null> {\n    return this.findOne({ where: { permissao_id: permissionId } });\n  }\n\n  /**\n   * Busca escopos por tipo de escopo padrão.\n   * \n   * @param defaultScopeType Tipo de escopo padrão\n   * @returns Lista de escopos encontrados\n   */\n  async findByDefaultScopeType(defaultScopeType: TipoEscopo): Promise<PermissionScope[]> {\n    return this.find({ where: { tipo_escopo_padrao: defaultScopeType } });\n  }\n\n  /**\n   * Busca escopos por tipo de escopo padrão com permissões relacionadas.\n   * \n   * @param defaultScopeType Tipo de escopo padrão\n   * @returns Lista de escopos encontrados com permissões relacionadas\n   */\n  async findByDefaultScopeTypeWithPermissions(defaultScopeType: TipoEscopo): Promise<PermissionScope[]> {\n    return this.createQueryBuilder('escopo_permissao')\n      .leftJoinAndSelect('escopo_permissao.permissao', 'permissao')\n      .where('escopo_permissao.tipo_escopo_padrao = :defaultScopeType', { defaultScopeType })\n      .getMany();\n  }\n\n  /**\n   * Cria um novo escopo padrão para uma permissão.\n   * \n   * @param data Dados do escopo a ser criado\n   * @returns O escopo criado\n   */\n  async createPermissionScope(data: Partial<PermissionScope>): Promise<PermissionScope> {\n    const permissionScope = this.create(data);\n    return this.save(permissionScope);\n  }\n\n  /**\n   * Atualiza um escopo padrão existente.\n   * \n   * @param id ID do escopo a ser atualizado\n   * @param data Dados atualizados do escopo\n   * @returns O escopo atualizado ou null se não encontrado\n   */\n  async updatePermissionScope(id: string, data: Partial<PermissionScope>): Promise<PermissionScope | null> {\n    await this.update(id, data);\n    return this.findOneBy({ id });\n  }\n\n  /**\n   * Remove um escopo padrão.\n   * \n   * @param id ID do escopo a ser removido\n   * @returns true se o escopo foi removido, false caso contrário\n   */\n  async removePermissionScope(id: string): Promise<boolean> {\n    const result = await this.delete(id);\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n\n  /**\n   * Remove todos os escopos padrão de uma permissão.\n   * \n   * @param permissionId ID da permissão\n   * @returns true se os escopos foram removidos, false caso contrário\n   */\n  async removePermissionScopesByPermissionId(permissionId: string): Promise<boolean> {\n    const result = await this.delete({ permissao_id: permissionId });\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n}\n"],"version":3}