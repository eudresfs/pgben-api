0134139f837c4f3cae99be8e40d495da
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuditoriaQueueService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaQueueService = void 0;
const common_1 = require("@nestjs/common");
const bull_1 = require("@nestjs/bull");
const bull_2 = require("bull");
const common_2 = require("@nestjs/common");
const create_log_auditoria_dto_1 = require("../dto/create-log-auditoria.dto");
const tipo_operacao_enum_1 = require("../../../enums/tipo-operacao.enum");
/**
 * Serviço de Fila de Auditoria - Versão MVP
 *
 * Responsável por processar logs de auditoria.
 * Implementação simplificada para o MVP com foco nas operações essenciais.
 */
let AuditoriaQueueService = AuditoriaQueueService_1 = class AuditoriaQueueService {
    auditoriaQueue;
    logger = new common_2.Logger(AuditoriaQueueService_1.name);
    constructor(auditoriaQueue) {
        this.auditoriaQueue = auditoriaQueue;
    }
    /**
     * Processa um log de auditoria (implementação simplificada para o MVP)
     *
     * @param logAuditoriaDto Dados do log de auditoria a ser registrado
     * @returns Promise com o resultado da operação
     */
    async processarLog(logAuditoriaDto) {
        try {
            // No MVP, simplificamos o processamento enfileirando diretamente
            // com configuração básica
            await this.auditoriaQueue.add('registrar-log', logAuditoriaDto, {
                attempts: 2,
                removeOnComplete: true,
            });
            this.logger.debug(`Log de auditoria processado: ${logAuditoriaDto.entidade_afetada} - ${logAuditoriaDto.tipo_operacao}`);
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
            this.logger.error(`Erro ao processar log de auditoria: ${errorMessage}`);
        }
    }
    /**
     * Enfileira um log de auditoria para processamento assíncrono
     *
     * @param logAuditoriaDto Dados do log de auditoria a ser registrado
     * @returns Promise com o resultado da operação
     */
    async enfileirarLogAuditoria(logAuditoriaDto) {
        return this.processarLog(logAuditoriaDto);
    }
    /**
     * Enfileira um registro de acesso a dados sensíveis para processamento assíncrono
     *
     * @param usuarioId ID do usuário que acessou os dados
     * @param entidade Nome da entidade acessada
     * @param entidadeId ID da entidade acessada
     * @param camposSensiveis Lista de campos sensíveis acessados
     * @param ip Endereço IP de origem do acesso
     * @param userAgent User agent do navegador
     * @param url URL acessada
     * @param metodo Método HTTP utilizado
     * @returns Promise com o resultado da operação
     */
    async enfileirarAcessoDadosSensiveis(usuarioId, entidade, entidadeId, camposSensiveis, ip, userAgent, url, metodo) {
        try {
            // Cria um DTO de log específico para acesso a dados sensíveis
            const logAuditoriaDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            logAuditoriaDto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.ACCESS;
            logAuditoriaDto.entidade_afetada = entidade;
            logAuditoriaDto.entidade_id = entidadeId;
            logAuditoriaDto.usuario_id = usuarioId;
            logAuditoriaDto.ip_origem = ip;
            logAuditoriaDto.user_agent = userAgent;
            logAuditoriaDto.endpoint = url;
            logAuditoriaDto.metodo_http = metodo;
            logAuditoriaDto.dados_sensiveis_acessados = camposSensiveis;
            logAuditoriaDto.descricao = `Acesso a dados sensíveis: ${camposSensiveis.join(', ')}`;
            return this.processarLog(logAuditoriaDto);
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
            this.logger.error(`Erro ao enfileirar acesso a dados sensíveis: ${errorMessage}`);
        }
    }
};
exports.AuditoriaQueueService = AuditoriaQueueService;
exports.AuditoriaQueueService = AuditoriaQueueService = AuditoriaQueueService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, bull_1.InjectQueue)('auditoria')),
    __metadata("design:paramtypes", [typeof (_a = typeof bull_2.Queue !== "undefined" && bull_2.Queue) === "function" ? _a : Object])
], AuditoriaQueueService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,