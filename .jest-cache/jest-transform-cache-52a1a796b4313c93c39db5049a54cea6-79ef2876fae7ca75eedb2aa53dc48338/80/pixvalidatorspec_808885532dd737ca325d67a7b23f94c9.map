{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\validators\\pix-validator.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,kEAA8D;AAE9D;;;;;;;GAOG;AACH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,SAAuB,CAAC;IAE5B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE,CAAC,4BAAY,CAAC;SAC1B,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,SAAS,GAAG,MAAM,CAAC,GAAG,CAAe,4BAAY,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CACpE,KAAK,CACN,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,aAAa;YACb,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnE,qBAAqB;YACrB,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEtE,mCAAmC;YACnC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEnE,0CAA0C;YAC1C,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,gBAAgB;YAChB,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CACpE,IAAI,CACL,CAAC;YAEF,wBAAwB;YACxB,MAAM,CACJ,SAAS,CAAC,eAAe,CAAC,4BAA4B,EAAE,OAAO,CAAC,CACjE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,0BAA0B;YAC1B,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CACnE,KAAK,CACN,CAAC;YAEF,gCAAgC;YAChC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEnE,wDAAwD;YACxD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CACrE,KAAK,CACN,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,qCAAqC;YACrC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAClE,IAAI,CACL,CAAC;YAEF,0BAA0B;YAC1B,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE1E,mCAAmC;YACnC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CACvE,IAAI,CACL,CAAC;YAEF,qCAAqC;YACrC,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEpE,gDAAgD;YAChD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CACjE,KAAK,CACN,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,cAAc;YACd,MAAM,CACJ,SAAS,CAAC,eAAe,CACvB,sCAAsC,EACtC,WAAW,CACZ,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,+CAA+C;YAC/C,MAAM,CACJ,SAAS,CAAC,eAAe,CACvB,kCAAkC,EAClC,WAAW,CACZ,CACF,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEd,+CAA+C;YAC/C,MAAM,CACJ,SAAS,CAAC,eAAe,CAAC,yBAAyB,EAAE,WAAW,CAAC,CAClE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YAClE,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;YACjD,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CACzC,qBAAqB,EACrB,OAAO,CACR,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,KAAK,GAAG,sCAAsC,CAAC;YACrD,MAAM,SAAS,GAAG,SAAS,CAAC,eAAe,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAChE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;YACxC,MAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACtD,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC1D,MAAM,CAAC,SAAS,CAAC,eAAe,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC/D,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,4BAA4B,CAAC,CAAC,CAAC,IAAI,CACpE,OAAO,CACR,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACvE,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,CACJ,SAAS,CAAC,iBAAiB,CAAC,sCAAsC,CAAC,CACpE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;YAC5E,MAAM,CAAC,SAAS,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC,CAAC,IAAI,CAC9D,cAAc,CACf,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\validators\\pix-validator.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { PixValidator } from '../../validators/pix-validator';\n\n/**\n * Testes unitários para o validador de chaves PIX\n *\n * Verifica o funcionamento correto das validações para diferentes tipos de chaves PIX,\n * incluindo CPF, e-mail, telefone e chave aleatória.\n *\n * @author Equipe PGBen\n */\ndescribe('PixValidator', () => {\n  let validator: PixValidator;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [PixValidator],\n    }).compile();\n\n    validator = module.get<PixValidator>(PixValidator);\n  });\n\n  describe('validarChavePix', () => {\n    it('deve retornar false para chave vazia', () => {\n      expect(validator.validarChavePix('', 'cpf')).toBe(false);\n      expect(validator.validarChavePix(null, 'email')).toBe(false);\n      expect(validator.validarChavePix(undefined, 'telefone')).toBe(false);\n    });\n\n    it('deve retornar false para tipo inválido', () => {\n      expect(validator.validarChavePix('12345678900', 'tipo_invalido')).toBe(\n        false,\n      );\n    });\n\n    it('deve validar corretamente chave CPF', () => {\n      // CPF válido\n      expect(validator.validarChavePix('12345678909', 'cpf')).toBe(true);\n\n      // CPF com formatação\n      expect(validator.validarChavePix('123.456.789-09', 'cpf')).toBe(true);\n\n      // CPF inválido (tamanho incorreto)\n      expect(validator.validarChavePix('1234567890', 'cpf')).toBe(false);\n\n      // CPF inválido (caracteres não numéricos)\n      expect(validator.validarChavePix('1234567890a', 'cpf')).toBe(false);\n    });\n\n    it('deve validar corretamente chave e-mail', () => {\n      // E-mail válido\n      expect(validator.validarChavePix('usuario@dominio.com', 'email')).toBe(\n        true,\n      );\n\n      // E-mail com subdomínio\n      expect(\n        validator.validarChavePix('usuario@sub.dominio.com.br', 'email'),\n      ).toBe(true);\n\n      // E-mail inválido (sem @)\n      expect(validator.validarChavePix('usuariodominio.com', 'email')).toBe(\n        false,\n      );\n\n      // E-mail inválido (sem domínio)\n      expect(validator.validarChavePix('usuario@', 'email')).toBe(false);\n\n      // E-mail inválido (caracteres especiais não permitidos)\n      expect(validator.validarChavePix('usuario!@dominio.com', 'email')).toBe(\n        false,\n      );\n    });\n\n    it('deve validar corretamente chave telefone', () => {\n      // Telefone válido (formato completo)\n      expect(validator.validarChavePix('+5584999999999', 'telefone')).toBe(\n        true,\n      );\n\n      // Telefone válido (sem +)\n      expect(validator.validarChavePix('5584999999999', 'telefone')).toBe(true);\n\n      // Telefone válido (com formatação)\n      expect(validator.validarChavePix('+55 (84) 99999-9999', 'telefone')).toBe(\n        true,\n      );\n\n      // Telefone inválido (poucos dígitos)\n      expect(validator.validarChavePix('559999', 'telefone')).toBe(false);\n\n      // Telefone inválido (caracteres não permitidos)\n      expect(validator.validarChavePix('5584999999a99', 'telefone')).toBe(\n        false,\n      );\n    });\n\n    it('deve validar corretamente chave aleatória', () => {\n      // UUID válido\n      expect(\n        validator.validarChavePix(\n          '123e4567-e89b-12d3-a456-426614174000',\n          'aleatoria',\n        ),\n      ).toBe(true);\n\n      // Chave aleatória inválida (formato incorreto)\n      expect(\n        validator.validarChavePix(\n          '123e4567e89b12d3a456426614174000',\n          'aleatoria',\n        ),\n      ).toBe(false);\n\n      // Chave aleatória inválida (tamanho incorreto)\n      expect(\n        validator.validarChavePix('123e4567-e89b-12d3-a456', 'aleatoria'),\n      ).toBe(false);\n    });\n  });\n\n  describe('mascaraChavePix', () => {\n    it('deve mascarar corretamente chave CPF', () => {\n      const mascarado = validator.mascaraChavePix('12345678909', 'cpf');\n      expect(mascarado).toBe('***.456.789-**');\n    });\n\n    it('deve mascarar corretamente chave e-mail', () => {\n      const mascarado = validator.mascaraChavePix(\n        'usuario@dominio.com',\n        'email',\n      );\n      expect(mascarado).toMatch(/^u\\*+@d\\*+\\.com$/);\n    });\n\n    it('deve mascarar corretamente chave telefone', () => {\n      const mascarado = validator.mascaraChavePix('5584999999999', 'telefone');\n      expect(mascarado).toMatch(/^\\(\\*\\*\\) \\*\\*\\*\\*\\*\\-\\d{4}$/);\n    });\n\n    it('deve mascarar corretamente chave aleatória', () => {\n      const chave = '123e4567-e89b-12d3-a456-426614174000';\n      const mascarado = validator.mascaraChavePix(chave, 'aleatoria');\n      expect(mascarado.length).toBe(chave.length);\n      expect(mascarado).toContain('123e4567');\n      expect(mascarado).not.toBe(chave);\n    });\n\n    it('deve retornar string vazia para chave vazia', () => {\n      expect(validator.mascaraChavePix('', 'cpf')).toBe('');\n      expect(validator.mascaraChavePix(null, 'email')).toBe('');\n      expect(validator.mascaraChavePix(undefined, 'telefone')).toBe('');\n    });\n  });\n\n  describe('obterTipoChavePix', () => {\n    it('deve identificar corretamente o tipo de chave CPF', () => {\n      expect(validator.obterTipoChavePix('12345678909')).toBe('cpf');\n      expect(validator.obterTipoChavePix('123.456.789-09')).toBe('cpf');\n    });\n\n    it('deve identificar corretamente o tipo de chave e-mail', () => {\n      expect(validator.obterTipoChavePix('usuario@dominio.com')).toBe('email');\n      expect(validator.obterTipoChavePix('usuario@sub.dominio.com.br')).toBe(\n        'email',\n      );\n    });\n\n    it('deve identificar corretamente o tipo de chave telefone', () => {\n      expect(validator.obterTipoChavePix('+5584999999999')).toBe('telefone');\n      expect(validator.obterTipoChavePix('5584999999999')).toBe('telefone');\n    });\n\n    it('deve identificar corretamente o tipo de chave aleatória', () => {\n      expect(\n        validator.obterTipoChavePix('123e4567-e89b-12d3-a456-426614174000'),\n      ).toBe('aleatoria');\n    });\n\n    it('deve retornar \"desconhecido\" para chave de formato não reconhecido', () => {\n      expect(validator.obterTipoChavePix('formato_desconhecido')).toBe(\n        'desconhecido',\n      );\n    });\n  });\n});\n"],"version":3}