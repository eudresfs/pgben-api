55377628a2ddf586831537e275c4cdd5
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EmailService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const nodemailer = __importStar(require("nodemailer"));
const handlebars = __importStar(require("handlebars"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * Serviço de envio de emails
 * Suporta templates Handlebars e configuração SMTP
 * Inclui suporte nativo para MailHog, Mailtrap, Gmail e outros provedores
 */
let EmailService = EmailService_1 = class EmailService {
    configService;
    logger = new common_1.Logger(EmailService_1.name);
    transporter;
    templatesCache = new Map();
    templatesDir;
    isEnabled;
    isDevelopment;
    constructor(configService) {
        this.configService = configService;
        this.templatesDir = path.join(process.cwd(), 'src', 'templates', 'email');
        this.isEnabled = this.configService.get('EMAIL_ENABLED', false);
        this.isDevelopment =
            this.configService.get('NODE_ENV') === 'development';
        if (this.isEnabled) {
            // Inicialização síncrona para garantir que o transporter esteja disponível
            this.initializeTransporter();
        }
        else {
            this.logger.warn('Serviço de email desabilitado. Configure EMAIL_ENABLED=true para habilitar.');
        }
    }
    /**
     * Inicializa o transporter do Nodemailer
     * Configurado para usar STARTTLS na porta 587, SSL na porta 465, ou MailHog na porta 1025
     */
    initializeTransporter() {
        const host = this.configService.get('SMTP_HOST');
        const port = this.configService.get('SMTP_PORT', 587);
        const user = this.configService.get('SMTP_USER');
        const pass = this.configService.get('SMTP_PASS');
        // Configurações SSL/TLS baseadas na porta e provedor
        const secure = port === 465; // SSL para porta 465, STARTTLS para porta 587
        const requireTLS = port === 587 && !this.isMailHog(host, port); // Força STARTTLS apenas para porta 587 (exceto MailHog)
        if (!host) {
            this.logger.error('SMTP_HOST não configurado. Verifique as configurações.');
            return;
        }
        // MailHog não requer autenticação
        const isMailHog = this.isMailHog(host, port);
        if (!isMailHog && (!user || !pass)) {
            this.logger.error('Configurações SMTP incompletas. Verifique SMTP_USER e SMTP_PASS (não necessário para MailHog).');
            return;
        }
        // Configurações específicas do MailHog
        if (isMailHog) {
            this.transporter = nodemailer.createTransport({
                host: host, // Garantido que não é undefined pelo check acima
                port,
                secure: false, // MailHog não usa SSL/TLS
                requireTLS: false,
                ignoreTLS: true,
                // MailHog não requer autenticação
                auth: undefined,
                pool: false, // Desabilita pool para MailHog
                connectionTimeout: 10000, // Timeout menor para MailHog
                greetingTimeout: 5000,
                socketTimeout: 10000,
                debug: this.isDevelopment,
                logger: this.isDevelopment,
                // Configurações específicas para MailHog
                tls: {
                    rejectUnauthorized: false,
                },
            });
            this.logger.log(`MailHog detectado: ${host}:${port} - Autenticação desabilitada`);
            this.verifyConnection().catch((error) => {
                this.logger.error('Falha na verificação inicial da conexão MailHog:', error.message);
            });
            return;
        }
        // Configurações TLS mais flexíveis para outros provedores
        const tlsOptions = {
            rejectUnauthorized: this.configService.get('SMTP_REJECT_UNAUTHORIZED', false),
            minVersion: 'TLSv1',
            maxVersion: 'TLSv1.3',
            secureProtocol: undefined,
            ciphers: undefined,
        };
        this.transporter = nodemailer.createTransport({
            host: host, // Garantido que não é undefined pelo check acima
            port,
            secure,
            requireTLS,
            auth: {
                user: user,
                pass: pass,
            },
            tls: tlsOptions,
            pool: true,
            maxConnections: 5,
            maxMessages: 100,
            rateLimit: 10,
            connectionTimeout: 60000,
            greetingTimeout: 30000,
            socketTimeout: 60000,
            ignoreTLS: false,
            debug: this.isDevelopment,
            logger: this.isDevelopment,
        });
        // Configuração de fallback para ambientes de desenvolvimento problemáticos
        if (this.isDevelopment && host.includes('localhost') && !isMailHog) {
            this.logger.warn('Detectado ambiente local - aplicando configurações SSL relaxadas');
            this.transporter = nodemailer.createTransport({
                host: host,
                port,
                secure: false,
                requireTLS: false,
                auth: { user: user, pass: pass },
                tls: {
                    rejectUnauthorized: false,
                    ignoreTLS: true,
                },
                connectionTimeout: 30000,
                greetingTimeout: 15000,
                socketTimeout: 30000,
                debug: true,
                logger: true,
            });
        }
        // Verificar conexão de forma assíncrona sem bloquear a inicialização
        this.verifyConnection().catch((error) => {
            this.logger.error('Falha na verificação inicial da conexão SMTP:', error.message);
        });
    }
    /**
     * Verifica se é MailHog baseado no host e porta
     * Detecta MailHog por múltiplos critérios para garantir compatibilidade
     */
    isMailHog(host, port) {
        if (!host)
            return false;
        const lowerHost = host.toLowerCase();
        // Detecta MailHog por host ou porta padrão
        return (lowerHost.includes('mailhog') ||
            (lowerHost === 'localhost' && port === 1025) ||
            (lowerHost === '127.0.0.1' && port === 1025) ||
            lowerHost === 'mailhog' ||
            port === 1025 // Porta padrão do MailHog
        );
    }
    /**
     * Verifica a conexão SMTP com retry automático
     */
    async verifyConnection(retries = 3) {
        try {
            await this.transporter.verify();
            this.logger.log(`Servidor SMTP configurado com sucesso: ${this.configService.get('SMTP_HOST')}:${this.configService.get('SMTP_PORT')}`);
        }
        catch (error) {
            const errorInfo = {
                message: error.message,
                code: error.code,
                command: error.command,
                host: this.configService.get('SMTP_HOST'),
                port: this.configService.get('SMTP_PORT'),
                retries: retries - 1,
            };
            this.logger.error('Erro na configuração SMTP:', errorInfo);
            // Tentativa de fallback para configurações mais permissivas
            if (retries > 0 && error.code === 'ESOCKET') {
                this.logger.warn('Tentando configuração SMTP alternativa...');
                // Recriar transporter com configurações mais permissivas
                const host = this.configService.get('SMTP_HOST');
                const port = this.configService.get('SMTP_PORT', 587);
                const user = this.configService.get('SMTP_USER');
                const pass = this.configService.get('SMTP_PASS');
                this.transporter = nodemailer.createTransport({
                    host: host,
                    port,
                    secure: false, // Desabilita SSL/TLS inicial
                    requireTLS: false, // Desabilita exigência de TLS
                    auth: { user: user, pass: pass },
                    tls: {
                        rejectUnauthorized: false,
                        ignoreTLS: true, // Ignora completamente TLS se necessário
                    },
                    connectionTimeout: 30000,
                    socketTimeout: 30000,
                    debug: this.isDevelopment,
                });
                // Retry com configuração alternativa
                setTimeout(() => this.verifyConnection(retries - 1), 2000);
            }
        }
    }
    /**
     * Obtém email remetente autorizado baseado no provedor SMTP
     */
    getAuthorizedFromEmail() {
        const configuredFrom = this.configService.get('SMTP_FROM');
        const smtpHost = this.configService.get('SMTP_HOST') || '';
        const smtpPort = this.configService.get('SMTP_PORT', 587);
        const smtpUser = this.configService.get('SMTP_USER') || '';
        // Se um FROM específico foi configurado, usar ele (prioridade máxima)
        if (configuredFrom) {
            this.logger.debug(`Usando email FROM configurado: ${configuredFrom}`);
            return configuredFrom;
        }
        // Para MailHog - aceita qualquer domínio
        if (this.isMailHog(smtpHost, smtpPort)) {
            this.logger.debug('MailHog detectado - usando email de desenvolvimento');
            return 'noreply@localhost.test';
        }
        // Para Mailtrap Live (produção) - precisa usar domínio verificado
        if (smtpHost.toLowerCase().includes('live.smtp.mailtrap.io')) {
            this.logger.error('Mailtrap Live detectado: Configure SMTP_FROM com seu domínio verificado no Mailtrap. ' +
                'Exemplo: SMTP_FROM=noreply@seudominio.com');
            return smtpUser || 'noreply@example.com';
        }
        // Para Mailtrap Testing (desenvolvimento)
        if (smtpHost.toLowerCase().includes('sandbox.smtp.mailtrap.io') ||
            smtpHost.toLowerCase().includes('send.smtp.mailtrap.io')) {
            return 'noreply@localhost.test';
        }
        // Para Gmail
        if (smtpHost.toLowerCase().includes('gmail')) {
            return smtpUser;
        }
        // Para outros provedores, tentar usar usuário SMTP
        if (smtpUser) {
            return smtpUser;
        }
        // Fallback para domínio genérico
        this.logger.warn('Usando domínio genérico como remetente - configure SMTP_FROM adequadamente');
        return 'noreply@localhost.test';
    }
    /**
     * Envia um email com tratamento robusto de erros
     */
    async sendEmail(options) {
        if (!this.isEnabled) {
            this.logger.warn('Tentativa de envio de email com serviço desabilitado', {
                to: options.to,
                subject: options.subject,
            });
            return false;
        }
        if (!this.transporter) {
            this.logger.error('Transporter não inicializado');
            return false;
        }
        try {
            let html = options.html;
            let text = options.text;
            let subject = options.subject;
            // Processar template se especificado
            if (options.template) {
                const template = await this.loadTemplate(options.template);
                if (template) {
                    html = this.compileTemplate(template.html, options.context || {});
                    text = template.text
                        ? this.compileTemplate(template.text, options.context || {})
                        : undefined;
                    subject = this.compileTemplate(template.subject, options.context || {});
                }
                else {
                    this.logger.error(`Template '${options.template}' não pôde ser carregado`);
                    return false;
                }
            }
            // Garantir que o assunto esteja definido
            if (!subject) {
                subject = 'Notificação - SEMTAS';
                this.logger.warn('Email enviado sem assunto definido, usando padrão', {
                    to: options.to,
                    template: options.template,
                });
            }
            // Configurar remetente com domínio autorizado
            const fromEmail = this.getAuthorizedFromEmail();
            const fromName = this.configService.get('SMTP_FROM_NAME', 'SEMTAS - Sistema');
            const mailOptions = {
                from: `"${fromName}" <${fromEmail}>`,
                to: Array.isArray(options.to) ? options.to.join(', ') : options.to,
                subject,
                html,
                text,
                attachments: options.attachments,
                // Headers adicionais para identificação
                headers: {
                    'X-Original-Sender': 'SEMTAS',
                    'X-Mailer': 'SEMTAS Email Service',
                },
            };
            // Log detalhado em desenvolvimento
            if (this.isDevelopment) {
                this.logger.debug('Enviando email:', {
                    to: mailOptions.to,
                    subject: mailOptions.subject,
                    from: mailOptions.from,
                    hasHtml: !!html,
                    hasText: !!text,
                    attachments: options.attachments?.length || 0,
                });
            }
            const result = await this.transporter.sendMail(mailOptions);
            this.logger.log('Email enviado com sucesso', {
                to: options.to,
                subject: subject,
                messageId: result.messageId,
                response: result.response,
            });
            return true;
        }
        catch (error) {
            // Log detalhado do erro com sugestões
            const errorDetails = {
                message: error.message,
                code: error.code,
                command: error.command,
                to: options.to,
                subject: options.subject || 'N/A',
                template: options.template || 'N/A',
                suggestion: this.getSuggestionForError(error),
                stack: this.isDevelopment ? error.stack : undefined,
            };
            this.logger.error('Erro ao enviar email:', errorDetails);
            // Tentar reconectar se for erro de conexão
            if (error.code === 'ESOCKET' || error.code === 'ECONNECTION') {
                this.logger.warn('Erro de conexão detectado, tentando reinicializar transporter...');
                setTimeout(() => this.initializeTransporter(), 5000);
            }
            return false;
        }
    }
    /**
     * Carrega um template de email com cache inteligente
     */
    async loadTemplate(templateName) {
        // Verificar cache primeiro (apenas em produção)
        if (!this.isDevelopment && this.templatesCache.has(templateName)) {
            return this.templatesCache.get(templateName);
        }
        try {
            const templatePath = path.join(this.templatesDir, templateName);
            // Verificar se o diretório do template existe
            if (!fs.existsSync(templatePath)) {
                this.logger.error(`Diretório do template não encontrado: ${templatePath}`);
                return null;
            }
            // Carregar arquivos do template
            const htmlPath = path.join(templatePath, 'template.hbs');
            const textPath = path.join(templatePath, 'template.txt');
            const configPath = path.join(templatePath, 'config.json');
            if (!fs.existsSync(htmlPath)) {
                this.logger.error(`Template HTML não encontrado: ${htmlPath}`);
                return null;
            }
            const html = fs.readFileSync(htmlPath, 'utf8');
            const text = fs.existsSync(textPath)
                ? fs.readFileSync(textPath, 'utf8')
                : undefined;
            let subject = 'Notificação - SEMTAS';
            if (fs.existsSync(configPath)) {
                try {
                    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                    subject = config.subject || subject;
                }
                catch (parseError) {
                    this.logger.warn(`Erro ao parsear config.json para template ${templateName}:`, parseError.message);
                }
            }
            const template = { subject, html, text };
            // Cache do template (apenas em produção)
            if (!this.isDevelopment) {
                this.templatesCache.set(templateName, template);
            }
            this.logger.debug(`Template '${templateName}' carregado com sucesso`);
            return template;
        }
        catch (error) {
            this.logger.error(`Erro ao carregar template ${templateName}:`, {
                message: error.message,
                stack: this.isDevelopment ? error.stack : undefined,
            });
            return null;
        }
    }
    /**
     * Compila um template Handlebars com tratamento de erro melhorado
     */
    compileTemplate(template, context) {
        try {
            const compiledTemplate = handlebars.compile(template);
            return compiledTemplate(context);
        }
        catch (error) {
            this.logger.error('Erro ao compilar template Handlebars:', {
                error: error.message,
                context: Object.keys(context),
                templatePreview: template.substring(0, 100) + '...',
            });
            return template; // Retorna template original em caso de erro
        }
    }
    /**
     * Fornece sugestões baseadas no tipo de erro SMTP
     */
    getSuggestionForError(error) {
        const errorCode = error.code;
        const errorMessage = error.message?.toLowerCase() || '';
        const smtpHost = this.configService.get('SMTP_HOST') || '';
        const smtpPort = this.configService.get('SMTP_PORT', 587);
        if (errorCode === 'EENVELOPE' &&
            errorMessage.includes('domain') &&
            errorMessage.includes('not allowed')) {
            if (this.isMailHog(smtpHost, smtpPort)) {
                return 'MailHog não deveria rejeitar domínios. Verifique se o MailHog está rodando corretamente';
            }
            return 'Configure SMTP_FROM com um domínio verificado na sua conta, ou use MailHog para desenvolvimento';
        }
        if (errorCode === 'EAUTH') {
            if (this.isMailHog(smtpHost, smtpPort)) {
                return 'MailHog não requer autenticação. Remova SMTP_USER e SMTP_PASS ou deixe-os vazios';
            }
            return 'Verifique suas credenciais SMTP_USER e SMTP_PASS';
        }
        if (errorCode === 'ESOCKET' || errorCode === 'ECONNECTION') {
            if (this.isMailHog(smtpHost, smtpPort)) {
                return 'MailHog não está rodando. Execute: docker run -d -p 1025:1025 -p 8025:8025 mailhog/mailhog ou verifique se o serviço está ativo';
            }
            return 'Verifique SMTP_HOST e SMTP_PORT, e sua conexão de internet';
        }
        if (errorCode === 'ENOTFOUND') {
            if (this.isMailHog(smtpHost, smtpPort)) {
                return 'Host MailHog não encontrado. Verifique se está rodando em localhost:1025';
            }
            return 'Host SMTP não encontrado. Verifique SMTP_HOST';
        }
        if (errorCode === 'ETIMEDOUT') {
            if (this.isMailHog(smtpHost, smtpPort)) {
                return 'Timeout conectando ao MailHog. Verifique se está rodando e acessível';
            }
            return 'Timeout na conexão SMTP. Verifique firewall e conectividade';
        }
        if (errorMessage.includes('starttls')) {
            return 'Problema com TLS - para MailHog use porta 1025, para outros tente SMTP_SECURE=false e SMTP_PORT=587';
        }
        return 'Verifique todas as configurações SMTP no arquivo .env';
    }
    /**
     * Envia email de recuperação de senha
     */
    async sendPasswordResetEmail(email, name, resetToken, expiresIn) {
        const resetUrl = `${this.configService.get('FRONTEND_URL')}/reset-password?token=${resetToken}`;
        const expiresAt = new Date(Date.now() + expiresIn * 60 * 1000);
        const result = await this.sendEmail({
            to: email,
            template: 'password-reset',
            context: {
                name,
                resetUrl,
                expiresAt: expiresAt.toLocaleString('pt-BR'),
                expiresInMinutes: expiresIn,
                supportEmail: this.configService.get('SUPPORT_EMAIL', 'suporte@semtas.gov.br'),
            },
        });
        if (!result) {
            this.logger.error('Falha ao enviar email de recuperação de senha', {
                email,
                name,
                expiresIn,
            });
        }
        return result;
    }
    /**
     * Envia email de confirmação de reset de senha
     */
    async sendPasswordResetConfirmationEmail(email, name) {
        return this.sendEmail({
            to: email,
            template: 'password-reset-confirmation',
            context: {
                name,
                loginUrl: `${this.configService.get('FRONTEND_URL')}/login`,
                supportEmail: this.configService.get('SUPPORT_EMAIL', 'suporte@semtas.gov.br'),
            },
        });
    }
    /**
     * Envia email de notificação de tentativa suspeita
     */
    async sendSuspiciousActivityEmail(email, name, activity, ipAddress, userAgent) {
        return this.sendEmail({
            to: email,
            template: 'suspicious-activity',
            context: {
                name,
                activity,
                ipAddress,
                userAgent,
                timestamp: new Date().toLocaleString('pt-BR'),
                supportEmail: this.configService.get('SUPPORT_EMAIL', 'suporte@semtas.gov.br'),
            },
        });
    }
    /**
     * Limpa o cache de templates
     */
    clearTemplateCache() {
        this.templatesCache.clear();
        this.logger.log('Cache de templates limpo');
    }
    /**
     * Verifica se o serviço está funcionando
     */
    async healthCheck() {
        if (!this.isEnabled || !this.transporter) {
            return false;
        }
        try {
            await this.transporter.verify();
            this.logger.log('Health check do email passou - conexão SMTP OK');
            return true;
        }
        catch (error) {
            this.logger.error('Health check do email falhou:', {
                message: error.message,
                code: error.code,
                suggestion: this.getSuggestionForError(error),
            });
            return false;
        }
    }
    /**
     * Obtém estatísticas do serviço
     */
    getStats() {
        const host = this.configService.get('SMTP_HOST') || 'N/A';
        const port = this.configService.get('SMTP_PORT', 587);
        let provider = 'Generic SMTP';
        if (this.isMailHog(host, port)) {
            provider = 'MailHog (Development)';
        }
        else if (host.toLowerCase().includes('mailtrap')) {
            provider = host.toLowerCase().includes('live')
                ? 'Mailtrap Live'
                : 'Mailtrap Testing';
        }
        else if (host.toLowerCase().includes('gmail')) {
            provider = 'Gmail';
        }
        return {
            enabled: this.isEnabled,
            templatesLoaded: this.templatesCache.size,
            transporterReady: !!this.transporter,
            environment: this.configService.get('NODE_ENV') || 'development',
            smtpConfig: {
                host,
                port,
                secure: port === 465,
                provider,
            },
        };
    }
    /**
     * Força reconexão do transporter (útil para troubleshooting)
     */
    async reconnect() {
        try {
            if (this.transporter) {
                this.transporter.close();
            }
            this.initializeTransporter();
            return await this.healthCheck();
        }
        catch (error) {
            this.logger.error('Erro ao reconectar transporter:', error);
            return false;
        }
    }
    /**
     * Testa envio de email (útil para verificar configuração)
     */
    async testEmail(recipient) {
        return this.sendEmail({
            to: recipient,
            subject: 'Teste de Configuração SMTP - SEMTAS',
            html: `
        <h2>Teste de Email</h2>
        <p>Este é um email de teste para verificar a configuração SMTP.</p>
        <p><strong>Data/Hora:</strong> ${new Date().toLocaleString('pt-BR')}</p>
        <p><strong>Servidor:</strong> ${this.configService.get('SMTP_HOST')}</p>
        <p><strong>Porta:</strong> ${this.configService.get('SMTP_PORT')}</p>
        <p>Se você recebeu este email, a configuração está funcionando corretamente!</p>
      `,
            text: `
        Teste de Email - SEMTAS
        
        Este é um email de teste para verificar a configuração SMTP.
        Data/Hora: ${new Date().toLocaleString('pt-BR')}
        Servidor: ${this.configService.get('SMTP_HOST')}
        Porta: ${this.configService.get('SMTP_PORT')}
        
        Se você recebeu este email, a configuração está funcionando corretamente!
      `,
        });
    }
};
exports.EmailService = EmailService;
exports.EmailService = EmailService = EmailService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], EmailService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGNvbW1vblxcc2VydmljZXNcXGVtYWlsLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBb0Q7QUFDcEQsMkNBQStDO0FBQy9DLHVEQUF5QztBQUV6Qyx1REFBeUM7QUFDekMsdUNBQXlCO0FBQ3pCLDJDQUE2QjtBQXNCN0I7Ozs7R0FJRztBQUVJLElBQU0sWUFBWSxvQkFBbEIsTUFBTSxZQUFZO0lBUU07SUFQWixNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsY0FBWSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELFdBQVcsQ0FBYztJQUN6QixjQUFjLEdBQUcsSUFBSSxHQUFHLEVBQXlCLENBQUM7SUFDekMsWUFBWSxDQUFTO0lBQ3JCLFNBQVMsQ0FBVTtJQUNuQixhQUFhLENBQVU7SUFFeEMsWUFBNkIsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzFFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQVUsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxhQUFhO1lBQ2hCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFTLFVBQVUsQ0FBQyxLQUFLLGFBQWEsQ0FBQztRQUUvRCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNuQiwyRUFBMkU7WUFDM0UsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDL0IsQ0FBQzthQUFNLENBQUM7WUFDTixJQUFJLENBQUMsTUFBTSxD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Q0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM1RCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQWlCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNwQixFQUFFLEVBQUUsU0FBUztZQUNiLE9BQU8sRUFBRSxxQ0FBcUM7WUFDOUMsSUFBSSxFQUFFOzs7eUNBRzZCLElBQUksSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQzt3Q0FDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO3FDQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7O09BRWpFO1lBQ0QsSUFBSSxFQUFFOzs7O3FCQUlTLElBQUksSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQztvQkFDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDO2lCQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7OztPQUc3QztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFBO0FBM3VCWSxvQ0FBWTt1QkFBWixZQUFZO0lBRHhCLElBQUEsbUJBQVUsR0FBRTt5REFTaUMsc0JBQWEsb0JBQWIsc0JBQWE7R0FSOUMsWUFBWSxDQTJ1QnhCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxjb21tb25cXHNlcnZpY2VzXFxlbWFpbC5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIExvZ2dlciB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IENvbmZpZ1NlcnZpY2UgfSBmcm9tICdAbmVzdGpzL2NvbmZpZyc7XG5pbXBvcnQgKiBhcyBub2RlbWFpbGVyIGZyb20gJ25vZGVtYWlsZXInO1xuaW1wb3J0IHsgVHJhbnNwb3J0ZXIgfSBmcm9tICdub2RlbWFpbGVyJztcbmltcG9ydCAqIGFzIGhhbmRsZWJhcnMgZnJvbSAnaGFuZGxlYmFycyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVtYWlsT3B0aW9ucyB7XG4gIHRvOiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgc3ViamVjdD86IHN0cmluZzsgLy8gT3BjaW9uYWwgcXVhbmRvIHVtIHRlbXBsYXRlIMOpIGZvcm5lY2lkb1xuICB0ZW1wbGF0ZT86IHN0cmluZztcbiAgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gIGh0bWw/OiBzdHJpbmc7XG4gIHRleHQ/OiBzdHJpbmc7XG4gIGF0dGFjaG1lbnRzPzogQXJyYXk8e1xuICAgIGZpbGVuYW1lOiBzdHJpbmc7XG4gICAgY29udGVudDogQnVmZmVyIHwgc3RyaW5nO1xuICAgIGNvbnRlbnRUeXBlPzogc3RyaW5nO1xuICB9Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFbWFpbFRlbXBsYXRlIHtcbiAgc3ViamVjdDogc3RyaW5nO1xuICBodG1sOiBzdHJpbmc7XG4gIHRleHQ/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogU2VydmnDp28gZGUgZW52aW8gZGUgZW1haWxzXG4gKiBTdXBvcnRhIHRlbXBsYXRlcyBIYW5kbGViYXJzIGUgY29uZmlndXJhw6fDo28gU01UUFxuICogSW5jbHVpIHN1cG9ydGUgbmF0aXZvIHBhcmEgTWFpbEhvZywgTWFpbHRyYXAsIEdtYWlsIGUgb3V0cm9zIHByb3ZlZG9yZXNcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVtYWlsU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyID0gbmV3IExvZ2dlcihFbWFpbFNlcnZpY2UubmFtZSk7XG4gIHByaXZhdGUgdHJhbnNwb3J0ZXI6IFRyYW5zcG9ydGVyO1xuICBwcml2YXRlIHRlbXBsYXRlc0NhY2hlID0gbmV3IE1hcDxzdHJpbmcsIEVtYWlsVGVtcGxhdGU+KCk7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGVtcGxhdGVzRGlyOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgaXNFbmFibGVkOiBib29sZWFuO1xuICBwcml2YXRlIHJlYWRvbmx5IGlzRGV2ZWxvcG1lbnQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25maWdTZXJ2aWNlOiBDb25maWdTZXJ2aWNlKSB7XG4gICAgdGhpcy50ZW1wbGF0ZXNEaXIgPSBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3NyYycsICd0ZW1wbGF0ZXMnLCAnZW1haWwnKTtcbiAgICB0aGlzLmlzRW5hYmxlZCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8Ym9vbGVhbj4oJ0VNQUlMX0VOQUJMRUQnLCBmYWxzZSk7XG4gICAgdGhpcy5pc0RldmVsb3BtZW50ID1cbiAgICAgIHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPignTk9ERV9FTlYnKSA9PT0gJ2RldmVsb3BtZW50JztcblxuICAgIGlmICh0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgLy8gSW5pY2lhbGl6YcOnw6NvIHPDrW5jcm9uYSBwYXJhIGdhcmFudGlyIHF1ZSBvIHRyYW5zcG9ydGVyIGVzdGVqYSBkaXNwb27DrXZlbFxuICAgICAgdGhpcy5pbml0aWFsaXplVHJhbnNwb3J0ZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgJ1NlcnZpw6dvIGRlIGVtYWlsIGRlc2FiaWxpdGFkby4gQ29uZmlndXJlIEVNQUlMX0VOQUJMRUQ9dHJ1ZSBwYXJhIGhhYmlsaXRhci4nLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pY2lhbGl6YSBvIHRyYW5zcG9ydGVyIGRvIE5vZGVtYWlsZXJcbiAgICogQ29uZmlndXJhZG8gcGFyYSB1c2FyIFNUQVJUVExTIG5hIHBvcnRhIDU4NywgU1NMIG5hIHBvcnRhIDQ2NSwgb3UgTWFpbEhvZyBuYSBwb3J0YSAxMDI1XG4gICAqL1xuICBwcml2YXRlIGluaXRpYWxpemVUcmFuc3BvcnRlcigpOiB2b2lkIHtcbiAgICBjb25zdCBob3N0ID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdTTVRQX0hPU1QnKTtcbiAgICBjb25zdCBwb3J0ID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldDxudW1iZXI+KCdTTVRQX1BPUlQnLCA1ODcpO1xuICAgIGNvbnN0IHVzZXIgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0PHN0cmluZz4oJ1NNVFBfVVNFUicpO1xuICAgIGNvbnN0IHBhc3MgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0PHN0cmluZz4oJ1NNVFBfUEFTUycpO1xuXG4gICAgLy8gQ29uZmlndXJhw6fDtWVzIFNTTC9UTFMgYmFzZWFkYXMgbmEgcG9ydGEgZSBwcm92ZWRvclxuICAgIGNvbnN0IHNlY3VyZSA9IHBvcnQgPT09IDQ2NTsgLy8gU1NMIHBhcmEgcG9ydGEgNDY1LCBTVEFSVFRMUyBwYXJhIHBvcnRhIDU4N1xuICAgIGNvbnN0IHJlcXVpcmVUTFMgPSBwb3J0ID09PSA1ODcgJiYgIXRoaXMuaXNNYWlsSG9nKGhvc3QsIHBvcnQpOyAvLyBGb3LDp2EgU1RBUlRUTFMgYXBlbmFzIHBhcmEgcG9ydGEgNTg3IChleGNldG8gTWFpbEhvZylcblxuICAgIGlmICghaG9zdCkge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICdTTVRQX0hPU1QgbsOjbyBjb25maWd1cmFkby4gVmVyaWZpcXVlIGFzIGNvbmZpZ3VyYcOnw7Vlcy4nLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBNYWlsSG9nIG7Do28gcmVxdWVyIGF1dGVudGljYcOnw6NvXG4gICAgY29uc3QgaXNNYWlsSG9nID0gdGhpcy5pc01haWxIb2coaG9zdCwgcG9ydCk7XG5cbiAgICBpZiAoIWlzTWFpbEhvZyAmJiAoIXVzZXIgfHwgIXBhc3MpKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgJ0NvbmZpZ3VyYcOnw7VlcyBTTVRQIGluY29tcGxldGFzLiBWZXJpZmlxdWUgU01UUF9VU0VSIGUgU01UUF9QQVNTIChuw6NvIG5lY2Vzc8OhcmlvIHBhcmEgTWFpbEhvZykuJyxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ29uZmlndXJhw6fDtWVzIGVzcGVjw61maWNhcyBkbyBNYWlsSG9nXG4gICAgaWYgKGlzTWFpbEhvZykge1xuICAgICAgdGhpcy50cmFuc3BvcnRlciA9IG5vZGVtYWlsZXIuY3JlYXRlVHJhbnNwb3J0KHtcbiAgICAgICAgaG9zdDogaG9zdCEsIC8vIEdhcmFudGlkbyBxdWUgbsOjbyDDqSB1bmRlZmluZWQgcGVsbyBjaGVjayBhY2ltYVxuICAgICAgICBwb3J0LFxuICAgICAgICBzZWN1cmU6IGZhbHNlLCAvLyBNYWlsSG9nIG7Do28gdXNhIFNTTC9UTFNcbiAgICAgICAgcmVxdWlyZVRMUzogZmFsc2UsXG4gICAgICAgIGlnbm9yZVRMUzogdHJ1ZSxcbiAgICAgICAgLy8gTWFpbEhvZyBuw6NvIHJlcXVlciBhdXRlbnRpY2HDp8Ojb1xuICAgICAgICBhdXRoOiB1bmRlZmluZWQsXG4gICAgICAgIHBvb2w6IGZhbHNlLCAvLyBEZXNhYmlsaXRhIHBvb2wgcGFyYSBNYWlsSG9nXG4gICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAxMDAwMCwgLy8gVGltZW91dCBtZW5vciBwYXJhIE1haWxIb2dcbiAgICAgICAgZ3JlZXRpbmdUaW1lb3V0OiA1MDAwLFxuICAgICAgICBzb2NrZXRUaW1lb3V0OiAxMDAwMCxcbiAgICAgICAgZGVidWc6IHRoaXMuaXNEZXZlbG9wbWVudCxcbiAgICAgICAgbG9nZ2VyOiB0aGlzLmlzRGV2ZWxvcG1lbnQsXG4gICAgICAgIC8vIENvbmZpZ3VyYcOnw7VlcyBlc3BlY8OtZmljYXMgcGFyYSBNYWlsSG9nXG4gICAgICAgIHRsczoge1xuICAgICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgICBgTWFpbEhvZyBkZXRlY3RhZG86ICR7aG9zdH06JHtwb3J0fSAtIEF1dGVudGljYcOnw6NvIGRlc2FiaWxpdGFkYWAsXG4gICAgICApO1xuICAgICAgdGhpcy52ZXJpZnlDb25uZWN0aW9uKCkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICdGYWxoYSBuYSB2ZXJpZmljYcOnw6NvIGluaWNpYWwgZGEgY29uZXjDo28gTWFpbEhvZzonLFxuICAgICAgICAgIGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDb25maWd1cmHDp8O1ZXMgVExTIG1haXMgZmxleMOtdmVpcyBwYXJhIG91dHJvcyBwcm92ZWRvcmVzXG4gICAgY29uc3QgdGxzT3B0aW9ucyA9IHtcbiAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogdGhpcy5jb25maWdTZXJ2aWNlLmdldDxib29sZWFuPihcbiAgICAgICAgJ1NNVFBfUkVKRUNUX1VOQVVUSE9SSVpFRCcsXG4gICAgICAgIGZhbHNlLFxuICAgICAgKSxcbiAgICAgIG1pblZlcnNpb246ICdUTFN2MScgYXMgY29uc3QsXG4gICAgICBtYXhWZXJzaW9uOiAnVExTdjEuMycgYXMgY29uc3QsXG4gICAgICBzZWN1cmVQcm90b2NvbDogdW5kZWZpbmVkLFxuICAgICAgY2lwaGVyczogdW5kZWZpbmVkLFxuICAgIH07XG5cbiAgICB0aGlzLnRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICAgICAgaG9zdDogaG9zdCEsIC8vIEdhcmFudGlkbyBxdWUgbsOjbyDDqSB1bmRlZmluZWQgcGVsbyBjaGVjayBhY2ltYVxuICAgICAgcG9ydCxcbiAgICAgIHNlY3VyZSxcbiAgICAgIHJlcXVpcmVUTFMsXG4gICAgICBhdXRoOiB7XG4gICAgICAgIHVzZXI6IHVzZXIhLFxuICAgICAgICBwYXNzOiBwYXNzISxcbiAgICAgIH0sXG4gICAgICB0bHM6IHRsc09wdGlvbnMsXG4gICAgICBwb29sOiB0cnVlLFxuICAgICAgbWF4Q29ubmVjdGlvbnM6IDUsXG4gICAgICBtYXhNZXNzYWdlczogMTAwLFxuICAgICAgcmF0ZUxpbWl0OiAxMCxcbiAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiA2MDAwMCxcbiAgICAgIGdyZWV0aW5nVGltZW91dDogMzAwMDAsXG4gICAgICBzb2NrZXRUaW1lb3V0OiA2MDAwMCxcbiAgICAgIGlnbm9yZVRMUzogZmFsc2UsXG4gICAgICBkZWJ1ZzogdGhpcy5pc0RldmVsb3BtZW50LFxuICAgICAgbG9nZ2VyOiB0aGlzLmlzRGV2ZWxvcG1lbnQsXG4gICAgfSk7XG5cbiAgICAvLyBDb25maWd1cmHDp8OjbyBkZSBmYWxsYmFjayBwYXJhIGFtYmllbnRlcyBkZSBkZXNlbnZvbHZpbWVudG8gcHJvYmxlbcOhdGljb3NcbiAgICBpZiAodGhpcy5pc0RldmVsb3BtZW50ICYmIGhvc3QuaW5jbHVkZXMoJ2xvY2FsaG9zdCcpICYmICFpc01haWxIb2cpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICAgICdEZXRlY3RhZG8gYW1iaWVudGUgbG9jYWwgLSBhcGxpY2FuZG8gY29uZmlndXJhw6fDtWVzIFNTTCByZWxheGFkYXMnLFxuICAgICAgKTtcbiAgICAgIHRoaXMudHJhbnNwb3J0ZXIgPSBub2RlbWFpbGVyLmNyZWF0ZVRyYW5zcG9ydCh7XG4gICAgICAgIGhvc3Q6IGhvc3QhLFxuICAgICAgICBwb3J0LFxuICAgICAgICBzZWN1cmU6IGZhbHNlLFxuICAgICAgICByZXF1aXJlVExTOiBmYWxzZSxcbiAgICAgICAgYXV0aDogeyB1c2VyOiB1c2VyISwgcGFzczogcGFzcyEgfSxcbiAgICAgICAgdGxzOiB7XG4gICAgICAgICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZSxcbiAgICAgICAgICBpZ25vcmVUTFM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAzMDAwMCxcbiAgICAgICAgZ3JlZXRpbmdUaW1lb3V0OiAxNTAwMCxcbiAgICAgICAgc29ja2V0VGltZW91dDogMzAwMDAsXG4gICAgICAgIGRlYnVnOiB0cnVlLFxuICAgICAgICBsb2dnZXI6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYXIgY29uZXjDo28gZGUgZm9ybWEgYXNzw61uY3JvbmEgc2VtIGJsb3F1ZWFyIGEgaW5pY2lhbGl6YcOnw6NvXG4gICAgdGhpcy52ZXJpZnlDb25uZWN0aW9uKCkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgJ0ZhbGhhIG5hIHZlcmlmaWNhw6fDo28gaW5pY2lhbCBkYSBjb25leMOjbyBTTVRQOicsXG4gICAgICAgIGVycm9yLm1lc3NhZ2UsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIMOpIE1haWxIb2cgYmFzZWFkbyBubyBob3N0IGUgcG9ydGFcbiAgICogRGV0ZWN0YSBNYWlsSG9nIHBvciBtw7psdGlwbG9zIGNyaXTDqXJpb3MgcGFyYSBnYXJhbnRpciBjb21wYXRpYmlsaWRhZGVcbiAgICovXG4gIHByaXZhdGUgaXNNYWlsSG9nKGhvc3Q6IHN0cmluZyB8IHVuZGVmaW5lZCwgcG9ydDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKCFob3N0KSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBsb3dlckhvc3QgPSBob3N0LnRvTG93ZXJDYXNlKCk7XG5cbiAgICAvLyBEZXRlY3RhIE1haWxIb2cgcG9yIGhvc3Qgb3UgcG9ydGEgcGFkcsOjb1xuICAgIHJldHVybiAoXG4gICAgICBsb3dlckhvc3QuaW5jbHVkZXMoJ21haWxob2cnKSB8fFxuICAgICAgKGxvd2VySG9zdCA9PT0gJ2xvY2FsaG9zdCcgJiYgcG9ydCA9PT0gMTAyNSkgfHxcbiAgICAgIChsb3dlckhvc3QgPT09ICcxMjcuMC4wLjEnICYmIHBvcnQgPT09IDEwMjUpIHx8XG4gICAgICBsb3dlckhvc3QgPT09ICdtYWlsaG9nJyB8fFxuICAgICAgcG9ydCA9PT0gMTAyNSAvLyBQb3J0YSBwYWRyw6NvIGRvIE1haWxIb2dcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIGEgY29uZXjDo28gU01UUCBjb20gcmV0cnkgYXV0b23DoXRpY29cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgdmVyaWZ5Q29ubmVjdGlvbihyZXRyaWVzID0gMyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnRyYW5zcG9ydGVyLnZlcmlmeSgpO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgICBgU2Vydmlkb3IgU01UUCBjb25maWd1cmFkbyBjb20gc3VjZXNzbzogJHt0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdTTVRQX0hPU1QnKX06JHt0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdTTVRQX1BPUlQnKX1gLFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc3QgZXJyb3JJbmZvID0ge1xuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBjb2RlOiBlcnJvci5jb2RlLFxuICAgICAgICBjb21tYW5kOiBlcnJvci5jb21tYW5kLFxuICAgICAgICBob3N0OiB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdTTVRQX0hPU1QnKSxcbiAgICAgICAgcG9ydDogdGhpcy5jb25maWdTZXJ2aWNlLmdldCgnU01UUF9QT1JUJyksXG4gICAgICAgIHJldHJpZXM6IHJldHJpZXMgLSAxLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0Vycm8gbmEgY29uZmlndXJhw6fDo28gU01UUDonLCBlcnJvckluZm8pO1xuXG4gICAgICAvLyBUZW50YXRpdmEgZGUgZmFsbGJhY2sgcGFyYSBjb25maWd1cmHDp8O1ZXMgbWFpcyBwZXJtaXNzaXZhc1xuICAgICAgaWYgKHJldHJpZXMgPiAwICYmIGVycm9yLmNvZGUgPT09ICdFU09DS0VUJykge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCdUZW50YW5kbyBjb25maWd1cmHDp8OjbyBTTVRQIGFsdGVybmF0aXZhLi4uJyk7XG5cbiAgICAgICAgLy8gUmVjcmlhciB0cmFuc3BvcnRlciBjb20gY29uZmlndXJhw6fDtWVzIG1haXMgcGVybWlzc2l2YXNcbiAgICAgICAgY29uc3QgaG9zdCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPignU01UUF9IT1NUJyk7XG4gICAgICAgIGNvbnN0IHBvcnQgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0PG51bWJlcj4oJ1NNVFBfUE9SVCcsIDU4Nyk7XG4gICAgICAgIGNvbnN0IHVzZXIgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0PHN0cmluZz4oJ1NNVFBfVVNFUicpO1xuICAgICAgICBjb25zdCBwYXNzID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdTTVRQX1BBU1MnKTtcblxuICAgICAgICB0aGlzLnRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICAgICAgICAgIGhvc3Q6IGhvc3QhLFxuICAgICAgICAgIHBvcnQsXG4gICAgICAgICAgc2VjdXJlOiBmYWxzZSwgLy8gRGVzYWJpbGl0YSBTU0wvVExTIGluaWNpYWxcbiAgICAgICAgICByZXF1aXJlVExTOiBmYWxzZSwgLy8gRGVzYWJpbGl0YSBleGlnw6puY2lhIGRlIFRMU1xuICAgICAgICAgIGF1dGg6IHsgdXNlcjogdXNlciEsIHBhc3M6IHBhc3MhIH0sXG4gICAgICAgICAgdGxzOiB7XG4gICAgICAgICAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaWdub3JlVExTOiB0cnVlLCAvLyBJZ25vcmEgY29tcGxldGFtZW50ZSBUTFMgc2UgbmVjZXNzw6FyaW9cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbm5lY3Rpb25UaW1lb3V0OiAzMDAwMCxcbiAgICAgICAgICBzb2NrZXRUaW1lb3V0OiAzMDAwMCxcbiAgICAgICAgICBkZWJ1ZzogdGhpcy5pc0RldmVsb3BtZW50LFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZXRyeSBjb20gY29uZmlndXJhw6fDo28gYWx0ZXJuYXRpdmFcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnZlcmlmeUNvbm5lY3Rpb24ocmV0cmllcyAtIDEpLCAyMDAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT2J0w6ltIGVtYWlsIHJlbWV0ZW50ZSBhdXRvcml6YWRvIGJhc2VhZG8gbm8gcHJvdmVkb3IgU01UUFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRBdXRob3JpemVkRnJvbUVtYWlsKCk6IHN0cmluZyB7XG4gICAgY29uc3QgY29uZmlndXJlZEZyb20gPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0PHN0cmluZz4oJ1NNVFBfRlJPTScpO1xuICAgIGNvbnN0IHNtdHBIb3N0ID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdTTVRQX0hPU1QnKSB8fCAnJztcbiAgICBjb25zdCBzbXRwUG9ydCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8bnVtYmVyPignU01UUF9QT1JUJywgNTg3KTtcbiAgICBjb25zdCBzbXRwVXNlciA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPignU01UUF9VU0VSJykgfHwgJyc7XG5cbiAgICAvLyBTZSB1bSBGUk9NIGVzcGVjw61maWNvIGZvaSBjb25maWd1cmFkbywgdXNhciBlbGUgKHByaW9yaWRhZGUgbcOheGltYSlcbiAgICBpZiAoY29uZmlndXJlZEZyb20pIHtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBVc2FuZG8gZW1haWwgRlJPTSBjb25maWd1cmFkbzogJHtjb25maWd1cmVkRnJvbX1gKTtcbiAgICAgIHJldHVybiBjb25maWd1cmVkRnJvbTtcbiAgICB9XG5cbiAgICAvLyBQYXJhIE1haWxIb2cgLSBhY2VpdGEgcXVhbHF1ZXIgZG9tw61uaW9cbiAgICBpZiAodGhpcy5pc01haWxIb2coc210cEhvc3QsIHNtdHBQb3J0KSkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoJ01haWxIb2cgZGV0ZWN0YWRvIC0gdXNhbmRvIGVtYWlsIGRlIGRlc2Vudm9sdmltZW50bycpO1xuICAgICAgcmV0dXJuICdub3JlcGx5QGxvY2FsaG9zdC50ZXN0JztcbiAgICB9XG5cbiAgICAvLyBQYXJhIE1haWx0cmFwIExpdmUgKHByb2R1w6fDo28pIC0gcHJlY2lzYSB1c2FyIGRvbcOtbmlvIHZlcmlmaWNhZG9cbiAgICBpZiAoc210cEhvc3QudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnbGl2ZS5zbXRwLm1haWx0cmFwLmlvJykpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAnTWFpbHRyYXAgTGl2ZSBkZXRlY3RhZG86IENvbmZpZ3VyZSBTTVRQX0ZST00gY29tIHNldSBkb23DrW5pbyB2ZXJpZmljYWRvIG5vIE1haWx0cmFwLiAnICtcbiAgICAgICAgICAnRXhlbXBsbzogU01UUF9GUk9NPW5vcmVwbHlAc2V1ZG9taW5pby5jb20nLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBzbXRwVXNlciB8fCAnbm9yZXBseUBleGFtcGxlLmNvbSc7XG4gICAgfVxuXG4gICAgLy8gUGFyYSBNYWlsdHJhcCBUZXN0aW5nIChkZXNlbnZvbHZpbWVudG8pXG4gICAgaWYgKFxuICAgICAgc210cEhvc3QudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnc2FuZGJveC5zbXRwLm1haWx0cmFwLmlvJykgfHxcbiAgICAgIHNtdHBIb3N0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3NlbmQuc210cC5tYWlsdHJhcC5pbycpXG4gICAgKSB7XG4gICAgICByZXR1cm4gJ25vcmVwbHlAbG9jYWxob3N0LnRlc3QnO1xuICAgIH1cblxuICAgIC8vIFBhcmEgR21haWxcbiAgICBpZiAoc210cEhvc3QudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZ21haWwnKSkge1xuICAgICAgcmV0dXJuIHNtdHBVc2VyO1xuICAgIH1cblxuICAgIC8vIFBhcmEgb3V0cm9zIHByb3ZlZG9yZXMsIHRlbnRhciB1c2FyIHVzdcOhcmlvIFNNVFBcbiAgICBpZiAoc210cFVzZXIpIHtcbiAgICAgIHJldHVybiBzbXRwVXNlcjtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayBwYXJhIGRvbcOtbmlvIGdlbsOpcmljb1xuICAgIHRoaXMubG9nZ2VyLndhcm4oXG4gICAgICAnVXNhbmRvIGRvbcOtbmlvIGdlbsOpcmljbyBjb21vIHJlbWV0ZW50ZSAtIGNvbmZpZ3VyZSBTTVRQX0ZST00gYWRlcXVhZGFtZW50ZScsXG4gICAgKTtcbiAgICByZXR1cm4gJ25vcmVwbHlAbG9jYWxob3N0LnRlc3QnO1xuICB9XG5cbiAgLyoqXG4gICAqIEVudmlhIHVtIGVtYWlsIGNvbSB0cmF0YW1lbnRvIHJvYnVzdG8gZGUgZXJyb3NcbiAgICovXG4gIGFzeW5jIHNlbmRFbWFpbChvcHRpb25zOiBFbWFpbE9wdGlvbnMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAoIXRoaXMuaXNFbmFibGVkKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdUZW50YXRpdmEgZGUgZW52aW8gZGUgZW1haWwgY29tIHNlcnZpw6dvIGRlc2FiaWxpdGFkbycsIHtcbiAgICAgICAgdG86IG9wdGlvbnMudG8sXG4gICAgICAgIHN1YmplY3Q6IG9wdGlvbnMuc3ViamVjdCxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghdGhpcy50cmFuc3BvcnRlcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ1RyYW5zcG9ydGVyIG7Do28gaW5pY2lhbGl6YWRvJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGxldCBodG1sID0gb3B0aW9ucy5odG1sO1xuICAgICAgbGV0IHRleHQgPSBvcHRpb25zLnRleHQ7XG4gICAgICBsZXQgc3ViamVjdCA9IG9wdGlvbnMuc3ViamVjdDtcblxuICAgICAgLy8gUHJvY2Vzc2FyIHRlbXBsYXRlIHNlIGVzcGVjaWZpY2Fkb1xuICAgICAgaWYgKG9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCB0aGlzLmxvYWRUZW1wbGF0ZShvcHRpb25zLnRlbXBsYXRlKTtcbiAgICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgICAgaHRtbCA9IHRoaXMuY29tcGlsZVRlbXBsYXRlKHRlbXBsYXRlLmh0bWwsIG9wdGlvbnMuY29udGV4dCB8fCB7fSk7XG4gICAgICAgICAgdGV4dCA9IHRlbXBsYXRlLnRleHRcbiAgICAgICAgICAgID8gdGhpcy5jb21waWxlVGVtcGxhdGUodGVtcGxhdGUudGV4dCwgb3B0aW9ucy5jb250ZXh0IHx8IHt9KVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgc3ViamVjdCA9IHRoaXMuY29tcGlsZVRlbXBsYXRlKFxuICAgICAgICAgICAgdGVtcGxhdGUuc3ViamVjdCxcbiAgICAgICAgICAgIG9wdGlvbnMuY29udGV4dCB8fCB7fSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICAgICAgYFRlbXBsYXRlICcke29wdGlvbnMudGVtcGxhdGV9JyBuw6NvIHDDtGRlIHNlciBjYXJyZWdhZG9gLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEdhcmFudGlyIHF1ZSBvIGFzc3VudG8gZXN0ZWphIGRlZmluaWRvXG4gICAgICBpZiAoIXN1YmplY3QpIHtcbiAgICAgICAgc3ViamVjdCA9ICdOb3RpZmljYcOnw6NvIC0gU0VNVEFTJztcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybignRW1haWwgZW52aWFkbyBzZW0gYXNzdW50byBkZWZpbmlkbywgdXNhbmRvIHBhZHLDo28nLCB7XG4gICAgICAgICAgdG86IG9wdGlvbnMudG8sXG4gICAgICAgICAgdGVtcGxhdGU6IG9wdGlvbnMudGVtcGxhdGUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDb25maWd1cmFyIHJlbWV0ZW50ZSBjb20gZG9tw61uaW8gYXV0b3JpemFkb1xuICAgICAgY29uc3QgZnJvbUVtYWlsID0gdGhpcy5nZXRBdXRob3JpemVkRnJvbUVtYWlsKCk7XG4gICAgICBjb25zdCBmcm9tTmFtZSA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPihcbiAgICAgICAgJ1NNVFBfRlJPTV9OQU1FJyxcbiAgICAgICAgJ1NFTVRBUyAtIFNpc3RlbWEnLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgbWFpbE9wdGlvbnMgPSB7XG4gICAgICAgIGZyb206IGBcIiR7ZnJvbU5hbWV9XCIgPCR7ZnJvbUVtYWlsfT5gLFxuICAgICAgICB0bzogQXJyYXkuaXNBcnJheShvcHRpb25zLnRvKSA/IG9wdGlvbnMudG8uam9pbignLCAnKSA6IG9wdGlvbnMudG8sXG4gICAgICAgIHN1YmplY3QsXG4gICAgICAgIGh0bWwsXG4gICAgICAgIHRleHQsXG4gICAgICAgIGF0dGFjaG1lbnRzOiBvcHRpb25zLmF0dGFjaG1lbnRzLFxuICAgICAgICAvLyBIZWFkZXJzIGFkaWNpb25haXMgcGFyYSBpZGVudGlmaWNhw6fDo29cbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLU9yaWdpbmFsLVNlbmRlcic6ICdTRU1UQVMnLFxuICAgICAgICAgICdYLU1haWxlcic6ICdTRU1UQVMgRW1haWwgU2VydmljZScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICAvLyBMb2cgZGV0YWxoYWRvIGVtIGRlc2Vudm9sdmltZW50b1xuICAgICAgaWYgKHRoaXMuaXNEZXZlbG9wbWVudCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZygnRW52aWFuZG8gZW1haWw6Jywge1xuICAgICAgICAgIHRvOiBtYWlsT3B0aW9ucy50byxcbiAgICAgICAgICBzdWJqZWN0OiBtYWlsT3B0aW9ucy5zdWJqZWN0LFxuICAgICAgICAgIGZyb206IG1haWxPcHRpb25zLmZyb20sXG4gICAgICAgICAgaGFzSHRtbDogISFodG1sLFxuICAgICAgICAgIGhhc1RleHQ6ICEhdGV4dCxcbiAgICAgICAgICBhdHRhY2htZW50czogb3B0aW9ucy5hdHRhY2htZW50cz8ubGVuZ3RoIHx8IDAsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnRyYW5zcG9ydGVyLnNlbmRNYWlsKG1haWxPcHRpb25zKTtcblxuICAgICAgdGhpcy5sb2dnZXIubG9nKCdFbWFpbCBlbnZpYWRvIGNvbSBzdWNlc3NvJywge1xuICAgICAgICB0bzogb3B0aW9ucy50byxcbiAgICAgICAgc3ViamVjdDogc3ViamVjdCxcbiAgICAgICAgbWVzc2FnZUlkOiByZXN1bHQubWVzc2FnZUlkLFxuICAgICAgICByZXNwb25zZTogcmVzdWx0LnJlc3BvbnNlLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBMb2cgZGV0YWxoYWRvIGRvIGVycm8gY29tIHN1Z2VzdMO1ZXNcbiAgICAgIGNvbnN0IGVycm9yRGV0YWlscyA9IHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgY29tbWFuZDogZXJyb3IuY29tbWFuZCxcbiAgICAgICAgdG86IG9wdGlvbnMudG8sXG4gICAgICAgIHN1YmplY3Q6IG9wdGlvbnMuc3ViamVjdCB8fCAnTi9BJyxcbiAgICAgICAgdGVtcGxhdGU6IG9wdGlvbnMudGVtcGxhdGUgfHwgJ04vQScsXG4gICAgICAgIHN1Z2dlc3Rpb246IHRoaXMuZ2V0U3VnZ2VzdGlvbkZvckVycm9yKGVycm9yKSxcbiAgICAgICAgc3RhY2s6IHRoaXMuaXNEZXZlbG9wbWVudCA/IGVycm9yLnN0YWNrIDogdW5kZWZpbmVkLFxuICAgICAgfTtcblxuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0Vycm8gYW8gZW52aWFyIGVtYWlsOicsIGVycm9yRGV0YWlscyk7XG5cbiAgICAgIC8vIFRlbnRhciByZWNvbmVjdGFyIHNlIGZvciBlcnJvIGRlIGNvbmV4w6NvXG4gICAgICBpZiAoZXJyb3IuY29kZSA9PT0gJ0VTT0NLRVQnIHx8IGVycm9yLmNvZGUgPT09ICdFQ09OTkVDVElPTicpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgICAnRXJybyBkZSBjb25leMOjbyBkZXRlY3RhZG8sIHRlbnRhbmRvIHJlaW5pY2lhbGl6YXIgdHJhbnNwb3J0ZXIuLi4nLFxuICAgICAgICApO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuaW5pdGlhbGl6ZVRyYW5zcG9ydGVyKCksIDUwMDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhcnJlZ2EgdW0gdGVtcGxhdGUgZGUgZW1haWwgY29tIGNhY2hlIGludGVsaWdlbnRlXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGxvYWRUZW1wbGF0ZShcbiAgICB0ZW1wbGF0ZU5hbWU6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxFbWFpbFRlbXBsYXRlIHwgbnVsbD4ge1xuICAgIC8vIFZlcmlmaWNhciBjYWNoZSBwcmltZWlybyAoYXBlbmFzIGVtIHByb2R1w6fDo28pXG4gICAgaWYgKCF0aGlzLmlzRGV2ZWxvcG1lbnQgJiYgdGhpcy50ZW1wbGF0ZXNDYWNoZS5oYXModGVtcGxhdGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGVzQ2FjaGUuZ2V0KHRlbXBsYXRlTmFtZSkhO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZVBhdGggPSBwYXRoLmpvaW4odGhpcy50ZW1wbGF0ZXNEaXIsIHRlbXBsYXRlTmFtZSk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciBzZSBvIGRpcmV0w7NyaW8gZG8gdGVtcGxhdGUgZXhpc3RlXG4gICAgICBpZiAoIWZzLmV4aXN0c1N5bmModGVtcGxhdGVQYXRoKSkge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgICBgRGlyZXTDs3JpbyBkbyB0ZW1wbGF0ZSBuw6NvIGVuY29udHJhZG86ICR7dGVtcGxhdGVQYXRofWAsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICAvLyBDYXJyZWdhciBhcnF1aXZvcyBkbyB0ZW1wbGF0ZVxuICAgICAgY29uc3QgaHRtbFBhdGggPSBwYXRoLmpvaW4odGVtcGxhdGVQYXRoLCAndGVtcGxhdGUuaGJzJyk7XG4gICAgICBjb25zdCB0ZXh0UGF0aCA9IHBhdGguam9pbih0ZW1wbGF0ZVBhdGgsICd0ZW1wbGF0ZS50eHQnKTtcbiAgICAgIGNvbnN0IGNvbmZpZ1BhdGggPSBwYXRoLmpvaW4odGVtcGxhdGVQYXRoLCAnY29uZmlnLmpzb24nKTtcblxuICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKGh0bWxQYXRoKSkge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihgVGVtcGxhdGUgSFRNTCBuw6NvIGVuY29udHJhZG86ICR7aHRtbFBhdGh9YCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBodG1sID0gZnMucmVhZEZpbGVTeW5jKGh0bWxQYXRoLCAndXRmOCcpO1xuICAgICAgY29uc3QgdGV4dCA9IGZzLmV4aXN0c1N5bmModGV4dFBhdGgpXG4gICAgICAgID8gZnMucmVhZEZpbGVTeW5jKHRleHRQYXRoLCAndXRmOCcpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICBsZXQgc3ViamVjdCA9ICdOb3RpZmljYcOnw6NvIC0gU0VNVEFTJztcbiAgICAgIGlmIChmcy5leGlzdHNTeW5jKGNvbmZpZ1BhdGgpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgY29uZmlnID0gSlNPTi5wYXJzZShmcy5yZWFkRmlsZVN5bmMoY29uZmlnUGF0aCwgJ3V0ZjgnKSk7XG4gICAgICAgICAgc3ViamVjdCA9IGNvbmZpZy5zdWJqZWN0IHx8IHN1YmplY3Q7XG4gICAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAgICAgYEVycm8gYW8gcGFyc2VhciBjb25maWcuanNvbiBwYXJhIHRlbXBsYXRlICR7dGVtcGxhdGVOYW1lfTpgLFxuICAgICAgICAgICAgcGFyc2VFcnJvci5tZXNzYWdlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdGVtcGxhdGU6IEVtYWlsVGVtcGxhdGUgPSB7IHN1YmplY3QsIGh0bWwsIHRleHQgfTtcblxuICAgICAgLy8gQ2FjaGUgZG8gdGVtcGxhdGUgKGFwZW5hcyBlbSBwcm9kdcOnw6NvKVxuICAgICAgaWYgKCF0aGlzLmlzRGV2ZWxvcG1lbnQpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZXNDYWNoZS5zZXQodGVtcGxhdGVOYW1lLCB0ZW1wbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKGBUZW1wbGF0ZSAnJHt0ZW1wbGF0ZU5hbWV9JyBjYXJyZWdhZG8gY29tIHN1Y2Vzc29gKTtcbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYEVycm8gYW8gY2FycmVnYXIgdGVtcGxhdGUgJHt0ZW1wbGF0ZU5hbWV9OmAsIHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3RhY2s6IHRoaXMuaXNEZXZlbG9wbWVudCA/IGVycm9yLnN0YWNrIDogdW5kZWZpbmVkLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ29tcGlsYSB1bSB0ZW1wbGF0ZSBIYW5kbGViYXJzIGNvbSB0cmF0YW1lbnRvIGRlIGVycm8gbWVsaG9yYWRvXG4gICAqL1xuICBwcml2YXRlIGNvbXBpbGVUZW1wbGF0ZShcbiAgICB0ZW1wbGF0ZTogc3RyaW5nLFxuICAgIGNvbnRleHQ6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICk6IHN0cmluZyB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbXBpbGVkVGVtcGxhdGUgPSBoYW5kbGViYXJzLmNvbXBpbGUodGVtcGxhdGUpO1xuICAgICAgcmV0dXJuIGNvbXBpbGVkVGVtcGxhdGUoY29udGV4dCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdFcnJvIGFvIGNvbXBpbGFyIHRlbXBsYXRlIEhhbmRsZWJhcnM6Jywge1xuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgY29udGV4dDogT2JqZWN0LmtleXMoY29udGV4dCksXG4gICAgICAgIHRlbXBsYXRlUHJldmlldzogdGVtcGxhdGUuc3Vic3RyaW5nKDAsIDEwMCkgKyAnLi4uJyxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRlbXBsYXRlOyAvLyBSZXRvcm5hIHRlbXBsYXRlIG9yaWdpbmFsIGVtIGNhc28gZGUgZXJyb1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JuZWNlIHN1Z2VzdMO1ZXMgYmFzZWFkYXMgbm8gdGlwbyBkZSBlcnJvIFNNVFBcbiAgICovXG4gIHByaXZhdGUgZ2V0U3VnZ2VzdGlvbkZvckVycm9yKGVycm9yOiBhbnkpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IGVycm9yLmNvZGU7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZT8udG9Mb3dlckNhc2UoKSB8fCAnJztcbiAgICBjb25zdCBzbXRwSG9zdCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPignU01UUF9IT1NUJykgfHwgJyc7XG4gICAgY29uc3Qgc210cFBvcnQgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0PG51bWJlcj4oJ1NNVFBfUE9SVCcsIDU4Nyk7XG5cbiAgICBpZiAoXG4gICAgICBlcnJvckNvZGUgPT09ICdFRU5WRUxPUEUnICYmXG4gICAgICBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJ2RvbWFpbicpICYmXG4gICAgICBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJ25vdCBhbGxvd2VkJylcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLmlzTWFpbEhvZyhzbXRwSG9zdCwgc210cFBvcnQpKSB7XG4gICAgICAgIHJldHVybiAnTWFpbEhvZyBuw6NvIGRldmVyaWEgcmVqZWl0YXIgZG9tw61uaW9zLiBWZXJpZmlxdWUgc2UgbyBNYWlsSG9nIGVzdMOhIHJvZGFuZG8gY29ycmV0YW1lbnRlJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnQ29uZmlndXJlIFNNVFBfRlJPTSBjb20gdW0gZG9tw61uaW8gdmVyaWZpY2FkbyBuYSBzdWEgY29udGEsIG91IHVzZSBNYWlsSG9nIHBhcmEgZGVzZW52b2x2aW1lbnRvJztcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JDb2RlID09PSAnRUFVVEgnKSB7XG4gICAgICBpZiAodGhpcy5pc01haWxIb2coc210cEhvc3QsIHNtdHBQb3J0KSkge1xuICAgICAgICByZXR1cm4gJ01haWxIb2cgbsOjbyByZXF1ZXIgYXV0ZW50aWNhw6fDo28uIFJlbW92YSBTTVRQX1VTRVIgZSBTTVRQX1BBU1Mgb3UgZGVpeGUtb3MgdmF6aW9zJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnVmVyaWZpcXVlIHN1YXMgY3JlZGVuY2lhaXMgU01UUF9VU0VSIGUgU01UUF9QQVNTJztcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JDb2RlID09PSAnRVNPQ0tFVCcgfHwgZXJyb3JDb2RlID09PSAnRUNPTk5FQ1RJT04nKSB7XG4gICAgICBpZiAodGhpcy5pc01haWxIb2coc210cEhvc3QsIHNtdHBQb3J0KSkge1xuICAgICAgICByZXR1cm4gJ01haWxIb2cgbsOjbyBlc3TDoSByb2RhbmRvLiBFeGVjdXRlOiBkb2NrZXIgcnVuIC1kIC1wIDEwMjU6MTAyNSAtcCA4MDI1OjgwMjUgbWFpbGhvZy9tYWlsaG9nIG91IHZlcmlmaXF1ZSBzZSBvIHNlcnZpw6dvIGVzdMOhIGF0aXZvJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnVmVyaWZpcXVlIFNNVFBfSE9TVCBlIFNNVFBfUE9SVCwgZSBzdWEgY29uZXjDo28gZGUgaW50ZXJuZXQnO1xuICAgIH1cblxuICAgIGlmIChlcnJvckNvZGUgPT09ICdFTk9URk9VTkQnKSB7XG4gICAgICBpZiAodGhpcy5pc01haWxIb2coc210cEhvc3QsIHNtdHBQb3J0KSkge1xuICAgICAgICByZXR1cm4gJ0hvc3QgTWFpbEhvZyBuw6NvIGVuY29udHJhZG8uIFZlcmlmaXF1ZSBzZSBlc3TDoSByb2RhbmRvIGVtIGxvY2FsaG9zdDoxMDI1JztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnSG9zdCBTTVRQIG7Do28gZW5jb250cmFkby4gVmVyaWZpcXVlIFNNVFBfSE9TVCc7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yQ29kZSA9PT0gJ0VUSU1FRE9VVCcpIHtcbiAgICAgIGlmICh0aGlzLmlzTWFpbEhvZyhzbXRwSG9zdCwgc210cFBvcnQpKSB7XG4gICAgICAgIHJldHVybiAnVGltZW91dCBjb25lY3RhbmRvIGFvIE1haWxIb2cuIFZlcmlmaXF1ZSBzZSBlc3TDoSByb2RhbmRvIGUgYWNlc3PDrXZlbCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1RpbWVvdXQgbmEgY29uZXjDo28gU01UUC4gVmVyaWZpcXVlIGZpcmV3YWxsIGUgY29uZWN0aXZpZGFkZSc7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yTWVzc2FnZS5pbmNsdWRlcygnc3RhcnR0bHMnKSkge1xuICAgICAgcmV0dXJuICdQcm9ibGVtYSBjb20gVExTIC0gcGFyYSBNYWlsSG9nIHVzZSBwb3J0YSAxMDI1LCBwYXJhIG91dHJvcyB0ZW50ZSBTTVRQX1NFQ1VSRT1mYWxzZSBlIFNNVFBfUE9SVD01ODcnO1xuICAgIH1cblxuICAgIHJldHVybiAnVmVyaWZpcXVlIHRvZGFzIGFzIGNvbmZpZ3VyYcOnw7VlcyBTTVRQIG5vIGFycXVpdm8gLmVudic7XG4gIH1cblxuICAvKipcbiAgICogRW52aWEgZW1haWwgZGUgcmVjdXBlcmHDp8OjbyBkZSBzZW5oYVxuICAgKi9cbiAgYXN5bmMgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbChcbiAgICBlbWFpbDogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICByZXNldFRva2VuOiBzdHJpbmcsXG4gICAgZXhwaXJlc0luOiBudW1iZXIsXG4gICk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHJlc2V0VXJsID0gYCR7dGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdGUk9OVEVORF9VUkwnKX0vcmVzZXQtcGFzc3dvcmQ/dG9rZW49JHtyZXNldFRva2VufWA7XG4gICAgY29uc3QgZXhwaXJlc0F0ID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIGV4cGlyZXNJbiAqIDYwICogMTAwMCk7XG5cbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnNlbmRFbWFpbCh7XG4gICAgICB0bzogZW1haWwsXG4gICAgICB0ZW1wbGF0ZTogJ3Bhc3N3b3JkLXJlc2V0JyxcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgcmVzZXRVcmwsXG4gICAgICAgIGV4cGlyZXNBdDogZXhwaXJlc0F0LnRvTG9jYWxlU3RyaW5nKCdwdC1CUicpLFxuICAgICAgICBleHBpcmVzSW5NaW51dGVzOiBleHBpcmVzSW4sXG4gICAgICAgIHN1cHBvcnRFbWFpbDogdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KFxuICAgICAgICAgICdTVVBQT1JUX0VNQUlMJyxcbiAgICAgICAgICAnc3Vwb3J0ZUBzZW10YXMuZ292LmJyJyxcbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoJ0ZhbGhhIGFvIGVudmlhciBlbWFpbCBkZSByZWN1cGVyYcOnw6NvIGRlIHNlbmhhJywge1xuICAgICAgICBlbWFpbCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZXhwaXJlc0luLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnZpYSBlbWFpbCBkZSBjb25maXJtYcOnw6NvIGRlIHJlc2V0IGRlIHNlbmhhXG4gICAqL1xuICBhc3luYyBzZW5kUGFzc3dvcmRSZXNldENvbmZpcm1hdGlvbkVtYWlsKFxuICAgIGVtYWlsOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5zZW5kRW1haWwoe1xuICAgICAgdG86IGVtYWlsLFxuICAgICAgdGVtcGxhdGU6ICdwYXNzd29yZC1yZXNldC1jb25maXJtYXRpb24nLFxuICAgICAgY29udGV4dDoge1xuICAgICAgICBuYW1lLFxuICAgICAgICBsb2dpblVybDogYCR7dGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdGUk9OVEVORF9VUkwnKX0vbG9naW5gLFxuICAgICAgICBzdXBwb3J0RW1haWw6IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPihcbiAgICAgICAgICAnU1VQUE9SVF9FTUFJTCcsXG4gICAgICAgICAgJ3N1cG9ydGVAc2VtdGFzLmdvdi5icicsXG4gICAgICAgICksXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEVudmlhIGVtYWlsIGRlIG5vdGlmaWNhw6fDo28gZGUgdGVudGF0aXZhIHN1c3BlaXRhXG4gICAqL1xuICBhc3luYyBzZW5kU3VzcGljaW91c0FjdGl2aXR5RW1haWwoXG4gICAgZW1haWw6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgYWN0aXZpdHk6IHN0cmluZyxcbiAgICBpcEFkZHJlc3M6IHN0cmluZyxcbiAgICB1c2VyQWdlbnQ6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZEVtYWlsKHtcbiAgICAgIHRvOiBlbWFpbCxcbiAgICAgIHRlbXBsYXRlOiAnc3VzcGljaW91cy1hY3Rpdml0eScsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGFjdGl2aXR5LFxuICAgICAgICBpcEFkZHJlc3MsXG4gICAgICAgIHVzZXJBZ2VudCxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCdwdC1CUicpLFxuICAgICAgICBzdXBwb3J0RW1haWw6IHRoaXMuY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPihcbiAgICAgICAgICAnU1VQUE9SVF9FTUFJTCcsXG4gICAgICAgICAgJ3N1cG9ydGVAc2VtdGFzLmdvdi5icicsXG4gICAgICAgICksXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExpbXBhIG8gY2FjaGUgZGUgdGVtcGxhdGVzXG4gICAqL1xuICBjbGVhclRlbXBsYXRlQ2FjaGUoKTogdm9pZCB7XG4gICAgdGhpcy50ZW1wbGF0ZXNDYWNoZS5jbGVhcigpO1xuICAgIHRoaXMubG9nZ2VyLmxvZygnQ2FjaGUgZGUgdGVtcGxhdGVzIGxpbXBvJyk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgbyBzZXJ2acOnbyBlc3TDoSBmdW5jaW9uYW5kb1xuICAgKi9cbiAgYXN5bmMgaGVhbHRoQ2hlY2soKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKCF0aGlzLmlzRW5hYmxlZCB8fCAhdGhpcy50cmFuc3BvcnRlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnRyYW5zcG9ydGVyLnZlcmlmeSgpO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKCdIZWFsdGggY2hlY2sgZG8gZW1haWwgcGFzc291IC0gY29uZXjDo28gU01UUCBPSycpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKCdIZWFsdGggY2hlY2sgZG8gZW1haWwgZmFsaG91OicsIHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgY29kZTogZXJyb3IuY29kZSxcbiAgICAgICAgc3VnZ2VzdGlvbjogdGhpcy5nZXRTdWdnZXN0aW9uRm9yRXJyb3IoZXJyb3IpLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9idMOpbSBlc3RhdMOtc3RpY2FzIGRvIHNlcnZpw6dvXG4gICAqL1xuICBnZXRTdGF0cygpOiB7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICB0ZW1wbGF0ZXNMb2FkZWQ6IG51bWJlcjtcbiAgICB0cmFuc3BvcnRlclJlYWR5OiBib29sZWFuO1xuICAgIGVudmlyb25tZW50OiBzdHJpbmc7XG4gICAgc210cENvbmZpZzoge1xuICAgICAgaG9zdDogc3RyaW5nO1xuICAgICAgcG9ydDogbnVtYmVyO1xuICAgICAgc2VjdXJlOiBib29sZWFuO1xuICAgICAgcHJvdmlkZXI6IHN0cmluZztcbiAgICB9O1xuICB9IHtcbiAgICBjb25zdCBob3N0ID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdTTVRQX0hPU1QnKSB8fCAnTi9BJztcbiAgICBjb25zdCBwb3J0ID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldDxudW1iZXI+KCdTTVRQX1BPUlQnLCA1ODcpO1xuXG4gICAgbGV0IHByb3ZpZGVyID0gJ0dlbmVyaWMgU01UUCc7XG4gICAgaWYgKHRoaXMuaXNNYWlsSG9nKGhvc3QsIHBvcnQpKSB7XG4gICAgICBwcm92aWRlciA9ICdNYWlsSG9nIChEZXZlbG9wbWVudCknO1xuICAgIH0gZWxzZSBpZiAoaG9zdC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdtYWlsdHJhcCcpKSB7XG4gICAgICBwcm92aWRlciA9IGhvc3QudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnbGl2ZScpXG4gICAgICAgID8gJ01haWx0cmFwIExpdmUnXG4gICAgICAgIDogJ01haWx0cmFwIFRlc3RpbmcnO1xuICAgIH0gZWxzZSBpZiAoaG9zdC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdnbWFpbCcpKSB7XG4gICAgICBwcm92aWRlciA9ICdHbWFpbCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZWQ6IHRoaXMuaXNFbmFibGVkLFxuICAgICAgdGVtcGxhdGVzTG9hZGVkOiB0aGlzLnRlbXBsYXRlc0NhY2hlLnNpemUsXG4gICAgICB0cmFuc3BvcnRlclJlYWR5OiAhIXRoaXMudHJhbnNwb3J0ZXIsXG4gICAgICBlbnZpcm9ubWVudDogdGhpcy5jb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdOT0RFX0VOVicpIHx8ICdkZXZlbG9wbWVudCcsXG4gICAgICBzbXRwQ29uZmlnOiB7XG4gICAgICAgIGhvc3QsXG4gICAgICAgIHBvcnQsXG4gICAgICAgIHNlY3VyZTogcG9ydCA9PT0gNDY1LFxuICAgICAgICBwcm92aWRlcixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3LDp2EgcmVjb25leMOjbyBkbyB0cmFuc3BvcnRlciAow7p0aWwgcGFyYSB0cm91Ymxlc2hvb3RpbmcpXG4gICAqL1xuICBhc3luYyByZWNvbm5lY3QoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICh0aGlzLnRyYW5zcG9ydGVyKSB7XG4gICAgICAgIHRoaXMudHJhbnNwb3J0ZXIuY2xvc2UoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZVRyYW5zcG9ydGVyKCk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5oZWFsdGhDaGVjaygpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcignRXJybyBhbyByZWNvbmVjdGFyIHRyYW5zcG9ydGVyOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGVzdGEgZW52aW8gZGUgZW1haWwgKMO6dGlsIHBhcmEgdmVyaWZpY2FyIGNvbmZpZ3VyYcOnw6NvKVxuICAgKi9cbiAgYXN5bmMgdGVzdEVtYWlsKHJlY2lwaWVudDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuc2VuZEVtYWlsKHtcbiAgICAgIHRvOiByZWNpcGllbnQsXG4gICAgICBzdWJqZWN0OiAnVGVzdGUgZGUgQ29uZmlndXJhw6fDo28gU01UUCAtIFNFTVRBUycsXG4gICAgICBodG1sOiBgXG4gICAgICAgIDxoMj5UZXN0ZSBkZSBFbWFpbDwvaDI+XG4gICAgICAgIDxwPkVzdGUgw6kgdW0gZW1haWwgZGUgdGVzdGUgcGFyYSB2ZXJpZmljYXIgYSBjb25maWd1cmHDp8OjbyBTTVRQLjwvcD5cbiAgICAgICAgPHA+PHN0cm9uZz5EYXRhL0hvcmE6PC9zdHJvbmc+ICR7bmV3IERhdGUoKS50b0xvY2FsZVN0cmluZygncHQtQlInKX08L3A+XG4gICAgICAgIDxwPjxzdHJvbmc+U2Vydmlkb3I6PC9zdHJvbmc+ICR7dGhpcy5jb25maWdTZXJ2aWNlLmdldCgnU01UUF9IT1NUJyl9PC9wPlxuICAgICAgICA8cD48c3Ryb25nPlBvcnRhOjwvc3Ryb25nPiAke3RoaXMuY29uZmlnU2VydmljZS5nZXQoJ1NNVFBfUE9SVCcpfTwvcD5cbiAgICAgICAgPHA+U2Ugdm9jw6ogcmVjZWJldSBlc3RlIGVtYWlsLCBhIGNvbmZpZ3VyYcOnw6NvIGVzdMOhIGZ1bmNpb25hbmRvIGNvcnJldGFtZW50ZSE8L3A+XG4gICAgICBgLFxuICAgICAgdGV4dDogYFxuICAgICAgICBUZXN0ZSBkZSBFbWFpbCAtIFNFTVRBU1xuICAgICAgICBcbiAgICAgICAgRXN0ZSDDqSB1bSBlbWFpbCBkZSB0ZXN0ZSBwYXJhIHZlcmlmaWNhciBhIGNvbmZpZ3VyYcOnw6NvIFNNVFAuXG4gICAgICAgIERhdGEvSG9yYTogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKCdwdC1CUicpfVxuICAgICAgICBTZXJ2aWRvcjogJHt0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdTTVRQX0hPU1QnKX1cbiAgICAgICAgUG9ydGE6ICR7dGhpcy5jb25maWdTZXJ2aWNlLmdldCgnU01UUF9QT1JUJyl9XG4gICAgICAgIFxuICAgICAgICBTZSB2b2PDqiByZWNlYmV1IGVzdGUgZW1haWwsIGEgY29uZmlndXJhw6fDo28gZXN0w6EgZnVuY2lvbmFuZG8gY29ycmV0YW1lbnRlIVxuICAgICAgYCxcbiAgICB9KTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9