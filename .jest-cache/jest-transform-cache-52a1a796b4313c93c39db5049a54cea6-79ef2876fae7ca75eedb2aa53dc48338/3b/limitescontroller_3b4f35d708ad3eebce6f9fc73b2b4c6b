9884d05a700baca24dc6a05dc4a3e0e4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitesController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const limites_service_1 = require("../services/limites.service");
const limites_upload_dto_1 = require("../dtos/limites/limites-upload.dto");
const prazo_update_dto_1 = require("../dtos/limites/prazo-update.dto");
const limites_upload_response_dto_1 = require("../dtos/limites/limites-upload-response.dto");
/**
 * Controlador responsável pelas operações de limites operacionais do sistema
 */
let LimitesController = class LimitesController {
    limitesService;
    constructor(limitesService) {
        this.limitesService = limitesService;
    }
    /**
     * Busca os limites de upload configurados
     * @returns DTO com os limites de upload
     */
    async buscarLimitesUpload() {
        return this.limitesService.buscarLimitesUpload();
    }
    /**
     * Atualiza os limites de upload
     * @param dto DTO com os novos limites
     * @returns DTO com os limites atualizados
     */
    async atualizarLimitesUpload(dto) {
        return this.limitesService.atualizarLimitesUpload(dto);
    }
    /**
     * Busca o prazo configurado para uma etapa específica
     * @param tipo Tipo do prazo
     * @returns Prazo em dias
     */
    async buscarPrazo(tipo) {
        const dias = await this.limitesService.buscarPrazo(tipo);
        return { tipo, dias };
    }
    /**
     * Atualiza o prazo para uma etapa específica
     * @param tipo Tipo do prazo
     * @param dto DTO com o novo prazo
     * @returns Prazo atualizado
     */
    async atualizarPrazo(tipo, dto) {
        const dias = await this.limitesService.atualizarPrazo(tipo, dto);
        return { tipo, dias };
    }
    /**
     * Calcula a data limite para uma etapa com base no prazo configurado
     * @param tipo Tipo do prazo
     * @returns Data limite
     */
    async calcularDataLimite(tipo) {
        const dias = await this.limitesService.buscarPrazo(tipo);
        const dataLimite = await this.limitesService.calcularDataLimite(tipo);
        return { tipo, dias, dataLimite };
    }
};
exports.LimitesController = LimitesController;
__decorate([
    (0, common_1.Get)('upload'),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar limites de upload configurados' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Limites de upload encontrados',
        type: limites_upload_response_dto_1.LimitesUploadResponseDto,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], LimitesController.prototype, "buscarLimitesUpload", null);
__decorate([
    (0, common_1.Put)('upload'),
    (0, swagger_1.ApiOperation)({ summary: 'Atualizar limites de upload' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Limites de upload atualizados com sucesso',
        type: limites_upload_response_dto_1.LimitesUploadResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof limites_upload_dto_1.LimitesUploadDto !== "undefined" && limites_upload_dto_1.LimitesUploadDto) === "function" ? _c : Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], LimitesController.prototype, "atualizarLimitesUpload", null);
__decorate([
    (0, common_1.Get)('prazos/:tipo'),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar prazo configurado para uma etapa' }),
    (0, swagger_1.ApiParam)({
        name: 'tipo',
        description: 'Tipo do prazo (analise, entrevista, recurso, validade)',
        example: 'analise',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Prazo encontrado',
        schema: {
            type: 'object',
            properties: {
                tipo: {
                    type: 'string',
                    description: 'Tipo do prazo',
                    example: 'analise',
                },
                dias: {
                    type: 'number',
                    description: 'Prazo em dias',
                    example: 15,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Tipo de prazo inválido',
    }),
    __param(0, (0, common_1.Param)('tipo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], LimitesController.prototype, "buscarPrazo", null);
__decorate([
    (0, common_1.Put)('prazos/:tipo'),
    (0, swagger_1.ApiOperation)({ summary: 'Atualizar prazo para uma etapa' }),
    (0, swagger_1.ApiParam)({
        name: 'tipo',
        description: 'Tipo do prazo (analise, entrevista, recurso, validade)',
        example: 'analise',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Prazo atualizado com sucesso',
        schema: {
            type: 'object',
            properties: {
                tipo: {
                    type: 'string',
                    description: 'Tipo do prazo',
                    example: 'analise',
                },
                dias: {
                    type: 'number',
                    description: 'Prazo em dias',
                    example: 15,
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou tipo de prazo inválido',
    }),
    __param(0, (0, common_1.Param)('tipo')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof prazo_update_dto_1.PrazoUpdateDto !== "undefined" && prazo_update_dto_1.PrazoUpdateDto) === "function" ? _f : Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], LimitesController.prototype, "atualizarPrazo", null);
__decorate([
    (0, common_1.Get)('prazos/:tipo/data-limite'),
    (0, swagger_1.ApiOperation)({
        summary: 'Calcular data limite com base no prazo configurado',
    }),
    (0, swagger_1.ApiParam)({
        name: 'tipo',
        description: 'Tipo do prazo (analise, entrevista, recurso, validade)',
        example: 'analise',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Data limite calculada',
        schema: {
            type: 'object',
            properties: {
                tipo: {
                    type: 'string',
                    description: 'Tipo do prazo',
                    example: 'analise',
                },
                dias: {
                    type: 'number',
                    description: 'Prazo em dias',
                    example: 15,
                },
                dataLimite: {
                    type: 'string',
                    description: 'Data limite calculada',
                    example: '2025-06-02T20:00:00.000Z',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Tipo de prazo inválido',
    }),
    __param(0, (0, common_1.Param)('tipo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], LimitesController.prototype, "calcularDataLimite", null);
exports.LimitesController = LimitesController = __decorate([
    (0, swagger_1.ApiTags)('Configuração'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Controller)('configuracao/limites'),
    __metadata("design:paramtypes", [typeof (_a = typeof limites_service_1.LimitesService !== "undefined" && limites_service_1.LimitesService) === "function" ? _a : Object])
], LimitesController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,