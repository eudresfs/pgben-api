{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\common\\services\\email.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\common\\services\\email.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as nodemailer from 'nodemailer';\nimport { Transporter } from 'nodemailer';\nimport * as handlebars from 'handlebars';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nexport interface EmailOptions {\n  to: string | string[];\n  subject?: string; // Opcional quando um template é fornecido\n  template?: string;\n  context?: Record<string, any>;\n  html?: string;\n  text?: string;\n  attachments?: Array<{\n    filename: string;\n    content: Buffer | string;\n    contentType?: string;\n  }>;\n}\n\nexport interface EmailTemplate {\n  subject: string;\n  html: string;\n  text?: string;\n}\n\n/**\n * Serviço de envio de emails\n * Suporta templates Handlebars e configuração SMTP\n * Inclui suporte nativo para MailHog, Mailtrap, Gmail e outros provedores\n */\n@Injectable()\nexport class EmailService {\n  private readonly logger = new Logger(EmailService.name);\n  private transporter: Transporter;\n  private templatesCache = new Map<string, EmailTemplate>();\n  private readonly templatesDir: string;\n  private readonly isEnabled: boolean;\n  private readonly isDevelopment: boolean;\n\n  constructor(private readonly configService: ConfigService) {\n    this.templatesDir = path.join(process.cwd(), 'src', 'templates', 'email');\n    this.isEnabled = this.configService.get<boolean>('EMAIL_ENABLED', false);\n    this.isDevelopment =\n      this.configService.get<string>('NODE_ENV') === 'development';\n\n    if (this.isEnabled) {\n      // Inicialização síncrona para garantir que o transporter esteja disponível\n      this.initializeTransporter();\n    } else {\n      this.logger.warn(\n        'Serviço de email desabilitado. Configure EMAIL_ENABLED=true para habilitar.',\n      );\n    }\n  }\n\n  /**\n   * Inicializa o transporter do Nodemailer\n   * Configurado para usar STARTTLS na porta 587, SSL na porta 465, ou MailHog na porta 1025\n   */\n  private initializeTransporter(): void {\n    const host = this.configService.get<string>('SMTP_HOST');\n    const port = this.configService.get<number>('SMTP_PORT', 587);\n    const user = this.configService.get<string>('SMTP_USER');\n    const pass = this.configService.get<string>('SMTP_PASS');\n\n    // Configurações SSL/TLS baseadas na porta e provedor\n    const secure = port === 465; // SSL para porta 465, STARTTLS para porta 587\n    const requireTLS = port === 587 && !this.isMailHog(host, port); // Força STARTTLS apenas para porta 587 (exceto MailHog)\n\n    if (!host) {\n      this.logger.error(\n        'SMTP_HOST não configurado. Verifique as configurações.',\n      );\n      return;\n    }\n\n    // MailHog não requer autenticação\n    const isMailHog = this.isMailHog(host, port);\n\n    if (!isMailHog && (!user || !pass)) {\n      this.logger.error(\n        'Configurações SMTP incompletas. Verifique SMTP_USER e SMTP_PASS (não necessário para MailHog).',\n      );\n      return;\n    }\n\n    // Configurações específicas do MailHog\n    if (isMailHog) {\n      this.transporter = nodemailer.createTransport({\n        host: host!, // Garantido que não é undefined pelo check acima\n        port,\n        secure: false, // MailHog não usa SSL/TLS\n        requireTLS: false,\n        ignoreTLS: true,\n        // MailHog não requer autenticação\n        auth: undefined,\n        pool: false, // Desabilita pool para MailHog\n        connectionTimeout: 10000, // Timeout menor para MailHog\n        greetingTimeout: 5000,\n        socketTimeout: 10000,\n        debug: this.isDevelopment,\n        logger: this.isDevelopment,\n        // Configurações específicas para MailHog\n        tls: {\n          rejectUnauthorized: false,\n        },\n      });\n\n      this.logger.log(\n        `MailHog detectado: ${host}:${port} - Autenticação desabilitada`,\n      );\n      this.verifyConnection().catch((error) => {\n        this.logger.error(\n          'Falha na verificação inicial da conexão MailHog:',\n          error.message,\n        );\n      });\n      return;\n    }\n\n    // Configurações TLS mais flexíveis para outros provedores\n    const tlsOptions = {\n      rejectUnauthorized: this.configService.get<boolean>(\n        'SMTP_REJECT_UNAUTHORIZED',\n        false,\n      ),\n      minVersion: 'TLSv1' as const,\n      maxVersion: 'TLSv1.3' as const,\n      secureProtocol: undefined,\n      ciphers: undefined,\n    };\n\n    this.transporter = nodemailer.createTransport({\n      host: host!, // Garantido que não é undefined pelo check acima\n      port,\n      secure,\n      requireTLS,\n      auth: {\n        user: user!,\n        pass: pass!,\n      },\n      tls: tlsOptions,\n      pool: true,\n      maxConnections: 5,\n      maxMessages: 100,\n      rateLimit: 10,\n      connectionTimeout: 60000,\n      greetingTimeout: 30000,\n      socketTimeout: 60000,\n      ignoreTLS: false,\n      debug: this.isDevelopment,\n      logger: this.isDevelopment,\n    });\n\n    // Configuração de fallback para ambientes de desenvolvimento problemáticos\n    if (this.isDevelopment && host.includes('localhost') && !isMailHog) {\n      this.logger.warn(\n        'Detectado ambiente local - aplicando configurações SSL relaxadas',\n      );\n      this.transporter = nodemailer.createTransport({\n        host: host!,\n        port,\n        secure: false,\n        requireTLS: false,\n        auth: { user: user!, pass: pass! },\n        tls: {\n          rejectUnauthorized: false,\n          ignoreTLS: true,\n        },\n        connectionTimeout: 30000,\n        greetingTimeout: 15000,\n        socketTimeout: 30000,\n        debug: true,\n        logger: true,\n      });\n    }\n\n    // Verificar conexão de forma assíncrona sem bloquear a inicialização\n    this.verifyConnection().catch((error) => {\n      this.logger.error(\n        'Falha na verificação inicial da conexão SMTP:',\n        error.message,\n      );\n    });\n  }\n\n  /**\n   * Verifica se é MailHog baseado no host e porta\n   * Detecta MailHog por múltiplos critérios para garantir compatibilidade\n   */\n  private isMailHog(host: string | undefined, port: number): boolean {\n    if (!host) return false;\n\n    const lowerHost = host.toLowerCase();\n\n    // Detecta MailHog por host ou porta padrão\n    return (\n      lowerHost.includes('mailhog') ||\n      (lowerHost === 'localhost' && port === 1025) ||\n      (lowerHost === '127.0.0.1' && port === 1025) ||\n      lowerHost === 'mailhog' ||\n      port === 1025 // Porta padrão do MailHog\n    );\n  }\n\n  /**\n   * Verifica a conexão SMTP com retry automático\n   */\n  private async verifyConnection(retries = 3): Promise<void> {\n    try {\n      await this.transporter.verify();\n      this.logger.log(\n        `Servidor SMTP configurado com sucesso: ${this.configService.get('SMTP_HOST')}:${this.configService.get('SMTP_PORT')}`,\n      );\n    } catch (error) {\n      const errorInfo = {\n        message: error.message,\n        code: error.code,\n        command: error.command,\n        host: this.configService.get('SMTP_HOST'),\n        port: this.configService.get('SMTP_PORT'),\n        retries: retries - 1,\n      };\n\n      this.logger.error('Erro na configuração SMTP:', errorInfo);\n\n      // Tentativa de fallback para configurações mais permissivas\n      if (retries > 0 && error.code === 'ESOCKET') {\n        this.logger.warn('Tentando configuração SMTP alternativa...');\n\n        // Recriar transporter com configurações mais permissivas\n        const host = this.configService.get<string>('SMTP_HOST');\n        const port = this.configService.get<number>('SMTP_PORT', 587);\n        const user = this.configService.get<string>('SMTP_USER');\n        const pass = this.configService.get<string>('SMTP_PASS');\n\n        this.transporter = nodemailer.createTransport({\n          host: host!,\n          port,\n          secure: false, // Desabilita SSL/TLS inicial\n          requireTLS: false, // Desabilita exigência de TLS\n          auth: { user: user!, pass: pass! },\n          tls: {\n            rejectUnauthorized: false,\n            ignoreTLS: true, // Ignora completamente TLS se necessário\n          },\n          connectionTimeout: 30000,\n          socketTimeout: 30000,\n          debug: this.isDevelopment,\n        });\n\n        // Retry com configuração alternativa\n        setTimeout(() => this.verifyConnection(retries - 1), 2000);\n      }\n    }\n  }\n\n  /**\n   * Obtém email remetente autorizado baseado no provedor SMTP\n   */\n  private getAuthorizedFromEmail(): string {\n    const configuredFrom = this.configService.get<string>('SMTP_FROM');\n    const smtpHost = this.configService.get<string>('SMTP_HOST') || '';\n    const smtpPort = this.configService.get<number>('SMTP_PORT', 587);\n    const smtpUser = this.configService.get<string>('SMTP_USER') || '';\n\n    // Se um FROM específico foi configurado, usar ele (prioridade máxima)\n    if (configuredFrom) {\n      this.logger.debug(`Usando email FROM configurado: ${configuredFrom}`);\n      return configuredFrom;\n    }\n\n    // Para MailHog - aceita qualquer domínio\n    if (this.isMailHog(smtpHost, smtpPort)) {\n      this.logger.debug('MailHog detectado - usando email de desenvolvimento');\n      return 'noreply@localhost.test';\n    }\n\n    // Para Mailtrap Live (produção) - precisa usar domínio verificado\n    if (smtpHost.toLowerCase().includes('live.smtp.mailtrap.io')) {\n      this.logger.error(\n        'Mailtrap Live detectado: Configure SMTP_FROM com seu domínio verificado no Mailtrap. ' +\n          'Exemplo: SMTP_FROM=noreply@seudominio.com',\n      );\n      return smtpUser || 'noreply@example.com';\n    }\n\n    // Para Mailtrap Testing (desenvolvimento)\n    if (\n      smtpHost.toLowerCase().includes('sandbox.smtp.mailtrap.io') ||\n      smtpHost.toLowerCase().includes('send.smtp.mailtrap.io')\n    ) {\n      return 'noreply@localhost.test';\n    }\n\n    // Para Gmail\n    if (smtpHost.toLowerCase().includes('gmail')) {\n      return smtpUser;\n    }\n\n    // Para outros provedores, tentar usar usuário SMTP\n    if (smtpUser) {\n      return smtpUser;\n    }\n\n    // Fallback para domínio genérico\n    this.logger.warn(\n      'Usando domínio genérico como remetente - configure SMTP_FROM adequadamente',\n    );\n    return 'noreply@localhost.test';\n  }\n\n  /**\n   * Envia um email com tratamento robusto de erros\n   */\n  async sendEmail(options: EmailOptions): Promise<boolean> {\n    if (!this.isEnabled) {\n      this.logger.warn('Tentativa de envio de email com serviço desabilitado', {\n        to: options.to,\n        subject: options.subject,\n      });\n      return false;\n    }\n\n    if (!this.transporter) {\n      this.logger.error('Transporter não inicializado');\n      return false;\n    }\n\n    try {\n      let html = options.html;\n      let text = options.text;\n      let subject = options.subject;\n\n      // Processar template se especificado\n      if (options.template) {\n        const template = await this.loadTemplate(options.template);\n        if (template) {\n          html = this.compileTemplate(template.html, options.context || {});\n          text = template.text\n            ? this.compileTemplate(template.text, options.context || {})\n            : undefined;\n          subject = this.compileTemplate(\n            template.subject,\n            options.context || {},\n          );\n        } else {\n          this.logger.error(\n            `Template '${options.template}' não pôde ser carregado`,\n          );\n          return false;\n        }\n      }\n\n      // Garantir que o assunto esteja definido\n      if (!subject) {\n        subject = 'Notificação - SEMTAS';\n        this.logger.warn('Email enviado sem assunto definido, usando padrão', {\n          to: options.to,\n          template: options.template,\n        });\n      }\n\n      // Configurar remetente com domínio autorizado\n      const fromEmail = this.getAuthorizedFromEmail();\n      const fromName = this.configService.get<string>(\n        'SMTP_FROM_NAME',\n        'SEMTAS - Sistema',\n      );\n\n      const mailOptions = {\n        from: `\"${fromName}\" <${fromEmail}>`,\n        to: Array.isArray(options.to) ? options.to.join(', ') : options.to,\n        subject,\n        html,\n        text,\n        attachments: options.attachments,\n        // Headers adicionais para identificação\n        headers: {\n          'X-Original-Sender': 'SEMTAS',\n          'X-Mailer': 'SEMTAS Email Service',\n        },\n      };\n\n      // Log detalhado em desenvolvimento\n      if (this.isDevelopment) {\n        this.logger.debug('Enviando email:', {\n          to: mailOptions.to,\n          subject: mailOptions.subject,\n          from: mailOptions.from,\n          hasHtml: !!html,\n          hasText: !!text,\n          attachments: options.attachments?.length || 0,\n        });\n      }\n\n      const result = await this.transporter.sendMail(mailOptions);\n\n      this.logger.log('Email enviado com sucesso', {\n        to: options.to,\n        subject: subject,\n        messageId: result.messageId,\n        response: result.response,\n      });\n\n      return true;\n    } catch (error) {\n      // Log detalhado do erro com sugestões\n      const errorDetails = {\n        message: error.message,\n        code: error.code,\n        command: error.command,\n        to: options.to,\n        subject: options.subject || 'N/A',\n        template: options.template || 'N/A',\n        suggestion: this.getSuggestionForError(error),\n        stack: this.isDevelopment ? error.stack : undefined,\n      };\n\n      this.logger.error('Erro ao enviar email:', errorDetails);\n\n      // Tentar reconectar se for erro de conexão\n      if (error.code === 'ESOCKET' || error.code === 'ECONNECTION') {\n        this.logger.warn(\n          'Erro de conexão detectado, tentando reinicializar transporter...',\n        );\n        setTimeout(() => this.initializeTransporter(), 5000);\n      }\n\n      return false;\n    }\n  }\n\n  /**\n   * Carrega um template de email com cache inteligente\n   */\n  private async loadTemplate(\n    templateName: string,\n  ): Promise<EmailTemplate | null> {\n    // Verificar cache primeiro (apenas em produção)\n    if (!this.isDevelopment && this.templatesCache.has(templateName)) {\n      return this.templatesCache.get(templateName)!;\n    }\n\n    try {\n      const templatePath = path.join(this.templatesDir, templateName);\n\n      // Verificar se o diretório do template existe\n      if (!fs.existsSync(templatePath)) {\n        this.logger.error(\n          `Diretório do template não encontrado: ${templatePath}`,\n        );\n        return null;\n      }\n\n      // Carregar arquivos do template\n      const htmlPath = path.join(templatePath, 'template.hbs');\n      const textPath = path.join(templatePath, 'template.txt');\n      const configPath = path.join(templatePath, 'config.json');\n\n      if (!fs.existsSync(htmlPath)) {\n        this.logger.error(`Template HTML não encontrado: ${htmlPath}`);\n        return null;\n      }\n\n      const html = fs.readFileSync(htmlPath, 'utf8');\n      const text = fs.existsSync(textPath)\n        ? fs.readFileSync(textPath, 'utf8')\n        : undefined;\n\n      let subject = 'Notificação - SEMTAS';\n      if (fs.existsSync(configPath)) {\n        try {\n          const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n          subject = config.subject || subject;\n        } catch (parseError) {\n          this.logger.warn(\n            `Erro ao parsear config.json para template ${templateName}:`,\n            parseError.message,\n          );\n        }\n      }\n\n      const template: EmailTemplate = { subject, html, text };\n\n      // Cache do template (apenas em produção)\n      if (!this.isDevelopment) {\n        this.templatesCache.set(templateName, template);\n      }\n\n      this.logger.debug(`Template '${templateName}' carregado com sucesso`);\n      return template;\n    } catch (error) {\n      this.logger.error(`Erro ao carregar template ${templateName}:`, {\n        message: error.message,\n        stack: this.isDevelopment ? error.stack : undefined,\n      });\n      return null;\n    }\n  }\n\n  /**\n   * Compila um template Handlebars com tratamento de erro melhorado\n   */\n  private compileTemplate(\n    template: string,\n    context: Record<string, any>,\n  ): string {\n    try {\n      const compiledTemplate = handlebars.compile(template);\n      return compiledTemplate(context);\n    } catch (error) {\n      this.logger.error('Erro ao compilar template Handlebars:', {\n        error: error.message,\n        context: Object.keys(context),\n        templatePreview: template.substring(0, 100) + '...',\n      });\n      return template; // Retorna template original em caso de erro\n    }\n  }\n\n  /**\n   * Fornece sugestões baseadas no tipo de erro SMTP\n   */\n  private getSuggestionForError(error: any): string {\n    const errorCode = error.code;\n    const errorMessage = error.message?.toLowerCase() || '';\n    const smtpHost = this.configService.get<string>('SMTP_HOST') || '';\n    const smtpPort = this.configService.get<number>('SMTP_PORT', 587);\n\n    if (\n      errorCode === 'EENVELOPE' &&\n      errorMessage.includes('domain') &&\n      errorMessage.includes('not allowed')\n    ) {\n      if (this.isMailHog(smtpHost, smtpPort)) {\n        return 'MailHog não deveria rejeitar domínios. Verifique se o MailHog está rodando corretamente';\n      }\n      return 'Configure SMTP_FROM com um domínio verificado na sua conta, ou use MailHog para desenvolvimento';\n    }\n\n    if (errorCode === 'EAUTH') {\n      if (this.isMailHog(smtpHost, smtpPort)) {\n        return 'MailHog não requer autenticação. Remova SMTP_USER e SMTP_PASS ou deixe-os vazios';\n      }\n      return 'Verifique suas credenciais SMTP_USER e SMTP_PASS';\n    }\n\n    if (errorCode === 'ESOCKET' || errorCode === 'ECONNECTION') {\n      if (this.isMailHog(smtpHost, smtpPort)) {\n        return 'MailHog não está rodando. Execute: docker run -d -p 1025:1025 -p 8025:8025 mailhog/mailhog ou verifique se o serviço está ativo';\n      }\n      return 'Verifique SMTP_HOST e SMTP_PORT, e sua conexão de internet';\n    }\n\n    if (errorCode === 'ENOTFOUND') {\n      if (this.isMailHog(smtpHost, smtpPort)) {\n        return 'Host MailHog não encontrado. Verifique se está rodando em localhost:1025';\n      }\n      return 'Host SMTP não encontrado. Verifique SMTP_HOST';\n    }\n\n    if (errorCode === 'ETIMEDOUT') {\n      if (this.isMailHog(smtpHost, smtpPort)) {\n        return 'Timeout conectando ao MailHog. Verifique se está rodando e acessível';\n      }\n      return 'Timeout na conexão SMTP. Verifique firewall e conectividade';\n    }\n\n    if (errorMessage.includes('starttls')) {\n      return 'Problema com TLS - para MailHog use porta 1025, para outros tente SMTP_SECURE=false e SMTP_PORT=587';\n    }\n\n    return 'Verifique todas as configurações SMTP no arquivo .env';\n  }\n\n  /**\n   * Envia email de recuperação de senha\n   */\n  async sendPasswordResetEmail(\n    email: string,\n    name: string,\n    resetToken: string,\n    expiresIn: number,\n  ): Promise<boolean> {\n    const resetUrl = `${this.configService.get<string>('FRONTEND_URL')}/reset-password?token=${resetToken}`;\n    const expiresAt = new Date(Date.now() + expiresIn * 60 * 1000);\n\n    const result = await this.sendEmail({\n      to: email,\n      template: 'password-reset',\n      context: {\n        name,\n        resetUrl,\n        expiresAt: expiresAt.toLocaleString('pt-BR'),\n        expiresInMinutes: expiresIn,\n        supportEmail: this.configService.get<string>(\n          'SUPPORT_EMAIL',\n          'suporte@semtas.gov.br',\n        ),\n      },\n    });\n\n    if (!result) {\n      this.logger.error('Falha ao enviar email de recuperação de senha', {\n        email,\n        name,\n        expiresIn,\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Envia email de confirmação de reset de senha\n   */\n  async sendPasswordResetConfirmationEmail(\n    email: string,\n    name: string,\n  ): Promise<boolean> {\n    return this.sendEmail({\n      to: email,\n      template: 'password-reset-confirmation',\n      context: {\n        name,\n        loginUrl: `${this.configService.get<string>('FRONTEND_URL')}/login`,\n        supportEmail: this.configService.get<string>(\n          'SUPPORT_EMAIL',\n          'suporte@semtas.gov.br',\n        ),\n      },\n    });\n  }\n\n  /**\n   * Envia email de notificação de tentativa suspeita\n   */\n  async sendSuspiciousActivityEmail(\n    email: string,\n    name: string,\n    activity: string,\n    ipAddress: string,\n    userAgent: string,\n  ): Promise<boolean> {\n    return this.sendEmail({\n      to: email,\n      template: 'suspicious-activity',\n      context: {\n        name,\n        activity,\n        ipAddress,\n        userAgent,\n        timestamp: new Date().toLocaleString('pt-BR'),\n        supportEmail: this.configService.get<string>(\n          'SUPPORT_EMAIL',\n          'suporte@semtas.gov.br',\n        ),\n      },\n    });\n  }\n\n  /**\n   * Limpa o cache de templates\n   */\n  clearTemplateCache(): void {\n    this.templatesCache.clear();\n    this.logger.log('Cache de templates limpo');\n  }\n\n  /**\n   * Verifica se o serviço está funcionando\n   */\n  async healthCheck(): Promise<boolean> {\n    if (!this.isEnabled || !this.transporter) {\n      return false;\n    }\n\n    try {\n      await this.transporter.verify();\n      this.logger.log('Health check do email passou - conexão SMTP OK');\n      return true;\n    } catch (error) {\n      this.logger.error('Health check do email falhou:', {\n        message: error.message,\n        code: error.code,\n        suggestion: this.getSuggestionForError(error),\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Obtém estatísticas do serviço\n   */\n  getStats(): {\n    enabled: boolean;\n    templatesLoaded: number;\n    transporterReady: boolean;\n    environment: string;\n    smtpConfig: {\n      host: string;\n      port: number;\n      secure: boolean;\n      provider: string;\n    };\n  } {\n    const host = this.configService.get<string>('SMTP_HOST') || 'N/A';\n    const port = this.configService.get<number>('SMTP_PORT', 587);\n\n    let provider = 'Generic SMTP';\n    if (this.isMailHog(host, port)) {\n      provider = 'MailHog (Development)';\n    } else if (host.toLowerCase().includes('mailtrap')) {\n      provider = host.toLowerCase().includes('live')\n        ? 'Mailtrap Live'\n        : 'Mailtrap Testing';\n    } else if (host.toLowerCase().includes('gmail')) {\n      provider = 'Gmail';\n    }\n\n    return {\n      enabled: this.isEnabled,\n      templatesLoaded: this.templatesCache.size,\n      transporterReady: !!this.transporter,\n      environment: this.configService.get<string>('NODE_ENV') || 'development',\n      smtpConfig: {\n        host,\n        port,\n        secure: port === 465,\n        provider,\n      },\n    };\n  }\n\n  /**\n   * Força reconexão do transporter (útil para troubleshooting)\n   */\n  async reconnect(): Promise<boolean> {\n    try {\n      if (this.transporter) {\n        this.transporter.close();\n      }\n      this.initializeTransporter();\n      return await this.healthCheck();\n    } catch (error) {\n      this.logger.error('Erro ao reconectar transporter:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Testa envio de email (útil para verificar configuração)\n   */\n  async testEmail(recipient: string): Promise<boolean> {\n    return this.sendEmail({\n      to: recipient,\n      subject: 'Teste de Configuração SMTP - SEMTAS',\n      html: `\n        <h2>Teste de Email</h2>\n        <p>Este é um email de teste para verificar a configuração SMTP.</p>\n        <p><strong>Data/Hora:</strong> ${new Date().toLocaleString('pt-BR')}</p>\n        <p><strong>Servidor:</strong> ${this.configService.get('SMTP_HOST')}</p>\n        <p><strong>Porta:</strong> ${this.configService.get('SMTP_PORT')}</p>\n        <p>Se você recebeu este email, a configuração está funcionando corretamente!</p>\n      `,\n      text: `\n        Teste de Email - SEMTAS\n        \n        Este é um email de teste para verificar a configuração SMTP.\n        Data/Hora: ${new Date().toLocaleString('pt-BR')}\n        Servidor: ${this.configService.get('SMTP_HOST')}\n        Porta: ${this.configService.get('SMTP_PORT')}\n        \n        Se você recebeu este email, a configuração está funcionando corretamente!\n      `,\n    });\n  }\n}\n"],"version":3}