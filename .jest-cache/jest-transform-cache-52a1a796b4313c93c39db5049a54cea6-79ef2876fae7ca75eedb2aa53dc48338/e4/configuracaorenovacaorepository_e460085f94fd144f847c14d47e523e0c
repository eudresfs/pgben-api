b5c967ad37a0ec3cba30162beb5988a6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfiguracaoRenovacaoRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const configuracao_renovacao_entity_1 = require("../../../entities/configuracao-renovacao.entity");
/**
 * Repositório para operações relacionadas à configuração de renovação automática
 */
let ConfiguracaoRenovacaoRepository = class ConfiguracaoRenovacaoRepository {
    repository;
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Cria uma nova configuração de renovação automática
     * @param data Dados da configuração
     * @returns Configuração criada
     */
    async create(data) {
        const configuracao = this.repository.create(data);
        return this.repository.save(configuracao);
    }
    /**
     * Busca todas as configurações de renovação
     * @returns Lista de configurações
     */
    async findAll() {
        return this.repository.find({
            relations: ['tipoBeneficio'],
        });
    }
    /**
     * Busca uma configuração pelo ID
     * @param id ID da configuração
     * @returns Configuração encontrada ou null
     */
    async findById(id) {
        return this.repository.findOne({
            where: { id },
            relations: ['tipoBeneficio'],
        });
    }
    /**
     * Busca uma configuração pelo ID do tipo de benefício
     * @param tipoBeneficioId ID do tipo de benefício
     * @returns Configuração encontrada ou null
     */
    async findByTipoBeneficio(tipoBeneficioId) {
        return this.repository.findOne({
            where: { tipo_beneficio_id: tipoBeneficioId },
            relations: ['tipoBeneficio'],
        });
    }
    /**
     * Busca todas as configurações ativas
     * @returns Lista de configurações ativas
     */
    async findAllActive() {
        return this.repository.find({
            where: { ativo: true },
            relations: ['tipoBeneficio'],
        });
    }
    /**
     * Atualiza uma configuração existente
     * @param id ID da configuração
     * @param data Dados para atualização
     * @returns Configuração atualizada
     */
    async update(id, data) {
        await this.repository.update(id, data);
        const configuracao = await this.findById(id);
        if (!configuracao) {
            throw new common_1.NotFoundException(`Configuração de renovação com ID ${id} não encontrada`);
        }
        return configuracao;
    }
    /**
     * Remove uma configuração
     * @param id ID da configuração
     */
    async remove(id) {
        await this.repository.delete(id);
    }
};
exports.ConfiguracaoRenovacaoRepository = ConfiguracaoRenovacaoRepository;
exports.ConfiguracaoRenovacaoRepository = ConfiguracaoRenovacaoRepository = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(configuracao_renovacao_entity_1.ConfiguracaoRenovacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ConfiguracaoRenovacaoRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGJlbmVmaWNpb1xccmVwb3NpdG9yaWVzXFxjb25maWd1cmFjYW8tcmVub3ZhY2FvLnJlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUErRDtBQUMvRCw2Q0FBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLG1HQUF3RjtBQUV4Rjs7R0FFRztBQUVJLElBQU0sK0JBQStCLEdBQXJDLE1BQU0sK0JBQStCO0lBR3ZCO0lBRm5CLFlBRW1CLFVBQTZDO1FBQTdDLGVBQVUsR0FBVixVQUFVLENBQW1DO0lBQzdELENBQUM7SUFFSjs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FDVixJQUFvQztRQUVwQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsT0FBTztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDMUIsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFVO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7WUFDN0IsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFO1lBQ2IsU0FBUyxFQUFFLENBQUMsZUFBZSxDQUFDO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLG1CQUFtQixDQUN2QixlQUF1QjtRQUV2QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQzdCLEtBQUssRUFBRSxFQUFFLGlCQUFpQixFQUFFLGVBQWUsRUFBRTtZQUM3QyxTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUM7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxhQUFhO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDMUIsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtZQUN0QixTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUM7U0FDN0IsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FDVixFQUFVLEVBQ1YsSUFBb0M7UUFFcEMsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsTUFBTSxZQUFZLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUNsQixNQUFNLElBQUksMEJBQWlCLENBQ3pCLG9DQUFvQyxFQUFFLGlCQUFpQixDQUN4RCxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQVU7UUFDckIsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0YsQ0FBQTtBQTVGWSwwRUFBK0I7MENBQS9CLCtCQUErQjtJQUQzQyxJQUFBLG1CQUFVLEdBQUU7SUFHUixXQUFBLElBQUEsMEJBQWdCLEVBQUMscURBQXFCLENBQUMsQ0FBQTt5REFDWCxvQkFBVSxvQkFBVixvQkFBVTtHQUg5QiwrQkFBK0IsQ0E0RjNDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxiZW5lZmljaW9cXHJlcG9zaXRvcmllc1xcY29uZmlndXJhY2FvLXJlbm92YWNhby5yZXBvc2l0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5vdEZvdW5kRXhjZXB0aW9uIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XG5pbXBvcnQgeyBDb25maWd1cmFjYW9SZW5vdmFjYW8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdGllcy9jb25maWd1cmFjYW8tcmVub3ZhY2FvLmVudGl0eSc7XG5cbi8qKlxuICogUmVwb3NpdMOzcmlvIHBhcmEgb3BlcmHDp8O1ZXMgcmVsYWNpb25hZGFzIMOgIGNvbmZpZ3VyYcOnw6NvIGRlIHJlbm92YcOnw6NvIGF1dG9tw6F0aWNhXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25maWd1cmFjYW9SZW5vdmFjYW9SZXBvc2l0b3J5IHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdFJlcG9zaXRvcnkoQ29uZmlndXJhY2FvUmVub3ZhY2FvKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxDb25maWd1cmFjYW9SZW5vdmFjYW8+LFxuICApIHt9XG5cbiAgLyoqXG4gICAqIENyaWEgdW1hIG5vdmEgY29uZmlndXJhw6fDo28gZGUgcmVub3Zhw6fDo28gYXV0b23DoXRpY2FcbiAgICogQHBhcmFtIGRhdGEgRGFkb3MgZGEgY29uZmlndXJhw6fDo29cbiAgICogQHJldHVybnMgQ29uZmlndXJhw6fDo28gY3JpYWRhXG4gICAqL1xuICBhc3luYyBjcmVhdGUoXG4gICAgZGF0YTogUGFydGlhbDxDb25maWd1cmFjYW9SZW5vdmFjYW8+LFxuICApOiBQcm9taXNlPENvbmZpZ3VyYWNhb1Jlbm92YWNhbz4ge1xuICAgIGNvbnN0IGNvbmZpZ3VyYWNhbyA9IHRoaXMucmVwb3NpdG9yeS5jcmVhdGUoZGF0YSk7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5zYXZlKGNvbmZpZ3VyYWNhbyk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgdG9kYXMgYXMgY29uZmlndXJhw6fDtWVzIGRlIHJlbm92YcOnw6NvXG4gICAqIEByZXR1cm5zIExpc3RhIGRlIGNvbmZpZ3VyYcOnw7Vlc1xuICAgKi9cbiAgYXN5bmMgZmluZEFsbCgpOiBQcm9taXNlPENvbmZpZ3VyYWNhb1Jlbm92YWNhb1tdPiB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5maW5kKHtcbiAgICAgIHJlbGF0aW9uczogWyd0aXBvQmVuZWZpY2lvJ10sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgdW1hIGNvbmZpZ3VyYcOnw6NvIHBlbG8gSURcbiAgICogQHBhcmFtIGlkIElEIGRhIGNvbmZpZ3VyYcOnw6NvXG4gICAqIEByZXR1cm5zIENvbmZpZ3VyYcOnw6NvIGVuY29udHJhZGEgb3UgbnVsbFxuICAgKi9cbiAgYXN5bmMgZmluZEJ5SWQoaWQ6IHN0cmluZyk6IFByb21pc2U8Q29uZmlndXJhY2FvUmVub3ZhY2FvIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZE9uZSh7XG4gICAgICB3aGVyZTogeyBpZCB9LFxuICAgICAgcmVsYXRpb25zOiBbJ3RpcG9CZW5lZmljaW8nXSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSB1bWEgY29uZmlndXJhw6fDo28gcGVsbyBJRCBkbyB0aXBvIGRlIGJlbmVmw61jaW9cbiAgICogQHBhcmFtIHRpcG9CZW5lZmljaW9JZCBJRCBkbyB0aXBvIGRlIGJlbmVmw61jaW9cbiAgICogQHJldHVybnMgQ29uZmlndXJhw6fDo28gZW5jb250cmFkYSBvdSBudWxsXG4gICAqL1xuICBhc3luYyBmaW5kQnlUaXBvQmVuZWZpY2lvKFxuICAgIHRpcG9CZW5lZmljaW9JZDogc3RyaW5nLFxuICApOiBQcm9taXNlPENvbmZpZ3VyYWNhb1Jlbm92YWNhbyB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmZpbmRPbmUoe1xuICAgICAgd2hlcmU6IHsgdGlwb19iZW5lZmljaW9faWQ6IHRpcG9CZW5lZmljaW9JZCB9LFxuICAgICAgcmVsYXRpb25zOiBbJ3RpcG9CZW5lZmljaW8nXSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSB0b2RhcyBhcyBjb25maWd1cmHDp8O1ZXMgYXRpdmFzXG4gICAqIEByZXR1cm5zIExpc3RhIGRlIGNvbmZpZ3VyYcOnw7VlcyBhdGl2YXNcbiAgICovXG4gIGFzeW5jIGZpbmRBbGxBY3RpdmUoKTogUHJvbWlzZTxDb25maWd1cmFjYW9SZW5vdmFjYW9bXT4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZCh7XG4gICAgICB3aGVyZTogeyBhdGl2bzogdHJ1ZSB9LFxuICAgICAgcmVsYXRpb25zOiBbJ3RpcG9CZW5lZmljaW8nXSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHVhbGl6YSB1bWEgY29uZmlndXJhw6fDo28gZXhpc3RlbnRlXG4gICAqIEBwYXJhbSBpZCBJRCBkYSBjb25maWd1cmHDp8Ojb1xuICAgKiBAcGFyYW0gZGF0YSBEYWRvcyBwYXJhIGF0dWFsaXphw6fDo29cbiAgICogQHJldHVybnMgQ29uZmlndXJhw6fDo28gYXR1YWxpemFkYVxuICAgKi9cbiAgYXN5bmMgdXBkYXRlKFxuICAgIGlkOiBzdHJpbmcsXG4gICAgZGF0YTogUGFydGlhbDxDb25maWd1cmFjYW9SZW5vdmFjYW8+LFxuICApOiBQcm9taXNlPENvbmZpZ3VyYWNhb1Jlbm92YWNhbz4ge1xuICAgIGF3YWl0IHRoaXMucmVwb3NpdG9yeS51cGRhdGUoaWQsIGRhdGEpO1xuICAgIGNvbnN0IGNvbmZpZ3VyYWNhbyA9IGF3YWl0IHRoaXMuZmluZEJ5SWQoaWQpO1xuICAgIGlmICghY29uZmlndXJhY2FvKSB7XG4gICAgICB0aHJvdyBuZXcgTm90Rm91bmRFeGNlcHRpb24oXG4gICAgICAgIGBDb25maWd1cmHDp8OjbyBkZSByZW5vdmHDp8OjbyBjb20gSUQgJHtpZH0gbsOjbyBlbmNvbnRyYWRhYCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb25maWd1cmFjYW87XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHVtYSBjb25maWd1cmHDp8Ojb1xuICAgKiBAcGFyYW0gaWQgSUQgZGEgY29uZmlndXJhw6fDo29cbiAgICovXG4gIGFzeW5jIHJlbW92ZShpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5yZXBvc2l0b3J5LmRlbGV0ZShpZCk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==