{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\configuracao-renovacao.repository.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,mGAAwF;AAExF;;GAEG;AAEI,IAAM,+BAA+B,GAArC,MAAM,+BAA+B;IAGvB;IAFnB,YAEmB,UAA6C;QAA7C,eAAU,GAAV,UAAU,CAAmC;IAC7D,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,MAAM,CACV,IAAoC;QAEpC,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,EAAE,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,mBAAmB,CACvB,eAAuB;QAEvB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,EAAE,iBAAiB,EAAE,eAAe,EAAE;YAC7C,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,aAAa;QACjB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE;YACtB,SAAS,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CACV,EAAU,EACV,IAAoC;QAEpC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACvC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,0BAAiB,CACzB,oCAAoC,EAAE,iBAAiB,CACxD,CAAC;QACJ,CAAC;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;CACF,CAAA;AA5FY,0EAA+B;0CAA/B,+BAA+B;IAD3C,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,qDAAqB,CAAC,CAAA;yDACX,oBAAU,oBAAV,oBAAU;GAH9B,+BAA+B,CA4F3C","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\configuracao-renovacao.repository.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConfiguracaoRenovacao } from '../../../entities/configuracao-renovacao.entity';\n\n/**\n * Repositório para operações relacionadas à configuração de renovação automática\n */\n@Injectable()\nexport class ConfiguracaoRenovacaoRepository {\n  constructor(\n    @InjectRepository(ConfiguracaoRenovacao)\n    private readonly repository: Repository<ConfiguracaoRenovacao>,\n  ) {}\n\n  /**\n   * Cria uma nova configuração de renovação automática\n   * @param data Dados da configuração\n   * @returns Configuração criada\n   */\n  async create(\n    data: Partial<ConfiguracaoRenovacao>,\n  ): Promise<ConfiguracaoRenovacao> {\n    const configuracao = this.repository.create(data);\n    return this.repository.save(configuracao);\n  }\n\n  /**\n   * Busca todas as configurações de renovação\n   * @returns Lista de configurações\n   */\n  async findAll(): Promise<ConfiguracaoRenovacao[]> {\n    return this.repository.find({\n      relations: ['tipoBeneficio'],\n    });\n  }\n\n  /**\n   * Busca uma configuração pelo ID\n   * @param id ID da configuração\n   * @returns Configuração encontrada ou null\n   */\n  async findById(id: string): Promise<ConfiguracaoRenovacao | null> {\n    return this.repository.findOne({\n      where: { id },\n      relations: ['tipoBeneficio'],\n    });\n  }\n\n  /**\n   * Busca uma configuração pelo ID do tipo de benefício\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns Configuração encontrada ou null\n   */\n  async findByTipoBeneficio(\n    tipoBeneficioId: string,\n  ): Promise<ConfiguracaoRenovacao | null> {\n    return this.repository.findOne({\n      where: { tipo_beneficio_id: tipoBeneficioId },\n      relations: ['tipoBeneficio'],\n    });\n  }\n\n  /**\n   * Busca todas as configurações ativas\n   * @returns Lista de configurações ativas\n   */\n  async findAllActive(): Promise<ConfiguracaoRenovacao[]> {\n    return this.repository.find({\n      where: { ativo: true },\n      relations: ['tipoBeneficio'],\n    });\n  }\n\n  /**\n   * Atualiza uma configuração existente\n   * @param id ID da configuração\n   * @param data Dados para atualização\n   * @returns Configuração atualizada\n   */\n  async update(\n    id: string,\n    data: Partial<ConfiguracaoRenovacao>,\n  ): Promise<ConfiguracaoRenovacao> {\n    await this.repository.update(id, data);\n    const configuracao = await this.findById(id);\n    if (!configuracao) {\n      throw new NotFoundException(\n        `Configuração de renovação com ID ${id} não encontrada`,\n      );\n    }\n    return configuracao;\n  }\n\n  /**\n   * Remove uma configuração\n   * @param id ID da configuração\n   */\n  async remove(id: string): Promise<void> {\n    await this.repository.delete(id);\n  }\n}\n"],"version":3}