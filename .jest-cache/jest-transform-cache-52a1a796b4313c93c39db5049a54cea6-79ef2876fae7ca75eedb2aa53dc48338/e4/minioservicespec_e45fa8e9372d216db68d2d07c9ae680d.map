{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\minio\\services\\minio.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,2CAA6D;AAC7D,wFAAoF;AACpF,6GAAyG;AAEzG,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,OAAqB,CAAC;IAC1B,IAAI,mBAAwC,CAAC;IAC7C,IAAI,eAAoB,CAAC;IAEzB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,eAAe,GAAG;YAChB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;YAC/C,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;YAClD,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;YAC7D,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC3C,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACjC,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;gBACvC,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;gBAC1B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;gBAClD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC;YACF,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC;gBACtC,IAAI,EAAE,GAAG;gBACT,IAAI,EAAE,WAAW;gBACjB,YAAY,EAAE,IAAI,IAAI,EAAE;gBACxB,QAAQ,EAAE,EAAE,cAAc,EAAE,iBAAiB,EAAE;aAChD,CAAC;YACF,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;YACpD,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBAC7C,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACjC,MAAM,QAAQ,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;gBAC3D,QAAQ,CAAC,KAAK,GAAG,GAAG,EAAE,GAAE,CAAC,CAAC;gBAC1B,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,cAAc;oBACpB,IAAI,EAAE,GAAG;oBACT,YAAY,EAAE,IAAI,IAAI,EAAE;iBACzB,CAAC,CAAC;gBACH,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,cAAc;oBACpB,IAAI,EAAE,GAAG;oBACT,YAAY,EAAE,IAAI,IAAI,EAAE;iBACzB,CAAC,CAAC;gBACH,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC;YACF,kBAAkB,EAAE,IAAI;iBACrB,EAAE,EAAE;iBACJ,iBAAiB,CAAC,8CAA8C,CAAC;YACpE,kBAAkB,EAAE,IAAI;iBACrB,EAAE,EAAE;iBACJ,iBAAiB,CAChB,qDAAqD,CACtD;SACJ,CAAC;QAEF,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,OAAO,EAAE;gBACP,qBAAY,CAAC,OAAO,CAAC;oBACnB,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,WAAW;iBACzB,CAAC;aACH;YACD,SAAS,EAAE;gBACT,4BAAY;gBACZ;oBACE,OAAO,EAAE,0CAAmB;oBAC5B,QAAQ,EAAE;wBACR,mBAAmB,EAAE,IAAI;6BACtB,EAAE,EAAE;6BACJ,kBAAkB,CAAC,CAAC,MAAM,EAAE,EAAE,CAC7B,MAAM,CAAC,IAAI,CAAC,iBAAiB,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC,CAClD;wBACH,sBAAsB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,EAAE;4BAC9D,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;4BAC9B,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;wBACxD,CAAC,CAAC;qBACH;iBACF;gBACD;oBACE,OAAO,EAAE,sBAAa;oBACtB,QAAQ,EAAE;wBACR,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,EAAE;4BAC3B,IAAI,GAAG,KAAK,gBAAgB,EAAE,CAAC;gCAC7B,OAAO,WAAW,CAAC;4BACrB,CAAC;4BACD,IAAI,GAAG,KAAK,YAAY,EAAE,CAAC;gCACzB,OAAO,IAAI,CAAC;4BACd,CAAC;4BACD,IAAI,GAAG,KAAK,kBAAkB,EAAE,CAAC;gCAC/B,OAAO,YAAY,CAAC;4BACtB,CAAC;4BACD,IAAI,GAAG,KAAK,kBAAkB,EAAE,CAAC;gCAC/B,OAAO,YAAY,CAAC;4BACtB,CAAC;4BACD,IAAI,GAAG,KAAK,sBAAsB,EAAE,CAAC;gCACnC,OAAO,kBAAkB,CAAC;4BAC5B,CAAC;4BACD,IAAI,GAAG,KAAK,eAAe,EAAE,CAAC;gCAC5B,OAAO,KAAK,CAAC;4BACf,CAAC;4BACD,OAAO,IAAI,CAAC;wBACd,CAAC,CAAC;qBACH;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAe,4BAAY,CAAC,CAAC;QACjD,mBAAmB,GAAG,MAAM,CAAC,GAAG,CAAsB,0CAAmB,CAAC,CAAC;QAE3E,2CAA2C;QAC3C,OAAO,CAAC,aAAa,CAAC,GAAG,eAAe,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAElC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvD,kBAAkB,CACnB,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,eAAe,CAAC,YAAY,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;YAE1D,MAAM,OAAO,CAAC,iBAAiB,EAAE,CAAC;YAElC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvD,kBAAkB,CACnB,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,oBAAoB,CACrD,kBAAkB,EAClB,WAAW,CACZ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAClD,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,WAAW,GAAG,iBAAiB,CAAC;YACtC,MAAM,SAAS,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;YAC5D,MAAM,YAAY,GAAG,IAAI,CAAC;YAE1B,MAAM,OAAO,CAAC,aAAa,CACzB,MAAM,EACN,WAAW,EACX,MAAM,EACN,WAAW,EACX,SAAS,EACT,YAAY,CACb,CAAC;YAEF,MAAM,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC,oBAAoB,CAClE,MAAM,CACP,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpD,MAAM,EACN,WAAW,EACX,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAClB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAClB,MAAM,CAAC,gBAAgB,CAAC;gBACtB,cAAc,EAAE,WAAW;gBAC3B,UAAU,EAAE,KAAK;gBACjB,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,MAAM;aACtB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAClD,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,WAAW,GAAG,iBAAiB,CAAC;YACtC,MAAM,SAAS,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;YAC5D,MAAM,YAAY,GAAG,KAAK,CAAC;YAE3B,MAAM,OAAO,CAAC,aAAa,CACzB,MAAM,EACN,WAAW,EACX,MAAM,EACN,WAAW,EACX,SAAS,EACT,YAAY,CACb,CAAC;YAEF,MAAM,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YACvE,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpD,MAAM,EACN,WAAW,EACX,MAAM,EACN,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,gBAAgB,CAAC;gBACtB,cAAc,EAAE,WAAW;gBAC3B,UAAU,EAAE,KAAK;gBACjB,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,OAAO;aACvB,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAClD,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,WAAW,GAAG,iBAAiB,CAAC;YAEtC,MAAM,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;YAEpE,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpD,kBAAkB,EAClB,WAAW,EACX,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAClB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAClB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CACnB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACtE,eAAe,CAAC,UAAU,CAAC,qBAAqB,CAAC;gBAC/C,QAAQ,EAAE,EAAE,cAAc,EAAE,iBAAiB,EAAE,aAAa,EAAE,MAAM,EAAE;aACvE,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAElC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAErE,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpD,MAAM,EACN,WAAW,CACZ,CAAC;YACF,MAAM,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACtE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,eAAe,CAAC,UAAU,CAAC,qBAAqB,CAAC;gBAC/C,QAAQ,EAAE,EAAE,cAAc,EAAE,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE;aACxE,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAElC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAErE,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpD,MAAM,EACN,WAAW,CACZ,CAAC;YACF,MAAM,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAC1E,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,eAAe,CAAC,UAAU,CAAC,qBAAqB,CAAC;gBAC/C,QAAQ,EAAE,EAAE,cAAc,EAAE,iBAAiB,EAAE,aAAa,EAAE,OAAO,EAAE;aACxE,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,eAAe,CAAC;YAEpC,MAAM,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;YAE3C,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACpD,kBAAkB,EAClB,WAAW,CACZ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAElC,MAAM,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAElD,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvD,MAAM,EACN,WAAW,CACZ,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,WAAW,GAAG,eAAe,CAAC;YAEpC,MAAM,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvD,kBAAkB,EAClB,WAAW,CACZ,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,MAAM,GAAG,cAAc,CAAC;YAE9B,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YAE/D,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,oBAAoB,CACtD,MAAM,EACN,MAAM,EACN,IAAI,CACL,CAAC;YACF,MAAM,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC/C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,MAAM,GAAG,cAAc,CAAC;YAE9B,MAAM,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAE3C,MAAM,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,oBAAoB,CACtD,kBAAkB,EAClB,MAAM,EACN,IAAI,CACL,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,iBAAiB,GAAG,GAAG,CAAC;YAE9B,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,gBAAgB,CACxC,WAAW,EACX,MAAM,EACN,iBAAiB,CAClB,CAAC;YAEF,MAAM,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAC7D,MAAM,EACN,WAAW,EACX,iBAAiB,CAClB,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,WAAW,GAAG,eAAe,CAAC;YAEpC,MAAM,OAAO,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;YAE5C,MAAM,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAC7D,kBAAkB,EAClB,WAAW,EACX,EAAE,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,WAAW,GAAG,eAAe,CAAC;YACpC,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,iBAAiB,GAAG,GAAG,CAAC;YAE9B,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,cAAc,CACtC,WAAW,EACX,MAAM,EACN,iBAAiB,CAClB,CAAC;YAEF,MAAM,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAC7D,MAAM,EACN,WAAW,EACX,iBAAiB,CAClB,CAAC;YACF,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,qDAAqD,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,WAAW,GAAG,eAAe,CAAC;YAEpC,MAAM,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAE1C,MAAM,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAC7D,kBAAkB,EAClB,WAAW,EACX,EAAE,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\minio\\services\\minio.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MinioService } from '../../../../src/modules/minio/services/minio.service';\nimport { CriptografiaService } from '../../../../src/modules/criptografia/services/criptografia.service';\n\ndescribe('MinioService', () => {\n  let service: MinioService;\n  let criptografiaService: CriptografiaService;\n  let mockMinioClient: any;\n\n  beforeEach(async () => {\n    mockMinioClient = {\n      bucketExists: jest.fn().mockResolvedValue(true),\n      makeBucket: jest.fn().mockResolvedValue(undefined),\n      putObject: jest.fn().mockResolvedValue({ etag: 'mock-etag' }),\n      getObject: jest.fn().mockImplementation(() => {\n        const stream = require('stream');\n        const readable = new stream.Readable();\n        readable._read = () => {};\n        readable.push(Buffer.from('conteúdo do arquivo'));\n        readable.push(null);\n        return readable;\n      }),\n      statObject: jest.fn().mockResolvedValue({\n        size: 100,\n        etag: 'mock-etag',\n        lastModified: new Date(),\n        metaData: { 'content-type': 'application/pdf' },\n      }),\n      removeObject: jest.fn().mockResolvedValue(undefined),\n      listObjects: jest.fn().mockImplementation(() => {\n        const stream = require('stream');\n        const readable = new stream.Readable({ objectMode: true });\n        readable._read = () => {};\n        readable.push({\n          name: 'arquivo1.pdf',\n          size: 100,\n          lastModified: new Date(),\n        });\n        readable.push({\n          name: 'arquivo2.pdf',\n          size: 200,\n          lastModified: new Date(),\n        });\n        readable.push(null);\n        return readable;\n      }),\n      presignedGetObject: jest\n        .fn()\n        .mockResolvedValue('https://minio.exemplo.com/bucket/arquivo.pdf'),\n      presignedPutObject: jest\n        .fn()\n        .mockResolvedValue(\n          'https://minio.exemplo.com/bucket/upload-arquivo.pdf',\n        ),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n      ],\n      providers: [\n        MinioService,\n        {\n          provide: CriptografiaService,\n          useValue: {\n            criptografarArquivo: jest\n              .fn()\n              .mockImplementation((buffer) =>\n                Buffer.from(`criptografado:${buffer.toString()}`),\n              ),\n            descriptografarArquivo: jest.fn().mockImplementation((buffer) => {\n              const str = buffer.toString();\n              return Buffer.from(str.replace('criptografado:', ''));\n            }),\n          },\n        },\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn((key: string) => {\n              if (key === 'MINIO_ENDPOINT') {\n                return 'localhost';\n              }\n              if (key === 'MINIO_PORT') {\n                return 9000;\n              }\n              if (key === 'MINIO_ACCESS_KEY') {\n                return 'minioadmin';\n              }\n              if (key === 'MINIO_SECRET_KEY') {\n                return 'minioadmin';\n              }\n              if (key === 'MINIO_DEFAULT_BUCKET') {\n                return 'pgben-documentos';\n              }\n              if (key === 'MINIO_USE_SSL') {\n                return false;\n              }\n              return null;\n            }),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<MinioService>(MinioService);\n    criptografiaService = module.get<CriptografiaService>(CriptografiaService);\n\n    // Substitui o cliente Minio real pelo mock\n    service['minioClient'] = mockMinioClient;\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('inicializarBucket', () => {\n    it('deve verificar se o bucket existe e não criar se já existir', async () => {\n      await service.inicializarBucket();\n\n      expect(mockMinioClient.bucketExists).toHaveBeenCalledWith(\n        'pgben-documentos',\n      );\n      expect(mockMinioClient.makeBucket).not.toHaveBeenCalled();\n    });\n\n    it('deve criar o bucket se não existir', async () => {\n      mockMinioClient.bucketExists.mockResolvedValueOnce(false);\n\n      await service.inicializarBucket();\n\n      expect(mockMinioClient.bucketExists).toHaveBeenCalledWith(\n        'pgben-documentos',\n      );\n      expect(mockMinioClient.makeBucket).toHaveBeenCalledWith(\n        'pgben-documentos',\n        'us-east-1',\n      );\n    });\n  });\n\n  describe('uploadArquivo', () => {\n    it('deve fazer upload de um arquivo com criptografia', async () => {\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeArquivo = 'documento.pdf';\n      const bucket = 'pgben-documentos';\n      const contentType = 'application/pdf';\n      const metadados = { usuario_id: '123', entidade_id: '456' };\n      const criptografar = true;\n\n      await service.uploadArquivo(\n        buffer,\n        nomeArquivo,\n        bucket,\n        contentType,\n        metadados,\n        criptografar,\n      );\n\n      expect(criptografiaService.criptografarArquivo).toHaveBeenCalledWith(\n        buffer,\n      );\n      expect(mockMinioClient.putObject).toHaveBeenCalledWith(\n        bucket,\n        nomeArquivo,\n        expect.any(Buffer),\n        expect.any(Number),\n        expect.objectContaining({\n          'Content-Type': contentType,\n          usuario_id: '123',\n          entidade_id: '456',\n          criptografado: 'true',\n        }),\n      );\n    });\n\n    it('deve fazer upload de um arquivo sem criptografia quando solicitado', async () => {\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeArquivo = 'documento.pdf';\n      const bucket = 'pgben-documentos';\n      const contentType = 'application/pdf';\n      const metadados = { usuario_id: '123', entidade_id: '456' };\n      const criptografar = false;\n\n      await service.uploadArquivo(\n        buffer,\n        nomeArquivo,\n        bucket,\n        contentType,\n        metadados,\n        criptografar,\n      );\n\n      expect(criptografiaService.criptografarArquivo).not.toHaveBeenCalled();\n      expect(mockMinioClient.putObject).toHaveBeenCalledWith(\n        bucket,\n        nomeArquivo,\n        buffer,\n        buffer.length,\n        expect.objectContaining({\n          'Content-Type': contentType,\n          usuario_id: '123',\n          entidade_id: '456',\n          criptografado: 'false',\n        }),\n      );\n    });\n\n    it('deve usar o bucket padrão quando não especificado', async () => {\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeArquivo = 'documento.pdf';\n      const contentType = 'application/pdf';\n\n      await service.uploadArquivo(buffer, nomeArquivo, null, contentType);\n\n      expect(mockMinioClient.putObject).toHaveBeenCalledWith(\n        'pgben-documentos',\n        nomeArquivo,\n        expect.any(Buffer),\n        expect.any(Number),\n        expect.any(Object),\n      );\n    });\n  });\n\n  describe('downloadArquivo', () => {\n    it('deve baixar e descriptografar um arquivo criptografado', async () => {\n      mockMinioClient.statObject.mockResolvedValueOnce({\n        metaData: { 'content-type': 'application/pdf', criptografado: 'true' },\n      });\n\n      const nomeArquivo = 'documento.pdf';\n      const bucket = 'pgben-documentos';\n\n      const resultado = await service.downloadArquivo(nomeArquivo, bucket);\n\n      expect(mockMinioClient.getObject).toHaveBeenCalledWith(\n        bucket,\n        nomeArquivo,\n      );\n      expect(criptografiaService.descriptografarArquivo).toHaveBeenCalled();\n      expect(resultado.buffer).toBeDefined();\n      expect(resultado.contentType).toBe('application/pdf');\n    });\n\n    it('deve baixar sem descriptografar um arquivo não criptografado', async () => {\n      mockMinioClient.statObject.mockResolvedValueOnce({\n        metaData: { 'content-type': 'application/pdf', criptografado: 'false' },\n      });\n\n      const nomeArquivo = 'documento.pdf';\n      const bucket = 'pgben-documentos';\n\n      const resultado = await service.downloadArquivo(nomeArquivo, bucket);\n\n      expect(mockMinioClient.getObject).toHaveBeenCalledWith(\n        bucket,\n        nomeArquivo,\n      );\n      expect(criptografiaService.descriptografarArquivo).not.toHaveBeenCalled();\n      expect(resultado.buffer).toBeDefined();\n      expect(resultado.contentType).toBe('application/pdf');\n    });\n\n    it('deve usar o bucket padrão quando não especificado', async () => {\n      mockMinioClient.statObject.mockResolvedValueOnce({\n        metaData: { 'content-type': 'application/pdf', criptografado: 'false' },\n      });\n\n      const nomeArquivo = 'documento.pdf';\n\n      await service.downloadArquivo(nomeArquivo);\n\n      expect(mockMinioClient.getObject).toHaveBeenCalledWith(\n        'pgben-documentos',\n        nomeArquivo,\n      );\n    });\n  });\n\n  describe('removerArquivo', () => {\n    it('deve remover um arquivo do bucket', async () => {\n      const nomeArquivo = 'documento.pdf';\n      const bucket = 'pgben-documentos';\n\n      await service.removerArquivo(nomeArquivo, bucket);\n\n      expect(mockMinioClient.removeObject).toHaveBeenCalledWith(\n        bucket,\n        nomeArquivo,\n      );\n    });\n\n    it('deve usar o bucket padrão quando não especificado', async () => {\n      const nomeArquivo = 'documento.pdf';\n\n      await service.removerArquivo(nomeArquivo);\n\n      expect(mockMinioClient.removeObject).toHaveBeenCalledWith(\n        'pgben-documentos',\n        nomeArquivo,\n      );\n    });\n  });\n\n  describe('listarArquivos', () => {\n    it('deve listar arquivos de um bucket', async () => {\n      const bucket = 'pgben-documentos';\n      const prefix = 'usuario/123/';\n\n      const resultado = await service.listarArquivos(bucket, prefix);\n\n      expect(mockMinioClient.listObjects).toHaveBeenCalledWith(\n        bucket,\n        prefix,\n        true,\n      );\n      expect(resultado).toHaveLength(2);\n      expect(resultado[0].nome).toBe('arquivo1.pdf');\n      expect(resultado[1].nome).toBe('arquivo2.pdf');\n    });\n\n    it('deve usar o bucket padrão quando não especificado', async () => {\n      const prefix = 'usuario/123/';\n\n      await service.listarArquivos(null, prefix);\n\n      expect(mockMinioClient.listObjects).toHaveBeenCalledWith(\n        'pgben-documentos',\n        prefix,\n        true,\n      );\n    });\n  });\n\n  describe('gerarUrlDownload', () => {\n    it('deve gerar uma URL de download temporária', async () => {\n      const nomeArquivo = 'documento.pdf';\n      const bucket = 'pgben-documentos';\n      const expiracaoSegundos = 300;\n\n      const url = await service.gerarUrlDownload(\n        nomeArquivo,\n        bucket,\n        expiracaoSegundos,\n      );\n\n      expect(mockMinioClient.presignedGetObject).toHaveBeenCalledWith(\n        bucket,\n        nomeArquivo,\n        expiracaoSegundos,\n      );\n      expect(url).toBe('https://minio.exemplo.com/bucket/arquivo.pdf');\n    });\n\n    it('deve usar o bucket padrão quando não especificado', async () => {\n      const nomeArquivo = 'documento.pdf';\n\n      await service.gerarUrlDownload(nomeArquivo);\n\n      expect(mockMinioClient.presignedGetObject).toHaveBeenCalledWith(\n        'pgben-documentos',\n        nomeArquivo,\n        60,\n      );\n    });\n  });\n\n  describe('gerarUrlUpload', () => {\n    it('deve gerar uma URL de upload temporária', async () => {\n      const nomeArquivo = 'documento.pdf';\n      const bucket = 'pgben-documentos';\n      const expiracaoSegundos = 300;\n\n      const url = await service.gerarUrlUpload(\n        nomeArquivo,\n        bucket,\n        expiracaoSegundos,\n      );\n\n      expect(mockMinioClient.presignedPutObject).toHaveBeenCalledWith(\n        bucket,\n        nomeArquivo,\n        expiracaoSegundos,\n      );\n      expect(url).toBe('https://minio.exemplo.com/bucket/upload-arquivo.pdf');\n    });\n\n    it('deve usar o bucket padrão quando não especificado', async () => {\n      const nomeArquivo = 'documento.pdf';\n\n      await service.gerarUrlUpload(nomeArquivo);\n\n      expect(mockMinioClient.presignedPutObject).toHaveBeenCalledWith(\n        'pgben-documentos',\n        nomeArquivo,\n        60,\n      );\n    });\n  });\n});\n"],"version":3}