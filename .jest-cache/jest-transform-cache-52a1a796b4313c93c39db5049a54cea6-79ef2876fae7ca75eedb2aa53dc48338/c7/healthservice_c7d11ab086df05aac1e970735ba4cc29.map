{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\health.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\health.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { LogAuditoria } from '../../../entities/log-auditoria.entity';\nimport { HealthCheckService } from '../../../shared/services/health-check.service';\n\n/**\n * Serviço responsável por verificar a saúde dos componentes do sistema\n */\n@Injectable()\nexport class HealthService {\n  private readonly logger = new Logger(HealthService.name);\n\n  constructor(\n    private readonly configService: ConfigService,\n    @InjectRepository(LogAuditoria)\n    private readonly logAuditoriaRepository: Repository<LogAuditoria>,\n    private readonly healthCheckService: HealthCheckService,\n  ) {}\n\n  /**\n   * Verifica a saúde geral do sistema\n   * @returns Status de saúde do sistema\n   */\n  async checkHealth(): Promise<any> {\n    const checks = await Promise.all([\n      this.checkDatabase(),\n      this.checkRedis(),\n      this.checkMinIO(),\n    ]);\n\n    const status = checks.every((check) => check.status === 'up')\n      ? 'up'\n      : 'down';\n\n    return {\n      status,\n      timestamp: new Date(),\n      info: {\n        version: process.env.npm_package_version || '1.0.0',\n        environment: this.configService.get('NODE_ENV', 'development'),\n      },\n      details: {\n        database: checks[0],\n        redis: checks[1],\n        minio: checks[2],\n      },\n    };\n  }\n\n  /**\n   * Verifica a conexão com o banco de dados\n   * @returns Status da conexão com o banco de dados\n   */\n  private async checkDatabase(): Promise<any> {\n    try {\n      // Tenta executar uma consulta simples para verificar a conexão\n      await this.logAuditoriaRepository.query('SELECT 1');\n\n      return {\n        status: 'up',\n        responseTime: 0, // Idealmente, mediríamos o tempo de resposta\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar conexão com banco de dados: ${error.message}`,\n      );\n\n      return {\n        status: 'down',\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Verifica a conexão com o Redis\n   * @returns Status da conexão com o Redis\n   */\n  private async checkRedis(): Promise<any> {\n    try {\n      // Utilizamos o serviço de health check para verificar a disponibilidade do Redis\n      const startTime = Date.now();\n      const isAvailable = await this.healthCheckService.isRedisAvailable();\n      const responseTime = Date.now() - startTime;\n\n      // Verificar se o Redis está desabilitado por configuração\n      const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';\n\n      if (disableRedis) {\n        return {\n          status: 'disabled',\n          message: 'Redis desabilitado por configuração',\n          responseTime: 0,\n        };\n      }\n\n      if (isAvailable) {\n        return {\n          status: 'up',\n          responseTime,\n        };\n      } else {\n        return {\n          status: 'down',\n          message: 'Não foi possível conectar ao Redis',\n          responseTime,\n        };\n      }\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar conexão com Redis: ${error.message}`,\n      );\n\n      return {\n        status: 'down',\n        error: error.message,\n      };\n    }\n  }\n\n  /**\n   * Verifica a conexão com o MinIO\n   * @returns Status da conexão com o MinIO\n   */\n  private async checkMinIO(): Promise<any> {\n    try {\n      // Aqui seria ideal ter uma injeção do serviço MinIO para verificar a conexão\n      // Como estamos apenas simulando, retornamos um status positivo\n\n      return {\n        status: 'up',\n        responseTime: 0,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar conexão com MinIO: ${error.message}`,\n      );\n\n      return {\n        status: 'down',\n        error: error.message,\n      };\n    }\n  }\n}\n"],"version":3}