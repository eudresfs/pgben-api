2266c718de42934401c60e891f15f5af
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var HealthService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const log_auditoria_entity_1 = require("../../../entities/log-auditoria.entity");
const health_check_service_1 = require("../../../shared/services/health-check.service");
/**
 * Serviço responsável por verificar a saúde dos componentes do sistema
 */
let HealthService = HealthService_1 = class HealthService {
    configService;
    logAuditoriaRepository;
    healthCheckService;
    logger = new common_1.Logger(HealthService_1.name);
    constructor(configService, logAuditoriaRepository, healthCheckService) {
        this.configService = configService;
        this.logAuditoriaRepository = logAuditoriaRepository;
        this.healthCheckService = healthCheckService;
    }
    /**
     * Verifica a saúde geral do sistema
     * @returns Status de saúde do sistema
     */
    async checkHealth() {
        const checks = await Promise.all([
            this.checkDatabase(),
            this.checkRedis(),
            this.checkMinIO(),
        ]);
        const status = checks.every((check) => check.status === 'up')
            ? 'up'
            : 'down';
        return {
            status,
            timestamp: new Date(),
            info: {
                version: process.env.npm_package_version || '1.0.0',
                environment: this.configService.get('NODE_ENV', 'development'),
            },
            details: {
                database: checks[0],
                redis: checks[1],
                minio: checks[2],
            },
        };
    }
    /**
     * Verifica a conexão com o banco de dados
     * @returns Status da conexão com o banco de dados
     */
    async checkDatabase() {
        try {
            // Tenta executar uma consulta simples para verificar a conexão
            await this.logAuditoriaRepository.query('SELECT 1');
            return {
                status: 'up',
                responseTime: 0, // Idealmente, mediríamos o tempo de resposta
            };
        }
        catch (error) {
            this.logger.error(`Erro ao verificar conexão com banco de dados: ${error.message}`);
            return {
                status: 'down',
                error: error.message,
            };
        }
    }
    /**
     * Verifica a conexão com o Redis
     * @returns Status da conexão com o Redis
     */
    async checkRedis() {
        try {
            // Utilizamos o serviço de health check para verificar a disponibilidade do Redis
            const startTime = Date.now();
            const isAvailable = await this.healthCheckService.isRedisAvailable();
            const responseTime = Date.now() - startTime;
            // Verificar se o Redis está desabilitado por configuração
            const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';
            if (disableRedis) {
                return {
                    status: 'disabled',
                    message: 'Redis desabilitado por configuração',
                    responseTime: 0,
                };
            }
            if (isAvailable) {
                return {
                    status: 'up',
                    responseTime,
                };
            }
            else {
                return {
                    status: 'down',
                    message: 'Não foi possível conectar ao Redis',
                    responseTime,
                };
            }
        }
        catch (error) {
            this.logger.error(`Erro ao verificar conexão com Redis: ${error.message}`);
            return {
                status: 'down',
                error: error.message,
            };
        }
    }
    /**
     * Verifica a conexão com o MinIO
     * @returns Status da conexão com o MinIO
     */
    async checkMinIO() {
        try {
            // Aqui seria ideal ter uma injeção do serviço MinIO para verificar a conexão
            // Como estamos apenas simulando, retornamos um status positivo
            return {
                status: 'up',
                responseTime: 0,
            };
        }
        catch (error) {
            this.logger.error(`Erro ao verificar conexão com MinIO: ${error.message}`);
            return {
                status: 'down',
                error: error.message,
            };
        }
    }
};
exports.HealthService = HealthService;
exports.HealthService = HealthService = HealthService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, typeorm_1.InjectRepository)(log_auditoria_entity_1.LogAuditoria)),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof health_check_service_1.HealthCheckService !== "undefined" && health_check_service_1.HealthCheckService) === "function" ? _c : Object])
], HealthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,