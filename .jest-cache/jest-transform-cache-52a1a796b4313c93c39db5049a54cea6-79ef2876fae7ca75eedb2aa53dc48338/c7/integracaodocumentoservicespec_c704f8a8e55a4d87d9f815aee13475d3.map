{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\integracao-documento.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\integracao-documento.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { of, throwError } from 'rxjs';\nimport { AxiosResponse } from 'axios';\nimport { IntegracaoDocumentoService } from '../../services/integracao-documento.service';\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Testes unitários para o serviço de integração com o módulo de documentos\n * \n * Verifica o funcionamento correto das operações de armazenamento e\n * recuperação de comprovantes de pagamento.\n * \n * @author Equipe PGBen\n */\ndescribe('IntegracaoDocumentoService', () => {\n  let service: IntegracaoDocumentoService;\n  let httpService: HttpService;\n  let configService: ConfigService;\n\n  // Mock do HttpService\n  const mockHttpService = {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn()\n  };\n\n  // Mock do ConfigService\n  const mockConfigService = {\n    get: jest.fn().mockImplementation((key) => {\n      if (key === 'documento.apiUrl') {return 'http://api-documento.pgben.local';}\n      if (key === 'documento.apiKey') {return 'api-key-mock';}\n      if (key === 'documento.categoriaComprovante') {return 'COMPROVANTE_PAGAMENTO';}\n      return null;\n    })\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        IntegracaoDocumentoService,\n        {\n          provide: HttpService,\n          useValue: mockHttpService\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService\n        }\n      ],\n    }).compile();\n\n    service = module.get<IntegracaoDocumentoService>(IntegracaoDocumentoService);\n    httpService = module.get<HttpService>(HttpService);\n    configService = module.get<ConfigService>(ConfigService);\n\n    // Limpar mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  describe('uploadComprovante', () => {\n    const pagamentoId = 'pagamento-id';\n    const usuarioId = 'usuario-id';\n    const arquivo = {\n      originalname: 'comprovante.pdf',\n      mimetype: 'application/pdf',\n      buffer: Buffer.from('conteúdo do arquivo'),\n      size: 1024\n    } as any;\n\n    const mockResposta = {\n      id: 'documento-id',\n      nome: 'comprovante.pdf',\n      tamanho: 1024,\n      tipo: 'application/pdf',\n      categoria: 'COMPROVANTE_PAGAMENTO',\n      referencia: pagamentoId,\n      url: 'http://api-documento.pgben.local/documentos/documento-id',\n      createdAt: '2023-01-01T00:00:00Z'\n    };\n\n    it('deve fazer upload de comprovante com sucesso', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockResposta,\n        status: 201,\n        statusText: 'Created',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.post.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.uploadComprovante(pagamentoId, arquivo, usuarioId);\n\n      // Verificar resultado\n      expect(result).toEqual(mockResposta);\n      expect(mockHttpService.post).toHaveBeenCalledWith(\n        'http://api-documento.pgben.local/documentos',\n        expect.any(FormData),\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock',\n            'Content-Type': expect.stringContaining('multipart/form-data')\n          })\n        })\n      );\n    });\n\n    it('deve propagar erros HTTP durante o upload', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.post.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 500,\n            data: { message: 'Erro interno do servidor' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(service.uploadComprovante(pagamentoId, arquivo, usuarioId)).rejects.toThrow();\n    });\n  });\n\n  describe('obterComprovante', () => {\n    const documentoId = 'documento-id';\n    \n    const mockDocumento = {\n      id: documentoId,\n      nome: 'comprovante.pdf',\n      tamanho: 1024,\n      tipo: 'application/pdf',\n      categoria: 'COMPROVANTE_PAGAMENTO',\n      referencia: 'pagamento-id',\n      url: 'http://api-documento.pgben.local/documentos/documento-id',\n      createdAt: '2023-01-01T00:00:00Z'\n    };\n\n    it('deve obter documento quando encontrado', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockDocumento,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.obterComprovante(documentoId);\n\n      // Verificar resultado\n      expect(result).toEqual(mockDocumento);\n      expect(mockHttpService.get).toHaveBeenCalledWith(\n        `http://api-documento.pgben.local/documentos/${documentoId}`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock'\n          })\n        })\n      );\n    });\n\n    it('deve lançar NotFoundException quando documento não encontrado', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Documento não encontrado' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(service.obterComprovante(documentoId)).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('listarComprovantes', () => {\n    const pagamentoId = 'pagamento-id';\n    \n    const mockComprovantes = [\n      {\n        id: 'documento-1',\n        nome: 'comprovante1.pdf',\n        tamanho: 1024,\n        tipo: 'application/pdf',\n        categoria: 'COMPROVANTE_PAGAMENTO',\n        referencia: pagamentoId,\n        url: 'http://api-documento.pgben.local/documentos/documento-1',\n        createdAt: '2023-01-01T00:00:00Z'\n      },\n      {\n        id: 'documento-2',\n        nome: 'comprovante2.pdf',\n        tamanho: 2048,\n        tipo: 'application/pdf',\n        categoria: 'COMPROVANTE_PAGAMENTO',\n        referencia: pagamentoId,\n        url: 'http://api-documento.pgben.local/documentos/documento-2',\n        createdAt: '2023-01-02T00:00:00Z'\n      }\n    ];\n\n    it('deve listar comprovantes quando encontrados', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockComprovantes,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.listarComprovantes(pagamentoId);\n\n      // Verificar resultado\n      expect(result).toEqual(mockComprovantes);\n      expect(mockHttpService.get).toHaveBeenCalledWith(\n        expect.stringContaining(`referencia=${pagamentoId}`),\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock'\n          })\n        })\n      );\n    });\n\n    it('deve retornar array vazio quando não há comprovantes', async () => {\n      // Configurar mock da resposta HTTP com array vazio\n      const axiosResponse: AxiosResponse = {\n        data: [],\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.listarComprovantes(pagamentoId);\n\n      // Verificar resultado\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('removerComprovante', () => {\n    const documentoId = 'documento-id';\n    const usuarioId = 'usuario-id';\n\n    it('deve remover comprovante com sucesso', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: { success: true },\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.delete.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      await service.removerComprovante(documentoId, usuarioId);\n\n      // Verificar resultado\n      expect(mockHttpService.delete).toHaveBeenCalledWith(\n        `http://api-documento.pgben.local/documentos/${documentoId}`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock',\n            'x-user-id': usuarioId\n          })\n        })\n      );\n    });\n\n    it('deve lançar NotFoundException quando documento não encontrado', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.delete.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Documento não encontrado' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(service.removerComprovante(documentoId, usuarioId)).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve propagar outros erros HTTP', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.delete.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 500,\n            data: { message: 'Erro interno do servidor' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(service.removerComprovante(documentoId, usuarioId)).rejects.toThrow();\n    });\n  });\n});\n"],"version":3}