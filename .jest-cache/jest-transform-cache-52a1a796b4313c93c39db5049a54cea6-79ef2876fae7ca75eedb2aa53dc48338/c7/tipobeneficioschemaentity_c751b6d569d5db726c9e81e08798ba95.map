{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\tipo-beneficio-schema.entity.ts","mappings":";;;;;;;;;;;;;AAAA,qCAUiB;AACjB,qDAAoE;AACpE,mEAAwD;AAoCxD;;;;;;GAMG;AAGI,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAE9B,EAAE,CAAS;IAIX,iBAAiB,CAAS;IAI1B,cAAc,CAAgB;IAI9B,cAAc,CAAS,CAAC,gDAAgD;IAIxE,gBAAgB,CAGd;IAGF,MAAM,CAAS;IAIf,KAAK,CAAU;IAIf,WAAW,CAAU;IAGrB,UAAU,CAAO;IAGjB,UAAU,CAAO;IAGjB,UAAU,CAAQ;IAElB;;OAEG;IACH,SAAS;QACP,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAC7C,OAAO,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,qBAAqB;QACnB,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACzE,CAAC;IAED;;OAEG;IACH,kBAAkB;QAChB,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,IAAY;QAC1B,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;IACzE,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/E,KAAK,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;QACvD,CAAC;QAED,wBAAwB;QACxB,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAClE,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;QACzC,IAAI,WAAW,CAAC,MAAM,KAAK,WAAW,CAAC,IAAI,EAAE,CAAC;YAC5C,KAAK,CAAC,IAAI,CAAC,kCAAkC,CAAC,CAAC;QACjD,CAAC;QAED,uBAAuB;QACvB,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC3C,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;gBACpB,MAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACtE,IAAI,CAAC,iBAAiB,EAAE,CAAC;oBACvB,KAAK,CAAC,IAAI,CAAC,UAAU,KAAK,CAAC,IAAI,mCAAmC,KAAK,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;gBAC9F,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO;YACL,MAAM,EAAE,KAAK,CAAC,MAAM,KAAK,CAAC;YAC1B,KAAK;SACN,CAAC;IACJ,CAAC;CACF,CAAA;AAzGY,kDAAmB;AAE9B;IADC,IAAA,gCAAsB,EAAC,MAAM,CAAC;;+CACpB;AAIX;IAFC,IAAA,gBAAM,GAAE;IACR,IAAA,4BAAU,EAAC,EAAE,OAAO,EAAE,uCAAuC,EAAE,CAAC;;8DACvC;AAI1B;IAFC,IAAA,mBAAS,EAAC,GAAG,EAAE,CAAC,qCAAa,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;IACvD,IAAA,oBAAU,EAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC;kDAC1B,qCAAa,oBAAb,qCAAa;2DAAC;AAI9B;IAFC,IAAA,gBAAM,EAAC,SAAS,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC;IAClC,IAAA,4BAAU,EAAC,EAAE,OAAO,EAAE,yCAAyC,EAAE,CAAC;;2DAC5C;AAIvB;IAFC,IAAA,gBAAM,EAAC,OAAO,CAAC;IACf,IAAA,4BAAU,EAAC,EAAE,OAAO,EAAE,mCAAmC,EAAE,CAAC;;6DAI3D;AAGF;IADC,IAAA,gBAAM,EAAC,SAAS,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;;mDACrC;AAIf;IAFC,IAAA,gBAAM,EAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IACzB,IAAA,2BAAS,EAAC,EAAE,OAAO,EAAE,mCAAmC,EAAE,CAAC;;kDAC7C;AAIf;IAFC,IAAA,gBAAM,EAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAClC,IAAA,4BAAU,GAAE;;wDACQ;AAGrB;IADC,IAAA,0BAAgB,GAAE;kDACP,IAAI,oBAAJ,IAAI;uDAAC;AAGjB;IADC,IAAA,0BAAgB,GAAE;kDACP,IAAI,oBAAJ,IAAI;uDAAC;AAGjB;IADC,IAAA,0BAAgB,GAAE;kDACN,IAAI,oBAAJ,IAAI;uDAAC;8BAzCP,mBAAmB;IAF/B,IAAA,gBAAM,EAAC,uBAAuB,CAAC;IAC/B,IAAA,eAAK,EAAC,CAAC,mBAAmB,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;GAClC,mBAAmB,CAyG/B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\tipo-beneficio-schema.entity.ts"],"sourcesContent":["import {\r\n  Entity,\r\n  PrimaryGeneratedColumn,\r\n  Column,\r\n  CreateDateColumn,\r\n  UpdateDateColumn,\r\n  DeleteDateColumn,\r\n  ManyToOne,\r\n  JoinColumn,\r\n  Index,\r\n} from 'typeorm';\r\nimport { IsNotEmpty, IsBoolean, IsOptional } from 'class-validator';\r\nimport { TipoBeneficio } from './tipo-beneficio.entity';\r\n\r\n/**\r\n * Interface para definir a estrutura de um campo da entidade\r\n */\r\nexport interface CampoEstrutura {\r\n  nome: string;\r\n  tipo: 'string' | 'number' | 'boolean' | 'date' | 'enum' | 'array';\r\n  obrigatorio: boolean;\r\n  label: string;\r\n  descricao?: string;\r\n  validacoes?: {\r\n    min?: number;\r\n    max?: number;\r\n    pattern?: string;\r\n    opcoes?: string[];\r\n  };\r\n  opcoes?: string[];\r\n  dependeDe?: {\r\n    campo: string;\r\n    valor: any;\r\n    condicao: 'igual' | 'diferente' | 'maior' | 'menor' | 'contem';\r\n  };\r\n}\r\n\r\n/**\r\n * Interface para metadados da estrutura\r\n */\r\nexport interface MetadadosEstrutura {\r\n  versao: string;\r\n  descricao: string;\r\n  categoria: string;\r\n  tags?: string[];\r\n  configuracoes?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Entidade para mapear tipos de benefícios com suas estruturas de dados específicas\r\n *\r\n * Esta entidade relaciona cada tipo de benefício com a estrutura tipada\r\n * da entidade de dados correspondente, eliminando a necessidade de\r\n * formulários dinâmicos separados.\r\n */\r\n@Entity('tipo_beneficio_schema')\r\n@Index(['tipo_beneficio_id'], { unique: true })\r\nexport class TipoBeneficioSchema {\r\n  @PrimaryGeneratedColumn('uuid')\r\n  id: string;\r\n\r\n  @Column()\r\n  @IsNotEmpty({ message: 'ID do tipo de benefício é obrigatório' })\r\n  tipo_beneficio_id: string;\r\n\r\n  @ManyToOne(() => TipoBeneficio, { onDelete: 'CASCADE' })\r\n  @JoinColumn({ name: 'tipo_beneficio_id' })\r\n  tipo_beneficio: TipoBeneficio;\r\n\r\n  @Column('varchar', { length: 100 })\r\n  @IsNotEmpty({ message: 'Nome da entidade de dados é obrigatório' })\r\n  entidade_dados: string; // 'DadosNatalidade', 'DadosAluguelSocial', etc.\r\n\r\n  @Column('jsonb')\r\n  @IsNotEmpty({ message: 'Estrutura do schema é obrigatória' })\r\n  schema_estrutura: {\r\n    campos: CampoEstrutura[];\r\n    metadados: MetadadosEstrutura;\r\n  };\r\n\r\n  @Column('varchar', { length: 20, default: '1.0.0' })\r\n  versao: string;\r\n\r\n  @Column({ default: true })\r\n  @IsBoolean({ message: 'Status ativo deve ser um booleano' })\r\n  ativo: boolean;\r\n\r\n  @Column('text', { nullable: true })\r\n  @IsOptional()\r\n  observacoes?: string;\r\n\r\n  @CreateDateColumn()\r\n  created_at: Date;\r\n\r\n  @UpdateDateColumn()\r\n  updated_at: Date;\r\n\r\n  @DeleteDateColumn()\r\n  removed_at?: Date;\r\n\r\n  /**\r\n   * Verifica se o schema foi criado recentemente (últimas 24 horas)\r\n   */\r\n  isRecente(): boolean {\r\n    const umDiaAtras = new Date();\r\n    umDiaAtras.setDate(umDiaAtras.getDate() - 1);\r\n    return this.created_at > umDiaAtras;\r\n  }\r\n\r\n  /**\r\n   * Obtém os campos obrigatórios do schema\r\n   */\r\n  getCamposObrigatorios(): CampoEstrutura[] {\r\n    return this.schema_estrutura.campos.filter(campo => campo.obrigatorio);\r\n  }\r\n\r\n  /**\r\n   * Obtém os campos opcionais do schema\r\n   */\r\n  getCamposOpcionais(): CampoEstrutura[] {\r\n    return this.schema_estrutura.campos.filter(campo => !campo.obrigatorio);\r\n  }\r\n\r\n  /**\r\n   * Busca um campo específico por nome\r\n   */\r\n  getCampoPorNome(nome: string): CampoEstrutura | undefined {\r\n    return this.schema_estrutura.campos.find(campo => campo.nome === nome);\r\n  }\r\n\r\n  /**\r\n   * Valida se a estrutura do schema está correta\r\n   */\r\n  validarEstrutura(): { valido: boolean; erros: string[] } {\r\n    const erros: string[] = [];\r\n\r\n    if (!this.schema_estrutura.campos || this.schema_estrutura.campos.length === 0) {\r\n      erros.push('Schema deve conter pelo menos um campo');\r\n    }\r\n\r\n    // Validar campos únicos\r\n    const nomesCampos = this.schema_estrutura.campos.map(c => c.nome);\r\n    const nomesUnicos = new Set(nomesCampos);\r\n    if (nomesCampos.length !== nomesUnicos.size) {\r\n      erros.push('Nomes de campos devem ser únicos');\r\n    }\r\n\r\n    // Validar dependências\r\n    this.schema_estrutura.campos.forEach(campo => {\r\n      if (campo.dependeDe) {\r\n        const campoReferenciado = this.getCampoPorNome(campo.dependeDe.campo);\r\n        if (!campoReferenciado) {\r\n          erros.push(`Campo '${campo.nome}' depende de campo inexistente '${campo.dependeDe.campo}'`);\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      valido: erros.length === 0,\r\n      erros\r\n    };\r\n  }\r\n}"],"version":3}