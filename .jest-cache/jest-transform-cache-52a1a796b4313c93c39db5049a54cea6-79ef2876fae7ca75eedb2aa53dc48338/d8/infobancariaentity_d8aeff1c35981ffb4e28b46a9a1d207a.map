{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\info-bancaria.entity.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\info-bancaria.entity.ts"],"sourcesContent":["import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsEnum,\n  IsString,\n  MaxLength,\n  MinLength,\n  Matches,\n} from 'class-validator';\nimport { Cidadao } from './cidadao.entity';\nimport { TipoConta, TipoChavePix } from '../enums/info-bancaria.enum';\n\n/**\n * Entidade de Informações Bancárias do Cidadão\n *\n * Armazena dados bancários prioritariamente da conta poupança social do Banco do Brasil\n * e informações da chave PIX para facilitar pagamentos de benefícios eventuais.\n */\n@Entity('info_bancaria')\n@Index(['cidadao_id'], { unique: true }) // Um cidadão pode ter apenas uma conta bancária principal\n@Index(['conta', 'agencia', 'banco'])\n@Index(['chave_pix'])\nexport class InfoBancaria {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * Relacionamento com o cidadão\n   */\n  @Column({ name: 'cidadao_id', type: 'uuid' })\n  cidadao_id: string;\n\n  @ManyToOne(() => Cidadao, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'cidadao_id' })\n  cidadao: Cidadao;\n\n  /**\n   * Dados bancários\n   */\n  @Column({ length: 3 })\n  @IsOptional()\n  @IsString({ message: 'Código do banco deve ser uma string' })\n  @Matches(/^\\d{3}$/, { message: 'Código do banco deve ter 3 dígitos' })\n  banco: string; // Ex: '001' para Banco do Brasil\n\n  @Column({ length: 100 })\n  @IsOptional()\n  @IsString({ message: 'Nome do banco deve ser uma string' })\n  @MaxLength(100, {\n    message: 'Nome do banco deve ter no máximo 100 caracteres',\n  })\n  nome_banco: string; // Ex: 'Banco do Brasil S.A.'\n\n  @Column({ length: 10 })\n  @IsOptional()\n  @IsString({ message: 'Agência deve ser uma string' })\n  @Matches(/^\\d{4,5}(-\\d)?$/, {\n    message: 'Agência deve ter formato válido (ex: 1234 ou 1234-5)',\n  })\n  agencia: string;\n\n  @Column({ length: 20 })\n  @IsOptional()\n  @IsString({ message: 'Conta deve ser uma string' })\n  @Matches(/^\\d{1,15}(-\\d)?$/, { message: 'Conta deve ter formato válido' })\n  conta: string;\n\n  @Column({\n    type: 'enum',\n    enum: TipoConta,\n    enumName: 'tipo_conta_enum',\n    default: TipoConta.POUPANCA_SOCIAL,\n  })\n  @IsEnum(TipoConta, { message: 'Tipo de conta inválido' })\n  @IsOptional()\n  tipo_conta: TipoConta;\n\n  /**\n   * Dados PIX\n   */\n  @Column({ length: 255, nullable: true })\n  @IsNotEmpty({ message: 'Chave PIX é obrigatória' })\n  @IsString({ message: 'Chave PIX deve ser uma string' })\n  @MaxLength(255, { message: 'Chave PIX deve ter no máximo 255 caracteres' })\n  chave_pix: string;\n\n  @Column({\n    type: 'enum',\n    enum: TipoChavePix,\n    enumName: 'tipo_chave_pix_enum',\n    nullable: true,\n  })\n  @IsNotEmpty({ message: 'Tipo da chave PIX é obrigatório' })\n  @IsEnum(TipoChavePix, { message: 'Tipo de chave PIX inválido' })\n  tipo_chave_pix: TipoChavePix;\n\n  /**\n   * Campos de controle\n   */\n  @Column({ type: 'boolean', default: true })\n  ativo: boolean;\n\n  @Column({ type: 'text', nullable: true })\n  @IsOptional()\n  @IsString({ message: 'Observações devem ser uma string' })\n  observacoes: string;\n\n  /**\n   * Campos de auditoria\n   */\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @DeleteDateColumn()\n  removed_at: Date;\n\n  // Getters e Setters\n  get cidadaoId(): string {\n    return this.cidadao_id;\n  }\n\n  set cidadaoId(value: string) {\n    this.cidadao_id = value;\n  }\n\n  get createdAt(): Date {\n    return this.created_at;\n  }\n\n  get updatedAt(): Date {\n    return this.updated_at;\n  }\n\n  get removedAt(): Date {\n    return this.removed_at;\n  }\n\n  // Métodos Utilitários\n\n  /**\n   * Verifica se as informações foram criadas recentemente (últimas 24 horas)\n   */\n  isCriadoRecentemente(): boolean {\n    const agora = new Date();\n    const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);\n    return this.created_at > umDiaAtras;\n  }\n\n  /**\n   * Calcula a idade do registro em dias\n   */\n  getIdadeRegistroEmDias(): number {\n    const agora = new Date();\n    const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  }\n\n  /**\n   * Verifica se as informações foram removidas\n   */\n  foiRemovido(): boolean {\n    return !!this.removed_at;\n  }\n\n  /**\n   * Verifica se as informações estão ativas\n   */\n  isAtivo(): boolean {\n    return this.ativo && !this.removed_at;\n  }\n\n  /**\n   * Verifica se tem dados bancários completos\n   */\n  temDadosBancariosCompletos(): boolean {\n    return !!(this.banco && this.agencia && this.conta && this.nome_banco);\n  }\n\n  /**\n   * Verifica se tem chave PIX\n   */\n  temChavePix(): boolean {\n    return !!(this.chave_pix && this.tipo_chave_pix);\n  }\n\n  /**\n   * Verifica se é conta do Banco do Brasil\n   */\n  isBancoBrasil(): boolean {\n    return this.banco === '001';\n  }\n\n  /**\n   * Verifica se é poupança social\n   */\n  isPoupancaSocial(): boolean {\n    return this.tipo_conta === TipoConta.POUPANCA_SOCIAL;\n  }\n\n  /**\n   * Verifica se é conta corrente\n   */\n  isContaCorrente(): boolean {\n    return this.tipo_conta === TipoConta.CORRENTE;\n  }\n\n  /**\n   * Verifica se é conta poupança\n   */\n  isContaPoupanca(): boolean {\n    return this.tipo_conta === TipoConta.POUPANCA;\n  }\n\n  /**\n   * Verifica se a chave PIX é CPF\n   */\n  isChavePixCPF(): boolean {\n    return this.tipo_chave_pix === TipoChavePix.CPF;\n  }\n\n  /**\n   * Verifica se a chave PIX é email\n   */\n  isChavePixEmail(): boolean {\n    return this.tipo_chave_pix === TipoChavePix.EMAIL;\n  }\n\n  /**\n   * Verifica se a chave PIX é telefone\n   */\n  isChavePixTelefone(): boolean {\n    return this.tipo_chave_pix === TipoChavePix.TELEFONE;\n  }\n\n  /**\n   * Verifica se a chave PIX é aleatória\n   */\n  isChavePixAleatoria(): boolean {\n    return this.tipo_chave_pix === TipoChavePix.ALEATORIA;\n  }\n\n  /**\n   * Obtém a descrição do tipo de conta\n   */\n  getDescricaoTipoConta(): string {\n    const descricoes = {\n      [TipoConta.CORRENTE]: 'Conta Corrente',\n      [TipoConta.POUPANCA]: 'Conta Poupança',\n      [TipoConta.POUPANCA_SOCIAL]: 'Poupança Social',\n    };\n    return descricoes[this.tipo_conta] || this.tipo_conta;\n  }\n\n  /**\n   * Obtém a descrição do tipo de chave PIX\n   */\n  getDescricaoTipoChavePix(): string {\n    if (!this.tipo_chave_pix) return 'Não informado';\n\n    const descricoes = {\n      [TipoChavePix.CPF]: 'CPF',\n      [TipoChavePix.EMAIL]: 'E-mail',\n      [TipoChavePix.TELEFONE]: 'Telefone',\n      [TipoChavePix.ALEATORIA]: 'Chave Aleatória',\n    };\n    return descricoes[this.tipo_chave_pix] || this.tipo_chave_pix;\n  }\n\n  /**\n   * Formata a conta bancária\n   */\n  getContaFormatada(): string {\n    if (!this.temDadosBancariosCompletos()) return 'Não informado';\n    return `${this.banco} - Ag: ${this.agencia} - Conta: ${this.conta}`;\n  }\n\n  /**\n   * Obtém o nome do banco formatado\n   */\n  getBancoFormatado(): string {\n    if (!this.banco) return 'Não informado';\n    return this.nome_banco ? `${this.nome_banco} (${this.banco})` : this.banco;\n  }\n\n  /**\n   * Formata a chave PIX (mascarando dados sensíveis)\n   */\n  getChavePixFormatada(): string {\n    if (!this.chave_pix) return 'Não informado';\n\n    switch (this.tipo_chave_pix) {\n      case TipoChavePix.CPF:\n        return this.chave_pix.replace(\n          /(\\d{3})(\\d{3})(\\d{3})(\\d{2})/,\n          '$1.***.$3-**',\n        );\n      case TipoChavePix.EMAIL:\n        const [local, domain] = this.chave_pix.split('@');\n        return `${local.substring(0, 2)}***@${domain}`;\n      case TipoChavePix.TELEFONE:\n        return this.chave_pix.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-****');\n      case TipoChavePix.ALEATORIA:\n        return `${this.chave_pix.substring(0, 8)}...${this.chave_pix.substring(-4)}`;\n      default:\n        return '***';\n    }\n  }\n\n  /**\n   * Verifica se pertence a um cidadão específico\n   */\n  pertenceAoCidadao(cidadaoId: string): boolean {\n    return this.cidadao_id === cidadaoId;\n  }\n\n  /**\n   * Obtém um resumo das informações bancárias\n   */\n  getSummary(): string {\n    const banco = this.getBancoFormatado();\n    const conta = this.getDescricaoTipoConta();\n    const pix = this.temChavePix()\n      ? ` - PIX: ${this.getDescricaoTipoChavePix()}`\n      : '';\n    return `${banco} - ${conta}${pix}`;\n  }\n\n  /**\n   * Gera uma chave única para as informações\n   */\n  getUniqueKey(): string {\n    return `info_bancaria_${this.cidadao_id}`;\n  }\n\n  /**\n   * Verifica se as informações são consistentes\n   */\n  isConsistente(): boolean {\n    // Verifica se tem cidadão\n    if (!this.cidadao_id) return false;\n\n    // Se tem dados bancários, devem estar completos\n    if (this.banco || this.agencia || this.conta) {\n      if (!this.temDadosBancariosCompletos()) return false;\n    }\n\n    // Se tem chave PIX, deve ter tipo\n    if (this.chave_pix && !this.tipo_chave_pix) return false;\n    if (this.tipo_chave_pix && !this.chave_pix) return false;\n\n    // Validação específica por tipo de chave PIX\n    if (this.temChavePix()) {\n      switch (this.tipo_chave_pix) {\n        case TipoChavePix.CPF:\n          return /^\\d{11}$/.test(this.chave_pix.replace(/\\D/g, ''));\n        case TipoChavePix.EMAIL:\n          return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(this.chave_pix);\n        case TipoChavePix.TELEFONE:\n          return /^\\d{10,11}$/.test(this.chave_pix.replace(/\\D/g, ''));\n        case TipoChavePix.ALEATORIA:\n          return this.chave_pix.length >= 32;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifica se pode ser removido\n   */\n  podeSerRemovido(): boolean {\n    // Não pode remover se já foi removido\n    if (this.foiRemovido()) return false;\n\n    // Outras validações específicas podem ser adicionadas\n    return true;\n  }\n\n  /**\n   * Clona as informações bancárias (sem ID)\n   */\n  clone(): Partial<InfoBancaria> {\n    return {\n      cidadao_id: this.cidadao_id,\n      banco: this.banco,\n      nome_banco: this.nome_banco,\n      agencia: this.agencia,\n      conta: this.conta,\n      tipo_conta: this.tipo_conta,\n      chave_pix: this.chave_pix,\n      tipo_chave_pix: this.tipo_chave_pix,\n      ativo: this.ativo,\n      observacoes: this.observacoes,\n    };\n  }\n\n  /**\n   * Verifica se é elegível para recebimento de benefícios\n   */\n  isElegivelBeneficios(): boolean {\n    // Deve ter pelo menos dados bancários ou PIX\n    return this.temDadosBancariosCompletos() || this.temChavePix();\n  }\n\n  /**\n   * Verifica se é preferencial para pagamentos (Banco do Brasil + Poupança Social)\n   */\n  isPreferencialPagamentos(): boolean {\n    return this.isBancoBrasil() && this.isPoupancaSocial();\n  }\n\n  /**\n   * Obtém o método de pagamento preferido\n   */\n  getMetodoPagamentoPreferido(): 'CONTA_BANCARIA' | 'PIX' | 'INDEFINIDO' {\n    if (this.isPreferencialPagamentos()) return 'CONTA_BANCARIA';\n    if (this.temChavePix()) return 'PIX';\n    if (this.temDadosBancariosCompletos()) return 'CONTA_BANCARIA';\n    return 'INDEFINIDO';\n  }\n\n  /**\n   * Verifica se precisa de validação adicional\n   */\n  precisaValidacao(): boolean {\n    // Informações muito antigas precisam de validação\n    if (this.getIdadeRegistroEmDias() > 365) return true;\n\n    // Informações inconsistentes precisam de validação\n    if (!this.isConsistente()) return true;\n\n    // Contas não preferenciais podem precisar de validação\n    if (this.temDadosBancariosCompletos() && !this.isPreferencialPagamentos()) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Formata a data de criação\n   */\n  getCriacaoFormatada(): string {\n    return this.created_at.toLocaleDateString('pt-BR');\n  }\n\n  /**\n   * Formata a data de atualização\n   */\n  getAtualizacaoFormatada(): string {\n    return this.updated_at.toLocaleDateString('pt-BR');\n  }\n\n  /**\n   * Remove informações sensíveis para logs\n   */\n  toSafeLog(): Partial<InfoBancaria> {\n    return {\n      id: this.id,\n      banco: this.banco,\n      nome_banco: this.nome_banco,\n      tipo_conta: this.tipo_conta,\n      tipo_chave_pix: this.tipo_chave_pix,\n      ativo: this.ativo,\n      created_at: this.created_at,\n      updated_at: this.updated_at,\n    };\n  }\n\n  /**\n   * Obtém sugestões de melhoria para as informações bancárias\n   */\n  getSugestoesMelhoria(): string[] {\n    const sugestoes: string[] = [];\n\n    if (!this.temDadosBancariosCompletos() && !this.temChavePix()) {\n      sugestoes.push(\n        'Adicionar dados bancários ou chave PIX para recebimento de benefícios',\n      );\n    }\n\n    if (!this.isPreferencialPagamentos() && this.temDadosBancariosCompletos()) {\n      sugestoes.push(\n        'Considerar abertura de Poupança Social no Banco do Brasil para facilitar pagamentos',\n      );\n    }\n\n    if (!this.temChavePix()) {\n      sugestoes.push(\n        'Cadastrar chave PIX para agilizar recebimento de benefícios',\n      );\n    }\n\n    if (this.precisaValidacao()) {\n      sugestoes.push('Validar e atualizar informações bancárias');\n    }\n\n    if (!this.isConsistente()) {\n      sugestoes.push(\n        'Verificar e corrigir inconsistências nos dados bancários',\n      );\n    }\n\n    return sugestoes;\n  }\n\n  /**\n   * Verifica se as informações estão atualizadas\n   */\n  isAtualizado(): boolean {\n    const seiseMesesAtras = new Date();\n    seiseMesesAtras.setMonth(seiseMesesAtras.getMonth() - 6);\n    return this.updated_at > seiseMesesAtras;\n  }\n\n  /**\n   * Obtém o status das informações bancárias\n   */\n  getStatus(): 'COMPLETO' | 'PARCIAL' | 'INCOMPLETO' | 'INATIVO' {\n    if (!this.isAtivo()) return 'INATIVO';\n\n    if (this.temDadosBancariosCompletos() && this.temChavePix()) {\n      return 'COMPLETO';\n    }\n\n    if (this.temDadosBancariosCompletos() || this.temChavePix()) {\n      return 'PARCIAL';\n    }\n\n    return 'INCOMPLETO';\n  }\n\n  /**\n   * Calcula a pontuação de completude (0-100)\n   */\n  getPontuacaoCompletude(): number {\n    let pontos = 0;\n\n    if (this.banco) pontos += 15;\n    if (this.nome_banco) pontos += 10;\n    if (this.agencia) pontos += 15;\n    if (this.conta) pontos += 15;\n    if (this.tipo_conta) pontos += 10;\n    if (this.chave_pix) pontos += 20;\n    if (this.tipo_chave_pix) pontos += 15;\n\n    return pontos;\n  }\n}\n"],"version":3}