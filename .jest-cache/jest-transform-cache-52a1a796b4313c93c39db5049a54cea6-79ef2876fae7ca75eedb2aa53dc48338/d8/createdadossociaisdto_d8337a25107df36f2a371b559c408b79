4f22e2d0add19971be7a1f27655425f0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateDadosSociaisDto = void 0;
const swagger_1 = require("@nestjs/swagger");
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
const escolaridade_enum_1 = require("../../../enums/escolaridade.enum");
const situacao_trabalho_enum_1 = require("../../../enums/situacao-trabalho.enum");
const enum_validator_1 = require("../../../shared/validators/enum-validator");
/**
 * DTO para criação de dados sociais de um cidadão
 *
 * Contém todas as informações socioeconômicas necessárias para
 * caracterizar a situação social do cidadão e sua família.
 */
class CreateDadosSociaisDto {
    escolaridade;
    publico_prioritario;
    renda;
    ocupacao;
    recebe_pbf = false;
    valor_pbf;
    recebe_bpc = false;
    tipo_bpc;
    valor_bpc;
    curso_profissionalizante;
    interesse_curso_profissionalizante;
    situacao_trabalho;
    area_trabalho;
    familiar_apto_trabalho;
    area_interesse_familiar;
    observacoes;
}
exports.CreateDadosSociaisDto = CreateDadosSociaisDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Nível de escolaridade do cidadão',
        enum: escolaridade_enum_1.EscolaridadeEnum,
        example: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
        examples: {
            analfabeto: {
                value: escolaridade_enum_1.EscolaridadeEnum.ANALFABETO,
                description: 'Cidadão que não sabe ler nem escrever'
            },
            fundamental_completo: {
                value: escolaridade_enum_1.EscolaridadeEnum.FUNDAMENTAL_COMPLETO,
                description: 'Ensino fundamental completo (até 9º ano)'
            },
            medio_completo: {
                value: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
                description: 'Ensino médio completo'
            },
            superior_completo: {
                value: escolaridade_enum_1.EscolaridadeEnum.SUPERIOR_COMPLETO,
                description: 'Ensino superior completo'
            }
        }
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Escolaridade é obrigatória' }),
    (0, enum_validator_1.IsEnumValue)(escolaridade_enum_1.EscolaridadeEnum, {
        enumName: 'Escolaridade',
        caseSensitive: false,
    }),
    __metadata("design:type", typeof (_a = typeof escolaridade_enum_1.EscolaridadeEnum !== "undefined" && escolaridade_enum_1.EscolaridadeEnum) === "function" ? _a : Object)
], CreateDadosSociaisDto.prototype, "escolaridade", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão faz parte de público prioritário',
        example: true,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo publico_prioritario deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], CreateDadosSociaisDto.prototype, "publico_prioritario", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Renda mensal do cidadão em reais',
        example: 1500.50,
        minimum: 0,
        maximum: 999999.99,
        required: false,
        examples: {
            sem_renda: {
                value: 0,
                description: 'Cidadão sem renda'
            },
            salario_minimo: {
                value: 1320.00,
                description: 'Um salário mínimo'
            },
            renda_media: {
                value: 2500.00,
                description: 'Renda média'
            }
        }
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({ maxDecimalPlaces: 2 }, { message: 'Renda deve ser um número válido com no máximo 2 casas decimais' }),
    (0, class_validator_1.Min)(0, { message: 'Renda não pode ser negativa' }),
    (0, class_validator_1.Max)(999999.99, { message: 'Renda não pode exceder R$ 999.999,99' }),
    (0, class_transformer_1.Type)(() => Number),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (value === null || value === undefined || value === '') {
            return undefined;
        }
        if (typeof value === 'string') {
            const parsed = parseFloat(value.replace(',', '.'));
            return isNaN(parsed) ? value : parsed;
        }
        return value;
    }),
    __metadata("design:type", Number)
], CreateDadosSociaisDto.prototype, "renda", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Ocupação ou profissão do cidadão',
        example: 'Auxiliar de limpeza',
        maxLength: 255,
        required: false,
        examples: {
            servicos_gerais: {
                value: 'Auxiliar de limpeza',
                description: 'Profissional de serviços gerais'
            },
            comercio: {
                value: 'Vendedor',
                description: 'Profissional do comércio'
            },
            autonomo: {
                value: 'Manicure autônoma',
                description: 'Profissional autônomo'
            },
            desempregado: {
                value: 'Desempregado',
                description: 'Pessoa sem ocupação atual'
            }
        }
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Ocupação deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Ocupação deve ter no máximo 255 caracteres' }),
    (0, class_validator_1.Matches)(/^[a-zA-ZÀ-ÿ0-9\s\-\.\,]*$/, {
        message: 'Ocupação deve conter apenas letras, números, espaços e pontuação básica'
    }),
    __metadata("design:type", String)
], CreateDadosSociaisDto.prototype, "ocupacao", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão recebe Programa Bolsa Família',
        example: false,
        default: false,
    }),
    (0, class_validator_1.IsBoolean)({ message: 'O campo recebe_pbf deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], CreateDadosSociaisDto.prototype, "recebe_pbf", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Valor mensal recebido do Programa Bolsa Família',
        example: 400.00,
        minimum: 0,
        maximum: 10000.00,
        required: false,
        examples: {
            valor_basico: {
                value: 142.00,
                description: 'Valor básico do Auxílio Brasil'
            },
            valor_medio: {
                value: 400.00,
                description: 'Valor médio com benefícios adicionais'
            },
            valor_alto: {
                value: 600.00,
                description: 'Valor com múltiplos benefícios'
            }
        }
    }),
    (0, class_validator_1.ValidateIf)((o) => o.recebe_pbf === true),
    (0, class_validator_1.IsNumber)({ maxDecimalPlaces: 2 }, { message: 'Valor do PBF deve ser um número válido com no máximo 2 casas decimais' }),
    (0, class_validator_1.IsPositive)({ message: 'Valor do PBF deve ser maior que zero quando informado' }),
    (0, class_validator_1.Max)(10000.00, { message: 'Valor do PBF não pode exceder R$ 10.000,00' }),
    (0, class_transformer_1.Type)(() => Number),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (value === null || value === undefined || value === '') {
            return undefined;
        }
        if (typeof value === 'string') {
            const parsed = parseFloat(value.replace(',', '.'));
            return isNaN(parsed) ? value : parsed;
        }
        return value;
    }),
    __metadata("design:type", Number)
], CreateDadosSociaisDto.prototype, "valor_pbf", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão recebe Benefício de Prestação Continuada',
        example: false,
        default: false,
    }),
    (0, class_validator_1.IsBoolean)({ message: 'O campo recebe_bpc deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], CreateDadosSociaisDto.prototype, "recebe_bpc", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tipo do BPC recebido (idoso, deficiente, etc.)',
        example: 'Pessoa com deficiência',
        maxLength: 100,
        required: false,
    }),
    (0, class_validator_1.ValidateIf)((o) => o.recebe_bpc === true),
    (0, class_validator_1.IsString)({ message: 'Tipo do BPC deve ser um texto' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Tipo do BPC deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], CreateDadosSociaisDto.prototype, "tipo_bpc", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Valor mensal recebido do BPC',
        example: 1320.00,
        minimum: 0,
        maximum: 10000.00,
        required: false,
        examples: {
            salario_minimo: {
                value: 1320.00,
                description: 'Valor padrão do BPC (1 salário mínimo)'
            }
        }
    }),
    (0, class_validator_1.ValidateIf)((o) => o.recebe_bpc === true),
    (0, class_validator_1.IsNumber)({ maxDecimalPlaces: 2 }, { message: 'Valor do BPC deve ser um número válido com no máximo 2 casas decimais' }),
    (0, class_validator_1.IsPositive)({ message: 'Valor do BPC deve ser maior que zero quando informado' }),
    (0, class_validator_1.Max)(10000.00, { message: 'Valor do BPC não pode exceder R$ 10.000,00' }),
    (0, class_transformer_1.Type)(() => Number),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (value === null || value === undefined || value === '') {
            return undefined;
        }
        if (typeof value === 'string') {
            const parsed = parseFloat(value.replace(',', '.'));
            return isNaN(parsed) ? value : parsed;
        }
        return value;
    }),
    __metadata("design:type", Number)
], CreateDadosSociaisDto.prototype, "valor_bpc", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Curso profissionalizante que o cidadão possui ou está cursando',
        example: 'Técnico em Informática',
        maxLength: 255,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Curso profissionalizante deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Curso profissionalizante deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], CreateDadosSociaisDto.prototype, "curso_profissionalizante", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão tem interesse em fazer curso profissionalizante',
        example: true,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo interesse_curso_profissionalizante deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], CreateDadosSociaisDto.prototype, "interesse_curso_profissionalizante", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Situação atual de trabalho do cidadão',
        enum: situacao_trabalho_enum_1.SituacaoTrabalhoEnum,
        example: situacao_trabalho_enum_1.SituacaoTrabalhoEnum.DESEMPREGADO,
        required: false,
        examples: {
            desempregado: {
                value: situacao_trabalho_enum_1.SituacaoTrabalhoEnum.DESEMPREGADO,
                description: 'Pessoa sem emprego atual'
            },
            empregado_formal: {
                value: situacao_trabalho_enum_1.SituacaoTrabalhoEnum.EMPREGADO_FORMAL,
                description: 'Empregado com carteira assinada'
            },
            autonomo: {
                value: situacao_trabalho_enum_1.SituacaoTrabalhoEnum.AUTONOMO,
                description: 'Trabalhador autônomo'
            },
            aposentado: {
                value: situacao_trabalho_enum_1.SituacaoTrabalhoEnum.APOSENTADO,
                description: 'Pessoa aposentada'
            },
            do_lar: {
                value: situacao_trabalho_enum_1.SituacaoTrabalhoEnum.DO_LAR,
                description: 'Pessoa dedicada aos cuidados do lar'
            }
        }
    }),
    (0, class_validator_1.IsOptional)(),
    (0, enum_validator_1.IsEnumValue)(situacao_trabalho_enum_1.SituacaoTrabalhoEnum, {
        enumName: 'Situação de Trabalho',
        caseSensitive: false,
    }),
    __metadata("design:type", typeof (_b = typeof situacao_trabalho_enum_1.SituacaoTrabalhoEnum !== "undefined" && situacao_trabalho_enum_1.SituacaoTrabalhoEnum) === "function" ? _b : Object)
], CreateDadosSociaisDto.prototype, "situacao_trabalho", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Área de trabalho ou interesse profissional',
        example: 'Serviços gerais',
        maxLength: 255,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Área de trabalho deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Área de trabalho deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], CreateDadosSociaisDto.prototype, "area_trabalho", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se há familiar apto para trabalhar na composição familiar',
        example: true,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo familiar_apto_trabalho deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], CreateDadosSociaisDto.prototype, "familiar_apto_trabalho", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Área de interesse profissional de familiares',
        example: 'Construção civil',
        maxLength: 255,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Área de interesse familiar deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Área de interesse familiar deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], CreateDadosSociaisDto.prototype, "area_interesse_familiar", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Observações adicionais sobre a situação social',
        example: 'Família em situação de vulnerabilidade social',
        maxLength: 1000,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Observações devem ser um texto' }),
    (0, class_validator_1.MaxLength)(1000, { message: 'Observações devem ter no máximo 1000 caracteres' }),
    __metadata("design:type", String)
], CreateDadosSociaisDto.prototype, "observacoes", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,