{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\tests\\criptografia.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\tests\\criptografia.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CriptografiaService } from '../criptografia.service';\nimport { ConfigService } from '@nestjs/config';\nimport * as crypto from 'crypto';\n\njest.mock('crypto', () => {\n  const originalCrypto = jest.requireActual('crypto');\n  return {\n    ...originalCrypto,\n    randomBytes: jest.fn(),\n    createCipheriv: jest.fn(),\n    createDecipheriv: jest.fn(),\n    createHash: jest.fn(),\n  };\n});\n\ndescribe('CriptografiaService', () => {\n  let service: CriptografiaService;\n\n  const mockMasterKey = Buffer.from(\n    'chave-mestra-de-teste-com-32-bytes-12',\n    'utf-8',\n  );\n  const mockIv = Buffer.from('iv-de-teste-16byt', 'utf-8');\n  const mockAuthTag = Buffer.from('auth-tag-teste-16-bytes-teste', 'utf-8');\n  const mockHash = 'hash-de-teste-para-verificacao-de-integridade';\n\n  const mockCipher = {\n    update: jest.fn(),\n    final: jest.fn(),\n    getAuthTag: jest.fn(),\n  };\n\n  const mockDecipher = {\n    update: jest.fn(),\n    final: jest.fn(),\n    setAuthTag: jest.fn(),\n  };\n\n  const mockHashObject = {\n    update: jest.fn(),\n    digest: jest.fn(),\n  };\n\n  const mockConfigService = {\n    get: jest.fn().mockImplementation((key) => {\n      if (key === 'ENCRYPTION_KEY_PATH') {return './test-encryption.key';}\n      return null;\n    }),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    // Mock para crypto.randomBytes\n    (crypto.randomBytes as jest.Mock).mockImplementation((size) => {\n      if (size === 16) {return mockIv;}\n      return Buffer.alloc(size);\n    });\n\n    // Mock para crypto.createCipheriv\n    (crypto.createCipheriv as jest.Mock).mockReturnValue(mockCipher);\n\n    // Mock para crypto.createDecipheriv\n    (crypto.createDecipheriv as jest.Mock).mockReturnValue(mockDecipher);\n\n    // Mock para crypto.createHash\n    (crypto.createHash as jest.Mock).mockReturnValue(mockHashObject);\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        {\n          provide: CriptografiaService,\n          useFactory: () => {\n            return new CriptografiaService(\n              mockConfigService as unknown as ConfigService,\n            );\n          },\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<CriptografiaService>(CriptografiaService);\n    // Sobrescrever a chave mestra para testes\n    Object.defineProperty(service, 'masterKey', { value: mockMasterKey });\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('criptografarBuffer', () => {\n    it('deve criptografar um buffer corretamente', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from(\n        'dados de teste para criptografia',\n        'utf-8',\n      );\n      const dadosCriptografados = Buffer.from('dados criptografados', 'utf-8');\n\n      mockCipher.update.mockReturnValue(dadosCriptografados);\n      mockCipher.final.mockReturnValue(Buffer.alloc(0));\n      mockCipher.getAuthTag.mockReturnValue(mockAuthTag);\n\n      // Act\n      const resultado = service.criptografarBuffer(dadosOriginais);\n\n      // Assert\n      expect(crypto.createCipheriv).toHaveBeenCalledWith(\n        'aes-256-gcm',\n        mockMasterKey,\n        mockIv,\n        { authTagLength: 16 },\n      );\n      expect(mockCipher.update).toHaveBeenCalledWith(dadosOriginais);\n      expect(mockCipher.final).toHaveBeenCalled();\n      expect(mockCipher.getAuthTag).toHaveBeenCalled();\n\n      expect(resultado).toEqual({\n        dadosCriptografados: dadosCriptografados,\n        iv: mockIv,\n        authTag: mockAuthTag,\n      });\n    });\n  });\n\n  describe('descriptografarBuffer', () => {\n    it('deve descriptografar um buffer corretamente', () => {\n      // Arrange\n      const dadosCriptografados = Buffer.from('dados criptografados', 'utf-8');\n      const dadosDescriptografados = Buffer.from(\n        'dados originais descriptografados',\n        'utf-8',\n      );\n\n      mockDecipher.update.mockReturnValue(dadosDescriptografados);\n      mockDecipher.final.mockReturnValue(Buffer.alloc(0));\n\n      // Act\n      const resultado = service.descriptografarBuffer(\n        dadosCriptografados,\n        mockIv,\n        mockAuthTag,\n      );\n\n      // Assert\n      expect(crypto.createDecipheriv).toHaveBeenCalledWith(\n        'aes-256-gcm',\n        mockMasterKey,\n        mockIv,\n        { authTagLength: 16 },\n      );\n      expect(mockDecipher.setAuthTag).toHaveBeenCalledWith(mockAuthTag);\n      expect(mockDecipher.update).toHaveBeenCalledWith(dadosCriptografados);\n      expect(mockDecipher.final).toHaveBeenCalled();\n\n      expect(resultado).toEqual(dadosDescriptografados);\n    });\n\n    it('deve lançar erro quando a autenticação falha', () => {\n      // Arrange\n      const dadosCriptografados = Buffer.from('dados criptografados', 'utf-8');\n\n      mockDecipher.update.mockImplementation(() => {\n        throw new Error('Falha na autenticação');\n      });\n\n      // Act & Assert\n      expect(() => {\n        service.descriptografarBuffer(dadosCriptografados, mockIv, mockAuthTag);\n      }).toThrow('Erro ao descriptografar dados: Falha na autenticação');\n    });\n  });\n\n  describe('gerarHash', () => {\n    it('deve gerar um hash SHA-256 para um buffer', () => {\n      // Arrange\n      const dados = Buffer.from('dados para hash', 'utf-8');\n\n      mockHashObject.update.mockReturnThis();\n      mockHashObject.digest.mockReturnValue(mockHash);\n\n      // Act\n      const resultado = service.gerarHash(dados);\n\n      // Assert\n      expect(crypto.createHash).toHaveBeenCalledWith('sha256');\n      expect(mockHashObject.update).toHaveBeenCalledWith(dados);\n      expect(mockHashObject.digest).toHaveBeenCalledWith('hex');\n\n      expect(resultado).toEqual(mockHash);\n    });\n  });\n\n  describe('verificarHash', () => {\n    it('deve retornar true quando o hash corresponde aos dados', () => {\n      // Arrange\n      const dados = Buffer.from('dados para verificação', 'utf-8');\n      const hashOriginal = 'hash-original';\n\n      mockHashObject.update.mockReturnThis();\n      mockHashObject.digest.mockReturnValue(hashOriginal);\n\n      // Act\n      const resultado = service.verificarHash(dados, hashOriginal);\n\n      // Assert\n      expect(crypto.createHash).toHaveBeenCalledWith('sha256');\n      expect(mockHashObject.update).toHaveBeenCalledWith(dados);\n      expect(mockHashObject.digest).toHaveBeenCalledWith('hex');\n\n      expect(resultado).toBe(true);\n    });\n\n    it('deve retornar false quando o hash não corresponde aos dados', () => {\n      // Arrange\n      const dados = Buffer.from('dados para verificação', 'utf-8');\n      const hashOriginal = 'hash-original';\n      const hashCalculado = 'hash-diferente';\n\n      mockHashObject.update.mockReturnThis();\n      mockHashObject.digest.mockReturnValue(hashCalculado);\n\n      // Act\n      const resultado = service.verificarHash(dados, hashOriginal);\n\n      // Assert\n      expect(resultado).toBe(false);\n    });\n  });\n});\n"],"version":3}