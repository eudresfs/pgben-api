{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\repositories\\info-bancaria.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\repositories\\info-bancaria.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { InfoBancaria } from '../../../entities/info-bancaria.entity';\nimport { CreateInfoBancariaDto } from '../dto/create-info-bancaria.dto';\nimport { UpdateInfoBancariaDto } from '../dto/update-info-bancaria.dto';\n\n/**\n * Repository para gerenciamento de informações bancárias\n *\n * Responsável por operações de banco de dados relacionadas às informações bancárias dos cidadãos,\n * incluindo contas poupança social do Banco do Brasil e dados PIX.\n */\n@Injectable()\nexport class InfoBancariaRepository {\n  private repository: Repository<InfoBancaria>;\n\n  constructor(private dataSource: DataSource) {\n    this.repository = this.dataSource.getRepository(InfoBancaria);\n  }\n\n  /**\n   * Cria uma nova informação bancária\n   * @param createInfoBancariaDto Dados para criação\n   * @returns Informação bancária criada\n   */\n  async create(\n    createInfoBancariaDto: CreateInfoBancariaDto,\n  ): Promise<InfoBancaria> {\n    const infoBancaria = this.repository.create(createInfoBancariaDto);\n    return await this.repository.save(infoBancaria);\n  }\n\n  /**\n   * Busca todas as informações bancárias com filtros opcionais\n   * @param options Opções de filtro e paginação\n   * @returns Lista de informações bancárias e contagem total\n   */\n  async findAll(options?: {\n    skip?: number;\n    take?: number;\n    where?: any;\n    order?: any;\n    includeRelations?: boolean;\n  }): Promise<[InfoBancaria[], number]> {\n    const {\n      skip = 0,\n      take = 10,\n      where = {},\n      order = { created_at: 'DESC' },\n      includeRelations = false,\n    } = options || {};\n\n    const queryBuilder = this.repository.createQueryBuilder('info_bancaria');\n\n    // Adiciona relações se solicitado\n    if (includeRelations) {\n      queryBuilder.leftJoinAndSelect('info_bancaria.cidadao', 'cidadao');\n    }\n\n    // Aplica filtros\n    if (where.cidadao_id) {\n      queryBuilder.andWhere('info_bancaria.cidadao_id = :cidadao_id', {\n        cidadao_id: where.cidadao_id,\n      });\n    }\n\n    if (where.banco) {\n      queryBuilder.andWhere('info_bancaria.banco = :banco', {\n        banco: where.banco,\n      });\n    }\n\n    if (where.ativo !== undefined) {\n      queryBuilder.andWhere('info_bancaria.ativo = :ativo', {\n        ativo: where.ativo,\n      });\n    }\n\n    if (where.tipo_conta) {\n      queryBuilder.andWhere('info_bancaria.tipo_conta = :tipo_conta', {\n        tipo_conta: where.tipo_conta,\n      });\n    }\n\n    // Aplica ordenação\n    Object.entries(order).forEach(([field, direction]) => {\n      queryBuilder.addOrderBy(\n        `info_bancaria.${field}`,\n        direction as 'ASC' | 'DESC',\n      );\n    });\n\n    // Aplica paginação\n    queryBuilder.skip(skip).take(take);\n\n    return await queryBuilder.getManyAndCount();\n  }\n\n  /**\n   * Busca informação bancária por ID\n   * @param id ID da informação bancária\n   * @param includeRelations Se deve incluir relações\n   * @returns Informação bancária encontrada ou null\n   */\n  async findById(\n    id: string,\n    includeRelations = false,\n  ): Promise<InfoBancaria | null> {\n    const queryBuilder = this.repository\n      .createQueryBuilder('info_bancaria')\n      .where('info_bancaria.id = :id', { id });\n\n    if (includeRelations) {\n      queryBuilder.leftJoinAndSelect('info_bancaria.cidadao', 'cidadao');\n    }\n\n    return await queryBuilder.getOne();\n  }\n\n  /**\n   * Busca informação bancária por ID do cidadão\n   * @param cidadaoId ID do cidadão\n   * @param includeRelations Se deve incluir relações\n   * @returns Informação bancária encontrada ou null\n   */\n  async findByCidadaoId(\n    cidadaoId: string,\n    includeRelations = false,\n  ): Promise<InfoBancaria | null> {\n    const queryBuilder = this.repository\n      .createQueryBuilder('info_bancaria')\n      .where('info_bancaria.cidadao_id = :cidadaoId', { cidadaoId })\n      .andWhere('info_bancaria.ativo = :ativo', { ativo: true });\n\n    if (includeRelations) {\n      queryBuilder.leftJoinAndSelect('info_bancaria.cidadao', 'cidadao');\n    }\n\n    return await queryBuilder.getOne();\n  }\n\n  /**\n   * Busca informações bancárias por chave PIX\n   * @param chavePix Chave PIX\n   * @returns Lista de informações bancárias\n   */\n  async findByChavePix(chavePix: string): Promise<InfoBancaria[]> {\n    return await this.repository.find({\n      where: {\n        chave_pix: chavePix,\n        ativo: true,\n      },\n      relations: ['cidadao'],\n    });\n  }\n\n  /**\n   * Atualiza informação bancária\n   * @param id ID da informação bancária\n   * @param updateInfoBancariaDto Dados para atualização\n   * @returns Informação bancária atualizada\n   */\n  async update(\n    id: string,\n    updateInfoBancariaDto: UpdateInfoBancariaDto,\n  ): Promise<InfoBancaria | null> {\n    await this.repository.update(id, updateInfoBancariaDto);\n    return await this.findById(id);\n  }\n\n  /**\n   * Remove informação bancária (soft delete)\n   * @param id ID da informação bancária\n   * @returns Resultado da operação\n   */\n  async remove(id: string): Promise<boolean> {\n    const result = await this.repository.softDelete(id);\n    return (result.affected ?? 0) > 0;\n  }\n\n  /**\n   * Desativa informação bancária\n   * @param id ID da informação bancária\n   * @returns Informação bancária atualizada\n   */\n  async deactivate(id: string): Promise<InfoBancaria | null> {\n    await this.repository.update(id, { ativo: false });\n    return await this.findById(id);\n  }\n\n  /**\n   * Verifica se existe informação bancária ativa para um cidadão\n   * @param cidadaoId ID do cidadão\n   * @returns True se existe, false caso contrário\n   */\n  async existsActiveByCidadaoId(cidadaoId: string): Promise<boolean> {\n    const count = await this.repository.count({\n      where: {\n        cidadao_id: cidadaoId,\n        ativo: true,\n      },\n    });\n    return count > 0;\n  }\n\n  /**\n   * Verifica se uma chave PIX já está em uso\n   * @param chavePix Chave PIX\n   * @param excludeId ID para excluir da verificação (útil em atualizações)\n   * @returns True se já existe, false caso contrário\n   */\n  async existsByChavePix(\n    chavePix: string,\n    excludeId?: string,\n  ): Promise<boolean> {\n    const queryBuilder = this.repository\n      .createQueryBuilder('info_bancaria')\n      .where('info_bancaria.chave_pix = :chavePix', { chavePix })\n      .andWhere('info_bancaria.ativo = :ativo', { ativo: true });\n\n    if (excludeId) {\n      queryBuilder.andWhere('info_bancaria.id != :excludeId', { excludeId });\n    }\n\n    const count = await queryBuilder.getCount();\n    return count > 0;\n  }\n}\n"],"version":3}