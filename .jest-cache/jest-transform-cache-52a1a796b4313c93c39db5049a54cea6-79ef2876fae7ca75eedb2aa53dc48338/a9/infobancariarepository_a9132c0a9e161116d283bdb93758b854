17d9f78e2ed505b28ba0e630a50fa4de
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfoBancariaRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const info_bancaria_entity_1 = require("../../../entities/info-bancaria.entity");
/**
 * Repository para gerenciamento de informações bancárias
 *
 * Responsável por operações de banco de dados relacionadas às informações bancárias dos cidadãos,
 * incluindo contas poupança social do Banco do Brasil e dados PIX.
 */
let InfoBancariaRepository = class InfoBancariaRepository {
    dataSource;
    repository;
    constructor(dataSource) {
        this.dataSource = dataSource;
        this.repository = this.dataSource.getRepository(info_bancaria_entity_1.InfoBancaria);
    }
    /**
     * Cria uma nova informação bancária
     * @param createInfoBancariaDto Dados para criação
     * @returns Informação bancária criada
     */
    async create(createInfoBancariaDto) {
        const infoBancaria = this.repository.create(createInfoBancariaDto);
        return await this.repository.save(infoBancaria);
    }
    /**
     * Busca todas as informações bancárias com filtros opcionais
     * @param options Opções de filtro e paginação
     * @returns Lista de informações bancárias e contagem total
     */
    async findAll(options) {
        const { skip = 0, take = 10, where = {}, order = { created_at: 'DESC' }, includeRelations = false, } = options || {};
        const queryBuilder = this.repository.createQueryBuilder('info_bancaria');
        // Adiciona relações se solicitado
        if (includeRelations) {
            queryBuilder.leftJoinAndSelect('info_bancaria.cidadao', 'cidadao');
        }
        // Aplica filtros
        if (where.cidadao_id) {
            queryBuilder.andWhere('info_bancaria.cidadao_id = :cidadao_id', {
                cidadao_id: where.cidadao_id,
            });
        }
        if (where.banco) {
            queryBuilder.andWhere('info_bancaria.banco = :banco', {
                banco: where.banco,
            });
        }
        if (where.ativo !== undefined) {
            queryBuilder.andWhere('info_bancaria.ativo = :ativo', {
                ativo: where.ativo,
            });
        }
        if (where.tipo_conta) {
            queryBuilder.andWhere('info_bancaria.tipo_conta = :tipo_conta', {
                tipo_conta: where.tipo_conta,
            });
        }
        // Aplica ordenação
        Object.entries(order).forEach(([field, direction]) => {
            queryBuilder.addOrderBy(`info_bancaria.${field}`, direction);
        });
        // Aplica paginação
        queryBuilder.skip(skip).take(take);
        return await queryBuilder.getManyAndCount();
    }
    /**
     * Busca informação bancária por ID
     * @param id ID da informação bancária
     * @param includeRelations Se deve incluir relações
     * @returns Informação bancária encontrada ou null
     */
    async findById(id, includeRelations = false) {
        const queryBuilder = this.repository
            .createQueryBuilder('info_bancaria')
            .where('info_bancaria.id = :id', { id });
        if (includeRelations) {
            queryBuilder.leftJoinAndSelect('info_bancaria.cidadao', 'cidadao');
        }
        return await queryBuilder.getOne();
    }
    /**
     * Busca informação bancária por ID do cidadão
     * @param cidadaoId ID do cidadão
     * @param includeRelations Se deve incluir relações
     * @returns Informação bancária encontrada ou null
     */
    async findByCidadaoId(cidadaoId, includeRelations = false) {
        const queryBuilder = this.repository
            .createQueryBuilder('info_bancaria')
            .where('info_bancaria.cidadao_id = :cidadaoId', { cidadaoId })
            .andWhere('info_bancaria.ativo = :ativo', { ativo: true });
        if (includeRelations) {
            queryBuilder.leftJoinAndSelect('info_bancaria.cidadao', 'cidadao');
        }
        return await queryBuilder.getOne();
    }
    /**
     * Busca informações bancárias por chave PIX
     * @param chavePix Chave PIX
     * @returns Lista de informações bancárias
     */
    async findByChavePix(chavePix) {
        return await this.repository.find({
            where: {
                chave_pix: chavePix,
                ativo: true,
            },
            relations: ['cidadao'],
        });
    }
    /**
     * Atualiza informação bancária
     * @param id ID da informação bancária
     * @param updateInfoBancariaDto Dados para atualização
     * @returns Informação bancária atualizada
     */
    async update(id, updateInfoBancariaDto) {
        await this.repository.update(id, updateInfoBancariaDto);
        return await this.findById(id);
    }
    /**
     * Remove informação bancária (soft delete)
     * @param id ID da informação bancária
     * @returns Resultado da operação
     */
    async remove(id) {
        const result = await this.repository.softDelete(id);
        return (result.affected ?? 0) > 0;
    }
    /**
     * Desativa informação bancária
     * @param id ID da informação bancária
     * @returns Informação bancária atualizada
     */
    async deactivate(id) {
        await this.repository.update(id, { ativo: false });
        return await this.findById(id);
    }
    /**
     * Verifica se existe informação bancária ativa para um cidadão
     * @param cidadaoId ID do cidadão
     * @returns True se existe, false caso contrário
     */
    async existsActiveByCidadaoId(cidadaoId) {
        const count = await this.repository.count({
            where: {
                cidadao_id: cidadaoId,
                ativo: true,
            },
        });
        return count > 0;
    }
    /**
     * Verifica se uma chave PIX já está em uso
     * @param chavePix Chave PIX
     * @param excludeId ID para excluir da verificação (útil em atualizações)
     * @returns True se já existe, false caso contrário
     */
    async existsByChavePix(chavePix, excludeId) {
        const queryBuilder = this.repository
            .createQueryBuilder('info_bancaria')
            .where('info_bancaria.chave_pix = :chavePix', { chavePix })
            .andWhere('info_bancaria.ativo = :ativo', { ativo: true });
        if (excludeId) {
            queryBuilder.andWhere('info_bancaria.id != :excludeId', { excludeId });
        }
        const count = await queryBuilder.getCount();
        return count > 0;
    }
};
exports.InfoBancariaRepository = InfoBancariaRepository;
exports.InfoBancariaRepository = InfoBancariaRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], InfoBancariaRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,