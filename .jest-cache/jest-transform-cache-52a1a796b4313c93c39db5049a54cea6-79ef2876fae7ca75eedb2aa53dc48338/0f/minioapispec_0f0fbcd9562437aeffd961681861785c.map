{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\api\\minio.api.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\api\\minio.api.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { JwtService } from '@nestjs/jwt';\nimport { MinioService } from '../../src/shared/services/minio.service';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('MinIO API', () => {\n  let app: INestApplication;\n  let minioService: MinioService;\n  let jwtService: JwtService;\n  let authToken: string;\n  let testFilePath: string;\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({ transform: true }));\n    await app.init();\n\n    minioService = moduleFixture.get<MinioService>(MinioService);\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    // Gerar token de autenticação para testes\n    authToken = jwtService.sign({\n      id: 'test-user-id',\n      nome: 'Usuário de Teste',\n      email: 'teste@exemplo.com',\n      roles: ['admin'],\n    });\n\n    // Criar arquivo temporário para testes\n    testFilePath = path.join(__dirname, '..', 'temp-test-file.txt');\n    fs.writeFileSync(\n      testFilePath,\n      'Conteúdo de teste para upload direto no MinIO',\n    );\n  });\n\n  beforeEach(async () => {\n    // Espiar o MinioService para evitar chamadas reais ao MinIO durante os testes\n    jest\n      .spyOn(minioService, 'uploadArquivo')\n      .mockImplementation(async (arquivo, nomeArquivo, metadados) => {\n        return {\n          etag: 'mock-etag',\n          versionId: 'mock-version-id',\n        };\n      });\n\n    jest\n      .spyOn(minioService, 'downloadArquivo')\n      .mockImplementation(async (nomeArquivo) => {\n        return Buffer.from('Conteúdo mockado do arquivo');\n      });\n\n    jest\n      .spyOn(minioService, 'removerArquivo')\n      .mockImplementation(async (nomeArquivo) => {\n        return true;\n      });\n\n    jest\n      .spyOn(minioService, 'listarArquivos')\n      .mockImplementation(async (prefix, recursive) => {\n        return [\n          {\n            name: 'documentos/arquivo1.pdf',\n            size: 1024,\n            lastModified: new Date(),\n          },\n          {\n            name: 'documentos/arquivo2.pdf',\n            size: 2048,\n            lastModified: new Date(),\n          },\n          {\n            name: 'documentos/arquivo3.pdf',\n            size: 3072,\n            lastModified: new Date(),\n          },\n        ];\n      });\n\n    jest\n      .spyOn(minioService, 'verificarArquivoExiste')\n      .mockImplementation(async (nomeArquivo) => {\n        return nomeArquivo.includes('existe');\n      });\n  });\n\n  afterAll(async () => {\n    // Remover arquivo temporário\n    if (fs.existsSync(testFilePath)) {\n      fs.unlinkSync(testFilePath);\n    }\n    await app.close();\n  });\n\n  describe('POST /api/storage/upload', () => {\n    it('deve fazer upload direto para o MinIO', async () => {\n      // Act\n      const response = await request(app.getHttpServer())\n        .post('/api/storage/upload')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('arquivo', testFilePath)\n        .field('caminho', 'testes/arquivo-teste.txt')\n        .field('metadados', JSON.stringify({ tipo: 'teste', sensivel: false }))\n        .expect(201);\n\n      // Assert\n      expect(response.body).toHaveProperty('etag');\n      expect(response.body).toHaveProperty('versionId');\n      expect(minioService.uploadArquivo).toHaveBeenCalled();\n    });\n\n    it('deve validar os campos obrigatórios', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .post('/api/storage/upload')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('arquivo', testFilePath)\n        // Faltando campo caminho, que é obrigatório\n        .expect(400);\n    });\n\n    it('deve requerer autenticação', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .post('/api/storage/upload')\n        .attach('arquivo', testFilePath)\n        .field('caminho', 'testes/arquivo-teste.txt')\n        .expect(401);\n    });\n  });\n\n  describe('GET /api/storage/download/:caminho', () => {\n    it('deve baixar um arquivo do MinIO', async () => {\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/storage/download/testes/arquivo-existe.txt')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(response.body).toBeInstanceOf(Buffer);\n      expect(minioService.downloadArquivo).toHaveBeenCalledWith(\n        'testes/arquivo-existe.txt',\n      );\n    });\n\n    it('deve retornar 404 para arquivo inexistente', async () => {\n      // Configurar o mock para retornar false para verificação de existência\n      jest\n        .spyOn(minioService, 'verificarArquivoExiste')\n        .mockResolvedValueOnce(false);\n\n      // Act & Assert\n      await request(app.getHttpServer())\n        .get('/api/storage/download/testes/arquivo-nao-existe.txt')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n\n    it('deve requerer autenticação para download', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .get('/api/storage/download/testes/arquivo-existe.txt')\n        .expect(401);\n    });\n  });\n\n  describe('GET /api/storage/list', () => {\n    it('deve listar arquivos do MinIO', async () => {\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/storage/list')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ prefix: 'documentos/', recursive: 'true' })\n        .expect(200);\n\n      // Assert\n      expect(response.body).toBeInstanceOf(Array);\n      expect(response.body).toHaveLength(3);\n      expect(response.body[0]).toHaveProperty('name');\n      expect(response.body[0]).toHaveProperty('size');\n      expect(response.body[0]).toHaveProperty('lastModified');\n      expect(minioService.listarArquivos).toHaveBeenCalledWith(\n        'documentos/',\n        true,\n      );\n    });\n\n    it('deve requerer autenticação para listar arquivos', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .get('/api/storage/list')\n        .query({ prefix: 'documentos/', recursive: 'true' })\n        .expect(401);\n    });\n  });\n\n  describe('DELETE /api/storage/:caminho', () => {\n    it('deve remover um arquivo do MinIO', async () => {\n      // Act\n      const response = await request(app.getHttpServer())\n        .delete('/api/storage/testes/arquivo-existe.txt')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(response.body).toHaveProperty('success', true);\n      expect(minioService.removerArquivo).toHaveBeenCalledWith(\n        'testes/arquivo-existe.txt',\n      );\n    });\n\n    it('deve retornar 404 para arquivo inexistente', async () => {\n      // Configurar o mock para retornar false para verificação de existência\n      jest\n        .spyOn(minioService, 'verificarArquivoExiste')\n        .mockResolvedValueOnce(false);\n\n      // Act & Assert\n      await request(app.getHttpServer())\n        .delete('/api/storage/testes/arquivo-nao-existe.txt')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n\n    it('deve requerer autenticação para remoção', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .delete('/api/storage/testes/arquivo-existe.txt')\n        .expect(401);\n    });\n  });\n\n  describe('HEAD /api/storage/:caminho', () => {\n    it('deve verificar se um arquivo existe no MinIO', async () => {\n      // Act\n      const response = await request(app.getHttpServer())\n        .head('/api/storage/testes/arquivo-existe.txt')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(minioService.verificarArquivoExiste).toHaveBeenCalledWith(\n        'testes/arquivo-existe.txt',\n      );\n    });\n\n    it('deve retornar 404 para arquivo inexistente', async () => {\n      // Configurar o mock para retornar false para verificação de existência\n      jest\n        .spyOn(minioService, 'verificarArquivoExiste')\n        .mockResolvedValueOnce(false);\n\n      // Act & Assert\n      await request(app.getHttpServer())\n        .head('/api/storage/testes/arquivo-nao-existe.txt')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n\n    it('deve requerer autenticação para verificação', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .head('/api/storage/testes/arquivo-existe.txt')\n        .expect(401);\n    });\n  });\n});\n"],"version":3}