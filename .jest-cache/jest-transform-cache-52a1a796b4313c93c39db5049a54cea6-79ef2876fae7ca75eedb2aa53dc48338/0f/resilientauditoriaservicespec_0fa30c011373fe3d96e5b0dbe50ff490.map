{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\resilient-auditoria.service.spec.ts","mappings":";;AAWA,QAAQ;AACR,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;IACrB,QAAQ,EAAE;QACR,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;QAChB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;QACrB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;KACpB;CACF,CAAC,CAAC,CAAC;AAnBJ,6CAAsD;AACtD,2CAA+C;AAE/C,+EAA0E;AAC1E,0FAAsF;AACtF,sGAAiG;AACjG,iEAA4D;AAE5D,2BAAoC;AAapC,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,OAAkC,CAAC;IACvC,IAAI,gBAA+C,CAAC;IACpD,IAAI,qBAAyD,CAAC;IAC9D,IAAI,kBAAmD,CAAC;IACxD,IAAI,aAAyC,CAAC;IAE9C,MAAM,WAAW,GAA0B;QACzC,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,SAAS;QACnB,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,UAAU;QACrB,eAAe,EAAE,IAAI;QACrB,UAAU,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;QAC7B,EAAE,EAAE,WAAW;QACf,SAAS,EAAE,YAAY;KACxB,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,uDAAyB;gBACzB;oBACE,OAAO,EAAE,oCAAgB;oBACzB,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;qBAClB;iBACF;gBACD;oBACE,OAAO,EAAE,+CAAqB;oBAC9B,QAAQ,EAAE;wBACR,sBAAsB,EAAE,IAAI,CAAC,EAAE,EAAE;qBAClC;iBACF;gBACD;oBACE,OAAO,EAAE,yCAAkB;oBAC3B,QAAQ,EAAE;wBACR,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;qBAC7B;iBACF;gBACD;oBACE,OAAO,EAAE,sBAAa;oBACtB,QAAQ,EAAE;wBACR,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,GAAW,EAAE,YAAkB,EAAE,EAAE;4BAC/C,MAAM,MAAM,GAAG;gCACb,uBAAuB,EAAE,0BAA0B;gCACnD,gCAAgC,EAAE,MAAM;gCACxC,8BAA8B,EAAE,MAAM;6BACvC,CAAC;4BACF,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC;wBACrC,CAAC,CAAC;qBACH;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAA4B,uDAAyB,CAAC,CAAC;QAC3E,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAC,oCAAgB,CAAC,CAAC;QAChD,qBAAqB,GAAG,MAAM,CAAC,GAAG,CAAC,+CAAqB,CAAC,CAAC;QAC1D,kBAAkB,GAAG,MAAM,CAAC,GAAG,CAAC,yCAAkB,CAAC,CAAC;QACpD,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,sBAAa,CAAC,CAAC;QAE1C,sCAAsC;QACtC,OAAO,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,UAAU;YACV,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE1E,MAAM;YACN,MAAM,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACvF,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAEvD,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,UAAU;YACV,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAClD,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAC3E,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,KAAK,EAAS,CAAC,CAAC;YAEhE,MAAM;YACN,MAAM,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACvF,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAElE,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,UAAU;YACV,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAClD,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAElD,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAC3E,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YACpD,aAAE,CAAC,UAAwB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE1D,MAAM;YACN,MAAM,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YACvF,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAClE,MAAM,CAAC,aAAE,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,sCAAsC;YAC7E,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,UAAU;YACV,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAClD,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAClD,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;YAE3C,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAC3E,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YACpD,aAAE,CAAC,UAAwB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE1D,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;iBACrD,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;YAE/C,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,UAAU;YACV,qBAAqB,CAAC,sBAAsB,CAAC,kBAAkB,CAC7D,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,aAAa;aACtE,CAAC;YACF,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,KAAK,EAAS,CAAC,CAAC;YAEhE,MAAM;YACN,MAAM,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAElE,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,UAAU;YACV,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAClD,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAC3E,gBAAgB,CAAC,MAAM,CAAC,kBAAkB,CACxC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,aAAa;aACtE,CAAC;YACD,aAAE,CAAC,UAAwB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE1D,MAAM;YACN,MAAM,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,aAAE,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAEzC,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,UAAU;YACV,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,UAAU;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,IAAI,EAAE,WAAW;oBACjB,MAAM,EAAE,kBAA2B;oBACnC,QAAQ,EAAE,CAAC;iBACZ;aACF,CAAC;YAED,aAAE,CAAC,OAAqB,CAAC,iBAAiB,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC9E,aAAE,CAAC,QAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5E,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,KAAK,EAAS,CAAC,CAAC;YAEhE,2BAA2B;YAC3B,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAc,EAAE,oBAAoB,CAAC;iBACxE,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAEhC,MAAM;YACN,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAEvC,SAAS;YACT,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAClE,MAAM,CAAC,kBAAkB,CAAC,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;YAE5D,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,UAAU;YACV,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,UAAU;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,IAAI,EAAE,WAAW;oBACjB,MAAM,EAAE,kBAA2B;oBACnC,QAAQ,EAAE,CAAC;iBACZ;aACF,CAAC;YAED,aAAE,CAAC,OAAqB,CAAC,iBAAiB,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC9E,aAAE,CAAC,QAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5E,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAEzE,2BAA2B;YAC3B,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAc,EAAE,mBAAmB,CAAC;iBACtE,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAEhC,MAAM;YACN,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAEvC,SAAS;YACT,MAAM,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAE9D,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,UAAU;YACV,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,UAAU;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,IAAI,EAAE,WAAW;oBACjB,MAAM,EAAE,kBAA2B;oBACnC,QAAQ,EAAE,CAAC,CAAC,uCAAuC;iBACpD;aACF,CAAC;YAED,aAAE,CAAC,OAAqB,CAAC,iBAAiB,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC9E,aAAE,CAAC,QAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5E,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAEzE,2BAA2B;YAC3B,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAc,EAAE,iBAAiB,CAAC;iBAClE,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAEhC,MAAM;YACN,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAEvC,SAAS;YACT,MAAM,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,UAAU;YACT,aAAE,CAAC,OAAqB,CAAC,iBAAiB,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC9E,aAAE,CAAC,QAAsB,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC;YAErE,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;YAEtE,4DAA4D;YAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,UAAU;YACV,MAAM,UAAU,GAAG;gBACjB;oBACE,EAAE,EAAE,UAAU;oBACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,IAAI,EAAE,WAAW;oBACjB,MAAM,EAAE,kBAA2B;oBACnC,QAAQ,EAAE,CAAC,CAAC,uBAAuB;iBACpC;aACF,CAAC;YAED,aAAE,CAAC,OAAqB,CAAC,iBAAiB,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC;YAC9E,aAAE,CAAC,QAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE5E,MAAM;YACN,MAAM,OAAO,CAAC,sBAAsB,EAAE,CAAC;YAEvC,SAAS;YACT,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,sCAAsC;YACtC,OAAO,CAAC,SAAS,CAAC,GAAG;gBACnB,cAAc,EAAE,EAAE;gBAClB,aAAa,EAAE,EAAE;gBACjB,aAAa,EAAE,EAAE;gBACjB,WAAW,EAAE,CAAC;gBACd,aAAa,EAAE,EAAE;aAClB,CAAC;YAEF,MAAM;YACN,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YAErC,SAAS;YACT,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC;gBACtB,cAAc,EAAE,EAAE;gBAClB,aAAa,EAAE,EAAE;gBACjB,aAAa,EAAE,EAAE;gBACjB,WAAW,EAAE,CAAC;gBACd,aAAa,EAAE,EAAE;gBACjB,gBAAgB,EAAE,EAAE,EAAE,SAAS;gBAC/B,iBAAiB,EAAE,EAAE,EAAE,SAAS;gBAChC,eAAe,EAAE,CAAC,CAAC,QAAQ;aAC5B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,6BAA6B;YAC7B,OAAO,CAAC,YAAY,EAAE,CAAC;YAEvB,MAAM;YACN,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YAErC,SAAS;YACT,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzC,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,UAAU;YACV,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,YAAkB,EAAE,EAAE;gBACvE,IAAI,GAAG,KAAK,gCAAgC,EAAE,CAAC;oBAAA,OAAO,OAAO,CAAC;gBAAA,CAAC;gBAC/D,OAAO,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,wCAAwC;YACxC,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;gBAC3D,SAAS,EAAE;oBACT,uDAAyB;oBACzB,EAAE,OAAO,EAAE,oCAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE;oBACzD,EAAE,OAAO,EAAE,+CAAqB,EAAE,QAAQ,EAAE,qBAAqB,EAAE;oBACnE,EAAE,OAAO,EAAE,yCAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE;oBAC7D,EAAE,OAAO,EAAE,sBAAa,EAAE,QAAQ,EAAE,aAAa,EAAE;iBACpD;aACF,CAAC,CAAC,OAAO,EAAE,CAAC;YAEb,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAA4B,uDAAyB,CAAC,CAAC;YAEpF,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAClD,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAE3E,eAAe;YACf,MAAM,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;iBACxD,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAExC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+DAA+D,EAAE,KAAK,IAAI,EAAE;YAC7E,UAAU;YACV,aAAa,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,GAAW,EAAE,YAAkB,EAAE,EAAE;gBACvE,IAAI,GAAG,KAAK,8BAA8B,EAAE,CAAC;oBAAA,OAAO,OAAO,CAAC;gBAAA,CAAC;gBAC7D,IAAI,GAAG,KAAK,gCAAgC,EAAE,CAAC;oBAAA,OAAO,MAAM,CAAC;gBAAA,CAAC;gBAC9D,OAAO,YAAY,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,wCAAwC;YACxC,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;gBAC3D,SAAS,EAAE;oBACT,uDAAyB;oBACzB,EAAE,OAAO,EAAE,oCAAgB,EAAE,QAAQ,EAAE,gBAAgB,EAAE;oBACzD,EAAE,OAAO,EAAE,+CAAqB,EAAE,QAAQ,EAAE,qBAAqB,EAAE;oBACnE,EAAE,OAAO,EAAE,yCAAkB,EAAE,QAAQ,EAAE,kBAAkB,EAAE;oBAC7D,EAAE,OAAO,EAAE,sBAAa,EAAE,QAAQ,EAAE,aAAa,EAAE;iBACpD;aACF,CAAC,CAAC,OAAO,EAAE,CAAC;YAEb,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAA4B,uDAAyB,CAAC,CAAC;YAEpF,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YAClD,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;YAElD,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;YAC3E,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAErD,eAAe;YACf,MAAM,MAAM,CAAC,UAAU,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;iBACxD,OAAO,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;YAEjD,MAAM,CAAC,aAAE,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,UAAU;YACV,kBAAkB,CAAC,iBAAiB,CAAC,eAAe,CAAC;gBACnD,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE;gBACzB,QAAQ,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;aAC3B,CAAC,CAAC;YAEH,qBAAqB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE1E,MAAM;YACN,MAAM,OAAO,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;YAEjD,SAAS;YACT,MAAM,CAAC,qBAAqB,CAAC,sBAAsB,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;YAEvF,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\resilient-auditoria.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigService } from '@nestjs/config';\nimport { Logger } from '@nestjs/common';\nimport { ResilientAuditoriaService } from './resilient-auditoria.service';\nimport { AuditoriaService } from '../../modules/auditoria/services/auditoria.service';\nimport { AuditoriaQueueService } from '../../modules/auditoria/services/auditoria-queue.service';\nimport { HealthCheckService } from './health-check.service';\nimport { CreateLogAuditoriaDto } from '../../modules/auditoria/dto/create-log-auditoria.dto';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\n\n// Mocks\njest.mock('fs', () => ({\n  promises: {\n    mkdir: jest.fn(),\n    appendFile: jest.fn(),\n    readdir: jest.fn(),\n    readFile: jest.fn()\n  }\n}));\n\ndescribe('ResilientAuditoriaService', () => {\n  let service: ResilientAuditoriaService;\n  let auditoriaService: jest.Mocked<AuditoriaService>;\n  let auditoriaQueueService: jest.Mocked<AuditoriaQueueService>;\n  let healthCheckService: jest.Mocked<HealthCheckService>;\n  let configService: jest.Mocked<ConfigService>;\n\n  const mockLogData: CreateLogAuditoriaDto = {\n    acao: 'CREATE',\n    entidade: 'Usuario',\n    entidadeId: '123',\n    usuarioId: 'user-123',\n    dadosAnteriores: null,\n    dadosNovos: { nome: 'Teste' },\n    ip: '127.0.0.1',\n    userAgent: 'test-agent'\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ResilientAuditoriaService,\n        {\n          provide: AuditoriaService,\n          useValue: {\n            create: jest.fn()\n          }\n        },\n        {\n          provide: AuditoriaQueueService,\n          useValue: {\n            enfileirarLogAuditoria: jest.fn()\n          }\n        },\n        {\n          provide: HealthCheckService,\n          useValue: {\n            getServicesStatus: jest.fn()\n          }\n        },\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn((key: string, defaultValue?: any) => {\n              const config = {\n                'AUDITORIA_BACKUP_PATH': './test-logs/audit-backup',\n                'AUDITORIA_ENABLE_SYNC_FALLBACK': 'true',\n                'AUDITORIA_ENABLE_FILE_BACKUP': 'true'\n              };\n              return config[key] || defaultValue;\n            })\n          }\n        }\n      ]\n    }).compile();\n\n    service = module.get<ResilientAuditoriaService>(ResilientAuditoriaService);\n    auditoriaService = module.get(AuditoriaService);\n    auditoriaQueueService = module.get(AuditoriaQueueService);\n    healthCheckService = module.get(HealthCheckService);\n    configService = module.get(ConfigService);\n\n    // Limpar métricas antes de cada teste\n    service.resetMetrics();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('registrarLogResilient', () => {\n    it('deve registrar log via fila quando disponível', async () => {\n      // Arrange\n      auditoriaQueueService.enfileirarLogAuditoria.mockResolvedValue(undefined);\n\n      // Act\n      await service.registrarLogResilient(mockLogData);\n\n      // Assert\n      expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);\n      expect(auditoriaService.create).not.toHaveBeenCalled();\n      \n      const metrics = service.getMetrics();\n      expect(metrics.queueSuccesses).toBe(1);\n      expect(metrics.queueFailures).toBe(0);\n    });\n\n    it('deve usar fallback síncrono quando fila falha', async () => {\n      // Arrange\n      const queueError = new Error('Fila indisponível');\n      auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);\n      auditoriaService.create.mockResolvedValue({ id: '123' } as any);\n\n      // Act\n      await service.registrarLogResilient(mockLogData);\n\n      // Assert\n      expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);\n      expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);\n      \n      const metrics = service.getMetrics();\n      expect(metrics.queueFailures).toBe(1);\n      expect(metrics.syncFallbacks).toBe(1);\n    });\n\n    it('deve usar backup em arquivo quando fila e sync falham', async () => {\n      // Arrange\n      const queueError = new Error('Fila indisponível');\n      const syncError = new Error('Banco indisponível');\n      \n      auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);\n      auditoriaService.create.mockRejectedValue(syncError);\n      (fs.appendFile as jest.Mock).mockResolvedValue(undefined);\n\n      // Act\n      await service.registrarLogResilient(mockLogData);\n\n      // Assert\n      expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);\n      expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);\n      expect(fs.appendFile).toHaveBeenCalled();\n      \n      const metrics = service.getMetrics();\n      expect(metrics.queueFailures).toBe(1);\n      expect(metrics.syncFallbacks).toBe(0); // Falhou antes de contar como sucesso\n      expect(metrics.fileBackups).toBe(1);\n    });\n\n    it('deve falhar quando todas as estratégias falham', async () => {\n      // Arrange\n      const queueError = new Error('Fila indisponível');\n      const syncError = new Error('Banco indisponível');\n      const fileError = new Error('Disco cheio');\n      \n      auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);\n      auditoriaService.create.mockRejectedValue(syncError);\n      (fs.appendFile as jest.Mock).mockRejectedValue(fileError);\n\n      // Act & Assert\n      await expect(service.registrarLogResilient(mockLogData))\n        .rejects.toThrow('Falha total na auditoria');\n      \n      const metrics = service.getMetrics();\n      expect(metrics.queueFailures).toBe(1);\n      expect(metrics.fileBackups).toBe(0);\n    });\n\n    it('deve respeitar timeout na fila', async () => {\n      // Arrange\n      auditoriaQueueService.enfileirarLogAuditoria.mockImplementation(\n        () => new Promise(resolve => setTimeout(resolve, 3000)) // 3 segundos\n      );\n      auditoriaService.create.mockResolvedValue({ id: '123' } as any);\n\n      // Act\n      await service.registrarLogResilient(mockLogData);\n\n      // Assert\n      expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);\n      \n      const metrics = service.getMetrics();\n      expect(metrics.queueFailures).toBe(1);\n      expect(metrics.syncFallbacks).toBe(1);\n    });\n\n    it('deve respeitar timeout no sync', async () => {\n      // Arrange\n      const queueError = new Error('Fila indisponível');\n      auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);\n      auditoriaService.create.mockImplementation(\n        () => new Promise(resolve => setTimeout(resolve, 6000)) // 6 segundos\n      );\n      (fs.appendFile as jest.Mock).mockResolvedValue(undefined);\n\n      // Act\n      await service.registrarLogResilient(mockLogData);\n\n      // Assert\n      expect(fs.appendFile).toHaveBeenCalled();\n      \n      const metrics = service.getMetrics();\n      expect(metrics.fileBackups).toBe(1);\n    });\n  });\n\n  describe('processBackupAuditLogs', () => {\n    it('deve processar logs de backup com sucesso', async () => {\n      // Arrange\n      const backupLogs = [\n        {\n          id: 'backup_1',\n          timestamp: new Date().toISOString(),\n          data: mockLogData,\n          status: 'pending_recovery' as const,\n          attempts: 0\n        }\n      ];\n      \n      (fs.readdir as jest.Mock).mockResolvedValue(['audit-backup-2024-01-01.jsonl']);\n      (fs.readFile as jest.Mock).mockResolvedValue(JSON.stringify(backupLogs[0]));\n      auditoriaService.create.mockResolvedValue({ id: '123' } as any);\n\n      // Spy nos métodos privados\n      const markAsProcessedSpy = jest.spyOn(service as any, 'markLogAsProcessed')\n        .mockResolvedValue(undefined);\n\n      // Act\n      await service.processBackupAuditLogs();\n\n      // Assert\n      expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);\n      expect(markAsProcessedSpy).toHaveBeenCalledWith('backup_1');\n      \n      const metrics = service.getMetrics();\n      expect(metrics.recoveredLogs).toBe(1);\n    });\n\n    it('deve incrementar tentativas quando falha na recuperação', async () => {\n      // Arrange\n      const backupLogs = [\n        {\n          id: 'backup_1',\n          timestamp: new Date().toISOString(),\n          data: mockLogData,\n          status: 'pending_recovery' as const,\n          attempts: 1\n        }\n      ];\n      \n      (fs.readdir as jest.Mock).mockResolvedValue(['audit-backup-2024-01-01.jsonl']);\n      (fs.readFile as jest.Mock).mockResolvedValue(JSON.stringify(backupLogs[0]));\n      auditoriaService.create.mockRejectedValue(new Error('Falha temporária'));\n\n      // Spy nos métodos privados\n      const updateAttemptsSpy = jest.spyOn(service as any, 'updateLogAttempts')\n        .mockResolvedValue(undefined);\n\n      // Act\n      await service.processBackupAuditLogs();\n\n      // Assert\n      expect(updateAttemptsSpy).toHaveBeenCalledWith('backup_1', 2);\n      \n      const metrics = service.getMetrics();\n      expect(metrics.recoveredLogs).toBe(0);\n    });\n\n    it('deve marcar como falha definitiva após máximo de tentativas', async () => {\n      // Arrange\n      const backupLogs = [\n        {\n          id: 'backup_1',\n          timestamp: new Date().toISOString(),\n          data: mockLogData,\n          status: 'pending_recovery' as const,\n          attempts: 2 // Próxima tentativa será a 3ª (máximo)\n        }\n      ];\n      \n      (fs.readdir as jest.Mock).mockResolvedValue(['audit-backup-2024-01-01.jsonl']);\n      (fs.readFile as jest.Mock).mockResolvedValue(JSON.stringify(backupLogs[0]));\n      auditoriaService.create.mockRejectedValue(new Error('Falha permanente'));\n\n      // Spy nos métodos privados\n      const markAsFailedSpy = jest.spyOn(service as any, 'markLogAsFailed')\n        .mockResolvedValue(undefined);\n\n      // Act\n      await service.processBackupAuditLogs();\n\n      // Assert\n      expect(markAsFailedSpy).toHaveBeenCalledWith('backup_1');\n    });\n\n    it('deve lidar com arquivos de backup corrompidos', async () => {\n      // Arrange\n      (fs.readdir as jest.Mock).mockResolvedValue(['audit-backup-2024-01-01.jsonl']);\n      (fs.readFile as jest.Mock).mockResolvedValue('invalid json content');\n\n      // Act & Assert\n      await expect(service.processBackupAuditLogs()).resolves.not.toThrow();\n      \n      // Deve continuar processamento mesmo com arquivo corrompido\n      const metrics = service.getMetrics();\n      expect(metrics.recoveredLogs).toBe(0);\n    });\n\n    it('deve ignorar logs que já excederam tentativas máximas', async () => {\n      // Arrange\n      const backupLogs = [\n        {\n          id: 'backup_1',\n          timestamp: new Date().toISOString(),\n          data: mockLogData,\n          status: 'pending_recovery' as const,\n          attempts: 5 // Excede o máximo de 3\n        }\n      ];\n      \n      (fs.readdir as jest.Mock).mockResolvedValue(['audit-backup-2024-01-01.jsonl']);\n      (fs.readFile as jest.Mock).mockResolvedValue(JSON.stringify(backupLogs[0]));\n\n      // Act\n      await service.processBackupAuditLogs();\n\n      // Assert\n      expect(auditoriaService.create).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('getMetrics', () => {\n    it('deve retornar métricas corretas', () => {\n      // Arrange - simular algumas operações\n      service['metrics'] = {\n        queueSuccesses: 80,\n        queueFailures: 20,\n        syncFallbacks: 15,\n        fileBackups: 5,\n        recoveredLogs: 10\n      };\n\n      // Act\n      const metrics = service.getMetrics();\n\n      // Assert\n      expect(metrics).toEqual({\n        queueSuccesses: 80,\n        queueFailures: 20,\n        syncFallbacks: 15,\n        fileBackups: 5,\n        recoveredLogs: 10,\n        queueSuccessRate: 80, // 80/100\n        fallbackUsageRate: 15, // 15/100\n        backupUsageRate: 5 // 5/100\n      });\n    });\n\n    it('deve lidar com divisão por zero', () => {\n      // Arrange - métricas zeradas\n      service.resetMetrics();\n\n      // Act\n      const metrics = service.getMetrics();\n\n      // Assert\n      expect(metrics.queueSuccessRate).toBe(0);\n      expect(metrics.fallbackUsageRate).toBe(0);\n      expect(metrics.backupUsageRate).toBe(0);\n    });\n  });\n\n  describe('configurações', () => {\n    it('deve respeitar configuração de fallback síncrono desabilitado', async () => {\n      // Arrange\n      configService.get.mockImplementation((key: string, defaultValue?: any) => {\n        if (key === 'AUDITORIA_ENABLE_SYNC_FALLBACK') {return 'false';}\n        return defaultValue;\n      });\n\n      // Recriar serviço com nova configuração\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [\n          ResilientAuditoriaService,\n          { provide: AuditoriaService, useValue: auditoriaService },\n          { provide: AuditoriaQueueService, useValue: auditoriaQueueService },\n          { provide: HealthCheckService, useValue: healthCheckService },\n          { provide: ConfigService, useValue: configService }\n        ]\n      }).compile();\n\n      const newService = module.get<ResilientAuditoriaService>(ResilientAuditoriaService);\n\n      const queueError = new Error('Fila indisponível');\n      auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);\n\n      // Act & Assert\n      await expect(newService.registrarLogResilient(mockLogData))\n        .rejects.toThrow('Fila indisponível');\n      \n      expect(auditoriaService.create).not.toHaveBeenCalled();\n    });\n\n    it('deve respeitar configuração de backup em arquivo desabilitado', async () => {\n      // Arrange\n      configService.get.mockImplementation((key: string, defaultValue?: any) => {\n        if (key === 'AUDITORIA_ENABLE_FILE_BACKUP') {return 'false';}\n        if (key === 'AUDITORIA_ENABLE_SYNC_FALLBACK') {return 'true';}\n        return defaultValue;\n      });\n\n      // Recriar serviço com nova configuração\n      const module: TestingModule = await Test.createTestingModule({\n        providers: [\n          ResilientAuditoriaService,\n          { provide: AuditoriaService, useValue: auditoriaService },\n          { provide: AuditoriaQueueService, useValue: auditoriaQueueService },\n          { provide: HealthCheckService, useValue: healthCheckService },\n          { provide: ConfigService, useValue: configService }\n        ]\n      }).compile();\n\n      const newService = module.get<ResilientAuditoriaService>(ResilientAuditoriaService);\n\n      const queueError = new Error('Fila indisponível');\n      const syncError = new Error('Banco indisponível');\n      \n      auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);\n      auditoriaService.create.mockRejectedValue(syncError);\n\n      // Act & Assert\n      await expect(newService.registrarLogResilient(mockLogData))\n        .rejects.toThrow('Falha crítica na auditoria');\n      \n      expect(fs.appendFile).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('integração com health check', () => {\n    it('deve funcionar independentemente do status do health check', async () => {\n      // Arrange\n      healthCheckService.getServicesStatus.mockReturnValue({\n        redis: { status: 'down' },\n        database: { status: 'up' }\n      });\n      \n      auditoriaQueueService.enfileirarLogAuditoria.mockResolvedValue(undefined);\n\n      // Act\n      await service.registrarLogResilient(mockLogData);\n\n      // Assert\n      expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);\n      \n      const metrics = service.getMetrics();\n      expect(metrics.queueSuccesses).toBe(1);\n    });\n  });\n});"],"version":3}