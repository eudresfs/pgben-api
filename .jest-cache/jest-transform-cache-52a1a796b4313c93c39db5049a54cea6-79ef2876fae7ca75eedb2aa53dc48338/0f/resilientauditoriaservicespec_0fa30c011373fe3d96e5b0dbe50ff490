38820908aec43f676a0383fb5197c534
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mocks
jest.mock('fs', () => ({
    promises: {
        mkdir: jest.fn(),
        appendFile: jest.fn(),
        readdir: jest.fn(),
        readFile: jest.fn()
    }
}));
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const resilient_auditoria_service_1 = require("./resilient-auditoria.service");
const auditoria_service_1 = require("../../modules/auditoria/services/auditoria.service");
const auditoria_queue_service_1 = require("../../modules/auditoria/services/auditoria-queue.service");
const health_check_service_1 = require("./health-check.service");
const fs_1 = require("fs");
describe('ResilientAuditoriaService', () => {
    let service;
    let auditoriaService;
    let auditoriaQueueService;
    let healthCheckService;
    let configService;
    const mockLogData = {
        acao: 'CREATE',
        entidade: 'Usuario',
        entidadeId: '123',
        usuarioId: 'user-123',
        dadosAnteriores: null,
        dadosNovos: { nome: 'Teste' },
        ip: '127.0.0.1',
        userAgent: 'test-agent'
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                resilient_auditoria_service_1.ResilientAuditoriaService,
                {
                    provide: auditoria_service_1.AuditoriaService,
                    useValue: {
                        create: jest.fn()
                    }
                },
                {
                    provide: auditoria_queue_service_1.AuditoriaQueueService,
                    useValue: {
                        enfileirarLogAuditoria: jest.fn()
                    }
                },
                {
                    provide: health_check_service_1.HealthCheckService,
                    useValue: {
                        getServicesStatus: jest.fn()
                    }
                },
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn((key, defaultValue) => {
                            const config = {
                                'AUDITORIA_BACKUP_PATH': './test-logs/audit-backup',
                                'AUDITORIA_ENABLE_SYNC_FALLBACK': 'true',
                                'AUDITORIA_ENABLE_FILE_BACKUP': 'true'
                            };
                            return config[key] || defaultValue;
                        })
                    }
                }
            ]
        }).compile();
        service = module.get(resilient_auditoria_service_1.ResilientAuditoriaService);
        auditoriaService = module.get(auditoria_service_1.AuditoriaService);
        auditoriaQueueService = module.get(auditoria_queue_service_1.AuditoriaQueueService);
        healthCheckService = module.get(health_check_service_1.HealthCheckService);
        configService = module.get(config_1.ConfigService);
        // Limpar métricas antes de cada teste
        service.resetMetrics();
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('registrarLogResilient', () => {
        it('deve registrar log via fila quando disponível', async () => {
            // Arrange
            auditoriaQueueService.enfileirarLogAuditoria.mockResolvedValue(undefined);
            // Act
            await service.registrarLogResilient(mockLogData);
            // Assert
            expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);
            expect(auditoriaService.create).not.toHaveBeenCalled();
            const metrics = service.getMetrics();
            expect(metrics.queueSuccesses).toBe(1);
            expect(metrics.queueFailures).toBe(0);
        });
        it('deve usar fallback síncrono quando fila falha', async () => {
            // Arrange
            const queueError = new Error('Fila indisponível');
            auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);
            auditoriaService.create.mockResolvedValue({ id: '123' });
            // Act
            await service.registrarLogResilient(mockLogData);
            // Assert
            expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);
            expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);
            const metrics = service.getMetrics();
            expect(metrics.queueFailures).toBe(1);
            expect(metrics.syncFallbacks).toBe(1);
        });
        it('deve usar backup em arquivo quando fila e sync falham', async () => {
            // Arrange
            const queueError = new Error('Fila indisponível');
            const syncError = new Error('Banco indisponível');
            auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);
            auditoriaService.create.mockRejectedValue(syncError);
            fs_1.promises.appendFile.mockResolvedValue(undefined);
            // Act
            await service.registrarLogResilient(mockLogData);
            // Assert
            expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);
            expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);
            expect(fs_1.promises.appendFile).toHaveBeenCalled();
            const metrics = service.getMetrics();
            expect(metrics.queueFailures).toBe(1);
            expect(metrics.syncFallbacks).toBe(0); // Falhou antes de contar como sucesso
            expect(metrics.fileBackups).toBe(1);
        });
        it('deve falhar quando todas as estratégias falham', async () => {
            // Arrange
            const queueError = new Error('Fila indisponível');
            const syncError = new Error('Banco indisponível');
            const fileError = new Error('Disco cheio');
            auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);
            auditoriaService.create.mockRejectedValue(syncError);
            fs_1.promises.appendFile.mockRejectedValue(fileError);
            // Act & Assert
            await expect(service.registrarLogResilient(mockLogData))
                .rejects.toThrow('Falha total na auditoria');
            const metrics = service.getMetrics();
            expect(metrics.queueFailures).toBe(1);
            expect(metrics.fileBackups).toBe(0);
        });
        it('deve respeitar timeout na fila', async () => {
            // Arrange
            auditoriaQueueService.enfileirarLogAuditoria.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 3000)) // 3 segundos
            );
            auditoriaService.create.mockResolvedValue({ id: '123' });
            // Act
            await service.registrarLogResilient(mockLogData);
            // Assert
            expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);
            const metrics = service.getMetrics();
            expect(metrics.queueFailures).toBe(1);
            expect(metrics.syncFallbacks).toBe(1);
        });
        it('deve respeitar timeout no sync', async () => {
            // Arrange
            const queueError = new Error('Fila indisponível');
            auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);
            auditoriaService.create.mockImplementation(() => new Promise(resolve => setTimeout(resolve, 6000)) // 6 segundos
            );
            fs_1.promises.appendFile.mockResolvedValue(undefined);
            // Act
            await service.registrarLogResilient(mockLogData);
            // Assert
            expect(fs_1.promises.appendFile).toHaveBeenCalled();
            const metrics = service.getMetrics();
            expect(metrics.fileBackups).toBe(1);
        });
    });
    describe('processBackupAuditLogs', () => {
        it('deve processar logs de backup com sucesso', async () => {
            // Arrange
            const backupLogs = [
                {
                    id: 'backup_1',
                    timestamp: new Date().toISOString(),
                    data: mockLogData,
                    status: 'pending_recovery',
                    attempts: 0
                }
            ];
            fs_1.promises.readdir.mockResolvedValue(['audit-backup-2024-01-01.jsonl']);
            fs_1.promises.readFile.mockResolvedValue(JSON.stringify(backupLogs[0]));
            auditoriaService.create.mockResolvedValue({ id: '123' });
            // Spy nos métodos privados
            const markAsProcessedSpy = jest.spyOn(service, 'markLogAsProcessed')
                .mockResolvedValue(undefined);
            // Act
            await service.processBackupAuditLogs();
            // Assert
            expect(auditoriaService.create).toHaveBeenCalledWith(mockLogData);
            expect(markAsProcessedSpy).toHaveBeenCalledWith('backup_1');
            const metrics = service.getMetrics();
            expect(metrics.recoveredLogs).toBe(1);
        });
        it('deve incrementar tentativas quando falha na recuperação', async () => {
            // Arrange
            const backupLogs = [
                {
                    id: 'backup_1',
                    timestamp: new Date().toISOString(),
                    data: mockLogData,
                    status: 'pending_recovery',
                    attempts: 1
                }
            ];
            fs_1.promises.readdir.mockResolvedValue(['audit-backup-2024-01-01.jsonl']);
            fs_1.promises.readFile.mockResolvedValue(JSON.stringify(backupLogs[0]));
            auditoriaService.create.mockRejectedValue(new Error('Falha temporária'));
            // Spy nos métodos privados
            const updateAttemptsSpy = jest.spyOn(service, 'updateLogAttempts')
                .mockResolvedValue(undefined);
            // Act
            await service.processBackupAuditLogs();
            // Assert
            expect(updateAttemptsSpy).toHaveBeenCalledWith('backup_1', 2);
            const metrics = service.getMetrics();
            expect(metrics.recoveredLogs).toBe(0);
        });
        it('deve marcar como falha definitiva após máximo de tentativas', async () => {
            // Arrange
            const backupLogs = [
                {
                    id: 'backup_1',
                    timestamp: new Date().toISOString(),
                    data: mockLogData,
                    status: 'pending_recovery',
                    attempts: 2 // Próxima tentativa será a 3ª (máximo)
                }
            ];
            fs_1.promises.readdir.mockResolvedValue(['audit-backup-2024-01-01.jsonl']);
            fs_1.promises.readFile.mockResolvedValue(JSON.stringify(backupLogs[0]));
            auditoriaService.create.mockRejectedValue(new Error('Falha permanente'));
            // Spy nos métodos privados
            const markAsFailedSpy = jest.spyOn(service, 'markLogAsFailed')
                .mockResolvedValue(undefined);
            // Act
            await service.processBackupAuditLogs();
            // Assert
            expect(markAsFailedSpy).toHaveBeenCalledWith('backup_1');
        });
        it('deve lidar com arquivos de backup corrompidos', async () => {
            // Arrange
            fs_1.promises.readdir.mockResolvedValue(['audit-backup-2024-01-01.jsonl']);
            fs_1.promises.readFile.mockResolvedValue('invalid json content');
            // Act & Assert
            await expect(service.processBackupAuditLogs()).resolves.not.toThrow();
            // Deve continuar processamento mesmo com arquivo corrompido
            const metrics = service.getMetrics();
            expect(metrics.recoveredLogs).toBe(0);
        });
        it('deve ignorar logs que já excederam tentativas máximas', async () => {
            // Arrange
            const backupLogs = [
                {
                    id: 'backup_1',
                    timestamp: new Date().toISOString(),
                    data: mockLogData,
                    status: 'pending_recovery',
                    attempts: 5 // Excede o máximo de 3
                }
            ];
            fs_1.promises.readdir.mockResolvedValue(['audit-backup-2024-01-01.jsonl']);
            fs_1.promises.readFile.mockResolvedValue(JSON.stringify(backupLogs[0]));
            // Act
            await service.processBackupAuditLogs();
            // Assert
            expect(auditoriaService.create).not.toHaveBeenCalled();
        });
    });
    describe('getMetrics', () => {
        it('deve retornar métricas corretas', () => {
            // Arrange - simular algumas operações
            service['metrics'] = {
                queueSuccesses: 80,
                queueFailures: 20,
                syncFallbacks: 15,
                fileBackups: 5,
                recoveredLogs: 10
            };
            // Act
            const metrics = service.getMetrics();
            // Assert
            expect(metrics).toEqual({
                queueSuccesses: 80,
                queueFailures: 20,
                syncFallbacks: 15,
                fileBackups: 5,
                recoveredLogs: 10,
                queueSuccessRate: 80, // 80/100
                fallbackUsageRate: 15, // 15/100
                backupUsageRate: 5 // 5/100
            });
        });
        it('deve lidar com divisão por zero', () => {
            // Arrange - métricas zeradas
            service.resetMetrics();
            // Act
            const metrics = service.getMetrics();
            // Assert
            expect(metrics.queueSuccessRate).toBe(0);
            expect(metrics.fallbackUsageRate).toBe(0);
            expect(metrics.backupUsageRate).toBe(0);
        });
    });
    describe('configurações', () => {
        it('deve respeitar configuração de fallback síncrono desabilitado', async () => {
            // Arrange
            configService.get.mockImplementation((key, defaultValue) => {
                if (key === 'AUDITORIA_ENABLE_SYNC_FALLBACK') {
                    return 'false';
                }
                return defaultValue;
            });
            // Recriar serviço com nova configuração
            const module = await testing_1.Test.createTestingModule({
                providers: [
                    resilient_auditoria_service_1.ResilientAuditoriaService,
                    { provide: auditoria_service_1.AuditoriaService, useValue: auditoriaService },
                    { provide: auditoria_queue_service_1.AuditoriaQueueService, useValue: auditoriaQueueService },
                    { provide: health_check_service_1.HealthCheckService, useValue: healthCheckService },
                    { provide: config_1.ConfigService, useValue: configService }
                ]
            }).compile();
            const newService = module.get(resilient_auditoria_service_1.ResilientAuditoriaService);
            const queueError = new Error('Fila indisponível');
            auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);
            // Act & Assert
            await expect(newService.registrarLogResilient(mockLogData))
                .rejects.toThrow('Fila indisponível');
            expect(auditoriaService.create).not.toHaveBeenCalled();
        });
        it('deve respeitar configuração de backup em arquivo desabilitado', async () => {
            // Arrange
            configService.get.mockImplementation((key, defaultValue) => {
                if (key === 'AUDITORIA_ENABLE_FILE_BACKUP') {
                    return 'false';
                }
                if (key === 'AUDITORIA_ENABLE_SYNC_FALLBACK') {
                    return 'true';
                }
                return defaultValue;
            });
            // Recriar serviço com nova configuração
            const module = await testing_1.Test.createTestingModule({
                providers: [
                    resilient_auditoria_service_1.ResilientAuditoriaService,
                    { provide: auditoria_service_1.AuditoriaService, useValue: auditoriaService },
                    { provide: auditoria_queue_service_1.AuditoriaQueueService, useValue: auditoriaQueueService },
                    { provide: health_check_service_1.HealthCheckService, useValue: healthCheckService },
                    { provide: config_1.ConfigService, useValue: configService }
                ]
            }).compile();
            const newService = module.get(resilient_auditoria_service_1.ResilientAuditoriaService);
            const queueError = new Error('Fila indisponível');
            const syncError = new Error('Banco indisponível');
            auditoriaQueueService.enfileirarLogAuditoria.mockRejectedValue(queueError);
            auditoriaService.create.mockRejectedValue(syncError);
            // Act & Assert
            await expect(newService.registrarLogResilient(mockLogData))
                .rejects.toThrow('Falha crítica na auditoria');
            expect(fs_1.promises.appendFile).not.toHaveBeenCalled();
        });
    });
    describe('integração com health check', () => {
        it('deve funcionar independentemente do status do health check', async () => {
            // Arrange
            healthCheckService.getServicesStatus.mockReturnValue({
                redis: { status: 'down' },
                database: { status: 'up' }
            });
            auditoriaQueueService.enfileirarLogAuditoria.mockResolvedValue(undefined);
            // Act
            await service.registrarLogResilient(mockLogData);
            // Assert
            expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalledWith(mockLogData);
            const metrics = service.getMetrics();
            expect(metrics.queueSuccesses).toBe(1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcc2VydmljZXNcXHJlc2lsaWVudC1hdWRpdG9yaWEuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBV0EsUUFBUTtBQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckIsUUFBUSxFQUFFO1FBQ1IsS0FBSyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDaEIsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDckIsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDbEIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDcEI7Q0FDRixDQUFDLENBQUMsQ0FBQztBQW5CSiw2Q0FBc0Q7QUFDdEQsMkNBQStDO0FBRS9DLCtFQUEwRTtBQUMxRSwwRkFBc0Y7QUFDdEYsc0dBQWlHO0FBQ2pHLGlFQUE0RDtBQUU1RCwyQkFBb0M7QUFhcEMsUUFBUSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtJQUN6QyxJQUFJLE9BQWtDLENBQUM7SUFDdkMsSUFBSSxnQkFBK0MsQ0FBQztJQUNwRCxJQUFJLHFCQUF5RCxDQUFDO0lBQzlELElBQUksa0JBQW1ELENBQUM7SUFDeEQsSUFBSSxhQUF5QyxDQUFDO0lBRTlDLE1BQU0sV0FBVyxHQUEwQjtRQUN6QyxJQUFJLEVBQUUsUUFBUTtRQUNkLFFBQVEsRUFBRSxTQUFTO1FBQ25CLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLGVBQWUsRUFBRSxJQUFJO1FBQ3JCLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7UUFDN0IsRUFBRSxFQUFFLFdBQVc7UUFDZixTQUFTLEVBQUUsWUFBWTtLQUN4QixDQUFDO0lBRUYsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxTQUFTLEVBQUU7Z0JBQ1QsdURBQXlCO2dCQUN6QjtvQkFDRSxPQUFPLEVBQUUsb0NBQWdCO29CQUN6QixRQUFRLEVBQUU7d0JBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7cUJBQ2xCO2lCQUNGO2dCQUNEO29CQUNFLE9BQU8sRUFBRSwrQ0FBcUI7b0JBQzlCLFFBQVEsRUFBRTt3QkFDUixzQkFBc0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO3FCQUNsQztpQkFDRjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUseUNBQWtCO29CQUMzQixRQUFRLEVBQUU7d0JBQ1IsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtxQkFDN0I7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHNCQUFhO29CQUN0QixRQUFRLEVBQUU7d0JBQ1IsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFXLEVBQUUsWUFBa0IsRUFBRSxFQUFFOzRCQUMvQyxNQUFNLE1BQU0sR0FBRztnQ0FDYix1QkFBdUIsRUFBRSwwQkFBMEI7Z0NBQ25ELGdDQUFnQyxFQUFFLE1BQU07Z0NBQ3hDLDhCQUE4QixFQUFFLE1BQU07NkJBQ3ZDLENBQUM7NEJBQ0YsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDO3dCQUNyQyxDQUFDLENBQUM7cUJBQ0g7aUJBQ0Y7YUFDRjtTQUNGLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUViLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUE0Qix1REFBeUIsQ0FBQyxDQUFDO1FBQzNFLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsb0NBQWdCLENBQUMsQ0FBQztRQUNoRCxxQkFBcUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLCtDQUFxQixDQUFDLENBQUM7UUFDMUQsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyx5Q0FBa0IsQ0FBQyxDQUFDO1FBQ3BELGFBQWEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLHNCQUFhLENBQUMsQ0FBQztRQUUxQyxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDckMsRUFBRSxDQUFDLCtDQUErQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzdELFVBQVU7WUFDVixxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUUxRSxNQUFNO1lBQ04sTUFBTSxPQUFPLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFakQsU0FBUztZQUNULE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3ZGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUV2RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDN0QsVUFBVTtZQUNWLE1BQU0sVUFBVSxHQUFHLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDbEQscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0UsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBUyxDQUFDLENBQUM7WUFFaEUsTUFBTTtZQUNOLE1BQU0sT0FBTyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWpELFNBQVM7WUFDVCxNQUFNLENBQUMscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN2RixNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFbEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVEQUF1RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3JFLFVBQVU7WUFDVixNQUFNLFVBQVUsR0FBRyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sU0FBUyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFFbEQscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0UsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BELGFBQUUsQ0FBQyxVQUF3QixDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTFELE1BQU07WUFDTixNQUFNLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVqRCxTQUFTO1lBQ1QsTUFBTSxDQUFDLHFCQUFxQixDQUFDLHNCQUFzQixDQUFDLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDdkYsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sQ0FBQyxhQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUV6QyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQ0FBc0M7WUFDN0UsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDOUQsVUFBVTtZQUNWLE1BQU0sVUFBVSxHQUFHLElBQUksS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7WUFDbEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNsRCxNQUFNLFNBQVMsR0FBRyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUUzQyxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMzRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDcEQsYUFBRSxDQUFDLFVBQXdCLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFMUQsZUFBZTtZQUNmLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDckQsT0FBTyxDQUFDLE9BQU8sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBRS9DLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM5QyxVQUFVO1lBQ1YscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQzdELEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWE7YUFDdEUsQ0FBQztZQUNGLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQVMsQ0FBQyxDQUFDO1lBRWhFLE1BQU07WUFDTixNQUFNLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVqRCxTQUFTO1lBQ1QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRWxFLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxNQUFNLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM5QyxVQUFVO1lBQ1YsTUFBTSxVQUFVLEdBQUcsSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUNsRCxxQkFBcUIsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMzRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQ3hDLEdBQUcsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLGFBQWE7YUFDdEUsQ0FBQztZQUNELGFBQUUsQ0FBQyxVQUF3QixDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTFELE1BQU07WUFDTixNQUFNLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVqRCxTQUFTO1lBQ1QsTUFBTSxDQUFDLGFBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBRXpDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNyQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUN0QyxFQUFFLENBQUMsMkNBQTJDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDekQsVUFBVTtZQUNWLE1BQU0sVUFBVSxHQUFHO2dCQUNqQjtvQkFDRSxFQUFFLEVBQUUsVUFBVTtvQkFDZCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7b0JBQ25DLElBQUksRUFBRSxXQUFXO29CQUNqQixNQUFNLEVBQUUsa0JBQTJCO29CQUNuQyxRQUFRLEVBQUUsQ0FBQztpQkFDWjthQUNGLENBQUM7WUFFRCxhQUFFLENBQUMsT0FBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLCtCQUErQixDQUFDLENBQUMsQ0FBQztZQUM5RSxhQUFFLENBQUMsUUFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBUyxDQUFDLENBQUM7WUFFaEUsMkJBQTJCO1lBQzNCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFjLEVBQUUsb0JBQW9CLENBQUM7aUJBQ3hFLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRWhDLE1BQU07WUFDTixNQUFNLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRXZDLFNBQVM7WUFDVCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEUsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFNUQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3ZFLFVBQVU7WUFDVixNQUFNLFVBQVUsR0FBRztnQkFDakI7b0JBQ0UsRUFBRSxFQUFFLFVBQVU7b0JBQ2QsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO29CQUNuQyxJQUFJLEVBQUUsV0FBVztvQkFDakIsTUFBTSxFQUFFLGtCQUEyQjtvQkFDbkMsUUFBUSxFQUFFLENBQUM7aUJBQ1o7YUFDRixDQUFDO1lBRUQsYUFBRSxDQUFDLE9BQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7WUFDOUUsYUFBRSxDQUFDLFFBQXNCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFFekUsMkJBQTJCO1lBQzNCLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFjLEVBQUUsbUJBQW1CLENBQUM7aUJBQ3RFLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRWhDLE1BQU07WUFDTixNQUFNLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRXZDLFNBQVM7WUFDVCxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFOUQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDZEQUE2RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzNFLFVBQVU7WUFDVixNQUFNLFVBQVUsR0FBRztnQkFDakI7b0JBQ0UsRUFBRSxFQUFFLFVBQVU7b0JBQ2QsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO29CQUNuQyxJQUFJLEVBQUUsV0FBVztvQkFDakIsTUFBTSxFQUFFLGtCQUEyQjtvQkFDbkMsUUFBUSxFQUFFLENBQUMsQ0FBQyx1Q0FBdUM7aUJBQ3BEO2FBQ0YsQ0FBQztZQUVELGFBQUUsQ0FBQyxPQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDO1lBQzlFLGFBQUUsQ0FBQyxRQUFzQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsSUFBSSxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBRXpFLDJCQUEyQjtZQUMzQixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQWMsRUFBRSxpQkFBaUIsQ0FBQztpQkFDbEUsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFaEMsTUFBTTtZQUNOLE1BQU0sT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7WUFFdkMsU0FBUztZQUNULE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCxVQUFVO1lBQ1QsYUFBRSxDQUFDLE9BQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7WUFDOUUsYUFBRSxDQUFDLFFBQXNCLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUVyRSxlQUFlO1lBQ2YsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRXRFLDREQUE0RDtZQUM1RCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsdURBQXVELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDckUsVUFBVTtZQUNWLE1BQU0sVUFBVSxHQUFHO2dCQUNqQjtvQkFDRSxFQUFFLEVBQUUsVUFBVTtvQkFDZCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7b0JBQ25DLElBQUksRUFBRSxXQUFXO29CQUNqQixNQUFNLEVBQUUsa0JBQTJCO29CQUNuQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QjtpQkFDcEM7YUFDRixDQUFDO1lBRUQsYUFBRSxDQUFDLE9BQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUM7WUFDOUUsYUFBRSxDQUFDLFFBQXNCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTVFLE1BQU07WUFDTixNQUFNLE9BQU8sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1lBRXZDLFNBQVM7WUFDVCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO1FBQzFCLEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDekMsc0NBQXNDO1lBQ3RDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRztnQkFDbkIsY0FBYyxFQUFFLEVBQUU7Z0JBQ2xCLGFBQWEsRUFBRSxFQUFFO2dCQUNqQixhQUFhLEVBQUUsRUFBRTtnQkFDakIsV0FBVyxFQUFFLENBQUM7Z0JBQ2QsYUFBYSxFQUFFLEVBQUU7YUFDbEIsQ0FBQztZQUVGLE1BQU07WUFDTixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7WUFFckMsU0FBUztZQUNULE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3RCLGNBQWMsRUFBRSxFQUFFO2dCQUNsQixhQUFhLEVBQUUsRUFBRTtnQkFDakIsYUFBYSxFQUFFLEVBQUU7Z0JBQ2pCLFdBQVcsRUFBRSxDQUFDO2dCQUNkLGFBQWEsRUFBRSxFQUFFO2dCQUNqQixnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsU0FBUztnQkFDL0IsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLFNBQVM7Z0JBQ2hDLGVBQWUsRUFBRSxDQUFDLENBQUMsUUFBUTthQUM1QixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpQ0FBaUMsRUFBRSxHQUFHLEVBQUU7WUFDekMsNkJBQTZCO1lBQzdCLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUV2QixNQUFNO1lBQ04sTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRXJDLFNBQVM7WUFDVCxNQUFNLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQzdCLEVBQUUsQ0FBQywrREFBK0QsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RSxVQUFVO1lBQ1YsYUFBYSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQVcsRUFBRSxZQUFrQixFQUFFLEVBQUU7Z0JBQ3ZFLElBQUksR0FBRyxLQUFLLGdDQUFnQyxFQUFFLENBQUM7b0JBQUEsT0FBTyxPQUFPLENBQUM7Z0JBQUEsQ0FBQztnQkFDL0QsT0FBTyxZQUFZLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUM7WUFFSCx3Q0FBd0M7WUFDeEMsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO2dCQUMzRCxTQUFTLEVBQUU7b0JBQ1QsdURBQXlCO29CQUN6QixFQUFFLE9BQU8sRUFBRSxvQ0FBZ0IsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7b0JBQ3pELEVBQUUsT0FBTyxFQUFFLCtDQUFxQixFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRTtvQkFDbkUsRUFBRSxPQUFPLEVBQUUseUNBQWtCLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFO29CQUM3RCxFQUFFLE9BQU8sRUFBRSxzQkFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUU7aUJBQ3BEO2FBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBNEIsdURBQXlCLENBQUMsQ0FBQztZQUVwRixNQUFNLFVBQVUsR0FBRyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2xELHFCQUFxQixDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRTNFLGVBQWU7WUFDZixNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUV4QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0RBQStELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDN0UsVUFBVTtZQUNWLGFBQWEsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxHQUFXLEVBQUUsWUFBa0IsRUFBRSxFQUFFO2dCQUN2RSxJQUFJLEdBQUcsS0FBSyw4QkFBOEIsRUFBRSxDQUFDO29CQUFBLE9BQU8sT0FBTyxDQUFDO2dCQUFBLENBQUM7Z0JBQzdELElBQUksR0FBRyxLQUFLLGdDQUFnQyxFQUFFLENBQUM7b0JBQUEsT0FBTyxNQUFNLENBQUM7Z0JBQUEsQ0FBQztnQkFDOUQsT0FBTyxZQUFZLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUM7WUFFSCx3Q0FBd0M7WUFDeEMsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO2dCQUMzRCxTQUFTLEVBQUU7b0JBQ1QsdURBQXlCO29CQUN6QixFQUFFLE9BQU8sRUFBRSxvQ0FBZ0IsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUU7b0JBQ3pELEVBQUUsT0FBTyxFQUFFLCtDQUFxQixFQUFFLFFBQVEsRUFBRSxxQkFBcUIsRUFBRTtvQkFDbkUsRUFBRSxPQUFPLEVBQUUseUNBQWtCLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFO29CQUM3RCxFQUFFLE9BQU8sRUFBRSxzQkFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUU7aUJBQ3BEO2FBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWIsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBNEIsdURBQXlCLENBQUMsQ0FBQztZQUVwRixNQUFNLFVBQVUsR0FBRyxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sU0FBUyxHQUFHLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFFbEQscUJBQXFCLENBQUMsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0UsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXJELGVBQWU7WUFDZixNQUFNLE1BQU0sQ0FBQyxVQUFVLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUVqRCxNQUFNLENBQUMsYUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1FBQzNDLEVBQUUsQ0FBQyw0REFBNEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMxRSxVQUFVO1lBQ1Ysa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsZUFBZSxDQUFDO2dCQUNuRCxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO2dCQUN6QixRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2FBQzNCLENBQUMsQ0FBQztZQUVILHFCQUFxQixDQUFDLHNCQUFzQixDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTFFLE1BQU07WUFDTixNQUFNLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVqRCxTQUFTO1lBQ1QsTUFBTSxDQUFDLHFCQUFxQixDQUFDLHNCQUFzQixDQUFDLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFdkYsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcc2hhcmVkXFxzZXJ2aWNlc1xccmVzaWxpZW50LWF1ZGl0b3JpYS5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBDb25maWdTZXJ2aWNlIH0gZnJvbSAnQG5lc3Rqcy9jb25maWcnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgUmVzaWxpZW50QXVkaXRvcmlhU2VydmljZSB9IGZyb20gJy4vcmVzaWxpZW50LWF1ZGl0b3JpYS5zZXJ2aWNlJztcbmltcG9ydCB7IEF1ZGl0b3JpYVNlcnZpY2UgfSBmcm9tICcuLi8uLi9tb2R1bGVzL2F1ZGl0b3JpYS9zZXJ2aWNlcy9hdWRpdG9yaWEuc2VydmljZSc7XG5pbXBvcnQgeyBBdWRpdG9yaWFRdWV1ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9tb2R1bGVzL2F1ZGl0b3JpYS9zZXJ2aWNlcy9hdWRpdG9yaWEtcXVldWUuc2VydmljZSc7XG5pbXBvcnQgeyBIZWFsdGhDaGVja1NlcnZpY2UgfSBmcm9tICcuL2hlYWx0aC1jaGVjay5zZXJ2aWNlJztcbmltcG9ydCB7IENyZWF0ZUxvZ0F1ZGl0b3JpYUR0byB9IGZyb20gJy4uLy4uL21vZHVsZXMvYXVkaXRvcmlhL2R0by9jcmVhdGUtbG9nLWF1ZGl0b3JpYS5kdG8nO1xuaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnMgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5cbi8vIE1vY2tzXG5qZXN0Lm1vY2soJ2ZzJywgKCkgPT4gKHtcbiAgcHJvbWlzZXM6IHtcbiAgICBta2RpcjogamVzdC5mbigpLFxuICAgIGFwcGVuZEZpbGU6IGplc3QuZm4oKSxcbiAgICByZWFkZGlyOiBqZXN0LmZuKCksXG4gICAgcmVhZEZpbGU6IGplc3QuZm4oKVxuICB9XG59KSk7XG5cbmRlc2NyaWJlKCdSZXNpbGllbnRBdWRpdG9yaWFTZXJ2aWNlJywgKCkgPT4ge1xuICBsZXQgc2VydmljZTogUmVzaWxpZW50QXVkaXRvcmlhU2VydmljZTtcbiAgbGV0IGF1ZGl0b3JpYVNlcnZpY2U6IGplc3QuTW9ja2VkPEF1ZGl0b3JpYVNlcnZpY2U+O1xuICBsZXQgYXVkaXRvcmlhUXVldWVTZXJ2aWNlOiBqZXN0Lk1vY2tlZDxBdWRpdG9yaWFRdWV1ZVNlcnZpY2U+O1xuICBsZXQgaGVhbHRoQ2hlY2tTZXJ2aWNlOiBqZXN0Lk1vY2tlZDxIZWFsdGhDaGVja1NlcnZpY2U+O1xuICBsZXQgY29uZmlnU2VydmljZTogamVzdC5Nb2NrZWQ8Q29uZmlnU2VydmljZT47XG5cbiAgY29uc3QgbW9ja0xvZ0RhdGE6IENyZWF0ZUxvZ0F1ZGl0b3JpYUR0byA9IHtcbiAgICBhY2FvOiAnQ1JFQVRFJyxcbiAgICBlbnRpZGFkZTogJ1VzdWFyaW8nLFxuICAgIGVudGlkYWRlSWQ6ICcxMjMnLFxuICAgIHVzdWFyaW9JZDogJ3VzZXItMTIzJyxcbiAgICBkYWRvc0FudGVyaW9yZXM6IG51bGwsXG4gICAgZGFkb3NOb3ZvczogeyBub21lOiAnVGVzdGUnIH0sXG4gICAgaXA6ICcxMjcuMC4wLjEnLFxuICAgIHVzZXJBZ2VudDogJ3Rlc3QtYWdlbnQnXG4gIH07XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBSZXNpbGllbnRBdWRpdG9yaWFTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQXVkaXRvcmlhU2VydmljZSxcbiAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgY3JlYXRlOiBqZXN0LmZuKClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBBdWRpdG9yaWFRdWV1ZVNlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGVuZmlsZWlyYXJMb2dBdWRpdG9yaWE6IGplc3QuZm4oKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IEhlYWx0aENoZWNrU2VydmljZSxcbiAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgZ2V0U2VydmljZXNTdGF0dXM6IGplc3QuZm4oKVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGdldDogamVzdC5mbigoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgJ0FVRElUT1JJQV9CQUNLVVBfUEFUSCc6ICcuL3Rlc3QtbG9ncy9hdWRpdC1iYWNrdXAnLFxuICAgICAgICAgICAgICAgICdBVURJVE9SSUFfRU5BQkxFX1NZTkNfRkFMTEJBQ0snOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgJ0FVRElUT1JJQV9FTkFCTEVfRklMRV9CQUNLVVAnOiAndHJ1ZSdcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbmZpZ1trZXldIHx8IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfSkuY29tcGlsZSgpO1xuXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8UmVzaWxpZW50QXVkaXRvcmlhU2VydmljZT4oUmVzaWxpZW50QXVkaXRvcmlhU2VydmljZSk7XG4gICAgYXVkaXRvcmlhU2VydmljZSA9IG1vZHVsZS5nZXQoQXVkaXRvcmlhU2VydmljZSk7XG4gICAgYXVkaXRvcmlhUXVldWVTZXJ2aWNlID0gbW9kdWxlLmdldChBdWRpdG9yaWFRdWV1ZVNlcnZpY2UpO1xuICAgIGhlYWx0aENoZWNrU2VydmljZSA9IG1vZHVsZS5nZXQoSGVhbHRoQ2hlY2tTZXJ2aWNlKTtcbiAgICBjb25maWdTZXJ2aWNlID0gbW9kdWxlLmdldChDb25maWdTZXJ2aWNlKTtcblxuICAgIC8vIExpbXBhciBtw6l0cmljYXMgYW50ZXMgZGUgY2FkYSB0ZXN0ZVxuICAgIHNlcnZpY2UucmVzZXRNZXRyaWNzKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZWdpc3RyYXJMb2dSZXNpbGllbnQnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmVnaXN0cmFyIGxvZyB2aWEgZmlsYSBxdWFuZG8gZGlzcG9uw612ZWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBhdWRpdG9yaWFRdWV1ZVNlcnZpY2UuZW5maWxlaXJhckxvZ0F1ZGl0b3JpYS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGF3YWl0IHNlcnZpY2UucmVnaXN0cmFyTG9nUmVzaWxpZW50KG1vY2tMb2dEYXRhKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QoYXVkaXRvcmlhUXVldWVTZXJ2aWNlLmVuZmlsZWlyYXJMb2dBdWRpdG9yaWEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tMb2dEYXRhKTtcbiAgICAgIGV4cGVjdChhdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIFxuICAgICAgY29uc3QgbWV0cmljcyA9IHNlcnZpY2UuZ2V0TWV0cmljcygpO1xuICAgICAgZXhwZWN0KG1ldHJpY3MucXVldWVTdWNjZXNzZXMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobWV0cmljcy5xdWV1ZUZhaWx1cmVzKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgdXNhciBmYWxsYmFjayBzw61uY3Jvbm8gcXVhbmRvIGZpbGEgZmFsaGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBxdWV1ZUVycm9yID0gbmV3IEVycm9yKCdGaWxhIGluZGlzcG9uw612ZWwnKTtcbiAgICAgIGF1ZGl0b3JpYVF1ZXVlU2VydmljZS5lbmZpbGVpcmFyTG9nQXVkaXRvcmlhLm1vY2tSZWplY3RlZFZhbHVlKHF1ZXVlRXJyb3IpO1xuICAgICAgYXVkaXRvcmlhU2VydmljZS5jcmVhdGUubW9ja1Jlc29sdmVkVmFsdWUoeyBpZDogJzEyMycgfSBhcyBhbnkpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGF3YWl0IHNlcnZpY2UucmVnaXN0cmFyTG9nUmVzaWxpZW50KG1vY2tMb2dEYXRhKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QoYXVkaXRvcmlhUXVldWVTZXJ2aWNlLmVuZmlsZWlyYXJMb2dBdWRpdG9yaWEpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tMb2dEYXRhKTtcbiAgICAgIGV4cGVjdChhdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja0xvZ0RhdGEpO1xuICAgICAgXG4gICAgICBjb25zdCBtZXRyaWNzID0gc2VydmljZS5nZXRNZXRyaWNzKCk7XG4gICAgICBleHBlY3QobWV0cmljcy5xdWV1ZUZhaWx1cmVzKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KG1ldHJpY3Muc3luY0ZhbGxiYWNrcykudG9CZSgxKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHVzYXIgYmFja3VwIGVtIGFycXVpdm8gcXVhbmRvIGZpbGEgZSBzeW5jIGZhbGhhbScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IHF1ZXVlRXJyb3IgPSBuZXcgRXJyb3IoJ0ZpbGEgaW5kaXNwb27DrXZlbCcpO1xuICAgICAgY29uc3Qgc3luY0Vycm9yID0gbmV3IEVycm9yKCdCYW5jbyBpbmRpc3BvbsOtdmVsJyk7XG4gICAgICBcbiAgICAgIGF1ZGl0b3JpYVF1ZXVlU2VydmljZS5lbmZpbGVpcmFyTG9nQXVkaXRvcmlhLm1vY2tSZWplY3RlZFZhbHVlKHF1ZXVlRXJyb3IpO1xuICAgICAgYXVkaXRvcmlhU2VydmljZS5jcmVhdGUubW9ja1JlamVjdGVkVmFsdWUoc3luY0Vycm9yKTtcbiAgICAgIChmcy5hcHBlbmRGaWxlIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBzZXJ2aWNlLnJlZ2lzdHJhckxvZ1Jlc2lsaWVudChtb2NrTG9nRGF0YSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KGF1ZGl0b3JpYVF1ZXVlU2VydmljZS5lbmZpbGVpcmFyTG9nQXVkaXRvcmlhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrTG9nRGF0YSk7XG4gICAgICBleHBlY3QoYXVkaXRvcmlhU2VydmljZS5jcmVhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tMb2dEYXRhKTtcbiAgICAgIGV4cGVjdChmcy5hcHBlbmRGaWxlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBzZXJ2aWNlLmdldE1ldHJpY3MoKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnF1ZXVlRmFpbHVyZXMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobWV0cmljcy5zeW5jRmFsbGJhY2tzKS50b0JlKDApOyAvLyBGYWxob3UgYW50ZXMgZGUgY29udGFyIGNvbW8gc3VjZXNzb1xuICAgICAgZXhwZWN0KG1ldHJpY3MuZmlsZUJhY2t1cHMpLnRvQmUoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBmYWxoYXIgcXVhbmRvIHRvZGFzIGFzIGVzdHJhdMOpZ2lhcyBmYWxoYW0nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBxdWV1ZUVycm9yID0gbmV3IEVycm9yKCdGaWxhIGluZGlzcG9uw612ZWwnKTtcbiAgICAgIGNvbnN0IHN5bmNFcnJvciA9IG5ldyBFcnJvcignQmFuY28gaW5kaXNwb27DrXZlbCcpO1xuICAgICAgY29uc3QgZmlsZUVycm9yID0gbmV3IEVycm9yKCdEaXNjbyBjaGVpbycpO1xuICAgICAgXG4gICAgICBhdWRpdG9yaWFRdWV1ZVNlcnZpY2UuZW5maWxlaXJhckxvZ0F1ZGl0b3JpYS5tb2NrUmVqZWN0ZWRWYWx1ZShxdWV1ZUVycm9yKTtcbiAgICAgIGF1ZGl0b3JpYVNlcnZpY2UuY3JlYXRlLm1vY2tSZWplY3RlZFZhbHVlKHN5bmNFcnJvcik7XG4gICAgICAoZnMuYXBwZW5kRmlsZSBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlKGZpbGVFcnJvcik7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KHNlcnZpY2UucmVnaXN0cmFyTG9nUmVzaWxpZW50KG1vY2tMb2dEYXRhKSlcbiAgICAgICAgLnJlamVjdHMudG9UaHJvdygnRmFsaGEgdG90YWwgbmEgYXVkaXRvcmlhJyk7XG4gICAgICBcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBzZXJ2aWNlLmdldE1ldHJpY3MoKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnF1ZXVlRmFpbHVyZXMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobWV0cmljcy5maWxlQmFja3VwcykudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHJlc3BlaXRhciB0aW1lb3V0IG5hIGZpbGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBhdWRpdG9yaWFRdWV1ZVNlcnZpY2UuZW5maWxlaXJhckxvZ0F1ZGl0b3JpYS5tb2NrSW1wbGVtZW50YXRpb24oXG4gICAgICAgICgpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAzMDAwKSkgLy8gMyBzZWd1bmRvc1xuICAgICAgKTtcbiAgICAgIGF1ZGl0b3JpYVNlcnZpY2UuY3JlYXRlLm1vY2tSZXNvbHZlZFZhbHVlKHsgaWQ6ICcxMjMnIH0gYXMgYW55KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBzZXJ2aWNlLnJlZ2lzdHJhckxvZ1Jlc2lsaWVudChtb2NrTG9nRGF0YSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KGF1ZGl0b3JpYVNlcnZpY2UuY3JlYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrTG9nRGF0YSk7XG4gICAgICBcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBzZXJ2aWNlLmdldE1ldHJpY3MoKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnF1ZXVlRmFpbHVyZXMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QobWV0cmljcy5zeW5jRmFsbGJhY2tzKS50b0JlKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgcmVzcGVpdGFyIHRpbWVvdXQgbm8gc3luYycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IHF1ZXVlRXJyb3IgPSBuZXcgRXJyb3IoJ0ZpbGEgaW5kaXNwb27DrXZlbCcpO1xuICAgICAgYXVkaXRvcmlhUXVldWVTZXJ2aWNlLmVuZmlsZWlyYXJMb2dBdWRpdG9yaWEubW9ja1JlamVjdGVkVmFsdWUocXVldWVFcnJvcik7XG4gICAgICBhdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZS5tb2NrSW1wbGVtZW50YXRpb24oXG4gICAgICAgICgpID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA2MDAwKSkgLy8gNiBzZWd1bmRvc1xuICAgICAgKTtcbiAgICAgIChmcy5hcHBlbmRGaWxlIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBzZXJ2aWNlLnJlZ2lzdHJhckxvZ1Jlc2lsaWVudChtb2NrTG9nRGF0YSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KGZzLmFwcGVuZEZpbGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIFxuICAgICAgY29uc3QgbWV0cmljcyA9IHNlcnZpY2UuZ2V0TWV0cmljcygpO1xuICAgICAgZXhwZWN0KG1ldHJpY3MuZmlsZUJhY2t1cHMpLnRvQmUoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwcm9jZXNzQmFja3VwQXVkaXRMb2dzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHByb2Nlc3NhciBsb2dzIGRlIGJhY2t1cCBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGJhY2t1cExvZ3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2JhY2t1cF8xJyxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBkYXRhOiBtb2NrTG9nRGF0YSxcbiAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nX3JlY292ZXJ5JyBhcyBjb25zdCxcbiAgICAgICAgICBhdHRlbXB0czogMFxuICAgICAgICB9XG4gICAgICBdO1xuICAgICAgXG4gICAgICAoZnMucmVhZGRpciBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKFsnYXVkaXQtYmFja3VwLTIwMjQtMDEtMDEuanNvbmwnXSk7XG4gICAgICAoZnMucmVhZEZpbGUgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeShiYWNrdXBMb2dzWzBdKSk7XG4gICAgICBhdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGlkOiAnMTIzJyB9IGFzIGFueSk7XG5cbiAgICAgIC8vIFNweSBub3MgbcOpdG9kb3MgcHJpdmFkb3NcbiAgICAgIGNvbnN0IG1hcmtBc1Byb2Nlc3NlZFNweSA9IGplc3Quc3B5T24oc2VydmljZSBhcyBhbnksICdtYXJrTG9nQXNQcm9jZXNzZWQnKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBzZXJ2aWNlLnByb2Nlc3NCYWNrdXBBdWRpdExvZ3MoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QoYXVkaXRvcmlhU2VydmljZS5jcmVhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tMb2dEYXRhKTtcbiAgICAgIGV4cGVjdChtYXJrQXNQcm9jZXNzZWRTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdiYWNrdXBfMScpO1xuICAgICAgXG4gICAgICBjb25zdCBtZXRyaWNzID0gc2VydmljZS5nZXRNZXRyaWNzKCk7XG4gICAgICBleHBlY3QobWV0cmljcy5yZWNvdmVyZWRMb2dzKS50b0JlKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgaW5jcmVtZW50YXIgdGVudGF0aXZhcyBxdWFuZG8gZmFsaGEgbmEgcmVjdXBlcmHDp8OjbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGJhY2t1cExvZ3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2JhY2t1cF8xJyxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBkYXRhOiBtb2NrTG9nRGF0YSxcbiAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nX3JlY292ZXJ5JyBhcyBjb25zdCxcbiAgICAgICAgICBhdHRlbXB0czogMVxuICAgICAgICB9XG4gICAgICBdO1xuICAgICAgXG4gICAgICAoZnMucmVhZGRpciBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKFsnYXVkaXQtYmFja3VwLTIwMjQtMDEtMDEuanNvbmwnXSk7XG4gICAgICAoZnMucmVhZEZpbGUgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShKU09OLnN0cmluZ2lmeShiYWNrdXBMb2dzWzBdKSk7XG4gICAgICBhdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0ZhbGhhIHRlbXBvcsOhcmlhJykpO1xuXG4gICAgICAvLyBTcHkgbm9zIG3DqXRvZG9zIHByaXZhZG9zXG4gICAgICBjb25zdCB1cGRhdGVBdHRlbXB0c1NweSA9IGplc3Quc3B5T24oc2VydmljZSBhcyBhbnksICd1cGRhdGVMb2dBdHRlbXB0cycpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGF3YWl0IHNlcnZpY2UucHJvY2Vzc0JhY2t1cEF1ZGl0TG9ncygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdCh1cGRhdGVBdHRlbXB0c1NweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2JhY2t1cF8xJywgMik7XG4gICAgICBcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBzZXJ2aWNlLmdldE1ldHJpY3MoKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnJlY292ZXJlZExvZ3MpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBtYXJjYXIgY29tbyBmYWxoYSBkZWZpbml0aXZhIGFww7NzIG3DoXhpbW8gZGUgdGVudGF0aXZhcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGJhY2t1cExvZ3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2JhY2t1cF8xJyxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICBkYXRhOiBtb2NrTG9nRGF0YSxcbiAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nX3JlY292ZXJ5JyBhcyBjb25zdCxcbiAgICAgICAgICBhdHRlbXB0czogMiAvLyBQcsOzeGltYSB0ZW50YXRpdmEgc2Vyw6EgYSAzwqogKG3DoXhpbW8pXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgICBcbiAgICAgIChmcy5yZWFkZGlyIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoWydhdWRpdC1iYWNrdXAtMjAyNC0wMS0wMS5qc29ubCddKTtcbiAgICAgIChmcy5yZWFkRmlsZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KGJhY2t1cExvZ3NbMF0pKTtcbiAgICAgIGF1ZGl0b3JpYVNlcnZpY2UuY3JlYXRlLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignRmFsaGEgcGVybWFuZW50ZScpKTtcblxuICAgICAgLy8gU3B5IG5vcyBtw6l0b2RvcyBwcml2YWRvc1xuICAgICAgY29uc3QgbWFya0FzRmFpbGVkU3B5ID0gamVzdC5zcHlPbihzZXJ2aWNlIGFzIGFueSwgJ21hcmtMb2dBc0ZhaWxlZCcpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGF3YWl0IHNlcnZpY2UucHJvY2Vzc0JhY2t1cEF1ZGl0TG9ncygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChtYXJrQXNGYWlsZWRTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdiYWNrdXBfMScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGFycXVpdm9zIGRlIGJhY2t1cCBjb3Jyb21waWRvcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIChmcy5yZWFkZGlyIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoWydhdWRpdC1iYWNrdXAtMjAyNC0wMS0wMS5qc29ubCddKTtcbiAgICAgIChmcy5yZWFkRmlsZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKCdpbnZhbGlkIGpzb24gY29udGVudCcpO1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGF3YWl0IGV4cGVjdChzZXJ2aWNlLnByb2Nlc3NCYWNrdXBBdWRpdExvZ3MoKSkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgICAgIFxuICAgICAgLy8gRGV2ZSBjb250aW51YXIgcHJvY2Vzc2FtZW50byBtZXNtbyBjb20gYXJxdWl2byBjb3Jyb21waWRvXG4gICAgICBjb25zdCBtZXRyaWNzID0gc2VydmljZS5nZXRNZXRyaWNzKCk7XG4gICAgICBleHBlY3QobWV0cmljcy5yZWNvdmVyZWRMb2dzKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgaWdub3JhciBsb2dzIHF1ZSBqw6EgZXhjZWRlcmFtIHRlbnRhdGl2YXMgbcOheGltYXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBiYWNrdXBMb2dzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdiYWNrdXBfMScsXG4gICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgZGF0YTogbW9ja0xvZ0RhdGEsXG4gICAgICAgICAgc3RhdHVzOiAncGVuZGluZ19yZWNvdmVyeScgYXMgY29uc3QsXG4gICAgICAgICAgYXR0ZW1wdHM6IDUgLy8gRXhjZWRlIG8gbcOheGltbyBkZSAzXG4gICAgICAgIH1cbiAgICAgIF07XG4gICAgICBcbiAgICAgIChmcy5yZWFkZGlyIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWUoWydhdWRpdC1iYWNrdXAtMjAyNC0wMS0wMS5qc29ubCddKTtcbiAgICAgIChmcy5yZWFkRmlsZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKEpTT04uc3RyaW5naWZ5KGJhY2t1cExvZ3NbMF0pKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBzZXJ2aWNlLnByb2Nlc3NCYWNrdXBBdWRpdExvZ3MoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QoYXVkaXRvcmlhU2VydmljZS5jcmVhdGUpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRNZXRyaWNzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHJldG9ybmFyIG3DqXRyaWNhcyBjb3JyZXRhcycsICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2UgLSBzaW11bGFyIGFsZ3VtYXMgb3BlcmHDp8O1ZXNcbiAgICAgIHNlcnZpY2VbJ21ldHJpY3MnXSA9IHtcbiAgICAgICAgcXVldWVTdWNjZXNzZXM6IDgwLFxuICAgICAgICBxdWV1ZUZhaWx1cmVzOiAyMCxcbiAgICAgICAgc3luY0ZhbGxiYWNrczogMTUsXG4gICAgICAgIGZpbGVCYWNrdXBzOiA1LFxuICAgICAgICByZWNvdmVyZWRMb2dzOiAxMFxuICAgICAgfTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCBtZXRyaWNzID0gc2VydmljZS5nZXRNZXRyaWNzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1ldHJpY3MpLnRvRXF1YWwoe1xuICAgICAgICBxdWV1ZVN1Y2Nlc3NlczogODAsXG4gICAgICAgIHF1ZXVlRmFpbHVyZXM6IDIwLFxuICAgICAgICBzeW5jRmFsbGJhY2tzOiAxNSxcbiAgICAgICAgZmlsZUJhY2t1cHM6IDUsXG4gICAgICAgIHJlY292ZXJlZExvZ3M6IDEwLFxuICAgICAgICBxdWV1ZVN1Y2Nlc3NSYXRlOiA4MCwgLy8gODAvMTAwXG4gICAgICAgIGZhbGxiYWNrVXNhZ2VSYXRlOiAxNSwgLy8gMTUvMTAwXG4gICAgICAgIGJhY2t1cFVzYWdlUmF0ZTogNSAvLyA1LzEwMFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBsaWRhciBjb20gZGl2aXPDo28gcG9yIHplcm8nLCAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlIC0gbcOpdHJpY2FzIHplcmFkYXNcbiAgICAgIHNlcnZpY2UucmVzZXRNZXRyaWNzKCk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgbWV0cmljcyA9IHNlcnZpY2UuZ2V0TWV0cmljcygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChtZXRyaWNzLnF1ZXVlU3VjY2Vzc1JhdGUpLnRvQmUoMCk7XG4gICAgICBleHBlY3QobWV0cmljcy5mYWxsYmFja1VzYWdlUmF0ZSkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLmJhY2t1cFVzYWdlUmF0ZSkudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbmZpZ3VyYcOnw7VlcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSByZXNwZWl0YXIgY29uZmlndXJhw6fDo28gZGUgZmFsbGJhY2sgc8OtbmNyb25vIGRlc2FiaWxpdGFkbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbmZpZ1NlcnZpY2UuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkgPT4ge1xuICAgICAgICBpZiAoa2V5ID09PSAnQVVESVRPUklBX0VOQUJMRV9TWU5DX0ZBTExCQUNLJykge3JldHVybiAnZmFsc2UnO31cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBSZWNyaWFyIHNlcnZpw6dvIGNvbSBub3ZhIGNvbmZpZ3VyYcOnw6NvXG4gICAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICBSZXNpbGllbnRBdWRpdG9yaWFTZXJ2aWNlLFxuICAgICAgICAgIHsgcHJvdmlkZTogQXVkaXRvcmlhU2VydmljZSwgdXNlVmFsdWU6IGF1ZGl0b3JpYVNlcnZpY2UgfSxcbiAgICAgICAgICB7IHByb3ZpZGU6IEF1ZGl0b3JpYVF1ZXVlU2VydmljZSwgdXNlVmFsdWU6IGF1ZGl0b3JpYVF1ZXVlU2VydmljZSB9LFxuICAgICAgICAgIHsgcHJvdmlkZTogSGVhbHRoQ2hlY2tTZXJ2aWNlLCB1c2VWYWx1ZTogaGVhbHRoQ2hlY2tTZXJ2aWNlIH0sXG4gICAgICAgICAgeyBwcm92aWRlOiBDb25maWdTZXJ2aWNlLCB1c2VWYWx1ZTogY29uZmlnU2VydmljZSB9XG4gICAgICAgIF1cbiAgICAgIH0pLmNvbXBpbGUoKTtcblxuICAgICAgY29uc3QgbmV3U2VydmljZSA9IG1vZHVsZS5nZXQ8UmVzaWxpZW50QXVkaXRvcmlhU2VydmljZT4oUmVzaWxpZW50QXVkaXRvcmlhU2VydmljZSk7XG5cbiAgICAgIGNvbnN0IHF1ZXVlRXJyb3IgPSBuZXcgRXJyb3IoJ0ZpbGEgaW5kaXNwb27DrXZlbCcpO1xuICAgICAgYXVkaXRvcmlhUXVldWVTZXJ2aWNlLmVuZmlsZWlyYXJMb2dBdWRpdG9yaWEubW9ja1JlamVjdGVkVmFsdWUocXVldWVFcnJvcik7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KG5ld1NlcnZpY2UucmVnaXN0cmFyTG9nUmVzaWxpZW50KG1vY2tMb2dEYXRhKSlcbiAgICAgICAgLnJlamVjdHMudG9UaHJvdygnRmlsYSBpbmRpc3BvbsOtdmVsJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChhdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHJlc3BlaXRhciBjb25maWd1cmHDp8OjbyBkZSBiYWNrdXAgZW0gYXJxdWl2byBkZXNhYmlsaXRhZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25maWdTZXJ2aWNlLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBhbnkpID0+IHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ0FVRElUT1JJQV9FTkFCTEVfRklMRV9CQUNLVVAnKSB7cmV0dXJuICdmYWxzZSc7fVxuICAgICAgICBpZiAoa2V5ID09PSAnQVVESVRPUklBX0VOQUJMRV9TWU5DX0ZBTExCQUNLJykge3JldHVybiAndHJ1ZSc7fVxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFJlY3JpYXIgc2VydmnDp28gY29tIG5vdmEgY29uZmlndXJhw6fDo29cbiAgICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgIFJlc2lsaWVudEF1ZGl0b3JpYVNlcnZpY2UsXG4gICAgICAgICAgeyBwcm92aWRlOiBBdWRpdG9yaWFTZXJ2aWNlLCB1c2VWYWx1ZTogYXVkaXRvcmlhU2VydmljZSB9LFxuICAgICAgICAgIHsgcHJvdmlkZTogQXVkaXRvcmlhUXVldWVTZXJ2aWNlLCB1c2VWYWx1ZTogYXVkaXRvcmlhUXVldWVTZXJ2aWNlIH0sXG4gICAgICAgICAgeyBwcm92aWRlOiBIZWFsdGhDaGVja1NlcnZpY2UsIHVzZVZhbHVlOiBoZWFsdGhDaGVja1NlcnZpY2UgfSxcbiAgICAgICAgICB7IHByb3ZpZGU6IENvbmZpZ1NlcnZpY2UsIHVzZVZhbHVlOiBjb25maWdTZXJ2aWNlIH1cbiAgICAgICAgXVxuICAgICAgfSkuY29tcGlsZSgpO1xuXG4gICAgICBjb25zdCBuZXdTZXJ2aWNlID0gbW9kdWxlLmdldDxSZXNpbGllbnRBdWRpdG9yaWFTZXJ2aWNlPihSZXNpbGllbnRBdWRpdG9yaWFTZXJ2aWNlKTtcblxuICAgICAgY29uc3QgcXVldWVFcnJvciA9IG5ldyBFcnJvcignRmlsYSBpbmRpc3BvbsOtdmVsJyk7XG4gICAgICBjb25zdCBzeW5jRXJyb3IgPSBuZXcgRXJyb3IoJ0JhbmNvIGluZGlzcG9uw612ZWwnKTtcbiAgICAgIFxuICAgICAgYXVkaXRvcmlhUXVldWVTZXJ2aWNlLmVuZmlsZWlyYXJMb2dBdWRpdG9yaWEubW9ja1JlamVjdGVkVmFsdWUocXVldWVFcnJvcik7XG4gICAgICBhdWRpdG9yaWFTZXJ2aWNlLmNyZWF0ZS5tb2NrUmVqZWN0ZWRWYWx1ZShzeW5jRXJyb3IpO1xuXG4gICAgICAvLyBBY3QgJiBBc3NlcnRcbiAgICAgIGF3YWl0IGV4cGVjdChuZXdTZXJ2aWNlLnJlZ2lzdHJhckxvZ1Jlc2lsaWVudChtb2NrTG9nRGF0YSkpXG4gICAgICAgIC5yZWplY3RzLnRvVGhyb3coJ0ZhbGhhIGNyw610aWNhIG5hIGF1ZGl0b3JpYScpO1xuICAgICAgXG4gICAgICBleHBlY3QoZnMuYXBwZW5kRmlsZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2ludGVncmHDp8OjbyBjb20gaGVhbHRoIGNoZWNrJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGZ1bmNpb25hciBpbmRlcGVuZGVudGVtZW50ZSBkbyBzdGF0dXMgZG8gaGVhbHRoIGNoZWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgaGVhbHRoQ2hlY2tTZXJ2aWNlLmdldFNlcnZpY2VzU3RhdHVzLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHJlZGlzOiB7IHN0YXR1czogJ2Rvd24nIH0sXG4gICAgICAgIGRhdGFiYXNlOiB7IHN0YXR1czogJ3VwJyB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgYXVkaXRvcmlhUXVldWVTZXJ2aWNlLmVuZmlsZWlyYXJMb2dBdWRpdG9yaWEubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBzZXJ2aWNlLnJlZ2lzdHJhckxvZ1Jlc2lsaWVudChtb2NrTG9nRGF0YSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KGF1ZGl0b3JpYVF1ZXVlU2VydmljZS5lbmZpbGVpcmFyTG9nQXVkaXRvcmlhKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrTG9nRGF0YSk7XG4gICAgICBcbiAgICAgIGNvbnN0IG1ldHJpY3MgPSBzZXJ2aWNlLmdldE1ldHJpY3MoKTtcbiAgICAgIGV4cGVjdChtZXRyaWNzLnF1ZXVlU3VjY2Vzc2VzKS50b0JlKDEpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==