{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-signature.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-signature.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { createHash } from 'crypto';\nimport { LogAuditoria } from '../../../entities';\n\n/**\n * Serviço para assinatura e validação de registros de auditoria\n *\n * Utiliza JWT para garantir a integridade dos registros de auditoria,\n * implementando o conceito de não-repúdio e evitando adulteração dos logs.\n */\n@Injectable()\nexport class AuditoriaSignatureService {\n  private readonly logger = new Logger(AuditoriaSignatureService.name);\n  private readonly signingKey: string;\n\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n    // Utiliza uma chave separada apenas para assinar logs de auditoria\n    const auditSigningKey = this.configService.get<string>('AUDIT_SIGNING_KEY');\n    const jwtSecret = this.configService.get<string>('JWT_SECRET');\n\n    if (auditSigningKey) {\n      this.signingKey = auditSigningKey;\n    } else {\n      this.logger.warn(\n        'AUDIT_SIGNING_KEY não configurada! Usando JWT_SECRET como fallback. ' +\n          'Recomenda-se configurar uma chave dedicada para assinatura de logs de auditoria.',\n      );\n\n      if (!jwtSecret) {\n        throw new Error(\n          'Nenhuma chave de assinatura configurada. Configure AUDIT_SIGNING_KEY ou JWT_SECRET.',\n        );\n      }\n\n      this.signingKey = jwtSecret;\n    }\n  }\n\n  /**\n   * Calcula o hash dos dados de auditoria\n   *\n   * @param logAuditoria Dados do log de auditoria\n   * @returns Hash SHA-256 dos dados\n   */\n  private calculateHash(logAuditoria: Partial<LogAuditoria>): string {\n    if (\n      !logAuditoria.tipo_operacao ||\n      !logAuditoria.entidade_afetada ||\n      !logAuditoria.usuario_id\n    ) {\n      throw new Error(\n        'Dados insuficientes para calcular o hash do log de auditoria',\n      );\n    }\n\n    const dataToHash = JSON.stringify({\n      tipo_operacao: logAuditoria.tipo_operacao,\n      entidade_afetada: logAuditoria.entidade_afetada,\n      entidade_id: logAuditoria.entidade_id || null,\n      usuario_id: logAuditoria.usuario_id,\n      endpoint: logAuditoria.endpoint || null,\n      metodo_http: logAuditoria.metodo_http || null,\n      ip_origem: logAuditoria.ip_origem || null,\n      data_hora: logAuditoria.data_hora\n        ? logAuditoria.data_hora.toISOString()\n        : null,\n    });\n\n    return createHash('sha256').update(dataToHash).digest('hex');\n  }\n\n  /**\n   * Assina um log de auditoria\n   *\n   * @param logAuditoria Dados do log de auditoria\n   * @returns Assinatura JWT dos dados\n   */\n  async assinarLog(logAuditoria: Partial<LogAuditoria>): Promise<string> {\n    try {\n      const hash = this.calculateHash(logAuditoria);\n\n      if (!logAuditoria.id) {\n        throw new Error('ID do log de auditoria não fornecido');\n      }\n\n      const payload = {\n        id: logAuditoria.id,\n        hash,\n        timestamp: new Date().toISOString(),\n      };\n\n      const token = await this.jwtService.signAsync(payload, {\n        secret: this.signingKey,\n        expiresIn: '100y', // Tokens para auditoria não expiram\n      });\n\n      this.logger.debug(\n        `Log de auditoria assinado com sucesso: ${logAuditoria.id}`,\n      );\n      return token;\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n\n      this.logger.error(\n        `Erro ao assinar log de auditoria: ${errorMessage}`,\n        errorStack,\n      );\n      throw new Error(`Falha ao assinar log de auditoria: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Valida a assinatura de um log de auditoria\n   *\n   * @param logAuditoria Dados do log de auditoria\n   * @param assinatura Assinatura JWT\n   * @returns true se a assinatura for válida\n   */\n  async validarAssinatura(\n    logAuditoria: Partial<LogAuditoria>,\n    assinatura: string,\n  ): Promise<boolean> {\n    try {\n      // Verificar se a assinatura é um JWT válido\n      const payload = await this.jwtService.verifyAsync<{\n        id: string;\n        hash: string;\n      }>(assinatura, {\n        secret: this.signingKey,\n      });\n\n      // Verificar se o ID do log corresponde ao ID na assinatura\n      if (payload.id !== logAuditoria.id) {\n        this.logger.warn(\n          `ID do log (${logAuditoria.id}) não corresponde ao ID na assinatura (${payload.id})`,\n        );\n        return false;\n      }\n\n      // Recalcular o hash e comparar\n      const currentHash = this.calculateHash(logAuditoria);\n      if (payload.hash !== currentHash) {\n        this.logger.warn(\n          `Hash do log foi modificado. Original: ${payload.hash}, Atual: ${currentHash}`,\n        );\n        return false;\n      }\n\n      return true;\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n      const errorStack = error instanceof Error ? error.stack : undefined;\n\n      this.logger.error(\n        `Erro ao validar assinatura: ${errorMessage}`,\n        errorStack,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Verifica a integridade de um conjunto de logs de auditoria\n   *\n   * @param logs Array de logs de auditoria com suas assinaturas\n   * @returns Array com resultados da validação para cada log\n   */\n  async verificarIntegridadeLogs(\n    logs: Array<{ log: LogAuditoria; assinatura: string }>,\n  ): Promise<Array<{ id: string; integro: boolean; motivo?: string }>> {\n    const resultados: Array<{ id: string; integro: boolean; motivo?: string }> =\n      [];\n\n    for (const item of logs) {\n      try {\n        if (!item.log.id) {\n          throw new Error('ID do log não fornecido');\n        }\n\n        const integro = await this.validarAssinatura(item.log, item.assinatura);\n\n        resultados.push({\n          id: item.log.id,\n          integro,\n          motivo: integro\n            ? undefined\n            : 'Assinatura inválida ou dados modificados',\n        });\n      } catch (error: unknown) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Erro desconhecido';\n\n        resultados.push({\n          id: item.log.id || 'id-desconhecido',\n          integro: false,\n          motivo: `Erro na verificação: ${errorMessage}`,\n        });\n      }\n    }\n\n    return resultados;\n  }\n}\n"],"version":3}