{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\strategies\\excel.strategy.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAoD;AAEpD,iDAAmC;AACnC,uCAAyB;AACzB,uEAAkE;AAElE;;;;GAIG;AAEI,IAAM,aAAa,qBAAnB,MAAM,aAAa;IAGK;IAFZ,MAAM,GAAG,IAAI,eAAM,CAAC,eAAa,CAAC,IAAI,CAAC,CAAC;IAEzD,YAA6B,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAG,CAAC;IAEnE;;;;;;OAMG;IACH,KAAK,CAAC,KAAK,CAAC,IAAY,EAAE,KAAU,EAAE,MAAW;QAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oCAAoC,IAAI,EAAE,CAAC,CAAC;QAE5D,2BAA2B;QAC3B,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,eAAe,CACxD,iBAAiB,EACjB,MAAM,CACP,CAAC;QAEF,IAAI,CAAC;YACH,4BAA4B;YAC5B,MAAM,QAAQ,GAAG,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;YACxC,MAAM,SAAS,GAAG,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9D,mBAAmB;YACnB,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC9B,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC3C,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACxC,UAAU,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;YAC3C,UAAU,CAAC,SAAS,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;YAEhD,oBAAoB;YACpB,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;gBACxC,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,kBAAkB,CAC/D,OAAO,CACR,CAAC;gBACF,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBAErE,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAC9B,MAAM,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC5C,WAAW,CAAC,KAAK,GAAG,YAAY,UAAU,MAAM,OAAO,EAAE,CAAC;gBAC1D,WAAW,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;gBAChC,WAAW,CAAC,SAAS,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;YACnD,CAAC;YAED,4BAA4B;YAC5B,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAC9B,MAAM,eAAe,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAChD,eAAe,CAAC,KAAK,GAAG,cAAc,IAAI,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC;YAC3E,eAAe,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;YACpC,eAAe,CAAC,SAAS,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;YAEpD,4BAA4B;YAC5B,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAErB,6DAA6D;YAC7D,QAAQ,IAAI,EAAE,CAAC;gBACb,KAAK,uBAAuB;oBAC1B,MAAM,IAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oBAC/D,MAAM;gBACR,KAAK,yBAAyB;oBAC5B,MAAM,IAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oBAChE,MAAM;gBACR,KAAK,0BAA0B;oBAC7B,MAAM,IAAI,CAAC,2BAA2B,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oBACjE,MAAM;gBACR;oBACE,SAAS,CAAC,MAAM,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC;YAC7D,CAAC;YAED,uBAAuB;YACvB,IAAI,SAAS,CAAC,OAAO,EAAE,CAAC;gBACtB,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;oBACnC,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC;wBACpD,IAAI,eAAe,GAAG,CAAC,CAAC;wBACxB,MAAM,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;4BAC/C,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK;gCAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM;gCAC9B,CAAC,CAAC,EAAE,CAAC;4BACP,IAAI,YAAY,GAAG,eAAe,EAAE,CAAC;gCACnC,eAAe,GAAG,YAAY,CAAC;4BACjC,CAAC;wBACH,CAAC,CAAC,CAAC;wBACH,MAAM,CAAC,KAAK,GAAG,eAAe,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC;oBACjE,CAAC;gBACH,CAAC,CAAC,CAAC;YACL,CAAC;YAED,iBAAiB;YACjB,MAAM,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAE5C,+CAA+C;YAC/C,OAAO,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC3D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAErE,mDAAmD;YACnD,IAAI,CAAC;gBACH,IAAI,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE,CAAC;oBAChC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC;YAAC,OAAO,YAAY,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,sCAAsC,YAAY,CAAC,OAAO,EAAE,CAC7D,CAAC;YACJ,CAAC;YAED,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,mEAAmE,CAAC;IAC7E,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACK,SAAS,CAAC,IAAY;QAC5B,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,uBAAuB;gBAC1B,OAAO,oCAAoC,CAAC;YAC9C,KAAK,yBAAyB;gBAC5B,OAAO,sCAAsC,CAAC;YAChD,KAAK,0BAA0B;gBAC7B,OAAO,uCAAuC,CAAC;YACjD;gBACE,OAAO,WAAW,CAAC;QACvB,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,yBAAyB,CACrC,SAA4B,EAC5B,KAAY,EACZ,MAAW;QAEX,gCAAgC;QAChC,MAAM,SAAS,GAAG;YAChB,WAAW;YACX,cAAc;YACd,WAAW;YACX,SAAS;YACT,gBAAgB;YAChB,OAAO;SACR,CAAC;QACF,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9C,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1B,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAG;gBACV,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;aAC9B,CAAC;YACF,IAAI,CAAC,MAAM,GAAG;gBACZ,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACtB,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACvB,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACzB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;aACzB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,kBAAkB;QAClB,KAAK,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YAC5B,MAAM,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC;gBAC3B,WAAW,CAAC,SAAS,IAAI,EAAE;gBAC3B,WAAW,CAAC,YAAY,EAAE,IAAI,IAAI,KAAK;gBACvC,WAAW,CAAC,cAAc,EAAE,IAAI,IAAI,KAAK;gBACzC,WAAW,CAAC,OAAO,EAAE,IAAI,IAAI,KAAK;gBAClC,WAAW,CAAC,cAAc;oBACxB,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,kBAAkB,CAAC,OAAO,CAAC;oBAClE,CAAC,CAAC,KAAK;gBACT,WAAW,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC;aACvC,CAAC,CAAC;YAEH,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;gBACpB,IAAI,CAAC,MAAM,GAAG;oBACZ,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtB,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACvB,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACzB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;iBACzB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,4BAA4B;QAC5B,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAErB,mBAAmB;QACnB,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC;YACjC,iCAAiC;YACjC,KAAK,CAAC,MAAM;SACb,CAAC,CAAC;QACH,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE3C,uBAAuB;QACvB,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAC7B,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,KAAK,IAAI,CAAC,CAAC,EAC1D,CAAC,CACF,CAAC;QACF,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC;YAChC,cAAc;YACd,UAAU,CAAC,cAAc,CAAC,OAAO,EAAE;gBACjC,KAAK,EAAE,UAAU;gBACjB,QAAQ,EAAE,KAAK;aAChB,CAAC;SACH,CAAC,CAAC;QACH,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IAC5C,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,0BAA0B,CACtC,SAA4B,EAC5B,KAAU,EACV,MAAW;QAEX,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEtC,yBAAyB;QACzB,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC9B,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,UAAU,CAAC,KAAK,GAAG,mBAAmB,CAAC;QACvC,UAAU,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE3C,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,UAAU,GAAG,CAAC,CAAC;QAEnB,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACnC,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;YACxC,UAAU,IAAI,UAAU,CAAC;YAEzB,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;YAChD,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC;YACpC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;YACxC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,cAAc,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,GAAG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7B,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACvC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,aAAa,CAAC;QAC1C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,UAAU,CAAC;QACvC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,cAAc,CAAC;QAC3C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAC1C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAE1C,uDAAuD;QACvD,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YACvB,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC5B,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,mBAAmB,CACzB,QAA0B,EAC1B,MAAc,EACd,YAAmB;QAEnB,MAAM,eAAe,GAAG,QAAQ,CAAC,YAAY,CAAC,YAAY,MAAM,EAAE,CAAC,CAAC;QAEpE,mBAAmB;QACnB,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,UAAU,CAAC,KAAK,GAAG,4BAA4B,MAAM,EAAE,CAAC;QACxD,UAAU,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAC3C,UAAU,CAAC,SAAS,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;QAEhD,4BAA4B;QAC5B,eAAe,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACpC,MAAM,eAAe,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACtD,eAAe,CAAC,KAAK,GAAG,cAAc,IAAI,IAAI,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC;QAC3E,eAAe,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;QACpC,eAAe,CAAC,SAAS,GAAG,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;QAEpD,4BAA4B;QAC5B,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAE3B,gCAAgC;QAChC,MAAM,SAAS,GAAG;YAChB,WAAW;YACX,cAAc;YACd,WAAW;YACX,SAAS;YACT,eAAe;SAChB,CAAC;QACF,MAAM,SAAS,GAAG,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACpD,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1B,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAG;gBACV,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;aAC9B,CAAC;YACF,IAAI,CAAC,MAAM,GAAG;gBACZ,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACtB,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACvB,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACzB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;aACzB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,kBAAkB;QAClB,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;YACnC,MAAM,GAAG,GAAG,eAAe,CAAC,MAAM,CAAC;gBACjC,WAAW,CAAC,SAAS,IAAI,EAAE;gBAC3B,WAAW,CAAC,YAAY,EAAE,IAAI,IAAI,KAAK;gBACvC,WAAW,CAAC,cAAc,EAAE,IAAI,IAAI,KAAK;gBACzC,WAAW,CAAC,OAAO,EAAE,IAAI,IAAI,KAAK;gBAClC,WAAW,CAAC,aAAa;oBACvB,CAAC,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,kBAAkB,CAAC,OAAO,CAAC;oBACjE,CAAC,CAAC,KAAK;aACV,CAAC,CAAC;YAEH,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;gBACpB,IAAI,CAAC,MAAM,GAAG;oBACZ,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtB,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACvB,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACzB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;iBACzB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,uBAAuB;QACvB,IAAI,eAAe,CAAC,OAAO,EAAE,CAAC;YAC5B,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACzC,IAAI,MAAM,IAAI,OAAO,MAAM,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC;oBACpD,IAAI,eAAe,GAAG,CAAC,CAAC;oBACxB,MAAM,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;wBAC/C,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;wBACpE,IAAI,YAAY,GAAG,eAAe,EAAE,CAAC;4BACnC,eAAe,GAAG,YAAY,CAAC;wBACjC,CAAC;oBACH,CAAC,CAAC,CAAC;oBACH,MAAM,CAAC,KAAK,GAAG,eAAe,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC;gBACjE,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACK,KAAK,CAAC,2BAA2B,CACvC,SAA4B,EAC5B,KAAY,EACZ,MAAW;QAEX,gCAAgC;QAChC,MAAM,SAAS,GAAG;YAChB,SAAS;YACT,oBAAoB;YACpB,WAAW;YACX,WAAW;YACX,gBAAgB;SACjB,CAAC;QACF,MAAM,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9C,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;YAC1B,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAG;gBACV,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;aAC9B,CAAC;YACF,IAAI,CAAC,MAAM,GAAG;gBACZ,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACtB,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACvB,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;gBACzB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;aACzB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,kBAAkB;QAClB,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACrB,MAAM,aAAa,GACjB,IAAI,CAAC,iBAAiB,GAAG,CAAC;gBACxB,CAAC,CAAC,CACE,CAAC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC;oBACrD,GAAG,CACJ,CAAC,OAAO,CAAC,CAAC,CAAC;gBACd,CAAC,CAAC,MAAM,CAAC;YAEb,MAAM,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC;gBAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,KAAK;gBAC1B,IAAI,CAAC,iBAAiB;gBACtB,IAAI,CAAC,qBAAqB;gBAC1B,IAAI,CAAC,qBAAqB;gBAC1B,GAAG,aAAa,GAAG;aACpB,CAAC,CAAC;YAEH,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;gBACpB,IAAI,CAAC,MAAM,GAAG;oBACZ,GAAG,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACtB,IAAI,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACvB,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;oBACzB,KAAK,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE;iBACzB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,4BAA4B;QAC5B,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAErB,mBAAmB;QACnB,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CACzB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACZ,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,CAAC;YACpC,GAAG,CAAC,SAAS,IAAI,IAAI,CAAC,qBAAqB,CAAC;YAC5C,GAAG,CAAC,SAAS,IAAI,IAAI,CAAC,qBAAqB,CAAC;YAC5C,OAAO,GAAG,CAAC;QACb,CAAC,EACD,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,CACzC,CAAC;QAEF,MAAM,SAAS,GACb,MAAM,CAAC,KAAK,GAAG,CAAC;YACd,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACtD,CAAC,CAAC,MAAM,CAAC;QAEb,MAAM,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC;YAChC,aAAa;YACb,MAAM,CAAC,KAAK;YACZ,MAAM,CAAC,SAAS;YAChB,MAAM,CAAC,SAAS;YAChB,GAAG,SAAS,GAAG;SAChB,CAAC,CAAC;QACH,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE;YACzB,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAjdY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;yDAIoC,qCAAgB,oBAAhB,qCAAgB;GAHpD,aAAa,CAidzB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\strategies\\excel.strategy.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { RelatorioStrategy } from '../interfaces/relatorio-strategy.interface';\nimport * as ExcelJS from 'exceljs';\nimport * as fs from 'fs';\nimport { TempFilesService } from '../services/temp-files.service';\n\n/**\n * Estratégia de geração de relatórios em formato Excel\n *\n * Implementa a geração de relatórios em formato Excel usando ExcelJS\n */\n@Injectable()\nexport class ExcelStrategy implements RelatorioStrategy {\n  private readonly logger = new Logger(ExcelStrategy.name);\n\n  constructor(private readonly tempFilesService: TempFilesService) {}\n\n  /**\n   * Gera um relatório em formato Excel\n   * @param tipo Tipo de relatório\n   * @param dados Dados do relatório\n   * @param opcoes Opções de configuração\n   * @returns Buffer contendo o Excel gerado\n   */\n  async gerar(tipo: string, dados: any, opcoes: any): Promise<Buffer> {\n    this.logger.log(`Gerando relatório Excel do tipo: ${tipo}`);\n\n    // Criar arquivo temporário\n    const tempFilePath = this.tempFilesService.getTempFilePath(\n      'relatorio-excel',\n      'xlsx',\n    );\n\n    try {\n      // Criar workbook e planilha\n      const workbook = new ExcelJS.Workbook();\n      const worksheet = workbook.addWorksheet(this.getTitulo(tipo));\n\n      // Adicionar título\n      worksheet.mergeCells('A1:E1');\n      const tituloCell = worksheet.getCell('A1');\n      tituloCell.value = this.getTitulo(tipo);\n      tituloCell.font = { size: 16, bold: true };\n      tituloCell.alignment = { horizontal: 'center' };\n\n      // Adicionar período\n      if (opcoes.dataInicio && opcoes.dataFim) {\n        const dataInicio = new Date(opcoes.dataInicio).toLocaleDateString(\n          'pt-BR',\n        );\n        const dataFim = new Date(opcoes.dataFim).toLocaleDateString('pt-BR');\n\n        worksheet.mergeCells('A2:E2');\n        const periodoCell = worksheet.getCell('A2');\n        periodoCell.value = `Período: ${dataInicio} a ${dataFim}`;\n        periodoCell.font = { size: 12 };\n        periodoCell.alignment = { horizontal: 'center' };\n      }\n\n      // Adicionar data de geração\n      worksheet.mergeCells('A3:E3');\n      const dataGeracaoCell = worksheet.getCell('A3');\n      dataGeracaoCell.value = `Gerado em: ${new Date().toLocaleString('pt-BR')}`;\n      dataGeracaoCell.font = { size: 10 };\n      dataGeracaoCell.alignment = { horizontal: 'right' };\n\n      // Adicionar linha em branco\n      worksheet.addRow([]);\n\n      // Adicionar conteúdo específico conforme o tipo de relatório\n      switch (tipo) {\n        case 'beneficios-concedidos':\n          await this.gerarBeneficiosConcedidos(worksheet, dados, opcoes);\n          break;\n        case 'solicitacoes-por-status':\n          await this.gerarSolicitacoesPorStatus(worksheet, dados, opcoes);\n          break;\n        case 'atendimentos-por-unidade':\n          await this.gerarAtendimentosPorUnidade(worksheet, dados, opcoes);\n          break;\n        default:\n          worksheet.addRow(['Tipo de relatório não implementado']);\n      }\n\n      // Auto-ajustar colunas\n      if (worksheet.columns) {\n        worksheet.columns.forEach((column) => {\n          if (column && typeof column.eachCell === 'function') {\n            let maxColumnLength = 0;\n            column.eachCell({ includeEmpty: true }, (cell) => {\n              const columnLength = cell.value\n                ? cell.value.toString().length\n                : 10;\n              if (columnLength > maxColumnLength) {\n                maxColumnLength = columnLength;\n              }\n            });\n            column.width = maxColumnLength < 10 ? 10 : maxColumnLength + 2;\n          }\n        });\n      }\n\n      // Salvar arquivo\n      await workbook.xlsx.writeFile(tempFilePath);\n\n      // Retornar buffer e remover arquivo temporário\n      return this.tempFilesService.readAndRemove(tempFilePath);\n    } catch (error) {\n      this.logger.error(`Erro ao gerar relatório Excel: ${error.message}`);\n\n      // Tentar limpar arquivo temporário em caso de erro\n      try {\n        if (fs.existsSync(tempFilePath)) {\n          fs.unlinkSync(tempFilePath);\n        }\n      } catch (cleanupError) {\n        this.logger.warn(\n          `Erro ao limpar arquivo temporário: ${cleanupError.message}`,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retorna o tipo MIME para arquivos Excel\n   */\n  getMimeType(): string {\n    return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n  }\n\n  /**\n   * Retorna a extensão para arquivos Excel\n   */\n  getExtensao(): string {\n    return 'xlsx';\n  }\n\n  /**\n   * Retorna o título do relatório com base no tipo\n   * @param tipo Tipo de relatório\n   * @returns Título formatado\n   */\n  private getTitulo(tipo: string): string {\n    switch (tipo) {\n      case 'beneficios-concedidos':\n        return 'Relatório de Benefícios Concedidos';\n      case 'solicitacoes-por-status':\n        return 'Relatório de Solicitações por Status';\n      case 'atendimentos-por-unidade':\n        return 'Relatório de Atendimentos por Unidade';\n      default:\n        return 'Relatório';\n    }\n  }\n\n  /**\n   * Gera conteúdo para relatório de benefícios concedidos\n   * @param worksheet Planilha Excel\n   * @param dados Dados para o relatório\n   * @param opcoes Opções de configuração\n   */\n  private async gerarBeneficiosConcedidos(\n    worksheet: ExcelJS.Worksheet,\n    dados: any[],\n    opcoes: any,\n  ): Promise<void> {\n    // Adicionar cabeçalho da tabela\n    const cabecalho = [\n      'Protocolo',\n      'Beneficiário',\n      'Benefício',\n      'Unidade',\n      'Data Liberação',\n      'Valor',\n    ];\n    const headerRow = worksheet.addRow(cabecalho);\n    headerRow.eachCell((cell) => {\n      cell.font = { bold: true };\n      cell.fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: { argb: 'FFD9D9D9' },\n      };\n      cell.border = {\n        top: { style: 'thin' },\n        left: { style: 'thin' },\n        bottom: { style: 'thin' },\n        right: { style: 'thin' },\n      };\n    });\n\n    // Adicionar dados\n    dados.forEach((solicitacao) => {\n      const row = worksheet.addRow([\n        solicitacao.protocolo || '',\n        solicitacao.beneficiario?.nome || 'N/A',\n        solicitacao.tipo_beneficio?.nome || 'N/A',\n        solicitacao.unidade?.nome || 'N/A',\n        solicitacao.data_liberacao\n          ? new Date(solicitacao.data_liberacao).toLocaleDateString('pt-BR')\n          : 'N/A',\n        solicitacao.tipo_beneficio?.valor || 0,\n      ]);\n\n      row.eachCell((cell) => {\n        cell.border = {\n          top: { style: 'thin' },\n          left: { style: 'thin' },\n          bottom: { style: 'thin' },\n          right: { style: 'thin' },\n        };\n      });\n    });\n\n    // Adicionar linha em branco\n    worksheet.addRow([]);\n\n    // Adicionar resumo\n    const resumoRow = worksheet.addRow([\n      'Total de benefícios concedidos:',\n      dados.length,\n    ]);\n    resumoRow.getCell(1).font = { bold: true };\n\n    // Calcular valor total\n    const valorTotal = dados.reduce(\n      (total, item) => total + (item.tipo_beneficio?.valor || 0),\n      0,\n    );\n    const valorRow = worksheet.addRow([\n      'Valor total:',\n      valorTotal.toLocaleString('pt-BR', {\n        style: 'currency',\n        currency: 'BRL',\n      }),\n    ]);\n    valorRow.getCell(1).font = { bold: true };\n  }\n\n  /**\n   * Gera conteúdo para relatório de solicitações por status\n   * @param worksheet Planilha Excel\n   * @param dados Dados para o relatório\n   * @param opcoes Opções de configuração\n   */\n  private async gerarSolicitacoesPorStatus(\n    worksheet: ExcelJS.Worksheet,\n    dados: any,\n    opcoes: any,\n  ): Promise<void> {\n    const statusList = Object.keys(dados);\n\n    // Adicionar resumo geral\n    worksheet.mergeCells('A5:C5');\n    const resumoCell = worksheet.getCell('A5');\n    resumoCell.value = 'Resumo por Status';\n    resumoCell.font = { size: 14, bold: true };\n\n    let row = 6;\n    let totalGeral = 0;\n\n    statusList.forEach((status, index) => {\n      const quantidade = dados[status].length;\n      totalGeral += quantidade;\n\n      const statusRow = worksheet.getRow(row + index);\n      statusRow.getCell(1).value = status;\n      statusRow.getCell(2).value = quantidade;\n      statusRow.getCell(3).value = 'solicitações';\n    });\n\n    row += statusList.length + 1;\n    const totalRow = worksheet.getRow(row);\n    totalRow.getCell(1).value = 'Total Geral';\n    totalRow.getCell(2).value = totalGeral;\n    totalRow.getCell(3).value = 'solicitações';\n    totalRow.getCell(1).font = { bold: true };\n    totalRow.getCell(2).font = { bold: true };\n\n    // Adicionar detalhamento por status em novas planilhas\n    if (worksheet.workbook) {\n      statusList.forEach((status) => {\n        this.criarPlanilhaStatus(worksheet.workbook, status, dados[status]);\n      });\n    }\n  }\n\n  /**\n   * Cria uma nova planilha para um status específico\n   * @param workbook Workbook Excel\n   * @param status Nome do status\n   * @param solicitacoes Lista de solicitações com este status\n   */\n  private criarPlanilhaStatus(\n    workbook: ExcelJS.Workbook,\n    status: string,\n    solicitacoes: any[],\n  ): ExcelJS.Worksheet {\n    const statusWorksheet = workbook.addWorksheet(`Status - ${status}`);\n\n    // Adicionar título\n    statusWorksheet.mergeCells('A1:E1');\n    const tituloCell = statusWorksheet.getCell('A1');\n    tituloCell.value = `Solicitações com Status: ${status}`;\n    tituloCell.font = { size: 16, bold: true };\n    tituloCell.alignment = { horizontal: 'center' };\n\n    // Adicionar data de geração\n    statusWorksheet.mergeCells('A2:E2');\n    const dataGeracaoCell = statusWorksheet.getCell('A2');\n    dataGeracaoCell.value = `Gerado em: ${new Date().toLocaleString('pt-BR')}`;\n    dataGeracaoCell.font = { size: 10 };\n    dataGeracaoCell.alignment = { horizontal: 'right' };\n\n    // Adicionar linha em branco\n    statusWorksheet.addRow([]);\n\n    // Adicionar cabeçalho da tabela\n    const cabecalho = [\n      'Protocolo',\n      'Beneficiário',\n      'Benefício',\n      'Unidade',\n      'Data Abertura',\n    ];\n    const headerRow = statusWorksheet.addRow(cabecalho);\n    headerRow.eachCell((cell) => {\n      cell.font = { bold: true };\n      cell.fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: { argb: 'FFD9D9D9' },\n      };\n      cell.border = {\n        top: { style: 'thin' },\n        left: { style: 'thin' },\n        bottom: { style: 'thin' },\n        right: { style: 'thin' },\n      };\n    });\n\n    // Adicionar dados\n    solicitacoes.forEach((solicitacao) => {\n      const row = statusWorksheet.addRow([\n        solicitacao.protocolo || '',\n        solicitacao.beneficiario?.nome || 'N/A',\n        solicitacao.tipo_beneficio?.nome || 'N/A',\n        solicitacao.unidade?.nome || 'N/A',\n        solicitacao.data_abertura\n          ? new Date(solicitacao.data_abertura).toLocaleDateString('pt-BR')\n          : 'N/A',\n      ]);\n\n      row.eachCell((cell) => {\n        cell.border = {\n          top: { style: 'thin' },\n          left: { style: 'thin' },\n          bottom: { style: 'thin' },\n          right: { style: 'thin' },\n        };\n      });\n    });\n\n    // Auto-ajustar colunas\n    if (statusWorksheet.columns) {\n      statusWorksheet.columns.forEach((column) => {\n        if (column && typeof column.eachCell === 'function') {\n          let maxColumnLength = 0;\n          column.eachCell({ includeEmpty: true }, (cell) => {\n            const columnLength = cell.value ? cell.value.toString().length : 10;\n            if (columnLength > maxColumnLength) {\n              maxColumnLength = columnLength;\n            }\n          });\n          column.width = maxColumnLength < 10 ? 10 : maxColumnLength + 2;\n        }\n      });\n    }\n\n    return statusWorksheet;\n  }\n\n  /**\n   * Gera conteúdo para relatório de atendimentos por unidade\n   * @param worksheet Planilha Excel\n   * @param dados Dados para o relatório\n   * @param opcoes Opções de configuração\n   */\n  private async gerarAtendimentosPorUnidade(\n    worksheet: ExcelJS.Worksheet,\n    dados: any[],\n    opcoes: any,\n  ): Promise<void> {\n    // Adicionar cabeçalho da tabela\n    const cabecalho = [\n      'Unidade',\n      'Total Solicitações',\n      'Liberadas',\n      'Pendentes',\n      'Taxa Aprovação',\n    ];\n    const headerRow = worksheet.addRow(cabecalho);\n    headerRow.eachCell((cell) => {\n      cell.font = { bold: true };\n      cell.fill = {\n        type: 'pattern',\n        pattern: 'solid',\n        fgColor: { argb: 'FFD9D9D9' },\n      };\n      cell.border = {\n        top: { style: 'thin' },\n        left: { style: 'thin' },\n        bottom: { style: 'thin' },\n        right: { style: 'thin' },\n      };\n    });\n\n    // Adicionar dados\n    dados.forEach((item) => {\n      const taxaAprovacao =\n        item.totalSolicitacoes > 0\n          ? (\n              (item.solicitacoesLiberadas / item.totalSolicitacoes) *\n              100\n            ).toFixed(2)\n          : '0.00';\n\n      const row = worksheet.addRow([\n        item.unidade.nome || 'N/A',\n        item.totalSolicitacoes,\n        item.solicitacoesLiberadas,\n        item.solicitacoesPendentes,\n        `${taxaAprovacao}%`,\n      ]);\n\n      row.eachCell((cell) => {\n        cell.border = {\n          top: { style: 'thin' },\n          left: { style: 'thin' },\n          bottom: { style: 'thin' },\n          right: { style: 'thin' },\n        };\n      });\n    });\n\n    // Adicionar linha em branco\n    worksheet.addRow([]);\n\n    // Adicionar totais\n    const totais = dados.reduce(\n      (acc, item) => {\n        acc.total += item.totalSolicitacoes;\n        acc.liberadas += item.solicitacoesLiberadas;\n        acc.pendentes += item.solicitacoesPendentes;\n        return acc;\n      },\n      { total: 0, liberadas: 0, pendentes: 0 },\n    );\n\n    const taxaGeral =\n      totais.total > 0\n        ? ((totais.liberadas / totais.total) * 100).toFixed(2)\n        : '0.00';\n\n    const totalRow = worksheet.addRow([\n      'Total Geral',\n      totais.total,\n      totais.liberadas,\n      totais.pendentes,\n      `${taxaGeral}%`,\n    ]);\n    totalRow.eachCell((cell) => {\n      cell.font = { bold: true };\n    });\n  }\n}\n"],"version":3}