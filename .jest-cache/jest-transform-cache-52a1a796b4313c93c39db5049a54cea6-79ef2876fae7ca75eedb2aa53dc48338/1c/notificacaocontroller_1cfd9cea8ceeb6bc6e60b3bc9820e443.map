{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\controllers\\notificacao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\controllers\\notificacao.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  ParseUUIDPipe,\n  Put,\n  Query,\n  UseGuards,\n  Logger,\n  Request,\n  Sse,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { NotificacaoService } from '../services/notificacao.service';\nimport { NotificationManagerService } from '../services/notification-manager.service';\nimport { SseService } from '../services/sse.service';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../../auth/guards/roles.guard';\nimport { SseGuard } from '../guards/sse.guard';\nimport { Roles } from '../../../auth/decorators/role.decorator';\nimport { ROLES } from '../../../shared/constants/roles.constants';\nimport { StatusNotificacaoProcessamento } from '../../../entities/notification.entity';\nimport { CreateNotificationDto } from '../dtos/create-notification.dto';\n\n/**\n * Controlador de Notificações\n *\n * Responsável por gerenciar as rotas relacionadas às notificações\n * enviadas aos usuários do sistema\n */\n@ApiTags('Notificações')\n@Controller('notificacao')\n@UseGuards(JwtAuthGuard, RolesGuard)\n@ApiBearerAuth()\nexport class NotificacaoController {\n  private readonly logger = new Logger(NotificacaoController.name);\n\n  constructor(\n    private readonly notificacaoService: NotificacaoService,\n    private readonly notificationManagerService: NotificationManagerService,\n    private readonly sseService: SseService,\n  ) {}\n\n  /**\n   * Cria e envia uma nova notificação\n   */\n  @Post()\n  @Roles(ROLES.ADMIN, ROLES.GESTOR, ROLES.COORDENADOR, ROLES.TECNICO)\n  @ApiOperation({ summary: 'Criar e enviar uma nova notificação' })\n  @ApiResponse({\n    status: 201,\n    description: 'Notificação criada e enviada com sucesso',\n  })\n  async criarNotificacao(@Body() createNotificationDto: CreateNotificationDto) {\n    this.logger.log(\n      `Criando nova notificação para destinatário: ${createNotificationDto.destinatario_id}`,\n    );\n    return this.notificationManagerService.criarNotificacao(\n      createNotificationDto,\n    );\n  }\n\n  /**\n   * Lista todas as notificações do usuário autenticado\n   */\n  @Get()\n  @ApiOperation({ summary: 'Listar notificações do usuário' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de notificações retornada com sucesso',\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Página atual',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Itens por página',\n  })\n  @ApiQuery({\n    name: 'status',\n    required: false,\n    enum: StatusNotificacaoProcessamento,\n    description: 'Filtro por status',\n  })\n  async findAll(\n    @Request() req,\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('status') status?: StatusNotificacaoProcessamento,\n  ) {\n    const userId = req.user.id;\n\n    return this.notificacaoService.findAll({\n      page: page ? +page : undefined,\n      limit: limit ? +limit : undefined,\n      status,\n      userId,\n    });\n  }\n\n  /**\n   * Lista as notificações do usuário logado (rota alternativa)\n   */\n  @Get('minhas')\n  @ApiOperation({ summary: 'Listar minhas notificações' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de notificações retornada com sucesso',\n  })\n  async listarMinhasNotificacoes(\n    @Request() req,\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('status') status?: string,\n  ) {\n    const userId = req.user.id;\n\n    return this.notificacaoService.findAll({\n      userId,\n      page: page ? Number(page) : undefined,\n      limit: limit ? Number(limit) : undefined,\n      status: status as any,\n    });\n  }\n\n  /**\n   * Obtém detalhes de uma notificação específica\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Obter detalhes de uma notificação' })\n  @ApiResponse({\n    status: 200,\n    description: 'Notificação encontrada com sucesso',\n  })\n  @ApiResponse({ status: 404, description: 'Notificação não encontrada' })\n  async findOne(@Param('id', ParseUUIDPipe) id: string, @Request() req) {\n    const userId = req.user.id;\n    return this.notificacaoService.findById(id, userId);\n  }\n\n  /**\n   * Marca uma notificação como lida\n   */\n  @Put(':id/ler')\n  @ApiOperation({ summary: 'Marcar notificação como lida' })\n  @ApiResponse({\n    status: 200,\n    description: 'Notificação marcada como lida com sucesso',\n  })\n  @ApiResponse({ status: 404, description: 'Notificação não encontrada' })\n  async marcarComoLida(@Param('id', ParseUUIDPipe) id: string, @Request() req) {\n    const userId = req.user.id;\n    this.logger.log(\n      `Marcando notificação ${id} como lida para usuário ${userId}`,\n    );\n    return this.notificacaoService.marcarComoLida(id, userId);\n  }\n\n  /**\n   * Marca uma notificação como arquivada\n   */\n  @Put(':id/arquivar')\n  @ApiOperation({ summary: 'Arquivar notificação' })\n  @ApiResponse({\n    status: 200,\n    description: 'Notificação arquivada com sucesso',\n  })\n  @ApiResponse({ status: 404, description: 'Notificação não encontrada' })\n  async arquivar(@Param('id', ParseUUIDPipe) id: string, @Request() req) {\n    const userId = req.user.id;\n    this.logger.log(`Arquivando notificação ${id} para usuário ${userId}`);\n    return this.notificacaoService.arquivar(id, userId);\n  }\n\n  /**\n   * Marca todas as notificações do usuário como lidas\n   */\n  @Put('todas/ler')\n  @ApiOperation({ summary: 'Marcar todas as notificações como lidas' })\n  @ApiResponse({\n    status: 200,\n    description: 'Todas as notificações marcadas como lidas',\n  })\n  async marcarTodasComoLidas(@Request() req) {\n    const userId = req.user.id;\n    this.logger.log(\n      `Marcando todas as notificações como lidas para usuário ${userId}`,\n    );\n    return this.notificacaoService.marcarTodasComoLidas(userId);\n  }\n\n  /**\n   * Obtém o contador de notificações não lidas do usuário\n   */\n  @Get('contador/nao-lidas')\n  @ApiOperation({ summary: 'Obter contador de notificações não lidas' })\n  @ApiResponse({ status: 200, description: 'Contador retornado com sucesso' })\n  async contadorNaoLidas(@Request() req) {\n    const userId = req.user.id;\n    return this.notificacaoService.contadorNaoLidas(userId);\n  }\n\n  /**\n   * Endpoint SSE para notificações em tempo real\n   */\n  @Sse('sse')\n  @UseGuards(SseGuard)\n  @ApiOperation({ summary: 'Conexão SSE para notificações em tempo real' })\n  @ApiResponse({\n    status: 200,\n    description: 'Conexão SSE estabelecida com sucesso',\n  })\n  sseNotifications(@Request() req): Observable<any> {\n    const userId = req.user.id;\n    return this.sseService.createConnection(userId, req);\n  }\n\n  /**\n   * Endpoint para obter estatísticas das conexões SSE\n   */\n  @Get('sse/stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLES.ADMIN, ROLES.GESTOR)\n  @ApiOperation({ summary: 'Obter estatísticas das conexões SSE' })\n  @ApiResponse({\n    status: 200,\n    description: 'Estatísticas retornadas com sucesso',\n  })\n  async getSseStats() {\n    return this.sseService.getConnectionStats();\n  }\n\n  /**\n   * Endpoint para verificar se um usuário está conectado via SSE\n   */\n  @Get('sse/status/:userId')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLES.ADMIN, ROLES.GESTOR)\n  @ApiOperation({ summary: 'Verificar status de conexão SSE de um usuário' })\n  @ApiResponse({\n    status: 200,\n    description: 'Status de conexão retornado com sucesso',\n  })\n  async getUserSseStatus(@Param('userId', ParseUUIDPipe) userId: string) {\n    const isConnected = this.sseService.isUserConnected(userId);\n    const connectionCount = this.sseService.getUserConnectionCount(userId);\n    return {\n      userId,\n      isConnected,\n      connectionCount,\n    };\n  }\n}\n"],"version":3}