6df07e8078a439e53b6774cf00e781cd
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var NotificacaoController_1;
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificacaoController = void 0;
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
const swagger_1 = require("@nestjs/swagger");
const notificacao_service_1 = require("../services/notificacao.service");
const notification_manager_service_1 = require("../services/notification-manager.service");
const sse_service_1 = require("../services/sse.service");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const sse_guard_1 = require("../guards/sse.guard");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
const notification_entity_1 = require("../../../entities/notification.entity");
const create_notification_dto_1 = require("../dtos/create-notification.dto");
/**
 * Controlador de Notificações
 *
 * Responsável por gerenciar as rotas relacionadas às notificações
 * enviadas aos usuários do sistema
 */
let NotificacaoController = NotificacaoController_1 = class NotificacaoController {
    notificacaoService;
    notificationManagerService;
    sseService;
    logger = new common_1.Logger(NotificacaoController_1.name);
    constructor(notificacaoService, notificationManagerService, sseService) {
        this.notificacaoService = notificacaoService;
        this.notificationManagerService = notificationManagerService;
        this.sseService = sseService;
    }
    /**
     * Cria e envia uma nova notificação
     */
    async criarNotificacao(createNotificationDto) {
        this.logger.log(`Criando nova notificação para destinatário: ${createNotificationDto.destinatario_id}`);
        return this.notificationManagerService.criarNotificacao(createNotificationDto);
    }
    /**
     * Lista todas as notificações do usuário autenticado
     */
    async findAll(req, page, limit, status) {
        const userId = req.user.id;
        return this.notificacaoService.findAll({
            page: page ? +page : undefined,
            limit: limit ? +limit : undefined,
            status,
            userId,
        });
    }
    /**
     * Lista as notificações do usuário logado (rota alternativa)
     */
    async listarMinhasNotificacoes(req, page, limit, status) {
        const userId = req.user.id;
        return this.notificacaoService.findAll({
            userId,
            page: page ? Number(page) : undefined,
            limit: limit ? Number(limit) : undefined,
            status: status,
        });
    }
    /**
     * Obtém detalhes de uma notificação específica
     */
    async findOne(id, req) {
        const userId = req.user.id;
        return this.notificacaoService.findById(id, userId);
    }
    /**
     * Marca uma notificação como lida
     */
    async marcarComoLida(id, req) {
        const userId = req.user.id;
        this.logger.log(`Marcando notificação ${id} como lida para usuário ${userId}`);
        return this.notificacaoService.marcarComoLida(id, userId);
    }
    /**
     * Marca uma notificação como arquivada
     */
    async arquivar(id, req) {
        const userId = req.user.id;
        this.logger.log(`Arquivando notificação ${id} para usuário ${userId}`);
        return this.notificacaoService.arquivar(id, userId);
    }
    /**
     * Marca todas as notificações do usuário como lidas
     */
    async marcarTodasComoLidas(req) {
        const userId = req.user.id;
        this.logger.log(`Marcando todas as notificações como lidas para usuário ${userId}`);
        return this.notificacaoService.marcarTodasComoLidas(userId);
    }
    /**
     * Obtém o contador de notificações não lidas do usuário
     */
    async contadorNaoLidas(req) {
        const userId = req.user.id;
        return this.notificacaoService.contadorNaoLidas(userId);
    }
    /**
     * Endpoint SSE para notificações em tempo real
     */
    sseNotifications(req) {
        const userId = req.user.id;
        return this.sseService.createConnection(userId, req);
    }
    /**
     * Endpoint para obter estatísticas das conexões SSE
     */
    async getSseStats() {
        return this.sseService.getConnectionStats();
    }
    /**
     * Endpoint para verificar se um usuário está conectado via SSE
     */
    async getUserSseStatus(userId) {
        const isConnected = this.sseService.isUserConnected(userId);
        const connectionCount = this.sseService.getUserConnectionCount(userId);
        return {
            userId,
            isConnected,
            connectionCount,
        };
    }
};
exports.NotificacaoController = NotificacaoController;
__decorate([
    (0, common_1.Post)(),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Criar e enviar uma nova notificação' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Notificação criada e enviada com sucesso',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_d = typeof create_notification_dto_1.CreateNotificationDto !== "undefined" && create_notification_dto_1.CreateNotificationDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "criarNotificacao", null);
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Listar notificações do usuário' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de notificações retornada com sucesso',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        type: Number,
        description: 'Página atual',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        description: 'Itens por página',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'status',
        required: false,
        enum: notification_entity_1.StatusNotificacaoProcessamento,
        description: 'Filtro por status',
    }),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Query)('page')),
    __param(2, (0, common_1.Query)('limit')),
    __param(3, (0, common_1.Query)('status')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Number, Number, typeof (_e = typeof notification_entity_1.StatusNotificacaoProcessamento !== "undefined" && notification_entity_1.StatusNotificacaoProcessamento) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('minhas'),
    (0, swagger_1.ApiOperation)({ summary: 'Listar minhas notificações' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de notificações retornada com sucesso',
    }),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Query)('page')),
    __param(2, (0, common_1.Query)('limit')),
    __param(3, (0, common_1.Query)('status')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Number, Number, String]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "listarMinhasNotificacoes", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Obter detalhes de uma notificação' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Notificação encontrada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Notificação não encontrada' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "findOne", null);
__decorate([
    (0, common_1.Put)(':id/ler'),
    (0, swagger_1.ApiOperation)({ summary: 'Marcar notificação como lida' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Notificação marcada como lida com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Notificação não encontrada' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "marcarComoLida", null);
__decorate([
    (0, common_1.Put)(':id/arquivar'),
    (0, swagger_1.ApiOperation)({ summary: 'Arquivar notificação' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Notificação arquivada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Notificação não encontrada' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "arquivar", null);
__decorate([
    (0, common_1.Put)('todas/ler'),
    (0, swagger_1.ApiOperation)({ summary: 'Marcar todas as notificações como lidas' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Todas as notificações marcadas como lidas',
    }),
    __param(0, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "marcarTodasComoLidas", null);
__decorate([
    (0, common_1.Get)('contador/nao-lidas'),
    (0, swagger_1.ApiOperation)({ summary: 'Obter contador de notificações não lidas' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Contador retornado com sucesso' }),
    __param(0, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "contadorNaoLidas", null);
__decorate([
    (0, common_1.Sse)('sse'),
    (0, common_1.UseGuards)(sse_guard_1.SseGuard),
    (0, swagger_1.ApiOperation)({ summary: 'Conexão SSE para notificações em tempo real' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Conexão SSE estabelecida com sucesso',
    }),
    __param(0, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_f = typeof rxjs_1.Observable !== "undefined" && rxjs_1.Observable) === "function" ? _f : Object)
], NotificacaoController.prototype, "sseNotifications", null);
__decorate([
    (0, common_1.Get)('sse/stats'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Obter estatísticas das conexões SSE' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Estatísticas retornadas com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "getSseStats", null);
__decorate([
    (0, common_1.Get)('sse/status/:userId'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Verificar status de conexão SSE de um usuário' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status de conexão retornado com sucesso',
    }),
    __param(0, (0, common_1.Param)('userId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], NotificacaoController.prototype, "getUserSseStatus", null);
exports.NotificacaoController = NotificacaoController = NotificacaoController_1 = __decorate([
    (0, swagger_1.ApiTags)('Notificações'),
    (0, common_1.Controller)('notificacao'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof notificacao_service_1.NotificacaoService !== "undefined" && notificacao_service_1.NotificacaoService) === "function" ? _a : Object, typeof (_b = typeof notification_manager_service_1.NotificationManagerService !== "undefined" && notification_manager_service_1.NotificationManagerService) === "function" ? _b : Object, typeof (_c = typeof sse_service_1.SseService !== "undefined" && sse_service_1.SseService) === "function" ? _c : Object])
], NotificacaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXG5vdGlmaWNhY2FvXFxjb250cm9sbGVyc1xcbm90aWZpY2FjYW8uY29udHJvbGxlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQWV3QjtBQUN4QiwrQkFBa0M7QUFDbEMsNkNBTXlCO0FBQ3pCLHlFQUFxRTtBQUNyRSwyRkFBc0Y7QUFDdEYseURBQXFEO0FBQ3JELHdFQUFtRTtBQUNuRSxrRUFBOEQ7QUFDOUQsbURBQStDO0FBQy9DLDRFQUFnRTtBQUNoRSwrRUFBa0U7QUFDbEUsK0VBQXVGO0FBQ3ZGLDZFQUF3RTtBQUV4RTs7Ozs7R0FLRztBQUtJLElBQU0scUJBQXFCLDZCQUEzQixNQUFNLHFCQUFxQjtJQUliO0lBQ0E7SUFDQTtJQUxGLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyx1QkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVqRSxZQUNtQixrQkFBc0MsRUFDdEMsMEJBQXNELEVBQ3RELFVBQXNCO1FBRnRCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUN0RCxlQUFVLEdBQVYsVUFBVSxDQUFZO0lBQ3RDLENBQUM7SUFFSjs7T0FFRztJQVFHLEFBQU4sS0FBSyxDQUFDLGdCQUFnQixDQUFTLHFCQUE0QztRQUN6RSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FDYiwrQ0FBK0MscUJBQXFCLENBQUMsZUFBZSxFQUFFLENBQ3ZGLENBQUM7UUFDRixPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxnQkFBZ0IsQ0FDckQscUJBQXFCLENBQ3RCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUF5QkcsQUFBTixLQUFLLENBQUMsT0FBTyxDQUNBLEdBQUcsRUFDQyxJQUFhLEVBQ1osS0FBYyxFQUNiLE1BQXVDO1FBRXhELE1BQU0sTUFB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LHVCQUFLLENBQUMsTUFBTSxDQUFDO0lBQ2hDLElBQUEsc0JBQVksRUFBQyxFQUFFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxDQUFDO0lBQ2hFLElBQUEscUJBQVcsRUFBQztRQUNYLE1BQU0sRUFBRSxHQUFHO1FBQ1gsV0FBVyxFQUFFLHFDQUFxQztLQUNuRCxDQUFDOzs7O3dEQUdEO0FBYUs7SUFSTCxJQUFBLFlBQUcsRUFBQyxvQkFBb0IsQ0FBQztJQUN6QixJQUFBLGtCQUFTLEVBQUMsNkJBQVksRUFBRSx3QkFBVSxDQUFDO0lBQ25DLElBQUEsc0JBQUssRUFBQyx1QkFBSyxDQUFDLEtBQUssRUFBRSx1QkFBSyxDQUFDLE1BQU0sQ0FBQztJQUNoQyxJQUFBLHNCQUFZLEVBQUMsRUFBRSxPQUFPLEVBQUUsK0NBQStDLEVBQUUsQ0FBQztJQUMxRSxJQUFBLHFCQUFXLEVBQUM7UUFDWCxNQUFNLEVBQUUsR0FBRztRQUNYLFdBQVcsRUFBRSx5Q0FBeUM7S0FDdkQsQ0FBQztJQUNzQixXQUFBLElBQUEsY0FBSyxFQUFDLFFBQVEsRUFBRSxzQkFBYSxDQUFDLENBQUE7Ozs7NkRBUXJEO2dDQTlOVSxxQkFBcUI7SUFKakMsSUFBQSxpQkFBTyxFQUFDLGNBQWMsQ0FBQztJQUN2QixJQUFBLG1CQUFVLEVBQUMsYUFBYSxDQUFDO0lBQ3pCLElBQUEsa0JBQVMsRUFBQyw2QkFBWSxFQUFFLHdCQUFVLENBQUM7SUFDbkMsSUFBQSx1QkFBYSxHQUFFO3lEQUt5Qix3Q0FBa0Isb0JBQWxCLHdDQUFrQixvREFDVix5REFBMEIsb0JBQTFCLHlEQUEwQixvREFDMUMsd0JBQVUsb0JBQVYsd0JBQVU7R0FOOUIscUJBQXFCLENBK05qQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcbm90aWZpY2FjYW9cXGNvbnRyb2xsZXJzXFxub3RpZmljYWNhby5jb250cm9sbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbnRyb2xsZXIsXG4gIEdldCxcbiAgUG9zdCxcbiAgQm9keSxcbiAgUGFyYW0sXG4gIFBhcnNlVVVJRFBpcGUsXG4gIFB1dCxcbiAgUXVlcnksXG4gIFVzZUd1YXJkcyxcbiAgTG9nZ2VyLFxuICBSZXF1ZXN0LFxuICBTc2UsXG4gIE5vdEZvdW5kRXhjZXB0aW9uLFxuICBCYWRSZXF1ZXN0RXhjZXB0aW9uLFxufSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBBcGlUYWdzLFxuICBBcGlPcGVyYXRpb24sXG4gIEFwaVJlc3BvbnNlLFxuICBBcGlCZWFyZXJBdXRoLFxuICBBcGlRdWVyeSxcbn0gZnJvbSAnQG5lc3Rqcy9zd2FnZ2VyJztcbmltcG9ydCB7IE5vdGlmaWNhY2FvU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL25vdGlmaWNhY2FvLnNlcnZpY2UnO1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uTWFuYWdlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9ub3RpZmljYXRpb24tbWFuYWdlci5zZXJ2aWNlJztcbmltcG9ydCB7IFNzZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zc2Uuc2VydmljZSc7XG5pbXBvcnQgeyBKd3RBdXRoR3VhcmQgfSBmcm9tICcuLi8uLi8uLi9hdXRoL2d1YXJkcy9qd3QtYXV0aC5ndWFyZCc7XG5pbXBvcnQgeyBSb2xlc0d1YXJkIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9ndWFyZHMvcm9sZXMuZ3VhcmQnO1xuaW1wb3J0IHsgU3NlR3VhcmQgfSBmcm9tICcuLi9ndWFyZHMvc3NlLmd1YXJkJztcbmltcG9ydCB7IFJvbGVzIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9kZWNvcmF0b3JzL3JvbGUuZGVjb3JhdG9yJztcbmltcG9ydCB7IFJPTEVTIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9yb2xlcy5jb25zdGFudHMnO1xuaW1wb3J0IHsgU3RhdHVzTm90aWZpY2FjYW9Qcm9jZXNzYW1lbnRvIH0gZnJvbSAnLi4vLi4vLi4vZW50aXRpZXMvbm90aWZpY2F0aW9uLmVudGl0eSc7XG5pbXBvcnQgeyBDcmVhdGVOb3RpZmljYXRpb25EdG8gfSBmcm9tICcuLi9kdG9zL2NyZWF0ZS1ub3RpZmljYXRpb24uZHRvJztcblxuLyoqXG4gKiBDb250cm9sYWRvciBkZSBOb3RpZmljYcOnw7Vlc1xuICpcbiAqIFJlc3BvbnPDoXZlbCBwb3IgZ2VyZW5jaWFyIGFzIHJvdGFzIHJlbGFjaW9uYWRhcyDDoHMgbm90aWZpY2HDp8O1ZXNcbiAqIGVudmlhZGFzIGFvcyB1c3XDoXJpb3MgZG8gc2lzdGVtYVxuICovXG5AQXBpVGFncygnTm90aWZpY2HDp8O1ZXMnKVxuQENvbnRyb2xsZXIoJ25vdGlmaWNhY2FvJylcbkBVc2VHdWFyZHMoSnd0QXV0aEd1YXJkLCBSb2xlc0d1YXJkKVxuQEFwaUJlYXJlckF1dGgoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWNhY2FvQ29udHJvbGxlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyID0gbmV3IExvZ2dlcihOb3RpZmljYWNhb0NvbnRyb2xsZXIubmFtZSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBub3RpZmljYWNhb1NlcnZpY2U6IE5vdGlmaWNhY2FvU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmaWNhdGlvbk1hbmFnZXJTZXJ2aWNlOiBOb3RpZmljYXRpb25NYW5hZ2VyU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNzZVNlcnZpY2U6IFNzZVNlcnZpY2UsXG4gICkge31cblxuICAvKipcbiAgICogQ3JpYSBlIGVudmlhIHVtYSBub3ZhIG5vdGlmaWNhw6fDo29cbiAgICovXG4gIEBQb3N0KClcbiAgQFJvbGVzKFJPTEVTLkFETUlOLCBST0xFUy5HRVNUT1IsIFJPTEVTLkNPT1JERU5BRE9SLCBST0xFUy5URUNOSUNPKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0NyaWFyIGUgZW52aWFyIHVtYSBub3ZhIG5vdGlmaWNhw6fDo28nIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDEsXG4gICAgZGVzY3JpcHRpb246ICdOb3RpZmljYcOnw6NvIGNyaWFkYSBlIGVudmlhZGEgY29tIHN1Y2Vzc28nLFxuICB9KVxuICBhc3luYyBjcmlhck5vdGlmaWNhY2FvKEBCb2R5KCkgY3JlYXRlTm90aWZpY2F0aW9uRHRvOiBDcmVhdGVOb3RpZmljYXRpb25EdG8pIHtcbiAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICBgQ3JpYW5kbyBub3ZhIG5vdGlmaWNhw6fDo28gcGFyYSBkZXN0aW5hdMOhcmlvOiAke2NyZWF0ZU5vdGlmaWNhdGlvbkR0by5kZXN0aW5hdGFyaW9faWR9YCxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLm5vdGlmaWNhdGlvbk1hbmFnZXJTZXJ2aWNlLmNyaWFyTm90aWZpY2FjYW8oXG4gICAgICBjcmVhdGVOb3RpZmljYXRpb25EdG8sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0YSB0b2RhcyBhcyBub3RpZmljYcOnw7VlcyBkbyB1c3XDoXJpbyBhdXRlbnRpY2Fkb1xuICAgKi9cbiAgQEdldCgpXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnTGlzdGFyIG5vdGlmaWNhw6fDtWVzIGRvIHVzdcOhcmlvJyB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnTGlzdGEgZGUgbm90aWZpY2HDp8O1ZXMgcmV0b3JuYWRhIGNvbSBzdWNlc3NvJyxcbiAgfSlcbiAgQEFwaVF1ZXJ5KHtcbiAgICBuYW1lOiAncGFnZScsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZXNjcmlwdGlvbjogJ1DDoWdpbmEgYXR1YWwnLFxuICB9KVxuICBAQXBpUXVlcnkoe1xuICAgIG5hbWU6ICdsaW1pdCcsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIHR5cGU6IE51bWJlcixcbiAgICBkZXNjcmlwdGlvbjogJ0l0ZW5zIHBvciBww6FnaW5hJyxcbiAgfSlcbiAgQEFwaVF1ZXJ5KHtcbiAgICBuYW1lOiAnc3RhdHVzJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgZW51bTogU3RhdHVzTm90aWZpY2FjYW9Qcm9jZXNzYW1lbnRvLFxuICAgIGRlc2NyaXB0aW9uOiAnRmlsdHJvIHBvciBzdGF0dXMnLFxuICB9KVxuICBhc3luYyBmaW5kQWxsKFxuICAgIEBSZXF1ZXN0KCkgcmVxLFxuICAgIEBRdWVyeSgncGFnZScpIHBhZ2U/OiBudW1iZXIsXG4gICAgQFF1ZXJ5KCdsaW1pdCcpIGxpbWl0PzogbnVtYmVyLFxuICAgIEBRdWVyeSgnc3RhdHVzJykgc3RhdHVzPzogU3RhdHVzTm90aWZpY2FjYW9Qcm9jZXNzYW1lbnRvLFxuICApIHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcblxuICAgIHJldHVybiB0aGlzLm5vdGlmaWNhY2FvU2VydmljZS5maW5kQWxsKHtcbiAgICAgIHBhZ2U6IHBhZ2UgPyArcGFnZSA6IHVuZGVmaW5lZCxcbiAgICAgIGxpbWl0OiBsaW1pdCA/ICtsaW1pdCA6IHVuZGVmaW5lZCxcbiAgICAgIHN0YXR1cyxcbiAgICAgIHVzZXJJZCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0YSBhcyBub3RpZmljYcOnw7VlcyBkbyB1c3XDoXJpbyBsb2dhZG8gKHJvdGEgYWx0ZXJuYXRpdmEpXG4gICAqL1xuICBAR2V0KCdtaW5oYXMnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0xpc3RhciBtaW5oYXMgbm90aWZpY2HDp8O1ZXMnIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgZGVzY3JpcHRpb246ICdMaXN0YSBkZSBub3RpZmljYcOnw7VlcyByZXRvcm5hZGEgY29tIHN1Y2Vzc28nLFxuICB9KVxuICBhc3luYyBsaXN0YXJNaW5oYXNOb3RpZmljYWNvZXMoXG4gICAgQFJlcXVlc3QoKSByZXEsXG4gICAgQFF1ZXJ5KCdwYWdlJykgcGFnZT86IG51bWJlcixcbiAgICBAUXVlcnkoJ2xpbWl0JykgbGltaXQ/OiBudW1iZXIsXG4gICAgQFF1ZXJ5KCdzdGF0dXMnKSBzdGF0dXM/OiBzdHJpbmcsXG4gICkge1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcS51c2VyLmlkO1xuXG4gICAgcmV0dXJuIHRoaXMubm90aWZpY2FjYW9TZXJ2aWNlLmZpbmRBbGwoe1xuICAgICAgdXNlcklkLFxuICAgICAgcGFnZTogcGFnZSA/IE51bWJlcihwYWdlKSA6IHVuZGVmaW5lZCxcbiAgICAgIGxpbWl0OiBsaW1pdCA/IE51bWJlcihsaW1pdCkgOiB1bmRlZmluZWQsXG4gICAgICBzdGF0dXM6IHN0YXR1cyBhcyBhbnksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogT2J0w6ltIGRldGFsaGVzIGRlIHVtYSBub3RpZmljYcOnw6NvIGVzcGVjw61maWNhXG4gICAqL1xuICBAR2V0KCc6aWQnKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ09idGVyIGRldGFsaGVzIGRlIHVtYSBub3RpZmljYcOnw6NvJyB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnTm90aWZpY2HDp8OjbyBlbmNvbnRyYWRhIGNvbSBzdWNlc3NvJyxcbiAgfSlcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDQsIGRlc2NyaXB0aW9uOiAnTm90aWZpY2HDp8OjbyBuw6NvIGVuY29udHJhZGEnIH0pXG4gIGFzeW5jIGZpbmRPbmUoQFBhcmFtKCdpZCcsIFBhcnNlVVVJRFBpcGUpIGlkOiBzdHJpbmcsIEBSZXF1ZXN0KCkgcmVxKSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIuaWQ7XG4gICAgcmV0dXJuIHRoaXMubm90aWZpY2FjYW9TZXJ2aWNlLmZpbmRCeUlkKGlkLCB1c2VySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmNhIHVtYSBub3RpZmljYcOnw6NvIGNvbW8gbGlkYVxuICAgKi9cbiAgQFB1dCgnOmlkL2xlcicpXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnTWFyY2FyIG5vdGlmaWNhw6fDo28gY29tbyBsaWRhJyB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnTm90aWZpY2HDp8OjbyBtYXJjYWRhIGNvbW8gbGlkYSBjb20gc3VjZXNzbycsXG4gIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA0LCBkZXNjcmlwdGlvbjogJ05vdGlmaWNhw6fDo28gbsOjbyBlbmNvbnRyYWRhJyB9KVxuICBhc3luYyBtYXJjYXJDb21vTGlkYShAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZywgQFJlcXVlc3QoKSByZXEpIHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcbiAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICBgTWFyY2FuZG8gbm90aWZpY2HDp8OjbyAke2lkfSBjb21vIGxpZGEgcGFyYSB1c3XDoXJpbyAke3VzZXJJZH1gLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMubm90aWZpY2FjYW9TZXJ2aWNlLm1hcmNhckNvbW9MaWRhKGlkLCB1c2VySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmNhIHVtYSBub3RpZmljYcOnw6NvIGNvbW8gYXJxdWl2YWRhXG4gICAqL1xuICBAUHV0KCc6aWQvYXJxdWl2YXInKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0FycXVpdmFyIG5vdGlmaWNhw6fDo28nIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgZGVzY3JpcHRpb246ICdOb3RpZmljYcOnw6NvIGFycXVpdmFkYSBjb20gc3VjZXNzbycsXG4gIH0pXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA0LCBkZXNjcmlwdGlvbjogJ05vdGlmaWNhw6fDo28gbsOjbyBlbmNvbnRyYWRhJyB9KVxuICBhc3luYyBhcnF1aXZhcihAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZywgQFJlcXVlc3QoKSByZXEpIHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcbiAgICB0aGlzLmxvZ2dlci5sb2coYEFycXVpdmFuZG8gbm90aWZpY2HDp8OjbyAke2lkfSBwYXJhIHVzdcOhcmlvICR7dXNlcklkfWApO1xuICAgIHJldHVybiB0aGlzLm5vdGlmaWNhY2FvU2VydmljZS5hcnF1aXZhcihpZCwgdXNlcklkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJjYSB0b2RhcyBhcyBub3RpZmljYcOnw7VlcyBkbyB1c3XDoXJpbyBjb21vIGxpZGFzXG4gICAqL1xuICBAUHV0KCd0b2Rhcy9sZXInKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ01hcmNhciB0b2RhcyBhcyBub3RpZmljYcOnw7VlcyBjb21vIGxpZGFzJyB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnVG9kYXMgYXMgbm90aWZpY2HDp8O1ZXMgbWFyY2FkYXMgY29tbyBsaWRhcycsXG4gIH0pXG4gIGFzeW5jIG1hcmNhclRvZGFzQ29tb0xpZGFzKEBSZXF1ZXN0KCkgcmVxKSB7XG4gICAgY29uc3QgdXNlcklkID0gcmVxLnVzZXIuaWQ7XG4gICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgYE1hcmNhbmRvIHRvZGFzIGFzIG5vdGlmaWNhw6fDtWVzIGNvbW8gbGlkYXMgcGFyYSB1c3XDoXJpbyAke3VzZXJJZH1gLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMubm90aWZpY2FjYW9TZXJ2aWNlLm1hcmNhclRvZGFzQ29tb0xpZGFzKHVzZXJJZCk7XG4gIH1cblxuICAvKipcbiAgICogT2J0w6ltIG8gY29udGFkb3IgZGUgbm90aWZpY2HDp8O1ZXMgbsOjbyBsaWRhcyBkbyB1c3XDoXJpb1xuICAgKi9cbiAgQEdldCgnY29udGFkb3IvbmFvLWxpZGFzJylcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdPYnRlciBjb250YWRvciBkZSBub3RpZmljYcOnw7VlcyBuw6NvIGxpZGFzJyB9KVxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDIwMCwgZGVzY3JpcHRpb246ICdDb250YWRvciByZXRvcm5hZG8gY29tIHN1Y2Vzc28nIH0pXG4gIGFzeW5jIGNvbnRhZG9yTmFvTGlkYXMoQFJlcXVlc3QoKSByZXEpIHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcbiAgICByZXR1cm4gdGhpcy5ub3RpZmljYWNhb1NlcnZpY2UuY29udGFkb3JOYW9MaWRhcyh1c2VySWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuZHBvaW50IFNTRSBwYXJhIG5vdGlmaWNhw6fDtWVzIGVtIHRlbXBvIHJlYWxcbiAgICovXG4gIEBTc2UoJ3NzZScpXG4gIEBVc2VHdWFyZHMoU3NlR3VhcmQpXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnQ29uZXjDo28gU1NFIHBhcmEgbm90aWZpY2HDp8O1ZXMgZW0gdGVtcG8gcmVhbCcgfSlcbiAgQEFwaVJlc3BvbnNlKHtcbiAgICBzdGF0dXM6IDIwMCxcbiAgICBkZXNjcmlwdGlvbjogJ0NvbmV4w6NvIFNTRSBlc3RhYmVsZWNpZGEgY29tIHN1Y2Vzc28nLFxuICB9KVxuICBzc2VOb3RpZmljYXRpb25zKEBSZXF1ZXN0KCkgcmVxKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCB1c2VySWQgPSByZXEudXNlci5pZDtcbiAgICByZXR1cm4gdGhpcy5zc2VTZXJ2aWNlLmNyZWF0ZUNvbm5lY3Rpb24odXNlcklkLCByZXEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuZHBvaW50IHBhcmEgb2J0ZXIgZXN0YXTDrXN0aWNhcyBkYXMgY29uZXjDtWVzIFNTRVxuICAgKi9cbiAgQEdldCgnc3NlL3N0YXRzJylcbiAgQFVzZUd1YXJkcyhKd3RBdXRoR3VhcmQsIFJvbGVzR3VhcmQpXG4gIEBSb2xlcyhST0xFUy5BRE1JTiwgUk9MRVMuR0VTVE9SKVxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ09idGVyIGVzdGF0w61zdGljYXMgZGFzIGNvbmV4w7VlcyBTU0UnIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgZGVzY3JpcHRpb246ICdFc3RhdMOtc3RpY2FzIHJldG9ybmFkYXMgY29tIHN1Y2Vzc28nLFxuICB9KVxuICBhc3luYyBnZXRTc2VTdGF0cygpIHtcbiAgICByZXR1cm4gdGhpcy5zc2VTZXJ2aWNlLmdldENvbm5lY3Rpb25TdGF0cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuZHBvaW50IHBhcmEgdmVyaWZpY2FyIHNlIHVtIHVzdcOhcmlvIGVzdMOhIGNvbmVjdGFkbyB2aWEgU1NFXG4gICAqL1xuICBAR2V0KCdzc2Uvc3RhdHVzLzp1c2VySWQnKVxuICBAVXNlR3VhcmRzKEp3dEF1dGhHdWFyZCwgUm9sZXNHdWFyZClcbiAgQFJvbGVzKFJPTEVTLkFETUlOLCBST0xFUy5HRVNUT1IpXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnVmVyaWZpY2FyIHN0YXR1cyBkZSBjb25leMOjbyBTU0UgZGUgdW0gdXN1w6FyaW8nIH0pXG4gIEBBcGlSZXNwb25zZSh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgZGVzY3JpcHRpb246ICdTdGF0dXMgZGUgY29uZXjDo28gcmV0b3JuYWRvIGNvbSBzdWNlc3NvJyxcbiAgfSlcbiAgYXN5bmMgZ2V0VXNlclNzZVN0YXR1cyhAUGFyYW0oJ3VzZXJJZCcsIFBhcnNlVVVJRFBpcGUpIHVzZXJJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgaXNDb25uZWN0ZWQgPSB0aGlzLnNzZVNlcnZpY2UuaXNVc2VyQ29ubmVjdGVkKHVzZXJJZCk7XG4gICAgY29uc3QgY29ubmVjdGlvbkNvdW50ID0gdGhpcy5zc2VTZXJ2aWNlLmdldFVzZXJDb25uZWN0aW9uQ291bnQodXNlcklkKTtcbiAgICByZXR1cm4ge1xuICAgICAgdXNlcklkLFxuICAgICAgaXNDb25uZWN0ZWQsXG4gICAgICBjb25uZWN0aW9uQ291bnQsXG4gICAgfTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9