{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\dto\\create-usuario.dto.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\dto\\create-usuario.dto.ts"],"sourcesContent":["import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsUUID,\n  MinLength,\n  MaxLength,\n  Matches,\n  IsNotEmpty,\n  Validate,\n} from 'class-validator';\nimport { IsCPF } from '../../../shared/validators/cpf.validator';\nimport { IsStrongPassword } from '../../../shared/validators/strong-password.validator';\nimport { ROLES, RoleType } from '../../../shared/constants/roles.constants';\n\n/**\n * DTO para criação de usuário\n */\nexport class CreateUsuarioDto {\n  @IsString({ message: 'Nome deve ser uma string' })\n  @IsNotEmpty({ message: 'Nome é obrigatório' })\n  @MinLength(3, { message: 'Nome deve ter no mínimo 3 caracteres' })\n  @MaxLength(100, { message: 'Nome deve ter no máximo 100 caracteres' })\n  @Matches(/^[A-Za-zÀ-ÖØ-öø-ÿ]+ [A-Za-zÀ-ÖØ-öø-ÿ ]+$/, {\n    message: 'O nome do usuário deve ter pelo menos nome e sobrenome',\n  })\n  @ApiProperty({\n    example: 'João da Silva',\n    description: 'Nome completo do usuário',\n  })\n  nome: string;\n\n  @IsEmail({}, { message: 'Email inválido' })\n  @IsNotEmpty({ message: 'Email é obrigatório' })\n  @Matches(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/, {\n    message: 'Formato de email inválido',\n  })\n  @ApiProperty({\n    example: 'joao.silva@semtas.natal.gov.br',\n    description: 'Email do usuário (será usado para login)',\n  })\n  email: string;\n\n  @IsString({ message: 'Senha deve ser uma string' })\n  @IsOptional()\n  @MinLength(8, { message: 'Senha deve ter no mínimo 8 caracteres' })\n  @MaxLength(30, { message: 'Senha deve ter no máximo 30 caracteres' })\n  @Matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&#])[A-Za-z\\d@$!%*?&#]{8,}$/,\n    {\n      message:\n        'Senha deve conter pelo menos uma letra maiúscula, uma minúscula, um número e um caractere especial',\n    },\n  )\n  @Validate(IsStrongPassword, {\n    message: 'A senha não pode conter informações pessoais ou palavras comuns',\n  })\n  @ApiProperty({\n    example: 'Senha@123',\n    description:\n      'Senha do usuário (opcional - se não fornecida, será gerada automaticamente)',\n    required: false,\n  })\n  senha?: string;\n\n  @IsString({ message: 'CPF deve ser uma string' })\n  @IsNotEmpty({ message: 'CPF é obrigatório' })\n  @Matches(/^\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2}$/, {\n    message: 'CPF deve estar no formato 123.456.789-00',\n  })\n  @Validate(IsCPF, {\n    message: 'CPF inválido',\n  })\n  @ApiProperty({\n    example: '123.456.789-00',\n    description: 'CPF do usuário',\n    required: true,\n  })\n  cpf: string;\n\n  @IsString({ message: 'Telefone deve ser uma string' })\n  @IsNotEmpty({ message: 'Telefone é obrigatório' })\n  @Matches(/^\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/, {\n    message: 'Telefone deve estar no formato (XX) XXXX-XXXX ou (XX) XXXXX-XXXX',\n  })\n  @ApiProperty({\n    example: '(84) 98765-4321',\n    description: 'Telefone do usuário',\n    required: true,\n  })\n  telefone: string;\n\n  @IsString({ message: 'Matrícula deve ser uma string' })\n  @IsNotEmpty({ message: 'Matrícula é obrigatória' })\n  @Matches(/^[0-9]{5,10}$/, {\n    message: 'Matrícula deve conter entre 5 e 10 dígitos numéricos',\n  })\n  @ApiProperty({\n    example: '12345',\n    description: 'Matrícula do usuário',\n    required: true,\n  })\n  matricula: string;\n\n  @IsUUID(undefined, { message: 'ID da role inválido' })\n  @ApiProperty({\n    example: '123e4567-e89b-12d3-a456-426614174000',\n    description: 'ID do perfil do nível de acesso do usuário',\n    required: false,\n  })\n  role_id: string;\n\n  @IsUUID(undefined, { message: 'ID da unidade inválido' })\n  @IsOptional()\n  @ApiProperty({\n    example: '123e4567-e89b-12d3-a456-426614174000',\n    description: 'ID da unidade do usuário',\n    required: false,\n  })\n  unidade_id?: string;\n\n  @IsUUID(undefined, { message: 'ID do setor inválido' })\n  @IsOptional()\n  @ApiProperty({\n    example: '123e4567-e89b-12d3-a456-426614174001',\n    description: 'ID do setor do usuário',\n    required: false,\n  })\n  setor_id?: string;\n}\n"],"version":3}