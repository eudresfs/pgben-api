713398dcf61b1158ddd367f2bdde93f9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosCestaBasica = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const solicitacao_entity_1 = require("./solicitacao.entity");
const enums_1 = require("../enums");
/**
 * Entidade para armazenar dados específicos do cidadão para Cesta Básica
 *
 * Armazena informações específicas necessárias para a solicitação do benefício
 * de Cesta Básica, como quantidade, período de concessão, origem do atendimento, etc.
 */
let DadosCestaBasica = class DadosCestaBasica {
    id;
    solicitacao_id;
    solicitacao;
    quantidade_cestas_solicitadas;
    periodo_concessao;
    origem_atendimento;
    numero_pessoas_familia;
    justificativa_quantidade;
    observacoes_especiais;
    tecnico_responsavel;
    unidade_solicitante;
    created_at;
    updated_at;
    removed_at;
    // Getters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Calcula quantidade recomendada baseada no número de pessoas na família
     */
    calcularQuantidadeRecomendada() {
        if (!this.numero_pessoas_familia)
            return 1;
        // Regra: 1 cesta para até 3 pessoas, +1 cesta a cada 3 pessoas adicionais
        return Math.ceil(this.numero_pessoas_familia / 3);
    }
    /**
     * Verifica se a quantidade solicitada está dentro do recomendado
     */
    isQuantidadeDentroRecomendacao() {
        const recomendada = this.calcularQuantidadeRecomendada();
        return this.quantidade_cestas_solicitadas <= recomendada + 1; // Tolerância de +1
    }
    /**
     * Verifica se é atendimento prioritário
     */
    isAtendimentoPrioritario() {
        const origemPrioritaria = [
            enums_1.OrigemAtendimentoEnum.CREAS,
            enums_1.OrigemAtendimentoEnum.BUSCA_ATIVA,
        ];
        return origemPrioritaria.includes(this.origem_atendimento);
    }
    /**
     * Calcula duração total do benefício em meses
     */
    calcularDuracaoTotalMeses() {
        let multiplicador = 1;
        switch (this.periodo_concessao) {
            case enums_1.PeriodicidadeEnum.MENSAL:
                multiplicador = 1;
                break;
            case enums_1.PeriodicidadeEnum.BIMESTRAL:
                multiplicador = 2;
                break;
            case enums_1.PeriodicidadeEnum.TRIMESTRAL:
                multiplicador = 3;
                break;
            case enums_1.PeriodicidadeEnum.SEMESTRAL:
                multiplicador = 6;
                break;
            case enums_1.PeriodicidadeEnum.UNICO:
                multiplicador = 0; // Entrega única
                break;
        }
        return multiplicador;
    }
    /**
     * Calcula total de cestas que serão entregues no período
     */
    calcularTotalCestasNoPeriodo() {
        const duracaoMeses = this.calcularDuracaoTotalMeses();
        if (this.periodo_concessao === enums_1.PeriodicidadeEnum.UNICO) {
            return this.quantidade_cestas_solicitadas;
        }
        // Para períodos recorrentes, considera entrega mensal
        return this.quantidade_cestas_solicitadas * duracaoMeses;
    }
    /**
     * Verifica se precisa de justificativa para quantidade
     */
    precisaJustificativaQuantidade() {
        const recomendada = this.calcularQuantidadeRecomendada();
        return this.quantidade_cestas_solicitadas > recomendada + 1;
    }
    /**
     * Calcula pontuação de prioridade
     */
    calcularPontuacaoPrioridade() {
        let pontuacao = 0;
        // Pontuação por origem do atendimento
        switch (this.origem_atendimento) {
            case enums_1.OrigemAtendimentoEnum.CREAS:
                pontuacao += 100;
                break;
            case enums_1.OrigemAtendimentoEnum.BUSCA_ATIVA:
                pontuacao += 90;
                break;
            case enums_1.OrigemAtendimentoEnum.CRAS:
                pontuacao += 80;
                break;
            case enums_1.OrigemAtendimentoEnum.ENCAMINHAMENTO_EXTERNO:
                pontuacao += 70;
                break;
            case enums_1.OrigemAtendimentoEnum.UNIDADE_BASICA:
                pontuacao += 60;
                break;
            case enums_1.OrigemAtendimentoEnum.DEMANDA_ESPONTANEA:
                pontuacao += 50;
                break;
        }
        // Pontuação por tamanho da família
        if (this.numero_pessoas_familia) {
            if (this.numero_pessoas_familia >= 6)
                pontuacao += 30;
            else if (this.numero_pessoas_familia >= 4)
                pontuacao += 20;
            else if (this.numero_pessoas_familia >= 2)
                pontuacao += 10;
        }
        return pontuacao;
    }
    /**
     * Valida se os dados estão completos para submissão
     */
    validarDadosCompletos() {
        const erros = [];
        if (!this.quantidade_cestas_solicitadas || this.quantidade_cestas_solicitadas < 1) {
            erros.push('Quantidade de cestas deve ser maior que zero');
        }
        if (!this.periodo_concessao) {
            erros.push('Período de concessão é obrigatório');
        }
        if (!this.origem_atendimento) {
            erros.push('Origem do atendimento é obrigatória');
        }
        if (this.precisaJustificativaQuantidade() &&
            (!this.justificativa_quantidade || this.justificativa_quantidade.trim().length === 0)) {
            erros.push('Justificativa é obrigatória para quantidade acima do recomendado');
        }
        if (this.origem_atendimento === enums_1.OrigemAtendimentoEnum.ENCAMINHAMENTO_EXTERNO &&
            (!this.unidade_solicitante || this.unidade_solicitante.trim().length === 0)) {
            erros.push('Unidade solicitante é obrigatória para encaminhamentos externos');
        }
        return {
            valido: erros.length === 0,
            erros
        };
    }
};
exports.DadosCestaBasica = DadosCestaBasica;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], DadosCestaBasica.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da solicitação é obrigatório' }),
    __metadata("design:type", String)
], DadosCestaBasica.prototype, "solicitacao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => solicitacao_entity_1.Solicitacao, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'solicitacao_id' }),
    __metadata("design:type", typeof (_a = typeof solicitacao_entity_1.Solicitacao !== "undefined" && solicitacao_entity_1.Solicitacao) === "function" ? _a : Object)
], DadosCestaBasica.prototype, "solicitacao", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'integer' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Quantidade de cestas é obrigatória' }),
    (0, class_validator_1.IsNumber)({}, { message: 'Quantidade de cestas deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Quantidade mínima é 1 cesta' }),
    (0, class_validator_1.Max)(12, { message: 'Quantidade máxima é 12 cestas' }),
    __metadata("design:type", Number)
], DadosCestaBasica.prototype, "quantidade_cestas_solicitadas", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.PeriodicidadeEnum,
        enumName: 'periodo_concessao_cesta',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Período de concessão é obrigatório' }),
    (0, class_validator_1.IsEnum)(enums_1.PeriodicidadeEnum, { message: 'Período de concessão inválido' }),
    __metadata("design:type", typeof (_b = typeof enums_1.PeriodicidadeEnum !== "undefined" && enums_1.PeriodicidadeEnum) === "function" ? _b : Object)
], DadosCestaBasica.prototype, "periodo_concessao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.OrigemAtendimentoEnum,
        enumName: 'origem_atendimento',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Origem do atendimento é obrigatória' }),
    (0, class_validator_1.IsEnum)(enums_1.OrigemAtendimentoEnum, { message: 'Origem do atendimento inválida' }),
    __metadata("design:type", typeof (_c = typeof enums_1.OrigemAtendimentoEnum !== "undefined" && enums_1.OrigemAtendimentoEnum) === "function" ? _c : Object)
], DadosCestaBasica.prototype, "origem_atendimento", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'integer', nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Número de pessoas na família deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Número mínimo de pessoas na família é 1' }),
    __metadata("design:type", Number)
], DadosCestaBasica.prototype, "numero_pessoas_familia", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosCestaBasica.prototype, "justificativa_quantidade", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosCestaBasica.prototype, "observacoes_especiais", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosCestaBasica.prototype, "tecnico_responsavel", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosCestaBasica.prototype, "unidade_solicitante", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], DadosCestaBasica.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], DadosCestaBasica.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], DadosCestaBasica.prototype, "removed_at", void 0);
exports.DadosCestaBasica = DadosCestaBasica = __decorate([
    (0, typeorm_1.Entity)('dados_cesta_basica'),
    (0, typeorm_1.Index)(['solicitacao_id'], { unique: true })
], DadosCestaBasica);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,