4782e0b47d2387f4cf377d00abba016d
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const logger_service_1 = require("../logger/logger.service");
const utils = __importStar(require("../request-context/util"));
const logging_interceptor_1 = require("./logging.interceptor");
describe('LoggingInterceptor', () => {
    let loggingInterceptor;
    const mockRequest = {
        headers: {},
        url: 'mock-url',
        header: jest.fn(),
    };
    const mockExecutionContext = {
        switchToHttp: jest.fn().mockReturnThis(),
        getRequest: jest.fn().mockReturnThis(),
    };
    const mockCallHandler = {
        handle: jest.fn(),
        pipe: jest.fn().mockReturnThis(),
    };
    beforeEach(async () => {
        loggingInterceptor = new logging_interceptor_1.LoggingInterceptor(new logger_service_1.AppLogger());
    });
    it('should be defined', () => {
        expect(loggingInterceptor).toBeDefined();
    });
    describe('intercept', () => {
        it('intercept', async () => {
            mockExecutionContext.switchToHttp().getRequest.mockReturnValueOnce(mockRequest);
            mockCallHandler.handle.mockReturnValueOnce({
                pipe: jest.fn(),
            });
            const createRequestContext = jest.spyOn(utils, 'createRequestContext');
            loggingInterceptor.intercept(mockExecutionContext, mockCallHandler);
            expect(mockExecutionContext.switchToHttp().getRequest).toHaveBeenCalled();
            expect(createRequestContext).toHaveBeenCalledWith(mockRequest);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcaW50ZXJjZXB0b3JzXFxsb2dnaW5nLmludGVyY2VwdG9yLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSw2REFBcUQ7QUFDckQsK0RBQWlEO0FBQ2pELCtEQUEyRDtBQUUzRCxRQUFRLENBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLElBQUksa0JBQXNDLENBQUM7SUFFM0MsTUFBTSxXQUFXLEdBQUc7UUFDbEIsT0FBTyxFQUFFLEVBQUU7UUFDWCxHQUFHLEVBQUUsVUFBVTtRQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ2xCLENBQUM7SUFFRixNQUFNLG9CQUFvQixHQUFHO1FBQzNCLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ3hDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO0tBQ1IsQ0FBQztJQUVqQyxNQUFNLGVBQWUsR0FBRztRQUN0QixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGNBQWMsRUFBRTtLQUNqQyxDQUFDO0lBRUYsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLGtCQUFrQixHQUFHLElBQUksd0NBQWtCLENBQUMsSUFBSSwwQkFBUyxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsV0FBVyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBRXZCLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDLFVBQ3JDLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbkMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQztnQkFDekMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7YUFDaEIsQ0FBQyxDQUFDO1lBRUgsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBRXZFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsRUFBRSxlQUFlLENBQUMsQ0FBQztZQUVwRSxNQUFNLENBQUMsb0JBQW9CLENBQUMsWUFBWSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUMxRSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcaW50ZXJjZXB0b3JzXFxsb2dnaW5nLmludGVyY2VwdG9yLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhlY3V0aW9uQ29udGV4dCB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcblxuaW1wb3J0IHsgQXBwTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4uL3JlcXVlc3QtY29udGV4dC91dGlsJztcbmltcG9ydCB7IExvZ2dpbmdJbnRlcmNlcHRvciB9IGZyb20gJy4vbG9nZ2luZy5pbnRlcmNlcHRvcic7XG5cbmRlc2NyaWJlKCdMb2dnaW5nSW50ZXJjZXB0b3InLCAoKSA9PiB7XG4gIGxldCBsb2dnaW5nSW50ZXJjZXB0b3I6IExvZ2dpbmdJbnRlcmNlcHRvcjtcblxuICBjb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgICBoZWFkZXJzOiB7fSxcbiAgICB1cmw6ICdtb2NrLXVybCcsXG4gICAgaGVhZGVyOiBqZXN0LmZuKCksXG4gIH07XG5cbiAgY29uc3QgbW9ja0V4ZWN1dGlvbkNvbnRleHQgPSB7XG4gICAgc3dpdGNoVG9IdHRwOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBnZXRSZXF1ZXN0OiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgfSBhcyB1bmtub3duIGFzIEV4ZWN1dGlvbkNvbnRleHQ7XG5cbiAgY29uc3QgbW9ja0NhbGxIYW5kbGVyID0ge1xuICAgIGhhbmRsZTogamVzdC5mbigpLFxuICAgIHBpcGU6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICB9O1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGxvZ2dpbmdJbnRlcmNlcHRvciA9IG5ldyBMb2dnaW5nSW50ZXJjZXB0b3IobmV3IEFwcExvZ2dlcigpKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBkZWZpbmVkJywgKCkgPT4ge1xuICAgIGV4cGVjdChsb2dnaW5nSW50ZXJjZXB0b3IpLnRvQmVEZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpbnRlcmNlcHQnLCAoKSA9PiB7XG4gICAgaXQoJ2ludGVyY2VwdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIChcbiAgICAgICAgbW9ja0V4ZWN1dGlvbkNvbnRleHQuc3dpdGNoVG9IdHRwKCkuZ2V0UmVxdWVzdCBhcyBqZXN0Lk1vY2s8YW55LCBhbnk+XG4gICAgICApLm1vY2tSZXR1cm5WYWx1ZU9uY2UobW9ja1JlcXVlc3QpO1xuICAgICAgbW9ja0NhbGxIYW5kbGVyLmhhbmRsZS5tb2NrUmV0dXJuVmFsdWVPbmNlKHtcbiAgICAgICAgcGlwZTogamVzdC5mbigpLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNyZWF0ZVJlcXVlc3RDb250ZXh0ID0gamVzdC5zcHlPbih1dGlscywgJ2NyZWF0ZVJlcXVlc3RDb250ZXh0Jyk7XG5cbiAgICAgIGxvZ2dpbmdJbnRlcmNlcHRvci5pbnRlcmNlcHQobW9ja0V4ZWN1dGlvbkNvbnRleHQsIG1vY2tDYWxsSGFuZGxlcik7XG5cbiAgICAgIGV4cGVjdChtb2NrRXhlY3V0aW9uQ29udGV4dC5zd2l0Y2hUb0h0dHAoKS5nZXRSZXF1ZXN0KS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoY3JlYXRlUmVxdWVzdENvbnRleHQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tSZXF1ZXN0KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==