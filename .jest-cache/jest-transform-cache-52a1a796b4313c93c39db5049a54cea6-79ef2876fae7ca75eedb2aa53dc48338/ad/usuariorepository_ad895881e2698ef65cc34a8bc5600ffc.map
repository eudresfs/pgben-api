{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\repositories\\usuario.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\repositories\\usuario.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { Repository, DataSource, DeepPartial } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Usuario } from '../../../entities/usuario.entity';\nimport { Status } from '../../../enums/status.enum';\nimport { throwUserNotFound } from '../../../shared/exceptions/error-catalog/domains/usuario.errors';\n\n/**\n * Repositório de usuários\n *\n * Responsável por operações de acesso a dados relacionadas a usuários\n */\n@Injectable()\nexport class UsuarioRepository {\n  private repository: Repository<Usuario>;\n\n  constructor(private dataSource: DataSource) {\n    this.repository = this.dataSource.getRepository(Usuario);\n  }\n\n  /**\n   * Busca todos os usuários com filtros e paginação\n   * @param options Opções de filtro e paginação\n   * @returns Lista de usuários paginada\n   */\n  async findAll(options?: {\n    skip?: number;\n    take?: number;\n    where?: any;\n    order?: any;\n  }): Promise<[Usuario[], number]> {\n    const {\n      skip = 0,\n      take = 10,\n      where = {},\n      order = { created_at: 'DESC' },\n    } = options || {};\n\n    return this.repository.findAndCount({\n      skip,\n      take,\n      where,\n      order,\n    });\n  }\n\n  /**\n   * Busca um usuário pelo ID\n   * @param id ID do usuário\n   * @returns Usuário encontrado\n   * @throws UsuarioError quando usuário não encontrado\n   */\n  async findById(id: string): Promise<Usuario> {\n    const usuario = await this.repository.findOne({\n      where: { id },\n      relations: ['unidade', 'setor'],\n    });\n\n    if (!usuario) {\n      throwUserNotFound(id);\n    }\n\n    return usuario;\n  }\n\n  /**\n   * Busca um usuário pelo email\n   * @param email Email do usuário\n   * @returns Usuário encontrado ou null\n   */\n  async findByEmail(email: string): Promise<Usuario | null> {\n    return this.repository.findOne({ where: { email } });\n  }\n\n  /**\n   * Busca um usuário pelo CPF\n   * @param cpf CPF do usuário\n   * @returns Usuário encontrado ou null\n   */\n  async findByCpf(cpf: string): Promise<Usuario | null> {\n    return this.repository.findOne({ where: { cpf } });\n  }\n\n  /**\n   * Busca um usuário pela matrícula\n   * @param matricula Matrícula do usuário\n   * @returns Usuário encontrado ou null\n   */\n  async findByMatricula(matricula: string): Promise<Usuario | null> {\n    return this.repository.findOne({ where: { matricula } });\n  }\n\n  /**\n   * Cria um novo usuário\n   * @param data Dados do usuário\n   * @returns Usuário criado\n   */\n  async create(data: Partial<Usuario>): Promise<Usuario> {\n    const usuario = this.repository.create(data);\n    return this.repository.save(usuario);\n  }\n\n  /**\n   * Atualiza um usuário existente\n   * @param id ID do usuário\n   * @param data Dados a serem atualizados\n   * @returns Usuário atualizado\n   */\n  async update(id: string, data: Partial<Usuario>): Promise<Usuario> {\n    const result = await this.repository.update(id, data);\n    if (result.affected === 0) {\n      throwUserNotFound(id);\n    }\n    const usuario = await this.findById(id);\n    if (!usuario) {\n      throwUserNotFound(id);\n    }\n    return usuario;\n  }\n\n  /**\n   * Atualiza o status de um usuário\n   * @param id ID do usuário\n   * @param status Novo status\n   * @returns Usuário atualizado\n   */\n  async updateStatus(id: string, status: Status): Promise<Usuario> {\n    const dadosAtualizacao: DeepPartial<Usuario> = { status };\n\n    await this.repository.update(id, dadosAtualizacao);\n    const usuario = await this.findById(id);\n    if (!usuario) {\n      throwUserNotFound(id);\n    }\n    return usuario;\n  }\n\n  /**\n   * Atualiza a senha de um usuário\n   * @param id ID do usuário\n   * @param senhaHash Hash da nova senha\n   * @returns Usuário atualizado\n   */\n  async updateSenha(id: string, senhaHash: string): Promise<Usuario> {\n    const dadosAtualizacao: DeepPartial<Usuario> = {\n      senhaHash,\n      primeiro_acesso: false,\n    };\n\n    await this.repository.update(id, dadosAtualizacao);\n    const usuario = await this.findById(id);\n    if (!usuario) {\n      throwUserNotFound(id);\n    }\n    return usuario;\n  }\n\n  /**\n   * Remove um usuário (soft delete)\n   * @param id ID do usuário\n   * @returns Resultado da operação\n   */\n  async remove(id: string): Promise<void> {\n    const result = await this.repository.softDelete(id);\n    if (result.affected === 0) {\n      throwUserNotFound(id);\n    }\n  }\n\n  /**\n   * Conta o total de usuários\n   * @param where Condições de filtro\n   * @returns Número total de usuários\n   */\n  async count(where?: any): Promise<number> {\n    return this.repository.count({ where });\n  }\n}\n"],"version":3}