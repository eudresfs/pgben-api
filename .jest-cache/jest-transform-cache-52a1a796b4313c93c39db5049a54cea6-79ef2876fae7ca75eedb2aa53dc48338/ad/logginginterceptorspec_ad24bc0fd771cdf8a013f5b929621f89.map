{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\logging.interceptor.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,6DAAqD;AACrD,+DAAiD;AACjD,+DAA2D;AAE3D,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,kBAAsC,CAAC;IAE3C,MAAM,WAAW,GAAG;QAClB,OAAO,EAAE,EAAE;QACX,GAAG,EAAE,UAAU;QACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;KAClB,CAAC;IAEF,MAAM,oBAAoB,GAAG;QAC3B,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QACxC,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;KACR,CAAC;IAEjC,MAAM,eAAe,GAAG;QACtB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;KACjC,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,kBAAkB,GAAG,IAAI,wCAAkB,CAAC,IAAI,0BAAS,EAAE,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;IAC3C,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YAEvB,oBAAoB,CAAC,YAAY,EAAE,CAAC,UACrC,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC;YACnC,eAAe,CAAC,MAAM,CAAC,mBAAmB,CAAC;gBACzC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;aAChB,CAAC,CAAC;YAEH,MAAM,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC;YAEvE,kBAAkB,CAAC,SAAS,CAAC,oBAAoB,EAAE,eAAe,CAAC,CAAC;YAEpE,MAAM,CAAC,oBAAoB,CAAC,YAAY,EAAE,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC1E,MAAM,CAAC,oBAAoB,CAAC,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\logging.interceptor.spec.ts"],"sourcesContent":["import { ExecutionContext } from '@nestjs/common';\n\nimport { AppLogger } from '../logger/logger.service';\nimport * as utils from '../request-context/util';\nimport { LoggingInterceptor } from './logging.interceptor';\n\ndescribe('LoggingInterceptor', () => {\n  let loggingInterceptor: LoggingInterceptor;\n\n  const mockRequest = {\n    headers: {},\n    url: 'mock-url',\n    header: jest.fn(),\n  };\n\n  const mockExecutionContext = {\n    switchToHttp: jest.fn().mockReturnThis(),\n    getRequest: jest.fn().mockReturnThis(),\n  } as unknown as ExecutionContext;\n\n  const mockCallHandler = {\n    handle: jest.fn(),\n    pipe: jest.fn().mockReturnThis(),\n  };\n\n  beforeEach(async () => {\n    loggingInterceptor = new LoggingInterceptor(new AppLogger());\n  });\n\n  it('should be defined', () => {\n    expect(loggingInterceptor).toBeDefined();\n  });\n\n  describe('intercept', () => {\n    it('intercept', async () => {\n      (\n        mockExecutionContext.switchToHttp().getRequest as jest.Mock<any, any>\n      ).mockReturnValueOnce(mockRequest);\n      mockCallHandler.handle.mockReturnValueOnce({\n        pipe: jest.fn(),\n      });\n\n      const createRequestContext = jest.spyOn(utils, 'createRequestContext');\n\n      loggingInterceptor.intercept(mockExecutionContext, mockCallHandler);\n\n      expect(mockExecutionContext.switchToHttp().getRequest).toHaveBeenCalled();\n      expect(createRequestContext).toHaveBeenCalledWith(mockRequest);\n    });\n  });\n});\n"],"version":3}