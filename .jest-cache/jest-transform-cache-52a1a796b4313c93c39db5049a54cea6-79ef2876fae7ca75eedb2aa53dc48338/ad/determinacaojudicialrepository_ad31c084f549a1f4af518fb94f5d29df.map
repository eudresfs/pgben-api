{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\repositories\\determinacao-judicial.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\repositories\\determinacao-judicial.repository.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DeterminacaoJudicial } from '../../../entities/determinacao-judicial.entity';\nimport {\n  CreateDeterminacaoJudicialDto,\n  UpdateDeterminacaoJudicialDto,\n} from '../dtos/determinacao-judicial.dto';\n\n/**\n * Repositório para operações relacionadas às determinações judiciais\n */\n@Injectable()\nexport class DeterminacaoJudicialRepository {\n  constructor(\n    @InjectRepository(DeterminacaoJudicial)\n    private readonly repository: Repository<DeterminacaoJudicial>,\n  ) {}\n\n  /**\n   * Cria uma nova determinação judicial\n   * @param data Dados da determinação\n   * @param usuarioId ID do usuário que está criando\n   * @returns Determinação criada\n   */\n  async create(\n    data: CreateDeterminacaoJudicialDto,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const determinacao = this.repository.create({\n      ...data,\n      created_by: usuarioId,\n      updated_by: usuarioId,\n    });\n    return this.repository.save(determinacao);\n  }\n\n  /**\n   * Busca todas as determinações judiciais\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  async findAll(includeInactive = false): Promise<DeterminacaoJudicial[]> {\n    const query = this.repository\n      .createQueryBuilder('determinacao')\n      .leftJoinAndSelect('determinacao.processo_judicial', 'processo');\n\n    if (!includeInactive) {\n      query.where('determinacao.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('determinacao.created_at', 'DESC').getMany();\n  }\n\n  /**\n   * Busca uma determinação pelo ID\n   * @param id ID da determinação\n   * @returns Determinação encontrada ou null\n   */\n  async findById(id: string): Promise<DeterminacaoJudicial | null> {\n    return this.repository.findOne({\n      where: { id },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Busca determinações por processo judicial\n   * @param processoId ID do processo judicial\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  async findByProcesso(\n    processoId: string,\n    includeInactive = false,\n  ): Promise<DeterminacaoJudicial[]> {\n    const query = this.repository\n      .createQueryBuilder('determinacao')\n      .leftJoinAndSelect('determinacao.processo_judicial', 'processo')\n      .where('determinacao.processo_judicial_id = :processoId', { processoId });\n\n    if (!includeInactive) {\n      query.andWhere('determinacao.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('determinacao.created_at', 'DESC').getMany();\n  }\n\n  /**\n   * Busca determinações por cidadão\n   * @param cidadaoId ID do cidadão\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  async findByCidadao(\n    cidadaoId: string,\n    includeInactive = false,\n  ): Promise<DeterminacaoJudicial[]> {\n    const query = this.repository\n      .createQueryBuilder('determinacao')\n      .leftJoinAndSelect('determinacao.processo_judicial', 'processo')\n      .where('determinacao.cidadao_id = :cidadaoId', { cidadaoId });\n\n    if (!includeInactive) {\n      query.andWhere('determinacao.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('determinacao.created_at', 'DESC').getMany();\n  }\n\n  /**\n   * Busca determinações por solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  async findBySolicitacao(\n    solicitacaoId: string,\n    includeInactive = false,\n  ): Promise<DeterminacaoJudicial[]> {\n    const query = this.repository\n      .createQueryBuilder('determinacao')\n      .leftJoinAndSelect('determinacao.processo_judicial', 'processo')\n      .where('determinacao.solicitacao_id = :solicitacaoId', { solicitacaoId });\n\n    if (!includeInactive) {\n      query.andWhere('determinacao.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('determinacao.created_at', 'DESC').getMany();\n  }\n\n  /**\n   * Busca determinações pendentes de cumprimento\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  async findPendentes(\n    includeInactive = false,\n  ): Promise<DeterminacaoJudicial[]> {\n    const query = this.repository\n      .createQueryBuilder('determinacao')\n      .leftJoinAndSelect('determinacao.processo_judicial', 'processo')\n      .where('determinacao.cumprida = :cumprida', { cumprida: false });\n\n    if (!includeInactive) {\n      query.andWhere('determinacao.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('determinacao.data_prazo', 'ASC').getMany();\n  }\n\n  /**\n   * Atualiza uma determinação existente\n   * @param id ID da determinação\n   * @param data Dados para atualização\n   * @param usuarioId ID do usuário que está atualizando\n   * @returns Determinação atualizada\n   */\n  async update(\n    id: string,\n    data: UpdateDeterminacaoJudicialDto,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    await this.repository.update(id, {\n      ...data,\n      updated_by: usuarioId,\n    });\n    const determinacao = await this.findById(id);\n    if (!determinacao) {\n      throw new NotFoundException(\n        `Determinação judicial com ID ${id} não encontrada`,\n      );\n    }\n    return determinacao;\n  }\n\n  /**\n   * Marca uma determinação como cumprida\n   * @param id ID da determinação\n   * @param observacao Observação sobre o cumprimento\n   * @param usuarioId ID do usuário que está marcando como cumprida\n   * @returns Determinação atualizada\n   */\n  async marcarComoCumprida(\n    id: string,\n    observacao: string,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    await this.repository.update(id, {\n      cumprida: true,\n      data_cumprimento: new Date(),\n      observacao_cumprimento: observacao,\n      updated_by: usuarioId,\n    });\n    const determinacao = await this.findById(id);\n    if (!determinacao) {\n      throw new NotFoundException(\n        `Determinação judicial com ID ${id} não encontrada`,\n      );\n    }\n    return determinacao;\n  }\n\n  /**\n   * Ativa ou desativa uma determinação\n   * @param id ID da determinação\n   * @param ativo Status de ativação\n   * @param usuarioId ID do usuário que está alterando o status\n   * @returns Determinação atualizada\n   */\n  async toggleAtivo(\n    id: string,\n    ativo: boolean,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    await this.repository.update(id, {\n      ativo,\n      updated_by: usuarioId,\n    });\n    const determinacao = await this.findById(id);\n    if (!determinacao) {\n      throw new NotFoundException(\n        `Determinação judicial com ID ${id} não encontrada`,\n      );\n    }\n    return determinacao;\n  }\n\n  /**\n   * Remove uma determinação\n   * @param id ID da determinação\n   */\n  async remove(id: string): Promise<void> {\n    await this.repository.delete(id);\n  }\n}\n"],"version":3}