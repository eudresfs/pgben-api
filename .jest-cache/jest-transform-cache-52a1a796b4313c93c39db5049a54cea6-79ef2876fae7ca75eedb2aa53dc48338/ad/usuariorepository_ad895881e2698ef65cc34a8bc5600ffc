90d951abaa29190ca870ec047489248e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsuarioRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const usuario_entity_1 = require("../../../entities/usuario.entity");
const usuario_errors_1 = require("../../../shared/exceptions/error-catalog/domains/usuario.errors");
/**
 * Repositório de usuários
 *
 * Responsável por operações de acesso a dados relacionadas a usuários
 */
let UsuarioRepository = class UsuarioRepository {
    dataSource;
    repository;
    constructor(dataSource) {
        this.dataSource = dataSource;
        this.repository = this.dataSource.getRepository(usuario_entity_1.Usuario);
    }
    /**
     * Busca todos os usuários com filtros e paginação
     * @param options Opções de filtro e paginação
     * @returns Lista de usuários paginada
     */
    async findAll(options) {
        const { skip = 0, take = 10, where = {}, order = { created_at: 'DESC' }, } = options || {};
        return this.repository.findAndCount({
            skip,
            take,
            where,
            order,
        });
    }
    /**
     * Busca um usuário pelo ID
     * @param id ID do usuário
     * @returns Usuário encontrado
     * @throws UsuarioError quando usuário não encontrado
     */
    async findById(id) {
        const usuario = await this.repository.findOne({
            where: { id },
            relations: ['unidade', 'setor'],
        });
        if (!usuario) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
        return usuario;
    }
    /**
     * Busca um usuário pelo email
     * @param email Email do usuário
     * @returns Usuário encontrado ou null
     */
    async findByEmail(email) {
        return this.repository.findOne({ where: { email } });
    }
    /**
     * Busca um usuário pelo CPF
     * @param cpf CPF do usuário
     * @returns Usuário encontrado ou null
     */
    async findByCpf(cpf) {
        return this.repository.findOne({ where: { cpf } });
    }
    /**
     * Busca um usuário pela matrícula
     * @param matricula Matrícula do usuário
     * @returns Usuário encontrado ou null
     */
    async findByMatricula(matricula) {
        return this.repository.findOne({ where: { matricula } });
    }
    /**
     * Cria um novo usuário
     * @param data Dados do usuário
     * @returns Usuário criado
     */
    async create(data) {
        const usuario = this.repository.create(data);
        return this.repository.save(usuario);
    }
    /**
     * Atualiza um usuário existente
     * @param id ID do usuário
     * @param data Dados a serem atualizados
     * @returns Usuário atualizado
     */
    async update(id, data) {
        const result = await this.repository.update(id, data);
        if (result.affected === 0) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
        const usuario = await this.findById(id);
        if (!usuario) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
        return usuario;
    }
    /**
     * Atualiza o status de um usuário
     * @param id ID do usuário
     * @param status Novo status
     * @returns Usuário atualizado
     */
    async updateStatus(id, status) {
        const dadosAtualizacao = { status };
        await this.repository.update(id, dadosAtualizacao);
        const usuario = await this.findById(id);
        if (!usuario) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
        return usuario;
    }
    /**
     * Atualiza a senha de um usuário
     * @param id ID do usuário
     * @param senhaHash Hash da nova senha
     * @returns Usuário atualizado
     */
    async updateSenha(id, senhaHash) {
        const dadosAtualizacao = {
            senhaHash,
            primeiro_acesso: false,
        };
        await this.repository.update(id, dadosAtualizacao);
        const usuario = await this.findById(id);
        if (!usuario) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
        return usuario;
    }
    /**
     * Remove um usuário (soft delete)
     * @param id ID do usuário
     * @returns Resultado da operação
     */
    async remove(id) {
        const result = await this.repository.softDelete(id);
        if (result.affected === 0) {
            (0, usuario_errors_1.throwUserNotFound)(id);
        }
    }
    /**
     * Conta o total de usuários
     * @param where Condições de filtro
     * @returns Número total de usuários
     */
    async count(where) {
        return this.repository.count({ where });
    }
};
exports.UsuarioRepository = UsuarioRepository;
exports.UsuarioRepository = UsuarioRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], UsuarioRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,