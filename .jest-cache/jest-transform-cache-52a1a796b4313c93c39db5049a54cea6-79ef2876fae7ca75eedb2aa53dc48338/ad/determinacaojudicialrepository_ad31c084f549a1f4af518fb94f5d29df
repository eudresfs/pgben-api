035dc08c8f2b1a090e5e2d2d85138511
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeterminacaoJudicialRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const determinacao_judicial_entity_1 = require("../../../entities/determinacao-judicial.entity");
/**
 * Repositório para operações relacionadas às determinações judiciais
 */
let DeterminacaoJudicialRepository = class DeterminacaoJudicialRepository {
    repository;
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Cria uma nova determinação judicial
     * @param data Dados da determinação
     * @param usuarioId ID do usuário que está criando
     * @returns Determinação criada
     */
    async create(data, usuarioId) {
        const determinacao = this.repository.create({
            ...data,
            created_by: usuarioId,
            updated_by: usuarioId,
        });
        return this.repository.save(determinacao);
    }
    /**
     * Busca todas as determinações judiciais
     * @param includeInactive Se deve incluir determinações inativas
     * @returns Lista de determinações
     */
    async findAll(includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('determinacao')
            .leftJoinAndSelect('determinacao.processo_judicial', 'processo');
        if (!includeInactive) {
            query.where('determinacao.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('determinacao.created_at', 'DESC').getMany();
    }
    /**
     * Busca uma determinação pelo ID
     * @param id ID da determinação
     * @returns Determinação encontrada ou null
     */
    async findById(id) {
        return this.repository.findOne({
            where: { id },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Busca determinações por processo judicial
     * @param processoId ID do processo judicial
     * @param includeInactive Se deve incluir determinações inativas
     * @returns Lista de determinações
     */
    async findByProcesso(processoId, includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('determinacao')
            .leftJoinAndSelect('determinacao.processo_judicial', 'processo')
            .where('determinacao.processo_judicial_id = :processoId', { processoId });
        if (!includeInactive) {
            query.andWhere('determinacao.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('determinacao.created_at', 'DESC').getMany();
    }
    /**
     * Busca determinações por cidadão
     * @param cidadaoId ID do cidadão
     * @param includeInactive Se deve incluir determinações inativas
     * @returns Lista de determinações
     */
    async findByCidadao(cidadaoId, includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('determinacao')
            .leftJoinAndSelect('determinacao.processo_judicial', 'processo')
            .where('determinacao.cidadao_id = :cidadaoId', { cidadaoId });
        if (!includeInactive) {
            query.andWhere('determinacao.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('determinacao.created_at', 'DESC').getMany();
    }
    /**
     * Busca determinações por solicitação
     * @param solicitacaoId ID da solicitação
     * @param includeInactive Se deve incluir determinações inativas
     * @returns Lista de determinações
     */
    async findBySolicitacao(solicitacaoId, includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('determinacao')
            .leftJoinAndSelect('determinacao.processo_judicial', 'processo')
            .where('determinacao.solicitacao_id = :solicitacaoId', { solicitacaoId });
        if (!includeInactive) {
            query.andWhere('determinacao.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('determinacao.created_at', 'DESC').getMany();
    }
    /**
     * Busca determinações pendentes de cumprimento
     * @param includeInactive Se deve incluir determinações inativas
     * @returns Lista de determinações
     */
    async findPendentes(includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('determinacao')
            .leftJoinAndSelect('determinacao.processo_judicial', 'processo')
            .where('determinacao.cumprida = :cumprida', { cumprida: false });
        if (!includeInactive) {
            query.andWhere('determinacao.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('determinacao.data_prazo', 'ASC').getMany();
    }
    /**
     * Atualiza uma determinação existente
     * @param id ID da determinação
     * @param data Dados para atualização
     * @param usuarioId ID do usuário que está atualizando
     * @returns Determinação atualizada
     */
    async update(id, data, usuarioId) {
        await this.repository.update(id, {
            ...data,
            updated_by: usuarioId,
        });
        const determinacao = await this.findById(id);
        if (!determinacao) {
            throw new common_1.NotFoundException(`Determinação judicial com ID ${id} não encontrada`);
        }
        return determinacao;
    }
    /**
     * Marca uma determinação como cumprida
     * @param id ID da determinação
     * @param observacao Observação sobre o cumprimento
     * @param usuarioId ID do usuário que está marcando como cumprida
     * @returns Determinação atualizada
     */
    async marcarComoCumprida(id, observacao, usuarioId) {
        await this.repository.update(id, {
            cumprida: true,
            data_cumprimento: new Date(),
            observacao_cumprimento: observacao,
            updated_by: usuarioId,
        });
        const determinacao = await this.findById(id);
        if (!determinacao) {
            throw new common_1.NotFoundException(`Determinação judicial com ID ${id} não encontrada`);
        }
        return determinacao;
    }
    /**
     * Ativa ou desativa uma determinação
     * @param id ID da determinação
     * @param ativo Status de ativação
     * @param usuarioId ID do usuário que está alterando o status
     * @returns Determinação atualizada
     */
    async toggleAtivo(id, ativo, usuarioId) {
        await this.repository.update(id, {
            ativo,
            updated_by: usuarioId,
        });
        const determinacao = await this.findById(id);
        if (!determinacao) {
            throw new common_1.NotFoundException(`Determinação judicial com ID ${id} não encontrada`);
        }
        return determinacao;
    }
    /**
     * Remove uma determinação
     * @param id ID da determinação
     */
    async remove(id) {
        await this.repository.delete(id);
    }
};
exports.DeterminacaoJudicialRepository = DeterminacaoJudicialRepository;
exports.DeterminacaoJudicialRepository = DeterminacaoJudicialRepository = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(determinacao_judicial_entity_1.DeterminacaoJudicial)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], DeterminacaoJudicialRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,