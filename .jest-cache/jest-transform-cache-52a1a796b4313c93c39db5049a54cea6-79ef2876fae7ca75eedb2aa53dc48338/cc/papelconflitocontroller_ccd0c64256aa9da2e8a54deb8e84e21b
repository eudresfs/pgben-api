fc796ac7ce05b632a553fa25c8c1b30f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PapelConflitoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const verificacao_papel_service_1 = require("../services/verificacao-papel.service");
const verificacao_papel_conflito_dto_1 = require("../dto/verificacao-papel-conflito.dto");
const verificacao_papel_conflito_response_dto_1 = require("../dto/verificacao-papel-conflito-response.dto");
/**
 * Controller de Verificação de Papéis Conflitantes
 *
 * Responsável por expor os endpoints de verificação de papéis conflitantes
 * para cidadãos, garantindo a integridade das regras de negócio.
 */
let PapelConflitoController = class PapelConflitoController {
    verificacaoPapelService;
    constructor(verificacaoPapelService) {
        this.verificacaoPapelService = verificacaoPapelService;
    }
    /**
     * Verifica se existem conflitos entre papéis para um cidadão
     * @param verificacaoDto Dados para verificação
     * @returns Resultado da verificação
     */
    async verificarConflitos(verificacaoDto) {
        return this.verificacaoPapelService.verificarPapeisConflitantes(verificacaoDto.cidadao_id, verificacaoDto.papeis.map((p) => p.papel_id));
    }
    /**
     * Obtém as regras de conflito para papéis
     * @returns Lista de regras de conflito
     */
    async listarRegrasConflito() {
        return this.verificacaoPapelService.listarRegrasConflito();
    }
    /**
     * Verifica papéis conflitantes para um cidadão específico
     * @param cidadaoId ID do cidadão
     * @returns Resultado da verificação
     */
    async verificarConflitosCidadao(cidadaoId) {
        return this.verificacaoPapelService.verificarPapeisConflitantesCidadao(cidadaoId);
    }
};
exports.PapelConflitoController = PapelConflitoController;
__decorate([
    (0, common_1.Post)('verificar'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.verificar-papel-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Verifica conflitos entre papéis',
        description: 'Verifica se existem conflitos entre os papéis que um cidadão possui ou está tentando obter.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Verificação realizada com sucesso',
        type: verificacao_papel_conflito_response_dto_1.VerificacaoPapelConflitoResponseDto,
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof verificacao_papel_conflito_dto_1.VerificacaoPapelConflitoDto !== "undefined" && verificacao_papel_conflito_dto_1.VerificacaoPapelConflitoDto) === "function" ? _b : Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], PapelConflitoController.prototype, "verificarConflitos", null);
__decorate([
    (0, common_1.Get)('regras'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.listar-regras-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Lista regras de conflito entre papéis',
        description: 'Retorna a lista de regras que definem conflitos entre papéis no sistema.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de regras retornada com sucesso',
        type: [verificacao_papel_conflito_response_dto_1.RegraConflitoDto],
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], PapelConflitoController.prototype, "listarRegrasConflito", null);
__decorate([
    (0, common_1.Get)('cidadao/:cidadaoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.verificar-papel-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Verifica papéis conflitantes para um cidadão',
        description: 'Verifica se o cidadão possui papéis conflitantes atualmente.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Verificação realizada com sucesso',
        type: verificacao_papel_conflito_response_dto_1.VerificacaoPapelConflitoResponseDto,
    }),
    __param(0, (0, common_1.Param)('cidadaoId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], PapelConflitoController.prototype, "verificarConflitosCidadao", null);
exports.PapelConflitoController = PapelConflitoController = __decorate([
    (0, swagger_1.ApiTags)('Cidadão'),
    (0, common_1.Controller)('cidadao/papel-conflito'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof verificacao_papel_service_1.VerificacaoPapelService !== "undefined" && verificacao_papel_service_1.VerificacaoPapelService) === "function" ? _a : Object])
], PapelConflitoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNpZGFkYW9cXGNvbnRyb2xsZXJzXFxwYXBlbC1jb25mbGl0by5jb250cm9sbGVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBK0U7QUFDL0UsNkNBS3lCO0FBQ3pCLHdFQUFtRTtBQUNuRSw0RUFBd0U7QUFDeEUsMEdBQTRGO0FBQzVGLHFGQUFnRjtBQUNoRiwwRkFBb0Y7QUFDcEYsNEdBR3dEO0FBRXhEOzs7OztHQUtHO0FBS0ksSUFBTSx1QkFBdUIsR0FBN0IsTUFBTSx1QkFBdUI7SUFFZjtJQURuQixZQUNtQix1QkFBZ0Q7UUFBaEQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUF5QjtJQUNoRSxDQUFDO0lBRUo7Ozs7T0FJRztJQWFHLEFBQU4sS0FBSyxDQUFDLGtCQUFrQixDQUNkLGNBQTJDO1FBRW5ELE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLDJCQUEyQixDQUM3RCxjQUFjLENBQUMsVUFBVSxFQUN6QixjQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUM3QyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQWFHLEFBQU4sS0FBSyxDQUFDLG9CQUFvQjtRQUN4QixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQzdELENBQUM7SUFFRDs7OztPQUlHO0lBWUcsQUFBTixLQUFLLENBQUMseUJBQXlCLENBQ1QsU0FBaUI7UUFFckMsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsa0NBQWtDLENBQ3BFLFNBQVMsQ0FDVixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7QUExRVksMERBQXVCO0FBc0I1QjtJQVpMLElBQUEsYUFBSSxFQUFDLFdBQVcsQ0FBQztJQUNqQixJQUFBLGtEQUFrQixFQUFDLEVBQUUsY0FBYyxFQUFFLGtDQUFrQyxFQUFFLENBQUM7SUFDMUUsSUFBQSxzQkFBWSxFQUFDO1FBQ1osT0FBTyxFQUFFLGlDQUFpQztRQUMxQyxXQUFXLEVBQ1QsNkZBQTZGO0tBQ2hHLENBQUM7SUFDRCxJQUFBLHFCQUFXLEVBQUM7UUFDWCxNQUFNLEVBQUUsR0FBRztRQUNYLFdBQVcsRUFBRSxtQ0FBbUM7UUFDaEQsSUFBSSxFQUFFLDZFQUFtQztLQUMxQyxDQUFDO0lBRUMsV0FBQSxJQUFBLGFBQUksR0FBRSxDQUFBOzt5REFBaUIsNERBQTJCLG9CQUEzQiw0REFBMkI7d0RBQ2xELE9BQU8sb0JBQVAsT0FBTztpRUFLVDtBQWtCSztJQVpMLElBQUEsWUFBRyxFQUFDLFFBQVEsQ0FBQztJQUNiLElBQUEsa0RBQWtCLEVBQUMsRUFBRSxjQUFjLEVBQUUsZ0NBQWdDLEVBQUUsQ0FBQztJQUN4RSxJQUFBLHNCQUFZLEVBQUM7UUFDWixPQUFPLEVBQUUsdUNBQXVDO1FBQ2hELFdBQVcsRUFDVCwwRUFBMEU7S0FDN0UsQ0FBQztJQUNELElBQUEscUJBQVcsRUFBQztRQUNYLE1BQU0sRUFBRSxHQUFHO1FBQ1gsV0FBVyxFQUFFLHVDQUF1QztRQUNwRCxJQUFJLEVBQUUsQ0FBQywwREFBZ0IsQ0FBQztLQUN6QixDQUFDOzs7d0RBQzRCLE9BQU8sb0JBQVAsT0FBTzttRUFFcEM7QUFrQks7SUFYTCxJQUFBLFlBQUcsRUFBQyxvQkFBb0IsQ0FBQztJQUN6QixJQUFBLGtEQUFrQixFQUFDLEVBQUUsY0FBYyxFQUFFLGtDQUFrQyxFQUFFLENBQUM7SUFDMUUsSUFBQSxzQkFBWSxFQUFDO1FBQ1osT0FBTyxFQUFFLDhDQUE4QztRQUN2RCxXQUFXLEVBQUUsOERBQThEO0tBQzVFLENBQUM7SUFDRCxJQUFBLHFCQUFXLEVBQUM7UUFDWCxNQUFNLEVBQUUsR0FBRztRQUNYLFdBQVcsRUFBRSxtQ0FBbUM7UUFDaEQsSUFBSSxFQUFFLDZFQUFtQztLQUMxQyxDQUFDO0lBRUMsV0FBQSxJQUFBLGNBQUssRUFBQyxXQUFXLENBQUMsQ0FBQTs7O3dEQUNsQixPQUFPLG9CQUFQLE9BQU87d0VBSVQ7a0NBekVVLHVCQUF1QjtJQUpuQyxJQUFBLGlCQUFPLEVBQUMsU0FBUyxDQUFDO0lBQ2xCLElBQUEsbUJBQVUsRUFBQyx3QkFBd0IsQ0FBQztJQUNwQyxJQUFBLGtCQUFTLEVBQUMsNkJBQVksRUFBRSxrQ0FBZSxDQUFDO0lBQ3hDLElBQUEsdUJBQWEsR0FBRTt5REFHOEIsbURBQXVCLG9CQUF2QixtREFBdUI7R0FGeEQsdUJBQXVCLENBMEVuQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcY2lkYWRhb1xcY29udHJvbGxlcnNcXHBhcGVsLWNvbmZsaXRvLmNvbnRyb2xsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udHJvbGxlciwgUG9zdCwgQm9keSwgVXNlR3VhcmRzLCBHZXQsIFBhcmFtIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHtcbiAgQXBpQmVhcmVyQXV0aCxcbiAgQXBpT3BlcmF0aW9uLFxuICBBcGlSZXNwb25zZSxcbiAgQXBpVGFncyxcbn0gZnJvbSAnQG5lc3Rqcy9zd2FnZ2VyJztcbmltcG9ydCB7IEp3dEF1dGhHdWFyZCB9IGZyb20gJy4uLy4uLy4uL2F1dGgvZ3VhcmRzL2p3dC1hdXRoLmd1YXJkJztcbmltcG9ydCB7IFBlcm1pc3Npb25HdWFyZCB9IGZyb20gJy4uLy4uLy4uL2F1dGgvZ3VhcmRzL3Blcm1pc3Npb24uZ3VhcmQnO1xuaW1wb3J0IHsgUmVxdWlyZXNQZXJtaXNzaW9uIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9kZWNvcmF0b3JzL3JlcXVpcmVzLXBlcm1pc3Npb24uZGVjb3JhdG9yJztcbmltcG9ydCB7IFZlcmlmaWNhY2FvUGFwZWxTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdmVyaWZpY2FjYW8tcGFwZWwuc2VydmljZSc7XG5pbXBvcnQgeyBWZXJpZmljYWNhb1BhcGVsQ29uZmxpdG9EdG8gfSBmcm9tICcuLi9kdG8vdmVyaWZpY2FjYW8tcGFwZWwtY29uZmxpdG8uZHRvJztcbmltcG9ydCB7XG4gIFZlcmlmaWNhY2FvUGFwZWxDb25mbGl0b1Jlc3BvbnNlRHRvLFxuICBSZWdyYUNvbmZsaXRvRHRvLFxufSBmcm9tICcuLi9kdG8vdmVyaWZpY2FjYW8tcGFwZWwtY29uZmxpdG8tcmVzcG9uc2UuZHRvJztcblxuLyoqXG4gKiBDb250cm9sbGVyIGRlIFZlcmlmaWNhw6fDo28gZGUgUGFww6lpcyBDb25mbGl0YW50ZXNcbiAqXG4gKiBSZXNwb25zw6F2ZWwgcG9yIGV4cG9yIG9zIGVuZHBvaW50cyBkZSB2ZXJpZmljYcOnw6NvIGRlIHBhcMOpaXMgY29uZmxpdGFudGVzXG4gKiBwYXJhIGNpZGFkw6NvcywgZ2FyYW50aW5kbyBhIGludGVncmlkYWRlIGRhcyByZWdyYXMgZGUgbmVnw7NjaW8uXG4gKi9cbkBBcGlUYWdzKCdDaWRhZMOjbycpXG5AQ29udHJvbGxlcignY2lkYWRhby9wYXBlbC1jb25mbGl0bycpXG5AVXNlR3VhcmRzKEp3dEF1dGhHdWFyZCwgUGVybWlzc2lvbkd1YXJkKVxuQEFwaUJlYXJlckF1dGgoKVxuZXhwb3J0IGNsYXNzIFBhcGVsQ29uZmxpdG9Db250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSB2ZXJpZmljYWNhb1BhcGVsU2VydmljZTogVmVyaWZpY2FjYW9QYXBlbFNlcnZpY2UsXG4gICkge31cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgZXhpc3RlbSBjb25mbGl0b3MgZW50cmUgcGFww6lpcyBwYXJhIHVtIGNpZGFkw6NvXG4gICAqIEBwYXJhbSB2ZXJpZmljYWNhb0R0byBEYWRvcyBwYXJhIHZlcmlmaWNhw6fDo29cbiAgICogQHJldHVybnMgUmVzdWx0YWRvIGRhIHZlcmlmaWNhw6fDo29cbiAgICovXG4gIEBQb3N0KCd2ZXJpZmljYXInKVxuICBAUmVxdWlyZXNQZXJtaXNzaW9uKHsgcGVybWlzc2lvbk5hbWU6ICdjaWRhZGFvLnZlcmlmaWNhci1wYXBlbC1jb25mbGl0bycgfSlcbiAgQEFwaU9wZXJhdGlvbih7XG4gICAgc3VtbWFyeTogJ1ZlcmlmaWNhIGNvbmZsaXRvcyBlbnRyZSBwYXDDqWlzJyxcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgICdWZXJpZmljYSBzZSBleGlzdGVtIGNvbmZsaXRvcyBlbnRyZSBvcyBwYXDDqWlzIHF1ZSB1bSBjaWRhZMOjbyBwb3NzdWkgb3UgZXN0w6EgdGVudGFuZG8gb2J0ZXIuJyxcbiAgfSlcbiAgQEFwaVJlc3BvbnNlKHtcbiAgICBzdGF0dXM6IDIwMCxcbiAgICBkZXNjcmlwdGlvbjogJ1ZlcmlmaWNhw6fDo28gcmVhbGl6YWRhIGNvbSBzdWNlc3NvJyxcbiAgICB0eXBlOiBWZXJpZmljYWNhb1BhcGVsQ29uZmxpdG9SZXNwb25zZUR0byxcbiAgfSlcbiAgYXN5bmMgdmVyaWZpY2FyQ29uZmxpdG9zKFxuICAgIEBCb2R5KCkgdmVyaWZpY2FjYW9EdG86IFZlcmlmaWNhY2FvUGFwZWxDb25mbGl0b0R0byxcbiAgKTogUHJvbWlzZTxWZXJpZmljYWNhb1BhcGVsQ29uZmxpdG9SZXNwb25zZUR0bz4ge1xuICAgIHJldHVybiB0aGlzLnZlcmlmaWNhY2FvUGFwZWxTZXJ2aWNlLnZlcmlmaWNhclBhcGVpc0NvbmZsaXRhbnRlcyhcbiAgICAgIHZlcmlmaWNhY2FvRHRvLmNpZGFkYW9faWQsXG4gICAgICB2ZXJpZmljYWNhb0R0by5wYXBlaXMubWFwKChwKSA9PiBwLnBhcGVsX2lkKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idMOpbSBhcyByZWdyYXMgZGUgY29uZmxpdG8gcGFyYSBwYXDDqWlzXG4gICAqIEByZXR1cm5zIExpc3RhIGRlIHJlZ3JhcyBkZSBjb25mbGl0b1xuICAgKi9cbiAgQEdldCgncmVncmFzJylcbiAgQFJlcXVpcmVzUGVybWlzc2lvbih7IHBlcm1pc3Npb25OYW1lOiAnY2lkYWRhby5saXN0YXItcmVncmFzLWNvbmZsaXRvJyB9KVxuICBAQXBpT3BlcmF0aW9uKHtcbiAgICBzdW1tYXJ5OiAnTGlzdGEgcmVncmFzIGRlIGNvbmZsaXRvIGVudHJlIHBhcMOpaXMnLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgJ1JldG9ybmEgYSBsaXN0YSBkZSByZWdyYXMgcXVlIGRlZmluZW0gY29uZmxpdG9zIGVudHJlIHBhcMOpaXMgbm8gc2lzdGVtYS4nLFxuICB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnTGlzdGEgZGUgcmVncmFzIHJldG9ybmFkYSBjb20gc3VjZXNzbycsXG4gICAgdHlwZTogW1JlZ3JhQ29uZmxpdG9EdG9dLFxuICB9KVxuICBhc3luYyBsaXN0YXJSZWdyYXNDb25mbGl0bygpOiBQcm9taXNlPFJlZ3JhQ29uZmxpdG9EdG9bXT4ge1xuICAgIHJldHVybiB0aGlzLnZlcmlmaWNhY2FvUGFwZWxTZXJ2aWNlLmxpc3RhclJlZ3Jhc0NvbmZsaXRvKCk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2EgcGFww6lpcyBjb25mbGl0YW50ZXMgcGFyYSB1bSBjaWRhZMOjbyBlc3BlY8OtZmljb1xuICAgKiBAcGFyYW0gY2lkYWRhb0lkIElEIGRvIGNpZGFkw6NvXG4gICAqIEByZXR1cm5zIFJlc3VsdGFkbyBkYSB2ZXJpZmljYcOnw6NvXG4gICAqL1xuICBAR2V0KCdjaWRhZGFvLzpjaWRhZGFvSWQnKVxuICBAUmVxdWlyZXNQZXJtaXNzaW9uKHsgcGVybWlzc2lvbk5hbWU6ICdjaWRhZGFvLnZlcmlmaWNhci1wYXBlbC1jb25mbGl0bycgfSlcbiAgQEFwaU9wZXJhdGlvbih7XG4gICAgc3VtbWFyeTogJ1ZlcmlmaWNhIHBhcMOpaXMgY29uZmxpdGFudGVzIHBhcmEgdW0gY2lkYWTDo28nLFxuICAgIGRlc2NyaXB0aW9uOiAnVmVyaWZpY2Egc2UgbyBjaWRhZMOjbyBwb3NzdWkgcGFww6lpcyBjb25mbGl0YW50ZXMgYXR1YWxtZW50ZS4nLFxuICB9KVxuICBAQXBpUmVzcG9uc2Uoe1xuICAgIHN0YXR1czogMjAwLFxuICAgIGRlc2NyaXB0aW9uOiAnVmVyaWZpY2HDp8OjbyByZWFsaXphZGEgY29tIHN1Y2Vzc28nLFxuICAgIHR5cGU6IFZlcmlmaWNhY2FvUGFwZWxDb25mbGl0b1Jlc3BvbnNlRHRvLFxuICB9KVxuICBhc3luYyB2ZXJpZmljYXJDb25mbGl0b3NDaWRhZGFvKFxuICAgIEBQYXJhbSgnY2lkYWRhb0lkJykgY2lkYWRhb0lkOiBzdHJpbmcsXG4gICk6IFByb21pc2U8VmVyaWZpY2FjYW9QYXBlbENvbmZsaXRvUmVzcG9uc2VEdG8+IHtcbiAgICByZXR1cm4gdGhpcy52ZXJpZmljYWNhb1BhcGVsU2VydmljZS52ZXJpZmljYXJQYXBlaXNDb25mbGl0YW50ZXNDaWRhZGFvKFxuICAgICAgY2lkYWRhb0lkLFxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==