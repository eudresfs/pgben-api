37c5b3ffa7ebce868d4a573adc4a6bab
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersaoSchemaBeneficio = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const tipo_beneficio_entity_1 = require("./tipo-beneficio.entity");
/**
 * Entidade para versionamento de schema de benefícios
 *
 * Permite controlar a evolução do schema de campos dinâmicos sem quebrar
 * dados existentes, mantendo um histórico de versões.
 */
let VersaoSchemaBeneficio = class VersaoSchemaBeneficio {
    id;
    tipo_beneficio_id;
    tipo_beneficio;
    versao;
    schema;
    descricao_mudancas;
    ativo;
    data_inicio_vigencia;
    data_fim_vigencia;
    created_at;
    updated_at;
    // Getters e Setters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se a versão foi criada recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se a versão está ativa
     */
    isAtiva() {
        return this.ativo;
    }
    /**
     * Verifica se tem descrição de mudanças
     */
    temDescricaoMudancas() {
        return (!!this.descricao_mudancas && this.descricao_mudancas.trim().length > 0);
    }
    /**
     * Obtém a descrição das mudanças ou uma mensagem padrão
     */
    getDescricaoMudancas() {
        return this.descricao_mudancas || 'Sem descrição de mudanças disponível';
    }
    /**
     * Verifica se o schema tem campos obrigatórios
     */
    temCamposObrigatorios() {
        if (!this.schema || !Array.isArray(this.schema.campos)) {
            return false;
        }
        return this.schema.campos.some((campo) => campo.obrigatorio === true);
    }
    /**
     * Obtém o número de campos no schema
     */
    getNumeroCampos() {
        if (!this.schema || !Array.isArray(this.schema.campos)) {
            return 0;
        }
        return this.schema.campos.length;
    }
    /**
     * Obtém os tipos de campos únicos no schema
     */
    getTiposCampos() {
        if (!this.schema || !Array.isArray(this.schema.campos)) {
            return [];
        }
        const tipos = this.schema.campos
            ?.map((campo) => campo.tipo)
            .filter((tipo) => typeof tipo === 'string') || [];
        return Array.from(new Set(tipos));
    }
    /**
     * Verifica se o schema é compatível com uma versão anterior
     */
    isCompativelCom(versaoAnterior) {
        if (!versaoAnterior || !versaoAnterior.schema) {
            return false;
        }
        // Verifica se todos os campos obrigatórios da versão anterior ainda existem
        const camposAnteriores = versaoAnterior.schema.campos || [];
        const camposAtuais = this.schema.campos || [];
        return camposAnteriores
            .filter((campo) => campo.obrigatorio)
            .every((campoObrigatorio) => camposAtuais.some((campoAtual) => campoAtual.nome === campoObrigatorio.nome &&
            campoAtual.tipo === campoObrigatorio.tipo));
    }
    /**
     * Obtém um resumo da versão
     */
    getSummary() {
        const numeroCampos = this.getNumeroCampos();
        const status = this.isAtiva() ? 'Ativa' : 'Inativa';
        return `Versão ${this.versao} - ${numeroCampos} campos - ${status}`;
    }
    /**
     * Gera uma chave única para a versão
     */
    getUniqueKey() {
        return `${this.tipo_beneficio_id}-v${this.versao}`;
    }
    /**
     * Verifica se a versão pode ser removida
     */
    podeSerRemovida() {
        return !this.isAtiva();
    }
    /**
     * Obtém a data de criação formatada
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        });
    }
    /**
     * Obtém a data de atualização formatada
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        });
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            tipo_beneficio_id: this.tipo_beneficio_id,
            versao: this.versao,
            ativo: this.ativo,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para a versão
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.temDescricaoMudancas()) {
            sugestoes.push('Adicionar descrição das mudanças para melhor rastreabilidade');
        }
        if (this.getNumeroCampos() === 0) {
            sugestoes.push('Schema não possui campos definidos');
        }
        if (!this.temCamposObrigatorios()) {
            sugestoes.push('Considerar adicionar campos obrigatórios para validação');
        }
        const tiposCampos = this.getTiposCampos();
        if (tiposCampos.length === 1 && tiposCampos[0] === 'string') {
            sugestoes.push('Considerar diversificar tipos de campos para melhor validação');
        }
        return sugestoes;
    }
    /**
     * Verifica se a versão precisa de atualização
     */
    precisaAtualizacao() {
        const idadeEmDias = this.getIdadeRegistroEmDias();
        return idadeEmDias > 365 && this.isAtiva(); // Versões ativas com mais de 1 ano
    }
    /**
     * Simula a migração de dados de uma versão anterior
     */
    simularMigracao(versaoOrigem, dadosExemplo) {
        const erros = [];
        const avisos = [];
        if (!this.isCompativelCom(versaoOrigem)) {
            erros.push('Versões não são compatíveis para migração automática');
            return { sucesso: false, erros };
        }
        try {
            const dadosMigrados = { ...dadosExemplo };
            const camposNovos = this.schema.campos || [];
            const camposAntigos = versaoOrigem.schema.campos || [];
            // Verifica campos removidos
            camposAntigos.forEach((campoAntigo) => {
                const campoExiste = camposNovos.some((campo) => campo.nome === campoAntigo.nome);
                if (!campoExiste) {
                    avisos.push(`Campo '${campoAntigo.nome}' foi removido na nova versão`);
                    delete dadosMigrados[campoAntigo.nome];
                }
            });
            // Verifica campos novos obrigatórios
            camposNovos.forEach((campoNovo) => {
                const campoExistia = camposAntigos.some((campo) => campo.nome === campoNovo.nome);
                if (!campoExistia && campoNovo.obrigatorio) {
                    avisos.push(`Campo obrigatório '${campoNovo.nome}' foi adicionado - valor padrão necessário`);
                }
            });
            return {
                sucesso: true,
                dadosMigrados,
                avisos: avisos.length > 0 ? avisos : undefined,
            };
        }
        catch (error) {
            erros.push(`Erro durante simulação de migração: ${error.message}`);
            return { sucesso: false, erros };
        }
    }
};
exports.VersaoSchemaBeneficio = VersaoSchemaBeneficio;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], VersaoSchemaBeneficio.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de benefício é obrigatório' }),
    __metadata("design:type", String)
], VersaoSchemaBeneficio.prototype, "tipo_beneficio_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => tipo_beneficio_entity_1.TipoBeneficio),
    (0, typeorm_1.JoinColumn)({ name: 'tipo_beneficio_id' }),
    __metadata("design:type", typeof (_a = typeof tipo_beneficio_entity_1.TipoBeneficio !== "undefined" && tipo_beneficio_entity_1.TipoBeneficio) === "function" ? _a : Object)
], VersaoSchemaBeneficio.prototype, "tipo_beneficio", void 0);
__decorate([
    (0, typeorm_1.Column)('varchar'),
    (0, class_validator_1.IsNotEmpty)({ message: 'Versão é obrigatória' }),
    __metadata("design:type", String)
], VersaoSchemaBeneficio.prototype, "versao", void 0);
__decorate([
    (0, typeorm_1.Column)('jsonb'),
    (0, class_validator_1.IsNotEmpty)({ message: 'Schema é obrigatório' }),
    __metadata("design:type", Object)
], VersaoSchemaBeneficio.prototype, "schema", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], VersaoSchemaBeneficio.prototype, "descricao_mudancas", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    (0, class_validator_1.IsBoolean)({ message: 'Ativo deve ser um booleano' }),
    __metadata("design:type", Boolean)
], VersaoSchemaBeneficio.prototype, "ativo", void 0);
__decorate([
    (0, typeorm_1.Column)('timestamp'),
    (0, class_validator_1.IsNotEmpty)({ message: 'Data de início de vigência é obrigatória' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], VersaoSchemaBeneficio.prototype, "data_inicio_vigencia", void 0);
__decorate([
    (0, typeorm_1.Column)('timestamp', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], VersaoSchemaBeneficio.prototype, "data_fim_vigencia", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], VersaoSchemaBeneficio.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], VersaoSchemaBeneficio.prototype, "updated_at", void 0);
exports.VersaoSchemaBeneficio = VersaoSchemaBeneficio = __decorate([
    (0, typeorm_1.Entity)('versao_schema_beneficio'),
    (0, typeorm_1.Index)(['tipo_beneficio_id', 'versao'], { unique: true })
], VersaoSchemaBeneficio);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,