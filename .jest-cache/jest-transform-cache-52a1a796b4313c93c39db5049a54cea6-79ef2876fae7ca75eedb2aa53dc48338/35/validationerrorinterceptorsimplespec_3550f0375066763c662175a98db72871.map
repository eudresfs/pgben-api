{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\validation-error.interceptor.simple.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\validation-error.interceptor.simple.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BadRequestException, ExecutionContext, CallHandler } from '@nestjs/common';\nimport { of, throwError } from 'rxjs';\nimport { ValidationErrorInterceptor } from './validation-error.interceptor';\n\ndescribe('ValidationErrorInterceptor - Simple Tests', () => {\n  let interceptor: ValidationErrorInterceptor;\n  let mockExecutionContext: ExecutionContext;\n  let mockCallHandler: CallHandler;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [ValidationErrorInterceptor],\n    }).compile();\n\n    interceptor = module.get<ValidationErrorInterceptor>(ValidationErrorInterceptor);\n    \n    mockExecutionContext = {} as ExecutionContext;\n    mockCallHandler = {\n      handle: jest.fn(),\n    };\n  });\n\n  it('deve ser definido', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  it('deve passar dados válidos sem modificação', async () => {\n    const validData = { id: 1, nome: 'Teste' };\n    mockCallHandler.handle = jest.fn(() => of(validData));\n\n    const result = await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise();\n    expect(result).toBe(validData);\n  });\n\n  it('deve passar erros não relacionados à validação', async () => {\n    const genericError = new Error('Erro genérico');\n    mockCallHandler.handle = jest.fn(() => throwError(() => genericError));\n\n    try {\n      await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise();\n    } catch (error) {\n      expect(error).toBe(genericError);\n    }\n  });\n\n  it('deve detectar e processar erros de validação', async () => {\n    const validationError = new BadRequestException({\n      error: 'Bad Request',\n      message: ['nome must be a string'],\n      statusCode: 400,\n    });\n\n    mockCallHandler.handle = jest.fn(() => throwError(() => validationError));\n\n    try {\n      await interceptor.intercept(mockExecutionContext, mockCallHandler).toPromise();\n    } catch (error) {\n      expect(error).toBeInstanceOf(BadRequestException);\n      const response = error.getResponse();\n      expect(response).toHaveProperty('error', 'Erro de Validação');\n      expect(response).toHaveProperty('details');\n    }\n  });\n});"],"version":3}