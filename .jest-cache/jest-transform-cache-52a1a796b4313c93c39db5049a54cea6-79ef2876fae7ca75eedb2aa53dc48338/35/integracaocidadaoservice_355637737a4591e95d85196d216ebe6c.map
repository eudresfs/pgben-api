{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\integracao-cidadao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\integracao-cidadao.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\n\n/**\n * Serviço de integração com o módulo de Cidadão\n *\n * Implementa a comunicação entre o módulo de Pagamento e o módulo de Cidadão,\n * permitindo obter dados pessoais e informações bancárias dos beneficiários.\n *\n * @author Equipe PGBen\n */\n@Injectable()\nexport class IntegracaoCidadaoService {\n  // Em uma implementação real, este serviço injetaria o CidadaoService do módulo de cidadão\n  // constructor(private readonly cidadaoService: CidadaoService) {}\n\n  /**\n   * Obtém dados pessoais de um cidadão pelo ID\n   *\n   * @param cidadaoId ID do cidadão\n   * @returns Dados pessoais do cidadão\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  async obterDadosPessoais(cidadaoId: string): Promise<any> {\n    // Em uma implementação real, chamaria o serviço de cidadão\n    // const cidadao = await this.cidadaoService.findOne(cidadaoId);\n\n    // if (!cidadao) {\n    //   throw new NotFoundException('Cidadão não encontrado');\n    // }\n\n    // return {\n    //   id: cidadao.id,\n    //   nome: cidadao.nome,\n    //   cpf: cidadao.cpf,\n    //   dataNascimento: cidadao.dataNascimento,\n    //   endereco: cidadao.endereco,\n    //   contato: {\n    //     telefone: cidadao.telefone,\n    //     email: cidadao.email\n    //   }\n    // };\n\n    // Implementação de mock para desenvolvimento\n    console.log(`[INTEGRAÇÃO] Obtendo dados pessoais do cidadão ${cidadaoId}`);\n\n    // Dados fictícios para desenvolvimento\n    return {\n      id: cidadaoId,\n      nome: 'Maria da Silva',\n      cpf: '123.456.789-00',\n      dataNascimento: '1985-05-10',\n      endereco: {\n        logradouro: 'Rua das Flores',\n        numero: '123',\n        complemento: 'Apto 101',\n        bairro: 'Centro',\n        cidade: 'Natal',\n        uf: 'RN',\n        cep: '59000-000',\n      },\n      contato: {\n        telefone: '(84) 98765-4321',\n        email: 'maria.silva@exemplo.com',\n      },\n    };\n  }\n\n  /**\n   * Obtém informações bancárias de um cidadão\n   *\n   * @param cidadaoId ID do cidadão\n   * @returns Lista de informações bancárias cadastradas\n   */\n  async obterInformacoesBancarias(cidadaoId: string): Promise<any[]> {\n    // Em uma implementação real, chamaria o serviço de cidadão\n    // const infoBancarias = await this.cidadaoService.getInformacoesBancarias(cidadaoId);\n\n    // if (!infoBancarias || infoBancarias.length === 0) {\n    //   return [];\n    // }\n\n    // return infoBancarias.map(info => ({\n    //   id: info.id,\n    //   banco: info.banco,\n    //   agencia: info.agencia,\n    //   conta: info.conta,\n    //   tipoConta: info.tipoConta,\n    //   pixTipo: info.pixTipo,\n    //   pixChave: this.mascaraPixChave(info.pixChave, info.pixTipo),\n    //   principal: info.principal,\n    //   createdAt: info.createdAt\n    // }));\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Obtendo informações bancárias do cidadão ${cidadaoId}`,\n    );\n\n    // Dados fictícios para desenvolvimento\n    return [\n      {\n        id: 'info-bancaria-1',\n        banco: '001',\n        nomeBanco: 'Banco do Brasil',\n        agencia: '1234',\n        conta: '12345-6',\n        tipoConta: 'Corrente',\n        principal: true,\n        createdAt: '2025-01-15T10:30:00Z',\n      },\n      {\n        id: 'info-bancaria-2',\n        pixTipo: 'email',\n        pixChave: 'm****@e****.com', // mascarado para segurança\n        principal: false,\n        createdAt: '2025-02-20T14:45:00Z',\n      },\n      {\n        id: 'info-bancaria-3',\n        banco: '104',\n        nomeBanco: 'Caixa Econômica Federal',\n        agencia: '5678',\n        conta: '98765-4',\n        tipoConta: 'Poupança',\n        principal: false,\n        createdAt: '2025-03-10T09:15:00Z',\n      },\n    ];\n  }\n\n  /**\n   * Obtém uma informação bancária específica pelo ID\n   *\n   * @param infoBancariaId ID da informação bancária\n   * @returns Dados da informação bancária\n   * @throws NotFoundException se a informação bancária não for encontrada\n   */\n  async obterInfoBancariaPorId(infoBancariaId: string): Promise<any> {\n    // Em uma implementação real, chamaria o serviço de cidadão\n    // const infoBancaria = await this.cidadaoService.getInfoBancariaPorId(infoBancariaId);\n\n    // if (!infoBancaria) {\n    //   throw new NotFoundException('Informação bancária não encontrada');\n    // }\n\n    // return {\n    //   id: infoBancaria.id,\n    //   banco: infoBancaria.banco,\n    //   agencia: infoBancaria.agencia,\n    //   conta: infoBancaria.conta,\n    //   tipoConta: infoBancaria.tipoConta,\n    //   pixTipo: infoBancaria.pixTipo,\n    //   pixChave: infoBancaria.pixChave, // não mascarado para uso interno\n    //   principal: infoBancaria.principal,\n    //   cidadaoId: infoBancaria.cidadaoId,\n    //   createdAt: infoBancaria.createdAt\n    // };\n\n    // Implementação de mock para desenvolvimento\n    console.log(`[INTEGRAÇÃO] Obtendo informação bancária ${infoBancariaId}`);\n\n    // Dados fictícios para desenvolvimento\n    const mockInfos = {\n      'info-bancaria-1': {\n        id: 'info-bancaria-1',\n        banco: '001',\n        nomeBanco: 'Banco do Brasil',\n        agencia: '1234',\n        conta: '12345-6',\n        tipoConta: 'Corrente',\n        principal: true,\n        cidadaoId: 'mock-cidadao-id',\n        createdAt: '2025-01-15T10:30:00Z',\n      },\n      'info-bancaria-2': {\n        id: 'info-bancaria-2',\n        pixTipo: 'email',\n        pixChave: 'maria.silva@exemplo.com', // não mascarado para uso interno\n        principal: false,\n        cidadaoId: 'mock-cidadao-id',\n        createdAt: '2025-02-20T14:45:00Z',\n      },\n      'info-bancaria-3': {\n        id: 'info-bancaria-3',\n        banco: '104',\n        nomeBanco: 'Caixa Econômica Federal',\n        agencia: '5678',\n        conta: '98765-4',\n        tipoConta: 'Poupança',\n        principal: false,\n        cidadaoId: 'mock-cidadao-id',\n        createdAt: '2025-03-10T09:15:00Z',\n      },\n    };\n\n    if (!mockInfos[infoBancariaId]) {\n      throw new NotFoundException('Informação bancária não encontrada');\n    }\n\n    return mockInfos[infoBancariaId];\n  }\n\n  /**\n   * Verifica se uma informação bancária pertence a um cidadão\n   *\n   * @param cidadaoId ID do cidadão\n   * @param infoBancariaId ID da informação bancária\n   * @returns true se a informação bancária pertence ao cidadão\n   */\n  async verificarPropriedadeInfoBancaria(\n    cidadaoId: string,\n    infoBancariaId: string,\n  ): Promise<boolean> {\n    // Em uma implementação real, chamaria o serviço de cidadão\n    // const infoBancaria = await this.cidadaoService.getInfoBancariaPorId(infoBancariaId);\n    // return infoBancaria && infoBancaria.cidadaoId === cidadaoId;\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Verificando se informação bancária ${infoBancariaId} pertence ao cidadão ${cidadaoId}`,\n    );\n\n    // Simulação de verificação\n    return true;\n  }\n\n  /**\n   * Verifica se um cidadão é o beneficiário de uma solicitação\n   *\n   * @param solicitacaoId ID da solicitação\n   * @param cidadaoId ID do cidadão\n   * @returns true se o cidadão é o beneficiário da solicitação\n   */\n  async verificarBeneficiarioSolicitacao(\n    solicitacaoId: string,\n    cidadaoId: string,\n  ): Promise<boolean> {\n    // Em uma implementação real, chamaria o serviço de solicitação\n    // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);\n    // return solicitacao && solicitacao.cidadaoId === cidadaoId;\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Verificando se cidadão ${cidadaoId} é beneficiário da solicitação ${solicitacaoId}`,\n    );\n\n    // Simulação de verificação\n    return true;\n  }\n\n  /**\n   * Verifica se existe relação familiar entre dois cidadãos\n   *\n   * @param cidadaoId ID do cidadão principal\n   * @param familiarId ID do familiar\n   * @returns true se existe relação familiar\n   */\n  async verificarRelacaoFamiliar(\n    cidadaoId: string,\n    familiarId: string,\n  ): Promise<boolean> {\n    // Em uma implementação real, chamaria o serviço de cidadão\n    // const relacoes = await this.cidadaoService.getRelacoesFamiliares(cidadaoId);\n    // return relacoes.some(relacao => relacao.familiarId === familiarId);\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Verificando relação familiar entre ${cidadaoId} e ${familiarId}`,\n    );\n\n    // Simulação de verificação\n    return true;\n  }\n\n  /**\n   * Obtém o endereço de um cidadão para entrega de benefício\n   *\n   * @param cidadaoId ID do cidadão\n   * @returns Endereço formatado\n   */\n  async obterEnderecoEntrega(cidadaoId: string): Promise<string> {\n    // Em uma implementação real, chamaria o serviço de cidadão\n    // const cidadao = await this.cidadaoService.findOne(cidadaoId);\n\n    // if (!cidadao || !cidadao.endereco) {\n    //   throw new NotFoundException('Endereço não encontrado para o cidadão');\n    // }\n\n    // const end = cidadao.endereco;\n    // return `${end.logradouro}, ${end.numero}${end.complemento ? ', ' + end.complemento : ''}, ${end.bairro}, ${end.cidade} - ${end.uf}, CEP: ${end.cep}`;\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Obtendo endereço de entrega para o cidadão ${cidadaoId}`,\n    );\n\n    // Endereço fictício para desenvolvimento\n    return 'Rua das Flores, 123, Apto 101, Centro, Natal - RN, CEP: 59000-000';\n  }\n\n  /**\n   * Mascara uma chave PIX para exibição segura\n   *\n   * @param chave Valor da chave PIX\n   * @param tipo Tipo da chave (CPF, email, telefone, aleatoria)\n   * @returns Chave PIX mascarada\n   */\n  private mascaraPixChave(chave: string, tipo: string): string {\n    if (!chave) {\n      return '';\n    }\n\n    switch (tipo?.toLowerCase()) {\n      case 'cpf':\n        // Formato: ***.123.456-**\n        const cpfLimpo = chave.replace(/\\D/g, '');\n        if (cpfLimpo.length !== 11) {\n          return '***.***.***-**';\n        }\n\n        return `***.${cpfLimpo.substr(3, 3)}.${cpfLimpo.substr(6, 3)}-**`;\n\n      case 'email':\n        // Formato: a***@d***.com\n        const partes = chave.split('@');\n        if (partes.length !== 2) {\n          return chave.substring(0, 1) + '***@***';\n        }\n\n        const usuario = partes[0];\n        const dominio = partes[1];\n\n        const usuarioMascarado =\n          usuario.substring(0, 1) + '*'.repeat(Math.max(1, usuario.length - 1));\n\n        const dominioPartes = dominio.split('.');\n        const dominioNome = dominioPartes[0];\n        const dominioExtensao = dominioPartes.slice(1).join('.');\n\n        const dominioMascarado =\n          dominioNome.substring(0, 1) +\n          '*'.repeat(Math.max(1, dominioNome.length - 1));\n\n        return `${usuarioMascarado}@${dominioMascarado}.${dominioExtensao}`;\n\n      case 'telefone':\n        // Formato: (00) *****-6789\n        const telLimpo = chave.replace(/\\D/g, '');\n        if (telLimpo.length < 8) {\n          return '(**) *****-****';\n        }\n\n        return `(**) *****-${telLimpo.slice(-4)}`;\n\n      case 'aleatoria':\n        // Formato: ********-****-****-****-************\n        if (chave.length < 8) {\n          return '********';\n        }\n\n        return chave.substring(0, 8) + '****' + '*'.repeat(chave.length - 12);\n\n      default:\n        // Mascaramento genérico\n        if (chave.length <= 4) {\n          return '****';\n        }\n\n        return (\n          chave.substring(0, 2) + '*'.repeat(chave.length - 4) + chave.slice(-2)\n        );\n    }\n  }\n}\n"],"version":3}