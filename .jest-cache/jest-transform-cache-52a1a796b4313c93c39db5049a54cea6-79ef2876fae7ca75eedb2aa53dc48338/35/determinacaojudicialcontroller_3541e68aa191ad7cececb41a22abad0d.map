{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\controllers\\determinacao-judicial.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\controllers\\determinacao-judicial.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Delete,\n  UseGuards,\n  Req,\n  HttpCode,\n  HttpStatus,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { DeterminacaoJudicialConsolidadoService } from '../services/determinacao-judicial-consolidado.service';\nimport { DeterminacaoJudicial } from '../../../entities/determinacao-judicial.entity';\nimport {\n  CreateDeterminacaoJudicialDto,\n  UpdateDeterminacaoJudicialDto,\n} from '../dtos/determinacao-judicial.dto';\n\n/**\n * DTO para marcar determinação como cumprida\n */\nclass CumprimentoDeterminacaoDto {\n  observacao: string;\n}\n\n/**\n * Controller de Determinações Judiciais\n *\n * Responsável por expor os endpoints de gerenciamento das determinações judiciais\n * relacionadas a processos e solicitações de benefício.\n */\n@ApiTags('Solicitação')\n@Controller('judicial/determinacoes')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class DeterminacaoJudicialController {\n  constructor(\n    private readonly determinacaoJudicialService: DeterminacaoJudicialConsolidadoService,\n  ) {}\n\n  /**\n   * Cria uma nova determinação judicial\n   * @param createDeterminacaoDto Dados da determinação\n   * @param req Requisição\n   * @returns Determinação criada\n   */\n  @Post()\n  @RequiresPermission({ permissionName: 'judicial.criar-determinacao' })\n  @ApiOperation({\n    summary: 'Cria uma nova determinação judicial',\n    description:\n      'Cria uma determinação judicial relacionada a um processo judicial.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Determinação criada com sucesso',\n    type: DeterminacaoJudicial,\n  })\n  async create(\n    @Body() createDeterminacaoDto: CreateDeterminacaoJudicialDto,\n    @Req() req: any,\n  ): Promise<DeterminacaoJudicial> {\n    return this.determinacaoJudicialService.create(\n      createDeterminacaoDto,\n      req.user.id,\n    );\n  }\n\n  /**\n   * Busca todas as determinações judiciais\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  @Get()\n  @RequiresPermission({ permissionName: 'judicial.listar-determinacao' })\n  @ApiOperation({\n    summary: 'Busca todas as determinações judiciais',\n    description: 'Retorna a lista de todas as determinações judiciais.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de determinações retornada com sucesso',\n    type: [DeterminacaoJudicial],\n  })\n  async findAll(\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('processoJudicialId') processoJudicialId?: string,\n    @Query('solicitacaoId') solicitacaoId?: string,\n    @Query('cidadaoId') cidadaoId?: string,\n    @Query('tipo') tipo?: string,\n    @Query('cumprida') cumprida?: boolean,\n    @Query('termo') termo?: string,\n  ) {\n    return this.determinacaoJudicialService.findAll({\n      page,\n      limit,\n      processoJudicialId,\n      solicitacaoId,\n      cidadaoId,\n      tipo: tipo as any,\n      cumprida,\n      termo,\n    });\n  }\n\n  /**\n   * Busca uma determinação pelo ID\n   * @param id ID da determinação\n   * @returns Determinação\n   */\n  @Get(':id')\n  @RequiresPermission({ permissionName: 'judicial.visualizar-determinacao' })\n  @ApiOperation({\n    summary: 'Busca uma determinação pelo ID',\n    description: 'Retorna os detalhes de uma determinação judicial específica.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Determinação encontrada com sucesso',\n    type: DeterminacaoJudicial,\n  })\n  async findById(\n    @Param('id', ParseUUIDPipe) id: string,\n  ): Promise<DeterminacaoJudicial> {\n    return this.determinacaoJudicialService.findById(id);\n  }\n\n  /**\n   * Busca determinações por processo judicial\n   * @param processoId ID do processo judicial\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  @Get('processo/:processoId')\n  @RequiresPermission({ permissionName: 'judicial.listar-determinacao' })\n  @ApiOperation({\n    summary: 'Busca determinações por processo judicial',\n    description:\n      'Retorna a lista de determinações judiciais relacionadas a um processo específico.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de determinações retornada com sucesso',\n    type: [DeterminacaoJudicial],\n  })\n  async findByProcesso(\n    @Param('processoId') processoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoJudicialService.findByProcessoJudicial(processoId);\n  }\n\n  /**\n   * Busca determinações por cidadão\n   * @param cidadaoId ID do cidadão\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  @Get('cidadao/:cidadaoId')\n  @RequiresPermission({ permissionName: 'judicial.listar-determinacao' })\n  @ApiOperation({\n    summary: 'Busca determinações por cidadão',\n    description:\n      'Retorna a lista de determinações judiciais relacionadas a um cidadão específico.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de determinações retornada com sucesso',\n    type: [DeterminacaoJudicial],\n  })\n  async findByCidadao(\n    @Param('cidadaoId') cidadaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoJudicialService.findByCidadao(cidadaoId);\n  }\n\n  /**\n   * Busca determinações por solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param includeInactive Se deve incluir determinações inativas\n   * @returns Lista de determinações\n   */\n  @Get('solicitacao/:solicitacaoId')\n  @RequiresPermission({ permissionName: 'judicial.listar-determinacao' })\n  @ApiOperation({\n    summary: 'Busca determinações por solicitação',\n    description:\n      'Retorna a lista de determinações judiciais relacionadas a uma solicitação específica.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de determinações retornada com sucesso',\n    type: [DeterminacaoJudicial],\n  })\n  async findBySolicitacao(\n    @Param('solicitacaoId') solicitacaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoJudicialService.findBySolicitacao(solicitacaoId);\n  }\n\n  @Get('pendentes')\n  @ApiOperation({ summary: 'Buscar determinações pendentes de cumprimento' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de determinações pendentes',\n    type: [DeterminacaoJudicial],\n  })\n  async findPendentes(): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoJudicialService.findPendentes();\n  }\n\n  /**\n   * Atualiza uma determinação\n   * @param id ID da determinação\n   * @param updateDeterminacaoDto Dados para atualização\n   * @param req Requisição\n   * @returns Determinação atualizada\n   */\n  @Patch(':id')\n  @RequiresPermission({ permissionName: 'judicial.atualizar-determinacao' })\n  @ApiOperation({\n    summary: 'Atualiza uma determinação',\n    description: 'Atualiza os dados de uma determinação judicial existente.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Determinação atualizada com sucesso',\n    type: DeterminacaoJudicial,\n  })\n  async update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateDeterminacaoDto: UpdateDeterminacaoJudicialDto,\n    @Req() req: any,\n  ): Promise<DeterminacaoJudicial> {\n    return this.determinacaoJudicialService.update(\n      id,\n      updateDeterminacaoDto,\n      req.user.id,\n    );\n  }\n\n  /**\n   * Marca uma determinação como cumprida\n   * @param id ID da determinação\n   * @param cumprimentoDto Dados do cumprimento\n   * @param req Requisição\n   * @returns Determinação atualizada\n   */\n  @Patch(':id/cumprir')\n  @RequiresPermission({ permissionName: 'judicial.cumprir-determinacao' })\n  @ApiOperation({\n    summary: 'Marca uma determinação como cumprida',\n    description:\n      'Atualiza o status de uma determinação judicial para cumprida.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Determinação marcada como cumprida com sucesso',\n    type: DeterminacaoJudicial,\n  })\n  async marcarComoCumprida(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() body: CumprimentoDeterminacaoDto,\n    @Req() req: any,\n  ): Promise<DeterminacaoJudicial> {\n    return this.determinacaoJudicialService.marcarComoCumprida(\n      id,\n      body.observacao,\n      req.user.id,\n    );\n  }\n\n  @Patch(':id/ativar')\n  @ApiOperation({ summary: 'Ativar ou desativar uma determinação judicial' })\n  @ApiParam({ name: 'id', description: 'ID da determinação judicial' })\n  @ApiResponse({\n    status: 200,\n    description: 'Determinação judicial atualizada',\n    type: DeterminacaoJudicial,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Determinação judicial não encontrada',\n  })\n  async toggleAtivo(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Req() req: any,\n  ): Promise<DeterminacaoJudicial> {\n    return this.determinacaoJudicialService.toggleAtivo(id, req.user.id);\n  }\n\n  /**\n   * Remove uma determinação\n   * @param id ID da determinação\n   * @returns void\n   */\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @RequiresPermission({ permissionName: 'judicial.remover-determinacao' })\n  @ApiOperation({\n    summary: 'Remove uma determinação',\n    description: 'Remove permanentemente uma determinação judicial.',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Determinação removida com sucesso',\n  })\n  async remove(@Param('id', ParseUUIDPipe) id: string): Promise<void> {\n    return this.determinacaoJudicialService.remove(id);\n  }\n}\n"],"version":3}