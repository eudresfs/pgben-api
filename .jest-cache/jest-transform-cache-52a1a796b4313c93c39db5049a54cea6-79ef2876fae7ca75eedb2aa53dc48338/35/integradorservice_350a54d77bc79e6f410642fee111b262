ed78be67da3bd19b772acbc87081e3c9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegradorService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const integrador_entity_1 = require("../../../entities/integrador.entity");
const integrador_response_dto_1 = require("../dto/integrador-response.dto");
/**
 * Serviço responsável pelo gerenciamento de integradores.
 * Implementa operações CRUD e regras de negócio específicas para integradores.
 */
let IntegradorService = class IntegradorService {
    integradorRepository;
    constructor(integradorRepository) {
        this.integradorRepository = integradorRepository;
    }
    /**
     * Cria um novo integrador na plataforma.
     * @param createIntegradorDto Dados do integrador a ser criado
     * @returns Dados do integrador criado
     */
    async create(createIntegradorDto) {
        // Verifica se já existe um integrador com o mesmo nome
        const existingIntegrador = await this.integradorRepository.findOne({
            where: { nome: createIntegradorDto.nome }
        });
        if (existingIntegrador) {
            throw new common_1.ConflictException(`Já existe um integrador com o nome '${createIntegradorDto.nome}'`);
        }
        const integrador = this.integradorRepository.create(createIntegradorDto);
        const savedIntegrador = await this.integradorRepository.save(integrador);
        return new integrador_response_dto_1.IntegradorResponseDto(savedIntegrador);
    }
    /**
     * Retorna todos os integradores cadastrados.
     * @returns Lista de integradores
     */
    async findAll() {
        const integradores = await this.integradorRepository.find();
        return integradores.map(integrador => new integrador_response_dto_1.IntegradorResponseDto(integrador));
    }
    /**
     * Busca um integrador pelo seu ID.
     * @param id ID do integrador
     * @returns Dados do integrador encontrado
     * @throws NotFoundException se o integrador não for encontrado
     */
    async findById(id) {
        const integrador = await this.integradorRepository.findOne({ where: { id } });
        if (!integrador) {
            throw new common_1.NotFoundException(`Integrador com ID ${id} não encontrado`);
        }
        return integrador;
    }
    /**
     * Obtém um integrador pelo ID e retorna com o formato de resposta padronizado.
     * @param id ID do integrador
     * @returns Dados do integrador no formato de resposta
     */
    async findOne(id) {
        const integrador = await this.findById(id);
        return new integrador_response_dto_1.IntegradorResponseDto(integrador);
    }
    /**
     * Atualiza os dados de um integrador.
     * @param id ID do integrador a ser atualizado
     * @param updateIntegradorDto Dados a serem atualizados
     * @returns Dados do integrador atualizado
     */
    async update(id, updateIntegradorDto) {
        // Verifica se o integrador existe
        const integrador = await this.findById(id);
        // Se o nome estiver sendo alterado, verifica se já existe outro com o mesmo nome
        if (updateIntegradorDto.nome && updateIntegradorDto.nome !== integrador.nome) {
            const existingIntegrador = await this.integradorRepository.findOne({
                where: { nome: updateIntegradorDto.nome }
            });
            if (existingIntegrador) {
                throw new common_1.ConflictException(`Já existe um integrador com o nome '${updateIntegradorDto.nome}'`);
            }
        }
        // Atualiza os dados
        Object.assign(integrador, updateIntegradorDto);
        const updatedIntegrador = await this.integradorRepository.save(integrador);
        return new integrador_response_dto_1.IntegradorResponseDto(updatedIntegrador);
    }
    /**
     * Remove um integrador do sistema.
     * @param id ID do integrador a ser removido
     */
    async remove(id) {
        const integrador = await this.findById(id);
        await this.integradorRepository.remove(integrador);
    }
    /**
     * Ativa ou desativa um integrador.
     * @param id ID do integrador
     * @param ativo Novo status de ativação
     * @returns Dados do integrador atualizado
     */
    async toggleAtivo(id, ativo) {
        const integrador = await this.findById(id);
        integrador.ativo = ativo;
        const updatedIntegrador = await this.integradorRepository.save(integrador);
        return new integrador_response_dto_1.IntegradorResponseDto(updatedIntegrador);
    }
    /**
     * Registra um acesso do integrador à API.
     * @param id ID do integrador
     */
    async registrarAcesso(id) {
        await this.integradorRepository.update({ id }, { ultimoAcesso: new Date() });
    }
};
exports.IntegradorService = IntegradorService;
exports.IntegradorService = IntegradorService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(integrador_entity_1.Integrador)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], IntegradorService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,