{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\historico-conversao-papel.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\historico-conversao-papel.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  InternalServerErrorException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { HistoricoConversaoPapel } from '../../../entities/historico-conversao-papel.entity';\nimport { CreateHistoricoConversaoPapelDto } from '../dto/create-historico-conversao-papel.dto';\nimport { NotificacaoService } from '../../notificacao/services/notificacao.service';\nimport { TipoPapel, PaperType } from '../../../enums/tipo-papel.enum';\n\n/**\n * Serviço de Histórico de Conversão de Papel\n *\n * Responsável por registrar e consultar o histórico de conversões de papéis\n * dos cidadãos no sistema.\n */\n@Injectable()\nexport class HistoricoConversaoPapelService {\n  private readonly logger = new Logger(HistoricoConversaoPapelService.name);\n\n  constructor(\n    @InjectRepository(HistoricoConversaoPapel)\n    private readonly historicoRepository: Repository<HistoricoConversaoPapel>,\n    private readonly notificacaoService: NotificacaoService,\n  ) {}\n\n  /**\n   * Cria um novo registro de histórico de conversão de papel\n   * @param createHistoricoDto Dados do histórico a ser criado\n   * @param usuarioId ID do usuário que está realizando a conversão\n   * @returns Histórico criado\n   */\n  async create(\n    createHistoricoDto: CreateHistoricoConversaoPapelDto,\n    usuarioId: string,\n  ): Promise<HistoricoConversaoPapel> {\n    try {\n      // Criar o registro de histórico\n      const novoHistorico = this.historicoRepository.create({\n        ...createHistoricoDto,\n        usuario_id: usuarioId,\n        notificacao_enviada: false,\n      });\n\n      // Salvar o registro\n      const historicoSalvo = await this.historicoRepository.save(novoHistorico);\n\n      // Enviar notificação para o técnico responsável, se fornecido\n      if (createHistoricoDto.tecnico_notificado_id) {\n        try {\n          await this.notificacaoService.enviarNotificacao({\n            destinatario_id: createHistoricoDto.tecnico_notificado_id,\n            tipo: 'CONVERSAO_PAPEL',\n            titulo: 'Conversão de Papel de Cidadão',\n            conteudo: `Um cidadão foi convertido de ${createHistoricoDto.papel_anterior} para ${createHistoricoDto.papel_novo}. Justificativa: ${createHistoricoDto.justificativa}`,\n            dados: {\n              historico_id: historicoSalvo.id,\n              cidadao_id: createHistoricoDto.cidadao_id,\n              papel_anterior: createHistoricoDto.papel_anterior,\n              papel_novo: createHistoricoDto.papel_novo,\n            },\n          });\n\n          // Atualizar o registro para indicar que a notificação foi enviada\n          await this.historicoRepository.update(historicoSalvo.id, {\n            notificacao_enviada: true,\n          });\n        } catch (error) {\n          this.logger.error(\n            `Erro ao enviar notificação de conversão de papel: ${error.message}`,\n            error.stack,\n          );\n          // Não interromper o fluxo se a notificação falhar\n        }\n      }\n\n      return historicoSalvo;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao criar histórico de conversão de papel: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao criar histórico de conversão de papel',\n      );\n    }\n  }\n\n  /**\n   * Busca o histórico de conversões de papel de um cidadão\n   * @param cidadaoId ID do cidadão\n   * @returns Lista de registros de histórico\n   */\n  async findByCidadaoId(cidadaoId: string): Promise<HistoricoConversaoPapel[]> {\n    try {\n      return this.historicoRepository.find({\n        where: { cidadao_id: cidadaoId },\n        order: { created_at: 'DESC' },\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar histórico de conversão de papel: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar histórico de conversão de papel',\n      );\n    }\n  }\n\n  /**\n   * Busca um registro de histórico pelo ID\n   * @param id ID do registro\n   * @returns Registro de histórico\n   * @throws NotFoundException se o registro não for encontrado\n   */\n  async findById(id: string): Promise<HistoricoConversaoPapel> {\n    try {\n      const historico = await this.historicoRepository.findOne({\n        where: { id },\n      });\n\n      if (!historico) {\n        throw new NotFoundException('Histórico de conversão não encontrado');\n      }\n\n      return historico;\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      this.logger.error(\n        `Erro ao buscar histórico de conversão: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar histórico de conversão',\n      );\n    }\n  }\n\n  /**\n   * Cria um novo registro de histórico de conversão de papel (alias para o método create)\n   * @param createHistoricoDto Dados do histórico a ser criado\n   * @param usuarioId ID do usuário que está realizando a conversão\n   * @returns Histórico criado\n   */\n  async criarHistorico(\n    createHistoricoDto: CreateHistoricoConversaoPapelDto,\n    usuarioId: string,\n  ): Promise<HistoricoConversaoPapel> {\n    return this.create(createHistoricoDto, usuarioId);\n  }\n\n  /**\n   * Busca o histórico de conversões de papel por período\n   * @param dataInicio Data de início do período\n   * @param dataFim Data de fim do período\n   * @param options Opções adicionais de filtro\n   * @returns Lista de registros de histórico\n   */\n  async findByPeriodo(\n    dataInicio: Date,\n    dataFim: Date,\n    options?: {\n      cidadaoId?: string;\n      papelAnterior?: PaperType;\n      papelNovo?: PaperType;\n      page?: number;\n      limit?: number;\n    },\n  ): Promise<{ items: HistoricoConversaoPapel[]; total: number }> {\n    try {\n      const {\n        cidadaoId,\n        papelAnterior,\n        papelNovo,\n        page = 1,\n        limit = 10,\n      } = options || {};\n      const skip = (page - 1) * limit;\n\n      // Construir a query base\n      const queryBuilder = this.historicoRepository\n        .createQueryBuilder('historico')\n        .where('historico.created_at BETWEEN :dataInicio AND :dataFim', {\n          dataInicio,\n          dataFim,\n        })\n        .orderBy('historico.created_at', 'DESC');\n\n      // Adicionar filtros opcionais\n      if (cidadaoId) {\n        queryBuilder.andWhere('historico.cidadao_id = :cidadaoId', {\n          cidadaoId,\n        });\n      }\n\n      if (papelAnterior) {\n        queryBuilder.andWhere('historico.papel_anterior = :papelAnterior', {\n          papelAnterior,\n        });\n      }\n\n      if (papelNovo) {\n        queryBuilder.andWhere('historico.papel_novo = :papelNovo', {\n          papelNovo,\n        });\n      }\n\n      // Executar a query com paginação\n      const [items, total] = await queryBuilder\n        .skip(skip)\n        .take(limit)\n        .getManyAndCount();\n\n      return { items, total };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar histórico de conversão por período: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar histórico de conversão por período',\n      );\n    }\n  }\n}\n"],"version":3}