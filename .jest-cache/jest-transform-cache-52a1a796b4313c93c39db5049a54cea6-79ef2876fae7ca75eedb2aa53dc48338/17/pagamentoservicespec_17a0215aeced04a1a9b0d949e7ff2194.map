{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\services\\pagamento.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\services\\pagamento.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConflictException, NotFoundException } from '@nestjs/common';\n\nimport { PagamentoService } from '../../../services/pagamento.service';\nimport { Pagamento } from '../../../entities/pagamento.entity';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\nimport { StatusTransitionValidator } from '../../../validators/status-transition-validator';\nimport { PagamentoCreateDto } from '../../../dtos/pagamento-create.dto';\nimport { MetodoPagamentoEnum } from '../../../enums/metodo-pagamento.enum';\n\n/**\n * Testes unitários para PagamentoService\n *\n * Garante que cada método do serviço de pagamentos funciona corretamente\n * em isolamento, com dependências devidamente mockadas.\n */\ndescribe('PagamentoService', () => {\n  let service: PagamentoService;\n  let pagamentoRepository: Repository<Pagamento>;\n  let statusValidator: StatusTransitionValidator;\n\n  // Dados de exemplo para testes\n  const pagamentoMock: Pagamento = {\n    id: 'pagamento-id-1',\n    solicitacaoId: 'solicitacao-id-1',\n    valor: 500,\n    status: StatusPagamentoEnum.LIBERADO,\n    metodoPagamento: MetodoPagamentoEnum.PIX,\n    infoBancariaId: 'info-bancaria-id-1',\n    dataLiberacao: new Date(),\n    dataCriacao: new Date(),\n    dataAtualizacao: new Date(),\n    liberadoPor: 'usuario-id-1',\n    observacoes: 'Pagamento de benefício eventual',\n  };\n\n  const pagamentosListMock = [\n    pagamentoMock,\n    {\n      ...pagamentoMock,\n      id: 'pagamento-id-2',\n      solicitacaoId: 'solicitacao-id-2',\n      valor: 300,\n    },\n  ];\n\n  const pagamentoCreateDtoMock: PagamentoCreateDto = {\n    valor: 500,\n    metodoPagamento: 'pix',\n    infoBancariaId: 'info-bancaria-id-1',\n    dataLiberacao: new Date(),\n    observacoes: 'Pagamento de benefício eventual',\n  };\n\n  beforeEach(async () => {\n    // Configuração do módulo de teste com mocks\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PagamentoService,\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: {\n            create: jest.fn().mockReturnValue(pagamentoMock),\n            save: jest.fn().mockResolvedValue(pagamentoMock),\n            findOne: jest.fn().mockResolvedValue(pagamentoMock),\n            createQueryBuilder: jest.fn(() => ({\n              where: jest.fn().mockReturnThis(),\n              andWhere: jest.fn().mockReturnThis(),\n              innerJoin: jest.fn().mockReturnThis(),\n              orderBy: jest.fn().mockReturnThis(),\n              skip: jest.fn().mockReturnThis(),\n              take: jest.fn().mockReturnThis(),\n              getManyAndCount: jest\n                .fn()\n                .mockResolvedValue([\n                  pagamentosListMock,\n                  pagamentosListMock.length,\n                ]),\n            })),\n          },\n        },\n        {\n          provide: StatusTransitionValidator,\n          useValue: {\n            canTransition: jest.fn().mockReturnValue({\n              allowed: true,\n              message: 'Transição permitida',\n            }),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<PagamentoService>(PagamentoService);\n    pagamentoRepository = module.get<Repository<Pagamento>>(\n      getRepositoryToken(Pagamento),\n    );\n    statusValidator = module.get<StatusTransitionValidator>(\n      StatusTransitionValidator,\n    );\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('createPagamento', () => {\n    it('deve criar um novo pagamento com sucesso', async () => {\n      // Arrange\n      const solicitacaoId = 'solicitacao-id-1';\n      const usuarioId = 'usuario-id-1';\n\n      // Act\n      const resultado = await service.createPagamento(\n        solicitacaoId,\n        pagamentoCreateDtoMock,\n        usuarioId,\n      );\n\n      // Assert\n      expect(resultado).toEqual(pagamentoMock);\n      expect(pagamentoRepository.create).toHaveBeenCalled();\n      expect(pagamentoRepository.save).toHaveBeenCalled();\n    });\n\n    it('deve lançar erro quando método não presencial não inclui infoBancariaId', async () => {\n      // Arrange\n      const solicitacaoId = 'solicitacao-id-1';\n      const usuarioId = 'usuario-id-1';\n      const dtoInvalido = {\n        ...pagamentoCreateDtoMock,\n        metodoPagamento: 'pix',\n        infoBancariaId: undefined,\n      };\n\n      // Act & Assert\n      await expect(\n        service.createPagamento(solicitacaoId, dtoInvalido, usuarioId),\n      ).rejects.toThrow(ConflictException);\n    });\n\n    it('deve aceitar pagamento presencial sem infoBancariaId', async () => {\n      // Arrange\n      const solicitacaoId = 'solicitacao-id-1';\n      const usuarioId = 'usuario-id-1';\n      const dtoPresencial = {\n        ...pagamentoCreateDtoMock,\n        metodoPagamento: 'presencial',\n        infoBancariaId: undefined,\n      };\n\n      // Mock específico para este teste\n      jest.spyOn(pagamentoRepository, 'create').mockReturnValue({\n        ...pagamentoMock,\n        metodoPagamento: 'presencial',\n        infoBancariaId: undefined,\n      });\n\n      // Act\n      const resultado = await service.createPagamento(\n        solicitacaoId,\n        dtoPresencial,\n        usuarioId,\n      );\n\n      // Assert\n      expect(resultado.metodoPagamento).toBe('presencial');\n      expect(pagamentoRepository.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          metodoPagamento: 'presencial',\n        }),\n      );\n      expect(pagamentoRepository.save).toHaveBeenCalled();\n    });\n  });\n\n  describe('atualizarStatus', () => {\n    it('deve atualizar o status do pagamento com sucesso', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const novoStatus = StatusPagamentoEnum.CONFIRMADO;\n      const usuarioId = 'usuario-id-1';\n\n      // Mock do resultado da atualização\n      const pagamentoAtualizado = {\n        ...pagamentoMock,\n        status: novoStatus,\n        atualizadoPor: usuarioId,\n        dataAtualizacao: expect.any(Date),\n      };\n\n      jest\n        .spyOn(pagamentoRepository, 'save')\n        .mockResolvedValue(pagamentoAtualizado);\n      jest\n        .spyOn(pagamentoRepository, 'findOne')\n        .mockResolvedValue(pagamentoMock);\n\n      // Act\n      const resultado = await service.atualizarStatus(\n        pagamentoId,\n        novoStatus,\n        usuarioId,\n      );\n\n      // Assert\n      expect(resultado).toEqual(pagamentoAtualizado);\n      expect(statusValidator.canTransition).toHaveBeenCalledWith(\n        pagamentoMock.status,\n        novoStatus,\n      );\n      expect(pagamentoRepository.save).toHaveBeenCalled();\n    });\n\n    it('deve lançar erro quando pagamento não existe', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n      const novoStatus = StatusPagamentoEnum.CONFIRMADO;\n      const usuarioId = 'usuario-id-1';\n\n      jest.spyOn(pagamentoRepository, 'findOne').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        service.atualizarStatus(pagamentoId, novoStatus, usuarioId),\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve lançar erro quando transição de status não é permitida', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const novoStatus = StatusPagamentoEnum.AGENDADO; // Transição inválida de LIBERADO para AGENDADO\n      const usuarioId = 'usuario-id-1';\n\n      jest.spyOn(statusValidator, 'canTransition').mockReturnValue({\n        allowed: false,\n        message: 'Transição não permitida',\n      });\n\n      // Act & Assert\n      await expect(\n        service.atualizarStatus(pagamentoId, novoStatus, usuarioId),\n      ).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('cancelarPagamento', () => {\n    it('deve cancelar um pagamento com sucesso', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const usuarioId = 'usuario-id-1';\n      const motivoCancelamento = 'Cancelado a pedido do beneficiário';\n\n      const pagamentoCancelado = {\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.CANCELADO,\n        motivoCancelamento,\n        canceladoPor: usuarioId,\n        dataCancelamento: expect.any(Date),\n      };\n\n      jest\n        .spyOn(pagamentoRepository, 'save')\n        .mockResolvedValue(pagamentoCancelado);\n\n      // Act\n      const resultado = await service.cancelarPagamento(\n        pagamentoId,\n        usuarioId,\n        motivoCancelamento,\n      );\n\n      // Assert\n      expect(resultado).toEqual(pagamentoCancelado);\n      expect(statusValidator.canTransition).toHaveBeenCalledWith(\n        pagamentoMock.status,\n        StatusPagamentoEnum.CANCELADO,\n      );\n      expect(pagamentoRepository.save).toHaveBeenCalled();\n    });\n\n    it('deve lançar erro quando pagamento não existe', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n      const usuarioId = 'usuario-id-1';\n      const motivoCancelamento = 'Cancelado a pedido do beneficiário';\n\n      jest.spyOn(pagamentoRepository, 'findOne').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        service.cancelarPagamento(pagamentoId, usuarioId, motivoCancelamento),\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve lançar erro quando cancelamento não é permitido', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const usuarioId = 'usuario-id-1';\n      const motivoCancelamento = 'Cancelado a pedido do beneficiário';\n\n      // Mock para pagamento já confirmado (não pode ser cancelado)\n      jest.spyOn(pagamentoRepository, 'findOne').mockResolvedValue({\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.CONFIRMADO,\n      });\n\n      jest.spyOn(statusValidator, 'canTransition').mockReturnValue({\n        allowed: false,\n        message: 'Cancelamento não permitido para pagamentos confirmados',\n      });\n\n      // Act & Assert\n      await expect(\n        service.cancelarPagamento(pagamentoId, usuarioId, motivoCancelamento),\n      ).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar um pagamento pelo ID', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n\n      // Act\n      const resultado = await service.findOne(pagamentoId);\n\n      // Assert\n      expect(resultado).toEqual(pagamentoMock);\n      expect(pagamentoRepository.findOne).toHaveBeenCalledWith({\n        where: { id: pagamentoId },\n      });\n    });\n\n    it('deve retornar null quando pagamento não existe', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n\n      jest.spyOn(pagamentoRepository, 'findOne').mockResolvedValue(null);\n\n      // Act\n      const resultado = await service.findOne(pagamentoId);\n\n      // Assert\n      expect(resultado).toBeNull();\n    });\n  });\n\n  describe('findOneWithRelations', () => {\n    it('deve retornar um pagamento com suas relações', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const pagamentoComRelacoes = {\n        ...pagamentoMock,\n        comprovantes: [],\n        confirmacao: null,\n      };\n\n      jest\n        .spyOn(pagamentoRepository, 'findOne')\n        .mockResolvedValue(pagamentoComRelacoes);\n\n      // Act\n      const resultado = await service.findOneWithRelations(pagamentoId);\n\n      // Assert\n      expect(resultado).toEqual(pagamentoComRelacoes);\n      expect(pagamentoRepository.findOne).toHaveBeenCalledWith({\n        where: { id: pagamentoId },\n        relations: expect.arrayContaining(['comprovantes', 'confirmacao']),\n      });\n    });\n  });\n\n  describe('findAll', () => {\n    it('deve retornar lista de pagamentos com paginação', async () => {\n      // Arrange\n      const options = {\n        page: 1,\n        limit: 10,\n      };\n\n      const expected = {\n        items: pagamentosListMock,\n        total: pagamentosListMock.length,\n        page: options.page,\n        limit: options.limit,\n      };\n\n      // Act\n      const resultado = await service.findAll(options);\n\n      // Assert\n      expect(resultado).toEqual(expected);\n      expect(pagamentoRepository.createQueryBuilder).toHaveBeenCalled();\n    });\n\n    it('deve aplicar filtros na busca', async () => {\n      // Arrange\n      const options = {\n        status: StatusPagamentoEnum.LIBERADO,\n        unidadeId: 'unidade-id-1',\n        dataInicio: new Date('2025-01-01'),\n        dataFim: new Date('2025-12-31'),\n        metodoPagamento: 'pix',\n        page: 1,\n        limit: 10,\n      };\n\n      const mockQueryBuilder = {\n        where: jest.fn().mockReturnThis(),\n        andWhere: jest.fn().mockReturnThis(),\n        innerJoin: jest.fn().mockReturnThis(),\n        orderBy: jest.fn().mockReturnThis(),\n        skip: jest.fn().mockReturnThis(),\n        take: jest.fn().mockReturnThis(),\n        getManyAndCount: jest\n          .fn()\n          .mockResolvedValue([pagamentosListMock, pagamentosListMock.length]),\n      };\n\n      jest\n        .spyOn(pagamentoRepository, 'createQueryBuilder')\n        .mockReturnValue(mockQueryBuilder as any);\n\n      // Act\n      const resultado = await service.findAll(options);\n\n      // Assert\n      expect(mockQueryBuilder.where).toHaveBeenCalled();\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledTimes(4); // 4 filtros\n      expect(mockQueryBuilder.innerJoin).toHaveBeenCalled(); // Para unidadeId\n      expect(resultado.items).toEqual(pagamentosListMock);\n    });\n  });\n\n  describe('findPendentes', () => {\n    it('deve retornar lista de pagamentos pendentes', async () => {\n      // Arrange\n      const options = {\n        page: 1,\n        limit: 10,\n      };\n\n      const mockQueryBuilder = {\n        where: jest.fn().mockReturnThis(),\n        andWhere: jest.fn().mockReturnThis(),\n        innerJoin: jest.fn().mockReturnThis(),\n        orderBy: jest.fn().mockReturnThis(),\n        skip: jest.fn().mockReturnThis(),\n        take: jest.fn().mockReturnThis(),\n        getManyAndCount: jest\n          .fn()\n          .mockResolvedValue([pagamentosListMock, pagamentosListMock.length]),\n      };\n\n      jest\n        .spyOn(pagamentoRepository, 'createQueryBuilder')\n        .mockReturnValue(mockQueryBuilder as any);\n\n      // Act\n      const resultado = await service.findPendentes(options);\n\n      // Assert\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith(\n        'pagamento.status = :status',\n        { status: StatusPagamentoEnum.LIBERADO },\n      );\n      expect(resultado.items).toEqual(pagamentosListMock);\n    });\n\n    it('deve aplicar filtros adicionais em pagamentos pendentes', async () => {\n      // Arrange\n      const options = {\n        unidadeId: 'unidade-id-1',\n        tipoBeneficioId: 'tipo-beneficio-id-1',\n        page: 1,\n        limit: 10,\n      };\n\n      const mockQueryBuilder = {\n        where: jest.fn().mockReturnThis(),\n        andWhere: jest.fn().mockReturnThis(),\n        innerJoin: jest.fn().mockReturnThis(),\n        orderBy: jest.fn().mockReturnThis(),\n        skip: jest.fn().mockReturnThis(),\n        take: jest.fn().mockReturnThis(),\n        getManyAndCount: jest\n          .fn()\n          .mockResolvedValue([pagamentosListMock, pagamentosListMock.length]),\n      };\n\n      jest\n        .spyOn(pagamentoRepository, 'createQueryBuilder')\n        .mockReturnValue(mockQueryBuilder as any);\n\n      // Act\n      const resultado = await service.findPendentes(options);\n\n      // Assert\n      expect(mockQueryBuilder.innerJoin).toHaveBeenCalled();\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledTimes(2); // unidadeId e tipoBeneficioId\n      expect(resultado.items).toEqual(pagamentosListMock);\n    });\n  });\n});\n"],"version":3}