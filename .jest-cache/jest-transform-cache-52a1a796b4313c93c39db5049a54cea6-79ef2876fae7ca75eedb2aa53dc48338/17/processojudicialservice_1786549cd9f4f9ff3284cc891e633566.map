{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\services\\processo-judicial.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\services\\processo-judicial.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  Logger,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, FindOptionsWhere, FindManyOptions, Like } from 'typeorm';\nimport {\n  ProcessoJudicial,\n  StatusProcessoJudicial,\n} from '../../../entities/processo-judicial.entity';\nimport { PaginatedResult } from '../../../common/interfaces/paginated-result.interface';\n\n/**\n * Serviço para gerenciamento de processos judiciais\n *\n * Este serviço implementa operações CRUD e consultas específicas\n * para processos judiciais, incluindo busca por número, cidadão e status.\n */\n@Injectable()\nexport class ProcessoJudicialService {\n  private readonly logger = new Logger(ProcessoJudicialService.name);\n\n  constructor(\n    @InjectRepository(ProcessoJudicial)\n    private readonly processoJudicialRepository: Repository<ProcessoJudicial>,\n  ) {}\n\n  /**\n   * Cria um novo processo judicial\n   *\n   * @param data Dados do processo judicial a ser criado\n   * @param usuarioId ID do usuário que está criando o processo\n   * @returns O processo judicial criado\n   */\n  async create(\n    data: Partial<ProcessoJudicial>,\n    usuarioId: string,\n  ): Promise<ProcessoJudicial> {\n    this.logger.log(`Criando processo judicial: ${JSON.stringify(data)}`);\n\n    // Verificar se já existe um processo com o mesmo número\n    const existente = await this.processoJudicialRepository.findOne({\n      where: { numero_processo: data.numero_processo },\n    });\n\n    if (existente) {\n      throw new BadRequestException(\n        `Já existe um processo judicial com o número: ${data.numero_processo}`,\n      );\n    }\n\n    // Criar o novo processo\n    const novoProcesso = this.processoJudicialRepository.create({\n      ...data,\n      created_by: usuarioId,\n      updated_by: usuarioId,\n    });\n\n    return this.processoJudicialRepository.save(novoProcesso);\n  }\n\n  /**\n   * Busca um processo judicial pelo ID\n   *\n   * @param id ID do processo judicial\n   * @returns O processo judicial encontrado\n   * @throws NotFoundException se o processo não for encontrado\n   */\n  async findById(id: string): Promise<ProcessoJudicial> {\n    const processo = await this.processoJudicialRepository.findOne({\n      where: { id },\n      relations: ['determinacoes'],\n    });\n\n    if (!processo) {\n      throw new NotFoundException(\n        `Processo judicial com ID ${id} não encontrado`,\n      );\n    }\n\n    return processo;\n  }\n\n  /**\n   * Busca um processo judicial pelo número do processo\n   *\n   * @param numeroProcesso Número do processo judicial\n   * @returns O processo judicial encontrado\n   * @throws NotFoundException se o processo não for encontrado\n   */\n  async findByNumeroProcesso(\n    numeroProcesso: string,\n  ): Promise<ProcessoJudicial> {\n    const processo = await this.processoJudicialRepository.findOne({\n      where: { numero_processo: numeroProcesso },\n      relations: ['determinacoes'],\n    });\n\n    if (!processo) {\n      throw new NotFoundException(\n        `Processo judicial número ${numeroProcesso} não encontrado`,\n      );\n    }\n\n    return processo;\n  }\n\n  /**\n   * Lista processos judiciais com paginação e filtros\n   *\n   * @param options Opções de busca e paginação\n   * @returns Lista paginada de processos judiciais\n   */\n  async findAll(options: {\n    page?: number;\n    limit?: number;\n    cidadaoId?: string;\n    status?: StatusProcessoJudicial;\n    comarca?: string;\n    vara?: string;\n    termo?: string;\n  }): Promise<PaginatedResult<ProcessoJudicial>> {\n    const {\n      page = 1,\n      limit = 10,\n      cidadaoId,\n      status,\n      comarca,\n      vara,\n      termo,\n    } = options;\n\n    const where: FindOptionsWhere<ProcessoJudicial> = {};\n\n    // Aplicar filtros\n    if (cidadaoId) {\n      where.cidadao_id = cidadaoId;\n    }\n\n    if (status) {\n      where.status = status;\n    }\n\n    if (comarca) {\n      where.comarca = comarca;\n    }\n\n    if (vara) {\n      where.vara_judicial = vara;\n    }\n\n    const findOptions: FindManyOptions<ProcessoJudicial> = {\n      where,\n      skip: (page - 1) * limit,\n      take: limit,\n      order: {\n        created_at: 'DESC',\n      },\n    };\n\n    // Aplicar busca por texto, se fornecido\n    if (termo) {\n      findOptions.where = [\n        { ...where, numero_processo: Like(`%${termo}%`) },\n        { ...where, objeto: Like(`%${termo}%`) },\n        { ...where, observacao: Like(`%${termo}%`) },\n      ];\n    }\n\n    const [processos, total] =\n      await this.processoJudicialRepository.findAndCount(findOptions);\n\n    return {\n      data: processos,\n      meta: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Atualiza um processo judicial\n   *\n   * @param id ID do processo judicial\n   * @param data Dados atualizados do processo\n   * @param usuarioId ID do usuário que está atualizando o processo\n   * @returns O processo judicial atualizado\n   * @throws NotFoundException se o processo não for encontrado\n   */\n  async update(\n    id: string,\n    data: Partial<ProcessoJudicial>,\n    usuarioId: string,\n  ): Promise<ProcessoJudicial> {\n    const processo = await this.findById(id);\n\n    // Verificar se está tentando alterar o número do processo para um número já existente\n    if (\n      data.numero_processo &&\n      data.numero_processo !== processo.numero_processo\n    ) {\n      const existente = await this.processoJudicialRepository.findOne({\n        where: { numero_processo: data.numero_processo },\n      });\n\n      if (existente) {\n        throw new BadRequestException(\n          `Já existe um processo judicial com o número: ${data.numero_processo}`,\n        );\n      }\n    }\n\n    this.logger.log(\n      `Atualizando processo judicial ${id}: ${JSON.stringify(data)}`,\n    );\n\n    // Atualizar os dados do processo\n    this.processoJudicialRepository.merge(processo, {\n      ...data,\n      updated_by: usuarioId,\n    });\n\n    return this.processoJudicialRepository.save(processo);\n  }\n\n  /**\n   * Atualiza o status de um processo judicial\n   *\n   * @param id ID do processo judicial\n   * @param status Novo status do processo\n   * @param usuarioId ID do usuário que está realizando a atualização\n   * @returns O processo judicial atualizado\n   * @throws NotFoundException se o processo não for encontrado\n   */\n  async updateStatus(\n    id: string,\n    status: StatusProcessoJudicial,\n    usuarioId: string,\n  ): Promise<ProcessoJudicial> {\n    const processo = await this.findById(id);\n\n    this.logger.log(\n      `Atualizando status do processo judicial ${id} para ${status}`,\n    );\n\n    processo.status = status;\n    processo.updated_by = usuarioId;\n\n    // Se o status for CONCLUIDO, atualiza a data de conclusão\n    if (status === StatusProcessoJudicial.CONCLUIDO) {\n      processo.data_conclusao = new Date();\n    }\n\n    return this.processoJudicialRepository.save(processo);\n  }\n\n  /**\n   * Busca processos judiciais por cidadão\n   *\n   * @param cidadaoId ID do cidadão\n   * @returns Lista de processos judiciais do cidadão\n   */\n  async findByCidadao(cidadaoId: string): Promise<ProcessoJudicial[]> {\n    this.logger.log(`Buscando processos judiciais do cidadão ${cidadaoId}`);\n\n    return this.processoJudicialRepository.find({\n      where: { cidadao_id: cidadaoId, ativo: true },\n      order: { data_distribuicao: 'DESC' },\n      relations: ['determinacoes'],\n    });\n  }\n\n  /**\n   * Desativa (soft delete) um processo judicial\n   *\n   * @param id ID do processo judicial\n   * @param usuarioId ID do usuário que está desativando o processo\n   * @returns Verdadeiro se a operação foi bem-sucedida\n   * @throws NotFoundException se o processo não for encontrado\n   */\n  async desativar(id: string, usuarioId: string): Promise<boolean> {\n    const processo = await this.findById(id);\n\n    this.logger.log(`Desativando processo judicial ${id}`);\n\n    // Desativar o processo\n    processo.ativo = false;\n    processo.updated_by = usuarioId;\n\n    await this.processoJudicialRepository.save(processo);\n    return true;\n  }\n\n  /**\n   * Retorna estatísticas dos processos judiciais\n   *\n   * @returns Estatísticas agregadas dos processos\n   */\n  async getEstatisticas(): Promise<{\n    total: number;\n    porStatus: Record<StatusProcessoJudicial, number>;\n    porComarca: Record<string, number>;\n  }> {\n    // Total de processos\n    const total = await this.processoJudicialRepository.count({\n      where: { ativo: true },\n    });\n\n    // Contagem por status\n    const statusCounts = await this.processoJudicialRepository\n      .createQueryBuilder('processo')\n      .select('processo.status', 'status')\n      .addSelect('COUNT(processo.id)', 'count')\n      .where('processo.ativo = :ativo', { ativo: true })\n      .groupBy('processo.status')\n      .getRawMany();\n\n    const porStatus = Object.values(StatusProcessoJudicial).reduce(\n      (acc, status) => {\n        acc[status] = 0;\n        return acc;\n      },\n      {} as Record<StatusProcessoJudicial, number>,\n    );\n\n    statusCounts.forEach((item) => {\n      porStatus[item.status] = parseInt(item.count);\n    });\n\n    // Contagem por comarca\n    const comarcaCounts = await this.processoJudicialRepository\n      .createQueryBuilder('processo')\n      .select('processo.comarca', 'comarca')\n      .addSelect('COUNT(processo.id)', 'count')\n      .where('processo.ativo = :ativo', { ativo: true })\n      .groupBy('processo.comarca')\n      .getRawMany();\n\n    const porComarca = comarcaCounts.reduce(\n      (acc, item) => {\n        acc[item.comarca] = parseInt(item.count);\n        return acc;\n      },\n      {} as Record<string, number>,\n    );\n\n    return {\n      total,\n      porStatus,\n      porComarca,\n    };\n  }\n}\n"],"version":3}