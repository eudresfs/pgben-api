b7e205db2eb6be514f453539099506ae
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ProcessoJudicialService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessoJudicialService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const processo_judicial_entity_1 = require("../../../entities/processo-judicial.entity");
/**
 * Serviço para gerenciamento de processos judiciais
 *
 * Este serviço implementa operações CRUD e consultas específicas
 * para processos judiciais, incluindo busca por número, cidadão e status.
 */
let ProcessoJudicialService = ProcessoJudicialService_1 = class ProcessoJudicialService {
    processoJudicialRepository;
    logger = new common_1.Logger(ProcessoJudicialService_1.name);
    constructor(processoJudicialRepository) {
        this.processoJudicialRepository = processoJudicialRepository;
    }
    /**
     * Cria um novo processo judicial
     *
     * @param data Dados do processo judicial a ser criado
     * @param usuarioId ID do usuário que está criando o processo
     * @returns O processo judicial criado
     */
    async create(data, usuarioId) {
        this.logger.log(`Criando processo judicial: ${JSON.stringify(data)}`);
        // Verificar se já existe um processo com o mesmo número
        const existente = await this.processoJudicialRepository.findOne({
            where: { numero_processo: data.numero_processo },
        });
        if (existente) {
            throw new common_1.BadRequestException(`Já existe um processo judicial com o número: ${data.numero_processo}`);
        }
        // Criar o novo processo
        const novoProcesso = this.processoJudicialRepository.create({
            ...data,
            created_by: usuarioId,
            updated_by: usuarioId,
        });
        return this.processoJudicialRepository.save(novoProcesso);
    }
    /**
     * Busca um processo judicial pelo ID
     *
     * @param id ID do processo judicial
     * @returns O processo judicial encontrado
     * @throws NotFoundException se o processo não for encontrado
     */
    async findById(id) {
        const processo = await this.processoJudicialRepository.findOne({
            where: { id },
            relations: ['determinacoes'],
        });
        if (!processo) {
            throw new common_1.NotFoundException(`Processo judicial com ID ${id} não encontrado`);
        }
        return processo;
    }
    /**
     * Busca um processo judicial pelo número do processo
     *
     * @param numeroProcesso Número do processo judicial
     * @returns O processo judicial encontrado
     * @throws NotFoundException se o processo não for encontrado
     */
    async findByNumeroProcesso(numeroProcesso) {
        const processo = await this.processoJudicialRepository.findOne({
            where: { numero_processo: numeroProcesso },
            relations: ['determinacoes'],
        });
        if (!processo) {
            throw new common_1.NotFoundException(`Processo judicial número ${numeroProcesso} não encontrado`);
        }
        return processo;
    }
    /**
     * Lista processos judiciais com paginação e filtros
     *
     * @param options Opções de busca e paginação
     * @returns Lista paginada de processos judiciais
     */
    async findAll(options) {
        const { page = 1, limit = 10, cidadaoId, status, comarca, vara, termo, } = options;
        const where = {};
        // Aplicar filtros
        if (cidadaoId) {
            where.cidadao_id = cidadaoId;
        }
        if (status) {
            where.status = status;
        }
        if (comarca) {
            where.comarca = comarca;
        }
        if (vara) {
            where.vara_judicial = vara;
        }
        const findOptions = {
            where,
            skip: (page - 1) * limit,
            take: limit,
            order: {
                created_at: 'DESC',
            },
        };
        // Aplicar busca por texto, se fornecido
        if (termo) {
            findOptions.where = [
                { ...where, numero_processo: (0, typeorm_2.Like)(`%${termo}%`) },
                { ...where, objeto: (0, typeorm_2.Like)(`%${termo}%`) },
                { ...where, observacao: (0, typeorm_2.Like)(`%${termo}%`) },
            ];
        }
        const [processos, total] = await this.processoJudicialRepository.findAndCount(findOptions);
        return {
            data: processos,
            meta: {
                page,
                limit,
                total,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Atualiza um processo judicial
     *
     * @param id ID do processo judicial
     * @param data Dados atualizados do processo
     * @param usuarioId ID do usuário que está atualizando o processo
     * @returns O processo judicial atualizado
     * @throws NotFoundException se o processo não for encontrado
     */
    async update(id, data, usuarioId) {
        const processo = await this.findById(id);
        // Verificar se está tentando alterar o número do processo para um número já existente
        if (data.numero_processo &&
            data.numero_processo !== processo.numero_processo) {
            const existente = await this.processoJudicialRepository.findOne({
                where: { numero_processo: data.numero_processo },
            });
            if (existente) {
                throw new common_1.BadRequestException(`Já existe um processo judicial com o número: ${data.numero_processo}`);
            }
        }
        this.logger.log(`Atualizando processo judicial ${id}: ${JSON.stringify(data)}`);
        // Atualizar os dados do processo
        this.processoJudicialRepository.merge(processo, {
            ...data,
            updated_by: usuarioId,
        });
        return this.processoJudicialRepository.save(processo);
    }
    /**
     * Atualiza o status de um processo judicial
     *
     * @param id ID do processo judicial
     * @param status Novo status do processo
     * @param usuarioId ID do usuário que está realizando a atualização
     * @returns O processo judicial atualizado
     * @throws NotFoundException se o processo não for encontrado
     */
    async updateStatus(id, status, usuarioId) {
        const processo = await this.findById(id);
        this.logger.log(`Atualizando status do processo judicial ${id} para ${status}`);
        processo.status = status;
        processo.updated_by = usuarioId;
        // Se o status for CONCLUIDO, atualiza a data de conclusão
        if (status === processo_judicial_entity_1.StatusProcessoJudicial.CONCLUIDO) {
            processo.data_conclusao = new Date();
        }
        return this.processoJudicialRepository.save(processo);
    }
    /**
     * Busca processos judiciais por cidadão
     *
     * @param cidadaoId ID do cidadão
     * @returns Lista de processos judiciais do cidadão
     */
    async findByCidadao(cidadaoId) {
        this.logger.log(`Buscando processos judiciais do cidadão ${cidadaoId}`);
        return this.processoJudicialRepository.find({
            where: { cidadao_id: cidadaoId, ativo: true },
            order: { data_distribuicao: 'DESC' },
            relations: ['determinacoes'],
        });
    }
    /**
     * Desativa (soft delete) um processo judicial
     *
     * @param id ID do processo judicial
     * @param usuarioId ID do usuário que está desativando o processo
     * @returns Verdadeiro se a operação foi bem-sucedida
     * @throws NotFoundException se o processo não for encontrado
     */
    async desativar(id, usuarioId) {
        const processo = await this.findById(id);
        this.logger.log(`Desativando processo judicial ${id}`);
        // Desativar o processo
        processo.ativo = false;
        processo.updated_by = usuarioId;
        await this.processoJudicialRepository.save(processo);
        return true;
    }
    /**
     * Retorna estatísticas dos processos judiciais
     *
     * @returns Estatísticas agregadas dos processos
     */
    async getEstatisticas() {
        // Total de processos
        const total = await this.processoJudicialRepository.count({
            where: { ativo: true },
        });
        // Contagem por status
        const statusCounts = await this.processoJudicialRepository
            .createQueryBuilder('processo')
            .select('processo.status', 'status')
            .addSelect('COUNT(processo.id)', 'count')
            .where('processo.ativo = :ativo', { ativo: true })
            .groupBy('processo.status')
            .getRawMany();
        const porStatus = Object.values(processo_judicial_entity_1.StatusProcessoJudicial).reduce((acc, status) => {
            acc[status] = 0;
            return acc;
        }, {});
        statusCounts.forEach((item) => {
            porStatus[item.status] = parseInt(item.count);
        });
        // Contagem por comarca
        const comarcaCounts = await this.processoJudicialRepository
            .createQueryBuilder('processo')
            .select('processo.comarca', 'comarca')
            .addSelect('COUNT(processo.id)', 'count')
            .where('processo.ativo = :ativo', { ativo: true })
            .groupBy('processo.comarca')
            .getRawMany();
        const porComarca = comarcaCounts.reduce((acc, item) => {
            acc[item.comarca] = parseInt(item.count);
            return acc;
        }, {});
        return {
            total,
            porStatus,
            porComarca,
        };
    }
};
exports.ProcessoJudicialService = ProcessoJudicialService;
exports.ProcessoJudicialService = ProcessoJudicialService = ProcessoJudicialService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(processo_judicial_entity_1.ProcessoJudicial)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ProcessoJudicialService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,