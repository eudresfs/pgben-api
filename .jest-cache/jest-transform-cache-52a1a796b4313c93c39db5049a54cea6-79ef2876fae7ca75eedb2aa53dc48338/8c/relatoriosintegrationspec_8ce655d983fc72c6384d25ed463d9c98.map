{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\relatorios-integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\relatorios-integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { RelatoriosUnificadoModule } from '../relatorios-unificado.module';\nimport { RelatoriosService } from '../services/relatorios.service';\nimport { RelatoriosController } from '../controllers/relatorios.controller';\nimport { PdfStrategy } from '../strategies/pdf.strategy';\nimport { ExcelStrategy } from '../strategies/excel.strategy';\nimport { CsvStrategy } from '../strategies/csv.strategy';\nimport { TempFilesService } from '../services/temp-files.service';\nimport { Solicitacao } from '../../solicitacao/entities/solicitacao.entity';\nimport { Unidade } from '../../unidade/entities/unidade.entity';\nimport { TipoBeneficio } from '../../beneficio/entities/tipo-beneficio.entity';\nimport { RELATORIOS_CONFIG } from '../config';\nimport { Request, Response } from 'express';\n\n/**\n * Testes de integração para o módulo de relatórios unificado\n *\n * Este arquivo contém testes que validam a integração entre os componentes\n * do módulo de relatórios, garantindo que funcionem corretamente em conjunto\n */\ndescribe('Relatórios - Testes de Integração', () => {\n  let module: TestingModule;\n  let relatoriosService: RelatoriosService;\n  let relatoriosController: RelatoriosController;\n  let pdfStrategy: PdfStrategy;\n  let excelStrategy: ExcelStrategy;\n  let csvStrategy: CsvStrategy;\n  let tempFilesService: TempFilesService;\n\n  // Mock para repositórios\n  const mockSolicitacaoRepository = {\n    createQueryBuilder: jest.fn().mockReturnThis(),\n    leftJoinAndSelect: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n    andWhere: jest.fn().mockReturnThis(),\n    getMany: jest.fn().mockResolvedValue([]),\n    getCount: jest.fn().mockResolvedValue(0),\n    select: jest.fn().mockReturnThis(),\n    addSelect: jest.fn().mockReturnThis(),\n    leftJoin: jest.fn().mockReturnThis(),\n    groupBy: jest.fn().mockReturnThis(),\n    getRawMany: jest.fn().mockResolvedValue([]),\n  };\n\n  const mockUnidadeRepository = {\n    findOne: jest.fn().mockResolvedValue(null),\n    find: jest.fn().mockResolvedValue([]),\n  };\n\n  const mockTipoBeneficioRepository = {\n    findOne: jest.fn().mockResolvedValue(null),\n  };\n\n  // Mock para cache\n  const mockCacheManager = {\n    get: jest.fn().mockResolvedValue(null),\n    set: jest.fn().mockResolvedValue(undefined),\n  };\n\n  // Função para criar um mock de Request\n  const createMockRequest = (user: any) => {\n    return {\n      user,\n      get: jest.fn(),\n      header: jest.fn(),\n      accepts: jest.fn(),\n      acceptsCharsets: jest.fn(),\n      acceptsEncodings: jest.fn(),\n      acceptsLanguages: jest.fn(),\n      range: jest.fn(),\n    } as unknown as Request;\n  };\n\n  beforeAll(async () => {\n    module = await Test.createTestingModule({\n      imports: [RelatoriosUnificadoModule],\n    })\n      .overrideProvider(getRepositoryToken(Solicitacao))\n      .useValue(mockSolicitacaoRepository)\n      .overrideProvider(getRepositoryToken(Unidade))\n      .useValue(mockUnidadeRepository)\n      .overrideProvider(getRepositoryToken(TipoBeneficio))\n      .useValue(mockTipoBeneficioRepository)\n      .overrideProvider(CACHE_MANAGER)\n      .useValue(mockCacheManager)\n      .compile();\n\n    relatoriosService = module.get<RelatoriosService>(RelatoriosService);\n    relatoriosController =\n      module.get<RelatoriosController>(RelatoriosController);\n    pdfStrategy = module.get<PdfStrategy>(PdfStrategy);\n    excelStrategy = module.get<ExcelStrategy>(ExcelStrategy);\n    csvStrategy = module.get<CsvStrategy>(CsvStrategy);\n    tempFilesService = module.get<TempFilesService>(TempFilesService);\n  });\n\n  afterAll(async () => {\n    await module.close();\n  });\n\n  beforeEach(() => {\n    // Reset mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ter todos os componentes definidos', () => {\n    expect(relatoriosService).toBeDefined();\n    expect(relatoriosController).toBeDefined();\n    expect(pdfStrategy).toBeDefined();\n    expect(excelStrategy).toBeDefined();\n    expect(csvStrategy).toBeDefined();\n    expect(tempFilesService).toBeDefined();\n  });\n\n  describe('Fluxo completo de geração de relatórios', () => {\n    it('deve processar corretamente um relatório de benefícios', async () => {\n      // Mock para dados de benefícios\n      mockSolicitacaoRepository.getMany.mockResolvedValueOnce([\n        {\n          id: 1,\n          cidadao: { nome: 'Cidadão 1' },\n          tipoBeneficio: { nome: 'Auxílio Moradia' },\n          dataConcessao: new Date('2025-01-15'),\n          valor: 100,\n        },\n      ]);\n\n      // Mock para resposta HTTP\n      const mockResponse = {\n        set: jest.fn().mockReturnThis(),\n        send: jest.fn().mockReturnThis(),\n        setHeader: jest.fn().mockReturnThis(),\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      // Parâmetros da requisição\n      const dto = {\n        data_inicio: '2025-01-01',\n        data_fim: '2025-01-31',\n        formato: 'pdf' as 'pdf' | 'excel' | 'csv',\n        unidade_id: '1',\n        tipo_beneficio_id: '2',\n      };\n\n      const mockUser = {\n        id: 1,\n        nome: 'Usuário Teste',\n        cargo: 'COORDENADOR',\n        permissoes: [\n          RELATORIOS_CONFIG.SECURITY.REQUIRED_PERMISSIONS.BENEFICIOS,\n        ],\n      };\n\n      const mockRequest = createMockRequest(mockUser);\n\n      // Executa o fluxo completo através do controlador\n      await relatoriosController.beneficiosConcedidos(\n        mockRequest,\n        mockResponse,\n        dto,\n      );\n\n      // Verifica se o serviço foi chamado corretamente\n      expect(mockSolicitacaoRepository.leftJoinAndSelect).toHaveBeenCalledWith(\n        expect.stringContaining('cidadao'),\n        expect.any(String),\n      );\n\n      expect(mockSolicitacaoRepository.leftJoinAndSelect).toHaveBeenCalledWith(\n        expect.stringContaining('tipoBeneficio'),\n        expect.any(String),\n      );\n\n      // Verifica se a resposta foi configurada corretamente\n      expect(mockResponse.set).toHaveBeenCalledWith(\n        expect.objectContaining({\n          'Content-Type': expect.any(String),\n          'Content-Disposition': expect.stringContaining('attachment'),\n        }),\n      );\n\n      expect(mockResponse.send).toHaveBeenCalled();\n    });\n\n    it('deve processar corretamente um relatório de solicitações', async () => {\n      // Mock para dados de solicitações por status\n      mockSolicitacaoRepository.getRawMany.mockResolvedValueOnce([\n        { status: 'PENDENTE', quantidade: 10 },\n        { status: 'APROVADO', quantidade: 20 },\n        { status: 'REPROVADO', quantidade: 5 },\n      ]);\n\n      // Mock para resposta HTTP\n      const mockResponse = {\n        set: jest.fn().mockReturnThis(),\n        send: jest.fn().mockReturnThis(),\n        setHeader: jest.fn().mockReturnThis(),\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      // Parâmetros da requisição\n      const dto = {\n        data_inicio: '2025-01-01',\n        data_fim: '2025-01-31',\n        formato: 'excel' as 'pdf' | 'excel' | 'csv',\n        unidade_id: '1',\n      };\n\n      const mockUser = {\n        id: 1,\n        nome: 'Usuário Teste',\n        cargo: 'COORDENADOR',\n        permissoes: [\n          RELATORIOS_CONFIG.SECURITY.REQUIRED_PERMISSIONS.SOLICITACOES,\n        ],\n      };\n\n      const mockRequest = createMockRequest(mockUser);\n\n      // Executa o fluxo completo através do controlador\n      await relatoriosController.solicitacoesPorStatus(\n        mockRequest,\n        mockResponse,\n        dto,\n      );\n\n      // Verifica se o serviço foi chamado corretamente\n      expect(mockSolicitacaoRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockSolicitacaoRepository.select).toHaveBeenCalled();\n      expect(mockSolicitacaoRepository.addSelect).toHaveBeenCalled();\n\n      // Verifica se a resposta foi configurada corretamente\n      expect(mockResponse.set).toHaveBeenCalledWith(\n        expect.objectContaining({\n          'Content-Type': expect.any(String),\n          'Content-Disposition': expect.stringContaining('attachment'),\n        }),\n      );\n\n      expect(mockResponse.send).toHaveBeenCalled();\n    });\n\n    it('deve processar corretamente um relatório de atendimentos', async () => {\n      // Mock para unidades\n      mockUnidadeRepository.find.mockResolvedValueOnce([\n        { id: 1, nome: 'Unidade A' },\n        { id: 2, nome: 'Unidade B' },\n      ]);\n\n      // Mock para dados de atendimentos por unidade\n      mockSolicitacaoRepository.getRawMany.mockResolvedValueOnce([\n        { unidadeId: 1, total: 15, liberadas: 10, pendentes: 5 },\n        { unidadeId: 2, total: 20, liberadas: 15, pendentes: 5 },\n      ]);\n\n      // Mock para resposta HTTP\n      const mockResponse = {\n        set: jest.fn().mockReturnThis(),\n        send: jest.fn().mockReturnThis(),\n        setHeader: jest.fn().mockReturnThis(),\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      // Parâmetros da requisição\n      const dto = {\n        data_inicio: '2025-01-01',\n        data_fim: '2025-01-31',\n        formato: 'csv' as 'pdf' | 'excel' | 'csv',\n      };\n\n      const mockUser = {\n        id: 1,\n        nome: 'Usuário Teste',\n        cargo: 'COORDENADOR',\n        permissoes: [\n          RELATORIOS_CONFIG.SECURITY.REQUIRED_PERMISSIONS.ATENDIMENTOS,\n        ],\n      };\n\n      const mockRequest = createMockRequest(mockUser);\n\n      // Executa o fluxo completo através do controlador\n      await relatoriosController.atendimentosPorUnidade(\n        mockRequest,\n        mockResponse,\n        dto,\n      );\n\n      // Verifica se o serviço foi chamado corretamente\n      expect(mockUnidadeRepository.find).toHaveBeenCalled();\n      expect(mockSolicitacaoRepository.createQueryBuilder).toHaveBeenCalled();\n\n      // Verifica se a resposta foi configurada corretamente\n      expect(mockResponse.set).toHaveBeenCalledWith(\n        expect.objectContaining({\n          'Content-Type': expect.any(String),\n          'Content-Disposition': expect.stringContaining('attachment'),\n        }),\n      );\n\n      expect(mockResponse.send).toHaveBeenCalled();\n    });\n  });\n\n  describe('Integração com cache', () => {\n    it('deve usar o cache quando disponível', async () => {\n      // Mock para dados em cache\n      const mockCacheData = {\n        buffer: Buffer.from('cached content'),\n        contentType: 'application/pdf',\n        filename: 'relatorio-beneficios.pdf',\n      };\n\n      mockCacheManager.get.mockResolvedValueOnce(mockCacheData);\n\n      // Parâmetros da requisição\n      const options = {\n        dataInicio: '2025-01-01',\n        dataFim: '2025-01-31',\n        formato: 'pdf' as const,\n        user: {\n          id: 1,\n          nome: 'Usuário Teste',\n          cargo: 'COORDENADOR',\n          permissoes: [\n            RELATORIOS_CONFIG.SECURITY.REQUIRED_PERMISSIONS.BENEFICIOS,\n          ],\n        },\n      };\n\n      // Executa o serviço diretamente\n      const result =\n        await relatoriosService.gerarRelatorioBeneficiosConcedidos(options);\n\n      // Verifica se o cache foi consultado\n      expect(mockCacheManager.get).toHaveBeenCalled();\n\n      // Verifica se o resultado veio do cache\n      expect(result).toEqual(mockCacheData);\n\n      // Verifica que não houve consulta ao banco de dados\n      expect(mockSolicitacaoRepository.getMany).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}