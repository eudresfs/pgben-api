0ac8729e4e0263d2a511a54613d84809
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const axios_1 = require("@nestjs/axios");
const config_1 = require("@nestjs/config");
const rxjs_1 = require("rxjs");
const integracao_cidadao_service_1 = require("../../services/integracao-cidadao.service");
const dados_bancarios_validator_1 = require("../../validators/dados-bancarios-validator");
const pix_validator_1 = require("../../validators/pix-validator");
const common_1 = require("@nestjs/common");
/**
 * Testes unitários para o serviço de integração com o módulo de cidadão
 *
 * Verifica o funcionamento correto das operações de consulta de dados
 * pessoais e bancários de beneficiários.
 *
 * @author Equipe PGBen
 */
describe('IntegracaoCidadaoService', () => {
    let service;
    let httpService;
    let configService;
    let dadosBancariosValidator;
    let pixValidator;
    // Mock do HttpService
    const mockHttpService = {
        get: jest.fn(),
        post: jest.fn()
    };
    // Mock do ConfigService
    const mockConfigService = {
        get: jest.fn().mockImplementation((key) => {
            if (key === 'cidadao.apiUrl') {
                return 'http://api-cidadao.pgben.local';
            }
            if (key === 'cidadao.apiKey') {
                return 'api-key-mock';
            }
            return null;
        })
    };
    // Mock do DadosBancariosValidator
    const mockDadosBancariosValidator = {
        validarCodigoBanco: jest.fn(),
        validarAgencia: jest.fn(),
        validarConta: jest.fn(),
        obterNomeBanco: jest.fn(),
        mascaraAgencia: jest.fn(),
        mascaraConta: jest.fn(),
        formatarAgencia: jest.fn(),
        formatarConta: jest.fn()
    };
    // Mock do PixValidator
    const mockPixValidator = {
        validarChavePix: jest.fn(),
        mascaraChavePix: jest.fn(),
        obterTipoChavePix: jest.fn()
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                integracao_cidadao_service_1.IntegracaoCidadaoService,
                {
                    provide: axios_1.HttpService,
                    useValue: mockHttpService
                },
                {
                    provide: config_1.ConfigService,
                    useValue: mockConfigService
                },
                {
                    provide: dados_bancarios_validator_1.DadosBancariosValidator,
                    useValue: mockDadosBancariosValidator
                },
                {
                    provide: pix_validator_1.PixValidator,
                    useValue: mockPixValidator
                }
            ],
        }).compile();
        service = module.get(integracao_cidadao_service_1.IntegracaoCidadaoService);
        httpService = module.get(axios_1.HttpService);
        configService = module.get(config_1.ConfigService);
        dadosBancariosValidator = module.get(dados_bancarios_validator_1.DadosBancariosValidator);
        pixValidator = module.get(pix_validator_1.PixValidator);
        // Limpar mocks antes de cada teste
        jest.clearAllMocks();
    });
    describe('obterDadosCidadao', () => {
        const cidadaoId = 'cidadao-id';
        const mockCidadao = {
            id: cidadaoId,
            nome: 'João da Silva',
            cpf: '12345678900',
            dataNascimento: '1990-01-01',
            endereco: {
                logradouro: 'Rua Exemplo',
                numero: '123',
                bairro: 'Centro',
                cidade: 'Natal',
                uf: 'RN',
                cep: '59000000'
            },
            contato: {
                telefone: '84999999999',
                email: 'joao@exemplo.com'
            }
        };
        it('deve retornar dados do cidadão quando encontrado', async () => {
            // Configurar mock da resposta HTTP
            const axiosResponse = {
                data: mockCidadao,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} }
            };
            mockHttpService.get.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Executar método
            const result = await service.obterDadosCidadao(cidadaoId);
            // Verificar resultado
            expect(result).toEqual(mockCidadao);
            expect(mockHttpService.get).toHaveBeenCalledWith(`http://api-cidadao.pgben.local/cidadaos/${cidadaoId}`, expect.objectContaining({
                headers: expect.objectContaining({
                    'x-api-key': 'api-key-mock'
                })
            }));
        });
        it('deve lançar NotFoundException quando cidadão não encontrado', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.get.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 404,
                    data: { message: 'Cidadão não encontrado' }
                }
            })));
            // Executar e verificar exceção
            await expect(service.obterDadosCidadao(cidadaoId)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve propagar outros erros HTTP', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.get.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 500,
                    data: { message: 'Erro interno do servidor' }
                }
            })));
            // Executar e verificar exceção
            await expect(service.obterDadosCidadao(cidadaoId)).rejects.toThrow();
        });
    });
    describe('obterDadosBancarios', () => {
        const cidadaoId = 'cidadao-id';
        const mockDadosBancarios = [
            {
                id: 'info-bancaria-1',
                cidadaoId: cidadaoId,
                tipo: 'CONTA_CORRENTE',
                banco: '001',
                agencia: '1234',
                conta: '56789-0',
                titularCpf: '12345678900',
                titularNome: 'João da Silva',
                principal: true,
                createdAt: '2023-01-01T00:00:00Z'
            },
            {
                id: 'info-bancaria-2',
                cidadaoId: cidadaoId,
                tipo: 'PIX',
                pixTipo: 'CPF',
                pixChave: '12345678900',
                titularCpf: '12345678900',
                titularNome: 'João da Silva',
                principal: false,
                createdAt: '2023-01-02T00:00:00Z'
            }
        ];
        it('deve retornar dados bancários quando encontrados', async () => {
            // Configurar mock da resposta HTTP
            const axiosResponse = {
                data: mockDadosBancarios,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} }
            };
            mockHttpService.get.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Configurar validadores
            mockDadosBancariosValidator.obterNomeBanco.mockReturnValue('Banco do Brasil');
            mockDadosBancariosValidator.mascaraAgencia.mockReturnValue('1**4');
            mockDadosBancariosValidator.mascaraConta.mockReturnValue('56**9-0');
            mockPixValidator.mascaraChavePix.mockReturnValue('***.456.789-**');
            // Executar método
            const result = await service.obterDadosBancarios(cidadaoId);
            // Verificar resultado
            expect(result).toEqual(mockDadosBancarios);
            expect(mockHttpService.get).toHaveBeenCalledWith(`http://api-cidadao.pgben.local/cidadaos/${cidadaoId}/dados-bancarios`, expect.objectContaining({
                headers: expect.objectContaining({
                    'x-api-key': 'api-key-mock'
                })
            }));
        });
        it('deve lançar NotFoundException quando dados bancários não encontrados', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.get.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 404,
                    data: { message: 'Dados bancários não encontrados' }
                }
            })));
            // Executar e verificar exceção
            await expect(service.obterDadosBancarios(cidadaoId)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve retornar array vazio quando não há dados bancários', async () => {
            // Configurar mock da resposta HTTP com array vazio
            const axiosResponse = {
                data: [],
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} }
            };
            mockHttpService.get.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Executar método
            const result = await service.obterDadosBancarios(cidadaoId);
            // Verificar resultado
            expect(result).toEqual([]);
        });
    });
    describe('obterDadosBancariosPorId', () => {
        const cidadaoId = 'cidadao-id';
        const infoBancariaId = 'info-bancaria-1';
        const mockDadosBancarios = {
            id: infoBancariaId,
            cidadaoId: cidadaoId,
            tipo: 'CONTA_CORRENTE',
            banco: '001',
            agencia: '1234',
            conta: '56789-0',
            titularCpf: '12345678900',
            titularNome: 'João da Silva',
            principal: true,
            createdAt: '2023-01-01T00:00:00Z'
        };
        it('deve retornar dados bancários específicos quando encontrados', async () => {
            // Configurar mock da resposta HTTP
            const axiosResponse = {
                data: mockDadosBancarios,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} }
            };
            mockHttpService.get.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Configurar validadores
            mockDadosBancariosValidator.obterNomeBanco.mockReturnValue('Banco do Brasil');
            mockDadosBancariosValidator.mascaraAgencia.mockReturnValue('1**4');
            mockDadosBancariosValidator.mascaraConta.mockReturnValue('56**9-0');
            // Executar método
            const result = await service.obterDadosBancariosPorId(cidadaoId, infoBancariaId);
            // Verificar resultado
            expect(result).toEqual(mockDadosBancarios);
            expect(mockHttpService.get).toHaveBeenCalledWith(`http://api-cidadao.pgben.local/cidadaos/${cidadaoId}/dados-bancarios/${infoBancariaId}`, expect.objectContaining({
                headers: expect.objectContaining({
                    'x-api-key': 'api-key-mock'
                })
            }));
        });
        it('deve lançar NotFoundException quando dados bancários específicos não encontrados', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.get.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 404,
                    data: { message: 'Dados bancários não encontrados' }
                }
            })));
            // Executar e verificar exceção
            await expect(service.obterDadosBancariosPorId(cidadaoId, infoBancariaId)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('validarDadosBancarios', () => {
        it('deve validar dados bancários do tipo CONTA_CORRENTE', async () => {
            const dadosBancarios = {
                tipo: 'CONTA_CORRENTE',
                banco: '001',
                agencia: '1234',
                conta: '56789-0'
            };
            // Configurar validadores
            mockDadosBancariosValidator.validarCodigoBanco.mockReturnValue(true);
            mockDadosBancariosValidator.validarAgencia.mockReturnValue(true);
            mockDadosBancariosValidator.validarConta.mockReturnValue(true);
            // Executar método
            const result = await service.validarDadosBancarios(dadosBancarios);
            // Verificar resultado
            expect(result).toBe(true);
            expect(mockDadosBancariosValidator.validarCodigoBanco).toHaveBeenCalledWith('001');
            expect(mockDadosBancariosValidator.validarAgencia).toHaveBeenCalledWith('1234', '001');
            expect(mockDadosBancariosValidator.validarConta).toHaveBeenCalledWith('56789-0', '001');
        });
        it('deve validar dados bancários do tipo PIX', async () => {
            const dadosBancarios = {
                tipo: 'PIX',
                pixTipo: 'CPF',
                pixChave: '12345678900'
            };
            // Configurar validadores
            mockPixValidator.validarChavePix.mockReturnValue(true);
            // Executar método
            const result = await service.validarDadosBancarios(dadosBancarios);
            // Verificar resultado
            expect(result).toBe(true);
            expect(mockPixValidator.validarChavePix).toHaveBeenCalledWith('12345678900', 'CPF');
        });
        it('deve rejeitar dados bancários inválidos do tipo CONTA_CORRENTE', async () => {
            const dadosBancarios = {
                tipo: 'CONTA_CORRENTE',
                banco: '999', // banco inválido
                agencia: '1234',
                conta: '56789-0'
            };
            // Configurar validadores
            mockDadosBancariosValidator.validarCodigoBanco.mockReturnValue(false);
            // Executar método
            const result = await service.validarDadosBancarios(dadosBancarios);
            // Verificar resultado
            expect(result).toBe(false);
        });
        it('deve rejeitar dados bancários inválidos do tipo PIX', async () => {
            const dadosBancarios = {
                tipo: 'PIX',
                pixTipo: 'CPF',
                pixChave: '123456789' // CPF inválido
            };
            // Configurar validadores
            mockPixValidator.validarChavePix.mockReturnValue(false);
            // Executar método
            const result = await service.validarDadosBancarios(dadosBancarios);
            // Verificar resultado
            expect(result).toBe(false);
        });
        it('deve rejeitar tipo de dados bancários desconhecido', async () => {
            const dadosBancarios = {
                tipo: 'TIPO_DESCONHECIDO',
            };
            // Executar método
            const result = await service.validarDadosBancarios(dadosBancarios);
            // Verificar resultado
            expect(result).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,