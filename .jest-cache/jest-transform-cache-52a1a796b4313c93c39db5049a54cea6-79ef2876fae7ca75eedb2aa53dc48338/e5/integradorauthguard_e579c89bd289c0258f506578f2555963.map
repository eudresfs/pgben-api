{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\guards\\integrador-auth.guard.ts","mappings":";;;;;;;;;;;;;AAAA,2CAMwB;AACxB,uCAAyC;AACzC,iFAA4E;AAC5E,uEAA8D;AAE9D;;;GAGG;AAEI,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAEpB;IACA;IAFV,YACU,SAAoB,EACpB,WAAkC;QADlC,cAAS,GAAT,SAAS,CAAW;QACpB,gBAAW,GAAX,WAAW,CAAuB;IACzC,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,WAAW,CAAC,OAAyB;QACzC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,QAAQ,GAAG,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE,IAAI,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;QAC3E,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QAE7D,IAAI,CAAC;YACH,yBAAyB;YACzB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAEhE,+BAA+B;YAC/B,MAAM,cAAc,GAClB,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAW,+BAAW,EAAE;gBACtD,OAAO,CAAC,UAAU,EAAE;gBACpB,OAAO,CAAC,QAAQ,EAAE;aACnB,CAAC,IAAI,EAAE,CAAC;YAEX,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,EAAE,CAAC;gBAChE,+CAA+C;gBAC/C,MAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAC7C,OAAO,CAAC,GAAG,EACX,OAAO,CAAC,UAAU,EAAE,EAAE,EACtB,KAAK,EACL,SAAS,EACT,QAAQ,EACR,sCAAsC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAClE,CAAC;gBAEF,MAAM,IAAI,2BAAkB,CAC1B,kDAAkD,CACnD,CAAC;YACJ,CAAC;YAED,gCAAgC;YAChC,MAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAC7C,OAAO,CAAC,GAAG,EACX,OAAO,CAAC,UAAU,EAAE,EAAE,EACtB,IAAI,EACJ,SAAS,EACT,QAAQ,EACR,mBAAmB,CACpB,CAAC;YAEF,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,sCAAsC;YACtC,MAAM,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAC7C,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,SAAS,EACT,QAAQ,EACR,KAAK,CAAC,OAAO,IAAI,mBAAmB,CACrC,CAAC;YAEF,8BAA8B;YAC9B,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AArEY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;yDAGU,gBAAS,oBAAT,gBAAS,oDACP,+CAAqB,oBAArB,+CAAqB;GAHjC,mBAAmB,CAqE/B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\guards\\integrador-auth.guard.ts"],"sourcesContent":["import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { IntegradorAuthService } from '../services/integrador-auth.service';\nimport { ESCOPOS_KEY } from '../decorators/escopos.decorator';\n\n/**\n * Guard de autenticação para integradores.\n * Valida se a requisição possui um token válido e se tem as permissões necessárias.\n */\n@Injectable()\nexport class IntegradorAuthGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private authService: IntegradorAuthService,\n  ) {}\n\n  /**\n   * Verifica se a requisição pode ser ativada (autorizada).\n   * @param context Contexto de execução\n   * @returns true se autorizado, false ou exceção caso contrário\n   */\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const resource = `${request.method} ${request.route?.path || request.url}`;\n    const ipAddress = this.authService.getIpFromRequest(request);\n\n    try {\n      // Validar a autenticação\n      const payload = await this.authService.validateRequest(request);\n\n      // Verificar escopos requeridos\n      const requiredScopes =\n        this.reflector.getAllAndOverride<string[]>(ESCOPOS_KEY, [\n          context.getHandler(),\n          context.getClass(),\n        ]) || [];\n\n      if (!this.authService.checkPermissions(request, requiredScopes)) {\n        // Registrar tentativa de acesso não autorizada\n        await this.authService.registrarTentativaAcesso(\n          payload.jti,\n          payload.integrador?.id,\n          false,\n          ipAddress,\n          resource,\n          `Escopos insuficientes. Requeridos: ${requiredScopes.join(', ')}`,\n        );\n\n        throw new ForbiddenException(\n          'Permissão insuficiente para acessar este recurso',\n        );\n      }\n\n      // Registrar acesso bem-sucedido\n      await this.authService.registrarTentativaAcesso(\n        payload.jti,\n        payload.integrador?.id,\n        true,\n        ipAddress,\n        resource,\n        'Acesso autorizado',\n      );\n\n      return true;\n    } catch (error) {\n      // Registrar tentativa de acesso falha\n      await this.authService.registrarTentativaAcesso(\n        null,\n        null,\n        false,\n        ipAddress,\n        resource,\n        error.message || 'Erro desconhecido',\n      );\n\n      // Propagar a exceção original\n      throw error;\n    }\n  }\n}\n"],"version":3}