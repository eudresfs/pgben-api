{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\controllers\\comprovante.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\controllers\\comprovante.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ComprovanteController } from '../../../controllers/comprovante.controller';\nimport { ComprovanteService } from '../../../services/comprovante.service';\nimport { PagamentoService } from '../../../services/pagamento.service';\nimport { NotFoundException, BadRequestException } from '@nestjs/common';\nimport { Response } from 'express';\n\n/**\n * Testes unitários para ComprovanteController\n * \n * Valida o comportamento dos endpoints de comprovante de pagamento, garantindo \n * o correto funcionamento do upload, download e manipulação de comprovantes.\n * \n * @author Equipe PGBen\n */\ndescribe('ComprovanteController', () => {\n  let controller: ComprovanteController;\n  let comprovanteService: ComprovanteService;\n  let pagamentoService: PagamentoService;\n\n  // Mock de um comprovante para os testes\n  const comprovanteMock = {\n    id: 'comprovante-id-1',\n    pagamentoId: 'pagamento-id-1',\n    nomeArquivo: 'comprovante.pdf',\n    tipoArquivo: 'application/pdf',\n    tamanhoArquivo: 1024,\n    caminhoArquivo: 'pagamentos/comprovantes/comprovante-id-1.pdf',\n    adicionadoPor: 'usuario-id-1',\n    dataCriacao: new Date(),\n    observacoes: 'Comprovante de pagamento via PIX'\n  };\n\n  // Mock de um pagamento para os testes\n  const pagamentoMock = {\n    id: 'pagamento-id-1',\n    solicitacaoId: 'solicitacao-id-1',\n    status: 'LIBERADO',\n    valor: 500\n  };\n\n  // Lista de comprovantes para teste\n  const comprovantesMock = [\n    comprovanteMock,\n    {\n      ...comprovanteMock,\n      id: 'comprovante-id-2',\n      nomeArquivo: 'comprovante2.pdf'\n    }\n  ];\n\n  // Mock do arquivo para teste de upload\n  const fileMock = {\n    originalname: 'comprovante.pdf',\n    mimetype: 'application/pdf',\n    size: 1024,\n    buffer: Buffer.from('mock file content')\n  };\n\n  // Mock do request com usuário autenticado\n  const mockRequest = {\n    user: {\n      id: 'usuario-id-1',\n      nome: 'Usuário Teste',\n      perfil: 'operador'\n    }\n  };\n\n  // Mock da resposta para download\n  const mockResponse = {\n    contentType: jest.fn().mockReturnThis(),\n    header: jest.fn().mockReturnThis(),\n    send: jest.fn().mockReturnThis()\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [ComprovanteController],\n      providers: [\n        {\n          provide: ComprovanteService,\n          useValue: {\n            uploadComprovante: jest.fn().mockResolvedValue(comprovanteMock),\n            getComprovante: jest.fn().mockResolvedValue(comprovanteMock),\n            getComprovanteConteudo: jest.fn().mockResolvedValue(Buffer.from('mock file content')),\n            listarComprovantes: jest.fn().mockResolvedValue(comprovantesMock),\n            removerComprovante: jest.fn().mockResolvedValue(true)\n          }\n        },\n        {\n          provide: PagamentoService,\n          useValue: {\n            findOne: jest.fn().mockResolvedValue(pagamentoMock)\n          }\n        }\n      ],\n    }).compile();\n\n    controller = module.get<ComprovanteController>(ComprovanteController);\n    comprovanteService = module.get<ComprovanteService>(ComprovanteService);\n    pagamentoService = module.get<PagamentoService>(PagamentoService);\n  });\n\n  it('deve estar definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('uploadComprovante', () => {\n    it('deve fazer upload de comprovante com sucesso', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const observacoes = 'Comprovante de pagamento';\n\n      // Act\n      const resultado = await controller.uploadComprovante(\n        pagamentoId,\n        fileMock as any,\n        observacoes,\n        mockRequest as any\n      );\n\n      // Assert\n      expect(resultado).toEqual(comprovanteMock);\n      expect(comprovanteService.uploadComprovante).toHaveBeenCalledWith(\n        pagamentoId,\n        fileMock,\n        observacoes,\n        mockRequest.user.id\n      );\n    });\n\n    it('deve validar se o pagamento existe antes do upload', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n      const observacoes = 'Comprovante de pagamento';\n      \n      jest.spyOn(pagamentoService, 'findOne').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        controller.uploadComprovante(pagamentoId, fileMock as any, observacoes, mockRequest as any)\n      ).rejects.toThrow(NotFoundException);\n      expect(pagamentoService.findOne).toHaveBeenCalledWith(pagamentoId);\n    });\n\n    it('deve rejeitar upload de arquivo não permitido', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const observacoes = 'Comprovante de pagamento';\n      const arquivoInvalido = {\n        ...fileMock,\n        mimetype: 'application/exe'\n      };\n      \n      jest.spyOn(comprovanteService, 'uploadComprovante').mockRejectedValue(\n        new BadRequestException('Tipo de arquivo não permitido')\n      );\n\n      // Act & Assert\n      await expect(\n        controller.uploadComprovante(pagamentoId, arquivoInvalido as any, observacoes, mockRequest as any)\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve rejeitar upload de arquivo muito grande', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const observacoes = 'Comprovante de pagamento';\n      const arquivoGrande = {\n        ...fileMock,\n        size: 10 * 1024 * 1024 // 10MB\n      };\n      \n      jest.spyOn(comprovanteService, 'uploadComprovante').mockRejectedValue(\n        new BadRequestException('Arquivo excede o tamanho máximo permitido')\n      );\n\n      // Act & Assert\n      await expect(\n        controller.uploadComprovante(pagamentoId, arquivoGrande as any, observacoes, mockRequest as any)\n      ).rejects.toThrow(BadRequestException);\n    });\n  });\n\n  describe('getComprovante', () => {\n    it('deve retornar os metadados do comprovante', async () => {\n      // Arrange\n      const comprovanteId = 'comprovante-id-1';\n\n      // Act\n      const resultado = await controller.getComprovante(comprovanteId);\n\n      // Assert\n      expect(resultado).toEqual(comprovanteMock);\n      expect(comprovanteService.getComprovante).toHaveBeenCalledWith(comprovanteId);\n    });\n\n    it('deve lançar erro quando o comprovante não existe', async () => {\n      // Arrange\n      const comprovanteId = 'comprovante-inexistente';\n      \n      jest.spyOn(comprovanteService, 'getComprovante').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        controller.getComprovante(comprovanteId)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('downloadComprovante', () => {\n    it('deve retornar o conteúdo do comprovante', async () => {\n      // Arrange\n      const comprovanteId = 'comprovante-id-1';\n      const arquivoConteudo = Buffer.from('mock file content');\n      \n      // Act\n      await controller.downloadComprovante(comprovanteId, mockResponse as unknown as Response);\n\n      // Assert\n      expect(comprovanteService.getComprovante).toHaveBeenCalledWith(comprovanteId);\n      expect(comprovanteService.getComprovanteConteudo).toHaveBeenCalledWith(comprovanteId);\n      expect(mockResponse.contentType).toHaveBeenCalledWith(comprovanteMock.tipoArquivo);\n      expect(mockResponse.header).toHaveBeenCalledWith(\n        'Content-Disposition',\n        `attachment; filename=\"${comprovanteMock.nomeArquivo}\"`\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(arquivoConteudo);\n    });\n\n    it('deve lançar erro quando o comprovante não existe', async () => {\n      // Arrange\n      const comprovanteId = 'comprovante-inexistente';\n      \n      jest.spyOn(comprovanteService, 'getComprovante').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        controller.downloadComprovante(comprovanteId, mockResponse as unknown as Response)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('listarComprovantes', () => {\n    it('deve listar comprovantes de um pagamento', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n\n      // Act\n      const resultado = await controller.listarComprovantes(pagamentoId);\n\n      // Assert\n      expect(resultado).toEqual(comprovantesMock);\n      expect(comprovanteService.listarComprovantes).toHaveBeenCalledWith(pagamentoId);\n    });\n\n    it('deve retornar lista vazia quando não há comprovantes', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      \n      jest.spyOn(comprovanteService, 'listarComprovantes').mockResolvedValue([]);\n\n      // Act\n      const resultado = await controller.listarComprovantes(pagamentoId);\n\n      // Assert\n      expect(resultado).toEqual([]);\n    });\n  });\n\n  describe('removerComprovante', () => {\n    it('deve remover um comprovante com sucesso', async () => {\n      // Arrange\n      const comprovanteId = 'comprovante-id-1';\n\n      // Act\n      const resultado = await controller.removerComprovante(\n        comprovanteId,\n        mockRequest as any\n      );\n\n      // Assert\n      expect(resultado).toEqual({ success: true, message: 'Comprovante removido com sucesso' });\n      expect(comprovanteService.removerComprovante).toHaveBeenCalledWith(\n        comprovanteId,\n        mockRequest.user.id\n      );\n    });\n\n    it('deve lançar erro quando o comprovante não existe', async () => {\n      // Arrange\n      const comprovanteId = 'comprovante-inexistente';\n      \n      jest.spyOn(comprovanteService, 'removerComprovante').mockRejectedValue(\n        new NotFoundException('Comprovante não encontrado')\n      );\n\n      // Act & Assert\n      await expect(\n        controller.removerComprovante(comprovanteId, mockRequest as any)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"],"version":3}