dfa3f4c42c536ce3f263622798c288f5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CampoDinamicoBeneficio = exports.TipoDado = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const tipo_beneficio_entity_1 = require("./tipo-beneficio.entity");
/**
 * Enum para definir os tipos de dados suportados pelos campos dinâmicos
 */
var TipoDado;
(function (TipoDado) {
    TipoDado["STRING"] = "string";
    TipoDado["NUMBER"] = "number";
    TipoDado["BOOLEAN"] = "boolean";
    TipoDado["DATE"] = "date";
    TipoDado["ARRAY"] = "array";
    TipoDado["OBJECT"] = "object";
})(TipoDado || (exports.TipoDado = TipoDado = {}));
/**
 * Entidade para campos dinâmicos de benefícios
 *
 * Permite definir campos específicos para cada tipo de benefício,
 * com validações e regras de negócio próprias.
 */
let CampoDinamicoBeneficio = class CampoDinamicoBeneficio {
    id;
    tipo_beneficio_id;
    tipo_beneficio;
    label;
    nome;
    tipo;
    obrigatorio;
    descricao;
    validacoes;
    ordem;
    ativo;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se o campo foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se o campo foi removido
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se o campo está ativo
     */
    isAtivo() {
        return this.ativo && !this.removed_at;
    }
    /**
     * Verifica se é um campo obrigatório
     */
    isObrigatorio() {
        return this.obrigatorio;
    }
    /**
     * Verifica se é um campo opcional
     */
    isOpcional() {
        return !this.obrigatorio;
    }
    /**
     * Verifica se é campo de texto
     */
    isCampoTexto() {
        return this.tipo === TipoDado.STRING;
    }
    /**
     * Verifica se é campo numérico
     */
    isCampoNumerico() {
        return this.tipo === TipoDado.NUMBER;
    }
    /**
     * Verifica se é campo booleano
     */
    isCampoBooleano() {
        return this.tipo === TipoDado.BOOLEAN;
    }
    /**
     * Verifica se é campo de data
     */
    isCampoData() {
        return this.tipo === TipoDado.DATE;
    }
    /**
     * Verifica se é campo de array
     */
    isCampoArray() {
        return this.tipo === TipoDado.ARRAY;
    }
    /**
     * Verifica se é campo de objeto
     */
    isCampoObjeto() {
        return this.tipo === TipoDado.OBJECT;
    }
    /**
     * Obtém a descrição do tipo de dado
     */
    getDescricaoTipoDado() {
        const descricoes = {
            [TipoDado.STRING]: 'Texto',
            [TipoDado.NUMBER]: 'Número',
            [TipoDado.BOOLEAN]: 'Verdadeiro/Falso',
            [TipoDado.DATE]: 'Data',
            [TipoDado.ARRAY]: 'Lista',
            [TipoDado.OBJECT]: 'Objeto',
        };
        return descricoes[this.tipo] || 'Tipo não identificado';
    }
    /**
     * Verifica se tem validações definidas
     */
    temValidacoes() {
        return !!this.validacoes && Object.keys(this.validacoes).length > 0;
    }
    /**
     * Verifica se tem validação de valor mínimo
     */
    temValidacaoMin() {
        return this.temValidacoes() &&
            this.validacoes.min !== undefined &&
            this.validacoes.min !== null;
    }
    /**
     * Verifica se tem validação de valor máximo
     */
    temValidacaoMax() {
        return this.temValidacoes() &&
            this.validacoes.max !== undefined &&
            this.validacoes.max !== null;
    }
    /**
     * Verifica se tem validação de comprimento mínimo
     */
    temValidacaoMinLength() {
        return this.temValidacoes() &&
            this.validacoes.minLength !== undefined &&
            this.validacoes.minLength !== null;
    }
    /**
     * Verifica se tem validação de comprimento máximo
     */
    temValidacaoMaxLength() {
        return this.temValidacoes() &&
            this.validacoes.maxLength !== undefined &&
            this.validacoes.maxLength !== null;
    }
    /**
     * Verifica se tem validação de padrão (regex)
     */
    temValidacaoPattern() {
        return this.temValidacoes() &&
            !!this.validacoes.pattern;
    }
    /**
     * Verifica se tem validação de enum (lista de valores)
     */
    temValidacaoEnum() {
        return this.temValidacoes() &&
            !!this.validacoes.enum &&
            this.validacoes.enum.length > 0;
    }
    /**
     * Verifica se tem validação de formato
     */
    temValidacaoFormat() {
        return this.temValidacoes() &&
            !!this.validacoes.format;
    }
    /**
     * Obtém o valor mínimo
     */
    getValorMinimo() {
        if (!this.temValidacaoMin())
            return null;
        return this.validacoes.min ?? null;
    }
    /**
     * Obtém o valor máximo
     */
    getValorMaximo() {
        if (!this.temValidacaoMax())
            return null;
        return this.validacoes.max ?? null;
    }
    /**
     * Obtém o comprimento mínimo
     */
    getComprimentoMinimo() {
        if (!this.temValidacaoMinLength())
            return null;
        return this.validacoes.minLength ?? null;
    }
    /**
     * Obtém o comprimento máximo
     */
    getComprimentoMaximo() {
        if (!this.temValidacaoMaxLength())
            return null;
        return this.validacoes.maxLength ?? null;
    }
    /**
     * Obtém o padrão regex
     */
    getPadrao() {
        if (!this.temValidacaoPattern())
            return null;
        return this.validacoes.pattern ?? null;
    }
    /**
     * Obtém os valores do enum
     */
    getValoresEnum() {
        if (!this.temValidacaoEnum())
            return [];
        return this.validacoes.enum ?? [];
    }
    /**
     * Obtém o formato
     */
    getFormato() {
        if (!this.temValidacaoFormat())
            return null;
        return this.validacoes.format ?? null;
    }
    /**
     * Valida um valor contra as regras do campo
     */
    validarValor(valor) {
        const erros = [];
        // Verifica se é obrigatório
        if (this.isObrigatorio() && (valor === null || valor === undefined || valor === '')) {
            erros.push(`${this.label} é obrigatório`);
            return { valido: false, erros };
        }
        // Se não tem valor e não é obrigatório, é válido
        if (valor === null || valor === undefined || valor === '') {
            return { valido: true, erros: [] };
        }
        // Validações por tipo
        switch (this.tipo) {
            case TipoDado.STRING:
                if (typeof valor !== 'string') {
                    erros.push(`${this.label} deve ser um texto`);
                }
                else {
                    const comprimentoMinimo = this.getComprimentoMinimo();
                    if (this.temValidacaoMinLength() && comprimentoMinimo !== null && valor.length < comprimentoMinimo) {
                        erros.push(`${this.label} deve ter pelo menos ${comprimentoMinimo} caracteres`);
                    }
                    const comprimentoMaximo = this.getComprimentoMaximo();
                    if (this.temValidacaoMaxLength() && comprimentoMaximo !== null && valor.length > comprimentoMaximo) {
                        erros.push(`${this.label} deve ter no máximo ${comprimentoMaximo} caracteres`);
                    }
                    if (this.temValidacaoPattern()) {
                        const padrao = this.getPadrao();
                        if (padrao !== null) {
                            const regex = new RegExp(padrao);
                            if (!regex.test(valor)) {
                                erros.push(`${this.label} não atende ao formato exigido`);
                            }
                        }
                    }
                    if (this.temValidacaoEnum() && !this.getValoresEnum().includes(valor)) {
                        erros.push(`${this.label} deve ser um dos valores: ${this.getValoresEnum().join(', ')}`);
                    }
                }
                break;
            case TipoDado.NUMBER:
                const numero = Number(valor);
                if (isNaN(numero)) {
                    erros.push(`${this.label} deve ser um número`);
                }
                else {
                    const valorMinimo = this.getValorMinimo();
                    if (this.temValidacaoMin() && valorMinimo !== null && numero < valorMinimo) {
                        erros.push(`${this.label} deve ser maior ou igual a ${valorMinimo}`);
                    }
                    const valorMaximo = this.getValorMaximo();
                    if (this.temValidacaoMax() && valorMaximo !== null && numero > valorMaximo) {
                        erros.push(`${this.label} deve ser menor ou igual a ${valorMaximo}`);
                    }
                }
                break;
            case TipoDado.BOOLEAN:
                if (typeof valor !== 'boolean') {
                    erros.push(`${this.label} deve ser verdadeiro ou falso`);
                }
                break;
            case TipoDado.DATE:
                const data = new Date(valor);
                if (isNaN(data.getTime())) {
                    erros.push(`${this.label} deve ser uma data válida`);
                }
                break;
            case TipoDado.ARRAY:
                if (!Array.isArray(valor)) {
                    erros.push(`${this.label} deve ser uma lista`);
                }
                else {
                    const valorMinimo = this.getValorMinimo();
                    const valorMaximo = this.getValorMaximo();
                    if (this.temValidacaoMin() && valorMinimo !== null && valor.length < valorMinimo) {
                        erros.push(`${this.label} deve ter pelo menos ${valorMinimo} itens`);
                    }
                    if (this.temValidacaoMax() && valorMaximo !== null && valor.length > valorMaximo) {
                        erros.push(`${this.label} deve ter no máximo ${valorMaximo} itens`);
                    }
                }
                break;
            case TipoDado.OBJECT:
                if (typeof valor !== 'object' || Array.isArray(valor)) {
                    erros.push(`${this.label} deve ser um objeto`);
                }
                break;
        }
        return { valido: erros.length === 0, erros };
    }
    /**
     * Verifica se pertence a um tipo de benefício
     */
    pertenceAoTipoBeneficio(tipoBeneficioId) {
        return this.tipo_beneficio_id === tipoBeneficioId;
    }
    /**
     * Obtém um resumo do campo
     */
    getSummary() {
        const tipo = this.getDescricaoTipoDado();
        const obrigatoriedade = this.isObrigatorio() ? 'Obrigatório' : 'Opcional';
        const status = this.isAtivo() ? 'Ativo' : 'Inativo';
        return `${this.label} (${tipo}) - ${obrigatoriedade} - ${status}`;
    }
    /**
     * Gera uma chave única para o campo
     */
    getUniqueKey() {
        return `campo_${this.tipo_beneficio_id}_${this.nome}`;
    }
    /**
     * Verifica se o campo é consistente
     */
    isConsistente() {
        // Verifica se tem tipo de benefício
        if (!this.tipo_beneficio_id)
            return false;
        // Verifica se tem label
        if (!this.label || this.label.trim().length === 0)
            return false;
        // Verifica se tem nome
        if (!this.nome || this.nome.trim().length === 0)
            return false;
        // Verifica se tem tipo válido
        if (!Object.values(TipoDado).includes(this.tipo))
            return false;
        // Verifica se a ordem é válida
        if (this.ordem < 1)
            return false;
        // Verifica validações se existirem
        if (this.temValidacoes()) {
            if (this.temValidacaoMin() && this.temValidacaoMax()) {
                const valorMinimo = this.getValorMinimo();
                const valorMaximo = this.getValorMaximo();
                if (valorMinimo !== null && valorMaximo !== null && valorMinimo > valorMaximo) {
                    return false;
                }
            }
            if (this.temValidacaoMinLength() && this.temValidacaoMaxLength()) {
                const comprimentoMinimo = this.getComprimentoMinimo();
                const comprimentoMaximo = this.getComprimentoMaximo();
                if (comprimentoMinimo !== null && comprimentoMaximo !== null && comprimentoMinimo > comprimentoMaximo) {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * Verifica se pode ser removido
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        // Pode implementar lógica adicional aqui
        // Por exemplo, verificar se tem dados associados
        return true;
    }
    /**
     * Clona o campo (sem ID)
     */
    clone() {
        return {
            tipo_beneficio_id: this.tipo_beneficio_id,
            label: this.label,
            nome: this.nome,
            tipo: this.tipo,
            obrigatorio: this.obrigatorio,
            descricao: this.descricao,
            validacoes: this.validacoes ?
                JSON.parse(JSON.stringify(this.validacoes)) : null,
            ordem: this.ordem,
            ativo: this.ativo,
        };
    }
    /**
     * Verifica se é um campo crítico
     */
    isCritico() {
        // Campos obrigatórios são críticos
        if (this.isObrigatorio())
            return true;
        // Campos com ordem baixa (primeiros) são mais críticos
        if (this.ordem <= 3)
            return true;
        return false;
    }
    /**
     * Obtém a complexidade do campo baseada em validações
     */
    getComplexidade() {
        let pontos = 0;
        // Tipo de dado complexo
        if (this.isCampoObjeto() || this.isCampoArray())
            pontos += 2;
        // Validações
        if (this.temValidacoes()) {
            pontos += Object.keys(this.validacoes).length;
        }
        // Obrigatório
        if (this.isObrigatorio())
            pontos += 1;
        if (pontos <= 2)
            return 'BAIXA';
        if (pontos <= 5)
            return 'MEDIA';
        return 'ALTA';
    }
    /**
     * Obtém a categoria do campo
     */
    getCategoria() {
        if (this.isCampoTexto() || this.isCampoNumerico() || this.isCampoBooleano()) {
            return this.temValidacoes() ? 'AVANCADO' : 'BASICO';
        }
        return 'COMPLEXO';
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            label: this.label,
            nome: this.nome,
            tipo: this.tipo,
            obrigatorio: this.obrigatorio,
            ordem: this.ordem,
            ativo: this.ativo,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para o campo
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.descricao || this.descricao.trim().length === 0) {
            sugestoes.push('Adicionar descrição detalhada do campo');
        }
        if (!this.temValidacoes() && (this.isCampoTexto() || this.isCampoNumerico())) {
            sugestoes.push('Definir validações para o campo');
        }
        if (this.isCampoTexto() && !this.temValidacaoMaxLength()) {
            sugestoes.push('Definir comprimento máximo para campos de texto');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências nos dados');
        }
        if (!this.ativo) {
            sugestoes.push('Considerar reativar o campo se necessário');
        }
        return sugestoes;
    }
    /**
     * Verifica se precisa de atualização (dados muito antigos)
     */
    precisaAtualizacao() {
        // Dados com mais de 6 meses podem precisar de revisão
        const seisMesesAtras = new Date();
        seisMesesAtras.setMonth(seisMesesAtras.getMonth() - 6);
        return this.updated_at < seisMesesAtras;
    }
    /**
     * Obtém estatísticas do campo
     */
    getEstatisticas() {
        return {
            categoria: this.getCategoria(),
            complexidade: this.getComplexidade(),
            tipo: this.getDescricaoTipoDado(),
            obrigatorio: this.isObrigatorio(),
            temValidacoes: this.temValidacoes(),
            numeroValidacoes: this.temValidacoes() ? Object.keys(this.validacoes).length : 0,
            ordem: this.ordem,
        };
    }
};
exports.CampoDinamicoBeneficio = CampoDinamicoBeneficio;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], CampoDinamicoBeneficio.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de benefício é obrigatório' }),
    __metadata("design:type", String)
], CampoDinamicoBeneficio.prototype, "tipo_beneficio_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => tipo_beneficio_entity_1.TipoBeneficio, (tipoBeneficio) => tipoBeneficio.campos_dinamicos),
    (0, typeorm_1.JoinColumn)({ name: 'tipo_beneficio_id' }),
    __metadata("design:type", typeof (_a = typeof tipo_beneficio_entity_1.TipoBeneficio !== "undefined" && tipo_beneficio_entity_1.TipoBeneficio) === "function" ? _a : Object)
], CampoDinamicoBeneficio.prototype, "tipo_beneficio", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Label é obrigatório' }),
    __metadata("design:type", String)
], CampoDinamicoBeneficio.prototype, "label", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome é obrigatório' }),
    __metadata("design:type", String)
], CampoDinamicoBeneficio.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: TipoDado,
        enumName: 'tipo_dado',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de dado é obrigatório' }),
    (0, class_validator_1.IsEnum)(TipoDado, { message: 'Tipo de dado inválido' }),
    __metadata("design:type", String)
], CampoDinamicoBeneficio.prototype, "tipo", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: false }),
    (0, class_validator_1.IsBoolean)({ message: 'Obrigatório deve ser um booleano' }),
    __metadata("design:type", Boolean)
], CampoDinamicoBeneficio.prototype, "obrigatorio", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CampoDinamicoBeneficio.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)('jsonb', { nullable: true }),
    __metadata("design:type", Object)
], CampoDinamicoBeneficio.prototype, "validacoes", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 1 }),
    (0, class_validator_1.IsNumber)({}, { message: 'Ordem deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Ordem deve ser maior que zero' }),
    __metadata("design:type", Number)
], CampoDinamicoBeneficio.prototype, "ordem", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    (0, class_validator_1.IsBoolean)({ message: 'Ativo deve ser um booleano' }),
    __metadata("design:type", Boolean)
], CampoDinamicoBeneficio.prototype, "ativo", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], CampoDinamicoBeneficio.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], CampoDinamicoBeneficio.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], CampoDinamicoBeneficio.prototype, "removed_at", void 0);
exports.CampoDinamicoBeneficio = CampoDinamicoBeneficio = __decorate([
    (0, typeorm_1.Entity)('campo_dinamico_beneficio'),
    (0, typeorm_1.Index)(['tipo_beneficio_id', 'nome'], { unique: true })
], CampoDinamicoBeneficio);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,