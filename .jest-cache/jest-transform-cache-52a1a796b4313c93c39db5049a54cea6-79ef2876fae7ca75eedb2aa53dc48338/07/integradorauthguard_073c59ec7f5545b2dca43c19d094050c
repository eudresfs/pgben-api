1f5605341e0eb9ab684c216ce0eb3043
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegradorAuthGuard = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const integrador_auth_service_1 = require("../services/integrador-auth.service");
const escopos_decorator_1 = require("../decorators/escopos.decorator");
/**
 * Guard de autenticação para integradores.
 * Valida se a requisição possui um token válido e se tem as permissões necessárias.
 */
let IntegradorAuthGuard = class IntegradorAuthGuard {
    reflector;
    authService;
    constructor(reflector, authService) {
        this.reflector = reflector;
        this.authService = authService;
    }
    /**
     * Verifica se a requisição pode ser ativada (autorizada).
     * @param context Contexto de execução
     * @returns true se autorizado, false ou exceção caso contrário
     */
    async canActivate(context) {
        const request = context.switchToHttp().getRequest();
        const resource = `${request.method} ${request.route?.path || request.url}`;
        const ipAddress = this.authService.getIpFromRequest(request);
        try {
            // Validar a autenticação
            const payload = await this.authService.validateRequest(request);
            // Verificar escopos requeridos
            const requiredScopes = this.reflector.getAllAndOverride(escopos_decorator_1.ESCOPOS_KEY, [context.getHandler(), context.getClass()]) || [];
            if (!this.authService.checkPermissions(request, requiredScopes)) {
                // Registrar tentativa de acesso não autorizada
                await this.authService.registrarTentativaAcesso(payload.jti, payload.integrador?.id, false, ipAddress, resource, `Escopos insuficientes. Requeridos: ${requiredScopes.join(', ')}`);
                throw new common_1.ForbiddenException('Permissão insuficiente para acessar este recurso');
            }
            // Registrar acesso bem-sucedido
            await this.authService.registrarTentativaAcesso(payload.jti, payload.integrador?.id, true, ipAddress, resource, 'Acesso autorizado');
            return true;
        }
        catch (error) {
            // Registrar tentativa de acesso falha
            await this.authService.registrarTentativaAcesso(null, null, false, ipAddress, resource, error.message || 'Erro desconhecido');
            // Propagar a exceção original
            throw error;
        }
    }
};
exports.IntegradorAuthGuard = IntegradorAuthGuard;
exports.IntegradorAuthGuard = IntegradorAuthGuard = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object, typeof (_b = typeof integrador_auth_service_1.IntegradorAuthService !== "undefined" && integrador_auth_service_1.IntegradorAuthService) === "function" ? _b : Object])
], IntegradorAuthGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGludGVncmFkb3JcXGd1YXJkc1xcaW50ZWdyYWRvci1hdXRoLmd1YXJkLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBc0g7QUFDdEgsdUNBQXlDO0FBQ3pDLGlGQUE0RTtBQUM1RSx1RUFBOEQ7QUFFOUQ7OztHQUdHO0FBRUksSUFBTSxtQkFBbUIsR0FBekIsTUFBTSxtQkFBbUI7SUFFcEI7SUFDQTtJQUZWLFlBQ1UsU0FBb0IsRUFDcEIsV0FBa0M7UUFEbEMsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNwQixnQkFBVyxHQUFYLFdBQVcsQ0FBdUI7SUFDekMsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQXlCO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwRCxNQUFNLFFBQVEsR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzNFLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDO1lBQ0gseUJBQXlCO1lBQ3pCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFaEUsK0JBQStCO1lBQy9CLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQ3JELCtCQUFXLEVBQ1gsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQzNDLElBQUksRUFBRSxDQUFDO1lBRVIsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2hFLCtDQUErQztnQkFDL0MsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLHdCQUF3QixDQUM3QyxPQUFPLENBQUMsR0FBRyxFQUNYLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUN0QixLQUFLLEVBQ0wsU0FBUyxFQUNULFFBQVEsRUFDUixzQ0FBc0MsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUNsRSxDQUFDO2dCQUVGLE1BQU0sSUFBSSwyQkFBa0IsQ0FDMUIsa0RBQWtELENBQ25ELENBQUM7WUFDSixDQUFDO1lBRUQsZ0NBQWdDO1lBQ2hDLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FDN0MsT0FBTyxDQUFDLEdBQUcsRUFDWCxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFDdEIsSUFBSSxFQUNKLFNBQVMsRUFDVCxRQUFRLEVBQ1IsbUJBQW1CLENBQ3BCLENBQUM7WUFFRixPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2Ysc0NBQXNDO1lBQ3RDLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FDN0MsSUFBSSxFQUNKLElBQUksRUFDSixLQUFLLEVBQ0wsU0FBUyxFQUNULFFBQVEsRUFDUixLQUFLLENBQUMsT0FBTyxJQUFJLG1CQUFtQixDQUNyQyxDQUFDO1lBRUYsOEJBQThCO1lBQzlCLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7Q0FDRixDQUFBO0FBcEVZLGtEQUFtQjs4QkFBbkIsbUJBQW1CO0lBRC9CLElBQUEsbUJBQVUsR0FBRTt5REFHVSxnQkFBUyxvQkFBVCxnQkFBUyxvREFDUCwrQ0FBcUIsb0JBQXJCLCtDQUFxQjtHQUhqQyxtQkFBbUIsQ0FvRS9CIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxpbnRlZ3JhZG9yXFxndWFyZHNcXGludGVncmFkb3ItYXV0aC5ndWFyZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDYW5BY3RpdmF0ZSwgRXhlY3V0aW9uQ29udGV4dCwgVW5hdXRob3JpemVkRXhjZXB0aW9uLCBGb3JiaWRkZW5FeGNlcHRpb24gfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBSZWZsZWN0b3IgfSBmcm9tICdAbmVzdGpzL2NvcmUnO1xuaW1wb3J0IHsgSW50ZWdyYWRvckF1dGhTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaW50ZWdyYWRvci1hdXRoLnNlcnZpY2UnO1xuaW1wb3J0IHsgRVNDT1BPU19LRVkgfSBmcm9tICcuLi9kZWNvcmF0b3JzL2VzY29wb3MuZGVjb3JhdG9yJztcblxuLyoqXG4gKiBHdWFyZCBkZSBhdXRlbnRpY2HDp8OjbyBwYXJhIGludGVncmFkb3Jlcy5cbiAqIFZhbGlkYSBzZSBhIHJlcXVpc2nDp8OjbyBwb3NzdWkgdW0gdG9rZW4gdsOhbGlkbyBlIHNlIHRlbSBhcyBwZXJtaXNzw7VlcyBuZWNlc3PDoXJpYXMuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJbnRlZ3JhZG9yQXV0aEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlZmxlY3RvcjogUmVmbGVjdG9yLFxuICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IEludGVncmFkb3JBdXRoU2VydmljZSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSBhIHJlcXVpc2nDp8OjbyBwb2RlIHNlciBhdGl2YWRhIChhdXRvcml6YWRhKS5cbiAgICogQHBhcmFtIGNvbnRleHQgQ29udGV4dG8gZGUgZXhlY3XDp8Ojb1xuICAgKiBAcmV0dXJucyB0cnVlIHNlIGF1dG9yaXphZG8sIGZhbHNlIG91IGV4Y2XDp8OjbyBjYXNvIGNvbnRyw6FyaW9cbiAgICovXG4gIGFzeW5jIGNhbkFjdGl2YXRlKGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gY29udGV4dC5zd2l0Y2hUb0h0dHAoKS5nZXRSZXF1ZXN0KCk7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBgJHtyZXF1ZXN0Lm1ldGhvZH0gJHtyZXF1ZXN0LnJvdXRlPy5wYXRoIHx8IHJlcXVlc3QudXJsfWA7XG4gICAgY29uc3QgaXBBZGRyZXNzID0gdGhpcy5hdXRoU2VydmljZS5nZXRJcEZyb21SZXF1ZXN0KHJlcXVlc3QpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBWYWxpZGFyIGEgYXV0ZW50aWNhw6fDo29cbiAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCB0aGlzLmF1dGhTZXJ2aWNlLnZhbGlkYXRlUmVxdWVzdChyZXF1ZXN0KTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZpY2FyIGVzY29wb3MgcmVxdWVyaWRvc1xuICAgICAgY29uc3QgcmVxdWlyZWRTY29wZXMgPSB0aGlzLnJlZmxlY3Rvci5nZXRBbGxBbmRPdmVycmlkZTxzdHJpbmdbXT4oXG4gICAgICAgIEVTQ09QT1NfS0VZLFxuICAgICAgICBbY29udGV4dC5nZXRIYW5kbGVyKCksIGNvbnRleHQuZ2V0Q2xhc3MoKV1cbiAgICAgICkgfHwgW107XG4gICAgICBcbiAgICAgIGlmICghdGhpcy5hdXRoU2VydmljZS5jaGVja1Blcm1pc3Npb25zKHJlcXVlc3QsIHJlcXVpcmVkU2NvcGVzKSkge1xuICAgICAgICAvLyBSZWdpc3RyYXIgdGVudGF0aXZhIGRlIGFjZXNzbyBuw6NvIGF1dG9yaXphZGFcbiAgICAgICAgYXdhaXQgdGhpcy5hdXRoU2VydmljZS5yZWdpc3RyYXJUZW50YXRpdmFBY2Vzc28oXG4gICAgICAgICAgcGF5bG9hZC5qdGksXG4gICAgICAgICAgcGF5bG9hZC5pbnRlZ3JhZG9yPy5pZCxcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBpcEFkZHJlc3MsXG4gICAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgICAgYEVzY29wb3MgaW5zdWZpY2llbnRlcy4gUmVxdWVyaWRvczogJHtyZXF1aXJlZFNjb3Blcy5qb2luKCcsICcpfWBcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIHRocm93IG5ldyBGb3JiaWRkZW5FeGNlcHRpb24oXG4gICAgICAgICAgJ1Blcm1pc3PDo28gaW5zdWZpY2llbnRlIHBhcmEgYWNlc3NhciBlc3RlIHJlY3Vyc28nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFJlZ2lzdHJhciBhY2Vzc28gYmVtLXN1Y2VkaWRvXG4gICAgICBhd2FpdCB0aGlzLmF1dGhTZXJ2aWNlLnJlZ2lzdHJhclRlbnRhdGl2YUFjZXNzbyhcbiAgICAgICAgcGF5bG9hZC5qdGksXG4gICAgICAgIHBheWxvYWQuaW50ZWdyYWRvcj8uaWQsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGlwQWRkcmVzcyxcbiAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgICdBY2Vzc28gYXV0b3JpemFkbydcbiAgICAgICk7XG4gICAgICBcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBSZWdpc3RyYXIgdGVudGF0aXZhIGRlIGFjZXNzbyBmYWxoYVxuICAgICAgYXdhaXQgdGhpcy5hdXRoU2VydmljZS5yZWdpc3RyYXJUZW50YXRpdmFBY2Vzc28oXG4gICAgICAgIG51bGwsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBpcEFkZHJlc3MsXG4gICAgICAgIHJlc291cmNlLFxuICAgICAgICBlcnJvci5tZXNzYWdlIHx8ICdFcnJvIGRlc2NvbmhlY2lkbydcbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIFByb3BhZ2FyIGEgZXhjZcOnw6NvIG9yaWdpbmFsXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==