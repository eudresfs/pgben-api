18db3bc8206283c2459ae5da72339e6b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtRefreshGuard = void 0;
const common_1 = require("@nestjs/common");
/**
 * Guard para autenticação JWT com token de atualização
 *
 * Implementação simplificada que evita problemas de incompatibilidade de tipos
 * entre diferentes versões das bibliotecas.
 */
let JwtRefreshGuard = class JwtRefreshGuard {
    /**
     * Verifica se o usuário pode acessar o endpoint
     */
    async canActivate(context) {
        try {
            // Obter o token do cabeçalho da requisição
            const request = context.switchToHttp().getRequest();
            const authHeader = request.headers.authorization;
            if (!authHeader || !authHeader.startsWith('Bearer ')) {
                throw new common_1.UnauthorizedException('Token de atualização não fornecido');
            }
            // Extrair o token
            const token = authHeader.split(' ')[1];
            if (!token) {
                throw new common_1.UnauthorizedException('Token de atualização inválido');
            }
            // A validação real do token será feita pelo JwtRefreshStrategy
            // Aqui apenas verificamos se o token foi fornecido
            // O NestJS irá automaticamente usar a estratégia configurada para validar o token
            // e injetar o usuário no request se o token for válido
            // Após a validação do token, o usuário deve estar disponível no request
            // Esta verificação será feita em um interceptor ou no próprio controlador
            return true;
        }
        catch (error) {
            if (error instanceof common_1.UnauthorizedException) {
                throw error;
            }
            throw new common_1.UnauthorizedException('Falha na autenticação do token de atualização');
        }
    }
};
exports.JwtRefreshGuard = JwtRefreshGuard;
exports.JwtRefreshGuard = JwtRefreshGuard = __decorate([
    (0, common_1.Injectable)()
], JwtRefreshGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXGd1YXJkc1xcand0LXJlZnJlc2guZ3VhcmQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsMkNBS3dCO0FBR3hCOzs7OztHQUtHO0FBRUksSUFBTSxlQUFlLEdBQXJCLE1BQU0sZUFBZTtJQUMxQjs7T0FFRztJQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBeUI7UUFDekMsSUFBSSxDQUFDO1lBQ0gsMkNBQTJDO1lBQzNDLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNwRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztZQUVqRCxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO2dCQUNyRCxNQUFNLElBQUksOEJBQXFCLENBQUMsb0NBQW9DLENBQUMsQ0FBQztZQUN4RSxDQUFDO1lBRUQsa0JBQWtCO1lBQ2xCLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdkMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNYLE1BQU0sSUFBSSw4QkFBcUIsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1lBQ25FLENBQUM7WUFFRCwrREFBK0Q7WUFDL0QsbURBQW1EO1lBQ25ELGtGQUFrRjtZQUNsRix1REFBdUQ7WUFFdkQsd0VBQXdFO1lBQ3hFLDBFQUEwRTtZQUUxRSxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSxLQUFLLFlBQVksOEJBQXFCLEVBQUUsQ0FBQztnQkFDM0MsTUFBTSxLQUFLLENBQUM7WUFDZCxDQUFDO1lBRUQsTUFBTSxJQUFJLDhCQUFxQixDQUM3QiwrQ0FBK0MsQ0FDaEQsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTtBQXhDWSwwQ0FBZTswQkFBZixlQUFlO0lBRDNCLElBQUEsbUJBQVUsR0FBRTtHQUNBLGVBQWUsQ0F3QzNCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxhdXRoXFxndWFyZHNcXGp3dC1yZWZyZXNoLmd1YXJkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENhbkFjdGl2YXRlLFxuICBFeGVjdXRpb25Db250ZXh0LFxuICBJbmplY3RhYmxlLFxuICBVbmF1dGhvcml6ZWRFeGNlcHRpb24sXG59IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IFNUUkFURUdZX0pXVF9SRUZSRVNIIH0gZnJvbSAnLi4vY29uc3RhbnRzL3N0cmF0ZWd5LmNvbnN0YW50JztcblxuLyoqXG4gKiBHdWFyZCBwYXJhIGF1dGVudGljYcOnw6NvIEpXVCBjb20gdG9rZW4gZGUgYXR1YWxpemHDp8Ojb1xuICpcbiAqIEltcGxlbWVudGHDp8OjbyBzaW1wbGlmaWNhZGEgcXVlIGV2aXRhIHByb2JsZW1hcyBkZSBpbmNvbXBhdGliaWxpZGFkZSBkZSB0aXBvc1xuICogZW50cmUgZGlmZXJlbnRlcyB2ZXJzw7VlcyBkYXMgYmlibGlvdGVjYXMuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBKd3RSZWZyZXNoR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSBvIHVzdcOhcmlvIHBvZGUgYWNlc3NhciBvIGVuZHBvaW50XG4gICAqL1xuICBhc3luYyBjYW5BY3RpdmF0ZShjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIE9idGVyIG8gdG9rZW4gZG8gY2FiZcOnYWxobyBkYSByZXF1aXNpw6fDo29cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjb250ZXh0LnN3aXRjaFRvSHR0cCgpLmdldFJlcXVlc3QoKTtcbiAgICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcblxuICAgICAgaWYgKCFhdXRoSGVhZGVyIHx8ICFhdXRoSGVhZGVyLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSkge1xuICAgICAgICB0aHJvdyBuZXcgVW5hdXRob3JpemVkRXhjZXB0aW9uKCdUb2tlbiBkZSBhdHVhbGl6YcOnw6NvIG7Do28gZm9ybmVjaWRvJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEV4dHJhaXIgbyB0b2tlblxuICAgICAgY29uc3QgdG9rZW4gPSBhdXRoSGVhZGVyLnNwbGl0KCcgJylbMV07XG5cbiAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbignVG9rZW4gZGUgYXR1YWxpemHDp8OjbyBpbnbDoWxpZG8nKTtcbiAgICAgIH1cblxuICAgICAgLy8gQSB2YWxpZGHDp8OjbyByZWFsIGRvIHRva2VuIHNlcsOhIGZlaXRhIHBlbG8gSnd0UmVmcmVzaFN0cmF0ZWd5XG4gICAgICAvLyBBcXVpIGFwZW5hcyB2ZXJpZmljYW1vcyBzZSBvIHRva2VuIGZvaSBmb3JuZWNpZG9cbiAgICAgIC8vIE8gTmVzdEpTIGlyw6EgYXV0b21hdGljYW1lbnRlIHVzYXIgYSBlc3RyYXTDqWdpYSBjb25maWd1cmFkYSBwYXJhIHZhbGlkYXIgbyB0b2tlblxuICAgICAgLy8gZSBpbmpldGFyIG8gdXN1w6FyaW8gbm8gcmVxdWVzdCBzZSBvIHRva2VuIGZvciB2w6FsaWRvXG5cbiAgICAgIC8vIEFww7NzIGEgdmFsaWRhw6fDo28gZG8gdG9rZW4sIG8gdXN1w6FyaW8gZGV2ZSBlc3RhciBkaXNwb27DrXZlbCBubyByZXF1ZXN0XG4gICAgICAvLyBFc3RhIHZlcmlmaWNhw6fDo28gc2Vyw6EgZmVpdGEgZW0gdW0gaW50ZXJjZXB0b3Igb3Ugbm8gcHLDs3ByaW8gY29udHJvbGFkb3JcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFVuYXV0aG9yaXplZEV4Y2VwdGlvbikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbihcbiAgICAgICAgJ0ZhbGhhIG5hIGF1dGVudGljYcOnw6NvIGRvIHRva2VuIGRlIGF0dWFsaXphw6fDo28nLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==