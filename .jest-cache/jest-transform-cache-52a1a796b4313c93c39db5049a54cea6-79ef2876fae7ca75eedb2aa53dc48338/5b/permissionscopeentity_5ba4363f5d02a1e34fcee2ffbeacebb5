4183de1927712dfedcfc677b2e8ebad6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var PermissionScope_1;
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionScope = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const permission_entity_1 = require("./permission.entity");
const usuario_entity_1 = require("./usuario.entity");
/**
 * Entidade que define regras de escopo padrão para permissões.
 *
 * Esta entidade permite definir o tipo de escopo padrão para cada permissão,
 * facilitando a atribuição de permissões com escopo adequado.
 */
let PermissionScope = PermissionScope_1 = class PermissionScope {
    /**
     * Identificador único do mapeamento
     */
    id;
    /**
     * Referência à permissão
     */
    permissao_id;
    /**
     * Relação com a permissão
     */
    permissao;
    /**
     * Tipo de escopo padrão (global, unidade, proprio)
     */
    tipo_escopo_padrao;
    /**
     * Data de criação
     */
    created_at;
    /**
     * Data de última atualização
     */
    updated_at;
    /**
     * Usuário que criou o mapeamento
     */
    criado_por;
    /**
     * Relação com o usuário que criou o mapeamento
     */
    usuario_criador;
    /**
     * Usuário que atualizou o mapeamento por último
     */
    atualizado_por;
    /**
     * Relação com o usuário que atualizou o mapeamento por último
     */
    usuario_atualizador;
    // Getters e setters para compatibilidade com código existente
    get permissionId() {
        return this.permissao_id;
    }
    set permissionId(value) {
        this.permissao_id = value;
    }
    get permission() {
        return this.permissao;
    }
    set permission(value) {
        this.permissao = value;
    }
    get defaultScopeType() {
        return this.tipo_escopo_padrao;
    }
    set defaultScopeType(value) {
        this.tipo_escopo_padrao = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get creator() {
        return this.usuario_criador;
    }
    set creator(value) {
        this.usuario_criador = value;
    }
    get updatedBy() {
        return this.atualizado_por;
    }
    set updatedBy(value) {
        this.atualizado_por = value;
    }
    get updater() {
        return this.usuario_atualizador;
    }
    set updater(value) {
        this.usuario_atualizador = value;
    }
    /**
     * Verifica se o escopo foi criado por um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se foi criado pelo usuário
     */
    foiCriadoPor(usuarioId) {
        return this.criado_por === usuarioId;
    }
    /**
     * Verifica se o escopo foi atualizado por um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se foi atualizado pelo usuário
     */
    foiAtualizadoPor(usuarioId) {
        return this.atualizado_por === usuarioId;
    }
    /**
     * Verifica se o escopo é global
     * @returns true se o escopo é global
     */
    isGlobal() {
        return this.tipo_escopo_padrao === 'global';
    }
    /**
     * Verifica se o escopo é por unidade
     * @returns true se o escopo é por unidade
     */
    isPorUnidade() {
        return this.tipo_escopo_padrao === 'unidade';
    }
    /**
     * Verifica se o escopo é próprio
     * @returns true se o escopo é próprio
     */
    isProprio() {
        return this.tipo_escopo_padrao === 'proprio';
    }
    /**
     * Define o tipo de escopo padrão
     * @param tipo Tipo de escopo
     */
    definirTipoEscopo(tipo) {
        this.tipo_escopo_padrao = tipo;
    }
    /**
     * Atualiza o usuário que modificou o escopo
     * @param usuarioId ID do usuário
     */
    atualizarPor(usuarioId) {
        this.atualizado_por = usuarioId;
    }
    /**
     * Verifica se o escopo pertence a uma permissão específica
     * @param permissaoId ID da permissão
     * @returns true se pertence à permissão
     */
    pertenceAPermissao(permissaoId) {
        return this.permissao_id === permissaoId;
    }
    /**
     * Obtém uma descrição legível do tipo de escopo
     * @returns descrição do escopo
     */
    getDescricaoEscopo() {
        const descricoes = {
            global: 'Acesso global ao sistema',
            unidade: 'Acesso restrito à unidade do usuário',
            proprio: 'Acesso apenas aos próprios dados',
        };
        return descricoes[this.tipo_escopo_padrao];
    }
    /**
     * Verifica se o escopo foi criado recentemente (últimas 24 horas)
     * @returns true se foi criado nas últimas 24 horas
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do escopo em dias
     * @returns número de dias desde a criação
     */
    getIdadeEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se tem criador definido
     * @returns true se tem criador
     */
    temCriador() {
        return this.criado_por !== null && this.criado_por !== undefined;
    }
    /**
     * Verifica se foi atualizado recentemente (últimas 24 horas)
     * @returns true se foi atualizado nas últimas 24 horas
     */
    foiAtualizadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.updated_at > umDiaAtras;
    }
    /**
     * Obtém um resumo das informações do escopo
     * @returns objeto com resumo das informações
     */
    getSummary() {
        return {
            id: this.id,
            permissaoId: this.permissao_id,
            tipoEscopo: this.tipo_escopo_padrao,
            descricaoEscopo: this.getDescricaoEscopo(),
            criadoEm: this.created_at,
            atualizadoEm: this.updated_at,
            temCriador: this.temCriador(),
            temAtualizador: this.atualizado_por !== null,
        };
    }
    /**
     * Verifica se é compatível com outro escopo (mesmo tipo)
     * @param outroEscopo outro escopo para comparar
     * @returns true se são compatíveis
     */
    isCompatibleWith(outroEscopo) {
        return this.tipo_escopo_padrao === outroEscopo.tipo_escopo_padrao;
    }
    /**
     * Gera uma chave única para o escopo
     * @returns chave única
     */
    getUniqueKey() {
        return `permission_scope_${this.permissao_id}`;
    }
    /**
     * Verifica se o estado do escopo é consistente
     * @returns true se está consistente
     */
    isConsistente() {
        return (this.id !== null &&
            this.permissao_id !== null &&
            this.tipo_escopo_padrao !== null &&
            this.created_at !== null &&
            this.updated_at !== null &&
            this.created_at <= this.updated_at);
    }
    /**
     * Obtém uma descrição completa do escopo
     * @returns descrição completa
     */
    getDescricaoCompleta() {
        const permissaoInfo = this.permissao
            ? this.permissao.nome
            : 'Permissão não carregada';
        return `Escopo ${this.tipo_escopo_padrao} para permissão: ${permissaoInfo}`;
    }
    /**
     * Verifica se pode ser removido (não tem dependências críticas)
     * @returns true se pode ser removido
     */
    podeSerRemovido() {
        // Lógica básica - pode ser expandida conforme regras de negócio
        return true;
    }
    /**
     * Clona o escopo (sem ID)
     * @returns nova instância do escopo
     */
    clone() {
        const novoEscopo = new PermissionScope_1();
        novoEscopo.permissao_id = this.permissao_id;
        novoEscopo.tipo_escopo_padrao = this.tipo_escopo_padrao;
        novoEscopo.criado_por = this.criado_por;
        return novoEscopo;
    }
    /**
     * Verifica se é um escopo de alta criticidade (global)
     * @returns true se é de alta criticidade
     */
    isAltaCriticidade() {
        return this.tipo_escopo_padrao === 'global';
    }
    /**
     * Verifica se é um escopo de média criticidade (unidade)
     * @returns true se é de média criticidade
     */
    isMediaCriticidade() {
        return this.tipo_escopo_padrao === 'unidade';
    }
    /**
     * Verifica se é um escopo de baixa criticidade (proprio)
     * @returns true se é de baixa criticidade
     */
    isBaixaCriticidade() {
        return this.tipo_escopo_padrao === 'proprio';
    }
    /**
     * Obtém o nível de criticidade como número
     * @returns nível de criticidade (1-3)
     */
    getNivelCriticidade() {
        const niveis = {
            proprio: 1,
            unidade: 2,
            global: 3,
        };
        return niveis[this.tipo_escopo_padrao];
    }
    /**
     * Verifica se o escopo permite acesso amplo
     * @returns true se permite acesso amplo
     */
    permiteAcessoAmplo() {
        return (this.tipo_escopo_padrao === 'global' ||
            this.tipo_escopo_padrao === 'unidade');
    }
    /**
     * Verifica se o escopo é restritivo
     * @returns true se é restritivo
     */
    isRestritivo() {
        return this.tipo_escopo_padrao === 'proprio';
    }
    /**
     * Formata a data de criação
     * @returns data formatada
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleString('pt-BR');
    }
    /**
     * Formata a data de atualização
     * @returns data formatada
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     * @returns versão segura para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            permissaoId: this.permissao_id,
            tipoEscopo: this.tipo_escopo_padrao,
            criadoEm: this.created_at,
            atualizadoEm: this.updated_at,
            temCriador: this.temCriador(),
        };
    }
    /**
     * Verifica se o escopo requer aprovação especial para mudanças
     * @returns true se requer aprovação especial
     */
    requerAprovacaoEspecial() {
        return this.tipo_escopo_padrao === 'global';
    }
    /**
     * Obtém sugestões de melhoria de segurança
     * @returns array de sugestões
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (this.tipo_escopo_padrao === 'global') {
            sugestoes.push('Considere restringir o escopo se possível');
            sugestoes.push('Monitore o uso desta permissão global');
        }
        if (!this.temCriador()) {
            sugestoes.push('Defina um criador para auditoria');
        }
        return sugestoes;
    }
};
exports.PermissionScope = PermissionScope;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], PermissionScope.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', name: 'permissao_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da permissão é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da permissão inválido' }),
    __metadata("design:type", String)
], PermissionScope.prototype, "permissao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => permission_entity_1.Permission, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'permissao_id' }),
    __metadata("design:type", typeof (_a = typeof permission_entity_1.Permission !== "undefined" && permission_entity_1.Permission) === "function" ? _a : Object)
], PermissionScope.prototype, "permissao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: ['global', 'unidade', 'proprio'],
        default: 'proprio',
    }),
    (0, class_validator_1.IsEnum)(['global', 'unidade', 'proprio'], {
        message: 'Tipo de escopo deve ser global, unidade ou proprio',
    }),
    __metadata("design:type", String)
], PermissionScope.prototype, "tipo_escopo_padrao", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], PermissionScope.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], PermissionScope.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'criado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do criador inválido' }),
    __metadata("design:type", String)
], PermissionScope.prototype, "criado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'criado_por' }),
    __metadata("design:type", Object)
], PermissionScope.prototype, "usuario_criador", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'atualizado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do atualizador inválido' }),
    __metadata("design:type", Object)
], PermissionScope.prototype, "atualizado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'atualizado_por' }),
    __metadata("design:type", Object)
], PermissionScope.prototype, "usuario_atualizador", void 0);
exports.PermissionScope = PermissionScope = PermissionScope_1 = __decorate([
    (0, typeorm_1.Entity)('escopo_permissao'),
    (0, typeorm_1.Index)(['permissao_id'], { unique: true }),
    (0, typeorm_1.Index)(['tipo_escopo_padrao']),
    (0, typeorm_1.Index)(['criado_por']),
    (0, typeorm_1.Index)(['created_at'])
], PermissionScope);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,