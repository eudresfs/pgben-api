{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\cidadao.repository.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\cidadao.repository.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { DataSource, Repository } from 'typeorm';\nimport { NotFoundException } from '@nestjs/common';\nimport { CidadaoRepository } from '@modules/cidadao/repositories/cidadao.repository';\nimport { Cidadao, Sexo } from '@modules/cidadao/entities/cidadao.entity';\n\ndescribe('CidadaoRepository', () => {\n  let repository: CidadaoRepository;\n  let dataSource: DataSource;\n  let typeormRepository: Repository<Cidadao>;\n\n  const mockTypeormRepository = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n    create: jest.fn(),\n    save: jest.fn(),\n    update: jest.fn(),\n    softDelete: jest.fn(),\n    findAndCount: jest.fn(),\n  };\n\n  const mockDataSource = {\n    getRepository: jest.fn().mockReturnValue(mockTypeormRepository),\n  };\n\n  const mockCidadao: Cidadao = {\n    id: '550e8400-e29b-41d4-a716-446655440000',\n    nome: 'João da Silva',\n    nome_social: 'João',\n    cpf: '12345678901',\n    rg: '123456789',\n    nis: '12345678901',\n    nome_mae: 'Maria da Silva',\n    naturalidade: 'São Paulo',\n    prontuario_suas: 'SUAS123456',\n    data_nascimento: new Date('1990-01-01'),\n    sexo: Sexo.MASCULINO,\n    telefone: '11999999999',\n    email: 'joao@example.com',\n    endereco: {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'São Paulo',\n      estado: 'SP',\n      cep: '01234567',\n    },\n    papeis: [],\n    composicao_familiar: [],\n    ativo: true,\n    created_at: new Date(),\n    updated_at: new Date(),\n    removed_at: null,\n  } as unknown as Cidadao;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CidadaoRepository,\n        {\n          provide: DataSource,\n          useValue: mockDataSource,\n        },\n      ],\n    }).compile();\n\n    repository = module.get<CidadaoRepository>(CidadaoRepository);\n    dataSource = module.get<DataSource>(DataSource);\n    typeormRepository = mockTypeormRepository as any;\n\n    jest.clearAllMocks();\n  });\n\n  it('deve estar definido', () => {\n    expect(repository).toBeDefined();\n  });\n\n  describe('findById', () => {\n    it('deve buscar cidadão por ID com relacionamentos por padrão', async () => {\n      mockTypeormRepository.findOne.mockResolvedValue(mockCidadao);\n\n      const result = await repository.findById(\n        '550e8400-e29b-41d4-a716-446655440000',\n      );\n\n      expect(mockTypeormRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '550e8400-e29b-41d4-a716-446655440000' },\n        relations: ['papeis', 'composicao_familiar'],\n      });\n      expect(result).toEqual(mockCidadao);\n    });\n\n    it('deve buscar cidadão por ID sem relacionamentos quando especificado', async () => {\n      mockTypeormRepository.findOne.mockResolvedValue(mockCidadao);\n\n      const result = await repository.findById(\n        '550e8400-e29b-41d4-a716-446655440000',\n        false,\n      );\n\n      expect(mockTypeormRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '550e8400-e29b-41d4-a716-446655440000' },\n      });\n      expect(result).toEqual(mockCidadao);\n    });\n\n    it('deve retornar null quando cidadão não for encontrado', async () => {\n      mockTypeormRepository.findOne.mockResolvedValue(null);\n\n      const result = await repository.findById('id-inexistente');\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('findByCpf', () => {\n    it('deve buscar cidadão por CPF normalizado', async () => {\n      mockTypeormRepository.findOne.mockResolvedValue(mockCidadao);\n\n      const result = await repository.findByCpf('123.456.789-01');\n\n      expect(mockTypeormRepository.findOne).toHaveBeenCalledWith({\n        where: { cpf: '12345678901' },\n      });\n      expect(result).toEqual(mockCidadao);\n    });\n\n    it('deve buscar cidadão por CPF com relacionamentos quando especificado', async () => {\n      mockTypeormRepository.findOne.mockResolvedValue(mockCidadao);\n\n      const result = await repository.findByCpf('12345678901', true);\n\n      expect(mockTypeormRepository.findOne).toHaveBeenCalledWith({\n        where: { cpf: '12345678901' },\n        relations: ['papeis', 'composicao_familiar'],\n      });\n      expect(result).toEqual(mockCidadao);\n    });\n  });\n\n  describe('findByNis', () => {\n    it('deve buscar cidadão por NIS normalizado', async () => {\n      mockTypeormRepository.findOne.mockResolvedValue(mockCidadao);\n\n      const result = await repository.findByNis('123.456.789-01');\n\n      expect(mockTypeormRepository.findOne).toHaveBeenCalledWith({\n        where: { nis: '12345678901' },\n      });\n      expect(result).toEqual(mockCidadao);\n    });\n\n    it('deve buscar cidadão por NIS com relacionamentos quando especificado', async () => {\n      mockTypeormRepository.findOne.mockResolvedValue(mockCidadao);\n\n      const result = await repository.findByNis('12345678901', true);\n\n      expect(mockTypeormRepository.findOne).toHaveBeenCalledWith({\n        where: { nis: '12345678901' },\n        relations: ['papeis', 'composicao_familiar'],\n      });\n      expect(result).toEqual(mockCidadao);\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar cidadão e retornar dados atualizados', async () => {\n      const updateData = { nome: 'João Silva Atualizado' };\n      mockTypeormRepository.update.mockResolvedValue({ affected: 1 });\n      mockTypeormRepository.findOne.mockResolvedValue({\n        ...mockCidadao,\n        ...updateData,\n      });\n\n      const result = await repository.update(\n        '550e8400-e29b-41d4-a716-446655440000',\n        updateData,\n      );\n\n      expect(mockTypeormRepository.update).toHaveBeenCalledWith(\n        '550e8400-e29b-41d4-a716-446655440000',\n        updateData,\n      );\n      expect(result.nome).toBe('João Silva Atualizado');\n    });\n\n    it('deve normalizar CPF antes de atualizar', async () => {\n      const updateData = { cpf: '987.654.321-00' };\n      mockTypeormRepository.update.mockResolvedValue({ affected: 1 });\n      mockTypeormRepository.findOne.mockResolvedValue({\n        ...mockCidadao,\n        cpf: '98765432100',\n      });\n\n      await repository.update(\n        '550e8400-e29b-41d4-a716-446655440000',\n        updateData,\n      );\n\n      expect(mockTypeormRepository.update).toHaveBeenCalledWith(\n        '550e8400-e29b-41d4-a716-446655440000',\n        { cpf: '98765432100' },\n      );\n    });\n\n    it('deve normalizar NIS antes de atualizar', async () => {\n      const updateData = { nis: '987.654.321-00' };\n      mockTypeormRepository.update.mockResolvedValue({ affected: 1 });\n      mockTypeormRepository.findOne.mockResolvedValue({\n        ...mockCidadao,\n        nis: '98765432100',\n      });\n\n      await repository.update(\n        '550e8400-e29b-41d4-a716-446655440000',\n        updateData,\n      );\n\n      expect(mockTypeormRepository.update).toHaveBeenCalledWith(\n        '550e8400-e29b-41d4-a716-446655440000',\n        { nis: '98765432100' },\n      );\n    });\n\n    it('deve lançar NotFoundException quando cidadão não for encontrado', async () => {\n      mockTypeormRepository.update.mockResolvedValue({ affected: 0 });\n\n      await expect(\n        repository.update('id-inexistente', { nome: 'Teste' }),\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve lançar NotFoundException quando cidadão não for encontrado após atualização', async () => {\n      mockTypeormRepository.update.mockResolvedValue({ affected: 1 });\n      mockTypeormRepository.findOne.mockResolvedValue(null);\n\n      await expect(\n        repository.update('550e8400-e29b-41d4-a716-446655440000', {\n          nome: 'Teste',\n        }),\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"],"version":3}