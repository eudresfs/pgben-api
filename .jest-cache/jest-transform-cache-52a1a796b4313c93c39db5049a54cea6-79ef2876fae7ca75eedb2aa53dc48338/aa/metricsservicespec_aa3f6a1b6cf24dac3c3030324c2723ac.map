{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\metrics.service.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAsD;AACtD,wDAAoD;AACpD,oDAAsC;AAEtC;;;;;GAKG;AACH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAuB9B,iCAAiC;IACjC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;QAC9B,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC;QACxD,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC;QACpD,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC;QAC5D,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC;QAC1D,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;KACjC,CAAC,CAAC,CAAC;IA7BJ,IAAI,OAAuB,CAAC;IAE5B,qDAAqD;IACrD,MAAM,WAAW,GAAG;QAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;KACf,CAAC;IAEF,MAAM,SAAS,GAAG;QAChB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;QACd,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;KACf,CAAC;IAEF,MAAM,aAAa,GAAG;QACpB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;KACnB,CAAC;IAEF,MAAM,YAAY,GAAG;QACnB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC;QACpD,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;QACzB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC;IAWF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,+BAA+B;QAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,WAAkB,CAAC,CAAC;QAC3E,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,SAAgB,CAAC,CAAC;QACvE,IAAI;aACD,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC;aAC1B,kBAAkB,CAAC,GAAG,EAAE,CAAC,aAAoB,CAAC,CAAC;QAClD,IAAI;aACD,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC;aACzB,kBAAkB,CAAC,GAAG,EAAE,CAAC,YAAmB,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,uBAAuB,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAEzE,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE,CAAC,gCAAc,CAAC;SAC5B,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAExD,kFAAkF;YAClF,mEAAmE;YACnE,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC5C,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,OAAO,CAAC,iBAAiB,CAAC,KAAK,EAAE,eAAe,EAAE,GAAG,CAAC,CAAC;YAEvD,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,OAAO,CAAC,yBAAyB,CAAC,MAAM,EAAE,eAAe,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;YAErE,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,OAAO,CAAC,+BAA+B,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;YAElE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;QAC/C,EAAE,CAAC,wDAAwD,EAAE,GAAG,EAAE;YAChE,OAAO,CAAC,+BAA+B,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;YAErE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;YAE1C,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACpC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,OAAO,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAEjD,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;YACpE,OAAO,CAAC,2BAA2B,CAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;YAE9D,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;YAErC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\metrics.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { MetricsService } from '../metrics.service';\nimport * as client from 'prom-client';\n\n/**\n * Testes unitários para o serviço de métricas\n *\n * Verifica o funcionamento dos métodos de coleta e exposição de métricas\n * da aplicação usando Prometheus\n */\ndescribe('MetricsService', () => {\n  let service: MetricsService;\n\n  // Mocks para os contadores e medidores do Prometheus\n  const mockCounter = {\n    inc: jest.fn(),\n  };\n\n  const mockGauge = {\n    inc: jest.fn(),\n    dec: jest.fn(),\n  };\n\n  const mockHistogram = {\n    observe: jest.fn(),\n  };\n\n  const mockRegistry = {\n    metrics: jest.fn().mockResolvedValue('metrics_data'),\n    registerMetric: jest.fn(),\n    clear: jest.fn(),\n  };\n\n  // Mock das classes do Prometheus\n  jest.mock('prom-client', () => ({\n    Counter: jest.fn().mockImplementation(() => mockCounter),\n    Gauge: jest.fn().mockImplementation(() => mockGauge),\n    Histogram: jest.fn().mockImplementation(() => mockHistogram),\n    Registry: jest.fn().mockImplementation(() => mockRegistry),\n    collectDefaultMetrics: jest.fn(),\n  }));\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    // Restaurar os mocks originais\n    jest.spyOn(client, 'Counter').mockImplementation(() => mockCounter as any);\n    jest.spyOn(client, 'Gauge').mockImplementation(() => mockGauge as any);\n    jest\n      .spyOn(client, 'Histogram')\n      .mockImplementation(() => mockHistogram as any);\n    jest\n      .spyOn(client, 'Registry')\n      .mockImplementation(() => mockRegistry as any);\n    jest.spyOn(client, 'collectDefaultMetrics').mockImplementation(() => {});\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [MetricsService],\n    }).compile();\n\n    service = module.get<MetricsService>(MetricsService);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('constructor', () => {\n    it('deve inicializar o registro e as métricas padrão', () => {\n      expect(client.Registry).toHaveBeenCalled();\n      expect(client.collectDefaultMetrics).toHaveBeenCalled();\n\n      // Verificar se os contadores e medidores foram criados com os parâmetros corretos\n      // Sem verificar os valores exatos, pois a implementação pode mudar\n      expect(client.Counter).toHaveBeenCalled();\n      expect(client.Histogram).toHaveBeenCalled();\n      expect(client.Gauge).toHaveBeenCalled();\n    });\n  });\n\n  describe('recordHttpRequest', () => {\n    it('deve incrementar o contador de requisições HTTP', () => {\n      service.recordHttpRequest('GET', '/api/cidadaos', 200);\n\n      expect(mockCounter.inc).toHaveBeenCalled();\n    });\n  });\n\n  describe('recordHttpRequestDuration', () => {\n    it('deve registrar a duração de uma requisição HTTP', () => {\n      service.recordHttpRequestDuration('POST', '/api/cidadaos', 200, 0.5);\n\n      expect(mockHistogram.observe).toHaveBeenCalled();\n    });\n  });\n\n  describe('incrementHttpRequestsInProgress', () => {\n    it('deve incrementar o medidor de requisições em andamento', () => {\n      service.incrementHttpRequestsInProgress('PUT', '/api/cidadaos/1');\n\n      expect(mockGauge.inc).toHaveBeenCalled();\n    });\n  });\n\n  describe('decrementHttpRequestsInProgress', () => {\n    it('deve decrementar o medidor de requisições em andamento', () => {\n      service.decrementHttpRequestsInProgress('DELETE', '/api/cidadaos/1');\n\n      expect(mockGauge.dec).toHaveBeenCalled();\n    });\n  });\n\n  describe('getMetrics', () => {\n    it('deve retornar as métricas coletadas', async () => {\n      const result = await service.getMetrics();\n\n      expect(result).toBe('metrics_data');\n      expect(mockRegistry.metrics).toHaveBeenCalled();\n    });\n  });\n\n  describe('recordDatabaseQuery', () => {\n    it('deve incrementar o contador de consultas ao banco de dados', () => {\n      service.recordDatabaseQuery('Usuario', 'SELECT');\n\n      expect(mockCounter.inc).toHaveBeenCalled();\n    });\n  });\n\n  describe('recordDatabaseQueryDuration', () => {\n    it('deve registrar a duração de uma consulta ao banco de dados', () => {\n      service.recordDatabaseQueryDuration('Usuario', 'SELECT', 0.3);\n\n      expect(mockHistogram.observe).toHaveBeenCalled();\n    });\n  });\n\n  describe('getRegister', () => {\n    it('deve retornar o registro de métricas', () => {\n      const result = service.getRegister();\n\n      expect(result).toBe(mockRegistry);\n    });\n  });\n});\n"],"version":3}