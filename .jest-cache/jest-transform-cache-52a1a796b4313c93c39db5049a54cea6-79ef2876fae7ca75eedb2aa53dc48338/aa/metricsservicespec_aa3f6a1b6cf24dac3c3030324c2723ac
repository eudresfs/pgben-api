937568a8cd8ce039aebc7d91ca1c2007
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const metrics_service_1 = require("../metrics.service");
const client = __importStar(require("prom-client"));
/**
 * Testes unitários para o serviço de métricas
 *
 * Verifica o funcionamento dos métodos de coleta e exposição de métricas
 * da aplicação usando Prometheus
 */
describe('MetricsService', () => {
    // Mock das classes do Prometheus
    jest.mock('prom-client', () => ({
        Counter: jest.fn().mockImplementation(() => mockCounter),
        Gauge: jest.fn().mockImplementation(() => mockGauge),
        Histogram: jest.fn().mockImplementation(() => mockHistogram),
        Registry: jest.fn().mockImplementation(() => mockRegistry),
        collectDefaultMetrics: jest.fn(),
    }));
    let service;
    // Mocks para os contadores e medidores do Prometheus
    const mockCounter = {
        inc: jest.fn(),
    };
    const mockGauge = {
        inc: jest.fn(),
        dec: jest.fn(),
    };
    const mockHistogram = {
        observe: jest.fn(),
    };
    const mockRegistry = {
        metrics: jest.fn().mockResolvedValue('metrics_data'),
        registerMetric: jest.fn(),
        clear: jest.fn(),
    };
    beforeEach(async () => {
        jest.clearAllMocks();
        // Restaurar os mocks originais
        jest.spyOn(client, 'Counter').mockImplementation(() => mockCounter);
        jest.spyOn(client, 'Gauge').mockImplementation(() => mockGauge);
        jest
            .spyOn(client, 'Histogram')
            .mockImplementation(() => mockHistogram);
        jest
            .spyOn(client, 'Registry')
            .mockImplementation(() => mockRegistry);
        jest.spyOn(client, 'collectDefaultMetrics').mockImplementation(() => { });
        const module = await testing_1.Test.createTestingModule({
            providers: [metrics_service_1.MetricsService],
        }).compile();
        service = module.get(metrics_service_1.MetricsService);
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
    describe('constructor', () => {
        it('deve inicializar o registro e as métricas padrão', () => {
            expect(client.Registry).toHaveBeenCalled();
            expect(client.collectDefaultMetrics).toHaveBeenCalled();
            // Verificar se os contadores e medidores foram criados com os parâmetros corretos
            // Sem verificar os valores exatos, pois a implementação pode mudar
            expect(client.Counter).toHaveBeenCalled();
            expect(client.Histogram).toHaveBeenCalled();
            expect(client.Gauge).toHaveBeenCalled();
        });
    });
    describe('recordHttpRequest', () => {
        it('deve incrementar o contador de requisições HTTP', () => {
            service.recordHttpRequest('GET', '/api/cidadaos', 200);
            expect(mockCounter.inc).toHaveBeenCalled();
        });
    });
    describe('recordHttpRequestDuration', () => {
        it('deve registrar a duração de uma requisição HTTP', () => {
            service.recordHttpRequestDuration('POST', '/api/cidadaos', 200, 0.5);
            expect(mockHistogram.observe).toHaveBeenCalled();
        });
    });
    describe('incrementHttpRequestsInProgress', () => {
        it('deve incrementar o medidor de requisições em andamento', () => {
            service.incrementHttpRequestsInProgress('PUT', '/api/cidadaos/1');
            expect(mockGauge.inc).toHaveBeenCalled();
        });
    });
    describe('decrementHttpRequestsInProgress', () => {
        it('deve decrementar o medidor de requisições em andamento', () => {
            service.decrementHttpRequestsInProgress('DELETE', '/api/cidadaos/1');
            expect(mockGauge.dec).toHaveBeenCalled();
        });
    });
    describe('getMetrics', () => {
        it('deve retornar as métricas coletadas', async () => {
            const result = await service.getMetrics();
            expect(result).toBe('metrics_data');
            expect(mockRegistry.metrics).toHaveBeenCalled();
        });
    });
    describe('recordDatabaseQuery', () => {
        it('deve incrementar o contador de consultas ao banco de dados', () => {
            service.recordDatabaseQuery('Usuario', 'SELECT');
            expect(mockCounter.inc).toHaveBeenCalled();
        });
    });
    describe('recordDatabaseQueryDuration', () => {
        it('deve registrar a duração de uma consulta ao banco de dados', () => {
            service.recordDatabaseQueryDuration('Usuario', 'SELECT', 0.3);
            expect(mockHistogram.observe).toHaveBeenCalled();
        });
    });
    describe('getRegister', () => {
        it('deve retornar o registro de métricas', () => {
            const result = service.getRegister();
            expect(result).toBe(mockRegistry);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,