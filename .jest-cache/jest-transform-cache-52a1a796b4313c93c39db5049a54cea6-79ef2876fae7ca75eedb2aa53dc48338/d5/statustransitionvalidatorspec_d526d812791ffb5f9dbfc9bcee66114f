25e2494f2c0bd78c982fc97248f479a5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const status_transition_validator_1 = require("../../../validators/status-transition-validator");
const status_pagamento_enum_1 = require("../../../enums/status-pagamento.enum");
describe('StatusTransitionValidator', () => {
    let validator;
    beforeEach(() => {
        validator = new status_transition_validator_1.StatusTransitionValidator();
    });
    describe('canTransition', () => {
        it('deve permitir transição de AGENDADO para LIBERADO', () => {
            const result = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(result.allowed).toBeTruthy();
            expect(result.message).toBe('Transição permitida');
        });
        it('deve permitir transição de LIBERADO para CONFIRMADO', () => {
            const result = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(result.allowed).toBeTruthy();
            expect(result.message).toBe('Transição permitida');
        });
        it('deve permitir transição de AGENDADO para CANCELADO', () => {
            const result = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(result.allowed).toBeTruthy();
            expect(result.message).toBe('Transição permitida');
        });
        it('deve permitir transição de LIBERADO para CANCELADO', () => {
            const result = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(result.allowed).toBeTruthy();
            expect(result.message).toBe('Transição permitida');
        });
        it('deve rejeitar transição de CONFIRMADO para LIBERADO', () => {
            const result = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(result.allowed).toBeFalsy();
            expect(result.message).toContain('não permitida');
        });
        it('deve rejeitar transição de CANCELADO para qualquer outro status', () => {
            const resultParaLiberado = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            const resultParaConfirmado = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            const resultParaAgendado = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            expect(resultParaLiberado.allowed).toBeFalsy();
            expect(resultParaConfirmado.allowed).toBeFalsy();
            expect(resultParaAgendado.allowed).toBeFalsy();
        });
        it('deve rejeitar transição para o mesmo status', () => {
            const resultAgendado = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            const resultLiberado = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(resultAgendado.allowed).toBeFalsy();
            expect(resultLiberado.allowed).toBeFalsy();
            expect(resultAgendado.message).toContain('mesmo status');
            expect(resultLiberado.message).toContain('mesmo status');
        });
        it('deve rejeitar transição para status inválido', () => {
            const result = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, 'STATUS_INEXISTENTE');
            expect(result.allowed).toBeFalsy();
            expect(result.message).toContain('inválido');
        });
        it('deve rejeitar transição de CONFIRMADO para CANCELADO', () => {
            const result = validator.canTransition(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(result.allowed).toBeFalsy();
            expect(result.message).toContain('não permitida');
        });
    });
    describe('getValidTransitions', () => {
        it('deve retornar as transições válidas para AGENDADO', () => {
            const transitions = validator.getValidTransitions(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            expect(transitions).toContain(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(transitions).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(transitions.length).toBe(2);
        });
        it('deve retornar as transições válidas para LIBERADO', () => {
            const transitions = validator.getValidTransitions(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(transitions).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(transitions).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(transitions.length).toBe(2);
        });
        it('deve retornar lista vazia para CONFIRMADO', () => {
            const transitions = validator.getValidTransitions(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(transitions.length).toBe(0);
        });
        it('deve retornar lista vazia para CANCELADO', () => {
            const transitions = validator.getValidTransitions(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(transitions.length).toBe(0);
        });
        it('deve retornar lista vazia para status inválido', () => {
            const transitions = validator.getValidTransitions('STATUS_INEXISTENTE');
            expect(transitions.length).toBe(0);
        });
    });
    describe('getTransitionMatrix', () => {
        it('deve retornar a matriz de transição completa', () => {
            const matrix = validator.getTransitionMatrix();
            // Verifica se a matriz tem a estrutura esperada
            expect(matrix).toBeDefined();
            expect(Object.keys(matrix)).toContain(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            expect(Object.keys(matrix)).toContain(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(Object.keys(matrix)).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(Object.keys(matrix)).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            // Verifica transições específicas
            expect(matrix[status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO]).toContain(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(matrix[status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO]).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(matrix[status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO].length).toBe(0);
            expect(matrix[status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO].length).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,