{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\schedule\\schedule-adapter.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\schedule\\schedule-adapter.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\n\n/**\n * Serviço adaptador para agendamento\n * \n * Este serviço implementa uma solução alternativa para o agendamento de tarefas\n * enquanto resolvemos os problemas de compatibilidade com o ScheduleModule.\n */\n@Injectable()\nexport class ScheduleAdapterService {\n  private readonly logger = new Logger(ScheduleAdapterService.name);\n  private intervals: Map<string, NodeJS.Timeout> = new Map();\n  private timeouts: Map<string, NodeJS.Timeout> = new Map();\n\n  /**\n   * Agenda uma tarefa para ser executada em intervalos regulares\n   * \n   * @param name Nome único para identificar a tarefa\n   * @param milliseconds Intervalo em milissegundos\n   * @param callback Função a ser executada\n   */\n  scheduleInterval(name: string, milliseconds: number, callback: () => Promise<void>): void {\n    // Cancela o intervalo existente, se houver\n    this.cancelInterval(name);\n    \n    // Cria um novo intervalo\n    const interval = setInterval(async () => {\n      try {\n        await callback();\n      } catch (error) {\n        this.logger.error(`Erro ao executar tarefa agendada ${name}: ${error.message}`);\n      }\n    }, milliseconds);\n    \n    // Armazena o intervalo para referência futura\n    this.intervals.set(name, interval);\n    this.logger.log(`Tarefa ${name} agendada para executar a cada ${milliseconds}ms`);\n  }\n\n  /**\n   * Cancela uma tarefa agendada\n   * \n   * @param name Nome da tarefa a ser cancelada\n   */\n  cancelInterval(name: string): void {\n    const interval = this.intervals.get(name);\n    if (interval) {\n      clearInterval(interval);\n      this.intervals.delete(name);\n      this.logger.log(`Tarefa ${name} cancelada`);\n    }\n  }\n\n  /**\n   * Agenda uma tarefa para ser executada diariamente em um horário específico\n   * \n   * @param name Nome único para identificar a tarefa\n   * @param hour Hora do dia (0-23)\n   * @param minute Minuto (0-59)\n   * @param callback Função a ser executada\n   */\n  scheduleDailyTask(name: string, hour: number, minute: number, callback: () => Promise<void>): void {\n    this.cancelInterval(name);\n    \n    const calculateNextRun = (): number => {\n      const now = new Date();\n      const nextRun = new Date(\n        now.getFullYear(),\n        now.getMonth(),\n        now.getDate(),\n        hour,\n        minute,\n        0\n      );\n      \n      // Se o horário já passou hoje, agendar para amanhã\n      if (nextRun.getTime() <= now.getTime()) {\n        nextRun.setDate(nextRun.getDate() + 1);\n      }\n      \n      return nextRun.getTime() - now.getTime();\n    };\n    \n    const scheduleNext = () => {\n      const timeUntilNextRun = calculateNextRun();\n      \n      const timeout = setTimeout(async () => {\n        try {\n          await callback();\n        } catch (error) {\n          this.logger.error(`Erro ao executar tarefa diária ${name}: ${error.message}`);\n        }\n        \n        // Agenda a próxima execução\n        scheduleNext();\n      }, timeUntilNextRun);\n      \n      this.intervals.set(name, timeout as unknown as NodeJS.Timeout);\n      this.logger.log(`Tarefa diária ${name} agendada para executar em ${Math.floor(timeUntilNextRun / 1000 / 60)} minutos`);\n    };\n    \n    // Inicia o agendamento\n    scheduleNext();\n  }\n  \n  /**\n   * Agenda uma tarefa para ser executada uma única vez em uma data específica\n   * \n   * @param name Nome único para identificar a tarefa\n   * @param date Data e hora para execução da tarefa\n   * @param callback Função a ser executada\n   */\n  scheduleOnce(name: string, date: Date, callback: () => Promise<void>): void {\n    // Cancela o timeout existente, se houver\n    this.cancelTimeout(name);\n    \n    const now = new Date();\n    const delay = date.getTime() - now.getTime();\n    \n    if (delay <= 0) {\n      // Se a data já passou, executar imediatamente\n      callback().catch(error => {\n        this.logger.error(`Erro ao executar tarefa agendada ${name}: ${error.message}`);\n      });\n      return;\n    }\n    \n    // Criar um novo timeout\n    const timeout = setTimeout(async () => {\n      try {\n        await callback();\n        // Remover da lista após execução\n        this.timeouts.delete(name);\n      } catch (error) {\n        this.logger.error(`Erro ao executar tarefa agendada ${name}: ${error.message}`);\n      }\n    }, delay);\n    \n    // Armazenar o timeout para referência futura\n    this.timeouts.set(name, timeout);\n    this.logger.log(`Tarefa ${name} agendada para executar em ${new Date(now.getTime() + delay).toISOString()}`);\n  }\n  \n  /**\n   * Cancela um timeout agendado\n   * \n   * @param name Nome da tarefa a ser cancelada\n   */\n  cancelTimeout(name: string): void {\n    const timeout = this.timeouts.get(name);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.timeouts.delete(name);\n      this.logger.log(`Timeout ${name} cancelado`);\n    }\n  }\n}\n"],"version":3}