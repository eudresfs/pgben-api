ea5089a888708be119d0932d85ff2417
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificacaoConflitoPapelResponseDto = exports.VerificacaoConflitoPapelDto = void 0;
const class_validator_1 = require("class-validator");
const swagger_1 = require("@nestjs/swagger");
const cpf_validator_1 = require("../validators/cpf-validator");
/**
 * DTO para verificação de conflito de papéis
 */
class VerificacaoConflitoPapelDto {
    cpf;
}
exports.VerificacaoConflitoPapelDto = VerificacaoConflitoPapelDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'CPF do cidadão a ser verificado',
        example: '12345678901',
        required: true,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'CPF é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'CPF deve ser uma string' }),
    (0, class_validator_1.Length)(11, 14, { message: 'CPF deve ter entre 11 e 14 caracteres' }),
    (0, class_validator_1.Validate)(cpf_validator_1.CPFValidator, { message: 'CPF inválido' }),
    __metadata("design:type", String)
], VerificacaoConflitoPapelDto.prototype, "cpf", void 0);
/**
 * DTO para resposta de verificação de conflito de papéis
 */
class VerificacaoConflitoPapelResponseDto {
    temConflito;
    tipoPapelAtual;
    composicaoFamiliarId;
    cidadaoId;
    detalhes;
}
exports.VerificacaoConflitoPapelResponseDto = VerificacaoConflitoPapelResponseDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se existe conflito de papéis',
        example: true,
    }),
    __metadata("design:type", Boolean)
], VerificacaoConflitoPapelResponseDto.prototype, "temConflito", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tipo de papel atual do cidadão, se houver',
        example: 'BENEFICIARIO',
        required: false,
    }),
    __metadata("design:type", String)
], VerificacaoConflitoPapelResponseDto.prototype, "tipoPapelAtual", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID da composição familiar, se o cidadão estiver em uma',
        example: '550e8400-e29b-41d4-a716-446655440000',
        required: false,
    }),
    __metadata("design:type", String)
], VerificacaoConflitoPapelResponseDto.prototype, "composicaoFamiliarId", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID do cidadão, se encontrado',
        example: '550e8400-e29b-41d4-a716-446655440000',
        required: false,
    }),
    __metadata("design:type", String)
], VerificacaoConflitoPapelResponseDto.prototype, "cidadaoId", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Detalhes adicionais sobre o resultado da verificação',
        example: 'Cidadão é beneficiário e também está na composição familiar do cidadão X',
        required: false,
    }),
    __metadata("design:type", String)
], VerificacaoConflitoPapelResponseDto.prototype, "detalhes", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNpZGFkYW9cXGR0b1xcdmVyaWZpY2FjYW8tY29uZmxpdG8tcGFwZWwuZHRvLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHFEQUF5RTtBQUN6RSw2Q0FBOEM7QUFDOUMsK0RBQTJEO0FBRTNEOztHQUVHO0FBQ0gsTUFBYSwyQkFBMkI7SUFVdEMsR0FBRyxDQUFTO0NBQ2I7QUFYRCxrRUFXQztBQURDO0lBVEMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUFFLGlDQUFpQztRQUM5QyxPQUFPLEVBQUUsYUFBYTtRQUN0QixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUM7SUFDRCxJQUFBLDRCQUFVLEVBQUMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQztJQUM1QyxJQUFBLDBCQUFRLEVBQUMsRUFBRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQztJQUNoRCxJQUFBLHdCQUFNLEVBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxDQUFDO0lBQ3BFLElBQUEsMEJBQVEsRUFBQyw0QkFBWSxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDOzt3REFDeEM7QUFHZDs7R0FFRztBQUNILE1BQWEsbUNBQW1DO0lBSzlDLFdBQVcsQ0FBVTtJQU9yQixjQUFjLENBQVU7SUFPeEIsb0JBQW9CLENBQVU7SUFPOUIsU0FBUyxDQUFVO0lBUW5CLFFBQVEsQ0FBVTtDQUNuQjtBQW5DRCxrRkFtQ0M7QUE5QkM7SUFKQyxJQUFBLHFCQUFXLEVBQUM7UUFDWCxXQUFXLEVBQUUscUNBQXFDO1FBQ2xELE9BQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQzs7d0VBQ21CO0FBT3JCO0lBTEMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUFFLDJDQUEyQztRQUN4RCxPQUFPLEVBQUUsY0FBYztRQUN2QixRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDOzsyRUFDc0I7QUFPeEI7SUFMQyxJQUFBLHFCQUFXLEVBQUM7UUFDWCxXQUFXLEVBQUUsd0RBQXdEO1FBQ3JFLE9BQU8sRUFBRSxzQ0FBc0M7UUFDL0MsUUFBUSxFQUFFLEtBQUs7S0FDaEIsQ0FBQzs7aUZBQzRCO0FBTzlCO0lBTEMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUFFLDhCQUE4QjtRQUMzQyxPQUFPLEVBQUUsc0NBQXNDO1FBQy9DLFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUM7O3NFQUNpQjtBQVFuQjtJQU5DLElBQUEscUJBQVcsRUFBQztRQUNYLFdBQVcsRUFBRSxzREFBc0Q7UUFDbkUsT0FBTyxFQUNMLDBFQUEwRTtRQUM1RSxRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDOztxRUFDZ0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNpZGFkYW9cXGR0b1xcdmVyaWZpY2FjYW8tY29uZmxpdG8tcGFwZWwuZHRvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElzTm90RW1wdHksIElzU3RyaW5nLCBMZW5ndGgsIFZhbGlkYXRlIH0gZnJvbSAnY2xhc3MtdmFsaWRhdG9yJztcbmltcG9ydCB7IEFwaVByb3BlcnR5IH0gZnJvbSAnQG5lc3Rqcy9zd2FnZ2VyJztcbmltcG9ydCB7IENQRlZhbGlkYXRvciB9IGZyb20gJy4uL3ZhbGlkYXRvcnMvY3BmLXZhbGlkYXRvcic7XG5cbi8qKlxuICogRFRPIHBhcmEgdmVyaWZpY2HDp8OjbyBkZSBjb25mbGl0byBkZSBwYXDDqWlzXG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJpZmljYWNhb0NvbmZsaXRvUGFwZWxEdG8ge1xuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnQ1BGIGRvIGNpZGFkw6NvIGEgc2VyIHZlcmlmaWNhZG8nLFxuICAgIGV4YW1wbGU6ICcxMjM0NTY3ODkwMScsXG4gICAgcmVxdWlyZWQ6IHRydWUsXG4gIH0pXG4gIEBJc05vdEVtcHR5KHsgbWVzc2FnZTogJ0NQRiDDqSBvYnJpZ2F0w7NyaW8nIH0pXG4gIEBJc1N0cmluZyh7IG1lc3NhZ2U6ICdDUEYgZGV2ZSBzZXIgdW1hIHN0cmluZycgfSlcbiAgQExlbmd0aCgxMSwgMTQsIHsgbWVzc2FnZTogJ0NQRiBkZXZlIHRlciBlbnRyZSAxMSBlIDE0IGNhcmFjdGVyZXMnIH0pXG4gIEBWYWxpZGF0ZShDUEZWYWxpZGF0b3IsIHsgbWVzc2FnZTogJ0NQRiBpbnbDoWxpZG8nIH0pXG4gIGNwZjogc3RyaW5nO1xufVxuXG4vKipcbiAqIERUTyBwYXJhIHJlc3Bvc3RhIGRlIHZlcmlmaWNhw6fDo28gZGUgY29uZmxpdG8gZGUgcGFww6lpc1xuICovXG5leHBvcnQgY2xhc3MgVmVyaWZpY2FjYW9Db25mbGl0b1BhcGVsUmVzcG9uc2VEdG8ge1xuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnSW5kaWNhIHNlIGV4aXN0ZSBjb25mbGl0byBkZSBwYXDDqWlzJyxcbiAgICBleGFtcGxlOiB0cnVlLFxuICB9KVxuICB0ZW1Db25mbGl0bzogYm9vbGVhbjtcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnVGlwbyBkZSBwYXBlbCBhdHVhbCBkbyBjaWRhZMOjbywgc2UgaG91dmVyJyxcbiAgICBleGFtcGxlOiAnQkVORUZJQ0lBUklPJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gIH0pXG4gIHRpcG9QYXBlbEF0dWFsPzogc3RyaW5nO1xuXG4gIEBBcGlQcm9wZXJ0eSh7XG4gICAgZGVzY3JpcHRpb246ICdJRCBkYSBjb21wb3Npw6fDo28gZmFtaWxpYXIsIHNlIG8gY2lkYWTDo28gZXN0aXZlciBlbSB1bWEnLFxuICAgIGV4YW1wbGU6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAnLFxuICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgfSlcbiAgY29tcG9zaWNhb0ZhbWlsaWFySWQ/OiBzdHJpbmc7XG5cbiAgQEFwaVByb3BlcnR5KHtcbiAgICBkZXNjcmlwdGlvbjogJ0lEIGRvIGNpZGFkw6NvLCBzZSBlbmNvbnRyYWRvJyxcbiAgICBleGFtcGxlOiAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gIH0pXG4gIGNpZGFkYW9JZD86IHN0cmluZztcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnRGV0YWxoZXMgYWRpY2lvbmFpcyBzb2JyZSBvIHJlc3VsdGFkbyBkYSB2ZXJpZmljYcOnw6NvJyxcbiAgICBleGFtcGxlOlxuICAgICAgJ0NpZGFkw6NvIMOpIGJlbmVmaWNpw6FyaW8gZSB0YW1iw6ltIGVzdMOhIG5hIGNvbXBvc2nDp8OjbyBmYW1pbGlhciBkbyBjaWRhZMOjbyBYJyxcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gIH0pXG4gIGRldGFsaGVzPzogc3RyaW5nO1xufVxuIl0sInZlcnNpb24iOjN9