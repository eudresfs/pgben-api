{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\tests\\minio.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\tests\\minio.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { MinioService } from '../minio.service';\nimport { CriptografiaService } from '../criptografia.service';\nimport { ConfigService } from '@nestjs/config';\n\n// Mocks para os testes\nconst mockCriptografiaService = {\n  criptografarBuffer: jest.fn(),\n  descriptografarBuffer: jest.fn(),\n  gerarHash: jest.fn(),\n  verificarHash: jest.fn(),\n};\n\nconst mockMinioClient = {\n  bucketExists: jest.fn().mockResolvedValue(true),\n  makeBucket: jest.fn().mockResolvedValue(true),\n};\n\n// Mock do módulo minio\njest.mock('minio', () => ({\n  Client: jest.fn().mockImplementation(() => mockMinioClient),\n}));\n\ndescribe('MinioService', () => {\n  let service: MinioService;\n\n  beforeEach(async () => {\n    // Configura o módulo de teste\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        MinioService,\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn(\n              (key: string, defaultValue?: any) =>\n                ({\n                  MINIO_BUCKET: 'documents',\n                  MINIO_ENDPOINT: 'localhost',\n                  MINIO_PORT: 9000,\n                  MINIO_USE_SSL: false,\n                  MINIO_ACCESS_KEY: 'minioadmin',\n                  MINIO_SECRET_KEY: 'minioadmin',\n                })[key] || defaultValue,\n            ),\n          },\n        },\n        {\n          provide: CriptografiaService,\n          useValue: mockCriptografiaService,\n        },\n      ],\n    }).compile();\n\n    // Obtém a instância do serviço\n    service = module.get<MinioService>(MinioService);\n\n    // Inicializa o serviço\n    await service.onModuleInit();\n  });\n\n  afterEach(() => {\n    // Limpa todos os mocks após cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    // Verifica apenas se o serviço foi criado corretamente\n    expect(service).toBeDefined();\n  });\n\n  describe('uploadArquivo', () => {\n    beforeEach(() => {\n      // Configura os mocks padrão para os testes de upload\n      mockCriptografiaService.gerarHash.mockReturnValue('hash-do-arquivo');\n      mockCriptografiaService.criptografarBuffer.mockReturnValue({\n        dadosCriptografados: Buffer.from('conteúdo criptografado'),\n        iv: Buffer.from('iv'),\n        authTag: Buffer.from('authTag'),\n      });\n    });\n\n    it('deve fazer upload de um arquivo não sensível sem criptografia', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeOriginal = 'documento.pdf';\n      const solicitacaoId = '123';\n      const tipoDocumento = 'COMPROVANTE';\n\n      const nomeArquivo = `${solicitacaoId}/${tipoDocumento}/timestamp-random.pdf`;\n      const hash = 'hash-do-arquivo';\n\n      mockCriptografiaService.gerarHash.mockReturnValue(hash);\n      mockMinioClient.putObject.mockResolvedValue({ etag: 'etag-do-arquivo' });\n\n      // Act\n      const resultado = await service.uploadArquivo(\n        buffer,\n        nomeOriginal,\n        solicitacaoId,\n        tipoDocumento,\n      );\n\n      // Assert\n      expect(mockCriptografiaService.gerarHash).toHaveBeenCalledWith(buffer);\n      expect(mockMinioClient.putObject).toHaveBeenCalledWith(\n        'documents',\n        expect.stringContaining(`${solicitacaoId}/${tipoDocumento}`),\n        buffer,\n        buffer.length,\n        expect.objectContaining({\n          'Content-Type': 'application/pdf',\n          'X-Amz-Meta-Original-Name': nomeOriginal,\n          'X-Amz-Meta-Hash': hash,\n          'X-Amz-Meta-Encrypted': 'false',\n        }),\n      );\n\n      expect(resultado).toEqual({\n        nomeArquivo: expect.stringContaining(\n          `${solicitacaoId}/${tipoDocumento}`,\n        ),\n        tamanho: buffer.length,\n        hash,\n        criptografado: false,\n        metadados: expect.any(Object),\n      });\n    });\n\n    it('deve fazer upload de um arquivo sensível com criptografia', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo do arquivo de teste');\n      const nomeOriginal = 'documento-sensivel.pdf';\n      const solicitacaoId = '123';\n      const tipoDocumento = 'LAUDO_MEDICO'; // Usando um tipo de documento da lista de documentos sensíveis\n\n      const hash = 'hash-do-arquivo';\n      mockCriptografiaService.gerarHash.mockReturnValue(hash);\n\n      const dadosCriptografados = Buffer.from('dados criptografados');\n      const iv = Buffer.from('iv-de-teste');\n      const authTag = Buffer.from('auth-tag-de-teste');\n      mockCriptografiaService.criptografarBuffer.mockReturnValue({\n        dadosCriptografados,\n        iv,\n        authTag,\n      });\n\n      const etag = 'etag-do-arquivo-criptografado';\n      mockMinioClient.putObject.mockResolvedValue({ etag });\n\n      // Act\n      const resultado = await service.uploadArquivo(\n        buffer,\n        nomeOriginal,\n        solicitacaoId,\n        tipoDocumento,\n      );\n\n      // Assert\n      expect(mockCriptografiaService.gerarHash).toHaveBeenCalledWith(buffer);\n      expect(mockCriptografiaService.criptografarBuffer).toHaveBeenCalledWith(\n        buffer,\n      );\n      expect(mockMinioClient.putObject).toHaveBeenCalledWith(\n        'documents',\n        expect.stringContaining(`${solicitacaoId}/${tipoDocumento}`),\n        dadosCriptografados,\n        dadosCriptografados.length,\n        expect.objectContaining({\n          'Content-Type': 'application/pdf',\n          'X-Amz-Meta-Original-Name': nomeOriginal,\n          'X-Amz-Meta-Hash': hash,\n          'X-Amz-Meta-Encrypted': 'true',\n          'X-Amz-Meta-IV': iv.toString('base64'),\n          'X-Amz-Meta-AuthTag': authTag.toString('base64'),\n        }),\n      );\n\n      expect(resultado).toEqual({\n        nomeArquivo: expect.stringContaining(\n          `${solicitacaoId}/${tipoDocumento}`,\n        ),\n        tamanho: buffer.length, // Tamanho original, não o criptografado\n        hash,\n        criptografado: true,\n        metadados: expect.any(Object),\n      });\n    });\n  });\n\n  describe('downloadArquivo', () => {\n    it('deve baixar um arquivo não criptografado', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/documento.pdf';\n      const buffer = Buffer.from('conteúdo do arquivo de teste');\n      const hash = 'hash-do-arquivo';\n\n      // Mock do statObject\n      mockMinioClient.statObject.mockResolvedValue({\n        metaData: {\n          'x-amz-meta-hash': hash,\n          'x-amz-meta-encrypted': 'false',\n          'x-amz-meta-original-name': 'documento.pdf',\n          'content-type': 'application/pdf',\n          'x-amz-meta-tipodocumento': 'COMPROVANTE',\n          'x-amz-meta-solicitacaoid': '123',\n        },\n        size: buffer.length,\n      });\n\n      // Mock do fGetObject para simular o download do arquivo\n      mockMinioClient.fGetObject.mockImplementation(\n        (bucket, file, filePath) => {\n          // Simula a criação do arquivo temporário\n          fs.writeFileSync(filePath, buffer);\n          return Promise.resolve();\n        },\n      );\n\n      // Mock do fs.readFileSync para simular a leitura do arquivo baixado\n      jest.spyOn(fs, 'readFileSync').mockReturnValue(buffer);\n\n      // Mock do fs.unlinkSync para simular a remoção do arquivo temporário\n      jest.spyOn(fs, 'unlinkSync').mockImplementation(() => {});\n\n      mockCriptografiaService.gerarHash.mockReturnValue(hash);\n\n      // Act\n      const resultado = await service.downloadArquivo(nomeArquivo);\n\n      // Assert\n      expect(mockMinioClient.statObject).toHaveBeenCalledWith(\n        'documents',\n        nomeArquivo,\n      );\n\n      expect(mockMinioClient.fGetObject).toHaveBeenCalledWith(\n        'documents',\n        nomeArquivo,\n        expect.stringContaining(\n          path.join(require('os').tmpdir(), 'pgben-temp'),\n        ),\n      );\n\n      expect(mockCriptografiaService.gerarHash).toHaveBeenCalledWith(buffer);\n\n      // Verifica se o arquivo temporário foi removido\n      expect(fs.unlinkSync).toHaveBeenCalled();\n\n      expect(resultado).toEqual({\n        arquivo: buffer,\n        metadados: {\n          nomeOriginal: 'documento.pdf',\n          contentType: 'application/pdf',\n          tipoDocumento: 'COMPROVANTE',\n          solicitacaoId: '123',\n          tamanho: buffer.length,\n          criptografado: false,\n        },\n      });\n    });\n\n    it('deve baixar e descriptografar um arquivo criptografado', async () => {\n      // Arrange\n      const nomeArquivo = '123/laudo-medico/documento-sensivel.pdf';\n      const bufferCriptografado = Buffer.from('conteúdo criptografado');\n      const bufferDescriptografado = Buffer.from('conteúdo original');\n      const hash = 'hash-do-arquivo';\n      const iv = 'aXYtZGUtdGVzdGU=';\n      const authTag = 'YXV0aC10YWctZGUtdGVzdGU=';\n\n      // Mock do statObject\n      mockMinioClient.statObject.mockResolvedValue({\n        metaData: {\n          'x-amz-meta-hash': hash,\n          'x-amz-meta-encrypted': 'true',\n          'x-amz-meta-iv': iv,\n          'x-amz-meta-authtag': authTag,\n          'x-amz-meta-original-name': 'documento-sensivel.pdf',\n          'content-type': 'application/pdf',\n        },\n        size: bufferCriptografado.length,\n      });\n\n      // Mock do fGetObject para simular o download do arquivo\n      mockMinioClient.fGetObject.mockImplementation((bucket, file, path) => {\n        // Simula a criação do arquivo temporário\n        fs.writeFileSync(path, bufferCriptografado);\n        return Promise.resolve();\n      });\n\n      // Mock do fs.readFileSync para simular a leitura do arquivo baixado\n      jest.spyOn(fs, 'readFileSync').mockReturnValue(bufferCriptografado);\n\n      mockCriptografiaService.descriptografarBuffer.mockReturnValue(\n        bufferDescriptografado,\n      );\n      mockCriptografiaService.gerarHash.mockReturnValue(hash);\n\n      // Act\n      const resultado = await service.downloadArquivo(nomeArquivo);\n\n      // Assert\n      expect(mockMinioClient.statObject).toHaveBeenCalledWith(\n        'documents',\n        nomeArquivo,\n      );\n\n      expect(mockMinioClient.fGetObject).toHaveBeenCalledWith(\n        'documents',\n        nomeArquivo,\n        expect.any(String),\n      );\n\n      expect(\n        mockCriptografiaService.descriptografarBuffer,\n      ).toHaveBeenCalledWith(\n        bufferCriptografado,\n        Buffer.from(iv, 'base64'),\n        Buffer.from(authTag, 'base64'),\n      );\n\n      expect(mockCriptografiaService.gerarHash).toHaveBeenCalledWith(\n        bufferDescriptografado,\n      );\n\n      expect(resultado).toEqual({\n        arquivo: bufferDescriptografado,\n        metadados: {\n          nomeOriginal: 'documento-sensivel.pdf',\n          contentType: 'application/pdf',\n          tamanho: bufferDescriptografado.length,\n          criptografado: true,\n        },\n      });\n    });\n\n    it('deve lançar erro quando a integridade do arquivo é comprometida', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/documento.pdf';\n      const buffer = Buffer.from('conteúdo do arquivo de teste');\n      const hashCorreto = 'hash-correto';\n      const hashIncorreto = 'hash-incorreto';\n\n      // Mock do statObject\n      mockMinioClient.statObject.mockResolvedValue({\n        metaData: {\n          'x-amz-meta-hash': hashCorreto,\n          'x-amz-meta-encrypted': 'false',\n          'x-amz-meta-original-name': 'documento.pdf',\n          'content-type': 'application/pdf',\n        },\n        size: buffer.length,\n      });\n\n      // Mock do fGetObject para simular o download do arquivo\n      mockMinioClient.fGetObject.mockImplementation((bucket, file, path) => {\n        // Simula a criação do arquivo temporário\n        fs.writeFileSync(path, buffer);\n        return Promise.resolve();\n      });\n\n      // Mock do fs.readFileSync para simular a leitura do arquivo baixado\n      jest.spyOn(fs, 'readFileSync').mockReturnValue(buffer);\n\n      // Configurar o mock para retornar um hash diferente do esperado\n      mockCriptografiaService.gerarHash.mockReturnValue(hashIncorreto);\n\n      // Act & Assert\n      await expect(service.downloadArquivo(nomeArquivo)).rejects.toThrow(\n        /A integridade do documento foi comprometida/,\n      );\n    });\n  });\n\n  describe('removerArquivo', () => {\n    it('deve remover um arquivo do MinIO', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/documento.pdf';\n      mockMinioClient.removeObject.mockResolvedValue(true);\n\n      // Act\n      await service.removerArquivo(nomeArquivo);\n\n      // Assert\n      expect(mockMinioClient.removeObject).toHaveBeenCalledWith(\n        'documents',\n        nomeArquivo,\n      );\n    });\n\n    it('deve lançar erro ao tentar remover um arquivo que não existe', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/inexistente.pdf';\n      const error = new Error('Arquivo não encontrado');\n      mockMinioClient.removeObject.mockRejectedValue(error);\n\n      // Act & Assert\n      await expect(service.removerArquivo(nomeArquivo)).rejects.toThrow(\n        `Erro ao remover o arquivo ${nomeArquivo}: ${error.message}`,\n      );\n    });\n\n    it('deve verificar se o bucket existe antes de remover', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/documento.pdf';\n      mockMinioClient.bucketExists.mockResolvedValue(true);\n      mockMinioClient.removeObject.mockResolvedValue(true);\n\n      // Act\n      await service.removerArquivo(nomeArquivo);\n\n      // Assert\n      expect(mockMinioClient.bucketExists).toHaveBeenCalledWith('documents');\n    });\n\n    it('deve criar o bucket se não existir ao tentar remover', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/documento.pdf';\n      mockMinioClient.bucketExists.mockResolvedValue(false);\n      mockMinioClient.makeBucket.mockResolvedValue(true);\n      mockMinioClient.removeObject.mockResolvedValue(true);\n\n      // Act\n      await service.removerArquivo(nomeArquivo);\n\n      // Assert\n      expect(mockMinioClient.makeBucket).toHaveBeenCalledWith(\n        'documents',\n        'us-east-1',\n      );\n    });\n  });\n\n  describe('validação de parâmetros', () => {\n    it('deve lançar erro ao tentar fazer upload sem buffer', async () => {\n      // Arrange\n      const buffer = undefined as unknown as Buffer;\n      const nomeOriginal = 'documento.pdf';\n      const solicitacaoId = '123';\n      const tipoDocumento = 'COMPROVANTE';\n\n      // Act & Assert\n      await expect(\n        service.uploadArquivo(\n          buffer,\n          nomeOriginal,\n          solicitacaoId,\n          tipoDocumento,\n        ),\n      ).rejects.toThrow(\n        \"Falha ao armazenar documento: Cannot read properties of undefined (reading 'length')\",\n      );\n    });\n\n    it('deve fazer upload com sucesso mesmo sem nome de arquivo', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeOriginal = '';\n      const solicitacaoId = '123';\n      const tipoDocumento = 'COMPROVANTE';\n\n      mockMinioClient.putObject.mockResolvedValue({ etag: 'etag-do-arquivo' });\n\n      // Act\n      const resultado = await service.uploadArquivo(\n        buffer,\n        nomeOriginal,\n        solicitacaoId,\n        tipoDocumento,\n      );\n\n      // Assert\n      expect(resultado).toBeDefined();\n      expect(resultado.nomeArquivo).toContain(solicitacaoId);\n      expect(resultado.nomeArquivo).toContain(tipoDocumento);\n      expect(resultado.metadados.nomeOriginal).toBe(nomeOriginal);\n    });\n\n    it('deve fazer upload com sucesso mesmo sem ID da solicitação', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeOriginal = 'documento.pdf';\n      const solicitacaoId = '';\n      const tipoDocumento = 'COMPROVANTE';\n\n      mockMinioClient.putObject.mockResolvedValue({ etag: 'etag-do-arquivo' });\n\n      // Act\n      const resultado = await service.uploadArquivo(\n        buffer,\n        nomeOriginal,\n        solicitacaoId,\n        tipoDocumento,\n      );\n\n      // Assert\n      expect(resultado).toBeDefined();\n      expect(resultado.nomeArquivo).toContain(tipoDocumento);\n      expect(resultado.metadados.solicitacaoId).toBe(solicitacaoId);\n    });\n\n    it('deve fazer upload com sucesso mesmo sem tipo de documento', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeOriginal = 'documento.pdf';\n      const solicitacaoId = '123';\n      const tipoDocumento = '';\n\n      mockMinioClient.putObject.mockResolvedValue({ etag: 'etag-do-arquivo' });\n\n      // Act\n      const resultado = await service.uploadArquivo(\n        buffer,\n        nomeOriginal,\n        solicitacaoId,\n        tipoDocumento,\n      );\n\n      // Assert\n      expect(resultado).toBeDefined();\n      expect(resultado.nomeArquivo).toContain(solicitacaoId);\n      expect(resultado.metadados.tipoDocumento).toBe(tipoDocumento);\n    });\n  });\n\n  describe('tratamentoDeErros', () => {\n    it('deve lançar erro quando o upload falhar', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo do arquivo');\n      const nomeOriginal = 'documento.pdf';\n      const error = new Error('Falha no upload');\n      mockMinioClient.putObject.mockRejectedValue(error);\n\n      // Act & Assert\n      await expect(\n        service.uploadArquivo(buffer, nomeOriginal, '123', 'COMPROVANTE'),\n      ).rejects.toThrow(`Falha ao armazenar documento: ${error.message}`);\n\n      // Verifica se o logger foi chamado corretamente\n      expect(loggerErrorSpy).toHaveBeenCalledWith(\n        `Erro ao enviar arquivo para o MinIO: ${error.message}`,\n      );\n    });\n\n    it('deve lançar erro quando o download falhar', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/inexistente.pdf';\n      const error = new Error('Arquivo não encontrado');\n      mockMinioClient.getObject.mockImplementation(() => {\n        throw error;\n      });\n\n      // Act & Assert\n      await expect(service.downloadArquivo(nomeArquivo)).rejects.toThrow(\n        `Erro ao baixar o arquivo ${nomeArquivo}: ${error.message}`,\n      );\n    });\n\n    it('deve lançar erro ao gerar URL pré-assinada para arquivo inexistente', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/inexistente.pdf';\n      const error = new Error('Arquivo não encontrado');\n      mockMinioClient.statObject.mockRejectedValue(error);\n\n      // Act & Assert\n      await expect(service.gerarUrlPreAssinada(nomeArquivo)).rejects.toThrow(\n        `Erro ao gerar URL pré-assinada para ${nomeArquivo}: ${error.message}`,\n      );\n    });\n  });\n\n  describe('gerarUrlPreAssinada', () => {\n    it('deve gerar uma URL pré-assinada para acesso temporário', async () => {\n      // Arrange\n      const nomeArquivo = '123/comprovante/documento.pdf';\n      const expiracao = 3600; // 1 hora\n      const url =\n        'https://minio.exemplo.com/pgben-documentos/123/comprovante/documento.pdf?token=xyz';\n\n      mockMinioClient.presignedGetObject.mockResolvedValue(url);\n\n      // Act\n      const resultado = await service.gerarUrlPreAssinada(\n        nomeArquivo,\n        expiracao,\n      );\n\n      // Assert\n      expect(mockMinioClient.presignedGetObject).toHaveBeenCalledWith(\n        'documents',\n        nomeArquivo,\n        expiracao,\n      );\n\n      expect(resultado).toEqual(url);\n    });\n  });\n});\n"],"version":3}