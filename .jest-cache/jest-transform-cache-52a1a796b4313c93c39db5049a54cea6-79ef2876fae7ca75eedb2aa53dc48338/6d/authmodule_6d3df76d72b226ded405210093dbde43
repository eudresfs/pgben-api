85e91c0c1fe80b8dc77ecfa363aee76c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthModule = void 0;
// src/auth/auth.module.ts
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const jwt_1 = require("@nestjs/jwt");
const config_1 = require("@nestjs/config");
const cache_manager_1 = require("@nestjs/cache-manager");
const passport_1 = require("@nestjs/passport");
// Controllers
const auth_controller_1 = require("./controllers/auth.controller");
const password_reset_controller_1 = require("./controllers/password-reset.controller");
const jwt_blacklist_controller_1 = require("./controllers/jwt-blacklist.controller");
// Services
const auth_service_1 = require("./services/auth.service");
const refresh_token_service_1 = require("./services/refresh-token.service");
const password_reset_service_1 = require("./services/password-reset.service");
const jwt_blacklist_service_1 = require("./services/jwt-blacklist.service");
const permission_service_1 = require("./services/permission.service");
// Entities
const refresh_token_entity_1 = require("../entities/refresh-token.entity");
const password_reset_token_entity_1 = require("../entities/password-reset-token.entity");
const jwt_blacklist_entity_1 = require("../entities/jwt-blacklist.entity");
// Strategies
const jwt_auth_strategy_1 = require("./strategies/jwt-auth.strategy");
const jwt_refresh_strategy_1 = require("./strategies/jwt-refresh.strategy");
const local_strategy_1 = require("./strategies/local.strategy");
// Guards
const jwt_auth_guard_1 = require("./guards/jwt-auth.guard");
const roles_guard_1 = require("./guards/roles.guard");
const permission_guard_1 = require("./guards/permission.guard");
// Config
const jwt_config_1 = require("../config/jwt.config");
// Modules
const usuario_module_1 = require("../modules/usuario/usuario.module");
const common_2 = require("@nestjs/common");
const audit_module_1 = require("../audit/audit.module");
const logger_module_1 = require("../shared/logger/logger.module");
const permission_module_1 = require("./permission.module");
/**
 * Módulo de Autenticação e Autorização
 *
 * Responsável por:
 * - Autenticação JWT e local
 * - Gerenciamento de tokens de refresh
 * - Recuperação e reset de senhas
 * - Controle de permissões e roles
 * - Blacklist de tokens JWT
 */
let AuthModule = class AuthModule {
    configService;
    /**
     * Configuração opcional para desenvolvimento
     * Remove logs sensíveis em produção
     */
    constructor(configService) {
        this.configService = configService;
        const isDevelopment = this.configService.get('NODE_ENV') !== 'production';
        if (isDevelopment) {
            console.log('AuthModule initialized');
            console.log('Available guards: JWT, Roles, Permission');
            console.log('Available strategies: Local, JWT, Refresh');
        }
    }
};
exports.AuthModule = AuthModule;
exports.AuthModule = AuthModule = __decorate([
    (0, common_1.Module)({
        imports: [
            // Configuração do Passport
            passport_1.PassportModule.register({
                defaultStrategy: 'jwt',
                property: 'user',
                session: false
            }),
            // Entidades do TypeORM
            typeorm_1.TypeOrmModule.forFeature([
                refresh_token_entity_1.RefreshToken,
                password_reset_token_entity_1.PasswordResetToken,
                jwt_blacklist_entity_1.JwtBlacklist,
            ]),
            // Configuração assíncrona do JWT
            jwt_1.JwtModule.registerAsync({
                imports: [config_1.ConfigModule],
                inject: [config_1.ConfigService],
                useFactory: jwt_config_1.createJwtConfig,
                global: true, // Disponibiliza o JwtService globalmente
            }),
            // Configuração do Cache com configurações otimizadas
            cache_manager_1.CacheModule.registerAsync({
                imports: [config_1.ConfigModule],
                inject: [config_1.ConfigService],
                useFactory: (configService) => ({
                    isGlobal: true,
                    ttl: configService.get('CACHE_TTL', 5 * 60 * 1000), // 5 minutos padrão
                    max: configService.get('CACHE_MAX_ITEMS', 1000), // 1000 itens padrão
                    store: 'memory', // Explicitamente definido para clareza
                }),
            }),
            // Módulos da aplicação
            config_1.ConfigModule,
            (0, common_2.forwardRef)(() => usuario_module_1.UsuarioModule),
            (0, common_2.forwardRef)(() => audit_module_1.AuditModule),
            logger_module_1.AppLoggerModule,
            permission_module_1.PermissionModule,
        ],
        controllers: [
            auth_controller_1.AuthController,
            password_reset_controller_1.PasswordResetController,
            jwt_blacklist_controller_1.JwtBlacklistController,
        ],
        providers: [
            // Estratégias (o NestJS gerencia automaticamente com @Injectable)
            local_strategy_1.LocalStrategy,
            jwt_auth_strategy_1.JwtAuthStrategy,
            jwt_refresh_strategy_1.JwtRefreshStrategy,
            // Guards
            jwt_auth_guard_1.JwtAuthGuard,
            roles_guard_1.RolesGuard,
            permission_guard_1.PermissionGuard,
            // Serviços principais
            auth_service_1.AuthService,
            refresh_token_service_1.RefreshTokenService,
            password_reset_service_1.PasswordResetService,
            jwt_blacklist_service_1.JwtBlacklistService,
            permission_service_1.PermissionService,
        ],
        exports: [
            // Serviços essenciais para outros módulos
            auth_service_1.AuthService,
            permission_service_1.PermissionService,
            jwt_blacklist_service_1.JwtBlacklistService,
            // Guards para uso em outros módulos
            jwt_auth_guard_1.JwtAuthGuard,
            roles_guard_1.RolesGuard,
            permission_guard_1.PermissionGuard,
            // Estratégias para extensibilidade
            jwt_auth_strategy_1.JwtAuthStrategy,
            jwt_refresh_strategy_1.JwtRefreshStrategy,
            local_strategy_1.LocalStrategy,
            // Módulo JWT para uso externo
            jwt_1.JwtModule,
            // Passport para configurações avançadas
            passport_1.PassportModule,
        ],
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], AuthModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,