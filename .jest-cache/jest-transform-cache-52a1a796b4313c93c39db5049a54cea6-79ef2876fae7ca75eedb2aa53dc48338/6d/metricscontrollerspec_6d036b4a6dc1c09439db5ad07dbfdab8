a4a7c1014b6a92dd8527349fe511bed0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const metrics_controller_1 = require("../metrics.controller");
const metrics_service_1 = require("../metrics.service");
/**
 * Testes unitários para o controlador de métricas
 *
 * Verifica o funcionamento do endpoint que expõe as métricas
 * da aplicação para o Prometheus
 */
describe('MetricsController', () => {
    let controller;
    let metricsService;
    // Mock do serviço de métricas
    const mockMetricsService = {
        getMetrics: jest.fn().mockResolvedValue('metrics_data'),
    };
    beforeEach(async () => {
        jest.clearAllMocks();
        const module = await testing_1.Test.createTestingModule({
            controllers: [metrics_controller_1.MetricsController],
            providers: [
                {
                    provide: metrics_service_1.MetricsService,
                    useValue: mockMetricsService,
                },
            ],
        }).compile();
        controller = module.get(metrics_controller_1.MetricsController);
        metricsService = module.get(metrics_service_1.MetricsService);
    });
    it('deve ser definido', () => {
        expect(controller).toBeDefined();
    });
    describe('getMetrics', () => {
        it('deve retornar as métricas no formato correto', async () => {
            // Mock da resposta
            const mockResponse = {
                setHeader: jest.fn(),
                send: jest.fn(),
            };
            await controller.getMetrics(mockResponse);
            expect(metricsService.getMetrics).toHaveBeenCalled();
            expect(mockResponse.setHeader).toHaveBeenCalledWith('Content-Type', 'text/plain');
            expect(mockResponse.send).toHaveBeenCalledWith('metrics_data');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbW9uaXRvcmluZ1xcdGVzdHNcXG1ldHJpY3MuY29udHJvbGxlci5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXNEO0FBQ3RELDhEQUEwRDtBQUMxRCx3REFBb0Q7QUFHcEQ7Ozs7O0dBS0c7QUFDSCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksVUFBNkIsQ0FBQztJQUNsQyxJQUFJLGNBQThCLENBQUM7SUFFbkMsOEJBQThCO0lBQzlCLE1BQU0sa0JBQWtCLEdBQUc7UUFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7S0FDeEQsQ0FBQztJQUVGLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckIsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQzNELFdBQVcsRUFBRSxDQUFDLHNDQUFpQixDQUFDO1lBQ2hDLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsZ0NBQWM7b0JBQ3ZCLFFBQVEsRUFBRSxrQkFBa0I7aUJBQzdCO2FBQ0Y7U0FDRixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFYixVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBb0Isc0NBQWlCLENBQUMsQ0FBQztRQUM5RCxjQUFjLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBaUIsZ0NBQWMsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtRQUMxQixFQUFFLENBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDNUQsbUJBQW1CO1lBQ25CLE1BQU0sWUFBWSxHQUFHO2dCQUNuQixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7YUFDTyxDQUFDO1lBRXpCLE1BQU0sVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUUxQyxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDckQsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxvQkFBb0IsQ0FDakQsY0FBYyxFQUNkLFlBQVksQ0FDYixDQUFDO1lBQ0YsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNqRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbW9uaXRvcmluZ1xcdGVzdHNcXG1ldHJpY3MuY29udHJvbGxlci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWV0cmljc0NvbnRyb2xsZXIgfSBmcm9tICcuLi9tZXRyaWNzLmNvbnRyb2xsZXInO1xuaW1wb3J0IHsgTWV0cmljc1NlcnZpY2UgfSBmcm9tICcuLi9tZXRyaWNzLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcblxuLyoqXG4gKiBUZXN0ZXMgdW5pdMOhcmlvcyBwYXJhIG8gY29udHJvbGFkb3IgZGUgbcOpdHJpY2FzXG4gKlxuICogVmVyaWZpY2EgbyBmdW5jaW9uYW1lbnRvIGRvIGVuZHBvaW50IHF1ZSBleHDDtWUgYXMgbcOpdHJpY2FzXG4gKiBkYSBhcGxpY2HDp8OjbyBwYXJhIG8gUHJvbWV0aGV1c1xuICovXG5kZXNjcmliZSgnTWV0cmljc0NvbnRyb2xsZXInLCAoKSA9PiB7XG4gIGxldCBjb250cm9sbGVyOiBNZXRyaWNzQ29udHJvbGxlcjtcbiAgbGV0IG1ldHJpY3NTZXJ2aWNlOiBNZXRyaWNzU2VydmljZTtcblxuICAvLyBNb2NrIGRvIHNlcnZpw6dvIGRlIG3DqXRyaWNhc1xuICBjb25zdCBtb2NrTWV0cmljc1NlcnZpY2UgPSB7XG4gICAgZ2V0TWV0cmljczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdtZXRyaWNzX2RhdGEnKSxcbiAgfTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcblxuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBjb250cm9sbGVyczogW01ldHJpY3NDb250cm9sbGVyXSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogTWV0cmljc1NlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IG1vY2tNZXRyaWNzU2VydmljZSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSkuY29tcGlsZSgpO1xuXG4gICAgY29udHJvbGxlciA9IG1vZHVsZS5nZXQ8TWV0cmljc0NvbnRyb2xsZXI+KE1ldHJpY3NDb250cm9sbGVyKTtcbiAgICBtZXRyaWNzU2VydmljZSA9IG1vZHVsZS5nZXQ8TWV0cmljc1NlcnZpY2U+KE1ldHJpY3NTZXJ2aWNlKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIGRlZmluaWRvJywgKCkgPT4ge1xuICAgIGV4cGVjdChjb250cm9sbGVyKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0TWV0cmljcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSByZXRvcm5hciBhcyBtw6l0cmljYXMgbm8gZm9ybWF0byBjb3JyZXRvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBkYSByZXNwb3N0YVxuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICBzZXRIZWFkZXI6IGplc3QuZm4oKSxcbiAgICAgICAgc2VuZDogamVzdC5mbigpLFxuICAgICAgfSBhcyB1bmtub3duIGFzIFJlc3BvbnNlO1xuXG4gICAgICBhd2FpdCBjb250cm9sbGVyLmdldE1ldHJpY3MobW9ja1Jlc3BvbnNlKTtcblxuICAgICAgZXhwZWN0KG1ldHJpY3NTZXJ2aWNlLmdldE1ldHJpY3MpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrUmVzcG9uc2Uuc2V0SGVhZGVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ0NvbnRlbnQtVHlwZScsXG4gICAgICAgICd0ZXh0L3BsYWluJyxcbiAgICAgICk7XG4gICAgICBleHBlY3QobW9ja1Jlc3BvbnNlLnNlbmQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdtZXRyaWNzX2RhdGEnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==