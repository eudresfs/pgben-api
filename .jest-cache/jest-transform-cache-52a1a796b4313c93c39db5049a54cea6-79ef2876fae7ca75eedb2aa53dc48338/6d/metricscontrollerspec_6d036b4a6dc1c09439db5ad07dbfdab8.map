{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\metrics.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,8DAA0D;AAC1D,wDAAoD;AAGpD;;;;;GAKG;AACH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,IAAI,UAA6B,CAAC;IAClC,IAAI,cAA8B,CAAC;IAEnC,8BAA8B;IAC9B,MAAM,kBAAkB,GAAG;QACzB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC;KACxD,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,sCAAiB,CAAC;YAChC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,gCAAc;oBACvB,QAAQ,EAAE,kBAAkB;iBAC7B;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAoB,sCAAiB,CAAC,CAAC;QAC9D,cAAc,GAAG,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;aACO,CAAC;YAEzB,MAAM,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAE1C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACjD,cAAc,EACd,YAAY,CACb,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\metrics.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { MetricsController } from '../metrics.controller';\nimport { MetricsService } from '../metrics.service';\nimport { Response } from 'express';\n\n/**\n * Testes unitários para o controlador de métricas\n *\n * Verifica o funcionamento do endpoint que expõe as métricas\n * da aplicação para o Prometheus\n */\ndescribe('MetricsController', () => {\n  let controller: MetricsController;\n  let metricsService: MetricsService;\n\n  // Mock do serviço de métricas\n  const mockMetricsService = {\n    getMetrics: jest.fn().mockResolvedValue('metrics_data'),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [MetricsController],\n      providers: [\n        {\n          provide: MetricsService,\n          useValue: mockMetricsService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<MetricsController>(MetricsController);\n    metricsService = module.get<MetricsService>(MetricsService);\n  });\n\n  it('deve ser definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('getMetrics', () => {\n    it('deve retornar as métricas no formato correto', async () => {\n      // Mock da resposta\n      const mockResponse = {\n        setHeader: jest.fn(),\n        send: jest.fn(),\n      } as unknown as Response;\n\n      await controller.getMetrics(mockResponse);\n\n      expect(metricsService.getMetrics).toHaveBeenCalled();\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\n        'Content-Type',\n        'text/plain',\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith('metrics_data');\n    });\n  });\n});\n"],"version":3}