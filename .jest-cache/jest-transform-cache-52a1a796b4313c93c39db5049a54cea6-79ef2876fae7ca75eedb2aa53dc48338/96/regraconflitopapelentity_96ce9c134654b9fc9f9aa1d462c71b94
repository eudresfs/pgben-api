332e8fb8fce0821e7ba2b335cab9a9c4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegraConflitoPapel = void 0;
const typeorm_1 = require("typeorm");
const papel_cidadao_entity_1 = require("./papel-cidadao.entity");
/**
 * Entidade de Regra de Conflito de Papel
 *
 * Armazena as regras que definem conflitos entre papéis no sistema,
 * garantindo a integridade das regras de negócio.
 */
let RegraConflitoPapel = class RegraConflitoPapel {
    id;
    papel_origem_id;
    papel_origem;
    papel_destino_id;
    papel_destino;
    descricao;
    ativo;
    created_at;
    updated_at;
    created_by;
    updated_by;
    // Getters e Setters
    get papelOrigemId() {
        return this.papel_origem_id;
    }
    set papelOrigemId(value) {
        this.papel_origem_id = value;
    }
    get papelDestinoId() {
        return this.papel_destino_id;
    }
    set papelDestinoId(value) {
        this.papel_destino_id = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get createdBy() {
        return this.created_by;
    }
    get updatedBy() {
        return this.updated_by;
    }
    // Métodos Utilitários
    /**
     * Verifica se a regra foi criada recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade da regra em dias
     */
    getIdadeEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se a regra está ativa
     */
    isAtivo() {
        return this.ativo;
    }
    /**
     * Verifica se a regra foi modificada recentemente (últimas 24 horas)
     */
    foiModificadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.updated_at > umDiaAtras;
    }
    /**
     * Verifica se tem criador definido
     */
    temCriador() {
        return !!this.created_by;
    }
    /**
     * Verifica se tem editor definido
     */
    temEditor() {
        return !!this.updated_by;
    }
    /**
     * Verifica se foi criada por um usuário específico
     */
    foiCriadaPor(usuarioId) {
        return this.created_by === usuarioId;
    }
    /**
     * Verifica se foi editada por um usuário específico
     */
    foiEditadaPor(usuarioId) {
        return this.updated_by === usuarioId;
    }
    /**
     * Verifica se envolve um papel específico (origem ou destino)
     */
    envolvePapel(papelId) {
        return this.papel_origem_id === papelId || this.papel_destino_id === papelId;
    }
    /**
     * Verifica se é uma regra bidirecional (origem e destino são iguais)
     */
    isBidirecional() {
        return this.papel_origem_id === this.papel_destino_id;
    }
    /**
     * Obtém um resumo da regra
     */
    getSummary() {
        const status = this.isAtivo() ? 'Ativa' : 'Inativa';
        const tipo = this.isBidirecional() ? 'Bidirecional' : 'Unidirecional';
        return `${this.descricao} (${tipo}) - ${status}`;
    }
    /**
     * Gera uma chave única para a regra
     */
    getUniqueKey() {
        return `regra_${this.papel_origem_id}_${this.papel_destino_id}`;
    }
    /**
     * Verifica se a regra é consistente
     */
    isConsistente() {
        // Verifica se tem papéis origem e destino
        if (!this.papel_origem_id || !this.papel_destino_id)
            return false;
        // Verifica se tem descrição
        if (!this.descricao || this.descricao.trim().length === 0)
            return false;
        // Verifica se a descrição não é muito curta
        if (this.descricao.trim().length < 10)
            return false;
        return true;
    }
    /**
     * Verifica se pode ser removida
     */
    podeSerRemovida() {
        // Regras podem ser desativadas ao invés de removidas
        return true;
    }
    /**
     * Clona a regra (sem ID)
     */
    clone() {
        return {
            papel_origem_id: this.papel_origem_id,
            papel_destino_id: this.papel_destino_id,
            descricao: this.descricao,
            ativo: this.ativo,
        };
    }
    /**
     * Verifica se é uma regra crítica (afeta papéis importantes)
     */
    isCritica() {
        // Esta verificação dependeria dos tipos de papel envolvidos
        // Por enquanto, considera todas as regras como potencialmente críticas
        return this.isAtivo();
    }
    /**
     * Verifica se requer aprovação para mudanças
     */
    requerAprovacao() {
        // Regras ativas sempre requerem aprovação para mudanças
        return this.isAtivo();
    }
    /**
     * Obtém o tipo de conflito baseado na descrição
     */
    getTipoConflito() {
        const descricaoLower = this.descricao.toLowerCase();
        if (descricaoLower.includes('incompatível') || descricaoLower.includes('conflito')) {
            return 'INCOMPATIBILIDADE';
        }
        if (descricaoLower.includes('não pode') || descricaoLower.includes('proibido')) {
            return 'RESTRICAO';
        }
        if (descricaoLower.includes('validar') || descricaoLower.includes('verificar')) {
            return 'VALIDACAO';
        }
        return 'OUTRO';
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            descricao: this.descricao,
            ativo: this.ativo,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Verifica se a regra precisa de revisão (muito antiga)
     */
    precisaRevisao() {
        // Regras com mais de 1 ano podem precisar de revisão
        return this.getIdadeEmDias() > 365;
    }
    /**
     * Obtém sugestões de melhoria para a regra
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências na regra');
        }
        if (this.descricao.length < 20) {
            sugestoes.push('Expandir descrição da regra para maior clareza');
        }
        if (this.precisaRevisao()) {
            sugestoes.push('Revisar regra (criada há mais de 1 ano)');
        }
        if (!this.temCriador()) {
            sugestoes.push('Definir responsável pela criação da regra');
        }
        if (this.isBidirecional()) {
            sugestoes.push('Verificar se regra bidirecional está correta');
        }
        return sugestoes;
    }
    /**
     * Verifica se pode ser aplicada a um contexto específico
     */
    podeSerAplicada(contexto) {
        if (!this.isAtivo())
            return false;
        // Verifica correspondência direta
        if (this.papel_origem_id === contexto.papelOrigemId &&
            this.papel_destino_id === contexto.papelDestinoId) {
            return true;
        }
        // Se for bidirecional, verifica correspondência inversa
        if (this.isBidirecional() &&
            this.papel_origem_id === contexto.papelDestinoId &&
            this.papel_destino_id === contexto.papelOrigemId) {
            return true;
        }
        return false;
    }
    /**
     * Obtém estatísticas da regra
     */
    getEstatisticas() {
        return {
            idadeEmDias: this.getIdadeEmDias(),
            tipo: this.getTipoConflito(),
            status: this.isAtivo() ? 'Ativa' : 'Inativa',
            ultimaModificacao: this.getAtualizacaoFormatada(),
        };
    }
};
exports.RegraConflitoPapel = RegraConflitoPapel;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], RegraConflitoPapel.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'papel_origem_id', type: 'uuid' }),
    __metadata("design:type", String)
], RegraConflitoPapel.prototype, "papel_origem_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => papel_cidadao_entity_1.PapelCidadao),
    (0, typeorm_1.JoinColumn)({ name: 'papel_origem_id' }),
    __metadata("design:type", typeof (_a = typeof papel_cidadao_entity_1.PapelCidadao !== "undefined" && papel_cidadao_entity_1.PapelCidadao) === "function" ? _a : Object)
], RegraConflitoPapel.prototype, "papel_origem", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'papel_destino_id', type: 'uuid' }),
    __metadata("design:type", String)
], RegraConflitoPapel.prototype, "papel_destino_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => papel_cidadao_entity_1.PapelCidadao),
    (0, typeorm_1.JoinColumn)({ name: 'papel_destino_id' }),
    __metadata("design:type", typeof (_b = typeof papel_cidadao_entity_1.PapelCidadao !== "undefined" && papel_cidadao_entity_1.PapelCidadao) === "function" ? _b : Object)
], RegraConflitoPapel.prototype, "papel_destino", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 255 }),
    __metadata("design:type", String)
], RegraConflitoPapel.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'boolean', default: true }),
    __metadata("design:type", Boolean)
], RegraConflitoPapel.prototype, "ativo", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], RegraConflitoPapel.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], RegraConflitoPapel.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'created_by', type: 'uuid', nullable: true }),
    __metadata("design:type", String)
], RegraConflitoPapel.prototype, "created_by", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'updated_by', type: 'uuid', nullable: true }),
    __metadata("design:type", String)
], RegraConflitoPapel.prototype, "updated_by", void 0);
exports.RegraConflitoPapel = RegraConflitoPapel = __decorate([
    (0, typeorm_1.Entity)('regra_conflito_papel')
], RegraConflitoPapel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,