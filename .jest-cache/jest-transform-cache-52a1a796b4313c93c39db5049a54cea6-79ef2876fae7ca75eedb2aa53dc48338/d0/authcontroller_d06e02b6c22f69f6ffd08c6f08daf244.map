{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\auth.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\auth.controller.ts"],"sourcesContent":["import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\nimport {\n  BaseApiErrorResponse,\n  BaseApiResponse,\n  SwaggerBaseApiResponse,\n} from '../../shared/dtos/base-api-response.dto';\nimport { AppLogger } from '../../shared/logger/logger.service';\nimport { ReqContext } from '../../shared/request-context/req-context.decorator';\nimport { RequestContext } from '../../shared/request-context/request-context.dto';\nimport { LoginInput } from '../dtos/auth-login-input.dto';\nimport { RefreshTokenInput } from '../dtos/auth-refresh-token-input.dto';\nimport { AuthTokenOutput } from '../dtos/auth-token-output.dto';\nimport { JwtRefreshGuard } from '../guards/jwt-refresh.guard';\nimport { LocalAuthGuard } from '../guards/local-auth.guard';\nimport { AuthService } from '../services/auth.service';\nimport { Public } from '../decorators/public.decorator';\n\n@ApiTags('Autenticação')\n@Controller('auth') \nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly logger: AppLogger,\n  ) {\n    this.logger.setContext(AuthController.name);\n  }\n  @Post('login')\n  @Public()\n  @ApiOperation({\n    summary: 'Fazer login',\n    description: 'Autentica um usuário no sistema usando credenciais (username/password)',\n    requestBody: {\n      description: 'Credenciais de login',\n      required: true,\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/LoginInput',\n          },\n          examples: {\n            'usuario-admin': {\n              summary: 'Login de Administrador',\n              description: 'Exemplo de login para usuário administrador',\n              value: {\n                username: 'admin@semtas.gov.br',\n                password: 'senha123'\n              }\n            },\n            'usuario-assistente': {\n              summary: 'Login de Assistente Social',\n              description: 'Exemplo de login para assistente social',\n              value: {\n                username: 'maria.silva@semtas.gov.br',\n                password: 'minhasenha456'\n              }\n            },\n            'usuario-coordenador': {\n              summary: 'Login de Coordenador',\n              description: 'Exemplo de login para coordenador de unidade',\n              value: {\n                username: 'joao.santos@semtas.gov.br',\n                password: 'coordenador789'\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    type: SwaggerBaseApiResponse(AuthTokenOutput),\n  })\n  @ApiResponse({\n    status: HttpStatus.UNAUTHORIZED,\n    type: BaseApiErrorResponse,\n  })\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(LocalAuthGuard)\n  @UseInterceptors(ClassSerializerInterceptor)\n  async login(\n    @ReqContext() ctx: RequestContext,\n    @Body() credential: LoginInput,\n  ): Promise<BaseApiResponse<AuthTokenOutput>> {\n    this.logger.log(ctx, `${this.login.name} was called`);\n\n    const authToken = await this.authService.login(ctx);\n\n    // Converter para o formato BaseApiResponse\n    const response = new BaseApiResponse<AuthTokenOutput>();\n    response.data = authToken;\n    response.meta = {};\n\n    return response;\n  }\n\n  @Post('refresh-token')\n  @ApiOperation({\n    summary: 'Atualizar token da api',\n    description: 'Renova o token de acesso usando um refresh token válido',\n    requestBody: {\n      description: 'Refresh token para renovação',\n      required: true,\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/RefreshTokenInput',\n          },\n          examples: {\n            'refresh-token': {\n              summary: 'Renovação de Token',\n              description: 'Exemplo de renovação usando refresh token',\n              value: {\n                refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    type: SwaggerBaseApiResponse(AuthTokenOutput),\n  })\n  @ApiResponse({\n    status: HttpStatus.UNAUTHORIZED,\n    type: BaseApiErrorResponse,\n  })\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(JwtRefreshGuard)\n  @UseInterceptors(ClassSerializerInterceptor)\n  async refreshToken(\n    @ReqContext() ctx: RequestContext,\n    @Body() credential: RefreshTokenInput,\n  ): Promise<BaseApiResponse<AuthTokenOutput>> {\n    this.logger.log(ctx, `${this.refreshToken.name} was called`);\n\n    const authToken = await this.authService.refreshToken(ctx, credential);\n\n    // Converter para o formato BaseApiResponse\n    const response = new BaseApiResponse<AuthTokenOutput>();\n    response.data = authToken;\n    response.meta = {};\n\n    return response;\n  }\n  \n  @Get('status')\n  @Public()\n  @ApiOperation({\n    summary: 'Verificar status do serviço de autenticação',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    schema: {\n      type: 'object',\n      properties: {\n        status: { type: 'string', example: 'online' },\n        message: { type: 'string', example: 'Serviço de autenticação está funcionando' },\n        timestamp: { type: 'string', format: 'date-time', example: '2023-01-01T00:00:00.000Z' },\n      },\n    },\n  })\n  @HttpCode(HttpStatus.OK)\n  getStatus(): { status: string; message: string; timestamp: string } {\n    return {\n      status: 'online',\n      message: 'Serviço de autenticação está funcionando',\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n"],"version":3}