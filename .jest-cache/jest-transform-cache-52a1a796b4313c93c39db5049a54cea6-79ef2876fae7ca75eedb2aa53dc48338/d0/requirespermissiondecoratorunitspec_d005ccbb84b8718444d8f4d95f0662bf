95fdb3a96e3f7eb5352b07de0ed47429
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const requires_permission_decorator_1 = require("@/auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("@/auth/entities/user-permission.entity");
/**
 * Testes unitários para o decorator RequiresPermission
 *
 * Estes testes verificam se o decorator armazena corretamente as
 * informações de permissão necessárias para o PermissionGuard.
 */
describe('RequiresPermission', () => {
    let reflector;
    beforeEach(async () => {
        const moduleRef = await testing_1.Test.createTestingModule({
            providers: [core_1.Reflector],
        }).compile();
        reflector = moduleRef.get(core_1.Reflector);
    });
    it('deve armazenar requisito de permissão com escopo GLOBAL', () => {
        // Definir um controlador de teste com o decorator
        let TestController = class TestController {
            testMethod() {
                return 'test';
            }
        };
        __decorate([
            (0, requires_permission_decorator_1.RequiresPermission)({
                permissionName: 'beneficio.listar',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
            }),
            (0, common_1.Get)(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], TestController.prototype, "testMethod", null);
        TestController = __decorate([
            (0, common_1.Controller)('test')
        ], TestController);
        // Instanciar o controlador
        const controller = new TestController();
        // Obter os metadados
        const permissionReqs = reflector.get(requires_permission_decorator_1.REQUIRES_PERMISSION_KEY, controller.testMethod);
        // Verificar se os metadados foram armazenados corretamente
        expect(permissionReqs).toBeDefined();
        expect(permissionReqs).toBeInstanceOf(Array);
        expect(permissionReqs.length).toBe(1);
        expect(permissionReqs[0]).toEqual({
            permissionName: 'beneficio.listar',
            scopeType: user_permission_entity_1.ScopeType.GLOBAL,
        });
    });
    it('deve armazenar requisito de permissão com escopo UNIT e expressão de escopo', () => {
        // Definir um controlador de teste com o decorator
        let TestController = class TestController {
            testMethod() {
                return 'test';
            }
        };
        __decorate([
            (0, requires_permission_decorator_1.RequiresPermission)({
                permissionName: 'solicitacao.listar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeIdExpression: 'query.unidade_id',
            }),
            (0, common_1.Get)(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], TestController.prototype, "testMethod", null);
        TestController = __decorate([
            (0, common_1.Controller)('test')
        ], TestController);
        // Instanciar o controlador
        const controller = new TestController();
        // Obter os metadados
        const permissionReqs = reflector.get(requires_permission_decorator_1.REQUIRES_PERMISSION_KEY, controller.testMethod);
        // Verificar se os metadados foram armazenados corretamente
        expect(permissionReqs).toBeDefined();
        expect(permissionReqs).toBeInstanceOf(Array);
        expect(permissionReqs.length).toBe(1);
        expect(permissionReqs[0]).toEqual({
            permissionName: 'solicitacao.listar',
            scopeType: user_permission_entity_1.ScopeType.UNIT,
            scopeIdExpression: 'query.unidade_id',
        });
    });
    it('deve armazenar requisito de permissão com escopo SELF', () => {
        // Definir um controlador de teste com o decorator
        let TestController = class TestController {
            testMethod() {
                return 'test';
            }
        };
        __decorate([
            (0, requires_permission_decorator_1.RequiresPermission)({
                permissionName: 'usuario.perfil.editar',
                scopeType: user_permission_entity_1.ScopeType.SELF,
            }),
            (0, common_1.Get)(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], TestController.prototype, "testMethod", null);
        TestController = __decorate([
            (0, common_1.Controller)('test')
        ], TestController);
        // Instanciar o controlador
        const controller = new TestController();
        // Obter os metadados
        const permissionReqs = reflector.get(requires_permission_decorator_1.REQUIRES_PERMISSION_KEY, controller.testMethod);
        // Verificar se os metadados foram armazenados corretamente
        expect(permissionReqs).toBeDefined();
        expect(permissionReqs).toBeInstanceOf(Array);
        expect(permissionReqs.length).toBe(1);
        expect(permissionReqs[0]).toEqual({
            permissionName: 'usuario.perfil.editar',
            scopeType: user_permission_entity_1.ScopeType.SELF,
        });
    });
    it('deve acumular múltiplos requisitos de permissão', () => {
        // Definir um controlador de teste com múltiplos decorators
        let TestController = class TestController {
            testMethod() {
                return 'test';
            }
        };
        __decorate([
            (0, requires_permission_decorator_1.RequiresPermission)({
                permissionName: 'solicitacao.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeIdExpression: 'solicitacao.unidadeId',
            }),
            (0, requires_permission_decorator_1.RequiresPermission)({
                permissionName: 'solicitacao.historico.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeIdExpression: 'solicitacao.unidadeId',
            }),
            (0, common_1.Get)(),
            __metadata("design:type", Function),
            __metadata("design:paramtypes", []),
            __metadata("design:returntype", void 0)
        ], TestController.prototype, "testMethod", null);
        TestController = __decorate([
            (0, common_1.Controller)('test')
        ], TestController);
        // Instanciar o controlador
        const controller = new TestController();
        // Obter os metadados
        const permissionReqs = reflector.get(requires_permission_decorator_1.REQUIRES_PERMISSION_KEY, controller.testMethod);
        // Verificar se os metadados foram armazenados corretamente
        expect(permissionReqs).toBeDefined();
        expect(permissionReqs).toBeInstanceOf(Array);
        expect(permissionReqs.length).toBe(2);
        expect(permissionReqs[0]).toEqual({
            permissionName: 'solicitacao.visualizar',
            scopeType: user_permission_entity_1.ScopeType.UNIT,
            scopeIdExpression: 'solicitacao.unidadeId',
        });
        expect(permissionReqs[1]).toEqual({
            permissionName: 'solicitacao.historico.visualizar',
            scopeType: user_permission_entity_1.ScopeType.UNIT,
            scopeIdExpression: 'solicitacao.unidadeId',
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,