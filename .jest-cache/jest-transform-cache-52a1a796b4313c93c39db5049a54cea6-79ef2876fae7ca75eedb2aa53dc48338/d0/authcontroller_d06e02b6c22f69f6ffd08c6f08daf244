6881cdde6de4b26515d8b7871028a51e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuthController_1;
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const base_api_response_dto_1 = require("../../shared/dtos/base-api-response.dto");
const logger_service_1 = require("../../shared/logger/logger.service");
const req_context_decorator_1 = require("../../shared/request-context/req-context.decorator");
const request_context_dto_1 = require("../../shared/request-context/request-context.dto");
const auth_login_input_dto_1 = require("../dtos/auth-login-input.dto");
const auth_refresh_token_input_dto_1 = require("../dtos/auth-refresh-token-input.dto");
const auth_token_output_dto_1 = require("../dtos/auth-token-output.dto");
const jwt_refresh_guard_1 = require("../guards/jwt-refresh.guard");
const local_auth_guard_1 = require("../guards/local-auth.guard");
const auth_service_1 = require("../services/auth.service");
const public_decorator_1 = require("../decorators/public.decorator");
let AuthController = AuthController_1 = class AuthController {
    authService;
    logger;
    constructor(authService, logger) {
        this.authService = authService;
        this.logger = logger;
        this.logger.setContext(AuthController_1.name);
    }
    async login(ctx, credential) {
        this.logger.log(ctx, `${this.login.name} was called`);
        const authToken = await this.authService.login(ctx);
        // Converter para o formato BaseApiResponse
        const response = new base_api_response_dto_1.BaseApiResponse();
        response.data = authToken;
        response.meta = {};
        return response;
    }
    async refreshToken(ctx, credential) {
        this.logger.log(ctx, `${this.refreshToken.name} was called`);
        const authToken = await this.authService.refreshToken(ctx, credential);
        // Converter para o formato BaseApiResponse
        const response = new base_api_response_dto_1.BaseApiResponse();
        response.data = authToken;
        response.meta = {};
        return response;
    }
    getStatus() {
        return {
            status: 'online',
            message: 'Serviço de autenticação está funcionando',
            timestamp: new Date().toISOString(),
        };
    }
};
exports.AuthController = AuthController;
__decorate([
    (0, common_1.Post)('login'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Fazer login',
        description: 'Autentica um usuário no sistema usando credenciais (username/password)',
        requestBody: {
            description: 'Credenciais de login',
            required: true,
            content: {
                'application/json': {
                    schema: {
                        $ref: '#/components/schemas/LoginInput',
                    },
                    examples: {
                        'usuario-admin': {
                            summary: 'Login de Administrador',
                            description: 'Exemplo de login para usuário administrador',
                            value: {
                                username: 'admin@semtas.gov.br',
                                password: 'senha123'
                            }
                        },
                        'usuario-assistente': {
                            summary: 'Login de Assistente Social',
                            description: 'Exemplo de login para assistente social',
                            value: {
                                username: 'maria.silva@semtas.gov.br',
                                password: 'minhasenha456'
                            }
                        },
                        'usuario-coordenador': {
                            summary: 'Login de Coordenador',
                            description: 'Exemplo de login para coordenador de unidade',
                            value: {
                                username: 'joao.santos@semtas.gov.br',
                                password: 'coordenador789'
                            }
                        }
                    }
                }
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        type: (0, base_api_response_dto_1.SwaggerBaseApiResponse)(auth_token_output_dto_1.AuthTokenOutput),
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        type: base_api_response_dto_1.BaseApiErrorResponse,
    }),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, common_1.UseGuards)(local_auth_guard_1.LocalAuthGuard),
    (0, common_1.UseInterceptors)(common_1.ClassSerializerInterceptor),
    __param(0, (0, req_context_decorator_1.ReqContext)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof request_context_dto_1.RequestContext !== "undefined" && request_context_dto_1.RequestContext) === "function" ? _c : Object, typeof (_d = typeof auth_login_input_dto_1.LoginInput !== "undefined" && auth_login_input_dto_1.LoginInput) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], AuthController.prototype, "login", null);
__decorate([
    (0, common_1.Post)('refresh-token'),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualizar token da api',
        description: 'Renova o token de acesso usando um refresh token válido',
        requestBody: {
            description: 'Refresh token para renovação',
            required: true,
            content: {
                'application/json': {
                    schema: {
                        $ref: '#/components/schemas/RefreshTokenInput',
                    },
                    examples: {
                        'refresh-token': {
                            summary: 'Renovação de Token',
                            description: 'Exemplo de renovação usando refresh token',
                            value: {
                                refreshToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                            }
                        }
                    }
                }
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        type: (0, base_api_response_dto_1.SwaggerBaseApiResponse)(auth_token_output_dto_1.AuthTokenOutput),
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        type: base_api_response_dto_1.BaseApiErrorResponse,
    }),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, common_1.UseGuards)(jwt_refresh_guard_1.JwtRefreshGuard),
    (0, common_1.UseInterceptors)(common_1.ClassSerializerInterceptor),
    __param(0, (0, req_context_decorator_1.ReqContext)()),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_f = typeof request_context_dto_1.RequestContext !== "undefined" && request_context_dto_1.RequestContext) === "function" ? _f : Object, typeof (_g = typeof auth_refresh_token_input_dto_1.RefreshTokenInput !== "undefined" && auth_refresh_token_input_dto_1.RefreshTokenInput) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], AuthController.prototype, "refreshToken", null);
__decorate([
    (0, common_1.Get)('status'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Verificar status do serviço de autenticação',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        schema: {
            type: 'object',
            properties: {
                status: { type: 'string', example: 'online' },
                message: { type: 'string', example: 'Serviço de autenticação está funcionando' },
                timestamp: { type: 'string', format: 'date-time', example: '2023-01-01T00:00:00.000Z' },
            },
        },
    }),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Object)
], AuthController.prototype, "getStatus", null);
exports.AuthController = AuthController = AuthController_1 = __decorate([
    (0, swagger_1.ApiTags)('Autenticação'),
    (0, common_1.Controller)('auth'),
    __metadata("design:paramtypes", [typeof (_a = typeof auth_service_1.AuthService !== "undefined" && auth_service_1.AuthService) === "function" ? _a : Object, typeof (_b = typeof logger_service_1.AppLogger !== "undefined" && logger_service_1.AppLogger) === "function" ? _b : Object])
], AuthController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,