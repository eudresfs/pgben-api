{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\decorators\\requires-permission.decorator.unit.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\decorators\\requires-permission.decorator.unit.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing';\nimport { Controller, Get } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { RequiresPermission, REQUIRES_PERMISSION_KEY } from '@/auth/decorators/requires-permission.decorator';\nimport { ScopeType } from '@/auth/entities/user-permission.entity';\n\n/**\n * Testes unitários para o decorator RequiresPermission\n * \n * Estes testes verificam se o decorator armazena corretamente as\n * informações de permissão necessárias para o PermissionGuard.\n */\ndescribe('RequiresPermission', () => {\n  let reflector: Reflector;\n\n  beforeEach(async () => {\n    const moduleRef = await Test.createTestingModule({\n      providers: [Reflector],\n    }).compile();\n\n    reflector = moduleRef.get<Reflector>(Reflector);\n  });\n\n  it('deve armazenar requisito de permissão com escopo GLOBAL', () => {\n    // Definir um controlador de teste com o decorator\n    @Controller('test')\n    class TestController {\n      @RequiresPermission({\n        permissionName: 'beneficio.listar',\n        scopeType: ScopeType.GLOBAL,\n      })\n      @Get()\n      testMethod() {\n        return 'test';\n      }\n    }\n\n    // Instanciar o controlador\n    const controller = new TestController();\n    \n    // Obter os metadados\n    const permissionReqs = reflector.get(REQUIRES_PERMISSION_KEY, controller.testMethod);\n    \n    // Verificar se os metadados foram armazenados corretamente\n    expect(permissionReqs).toBeDefined();\n    expect(permissionReqs).toBeInstanceOf(Array);\n    expect(permissionReqs.length).toBe(1);\n    expect(permissionReqs[0]).toEqual({\n      permissionName: 'beneficio.listar',\n      scopeType: ScopeType.GLOBAL,\n    });\n  });\n\n  it('deve armazenar requisito de permissão com escopo UNIT e expressão de escopo', () => {\n    // Definir um controlador de teste com o decorator\n    @Controller('test')\n    class TestController {\n      @RequiresPermission({\n        permissionName: 'solicitacao.listar',\n        scopeType: ScopeType.UNIT,\n        scopeIdExpression: 'query.unidade_id',\n      })\n      @Get()\n      testMethod() {\n        return 'test';\n      }\n    }\n\n    // Instanciar o controlador\n    const controller = new TestController();\n    \n    // Obter os metadados\n    const permissionReqs = reflector.get(REQUIRES_PERMISSION_KEY, controller.testMethod);\n    \n    // Verificar se os metadados foram armazenados corretamente\n    expect(permissionReqs).toBeDefined();\n    expect(permissionReqs).toBeInstanceOf(Array);\n    expect(permissionReqs.length).toBe(1);\n    expect(permissionReqs[0]).toEqual({\n      permissionName: 'solicitacao.listar',\n      scopeType: ScopeType.UNIT,\n      scopeIdExpression: 'query.unidade_id',\n    });\n  });\n\n  it('deve armazenar requisito de permissão com escopo SELF', () => {\n    // Definir um controlador de teste com o decorator\n    @Controller('test')\n    class TestController {\n      @RequiresPermission({\n        permissionName: 'usuario.perfil.editar',\n        scopeType: ScopeType.SELF,\n      })\n      @Get()\n      testMethod() {\n        return 'test';\n      }\n    }\n\n    // Instanciar o controlador\n    const controller = new TestController();\n    \n    // Obter os metadados\n    const permissionReqs = reflector.get(REQUIRES_PERMISSION_KEY, controller.testMethod);\n    \n    // Verificar se os metadados foram armazenados corretamente\n    expect(permissionReqs).toBeDefined();\n    expect(permissionReqs).toBeInstanceOf(Array);\n    expect(permissionReqs.length).toBe(1);\n    expect(permissionReqs[0]).toEqual({\n      permissionName: 'usuario.perfil.editar',\n      scopeType: ScopeType.SELF,\n    });\n  });\n\n  it('deve acumular múltiplos requisitos de permissão', () => {\n    // Definir um controlador de teste com múltiplos decorators\n    @Controller('test')\n    class TestController {\n      @RequiresPermission({\n        permissionName: 'solicitacao.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeIdExpression: 'solicitacao.unidadeId',\n      })\n      @RequiresPermission({\n        permissionName: 'solicitacao.historico.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeIdExpression: 'solicitacao.unidadeId',\n      })\n      @Get()\n      testMethod() {\n        return 'test';\n      }\n    }\n\n    // Instanciar o controlador\n    const controller = new TestController();\n    \n    // Obter os metadados\n    const permissionReqs = reflector.get(REQUIRES_PERMISSION_KEY, controller.testMethod);\n    \n    // Verificar se os metadados foram armazenados corretamente\n    expect(permissionReqs).toBeDefined();\n    expect(permissionReqs).toBeInstanceOf(Array);\n    expect(permissionReqs.length).toBe(2);\n    expect(permissionReqs[0]).toEqual({\n      permissionName: 'solicitacao.visualizar',\n      scopeType: ScopeType.UNIT,\n      scopeIdExpression: 'solicitacao.unidadeId',\n    });\n    expect(permissionReqs[1]).toEqual({\n      permissionName: 'solicitacao.historico.visualizar',\n      scopeType: ScopeType.UNIT,\n      scopeIdExpression: 'solicitacao.unidadeId',\n    });\n  });\n});\n"],"version":3}