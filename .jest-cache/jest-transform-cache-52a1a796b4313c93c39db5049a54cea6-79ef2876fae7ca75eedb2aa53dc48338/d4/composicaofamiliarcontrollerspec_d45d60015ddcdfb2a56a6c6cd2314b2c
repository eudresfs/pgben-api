ac764a740ec403f3ff08d8fd17551139
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const composicao_familiar_controller_1 = require("./composicao-familiar.controller");
const composicao_familiar_service_1 = require("../services/composicao-familiar.service");
const common_1 = require("@nestjs/common");
const escolaridade_enum_1 = require("../enums/escolaridade.enum");
const parentesco_enum_1 = require("../enums/parentesco.enum");
describe('ComposicaoFamiliarController', () => {
    let controller;
    let service;
    const mockComposicaoFamiliarService = {
        create: jest.fn(),
        findByCidadao: jest.fn(),
        findOne: jest.fn(),
        update: jest.fn(),
        remove: jest.fn(),
        findByCpf: jest.fn(),
    };
    const mockComposicaoFamiliarResponse = {
        id: '123e4567-e89b-12d3-a456-426614174000',
        cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
        nome: 'João Silva',
        cpf: '123.456.789-00',
        nis: '12345678901',
        idade: 25,
        ocupacao: 'Estudante',
        escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_INCOMPLETO,
        parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
        renda: 1500.00,
        observacoes: 'Observações de teste',
        created_at: new Date('2024-01-01T10:00:00Z'),
        updated_at: new Date('2024-01-01T10:00:00Z'),
        ativo: true,
        cpf_formatado: '',
        escolaridade_descricao: '',
        parentesco_descricao: ''
    };
    const mockPaginatedResponse = {
        data: [mockComposicaoFamiliarResponse],
        meta: {
            total: 1,
            page: 1,
            limit: 10,
            totalPages: 1,
            hasNext: false,
            hasPrev: false,
        },
        estatisticas: {
            totalMembros: 1,
            rendaTotal: 1500.00,
            rendaMedia: 1500.00,
            idadeMedia: 25,
            membrosComRenda: 1,
        },
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [composicao_familiar_controller_1.ComposicaoFamiliarController],
            providers: [
                {
                    provide: composicao_familiar_service_1.ComposicaoFamiliarService,
                    useValue: mockComposicaoFamiliarService,
                },
            ],
        }).compile();
        controller = module.get(composicao_familiar_controller_1.ComposicaoFamiliarController);
        service = module.get(composicao_familiar_service_1.ComposicaoFamiliarService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it('should be defined', () => {
        expect(controller).toBeDefined();
    });
    describe('create', () => {
        const createDto = {
            cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
            nome: 'João Silva',
            cpf: '12345678900',
            nis: '12345678901',
            idade: 25,
            ocupacao: 'Estudante',
            escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
            parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
            renda: 1500.00,
            observacoes: 'Observações de teste',
        };
        const mockRequest = {
            user: { id: 'user123' },
        };
        it('should create a new composicao familiar member', async () => {
            mockComposicaoFamiliarService.create.mockResolvedValue(mockComposicaoFamiliarResponse);
            const result = await controller.create(createDto, mockRequest);
            expect(service.create).toHaveBeenCalledWith(createDto, 'user123');
            expect(result).toEqual(mockComposicaoFamiliarResponse);
        });
        it('should throw ConflictException when member already exists', async () => {
            mockComposicaoFamiliarService.create.mockRejectedValue(new common_1.ConflictException('Já existe um membro com este CPF na composição familiar'));
            await expect(controller.create(createDto, mockRequest))
                .rejects.toThrow(common_1.ConflictException);
        });
        it('should throw BadRequestException for invalid data', async () => {
            mockComposicaoFamiliarService.create.mockRejectedValue(new common_1.BadRequestException('CPF inválido'));
            await expect(controller.create(createDto, mockRequest))
                .rejects.toThrow(common_1.BadRequestException);
        });
    });
    describe('findByCidadao', () => {
        const cidadaoId = '123e4567-e89b-12d3-a456-426614174001';
        const query = { page: 1, limit: 10 };
        it('should return paginated composicao familiar members', async () => {
            mockComposicaoFamiliarService.findByCidadao.mockResolvedValue(mockPaginatedResponse);
            const result = await controller.findByCidadao(cidadaoId, query.page, query.limit);
            expect(service.findByCidadao).toHaveBeenCalledWith(cidadaoId, query);
            expect(result).toEqual(mockPaginatedResponse);
        });
        it('should throw NotFoundException when cidadao does not exist', async () => {
            mockComposicaoFamiliarService.findByCidadao.mockRejectedValue(new common_1.NotFoundException('Cidadão não encontrado'));
            await expect(controller.findByCidadao(cidadaoId, 1, 10))
                .rejects.toThrow(common_1.NotFoundException);
        });
        it('should use default pagination values', async () => {
            mockComposicaoFamiliarService.findByCidadao.mockResolvedValue(mockPaginatedResponse);
            await controller.findByCidadao(cidadaoId, 1, 10);
            expect(service.findByCidadao).toHaveBeenCalledWith(cidadaoId, {
                page: 1,
                limit: 10,
            });
        });
    });
    describe('findOne', () => {
        const id = '123e4567-e89b-12d3-a456-426614174000';
        it('should return a composicao familiar member', async () => {
            mockComposicaoFamiliarService.findOne.mockResolvedValue(mockComposicaoFamiliarResponse);
            const result = await controller.findOne(id);
            expect(service.findOne).toHaveBeenCalledWith(id);
            expect(result).toEqual(mockComposicaoFamiliarResponse);
        });
        it('should throw NotFoundException when member does not exist', async () => {
            mockComposicaoFamiliarService.findOne.mockRejectedValue(new common_1.NotFoundException('Membro da composição familiar não encontrado'));
            await expect(controller.findOne(id))
                .rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        const id = '123e4567-e89b-12d3-a456-426614174000';
        const updateDto = {
            nome: 'João Silva Atualizado',
            renda: 2000.00,
        };
        const mockRequest = {
            user: { id: 'user123' },
        };
        it('should update a composicao familiar member', async () => {
            const updatedResponse = {
                ...mockComposicaoFamiliarResponse,
                nome: 'João Silva Atualizado',
                renda: 2000.00,
            };
            mockComposicaoFamiliarService.update.mockResolvedValue(updatedResponse);
            const result = await controller.update(id, updateDto, mockRequest);
            expect(service.update).toHaveBeenCalledWith(id, updateDto, 'user123');
            expect(result).toEqual(updatedResponse);
        });
        it('should throw NotFoundException when member does not exist', async () => {
            mockComposicaoFamiliarService.update.mockRejectedValue(new common_1.NotFoundException('Membro da composição familiar não encontrado'));
            await expect(controller.update(id, updateDto, mockRequest))
                .rejects.toThrow(common_1.NotFoundException);
        });
        it('should throw ConflictException for duplicate data', async () => {
            mockComposicaoFamiliarService.update.mockRejectedValue(new common_1.ConflictException('Já existe um membro com este nome na composição familiar'));
            await expect(controller.update(id, updateDto, mockRequest))
                .rejects.toThrow(common_1.ConflictException);
        });
    });
    describe('remove', () => {
        const id = '123e4567-e89b-12d3-a456-426614174000';
        const mockRequest = {
            user: { id: 'user123' },
        };
        it('should remove a composicao familiar member', async () => {
            mockComposicaoFamiliarService.remove.mockResolvedValue(undefined);
            await controller.remove(id, mockRequest);
            expect(service.remove).toHaveBeenCalledWith(id, 'user123');
        });
        it('should throw NotFoundException when member does not exist', async () => {
            mockComposicaoFamiliarService.remove.mockRejectedValue(new common_1.NotFoundException('Membro da composição familiar não encontrado'));
            await expect(controller.remove(id, mockRequest))
                .rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('findByCpf', () => {
        const cpf = '12345678900';
        it('should return composicao familiar members by CPF', async () => {
            const expectedResponse = [mockComposicaoFamiliarResponse];
            mockComposicaoFamiliarService.findByCpf.mockResolvedValue(expectedResponse);
            const result = await controller.findByCpf(cpf);
            expect(service.findByCpf).toHaveBeenCalledWith(cpf);
            expect(result).toEqual(expectedResponse);
        });
        it('should throw BadRequestException for invalid CPF', async () => {
            mockComposicaoFamiliarService.findByCpf.mockRejectedValue(new common_1.BadRequestException('CPF deve ter 11 dígitos'));
            await expect(controller.findByCpf('123'))
                .rejects.toThrow(common_1.BadRequestException);
        });
        it('should return empty array when no members found', async () => {
            mockComposicaoFamiliarService.findByCpf.mockResolvedValue([]);
            const result = await controller.findByCpf(cpf);
            expect(result).toEqual([]);
        });
    });
    describe('Input validation', () => {
        it('should validate UUID format for ID parameters', async () => {
            const invalidId = 'invalid-uuid';
            // O controller deve validar UUIDs através dos decorators
            // Este teste verifica se a validação está configurada corretamente
            expect(() => {
                // Simulação de validação de UUID
                const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
                if (!uuidRegex.test(invalidId)) {
                    throw new common_1.BadRequestException('ID deve ser um UUID válido');
                }
            }).toThrow(common_1.BadRequestException);
        });
        it('should validate pagination parameters', () => {
            const invalidQuery = { page: -1, limit: 0 };
            // Validação de parâmetros de paginação
            expect(() => {
                if (invalidQuery.page < 1 || invalidQuery.limit < 1) {
                    throw new common_1.BadRequestException('Parâmetros de paginação inválidos');
                }
            }).toThrow(common_1.BadRequestException);
        });
    });
    describe('Error handling', () => {
        it('should handle service errors gracefully', async () => {
            const createDto = {
                cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
                nome: 'João Silva',
                cpf: '12345678900',
                nis: '12345678901',
                idade: 25,
                ocupacao: 'Estudante',
                escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
                parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
            };
            const mockRequest = { user: { id: 'user123' } };
            mockComposicaoFamiliarService.create.mockRejectedValue(new Error('Erro interno do servidor'));
            await expect(controller.create(createDto, mockRequest))
                .rejects.toThrow('Erro interno do servidor');
        });
    });
    describe('Authorization', () => {
        it('should extract user ID from request', async () => {
            const createDto = {
                cidadao_id: '123e4567-e89b-12d3-a456-426614174001',
                nome: 'João Silva',
                cpf: '12345678900',
                nis: '12345678901',
                idade: 25,
                ocupacao: 'Estudante',
                escolaridade: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
                parentesco: parentesco_enum_1.ParentescoEnum.FILHO,
            };
            const mockRequest = { user: { id: 'user123' } };
            mockComposicaoFamiliarService.create.mockResolvedValue(mockComposicaoFamiliarResponse);
            await controller.create(createDto, mockRequest);
            expect(service.create).toHaveBeenCalledWith(createDto, 'user123');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,