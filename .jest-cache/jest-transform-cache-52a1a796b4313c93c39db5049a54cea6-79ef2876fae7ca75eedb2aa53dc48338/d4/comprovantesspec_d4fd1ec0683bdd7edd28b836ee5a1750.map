{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\comprovantes.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\comprovantes.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { HttpModule } from '@nestjs/axios';\n\nimport { PagamentoModule } from '../../pagamento.module';\nimport {\n  Pagamento,\n  ComprovantePagamento,\n  ConfirmacaoRecebimento,\n} from '../../entities';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\nimport { IntegracaoDocumentoService } from '../../services/integracao-documento.service';\nimport { AuditoriaPagamentoService } from '../../services/auditoria-pagamento.service';\n\n/**\n * Testes de integração para gerenciamento de comprovantes\n *\n * Verifica o funcionamento correto das operações de upload, listagem,\n * visualização e remoção de comprovantes de pagamento.\n *\n * @author Equipe PGBen\n */\ndescribe('Gerenciamento de Comprovantes (Integration)', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let integracaoDocumentoService: IntegracaoDocumentoService;\n  let auditoriaPagamentoService: AuditoriaPagamentoService;\n\n  // Dados de teste\n  const usuarioId = 'usuario-teste-id';\n  const pagamentoId = 'pagamento-teste-id';\n  const unidadeId = 'unidade-teste-id';\n  const comprovanteId = 'comprovante-teste-id';\n  const documentoId = 'documento-teste-id';\n\n  // Mock dos repositórios\n  const mockPagamentoRepository = {\n    findOne: jest.fn().mockImplementation((options) => {\n      if (options.where.id === pagamentoId) {\n        return Promise.resolve({\n          id: pagamentoId,\n          status: StatusPagamentoEnum.LIBERADO,\n          unidadeId,\n        });\n      }\n      return Promise.resolve(null);\n    }),\n  };\n\n  const mockComprovanteRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n    delete: jest.fn(),\n  };\n\n  const mockConfirmacaoRepository = {\n    findOne: jest.fn(),\n  };\n\n  // Mock do serviço de integração com documentos\n  const mockIntegracaoDocumentoService = {\n    uploadComprovante: jest\n      .fn()\n      .mockImplementation((pagamentoId, arquivo, usuarioId) => {\n        return Promise.resolve({\n          id: documentoId,\n          nome: arquivo.originalname,\n          tamanho: arquivo.size,\n          tipo: arquivo.mimetype,\n          categoria: 'COMPROVANTE_PAGAMENTO',\n          referencia: pagamentoId,\n          url: `http://api-documento.pgben.local/documentos/${documentoId}`,\n          createdAt: new Date(),\n        });\n      }),\n    obterComprovante: jest.fn().mockImplementation((documentoId) => {\n      return Promise.resolve({\n        id: documentoId,\n        nome: 'comprovante.pdf',\n        tamanho: 1024,\n        tipo: 'application/pdf',\n        categoria: 'COMPROVANTE_PAGAMENTO',\n        url: `http://api-documento.pgben.local/documentos/${documentoId}`,\n        createdAt: new Date(),\n      });\n    }),\n    listarComprovantes: jest.fn().mockImplementation((pagamentoId) => {\n      return Promise.resolve([\n        {\n          id: documentoId,\n          nome: 'comprovante.pdf',\n          tamanho: 1024,\n          tipo: 'application/pdf',\n          categoria: 'COMPROVANTE_PAGAMENTO',\n          referencia: pagamentoId,\n          url: `http://api-documento.pgben.local/documentos/${documentoId}`,\n          createdAt: new Date(),\n        },\n      ]);\n    }),\n    removerComprovante: jest\n      .fn()\n      .mockImplementation((documentoId, usuarioId) => {\n        return Promise.resolve();\n      }),\n  };\n\n  // Mock do serviço de auditoria\n  const mockAuditoriaPagamentoService = {\n    logUploadComprovante: jest.fn(),\n    logRemocaoComprovante: jest.fn(),\n    logErroProcessamento: jest.fn(),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        PagamentoModule,\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) => ({\n            secret: configService.get<string>('JWT_SECRET') || 'test-secret',\n            signOptions: { expiresIn: '1h' },\n          }),\n          inject: [ConfigService],\n        }),\n        HttpModule,\n      ],\n      providers: [\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: mockPagamentoRepository,\n        },\n        {\n          provide: getRepositoryToken(ComprovantePagamento),\n          useValue: mockComprovanteRepository,\n        },\n        {\n          provide: getRepositoryToken(ConfirmacaoRecebimento),\n          useValue: mockConfirmacaoRepository,\n        },\n      ],\n    })\n      .overrideProvider(IntegracaoDocumentoService)\n      .useValue(mockIntegracaoDocumentoService)\n      .overrideProvider(AuditoriaPagamentoService)\n      .useValue(mockAuditoriaPagamentoService)\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    integracaoDocumentoService = moduleFixture.get<IntegracaoDocumentoService>(\n      IntegracaoDocumentoService,\n    );\n    auditoriaPagamentoService = moduleFixture.get<AuditoriaPagamentoService>(\n      AuditoriaPagamentoService,\n    );\n\n    await app.init();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Configurar mocks padrão para os repositórios\n    mockComprovanteRepository.create.mockImplementation((dto) => ({\n      id: comprovanteId,\n      pagamentoId: dto.pagamentoId,\n      documentoId: dto.documentoId,\n      nomeArquivo: dto.nomeArquivo,\n      tipoArquivo: dto.tipoArquivo,\n      tamanhoArquivo: dto.tamanhoArquivo,\n      urlDownload: dto.urlDownload,\n      uploadedBy: dto.uploadedBy,\n      descricao: dto.descricao,\n      createdAt: new Date(),\n    }));\n\n    mockComprovanteRepository.save.mockImplementation((entity) =>\n      Promise.resolve(entity),\n    );\n\n    mockComprovanteRepository.findOne.mockImplementation((options) => {\n      if (options.where.id === comprovanteId) {\n        return Promise.resolve({\n          id: comprovanteId,\n          pagamentoId,\n          documentoId,\n          nomeArquivo: 'comprovante.pdf',\n          tipoArquivo: 'application/pdf',\n          tamanhoArquivo: 1024,\n          urlDownload: `http://api-documento.pgben.local/documentos/${documentoId}`,\n          uploadedBy: usuarioId,\n          createdAt: new Date(),\n        });\n      }\n      return Promise.resolve(null);\n    });\n\n    mockComprovanteRepository.find.mockImplementation((options) => {\n      if (options.where.pagamentoId === pagamentoId) {\n        return Promise.resolve([\n          {\n            id: comprovanteId,\n            pagamentoId,\n            documentoId,\n            nomeArquivo: 'comprovante.pdf',\n            tipoArquivo: 'application/pdf',\n            tamanhoArquivo: 1024,\n            urlDownload: `http://api-documento.pgben.local/documentos/${documentoId}`,\n            uploadedBy: usuarioId,\n            createdAt: new Date(),\n          },\n        ]);\n      }\n      return Promise.resolve([]);\n    });\n  });\n\n  // Função auxiliar para gerar tokens JWT\n  const gerarToken = (\n    userId: string,\n    perfis: string[] = ['usuario'],\n    unidadeId: string = 'unidade-teste-id',\n  ) => {\n    return jwtService.sign({\n      sub: userId,\n      perfis,\n      unidadeId,\n    });\n  };\n\n  describe('Upload de Comprovantes', () => {\n    it('deve fazer upload de comprovante PDF com sucesso', async () => {\n      // Criar arquivo de teste\n      const buffer = Buffer.from('conteúdo de teste do arquivo PDF');\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.pdf')\n        .field('descricao', 'Comprovante de transferência bancária');\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.nomeArquivo).toBe('comprovante.pdf');\n      expect(response.body.tipoArquivo).toBe('application/pdf');\n\n      expect(integracaoDocumentoService.uploadComprovante).toHaveBeenCalled();\n      expect(auditoriaPagamentoService.logUploadComprovante).toHaveBeenCalled();\n    });\n\n    it('deve fazer upload de comprovante JPG com sucesso', async () => {\n      // Criar arquivo de teste\n      const buffer = Buffer.from('conteúdo de teste do arquivo JPG');\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.jpg')\n        .field('descricao', 'Comprovante de transferência bancária');\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.nomeArquivo).toBe('comprovante.jpg');\n      expect(response.body.tipoArquivo).toBe('image/jpeg');\n    });\n\n    it('deve rejeitar upload de comprovante com formato não permitido', async () => {\n      // Criar arquivo de teste com formato não permitido\n      const buffer = Buffer.from('conteúdo de teste do arquivo');\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.exe')\n        .field('descricao', 'Arquivo não permitido');\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('não permitido');\n    });\n\n    it('deve rejeitar upload quando pagamento não existe', async () => {\n      // Sobrescrever mock para este teste\n      mockPagamentoRepository.findOne.mockResolvedValueOnce(null);\n\n      // Criar arquivo de teste\n      const buffer = Buffer.from('conteúdo de teste do arquivo');\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/pagamento-inexistente/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.pdf')\n        .field('descricao', 'Comprovante de teste');\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toContain('não encontrado');\n    });\n\n    it('deve rejeitar upload quando pagamento está em status CANCELADO', async () => {\n      // Sobrescrever mock para este teste\n      mockPagamentoRepository.findOne.mockResolvedValueOnce({\n        id: pagamentoId,\n        status: StatusPagamentoEnum.CANCELADO,\n        unidadeId,\n      });\n\n      // Criar arquivo de teste\n      const buffer = Buffer.from('conteúdo de teste do arquivo');\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.pdf')\n        .field('descricao', 'Comprovante de teste');\n\n      expect(response.status).toBe(409);\n      expect(response.body.message).toContain('cancelado');\n    });\n  });\n\n  describe('Listagem de Comprovantes', () => {\n    it('deve listar comprovantes de um pagamento', async () => {\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('items');\n      expect(response.body.items).toBeInstanceOf(Array);\n      expect(response.body.items.length).toBeGreaterThan(0);\n      expect(response.body.items[0]).toHaveProperty('id');\n      expect(response.body.items[0]).toHaveProperty('nomeArquivo');\n    });\n\n    it('deve retornar lista vazia quando não há comprovantes', async () => {\n      // Sobrescrever mock para este teste\n      mockComprovanteRepository.find.mockResolvedValueOnce([]);\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/pagamento-sem-comprovantes/comprovantes`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('items');\n      expect(response.body.items).toBeInstanceOf(Array);\n      expect(response.body.items.length).toBe(0);\n    });\n  });\n\n  describe('Visualização de Comprovante', () => {\n    it('deve obter detalhes de um comprovante específico', async () => {\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/comprovantes/${comprovanteId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('nomeArquivo');\n      expect(response.body).toHaveProperty('urlDownload');\n      expect(response.body.id).toBe(comprovanteId);\n    });\n\n    it('deve retornar 404 quando comprovante não existe', async () => {\n      // Sobrescrever mock para este teste\n      mockComprovanteRepository.findOne.mockResolvedValueOnce(null);\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/comprovantes/comprovante-inexistente`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toContain('não encontrado');\n    });\n  });\n\n  describe('Remoção de Comprovante', () => {\n    it('deve remover comprovante com sucesso', async () => {\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .delete(`/comprovantes/${comprovanteId}`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          motivo: 'Documento incorreto',\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n\n      expect(integracaoDocumentoService.removerComprovante).toHaveBeenCalled();\n      expect(\n        auditoriaPagamentoService.logRemocaoComprovante,\n      ).toHaveBeenCalled();\n    });\n\n    it('deve rejeitar remoção sem informar motivo', async () => {\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .delete(`/comprovantes/${comprovanteId}`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({});\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('motivo');\n    });\n\n    it('deve rejeitar remoção quando comprovante não existe', async () => {\n      // Sobrescrever mock para este teste\n      mockComprovanteRepository.findOne.mockResolvedValueOnce(null);\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .delete(`/comprovantes/comprovante-inexistente`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          motivo: 'Documento incorreto',\n        });\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toContain('não encontrado');\n    });\n\n    it('deve rejeitar remoção quando usuário não tem permissão', async () => {\n      // Token com perfil insuficiente\n      const token = gerarToken(\n        'outro-usuario',\n        ['usuario_basico'],\n        'outra-unidade',\n      );\n\n      const response = await request(app.getHttpServer())\n        .delete(`/comprovantes/${comprovanteId}`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          motivo: 'Documento incorreto',\n        });\n\n      expect(response.status).toBe(403);\n    });\n  });\n\n  describe('Validação de Tipos de Arquivo', () => {\n    it('deve aceitar arquivos PDF', async () => {\n      const buffer = Buffer.from('conteúdo de teste PDF');\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.pdf');\n\n      expect(response.status).toBe(201);\n    });\n\n    it('deve aceitar arquivos de imagem (JPG, PNG)', async () => {\n      const buffer = Buffer.from('conteúdo de teste imagem');\n      const token = gerarToken(usuarioId);\n\n      const responseJpg = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.jpg');\n\n      expect(responseJpg.status).toBe(201);\n\n      const responsePng = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.png');\n\n      expect(responsePng.status).toBe(201);\n    });\n\n    it('deve rejeitar outros tipos de arquivo', async () => {\n      const buffer = Buffer.from('conteúdo de teste arquivo não permitido');\n      const token = gerarToken(usuarioId);\n\n      const responseDoc = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.doc');\n\n      expect(responseDoc.status).toBe(400);\n\n      const responseExe = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.exe');\n\n      expect(responseExe.status).toBe(400);\n    });\n  });\n});\n"],"version":3}