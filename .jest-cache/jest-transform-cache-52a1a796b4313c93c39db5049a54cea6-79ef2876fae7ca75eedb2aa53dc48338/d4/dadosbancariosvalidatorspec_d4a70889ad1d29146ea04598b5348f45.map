{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\validators\\dados-bancarios-validator.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\validators\\dados-bancarios-validator.spec.ts"],"sourcesContent":["import { DadosBancariosValidator } from '../../../validators/dados-bancarios-validator';\n\ndescribe('DadosBancariosValidator', () => {\n  let validator: DadosBancariosValidator;\n\n  beforeEach(() => {\n    validator = new DadosBancariosValidator();\n  });\n\n  describe('validarCodigoBanco', () => {\n    it('deve validar códigos de banco válidos', () => {\n      // Bancos mais comuns no Brasil\n      expect(validator.validarCodigoBanco('001')).toBeTruthy(); // Banco do Brasil\n      expect(validator.validarCodigoBanco('104')).toBeTruthy(); // Caixa Econômica\n      expect(validator.validarCodigoBanco('341')).toBeTruthy(); // Itaú\n      expect(validator.validarCodigoBanco('033')).toBeTruthy(); // Santander\n      expect(validator.validarCodigoBanco('237')).toBeTruthy(); // Bradesco\n    });\n\n    it('deve rejeitar códigos de banco inválidos', () => {\n      expect(validator.validarCodigoBanco('')).toBeFalsy();\n      expect(validator.validarCodigoBanco('0')).toBeFalsy();\n      expect(validator.validarCodigoBanco('00')).toBeFalsy();\n      expect(validator.validarCodigoBanco('000')).toBeFalsy(); // Código inexistente\n      expect(validator.validarCodigoBanco('999')).toBeFalsy(); // Código inexistente\n      expect(validator.validarCodigoBanco('abc')).toBeFalsy(); // Formato incorreto\n      expect(validator.validarCodigoBanco('1234')).toBeFalsy(); // Formato incorreto\n    });\n  });\n\n  describe('validarFormatoAgencia', () => {\n    it('deve validar formatos de agência válidos', () => {\n      expect(validator.validarFormatoAgencia('1234')).toBeTruthy();\n      expect(validator.validarFormatoAgencia('0001')).toBeTruthy();\n      expect(validator.validarFormatoAgencia('9999')).toBeTruthy();\n      // Formatos com dígito verificador\n      expect(validator.validarFormatoAgencia('1234-5')).toBeTruthy();\n      expect(validator.validarFormatoAgencia('0001-2')).toBeTruthy();\n    });\n\n    it('deve rejeitar formatos de agência inválidos', () => {\n      expect(validator.validarFormatoAgencia('')).toBeFalsy();\n      expect(validator.validarFormatoAgencia('123')).toBeFalsy(); // Curto demais\n      expect(validator.validarFormatoAgencia('12345')).toBeFalsy(); // Longo demais sem DV\n      expect(validator.validarFormatoAgencia('abcd')).toBeFalsy(); // Formato incorreto\n      expect(validator.validarFormatoAgencia('1234-')).toBeFalsy(); // DV ausente\n      expect(validator.validarFormatoAgencia('1234-56')).toBeFalsy(); // DV incorreto\n    });\n  });\n\n  describe('validarFormatoConta', () => {\n    it('deve validar formatos de conta válidos', () => {\n      expect(validator.validarFormatoConta('12345-6')).toBeTruthy();\n      expect(validator.validarFormatoConta('00001-0')).toBeTruthy();\n      expect(validator.validarFormatoConta('99999-9')).toBeTruthy();\n      // Contas com formatos variados\n      expect(validator.validarFormatoConta('1234567-8')).toBeTruthy();\n      expect(validator.validarFormatoConta('123456-0')).toBeTruthy();\n    });\n\n    it('deve rejeitar formatos de conta inválidos', () => {\n      expect(validator.validarFormatoConta('')).toBeFalsy();\n      expect(validator.validarFormatoConta('1234')).toBeFalsy(); // Sem DV\n      expect(validator.validarFormatoConta('12345')).toBeFalsy(); // Sem DV\n      expect(validator.validarFormatoConta('12345-')).toBeFalsy(); // DV ausente\n      expect(validator.validarFormatoConta('12345-67')).toBeFalsy(); // DV incorreto\n      expect(validator.validarFormatoConta('abcde-f')).toBeFalsy(); // Formato incorreto\n    });\n  });\n\n  describe('validarContaComDigito', () => {\n    it('deve validar contas com dígito verificador correto', () => {\n      // Casos de teste com algoritmo de verificação simulado\n      // Nota: Esta função depende do algoritmo específico implementado no validator\n      // Os exemplos abaixo assumem implementações comuns de validação\n      \n      // Simulando casos onde o dígito verificador está correto\n      const mockValid = jest.spyOn(validator, 'calcularDigitoVerificadorConta')\n        .mockImplementation(() => '6');\n      \n      expect(validator.validarContaComDigito('12345-6')).toBeTruthy();\n      expect(mockValid).toHaveBeenCalledWith('12345');\n      \n      mockValid.mockRestore();\n    });\n\n    it('deve rejeitar contas com dígito verificador incorreto', () => {\n      // Simulando casos onde o dígito verificador está incorreto\n      const mockInvalid = jest.spyOn(validator, 'calcularDigitoVerificadorConta')\n        .mockImplementation(() => '7');\n      \n      expect(validator.validarContaComDigito('12345-6')).toBeFalsy();\n      expect(mockInvalid).toHaveBeenCalledWith('12345');\n      \n      mockInvalid.mockRestore();\n    });\n  });\n\n  describe('calcularDigitoVerificadorConta', () => {\n    it('deve calcular corretamente dígitos verificadores', () => {\n      // Estes testes dependem da implementação específica do algoritmo\n      // Os valores esperados devem ser ajustados de acordo com o algoritmo real usado\n      \n      // Exemplos genéricos baseados em algoritmos comuns\n      expect(validator.calcularDigitoVerificadorConta('12345')).toBeDefined();\n      expect(typeof validator.calcularDigitoVerificadorConta('12345')).toBe('string');\n      expect(validator.calcularDigitoVerificadorConta('12345').length).toBe(1);\n    });\n  });\n\n  describe('validarContaBancaria', () => {\n    it('deve validar combinações banco-agência-conta válidas', () => {\n      // Spy nas funções individuais para mockear comportamento válido\n      jest.spyOn(validator, 'validarCodigoBanco').mockReturnValue(true);\n      jest.spyOn(validator, 'validarFormatoAgencia').mockReturnValue(true);\n      jest.spyOn(validator, 'validarFormatoConta').mockReturnValue(true);\n\n      expect(validator.validarContaBancaria('001', '1234', '12345-6')).toBeTruthy();\n    });\n\n    it('deve rejeitar se o código do banco for inválido', () => {\n      jest.spyOn(validator, 'validarCodigoBanco').mockReturnValue(false);\n      jest.spyOn(validator, 'validarFormatoAgencia').mockReturnValue(true);\n      jest.spyOn(validator, 'validarFormatoConta').mockReturnValue(true);\n\n      expect(validator.validarContaBancaria('000', '1234', '12345-6')).toBeFalsy();\n    });\n\n    it('deve rejeitar se o formato da agência for inválido', () => {\n      jest.spyOn(validator, 'validarCodigoBanco').mockReturnValue(true);\n      jest.spyOn(validator, 'validarFormatoAgencia').mockReturnValue(false);\n      jest.spyOn(validator, 'validarFormatoConta').mockReturnValue(true);\n\n      expect(validator.validarContaBancaria('001', 'abcd', '12345-6')).toBeFalsy();\n    });\n\n    it('deve rejeitar se o formato da conta for inválido', () => {\n      jest.spyOn(validator, 'validarCodigoBanco').mockReturnValue(true);\n      jest.spyOn(validator, 'validarFormatoAgencia').mockReturnValue(true);\n      jest.spyOn(validator, 'validarFormatoConta').mockReturnValue(false);\n\n      expect(validator.validarContaBancaria('001', '1234', 'abcde-f')).toBeFalsy();\n    });\n  });\n});\n"],"version":3}