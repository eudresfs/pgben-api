{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\papel-cidadao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\papel-cidadao.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiQuery,\n  ApiBody,\n  getSchemaPath,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { ScopeType } from '../../../entities/user-permission.entity';\nimport { PapelCidadaoService } from '../services/papel-cidadao.service';\nimport { CreatePapelCidadaoDto } from '../dto/create-papel-cidadao.dto';\nimport { TipoPapel, PaperType } from '../../../enums/tipo-papel.enum';\n\n/**\n * Controlador responsável por gerenciar os papéis dos cidadãos no sistema.\n *\n * Os papéis definem as funções que um cidadão pode assumir, como beneficiário,\n * requerente ou representante legal. Cada papel possui regras específicas e\n * metadados associados.\n */\n@ApiTags('Cidadão')\n@Controller('cidadao/papel')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class PapelCidadaoController {\n  private readonly logger = new Logger(PapelCidadaoController.name);\n  constructor(private readonly papelCidadaoService: PapelCidadaoService) {}\n\n  /**\n   * Cria um novo papel para um cidadão\n   *\n   * Este endpoint permite atribuir um papel específico a um cidadão, como beneficiário,\n   * requerente ou representante legal. Cada papel pode exigir metadados específicos.\n   *\n   * @example\n   * Exemplo para criar um papel de beneficiário:\n   * ```json\n   * {\n   *   \"tipo_papel\": \"BENEFICIARIO\",\n   *   \"cidadao_id\": \"3eb81648-8da3-4e3a-97a6-e70c00706f22\"\n   * }\n   * ```\n   *\n   * @example\n   * Exemplo para criar um papel de representante legal:\n   * ```json\n   * {\n   *   \"tipo_papel\": \"REPRESENTANTE_LEGAL\",\n   *   \"cidadao_id\": \"3eb81648-8da3-4e3a-97a6-e70c00706f22\",\n   *   \"metadados\": {\n   *     \"documento_representacao\": \"12345678\",\n   *     \"data_validade_representacao\": \"2026-01-01\"\n   *   }\n   * }\n   * ```\n   */\n  @Post()\n  @RequiresPermission({\n    permissionName: 'cidadao.papel.criar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'cidadao.unidadeId',\n  })\n  @ApiOperation({ summary: 'Criar novo papel para um cidadão' })\n  @ApiBody({\n    description: 'Dados para criação de papel de cidadão',\n    type: CreatePapelCidadaoDto,\n    examples: {\n      beneficiario: {\n        value: {\n          tipo_papel: 'BENEFICIARIO',\n          cidadao_id: '3eb81648-8da3-4e3a-97a6-e70c00706f22',\n        },\n        summary: 'Papel de Beneficiário',\n      },\n      representante: {\n        value: {\n          tipo_papel: 'REPRESENTANTE_LEGAL',\n          cidadao_id: '3eb81648-8da3-4e3a-97a6-e70c00706f22',\n          metadados: {\n            documento_representacao: '12345678',\n            data_validade_representacao: '2026-01-01',\n          },\n        },\n        summary: 'Papel de Representante Legal',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Papel criado com sucesso',\n    schema: {\n      example: {\n        id: '550e8400-e29b-41d4-a716-446655440000',\n        cidadao_id: '3eb81648-8da3-4e3a-97a6-e70c00706f22',\n        tipo_papel: 'BENEFICIARIO',\n        metadados: {},\n        ativo: true,\n        created_at: '2025-05-30T23:45:38.000Z',\n        updated_at: '2025-05-30T23:45:38.000Z',\n      },\n    },\n  })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  @ApiResponse({ status: 404, description: 'Cidadão não encontrado' })\n  @ApiResponse({ status: 409, description: 'Cidadão já possui este papel' })\n  async create(@Body() createPapelCidadaoDto: CreatePapelCidadaoDto) {\n    try {\n      // Normalizar o tipo de papel para maiúsculas para garantir compatibilidade com o enum do banco\n      // Convertemos para string primeiro para garantir que o método toUpperCase() está disponível\n      const tipoPapelLowerCase = String(\n        createPapelCidadaoDto.tipo_papel,\n      ).toLowerCase();\n\n      // Verificar se o tipo de papel normalizado é válido\n      const validPaperTypes = Object.values(TipoPapel).map((v) =>\n        String(v).toLowerCase(),\n      );\n      if (!validPaperTypes.includes(tipoPapelLowerCase)) {\n        throw new BadRequestException(\n          `Tipo de papel inválido: ${createPapelCidadaoDto.tipo_papel}. ` +\n            `Valores permitidos: ${Object.keys(TipoPapel).join(', ')}`,\n        );\n      }\n\n      // Criar um novo DTO com o tipo de papel normalizado\n      // Usamos 'as PaperType' para garantir compatibilidade de tipo\n      const normalizedDto: CreatePapelCidadaoDto = {\n        ...createPapelCidadaoDto,\n        tipo_papel: tipoPapelLowerCase as PaperType,\n      };\n\n      this.logger.debug(\n        `Criando papel ${normalizedDto.tipo_papel} para cidadão ${normalizedDto.cidadao_id}`,\n      );\n      return await this.papelCidadaoService.create(normalizedDto);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao criar papel para cidadão: ${error.message}`,\n        error.stack,\n      );\n\n      // Tratamento específico para erros de trigger do banco\n      if (\n        error.message &&\n        error.message.includes(\n          'Cidadão não pode ser beneficiário, pois já está em uma composição familiar',\n        )\n      ) {\n        throw new ConflictException(\n          'Cidadão não pode ser beneficiário pois já faz parte de uma composição familiar. ' +\n            'Remova o cidadão da composição familiar antes de atribuir o papel de beneficiário.',\n        );\n      }\n\n      // Tratamento específico para erros de enum\n      if (\n        error.message &&\n        error.message.includes('valor de entrada é inválido para enum')\n      ) {\n        throw new BadRequestException(\n          `Tipo de papel inválido: ${createPapelCidadaoDto.tipo_papel}. ` +\n            `Valores permitidos: beneficiario, requerente, representante_legal`,\n        );\n      }\n\n      // Tratamento para erros de violação de restrição de unicidade\n      if (error.code === '23505') {\n        throw new ConflictException(\n          'Já existe um papel ativo deste tipo para o cidadão',\n        );\n      }\n\n      // Tratamento para erros de violação de chave estrangeira\n      if (error.code === '23503') {\n        throw new BadRequestException(\n          'Cidadão não encontrado ou dados inválidos',\n        );\n      }\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n      throw new BadRequestException('Erro ao criar papel para cidadão');\n    }\n  }\n\n  /**\n   * Lista todos os papéis de um cidadão\n   *\n   * Este endpoint retorna todos os papéis ativos associados a um cidadão específico.\n   * Os papéis podem incluir beneficiário, requerente, representante legal, etc.\n   *\n   * @param cidadaoId - ID do cidadão para buscar os papéis\n   * @returns Lista de papéis do cidadão\n   *\n   * @example\n   * Exemplo de resposta:\n   * ```json\n   * [\n   *   {\n   *     \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n   *     \"cidadao_id\": \"3eb81648-8da3-4e3a-97a6-e70c00706f22\",\n   *     \"tipo_papel\": \"BENEFICIARIO\",\n   *     \"metadados\": {},\n   *     \"ativo\": true,\n   *     \"created_at\": \"2025-05-30T23:45:38.000Z\",\n   *     \"updated_at\": \"2025-05-30T23:45:38.000Z\"\n   *   }\n   * ]\n   * ```\n   */\n  @Get('cidadao/:cidadaoId')\n  @RequiresPermission({\n    permissionName: 'cidadao.papel.listar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'cidadao.unidadeId',\n  })\n  @ApiOperation({ summary: 'Listar papéis de um cidadão' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de papéis retornada com sucesso',\n    schema: {\n      type: 'array',\n      items: {\n        example: {\n          id: '550e8400-e29b-41d4-a716-446655440000',\n          cidadao_id: '3eb81648-8da3-4e3a-97a6-e70c00706f22',\n          tipo_papel: 'BENEFICIARIO',\n          metadados: {},\n          ativo: true,\n          created_at: '2025-05-30T23:45:38.000Z',\n          updated_at: '2025-05-30T23:45:38.000Z',\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 404, description: 'Cidadão não encontrado' })\n  async findByCidadaoId(@Param('cidadaoId') cidadaoId: string) {\n    return this.papelCidadaoService.findByCidadaoId(cidadaoId);\n  }\n\n  /**\n   * Busca cidadãos por tipo de papel\n   *\n   * Este endpoint retorna uma lista paginada de cidadãos que possuem um determinado papel.\n   * Útil para listar todos os beneficiários, requerentes ou representantes legais.\n   *\n   * @param tipoPapel - Tipo de papel para filtrar (BENEFICIARIO, REQUERENTE, REPRESENTANTE_LEGAL)\n   * @param page - Número da página para paginação (opcional, padrão: 1)\n   * @param limit - Limite de itens por página (opcional, padrão: 10)\n   * @returns Lista paginada de cidadãos com o papel especificado\n   *\n   * @example\n   * Exemplo de resposta:\n   * ```json\n   * {\n   *   \"items\": [\n   *     {\n   *       \"id\": \"3eb81648-8da3-4e3a-97a6-e70c00706f22\",\n   *       \"nome\": \"João da Silva\",\n   *       \"cpf\": \"123.456.789-00\",\n   *       \"nis\": \"12345678901\",\n   *       \"telefone\": \"(84) 99999-9999\",\n   *       \"endereco\": \"Rua das Flores, 123\",\n   *       \"unidade_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n   *     }\n   *   ],\n   *   \"meta\": {\n   *     \"totalItems\": 1,\n   *     \"itemCount\": 1,\n   *     \"itemsPerPage\": 10,\n   *     \"totalPages\": 1,\n   *     \"currentPage\": 1\n   *   }\n   * }\n   * ```\n   */\n  @Get('tipo/:tipoPapel')\n  @RequiresPermission({ permissionName: 'cidadao.papel.listar' })\n  @ApiOperation({ summary: 'Buscar cidadãos por tipo de papel' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de cidadãos retornada com sucesso',\n    schema: {\n      example: {\n        items: [\n          {\n            id: '3eb81648-8da3-4e3a-97a6-e70c00706f22',\n            nome: 'João da Silva',\n            cpf: '123.456.789-00',\n            nis: '12345678901',\n            telefone: '(84) 99999-9999',\n            endereco: 'Rua das Flores, 123',\n            unidade_id: '550e8400-e29b-41d4-a716-446655440000',\n          },\n        ],\n        meta: {\n          totalItems: 1,\n          itemCount: 1,\n          itemsPerPage: 10,\n          totalPages: 1,\n          currentPage: 1,\n        },\n      },\n    },\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Número da página para paginação',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Limite de itens por página',\n  })\n  @ApiQuery({\n    name: 'search',\n    required: false,\n    type: String,\n    description: 'Termo de busca para filtrar cidadãos',\n  })\n  async findCidadaosByTipoPapel(\n    @Param('tipoPapel') tipoPapel: PaperType,\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n  ) {\n    // Normalizar o tipo de papel para maiúsculas para garantir compatibilidade\n    const normalizedTipoPapel = String(tipoPapel).toUpperCase() as PaperType;\n    this.logger.debug(`Buscando cidadãos com papel ${normalizedTipoPapel}`);\n\n    return this.papelCidadaoService.findCidadaosByTipoPapel(\n      normalizedTipoPapel,\n      {\n        page: page ? Number(page) : undefined,\n        limit: limit ? Number(limit) : undefined,\n      },\n    );\n  }\n\n  /**\n   * Verifica se um cidadão possui um determinado papel\n   *\n   * Este endpoint verifica se um cidadão específico possui um determinado papel ativo.\n   * Útil para validar se um cidadão é beneficiário, requerente ou representante legal.\n   *\n   * @param cidadaoId - ID do cidadão para verificar\n   * @param tipoPapel - Tipo de papel para verificar (BENEFICIARIO, REQUERENTE, REPRESENTANTE_LEGAL)\n   * @returns Objeto com a propriedade temPapel (true/false)\n   *\n   * @example\n   * Exemplo de resposta:\n   * ```json\n   * {\n   *   \"temPapel\": true\n   * }\n   * ```\n   */\n  @Get('verificar/:cidadaoId/:tipoPapel')\n  @RequiresPermission({\n    permissionName: 'cidadao.papel.visualizar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'cidadao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Verificar se um cidadão possui um determinado papel',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Verificação realizada com sucesso',\n    schema: {\n      example: {\n        temPapel: true,\n      },\n    },\n  })\n  async verificarPapel(\n    @Param('cidadaoId') cidadaoId: string,\n    @Param('tipoPapel') tipoPapel: PaperType,\n  ) {\n    // Normalizar o tipo de papel para maiúsculas para garantir compatibilidade\n    const normalizedTipoPapel = String(tipoPapel).toUpperCase() as PaperType;\n    this.logger.debug(\n      `Verificando se cidadão ${cidadaoId} possui papel ${normalizedTipoPapel}`,\n    );\n\n    const temPapel = await this.papelCidadaoService.verificarPapel(\n      cidadaoId,\n      normalizedTipoPapel,\n    );\n    return { temPapel };\n  }\n\n  /**\n   * Desativa um papel de um cidadão\n   *\n   * Este endpoint desativa (soft delete) um papel específico de um cidadão.\n   * O papel não é removido do banco de dados, apenas marcado como inativo.\n   *\n   * @param id - ID do papel a ser desativado\n   * @returns Objeto com informações do papel desativado\n   *\n   * @example\n   * Exemplo de resposta:\n   * ```json\n   * {\n   *   \"id\": \"550e8400-e29b-41d4-a716-446655440000\",\n   *   \"cidadao_id\": \"3eb81648-8da3-4e3a-97a6-e70c00706f22\",\n   *   \"tipo_papel\": \"BENEFICIARIO\",\n   *   \"metadados\": {},\n   *   \"ativo\": false,\n   *   \"created_at\": \"2025-05-30T23:45:38.000Z\",\n   *   \"updated_at\": \"2025-05-30T23:46:38.000Z\",\n   *   \"removed_at\": \"2025-05-30T23:46:38.000Z\"\n   * }\n   * ```\n   */\n  @Delete(':id')\n  @RequiresPermission({\n    permissionName: 'cidadao.papel.excluir',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'papel.cidadao.unidadeId',\n  })\n  @ApiOperation({ summary: 'Desativar papel de um cidadão' })\n  @ApiResponse({\n    status: 200,\n    description: 'Papel desativado com sucesso',\n    schema: {\n      example: {\n        id: '550e8400-e29b-41d4-a716-446655440000',\n        cidadao_id: '3eb81648-8da3-4e3a-97a6-e70c00706f22',\n        tipo_papel: 'BENEFICIARIO',\n        metadados: {},\n        ativo: false,\n        created_at: '2025-05-30T23:45:38.000Z',\n        updated_at: '2025-05-30T23:46:38.000Z',\n        removed_at: '2025-05-30T23:46:38.000Z',\n      },\n    },\n  })\n  @ApiResponse({ status: 404, description: 'Papel não encontrado' })\n  async desativar(@Param('id') id: string) {\n    this.logger.debug(`Desativando papel com ID ${id}`);\n\n    return this.papelCidadaoService.desativar(id);\n  }\n}\n"],"version":3}