479282a742e741d7e9a94775bdb51135
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// src/auth/controllers/password-reset.controller.spec.ts
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const throttler_1 = require("@nestjs/throttler");
const password_reset_controller_1 = require("./password-reset.controller");
const password_reset_service_1 = require("../services/password-reset.service");
describe('PasswordResetController', () => {
    let controller;
    let passwordResetService;
    const mockPasswordResetService = {
        requestPasswordReset: jest.fn(),
        resetPassword: jest.fn(),
        validateToken: jest.fn(),
        getStats: jest.fn(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [password_reset_controller_1.PasswordResetController],
            providers: [
                {
                    provide: password_reset_service_1.PasswordResetService,
                    useValue: mockPasswordResetService,
                },
            ],
        })
            .overrideGuard(throttler_1.ThrottlerGuard)
            .useValue({ canActivate: () => true })
            .compile();
        controller = module.get(password_reset_controller_1.PasswordResetController);
        passwordResetService = module.get(password_reset_service_1.PasswordResetService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('forgotPassword', () => {
        const forgotPasswordDto = {
            email: 'test@semtas.gov.br',
        };
        it('deve solicitar recuperação de senha com sucesso', async () => {
            const mockResponse = {
                message: 'Se o email existir, um link de recuperação será enviado',
                timestamp: '2024-01-15T10:30:00Z',
                expiresInMinutes: 15,
            };
            mockPasswordResetService.requestPasswordReset.mockResolvedValue(mockResponse);
            const result = await controller.forgotPassword(forgotPasswordDto);
            expect(passwordResetService.requestPasswordReset).toHaveBeenCalledWith(forgotPasswordDto.email);
            expect(result).toEqual(mockResponse);
        });
        it('deve retornar erro para email inválido', async () => {
            const invalidDto = { email: 'email-invalido' };
            mockPasswordResetService.requestPasswordReset.mockRejectedValue(new common_1.BadRequestException('Email inválido'));
            await expect(controller.forgotPassword(invalidDto)).rejects.toThrow(common_1.BadRequestException);
        });
        it('deve aplicar rate limiting', async () => {
            // Este teste verifica se o decorator @Throttle está aplicado
            const metadata = Reflect.getMetadata('throttler:limit', controller.forgotPassword);
            expect(metadata).toBeDefined();
        });
    });
    describe('resetPassword', () => {
        const resetPasswordDto = {
            token: 'valid-token-123',
            newPassword: 'NovaSenh@123',
            confirmPassword: 'NovaSenh@123',
        };
        it('deve redefinir senha com sucesso', async () => {
            const mockResponse = {
                message: 'Senha redefinida com sucesso',
                timestamp: '2024-01-15T10:35:00Z',
                requiresReauth: true,
            };
            mockPasswordResetService.resetPassword.mockResolvedValue(mockResponse);
            const result = await controller.resetPassword(resetPasswordDto);
            expect(passwordResetService.resetPassword).toHaveBeenCalledWith(resetPasswordDto.token, resetPasswordDto.newPassword);
            expect(result).toEqual(mockResponse);
        });
        it('deve retornar erro para token inválido', async () => {
            mockPasswordResetService.resetPassword.mockRejectedValue(new common_1.BadRequestException('Token inválido ou expirado'));
            await expect(controller.resetPassword(resetPasswordDto)).rejects.toThrow(common_1.BadRequestException);
        });
        it('deve validar confirmação de senha', async () => {
            const invalidDto = {
                ...resetPasswordDto,
                confirmPassword: 'senha-diferente',
            };
            await expect(controller.resetPassword(invalidDto)).rejects.toThrow(common_1.BadRequestException);
        });
        it('deve validar força da senha', async () => {
            const weakPasswordDto = {
                ...resetPasswordDto,
                newPassword: '123456',
                confirmPassword: '123456',
            };
            // A validação deve falhar na camada de DTO
            // Este teste simula a validação do class-validator
            expect(weakPasswordDto.newPassword).not.toMatch(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/);
        });
    });
    describe('validateToken', () => {
        const validateTokenDto = {
            token: 'valid-token-123',
        };
        it('deve validar token com sucesso', async () => {
            const mockResponse = {
                valid: true,
                minutesRemaining: 12,
                email: 'test@semtas.gov.br',
            };
            mockPasswordResetService.validateToken.mockResolvedValue(mockResponse);
            const result = await controller.validateToken(validateTokenDto);
            expect(passwordResetService.validateToken).toHaveBeenCalledWith(validateTokenDto.token);
            expect(result).toEqual(mockResponse);
        });
        it('deve retornar inválido para token expirado', async () => {
            const mockResponse = {
                valid: false,
                error: 'Token expirado',
            };
            mockPasswordResetService.validateToken.mockResolvedValue(mockResponse);
            const result = await controller.validateToken(validateTokenDto);
            expect(result.valid).toBe(false);
            expect(result.error).toBeDefined();
        });
        it('deve retornar inválido para token não encontrado', async () => {
            mockPasswordResetService.validateToken.mockRejectedValue(new common_1.NotFoundException('Token não encontrado'));
            await expect(controller.validateToken(validateTokenDto)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('getStats', () => {
        it('deve retornar estatísticas para administradores', async () => {
            const mockStats = {
                requestsLast24h: 15,
                successfulResetsLast24h: 12,
                activeTokens: 8,
                expiredTokensLast24h: 3,
                successRate: 80.0,
                uniqueUsersLast24h: 14,
            };
            mockPasswordResetService.getStats.mockResolvedValue(mockStats);
            const result = await controller.getStats();
            expect(passwordResetService.getStats).toHaveBeenCalled();
            expect(result).toEqual(mockStats);
        });
        it('deve ter proteção de acesso por papel', () => {
            // Verifica se o decorator @Roles está aplicado
            const metadata = Reflect.getMetadata('roles', controller.getStats);
            expect(metadata).toContain('ADMIN');
        });
    });
    describe('Validações de DTO', () => {
        it('deve validar formato de email', () => {
            const invalidEmails = [
                'email-sem-arroba',
                '@dominio.com',
                'email@',
                'email@dominio',
                '',
            ];
            invalidEmails.forEach((email) => {
                expect(email).not.toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
            });
        });
        it('deve validar tamanho mínimo do token', () => {
            const shortToken = 'abc123';
            expect(shortToken.length).toBeLessThan(32);
        });
        it('deve validar força da senha', () => {
            const validPasswords = [
                'MinhaSenh@123',
                'Outr@Senha456',
                'Segur@nca789',
            ];
            const invalidPasswords = [
                '123456',
                'password',
                'PASSWORD',
                'Password',
                'Password123',
                'password@123',
            ];
            const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/;
            validPasswords.forEach((password) => {
                expect(password).toMatch(passwordRegex);
            });
            invalidPasswords.forEach((password) => {
                expect(password).not.toMatch(passwordRegex);
            });
        });
    });
    describe('Rate Limiting', () => {
        it('deve ter rate limiting configurado para forgot-password', () => {
            // Verifica se o decorator @Throttle está aplicado com os valores corretos
            const metadata = Reflect.getMetadata('throttler:limit', controller.forgotPassword);
            expect(metadata).toBeDefined();
        });
        it('deve ter rate limiting configurado para reset-password', () => {
            const metadata = Reflect.getMetadata('throttler:limit', controller.resetPassword);
            expect(metadata).toBeDefined();
        });
    });
    describe('Documentação Swagger', () => {
        it('deve ter documentação completa', () => {
            // Verifica se os decorators do Swagger estão aplicados
            const apiTags = Reflect.getMetadata('swagger/apiUseTags', password_reset_controller_1.PasswordResetController);
            expect(apiTags).toContain('Recuperação de Senha');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXGNvbnRyb2xsZXJzXFxwYXNzd29yZC1yZXNldC5jb250cm9sbGVyLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBeUQ7QUFDekQsNkNBQXNEO0FBQ3RELDJDQUF3RTtBQUN4RSxpREFBbUQ7QUFDbkQsMkVBQXNFO0FBQ3RFLCtFQUEwRTtBQU8xRSxRQUFRLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO0lBQ3ZDLElBQUksVUFBbUMsQ0FBQztJQUN4QyxJQUFJLG9CQUF1RCxDQUFDO0lBRTVELE1BQU0sd0JBQXdCLEdBQUc7UUFDL0Isb0JBQW9CLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUMvQixhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUN4QixhQUFhLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUN4QixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNwQixDQUFDO0lBRUYsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxXQUFXLEVBQUUsQ0FBQyxtREFBdUIsQ0FBQztZQUN0QyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLDZDQUFvQjtvQkFDN0IsUUFBUSxFQUFFLHdCQUF3QjtpQkFDbkM7YUFDRjtTQUNGLENBQUM7YUFDQyxhQUFhLENBQUMsMEJBQWMsQ0FBQzthQUM3QixRQUFRLENBQUMsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDckMsT0FBTyxFQUFFLENBQUM7UUFFYixVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBMEIsbURBQXVCLENBQUMsQ0FBQztRQUMxRSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLDZDQUFvQixD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UUFDN0IsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLEdBQUcsRUFBRTtZQUNqRSwwRUFBMEU7WUFDMUUsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FDbEMsaUJBQWlCLEVBQ2pCLFVBQVUsQ0FBQyxjQUFjLENBQzFCLENBQUM7WUFDRixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsd0RBQXdELEVBQUUsR0FBRyxFQUFFO1lBQ2hFLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQ2xDLGlCQUFpQixFQUNqQixVQUFVLENBQUMsYUFBYSxDQUN6QixDQUFDO1lBQ0YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ3BDLEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7WUFDeEMsdURBQXVEO1lBQ3ZELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsb0JBQW9CLEVBQUUsbURBQXVCLENBQUMsQ0FBQztZQUNuRixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxhdXRoXFxjb250cm9sbGVyc1xccGFzc3dvcmQtcmVzZXQuY29udHJvbGxlci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9hdXRoL2NvbnRyb2xsZXJzL3Bhc3N3b3JkLXJlc2V0LmNvbnRyb2xsZXIuc3BlYy50c1xuaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBCYWRSZXF1ZXN0RXhjZXB0aW9uLCBOb3RGb3VuZEV4Y2VwdGlvbiB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IFRocm90dGxlckd1YXJkIH0gZnJvbSAnQG5lc3Rqcy90aHJvdHRsZXInO1xuaW1wb3J0IHsgUGFzc3dvcmRSZXNldENvbnRyb2xsZXIgfSBmcm9tICcuL3Bhc3N3b3JkLXJlc2V0LmNvbnRyb2xsZXInO1xuaW1wb3J0IHsgUGFzc3dvcmRSZXNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wYXNzd29yZC1yZXNldC5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIEZvcmdvdFBhc3N3b3JkRHRvLFxuICBSZXNldFBhc3N3b3JkRHRvLFxuICBWYWxpZGF0ZVRva2VuRHRvLFxufSBmcm9tICcuLi9kdG8vcGFzc3dvcmQtcmVzZXQuZHRvJztcblxuZGVzY3JpYmUoJ1Bhc3N3b3JkUmVzZXRDb250cm9sbGVyJywgKCkgPT4ge1xuICBsZXQgY29udHJvbGxlcjogUGFzc3dvcmRSZXNldENvbnRyb2xsZXI7XG4gIGxldCBwYXNzd29yZFJlc2V0U2VydmljZTogamVzdC5Nb2NrZWQ8UGFzc3dvcmRSZXNldFNlcnZpY2U+O1xuXG4gIGNvbnN0IG1vY2tQYXNzd29yZFJlc2V0U2VydmljZSA9IHtcbiAgICByZXF1ZXN0UGFzc3dvcmRSZXNldDogamVzdC5mbigpLFxuICAgIHJlc2V0UGFzc3dvcmQ6IGplc3QuZm4oKSxcbiAgICB2YWxpZGF0ZVRva2VuOiBqZXN0LmZuKCksXG4gICAgZ2V0U3RhdHM6IGplc3QuZm4oKSxcbiAgfTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgY29udHJvbGxlcnM6IFtQYXNzd29yZFJlc2V0Q29udHJvbGxlcl0sXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFBhc3N3b3JkUmVzZXRTZXJ2aWNlLFxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrUGFzc3dvcmRSZXNldFNlcnZpY2UsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pXG4gICAgICAub3ZlcnJpZGVHdWFyZChUaHJvdHRsZXJHdWFyZClcbiAgICAgIC51c2VWYWx1ZSh7IGNhbkFjdGl2YXRlOiAoKSA9PiB0cnVlIH0pXG4gICAgICAuY29tcGlsZSgpO1xuXG4gICAgY29udHJvbGxlciA9IG1vZHVsZS5nZXQ8UGFzc3dvcmRSZXNldENvbnRyb2xsZXI+KFBhc3N3b3JkUmVzZXRDb250cm9sbGVyKTtcbiAgICBwYXNzd29yZFJlc2V0U2VydmljZSA9IG1vZHVsZS5nZXQoUGFzc3dvcmRSZXNldFNlcnZpY2UpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnZm9yZ290UGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgY29uc3QgZm9yZ290UGFzc3dvcmREdG86IEZvcmdvdFBhc3N3b3JkRHRvID0ge1xuICAgICAgZW1haWw6ICd0ZXN0QHNlbXRhcy5nb3YuYnInLFxuICAgIH07XG5cbiAgICBpdCgnZGV2ZSBzb2xpY2l0YXIgcmVjdXBlcmHDp8OjbyBkZSBzZW5oYSBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgbWVzc2FnZTogJ1NlIG8gZW1haWwgZXhpc3RpciwgdW0gbGluayBkZSByZWN1cGVyYcOnw6NvIHNlcsOhIGVudmlhZG8nLFxuICAgICAgICB0aW1lc3RhbXA6ICcyMDI0LTAxLTE1VDEwOjMwOjAwWicsXG4gICAgICAgIGV4cGlyZXNJbk1pbnV0ZXM6IDE1LFxuICAgICAgfTtcblxuICAgICAgbW9ja1Bhc3N3b3JkUmVzZXRTZXJ2aWNlLnJlcXVlc3RQYXNzd29yZFJlc2V0Lm1vY2tSZXNvbHZlZFZhbHVlKFxuICAgICAgICBtb2NrUmVzcG9uc2UsXG4gICAgICApO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmZvcmdvdFBhc3N3b3JkKGZvcmdvdFBhc3N3b3JkRHRvKTtcblxuICAgICAgZXhwZWN0KHBhc3N3b3JkUmVzZXRTZXJ2aWNlLnJlcXVlc3RQYXNzd29yZFJlc2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZm9yZ290UGFzc3dvcmREdG8uZW1haWwsXG4gICAgICApO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrUmVzcG9uc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgcmV0b3JuYXIgZXJybyBwYXJhIGVtYWlsIGludsOhbGlkbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWREdG8gPSB7IGVtYWlsOiAnZW1haWwtaW52YWxpZG8nIH07XG5cbiAgICAgIG1vY2tQYXNzd29yZFJlc2V0U2VydmljZS5yZXF1ZXN0UGFzc3dvcmRSZXNldC5tb2NrUmVqZWN0ZWRWYWx1ZShcbiAgICAgICAgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ0VtYWlsIGludsOhbGlkbycpLFxuICAgICAgKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KFxuICAgICAgICBjb250cm9sbGVyLmZvcmdvdFBhc3N3b3JkKGludmFsaWREdG8gYXMgRm9yZ290UGFzc3dvcmREdG8pLFxuICAgICAgKS5yZWplY3RzLnRvVGhyb3coQmFkUmVxdWVzdEV4Y2VwdGlvbik7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBhcGxpY2FyIHJhdGUgbGltaXRpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBFc3RlIHRlc3RlIHZlcmlmaWNhIHNlIG8gZGVjb3JhdG9yIEBUaHJvdHRsZSBlc3TDoSBhcGxpY2Fkb1xuICAgICAgY29uc3QgbWV0YWRhdGEgPSBSZWZsZWN0LmdldE1ldGFkYXRhKFxuICAgICAgICAndGhyb3R0bGVyOmxpbWl0JyxcbiAgICAgICAgY29udHJvbGxlci5mb3Jnb3RQYXNzd29yZCxcbiAgICAgICk7XG4gICAgICBleHBlY3QobWV0YWRhdGEpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZXNldFBhc3N3b3JkJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc2V0UGFzc3dvcmREdG86IFJlc2V0UGFzc3dvcmREdG8gPSB7XG4gICAgICB0b2tlbjogJ3ZhbGlkLXRva2VuLTEyMycsXG4gICAgICBuZXdQYXNzd29yZDogJ05vdmFTZW5oQDEyMycsXG4gICAgICBjb25maXJtUGFzc3dvcmQ6ICdOb3ZhU2VuaEAxMjMnLFxuICAgIH07XG5cbiAgICBpdCgnZGV2ZSByZWRlZmluaXIgc2VuaGEgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgIG1lc3NhZ2U6ICdTZW5oYSByZWRlZmluaWRhIGNvbSBzdWNlc3NvJyxcbiAgICAgICAgdGltZXN0YW1wOiAnMjAyNC0wMS0xNVQxMDozNTowMFonLFxuICAgICAgICByZXF1aXJlc1JlYXV0aDogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tQYXNzd29yZFJlc2V0U2VydmljZS5yZXNldFBhc3N3b3JkLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIucmVzZXRQYXNzd29yZChyZXNldFBhc3N3b3JkRHRvKTtcblxuICAgICAgZXhwZWN0KHBhc3N3b3JkUmVzZXRTZXJ2aWNlLnJlc2V0UGFzc3dvcmQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICByZXNldFBhc3N3b3JkRHRvLnRva2VuLFxuICAgICAgICByZXNldFBhc3N3b3JkRHRvLm5ld1Bhc3N3b3JkLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Jlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHJldG9ybmFyIGVycm8gcGFyYSB0b2tlbiBpbnbDoWxpZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUGFzc3dvcmRSZXNldFNlcnZpY2UucmVzZXRQYXNzd29yZC5tb2NrUmVqZWN0ZWRWYWx1ZShcbiAgICAgICAgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ1Rva2VuIGludsOhbGlkbyBvdSBleHBpcmFkbycpLFxuICAgICAgKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KGNvbnRyb2xsZXIucmVzZXRQYXNzd29yZChyZXNldFBhc3N3b3JkRHRvKSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICBCYWRSZXF1ZXN0RXhjZXB0aW9uLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHZhbGlkYXIgY29uZmlybWHDp8OjbyBkZSBzZW5oYScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGludmFsaWREdG8gPSB7XG4gICAgICAgIC4uLnJlc2V0UGFzc3dvcmREdG8sXG4gICAgICAgIGNvbmZpcm1QYXNzd29yZDogJ3NlbmhhLWRpZmVyZW50ZScsXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIGNvbnRyb2xsZXIucmVzZXRQYXNzd29yZChpbnZhbGlkRHRvKSxcbiAgICAgICkucmVqZWN0cy50b1Rocm93KEJhZFJlcXVlc3RFeGNlcHRpb24pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgdmFsaWRhciBmb3LDp2EgZGEgc2VuaGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB3ZWFrUGFzc3dvcmREdG8gPSB7XG4gICAgICAgIC4uLnJlc2V0UGFzc3dvcmREdG8sXG4gICAgICAgIG5ld1Bhc3N3b3JkOiAnMTIzNDU2JyxcbiAgICAgICAgY29uZmlybVBhc3N3b3JkOiAnMTIzNDU2JyxcbiAgICAgIH07XG5cbiAgICAgIC8vIEEgdmFsaWRhw6fDo28gZGV2ZSBmYWxoYXIgbmEgY2FtYWRhIGRlIERUT1xuICAgICAgLy8gRXN0ZSB0ZXN0ZSBzaW11bGEgYSB2YWxpZGHDp8OjbyBkbyBjbGFzcy12YWxpZGF0b3JcbiAgICAgIGV4cGVjdCh3ZWFrUGFzc3dvcmREdG8ubmV3UGFzc3dvcmQpLm5vdC50b01hdGNoKFxuICAgICAgICAvXig/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlxcZCkoPz0uKltAJCElKj8mXSlbQS1aYS16XFxkQCQhJSo/Jl0vLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRlVG9rZW4nLCAoKSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdGVUb2tlbkR0bzogVmFsaWRhdGVUb2tlbkR0byA9IHtcbiAgICAgIHRva2VuOiAndmFsaWQtdG9rZW4tMTIzJyxcbiAgICB9O1xuXG4gICAgaXQoJ2RldmUgdmFsaWRhciB0b2tlbiBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIG1pbnV0ZXNSZW1haW5pbmc6IDEyLFxuICAgICAgICBlbWFpbDogJ3Rlc3RAc2VtdGFzLmdvdi5icicsXG4gICAgICB9O1xuXG4gICAgICBtb2NrUGFzc3dvcmRSZXNldFNlcnZpY2UudmFsaWRhdGVUb2tlbi5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzcG9uc2UpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLnZhbGlkYXRlVG9rZW4odmFsaWRhdGVUb2tlbkR0byk7XG5cbiAgICAgIGV4cGVjdChwYXNzd29yZFJlc2V0U2VydmljZS52YWxpZGF0ZVRva2VuKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgdmFsaWRhdGVUb2tlbkR0by50b2tlbixcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tSZXNwb25zZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSByZXRvcm5hciBpbnbDoWxpZG8gcGFyYSB0b2tlbiBleHBpcmFkbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ1Rva2VuIGV4cGlyYWRvJyxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tQYXNzd29yZFJlc2V0U2VydmljZS52YWxpZGF0ZVRva2VuLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIudmFsaWRhdGVUb2tlbih2YWxpZGF0ZVRva2VuRHRvKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC52YWxpZCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgcmV0b3JuYXIgaW52w6FsaWRvIHBhcmEgdG9rZW4gbsOjbyBlbmNvbnRyYWRvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1Bhc3N3b3JkUmVzZXRTZXJ2aWNlLnZhbGlkYXRlVG9rZW4ubW9ja1JlamVjdGVkVmFsdWUoXG4gICAgICAgIG5ldyBOb3RGb3VuZEV4Y2VwdGlvbignVG9rZW4gbsOjbyBlbmNvbnRyYWRvJyksXG4gICAgICApO1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIGNvbnRyb2xsZXIudmFsaWRhdGVUb2tlbih2YWxpZGF0ZVRva2VuRHRvKSxcbiAgICAgICkucmVqZWN0cy50b1Rocm93KE5vdEZvdW5kRXhjZXB0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFN0YXRzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHJldG9ybmFyIGVzdGF0w61zdGljYXMgcGFyYSBhZG1pbmlzdHJhZG9yZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU3RhdHMgPSB7XG4gICAgICAgIHJlcXVlc3RzTGFzdDI0aDogMTUsXG4gICAgICAgIHN1Y2Nlc3NmdWxSZXNldHNMYXN0MjRoOiAxMixcbiAgICAgICAgYWN0aXZlVG9rZW5zOiA4LFxuICAgICAgICBleHBpcmVkVG9rZW5zTGFzdDI0aDogMyxcbiAgICAgICAgc3VjY2Vzc1JhdGU6IDgwLjAsXG4gICAgICAgIHVuaXF1ZVVzZXJzTGFzdDI0aDogMTQsXG4gICAgICB9O1xuXG4gICAgICBtb2NrUGFzc3dvcmRSZXNldFNlcnZpY2UuZ2V0U3RhdHMubW9ja1Jlc29sdmVkVmFsdWUobW9ja1N0YXRzKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5nZXRTdGF0cygpO1xuXG4gICAgICBleHBlY3QocGFzc3dvcmRSZXNldFNlcnZpY2UuZ2V0U3RhdHMpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1N0YXRzKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHRlciBwcm90ZcOnw6NvIGRlIGFjZXNzbyBwb3IgcGFwZWwnLCAoKSA9PiB7XG4gICAgICAvLyBWZXJpZmljYSBzZSBvIGRlY29yYXRvciBAUm9sZXMgZXN0w6EgYXBsaWNhZG9cbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YSgncm9sZXMnLCBjb250cm9sbGVyLmdldFN0YXRzKTtcbiAgICAgIGV4cGVjdChtZXRhZGF0YSkudG9Db250YWluKCdBRE1JTicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVmFsaWRhw6fDtWVzIGRlIERUTycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSB2YWxpZGFyIGZvcm1hdG8gZGUgZW1haWwnLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkRW1haWxzID0gW1xuICAgICAgICAnZW1haWwtc2VtLWFycm9iYScsXG4gICAgICAgICdAZG9taW5pby5jb20nLFxuICAgICAgICAnZW1haWxAJyxcbiAgICAgICAgJ2VtYWlsQGRvbWluaW8nLFxuICAgICAgICAnJyxcbiAgICAgIF07XG5cbiAgICAgIGludmFsaWRFbWFpbHMuZm9yRWFjaCgoZW1haWwpID0+IHtcbiAgICAgICAgZXhwZWN0KGVtYWlsKS5ub3QudG9NYXRjaCgvXlteXFxzQF0rQFteXFxzQF0rXFwuW15cXHNAXSskLyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHZhbGlkYXIgdGFtYW5obyBtw61uaW1vIGRvIHRva2VuJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc2hvcnRUb2tlbiA9ICdhYmMxMjMnO1xuICAgICAgZXhwZWN0KHNob3J0VG9rZW4ubGVuZ3RoKS50b0JlTGVzc1RoYW4oMzIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgdmFsaWRhciBmb3LDp2EgZGEgc2VuaGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCB2YWxpZFBhc3N3b3JkcyA9IFtcbiAgICAgICAgJ01pbmhhU2VuaEAxMjMnLFxuICAgICAgICAnT3V0ckBTZW5oYTQ1NicsXG4gICAgICAgICdTZWd1ckBuY2E3ODknLFxuICAgICAgXTtcblxuICAgICAgY29uc3QgaW52YWxpZFBhc3N3b3JkcyA9IFtcbiAgICAgICAgJzEyMzQ1NicsXG4gICAgICAgICdwYXNzd29yZCcsXG4gICAgICAgICdQQVNTV09SRCcsXG4gICAgICAgICdQYXNzd29yZCcsXG4gICAgICAgICdQYXNzd29yZDEyMycsXG4gICAgICAgICdwYXNzd29yZEAxMjMnLFxuICAgICAgXTtcblxuICAgICAgY29uc3QgcGFzc3dvcmRSZWdleCA9XG4gICAgICAgIC9eKD89LipbYS16XSkoPz0uKltBLVpdKSg/PS4qXFxkKSg/PS4qW0AkISUqPyZdKVtBLVphLXpcXGRAJCElKj8mXS87XG5cbiAgICAgIHZhbGlkUGFzc3dvcmRzLmZvckVhY2goKHBhc3N3b3JkKSA9PiB7XG4gICAgICAgIGV4cGVjdChwYXNzd29yZCkudG9NYXRjaChwYXNzd29yZFJlZ2V4KTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnZhbGlkUGFzc3dvcmRzLmZvckVhY2goKHBhc3N3b3JkKSA9PiB7XG4gICAgICAgIGV4cGVjdChwYXNzd29yZCkubm90LnRvTWF0Y2gocGFzc3dvcmRSZWdleCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JhdGUgTGltaXRpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgdGVyIHJhdGUgbGltaXRpbmcgY29uZmlndXJhZG8gcGFyYSBmb3Jnb3QtcGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgICAvLyBWZXJpZmljYSBzZSBvIGRlY29yYXRvciBAVGhyb3R0bGUgZXN0w6EgYXBsaWNhZG8gY29tIG9zIHZhbG9yZXMgY29ycmV0b3NcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcbiAgICAgICAgJ3Rocm90dGxlcjpsaW1pdCcsXG4gICAgICAgIGNvbnRyb2xsZXIuZm9yZ290UGFzc3dvcmQsXG4gICAgICApO1xuICAgICAgZXhwZWN0KG1ldGFkYXRhKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgdGVyIHJhdGUgbGltaXRpbmcgY29uZmlndXJhZG8gcGFyYSByZXNldC1wYXNzd29yZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcbiAgICAgICAgJ3Rocm90dGxlcjpsaW1pdCcsXG4gICAgICAgIGNvbnRyb2xsZXIucmVzZXRQYXNzd29yZCxcbiAgICAgICk7XG4gICAgICBleHBlY3QobWV0YWRhdGEpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdEb2N1bWVudGHDp8OjbyBTd2FnZ2VyJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHRlciBkb2N1bWVudGHDp8OjbyBjb21wbGV0YScsICgpID0+IHtcbiAgICAgIC8vIFZlcmlmaWNhIHNlIG9zIGRlY29yYXRvcnMgZG8gU3dhZ2dlciBlc3TDo28gYXBsaWNhZG9zXG4gICAgICBjb25zdCBhcGlUYWdzID0gUmVmbGVjdC5nZXRNZXRhZGF0YSgnc3dhZ2dlci9hcGlVc2VUYWdzJywgUGFzc3dvcmRSZXNldENvbnRyb2xsZXIpO1xuICAgICAgZXhwZWN0KGFwaVRhZ3MpLnRvQ29udGFpbignUmVjdXBlcmHDp8OjbyBkZSBTZW5oYScpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==