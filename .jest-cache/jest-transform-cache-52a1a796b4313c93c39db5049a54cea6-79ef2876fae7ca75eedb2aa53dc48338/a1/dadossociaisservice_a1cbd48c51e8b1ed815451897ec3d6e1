63dac0bf39021435e7ef2a79f236543b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DadosSociaisService_1;
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosSociaisService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const dados_sociais_entity_1 = require("../../../entities/dados-sociais.entity");
const cidadao_entity_1 = require("../../../entities/cidadao.entity");
const composicao_familiar_entity_1 = require("../../../entities/composicao-familiar.entity");
const cache_service_1 = require("../../../shared/cache/cache.service");
const common_2 = require("@nestjs/common");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
/**
 * Service responsável pelo gerenciamento dos dados sociais dos cidadãos
 *
 * Implementa todas as operações CRUD para dados sociais, incluindo:
 * - Validações de negócio específicas
 * - Cálculos automáticos (renda per capita)
 * - Cache para otimização de performance
 * - Integração com auditoria
 */
let DadosSociaisService = DadosSociaisService_1 = class DadosSociaisService {
    dadosSociaisRepository;
    cidadaoRepository;
    composicaoFamiliarRepository;
    cacheService;
    dataSource;
    logger = new common_2.Logger(DadosSociaisService_1.name);
    CACHE_TTL = 300; // 5 minutos
    constructor(dadosSociaisRepository, cidadaoRepository, composicaoFamiliarRepository, cacheService, dataSource) {
        this.dadosSociaisRepository = dadosSociaisRepository;
        this.cidadaoRepository = cidadaoRepository;
        this.composicaoFamiliarRepository = composicaoFamiliarRepository;
        this.cacheService = cacheService;
        this.dataSource = dataSource;
    }
    /**
     * Cria dados sociais para um cidadão específico
     *
     * Valida se o cidadão existe e se não possui dados sociais já cadastrados.
     * Calcula automaticamente a renda per capita baseada na composição familiar.
     */
    async create(cidadaoId, createDadosSociaisDto) {
        this.logger.log(`Criando dados sociais para cidadão ${cidadaoId}`);
        // Usar transação para garantir consistência
        return await this.dataSource.transaction(async (manager) => {
            // Verificar se o cidadão existe
            const cidadao = await manager.findOne(cidadao_entity_1.Cidadao, {
                where: { id: cidadaoId },
            });
            if (!cidadao) {
                throw new common_1.NotFoundException(`Cidadão com ID ${cidadaoId} não encontrado`);
            }
            // Verificar se já existem dados sociais para este cidadão
            const dadosExistentes = await manager.findOne(dados_sociais_entity_1.DadosSociais, {
                where: { cidadao_id: cidadaoId },
                withDeleted: false,
            });
            if (dadosExistentes) {
                throw new common_1.ConflictException(`Cidadão ${cidadaoId} já possui dados sociais cadastrados`);
            }
            // Validar dados de benefícios
            this.validateBeneficiosData(createDadosSociaisDto);
            // Normalizar enums para minúsculo antes de criar
            const dadosNormalizados = (0, enum_normalizer_util_1.normalizeEnumFields)({
                ...createDadosSociaisDto,
                cidadao_id: cidadaoId,
            });
            // Criar os dados sociais
            const dadosSociais = manager.create(dados_sociais_entity_1.DadosSociais, dadosNormalizados);
            const savedDadosSociais = await manager.save(dados_sociais_entity_1.DadosSociais, dadosSociais);
            // Calcular e atualizar renda per capita
            await this.calculateAndUpdateRendaPerCapita(cidadaoId, manager);
            // Invalidar cache
            await this.invalidateCache(cidadaoId);
            this.logger.log(`Dados sociais criados com sucesso para cidadão ${cidadaoId}`);
            return savedDadosSociais;
        });
    }
    /**
     * Busca os dados sociais de um cidadão específico
     *
     * Utiliza cache para otimizar performance em consultas frequentes.
     */
    async findByCidadaoId(cidadaoId) {
        this.logger.log(`Buscando dados sociais do cidadão ${cidadaoId}`);
        // Tentar buscar no cache primeiro
        const cacheKey = `dados-sociais:${cidadaoId}`;
        const cachedData = await this.cacheService.get(cacheKey);
        if (cachedData) {
            this.logger.log(`Dados sociais encontrados no cache para cidadão ${cidadaoId}`);
            return cachedData;
        }
        // Verificar se o cidadão existe
        const cidadao = await this.cidadaoRepository.findOne({
            where: { id: cidadaoId },
        });
        if (!cidadao) {
            throw new common_1.NotFoundException(`Cidadão com ID ${cidadaoId} não encontrado`);
        }
        // Buscar dados sociais
        const dadosSociais = await this.dadosSociaisRepository.findOne({
            where: { cidadao_id: cidadaoId },
            relations: ['cidadao'],
        });
        if (!dadosSociais) {
            throw new common_1.NotFoundException(`Dados sociais não encontrados para o cidadão ${cidadaoId}`);
        }
        // Armazenar no cache
        await this.cacheService.set(cacheKey, dadosSociais, this.CACHE_TTL);
        return dadosSociais;
    }
    /**
     * Atualiza os dados sociais de um cidadão
     *
     * Permite atualização parcial dos dados sociais.
     * Recalcula automaticamente valores derivados como renda per capita.
     */
    async update(cidadaoId, updateDadosSociaisDto) {
        this.logger.log(`Atualizando dados sociais do cidadão ${cidadaoId}`);
        return await this.dataSource.transaction(async (manager) => {
            // Buscar dados sociais existentes
            const dadosSociais = await manager.findOne(dados_sociais_entity_1.DadosSociais, {
                where: { cidadao_id: cidadaoId },
            });
            if (!dadosSociais) {
                throw new common_1.NotFoundException(`Dados sociais não encontrados para o cidadão ${cidadaoId}`);
            }
            // Validar dados de benefícios se estiverem sendo atualizados
            if (this.hasBeneficiosData(updateDadosSociaisDto)) {
                this.validateBeneficiosData({
                    ...dadosSociais,
                    ...updateDadosSociaisDto,
                });
            }
            // Normalizar enums para minúsculo antes de atualizar
            const dadosNormalizados = (0, enum_normalizer_util_1.normalizeEnumFields)(updateDadosSociaisDto);
            // Atualizar dados
            Object.assign(dadosSociais, dadosNormalizados);
            const updatedDadosSociais = await manager.save(dados_sociais_entity_1.DadosSociais, dadosSociais);
            // Recalcular renda per capita se a renda foi alterada
            if (updateDadosSociaisDto.renda !== undefined) {
                await this.calculateAndUpdateRendaPerCapita(cidadaoId, manager);
            }
            // Invalidar cache
            await this.invalidateCache(cidadaoId);
            this.logger.log(`Dados sociais atualizados com sucesso para cidadão ${cidadaoId}`);
            return updatedDadosSociais;
        });
    }
    /**
     * Remove os dados sociais de um cidadão
     *
     * Realiza soft delete dos dados sociais, mantendo histórico para auditoria.
     * Verifica dependências antes da remoção.
     */
    async remove(cidadaoId) {
        this.logger.log(`Removendo dados sociais do cidadão ${cidadaoId}`);
        return await this.dataSource.transaction(async (manager) => {
            // Buscar dados sociais existentes
            const dadosSociais = await manager.findOne(dados_sociais_entity_1.DadosSociais, {
                where: { cidadao_id: cidadaoId },
            });
            if (!dadosSociais) {
                throw new common_1.NotFoundException(`Dados sociais não encontrados para o cidadão ${cidadaoId}`);
            }
            // Verificar dependências (ex: solicitações ativas)
            await this.checkDependencies(cidadaoId, manager);
            // Realizar soft delete
            await manager.softDelete(dados_sociais_entity_1.DadosSociais, { cidadao_id: cidadaoId });
            // Invalidar cache
            await this.invalidateCache(cidadaoId);
            this.logger.log(`Dados sociais removidos com sucesso para cidadão ${cidadaoId}`);
        });
    }
    /**
     * Calcula e atualiza a renda per capita baseada na composição familiar
     */
    async calculateAndUpdateRendaPerCapita(cidadaoId, manager) {
        const repository = manager || this.dataSource.manager;
        // Buscar composição familiar
        const composicaoFamiliar = await repository.find(composicao_familiar_entity_1.ComposicaoFamiliar, {
            where: { cidadao_id: cidadaoId },
        });
        // Buscar dados sociais
        const dadosSociais = await repository.findOne(dados_sociais_entity_1.DadosSociais, {
            where: { cidadao_id: cidadaoId },
        });
        if (dadosSociais && dadosSociais.renda) {
            // Total de pessoas = cidadão + membros da família
            const totalPessoas = composicaoFamiliar.length + 1;
            const rendaPerCapita = dadosSociais.renda / totalPessoas;
            // Atualizar campo calculado (se existir na entidade)
            // Note: Este campo precisa ser adicionado à entidade se necessário
            this.logger.log(`Renda per capita calculada para cidadão ${cidadaoId}: R$ ${rendaPerCapita.toFixed(2)}`);
        }
    }
    /**
     * Valida dados de benefícios (PBF e BPC) com validações aprimoradas
     */
    validateBeneficiosData(data) {
        const errors = [];
        // Validar PBF com verificações mais robustas
        if (data.recebe_pbf === true) {
            if (!data.valor_pbf || data.valor_pbf <= 0) {
                errors.push('Valor do PBF é obrigatório e deve ser maior que zero quando recebe_pbf é verdadeiro');
            }
            else if (data.valor_pbf > 10000) {
                errors.push('Valor do PBF não pode exceder R$ 10.000,00');
            }
            else if (data.valor_pbf < 50) {
                errors.push('Valor do PBF parece muito baixo. Verifique se o valor está correto (mínimo R$ 50,00)');
            }
        }
        if (data.recebe_pbf === false && data.valor_pbf) {
            if (data.valor_pbf > 0) {
                errors.push('Valor do PBF não deve ser informado quando recebe_pbf é falso');
            }
        }
        // Validar BPC com verificações mais robustas
        if (data.recebe_bpc === true) {
            if (!data.valor_bpc || data.valor_bpc <= 0) {
                errors.push('Valor do BPC é obrigatório e deve ser maior que zero quando recebe_bpc é verdadeiro');
            }
            else if (data.valor_bpc > 10000) {
                errors.push('Valor do BPC não pode exceder R$ 10.000,00');
            }
            if (!data.tipo_bpc || data.tipo_bpc.trim().length === 0) {
                errors.push('Tipo do BPC é obrigatório quando recebe_bpc é verdadeiro');
            }
            else if (data.tipo_bpc.length > 100) {
                errors.push('Tipo do BPC deve ter no máximo 100 caracteres');
            }
        }
        if (data.recebe_bpc === false) {
            if (data.valor_bpc && data.valor_bpc > 0) {
                errors.push('Valor do BPC não deve ser informado quando recebe_bpc é falso');
            }
            if (data.tipo_bpc && data.tipo_bpc.trim().length > 0) {
                errors.push('Tipo do BPC não deve ser informado quando recebe_bpc é falso');
            }
        }
        // Validação de consistência entre benefícios
        if (data.recebe_pbf === true && data.recebe_bpc === true) {
            this.logger.warn(`Cidadão recebe tanto PBF quanto BPC - verificar elegibilidade`);
        }
        // Lançar erro com todas as validações que falharam
        if (errors.length > 0) {
            throw new common_1.BadRequestException({
                message: 'Dados de benefícios inválidos',
                errors: errors,
                statusCode: 400,
            });
        }
    }
    /**
     * Verifica se o DTO contém dados de benefícios
     */
    hasBeneficiosData(data) {
        return (data.recebe_pbf !== undefined ||
            data.valor_pbf !== undefined ||
            data.recebe_bpc !== undefined ||
            data.valor_bpc !== undefined ||
            data.tipo_bpc !== undefined);
    }
    /**
     * Verifica dependências antes da remoção
     */
    async checkDependencies(cidadaoId, manager) {
        // Aqui você pode adicionar verificações específicas
        // Por exemplo: verificar se há solicitações ativas
        // const solicitacoesAtivas = await manager.count(Solicitacao, {
        //   where: { cidadao_id: cidadaoId, status: 'ATIVA' }
        // });
        //
        // if (solicitacoesAtivas > 0) {
        //   throw new ConflictException(
        //     'Não é possível remover dados sociais de cidadão com solicitações ativas'
        //   );
        // }
        this.logger.log(`Verificação de dependências concluída para cidadão ${cidadaoId}`);
    }
    /**
     * Invalida cache relacionado aos dados sociais
     */
    async invalidateCache(cidadaoId) {
        const cacheKey = `dados-sociais:${cidadaoId}`;
        await this.cacheService.del(cacheKey);
        // Invalidar outros caches relacionados se necessário
        await this.cacheService.del(`cidadao:${cidadaoId}`);
    }
};
exports.DadosSociaisService = DadosSociaisService;
exports.DadosSociaisService = DadosSociaisService = DadosSociaisService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(dados_sociais_entity_1.DadosSociais)),
    __param(1, (0, typeorm_1.InjectRepository)(cidadao_entity_1.Cidadao)),
    __param(2, (0, typeorm_1.InjectRepository)(composicao_familiar_entity_1.ComposicaoFamiliar)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof cache_service_1.CacheService !== "undefined" && cache_service_1.CacheService) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _e : Object])
], DadosSociaisService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,