{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\dados-sociais.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\dados-sociais.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, DataSource } from 'typeorm';\nimport { DadosSociais } from '../../../entities/dados-sociais.entity';\nimport { Cidadao } from '../../../entities/cidadao.entity';\nimport { ComposicaoFamiliar } from '../../../entities/composicao-familiar.entity';\nimport { CreateDadosSociaisDto } from '../dto/create-dados-sociais.dto';\nimport { UpdateDadosSociaisDto } from '../dto/update-dados-sociais.dto';\nimport { CacheService } from '../../../shared/cache/cache.service';\nimport { Logger } from '@nestjs/common';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\n\n/**\n * Service responsável pelo gerenciamento dos dados sociais dos cidadãos\n *\n * Implementa todas as operações CRUD para dados sociais, incluindo:\n * - Validações de negócio específicas\n * - Cálculos automáticos (renda per capita)\n * - Cache para otimização de performance\n * - Integração com auditoria\n */\n@Injectable()\nexport class DadosSociaisService {\n  private readonly logger = new Logger(DadosSociaisService.name);\n  private readonly CACHE_TTL = 300; // 5 minutos\n\n  constructor(\n    @InjectRepository(DadosSociais)\n    private readonly dadosSociaisRepository: Repository<DadosSociais>,\n    @InjectRepository(Cidadao)\n    private readonly cidadaoRepository: Repository<Cidadao>,\n    @InjectRepository(ComposicaoFamiliar)\n    private readonly composicaoFamiliarRepository: Repository<ComposicaoFamiliar>,\n    private readonly cacheService: CacheService,\n    private readonly dataSource: DataSource,\n  ) {}\n\n  /**\n   * Cria dados sociais para um cidadão específico\n   *\n   * Valida se o cidadão existe e se não possui dados sociais já cadastrados.\n   * Calcula automaticamente a renda per capita baseada na composição familiar.\n   */\n  async create(\n    cidadaoId: string,\n    createDadosSociaisDto: CreateDadosSociaisDto,\n  ): Promise<DadosSociais> {\n    this.logger.log(`Criando dados sociais para cidadão ${cidadaoId}`);\n\n    // Usar transação para garantir consistência\n    return await this.dataSource.transaction(async (manager) => {\n      // Verificar se o cidadão existe\n      const cidadao = await manager.findOne(Cidadao, {\n        where: { id: cidadaoId },\n      });\n\n      if (!cidadao) {\n        throw new NotFoundException(\n          `Cidadão com ID ${cidadaoId} não encontrado`,\n        );\n      }\n\n      // Verificar se já existem dados sociais para este cidadão\n      const dadosExistentes = await manager.findOne(DadosSociais, {\n        where: { cidadao_id: cidadaoId },\n        withDeleted: false,\n      });\n\n      if (dadosExistentes) {\n        throw new ConflictException(\n          `Cidadão ${cidadaoId} já possui dados sociais cadastrados`,\n        );\n      }\n\n      // Validar dados de benefícios\n      this.validateBeneficiosData(createDadosSociaisDto);\n\n      // Normalizar enums para minúsculo antes de criar\n      const dadosNormalizados = normalizeEnumFields({\n        ...createDadosSociaisDto,\n        cidadao_id: cidadaoId,\n      });\n\n      // Criar os dados sociais\n      const dadosSociais = manager.create(DadosSociais, dadosNormalizados);\n\n      const savedDadosSociais = await manager.save(DadosSociais, dadosSociais);\n\n      // Calcular e atualizar renda per capita\n      await this.calculateAndUpdateRendaPerCapita(cidadaoId, manager);\n\n      // Invalidar cache\n      await this.invalidateCache(cidadaoId);\n\n      this.logger.log(\n        `Dados sociais criados com sucesso para cidadão ${cidadaoId}`,\n      );\n      return savedDadosSociais;\n    });\n  }\n\n  /**\n   * Busca os dados sociais de um cidadão específico\n   *\n   * Utiliza cache para otimizar performance em consultas frequentes.\n   */\n  async findByCidadaoId(cidadaoId: string): Promise<DadosSociais> {\n    this.logger.log(`Buscando dados sociais do cidadão ${cidadaoId}`);\n\n    // Tentar buscar no cache primeiro\n    const cacheKey = `dados-sociais:${cidadaoId}`;\n    const cachedData = await this.cacheService.get(cacheKey);\n\n    if (cachedData) {\n      this.logger.log(\n        `Dados sociais encontrados no cache para cidadão ${cidadaoId}`,\n      );\n      return cachedData as DadosSociais;\n    }\n\n    // Verificar se o cidadão existe\n    const cidadao = await this.cidadaoRepository.findOne({\n      where: { id: cidadaoId },\n    });\n\n    if (!cidadao) {\n      throw new NotFoundException(`Cidadão com ID ${cidadaoId} não encontrado`);\n    }\n\n    // Buscar dados sociais\n    const dadosSociais = await this.dadosSociaisRepository.findOne({\n      where: { cidadao_id: cidadaoId },\n      relations: ['cidadao'],\n    });\n\n    if (!dadosSociais) {\n      throw new NotFoundException(\n        `Dados sociais não encontrados para o cidadão ${cidadaoId}`,\n      );\n    }\n\n    // Armazenar no cache\n    await this.cacheService.set(cacheKey, dadosSociais, this.CACHE_TTL);\n\n    return dadosSociais;\n  }\n\n  /**\n   * Atualiza os dados sociais de um cidadão\n   *\n   * Permite atualização parcial dos dados sociais.\n   * Recalcula automaticamente valores derivados como renda per capita.\n   */\n  async update(\n    cidadaoId: string,\n    updateDadosSociaisDto: UpdateDadosSociaisDto,\n  ): Promise<DadosSociais> {\n    this.logger.log(`Atualizando dados sociais do cidadão ${cidadaoId}`);\n\n    return await this.dataSource.transaction(async (manager) => {\n      // Buscar dados sociais existentes\n      const dadosSociais = await manager.findOne(DadosSociais, {\n        where: { cidadao_id: cidadaoId },\n      });\n\n      if (!dadosSociais) {\n        throw new NotFoundException(\n          `Dados sociais não encontrados para o cidadão ${cidadaoId}`,\n        );\n      }\n\n      // Validar dados de benefícios se estiverem sendo atualizados\n      if (this.hasBeneficiosData(updateDadosSociaisDto)) {\n        this.validateBeneficiosData({\n          ...dadosSociais,\n          ...updateDadosSociaisDto,\n        });\n      }\n\n      // Normalizar enums para minúsculo antes de atualizar\n      const dadosNormalizados = normalizeEnumFields(updateDadosSociaisDto);\n\n      // Atualizar dados\n      Object.assign(dadosSociais, dadosNormalizados);\n      const updatedDadosSociais = await manager.save(\n        DadosSociais,\n        dadosSociais,\n      );\n\n      // Recalcular renda per capita se a renda foi alterada\n      if (updateDadosSociaisDto.renda !== undefined) {\n        await this.calculateAndUpdateRendaPerCapita(cidadaoId, manager);\n      }\n\n      // Invalidar cache\n      await this.invalidateCache(cidadaoId);\n\n      this.logger.log(\n        `Dados sociais atualizados com sucesso para cidadão ${cidadaoId}`,\n      );\n      return updatedDadosSociais;\n    });\n  }\n\n  /**\n   * Remove os dados sociais de um cidadão\n   *\n   * Realiza soft delete dos dados sociais, mantendo histórico para auditoria.\n   * Verifica dependências antes da remoção.\n   */\n  async remove(cidadaoId: string): Promise<void> {\n    this.logger.log(`Removendo dados sociais do cidadão ${cidadaoId}`);\n\n    return await this.dataSource.transaction(async (manager) => {\n      // Buscar dados sociais existentes\n      const dadosSociais = await manager.findOne(DadosSociais, {\n        where: { cidadao_id: cidadaoId },\n      });\n\n      if (!dadosSociais) {\n        throw new NotFoundException(\n          `Dados sociais não encontrados para o cidadão ${cidadaoId}`,\n        );\n      }\n\n      // Verificar dependências (ex: solicitações ativas)\n      await this.checkDependencies(cidadaoId, manager);\n\n      // Realizar soft delete\n      await manager.softDelete(DadosSociais, { cidadao_id: cidadaoId });\n\n      // Invalidar cache\n      await this.invalidateCache(cidadaoId);\n\n      this.logger.log(\n        `Dados sociais removidos com sucesso para cidadão ${cidadaoId}`,\n      );\n    });\n  }\n\n  /**\n   * Calcula e atualiza a renda per capita baseada na composição familiar\n   */\n  private async calculateAndUpdateRendaPerCapita(\n    cidadaoId: string,\n    manager?: any,\n  ): Promise<void> {\n    const repository = manager || this.dataSource.manager;\n\n    // Buscar composição familiar\n    const composicaoFamiliar = await repository.find(ComposicaoFamiliar, {\n      where: { cidadao_id: cidadaoId },\n    });\n\n    // Buscar dados sociais\n    const dadosSociais = await repository.findOne(DadosSociais, {\n      where: { cidadao_id: cidadaoId },\n    });\n\n    if (dadosSociais && dadosSociais.renda) {\n      // Total de pessoas = cidadão + membros da família\n      const totalPessoas = composicaoFamiliar.length + 1;\n      const rendaPerCapita = dadosSociais.renda / totalPessoas;\n\n      // Atualizar campo calculado (se existir na entidade)\n      // Note: Este campo precisa ser adicionado à entidade se necessário\n      this.logger.log(\n        `Renda per capita calculada para cidadão ${cidadaoId}: R$ ${rendaPerCapita.toFixed(2)}`,\n      );\n    }\n  }\n\n  /**\n   * Valida dados de benefícios (PBF e BPC) com validações aprimoradas\n   */\n  private validateBeneficiosData(data: any): void {\n    const errors: string[] = [];\n\n    // Validar PBF com verificações mais robustas\n    if (data.recebe_pbf === true) {\n      if (!data.valor_pbf || data.valor_pbf <= 0) {\n        errors.push(\n          'Valor do PBF é obrigatório e deve ser maior que zero quando recebe_pbf é verdadeiro',\n        );\n      } else if (data.valor_pbf > 10000) {\n        errors.push('Valor do PBF não pode exceder R$ 10.000,00');\n      } else if (data.valor_pbf < 50) {\n        errors.push(\n          'Valor do PBF parece muito baixo. Verifique se o valor está correto (mínimo R$ 50,00)',\n        );\n      }\n    }\n\n    if (data.recebe_pbf === false && data.valor_pbf) {\n      if (data.valor_pbf > 0) {\n        errors.push(\n          'Valor do PBF não deve ser informado quando recebe_pbf é falso',\n        );\n      }\n    }\n\n    // Validar BPC com verificações mais robustas\n    if (data.recebe_bpc === true) {\n      if (!data.valor_bpc || data.valor_bpc <= 0) {\n        errors.push(\n          'Valor do BPC é obrigatório e deve ser maior que zero quando recebe_bpc é verdadeiro',\n        );\n      } else if (data.valor_bpc > 10000) {\n        errors.push('Valor do BPC não pode exceder R$ 10.000,00');\n      }\n\n      if (!data.tipo_bpc || data.tipo_bpc.trim().length === 0) {\n        errors.push('Tipo do BPC é obrigatório quando recebe_bpc é verdadeiro');\n      } else if (data.tipo_bpc.length > 100) {\n        errors.push('Tipo do BPC deve ter no máximo 100 caracteres');\n      }\n    }\n\n    if (data.recebe_bpc === false) {\n      if (data.valor_bpc && data.valor_bpc > 0) {\n        errors.push(\n          'Valor do BPC não deve ser informado quando recebe_bpc é falso',\n        );\n      }\n      if (data.tipo_bpc && data.tipo_bpc.trim().length > 0) {\n        errors.push(\n          'Tipo do BPC não deve ser informado quando recebe_bpc é falso',\n        );\n      }\n    }\n\n    // Validação de consistência entre benefícios\n    if (data.recebe_pbf === true && data.recebe_bpc === true) {\n      this.logger.warn(\n        `Cidadão recebe tanto PBF quanto BPC - verificar elegibilidade`,\n      );\n    }\n\n    // Lançar erro com todas as validações que falharam\n    if (errors.length > 0) {\n      throw new BadRequestException({\n        message: 'Dados de benefícios inválidos',\n        errors: errors,\n        statusCode: 400,\n      });\n    }\n  }\n\n  /**\n   * Verifica se o DTO contém dados de benefícios\n   */\n  private hasBeneficiosData(data: UpdateDadosSociaisDto): boolean {\n    return (\n      data.recebe_pbf !== undefined ||\n      data.valor_pbf !== undefined ||\n      data.recebe_bpc !== undefined ||\n      data.valor_bpc !== undefined ||\n      data.tipo_bpc !== undefined\n    );\n  }\n\n  /**\n   * Verifica dependências antes da remoção\n   */\n  private async checkDependencies(\n    cidadaoId: string,\n    manager: any,\n  ): Promise<void> {\n    // Aqui você pode adicionar verificações específicas\n    // Por exemplo: verificar se há solicitações ativas\n    // const solicitacoesAtivas = await manager.count(Solicitacao, {\n    //   where: { cidadao_id: cidadaoId, status: 'ATIVA' }\n    // });\n    //\n    // if (solicitacoesAtivas > 0) {\n    //   throw new ConflictException(\n    //     'Não é possível remover dados sociais de cidadão com solicitações ativas'\n    //   );\n    // }\n\n    this.logger.log(\n      `Verificação de dependências concluída para cidadão ${cidadaoId}`,\n    );\n  }\n\n  /**\n   * Invalida cache relacionado aos dados sociais\n   */\n  private async invalidateCache(cidadaoId: string): Promise<void> {\n    const cacheKey = `dados-sociais:${cidadaoId}`;\n    await this.cacheService.del(cacheKey);\n\n    // Invalidar outros caches relacionados se necessário\n    await this.cacheService.del(`cidadao:${cidadaoId}`);\n  }\n}\n"],"version":3}