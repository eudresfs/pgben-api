{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\determinacao-judicial.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\determinacao-judicial.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  InternalServerErrorException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, DataSource } from 'typeorm';\nimport { DeterminacaoJudicial } from '../../../entities/determinacao-judicial.entity';\nimport { Solicitacao } from '../../../entities/solicitacao.entity';\nimport { SolicitacaoCreateDeterminacaoJudicialDto } from '../dto/create-determinacao-judicial.dto';\nimport { SolicitacaoUpdateDeterminacaoJudicialDto } from '../dto/update-determinacao-judicial.dto';\n\n/**\n * Serviço de Determinação Judicial\n *\n * Responsável por gerenciar as determinações judiciais relacionadas às solicitações\n * de benefício, permitindo o controle e rastreamento de processos judiciais.\n */\n@Injectable()\nexport class DeterminacaoJudicialService {\n  private readonly logger = new Logger(DeterminacaoJudicialService.name);\n\n  constructor(\n    @InjectRepository(DeterminacaoJudicial)\n    private readonly determinacaoRepository: Repository<DeterminacaoJudicial>,\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    private readonly dataSource: DataSource,\n  ) {}\n\n  /**\n   * Cria uma nova determinação judicial\n   * @param createDeterminacaoDto Dados da determinação judicial\n   * @param usuarioId ID do usuário que está criando a determinação\n   * @returns Determinação judicial criada\n   */\n  async create(\n    createDeterminacaoDto: SolicitacaoCreateDeterminacaoJudicialDto,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      // Verificar se a solicitação existe\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: createDeterminacaoDto.solicitacao_id },\n      });\n\n      if (!solicitacao) {\n        throw new NotFoundException('Solicitação de benefício não encontrada');\n      }\n\n      // Verificar se já existe determinação com o mesmo número de processo para a solicitação\n      const determinacaoExistente = await this.determinacaoRepository.findOne({\n        where: {\n          solicitacao_id: createDeterminacaoDto.solicitacao_id,\n          numero_processo: createDeterminacaoDto.numero_processo,\n        },\n      });\n\n      if (determinacaoExistente) {\n        throw new ConflictException(\n          'Já existe uma determinação judicial com este número de processo para esta solicitação',\n        );\n      }\n\n      // Criar a determinação judicial\n      const novaDeterminacao = this.determinacaoRepository.create({\n        ...createDeterminacaoDto,\n        usuario_id: usuarioId,\n      });\n\n      const determinacaoSalva =\n        await queryRunner.manager.save(novaDeterminacao);\n\n      // Atualizar a solicitação para indicar que possui determinação judicial\n      await queryRunner.manager.update(\n        Solicitacao,\n        { id: createDeterminacaoDto.solicitacao_id },\n        {\n          determinacao_judicial_flag: true,\n          determinacao_judicial_id: determinacaoSalva.id,\n        },\n      );\n\n      await queryRunner.commitTransaction();\n\n      return determinacaoSalva;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao criar determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao criar determinação judicial',\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  /**\n   * Busca todas as determinações judiciais de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de determinações judiciais\n   */\n  async findBySolicitacaoId(\n    solicitacaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    try {\n      // Verificar se a solicitação existe\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: solicitacaoId },\n      });\n\n      if (!solicitacao) {\n        throw new NotFoundException('Solicitação de benefício não encontrada');\n      }\n\n      return this.determinacaoRepository.find({\n        where: { solicitacao_id: solicitacaoId },\n        order: { data_determinacao: 'DESC' },\n      });\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao buscar determinações judiciais: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar determinações judiciais',\n      );\n    }\n  }\n\n  /**\n   * Busca uma determinação judicial pelo ID\n   * @param id ID da determinação judicial\n   * @returns Determinação judicial\n   */\n  async findById(id: string): Promise<DeterminacaoJudicial> {\n    try {\n      const determinacao = await this.determinacaoRepository.findOne({\n        where: { id },\n        relations: ['solicitacao'],\n      });\n\n      if (!determinacao) {\n        throw new NotFoundException('Determinação judicial não encontrada');\n      }\n\n      return determinacao;\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao buscar determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar determinação judicial',\n      );\n    }\n  }\n\n  /**\n   * Atualiza uma determinação judicial\n   * @param id ID da determinação judicial\n   * @param updateDeterminacaoDto Dados para atualização\n   * @returns Determinação judicial atualizada\n   */\n  async update(\n    id: string,\n    updateDeterminacaoDto: SolicitacaoUpdateDeterminacaoJudicialDto,\n  ): Promise<DeterminacaoJudicial> {\n    try {\n      // Verificar se a determinação existe\n      const determinacao = await this.determinacaoRepository.findOne({\n        where: { id },\n      });\n\n      if (!determinacao) {\n        throw new NotFoundException('Determinação judicial não encontrada');\n      }\n\n      // Atualizar a determinação\n      await this.determinacaoRepository.update(id, updateDeterminacaoDto);\n\n      // Retornar a determinação atualizada\n      return this.findById(id);\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao atualizar determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao atualizar determinação judicial',\n      );\n    }\n  }\n\n  /**\n   * Registra o cumprimento de uma determinação judicial\n   * @param id ID da determinação judicial\n   * @param observacoes Observações sobre o cumprimento\n   * @returns Determinação judicial atualizada\n   */\n  async registrarCumprimento(\n    id: string,\n    observacoes?: string,\n  ): Promise<DeterminacaoJudicial> {\n    try {\n      // Verificar se a determinação existe\n      const determinacao = await this.determinacaoRepository.findOne({\n        where: { id },\n      });\n\n      if (!determinacao) {\n        throw new NotFoundException('Determinação judicial não encontrada');\n      }\n\n      // Atualizar a determinação com a data de cumprimento\n      const updateData: Partial<DeterminacaoJudicial> = {\n        data_cumprimento: new Date(),\n      };\n\n      if (observacoes) {\n        updateData.observacao_cumprimento = observacoes;\n      }\n\n      await this.determinacaoRepository.update(id, updateData);\n\n      // Retornar a determinação atualizada\n      return this.findById(id);\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao registrar cumprimento de determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao registrar cumprimento de determinação judicial',\n      );\n    }\n  }\n\n  /**\n   * Remove uma determinação judicial\n   * @param id ID da determinação judicial\n   * @returns Void\n   */\n  async remove(id: string): Promise<void> {\n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      // Verificar se a determinação existe\n      const determinacao = await this.determinacaoRepository.findOne({\n        where: { id },\n        relations: ['solicitacao'],\n      });\n\n      if (!determinacao) {\n        throw new NotFoundException('Determinação judicial não encontrada');\n      }\n\n      // Verificar se é a determinação principal da solicitação\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { determinacao_judicial_id: id },\n      });\n\n      if (solicitacao) {\n        // Se for a determinação principal, verificar se há outras determinações\n        const outrasDeterminacoes = await this.determinacaoRepository.find({\n          where: { solicitacao_id: determinacao.solicitacao_id },\n        });\n\n        if (outrasDeterminacoes.length > 1) {\n          // Se houver outras determinações, definir a mais recente como principal\n          const outrasDeterminacoesOrdenadas = outrasDeterminacoes\n            .filter((det) => det.id !== id)\n            .sort(\n              (a, b) =>\n                b.data_determinacao.getTime() - a.data_determinacao.getTime(),\n            );\n\n          // Atualizar a solicitação com a nova determinação principal\n          await queryRunner.manager.update(\n            Solicitacao,\n            { id: determinacao.solicitacao_id },\n            { determinacao_judicial_id: outrasDeterminacoesOrdenadas[0].id },\n          );\n        } else {\n          // Se não houver outras determinações, remover a referência na solicitação\n          await queryRunner.manager.update(\n            Solicitacao,\n            { id: determinacao.solicitacao_id },\n            {\n              determinacao_judicial_flag: false,\n              determinacao_judicial_id: null as unknown as string,\n            },\n          );\n        }\n      }\n\n      // Remover a determinação\n      await queryRunner.manager.remove(determinacao);\n\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao remover determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao remover determinação judicial',\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n}\n"],"version":3}