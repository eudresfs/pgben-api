b674b061204be9d0586b79c82c0430eb
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiExemploController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const integrador_auth_guard_1 = require("../guards/integrador-auth.guard");
const escopos_decorator_1 = require("../decorators/escopos.decorator");
const get_integrador_decorator_1 = require("../decorators/get-integrador.decorator");
const integrador_entity_1 = require("../../../entities/integrador.entity");
/**
 * Controller de exemplo para demonstrar como proteger endpoints para acesso de integradores.
 * Este controller pode ser usado como referência para implementar outros endpoints protegidos.
 */
let ApiExemploController = class ApiExemploController {
    /**
     * Endpoint de exemplo que requer escopo de leitura básico.
     */
    getDadosBasicos(integrador) {
        // Usando o decorator @GetIntegrador para obter facilmente os dados do integrador
        return {
            message: 'Dados básicos disponíveis',
            integrador: integrador.nome,
            timestamp: new Date().toISOString(),
            dados: {
                exemplo: 'Estes são dados básicos de exemplo',
                status: 'ativo',
                identificacao: '12345'
            }
        };
    }
    /**
     * Endpoint de exemplo que requer escopo de leitura avançado.
     */
    getDadosAvancados(integrador) {
        return {
            message: 'Dados avançados disponíveis',
            integrador: integrador.nome,
            timestamp: new Date().toISOString(),
            dados: {
                exemplo: 'Estes são dados avançados de exemplo',
                detalhes: {
                    tipo: 'detalhado',
                    nivel: 'avançado',
                    sensibilidade: 'média'
                },
                estatisticas: {
                    total: 1250,
                    processados: 1100,
                    pendentes: 150
                }
            }
        };
    }
    /**
     * Endpoint de exemplo que demonstra como tratar erros.
     */
    getErroExemplo() {
        // Este é um exemplo de como retornar um erro
        throw new common_1.HttpException({
            status: common_1.HttpStatus.BAD_REQUEST,
            error: 'Exemplo de erro',
            message: 'Este é um exemplo de como os erros são formatados',
            timestamp: new Date().toISOString(),
            path: '/api/exemplo/erro-exemplo'
        }, common_1.HttpStatus.BAD_REQUEST);
    }
};
exports.ApiExemploController = ApiExemploController;
__decorate([
    (0, common_1.Get)('dados-basicos'),
    (0, escopos_decorator_1.Escopos)('read:dados_basicos'),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém dados básicos (exemplo)' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Dados básicos retornados com sucesso',
        schema: {
            properties: {
                message: { type: 'string' },
                integrador: { type: 'string' },
                timestamp: { type: 'string', format: 'date-time' },
                dados: { type: 'object' }
            }
        }
    }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Não autorizado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Permissão insuficiente' }),
    __param(0, (0, get_integrador_decorator_1.GetIntegrador)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_a = typeof integrador_entity_1.Integrador !== "undefined" && integrador_entity_1.Integrador) === "function" ? _a : Object]),
    __metadata("design:returntype", void 0)
], ApiExemploController.prototype, "getDadosBasicos", null);
__decorate([
    (0, common_1.Get)('dados-avancados'),
    (0, escopos_decorator_1.Escopos)('read:dados_avancados'),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém dados avançados (exemplo)' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Dados avançados retornados com sucesso',
        schema: {
            properties: {
                message: { type: 'string' },
                integrador: { type: 'string' },
                timestamp: { type: 'string', format: 'date-time' },
                dados: { type: 'object' }
            }
        }
    }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Não autorizado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Permissão insuficiente' }),
    __param(0, (0, get_integrador_decorator_1.GetIntegrador)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof integrador_entity_1.Integrador !== "undefined" && integrador_entity_1.Integrador) === "function" ? _b : Object]),
    __metadata("design:returntype", void 0)
], ApiExemploController.prototype, "getDadosAvancados", null);
__decorate([
    (0, common_1.Get)('erro-exemplo'),
    (0, escopos_decorator_1.Escopos)('read:dados_basicos'),
    (0, swagger_1.ApiOperation)({ summary: 'Demonstração de tratamento de erro (exemplo)' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Exemplo de erro' }),
    (0, swagger_1.ApiResponse)({ status: 401, description: 'Não autorizado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Permissão insuficiente' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ApiExemploController.prototype, "getErroExemplo", null);
exports.ApiExemploController = ApiExemploController = __decorate([
    (0, swagger_1.ApiTags)('api-exemplo'),
    (0, common_1.Controller)('api/exemplo'),
    (0, common_1.UseGuards)(integrador_auth_guard_1.IntegradorAuthGuard),
    (0, swagger_1.ApiBearerAuth)()
], ApiExemploController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,