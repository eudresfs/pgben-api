65755cf705369b27c89246aacc995c99
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DeterminacaoJudicialService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeterminacaoJudicialService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const determinacao_judicial_entity_1 = require("../../../entities/determinacao-judicial.entity");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
/**
 * Serviço de Determinação Judicial
 *
 * Responsável por gerenciar as determinações judiciais relacionadas às solicitações
 * de benefício, permitindo o controle e rastreamento de processos judiciais.
 */
let DeterminacaoJudicialService = DeterminacaoJudicialService_1 = class DeterminacaoJudicialService {
    determinacaoRepository;
    solicitacaoRepository;
    dataSource;
    logger = new common_1.Logger(DeterminacaoJudicialService_1.name);
    constructor(determinacaoRepository, solicitacaoRepository, dataSource) {
        this.determinacaoRepository = determinacaoRepository;
        this.solicitacaoRepository = solicitacaoRepository;
        this.dataSource = dataSource;
    }
    /**
     * Cria uma nova determinação judicial
     * @param createDeterminacaoDto Dados da determinação judicial
     * @param usuarioId ID do usuário que está criando a determinação
     * @returns Determinação judicial criada
     */
    async create(createDeterminacaoDto, usuarioId) {
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Verificar se a solicitação existe
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: createDeterminacaoDto.solicitacao_id },
            });
            if (!solicitacao) {
                throw new common_1.NotFoundException('Solicitação de benefício não encontrada');
            }
            // Verificar se já existe determinação com o mesmo número de processo para a solicitação
            const determinacaoExistente = await this.determinacaoRepository.findOne({
                where: {
                    solicitacao_id: createDeterminacaoDto.solicitacao_id,
                    numero_processo: createDeterminacaoDto.numero_processo,
                },
            });
            if (determinacaoExistente) {
                throw new common_1.ConflictException('Já existe uma determinação judicial com este número de processo para esta solicitação');
            }
            // Criar a determinação judicial
            const novaDeterminacao = this.determinacaoRepository.create({
                ...createDeterminacaoDto,
                usuario_id: usuarioId,
            });
            const determinacaoSalva = await queryRunner.manager.save(novaDeterminacao);
            // Atualizar a solicitação para indicar que possui determinação judicial
            await queryRunner.manager.update(solicitacao_entity_1.Solicitacao, { id: createDeterminacaoDto.solicitacao_id }, {
                determinacao_judicial_flag: true,
                determinacao_judicial_id: determinacaoSalva.id,
            });
            await queryRunner.commitTransaction();
            return determinacaoSalva;
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.ConflictException) {
                throw error;
            }
            this.logger.error(`Erro ao criar determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao criar determinação judicial');
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Busca todas as determinações judiciais de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @returns Lista de determinações judiciais
     */
    async findBySolicitacaoId(solicitacaoId) {
        try {
            // Verificar se a solicitação existe
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: solicitacaoId },
            });
            if (!solicitacao) {
                throw new common_1.NotFoundException('Solicitação de benefício não encontrada');
            }
            return this.determinacaoRepository.find({
                where: { solicitacao_id: solicitacaoId },
                order: { data_determinacao: 'DESC' },
            });
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar determinações judiciais: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar determinações judiciais');
        }
    }
    /**
     * Busca uma determinação judicial pelo ID
     * @param id ID da determinação judicial
     * @returns Determinação judicial
     */
    async findById(id) {
        try {
            const determinacao = await this.determinacaoRepository.findOne({
                where: { id },
                relations: ['solicitacao'],
            });
            if (!determinacao) {
                throw new common_1.NotFoundException('Determinação judicial não encontrada');
            }
            return determinacao;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar determinação judicial');
        }
    }
    /**
     * Atualiza uma determinação judicial
     * @param id ID da determinação judicial
     * @param updateDeterminacaoDto Dados para atualização
     * @returns Determinação judicial atualizada
     */
    async update(id, updateDeterminacaoDto) {
        try {
            // Verificar se a determinação existe
            const determinacao = await this.determinacaoRepository.findOne({
                where: { id },
            });
            if (!determinacao) {
                throw new common_1.NotFoundException('Determinação judicial não encontrada');
            }
            // Atualizar a determinação
            await this.determinacaoRepository.update(id, updateDeterminacaoDto);
            // Retornar a determinação atualizada
            return this.findById(id);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao atualizar determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao atualizar determinação judicial');
        }
    }
    /**
     * Registra o cumprimento de uma determinação judicial
     * @param id ID da determinação judicial
     * @param observacoes Observações sobre o cumprimento
     * @returns Determinação judicial atualizada
     */
    async registrarCumprimento(id, observacoes) {
        try {
            // Verificar se a determinação existe
            const determinacao = await this.determinacaoRepository.findOne({
                where: { id },
            });
            if (!determinacao) {
                throw new common_1.NotFoundException('Determinação judicial não encontrada');
            }
            // Atualizar a determinação com a data de cumprimento
            const updateData = {
                data_cumprimento: new Date(),
            };
            if (observacoes) {
                updateData.observacao_cumprimento = observacoes;
            }
            await this.determinacaoRepository.update(id, updateData);
            // Retornar a determinação atualizada
            return this.findById(id);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao registrar cumprimento de determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao registrar cumprimento de determinação judicial');
        }
    }
    /**
     * Remove uma determinação judicial
     * @param id ID da determinação judicial
     * @returns Void
     */
    async remove(id) {
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Verificar se a determinação existe
            const determinacao = await this.determinacaoRepository.findOne({
                where: { id },
                relations: ['solicitacao'],
            });
            if (!determinacao) {
                throw new common_1.NotFoundException('Determinação judicial não encontrada');
            }
            // Verificar se é a determinação principal da solicitação
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { determinacao_judicial_id: id },
            });
            if (solicitacao) {
                // Se for a determinação principal, verificar se há outras determinações
                const outrasDeterminacoes = await this.determinacaoRepository.find({
                    where: { solicitacao_id: determinacao.solicitacao_id },
                });
                if (outrasDeterminacoes.length > 1) {
                    // Se houver outras determinações, definir a mais recente como principal
                    const outrasDeterminacoesOrdenadas = outrasDeterminacoes
                        .filter((det) => det.id !== id)
                        .sort((a, b) => b.data_determinacao.getTime() - a.data_determinacao.getTime());
                    // Atualizar a solicitação com a nova determinação principal
                    await queryRunner.manager.update(solicitacao_entity_1.Solicitacao, { id: determinacao.solicitacao_id }, { determinacao_judicial_id: outrasDeterminacoesOrdenadas[0].id });
                }
                else {
                    // Se não houver outras determinações, remover a referência na solicitação
                    await queryRunner.manager.update(solicitacao_entity_1.Solicitacao, { id: determinacao.solicitacao_id }, {
                        determinacao_judicial_flag: false,
                        determinacao_judicial_id: null,
                    });
                }
            }
            // Remover a determinação
            await queryRunner.manager.remove(determinacao);
            await queryRunner.commitTransaction();
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao remover determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao remover determinação judicial');
        }
        finally {
            await queryRunner.release();
        }
    }
};
exports.DeterminacaoJudicialService = DeterminacaoJudicialService;
exports.DeterminacaoJudicialService = DeterminacaoJudicialService = DeterminacaoJudicialService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(determinacao_judicial_entity_1.DeterminacaoJudicial)),
    __param(1, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _c : Object])
], DeterminacaoJudicialService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,