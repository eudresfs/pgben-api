{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\password-reset.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\password-reset.controller.spec.ts"],"sourcesContent":["// src/auth/controllers/password-reset.controller.spec.ts\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { BadRequestException, NotFoundException } from '@nestjs/common';\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { PasswordResetController } from './password-reset.controller';\nimport { PasswordResetService } from '../services/password-reset.service';\nimport {\n  ForgotPasswordDto,\n  ResetPasswordDto,\n  ValidateTokenDto,\n} from '../dto/password-reset.dto';\n\ndescribe('PasswordResetController', () => {\n  let controller: PasswordResetController;\n  let passwordResetService: jest.Mocked<PasswordResetService>;\n\n  const mockPasswordResetService = {\n    requestPasswordReset: jest.fn(),\n    resetPassword: jest.fn(),\n    validateToken: jest.fn(),\n    getStats: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [PasswordResetController],\n      providers: [\n        {\n          provide: PasswordResetService,\n          useValue: mockPasswordResetService,\n        },\n      ],\n    })\n      .overrideGuard(ThrottlerGuard)\n      .useValue({ canActivate: () => true })\n      .compile();\n\n    controller = module.get<PasswordResetController>(PasswordResetController);\n    passwordResetService = module.get(PasswordResetService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('forgotPassword', () => {\n    const forgotPasswordDto: ForgotPasswordDto = {\n      email: 'test@semtas.gov.br',\n    };\n\n    it('deve solicitar recuperação de senha com sucesso', async () => {\n      const mockResponse = {\n        message: 'Se o email existir, um link de recuperação será enviado',\n        timestamp: '2024-01-15T10:30:00Z',\n        expiresInMinutes: 15,\n      };\n\n      mockPasswordResetService.requestPasswordReset.mockResolvedValue(\n        mockResponse,\n      );\n\n      const result = await controller.forgotPassword(forgotPasswordDto);\n\n      expect(passwordResetService.requestPasswordReset).toHaveBeenCalledWith(\n        forgotPasswordDto.email,\n      );\n      expect(result).toEqual(mockResponse);\n    });\n\n    it('deve retornar erro para email inválido', async () => {\n      const invalidDto = { email: 'email-invalido' };\n\n      mockPasswordResetService.requestPasswordReset.mockRejectedValue(\n        new BadRequestException('Email inválido'),\n      );\n\n      await expect(\n        controller.forgotPassword(invalidDto as ForgotPasswordDto),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve aplicar rate limiting', async () => {\n      // Este teste verifica se o decorator @Throttle está aplicado\n      const metadata = Reflect.getMetadata(\n        'throttler:limit',\n        controller.forgotPassword,\n      );\n      expect(metadata).toBeDefined();\n    });\n  });\n\n  describe('resetPassword', () => {\n    const resetPasswordDto: ResetPasswordDto = {\n      token: 'valid-token-123',\n      newPassword: 'NovaSenh@123',\n      confirmPassword: 'NovaSenh@123',\n    };\n\n    it('deve redefinir senha com sucesso', async () => {\n      const mockResponse = {\n        message: 'Senha redefinida com sucesso',\n        timestamp: '2024-01-15T10:35:00Z',\n        requiresReauth: true,\n      };\n\n      mockPasswordResetService.resetPassword.mockResolvedValue(mockResponse);\n\n      const result = await controller.resetPassword(resetPasswordDto);\n\n      expect(passwordResetService.resetPassword).toHaveBeenCalledWith(\n        resetPasswordDto.token,\n        resetPasswordDto.newPassword,\n      );\n      expect(result).toEqual(mockResponse);\n    });\n\n    it('deve retornar erro para token inválido', async () => {\n      mockPasswordResetService.resetPassword.mockRejectedValue(\n        new BadRequestException('Token inválido ou expirado'),\n      );\n\n      await expect(controller.resetPassword(resetPasswordDto)).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve validar confirmação de senha', async () => {\n      const invalidDto = {\n        ...resetPasswordDto,\n        confirmPassword: 'senha-diferente',\n      };\n\n      await expect(\n        controller.resetPassword(invalidDto),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve validar força da senha', async () => {\n      const weakPasswordDto = {\n        ...resetPasswordDto,\n        newPassword: '123456',\n        confirmPassword: '123456',\n      };\n\n      // A validação deve falhar na camada de DTO\n      // Este teste simula a validação do class-validator\n      expect(weakPasswordDto.newPassword).not.toMatch(\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/,\n      );\n    });\n  });\n\n  describe('validateToken', () => {\n    const validateTokenDto: ValidateTokenDto = {\n      token: 'valid-token-123',\n    };\n\n    it('deve validar token com sucesso', async () => {\n      const mockResponse = {\n        valid: true,\n        minutesRemaining: 12,\n        email: 'test@semtas.gov.br',\n      };\n\n      mockPasswordResetService.validateToken.mockResolvedValue(mockResponse);\n\n      const result = await controller.validateToken(validateTokenDto);\n\n      expect(passwordResetService.validateToken).toHaveBeenCalledWith(\n        validateTokenDto.token,\n      );\n      expect(result).toEqual(mockResponse);\n    });\n\n    it('deve retornar inválido para token expirado', async () => {\n      const mockResponse = {\n        valid: false,\n        error: 'Token expirado',\n      };\n\n      mockPasswordResetService.validateToken.mockResolvedValue(mockResponse);\n\n      const result = await controller.validateToken(validateTokenDto);\n\n      expect(result.valid).toBe(false);\n      expect(result.error).toBeDefined();\n    });\n\n    it('deve retornar inválido para token não encontrado', async () => {\n      mockPasswordResetService.validateToken.mockRejectedValue(\n        new NotFoundException('Token não encontrado'),\n      );\n\n      await expect(\n        controller.validateToken(validateTokenDto),\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('getStats', () => {\n    it('deve retornar estatísticas para administradores', async () => {\n      const mockStats = {\n        requestsLast24h: 15,\n        successfulResetsLast24h: 12,\n        activeTokens: 8,\n        expiredTokensLast24h: 3,\n        successRate: 80.0,\n        uniqueUsersLast24h: 14,\n      };\n\n      mockPasswordResetService.getStats.mockResolvedValue(mockStats);\n\n      const result = await controller.getStats();\n\n      expect(passwordResetService.getStats).toHaveBeenCalled();\n      expect(result).toEqual(mockStats);\n    });\n\n    it('deve ter proteção de acesso por papel', () => {\n      // Verifica se o decorator @Roles está aplicado\n      const metadata = Reflect.getMetadata('roles', controller.getStats);\n      expect(metadata).toContain('ADMIN');\n    });\n  });\n\n  describe('Validações de DTO', () => {\n    it('deve validar formato de email', () => {\n      const invalidEmails = [\n        'email-sem-arroba',\n        '@dominio.com',\n        'email@',\n        'email@dominio',\n        '',\n      ];\n\n      invalidEmails.forEach((email) => {\n        expect(email).not.toMatch(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\n      });\n    });\n\n    it('deve validar tamanho mínimo do token', () => {\n      const shortToken = 'abc123';\n      expect(shortToken.length).toBeLessThan(32);\n    });\n\n    it('deve validar força da senha', () => {\n      const validPasswords = [\n        'MinhaSenh@123',\n        'Outr@Senha456',\n        'Segur@nca789',\n      ];\n\n      const invalidPasswords = [\n        '123456',\n        'password',\n        'PASSWORD',\n        'Password',\n        'Password123',\n        'password@123',\n      ];\n\n      const passwordRegex =\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/;\n\n      validPasswords.forEach((password) => {\n        expect(password).toMatch(passwordRegex);\n      });\n\n      invalidPasswords.forEach((password) => {\n        expect(password).not.toMatch(passwordRegex);\n      });\n    });\n  });\n\n  describe('Rate Limiting', () => {\n    it('deve ter rate limiting configurado para forgot-password', () => {\n      // Verifica se o decorator @Throttle está aplicado com os valores corretos\n      const metadata = Reflect.getMetadata(\n        'throttler:limit',\n        controller.forgotPassword,\n      );\n      expect(metadata).toBeDefined();\n    });\n\n    it('deve ter rate limiting configurado para reset-password', () => {\n      const metadata = Reflect.getMetadata(\n        'throttler:limit',\n        controller.resetPassword,\n      );\n      expect(metadata).toBeDefined();\n    });\n  });\n\n  describe('Documentação Swagger', () => {\n    it('deve ter documentação completa', () => {\n      // Verifica se os decorators do Swagger estão aplicados\n      const apiTags = Reflect.getMetadata('swagger/apiUseTags', PasswordResetController);\n      expect(apiTags).toContain('Recuperação de Senha');\n    });\n  });\n});"],"version":3}