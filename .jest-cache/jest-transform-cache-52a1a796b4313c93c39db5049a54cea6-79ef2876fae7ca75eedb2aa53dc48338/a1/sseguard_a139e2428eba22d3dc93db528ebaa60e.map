{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\guards\\sse.guard.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAA0G;AAC1G,qCAAyC;AAGzC;;;;;GAKG;AAEI,IAAM,QAAQ,gBAAd,MAAM,QAAQ;IAGU;IAFZ,MAAM,GAAG,IAAI,eAAM,CAAC,UAAQ,CAAC,IAAI,CAAC,CAAC;IAEpD,YAA6B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAEvD;;;;OAIG;IACH,WAAW,CAAC,OAAyB;QACnC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAW,CAAC;QAE7D,iEAAiE;QACjE,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAEzC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;YACjE,MAAM,IAAI,8BAAqB,CAAC,+CAA+C,CAAC,CAAC;QACnF,CAAC;QAED,IAAI,CAAC;YACH,oCAAoC;YACpC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE9C,4CAA4C;YAC5C,OAAO,CAAC,MAAM,CAAC,GAAG;gBAChB,EAAE,EAAE,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,EAAE;gBAC7B,KAAK,EAAE,OAAO,CAAC,KAAK;gBACpB,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE;gBAC1B,GAAG,OAAO;aACX,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YAChF,OAAO,IAAI,CAAC;QAEd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAEzD,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;gBACvC,MAAM,IAAI,8BAAqB,CAAC,uCAAuC,CAAC,CAAC;YAC3E,CAAC;YAED,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,EAAE,CAAC;gBACvC,MAAM,IAAI,8BAAqB,CAAC,+BAA+B,CAAC,CAAC;YACnE,CAAC;YAED,MAAM,IAAI,8BAAqB,CAAC,iCAAiC,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,YAAY,CAAC,OAAgB;QACnC,kDAAkD;QAClD,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,KAAe,CAAC;QACjD,IAAI,UAAU,EAAE,CAAC;YACf,OAAO,UAAU,CAAC;QACpB,CAAC;QAED,6CAA6C;QAC7C,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC;QACjD,IAAI,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACnD,OAAO,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QAED,4CAA4C;QAC5C,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,cAAc,CAAC,CAAC;QACtD,IAAI,WAAW,EAAE,CAAC;YAChB,OAAO,WAAW,CAAC;QACrB,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AA7EY,4BAAQ;mBAAR,QAAQ;IADpB,IAAA,mBAAU,GAAE;yDAI8B,gBAAU,oBAAV,gBAAU;GAHxC,QAAQ,CA6EpB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\guards\\sse.guard.ts"],"sourcesContent":["import { Injectable, CanActivate, ExecutionContext, UnauthorizedException, Logger } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { Request } from 'express';\n\n/**\n * Guard para autenticação de conexões SSE\n * \n * Valida o token JWT fornecido via query parameter para estabelecer\n * conexões SSE seguras. O token deve ser válido e não expirado.\n */\n@Injectable()\nexport class SseGuard implements CanActivate {\n  private readonly logger = new Logger(SseGuard.name);\n\n  constructor(private readonly jwtService: JwtService) {}\n\n  /**\n   * Valida se a requisição pode prosseguir\n   * @param context Contexto de execução da requisição\n   * @returns true se autorizado, lança exceção caso contrário\n   */\n  canActivate(context: ExecutionContext): boolean {\n    const request = context.switchToHttp().getRequest<Request>();\n    \n    // Tenta obter o token do query parameter ou header Authorization\n    const token = this.extractToken(request);\n\n    if (!token) {\n      this.logger.warn('Tentativa de conexão SSE sem token de acesso');\n      throw new UnauthorizedException('Token de acesso obrigatório para conexões SSE');\n    }\n\n    try {\n      // Verifica e decodifica o token JWT\n      const payload = this.jwtService.verify(token);\n      \n      // Adiciona os dados do usuário à requisição\n      request['user'] = {\n        id: payload.sub || payload.id,\n        email: payload.email,\n        roles: payload.roles || [],\n        ...payload\n      };\n      \n      this.logger.debug(`Conexão SSE autorizada para usuário: ${request['user'].id}`);\n      return true;\n      \n    } catch (error) {\n      this.logger.warn(`Token SSE inválido: ${error.message}`);\n      \n      if (error.name === 'TokenExpiredError') {\n        throw new UnauthorizedException('Token expirado. Faça login novamente.');\n      }\n      \n      if (error.name === 'JsonWebTokenError') {\n        throw new UnauthorizedException('Token inválido ou malformado.');\n      }\n      \n      throw new UnauthorizedException('Falha na autenticação do token.');\n    }\n  }\n\n  /**\n   * Extrai o token JWT da requisição\n   * @param request Objeto da requisição HTTP\n   * @returns Token JWT ou null se não encontrado\n   */\n  private extractToken(request: Request): string | null {\n    // Primeiro tenta obter do query parameter 'token'\n    const queryToken = request.query.token as string;\n    if (queryToken) {\n      return queryToken;\n    }\n\n    // Depois tenta obter do header Authorization\n    const authHeader = request.headers.authorization;\n    if (authHeader && authHeader.startsWith('Bearer ')) {\n      return authHeader.substring(7);\n    }\n\n    // Tenta obter de um cookie (se configurado)\n    const cookieToken = request.cookies?.['access_token'];\n    if (cookieToken) {\n      return cookieToken;\n    }\n\n    return null;\n  }\n}"],"version":3}