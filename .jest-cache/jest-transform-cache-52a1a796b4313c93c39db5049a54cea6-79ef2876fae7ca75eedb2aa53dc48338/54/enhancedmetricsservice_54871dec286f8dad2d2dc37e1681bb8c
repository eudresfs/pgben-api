d39d1688c0d5f46d962b3bf99b3a2ba6
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancedMetricsService = void 0;
const common_1 = require("@nestjs/common");
const client = __importStar(require("prom-client"));
/**
 * Serviço de Métricas Aprimorado
 *
 * Responsável por coletar e expor métricas avançadas da aplicação
 * utilizando o Prometheus Client, com foco em segurança e compliance LGPD
 */
let EnhancedMetricsService = class EnhancedMetricsService {
    register;
    // Métricas HTTP
    httpRequestsTotal;
    httpRequestDuration;
    httpRequestsInProgress;
    // Métricas de Banco de Dados
    databaseQueriesTotal;
    databaseQueryDuration;
    databaseConnectionsActive;
    // Métricas de Cache/Redis
    cacheOperationsTotal;
    cacheHitRatio;
    cacheSize;
    cacheOperationDuration;
    // Métricas de Segurança e Compliance
    securityEventsTotal;
    lgpdDataAccessTotal;
    authenticationAttemptsTotal;
    authorizationFailuresTotal;
    // Métricas de Documentos
    documentOperationsTotal;
    documentStorageBytes;
    documentUploadDuration;
    documentDownloadDuration;
    // Métricas de Sistema
    systemMemoryUsage;
    systemCpuUsage;
    constructor() {
        // Criar registro de métricas
        this.register = new client.Registry();
        // Adicionar métricas padrão do Node.js
        client.collectDefaultMetrics({ register: this.register });
        // Inicializar métricas HTTP
        this.initHttpMetrics();
        // Inicializar métricas de banco de dados
        this.initDatabaseMetrics();
        // Inicializar métricas de cache/Redis
        this.initCacheMetrics();
        // Inicializar métricas de segurança e compliance
        this.initSecurityMetrics();
        // Inicializar métricas de documentos
        this.initDocumentMetrics();
        // Inicializar métricas de sistema
        this.initSystemMetrics();
    }
    /**
     * Inicializa métricas relacionadas a requisições HTTP
     */
    initHttpMetrics() {
        // Contador de requisições HTTP
        this.httpRequestsTotal = new client.Counter({
            name: 'http_requests_total',
            help: 'Total de requisições HTTP',
            labelNames: ['method', 'route', 'status_code', 'user_role'],
            registers: [this.register],
        });
        // Histograma de duração das requisições HTTP
        this.httpRequestDuration = new client.Histogram({
            name: 'http_request_duration_seconds',
            help: 'Duração das requisições HTTP em segundos',
            labelNames: ['method', 'route', 'status_code', 'user_role'],
            buckets: [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],
            registers: [this.register],
        });
        // Gauge de requisições em andamento
        this.httpRequestsInProgress = new client.Gauge({
            name: 'http_requests_in_progress',
            help: 'Número de requisições HTTP em andamento',
            labelNames: ['method', 'route', 'user_role'],
            registers: [this.register],
        });
    }
    /**
     * Inicializa métricas relacionadas ao banco de dados
     */
    initDatabaseMetrics() {
        // Contador de consultas ao banco de dados
        this.databaseQueriesTotal = new client.Counter({
            name: 'database_queries_total',
            help: 'Total de consultas ao banco de dados',
            labelNames: ['entity', 'operation', 'success'],
            registers: [this.register],
        });
        // Histograma de duração das consultas ao banco de dados
        this.databaseQueryDuration = new client.Histogram({
            name: 'database_query_duration_seconds',
            help: 'Duração das consultas ao banco de dados em segundos',
            labelNames: ['entity', 'operation'],
            buckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1],
            registers: [this.register],
        });
        // Gauge de conexões ativas com o banco de dados
        this.databaseConnectionsActive = new client.Gauge({
            name: 'database_connections_active',
            help: 'Número de conexões ativas com o banco de dados',
            registers: [this.register],
        });
    }
    /**
     * Inicializa métricas relacionadas ao cache distribuído (Redis)
     */
    initCacheMetrics() {
        // Contador de operações de cache
        this.cacheOperationsTotal = new client.Counter({
            name: 'cache_operations_total',
            help: 'Total de operações de cache',
            labelNames: ['operation', 'success', 'cache_type'],
            registers: [this.register],
        });
        // Gauge de taxa de acertos do cache
        this.cacheHitRatio = new client.Gauge({
            name: 'cache_hit_ratio',
            help: 'Taxa de acertos do cache (0-1)',
            labelNames: ['cache_type'],
            registers: [this.register],
        });
        // Gauge de tamanho do cache
        this.cacheSize = new client.Gauge({
            name: 'cache_size_bytes',
            help: 'Tamanho do cache em bytes',
            labelNames: ['cache_type'],
            registers: [this.register],
        });
        // Histograma de duração das operações de cache
        this.cacheOperationDuration = new client.Histogram({
            name: 'cache_operation_duration_seconds',
            help: 'Duração das operações de cache em segundos',
            labelNames: ['operation', 'cache_type'],
            buckets: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1],
            registers: [this.register],
        });
    }
    /**
     * Inicializa métricas relacionadas à segurança e compliance LGPD
     */
    initSecurityMetrics() {
        // Contador de eventos de segurança
        this.securityEventsTotal = new client.Counter({
            name: 'security_events_total',
            help: 'Total de eventos de segurança',
            labelNames: ['type', 'severity', 'source'],
            registers: [this.register],
        });
        // Contador de acessos a dados protegidos pela LGPD
        this.lgpdDataAccessTotal = new client.Counter({
            name: 'lgpd_data_access_total',
            help: 'Total de acessos a dados protegidos pela LGPD',
            labelNames: ['data_type', 'operation', 'authorized', 'user_role'],
            registers: [this.register],
        });
        // Contador de tentativas de autenticação
        this.authenticationAttemptsTotal = new client.Counter({
            name: 'authentication_attempts_total',
            help: 'Total de tentativas de autenticação',
            labelNames: ['success', 'method', 'ip_address'],
            registers: [this.register],
        });
        // Contador de falhas de autorização
        this.authorizationFailuresTotal = new client.Counter({
            name: 'authorization_failures_total',
            help: 'Total de falhas de autorização',
            labelNames: ['resource', 'required_role', 'user_role'],
            registers: [this.register],
        });
    }
    /**
     * Inicializa métricas relacionadas a operações com documentos
     */
    initDocumentMetrics() {
        // Contador de operações com documentos
        this.documentOperationsTotal = new client.Counter({
            name: 'document_operations_total',
            help: 'Total de operações com documentos',
            labelNames: ['operation', 'document_type', 'sensitive', 'encrypted'],
            registers: [this.register],
        });
        // Gauge de armazenamento de documentos
        this.documentStorageBytes = new client.Gauge({
            name: 'document_storage_bytes',
            help: 'Armazenamento total de documentos em bytes',
            labelNames: ['document_type', 'sensitive'],
            registers: [this.register],
        });
        // Histograma de duração de upload de documentos
        this.documentUploadDuration = new client.Histogram({
            name: 'document_upload_duration_seconds',
            help: 'Duração do upload de documentos em segundos',
            labelNames: ['document_type', 'sensitive', 'encrypted'],
            buckets: [0.1, 0.5, 1, 2, 5, 10, 30],
            registers: [this.register],
        });
        // Histograma de duração de download de documentos
        this.documentDownloadDuration = new client.Histogram({
            name: 'document_download_duration_seconds',
            help: 'Duração do download de documentos em segundos',
            labelNames: ['document_type', 'sensitive', 'encrypted'],
            buckets: [0.1, 0.5, 1, 2, 5, 10, 30],
            registers: [this.register],
        });
    }
    /**
     * Inicializa métricas relacionadas ao sistema
     */
    initSystemMetrics() {
        // Gauge de uso de memória
        this.systemMemoryUsage = new client.Gauge({
            name: 'system_memory_usage_bytes',
            help: 'Uso de memória do sistema em bytes',
            labelNames: ['type'],
            registers: [this.register],
        });
        // Gauge de uso de CPU
        this.systemCpuUsage = new client.Gauge({
            name: 'system_cpu_usage_percent',
            help: 'Uso de CPU do sistema em porcentagem',
            registers: [this.register],
        });
    }
    /**
     * Incrementa o contador de requisições HTTP
     */
    recordHttpRequest(method, route, statusCode, userRole = 'anonymous') {
        this.httpRequestsTotal.inc({
            method,
            route,
            status_code: statusCode.toString(),
            user_role: userRole,
        });
    }
    /**
     * Registra a duração de uma requisição HTTP
     */
    recordHttpRequestDuration(method, route, statusCode, durationSeconds, userRole = 'anonymous') {
        this.httpRequestDuration.observe({
            method,
            route,
            status_code: statusCode.toString(),
            user_role: userRole,
        }, durationSeconds);
    }
    /**
     * Incrementa o contador de requisições HTTP em andamento
     */
    incrementHttpRequestsInProgress(method, route, userRole = 'anonymous') {
        this.httpRequestsInProgress.inc({ method, route, user_role: userRole });
    }
    /**
     * Decrementa o contador de requisições HTTP em andamento
     */
    decrementHttpRequestsInProgress(method, route, userRole = 'anonymous') {
        this.httpRequestsInProgress.dec({ method, route, user_role: userRole });
    }
    /**
     * Incrementa o contador de consultas ao banco de dados
     */
    recordDatabaseQuery(entity, operation, success = true) {
        this.databaseQueriesTotal.inc({
            entity,
            operation,
            success: success.toString(),
        });
    }
    /**
     * Registra a duração de uma consulta ao banco de dados
     */
    recordDatabaseQueryDuration(entity, operation, durationSeconds) {
        this.databaseQueryDuration.observe({ entity, operation }, durationSeconds);
    }
    /**
     * Atualiza o número de conexões ativas com o banco de dados
     */
    setDatabaseConnectionsActive(connections) {
        this.databaseConnectionsActive.set(connections);
    }
    /**
     * Registra um evento de segurança
     */
    recordSecurityEvent(type, severity, source) {
        this.securityEventsTotal.inc({ type, severity, source });
    }
    /**
     * Registra um acesso a dados protegidos pela LGPD
     */
    recordLgpdDataAccess(dataType, operation, authorized = true, userRole = 'anonymous') {
        this.lgpdDataAccessTotal.inc({
            data_type: dataType,
            operation,
            authorized: authorized.toString(),
            user_role: userRole,
        });
    }
    /**
     * Registra uma tentativa de autenticação
     */
    recordAuthenticationAttempt(success, method, ipAddress) {
        this.authenticationAttemptsTotal.inc({
            success: success.toString(),
            method,
            ip_address: ipAddress,
        });
    }
    /**
     * Registra uma falha de autorização
     */
    recordAuthorizationFailure(resource, requiredRole, userRole) {
        this.authorizationFailuresTotal.inc({
            resource,
            required_role: requiredRole,
            user_role: userRole,
        });
    }
    /**
     * Registra uma operação com documento
     */
    recordDocumentOperation(operation, documentType, sensitive = false, encrypted = false) {
        this.documentOperationsTotal.inc({
            operation,
            document_type: documentType,
            sensitive: sensitive.toString(),
            encrypted: encrypted.toString(),
        });
    }
    /**
     * Atualiza o tamanho total de armazenamento de documentos
     */
    setDocumentStorageBytes(bytes, documentType, sensitive = false) {
        this.documentStorageBytes.set({ document_type: documentType, sensitive: sensitive.toString() }, bytes);
    }
    /**
     * Registra a duração de um upload de documento
     */
    recordDocumentUploadDuration(documentType, sensitive, encrypted, durationSeconds) {
        this.documentUploadDuration.observe({
            document_type: documentType,
            sensitive: sensitive.toString(),
            encrypted: encrypted.toString(),
        }, durationSeconds);
    }
    /**
     * Registra a duração de um download de documento
     */
    recordDocumentDownloadDuration(documentType, sensitive, encrypted, durationSeconds) {
        this.documentDownloadDuration.observe({
            document_type: documentType,
            sensitive: sensitive.toString(),
            encrypted: encrypted.toString(),
        }, durationSeconds);
    }
    /**
     * Atualiza as métricas de uso de memória
     */
    updateMemoryUsage() {
        const memoryUsage = process.memoryUsage();
        this.systemMemoryUsage.set({ type: 'rss' }, memoryUsage.rss);
        this.systemMemoryUsage.set({ type: 'heapTotal' }, memoryUsage.heapTotal);
        this.systemMemoryUsage.set({ type: 'heapUsed' }, memoryUsage.heapUsed);
        this.systemMemoryUsage.set({ type: 'external' }, memoryUsage.external);
        if (memoryUsage.arrayBuffers) {
            this.systemMemoryUsage.set({ type: 'arrayBuffers' }, memoryUsage.arrayBuffers);
        }
    }
    /**
     * Atualiza a métrica de uso de CPU
     */
    updateCpuUsage(cpuPercent) {
        this.systemCpuUsage.set(cpuPercent);
    }
    /**
     * Registra uma operação de cache
     */
    recordCacheOperation(operation, success, cacheType = 'redis') {
        this.cacheOperationsTotal.inc({
            operation,
            success: success.toString(),
            cache_type: cacheType,
        });
    }
    /**
     * Registra a duração de uma operação de cache
     */
    recordCacheOperationDuration(operation, durationSeconds, cacheType = 'redis') {
        this.cacheOperationDuration.observe({ operation, cache_type: cacheType }, durationSeconds);
    }
    /**
     * Atualiza a taxa de acertos do cache
     */
    updateCacheHitRatio(ratio, cacheType = 'redis') {
        this.cacheHitRatio.set({ cache_type: cacheType }, ratio);
    }
    /**
     * Atualiza o tamanho do cache
     */
    updateCacheSize(sizeBytes, cacheType = 'redis') {
        this.cacheSize.set({ cache_type: cacheType }, sizeBytes);
    }
    /**
     * Registra falhas de cache
     * @param count Número de falhas
     * @param cacheType Tipo de cache (redis, memory, etc)
     */
    recordCacheFailures(count, cacheType = 'redis') {
        // Registramos cada falha como uma operação de cache mal-sucedida
        for (let i = 0; i < count; i++) {
            this.recordCacheOperation('failure', false, cacheType);
        }
    }
    /**
     * Registra tentativas de recuperação do circuit breaker
     * @param count Número de tentativas
     * @param cacheType Tipo de cache (redis, memory, etc)
     */
    recordCacheRecoveryAttempts(count, cacheType = 'redis') {
        // Registramos cada tentativa como uma operação de recovery
        for (let i = 0; i < count; i++) {
            this.recordCacheOperation('recovery', true, cacheType);
        }
    }
    /**
     * Registra o tempo de resposta de uma operação de cache
     * @param durationMs Tempo em milissegundos
     * @param key Chave do cache
     * @param cacheType Tipo de cache (redis, memory, etc)
     */
    recordCacheResponseTime(durationMs, key, cacheType = 'redis') {
        // Convertemos de milissegundos para segundos para manter a convenção do Prometheus
        const durationSeconds = durationMs / 1000;
        this.recordCacheOperationDuration('get', durationSeconds, cacheType);
    }
    /**
     * Retorna todas as métricas no formato do Prometheus
     */
    async getMetrics() {
        // Atualizar métricas de sistema antes de retornar
        this.updateMemoryUsage();
        return this.register.metrics();
    }
    /**
     * Retorna o registro de métricas
     */
    getRegister() {
        return this.register;
    }
};
exports.EnhancedMetricsService = EnhancedMetricsService;
exports.EnhancedMetricsService = EnhancedMetricsService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], EnhancedMetricsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbW9uaXRvcmluZ1xcZW5oYW5jZWQtbWV0cmljcy5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQUE0QztBQUM1QyxvREFBc0M7QUFFdEM7Ozs7O0dBS0c7QUFFSSxJQUFNLHNCQUFzQixHQUE1QixNQUFNLHNCQUFzQjtJQUNoQixRQUFRLENBQWtCO0lBRTNDLGdCQUFnQjtJQUNSLGlCQUFpQixDQUFrQjtJQUNuQyxtQkFBbUIsQ0FBb0I7SUFDdkMsc0JBQXNCLENBQWdCO0lBRTlDLDZCQUE2QjtJQUNyQixvQkFBb0IsQ0FBa0I7SUFDdEMscUJBQXFCLENBQW9CO0lBQ3pDLHlCQUF5QixDQUFnQjtJQUVqRCwwQkFBMEI7SUFDbEIsb0JBQW9CLENBQWtCO0lBQ3RDLGFBQWEsQ0FBZ0I7SUFDN0IsU0FBUyxDQUFnQjtJQUN6QixzQkFBc0IsQ0FBb0I7SUFFbEQscUNBQXFDO0lBQzdCLG1CQUFtQixDQUFrQjtJQUNyQyxtQkFBbUIsQ0FBa0I7SUFDckMsMkJBQTJCLENBQWtCO0lBQzdDLDBCQUEwQixDQUFrQjtJQUVwRCx5QkFBeUI7SUFDakIsdUJBQXVCLENBQWtCO0lBQ3pDLG9CQUFvQixDQUFnQjtJQUNwQyxzQkFBc0IsQ0FBb0I7SUFDMUMsd0JBQXdCLENBQW9CO0lBRXBELHNCQUFzQjtJQUNkLGlCQUFpQixDQUFnQjtJQUNqQyxjQUFjLENBQWdCO0lBRXRDO1FBQ0UsNkJBQTZCO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFdEMsdUNBQXVDO1FBQ3ZDLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUUxRCw0QkFB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QU0sZUFBZSxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDMUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDZCxrREFBa0Q7UUFDbEQsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFekIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztDQUNGLENBQUE7QUFybEJZLHdEQUFzQjtpQ0FBdEIsc0JBQXNCO0lBRGxDLElBQUEsbUJBQVUsR0FBRTs7R0FDQSxzQkFBc0IsQ0FxbEJsQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcc2hhcmVkXFxtb25pdG9yaW5nXFxlbmhhbmNlZC1tZXRyaWNzLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCAqIGFzIGNsaWVudCBmcm9tICdwcm9tLWNsaWVudCc7XG5cbi8qKlxuICogU2VydmnDp28gZGUgTcOpdHJpY2FzIEFwcmltb3JhZG9cbiAqXG4gKiBSZXNwb25zw6F2ZWwgcG9yIGNvbGV0YXIgZSBleHBvciBtw6l0cmljYXMgYXZhbsOnYWRhcyBkYSBhcGxpY2HDp8Ojb1xuICogdXRpbGl6YW5kbyBvIFByb21ldGhldXMgQ2xpZW50LCBjb20gZm9jbyBlbSBzZWd1cmFuw6dhIGUgY29tcGxpYW5jZSBMR1BEXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFbmhhbmNlZE1ldHJpY3NTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSByZWdpc3RlcjogY2xpZW50LlJlZ2lzdHJ5O1xuXG4gIC8vIE3DqXRyaWNhcyBIVFRQXG4gIHByaXZhdGUgaHR0cFJlcXVlc3RzVG90YWwhOiBjbGllbnQuQ291bnRlcjtcbiAgcHJpdmF0ZSBodHRwUmVxdWVzdER1cmF0aW9uITogY2xpZW50Lkhpc3RvZ3JhbTtcbiAgcHJpdmF0ZSBodHRwUmVxdWVzdHNJblByb2dyZXNzITogY2xpZW50LkdhdWdlO1xuXG4gIC8vIE3DqXRyaWNhcyBkZSBCYW5jbyBkZSBEYWRvc1xuICBwcml2YXRlIGRhdGFiYXNlUXVlcmllc1RvdGFsITogY2xpZW50LkNvdW50ZXI7XG4gIHByaXZhdGUgZGF0YWJhc2VRdWVyeUR1cmF0aW9uITogY2xpZW50Lkhpc3RvZ3JhbTtcbiAgcHJpdmF0ZSBkYXRhYmFzZUNvbm5lY3Rpb25zQWN0aXZlITogY2xpZW50LkdhdWdlO1xuXG4gIC8vIE3DqXRyaWNhcyBkZSBDYWNoZS9SZWRpc1xuICBwcml2YXRlIGNhY2hlT3BlcmF0aW9uc1RvdGFsITogY2xpZW50LkNvdW50ZXI7XG4gIHByaXZhdGUgY2FjaGVIaXRSYXRpbyE6IGNsaWVudC5HYXVnZTtcbiAgcHJpdmF0ZSBjYWNoZVNpemUhOiBjbGllbnQuR2F1Z2U7XG4gIHByaXZhdGUgY2FjaGVPcGVyYXRpb25EdXJhdGlvbiE6IGNsaWVudC5IaXN0b2dyYW07XG5cbiAgLy8gTcOpdHJpY2FzIGRlIFNlZ3VyYW7Dp2EgZSBDb21wbGlhbmNlXG4gIHByaXZhdGUgc2VjdXJpdHlFdmVudHNUb3RhbCE6IGNsaWVudC5Db3VudGVyO1xuICBwcml2YXRlIGxncGREYXRhQWNjZXNzVG90YWwhOiBjbGllbnQuQ291bnRlcjtcbiAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvbkF0dGVtcHRzVG90YWwhOiBjbGllbnQuQ291bnRlcjtcbiAgcHJpdmF0ZSBhdXRob3JpemF0aW9uRmFpbHVyZXNUb3RhbCE6IGNsaWVudC5Db3VudGVyO1xuXG4gIC8vIE3DqXRyaWNhcyBkZSBEb2N1bWVudG9zXG4gIHByaXZhdGUgZG9jdW1lbnRPcGVyYXRpb25zVG90YWwhOiBjbGllbnQuQ291bnRlcjtcbiAgcHJpdmF0ZSBkb2N1bWVudFN0b3JhZ2VCeXRlcyE6IGNsaWVudC5HYXVnZTtcbiAgcHJpdmF0ZSBkb2N1bWVudFVwbG9hZER1cmF0aW9uITogY2xpZW50Lkhpc3RvZ3JhbTtcbiAgcHJpdmF0ZSBkb2N1bWVudERvd25sb2FkRHVyYXRpb24hOiBjbGllbnQuSGlzdG9ncmFtO1xuXG4gIC8vIE3DqXRyaWNhcyBkZSBTaXN0ZW1hXG4gIHByaXZhdGUgc3lzdGVtTWVtb3J5VXNhZ2UhOiBjbGllbnQuR2F1Z2U7XG4gIHByaXZhdGUgc3lzdGVtQ3B1VXNhZ2UhOiBjbGllbnQuR2F1Z2U7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gQ3JpYXIgcmVnaXN0cm8gZGUgbcOpdHJpY2FzXG4gICAgdGhpcy5yZWdpc3RlciA9IG5ldyBjbGllbnQuUmVnaXN0cnkoKTtcblxuICAgIC8vIEFkaWNpb25hciBtw6l0cmljYXMgcGFkcsOjbyBkbyBOb2RlLmpzXG4gICAgY2xpZW50LmNvbGxlY3REZWZhdWx0TWV0cmljcyh7IHJlZ2lzdGVyOiB0aGlzLnJlZ2lzdGVyIH0pO1xuXG4gICAgLy8gSW5pY2lhbGl6YXIgbcOpdHJpY2FzIEhUVFBcbiAgICB0aGlzLmluaXRIdHRwTWV0cmljcygpO1xuXG4gICAgLy8gSW5pY2lhbGl6YXIgbcOpdHJpY2FzIGRlIGJhbmNvIGRlIGRhZG9zXG4gICAgdGhpcy5pbml0RGF0YWJhc2VNZXRyaWNzKCk7XG5cbiAgICAvLyBJbmljaWFsaXphciBtw6l0cmljYXMgZGUgY2FjaGUvUmVkaXNcbiAgICB0aGlzLmluaXRDYWNoZU1ldHJpY3MoKTtcblxuICAgIC8vIEluaWNpYWxpemFyIG3DqXRyaWNhcyBkZSBzZWd1cmFuw6dhIGUgY29tcGxpYW5jZVxuICAgIHRoaXMuaW5pdFNlY3VyaXR5TWV0cmljcygpO1xuXG4gICAgLy8gSW5pY2lhbGl6YXIgbcOpdHJpY2FzIGRlIGRvY3VtZW50b3NcbiAgICB0aGlzLmluaXREb2N1bWVudE1ldHJpY3MoKTtcblxuICAgIC8vIEluaWNpYWxpemFyIG3DqXRyaWNhcyBkZSBzaXN0ZW1hXG4gICAgdGhpcy5pbml0U3lzdGVtTWV0cmljcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaWNpYWxpemEgbcOpdHJpY2FzIHJlbGFjaW9uYWRhcyBhIHJlcXVpc2nDp8O1ZXMgSFRUUFxuICAgKi9cbiAgcHJpdmF0ZSBpbml0SHR0cE1ldHJpY3MoKTogdm9pZCB7XG4gICAgLy8gQ29udGFkb3IgZGUgcmVxdWlzacOnw7VlcyBIVFRQXG4gICAgdGhpcy5odHRwUmVxdWVzdHNUb3RhbCA9IG5ldyBjbGllbnQuQ291bnRlcih7XG4gICAgICBuYW1lOiAnaHR0cF9yZXF1ZXN0c190b3RhbCcsXG4gICAgICBoZWxwOiAnVG90YWwgZGUgcmVxdWlzacOnw7VlcyBIVFRQJyxcbiAgICAgIGxhYmVsTmFtZXM6IFsnbWV0aG9kJywgJ3JvdXRlJywgJ3N0YXR1c19jb2RlJywgJ3VzZXJfcm9sZSddLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG5cbiAgICAvLyBIaXN0b2dyYW1hIGRlIGR1cmHDp8OjbyBkYXMgcmVxdWlzacOnw7VlcyBIVFRQXG4gICAgdGhpcy5odHRwUmVxdWVzdER1cmF0aW9uID0gbmV3IGNsaWVudC5IaXN0b2dyYW0oe1xuICAgICAgbmFtZTogJ2h0dHBfcmVxdWVzdF9kdXJhdGlvbl9zZWNvbmRzJyxcbiAgICAgIGhlbHA6ICdEdXJhw6fDo28gZGFzIHJlcXVpc2nDp8O1ZXMgSFRUUCBlbSBzZWd1bmRvcycsXG4gICAgICBsYWJlbE5hbWVzOiBbJ21ldGhvZCcsICdyb3V0ZScsICdzdGF0dXNfY29kZScsICd1c2VyX3JvbGUnXSxcbiAgICAgIGJ1Y2tldHM6IFswLjAxLCAwLjA1LCAwLjEsIDAuNSwgMSwgMiwgNSwgMTBdLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG5cbiAgICAvLyBHYXVnZSBkZSByZXF1aXNpw6fDtWVzIGVtIGFuZGFtZW50b1xuICAgIHRoaXMuaHR0cFJlcXVlc3RzSW5Qcm9ncmVzcyA9IG5ldyBjbGllbnQuR2F1Z2Uoe1xuICAgICAgbmFtZTogJ2h0dHBfcmVxdWVzdHNfaW5fcHJvZ3Jlc3MnLFxuICAgICAgaGVscDogJ07Dum1lcm8gZGUgcmVxdWlzacOnw7VlcyBIVFRQIGVtIGFuZGFtZW50bycsXG4gICAgICBsYWJlbE5hbWVzOiBbJ21ldGhvZCcsICdyb3V0ZScsICd1c2VyX3JvbGUnXSxcbiAgICAgIHJlZ2lzdGVyczogW3RoaXMucmVnaXN0ZXJdLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaWNpYWxpemEgbcOpdHJpY2FzIHJlbGFjaW9uYWRhcyBhbyBiYW5jbyBkZSBkYWRvc1xuICAgKi9cbiAgcHJpdmF0ZSBpbml0RGF0YWJhc2VNZXRyaWNzKCk6IHZvaWQge1xuICAgIC8vIENvbnRhZG9yIGRlIGNvbnN1bHRhcyBhbyBiYW5jbyBkZSBkYWRvc1xuICAgIHRoaXMuZGF0YWJhc2VRdWVyaWVzVG90YWwgPSBuZXcgY2xpZW50LkNvdW50ZXIoe1xuICAgICAgbmFtZTogJ2RhdGFiYXNlX3F1ZXJpZXNfdG90YWwnLFxuICAgICAgaGVscDogJ1RvdGFsIGRlIGNvbnN1bHRhcyBhbyBiYW5jbyBkZSBkYWRvcycsXG4gICAgICBsYWJlbE5hbWVzOiBbJ2VudGl0eScsICdvcGVyYXRpb24nLCAnc3VjY2VzcyddLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG5cbiAgICAvLyBIaXN0b2dyYW1hIGRlIGR1cmHDp8OjbyBkYXMgY29uc3VsdGFzIGFvIGJhbmNvIGRlIGRhZG9zXG4gICAgdGhpcy5kYXRhYmFzZVF1ZXJ5RHVyYXRpb24gPSBuZXcgY2xpZW50Lkhpc3RvZ3JhbSh7XG4gICAgICBuYW1lOiAnZGF0YWJhc2VfcXVlcnlfZHVyYXRpb25fc2Vjb25kcycsXG4gICAgICBoZWxwOiAnRHVyYcOnw6NvIGRhcyBjb25zdWx0YXMgYW8gYmFuY28gZGUgZGFkb3MgZW0gc2VndW5kb3MnLFxuICAgICAgbGFiZWxOYW1lczogWydlbnRpdHknLCAnb3BlcmF0aW9uJ10sXG4gICAgICBidWNrZXRzOiBbMC4wMDEsIDAuMDA1LCAwLjAxLCAwLjA1LCAwLjEsIDAuNSwgMV0sXG4gICAgICByZWdpc3RlcnM6IFt0aGlzLnJlZ2lzdGVyXSxcbiAgICB9KTtcblxuICAgIC8vIEdhdWdlIGRlIGNvbmV4w7VlcyBhdGl2YXMgY29tIG8gYmFuY28gZGUgZGFkb3NcbiAgICB0aGlzLmRhdGFiYXNlQ29ubmVjdGlvbnNBY3RpdmUgPSBuZXcgY2xpZW50LkdhdWdlKHtcbiAgICAgIG5hbWU6ICdkYXRhYmFzZV9jb25uZWN0aW9uc19hY3RpdmUnLFxuICAgICAgaGVscDogJ07Dum1lcm8gZGUgY29uZXjDtWVzIGF0aXZhcyBjb20gbyBiYW5jbyBkZSBkYWRvcycsXG4gICAgICByZWdpc3RlcnM6IFt0aGlzLnJlZ2lzdGVyXSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmljaWFsaXphIG3DqXRyaWNhcyByZWxhY2lvbmFkYXMgYW8gY2FjaGUgZGlzdHJpYnXDrWRvIChSZWRpcylcbiAgICovXG4gIHByaXZhdGUgaW5pdENhY2hlTWV0cmljcygpOiB2b2lkIHtcbiAgICAvLyBDb250YWRvciBkZSBvcGVyYcOnw7VlcyBkZSBjYWNoZVxuICAgIHRoaXMuY2FjaGVPcGVyYXRpb25zVG90YWwgPSBuZXcgY2xpZW50LkNvdW50ZXIoe1xuICAgICAgbmFtZTogJ2NhY2hlX29wZXJhdGlvbnNfdG90YWwnLFxuICAgICAgaGVscDogJ1RvdGFsIGRlIG9wZXJhw6fDtWVzIGRlIGNhY2hlJyxcbiAgICAgIGxhYmVsTmFtZXM6IFsnb3BlcmF0aW9uJywgJ3N1Y2Nlc3MnLCAnY2FjaGVfdHlwZSddLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG5cbiAgICAvLyBHYXVnZSBkZSB0YXhhIGRlIGFjZXJ0b3MgZG8gY2FjaGVcbiAgICB0aGlzLmNhY2hlSGl0UmF0aW8gPSBuZXcgY2xpZW50LkdhdWdlKHtcbiAgICAgIG5hbWU6ICdjYWNoZV9oaXRfcmF0aW8nLFxuICAgICAgaGVscDogJ1RheGEgZGUgYWNlcnRvcyBkbyBjYWNoZSAoMC0xKScsXG4gICAgICBsYWJlbE5hbWVzOiBbJ2NhY2hlX3R5cGUnXSxcbiAgICAgIHJlZ2lzdGVyczogW3RoaXMucmVnaXN0ZXJdLFxuICAgIH0pO1xuXG4gICAgLy8gR2F1Z2UgZGUgdGFtYW5obyBkbyBjYWNoZVxuICAgIHRoaXMuY2FjaGVTaXplID0gbmV3IGNsaWVudC5HYXVnZSh7XG4gICAgICBuYW1lOiAnY2FjaGVfc2l6ZV9ieXRlcycsXG4gICAgICBoZWxwOiAnVGFtYW5obyBkbyBjYWNoZSBlbSBieXRlcycsXG4gICAgICBsYWJlbE5hbWVzOiBbJ2NhY2hlX3R5cGUnXSxcbiAgICAgIHJlZ2lzdGVyczogW3RoaXMucmVnaXN0ZXJdLFxuICAgIH0pO1xuXG4gICAgLy8gSGlzdG9ncmFtYSBkZSBkdXJhw6fDo28gZGFzIG9wZXJhw6fDtWVzIGRlIGNhY2hlXG4gICAgdGhpcy5jYWNoZU9wZXJhdGlvbkR1cmF0aW9uID0gbmV3IGNsaWVudC5IaXN0b2dyYW0oe1xuICAgICAgbmFtZTogJ2NhY2hlX29wZXJhdGlvbl9kdXJhdGlvbl9zZWNvbmRzJyxcbiAgICAgIGhlbHA6ICdEdXJhw6fDo28gZGFzIG9wZXJhw6fDtWVzIGRlIGNhY2hlIGVtIHNlZ3VuZG9zJyxcbiAgICAgIGxhYmVsTmFtZXM6IFsnb3BlcmF0aW9uJywgJ2NhY2hlX3R5cGUnXSxcbiAgICAgIGJ1Y2tldHM6IFswLjAwMDEsIDAuMDAwNSwgMC4wMDEsIDAuMDA1LCAwLjAxLCAwLjA1LCAwLjFdLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pY2lhbGl6YSBtw6l0cmljYXMgcmVsYWNpb25hZGFzIMOgIHNlZ3VyYW7Dp2EgZSBjb21wbGlhbmNlIExHUERcbiAgICovXG4gIHByaXZhdGUgaW5pdFNlY3VyaXR5TWV0cmljcygpOiB2b2lkIHtcbiAgICAvLyBDb250YWRvciBkZSBldmVudG9zIGRlIHNlZ3VyYW7Dp2FcbiAgICB0aGlzLnNlY3VyaXR5RXZlbnRzVG90YWwgPSBuZXcgY2xpZW50LkNvdW50ZXIoe1xuICAgICAgbmFtZTogJ3NlY3VyaXR5X2V2ZW50c190b3RhbCcsXG4gICAgICBoZWxwOiAnVG90YWwgZGUgZXZlbnRvcyBkZSBzZWd1cmFuw6dhJyxcbiAgICAgIGxhYmVsTmFtZXM6IFsndHlwZScsICdzZXZlcml0eScsICdzb3VyY2UnXSxcbiAgICAgIHJlZ2lzdGVyczogW3RoaXMucmVnaXN0ZXJdLFxuICAgIH0pO1xuXG4gICAgLy8gQ29udGFkb3IgZGUgYWNlc3NvcyBhIGRhZG9zIHByb3RlZ2lkb3MgcGVsYSBMR1BEXG4gICAgdGhpcy5sZ3BkRGF0YUFjY2Vzc1RvdGFsID0gbmV3IGNsaWVudC5Db3VudGVyKHtcbiAgICAgIG5hbWU6ICdsZ3BkX2RhdGFfYWNjZXNzX3RvdGFsJyxcbiAgICAgIGhlbHA6ICdUb3RhbCBkZSBhY2Vzc29zIGEgZGFkb3MgcHJvdGVnaWRvcyBwZWxhIExHUEQnLFxuICAgICAgbGFiZWxOYW1lczogWydkYXRhX3R5cGUnLCAnb3BlcmF0aW9uJywgJ2F1dGhvcml6ZWQnLCAndXNlcl9yb2xlJ10sXG4gICAgICByZWdpc3RlcnM6IFt0aGlzLnJlZ2lzdGVyXSxcbiAgICB9KTtcblxuICAgIC8vIENvbnRhZG9yIGRlIHRlbnRhdGl2YXMgZGUgYXV0ZW50aWNhw6fDo29cbiAgICB0aGlzLmF1dGhlbnRpY2F0aW9uQXR0ZW1wdHNUb3RhbCA9IG5ldyBjbGllbnQuQ291bnRlcih7XG4gICAgICBuYW1lOiAnYXV0aGVudGljYXRpb25fYXR0ZW1wdHNfdG90YWwnLFxuICAgICAgaGVscDogJ1RvdGFsIGRlIHRlbnRhdGl2YXMgZGUgYXV0ZW50aWNhw6fDo28nLFxuICAgICAgbGFiZWxOYW1lczogWydzdWNjZXNzJywgJ21ldGhvZCcsICdpcF9hZGRyZXNzJ10sXG4gICAgICByZWdpc3RlcnM6IFt0aGlzLnJlZ2lzdGVyXSxcbiAgICB9KTtcblxuICAgIC8vIENvbnRhZG9yIGRlIGZhbGhhcyBkZSBhdXRvcml6YcOnw6NvXG4gICAgdGhpcy5hdXRob3JpemF0aW9uRmFpbHVyZXNUb3RhbCA9IG5ldyBjbGllbnQuQ291bnRlcih7XG4gICAgICBuYW1lOiAnYXV0aG9yaXphdGlvbl9mYWlsdXJlc190b3RhbCcsXG4gICAgICBoZWxwOiAnVG90YWwgZGUgZmFsaGFzIGRlIGF1dG9yaXphw6fDo28nLFxuICAgICAgbGFiZWxOYW1lczogWydyZXNvdXJjZScsICdyZXF1aXJlZF9yb2xlJywgJ3VzZXJfcm9sZSddLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pY2lhbGl6YSBtw6l0cmljYXMgcmVsYWNpb25hZGFzIGEgb3BlcmHDp8O1ZXMgY29tIGRvY3VtZW50b3NcbiAgICovXG4gIHByaXZhdGUgaW5pdERvY3VtZW50TWV0cmljcygpOiB2b2lkIHtcbiAgICAvLyBDb250YWRvciBkZSBvcGVyYcOnw7VlcyBjb20gZG9jdW1lbnRvc1xuICAgIHRoaXMuZG9jdW1lbnRPcGVyYXRpb25zVG90YWwgPSBuZXcgY2xpZW50LkNvdW50ZXIoe1xuICAgICAgbmFtZTogJ2RvY3VtZW50X29wZXJhdGlvbnNfdG90YWwnLFxuICAgICAgaGVscDogJ1RvdGFsIGRlIG9wZXJhw6fDtWVzIGNvbSBkb2N1bWVudG9zJyxcbiAgICAgIGxhYmVsTmFtZXM6IFsnb3BlcmF0aW9uJywgJ2RvY3VtZW50X3R5cGUnLCAnc2Vuc2l0aXZlJywgJ2VuY3J5cHRlZCddLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG5cbiAgICAvLyBHYXVnZSBkZSBhcm1hemVuYW1lbnRvIGRlIGRvY3VtZW50b3NcbiAgICB0aGlzLmRvY3VtZW50U3RvcmFnZUJ5dGVzID0gbmV3IGNsaWVudC5HYXVnZSh7XG4gICAgICBuYW1lOiAnZG9jdW1lbnRfc3RvcmFnZV9ieXRlcycsXG4gICAgICBoZWxwOiAnQXJtYXplbmFtZW50byB0b3RhbCBkZSBkb2N1bWVudG9zIGVtIGJ5dGVzJyxcbiAgICAgIGxhYmVsTmFtZXM6IFsnZG9jdW1lbnRfdHlwZScsICdzZW5zaXRpdmUnXSxcbiAgICAgIHJlZ2lzdGVyczogW3RoaXMucmVnaXN0ZXJdLFxuICAgIH0pO1xuXG4gICAgLy8gSGlzdG9ncmFtYSBkZSBkdXJhw6fDo28gZGUgdXBsb2FkIGRlIGRvY3VtZW50b3NcbiAgICB0aGlzLmRvY3VtZW50VXBsb2FkRHVyYXRpb24gPSBuZXcgY2xpZW50Lkhpc3RvZ3JhbSh7XG4gICAgICBuYW1lOiAnZG9jdW1lbnRfdXBsb2FkX2R1cmF0aW9uX3NlY29uZHMnLFxuICAgICAgaGVscDogJ0R1cmHDp8OjbyBkbyB1cGxvYWQgZGUgZG9jdW1lbnRvcyBlbSBzZWd1bmRvcycsXG4gICAgICBsYWJlbE5hbWVzOiBbJ2RvY3VtZW50X3R5cGUnLCAnc2Vuc2l0aXZlJywgJ2VuY3J5cHRlZCddLFxuICAgICAgYnVja2V0czogWzAuMSwgMC41LCAxLCAyLCA1LCAxMCwgMzBdLFxuICAgICAgcmVnaXN0ZXJzOiBbdGhpcy5yZWdpc3Rlcl0sXG4gICAgfSk7XG5cbiAgICAvLyBIaXN0b2dyYW1hIGRlIGR1cmHDp8OjbyBkZSBkb3dubG9hZCBkZSBkb2N1bWVudG9zXG4gICAgdGhpcy5kb2N1bWVudERvd25sb2FkRHVyYXRpb24gPSBuZXcgY2xpZW50Lkhpc3RvZ3JhbSh7XG4gICAgICBuYW1lOiAnZG9jdW1lbnRfZG93bmxvYWRfZHVyYXRpb25fc2Vjb25kcycsXG4gICAgICBoZWxwOiAnRHVyYcOnw6NvIGRvIGRvd25sb2FkIGRlIGRvY3VtZW50b3MgZW0gc2VndW5kb3MnLFxuICAgICAgbGFiZWxOYW1lczogWydkb2N1bWVudF90eXBlJywgJ3NlbnNpdGl2ZScsICdlbmNyeXB0ZWQnXSxcbiAgICAgIGJ1Y2tldHM6IFswLjEsIDAuNSwgMSwgMiwgNSwgMTAsIDMwXSxcbiAgICAgIHJlZ2lzdGVyczogW3RoaXMucmVnaXN0ZXJdLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaWNpYWxpemEgbcOpdHJpY2FzIHJlbGFjaW9uYWRhcyBhbyBzaXN0ZW1hXG4gICAqL1xuICBwcml2YXRlIGluaXRTeXN0ZW1NZXRyaWNzKCk6IHZvaWQge1xuICAgIC8vIEdhdWdlIGRlIHVzbyBkZSBtZW3Ds3JpYVxuICAgIHRoaXMuc3lzdGVtTWVtb3J5VXNhZ2UgPSBuZXcgY2xpZW50LkdhdWdlKHtcbiAgICAgIG5hbWU6ICdzeXN0ZW1fbWVtb3J5X3VzYWdlX2J5dGVzJyxcbiAgICAgIGhlbHA6ICdVc28gZGUgbWVtw7NyaWEgZG8gc2lzdGVtYSBlbSBieXRlcycsXG4gICAgICBsYWJlbE5hbWVzOiBbJ3R5cGUnXSxcbiAgICAgIHJlZ2lzdGVyczogW3RoaXMucmVnaXN0ZXJdLFxuICAgIH0pO1xuXG4gICAgLy8gR2F1Z2UgZGUgdXNvIGRlIENQVVxuICAgIHRoaXMuc3lzdGVtQ3B1VXNhZ2UgPSBuZXcgY2xpZW50LkdhdWdlKHtcbiAgICAgIG5hbWU6ICdzeXN0ZW1fY3B1X3VzYWdlX3BlcmNlbnQnLFxuICAgICAgaGVscDogJ1VzbyBkZSBDUFUgZG8gc2lzdGVtYSBlbSBwb3JjZW50YWdlbScsXG4gICAgICByZWdpc3RlcnM6IFt0aGlzLnJlZ2lzdGVyXSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZW1lbnRhIG8gY29udGFkb3IgZGUgcmVxdWlzacOnw7VlcyBIVFRQXG4gICAqL1xuICByZWNvcmRIdHRwUmVxdWVzdChcbiAgICBtZXRob2Q6IHN0cmluZyxcbiAgICByb3V0ZTogc3RyaW5nLFxuICAgIHN0YXR1c0NvZGU6IG51bWJlcixcbiAgICB1c2VyUm9sZTogc3RyaW5nID0gJ2Fub255bW91cycsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuaHR0cFJlcXVlc3RzVG90YWwuaW5jKHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIHJvdXRlLFxuICAgICAgc3RhdHVzX2NvZGU6IHN0YXR1c0NvZGUudG9TdHJpbmcoKSxcbiAgICAgIHVzZXJfcm9sZTogdXNlclJvbGUsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0cmEgYSBkdXJhw6fDo28gZGUgdW1hIHJlcXVpc2nDp8OjbyBIVFRQXG4gICAqL1xuICByZWNvcmRIdHRwUmVxdWVzdER1cmF0aW9uKFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHJvdXRlOiBzdHJpbmcsXG4gICAgc3RhdHVzQ29kZTogbnVtYmVyLFxuICAgIGR1cmF0aW9uU2Vjb25kczogbnVtYmVyLFxuICAgIHVzZXJSb2xlOiBzdHJpbmcgPSAnYW5vbnltb3VzJyxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5odHRwUmVxdWVzdER1cmF0aW9uLm9ic2VydmUoXG4gICAgICB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcm91dGUsXG4gICAgICAgIHN0YXR1c19jb2RlOiBzdGF0dXNDb2RlLnRvU3RyaW5nKCksXG4gICAgICAgIHVzZXJfcm9sZTogdXNlclJvbGUsXG4gICAgICB9LFxuICAgICAgZHVyYXRpb25TZWNvbmRzLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogSW5jcmVtZW50YSBvIGNvbnRhZG9yIGRlIHJlcXVpc2nDp8O1ZXMgSFRUUCBlbSBhbmRhbWVudG9cbiAgICovXG4gIGluY3JlbWVudEh0dHBSZXF1ZXN0c0luUHJvZ3Jlc3MoXG4gICAgbWV0aG9kOiBzdHJpbmcsXG4gICAgcm91dGU6IHN0cmluZyxcbiAgICB1c2VyUm9sZTogc3RyaW5nID0gJ2Fub255bW91cycsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuaHR0cFJlcXVlc3RzSW5Qcm9ncmVzcy5pbmMoeyBtZXRob2QsIHJvdXRlLCB1c2VyX3JvbGU6IHVzZXJSb2xlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY3JlbWVudGEgbyBjb250YWRvciBkZSByZXF1aXNpw6fDtWVzIEhUVFAgZW0gYW5kYW1lbnRvXG4gICAqL1xuICBkZWNyZW1lbnRIdHRwUmVxdWVzdHNJblByb2dyZXNzKFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIHJvdXRlOiBzdHJpbmcsXG4gICAgdXNlclJvbGU6IHN0cmluZyA9ICdhbm9ueW1vdXMnLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmh0dHBSZXF1ZXN0c0luUHJvZ3Jlc3MuZGVjKHsgbWV0aG9kLCByb3V0ZSwgdXNlcl9yb2xlOiB1c2VyUm9sZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZW1lbnRhIG8gY29udGFkb3IgZGUgY29uc3VsdGFzIGFvIGJhbmNvIGRlIGRhZG9zXG4gICAqL1xuICByZWNvcmREYXRhYmFzZVF1ZXJ5KFxuICAgIGVudGl0eTogc3RyaW5nLFxuICAgIG9wZXJhdGlvbjogc3RyaW5nLFxuICAgIHN1Y2Nlc3M6IGJvb2xlYW4gPSB0cnVlLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmRhdGFiYXNlUXVlcmllc1RvdGFsLmluYyh7XG4gICAgICBlbnRpdHksXG4gICAgICBvcGVyYXRpb24sXG4gICAgICBzdWNjZXNzOiBzdWNjZXNzLnRvU3RyaW5nKCksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0cmEgYSBkdXJhw6fDo28gZGUgdW1hIGNvbnN1bHRhIGFvIGJhbmNvIGRlIGRhZG9zXG4gICAqL1xuICByZWNvcmREYXRhYmFzZVF1ZXJ5RHVyYXRpb24oXG4gICAgZW50aXR5OiBzdHJpbmcsXG4gICAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gICAgZHVyYXRpb25TZWNvbmRzOiBudW1iZXIsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuZGF0YWJhc2VRdWVyeUR1cmF0aW9uLm9ic2VydmUoeyBlbnRpdHksIG9wZXJhdGlvbiB9LCBkdXJhdGlvblNlY29uZHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dWFsaXphIG8gbsO6bWVybyBkZSBjb25leMO1ZXMgYXRpdmFzIGNvbSBvIGJhbmNvIGRlIGRhZG9zXG4gICAqL1xuICBzZXREYXRhYmFzZUNvbm5lY3Rpb25zQWN0aXZlKGNvbm5lY3Rpb25zOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmRhdGFiYXNlQ29ubmVjdGlvbnNBY3RpdmUuc2V0KGNvbm5lY3Rpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RyYSB1bSBldmVudG8gZGUgc2VndXJhbsOnYVxuICAgKi9cbiAgcmVjb3JkU2VjdXJpdHlFdmVudCh0eXBlOiBzdHJpbmcsIHNldmVyaXR5OiBzdHJpbmcsIHNvdXJjZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zZWN1cml0eUV2ZW50c1RvdGFsLmluYyh7IHR5cGUsIHNldmVyaXR5LCBzb3VyY2UgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0cmEgdW0gYWNlc3NvIGEgZGFkb3MgcHJvdGVnaWRvcyBwZWxhIExHUERcbiAgICovXG4gIHJlY29yZExncGREYXRhQWNjZXNzKFxuICAgIGRhdGFUeXBlOiBzdHJpbmcsXG4gICAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gICAgYXV0aG9yaXplZDogYm9vbGVhbiA9IHRydWUsXG4gICAgdXNlclJvbGU6IHN0cmluZyA9ICdhbm9ueW1vdXMnLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmxncGREYXRhQWNjZXNzVG90YWwuaW5jKHtcbiAgICAgIGRhdGFfdHlwZTogZGF0YVR5cGUsXG4gICAgICBvcGVyYXRpb24sXG4gICAgICBhdXRob3JpemVkOiBhdXRob3JpemVkLnRvU3RyaW5nKCksXG4gICAgICB1c2VyX3JvbGU6IHVzZXJSb2xlLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdHJhIHVtYSB0ZW50YXRpdmEgZGUgYXV0ZW50aWNhw6fDo29cbiAgICovXG4gIHJlY29yZEF1dGhlbnRpY2F0aW9uQXR0ZW1wdChcbiAgICBzdWNjZXNzOiBib29sZWFuLFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIGlwQWRkcmVzczogc3RyaW5nLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmF1dGhlbnRpY2F0aW9uQXR0ZW1wdHNUb3RhbC5pbmMoe1xuICAgICAgc3VjY2Vzczogc3VjY2Vzcy50b1N0cmluZygpLFxuICAgICAgbWV0aG9kLFxuICAgICAgaXBfYWRkcmVzczogaXBBZGRyZXNzLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdHJhIHVtYSBmYWxoYSBkZSBhdXRvcml6YcOnw6NvXG4gICAqL1xuICByZWNvcmRBdXRob3JpemF0aW9uRmFpbHVyZShcbiAgICByZXNvdXJjZTogc3RyaW5nLFxuICAgIHJlcXVpcmVkUm9sZTogc3RyaW5nLFxuICAgIHVzZXJSb2xlOiBzdHJpbmcsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuYXV0aG9yaXphdGlvbkZhaWx1cmVzVG90YWwuaW5jKHtcbiAgICAgIHJlc291cmNlLFxuICAgICAgcmVxdWlyZWRfcm9sZTogcmVxdWlyZWRSb2xlLFxuICAgICAgdXNlcl9yb2xlOiB1c2VyUm9sZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RyYSB1bWEgb3BlcmHDp8OjbyBjb20gZG9jdW1lbnRvXG4gICAqL1xuICByZWNvcmREb2N1bWVudE9wZXJhdGlvbihcbiAgICBvcGVyYXRpb246IHN0cmluZyxcbiAgICBkb2N1bWVudFR5cGU6IHN0cmluZyxcbiAgICBzZW5zaXRpdmU6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICBlbmNyeXB0ZWQ6IGJvb2xlYW4gPSBmYWxzZSxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5kb2N1bWVudE9wZXJhdGlvbnNUb3RhbC5pbmMoe1xuICAgICAgb3BlcmF0aW9uLFxuICAgICAgZG9jdW1lbnRfdHlwZTogZG9jdW1lbnRUeXBlLFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUudG9TdHJpbmcoKSxcbiAgICAgIGVuY3J5cHRlZDogZW5jcnlwdGVkLnRvU3RyaW5nKCksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgbyB0YW1hbmhvIHRvdGFsIGRlIGFybWF6ZW5hbWVudG8gZGUgZG9jdW1lbnRvc1xuICAgKi9cbiAgc2V0RG9jdW1lbnRTdG9yYWdlQnl0ZXMoXG4gICAgYnl0ZXM6IG51bWJlcixcbiAgICBkb2N1bWVudFR5cGU6IHN0cmluZyxcbiAgICBzZW5zaXRpdmU6IGJvb2xlYW4gPSBmYWxzZSxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5kb2N1bWVudFN0b3JhZ2VCeXRlcy5zZXQoXG4gICAgICB7IGRvY3VtZW50X3R5cGU6IGRvY3VtZW50VHlwZSwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUudG9TdHJpbmcoKSB9LFxuICAgICAgYnl0ZXMsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RyYSBhIGR1cmHDp8OjbyBkZSB1bSB1cGxvYWQgZGUgZG9jdW1lbnRvXG4gICAqL1xuICByZWNvcmREb2N1bWVudFVwbG9hZER1cmF0aW9uKFxuICAgIGRvY3VtZW50VHlwZTogc3RyaW5nLFxuICAgIHNlbnNpdGl2ZTogYm9vbGVhbixcbiAgICBlbmNyeXB0ZWQ6IGJvb2xlYW4sXG4gICAgZHVyYXRpb25TZWNvbmRzOiBudW1iZXIsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuZG9jdW1lbnRVcGxvYWREdXJhdGlvbi5vYnNlcnZlKFxuICAgICAge1xuICAgICAgICBkb2N1bWVudF90eXBlOiBkb2N1bWVudFR5cGUsXG4gICAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLnRvU3RyaW5nKCksXG4gICAgICAgIGVuY3J5cHRlZDogZW5jcnlwdGVkLnRvU3RyaW5nKCksXG4gICAgICB9LFxuICAgICAgZHVyYXRpb25TZWNvbmRzLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0cmEgYSBkdXJhw6fDo28gZGUgdW0gZG93bmxvYWQgZGUgZG9jdW1lbnRvXG4gICAqL1xuICByZWNvcmREb2N1bWVudERvd25sb2FkRHVyYXRpb24oXG4gICAgZG9jdW1lbnRUeXBlOiBzdHJpbmcsXG4gICAgc2Vuc2l0aXZlOiBib29sZWFuLFxuICAgIGVuY3J5cHRlZDogYm9vbGVhbixcbiAgICBkdXJhdGlvblNlY29uZHM6IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5kb2N1bWVudERvd25sb2FkRHVyYXRpb24ub2JzZXJ2ZShcbiAgICAgIHtcbiAgICAgICAgZG9jdW1lbnRfdHlwZTogZG9jdW1lbnRUeXBlLFxuICAgICAgICBzZW5zaXRpdmU6IHNlbnNpdGl2ZS50b1N0cmluZygpLFxuICAgICAgICBlbmNyeXB0ZWQ6IGVuY3J5cHRlZC50b1N0cmluZygpLFxuICAgICAgfSxcbiAgICAgIGR1cmF0aW9uU2Vjb25kcyxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dWFsaXphIGFzIG3DqXRyaWNhcyBkZSB1c28gZGUgbWVtw7NyaWFcbiAgICovXG4gIHVwZGF0ZU1lbW9yeVVzYWdlKCk6IHZvaWQge1xuICAgIGNvbnN0IG1lbW9yeVVzYWdlID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpO1xuICAgIHRoaXMuc3lzdGVtTWVtb3J5VXNhZ2Uuc2V0KHsgdHlwZTogJ3JzcycgfSwgbWVtb3J5VXNhZ2UucnNzKTtcbiAgICB0aGlzLnN5c3RlbU1lbW9yeVVzYWdlLnNldCh7IHR5cGU6ICdoZWFwVG90YWwnIH0sIG1lbW9yeVVzYWdlLmhlYXBUb3RhbCk7XG4gICAgdGhpcy5zeXN0ZW1NZW1vcnlVc2FnZS5zZXQoeyB0eXBlOiAnaGVhcFVzZWQnIH0sIG1lbW9yeVVzYWdlLmhlYXBVc2VkKTtcbiAgICB0aGlzLnN5c3RlbU1lbW9yeVVzYWdlLnNldCh7IHR5cGU6ICdleHRlcm5hbCcgfSwgbWVtb3J5VXNhZ2UuZXh0ZXJuYWwpO1xuXG4gICAgaWYgKG1lbW9yeVVzYWdlLmFycmF5QnVmZmVycykge1xuICAgICAgdGhpcy5zeXN0ZW1NZW1vcnlVc2FnZS5zZXQoXG4gICAgICAgIHsgdHlwZTogJ2FycmF5QnVmZmVycycgfSxcbiAgICAgICAgbWVtb3J5VXNhZ2UuYXJyYXlCdWZmZXJzLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgYSBtw6l0cmljYSBkZSB1c28gZGUgQ1BVXG4gICAqL1xuICB1cGRhdGVDcHVVc2FnZShjcHVQZXJjZW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnN5c3RlbUNwdVVzYWdlLnNldChjcHVQZXJjZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RyYSB1bWEgb3BlcmHDp8OjbyBkZSBjYWNoZVxuICAgKi9cbiAgcmVjb3JkQ2FjaGVPcGVyYXRpb24oXG4gICAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gICAgc3VjY2VzczogYm9vbGVhbixcbiAgICBjYWNoZVR5cGU6IHN0cmluZyA9ICdyZWRpcycsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuY2FjaGVPcGVyYXRpb25zVG90YWwuaW5jKHtcbiAgICAgIG9wZXJhdGlvbixcbiAgICAgIHN1Y2Nlc3M6IHN1Y2Nlc3MudG9TdHJpbmcoKSxcbiAgICAgIGNhY2hlX3R5cGU6IGNhY2hlVHlwZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RyYSBhIGR1cmHDp8OjbyBkZSB1bWEgb3BlcmHDp8OjbyBkZSBjYWNoZVxuICAgKi9cbiAgcmVjb3JkQ2FjaGVPcGVyYXRpb25EdXJhdGlvbihcbiAgICBvcGVyYXRpb246IHN0cmluZyxcbiAgICBkdXJhdGlvblNlY29uZHM6IG51bWJlcixcbiAgICBjYWNoZVR5cGU6IHN0cmluZyA9ICdyZWRpcycsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuY2FjaGVPcGVyYXRpb25EdXJhdGlvbi5vYnNlcnZlKFxuICAgICAgeyBvcGVyYXRpb24sIGNhY2hlX3R5cGU6IGNhY2hlVHlwZSB9LFxuICAgICAgZHVyYXRpb25TZWNvbmRzLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgYSB0YXhhIGRlIGFjZXJ0b3MgZG8gY2FjaGVcbiAgICovXG4gIHVwZGF0ZUNhY2hlSGl0UmF0aW8ocmF0aW86IG51bWJlciwgY2FjaGVUeXBlOiBzdHJpbmcgPSAncmVkaXMnKTogdm9pZCB7XG4gICAgdGhpcy5jYWNoZUhpdFJhdGlvLnNldCh7IGNhY2hlX3R5cGU6IGNhY2hlVHlwZSB9LCByYXRpbyk7XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgbyB0YW1hbmhvIGRvIGNhY2hlXG4gICAqL1xuICB1cGRhdGVDYWNoZVNpemUoc2l6ZUJ5dGVzOiBudW1iZXIsIGNhY2hlVHlwZTogc3RyaW5nID0gJ3JlZGlzJyk6IHZvaWQge1xuICAgIHRoaXMuY2FjaGVTaXplLnNldCh7IGNhY2hlX3R5cGU6IGNhY2hlVHlwZSB9LCBzaXplQnl0ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdHJhIGZhbGhhcyBkZSBjYWNoZVxuICAgKiBAcGFyYW0gY291bnQgTsO6bWVybyBkZSBmYWxoYXNcbiAgICogQHBhcmFtIGNhY2hlVHlwZSBUaXBvIGRlIGNhY2hlIChyZWRpcywgbWVtb3J5LCBldGMpXG4gICAqL1xuICByZWNvcmRDYWNoZUZhaWx1cmVzKGNvdW50OiBudW1iZXIsIGNhY2hlVHlwZTogc3RyaW5nID0gJ3JlZGlzJyk6IHZvaWQge1xuICAgIC8vIFJlZ2lzdHJhbW9zIGNhZGEgZmFsaGEgY29tbyB1bWEgb3BlcmHDp8OjbyBkZSBjYWNoZSBtYWwtc3VjZWRpZGFcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHRoaXMucmVjb3JkQ2FjaGVPcGVyYXRpb24oJ2ZhaWx1cmUnLCBmYWxzZSwgY2FjaGVUeXBlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0cmEgdGVudGF0aXZhcyBkZSByZWN1cGVyYcOnw6NvIGRvIGNpcmN1aXQgYnJlYWtlclxuICAgKiBAcGFyYW0gY291bnQgTsO6bWVybyBkZSB0ZW50YXRpdmFzXG4gICAqIEBwYXJhbSBjYWNoZVR5cGUgVGlwbyBkZSBjYWNoZSAocmVkaXMsIG1lbW9yeSwgZXRjKVxuICAgKi9cbiAgcmVjb3JkQ2FjaGVSZWNvdmVyeUF0dGVtcHRzKFxuICAgIGNvdW50OiBudW1iZXIsXG4gICAgY2FjaGVUeXBlOiBzdHJpbmcgPSAncmVkaXMnLFxuICApOiB2b2lkIHtcbiAgICAvLyBSZWdpc3RyYW1vcyBjYWRhIHRlbnRhdGl2YSBjb21vIHVtYSBvcGVyYcOnw6NvIGRlIHJlY292ZXJ5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICB0aGlzLnJlY29yZENhY2hlT3BlcmF0aW9uKCdyZWNvdmVyeScsIHRydWUsIGNhY2hlVHlwZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdHJhIG8gdGVtcG8gZGUgcmVzcG9zdGEgZGUgdW1hIG9wZXJhw6fDo28gZGUgY2FjaGVcbiAgICogQHBhcmFtIGR1cmF0aW9uTXMgVGVtcG8gZW0gbWlsaXNzZWd1bmRvc1xuICAgKiBAcGFyYW0ga2V5IENoYXZlIGRvIGNhY2hlXG4gICAqIEBwYXJhbSBjYWNoZVR5cGUgVGlwbyBkZSBjYWNoZSAocmVkaXMsIG1lbW9yeSwgZXRjKVxuICAgKi9cbiAgcmVjb3JkQ2FjaGVSZXNwb25zZVRpbWUoXG4gICAgZHVyYXRpb25NczogbnVtYmVyLFxuICAgIGtleTogc3RyaW5nLFxuICAgIGNhY2hlVHlwZTogc3RyaW5nID0gJ3JlZGlzJyxcbiAgKTogdm9pZCB7XG4gICAgLy8gQ29udmVydGVtb3MgZGUgbWlsaXNzZWd1bmRvcyBwYXJhIHNlZ3VuZG9zIHBhcmEgbWFudGVyIGEgY29udmVuw6fDo28gZG8gUHJvbWV0aGV1c1xuICAgIGNvbnN0IGR1cmF0aW9uU2Vjb25kcyA9IGR1cmF0aW9uTXMgLyAxMDAwO1xuICAgIHRoaXMucmVjb3JkQ2FjaGVPcGVyYXRpb25EdXJhdGlvbignZ2V0JywgZHVyYXRpb25TZWNvbmRzLCBjYWNoZVR5cGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldG9ybmEgdG9kYXMgYXMgbcOpdHJpY2FzIG5vIGZvcm1hdG8gZG8gUHJvbWV0aGV1c1xuICAgKi9cbiAgYXN5bmMgZ2V0TWV0cmljcygpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIC8vIEF0dWFsaXphciBtw6l0cmljYXMgZGUgc2lzdGVtYSBhbnRlcyBkZSByZXRvcm5hclxuICAgIHRoaXMudXBkYXRlTWVtb3J5VXNhZ2UoKTtcblxuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyLm1ldHJpY3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRvcm5hIG8gcmVnaXN0cm8gZGUgbcOpdHJpY2FzXG4gICAqL1xuICBnZXRSZWdpc3RlcigpOiBjbGllbnQuUmVnaXN0cnkge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=