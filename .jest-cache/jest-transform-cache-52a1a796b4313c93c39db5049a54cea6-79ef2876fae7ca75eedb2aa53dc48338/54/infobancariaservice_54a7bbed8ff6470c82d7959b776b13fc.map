{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\info-bancaria.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\info-bancaria.service.ts"],"sourcesContent":["import {\n  Injectable,\n  Logger,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InfoBancariaRepository } from '../repositories/info-bancaria.repository';\nimport { CidadaoService } from './cidadao.service';\nimport { CreateInfoBancariaDto } from '../dto/create-info-bancaria.dto';\nimport { UpdateInfoBancariaDto } from '../dto/update-info-bancaria.dto';\nimport { InfoBancariaResponseDto } from '../dto/info-bancaria-response.dto';\nimport { InfoBancaria } from '../../../entities/info-bancaria.entity';\nimport { TipoChavePix } from '../../../enums/info-bancaria.enum';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\n/**\n * Service para gerenciamento de informações bancárias\n *\n * Responsável pela lógica de negócio relacionada às informações bancárias dos cidadãos,\n * incluindo validações específicas para contas poupança social do Banco do Brasil\n * e chaves PIX.\n */\n@Injectable()\nexport class InfoBancariaService {\n  private readonly logger = new Logger(InfoBancariaService.name);\n\n  constructor(\n    private readonly infoBancariaRepository: InfoBancariaRepository,\n    private readonly cidadaoService: CidadaoService,\n  ) {}\n\n  /**\n   * Cria uma nova informação bancária\n   * @param createInfoBancariaDto Dados para criação\n   * @returns Informação bancária criada\n   */\n  async create(\n    createInfoBancariaDto: CreateInfoBancariaDto,\n  ): Promise<InfoBancariaResponseDto> {\n    try {\n      this.logger.log(\n        `Criando informação bancária para cidadão ${createInfoBancariaDto.cidadao_id}`,\n      );\n\n      // Verifica se o cidadão existe\n      const cidadao = await this.cidadaoService.findById(\n        createInfoBancariaDto.cidadao_id,\n      );\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Verifica se já existe informação bancária ativa para o cidadão\n      const existingInfo =\n        await this.infoBancariaRepository.existsActiveByCidadaoId(\n          createInfoBancariaDto.cidadao_id,\n        );\n      if (existingInfo) {\n        throw new ConflictException(\n          'Cidadão já possui informação bancária ativa',\n        );\n      }\n\n      // Valida chave PIX se fornecida\n      if (createInfoBancariaDto.chave_pix) {\n        await this.validateChavePix(\n          createInfoBancariaDto.chave_pix,\n          createInfoBancariaDto.tipo_chave_pix,\n        );\n\n        // Verifica se a chave PIX já está em uso\n        const pixExists = await this.infoBancariaRepository.existsByChavePix(\n          createInfoBancariaDto.chave_pix,\n        );\n        if (pixExists) {\n          throw new ConflictException('Chave PIX já está em uso');\n        }\n      }\n\n      // Valida dados específicos do Banco do Brasil se aplicável\n      if (createInfoBancariaDto.banco === '001') {\n        this.validateBancoBrasil(createInfoBancariaDto);\n      }\n\n      const dadosNormalizados = normalizeEnumFields(createInfoBancariaDto);\n      const infoBancaria =\n        await this.infoBancariaRepository.create(dadosNormalizados);\n\n      this.logger.log(\n        `Informação bancária criada com sucesso: ${infoBancaria.id}`,\n      );\n      return this.mapToResponseDto(infoBancaria);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao criar informação bancária: ${error.message}`,\n        error.stack,\n      );\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro interno ao criar informação bancária',\n      );\n    }\n  }\n\n  /**\n   * Busca todas as informações bancárias com filtros\n   * @param options Opções de filtro e paginação\n   * @returns Lista paginada de informações bancárias\n   */\n  async findAll(options?: {\n    skip?: number;\n    take?: number;\n    cidadao_id?: string;\n    banco?: string;\n    ativo?: boolean;\n    includeRelations?: boolean;\n  }): Promise<{ data: InfoBancariaResponseDto[]; total: number }> {\n    try {\n      const [infosBancarias, total] = await this.infoBancariaRepository.findAll(\n        {\n          skip: options?.skip,\n          take: options?.take,\n          where: {\n            cidadao_id: options?.cidadao_id,\n            banco: options?.banco,\n            ativo: options?.ativo,\n          },\n          includeRelations: options?.includeRelations,\n        },\n      );\n\n      return {\n        data: infosBancarias.map((info) => this.mapToResponseDto(info)),\n        total,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar informações bancárias: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro interno ao buscar informações bancárias',\n      );\n    }\n  }\n\n  /**\n   * Busca informação bancária por ID\n   * @param id ID da informação bancária\n   * @param includeRelations Se deve incluir relações\n   * @returns Informação bancária encontrada\n   */\n  async findById(\n    id: string,\n    includeRelations = false,\n  ): Promise<InfoBancariaResponseDto> {\n    try {\n      const infoBancaria = await this.infoBancariaRepository.findById(\n        id,\n        includeRelations,\n      );\n      if (!infoBancaria) {\n        throw new NotFoundException('Informação bancária não encontrada');\n      }\n      return this.mapToResponseDto(infoBancaria);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar informação bancária ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro interno ao buscar informação bancária',\n      );\n    }\n  }\n\n  /**\n   * Busca informação bancária por ID do cidadão\n   * @param cidadaoId ID do cidadão\n   * @param includeRelations Se deve incluir relações\n   * @returns Informação bancária do cidadão\n   */\n  async findByCidadaoId(\n    cidadaoId: string,\n    includeRelations = false,\n  ): Promise<InfoBancariaResponseDto | null> {\n    try {\n      const infoBancaria = await this.infoBancariaRepository.findByCidadaoId(\n        cidadaoId,\n        includeRelations,\n      );\n      return infoBancaria ? this.mapToResponseDto(infoBancaria) : null;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar informação bancária do cidadão ${cidadaoId}: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro interno ao buscar informação bancária do cidadão',\n      );\n    }\n  }\n\n  /**\n   * Atualiza informação bancária\n   * @param id ID da informação bancária\n   * @param updateInfoBancariaDto Dados para atualização\n   * @returns Informação bancária atualizada\n   */\n  async update(\n    id: string,\n    updateInfoBancariaDto: UpdateInfoBancariaDto,\n  ): Promise<InfoBancariaResponseDto> {\n    try {\n      this.logger.log(`Atualizando informação bancária ${id}`);\n\n      // Verifica se a informação bancária existe\n      const existingInfo = await this.infoBancariaRepository.findById(id);\n      if (!existingInfo) {\n        throw new NotFoundException('Informação bancária não encontrada');\n      }\n\n      // Valida chave PIX se fornecida\n      if (updateInfoBancariaDto.chave_pix) {\n        await this.validateChavePix(\n          updateInfoBancariaDto.chave_pix,\n          updateInfoBancariaDto.tipo_chave_pix,\n        );\n\n        // Verifica se a chave PIX já está em uso (excluindo a atual)\n        const pixExists = await this.infoBancariaRepository.existsByChavePix(\n          updateInfoBancariaDto.chave_pix,\n          id,\n        );\n        if (pixExists) {\n          throw new ConflictException('Chave PIX já está em uso');\n        }\n      }\n\n      // Valida dados específicos do Banco do Brasil se aplicável\n      if (updateInfoBancariaDto.banco === '001') {\n        this.validateBancoBrasil(updateInfoBancariaDto);\n      }\n\n      const dadosNormalizados = normalizeEnumFields(updateInfoBancariaDto);\n      const updatedInfo = await this.infoBancariaRepository.update(\n        id,\n        dadosNormalizados,\n      );\n      if (!updatedInfo) {\n        throw new NotFoundException(\n          'Informação bancária não encontrada após atualização',\n        );\n      }\n\n      this.logger.log(`Informação bancária ${id} atualizada com sucesso`);\n      return this.mapToResponseDto(updatedInfo);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar informação bancária ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro interno ao atualizar informação bancária',\n      );\n    }\n  }\n\n  /**\n   * Remove informação bancária (soft delete)\n   * @param id ID da informação bancária\n   */\n  async remove(id: string): Promise<void> {\n    try {\n      this.logger.log(`Removendo informação bancária ${id}`);\n\n      const exists = await this.infoBancariaRepository.findById(id);\n      if (!exists) {\n        throw new NotFoundException('Informação bancária não encontrada');\n      }\n\n      const removed = await this.infoBancariaRepository.remove(id);\n      if (!removed) {\n        throw new InternalServerErrorException(\n          'Falha ao remover informação bancária',\n        );\n      }\n\n      this.logger.log(`Informação bancária ${id} removida com sucesso`);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao remover informação bancária ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro interno ao remover informação bancária',\n      );\n    }\n  }\n\n  /**\n   * Desativa informação bancária\n   * @param id ID da informação bancária\n   * @returns Informação bancária desativada\n   */\n  async deactivate(id: string): Promise<InfoBancariaResponseDto> {\n    try {\n      this.logger.log(`Desativando informação bancária ${id}`);\n\n      const deactivated = await this.infoBancariaRepository.deactivate(id);\n      if (!deactivated) {\n        throw new NotFoundException('Informação bancária não encontrada');\n      }\n\n      this.logger.log(`Informação bancária ${id} desativada com sucesso`);\n      return this.mapToResponseDto(deactivated);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao desativar informação bancária ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro interno ao desativar informação bancária',\n      );\n    }\n  }\n\n  /**\n   * Valida chave PIX\n   * @param chavePix Chave PIX\n   * @param tipoChave Tipo da chave PIX\n   */\n  private async validateChavePix(\n    chavePix: string,\n    tipoChave?: TipoChavePix,\n  ): Promise<void> {\n    if (!tipoChave) {\n      throw new BadRequestException(\n        'Tipo de chave PIX é obrigatório quando chave PIX é fornecida',\n      );\n    }\n\n    switch (tipoChave) {\n      case TipoChavePix.CPF:\n        if (!/^\\d{11}$/.test(chavePix)) {\n          throw new BadRequestException('Chave PIX CPF deve conter 11 dígitos');\n        }\n        break;\n      case TipoChavePix.CNPJ:\n        if (!/^\\d{14}$/.test(chavePix)) {\n          throw new BadRequestException(\n            'Chave PIX CNPJ deve conter 14 dígitos',\n          );\n        }\n        break;\n      case TipoChavePix.EMAIL:\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(chavePix)) {\n          throw new BadRequestException(\n            'Chave PIX email deve ter formato válido',\n          );\n        }\n        break;\n      case TipoChavePix.TELEFONE:\n        if (!/^\\+?[1-9]\\d{1,14}$/.test(chavePix.replace(/\\D/g, ''))) {\n          throw new BadRequestException(\n            'Chave PIX telefone deve ter formato válido',\n          );\n        }\n        break;\n      case TipoChavePix.ALEATORIA:\n        if (chavePix.length !== 32) {\n          throw new BadRequestException(\n            'Chave PIX aleatória deve ter 32 caracteres',\n          );\n        }\n        break;\n      default:\n        throw new BadRequestException('Tipo de chave PIX inválido');\n    }\n  }\n\n  /**\n   * Valida dados específicos do Banco do Brasil\n   * @param data Dados bancários\n   */\n  private validateBancoBrasil(data: any): void {\n    // Validações específicas para o Banco do Brasil\n    if (\n      data.nome_banco &&\n      !data.nome_banco.toLowerCase().includes('banco do brasil')\n    ) {\n      throw new BadRequestException(\n        'Nome do banco inconsistente com código 001 (Banco do Brasil)',\n      );\n    }\n\n    // Validação de agência do BB (formato específico)\n    if (data.agencia && !/^\\d{4}(-\\d)?$/.test(data.agencia)) {\n      throw new BadRequestException(\n        'Formato de agência inválido para Banco do Brasil',\n      );\n    }\n  }\n\n  /**\n   * Mapeia entidade para DTO de resposta\n   * @param infoBancaria Entidade de informação bancária\n   * @returns DTO de resposta\n   */\n  private mapToResponseDto(\n    infoBancaria: InfoBancaria,\n  ): InfoBancariaResponseDto {\n    return {\n      id: infoBancaria.id,\n      cidadao_id: infoBancaria.cidadao_id,\n      banco: infoBancaria.banco,\n      nome_banco: infoBancaria.nome_banco,\n      agencia: infoBancaria.agencia,\n      conta: infoBancaria.conta,\n      tipo_conta: infoBancaria.tipo_conta,\n      chave_pix: infoBancaria.chave_pix,\n      tipo_chave_pix: infoBancaria.tipo_chave_pix,\n      ativo: infoBancaria.ativo,\n      observacoes: infoBancaria.observacoes,\n      created_at: infoBancaria.created_at,\n      updated_at: infoBancaria.updated_at,\n    };\n  }\n}\n"],"version":3}