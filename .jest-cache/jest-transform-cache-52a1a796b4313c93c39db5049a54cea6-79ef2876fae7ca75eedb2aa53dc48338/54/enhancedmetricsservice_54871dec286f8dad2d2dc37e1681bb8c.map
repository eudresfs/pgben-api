{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\enhanced-metrics.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\enhanced-metrics.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport * as client from 'prom-client';\n\n/**\n * Serviço de Métricas Aprimorado\n *\n * Responsável por coletar e expor métricas avançadas da aplicação\n * utilizando o Prometheus Client, com foco em segurança e compliance LGPD\n */\n@Injectable()\nexport class EnhancedMetricsService {\n  private readonly register: client.Registry;\n\n  // Métricas HTTP\n  private httpRequestsTotal!: client.Counter;\n  private httpRequestDuration!: client.Histogram;\n  private httpRequestsInProgress!: client.Gauge;\n\n  // Métricas de Banco de Dados\n  private databaseQueriesTotal!: client.Counter;\n  private databaseQueryDuration!: client.Histogram;\n  private databaseConnectionsActive!: client.Gauge;\n\n  // Métricas de Cache/Redis\n  private cacheOperationsTotal!: client.Counter;\n  private cacheHitRatio!: client.Gauge;\n  private cacheSize!: client.Gauge;\n  private cacheOperationDuration!: client.Histogram;\n\n  // Métricas de Segurança e Compliance\n  private securityEventsTotal!: client.Counter;\n  private lgpdDataAccessTotal!: client.Counter;\n  private authenticationAttemptsTotal!: client.Counter;\n  private authorizationFailuresTotal!: client.Counter;\n\n  // Métricas de Documentos\n  private documentOperationsTotal!: client.Counter;\n  private documentStorageBytes!: client.Gauge;\n  private documentUploadDuration!: client.Histogram;\n  private documentDownloadDuration!: client.Histogram;\n\n  // Métricas de Sistema\n  private systemMemoryUsage!: client.Gauge;\n  private systemCpuUsage!: client.Gauge;\n\n  constructor() {\n    // Criar registro de métricas\n    this.register = new client.Registry();\n\n    // Adicionar métricas padrão do Node.js\n    client.collectDefaultMetrics({ register: this.register });\n\n    // Inicializar métricas HTTP\n    this.initHttpMetrics();\n\n    // Inicializar métricas de banco de dados\n    this.initDatabaseMetrics();\n\n    // Inicializar métricas de cache/Redis\n    this.initCacheMetrics();\n\n    // Inicializar métricas de segurança e compliance\n    this.initSecurityMetrics();\n\n    // Inicializar métricas de documentos\n    this.initDocumentMetrics();\n\n    // Inicializar métricas de sistema\n    this.initSystemMetrics();\n  }\n\n  /**\n   * Inicializa métricas relacionadas a requisições HTTP\n   */\n  private initHttpMetrics(): void {\n    // Contador de requisições HTTP\n    this.httpRequestsTotal = new client.Counter({\n      name: 'http_requests_total',\n      help: 'Total de requisições HTTP',\n      labelNames: ['method', 'route', 'status_code', 'user_role'],\n      registers: [this.register],\n    });\n\n    // Histograma de duração das requisições HTTP\n    this.httpRequestDuration = new client.Histogram({\n      name: 'http_request_duration_seconds',\n      help: 'Duração das requisições HTTP em segundos',\n      labelNames: ['method', 'route', 'status_code', 'user_role'],\n      buckets: [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],\n      registers: [this.register],\n    });\n\n    // Gauge de requisições em andamento\n    this.httpRequestsInProgress = new client.Gauge({\n      name: 'http_requests_in_progress',\n      help: 'Número de requisições HTTP em andamento',\n      labelNames: ['method', 'route', 'user_role'],\n      registers: [this.register],\n    });\n  }\n\n  /**\n   * Inicializa métricas relacionadas ao banco de dados\n   */\n  private initDatabaseMetrics(): void {\n    // Contador de consultas ao banco de dados\n    this.databaseQueriesTotal = new client.Counter({\n      name: 'database_queries_total',\n      help: 'Total de consultas ao banco de dados',\n      labelNames: ['entity', 'operation', 'success'],\n      registers: [this.register],\n    });\n\n    // Histograma de duração das consultas ao banco de dados\n    this.databaseQueryDuration = new client.Histogram({\n      name: 'database_query_duration_seconds',\n      help: 'Duração das consultas ao banco de dados em segundos',\n      labelNames: ['entity', 'operation'],\n      buckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1],\n      registers: [this.register],\n    });\n\n    // Gauge de conexões ativas com o banco de dados\n    this.databaseConnectionsActive = new client.Gauge({\n      name: 'database_connections_active',\n      help: 'Número de conexões ativas com o banco de dados',\n      registers: [this.register],\n    });\n  }\n\n  /**\n   * Inicializa métricas relacionadas ao cache distribuído (Redis)\n   */\n  private initCacheMetrics(): void {\n    // Contador de operações de cache\n    this.cacheOperationsTotal = new client.Counter({\n      name: 'cache_operations_total',\n      help: 'Total de operações de cache',\n      labelNames: ['operation', 'success', 'cache_type'],\n      registers: [this.register],\n    });\n\n    // Gauge de taxa de acertos do cache\n    this.cacheHitRatio = new client.Gauge({\n      name: 'cache_hit_ratio',\n      help: 'Taxa de acertos do cache (0-1)',\n      labelNames: ['cache_type'],\n      registers: [this.register],\n    });\n\n    // Gauge de tamanho do cache\n    this.cacheSize = new client.Gauge({\n      name: 'cache_size_bytes',\n      help: 'Tamanho do cache em bytes',\n      labelNames: ['cache_type'],\n      registers: [this.register],\n    });\n\n    // Histograma de duração das operações de cache\n    this.cacheOperationDuration = new client.Histogram({\n      name: 'cache_operation_duration_seconds',\n      help: 'Duração das operações de cache em segundos',\n      labelNames: ['operation', 'cache_type'],\n      buckets: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1],\n      registers: [this.register],\n    });\n  }\n\n  /**\n   * Inicializa métricas relacionadas à segurança e compliance LGPD\n   */\n  private initSecurityMetrics(): void {\n    // Contador de eventos de segurança\n    this.securityEventsTotal = new client.Counter({\n      name: 'security_events_total',\n      help: 'Total de eventos de segurança',\n      labelNames: ['type', 'severity', 'source'],\n      registers: [this.register],\n    });\n\n    // Contador de acessos a dados protegidos pela LGPD\n    this.lgpdDataAccessTotal = new client.Counter({\n      name: 'lgpd_data_access_total',\n      help: 'Total de acessos a dados protegidos pela LGPD',\n      labelNames: ['data_type', 'operation', 'authorized', 'user_role'],\n      registers: [this.register],\n    });\n\n    // Contador de tentativas de autenticação\n    this.authenticationAttemptsTotal = new client.Counter({\n      name: 'authentication_attempts_total',\n      help: 'Total de tentativas de autenticação',\n      labelNames: ['success', 'method', 'ip_address'],\n      registers: [this.register],\n    });\n\n    // Contador de falhas de autorização\n    this.authorizationFailuresTotal = new client.Counter({\n      name: 'authorization_failures_total',\n      help: 'Total de falhas de autorização',\n      labelNames: ['resource', 'required_role', 'user_role'],\n      registers: [this.register],\n    });\n  }\n\n  /**\n   * Inicializa métricas relacionadas a operações com documentos\n   */\n  private initDocumentMetrics(): void {\n    // Contador de operações com documentos\n    this.documentOperationsTotal = new client.Counter({\n      name: 'document_operations_total',\n      help: 'Total de operações com documentos',\n      labelNames: ['operation', 'document_type', 'sensitive', 'encrypted'],\n      registers: [this.register],\n    });\n\n    // Gauge de armazenamento de documentos\n    this.documentStorageBytes = new client.Gauge({\n      name: 'document_storage_bytes',\n      help: 'Armazenamento total de documentos em bytes',\n      labelNames: ['document_type', 'sensitive'],\n      registers: [this.register],\n    });\n\n    // Histograma de duração de upload de documentos\n    this.documentUploadDuration = new client.Histogram({\n      name: 'document_upload_duration_seconds',\n      help: 'Duração do upload de documentos em segundos',\n      labelNames: ['document_type', 'sensitive', 'encrypted'],\n      buckets: [0.1, 0.5, 1, 2, 5, 10, 30],\n      registers: [this.register],\n    });\n\n    // Histograma de duração de download de documentos\n    this.documentDownloadDuration = new client.Histogram({\n      name: 'document_download_duration_seconds',\n      help: 'Duração do download de documentos em segundos',\n      labelNames: ['document_type', 'sensitive', 'encrypted'],\n      buckets: [0.1, 0.5, 1, 2, 5, 10, 30],\n      registers: [this.register],\n    });\n  }\n\n  /**\n   * Inicializa métricas relacionadas ao sistema\n   */\n  private initSystemMetrics(): void {\n    // Gauge de uso de memória\n    this.systemMemoryUsage = new client.Gauge({\n      name: 'system_memory_usage_bytes',\n      help: 'Uso de memória do sistema em bytes',\n      labelNames: ['type'],\n      registers: [this.register],\n    });\n\n    // Gauge de uso de CPU\n    this.systemCpuUsage = new client.Gauge({\n      name: 'system_cpu_usage_percent',\n      help: 'Uso de CPU do sistema em porcentagem',\n      registers: [this.register],\n    });\n  }\n\n  /**\n   * Incrementa o contador de requisições HTTP\n   */\n  recordHttpRequest(\n    method: string,\n    route: string,\n    statusCode: number,\n    userRole: string = 'anonymous',\n  ): void {\n    this.httpRequestsTotal.inc({\n      method,\n      route,\n      status_code: statusCode.toString(),\n      user_role: userRole,\n    });\n  }\n\n  /**\n   * Registra a duração de uma requisição HTTP\n   */\n  recordHttpRequestDuration(\n    method: string,\n    route: string,\n    statusCode: number,\n    durationSeconds: number,\n    userRole: string = 'anonymous',\n  ): void {\n    this.httpRequestDuration.observe(\n      {\n        method,\n        route,\n        status_code: statusCode.toString(),\n        user_role: userRole,\n      },\n      durationSeconds,\n    );\n  }\n\n  /**\n   * Incrementa o contador de requisições HTTP em andamento\n   */\n  incrementHttpRequestsInProgress(\n    method: string,\n    route: string,\n    userRole: string = 'anonymous',\n  ): void {\n    this.httpRequestsInProgress.inc({ method, route, user_role: userRole });\n  }\n\n  /**\n   * Decrementa o contador de requisições HTTP em andamento\n   */\n  decrementHttpRequestsInProgress(\n    method: string,\n    route: string,\n    userRole: string = 'anonymous',\n  ): void {\n    this.httpRequestsInProgress.dec({ method, route, user_role: userRole });\n  }\n\n  /**\n   * Incrementa o contador de consultas ao banco de dados\n   */\n  recordDatabaseQuery(\n    entity: string,\n    operation: string,\n    success: boolean = true,\n  ): void {\n    this.databaseQueriesTotal.inc({\n      entity,\n      operation,\n      success: success.toString(),\n    });\n  }\n\n  /**\n   * Registra a duração de uma consulta ao banco de dados\n   */\n  recordDatabaseQueryDuration(\n    entity: string,\n    operation: string,\n    durationSeconds: number,\n  ): void {\n    this.databaseQueryDuration.observe({ entity, operation }, durationSeconds);\n  }\n\n  /**\n   * Atualiza o número de conexões ativas com o banco de dados\n   */\n  setDatabaseConnectionsActive(connections: number): void {\n    this.databaseConnectionsActive.set(connections);\n  }\n\n  /**\n   * Registra um evento de segurança\n   */\n  recordSecurityEvent(type: string, severity: string, source: string): void {\n    this.securityEventsTotal.inc({ type, severity, source });\n  }\n\n  /**\n   * Registra um acesso a dados protegidos pela LGPD\n   */\n  recordLgpdDataAccess(\n    dataType: string,\n    operation: string,\n    authorized: boolean = true,\n    userRole: string = 'anonymous',\n  ): void {\n    this.lgpdDataAccessTotal.inc({\n      data_type: dataType,\n      operation,\n      authorized: authorized.toString(),\n      user_role: userRole,\n    });\n  }\n\n  /**\n   * Registra uma tentativa de autenticação\n   */\n  recordAuthenticationAttempt(\n    success: boolean,\n    method: string,\n    ipAddress: string,\n  ): void {\n    this.authenticationAttemptsTotal.inc({\n      success: success.toString(),\n      method,\n      ip_address: ipAddress,\n    });\n  }\n\n  /**\n   * Registra uma falha de autorização\n   */\n  recordAuthorizationFailure(\n    resource: string,\n    requiredRole: string,\n    userRole: string,\n  ): void {\n    this.authorizationFailuresTotal.inc({\n      resource,\n      required_role: requiredRole,\n      user_role: userRole,\n    });\n  }\n\n  /**\n   * Registra uma operação com documento\n   */\n  recordDocumentOperation(\n    operation: string,\n    documentType: string,\n    sensitive: boolean = false,\n    encrypted: boolean = false,\n  ): void {\n    this.documentOperationsTotal.inc({\n      operation,\n      document_type: documentType,\n      sensitive: sensitive.toString(),\n      encrypted: encrypted.toString(),\n    });\n  }\n\n  /**\n   * Atualiza o tamanho total de armazenamento de documentos\n   */\n  setDocumentStorageBytes(\n    bytes: number,\n    documentType: string,\n    sensitive: boolean = false,\n  ): void {\n    this.documentStorageBytes.set(\n      { document_type: documentType, sensitive: sensitive.toString() },\n      bytes,\n    );\n  }\n\n  /**\n   * Registra a duração de um upload de documento\n   */\n  recordDocumentUploadDuration(\n    documentType: string,\n    sensitive: boolean,\n    encrypted: boolean,\n    durationSeconds: number,\n  ): void {\n    this.documentUploadDuration.observe(\n      {\n        document_type: documentType,\n        sensitive: sensitive.toString(),\n        encrypted: encrypted.toString(),\n      },\n      durationSeconds,\n    );\n  }\n\n  /**\n   * Registra a duração de um download de documento\n   */\n  recordDocumentDownloadDuration(\n    documentType: string,\n    sensitive: boolean,\n    encrypted: boolean,\n    durationSeconds: number,\n  ): void {\n    this.documentDownloadDuration.observe(\n      {\n        document_type: documentType,\n        sensitive: sensitive.toString(),\n        encrypted: encrypted.toString(),\n      },\n      durationSeconds,\n    );\n  }\n\n  /**\n   * Atualiza as métricas de uso de memória\n   */\n  updateMemoryUsage(): void {\n    const memoryUsage = process.memoryUsage();\n    this.systemMemoryUsage.set({ type: 'rss' }, memoryUsage.rss);\n    this.systemMemoryUsage.set({ type: 'heapTotal' }, memoryUsage.heapTotal);\n    this.systemMemoryUsage.set({ type: 'heapUsed' }, memoryUsage.heapUsed);\n    this.systemMemoryUsage.set({ type: 'external' }, memoryUsage.external);\n\n    if (memoryUsage.arrayBuffers) {\n      this.systemMemoryUsage.set(\n        { type: 'arrayBuffers' },\n        memoryUsage.arrayBuffers,\n      );\n    }\n  }\n\n  /**\n   * Atualiza a métrica de uso de CPU\n   */\n  updateCpuUsage(cpuPercent: number): void {\n    this.systemCpuUsage.set(cpuPercent);\n  }\n\n  /**\n   * Registra uma operação de cache\n   */\n  recordCacheOperation(\n    operation: string,\n    success: boolean,\n    cacheType: string = 'redis',\n  ): void {\n    this.cacheOperationsTotal.inc({\n      operation,\n      success: success.toString(),\n      cache_type: cacheType,\n    });\n  }\n\n  /**\n   * Registra a duração de uma operação de cache\n   */\n  recordCacheOperationDuration(\n    operation: string,\n    durationSeconds: number,\n    cacheType: string = 'redis',\n  ): void {\n    this.cacheOperationDuration.observe(\n      { operation, cache_type: cacheType },\n      durationSeconds,\n    );\n  }\n\n  /**\n   * Atualiza a taxa de acertos do cache\n   */\n  updateCacheHitRatio(ratio: number, cacheType: string = 'redis'): void {\n    this.cacheHitRatio.set({ cache_type: cacheType }, ratio);\n  }\n\n  /**\n   * Atualiza o tamanho do cache\n   */\n  updateCacheSize(sizeBytes: number, cacheType: string = 'redis'): void {\n    this.cacheSize.set({ cache_type: cacheType }, sizeBytes);\n  }\n\n  /**\n   * Registra falhas de cache\n   * @param count Número de falhas\n   * @param cacheType Tipo de cache (redis, memory, etc)\n   */\n  recordCacheFailures(count: number, cacheType: string = 'redis'): void {\n    // Registramos cada falha como uma operação de cache mal-sucedida\n    for (let i = 0; i < count; i++) {\n      this.recordCacheOperation('failure', false, cacheType);\n    }\n  }\n\n  /**\n   * Registra tentativas de recuperação do circuit breaker\n   * @param count Número de tentativas\n   * @param cacheType Tipo de cache (redis, memory, etc)\n   */\n  recordCacheRecoveryAttempts(\n    count: number,\n    cacheType: string = 'redis',\n  ): void {\n    // Registramos cada tentativa como uma operação de recovery\n    for (let i = 0; i < count; i++) {\n      this.recordCacheOperation('recovery', true, cacheType);\n    }\n  }\n\n  /**\n   * Registra o tempo de resposta de uma operação de cache\n   * @param durationMs Tempo em milissegundos\n   * @param key Chave do cache\n   * @param cacheType Tipo de cache (redis, memory, etc)\n   */\n  recordCacheResponseTime(\n    durationMs: number,\n    key: string,\n    cacheType: string = 'redis',\n  ): void {\n    // Convertemos de milissegundos para segundos para manter a convenção do Prometheus\n    const durationSeconds = durationMs / 1000;\n    this.recordCacheOperationDuration('get', durationSeconds, cacheType);\n  }\n\n  /**\n   * Retorna todas as métricas no formato do Prometheus\n   */\n  async getMetrics(): Promise<string> {\n    // Atualizar métricas de sistema antes de retornar\n    this.updateMemoryUsage();\n\n    return this.register.metrics();\n  }\n\n  /**\n   * Retorna o registro de métricas\n   */\n  getRegister(): client.Registry {\n    return this.register;\n  }\n}\n"],"version":3}