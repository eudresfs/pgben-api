{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\papel-cidadao.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\papel-cidadao.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository, DataSource } from 'typeorm';\nimport {\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { PapelCidadaoService } from '@modules/cidadao/services/papel-cidadao.service';\nimport { CidadaoService } from '@modules/cidadao/services/cidadao.service';\nimport { VerificacaoPapelService } from '@modules/cidadao/services/verificacao-papel.service';\nimport { PapelCidadao } from '@modules/cidadao/entities/papel-cidadao.entity';\nimport { TipoPapel } from '@modules/cidadao/enums/tipo-papel.enum';\nimport { CreatePapelCidadaoDto } from '@modules/cidadao/dto/create-papel-cidadao.dto';\nimport { CidadaoResponseDto } from '@modules/cidadao/dto/cidadao-response.dto';\n\ndescribe('PapelCidadaoService', () => {\n  let service: PapelCidadaoService;\n  let repository: Repository<PapelCidadao>;\n  let cidadaoService: CidadaoService;\n  let verificacaoPapelService: VerificacaoPapelService;\n  let dataSource: DataSource;\n\n  const mockRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    update: jest.fn(),\n  };\n\n  const mockCidadaoService = {\n    findById: jest.fn(),\n  };\n\n  const mockVerificacaoPapelService = {\n    verificarConflitoPapeis: jest.fn(),\n  };\n\n  const mockQueryRunner = {\n    connect: jest.fn(),\n    startTransaction: jest.fn(),\n    commitTransaction: jest.fn(),\n    rollbackTransaction: jest.fn(),\n    release: jest.fn(),\n    manager: {\n      create: jest.fn(),\n      save: jest.fn(),\n      findOne: jest.fn(),\n    },\n  };\n\n  const mockDataSource = {\n    createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),\n    transaction: jest.fn(),\n  };\n\n  const mockCidadaoResponse: CidadaoResponseDto = {\n    id: '550e8400-e29b-41d4-a716-446655440000',\n    nome: 'João da Silva',\n    cpf: '12345678901',\n    email: 'joao@example.com',\n  } as CidadaoResponseDto;\n\n  const mockPapelCidadao: PapelCidadao = {\n    id: '660e8400-e29b-41d4-a716-446655440000',\n    cidadao_id: '550e8400-e29b-41d4-a716-446655440000',\n    tipo_papel: TipoPapel.BENEFICIARIO,\n    ativo: true,\n    metadados: {},\n    created_at: new Date(),\n    updated_at: new Date(),\n  } as PapelCidadao;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PapelCidadaoService,\n        {\n          provide: getRepositoryToken(PapelCidadao),\n          useValue: mockRepository,\n        },\n        {\n          provide: CidadaoService,\n          useValue: mockCidadaoService,\n        },\n        {\n          provide: VerificacaoPapelService,\n          useValue: mockVerificacaoPapelService,\n        },\n        {\n          provide: DataSource,\n          useValue: mockDataSource,\n        },\n      ],\n    }).compile();\n\n    service = module.get<PapelCidadaoService>(PapelCidadaoService);\n    repository = module.get<Repository<PapelCidadao>>(\n      getRepositoryToken(PapelCidadao),\n    );\n    cidadaoService = module.get<CidadaoService>(CidadaoService);\n    verificacaoPapelService = module.get<VerificacaoPapelService>(\n      VerificacaoPapelService,\n    );\n    dataSource = module.get<DataSource>(DataSource);\n\n    jest.clearAllMocks();\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('create', () => {\n    const createPapelDto: CreatePapelCidadaoDto = {\n      cidadao_id: '550e8400-e29b-41d4-a716-446655440000',\n      tipo_papel: TipoPapel.BENEFICIARIO,\n      metadados: {},\n    };\n\n    it('deve criar um papel com sucesso', async () => {\n      // Mock para verificação de cidadão existente\n      mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);\n      // Mock para verificação inicial de papel existente\n      mockRepository.findOne.mockResolvedValue(null);\n\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn().mockResolvedValue(mockCidadaoResponse), // Cidadão encontrado na transação\n          create: jest.fn().mockReturnValue(mockPapelCidadao),\n          save: jest.fn().mockResolvedValue(mockPapelCidadao),\n        };\n        return callback(manager);\n      });\n\n      const result = await service.create(createPapelDto);\n\n      expect(mockCidadaoService.findById).toHaveBeenCalledWith(\n        createPapelDto.cidadao_id,\n        false,\n      );\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: {\n          cidadao_id: createPapelDto.cidadao_id,\n          tipo_papel: createPapelDto.tipo_papel,\n          ativo: true,\n        },\n      });\n      expect(result).toEqual(mockPapelCidadao);\n    });\n\n    it('deve lançar NotFoundException quando cidadão não existir', async () => {\n      mockCidadaoService.findById.mockResolvedValue(null);\n\n      await expect(service.create(createPapelDto)).rejects.toThrow(\n        NotFoundException,\n      );\n\n      expect(mockCidadaoService.findById).toHaveBeenCalledWith(\n        createPapelDto.cidadao_id,\n        false,\n      );\n    });\n\n    it('deve lançar ConflictException quando cidadão já possuir o papel', async () => {\n      // Mock para verificação de cidadão existente\n      mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);\n      // Mock para verificação inicial de papel existente - retorna papel existente\n      mockRepository.findOne.mockResolvedValue(mockPapelCidadao);\n\n      await expect(service.create(createPapelDto)).rejects.toThrow(\n        ConflictException,\n      );\n\n      expect(mockCidadaoService.findById).toHaveBeenCalledWith(\n        createPapelDto.cidadao_id,\n        false,\n      );\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: {\n          cidadao_id: createPapelDto.cidadao_id,\n          tipo_papel: createPapelDto.tipo_papel,\n          ativo: true,\n        },\n      });\n    });\n\n    it('deve lançar NotFoundException quando cidadão não existir na transação', async () => {\n      // Mock para verificação inicial de papel existente\n      mockRepository.findOne.mockResolvedValue(null);\n\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn().mockResolvedValue(null), // Cidadão não encontrado na transação\n          create: jest.fn(),\n          save: jest.fn(),\n        };\n        return callback(manager);\n      });\n\n      await expect(service.create(createPapelDto)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('createMany', () => {\n    const cidadaoId = '550e8400-e29b-41d4-a716-446655440000';\n    const papeis = [\n      {\n        tipo_papel: TipoPapel.BENEFICIARIO,\n        metadados: {},\n      },\n      {\n        tipo_papel: TipoPapel.MEMBRO_COMPOSICAO,\n        metadados: {},\n      },\n    ];\n\n    it('deve criar múltiplos papéis com sucesso', async () => {\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest\n            .fn()\n            .mockResolvedValueOnce(null) // Primeiro papel não existe\n            .mockResolvedValueOnce(mockCidadaoResponse) // Cidadão encontrado para verificação de conflitos do primeiro papel\n            .mockResolvedValueOnce(null) // Segundo papel não existe\n            .mockResolvedValueOnce(mockCidadaoResponse), // Cidadão encontrado para verificação de conflitos do segundo papel\n          create: jest.fn().mockReturnValue([mockPapelCidadao]),\n          save: jest.fn().mockResolvedValue([mockPapelCidadao]),\n        };\n        return callback(manager);\n      });\n\n      mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);\n      mockVerificacaoPapelService.verificarConflitoPapeis.mockResolvedValue({\n        temConflito: false,\n        detalhes: '',\n      });\n\n      const result = await service.createMany(cidadaoId, papeis);\n\n      expect(mockCidadaoService.findById).toHaveBeenCalledWith(\n        cidadaoId,\n        false,\n      );\n      expect(result).toEqual([mockPapelCidadao]);\n    });\n\n    it('deve lançar BadRequestException quando lista estiver vazia', async () => {\n      await expect(service.createMany(cidadaoId, [])).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar BadRequestException quando houver papéis duplicados', async () => {\n      const papeisDuplicados = [\n        {\n          tipo_papel: TipoPapel.BENEFICIARIO,\n          metadados: {},\n        },\n        {\n          tipo_papel: TipoPapel.BENEFICIARIO,\n          metadados: {},\n        },\n      ];\n\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn(),\n          create: jest.fn(),\n          save: jest.fn(),\n        };\n        return callback(manager);\n      });\n\n      mockCidadaoService.findById.mockResolvedValue(mockCidadaoResponse);\n\n      await expect(\n        service.createMany(cidadaoId, papeisDuplicados),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve lançar NotFoundException quando cidadão não existir', async () => {\n      mockDataSource.transaction.mockImplementation(async (callback) => {\n        const manager = {\n          findOne: jest.fn(),\n          create: jest.fn(),\n          save: jest.fn(),\n        };\n        return callback(manager);\n      });\n\n      mockCidadaoService.findById.mockResolvedValue(null);\n\n      await expect(service.createMany(cidadaoId, papeis)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('findByCidadaoId', () => {\n    it('deve retornar papéis do cidadão', async () => {\n      const papeis = [mockPapelCidadao];\n      mockRepository.find.mockResolvedValue(papeis);\n\n      const result = await service.findByCidadaoId(\n        '550e8400-e29b-41d4-a716-446655440000',\n      );\n\n      expect(mockRepository.find).toHaveBeenCalledWith({\n        where: {\n          cidadao_id: '550e8400-e29b-41d4-a716-446655440000',\n          ativo: true,\n        },\n      });\n      expect(result).toEqual(papeis);\n    });\n\n    it('deve filtrar por status ativo quando especificado', async () => {\n      const papeis = [mockPapelCidadao];\n      mockRepository.find.mockResolvedValue(papeis);\n\n      const result = await service.findByCidadaoId(\n        '550e8400-e29b-41d4-a716-446655440000',\n      );\n\n      expect(mockRepository.find).toHaveBeenCalledWith({\n        where: {\n          cidadao_id: '550e8400-e29b-41d4-a716-446655440000',\n          ativo: true,\n        },\n      });\n      expect(result).toEqual(papeis);\n    });\n  });\n\n  describe('verificarPapel', () => {\n    it('deve retornar true quando cidadão possuir o papel ativo', async () => {\n      mockRepository.findOne.mockResolvedValue(mockPapelCidadao);\n\n      const result = await service.verificarPapel(\n        '550e8400-e29b-41d4-a716-446655440000',\n        TipoPapel.BENEFICIARIO,\n      );\n\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: {\n          cidadao_id: '550e8400-e29b-41d4-a716-446655440000',\n          tipo_papel: TipoPapel.BENEFICIARIO,\n          ativo: true,\n        },\n      });\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando cidadão não possuir o papel', async () => {\n      mockRepository.findOne.mockResolvedValue(null);\n\n      const result = await service.verificarPapel(\n        '550e8400-e29b-41d4-a716-446655440000',\n        TipoPapel.BENEFICIARIO,\n      );\n\n      expect(result).toBe(false);\n    });\n  });\n});\n"],"version":3}