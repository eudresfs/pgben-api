7621a87291b5ef42817e6ffafdd38f1f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosCestaBasicaService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const dados_cesta_basica_entity_1 = require("../../../entities/dados-cesta-basica.entity");
/**
 * Serviço para gerenciar dados específicos de Cesta Básica
 */
let DadosCestaBasicaService = class DadosCestaBasicaService {
    dadosCestaBasicaRepository;
    constructor(dadosCestaBasicaRepository) {
        this.dadosCestaBasicaRepository = dadosCestaBasicaRepository;
    }
    /**
     * Criar dados de cesta básica para uma solicitação
     */
    async create(createDto) {
        // Verificar se já existem dados para esta solicitação
        const existingData = await this.dadosCestaBasicaRepository.findOne({
            where: { solicitacao_id: createDto.solicitacao_id },
        });
        if (existingData) {
            throw new Error('Já existem dados de cesta básica para esta solicitação');
        }
        const dadosCestaBasica = this.dadosCestaBasicaRepository.create(createDto);
        return this.dadosCestaBasicaRepository.save(dadosCestaBasica);
    }
    /**
     * Buscar dados de cesta básica por ID
     */
    async findOne(id) {
        const dadosCestaBasica = await this.dadosCestaBasicaRepository.findOne({
            where: { id },
            relations: ['solicitacao'],
        });
        if (!dadosCestaBasica) {
            throw new common_1.NotFoundException('Dados de cesta básica não encontrados');
        }
        return dadosCestaBasica;
    }
    /**
     * Buscar dados de cesta básica por solicitação
     */
    async findBySolicitacao(solicitacaoId) {
        const dadosCestaBasica = await this.dadosCestaBasicaRepository.findOne({
            where: { solicitacao_id: solicitacaoId },
            relations: ['solicitacao'],
        });
        if (!dadosCestaBasica) {
            throw new common_1.NotFoundException('Dados de cesta básica não encontrados para esta solicitação');
        }
        return dadosCestaBasica;
    }
    /**
     * Atualizar dados de cesta básica
     */
    async update(id, updateDto) {
        const dadosCestaBasica = await this.findOne(id);
        // Atualizar apenas os campos fornecidos
        Object.assign(dadosCestaBasica, updateDto);
        return this.dadosCestaBasicaRepository.save(dadosCestaBasica);
    }
    /**
     * Remover dados de cesta básica
     */
    async remove(id) {
        const dadosCestaBasica = await this.findOne(id);
        await this.dadosCestaBasicaRepository.remove(dadosCestaBasica);
    }
    /**
     * Verificar se existem dados de cesta básica para uma solicitação
     */
    async existsBySolicitacao(solicitacaoId) {
        const count = await this.dadosCestaBasicaRepository.count({
            where: { solicitacao_id: solicitacaoId },
        });
        return count > 0;
    }
    /**
     * Buscar todos os dados de cesta básica com paginação
     */
    async findAll(page = 1, limit = 10) {
        const [data, total] = await this.dadosCestaBasicaRepository.findAndCount({
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
    /**
     * Buscar dados por período de concessão
     */
    async findByPeriodoConcessao(periodoConcessao, page = 1, limit = 10) {
        const [data, total] = await this.dadosCestaBasicaRepository.findAndCount({
            where: { periodo_concessao: periodoConcessao },
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
    /**
     * Buscar dados por origem do atendimento
     */
    async findByOrigemAtendimento(origemAtendimento, page = 1, limit = 10) {
        const [data, total] = await this.dadosCestaBasicaRepository.findAndCount({
            where: { origem_atendimento: origemAtendimento },
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
    /**
     * Buscar estatísticas de cestas básicas
     */
    async getEstatisticas() {
        const totalSolicitacoes = await this.dadosCestaBasicaRepository.count();
        const totalCestasResult = await this.dadosCestaBasicaRepository
            .createQueryBuilder('dados')
            .select('SUM(dados.quantidade_cestas_solicitadas)', 'total')
            .getRawOne();
        const totalCestas = parseInt(totalCestasResult.total) || 0;
        // Estatísticas por período
        const porPeriodoResult = await this.dadosCestaBasicaRepository
            .createQueryBuilder('dados')
            .select('dados.periodo_concessao', 'periodo')
            .addSelect('COUNT(*)', 'quantidade')
            .groupBy('dados.periodo_concessao')
            .getRawMany();
        const porPeriodo = porPeriodoResult.reduce((acc, item) => {
            acc[item.periodo] = parseInt(item.quantidade);
            return acc;
        }, {});
        // Estatísticas por origem
        const porOrigemResult = await this.dadosCestaBasicaRepository
            .createQueryBuilder('dados')
            .select('dados.origem_atendimento', 'origem')
            .addSelect('COUNT(*)', 'quantidade')
            .groupBy('dados.origem_atendimento')
            .getRawMany();
        const porOrigem = porOrigemResult.reduce((acc, item) => {
            acc[item.origem] = parseInt(item.quantidade);
            return acc;
        }, {});
        return {
            totalSolicitacoes,
            totalCestas,
            porPeriodo,
            porOrigem,
        };
    }
};
exports.DadosCestaBasicaService = DadosCestaBasicaService;
exports.DadosCestaBasicaService = DadosCestaBasicaService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(dados_cesta_basica_entity_1.DadosCestaBasica)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], DadosCestaBasicaService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,