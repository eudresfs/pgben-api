{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-cesta-basica.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-cesta-basica.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DadosCestaBasica } from '../../../entities/dados-cesta-basica.entity';\nimport {\n  CreateDadosCestaBasicaDto,\n  UpdateDadosCestaBasicaDto,\n} from '../dto/create-dados-cesta-basica.dto';\n\n/**\n * Serviço para gerenciar dados específicos de Cesta Básica\n */\n@Injectable()\nexport class DadosCestaBasicaService {\n  constructor(\n    @InjectRepository(DadosCestaBasica)\n    private readonly dadosCestaBasicaRepository: Repository<DadosCestaBasica>,\n  ) {}\n\n  /**\n   * Criar dados de cesta básica para uma solicitação\n   */\n  async create(\n    createDto: CreateDadosCestaBasicaDto,\n  ): Promise<DadosCestaBasica> {\n    // Verificar se já existem dados para esta solicitação\n    const existingData = await this.dadosCestaBasicaRepository.findOne({\n      where: { solicitacao_id: createDto.solicitacao_id },\n    });\n\n    if (existingData) {\n      throw new Error('Já existem dados de cesta básica para esta solicitação');\n    }\n\n    const dadosCestaBasica = this.dadosCestaBasicaRepository.create(createDto);\n    return this.dadosCestaBasicaRepository.save(dadosCestaBasica);\n  }\n\n  /**\n   * Buscar dados de cesta básica por ID\n   */\n  async findOne(id: string): Promise<DadosCestaBasica> {\n    const dadosCestaBasica = await this.dadosCestaBasicaRepository.findOne({\n      where: { id },\n      relations: ['solicitacao'],\n    });\n\n    if (!dadosCestaBasica) {\n      throw new NotFoundException('Dados de cesta básica não encontrados');\n    }\n\n    return dadosCestaBasica;\n  }\n\n  /**\n   * Buscar dados de cesta básica por solicitação\n   */\n  async findBySolicitacao(solicitacaoId: string): Promise<DadosCestaBasica> {\n    const dadosCestaBasica = await this.dadosCestaBasicaRepository.findOne({\n      where: { solicitacao_id: solicitacaoId },\n      relations: ['solicitacao'],\n    });\n\n    if (!dadosCestaBasica) {\n      throw new NotFoundException(\n        'Dados de cesta básica não encontrados para esta solicitação',\n      );\n    }\n\n    return dadosCestaBasica;\n  }\n\n  /**\n   * Atualizar dados de cesta básica\n   */\n  async update(\n    id: string,\n    updateDto: UpdateDadosCestaBasicaDto,\n  ): Promise<DadosCestaBasica> {\n    const dadosCestaBasica = await this.findOne(id);\n\n    // Atualizar apenas os campos fornecidos\n    Object.assign(dadosCestaBasica, updateDto);\n\n    return this.dadosCestaBasicaRepository.save(dadosCestaBasica);\n  }\n\n  /**\n   * Remover dados de cesta básica\n   */\n  async remove(id: string): Promise<void> {\n    const dadosCestaBasica = await this.findOne(id);\n    await this.dadosCestaBasicaRepository.remove(dadosCestaBasica);\n  }\n\n  /**\n   * Verificar se existem dados de cesta básica para uma solicitação\n   */\n  async existsBySolicitacao(solicitacaoId: string): Promise<boolean> {\n    const count = await this.dadosCestaBasicaRepository.count({\n      where: { solicitacao_id: solicitacaoId },\n    });\n    return count > 0;\n  }\n\n  /**\n   * Buscar todos os dados de cesta básica com paginação\n   */\n  async findAll(\n    page: number = 1,\n    limit: number = 10,\n  ): Promise<{\n    data: DadosCestaBasica[];\n    total: number;\n    page: number;\n    limit: number;\n  }> {\n    const [data, total] = await this.dadosCestaBasicaRepository.findAndCount({\n      relations: ['solicitacao'],\n      skip: (page - 1) * limit,\n      take: limit,\n      order: { created_at: 'DESC' },\n    });\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n    };\n  }\n\n  /**\n   * Buscar dados por período de concessão\n   */\n  async findByPeriodoConcessao(\n    periodoConcessao: string,\n    page: number = 1,\n    limit: number = 10,\n  ): Promise<{\n    data: DadosCestaBasica[];\n    total: number;\n    page: number;\n    limit: number;\n  }> {\n    const [data, total] = await this.dadosCestaBasicaRepository.findAndCount({\n      where: { periodo_concessao: periodoConcessao as any },\n      relations: ['solicitacao'],\n      skip: (page - 1) * limit,\n      take: limit,\n      order: { created_at: 'DESC' },\n    });\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n    };\n  }\n\n  /**\n   * Buscar dados por origem do atendimento\n   */\n  async findByOrigemAtendimento(\n    origemAtendimento: string,\n    page: number = 1,\n    limit: number = 10,\n  ): Promise<{\n    data: DadosCestaBasica[];\n    total: number;\n    page: number;\n    limit: number;\n  }> {\n    const [data, total] = await this.dadosCestaBasicaRepository.findAndCount({\n      where: { origem_atendimento: origemAtendimento as any },\n      relations: ['solicitacao'],\n      skip: (page - 1) * limit,\n      take: limit,\n      order: { created_at: 'DESC' },\n    });\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n    };\n  }\n\n  /**\n   * Buscar estatísticas de cestas básicas\n   */\n  async getEstatisticas(): Promise<{\n    totalSolicitacoes: number;\n    totalCestas: number;\n    porPeriodo: Record<string, number>;\n    porOrigem: Record<string, number>;\n  }> {\n    const totalSolicitacoes = await this.dadosCestaBasicaRepository.count();\n\n    const totalCestasResult = await this.dadosCestaBasicaRepository\n      .createQueryBuilder('dados')\n      .select('SUM(dados.quantidade_cestas_solicitadas)', 'total')\n      .getRawOne();\n\n    const totalCestas = parseInt(totalCestasResult.total) || 0;\n\n    // Estatísticas por período\n    const porPeriodoResult = await this.dadosCestaBasicaRepository\n      .createQueryBuilder('dados')\n      .select('dados.periodo_concessao', 'periodo')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.periodo_concessao')\n      .getRawMany();\n\n    const porPeriodo = porPeriodoResult.reduce((acc, item) => {\n      acc[item.periodo] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por origem\n    const porOrigemResult = await this.dadosCestaBasicaRepository\n      .createQueryBuilder('dados')\n      .select('dados.origem_atendimento', 'origem')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.origem_atendimento')\n      .getRawMany();\n\n    const porOrigem = porOrigemResult.reduce((acc, item) => {\n      acc[item.origem] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    return {\n      totalSolicitacoes,\n      totalCestas,\n      porPeriodo,\n      porOrigem,\n    };\n  }\n}\n"],"version":3}