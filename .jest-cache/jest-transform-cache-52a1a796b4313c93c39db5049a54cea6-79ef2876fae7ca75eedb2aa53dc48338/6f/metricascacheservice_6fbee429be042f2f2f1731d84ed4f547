c15514e1f81c0bdd3092aa63faea2895
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var MetricasCacheService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasCacheService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const config_1 = require("@nestjs/config");
const crypto = __importStar(require("crypto"));
const node_cache_1 = __importDefault(require("node-cache"));
const metrica_definicao_entity_1 = require("../../../entities/metrica-definicao.entity");
const metrica_configuracao_entity_1 = require("../../../entities/metrica-configuracao.entity");
const metrica_snapshot_entity_1 = require("../../../entities/metrica-snapshot.entity");
/**
 * Serviço responsável pelo cacheamento de métricas
 *
 * Este serviço implementa estratégias de cache para otimizar o desempenho
 * das consultas às métricas, reduzindo a carga no banco de dados.
 */
let MetricasCacheService = MetricasCacheService_1 = class MetricasCacheService {
    metricaDefinicaoRepository;
    metricaConfiguracaoRepository;
    metricaSnapshotRepository;
    configService;
    logger = new common_1.Logger(MetricasCacheService_1.name);
    cache;
    // Prefixos para as chaves de cache
    PREFIX_METRICA = 'metrica:';
    PREFIX_SNAPSHOT = 'snapshot:';
    PREFIX_SERIES = 'serie:';
    constructor(metricaDefinicaoRepository, metricaConfiguracaoRepository, metricaSnapshotRepository, configService) {
        this.metricaDefinicaoRepository = metricaDefinicaoRepository;
        this.metricaConfiguracaoRepository = metricaConfiguracaoRepository;
        this.metricaSnapshotRepository = metricaSnapshotRepository;
        this.configService = configService;
        // Inicializar cache com configurações padrão
        const ttlPadrao = this.configService.get('METRICAS_CACHE_TTL_SEGUNDOS') || 300; // 5 minutos
        this.cache = new node_cache_1.default({
            stdTTL: ttlPadrao,
            checkperiod: 60, // Verificar expiração a cada 60 segundos
            useClones: false, // Economizar memória não clonando objetos
            deleteOnExpire: true,
            maxKeys: 10000, // Limitar número de chaves para evitar uso excessivo de memória
        });
        // Configurar evento para quando uma chave for removida do cache
        this.cache.on('expired', (key, value) => {
            this.logger.debug(`Cache expirado: ${key}`);
        });
        this.logger.log(`Serviço de cache inicializado (TTL padrão: ${ttlPadrao}s)`);
    }
    /**
     * Obter métrica do cache ou do banco de dados
     * @param codigo Código único da métrica
     * @returns Definição da métrica
     */
    async obterMetrica(codigo) {
        const cacheKey = `${this.PREFIX_METRICA}${codigo}`;
        // Tentar obter do cache
        const cachedMetrica = this.cache.get(cacheKey);
        if (cachedMetrica) {
            this.logger.debug(`Cache hit: ${cacheKey}`);
            return cachedMetrica;
        }
        // Não encontrado no cache, buscar no banco de dados
        this.logger.debug(`Cache miss: ${cacheKey}`);
        const metrica = await this.metricaDefinicaoRepository.findOne({
            where: { codigo, ativa: true },
            relations: ['configuracoes'],
        });
        if (metrica) {
            // Obter configuração para definir o TTL do cache
            let ttl = 300; // Padrão: 5 minutos
            // Carregar o relacionamento lazy configuracoes
            const configuracoes = await metrica.configuracoes;
            if (configuracoes.length > 0) {
                const config = configuracoes[0];
                if (config.cacheamento_habilitado) {
                    ttl = config.cache_ttl || ttl;
                }
                else {
                    // Se o cacheamento estiver desabilitado, não armazenar em cache
                    return metrica;
                }
            }
            // Armazenar no cache
            this.cache.set(cacheKey, metrica, ttl);
        }
        return metrica;
    }
    /**
     * Obter último snapshot de uma métrica
     * @param metricaId ID da métrica
     * @param dimensoes Dimensões para filtrar o snapshot
     * @returns Último snapshot disponível
     */
    async obterUltimoSnapshot(metricaId, dimensoes = {}) {
        // Gerar hash das dimensões
        const dimensoesHash = this.gerarHashDimensoes(dimensoes);
        // Gerar chave de cache
        const cacheKey = `${this.PREFIX_SNAPSHOT}${metricaId}:${dimensoesHash}`;
        // Tentar obter do cache
        const cachedSnapshot = this.cache.get(cacheKey);
        if (cachedSnapshot) {
            this.logger.debug(`Cache hit: ${cacheKey}`);
            return cachedSnapshot;
        }
        // Não encontrado no cache, buscar no banco de dados
        this.logger.debug(`Cache miss: ${cacheKey}`);
        // Buscar a métrica e sua configuração para determinar TTL
        const metrica = await this.metricaDefinicaoRepository.findOne({
            where: { id: metricaId },
            relations: ['configuracoes'],
        });
        // Verificar se o cacheamento está habilitado
        let ttl = 300; // Padrão: 5 minutos
        let cacheamentoHabilitado = true;
        // Corrigido: Uso de lazy loading com await
        if (metrica) {
            const configuracoes = await metrica.configuracoes;
            if (configuracoes.length > 0) {
                const config = configuracoes[0];
                if (config.cacheamento_habilitado) {
                    ttl = config.cache_ttl || ttl;
                }
                else {
                    cacheamentoHabilitado = false;
                }
            }
        }
        // Buscar snapshot no banco de dados
        const snapshot = await this.metricaSnapshotRepository.findOne({
            where: {
                definicao_id: metricaId,
                dimensoes_hash: dimensoesHash,
            },
            order: {
                periodo_fim: 'DESC',
            },
        });
        if (snapshot && cacheamentoHabilitado) {
            // Armazenar no cache
            this.cache.set(cacheKey, snapshot, ttl);
        }
        // Se não encontrar nenhum snapshot, retornar null em vez de indefinido
        return snapshot || null;
    }
    /**
     * Obter série temporal de snapshots de uma métrica
     * @param metricaId ID da métrica
     * @param inicio Data de início do período
     * @param fim Data de fim do período
     * @param dimensoes Dimensões para filtrar os snapshots
     * @returns Lista de snapshots ordenados por período
     */
    async obterSerieTemporal(metricaId, inicio, fim, dimensoes = {}) {
        // Gerar hash das dimensões
        const dimensoesHash = this.gerarHashDimensoes(dimensoes);
        // Gerar hash do período
        const periodoHash = `${inicio.toISOString()}_${fim.toISOString()}`;
        // Gerar chave de cache
        const cacheKey = `${this.PREFIX_SERIES}${metricaId}:${dimensoesHash}:${periodoHash}`;
        // Tentar obter do cache
        const cachedSerie = this.cache.get(cacheKey);
        if (cachedSerie) {
            this.logger.debug(`Cache hit: ${cacheKey}`);
            return cachedSerie;
        }
        // Não encontrado no cache, buscar no banco de dados
        this.logger.debug(`Cache miss: ${cacheKey}`);
        // Buscar a métrica e sua configuração para determinar TTL
        const metrica = await this.metricaDefinicaoRepository.findOne({
            where: { id: metricaId },
            relations: ['configuracoes'],
        });
        // Verificar se o cacheamento está habilitado
        let ttl = 300; // Padrão: 5 minutos
        let cacheamentoHabilitado = true;
        // Corrigido: Uso de lazy loading com await
        if (metrica) {
            const configuracoes = await metrica.configuracoes;
            if (configuracoes.length > 0) {
                const config = configuracoes[0];
                if (config.cacheamento_habilitado) {
                    ttl = config.cache_ttl || ttl;
                }
                else {
                    cacheamentoHabilitado = false;
                }
            }
        }
        // Buscar snapshots no banco de dados
        const snapshots = await this.metricaSnapshotRepository.find({
            where: {
                definicao_id: metricaId,
                dimensoes_hash: dimensoesHash,
                periodo_inicio: inicio,
                periodo_fim: fim,
            },
            order: {
                periodo_inicio: 'ASC',
            },
        });
        if (snapshots.length > 0 && cacheamentoHabilitado) {
            // Armazenar no cache
            this.cache.set(cacheKey, snapshots, ttl);
        }
        return snapshots;
    }
    /**
     * Invalida o cache de uma métrica específica
     * @param metricaId ID da métrica
     */
    invalidarCacheMetrica(metricaId) {
        // Buscar todas as chaves que correspondem ao padrão
        const keyPattern = new RegExp(`^(${this.PREFIX_METRICA}|${this.PREFIX_SNAPSHOT}|${this.PREFIX_SERIES}).*${metricaId}`);
        const chavesParaRemover = [];
        // Identificar chaves a serem removidas
        this.cache.keys().forEach((key) => {
            if (keyPattern.test(key)) {
                chavesParaRemover.push(key);
            }
        });
        if (chavesParaRemover.length > 0) {
            // Remover chaves do cache
            chavesParaRemover.forEach((key) => this.cache.del(key));
            this.logger.debug(`Cache invalidado para métrica ${metricaId}: ${chavesParaRemover.length} chaves removidas`);
        }
    }
    /**
     * Invalida todo o cache de métricas
     */
    limparCacheCompleto() {
        const totalChaves = this.cache.keys().length;
        this.cache.flushAll();
        this.logger.log(`Cache completo de métricas limpo: ${totalChaves} chaves removidas`);
    }
    /**
     * Pré-calcula e armazena em cache métricas frequentemente acessadas
     */
    async preCalcularMetricasFrequentes() {
        try {
            this.logger.log('Iniciando pré-cálculo de métricas frequentes');
            // Buscar métricas marcadas para exibição em dashboard
            const configuracoes = await this.metricaConfiguracaoRepository.find({
                where: { exibir_dashboard: true },
                relations: ['metrica'],
                order: { prioridade_dashboard: 'ASC' },
            });
            if (configuracoes.length === 0) {
                this.logger.debug('Nenhuma métrica configurada para pré-cálculo');
                return;
            }
            this.logger.debug(`Encontradas ${configuracoes.length} métricas para pré-cálculo`);
            // Obter último snapshot de cada métrica e armazenar em cache
            for (const config of configuracoes) {
                // Carregar a entidade metrica para acessar suas propriedades
                const metrica = await config.metrica;
                if (!metrica.ativa || !config.cacheamento_habilitado) {
                    continue;
                }
                try {
                    const snapshot = await this.obterUltimoSnapshot(metrica.id);
                    if (snapshot) {
                        this.logger.debug(`Métrica pré-calculada: ${metrica.codigo}, valor: ${snapshot.valor}`);
                    }
                }
                catch (error) {
                    this.logger.error(`Erro ao pré-calcular métrica ${metrica.codigo}: ${error.message}`);
                }
            }
            this.logger.log('Pré-cálculo de métricas frequentes concluído');
        }
        catch (error) {
            this.logger.error(`Erro no pré-cálculo de métricas: ${error.message}`);
        }
    }
    /**
     * Gera um hash único para as dimensões
     * @param dimensoes Objeto de dimensões
     * @returns Hash das dimensões
     */
    gerarHashDimensoes(dimensoes) {
        const stringDimensoes = JSON.stringify(dimensoes || {});
        return crypto.createHash('sha256').update(stringDimensoes).digest('hex');
    }
    /**
     * Obtém estatísticas de uso do cache
     * @returns Estatísticas do cache
     */
    obterEstatisticas() {
        const estatisticas = this.cache.getStats();
        return {
            keys: this.cache.keys().length,
            hits: estatisticas.hits,
            misses: estatisticas.misses,
            hit_rate: estatisticas.hits / (estatisticas.hits + estatisticas.misses || 1),
            keys_by_type: {
                metrica: this.cache
                    .keys()
                    .filter((k) => k.startsWith(this.PREFIX_METRICA)).length,
                snapshot: this.cache
                    .keys()
                    .filter((k) => k.startsWith(this.PREFIX_SNAPSHOT)).length,
                serie: this.cache.keys().filter((k) => k.startsWith(this.PREFIX_SERIES))
                    .length,
            },
        };
    }
};
exports.MetricasCacheService = MetricasCacheService;
exports.MetricasCacheService = MetricasCacheService = MetricasCacheService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(metrica_definicao_entity_1.MetricaDefinicao)),
    __param(1, (0, typeorm_1.InjectRepository)(metrica_configuracao_entity_1.MetricaConfiguracao)),
    __param(2, (0, typeorm_1.InjectRepository)(metrica_snapshot_entity_1.MetricaSnapshot)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _d : Object])
], MetricasCacheService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,