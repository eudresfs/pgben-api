{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission.repository.ts"],"sourcesContent":["import { DataSource, Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { Permission } from '../../entities/permission.entity';\n\n/**\n * Repositório para a entidade Permission.\n * \n * Fornece métodos para manipulação de permissões no banco de dados,\n * incluindo busca por nome, verificação de permissões compostas e\n * operações de CRUD.\n */\n@Injectable()\nexport class PermissionRepository extends Repository<Permission> {\n  constructor(private dataSource: DataSource) {\n    super(Permission, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca uma permissão pelo nome.\n   * \n   * @param name Nome da permissão no formato `modulo.recurso.operacao`\n   * @returns A permissão encontrada ou null\n   */\n  async findByName(name: string): Promise<Permission | null> {\n    try {\n      // Usar SQL nativo para evitar problemas com nomes de colunas\n      const result = await this.dataSource.manager.query(\n        `SELECT * FROM permissao WHERE nome = $1 LIMIT 1`,\n        [name]\n      );\n\n      if (!result || result.length === 0) {\n        return null;\n      }\n\n      // Converter o resultado para uma entidade Permission usando o método auxiliar\n      return this.toEntity(result[0]);\n    } catch (error) {\n      console.error('Erro ao buscar permissão por nome:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Busca permissões por um padrão de nome (usando LIKE).\n   * Útil para buscar permissões compostas como `modulo.*`.\n   * \n   * @param pattern Padrão de nome para busca (ex: 'cidadao.%')\n   * @returns Lista de permissões que correspondem ao padrão\n   */\n  async findByPattern(pattern: string): Promise<Permission[]> {\n    try {\n      // Usar SQL nativo para evitar problemas com nomes de colunas\n      const result = await this.dataSource.manager.query(\n        `SELECT * FROM permissao WHERE nome LIKE $1`,\n        [pattern]\n      );\n\n      if (!result || result.length === 0) {\n        return [];\n      }\n\n      // Converter o resultado para entidades Permission usando o método auxiliar\n      return result.map(row => this.toEntity(row));\n    } catch (error) {\n      console.error('Erro ao buscar permissões por padrão:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Busca todas as permissões compostas (aquelas com nomes que contém '*').\n   * \n   * @returns Lista de permissões compostas\n   */\n  async findAllComposite(): Promise<Permission[]> {\n    try {\n      // Usar SQL nativo para evitar problemas com nomes de colunas\n      // Identificamos permissões compostas pelo padrão do nome (contendo '*')\n      const result = await this.dataSource.manager.query(\n        `SELECT * FROM permissao WHERE nome LIKE '%.*%'`\n      );\n\n      if (!result || result.length === 0) {\n        return [];\n      }\n\n      // Converter o resultado para entidades Permission usando o método auxiliar\n      return result.map(row => this.toEntity(row));\n    } catch (error) {\n      console.error('Erro ao buscar permissões compostas:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Busca todas as permissões de um módulo específico.\n   * \n   * @param moduleName Nome do módulo\n   * @returns Lista de permissões do módulo\n   */\n  async findByModule(moduleName: string): Promise<Permission[]> {\n    try {\n      // Usar SQL nativo para evitar problemas com nomes de colunas\n      const result = await this.dataSource.manager.query(\n        `SELECT * FROM permissao WHERE modulo = $1`,\n        [moduleName]\n      );\n\n      if (!result || result.length === 0) {\n        return [];\n      }\n\n      // Converter o resultado para entidades Permission usando o método auxiliar\n      return result.map(row => this.toEntity(row));\n    } catch (error) {\n      console.error(`Erro ao buscar permissões do módulo ${moduleName}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Cria uma nova permissão.\n   * \n   * @param data Dados da permissão a ser criada\n   * @returns A permissão criada\n   */\n  async createPermission(data: Partial<Permission>): Promise<Permission> {\n    const permission = this.create(data);\n    return this.save(permission);\n  }\n\n  /**\n   * Atualiza uma permissão existente.\n   * \n   * @param id ID da permissão a ser atualizada\n   * @param data Dados atualizados da permissão\n   * @returns A permissão atualizada\n   */\n  async updatePermission(id: string, data: Partial<Permission>): Promise<Permission | null> {\n    await this.update(id, data);\n    return this.findOneBy({ id });\n  }\n\n  /**\n   * Remove uma permissão.\n   * \n   * @param id ID da permissão a ser removida\n   * @returns true se a permissão foi removida, false caso contrário\n   */\n  async removePermission(id: string): Promise<boolean> {\n    const result = await this.delete(id);\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n\n  /**\n   * Busca permissões por IDs.\n   * \n   * @param ids Lista de IDs das permissões\n   * @returns Lista de permissões encontradas\n   */\n  /**\n   * Converte um objeto de resultado de consulta SQL em uma entidade Permission\n   * \n   * @param row Linha de resultado da consulta SQL\n   * @returns Entidade Permission\n   */\n  private toEntity(row: any): Permission {\n    const permission = new Permission();\n    permission.id = row.id;\n    permission.nome = row.nome;\n    permission.descricao = row.descricao;\n    \n    // Campos adicionais que existem no banco mas não na entidade\n    // usamos casting para any para evitar erros de typescript\n    (permission as any).modulo = row.modulo;\n    (permission as any).acao = row.acao;\n    (permission as any).ativo = row.ativo;\n    \n    permission.created_at = row.created_at;\n    permission.updated_at = row.updated_at;\n    return permission;\n  }\n\n  async findByIds(ids: string[]): Promise<Permission[]> {\n    if (!ids || ids.length === 0) {\n      return [];\n    }\n    \n    try {\n      // Usar SQL nativo para evitar problemas com nomes de colunas\n      const result = await this.dataSource.manager.query(\n        `SELECT * FROM permissao WHERE id = ANY($1)`,\n        [ids]\n      );\n\n      if (!result || result.length === 0) {\n        return [];\n      }\n\n      // Converter o resultado para entidades Permission usando o método auxiliar\n      return result.map(row => this.toEntity(row));\n    } catch (error) {\n      console.error('Erro ao buscar permissões por IDs:', error);\n      return [];\n    }\n  }\n}\n"],"version":3}