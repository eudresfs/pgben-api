2f5ec6b5f2986b5d5a85054974a168dd
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var CacheMetricsProvider_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheMetricsProvider = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const bull_1 = require("@nestjs/bull");
const bull_2 = require("bull");
const enhanced_metrics_service_1 = require("../monitoring/enhanced-metrics.service");
/**
 * Provedor de métricas para o sistema de cache
 *
 * Este provedor coleta métricas do sistema de cache e as envia para o serviço de métricas
 * para monitoramento e análise de performance.
 */
let CacheMetricsProvider = CacheMetricsProvider_1 = class CacheMetricsProvider {
    metricsService;
    configService;
    cacheQueue;
    logger = new common_1.Logger(CacheMetricsProvider_1.name);
    cacheEnabled;
    cacheType;
    metricsInterval = 60000; // 1 minuto
    metricsTimer;
    // Contadores para cálculo de métricas
    cacheHits = 0;
    cacheMisses = 0;
    cacheFailures = 0;
    cacheRecoveryAttempts = 0;
    responseTimesMs = new Map();
    cacheOperations = {
        get: 0,
        set: 0,
        del: 0,
        clear: 0,
    };
    constructor(metricsService, configService, cacheQueue) {
        this.metricsService = metricsService;
        this.configService = configService;
        this.cacheQueue = cacheQueue;
        // Verificar se o Redis está habilitado
        this.cacheEnabled = this.configService.get('DISABLE_REDIS') !== 'true';
        this.cacheType = this.cacheEnabled ? 'redis' : 'memory';
    }
    /**
     * Inicializa a coleta periódica de métricas quando o módulo é inicializado
     */
    onModuleInit() {
        this.startMetricsCollection();
        this.logger.log(`Iniciando coleta de métricas de cache (${this.cacheType})`);
    }
    /**
     * Inicia a coleta periódica de métricas
     */
    startMetricsCollection() {
        // Coletar métricas imediatamente na inicialização
        this.collectMetrics();
        // Configurar coleta periódica
        this.metricsTimer = setInterval(() => {
            this.collectMetrics();
        }, this.metricsInterval);
    }
    /**
     * Coleta métricas do sistema de cache
     */
    async collectMetrics() {
        try {
            if (!this.cacheEnabled) {
                // Se o cache estiver desabilitado, apenas reporta métricas zeradas
                this.reportEmptyMetrics();
                return;
            }
            // Coletar métricas do Redis via Bull
            const jobCounts = await this.cacheQueue.getJobCounts();
            const activeJobs = await this.cacheQueue.getJobs(['active']);
            const waitingJobs = await this.cacheQueue.getJobs(['waiting']);
            const completedJobs = await this.cacheQueue.getJobs(['completed']);
            const failedJobs = await this.cacheQueue.getJobs(['failed']);
            // Calcular tamanho aproximado do cache em bytes
            let totalSizeBytes = 0;
            const allJobs = [...activeJobs, ...waitingJobs, ...completedJobs];
            for (const job of allJobs) {
                // Estimar tamanho baseado no JSON stringificado
                const jobSize = JSON.stringify(job.data).length;
                totalSizeBytes += jobSize;
            }
            // Atualizar métricas
            this.metricsService.updateCacheSize(totalSizeBytes, this.cacheType);
            // Calcular e atualizar taxa de acertos se houver operações
            const totalOps = this.cacheHits + this.cacheMisses;
            if (totalOps > 0) {
                const hitRatio = this.cacheHits / totalOps;
                this.metricsService.updateCacheHitRatio(hitRatio, this.cacheType);
            }
            // Registrar operações acumuladas
            Object.entries(this.cacheOperations).forEach(([operation, count]) => {
                if (count > 0) {
                    this.metricsService.recordCacheOperation(operation, true, // assumimos sucesso para métricas acumuladas
                    this.cacheType);
                    // Resetar contador após registrar
                    this.cacheOperations[operation] = 0;
                }
            });
            // Registrar falhas e tentativas de recuperação
            if (this.cacheFailures > 0) {
                this.metricsService.recordCacheFailures(this.cacheFailures, this.cacheType);
                this.cacheFailures = 0;
            }
            if (this.cacheRecoveryAttempts > 0) {
                this.metricsService.recordCacheRecoveryAttempts(this.cacheRecoveryAttempts, this.cacheType);
                this.cacheRecoveryAttempts = 0;
            }
            // Registrar tempos de resposta
            this.responseTimesMs.forEach((times, key) => {
                if (times.length > 0) {
                    const avgTime = times.reduce((sum, time) => sum + time, 0) / times.length;
                    this.metricsService.recordCacheResponseTime(avgTime, key, this.cacheType);
                }
            });
            this.responseTimesMs.clear();
            // Resetar contadores
            this.cacheHits = 0;
            this.cacheMisses = 0;
            this.logger.debug(`Métricas de cache coletadas: ${allJobs.length} itens, ${totalSizeBytes} bytes`);
        }
        catch (error) {
            this.logger.error(`Erro ao coletar métricas de cache: ${error.message}`, error.stack);
        }
    }
    /**
     * Reporta métricas vazias quando o cache está desabilitado
     */
    reportEmptyMetrics() {
        this.metricsService.updateCacheSize(0, this.cacheType);
        this.metricsService.updateCacheHitRatio(0, this.cacheType);
    }
    /**
     * Registra um hit no cache
     */
    registerCacheHit() {
        this.cacheHits++;
        this.cacheOperations.get++;
    }
    /**
     * Registra um miss no cache
     */
    registerCacheMiss() {
        this.cacheMisses++;
        this.cacheOperations.get++;
    }
    /**
     * Registra uma operação de set no cache
     */
    registerCacheSet() {
        this.cacheOperations.set++;
    }
    /**
     * Registra uma operação de delete no cache
     */
    registerCacheDelete() {
        this.cacheOperations.del++;
    }
    /**
     * Registra uma operação de clear no cache
     */
    registerCacheClear() {
        this.cacheOperations.clear++;
    }
    /**
     * Registra uma falha no cache
     */
    registerCacheFailure() {
        this.cacheFailures++;
        this.metricsService.recordCacheOperation('failure', false, this.cacheType);
    }
    /**
     * Registra uma tentativa de recuperação do circuit breaker
     */
    registerCacheRecoveryAttempt() {
        this.cacheRecoveryAttempts++;
        this.metricsService.recordCacheOperation('recovery', true, this.cacheType);
    }
    /**
     * Registra o tempo de resposta de uma operação de cache
     * @param key Chave do cache
     * @param timeMs Tempo em milissegundos (opcional)
     */
    registerCacheResponseTime(key, timeMs) {
        const time = timeMs || 0;
        if (!this.responseTimesMs.has(key)) {
            this.responseTimesMs.set(key, []);
        }
        const times = this.responseTimesMs.get(key);
        if (times) {
            times.push(time);
        }
    }
};
exports.CacheMetricsProvider = CacheMetricsProvider;
exports.CacheMetricsProvider = CacheMetricsProvider = CacheMetricsProvider_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(2, (0, bull_1.InjectQueue)('cache')),
    __metadata("design:paramtypes", [typeof (_a = typeof enhanced_metrics_service_1.EnhancedMetricsService !== "undefined" && enhanced_metrics_service_1.EnhancedMetricsService) === "function" ? _a : Object, typeof (_b = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _b : Object, typeof (_c = typeof bull_2.Queue !== "undefined" && bull_2.Queue) === "function" ? _c : Object])
], CacheMetricsProvider);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,