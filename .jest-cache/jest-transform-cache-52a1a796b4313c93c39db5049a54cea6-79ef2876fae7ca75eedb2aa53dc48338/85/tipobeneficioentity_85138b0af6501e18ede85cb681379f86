d70343cb22f247c3668cca7d5036e423
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TipoBeneficio = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const solicitacao_entity_1 = require("./solicitacao.entity");
const requisito_documento_entity_1 = require("./requisito-documento.entity");
const campo_dinamico_beneficio_entity_1 = require("./campo-dinamico-beneficio.entity");
const enums_1 = require("../enums");
let TipoBeneficio = class TipoBeneficio {
    id;
    codigo;
    nome;
    descricao;
    periodicidade;
    valor;
    status;
    criterios_elegibilidade;
    especificacoes;
    requisito_documento;
    campos_dinamicos;
    solicitacao;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se o benefício foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se o benefício foi removido
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se o benefício está ativo
     */
    isAtivo() {
        return this.status === 'ativo' && !this.removed_at;
    }
    /**
     * Verifica se é benefício único
     */
    isBeneficioUnico() {
        return this.periodicidade === enums_1.PeriodicidadeEnum.UNICO;
    }
    /**
     * Verifica se é benefício recorrente
     */
    isBeneficioRecorrente() {
        return !this.isBeneficioUnico();
    }
    /**
     * Verifica se é benefício mensal
     */
    isBeneficioMensal() {
        return this.periodicidade === enums_1.PeriodicidadeEnum.MENSAL;
    }
    /**
     * Verifica se tem valor definido
     */
    temValor() {
        return this.valor !== null && this.valor !== undefined && this.valor > 0;
    }
    /**
     * Obtém o valor formatado em moeda brasileira
     */
    getValorFormatado() {
        if (!this.temValor())
            return 'Valor não definido';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL',
        }).format(this.valor);
    }
    /**
     * Obtém a descrição da periodicidade
     */
    getDescricaoPeriodicidade() {
        const descricoes = {
            [enums_1.PeriodicidadeEnum.UNICO]: 'Único',
            [enums_1.PeriodicidadeEnum.MENSAL]: 'Mensal',
            [enums_1.PeriodicidadeEnum.BIMESTRAL]: 'Bimestral',
            [enums_1.PeriodicidadeEnum.TRIMESTRAL]: 'Trimestral',
            [enums_1.PeriodicidadeEnum.SEMESTRAL]: 'Semestral',
            [enums_1.PeriodicidadeEnum.ANUAL]: 'Anual',
        };
        return descricoes[this.periodicidade] || 'Não definido';
    }
    /**
     * Verifica se tem critérios de elegibilidade definidos
     */
    temCriteriosElegibilidade() {
        return !!this.criterios_elegibilidade && Object.keys(this.criterios_elegibilidade).length > 0;
    }
    /**
     * Verifica se tem critério de idade mínima
     */
    temIdadeMinima() {
        return this.temCriteriosElegibilidade() &&
            this.criterios_elegibilidade.idade_minima !== undefined &&
            this.criterios_elegibilidade.idade_minima !== null;
    }
    /**
     * Verifica se tem critério de idade máxima
     */
    temIdadeMaxima() {
        return this.temCriteriosElegibilidade() &&
            this.criterios_elegibilidade.idade_maxima !== undefined &&
            this.criterios_elegibilidade.idade_maxima !== null;
    }
    /**
     * Verifica se tem critério de renda máxima
     */
    temRendaMaxima() {
        return this.temCriteriosElegibilidade() &&
            this.criterios_elegibilidade.renda_maxima !== undefined &&
            this.criterios_elegibilidade.renda_maxima !== null;
    }
    /**
     * Verifica se tem critério de tempo mínimo de residência
     */
    temTempoMinimoResidencia() {
        return this.temCriteriosElegibilidade() &&
            this.criterios_elegibilidade.tempo_minimo_residencia !== undefined &&
            this.criterios_elegibilidade.tempo_minimo_residencia !== null;
    }
    /**
     * Verifica se uma idade atende aos critérios
     */
    idadeAtendeAosCriterios(idade) {
        if (!this.temCriteriosElegibilidade())
            return true;
        if (this.temIdadeMinima() && idade < (this.criterios_elegibilidade?.idade_minima ?? 0)) {
            return false;
        }
        if (this.temIdadeMaxima() && idade > (this.criterios_elegibilidade?.idade_maxima ?? 0)) {
            return false;
        }
        return true;
    }
    /**
     * Verifica se uma renda atende aos critérios
     */
    rendaAtendeAosCriterios(renda) {
        if (!this.temRendaMaxima())
            return true;
        return this.criterios_elegibilidade.renda_maxima !== undefined && renda <= this.criterios_elegibilidade.renda_maxima;
    }
    /**
     * Verifica se o tempo de residência atende aos critérios
     */
    tempoResidenciaAtendeAosCriterios(tempoMeses) {
        if (!this.temTempoMinimoResidencia())
            return true;
        return this.criterios_elegibilidade.tempo_minimo_residencia !== undefined && tempoMeses >= this.criterios_elegibilidade.tempo_minimo_residencia;
    }
    /**
     * Obtém a faixa etária permitida
     */
    getFaixaEtaria() {
        if (!this.temIdadeMinima() && !this.temIdadeMaxima()) {
            return 'Qualquer idade';
        }
        if (this.temIdadeMinima() && !this.temIdadeMaxima()) {
            return `A partir de ${this.criterios_elegibilidade.idade_minima} anos`;
        }
        if (!this.temIdadeMinima() && this.temIdadeMaxima()) {
            return `Até ${this.criterios_elegibilidade.idade_maxima} anos`;
        }
        return `De ${this.criterios_elegibilidade.idade_minima} a ${this.criterios_elegibilidade.idade_maxima} anos`;
    }
    /**
     * Obtém a renda máxima formatada
     */
    getRendaMaximaFormatada() {
        if (!this.temRendaMaxima() || this.criterios_elegibilidade.renda_maxima === undefined)
            return 'Sem limite de renda';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL',
        }).format(this.criterios_elegibilidade.renda_maxima);
    }
    /**
     * Obtém o tempo mínimo de residência formatado
     */
    getTempoMinimoResidenciaFormatado() {
        if (!this.temTempoMinimoResidencia())
            return 'Sem exigência de tempo';
        const meses = this.criterios_elegibilidade.tempo_minimo_residencia;
        if (meses === undefined || meses < 12) {
            return `${meses ?? 0} mês(es)`;
        }
        else {
            const anos = Math.floor(meses / 12);
            const mesesRestantes = meses % 12;
            if (mesesRestantes === 0) {
                return `${anos} ano(s)`;
            }
            else {
                return `${anos} ano(s) e ${mesesRestantes} mês(es)`;
            }
        }
    }
    /**
     * Obtém lista de outros critérios
     */
    getOutrosCriterios() {
        if (!this.temCriteriosElegibilidade() || !this.criterios_elegibilidade.outros) {
            return [];
        }
        return this.criterios_elegibilidade.outros;
    }
    /**
     * Verifica se tem requisitos de documentos
     */
    temRequisitosDocumentos() {
        return this.requisito_documento && this.requisito_documento.length > 0;
    }
    /**
     * Obtém número de requisitos obrigatórios
     */
    getNumeroRequisitosObrigatorios() {
        if (!this.temRequisitosDocumentos())
            return 0;
        return this.requisito_documento.filter(req => req.obrigatorio).length;
    }
    /**
     * Verifica se tem campos dinâmicos
     */
    temCamposDinamicos() {
        return this.campos_dinamicos && this.campos_dinamicos.length > 0;
    }
    /**
     * Obtém número de campos dinâmicos obrigatórios
     */
    getNumeroCamposDinamicosObrigatorios() {
        if (!this.temCamposDinamicos())
            return 0;
        return this.campos_dinamicos.filter(campo => campo.obrigatorio).length;
    }
    /**
     * Verifica se pode ser solicitado (ativo e não removido)
     */
    podeSerSolicitado() {
        return this.isAtivo();
    }
    /**
     * Obtém um resumo do benefício
     */
    getSummary() {
        const valor = this.getValorFormatado();
        const periodicidade = this.getDescricaoPeriodicidade();
        const status = this.isAtivo() ? 'Ativo' : 'Inativo';
        return `${this.nome} - ${valor} (${periodicidade}) - ${status}`;
    }
    /**
     * Gera uma chave única para o benefício
     */
    getUniqueKey() {
        return `tipo_beneficio_${this.nome.toLowerCase().replace(/\s+/g, '_')}`;
    }
    /**
     * Verifica se o benefício é consistente
     */
    isConsistente() {
        // Verifica se tem nome
        if (!this.nome || this.nome.trim().length === 0)
            return false;
        // Verifica se tem descrição
        if (!this.descricao || this.descricao.trim().length === 0)
            return false;
        // Verifica se tem valor válido
        if (!this.temValor())
            return false;
        // Verifica critérios de elegibilidade
        if (this.temCriteriosElegibilidade()) {
            if (this.temIdadeMinima() && this.temIdadeMaxima()) {
                if (this.criterios_elegibilidade.idade_minima !== undefined && this.criterios_elegibilidade.idade_maxima !== undefined && this.criterios_elegibilidade.idade_minima > this.criterios_elegibilidade.idade_maxima) {
                    return false;
                }
            }
            if (this.temRendaMaxima() && this.criterios_elegibilidade.renda_maxima !== undefined && this.criterios_elegibilidade.renda_maxima < 0) {
                return false;
            }
            if (this.temTempoMinimoResidencia() && this.criterios_elegibilidade.tempo_minimo_residencia !== undefined && this.criterios_elegibilidade.tempo_minimo_residencia < 0) {
                return false;
            }
        }
        return true;
    }
    /**
     * Verifica se pode ser removido
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        // Pode implementar lógica adicional aqui
        // Por exemplo, verificar se tem solicitações ativas
        return true;
    }
    /**
     * Clona o tipo de benefício (sem ID)
     */
    clone() {
        return {
            nome: this.nome,
            descricao: this.descricao,
            periodicidade: this.periodicidade,
            valor: this.valor,
            status: enums_1.Status.ATIVO,
            criterios_elegibilidade: this.criterios_elegibilidade ?
                JSON.parse(JSON.stringify(this.criterios_elegibilidade)) : null,
        };
    }
    /**
     * Verifica se é um benefício de alto valor
     */
    isAltoValor() {
        // Considera alto valor acima de R$ 1000
        return this.temValor() && this.valor > 1000;
    }
    /**
     * Obtém a complexidade do benefício baseada em critérios e requisitos
     */
    getComplexidade() {
        let pontos = 0;
        // Critérios de elegibilidade
        if (this.temCriteriosElegibilidade()) {
            pontos += Object.keys(this.criterios_elegibilidade).length;
        }
        // Requisitos de documentos
        if (this.temRequisitosDocumentos()) {
            pontos += this.requisito_documento.length;
        }
        // Campos dinâmicos
        if (this.temCamposDinamicos()) {
            pontos += this.campos_dinamicos.length;
        }
        if (pontos <= 3)
            return 'BAIXA';
        if (pontos <= 7)
            return 'MEDIA';
        return 'ALTA';
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            nome: this.nome,
            periodicidade: this.periodicidade,
            status: enums_1.Status.ATIVO,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para o benefício
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.temCriteriosElegibilidade()) {
            sugestoes.push('Definir critérios de elegibilidade');
        }
        if (!this.temRequisitosDocumentos()) {
            sugestoes.push('Adicionar requisitos de documentos');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências nos dados');
        }
        if (this.status === enums_1.Status.INATIVO) {
            sugestoes.push('Considerar reativar o benefício se necessário');
        }
        return sugestoes;
    }
    /**
     * Verifica se precisa de atualização (dados muito antigos)
     */
    precisaAtualizacao() {
        // Dados com mais de 1 ano podem precisar de revisão
        const umAnoAtras = new Date();
        umAnoAtras.setFullYear(umAnoAtras.getFullYear() - 1);
        return this.updated_at < umAnoAtras;
    }
    /**
     * Obtém estatísticas do benefício
     */
    getEstatisticas() {
        return {
            valor: this.getValorFormatado(),
            periodicidade: this.getDescricaoPeriodicidade(),
            complexidade: this.getComplexidade(),
            criteriosElegibilidade: this.temCriteriosElegibilidade() ?
                Object.keys(this.criterios_elegibilidade).length : 0,
            requisitosDocumentos: this.temRequisitosDocumentos() ?
                this.requisito_documento.length : 0,
            camposDinamicos: this.temCamposDinamicos() ?
                this.campos_dinamicos.length : 0,
        };
    }
};
exports.TipoBeneficio = TipoBeneficio;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], TipoBeneficio.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ unique: true }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Código é obrigatório' }),
    __metadata("design:type", String)
], TipoBeneficio.prototype, "codigo", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome é obrigatório' }),
    __metadata("design:type", String)
], TipoBeneficio.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)('text'),
    (0, class_validator_1.IsNotEmpty)({ message: 'Descrição é obrigatória' }),
    __metadata("design:type", String)
], TipoBeneficio.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.PeriodicidadeEnum,
        enumName: 'periodicidade',
        default: enums_1.PeriodicidadeEnum.UNICO,
    }),
    __metadata("design:type", typeof (_a = typeof enums_1.PeriodicidadeEnum !== "undefined" && enums_1.PeriodicidadeEnum) === "function" ? _a : Object)
], TipoBeneficio.prototype, "periodicidade", void 0);
__decorate([
    (0, typeorm_1.Column)('decimal', { precision: 10, scale: 2 }),
    (0, class_validator_1.IsNumber)({}, { message: 'Valor deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Valor não pode ser negativo' }),
    __metadata("design:type", Number)
], TipoBeneficio.prototype, "valor", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.Status,
        enumName: 'status_enum',
        default: enums_1.Status.ATIVO,
    }),
    __metadata("design:type", typeof (_b = typeof enums_1.Status !== "undefined" && enums_1.Status) === "function" ? _b : Object)
], TipoBeneficio.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.Column)('jsonb', { nullable: true }),
    __metadata("design:type", Object)
], TipoBeneficio.prototype, "criterios_elegibilidade", void 0);
__decorate([
    (0, typeorm_1.Column)('jsonb', { nullable: true }),
    __metadata("design:type", Object)
], TipoBeneficio.prototype, "especificacoes", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => requisito_documento_entity_1.RequisitoDocumento, (requisito) => requisito.tipo_beneficio),
    __metadata("design:type", Array)
], TipoBeneficio.prototype, "requisito_documento", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => campo_dinamico_beneficio_entity_1.CampoDinamicoBeneficio, (campo) => campo.tipo_beneficio),
    __metadata("design:type", Array)
], TipoBeneficio.prototype, "campos_dinamicos", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => solicitacao_entity_1.Solicitacao, (solicitacao) => solicitacao.tipo_beneficio),
    __metadata("design:type", Array)
], TipoBeneficio.prototype, "solicitacao", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], TipoBeneficio.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], TipoBeneficio.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], TipoBeneficio.prototype, "removed_at", void 0);
exports.TipoBeneficio = TipoBeneficio = __decorate([
    (0, typeorm_1.Entity)('tipo_beneficio'),
    (0, typeorm_1.Index)(['nome'], { unique: true }),
    (0, typeorm_1.Index)(['codigo'], { unique: true })
], TipoBeneficio);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,