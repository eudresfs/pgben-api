{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\adapters\\tests\\local-storage.adapter.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,6BAA6B;AAC7B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AATlB,6CAAsD;AACtD,oEAA+D;AAC/D,2CAA+C;AAC/C,2CAAwC;AACxC,uCAAyB;AACzB,2CAA6B;AAM7B,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;IACnC,IAAI,OAA4B,CAAC;IACjC,IAAI,UAAe,CAAC;IACpB,IAAI,iBAAsB,CAAC;IAE3B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,wBAAwB;QACxB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,UAAU,GAAG;YACX,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE;YACd,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;YACf,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;SACjB,CAAC;QAEF,iBAAiB,GAAG;YAClB,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,cAAc,CAAC;SAC/C,CAAC;QAEF,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,2CAAmB;gBACnB;oBACE,OAAO,EAAE,sBAAa;oBACtB,QAAQ,EAAE,iBAAiB;iBAC5B;gBACD;oBACE,OAAO,EAAE,eAAM;oBACf,QAAQ,EAAE,UAAU;iBACrB;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAsB,2CAAmB,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,UAAU;YACV,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAChD,MAAM,WAAW,GAAG,mBAAmB,CAAC;YACxC,MAAM,QAAQ,GAAG,iBAAiB,CAAC;YAEnC,uBAAuB;YACvB,IAAI;iBACD,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC;iBACpC,eAAe,CAAC,0BAA0B,CAAC,CAAC;YAE/C,2BAA2B;YAC1B,IAAI,CAAC,IAAkB,CAAC,eAAe,CACtC,mDAAmD,CACpD,CAAC;YACD,IAAI,CAAC,OAAqB,CAAC,eAAe,CACzC,iCAAiC,CAClC,CAAC;YAEF,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,aAAa,CAC3C,MAAM,EACN,WAAW,EACX,QAAQ,CACT,CAAC;YAEF,SAAS;YACT,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACxC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,UAAU;YACV,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAChD,MAAM,WAAW,GAAG,kBAAkB,CAAC;YACvC,MAAM,QAAQ,GAAG,iBAAiB,CAAC;YAEnC,6CAA6C;YAC5C,EAAE,CAAC,aAA2B,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACtD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;YAEH,eAAe;YACf,MAAM,MAAM,CACV,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,CAAC,CACrD,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,UAAU;YACV,MAAM,OAAO,GAAG,sCAAsC,CAAC;YACvD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAElD,2BAA2B;YAC1B,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,EAAE,CAAC,YAA0B,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YACtD,IAAI,CAAC,IAAkB,CAAC,eAAe,CACtC,mDAAmD,CACpD,CAAC;YAEF,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;YAEtD,SAAS;YACT,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC3C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,UAAU;YACV,MAAM,OAAO,GAAG,4CAA4C,CAAC;YAE7D,2BAA2B;YAC1B,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEpD,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACzD,wBAAwB,CACzB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,UAAU;YACV,MAAM,OAAO,GAAG,sCAAsC,CAAC;YAEvD,2BAA2B;YAC1B,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,IAAkB,CAAC,eAAe,CACtC,mDAAmD,CACpD,CAAC;YAEF,MAAM;YACN,MAAM,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAEtC,SAAS;YACT,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,UAAU;YACV,MAAM,OAAO,GAAG,4CAA4C,CAAC;YAE7D,2BAA2B;YAC1B,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACnD,IAAI,CAAC,IAAkB,CAAC,eAAe,CACtC,yDAAyD,CAC1D,CAAC;YAEF,MAAM;YACN,MAAM,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAEtC,SAAS;YACT,2CAA2C;YAC3C,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,UAAU;YACV,MAAM,GAAG,GAAG,sCAAsC,CAAC;YAEnD,mBAAmB;YAClB,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,IAAkB,CAAC,eAAe,CACtC,mDAAmD,CACpD,CAAC;YAEF,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAE5C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,UAAU;YACV,MAAM,GAAG,GAAG,4CAA4C,CAAC;YAEzD,mBAAmB;YAClB,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEpD,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAE5C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,UAAU;YACV,MAAM,GAAG,GAAG,sCAAsC,CAAC;YAEnD,mBAAmB;YAClB,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAEnD,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAE5C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,uCAAuC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,UAAU;YACV,MAAM,OAAO,GAAG,4CAA4C,CAAC;YAE7D,mBAAmB;YAClB,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEpD,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACnD,wBAAwB,CACzB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,UAAU;YACV,MAAM,SAAS,GAAG,uCAAuC,CAAC;YAC1D,MAAM,cAAc,GAAG,wCAAwC,CAAC;YAEhE,2BAA2B;YAC1B,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,IAAkB,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE,EAAE;gBAC5D,OAAO,gBAAgB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAC1C,CAAC,CAAC,CAAC;YACF,IAAI,CAAC,OAAqB,CAAC,eAAe,CACzC,iCAAiC,CAClC,CAAC;YAEF,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YAEhE,SAAS;YACT,MAAM,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC3C,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,UAAU;YACV,MAAM,SAAS,GAAG,uCAAuC,CAAC;YAC1D,MAAM,cAAc,GAAG,wCAAwC,CAAC;YAEhE,mBAAmB;YAClB,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,EAAE,CAAC,YAA0B,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACrD,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACnE,wBAAwB,CACzB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,UAAU;YACV,MAAM,MAAM,GAAG,oBAAoB,CAAC;YAEpC,mBAAmB;YAClB,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAClD,EAAE,CAAC,WAAyB,CAAC,eAAe,CAAC;gBAC5C,cAAc;gBACd,cAAc;aACf,CAAC,CAAC;YACF,EAAE,CAAC,QAAsB,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC;gBACnD,WAAW,EAAE,GAAG,EAAE,CAAC,KAAK;aACzB,CAAC,CAAC,CAAC;YAEJ,yCAAyC;YACxC,IAAI,CAAC,QAAsB,CAAC,kBAAkB,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;gBAC7D,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;oBAClC,OAAO,iCAAiC,CAAC;gBAC3C,CAAC;gBACD,IAAI,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC;oBAClC,OAAO,iCAAiC,CAAC;gBAC3C,CAAC;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CAAC,CAAC;YACF,IAAI,CAAC,OAAqB,CAAC,eAAe,CACzC,iCAAiC,CAClC,CAAC;YAEF,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE7C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;YAC/D,MAAM,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,iCAAiC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,UAAU;YACV,MAAM,MAAM,GAAG,oBAAoB,CAAC;YAEpC,mBAAmB;YAClB,EAAE,CAAC,UAAwB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAEpD,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAE7C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\adapters\\tests\\local-storage.adapter.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { LocalStorageAdapter } from '../local-storage.adapter';\nimport { ConfigService } from '@nestjs/config';\nimport { Logger } from '@nestjs/common';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n// Mock dos módulos fs e path\njest.mock('fs');\njest.mock('path');\n\ndescribe('LocalStorageAdapter', () => {\n  let adapter: LocalStorageAdapter;\n  let mockLogger: any;\n  let mockConfigService: any;\n\n  beforeEach(async () => {\n    // Limpar todos os mocks\n    jest.clearAllMocks();\n\n    mockLogger = {\n      log: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n      debug: jest.fn(),\n    };\n\n    mockConfigService = {\n      get: jest.fn().mockReturnValue('/tmp/uploads'),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        LocalStorageAdapter,\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n        {\n          provide: Logger,\n          useValue: mockLogger,\n        },\n      ],\n    }).compile();\n\n    adapter = module.get<LocalStorageAdapter>(LocalStorageAdapter);\n  });\n\n  it('deve ser definido', () => {\n    expect(adapter).toBeDefined();\n  });\n\n  describe('salvarArquivo', () => {\n    it('deve salvar um arquivo corretamente', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo de teste');\n      const nomeArquivo = 'arquivo-teste.pdf';\n      const mimetype = 'application/pdf';\n\n      // Mock para data atual\n      jest\n        .spyOn(Date.prototype, 'toISOString')\n        .mockReturnValue('2023-01-01T00:00:00.000Z');\n\n      // Configurar mocks básicos\n      (path.join as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01/arquivo-teste.pdf',\n      );\n      (path.dirname as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01',\n      );\n\n      // Act\n      const resultado = await adapter.salvarArquivo(\n        buffer,\n        nomeArquivo,\n        mimetype,\n      );\n\n      // Assert\n      expect(fs.mkdirSync).toHaveBeenCalled();\n      expect(fs.writeFileSync).toHaveBeenCalled();\n      expect(resultado).toMatch(/documentos\\/2023\\/01\\/.+\\.pdf/);\n    });\n\n    it('deve lançar erro quando falhar ao salvar o arquivo', async () => {\n      // Arrange\n      const buffer = Buffer.from('conteúdo de teste');\n      const nomeArquivo = 'arquivo-erro.pdf';\n      const mimetype = 'application/pdf';\n\n      // Mock para simular erro ao escrever arquivo\n      (fs.writeFileSync as jest.Mock).mockImplementation(() => {\n        throw new Error('Erro de escrita');\n      });\n\n      // Act & Assert\n      await expect(\n        adapter.salvarArquivo(buffer, nomeArquivo, mimetype),\n      ).rejects.toThrow('Erro ao salvar arquivo');\n    });\n  });\n\n  describe('obterArquivo', () => {\n    it('deve obter um arquivo corretamente', async () => {\n      // Arrange\n      const caminho = 'documentos/2023/01/arquivo-teste.pdf';\n      const buffer = Buffer.from('conteúdo do arquivo');\n\n      // Configurar mocks básicos\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      (fs.readFileSync as jest.Mock).mockReturnValue(buffer);\n      (path.join as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01/arquivo-teste.pdf',\n      );\n\n      // Act\n      const resultado = await adapter.obterArquivo(caminho);\n\n      // Assert\n      expect(fs.readFileSync).toHaveBeenCalled();\n      expect(resultado).toEqual(buffer);\n    });\n\n    it('deve lançar erro quando o arquivo não existe', async () => {\n      // Arrange\n      const caminho = 'documentos/2023/01/arquivo-inexistente.pdf';\n\n      // Configurar mocks básicos\n      (fs.existsSync as jest.Mock).mockReturnValue(false);\n\n      // Act & Assert\n      await expect(adapter.obterArquivo(caminho)).rejects.toThrow(\n        'Arquivo não encontrado',\n      );\n    });\n  });\n\n  describe('removerArquivo', () => {\n    it('deve excluir um arquivo corretamente', async () => {\n      // Arrange\n      const caminho = 'documentos/2023/01/arquivo-teste.pdf';\n\n      // Configurar mocks básicos\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      (path.join as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01/arquivo-teste.pdf',\n      );\n\n      // Act\n      await adapter.removerArquivo(caminho);\n\n      // Assert\n      expect(fs.unlinkSync).toHaveBeenCalled();\n    });\n\n    it('deve tratar silenciosamente quando o arquivo não existe', async () => {\n      // Arrange\n      const caminho = 'documentos/2023/01/arquivo-inexistente.pdf';\n\n      // Configurar mocks básicos\n      (fs.existsSync as jest.Mock).mockReturnValue(false);\n      (path.join as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01/arquivo-inexistente.pdf',\n      );\n\n      // Act\n      await adapter.removerArquivo(caminho);\n\n      // Assert\n      // Verificar que o arquivo não foi removido\n      expect(fs.unlinkSync).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('exists', () => {\n    it('deve retornar true quando o arquivo existe', async () => {\n      // Arrange\n      const key = 'documentos/2023/01/arquivo-teste.pdf';\n\n      // Configurar mocks\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      (path.join as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01/arquivo-teste.pdf',\n      );\n\n      // Act\n      const resultado = await adapter.exists(key);\n\n      // Assert\n      expect(resultado).toBe(true);\n    });\n\n    it('deve retornar false quando o arquivo não existe', async () => {\n      // Arrange\n      const key = 'documentos/2023/01/arquivo-inexistente.pdf';\n\n      // Configurar mocks\n      (fs.existsSync as jest.Mock).mockReturnValue(false);\n\n      // Act\n      const resultado = await adapter.exists(key);\n\n      // Assert\n      expect(resultado).toBe(false);\n    });\n  });\n\n  describe('getUrl', () => {\n    it('deve retornar a URL do arquivo', async () => {\n      // Arrange\n      const key = 'documentos/2023/01/arquivo-teste.pdf';\n\n      // Configurar mocks\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n\n      // Act\n      const resultado = await adapter.getUrl(key);\n\n      // Assert\n      expect(resultado).toContain('/documentos/2023/01/arquivo-teste.pdf');\n    });\n\n    it('deve lançar erro quando o arquivo não existe', async () => {\n      // Arrange\n      const caminho = 'documentos/2023/01/arquivo-inexistente.pdf';\n\n      // Configurar mocks\n      (fs.existsSync as jest.Mock).mockReturnValue(false);\n\n      // Act & Assert\n      await expect(adapter.getUrl(caminho)).rejects.toThrow(\n        'Arquivo não encontrado',\n      );\n    });\n  });\n\n  describe('copy', () => {\n    it('deve copiar um arquivo corretamente', async () => {\n      // Arrange\n      const sourceKey = 'documentos/2023/01/arquivo-origem.pdf';\n      const destinationKey = 'documentos/2023/01/arquivo-destino.pdf';\n\n      // Configurar mocks básicos\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      (path.join as jest.Mock).mockImplementation((base, ...args) => {\n        return `/tmp/uploads/${args.join('/')}`;\n      });\n      (path.dirname as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01',\n      );\n\n      // Act\n      const resultado = await adapter.copy(sourceKey, destinationKey);\n\n      // Assert\n      expect(fs.copyFileSync).toHaveBeenCalled();\n      expect(resultado).toEqual(destinationKey);\n    });\n\n    it('deve lançar erro quando falhar ao copiar o arquivo', async () => {\n      // Arrange\n      const sourceKey = 'documentos/2023/01/arquivo-origem.pdf';\n      const destinationKey = 'documentos/2023/01/arquivo-destino.pdf';\n\n      // Configurar mocks\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      (fs.copyFileSync as jest.Mock).mockImplementation(() => {\n        throw new Error('Erro de cópia');\n      });\n\n      // Act & Assert\n      await expect(adapter.copy(sourceKey, destinationKey)).rejects.toThrow(\n        'Erro ao copiar arquivo',\n      );\n    });\n  });\n\n  describe('list', () => {\n    it('deve listar arquivos com um prefixo específico', async () => {\n      // Arrange\n      const prefix = 'documentos/2023/01';\n\n      // Configurar mocks\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n      (fs.readdirSync as jest.Mock).mockReturnValue([\n        'arquivo1.txt',\n        'arquivo2.txt',\n      ]);\n      (fs.statSync as jest.Mock).mockImplementation(() => ({\n        isDirectory: () => false,\n      }));\n\n      // Mock para path.relative e path.dirname\n      (path.relative as jest.Mock).mockImplementation((base, file) => {\n        if (file.includes('arquivo1.txt')) {\n          return 'documentos/2023/01/arquivo1.txt';\n        }\n        if (file.includes('arquivo2.txt')) {\n          return 'documentos/2023/01/arquivo2.txt';\n        }\n        return '';\n      });\n      (path.dirname as jest.Mock).mockReturnValue(\n        '/tmp/uploads/documentos/2023/01',\n      );\n\n      // Act\n      const resultado = await adapter.list(prefix);\n\n      // Assert\n      expect(resultado.length).toBe(2);\n      expect(resultado).toContain('documentos/2023/01/arquivo1.txt');\n      expect(resultado).toContain('documentos/2023/01/arquivo2.txt');\n    });\n\n    it('deve retornar uma lista vazia quando o diretório não existe', async () => {\n      // Arrange\n      const prefix = 'documentos/2023/02';\n\n      // Configurar mocks\n      (fs.existsSync as jest.Mock).mockReturnValue(false);\n\n      // Act\n      const resultado = await adapter.list(prefix);\n\n      // Assert\n      expect(resultado).toEqual([]);\n    });\n  });\n});\n"],"version":3}