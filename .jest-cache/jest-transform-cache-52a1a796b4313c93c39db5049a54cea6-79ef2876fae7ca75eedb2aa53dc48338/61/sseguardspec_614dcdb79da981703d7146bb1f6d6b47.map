{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\tests\\sse.guard.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\tests\\sse.guard.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ExecutionContext } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SseGuard } from '../guards/sse.guard';\nimport { Request } from 'express';\n\ndescribe('SseGuard', () => {\n  let guard: SseGuard;\n  let jwtService: JwtService;\n\n  const mockJwtService = {\n    verifyAsync: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        SseGuard,\n        {\n          provide: JwtService,\n          useValue: mockJwtService,\n        },\n      ],\n    }).compile();\n\n    guard = module.get<SseGuard>(SseGuard);\n    jwtService = module.get<JwtService>(JwtService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  const createMockExecutionContext = (\n    request: Partial<Request>,\n  ): ExecutionContext => {\n    return {\n      switchToHttp: () => ({\n        getRequest: () => request,\n      }),\n    } as ExecutionContext;\n  };\n\n  it('should be defined', () => {\n    expect(guard).toBeDefined();\n  });\n\n  describe('canActivate', () => {\n    it('should allow access with valid token in query parameter', async () => {\n      const validToken = 'valid.jwt.token';\n      const mockPayload = { id: 'user-123', email: 'test@example.com' };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: { token: validToken },\n        headers: {},\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(mockRequest['user']).toEqual(mockPayload);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(validToken);\n    });\n\n    it('should allow access with valid token in Authorization header', async () => {\n      const validToken = 'valid.jwt.token';\n      const mockPayload = { id: 'user-123', email: 'test@example.com' };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: {},\n        headers: { authorization: `Bearer ${validToken}` },\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(mockRequest['user']).toEqual(mockPayload);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(validToken);\n    });\n\n    it('should allow access with valid token in cookie', async () => {\n      const validToken = 'valid.jwt.token';\n      const mockPayload = { id: 'user-123', email: 'test@example.com' };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: {},\n        headers: {},\n        cookies: { access_token: validToken },\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(mockRequest['user']).toEqual(mockPayload);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(validToken);\n    });\n\n    it('should prioritize query parameter over header', async () => {\n      const queryToken = 'query.jwt.token';\n      const headerToken = 'header.jwt.token';\n      const mockPayload = { id: 'user-123', email: 'test@example.com' };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: { token: queryToken },\n        headers: { authorization: `Bearer ${headerToken}` },\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(queryToken);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalledWith(headerToken);\n    });\n\n    it('should prioritize header over cookie', async () => {\n      const headerToken = 'header.jwt.token';\n      const cookieToken = 'cookie.jwt.token';\n      const mockPayload = { id: 'user-123', email: 'test@example.com' };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: {},\n        headers: { authorization: `Bearer ${headerToken}` },\n        cookies: { access_token: cookieToken },\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(headerToken);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalledWith(cookieToken);\n    });\n\n    it('should deny access when no token is provided', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {},\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalled();\n    });\n\n    it('should deny access when token is invalid', async () => {\n      const invalidToken = 'invalid.jwt.token';\n\n      mockJwtService.verifyAsync.mockRejectedValue(new Error('Invalid token'));\n\n      const mockRequest = {\n        query: { token: invalidToken },\n        headers: {},\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(invalidToken);\n    });\n\n    it('should deny access when token is expired', async () => {\n      const expiredToken = 'expired.jwt.token';\n\n      mockJwtService.verifyAsync.mockRejectedValue(new Error('Token expired'));\n\n      const mockRequest = {\n        query: { token: expiredToken },\n        headers: {},\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(expiredToken);\n    });\n\n    it('should handle malformed Authorization header', async () => {\n      const mockRequest = {\n        query: {},\n        headers: { authorization: 'InvalidFormat' },\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalled();\n    });\n\n    it('should handle empty Authorization header', async () => {\n      const mockRequest = {\n        query: {},\n        headers: { authorization: 'Bearer ' },\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalled();\n    });\n\n    it('should handle empty token in query parameter', async () => {\n      const mockRequest = {\n        query: { token: '' },\n        headers: {},\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalled();\n    });\n\n    it('should handle empty cookie token', async () => {\n      const mockRequest = {\n        query: {},\n        headers: {},\n        cookies: { access_token: '' },\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalled();\n    });\n\n    it('should handle JWT service throwing unexpected error', async () => {\n      const validToken = 'valid.jwt.token';\n\n      mockJwtService.verifyAsync.mockRejectedValue(\n        new Error('Unexpected error'),\n      );\n\n      const mockRequest = {\n        query: { token: validToken },\n        headers: {},\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(validToken);\n    });\n\n    it('should handle missing request object', async () => {\n      const context = {\n        switchToHttp: () => ({\n          getRequest: () => null,\n        }),\n      } as ExecutionContext;\n\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalled();\n    });\n\n    it('should handle request without query, headers, or cookies', async () => {\n      const mockRequest = {} as Request;\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(jwtService.verifyAsync).not.toHaveBeenCalled();\n    });\n\n    it('should extract token correctly from complex Authorization header', async () => {\n      const validToken =\n        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\n      const mockPayload = { id: 'user-123', email: 'test@example.com' };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: {},\n        headers: { authorization: `Bearer ${validToken}` },\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(validToken);\n    });\n\n    it('should handle case-insensitive Authorization header', async () => {\n      const validToken = 'valid.jwt.token';\n      const mockPayload = { id: 'user-123', email: 'test@example.com' };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: {},\n        headers: { Authorization: `Bearer ${validToken}` }, // Capital A\n        cookies: {},\n      };\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(jwtService.verifyAsync).toHaveBeenCalledWith(validToken);\n    });\n\n    it('should set user in request object when token is valid', async () => {\n      const validToken = 'valid.jwt.token';\n      const mockPayload = {\n        id: 'user-123',\n        email: 'test@example.com',\n        roles: ['user'],\n        iat: 1234567890,\n        exp: 1234567890 + 3600,\n      };\n\n      mockJwtService.verifyAsync.mockResolvedValue(mockPayload);\n\n      const mockRequest = {\n        query: { token: validToken },\n        headers: {},\n        cookies: {},\n      } as any;\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(true);\n      expect(mockRequest.user).toEqual(mockPayload);\n      expect(mockRequest.user.id).toBe('user-123');\n      expect(mockRequest.user.email).toBe('test@example.com');\n    });\n\n    it('should not set user in request object when token is invalid', async () => {\n      const invalidToken = 'invalid.jwt.token';\n\n      mockJwtService.verifyAsync.mockRejectedValue(new Error('Invalid token'));\n\n      const mockRequest = {\n        query: { token: invalidToken },\n        headers: {},\n        cookies: {},\n      } as any;\n\n      const context = createMockExecutionContext(mockRequest);\n      const result = await guard.canActivate(context);\n\n      expect(result).toBe(false);\n      expect(mockRequest.user).toBeUndefined();\n    });\n  });\n\n  describe('extractToken', () => {\n    it('should extract token from query parameter first', () => {\n      const queryToken = 'query-token';\n      const headerToken = 'header-token';\n      const cookieToken = 'cookie-token';\n\n      const mockRequest = {\n        query: { token: queryToken },\n        headers: { authorization: `Bearer ${headerToken}` },\n        cookies: { access_token: cookieToken },\n      } as any;\n\n      const extractedToken = guard['extractToken'](mockRequest);\n      expect(extractedToken).toBe(queryToken);\n    });\n\n    it('should extract token from Authorization header when query is empty', () => {\n      const headerToken = 'header-token';\n      const cookieToken = 'cookie-token';\n\n      const mockRequest = {\n        query: {},\n        headers: { authorization: `Bearer ${headerToken}` },\n        cookies: { access_token: cookieToken },\n      } as any;\n\n      const extractedToken = guard['extractToken'](mockRequest);\n      expect(extractedToken).toBe(headerToken);\n    });\n\n    it('should extract token from cookie when query and header are empty', () => {\n      const cookieToken = 'cookie-token';\n\n      const mockRequest = {\n        query: {},\n        headers: {},\n        cookies: { access_token: cookieToken },\n      } as any;\n\n      const extractedToken = guard['extractToken'](mockRequest);\n      expect(extractedToken).toBe(cookieToken);\n    });\n\n    it('should return null when no token is found', () => {\n      const mockRequest = {\n        query: {},\n        headers: {},\n        cookies: {},\n      } as any;\n\n      const extractedToken = guard['extractToken'](mockRequest);\n      expect(extractedToken).toBeNull();\n    });\n  });\n});\n"],"version":3}