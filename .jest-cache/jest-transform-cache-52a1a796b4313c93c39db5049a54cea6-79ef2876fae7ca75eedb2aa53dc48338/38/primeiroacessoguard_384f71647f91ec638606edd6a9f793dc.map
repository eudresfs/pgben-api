{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\guards\\primeiro-acesso.guard.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAKwB;AACxB,uCAAyC;AACzC,6CAAmD;AACnD,qCAAqC;AACrC,kEAAwD;AAExD;;;;;;;;;GASG;AAEI,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAEX;IAEA;IAHnB,YACmB,SAAoB,EAEpB,iBAAsC;QAFtC,cAAS,GAAT,SAAS,CAAW;QAEpB,sBAAiB,GAAjB,iBAAiB,CAAqB;IACtD,CAAC;IAEJ,KAAK,CAAC,WAAW,CAAC,OAAyB;QACzC,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAE1B,+DAA+D;QAC/D,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;YACtB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,8CAA8C;QAC9C,MAAM,mBAAmB,GACvB,IAAI,CAAC,SAAS,CAAC,GAAG,CAChB,uBAAuB,EACvB,OAAO,CAAC,UAAU,EAAE,CACrB;YACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAU,uBAAuB,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QAE3E,IAAI,mBAAmB,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC;QACd,CAAC;QAED,mEAAmE;QACnE,IAAI,CAAC;YACH,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;gBAC3D,KAAK,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;gBACtB,MAAM,EAAE,CAAC,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,OAAO,CAAC;aACnD,CAAC,CAAC;YAEH,IAAI,CAAC,eAAe,EAAE,CAAC;gBACrB,MAAM,IAAI,2BAAkB,CAAC,wBAAwB,CAAC,CAAC;YACzD,CAAC;YAED,+CAA+C;YAC/C,IAAI,eAAe,EAAE,eAAe,EAAE,CAAC;gBACrC,MAAM,IAAI,2BAAkB,CAAC;oBAC3B,OAAO,EAAE,4DAA4D;oBACrE,IAAI,EAAE,6BAA6B;oBACnC,QAAQ,EAAE,qCAAqC;iBAChD,CAAC,CAAC;YACL,CAAC;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,2BAAkB,EAAE,CAAC;gBACxC,MAAM,KAAK,CAAC;YACd,CAAC;YAED,0EAA0E;YAC1E,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AA3DY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;IAIR,WAAA,IAAA,0BAAgB,EAAC,wBAAO,CAAC,CAAA;yDADE,gBAAS,oBAAT,gBAAS,oDAED,oBAAU,oBAAV,oBAAU;GAJrC,mBAAmB,CA2D/B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\guards\\primeiro-acesso.guard.ts"],"sourcesContent":["import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Usuario } from '../../entities/usuario.entity';\n\n/**\n * Guard para verificar se o usuário está em primeiro acesso\n *\n * Este guard verifica se o usuário logado possui o campo `primeiro_acesso` como `true`.\n * Se sim, bloqueia o acesso a rotas que não sejam especificamente para alteração\n * de senha no primeiro acesso.\n *\n * Para permitir acesso a uma rota mesmo em primeiro acesso, use o decorator\n * `@AllowPrimeiroAcesso()` na rota ou controller.\n */\n@Injectable()\nexport class PrimeiroAcessoGuard implements CanActivate {\n  constructor(\n    private readonly reflector: Reflector,\n    @InjectRepository(Usuario)\n    private readonly usuarioRepository: Repository<Usuario>,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n\n    // Se não há usuário autenticado, deixar outros guards tratarem\n    if (!user || !user.id) {\n      return true;\n    }\n\n    // Verificar se a rota permite primeiro acesso\n    const allowPrimeiroAcesso =\n      this.reflector.get<boolean>(\n        'allow-primeiro-acesso',\n        context.getHandler(),\n      ) ||\n      this.reflector.get<boolean>('allow-primeiro-acesso', context.getClass());\n\n    if (allowPrimeiroAcesso) {\n      return true;\n    }\n\n    // Buscar dados completos do usuário para verificar primeiro_acesso\n    try {\n      const usuarioCompleto = await this.usuarioRepository.findOne({\n        where: { id: user.id },\n        select: ['id', 'primeiro_acesso', 'nome', 'email'],\n      });\n\n      if (!usuarioCompleto) {\n        throw new ForbiddenException('Usuário não encontrado');\n      }\n\n      // Se usuário está em primeiro acesso, bloquear\n      if (usuarioCompleto?.primeiro_acesso) {\n        throw new ForbiddenException({\n          message: 'Primeiro acesso detectado. Alteração de senha obrigatória.',\n          code: 'PRIMEIRO_ACESSO_OBRIGATORIO',\n          redirect: '/auth/alterar-senha-primeiro-acesso',\n        });\n      }\n\n      return true;\n    } catch (error) {\n      if (error instanceof ForbiddenException) {\n        throw error;\n      }\n\n      // Em caso de erro na consulta, permitir acesso para não quebrar o sistema\n      console.error('Erro ao verificar primeiro acesso:', error);\n      return true;\n    }\n  }\n}\n"],"version":3}