{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\auditoria-pagamento.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\auditoria-pagamento.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuditoriaPagamentoService } from '../../services/auditoria-pagamento.service';\nimport { ConfigService } from '@nestjs/config';\nimport { Logger } from '@nestjs/common';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../enums/metodo-pagamento.enum';\n\n/**\n * Testes unitários para o serviço de auditoria de pagamento\n *\n * Verifica o funcionamento correto das operações de registro de logs\n * para ações sensíveis relacionadas a pagamentos.\n *\n * @author Equipe PGBen\n */\ndescribe('AuditoriaPagamentoService', () => {\n  let service: AuditoriaPagamentoService;\n  let logger: Logger;\n  let configService: ConfigService;\n\n  // Mock do Logger\n  const mockLogger = {\n    log: jest.fn(),\n    warn: jest.fn(),\n    error: jest.fn(),\n    debug: jest.fn(),\n  };\n\n  // Mock do ConfigService\n  const mockConfigService = {\n    get: jest.fn().mockImplementation((key) => {\n      if (key === 'auditoria.nivel') {\n        return 'completo';\n      }\n      if (key === 'auditoria.mascaraDados') {\n        return true;\n      }\n      return null;\n    }),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuditoriaPagamentoService,\n        {\n          provide: Logger,\n          useValue: mockLogger,\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<AuditoriaPagamentoService>(AuditoriaPagamentoService);\n    logger = module.get<Logger>(Logger);\n    configService = module.get<ConfigService>(ConfigService);\n\n    // Limpar mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  describe('logCriacaoPagamento', () => {\n    const pagamento = {\n      id: 'pagamento-id',\n      solicitacaoId: 'solicitacao-id',\n      valor: 500.0,\n      status: StatusPagamentoEnum.AGENDADO,\n      metodoPagamento: MetodoPagamentoEnum.PIX,\n      dadosBancarios: {\n        pixTipo: 'cpf',\n        pixChave: '12345678909',\n      },\n    };\n    const usuarioId = 'usuario-id';\n\n    it('deve registrar log de criação de pagamento com dados mascarados', () => {\n      // Executar método\n      service.logCriacaoPagamento(pagamento, usuarioId);\n\n      // Verificar resultado\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        expect.stringContaining('Pagamento criado'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém dados mascarados\n      const logMessage = mockLogger.log.mock.calls[0][0];\n      expect(logMessage).not.toContain('12345678909');\n      expect(logMessage).toContain('***');\n    });\n\n    it('deve registrar log sem mascaramento quando configurado', () => {\n      // Alterar configuração para não mascarar dados\n      mockConfigService.get.mockImplementation((key) => {\n        if (key === 'auditoria.nivel') {\n          return 'completo';\n        }\n        if (key === 'auditoria.mascaraDados') {\n          return false;\n        }\n        return null;\n      });\n\n      // Executar método\n      service.logCriacaoPagamento(pagamento, usuarioId);\n\n      // Verificar resultado\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        expect.stringContaining('Pagamento criado'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém dados completos\n      const logMessage = mockLogger.log.mock.calls[0][0];\n      expect(logMessage).toContain(pagamento.id);\n      expect(logMessage).toContain(pagamento.solicitacaoId);\n    });\n  });\n\n  describe('logMudancaStatus', () => {\n    const pagamentoId = 'pagamento-id';\n    const statusAntigo = StatusPagamentoEnum.AGENDADO;\n    const statusNovo = StatusPagamentoEnum.LIBERADO;\n    const usuarioId = 'usuario-id';\n\n    it('deve registrar log de mudança de status', () => {\n      // Executar método\n      service.logMudancaStatus(\n        pagamentoId,\n        statusAntigo,\n        statusNovo,\n        usuarioId,\n      );\n\n      // Verificar resultado\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        expect.stringContaining('Status alterado'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém os status\n      const logMessage = mockLogger.log.mock.calls[0][0];\n      expect(logMessage).toContain(statusAntigo);\n      expect(logMessage).toContain(statusNovo);\n      expect(logMessage).toContain(pagamentoId);\n    });\n  });\n\n  describe('logCancelamentoPagamento', () => {\n    const pagamentoId = 'pagamento-id';\n    const motivo = 'Pagamento cancelado a pedido do beneficiário';\n    const usuarioId = 'usuario-id';\n\n    it('deve registrar log de cancelamento de pagamento', () => {\n      // Executar método\n      service.logCancelamentoPagamento(pagamentoId, motivo, usuarioId);\n\n      // Verificar resultado\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        expect.stringContaining('Pagamento cancelado'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém o motivo\n      const logMessage = mockLogger.warn.mock.calls[0][0];\n      expect(logMessage).toContain(motivo);\n      expect(logMessage).toContain(pagamentoId);\n    });\n  });\n\n  describe('logUploadComprovante', () => {\n    const pagamentoId = 'pagamento-id';\n    const comprovanteId = 'comprovante-id';\n    const usuarioId = 'usuario-id';\n    const nomeArquivo = 'comprovante.pdf';\n\n    it('deve registrar log de upload de comprovante', () => {\n      // Executar método\n      service.logUploadComprovante(\n        pagamentoId,\n        comprovanteId,\n        nomeArquivo,\n        usuarioId,\n      );\n\n      // Verificar resultado\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        expect.stringContaining('Comprovante enviado'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém os dados do comprovante\n      const logMessage = mockLogger.log.mock.calls[0][0];\n      expect(logMessage).toContain(pagamentoId);\n      expect(logMessage).toContain(comprovanteId);\n      expect(logMessage).toContain(nomeArquivo);\n    });\n  });\n\n  describe('logRemocaoComprovante', () => {\n    const pagamentoId = 'pagamento-id';\n    const comprovanteId = 'comprovante-id';\n    const usuarioId = 'usuario-id';\n    const motivo = 'Documento incorreto';\n\n    it('deve registrar log de remoção de comprovante', () => {\n      // Executar método\n      service.logRemocaoComprovante(\n        pagamentoId,\n        comprovanteId,\n        motivo,\n        usuarioId,\n      );\n\n      // Verificar resultado\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        expect.stringContaining('Comprovante removido'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém os dados da remoção\n      const logMessage = mockLogger.warn.mock.calls[0][0];\n      expect(logMessage).toContain(pagamentoId);\n      expect(logMessage).toContain(comprovanteId);\n      expect(logMessage).toContain(motivo);\n    });\n  });\n\n  describe('logConfirmacaoRecebimento', () => {\n    const pagamentoId = 'pagamento-id';\n    const confirmacaoId = 'confirmacao-id';\n    const usuarioId = 'usuario-id';\n\n    it('deve registrar log de confirmação de recebimento', () => {\n      // Executar método\n      service.logConfirmacaoRecebimento(pagamentoId, confirmacaoId, usuarioId);\n\n      // Verificar resultado\n      expect(mockLogger.log).toHaveBeenCalledWith(\n        expect.stringContaining('Recebimento confirmado'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém os dados da confirmação\n      const logMessage = mockLogger.log.mock.calls[0][0];\n      expect(logMessage).toContain(pagamentoId);\n      expect(logMessage).toContain(confirmacaoId);\n    });\n  });\n\n  describe('logErroProcessamento', () => {\n    const pagamentoId = 'pagamento-id';\n    const erro = new Error('Erro ao processar pagamento');\n    const contexto = 'atualizarStatus';\n\n    it('deve registrar log de erro de processamento', () => {\n      // Executar método\n      service.logErroProcessamento(pagamentoId, erro, contexto);\n\n      // Verificar resultado\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        expect.stringContaining('Erro ao processar pagamento'),\n        expect.stringContaining('AuditoriaPagamento'),\n      );\n\n      // Verificar que o log contém os dados do erro\n      const logMessage = mockLogger.error.mock.calls[0][0];\n      expect(logMessage).toContain(pagamentoId);\n      expect(logMessage).toContain(contexto);\n      expect(logMessage).toContain(erro.message);\n    });\n  });\n});\n"],"version":3}