{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\enhanced-metrics.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,gFAA2E;AAC3E,0EAAqE;AAIrE;;;;;GAKG;AACH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,UAAqC,CAAC;IAC1C,IAAI,cAAsC,CAAC;IAE3C,0CAA0C;IAC1C,MAAM,kBAAkB,GAAG;QACzB,UAAU,EAAE,IAAI;aACb,EAAE,EAAE;aACJ,iBAAiB,CAChB,+HAA+H,CAChI;QACH,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;KAC7B,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,uDAAyB,CAAC;YACxC,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,iDAAsB;oBAC/B,QAAQ,EAAE,kBAAkB;iBAC7B;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CACrB,uDAAyB,CAC1B,CAAC;QACF,cAAc,GAAG,MAAM,CAAC,GAAG,CAAyB,iDAAsB,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;aACV,CAAC;YAEzB,MAAM,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAE1C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACjD,cAAc,EACd,YAAY,CACb,CAAC;YACF,uDAAuD;YACvD,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC7C,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,CACjD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;YACzE,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;aACV,CAAC;YAEzB,wDAAwD;YACxD,kBAAkB,CAAC,UAAU,CAAC,qBAAqB,CACjD,yDAAyD,CAC1D,CAAC;YAEF,MAAM,UAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAElD,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACzD,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACjD,cAAc,EACd,YAAY,CACb,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAC7C,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAC7C,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;aACV,CAAC;YAEzB,yDAAyD;YACzD,kBAAkB,CAAC,UAAU,CAAC,qBAAqB,CACjD,yDAAyD,CAC1D,CAAC;YAEF,MAAM,UAAU,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;YAElD,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACzD,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACjD,cAAc,EACd,YAAY,CACb,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAC7C,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAC7C,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;aACV,CAAC;YAEzB,sDAAsD;YACtD,kBAAkB,CAAC,UAAU,CAAC,qBAAqB,CACjD,qDAAqD,CACtD,CAAC;YAEF,MAAM,UAAU,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAEhD,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAChE,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACzD,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACjD,cAAc,EACd,YAAY,CACb,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAC3C,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAC3C,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;gBACpB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;aACV,CAAC;YAEzB,oDAAoD;YACpD,kBAAkB,CAAC,UAAU,CAAC,qBAAqB,CACjD,kEAAkE,CACnE,CAAC;YAEF,MAAM,UAAU,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YAE/C,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACrD,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,oBAAoB,CACjD,cAAc,EACd,YAAY,CACb,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,CACrD,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAChD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\enhanced-metrics.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { EnhancedMetricsController } from '../enhanced-metrics.controller';\nimport { EnhancedMetricsService } from '../enhanced-metrics.service';\nimport { Response } from 'express';\nimport { Public } from '../../../auth/decorators/public.decorator';\n\n/**\n * Testes unitários para o controlador de métricas aprimoradas\n *\n * Verifica o funcionamento do endpoint que expõe as métricas\n * avançadas da aplicação para o Prometheus, com foco em segurança e compliance LGPD\n */\ndescribe('EnhancedMetricsController', () => {\n  let controller: EnhancedMetricsController;\n  let metricsService: EnhancedMetricsService;\n\n  // Mock do serviço de métricas aprimoradas\n  const mockMetricsService = {\n    getMetrics: jest\n      .fn()\n      .mockResolvedValue(\n        'enhanced_metrics_data\\nsecurity_metric 1\\ndocument_metric 1\\nsystem_metric 1\\ncache_operations_total 10\\ncache_hit_ratio 0.75',\n      ),\n    updateMemoryUsage: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [EnhancedMetricsController],\n      providers: [\n        {\n          provide: EnhancedMetricsService,\n          useValue: mockMetricsService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<EnhancedMetricsController>(\n      EnhancedMetricsController,\n    );\n    metricsService = module.get<EnhancedMetricsService>(EnhancedMetricsService);\n  });\n\n  it('deve ser definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('getMetrics', () => {\n    it('deve retornar todas as métricas no formato correto', async () => {\n      // Mock da resposta\n      const mockResponse = {\n        setHeader: jest.fn(),\n        send: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      await controller.getMetrics(mockResponse);\n\n      expect(metricsService.getMetrics).toHaveBeenCalled();\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\n        'Content-Type',\n        'text/plain',\n      );\n      // Verificar se a resposta contém as métricas esperadas\n      expect(mockResponse.send).toHaveBeenCalled();\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('enhanced_metrics_data')\n      );\n    });\n  });\n\n  describe('getSecurityMetrics', () => {\n    it('deve retornar as métricas de segurança no formato correto', async () => {\n      // Mock da resposta\n      const mockResponse = {\n        setHeader: jest.fn(),\n        send: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      // Configurar o mock para retornar métricas de segurança\n      mockMetricsService.getMetrics.mockResolvedValueOnce(\n        'security_metric 1\\nsecurity_metric 2\\ndocument_metric 1',\n      );\n\n      await controller.getSecurityMetrics(mockResponse);\n\n      expect(mockMetricsService.getMetrics).toHaveBeenCalled();\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\n        'Content-Type',\n        'text/plain',\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('security_metric 1')\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('security_metric 2')\n      );\n    });\n  });\n\n  describe('getDocumentMetrics', () => {\n    it('deve retornar as métricas de documentos no formato correto', async () => {\n      // Mock da resposta\n      const mockResponse = {\n        setHeader: jest.fn(),\n        send: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      // Configurar o mock para retornar métricas de documentos\n      mockMetricsService.getMetrics.mockResolvedValueOnce(\n        'document_metric 1\\ndocument_metric 2\\nsecurity_metric 1',\n      );\n\n      await controller.getDocumentMetrics(mockResponse);\n\n      expect(mockMetricsService.getMetrics).toHaveBeenCalled();\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\n        'Content-Type',\n        'text/plain',\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('document_metric 1')\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('document_metric 2')\n      );\n    });\n  });\n\n  describe('getSystemMetrics', () => {\n    it('deve retornar as métricas de sistema no formato correto', async () => {\n      // Mock da resposta\n      const mockResponse = {\n        setHeader: jest.fn(),\n        send: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      // Configurar o mock para retornar métricas de sistema\n      mockMetricsService.getMetrics.mockResolvedValueOnce(\n        'system_metric 1\\nsystem_metric 2\\nsecurity_metric 1',\n      );\n\n      await controller.getSystemMetrics(mockResponse);\n\n      expect(mockMetricsService.updateMemoryUsage).toHaveBeenCalled();\n      expect(mockMetricsService.getMetrics).toHaveBeenCalled();\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\n        'Content-Type',\n        'text/plain',\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('system_metric 1')\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('system_metric 2')\n      );\n    });\n  });\n\n  describe('getCacheMetrics', () => {\n    it('deve retornar as métricas de cache no formato correto', async () => {\n      // Mock da resposta\n      const mockResponse = {\n        setHeader: jest.fn(),\n        send: jest.fn().mockReturnThis(),\n      } as unknown as Response;\n\n      // Configurar o mock para retornar métricas de cache\n      mockMetricsService.getMetrics.mockResolvedValueOnce(\n        'cache_operations_total 10\\ncache_hit_ratio 0.75\\nsystem_metric 1',\n      );\n\n      await controller.getCacheMetrics(mockResponse);\n\n      expect(metricsService.getMetrics).toHaveBeenCalled();\n      expect(mockResponse.setHeader).toHaveBeenCalledWith(\n        'Content-Type',\n        'text/plain',\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('cache_operations_total 10')\n      );\n      expect(mockResponse.send).toHaveBeenCalledWith(\n        expect.stringContaining('cache_hit_ratio 0.75')\n      );\n    });\n  });\n});\n"],"version":3}