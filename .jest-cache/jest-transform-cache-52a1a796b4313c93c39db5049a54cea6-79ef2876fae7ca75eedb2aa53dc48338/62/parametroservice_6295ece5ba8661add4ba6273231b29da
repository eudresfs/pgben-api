6ba93ce2571d27f4f7960a53cf3644c0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ParametroService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParametroService = void 0;
const common_1 = require("@nestjs/common");
const parametro_repository_1 = require("../repositories/parametro.repository");
const parametro_entity_1 = require("../../../entities/parametro.entity");
const parametro_response_dto_1 = require("../dtos/parametro/parametro-response.dto");
const parametro_nao_encontrado_exception_1 = require("../exceptions/parametro-nao-encontrado.exception");
const parametro_tipo_invalido_exception_1 = require("../exceptions/parametro-tipo-invalido.exception");
const parametro_tipo_enum_1 = require("../../../enums/parametro-tipo.enum");
const converters_1 = require("../util/converters");
const exceptions_1 = require("../../../shared/exceptions");
/**
 * Serviço para gerenciamento de parâmetros do sistema
 *
 * Responsável por:
 * - Operações CRUD para parâmetros
 * - Sistema de cache para otimização
 * - Conversão de tipos dinâmica
 * - Validação de parâmetros
 */
let ParametroService = ParametroService_1 = class ParametroService {
    parametroRepository;
    logger = new common_1.Logger(ParametroService_1.name);
    // Cache em memória para parâmetros (chave -> valor)
    cache = new Map();
    // Tempo padrão de expiração do cache em milissegundos (5 minutos)
    CACHE_TTL = 5 * 60 * 1000;
    constructor(parametroRepository) {
        this.parametroRepository = parametroRepository;
    }
    /**
     * Limpa todo o cache de parâmetros
     */
    limparCache() {
        this.cache.clear();
        this.logger.log('Cache de parâmetros limpo');
    }
    /**
     * Remove um item específico do cache
     * @param chave Chave do parâmetro a ser removido do cache
     */
    invalidarCache(chave) {
        this.cache.delete(chave);
        this.logger.debug(`Cache para parâmetro '${chave}' invalidado`);
    }
    /**
     * Busca todos os parâmetros, convertendo-os para DTOs de resposta
     * @param categoria Categoria opcional para filtrar
     * @returns Lista de DTOs de resposta de parâmetros
     */
    async buscarTodos(categoria) {
        const parametros = await this.parametroRepository.findAll(categoria);
        return parametros.map(p => this.mapearParaDto(p));
    }
    /**
     * Busca um parâmetro por sua chave
     * @param chave Chave do parâmetro
     * @returns DTO de resposta do parâmetro
     * @throws ParametroNaoEncontradoException se o parâmetro não existir
     */
    async buscarPorChave(chave) {
        const parametro = await this.parametroRepository.findByChave(chave);
        if (!parametro) {
            throw new parametro_nao_encontrado_exception_1.ParametroNaoEncontradoException(chave);
        }
        return this.mapearParaDto(parametro);
    }
    /**
     * Cria um novo parâmetro
     * @param dto DTO com dados para criação
     * @returns DTO de resposta do parâmetro criado
     */
    async criar(dto) {
        // Verificar se já existe parâmetro com mesma chave
        const existente = await this.parametroRepository.existsByChave(dto.chave);
        if (existente) {
            throw new exceptions_1.ValidationErrorException('chave', dto.chave, 'string', `Parâmetro com chave '${dto.chave}' já existe`);
        }
        // Converter valor para string antes de salvar
        const valorString = converters_1.ParametroConverter.paraString(dto.valor, dto.tipo);
        const parametro = new parametro_entity_1.Parametro();
        parametro.chave = dto.chave;
        parametro.descricao = dto.descricao;
        parametro.tipo = dto.tipo;
        parametro.valor = valorString;
        parametro.categoria = dto.categoria;
        // Escopo e editável não estão presentes na entidade Parametro ainda
        const salvo = await this.parametroRepository.save(parametro);
        return this.mapearParaDto(salvo);
    }
    /**
     * Atualiza um parâmetro existente
     * @param chave Chave do parâmetro
     * @param dto DTO com dados para atualização
     * @returns DTO de resposta do parâmetro atualizado
     * @throws ParametroNaoEncontradoException se o parâmetro não existir
     */
    async atualizar(chave, dto) {
        const parametro = await this.parametroRepository.findByChave(chave);
        if (!parametro) {
            throw new parametro_nao_encontrado_exception_1.ParametroNaoEncontradoException(chave);
        }
        // Verificar se o parâmetro é editável (implementação futura)
        const editavel = true; // Placeholder para implementação futura
        if (!editavel) {
            throw new exceptions_1.InvalidOperationException('editar parâmetro', `Parâmetro '${chave}' não é editável`, 'não editável', 'editável');
        }
        // Converter valor para string antes de salvar (se fornecido)
        if (dto.valor !== undefined) {
            parametro.valor = converters_1.ParametroConverter.paraString(dto.valor, parametro.tipo);
        }
        if (dto.descricao !== undefined) {
            parametro.descricao = dto.descricao;
        }
        if (dto.categoria !== undefined) {
            parametro.categoria = dto.categoria;
        }
        // Escopo será implementado posteriormente
        // if (dto.escopo !== undefined) {
        //   parametro.escopo = dto.escopo;
        // }
        const salvo = await this.parametroRepository.save(parametro);
        // Invalidar cache para este parâmetro
        this.invalidarCache(chave);
        return this.mapearParaDto(salvo);
    }
    /**
     * Remove um parâmetro
     * @param chave Chave do parâmetro
     * @throws ParametroNaoEncontradoException se o parâmetro não existir
     */
    async remover(chave) {
        const parametro = await this.parametroRepository.findByChave(chave);
        if (!parametro) {
            throw new parametro_nao_encontrado_exception_1.ParametroNaoEncontradoException(chave);
        }
        // Verificar se o parâmetro é editável (implementação futura)
        const editavel = true; // Placeholder para implementação futura
        if (!editavel) {
            throw new exceptions_1.InvalidOperationException('remover parâmetro', `Parâmetro '${chave}' não pode ser removido pois não é editável`, 'não editável', 'editável');
        }
        await this.parametroRepository.remove(parametro.id);
        // Invalidar cache para este parâmetro
        this.invalidarCache(chave);
        this.logger.log(`Parâmetro '${chave}' removido`);
    }
    /**
     * Busca o valor tipado de um parâmetro
     * @param chave Chave do parâmetro
     * @param padrao Valor padrão opcional caso o parâmetro não exista
     * @returns Valor do parâmetro com tipo correto
     */
    async obterValor(chave, padrao) {
        try {
            // Verificar se está no cache
            const cacheItem = this.cache.get(chave);
            if (cacheItem && cacheItem.expiraEm > Date.now()) {
                return cacheItem.valor;
            }
            const parametro = await this.parametroRepository.findByChave(chave);
            if (!parametro) {
                if (padrao !== undefined) {
                    return padrao;
                }
                throw new parametro_nao_encontrado_exception_1.ParametroNaoEncontradoException(chave);
            }
            // Converter para o tipo correto
            const valorConvertido = converters_1.ParametroConverter.paraValorTipado(chave, parametro.valor, parametro.tipo);
            // Armazenar no cache
            this.cache.set(chave, {
                valor: valorConvertido,
                expiraEm: Date.now() + this.CACHE_TTL
            });
            return valorConvertido;
        }
        catch (error) {
            if (error instanceof parametro_nao_encontrado_exception_1.ParametroNaoEncontradoException && padrao !== undefined) {
                return padrao;
            }
            throw error;
        }
    }
    /**
     * Busca um valor booleano
     * @param chave Chave do parâmetro
     * @param padrao Valor padrão opcional
     * @returns Valor booleano
     */
    async obterBooleano(chave, padrao) {
        const valor = await this.obterValor(chave, padrao);
        if (typeof valor === 'boolean') {
            return valor;
        }
        throw new parametro_tipo_invalido_exception_1.ParametroTipoInvalidoException(chave, valor, parametro_tipo_enum_1.ParametroTipoEnum.BOOLEAN);
    }
    /**
     * Busca um valor numérico
     * @param chave Chave do parâmetro
     * @param padrao Valor padrão opcional
     * @returns Valor numérico
     */
    async obterNumero(chave, padrao) {
        const valor = await this.obterValor(chave, padrao);
        if (typeof valor === 'number') {
            return valor;
        }
        throw new parametro_tipo_invalido_exception_1.ParametroTipoInvalidoException(chave, valor, parametro_tipo_enum_1.ParametroTipoEnum.NUMBER);
    }
    /**
     * Busca um valor string
     * @param chave Chave do parâmetro
     * @param padrao Valor padrão opcional
     * @returns Valor string
     */
    async obterTexto(chave, padrao) {
        const valor = await this.obterValor(chave, padrao);
        if (typeof valor === 'string') {
            return valor;
        }
        throw new parametro_tipo_invalido_exception_1.ParametroTipoInvalidoException(chave, valor, parametro_tipo_enum_1.ParametroTipoEnum.STRING);
    }
    /**
     * Busca um valor data
     * @param chave Chave do parâmetro
     * @param padrao Valor padrão opcional
     * @returns Valor data
     */
    async obterData(chave, padrao) {
        const valor = await this.obterValor(chave, padrao);
        if (valor instanceof Date) {
            return valor;
        }
        throw new parametro_tipo_invalido_exception_1.ParametroTipoInvalidoException(chave, valor, parametro_tipo_enum_1.ParametroTipoEnum.DATE);
    }
    /**
     * Busca um valor JSON
     * @param chave Chave do parâmetro
     * @param padrao Valor padrão opcional
     * @returns Valor JSON (objeto ou array)
     */
    async obterJson(chave, padrao) {
        const valor = await this.obterValor(chave, padrao);
        if (typeof valor === 'object') {
            return valor;
        }
        throw new parametro_tipo_invalido_exception_1.ParametroTipoInvalidoException(chave, valor, parametro_tipo_enum_1.ParametroTipoEnum.JSON);
    }
    /**
     * Define um tempo personalizado para expiração do cache
     * @param ttlMs Tempo de vida em milissegundos
     */
    definirTempoCacheMs(ttlMs) {
        if (ttlMs <= 0) {
            throw new exceptions_1.ValidationErrorException('ttlMs', ttlMs, 'number', 'Tempo de cache deve ser maior que zero');
        }
        this.logger.log(`Tempo de cache alterado para ${ttlMs}ms`);
    }
    /**
     * Converte uma entidade Parametro para um DTO de resposta
     * @param parametro Entidade a ser convertida
     * @returns DTO de resposta
     */
    mapearParaDto(parametro) {
        const dto = new parametro_response_dto_1.ParametroResponseDto();
        dto.chave = parametro.chave;
        dto.descricao = parametro.descricao;
        dto.tipo = parametro.tipo;
        dto.valor = converters_1.ParametroConverter.paraValorTipado(parametro.chave, parametro.valor, parametro.tipo);
        dto.valor_formatado = converters_1.ParametroConverter.formatarParaExibicao(dto.valor, parametro.tipo);
        dto.categoria = parametro.categoria;
        // Escopo e editável serão implementados posteriormente
        // dto.escopo = parametro.escopo;
        // dto.editavel = parametro.editavel;
        dto.created_at = parametro.created_at;
        dto.updated_at = parametro.updated_at;
        return dto;
    }
};
exports.ParametroService = ParametroService;
exports.ParametroService = ParametroService = ParametroService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof parametro_repository_1.ParametroRepository !== "undefined" && parametro_repository_1.ParametroRepository) === "function" ? _a : Object])
], ParametroService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,