8614ba0a146af8d5509eb30e0cf09da9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuditoriaQueueProcessor_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaQueueProcessor = void 0;
const common_1 = require("@nestjs/common");
const bull_1 = require("@nestjs/bull");
const bull_2 = require("bull");
const log_auditoria_repository_1 = require("../repositories/log-auditoria.repository");
const tipo_operacao_enum_1 = require("../../../enums/tipo-operacao.enum");
const bull_config_1 = require("../../../config/bull.config");
/**
 * Processador da Fila de Auditoria
 *
 * Responsável por processar os logs de auditoria enfileirados, garantindo
 * que o registro de operações seja feito de forma assíncrona sem impactar
 * na performance das requisições enquanto mantém a rastreabilidade
 * das operações para compliance com LGPD.
 *
 * Esta implementação não usa o decorador @Processor para evitar duplicação
 * de processadores. Em vez disso, registra o processador manualmente na fila.
 */
let AuditoriaQueueProcessor = AuditoriaQueueProcessor_1 = class AuditoriaQueueProcessor {
    logAuditoriaRepository;
    auditoriaQueue;
    logger = new common_1.Logger(AuditoriaQueueProcessor_1.name);
    constructor(
    // ← MUDANÇA: Use o repository customizado em vez do TypeORM direto
    logAuditoriaRepository, auditoriaQueue) {
        this.logAuditoriaRepository = logAuditoriaRepository;
        this.auditoriaQueue = auditoriaQueue;
    }
    /**
     * Registra o processador manualmente na fila quando o módulo é inicializado
     */
    async onModuleInit() {
        try {
            // Registra o processador de logs de auditoria
            if (!bull_config_1.registeredProcessors.has('registrar-log')) {
                await this.auditoriaQueue.process('registrar-log', async (job) => {
                    return this.processarLogAuditoria(job);
                });
                bull_config_1.registeredProcessors.add('registrar-log');
                this.logger.log('Processador registrar-log registrado com sucesso');
            }
            else {
                this.logger.warn('Processador registrar-log já registrado, ignorando registro duplicado');
            }
            // Registra o processador de acesso a dados sensíveis
            if (!bull_config_1.registeredProcessors.has('registrar-acesso-dados-sensiveis')) {
                await this.auditoriaQueue.process('registrar-acesso-dados-sensiveis', async (job) => {
                    return this.processarAcessoDadosSensiveis(job);
                });
                bull_config_1.registeredProcessors.add('registrar-acesso-dados-sensiveis');
                this.logger.log('Processador registrar-acesso-dados-sensiveis registrado com sucesso');
            }
            else {
                this.logger.warn('Processador registrar-acesso-dados-sensiveis já registrado, ignorando registro duplicado');
            }
        }
        catch (error) {
            this.logger.error(`Erro ao registrar processadores: ${error.message}`, error.stack);
        }
    }
    /**
     * Processa os logs de auditoria enfileirados
     *
     * @param job Trabalho contendo os dados do log de auditoria
     */
    async processarLogAuditoria(job) {
        try {
            const logData = job.data;
            this.logger.debug(`Processando log de auditoria: ${logData.entidade_afetada} - ${logData.tipo_operacao}`);
            // ← MUDANÇA: Use o método create do repository customizado
            const savedLog = await this.logAuditoriaRepository.create(logData);
            this.logger.debug(`Log de auditoria processado com sucesso: ID ${savedLog.id}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar log de auditoria: ${error.message}`, error.stack);
            // Rejeita o job para que seja tentado novamente (conforme configuração de backoff)
            throw error;
        }
    }
    /**
     * Processa os registros de acesso a dados sensíveis
     *
     * @param job Trabalho contendo os dados de acesso a dados sensíveis
     */
    async processarAcessoDadosSensiveis(job) {
        try {
            const { usuarioId, entidade, entidadeId, camposSensiveis, ip, userAgent, endpoint, metodo, timestamp, } = job.data;
            this.logger.debug(`Processando acesso a dados sensíveis: ${entidade} - Campos: ${camposSensiveis.join(', ')}`);
            // ← MUDANÇA: Crie um DTO e use o repository customizado
            const createLogDto = {
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.ACCESS,
                entidade_afetada: entidade,
                entidade_id: entidadeId,
                dados_anteriores: {},
                dados_novos: {},
                usuario_id: usuarioId,
                ip_origem: ip,
                user_agent: userAgent,
                endpoint: endpoint,
                metodo_http: metodo,
                dados_sensiveis_acessados: camposSensiveis,
                data_hora: timestamp || new Date(),
                descricao: `Acesso a dados sensíveis (${camposSensiveis.join(', ')}) da entidade ${entidade}`,
                validar: function (validationGroup) {
                    throw new Error('Function not implemented.');
                },
            };
            // Use o repository customizado
            const savedLog = await this.logAuditoriaRepository.create(createLogDto);
            this.logger.debug(`Acesso a dados sensíveis registrado com sucesso: ID ${savedLog.id}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar acesso a dados sensíveis: ${error.message}`, error.stack);
            // Rejeita o job para que seja tentado novamente (conforme configuração de backoff)
            throw error;
        }
    }
};
exports.AuditoriaQueueProcessor = AuditoriaQueueProcessor;
exports.AuditoriaQueueProcessor = AuditoriaQueueProcessor = AuditoriaQueueProcessor_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, bull_1.InjectQueue)('auditoria')),
    __metadata("design:paramtypes", [typeof (_a = typeof log_auditoria_repository_1.LogAuditoriaRepository !== "undefined" && log_auditoria_repository_1.LogAuditoriaRepository) === "function" ? _a : Object, typeof (_b = typeof bull_2.Queue !== "undefined" && bull_2.Queue) === "function" ? _b : Object])
], AuditoriaQueueProcessor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGF1ZGl0b3JpYVxcc2VydmljZXNcXGF1ZGl0b3JpYS1xdWV1ZS5wcm9jZXNzb3IudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBa0U7QUFDbEUsdUNBQTJDO0FBQzNDLCtCQUFrQztBQUNsQyx1RkFBa0Y7QUFFbEYsMEVBQWlFO0FBQ2pFLDZEQUFtRTtBQUVuRTs7Ozs7Ozs7OztHQVVHO0FBRUksSUFBTSx1QkFBdUIsK0JBQTdCLE1BQU0sdUJBQXVCO0lBS2Y7SUFFQTtJQU5GLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyx5QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVuRTtJQUNFLG1FQUFtRTtJQUNsRCxzQkFBOEMsRUFFOUMsY0FBcUI7UUFGckIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUU5QyxtQkFBYyxHQUFkLGNBQWMsQ0FBTztJQUNyQyxDQUFDO0lBRUo7O09BRUc7SUFDSCxLQUFLLENBQUMsWUFBWTtRQUNoQixJQUFJLENBQUM7WUFDSCw4Q0FBOEM7WUFDOUMsSUFBSSxDQUFDLGtDQUFvQixDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO2dCQUMvQyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7b0JBQy9ELE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxDQUFDLENBQUMsQ0FBQztnQkFFSCxrQ0FBb0IsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7WUFDdEUsQ0FBQztpQkFBTSxDQUFDO2dCQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNkLHVFQUF1RSxDQUN4RSxDQUFDO1lBQ0osQ0FBQztZQUVELHFEQUFxRDtZQUNyRCxJQUFJLENBQUMsa0NBQW9CLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLEVBQUUsQ0FBQztnQkFDbEUsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FDL0Isa0NBQWtDLEVBQ2xDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtvQkFDWixPQUFPLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDakQsQ0FBQyxDQUNGLENBQUM7Z0JBRUYsa0NBQW9CLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Z0JBQzdELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUNiLHFFQUFxRSxDQUN0RSxDQUFDO1lBQ0osQ0FBQztpQkFBTSxDQUFDO2dCQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUNkLDBGQUEwRixDQUMzRixDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2Ysb0NBQW9DLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFDbkQsS0FBSyxDQUFDLEtBQUssQ0FDWixDQUFDO1FBQ0osQ0FBQztJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEdBQStCO1FBQ3pELElBQUksQ0FBQztZQUNILE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsaUNBQWlDLE9BQU8sQ0FBQyxnQkFBZ0IsTUFBTSxPQUFPLENBQUMsYUFBYSxFQUFFLENBQ3ZGLENBQUM7WUFFRiwyREFBMkQ7WUFDM0QsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRW5FLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLCtDQUErQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQzdELENBQUM7UUFDSixDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUNmLHVDQUF1QyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQ3RELEtBQUssQ0FBQyxLQUFLLENBQ1osQ0FBQztZQUNGLG1GQUFtRjtZQUNuRixNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxHQUFhO1FBQy9DLElBQUksQ0FBQztZQUNILE1BQU0sRUFDSixTQUFTLEVBQ1QsUUFBUSxFQUNSLFVBQVUsRUFDVixlQUFlLEVBQ2YsRUFBRSxFQUNGLFNBQVMsRUFDVCxRQUFRLEVBQ1IsTUFBTSxFQUNOLFNBQVMsR0FDVixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFFYixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZix5Q0FBeUMsUUFBUSxjQUFjLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDNUYsQ0FBQztZQUVGLHdEQUF3RDtZQUN4RCxNQUFNLFlBQVksR0FBMEI7Z0JBQzFDLGFBQWEsRUFBRSxpQ0FBWSxDQUFDLE1BQU07Z0JBQ2xDLGdCQUFnQixFQUFFLFFBQVE7Z0JBQzFCLFdBQVcsRUFBRSxVQUFVO2dCQUN2QixnQkFBZ0IsRUFBRSxFQUFFO2dCQUNwQixXQUFXLEVBQUUsRUFBRTtnQkFDZixVQUFVLEVBQUUsU0FBUztnQkFDckIsU0FBUyxFQUFFLEVBQUU7Z0JBQ2IsVUFBVSxFQUFFLFNBQVM7Z0JBQ3JCLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixXQUFXLEVBQUUsTUFBTTtnQkFDbkIseUJBQXlCLEVBQUUsZUFBZTtnQkFDMUMsU0FBUyxFQUFFLFNBQVMsSUFBSSxJQUFJLElBQUksRUFBRTtnQkFDbEMsU0FBUyxFQUFFLDZCQUE2QixlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsUUFBUSxFQUFFO2dCQUM3RixPQUFPLEVBQUUsVUFBVSxlQUF3QjtvQkFDekMsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO2dCQUMvQyxDQUFDO2FBQ0YsQ0FBQztZQUVGLCtCQUErQjtZQUMvQixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFeEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsdURBQXVELFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FDckUsQ0FBQztRQUNKLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsK0NBQStDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFDOUQsS0FBSyxDQUFDLEtBQUssQ0FDWixDQUFDO1lBQ0YsbUZBQW1GO1lBQ25GLE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNILENBQUM7Q0FDRixDQUFBO0FBN0lZLDBEQUF1QjtrQ0FBdkIsdUJBQXVCO0lBRG5DLElBQUEsbUJBQVUsR0FBRTtJQU9SLFdBQUEsSUFBQSxrQkFBVyxFQUFDLFdBQVcsQ0FBQyxDQUFBO3lEQURnQixpREFBc0Isb0JBQXRCLGlEQUFzQixvREFFOUIsWUFBSyxvQkFBTCxZQUFLO0dBUDdCLHVCQUF1QixDQTZJbkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGF1ZGl0b3JpYVxcc2VydmljZXNcXGF1ZGl0b3JpYS1xdWV1ZS5wcm9jZXNzb3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTG9nZ2VyLCBPbk1vZHVsZUluaXQgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3RRdWV1ZSB9IGZyb20gJ0BuZXN0anMvYnVsbCc7XG5pbXBvcnQgeyBKb2IsIFF1ZXVlIH0gZnJvbSAnYnVsbCc7XG5pbXBvcnQgeyBMb2dBdWRpdG9yaWFSZXBvc2l0b3J5IH0gZnJvbSAnLi4vcmVwb3NpdG9yaWVzL2xvZy1hdWRpdG9yaWEucmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBDcmVhdGVMb2dBdWRpdG9yaWFEdG8gfSBmcm9tICcuLi9kdG8vY3JlYXRlLWxvZy1hdWRpdG9yaWEuZHRvJztcbmltcG9ydCB7IFRpcG9PcGVyYWNhbyB9IGZyb20gJy4uLy4uLy4uL2VudW1zL3RpcG8tb3BlcmFjYW8uZW51bSc7XG5pbXBvcnQgeyByZWdpc3RlcmVkUHJvY2Vzc29ycyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZy9idWxsLmNvbmZpZyc7XG5cbi8qKlxuICogUHJvY2Vzc2Fkb3IgZGEgRmlsYSBkZSBBdWRpdG9yaWFcbiAqXG4gKiBSZXNwb25zw6F2ZWwgcG9yIHByb2Nlc3NhciBvcyBsb2dzIGRlIGF1ZGl0b3JpYSBlbmZpbGVpcmFkb3MsIGdhcmFudGluZG9cbiAqIHF1ZSBvIHJlZ2lzdHJvIGRlIG9wZXJhw6fDtWVzIHNlamEgZmVpdG8gZGUgZm9ybWEgYXNzw61uY3JvbmEgc2VtIGltcGFjdGFyXG4gKiBuYSBwZXJmb3JtYW5jZSBkYXMgcmVxdWlzacOnw7VlcyBlbnF1YW50byBtYW50w6ltIGEgcmFzdHJlYWJpbGlkYWRlXG4gKiBkYXMgb3BlcmHDp8O1ZXMgcGFyYSBjb21wbGlhbmNlIGNvbSBMR1BELlxuICpcbiAqIEVzdGEgaW1wbGVtZW50YcOnw6NvIG7Do28gdXNhIG8gZGVjb3JhZG9yIEBQcm9jZXNzb3IgcGFyYSBldml0YXIgZHVwbGljYcOnw6NvXG4gKiBkZSBwcm9jZXNzYWRvcmVzLiBFbSB2ZXogZGlzc28sIHJlZ2lzdHJhIG8gcHJvY2Vzc2Fkb3IgbWFudWFsbWVudGUgbmEgZmlsYS5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1ZGl0b3JpYVF1ZXVlUHJvY2Vzc29yIGltcGxlbWVudHMgT25Nb2R1bGVJbml0IHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKEF1ZGl0b3JpYVF1ZXVlUHJvY2Vzc29yLm5hbWUpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIC8vIOKGkCBNVURBTsOHQTogVXNlIG8gcmVwb3NpdG9yeSBjdXN0b21pemFkbyBlbSB2ZXogZG8gVHlwZU9STSBkaXJldG9cbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnk6IExvZ0F1ZGl0b3JpYVJlcG9zaXRvcnksXG4gICAgQEluamVjdFF1ZXVlKCdhdWRpdG9yaWEnKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXVkaXRvcmlhUXVldWU6IFF1ZXVlLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdHJhIG8gcHJvY2Vzc2Fkb3IgbWFudWFsbWVudGUgbmEgZmlsYSBxdWFuZG8gbyBtw7NkdWxvIMOpIGluaWNpYWxpemFkb1xuICAgKi9cbiAgYXN5bmMgb25Nb2R1bGVJbml0KCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBSZWdpc3RyYSBvIHByb2Nlc3NhZG9yIGRlIGxvZ3MgZGUgYXVkaXRvcmlhXG4gICAgICBpZiAoIXJlZ2lzdGVyZWRQcm9jZXNzb3JzLmhhcygncmVnaXN0cmFyLWxvZycpKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXVkaXRvcmlhUXVldWUucHJvY2VzcygncmVnaXN0cmFyLWxvZycsIGFzeW5jIChqb2IpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzYXJMb2dBdWRpdG9yaWEoam9iKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVnaXN0ZXJlZFByb2Nlc3NvcnMuYWRkKCdyZWdpc3RyYXItbG9nJyk7XG4gICAgICAgIHRoaXMubG9nZ2VyLmxvZygnUHJvY2Vzc2Fkb3IgcmVnaXN0cmFyLWxvZyByZWdpc3RyYWRvIGNvbSBzdWNlc3NvJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAgICdQcm9jZXNzYWRvciByZWdpc3RyYXItbG9nIGrDoSByZWdpc3RyYWRvLCBpZ25vcmFuZG8gcmVnaXN0cm8gZHVwbGljYWRvJyxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVnaXN0cmEgbyBwcm9jZXNzYWRvciBkZSBhY2Vzc28gYSBkYWRvcyBzZW5zw612ZWlzXG4gICAgICBpZiAoIXJlZ2lzdGVyZWRQcm9jZXNzb3JzLmhhcygncmVnaXN0cmFyLWFjZXNzby1kYWRvcy1zZW5zaXZlaXMnKSkge1xuICAgICAgICBhd2FpdCB0aGlzLmF1ZGl0b3JpYVF1ZXVlLnByb2Nlc3MoXG4gICAgICAgICAgJ3JlZ2lzdHJhci1hY2Vzc28tZGFkb3Mtc2Vuc2l2ZWlzJyxcbiAgICAgICAgICBhc3luYyAoam9iKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzYXJBY2Vzc29EYWRvc1NlbnNpdmVpcyhqb2IpO1xuICAgICAgICAgIH0sXG4gICAgICAgICk7XG5cbiAgICAgICAgcmVnaXN0ZXJlZFByb2Nlc3NvcnMuYWRkKCdyZWdpc3RyYXItYWNlc3NvLWRhZG9zLXNlbnNpdmVpcycpO1xuICAgICAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICAgICAgJ1Byb2Nlc3NhZG9yIHJlZ2lzdHJhci1hY2Vzc28tZGFkb3Mtc2Vuc2l2ZWlzIHJlZ2lzdHJhZG8gY29tIHN1Y2Vzc28nLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgICAnUHJvY2Vzc2Fkb3IgcmVnaXN0cmFyLWFjZXNzby1kYWRvcy1zZW5zaXZlaXMgasOhIHJlZ2lzdHJhZG8sIGlnbm9yYW5kbyByZWdpc3RybyBkdXBsaWNhZG8nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEVycm8gYW8gcmVnaXN0cmFyIHByb2Nlc3NhZG9yZXM6ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBlcnJvci5zdGFjayxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3NhIG9zIGxvZ3MgZGUgYXVkaXRvcmlhIGVuZmlsZWlyYWRvc1xuICAgKlxuICAgKiBAcGFyYW0gam9iIFRyYWJhbGhvIGNvbnRlbmRvIG9zIGRhZG9zIGRvIGxvZyBkZSBhdWRpdG9yaWFcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NhckxvZ0F1ZGl0b3JpYShqb2I6IEpvYjxDcmVhdGVMb2dBdWRpdG9yaWFEdG8+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGxvZ0RhdGEgPSBqb2IuZGF0YTtcbiAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFxuICAgICAgICBgUHJvY2Vzc2FuZG8gbG9nIGRlIGF1ZGl0b3JpYTogJHtsb2dEYXRhLmVudGlkYWRlX2FmZXRhZGF9IC0gJHtsb2dEYXRhLnRpcG9fb3BlcmFjYW99YCxcbiAgICAgICk7XG5cbiAgICAgIC8vIOKGkCBNVURBTsOHQTogVXNlIG8gbcOpdG9kbyBjcmVhdGUgZG8gcmVwb3NpdG9yeSBjdXN0b21pemFkb1xuICAgICAgY29uc3Qgc2F2ZWRMb2cgPSBhd2FpdCB0aGlzLmxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnkuY3JlYXRlKGxvZ0RhdGEpO1xuXG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgYExvZyBkZSBhdWRpdG9yaWEgcHJvY2Vzc2FkbyBjb20gc3VjZXNzbzogSUQgJHtzYXZlZExvZy5pZH1gLFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIGBFcnJvIGFvIHByb2Nlc3NhciBsb2cgZGUgYXVkaXRvcmlhOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgZXJyb3Iuc3RhY2ssXG4gICAgICApO1xuICAgICAgLy8gUmVqZWl0YSBvIGpvYiBwYXJhIHF1ZSBzZWphIHRlbnRhZG8gbm92YW1lbnRlIChjb25mb3JtZSBjb25maWd1cmHDp8OjbyBkZSBiYWNrb2ZmKVxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3NhIG9zIHJlZ2lzdHJvcyBkZSBhY2Vzc28gYSBkYWRvcyBzZW5zw612ZWlzXG4gICAqXG4gICAqIEBwYXJhbSBqb2IgVHJhYmFsaG8gY29udGVuZG8gb3MgZGFkb3MgZGUgYWNlc3NvIGEgZGFkb3Mgc2Vuc8OtdmVpc1xuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc2FyQWNlc3NvRGFkb3NTZW5zaXZlaXMoam9iOiBKb2I8YW55Pik6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHVzdWFyaW9JZCxcbiAgICAgICAgZW50aWRhZGUsXG4gICAgICAgIGVudGlkYWRlSWQsXG4gICAgICAgIGNhbXBvc1NlbnNpdmVpcyxcbiAgICAgICAgaXAsXG4gICAgICAgIHVzZXJBZ2VudCxcbiAgICAgICAgZW5kcG9pbnQsXG4gICAgICAgIG1ldG9kbyxcbiAgICAgICAgdGltZXN0YW1wLFxuICAgICAgfSA9IGpvYi5kYXRhO1xuXG4gICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcbiAgICAgICAgYFByb2Nlc3NhbmRvIGFjZXNzbyBhIGRhZG9zIHNlbnPDrXZlaXM6ICR7ZW50aWRhZGV9IC0gQ2FtcG9zOiAke2NhbXBvc1NlbnNpdmVpcy5qb2luKCcsICcpfWAsXG4gICAgICApO1xuXG4gICAgICAvLyDihpAgTVVEQU7Dh0E6IENyaWUgdW0gRFRPIGUgdXNlIG8gcmVwb3NpdG9yeSBjdXN0b21pemFkb1xuICAgICAgY29uc3QgY3JlYXRlTG9nRHRvOiBDcmVhdGVMb2dBdWRpdG9yaWFEdG8gPSB7XG4gICAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5BQ0NFU1MsXG4gICAgICAgIGVudGlkYWRlX2FmZXRhZGE6IGVudGlkYWRlLFxuICAgICAgICBlbnRpZGFkZV9pZDogZW50aWRhZGVJZCxcbiAgICAgICAgZGFkb3NfYW50ZXJpb3Jlczoge30sXG4gICAgICAgIGRhZG9zX25vdm9zOiB7fSxcbiAgICAgICAgdXN1YXJpb19pZDogdXN1YXJpb0lkLFxuICAgICAgICBpcF9vcmlnZW06IGlwLFxuICAgICAgICB1c2VyX2FnZW50OiB1c2VyQWdlbnQsXG4gICAgICAgIGVuZHBvaW50OiBlbmRwb2ludCxcbiAgICAgICAgbWV0b2RvX2h0dHA6IG1ldG9kbyxcbiAgICAgICAgZGFkb3Nfc2Vuc2l2ZWlzX2FjZXNzYWRvczogY2FtcG9zU2Vuc2l2ZWlzLFxuICAgICAgICBkYXRhX2hvcmE6IHRpbWVzdGFtcCB8fCBuZXcgRGF0ZSgpLFxuICAgICAgICBkZXNjcmljYW86IGBBY2Vzc28gYSBkYWRvcyBzZW5zw612ZWlzICgke2NhbXBvc1NlbnNpdmVpcy5qb2luKCcsICcpfSkgZGEgZW50aWRhZGUgJHtlbnRpZGFkZX1gLFxuICAgICAgICB2YWxpZGFyOiBmdW5jdGlvbiAodmFsaWRhdGlvbkdyb3VwPzogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICAvLyBVc2UgbyByZXBvc2l0b3J5IGN1c3RvbWl6YWRvXG4gICAgICBjb25zdCBzYXZlZExvZyA9IGF3YWl0IHRoaXMubG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5jcmVhdGUoY3JlYXRlTG9nRHRvKTtcblxuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIGBBY2Vzc28gYSBkYWRvcyBzZW5zw612ZWlzIHJlZ2lzdHJhZG8gY29tIHN1Y2Vzc286IElEICR7c2F2ZWRMb2cuaWR9YCxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICBgRXJybyBhbyBwcm9jZXNzYXIgYWNlc3NvIGEgZGFkb3Mgc2Vuc8OtdmVpczogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIGVycm9yLnN0YWNrLFxuICAgICAgKTtcbiAgICAgIC8vIFJlamVpdGEgbyBqb2IgcGFyYSBxdWUgc2VqYSB0ZW50YWRvIG5vdmFtZW50ZSAoY29uZm9ybWUgY29uZmlndXJhw6fDo28gZGUgYmFja29mZilcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufVxuIl0sInZlcnNpb24iOjN9