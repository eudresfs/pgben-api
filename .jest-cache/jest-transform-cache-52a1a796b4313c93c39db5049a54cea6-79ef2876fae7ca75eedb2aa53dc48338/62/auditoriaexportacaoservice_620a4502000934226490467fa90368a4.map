{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-exportacao.service.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,6CAAmD;AACnD,qCAAqD;AACrD,iFAAsE;AAEtE,2CAA+C;AAC/C,uCAAyB;AACzB,2CAA6B;AAC7B,2CAA6B;AAC7B,0EAAiD;AAEjD;;;;;;;GAOG;AACH,IAAY,iBAKX;AALD,WAAY,iBAAiB;IAC3B,gDAAgD;IAChD,kCAAa,CAAA;IACb,2CAA2C;IAC3C,gCAAW,CAAA;AACb,CAAC,EALW,iBAAiB,iCAAjB,iBAAiB,QAK5B;AAyDD;;;;;GAKG;AAEI,IAAM,0BAA0B,kCAAhC,MAAM,0BAA0B;IAkBlB;IACA;IAlBnB,iDAAiD;IAChC,MAAM,GAAG,IAAI,eAAM,CAAC,4BAA0B,CAAC,IAAI,CAAC,CAAC;IAEtE,2DAA2D;IAC1C,mBAAmB,CAAS;IAE7C,0DAA0D;IACzC,sBAAsB,CAAS;IAEhD,mDAAmD;IAClC,sBAAsB,CAAS;IAEhD,2CAA2C;IAC1B,kBAAkB,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,YAAY;IAEjE,YAEmB,sBAAgD,EAChD,aAA4B;QAD5B,2BAAsB,GAAtB,sBAAsB,CAA0B;QAChD,kBAAa,GAAb,aAAa,CAAe;QAE7C,qBAAqB;QACrB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,GAAG,CACpC,IAAI,CAAC,GAAG,CACN,CAAC,EACD,MAAM,CACJ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,8BAA8B,CAAC;YAC5D,KAAK,CACR,CACF,EACD,KAAK,CACN,CAAC;QAEF,6DAA6D;QAC7D,IAAI,CAAC,sBAAsB;YACzB,IAAI,CAAC,GAAG,CACN,IAAI,CAAC,GAAG,CACN,CAAC,EACD,MAAM,CACJ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,4BAA4B,CAAC,IAAI,GAAG,CACpE,CACF,EACD,GAAG,CACJ;gBACD,IAAI;gBACJ,IAAI,CAAC,CAAC,uBAAuB;QAE/B,qCAAqC;QACrC,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,sBAAsB,CAAC,CAAC;QACzE,IAAI,CAAC,mBAAmB;YACtB,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;QAEhE,kCAAkC;QAClC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAC7C,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5D,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,mCAAmC,IAAI,CAAC,mBAAmB,EAAE,CAC9D,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,YAAY,CAChB,OAA6B,EAC7B,MAAwB;QAExB,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,IAAI,QAAQ,6CAA6C,MAAM,CAAC,OAAO,EAAE,CAC1E,CAAC;QAEF,uDAAuD;QACvD,IACE,MAAM,CAAC,OAAO,KAAK,iBAAiB,CAAC,IAAI;YACzC,MAAM,CAAC,OAAO,KAAK,iBAAiB,CAAC,GAAG,EACxC,CAAC;YACD,MAAM,IAAI,KAAK,CACb,WAAW,MAAM,CAAC,OAAO,gDAAgD,CAC1E,CAAC;QACJ,CAAC;QAED,+BAA+B;QAC/B,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QAErC,8BAA8B;QAC9B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;QAE1D,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtB,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,iCAAiC,IAAI,CAAC,MAAM,kCAAkC,IAAI,CAAC,sBAAsB,aAAa,CACvH,CAAC;QACJ,CAAC;QAED,wCAAwC;QACxC,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CACpC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,sBAAsB,CAAC,EAC1C,MAAM,CAAC,MAAM,CACd,CAAC;QAEF,wBAAwB;QACxB,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW;YACpC,CAAC,CAAC,IAAA,2BAAgB,EAAC,MAAM,CAAC,WAAW,CAAC;YACtC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAElC,6BAA6B;QAC7B,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,IAAI,CAAC,mBAAmB,CAAC;QAC3D,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QAEnD,6BAA6B;QAC7B,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QAE3D,6DAA6D;QAC7D,IAAI,cAAc,GAAG,CAAC,CAAC;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC;YACH,QAAQ,MAAM,CAAC,OAAO,EAAE,CAAC;gBACvB,KAAK,iBAAiB,CAAC,IAAI;oBACzB,cAAc,GAAG,MAAM,IAAI,CAAC,YAAY,CACtC,SAAS,EACT,cAAc,EACd,MAAM,CAAC,UAAU,CAClB,CAAC;oBACF,MAAM;gBACR,KAAK,iBAAiB,CAAC,GAAG;oBACxB,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CACrC,SAAS,EACT,cAAc,EACd,MAAM,CAAC,UAAU,CAClB,CAAC;oBACF,MAAM;gBACR;oBACE,MAAM,IAAI,KAAK,CACb,wCAAwC,MAAM,CAAC,OAAO,EAAE,CACzD,CAAC;YACN,CAAC;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YACxC,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,2BAA2B,QAAQ,OAAO,SAAS,CAAC,MAAM,eAAe,cAAc,QAAQ,CAChG,CAAC;YAEF,OAAO;gBACL,cAAc;gBACd,mBAAmB,EAAE,SAAS,CAAC,MAAM;gBACrC,cAAc;gBACd,QAAQ,EAAE,IAAI,IAAI,EAAE;gBACpB,OAAO,EAAE,MAAM,CAAC,OAAO;aACxB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,wCAAwC;YACxC,IAAI,CAAC;gBACH,IAAI,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC;oBAClC,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;oBAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,cAAc,EAAE,CAAC,CAAC;gBACtE,CAAC;YACH,CAAC;YAAC,OAAO,YAAY,EAAE,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,sCAAsC,YAAY,YAAY,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,EAAE,CACnH,CAAC;YACJ,CAAC;YAED,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACK,KAAK,CAAC,wBAAwB,CACpC,OAA6B;QAE7B,MAAM,WAAW,GAAQ,EAAE,CAAC;QAE5B,+BAA+B;QAC/B,IAAI,OAAO,CAAC,aAAa,EAAE,CAAC;YAC1B,WAAW,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QACpD,CAAC;QAED,+BAA+B;QAC/B,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC;YAC7B,WAAW,CAAC,gBAAgB,GAAG,IAAA,eAAK,EAAC,IAAI,OAAO,CAAC,gBAAgB,GAAG,CAAC,CAAC;QACxE,CAAC;QAED,6BAA6B;QAC7B,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;YACxB,WAAW,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QAChD,CAAC;QAED,4BAA4B;QAC5B,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,WAAW,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QAC9C,CAAC;QAED,8BAA8B;QAC9B,IAAI,OAAO,CAAC,YAAY,EAAE,CAAC;YACzB,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAEnD,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;gBACvB,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAC/C,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,4BAA4B;gBAEjE,WAAW,CAAC,UAAU,GAAG,IAAA,iBAAO,EAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAC3D,CAAC;iBAAM,CAAC;gBACN,sDAAsD;gBACtD,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC;gBACvC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,4BAA4B;gBAEhE,WAAW,CAAC,UAAU,GAAG,IAAA,iBAAO,EAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC;aAAM,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YAC9B,wDAAwD;YACxD,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YAC/C,SAAS,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,4BAA4B;YAEjE,WAAW,CAAC,UAAU,GAAG,IAAA,iBAAO,EAAC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QAC3D,CAAC;QAED,0BAA0B;QAC1B,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;YACxB,WAAW,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QAChD,CAAC;QAED,uBAAuB;QACvB,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;YACrB,WAAW,CAAC,QAAQ,GAAG,IAAA,eAAK,EAAC,IAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QACxD,CAAC;QAED,4DAA4D;QAC5D,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC;YAC5C,KAAK,EAAE,WAAW;YAClB,KAAK,EAAE;gBACL,UAAU,EAAE,MAAM;aACnB;YACD,IAAI,EAAE,IAAI,CAAC,sBAAsB;SAClC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;OAOG;IACK,eAAe,CACrB,IAAoB,EACpB,MAAiB;QAEjB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YACtB,MAAM,SAAS,GAA4B,EAAE,CAAC;YAE9C,iCAAiC;YACjC,MAAM,iBAAiB,GAAG,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAErE,gCAAgC;YAChC,KAAK,MAAM,KAAK,IAAI,iBAAiB,EAAE,CAAC;gBACtC,IAAI,KAAK,IAAI,GAAG,EAAE,CAAC;oBACjB,SAAS,CAAC,KAAK,CAAC,GAAI,GAAW,CAAC,KAAK,CAAC,CAAC;gBACzC,CAAC;YACH,CAAC;YAED,OAAO,SAAS,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACK,uBAAuB,CAAC,MAAwB;QACtD,qCAAqC;QACrC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YAC/D,MAAM,IAAI,KAAK,CAAC,mCAAmC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QACvE,CAAC;QAED,kCAAkC;QAClC,IAAI,MAAM,CAAC,OAAO,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,KAAK,CAAC,sCAAsC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;QAC1E,CAAC;QAED,0BAA0B;QAC1B,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;YACvB,MAAM,aAAa,GAAG,IAAA,2BAAgB,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAC3D,IAAI,aAAa,KAAK,MAAM,CAAC,WAAW,EAAE,CAAC;gBACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,+BAA+B,MAAM,CAAC,WAAW,OAAO,aAAa,EAAE,CACxE,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACK,gBAAgB,CAAC,MAAwB;QAC/C,6CAA6C;QAC7C,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;YACvB,MAAM,QAAQ,GAAG,IAAA,2BAAgB,EAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACtD,OAAO,GAAG,QAAQ,IAAI,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QAC1E,CAAC;QAED,kCAAkC;QAClC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;QAC7B,MAAM,SAAS,GAAG,SAAS;aACxB,WAAW,EAAE;aACb,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;aACrB,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;aACjB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjB,OAAO,aAAa,SAAS,IAAI,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IACrF,CAAC;IAED;;;;;;;OAOG;IACK,qBAAqB,CAAC,cAAsB;QAClD,oCAAoC;QACpC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,CAAC;QAED,gDAAgD;QAChD,MAAM,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QAE1D,gGAAgG;QAChG,MAAM,mBAAmB,GAAG,kBAAkB,CAAC,UAAU,CACvD,IAAI,CAAC,mBAAmB,CACzB,CAAC;QAEF,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;QAED,6CAA6C;QAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACnD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YAC9B,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED;;;;;;OAMG;IACK,4BAA4B,CAClC,KAAgB;QAEhB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,4DAA4D,CAC7D,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,IAAI,CAAC;YACH,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACxB,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;oBACtC,OAAO,EAAE,CAAC;gBACZ,CAAC;gBAED,MAAM,SAAS,GAA4B,EAAE,CAAC;gBAE9C,6DAA6D;gBAC7D,MAAM,kBAAkB,GAAG;oBACzB,kBAAkB;oBAClB,aAAa;oBACb,2BAA2B;iBAC5B,CAAC;gBAEF,uBAAuB;gBACvB,MAAM,CAAC,OAAO,CAAC,IAA+B,CAAC,CAAC,OAAO,CACrD,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE;oBACjB,2EAA2E;oBAC3E,IACE,kBAAkB,CAAC,QAAQ,CAAC,KAAK,CAAC;wBAClC,KAAK,KAAK,IAAI;wBACd,OAAO,KAAK,KAAK,QAAQ,EACzB,CAAC;wBACD,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;wBACzB,OAAO;oBACT,CAAC;oBAED,kDAAkD;oBAClD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;wBAC9B,wCAAwC;wBACxC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK;6BACrB,OAAO,CAAC,6BAA6B,EAAE,EAAE,CAAC;6BAC1C,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC,CAAC;oBAC3C,CAAC;yBAAM,IAAI,KAAK,YAAY,IAAI,EAAE,CAAC;wBACjC,mCAAmC;wBACnC,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;oBACzC,CAAC;yBAAM,IACL,KAAK,KAAK,IAAI;wBACd,KAAK,KAAK,SAAS;wBACnB,OAAO,KAAK,KAAK,QAAQ;wBACzB,OAAO,KAAK,KAAK,SAAS,EAC1B,CAAC;wBACD,0BAA0B;wBAC1B,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;oBAC3B,CAAC;yBAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;wBACrC,4DAA4D;wBAC5D,IAAI,CAAC;4BACH,+CAA+C;4BAC/C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gCACzB,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;4BAC3B,CAAC;iCAAM,CAAC;gCACN,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;4BAC3B,CAAC;wBACH,CAAC;wBAAC,MAAM,CAAC;4BACP,SAAS,CAAC,KAAK,CAAC,GAAG,mBAAmB,CAAC;wBACzC,CAAC;oBACH,CAAC;yBAAM,CAAC;wBACN,2CAA2C;wBAC3C,SAAS,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBACnC,CAAC;gBACH,CAAC,CACF,CAAC;gBAEF,OAAO,SAAS,CAAC;YACnB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,4BAA4B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAC3F,CAAC;YACF,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;;;;;;OAQG;IACK,KAAK,CAAC,YAAY,CACxB,IAA+B,EAC/B,cAAsB,EACtB,UAAoB;QAEpB,kBAAkB;QAClB,MAAM,gBAAgB,GAAG,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;QAEjE,sCAAsC;QACtC,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;YAC/D,OAAO,CAAC,CAAC;QACX,CAAC;QAED,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAE9D,IAAI,UAAU,EAAE,CAAC;gBACf,sBAAsB;gBACtB,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;oBAC/B,MAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;oBAEpD,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;oBAC7B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAE3B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAClB,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;oBACxB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACb,CAAC,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,0BAA0B;gBAC1B,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;YACnE,CAAC;YAED,2BAA2B;YAC3B,MAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAC1C,OAAO,KAAK,CAAC,IAAI,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,+BAA+B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAC9F,CAAC;YACF,MAAM,IAAI,KAAK,CACb,gCAAgC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAC/F,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACK,eAAe,CAAC,KAAc;QACpC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YAC1C,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,qDAAqD;QACrD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YAChD,+BAA+B;YAC/B,IAAI,KAAK,YAAY,IAAI,EAAE,CAAC;gBAC1B,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;YACnD,CAAC;YAED,uDAAuD;YACvD,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACtC,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACvC,CAAC;YAAC,MAAM,CAAC;gBACP,OAAO,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;QAED,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;QAE1B,qFAAqF;QACrF,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACjE,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC;QACxC,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;;;;;;;OAQG;IACK,KAAK,CAAC,WAAW,CACvB,IAA+B,EAC/B,cAAsB,EACtB,UAAoB;QAEpB,kBAAkB;QAClB,MAAM,gBAAgB,GAAG,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,CAAC;QAEjE,sCAAsC;QACtC,IAAI,gBAAgB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2CAA2C,CAAC,CAAC;YAC9D,OAAO,CAAC,CAAC;QACX,CAAC;QAED,IAAI,CAAC;YACH,kEAAkE;YAClE,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CACxB,IAAI,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAC7D,CAAC;YAEF,2BAA2B;YAC3B,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAE9D,wBAAwB;YACxB,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBAC7C,OAAO,OAAO;qBACX,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;oBACd,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5C,CAAC,CAAC;qBACD,IAAI,CAAC,GAAG,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;YAEH,sBAAsB;YACtB,MAAM,UAAU,GAAG,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEvD,IAAI,UAAU,EAAE,CAAC;gBACf,sBAAsB;gBACtB,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;oBAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;oBAC/B,MAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;oBAEpD,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;oBAC7B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;oBAE3B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAClB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACvB,IAAI,CAAC,GAAG,EAAE,CAAC;gBACb,CAAC,CAAC,CAAC;YACL,CAAC;iBAAM,CAAC;gBACN,0BAA0B;gBAC1B,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,cAAc,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;YAClE,CAAC;YAED,2BAA2B;YAC3B,MAAM,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YAC1C,OAAO,KAAK,CAAC,IAAI,CAAC;QACpB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,8BAA8B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAC7F,CAAC;YACF,MAAM,IAAI,KAAK,CACb,+BAA+B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,EAAE,CAC9F,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAA;AAxnBY,gEAA0B;qCAA1B,0BAA0B;IADtC,IAAA,mBAAU,GAAE;IAkBR,WAAA,IAAA,0BAAgB,EAAC,mCAAY,CAAC,CAAA;yDACU,oBAAU,oBAAV,oBAAU,oDACnB,sBAAa,oBAAb,sBAAa;GAnBpC,0BAA0B,CAwnBtC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-exportacao.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, ILike } from 'typeorm';\nimport { LogAuditoria } from '../../../entities/log-auditoria.entity';\nimport { QueryLogAuditoriaDto } from '../dto/query-log-auditoria.dto';\nimport { ConfigService } from '@nestjs/config';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as zlib from 'zlib';\nimport sanitizeFilename from 'sanitize-filename';\n\n/**\n * Formatos de exportação suportados para os logs de auditoria - Versão MVP\n *\n * @enum {string}\n * @property {string} JSON - Formato JSON (JavaScript Object Notation)\n * @property {string} CSV - Formato CSV (Comma-Separated Values)\n * @note Formatos Excel e PDF foram adiados para versões futuras do sistema\n */\nexport enum FormatoExportacao {\n  /** Formato JSON (JavaScript Object Notation) */\n  JSON = 'json',\n  /** Formato CSV (Comma-Separated Values) */\n  CSV = 'csv',\n}\n\n/**\n * Opções de exportação para os logs de auditoria - Versão MVP\n *\n * Configurações simplificadas para exportação de logs no MVP\n */\nexport interface OpcoesExportacao {\n  /**\n   * Formato de exportação (apenas JSON ou CSV no MVP)\n   */\n  formato: FormatoExportacao;\n\n  /**\n   * Caminho para salvar o arquivo (opcional)\n   * Se não for fornecido, será usado o diretório padrão\n   */\n  caminho?: string;\n\n  /**\n   * Nome do arquivo (opcional)\n   * Se não for fornecido, será gerado automaticamente\n   */\n  nomeArquivo?: string;\n\n  /**\n   * Indica se o arquivo deve ser comprimido\n   */\n  comprimido?: boolean;\n\n  /**\n   * Campos a serem incluídos na exportação\n   * Se não for fornecido, todos os campos serão incluídos\n   */\n  campos?: string[];\n}\n\n/**\n * Resultado da operação de exportação - Versão MVP\n */\nexport interface ResultadoExportacao {\n  /** Caminho completo do arquivo gerado */\n  caminhoArquivo: string;\n\n  /** Quantidade de registros exportados */\n  registrosExportados: number;\n\n  /** Tamanho do arquivo em bytes */\n  tamanhoArquivo: number;\n\n  /** Data e hora da exportação */\n  dataHora: Date;\n\n  /** Formato da exportação */\n  formato: FormatoExportacao;\n}\n\n/**\n * Serviço responsável por exportar logs de auditoria - Versão MVP\n *\n * Implementação simplificada para MVP com suporte apenas a formatos essenciais (JSON, CSV).\n * Formatos avançados (Excel, PDF) e funcionalidades complexas foram adiados para versões futuras.\n */\n@Injectable()\nexport class AuditoriaExportacaoService {\n  /** Logger para registro de eventos do serviço */\n  private readonly logger = new Logger(AuditoriaExportacaoService.name);\n\n  /** Diretório base para armazenar os arquivos exportados */\n  private readonly diretorioExportacao: string;\n\n  /** Tamanho máximo de registros para exportação em lote */\n  private readonly MAX_REGISTROS_POR_LOTE: number;\n\n  /** Tamanho máximo de arquivo permitido em bytes */\n  private readonly TAMANHO_MAXIMO_ARQUIVO: number;\n\n  /** Timeout para operações de exportação */\n  private readonly TIMEOUT_EXPORTACAO = 5 * 60 * 1000; // 5 minutos\n\n  constructor(\n    @InjectRepository(LogAuditoria)\n    private readonly logAuditoriaRepository: Repository<LogAuditoria>,\n    private readonly configService: ConfigService,\n  ) {\n    // Configurar limites\n    this.MAX_REGISTROS_POR_LOTE = Math.min(\n      Math.max(\n        1,\n        Number(\n          this.configService.get<number>('AUDITORIA_MAX_EXPORT_RECORDS') ||\n            10000,\n        ),\n      ),\n      50000, // Limite absoluto de 50.000 registros\n    );\n\n    // Configurar tamanho máximo do arquivo (em MB, padrão 100MB)\n    this.TAMANHO_MAXIMO_ARQUIVO =\n      Math.min(\n        Math.max(\n          1,\n          Number(\n            this.configService.get<number>('AUDITORIA_MAX_FILE_SIZE_MB') || 100,\n          ),\n        ),\n        500, // Limite absoluto de 500MB\n      ) *\n      1024 *\n      1024; // Converter para bytes\n\n    // Configurar diretório de exportação\n    const exportDir = this.configService.get<string>('AUDITORIA_EXPORT_DIR');\n    this.diretorioExportacao =\n      exportDir || path.join(process.cwd(), 'exports', 'auditoria');\n\n    // Garantir que o diretório existe\n    if (!fs.existsSync(this.diretorioExportacao)) {\n      fs.mkdirSync(this.diretorioExportacao, { recursive: true });\n      this.logger.log(\n        `Diretório de exportação criado: ${this.diretorioExportacao}`,\n      );\n    }\n  }\n\n  /**\n   * Exporta logs de auditoria com base nos filtros fornecidos - Versão MVP\n   *\n   * @param filtros - Critérios de filtragem para os logs\n   * @param opcoes - Configurações para a exportação (apenas JSON e CSV no MVP)\n   * @returns Informações sobre o arquivo gerado\n   * @throws {Error} Quando ocorre um erro durante a exportação\n   */\n  async exportarLogs(\n    filtros: QueryLogAuditoriaDto,\n    opcoes: OpcoesExportacao,\n  ): Promise<ResultadoExportacao> {\n    const exportId = Math.random().toString(36).substring(2, 10);\n    this.logger.log(\n      `[${exportId}] Iniciando exportação de logs no formato ${opcoes.formato}`,\n    );\n\n    // Verificar se o formato solicitado é suportado no MVP\n    if (\n      opcoes.formato !== FormatoExportacao.JSON &&\n      opcoes.formato !== FormatoExportacao.CSV\n    ) {\n      throw new Error(\n        `Formato ${opcoes.formato} não suportado no MVP. Use apenas JSON ou CSV.`,\n      );\n    }\n\n    // Validar opções de exportação\n    this.validarOpcoesExportacao(opcoes);\n\n    // Buscar logs para exportação\n    const logs = await this.buscarLogsParaExportacao(filtros);\n\n    if (logs.length === 0) {\n      throw new Error('Nenhum log encontrado para os critérios fornecidos');\n    }\n\n    if (logs.length > this.MAX_REGISTROS_POR_LOTE) {\n      this.logger.warn(\n        `Limite de registros excedido: ${logs.length}. A exportação será limitada a ${this.MAX_REGISTROS_POR_LOTE} registros.`,\n      );\n    }\n\n    // Processar campos conforme solicitação\n    const registros = this.processarCampos(\n      logs.slice(0, this.MAX_REGISTROS_POR_LOTE),\n      opcoes.campos,\n    );\n\n    // Gerar nome do arquivo\n    const nomeArquivo = opcoes.nomeArquivo\n      ? sanitizeFilename(opcoes.nomeArquivo)\n      : this.gerarNomeArquivo(opcoes);\n\n    // Definir caminho do arquivo\n    const dirBase = opcoes.caminho || this.diretorioExportacao;\n    const caminho = path.resolve(dirBase, nomeArquivo);\n\n    // Validar caminho do arquivo\n    const caminhoArquivo = this.validarCaminhoArquivo(caminho);\n\n    // Exportar no formato solicitado (apenas JSON ou CSV no MVP)\n    let tamanhoArquivo = 0;\n    const startTime = Date.now();\n\n    try {\n      switch (opcoes.formato) {\n        case FormatoExportacao.JSON:\n          tamanhoArquivo = await this.exportarJSON(\n            registros,\n            caminhoArquivo,\n            opcoes.comprimido,\n          );\n          break;\n        case FormatoExportacao.CSV:\n          tamanhoArquivo = await this.exportarCSV(\n            registros,\n            caminhoArquivo,\n            opcoes.comprimido,\n          );\n          break;\n        default:\n          throw new Error(\n            `Formato de exportação não suportado: ${opcoes.formato}`,\n          );\n      }\n\n      const duration = Date.now() - startTime;\n      this.logger.log(\n        `Exportação concluída em ${duration}ms: ${registros.length} registros, ${tamanhoArquivo} bytes`,\n      );\n\n      return {\n        caminhoArquivo,\n        registrosExportados: registros.length,\n        tamanhoArquivo,\n        dataHora: new Date(),\n        formato: opcoes.formato,\n      };\n    } catch (error) {\n      // Tentar limpar arquivo em caso de erro\n      try {\n        if (fs.existsSync(caminhoArquivo)) {\n          fs.unlinkSync(caminhoArquivo);\n          this.logger.debug(`Arquivo temporário removido: ${caminhoArquivo}`);\n        }\n      } catch (cleanupError) {\n        this.logger.error(\n          `Erro ao limpar arquivo após falha: ${cleanupError instanceof Error ? cleanupError.message : 'Erro desconhecido'}`,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Busca logs de auditoria com base nos filtros fornecidos\n   *\n   * @param filtros - Critérios de filtragem para a consulta\n   * @returns Lista de logs de auditoria que atendem aos critérios\n   * @private\n   */\n  private async buscarLogsParaExportacao(\n    filtros: QueryLogAuditoriaDto,\n  ): Promise<LogAuditoria[]> {\n    const whereClause: any = {};\n\n    // Filtrar por tipo de operação\n    if (filtros.tipo_operacao) {\n      whereClause.tipo_operacao = filtros.tipo_operacao;\n    }\n\n    // Filtrar por entidade afetada\n    if (filtros.entidade_afetada) {\n      whereClause.entidade_afetada = ILike(`%${filtros.entidade_afetada}%`);\n    }\n\n    // Filtrar por ID da entidade\n    if (filtros.entidade_id) {\n      whereClause.entidade_id = filtros.entidade_id;\n    }\n\n    // Filtrar por ID do usuário\n    if (filtros.usuario_id) {\n      whereClause.usuario_id = filtros.usuario_id;\n    }\n\n    // Filtrar por período de data\n    if (filtros.data_inicial) {\n      const dataInicial = new Date(filtros.data_inicial);\n\n      if (filtros.data_final) {\n        const dataFinal = new Date(filtros.data_final);\n        dataFinal.setHours(23, 59, 59, 999); // Ajustar para o fim do dia\n\n        whereClause.created_at = Between(dataInicial, dataFinal);\n      } else {\n        // Se não tiver data final, usar apenas a data inicial\n        const fimDoDia = new Date(dataInicial);\n        fimDoDia.setHours(23, 59, 59, 999); // Ajustar para o fim do dia\n\n        whereClause.created_at = Between(dataInicial, fimDoDia);\n      }\n    } else if (filtros.data_final) {\n      // Se tiver apenas data final, buscar tudo até essa data\n      const dataFinal = new Date(filtros.data_final);\n      dataFinal.setHours(23, 59, 59, 999); // Ajustar para o fim do dia\n\n      whereClause.created_at = Between(new Date(0), dataFinal);\n    }\n\n    // Filtrar por método HTTP\n    if (filtros.metodo_http) {\n      whereClause.metodo_http = filtros.metodo_http;\n    }\n\n    // Filtrar por endpoint\n    if (filtros.endpoint) {\n      whereClause.endpoint = ILike(`%${filtros.endpoint}%`);\n    }\n\n    // Executar consulta com parâmetros de paginação e ordenação\n    return await this.logAuditoriaRepository.find({\n      where: whereClause,\n      order: {\n        created_at: 'DESC',\n      },\n      take: this.MAX_REGISTROS_POR_LOTE,\n    });\n  }\n\n  /**\n   * Processa e filtra campos dos logs de auditoria\n   *\n   * @param logs - Lista de logs a processar\n   * @param campos - Lista opcional de campos a incluir\n   * @returns Array de objetos com os campos processados\n   * @private\n   */\n  private processarCampos(\n    logs: LogAuditoria[],\n    campos?: string[],\n  ): Record<string, unknown>[] {\n    return logs.map((log) => {\n      const resultado: Record<string, unknown> = {};\n\n      // Determine quais campos incluir\n      const camposParaIncluir = campos?.length ? campos : Object.keys(log);\n\n      // Adicionar campos no resultado\n      for (const campo of camposParaIncluir) {\n        if (campo in log) {\n          resultado[campo] = (log as any)[campo];\n        }\n      }\n\n      return resultado;\n    });\n  }\n\n  /**\n   * Valida as opções de exportação\n   *\n   * @param opcoes - Opções de exportação a validar\n   * @throws {Error} Se as opções forem inválidas\n   * @private\n   */\n  private validarOpcoesExportacao(opcoes: OpcoesExportacao): void {\n    // Verificar se o formato é suportado\n    if (!Object.values(FormatoExportacao).includes(opcoes.formato)) {\n      throw new Error(`Formato de exportação inválido: ${opcoes.formato}`);\n    }\n\n    // Verificar caminho personalizado\n    if (opcoes.caminho && !fs.existsSync(opcoes.caminho)) {\n      throw new Error(`Caminho de destino não encontrado: ${opcoes.caminho}`);\n    }\n\n    // Validar nome de arquivo\n    if (opcoes.nomeArquivo) {\n      const sanitizedName = sanitizeFilename(opcoes.nomeArquivo);\n      if (sanitizedName !== opcoes.nomeArquivo) {\n        this.logger.warn(\n          `Nome de arquivo sanitizado: ${opcoes.nomeArquivo} -> ${sanitizedName}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Gera um nome de arquivo seguro para exportação\n   *\n   * @param opcoes - Opções de exportação\n   * @returns Nome de arquivo gerado\n   * @private\n   */\n  private gerarNomeArquivo(opcoes: OpcoesExportacao): string {\n    // Se um nome for fornecido, sanitizar e usar\n    if (opcoes.nomeArquivo) {\n      const nomeBase = sanitizeFilename(opcoes.nomeArquivo);\n      return `${nomeBase}.${opcoes.formato}${opcoes.comprimido ? '.gz' : ''}`;\n    }\n\n    // Gerar nome padrão com timestamp\n    const dataAtual = new Date();\n    const timestamp = dataAtual\n      .toISOString()\n      .replace(/[:.]/g, '-')\n      .replace('T', '_')\n      .split('Z')[0];\n\n    return `auditoria_${timestamp}.${opcoes.formato}${opcoes.comprimido ? '.gz' : ''}`;\n  }\n\n  /**\n   * Valida caminho do arquivo para garantir segurança\n   *\n   * @param caminhoArquivo - Caminho a validar\n   * @returns Caminho validado\n   * @throws {Error} Se o caminho for inválido ou inseguro\n   * @private\n   */\n  private validarCaminhoArquivo(caminhoArquivo: string): string {\n    // Verificar se o caminho é absoluto\n    if (!path.isAbsolute(caminhoArquivo)) {\n      throw new Error('Caminho do arquivo deve ser absoluto');\n    }\n\n    // Normalizar caminho para evitar path traversal\n    const caminhoNormalizado = path.normalize(caminhoArquivo);\n\n    // Verificar se está dentro de um diretório permitido (diretório de exportação ou personalizado)\n    const isDentroDoPermitido = caminhoNormalizado.startsWith(\n      this.diretorioExportacao,\n    );\n\n    if (!isDentroDoPermitido) {\n      throw new Error('Caminho do arquivo inválido');\n    }\n\n    // Verificar se o diretório de destino existe\n    const diretorio = path.dirname(caminhoNormalizado);\n    if (!fs.existsSync(diretorio)) {\n      fs.mkdirSync(diretorio, { recursive: true });\n    }\n\n    return caminhoNormalizado;\n  }\n\n  /**\n   * Sanitiza dados para exportação\n   *\n   * @param dados - Array de dados a sanitizar\n   * @returns Array sanitizado\n   * @private\n   */\n  private sanitizarDadosParaExportacao(\n    dados: unknown[],\n  ): Record<string, unknown>[] {\n    if (!Array.isArray(dados)) {\n      this.logger.warn(\n        'Dados fornecidos não são um array. Retornando array vazio.',\n      );\n      return [];\n    }\n\n    try {\n      return dados.map((item) => {\n        if (!item || typeof item !== 'object') {\n          return {};\n        }\n\n        const resultado: Record<string, unknown> = {};\n\n        // Lista de campos que devem preservar sua estrutura original\n        const camposEstruturados = [\n          'dados_anteriores',\n          'dados_novos',\n          'dados_sensiveis_acessados',\n        ];\n\n        // Processar cada campo\n        Object.entries(item as Record<string, unknown>).forEach(\n          ([chave, valor]) => {\n            // Preservar estrutura para campos específicos que contêm objetos ou arrays\n            if (\n              camposEstruturados.includes(chave) &&\n              valor !== null &&\n              typeof valor === 'object'\n            ) {\n              resultado[chave] = valor;\n              return;\n            }\n\n            // Processamento normal para outros tipos de dados\n            if (typeof valor === 'string') {\n              // Sanitizar strings para evitar injeção\n              resultado[chave] = valor\n                .replace(/[\\x00-\\x1F\\x7F-\\x9F\\uFFFD]/g, '')\n                .replace(/[\\u200B-\\u200D\\uFEFF]/g, '');\n            } else if (valor instanceof Date) {\n              // Converter datas para formato ISO\n              resultado[chave] = valor.toISOString();\n            } else if (\n              valor === null ||\n              valor === undefined ||\n              typeof valor === 'number' ||\n              typeof valor === 'boolean'\n            ) {\n              // Manter tipos primitivos\n              resultado[chave] = valor;\n            } else if (typeof valor === 'object') {\n              // Para objetos complexos que não estão na lista de exceções\n              try {\n                // Tentativa de preservar a estrutura do objeto\n                if (Array.isArray(valor)) {\n                  resultado[chave] = valor;\n                } else {\n                  resultado[chave] = valor;\n                }\n              } catch {\n                resultado[chave] = '[Objeto complexo]';\n              }\n            } else {\n              // Para outros tipos, converter para string\n              resultado[chave] = String(valor);\n            }\n          },\n        );\n\n        return resultado;\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao sanitizar dados: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n      );\n      return [];\n    }\n  }\n\n  /**\n   * Exporta logs para formato JSON\n   *\n   * @param logs - Dados a exportar\n   * @param caminhoArquivo - Caminho do arquivo de destino\n   * @param comprimido - Se o arquivo deve ser compactado\n   * @returns Tamanho do arquivo em bytes\n   * @private\n   */\n  private async exportarJSON(\n    logs: Record<string, unknown>[],\n    caminhoArquivo: string,\n    comprimido?: boolean,\n  ): Promise<number> {\n    // Sanitizar dados\n    const dadosSanitizados = this.sanitizarDadosParaExportacao(logs);\n\n    // Verificar se há dados para exportar\n    if (dadosSanitizados.length === 0) {\n      this.logger.warn('Nenhum dado válido para exportar para JSON');\n      return 0;\n    }\n\n    try {\n      // Converter para JSON formatado\n      const jsonContent = JSON.stringify(dadosSanitizados, null, 2);\n\n      if (comprimido) {\n        // Exportar compactado\n        await new Promise<void>((resolve, reject) => {\n          const gzip = zlib.createGzip();\n          const output = fs.createWriteStream(caminhoArquivo);\n\n          output.on('finish', resolve);\n          output.on('error', reject);\n\n          gzip.pipe(output);\n          gzip.write(jsonContent);\n          gzip.end();\n        });\n      } else {\n        // Exportar sem compressão\n        await fs.promises.writeFile(caminhoArquivo, jsonContent, 'utf8');\n      }\n\n      // Obter tamanho do arquivo\n      const stats = fs.statSync(caminhoArquivo);\n      return stats.size;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao exportar para JSON: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n      );\n      throw new Error(\n        `Falha ao exportar para JSON: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n      );\n    }\n  }\n\n  /**\n   * Escapa valor para CSV\n   *\n   * @param valor - Valor a escapar\n   * @returns Valor escapado\n   * @private\n   */\n  private escaparValorCSV(valor: unknown): string {\n    if (valor === null || valor === undefined) {\n      return '';\n    }\n\n    // Tratar objetos ou arrays para serialização correta\n    if (typeof valor === 'object' && valor !== null) {\n      // Para datas, usar formato ISO\n      if (valor instanceof Date) {\n        return this.escaparValorCSV(valor.toISOString());\n      }\n\n      // Para arrays e objetos, converter para JSON formatado\n      try {\n        const jsonStr = JSON.stringify(valor);\n        return this.escaparValorCSV(jsonStr);\n      } catch {\n        return this.escaparValorCSV('[Objeto complexo]');\n      }\n    }\n\n    const str = String(valor);\n\n    // Escapar aspas duplicando-as e colocar entre aspas se contiver caracteres especiais\n    if (str.includes('\"') || str.includes(',') || str.includes('\\n')) {\n      return `\"${str.replace(/\"/g, '\"\"')}\"`;\n    }\n\n    return str;\n  }\n\n  /**\n   * Exporta logs para formato CSV\n   *\n   * @param logs - Dados a exportar\n   * @param caminhoArquivo - Caminho do arquivo de destino\n   * @param comprimido - Se o arquivo deve ser compactado\n   * @returns Tamanho do arquivo em bytes\n   * @private\n   */\n  private async exportarCSV(\n    logs: Record<string, unknown>[],\n    caminhoArquivo: string,\n    comprimido?: boolean,\n  ): Promise<number> {\n    // Sanitizar dados\n    const dadosSanitizados = this.sanitizarDadosParaExportacao(logs);\n\n    // Verificar se há dados para exportar\n    if (dadosSanitizados.length === 0) {\n      this.logger.warn('Nenhum dado válido para exportar para CSV');\n      return 0;\n    }\n\n    try {\n      // Obter cabeçalhos (todas as chaves únicas presentes nos objetos)\n      const headers = Array.from(\n        new Set(dadosSanitizados.flatMap((obj) => Object.keys(obj))),\n      );\n\n      // Criar linha de cabeçalho\n      const headerRow = headers.map(this.escaparValorCSV).join(',');\n\n      // Criar linhas de dados\n      const dataRows = dadosSanitizados.map((item) => {\n        return headers\n          .map((header) => {\n            return this.escaparValorCSV(item[header]);\n          })\n          .join(',');\n      });\n\n      // Compor conteúdo CSV\n      const csvContent = [headerRow, ...dataRows].join('\\n');\n\n      if (comprimido) {\n        // Exportar compactado\n        await new Promise<void>((resolve, reject) => {\n          const gzip = zlib.createGzip();\n          const output = fs.createWriteStream(caminhoArquivo);\n\n          output.on('finish', resolve);\n          output.on('error', reject);\n\n          gzip.pipe(output);\n          gzip.write(csvContent);\n          gzip.end();\n        });\n      } else {\n        // Exportar sem compressão\n        await fs.promises.writeFile(caminhoArquivo, csvContent, 'utf8');\n      }\n\n      // Obter tamanho do arquivo\n      const stats = fs.statSync(caminhoArquivo);\n      return stats.size;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao exportar para CSV: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n      );\n      throw new Error(\n        `Falha ao exportar para CSV: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,\n      );\n    }\n  }\n}\n"],"version":3}