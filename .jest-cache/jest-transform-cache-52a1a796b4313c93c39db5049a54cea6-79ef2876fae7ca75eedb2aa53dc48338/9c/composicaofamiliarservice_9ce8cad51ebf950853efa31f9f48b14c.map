{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\composicao-familiar.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\composicao-familiar.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n  Logger,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, DataSource, IsNull, Not } from 'typeorm';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { ComposicaoFamiliar } from '../../../entities/composicao-familiar.entity';\nimport { Cidadao } from '../../../entities/cidadao.entity';\nimport { CreateComposicaoFamiliarDto } from '../dto/create-composicao-familiar.dto';\nimport { UpdateComposicaoFamiliarDto } from '../dto/update-composicao-familiar.dto';\nimport {\n  ComposicaoFamiliarResponseDto,\n  ComposicaoFamiliarPaginatedResponseDto,\n} from '../dto/composicao-familiar-response.dto';\nimport { CacheService } from '../../../shared/cache';\nimport { CPFValidator } from '../validators/cpf-validator';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\n\n/**\n * Serviço de Composição Familiar\n *\n * Responsável pela lógica de negócio relacionada aos membros da composição familiar dos cidadãos.\n * Implementa operações CRUD completas com validações específicas, cache e auditoria.\n */\n@Injectable()\nexport class ComposicaoFamiliarService {\n  private readonly logger = new Logger(ComposicaoFamiliarService.name);\n  private readonly CACHE_TTL = 3600; // 1 hora\n  private readonly CACHE_PREFIX = 'composicao_familiar:';\n\n  constructor(\n    @InjectRepository(ComposicaoFamiliar)\n    private readonly composicaoFamiliarRepository: Repository<ComposicaoFamiliar>,\n    @InjectRepository(Cidadao)\n    private readonly cidadaoRepository: Repository<Cidadao>,\n    private readonly cacheService: CacheService,\n    private readonly dataSource: DataSource,\n  ) {}\n\n  /**\n   * Cria um novo membro da composição familiar\n   * @param createComposicaoFamiliarDto Dados do membro familiar\n   * @param userId ID do usuário que está criando\n   * @returns Membro da composição familiar criado\n   */\n  async create(\n    createComposicaoFamiliarDto: CreateComposicaoFamiliarDto,\n    userId: string,\n  ): Promise<ComposicaoFamiliarResponseDto> {\n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      // Validar se o cidadão existe\n      const cidadao = await this.cidadaoRepository.findOne({\n        where: { id: createComposicaoFamiliarDto.cidadao_id },\n      });\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Validar CPF\n      const cpfLimpo = createComposicaoFamiliarDto.cpf.replace(/\\D/g, '');\n      const cpfValidator = new CPFValidator();\n      if (!cpfValidator.validate(cpfLimpo, {} as any)) {\n        throw new BadRequestException('CPF inválido');\n      }\n\n      // Verificar se já existe membro com o mesmo CPF na composição familiar do cidadão\n      const membroExistente = await this.composicaoFamiliarRepository.findOne({\n        where: {\n          cidadao_id: createComposicaoFamiliarDto.cidadao_id,\n          cpf: cpfLimpo,\n          removed_at: IsNull(),\n        },\n      });\n\n      if (membroExistente) {\n        throw new ConflictException(\n          'Já existe um membro com este CPF na composição familiar',\n        );\n      }\n\n      // Verificar se o CPF não é o mesmo do cidadão responsável\n      if (cidadao.cpf === cpfLimpo) {\n        throw new ConflictException(\n          'O CPF do membro não pode ser igual ao CPF do cidadão responsável',\n        );\n      }\n\n      // Validar se o nome não é duplicado na mesma composição familiar\n      const nomeExistente = await this.composicaoFamiliarRepository.findOne({\n        where: {\n          cidadao_id: createComposicaoFamiliarDto.cidadao_id,\n          nome: createComposicaoFamiliarDto.nome,\n          removed_at: IsNull(),\n        },\n      });\n\n      if (nomeExistente) {\n        throw new ConflictException(\n          'Já existe um membro com este nome na composição familiar',\n        );\n      }\n\n      // Normalizar campos de enum antes de criar\n      const dadosNormalizados = normalizeEnumFields({\n        ...createComposicaoFamiliarDto,\n        cpf: cpfLimpo,\n      });\n\n      // Criar o membro da composição familiar\n      const novoMembro =\n        this.composicaoFamiliarRepository.create(dadosNormalizados);\n\n      // Validar entidade\n      const errors = await validate(novoMembro);\n      if (errors.length > 0) {\n        const errorMessages = errors\n          .map((error) => Object.values(error.constraints || {}).join(', '))\n          .join('; ');\n        throw new BadRequestException(`Dados inválidos: ${errorMessages}`);\n      }\n\n      const membroSalvo = await queryRunner.manager.save(novoMembro);\n\n      await queryRunner.commitTransaction();\n\n      // Invalidar cache relacionado\n      await this.invalidateCache(createComposicaoFamiliarDto.cidadao_id);\n\n      // Converter para DTO de resposta\n      const responseDto = plainToInstance(\n        ComposicaoFamiliarResponseDto,\n        membroSalvo,\n        {\n          excludeExtraneousValues: true,\n          enableImplicitConversion: true,\n        },\n      );\n\n      // Cachear o resultado\n      await this.cacheService.set(\n        `${this.CACHE_PREFIX}id:${membroSalvo.id}`,\n        responseDto,\n        this.CACHE_TTL,\n      );\n\n      this.logger.log(\n        `Membro da composição familiar criado: ${membroSalvo.id} por usuário ${userId}`,\n      );\n\n      return responseDto;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      this.logger.error(\n        `Erro ao criar membro da composição familiar: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  /**\n   * Lista membros da composição familiar por cidadão\n   * @param cidadaoId ID do cidadão\n   * @param options Opções de paginação\n   * @returns Lista paginada de membros\n   */\n  async findByCidadao(\n    cidadaoId: string,\n    options: { page: number; limit: number },\n  ): Promise<ComposicaoFamiliarPaginatedResponseDto> {\n    const { page, limit } = options;\n    const offset = (page - 1) * limit;\n\n    // Verificar se o cidadão existe\n    const cidadao = await this.cidadaoRepository.findOne({\n      where: { id: cidadaoId },\n    });\n\n    if (!cidadao) {\n      throw new NotFoundException('Cidadão não encontrado');\n    }\n\n    // Verificar cache\n    const cacheKey = `${this.CACHE_PREFIX}cidadao:${cidadaoId}:page:${page}:limit:${limit}`;\n    const cached =\n      await this.cacheService.get<ComposicaoFamiliarPaginatedResponseDto>(\n        cacheKey,\n      );\n    if (cached) {\n      return cached;\n    }\n\n    // Buscar membros da composição familiar\n    const [membros, total] =\n      await this.composicaoFamiliarRepository.findAndCount({\n        where: {\n          cidadao_id: cidadaoId,\n          removed_at: IsNull(),\n        },\n        order: {\n          created_at: 'DESC',\n        },\n        skip: offset,\n        take: limit,\n      });\n\n    // Converter para DTOs de resposta\n    const data = membros.map((membro) =>\n      plainToInstance(ComposicaoFamiliarResponseDto, membro, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: true,\n      }),\n    );\n\n    // Calcular estatísticas\n    const estatisticas = await this.calcularEstatisticas(cidadaoId);\n\n    const totalPages = Math.ceil(total / limit);\n    const result: ComposicaoFamiliarPaginatedResponseDto = {\n      data,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1,\n      },\n      estatisticas,\n    };\n\n    // Cachear resultado\n    await this.cacheService.set(cacheKey, result, this.CACHE_TTL);\n\n    return result;\n  }\n\n  /**\n   * Busca um membro específico da composição familiar\n   * @param id ID do membro\n   * @returns Dados do membro\n   */\n  async findOne(id: string): Promise<ComposicaoFamiliarResponseDto> {\n    // Verificar cache\n    const cacheKey = `${this.CACHE_PREFIX}id:${id}`;\n    const cached =\n      await this.cacheService.get<ComposicaoFamiliarResponseDto>(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    const membro = await this.composicaoFamiliarRepository.findOne({\n      where: {\n        id,\n        removed_at: IsNull(),\n      },\n      relations: ['cidadao'],\n    });\n\n    if (!membro) {\n      throw new NotFoundException(\n        'Membro da composição familiar não encontrado',\n      );\n    }\n\n    const responseDto = plainToInstance(ComposicaoFamiliarResponseDto, membro, {\n      excludeExtraneousValues: true,\n      enableImplicitConversion: true,\n    });\n\n    // Cachear resultado\n    await this.cacheService.set(cacheKey, responseDto, this.CACHE_TTL);\n\n    return responseDto;\n  }\n\n  /**\n   * Atualiza um membro da composição familiar\n   * @param id ID do membro\n   * @param updateComposicaoFamiliarDto Dados para atualização\n   * @param userId ID do usuário que está atualizando\n   * @returns Membro atualizado\n   */\n  async update(\n    id: string,\n    updateComposicaoFamiliarDto: UpdateComposicaoFamiliarDto,\n    userId: string,\n  ): Promise<ComposicaoFamiliarResponseDto> {\n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      const membro = await this.composicaoFamiliarRepository.findOne({\n        where: {\n          id,\n          removed_at: IsNull(),\n        },\n        relations: ['cidadao'],\n      });\n\n      if (!membro) {\n        throw new NotFoundException(\n          'Membro da composição familiar não encontrado',\n        );\n      }\n\n      // Se o CPF está sendo atualizado, validar\n      if (updateComposicaoFamiliarDto.cpf) {\n        const cpfLimpo = updateComposicaoFamiliarDto.cpf.replace(/\\D/g, '');\n        const cpfValidator = new CPFValidator();\n        if (!cpfValidator.validate(cpfLimpo, {} as any)) {\n          throw new BadRequestException('CPF inválido');\n        }\n\n        // Verificar se já existe outro membro com o mesmo CPF\n        const membroExistente = await this.composicaoFamiliarRepository.findOne(\n          {\n            where: {\n              cidadao_id: membro.cidadao_id,\n              cpf: cpfLimpo,\n              id: Not(id),\n              removed_at: IsNull(),\n            },\n          },\n        );\n\n        if (membroExistente) {\n          throw new ConflictException(\n            'Já existe um membro com este CPF na composição familiar',\n          );\n        }\n\n        // Verificar se o CPF não é o mesmo do cidadão responsável\n        if (membro.cidadao.cpf === cpfLimpo) {\n          throw new ConflictException(\n            'O CPF do membro não pode ser igual ao CPF do cidadão responsável',\n          );\n        }\n\n        updateComposicaoFamiliarDto.cpf = cpfLimpo;\n      }\n\n      // Se o nome está sendo atualizado, validar\n      if (updateComposicaoFamiliarDto.nome) {\n        const nomeExistente = await this.composicaoFamiliarRepository.findOne({\n          where: {\n            cidadao_id: membro.cidadao_id,\n            nome: updateComposicaoFamiliarDto.nome,\n            id: Not(id),\n            removed_at: IsNull(),\n          },\n        });\n\n        if (nomeExistente) {\n          throw new ConflictException(\n            'Já existe um membro com este nome na composição familiar',\n          );\n        }\n      }\n\n      // Normalizar campos de enum antes de atualizar\n      const dadosNormalizados = normalizeEnumFields({\n        ...updateComposicaoFamiliarDto,\n      });\n\n      // Atualizar dados\n      Object.assign(membro, dadosNormalizados);\n      membro.updated_at = new Date();\n\n      // Validar entidade\n      const errors = await validate(membro);\n      if (errors.length > 0) {\n        const errorMessages = errors\n          .map((error) => Object.values(error.constraints || {}).join(', '))\n          .join('; ');\n        throw new BadRequestException(`Dados inválidos: ${errorMessages}`);\n      }\n\n      const membroAtualizado = await queryRunner.manager.save(membro);\n\n      await queryRunner.commitTransaction();\n\n      // Invalidar cache\n      await this.invalidateCache(membro.cidadao_id, id);\n\n      const responseDto = plainToInstance(\n        ComposicaoFamiliarResponseDto,\n        membroAtualizado,\n        {\n          excludeExtraneousValues: true,\n          enableImplicitConversion: true,\n        },\n      );\n\n      // Atualizar cache\n      await this.cacheService.set(\n        `${this.CACHE_PREFIX}id:${id}`,\n        responseDto,\n        this.CACHE_TTL,\n      );\n\n      this.logger.log(\n        `Membro da composição familiar atualizado: ${id} por usuário ${userId}`,\n      );\n\n      return responseDto;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n      this.logger.error(\n        `Erro ao atualizar membro da composição familiar: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  /**\n   * Remove um membro da composição familiar (soft delete)\n   * @param id ID do membro\n   * @param userId ID do usuário que está removendo\n   */\n  async remove(id: string, userId: string): Promise<void> {\n    const membro = await this.composicaoFamiliarRepository.findOne({\n      where: {\n        id,\n        removed_at: IsNull(),\n      },\n    });\n\n    if (!membro) {\n      throw new NotFoundException(\n        'Membro da composição familiar não encontrado',\n      );\n    }\n\n    // Soft delete\n    membro.removed_at = new Date();\n    await this.composicaoFamiliarRepository.save(membro);\n\n    // Invalidar cache\n    await this.invalidateCache(membro.cidadao_id, id);\n\n    this.logger.log(\n      `Membro da composição familiar removido: ${id} por usuário ${userId}`,\n    );\n  }\n\n  /**\n   * Busca membros da composição familiar por CPF\n   * @param cpf CPF para busca\n   * @returns Lista de membros encontrados\n   */\n  async findByCpf(cpf: string): Promise<ComposicaoFamiliarResponseDto[]> {\n    const cpfLimpo = cpf.replace(/\\D/g, '');\n\n    if (cpfLimpo.length !== 11) {\n      throw new BadRequestException('CPF deve ter 11 dígitos');\n    }\n\n    const membros = await this.composicaoFamiliarRepository.find({\n      where: {\n        cpf: cpfLimpo,\n        removed_at: IsNull(),\n      },\n      relations: ['cidadao'],\n      order: {\n        created_at: 'DESC',\n      },\n    });\n\n    return membros.map((membro) =>\n      plainToInstance(ComposicaoFamiliarResponseDto, membro, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: true,\n      }),\n    );\n  }\n\n  /**\n   * Calcula estatísticas da composição familiar\n   * @param cidadaoId ID do cidadão\n   * @returns Estatísticas calculadas\n   */\n  private async calcularEstatisticas(cidadaoId: string) {\n    const membros = await this.composicaoFamiliarRepository.find({\n      where: {\n        cidadao_id: cidadaoId,\n        removed_at: IsNull(),\n      },\n    });\n\n    const totalMembros = membros.length;\n    const membrosComRenda = membros.filter(\n      (m) => m.renda && m.renda > 0,\n    ).length;\n    const rendaTotal = membros.reduce((sum, m) => sum + (m.renda || 0), 0);\n    const rendaMedia = membrosComRenda > 0 ? rendaTotal / membrosComRenda : 0;\n    const idadeMedia =\n      totalMembros > 0\n        ? membros.reduce((sum, m) => sum + m.idade, 0) / totalMembros\n        : 0;\n\n    return {\n      totalMembros,\n      rendaTotal,\n      rendaMedia: Math.round(rendaMedia * 100) / 100,\n      idadeMedia: Math.round(idadeMedia * 100) / 100,\n      membrosComRenda,\n    };\n  }\n\n  /**\n   * Invalida cache relacionado à composição familiar\n   * @param cidadaoId ID do cidadão\n   * @param membroId ID do membro (opcional)\n   */\n  private async invalidateCache(\n    cidadaoId: string,\n    membroId?: string,\n  ): Promise<void> {\n    const patterns = [\n      `${this.CACHE_PREFIX}cidadao:${cidadaoId}:*`,\n      `cidadao:id:${cidadaoId}`,\n      `cidadao:list:*`,\n    ];\n\n    if (membroId) {\n      patterns.push(`${this.CACHE_PREFIX}id:${membroId}`);\n    }\n\n    for (const pattern of patterns) {\n      await this.cacheService.del(pattern);\n    }\n  }\n}\n"],"version":3}