afba1ff7104782cdf80fbaceb6c15859
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ComposicaoFamiliarService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComposicaoFamiliarService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const class_transformer_1 = require("class-transformer");
const class_validator_1 = require("class-validator");
const composicao_familiar_entity_1 = require("../../../entities/composicao-familiar.entity");
const cidadao_entity_1 = require("../../../entities/cidadao.entity");
const composicao_familiar_response_dto_1 = require("../dto/composicao-familiar-response.dto");
const cache_1 = require("../../../shared/cache");
const cpf_validator_1 = require("../validators/cpf-validator");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
/**
 * Serviço de Composição Familiar
 *
 * Responsável pela lógica de negócio relacionada aos membros da composição familiar dos cidadãos.
 * Implementa operações CRUD completas com validações específicas, cache e auditoria.
 */
let ComposicaoFamiliarService = ComposicaoFamiliarService_1 = class ComposicaoFamiliarService {
    composicaoFamiliarRepository;
    cidadaoRepository;
    cacheService;
    dataSource;
    logger = new common_1.Logger(ComposicaoFamiliarService_1.name);
    CACHE_TTL = 3600; // 1 hora
    CACHE_PREFIX = 'composicao_familiar:';
    constructor(composicaoFamiliarRepository, cidadaoRepository, cacheService, dataSource) {
        this.composicaoFamiliarRepository = composicaoFamiliarRepository;
        this.cidadaoRepository = cidadaoRepository;
        this.cacheService = cacheService;
        this.dataSource = dataSource;
    }
    /**
     * Cria um novo membro da composição familiar
     * @param createComposicaoFamiliarDto Dados do membro familiar
     * @param userId ID do usuário que está criando
     * @returns Membro da composição familiar criado
     */
    async create(createComposicaoFamiliarDto, userId) {
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Validar se o cidadão existe
            const cidadao = await this.cidadaoRepository.findOne({
                where: { id: createComposicaoFamiliarDto.cidadao_id },
            });
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Validar CPF
            const cpfLimpo = createComposicaoFamiliarDto.cpf.replace(/\D/g, '');
            const cpfValidator = new cpf_validator_1.CPFValidator();
            if (!cpfValidator.validate(cpfLimpo, {})) {
                throw new common_1.BadRequestException('CPF inválido');
            }
            // Verificar se já existe membro com o mesmo CPF na composição familiar do cidadão
            const membroExistente = await this.composicaoFamiliarRepository.findOne({
                where: {
                    cidadao_id: createComposicaoFamiliarDto.cidadao_id,
                    cpf: cpfLimpo,
                    removed_at: (0, typeorm_2.IsNull)(),
                },
            });
            if (membroExistente) {
                throw new common_1.ConflictException('Já existe um membro com este CPF na composição familiar');
            }
            // Verificar se o CPF não é o mesmo do cidadão responsável
            if (cidadao.cpf === cpfLimpo) {
                throw new common_1.ConflictException('O CPF do membro não pode ser igual ao CPF do cidadão responsável');
            }
            // Validar se o nome não é duplicado na mesma composição familiar
            const nomeExistente = await this.composicaoFamiliarRepository.findOne({
                where: {
                    cidadao_id: createComposicaoFamiliarDto.cidadao_id,
                    nome: createComposicaoFamiliarDto.nome,
                    removed_at: (0, typeorm_2.IsNull)(),
                },
            });
            if (nomeExistente) {
                throw new common_1.ConflictException('Já existe um membro com este nome na composição familiar');
            }
            // Normalizar campos de enum antes de criar
            const dadosNormalizados = (0, enum_normalizer_util_1.normalizeEnumFields)({
                ...createComposicaoFamiliarDto,
                cpf: cpfLimpo,
            });
            // Criar o membro da composição familiar
            const novoMembro = this.composicaoFamiliarRepository.create(dadosNormalizados);
            // Validar entidade
            const errors = await (0, class_validator_1.validate)(novoMembro);
            if (errors.length > 0) {
                const errorMessages = errors
                    .map((error) => Object.values(error.constraints || {}).join(', '))
                    .join('; ');
                throw new common_1.BadRequestException(`Dados inválidos: ${errorMessages}`);
            }
            const membroSalvo = await queryRunner.manager.save(novoMembro);
            await queryRunner.commitTransaction();
            // Invalidar cache relacionado
            await this.invalidateCache(createComposicaoFamiliarDto.cidadao_id);
            // Converter para DTO de resposta
            const responseDto = (0, class_transformer_1.plainToInstance)(composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto, membroSalvo, {
                excludeExtraneousValues: true,
                enableImplicitConversion: true,
            });
            // Cachear o resultado
            await this.cacheService.set(`${this.CACHE_PREFIX}id:${membroSalvo.id}`, responseDto, this.CACHE_TTL);
            this.logger.log(`Membro da composição familiar criado: ${membroSalvo.id} por usuário ${userId}`);
            return responseDto;
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            this.logger.error(`Erro ao criar membro da composição familiar: ${error.message}`, error.stack);
            throw error;
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Lista membros da composição familiar por cidadão
     * @param cidadaoId ID do cidadão
     * @param options Opções de paginação
     * @returns Lista paginada de membros
     */
    async findByCidadao(cidadaoId, options) {
        const { page, limit } = options;
        const offset = (page - 1) * limit;
        // Verificar se o cidadão existe
        const cidadao = await this.cidadaoRepository.findOne({
            where: { id: cidadaoId },
        });
        if (!cidadao) {
            throw new common_1.NotFoundException('Cidadão não encontrado');
        }
        // Verificar cache
        const cacheKey = `${this.CACHE_PREFIX}cidadao:${cidadaoId}:page:${page}:limit:${limit}`;
        const cached = await this.cacheService.get(cacheKey);
        if (cached) {
            return cached;
        }
        // Buscar membros da composição familiar
        const [membros, total] = await this.composicaoFamiliarRepository.findAndCount({
            where: {
                cidadao_id: cidadaoId,
                removed_at: (0, typeorm_2.IsNull)(),
            },
            order: {
                created_at: 'DESC',
            },
            skip: offset,
            take: limit,
        });
        // Converter para DTOs de resposta
        const data = membros.map((membro) => (0, class_transformer_1.plainToInstance)(composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto, membro, {
            excludeExtraneousValues: true,
            enableImplicitConversion: true,
        }));
        // Calcular estatísticas
        const estatisticas = await this.calcularEstatisticas(cidadaoId);
        const totalPages = Math.ceil(total / limit);
        const result = {
            data,
            meta: {
                total,
                page,
                limit,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1,
            },
            estatisticas,
        };
        // Cachear resultado
        await this.cacheService.set(cacheKey, result, this.CACHE_TTL);
        return result;
    }
    /**
     * Busca um membro específico da composição familiar
     * @param id ID do membro
     * @returns Dados do membro
     */
    async findOne(id) {
        // Verificar cache
        const cacheKey = `${this.CACHE_PREFIX}id:${id}`;
        const cached = await this.cacheService.get(cacheKey);
        if (cached) {
            return cached;
        }
        const membro = await this.composicaoFamiliarRepository.findOne({
            where: {
                id,
                removed_at: (0, typeorm_2.IsNull)(),
            },
            relations: ['cidadao'],
        });
        if (!membro) {
            throw new common_1.NotFoundException('Membro da composição familiar não encontrado');
        }
        const responseDto = (0, class_transformer_1.plainToInstance)(composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto, membro, {
            excludeExtraneousValues: true,
            enableImplicitConversion: true,
        });
        // Cachear resultado
        await this.cacheService.set(cacheKey, responseDto, this.CACHE_TTL);
        return responseDto;
    }
    /**
     * Atualiza um membro da composição familiar
     * @param id ID do membro
     * @param updateComposicaoFamiliarDto Dados para atualização
     * @param userId ID do usuário que está atualizando
     * @returns Membro atualizado
     */
    async update(id, updateComposicaoFamiliarDto, userId) {
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            const membro = await this.composicaoFamiliarRepository.findOne({
                where: {
                    id,
                    removed_at: (0, typeorm_2.IsNull)(),
                },
                relations: ['cidadao'],
            });
            if (!membro) {
                throw new common_1.NotFoundException('Membro da composição familiar não encontrado');
            }
            // Se o CPF está sendo atualizado, validar
            if (updateComposicaoFamiliarDto.cpf) {
                const cpfLimpo = updateComposicaoFamiliarDto.cpf.replace(/\D/g, '');
                const cpfValidator = new cpf_validator_1.CPFValidator();
                if (!cpfValidator.validate(cpfLimpo, {})) {
                    throw new common_1.BadRequestException('CPF inválido');
                }
                // Verificar se já existe outro membro com o mesmo CPF
                const membroExistente = await this.composicaoFamiliarRepository.findOne({
                    where: {
                        cidadao_id: membro.cidadao_id,
                        cpf: cpfLimpo,
                        id: (0, typeorm_2.Not)(id),
                        removed_at: (0, typeorm_2.IsNull)(),
                    },
                });
                if (membroExistente) {
                    throw new common_1.ConflictException('Já existe um membro com este CPF na composição familiar');
                }
                // Verificar se o CPF não é o mesmo do cidadão responsável
                if (membro.cidadao.cpf === cpfLimpo) {
                    throw new common_1.ConflictException('O CPF do membro não pode ser igual ao CPF do cidadão responsável');
                }
                updateComposicaoFamiliarDto.cpf = cpfLimpo;
            }
            // Se o nome está sendo atualizado, validar
            if (updateComposicaoFamiliarDto.nome) {
                const nomeExistente = await this.composicaoFamiliarRepository.findOne({
                    where: {
                        cidadao_id: membro.cidadao_id,
                        nome: updateComposicaoFamiliarDto.nome,
                        id: (0, typeorm_2.Not)(id),
                        removed_at: (0, typeorm_2.IsNull)(),
                    },
                });
                if (nomeExistente) {
                    throw new common_1.ConflictException('Já existe um membro com este nome na composição familiar');
                }
            }
            // Normalizar campos de enum antes de atualizar
            const dadosNormalizados = (0, enum_normalizer_util_1.normalizeEnumFields)({
                ...updateComposicaoFamiliarDto,
            });
            // Atualizar dados
            Object.assign(membro, dadosNormalizados);
            membro.updated_at = new Date();
            // Validar entidade
            const errors = await (0, class_validator_1.validate)(membro);
            if (errors.length > 0) {
                const errorMessages = errors
                    .map((error) => Object.values(error.constraints || {}).join(', '))
                    .join('; ');
                throw new common_1.BadRequestException(`Dados inválidos: ${errorMessages}`);
            }
            const membroAtualizado = await queryRunner.manager.save(membro);
            await queryRunner.commitTransaction();
            // Invalidar cache
            await this.invalidateCache(membro.cidadao_id, id);
            const responseDto = (0, class_transformer_1.plainToInstance)(composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto, membroAtualizado, {
                excludeExtraneousValues: true,
                enableImplicitConversion: true,
            });
            // Atualizar cache
            await this.cacheService.set(`${this.CACHE_PREFIX}id:${id}`, responseDto, this.CACHE_TTL);
            this.logger.log(`Membro da composição familiar atualizado: ${id} por usuário ${userId}`);
            return responseDto;
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            this.logger.error(`Erro ao atualizar membro da composição familiar: ${error.message}`, error.stack);
            throw error;
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Remove um membro da composição familiar (soft delete)
     * @param id ID do membro
     * @param userId ID do usuário que está removendo
     */
    async remove(id, userId) {
        const membro = await this.composicaoFamiliarRepository.findOne({
            where: {
                id,
                removed_at: (0, typeorm_2.IsNull)(),
            },
        });
        if (!membro) {
            throw new common_1.NotFoundException('Membro da composição familiar não encontrado');
        }
        // Soft delete
        membro.removed_at = new Date();
        await this.composicaoFamiliarRepository.save(membro);
        // Invalidar cache
        await this.invalidateCache(membro.cidadao_id, id);
        this.logger.log(`Membro da composição familiar removido: ${id} por usuário ${userId}`);
    }
    /**
     * Busca membros da composição familiar por CPF
     * @param cpf CPF para busca
     * @returns Lista de membros encontrados
     */
    async findByCpf(cpf) {
        const cpfLimpo = cpf.replace(/\D/g, '');
        if (cpfLimpo.length !== 11) {
            throw new common_1.BadRequestException('CPF deve ter 11 dígitos');
        }
        const membros = await this.composicaoFamiliarRepository.find({
            where: {
                cpf: cpfLimpo,
                removed_at: (0, typeorm_2.IsNull)(),
            },
            relations: ['cidadao'],
            order: {
                created_at: 'DESC',
            },
        });
        return membros.map((membro) => (0, class_transformer_1.plainToInstance)(composicao_familiar_response_dto_1.ComposicaoFamiliarResponseDto, membro, {
            excludeExtraneousValues: true,
            enableImplicitConversion: true,
        }));
    }
    /**
     * Calcula estatísticas da composição familiar
     * @param cidadaoId ID do cidadão
     * @returns Estatísticas calculadas
     */
    async calcularEstatisticas(cidadaoId) {
        const membros = await this.composicaoFamiliarRepository.find({
            where: {
                cidadao_id: cidadaoId,
                removed_at: (0, typeorm_2.IsNull)(),
            },
        });
        const totalMembros = membros.length;
        const membrosComRenda = membros.filter((m) => m.renda && m.renda > 0).length;
        const rendaTotal = membros.reduce((sum, m) => sum + (m.renda || 0), 0);
        const rendaMedia = membrosComRenda > 0 ? rendaTotal / membrosComRenda : 0;
        const idadeMedia = totalMembros > 0
            ? membros.reduce((sum, m) => sum + m.idade, 0) / totalMembros
            : 0;
        return {
            totalMembros,
            rendaTotal,
            rendaMedia: Math.round(rendaMedia * 100) / 100,
            idadeMedia: Math.round(idadeMedia * 100) / 100,
            membrosComRenda,
        };
    }
    /**
     * Invalida cache relacionado à composição familiar
     * @param cidadaoId ID do cidadão
     * @param membroId ID do membro (opcional)
     */
    async invalidateCache(cidadaoId, membroId) {
        const patterns = [
            `${this.CACHE_PREFIX}cidadao:${cidadaoId}:*`,
            `cidadao:id:${cidadaoId}`,
            `cidadao:list:*`,
        ];
        if (membroId) {
            patterns.push(`${this.CACHE_PREFIX}id:${membroId}`);
        }
        for (const pattern of patterns) {
            await this.cacheService.del(pattern);
        }
    }
};
exports.ComposicaoFamiliarService = ComposicaoFamiliarService;
exports.ComposicaoFamiliarService = ComposicaoFamiliarService = ComposicaoFamiliarService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(composicao_familiar_entity_1.ComposicaoFamiliar)),
    __param(1, (0, typeorm_1.InjectRepository)(cidadao_entity_1.Cidadao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof cache_1.CacheService !== "undefined" && cache_1.CacheService) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _d : Object])
], ComposicaoFamiliarService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,