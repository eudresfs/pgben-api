1d0e252e82c481bf609ed0cff15103f5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordResetToken = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const usuario_entity_1 = require("./usuario.entity");
/**
 * Entidade para Tokens de Recuperação de Senha
 *
 * Armazena tokens temporários para recuperação de senha com:
 * - Associação ao usuário
 * - Token único e seguro
 * - Controle de expiração
 * - Rastreamento de uso
 * - Auditoria de tentativas
 */
let PasswordResetToken = class PasswordResetToken {
    id;
    /**
     * Token único para recuperação de senha
     * Gerado com alta entropia para segurança
     */
    token;
    /**
     * Hash do token para verificação segura
     * Armazenamos o hash para evitar exposição do token original
     */
    token_hash;
    /**
     * Usuário associado ao token
     */
    usuario;
    usuario_id;
    /**
     * Data e hora de expiração do token
     * Padrão: 15 minutos após criação
     */
    expires_at;
    /**
     * Indica se o token já foi utilizado
     * Tokens são de uso único
     */
    is_used;
    /**
     * Data e hora em que o token foi utilizado
     */
    used_at;
    /**
     * IP do cliente que solicitou o token
     * Para auditoria e segurança
     */
    client_ip;
    /**
     * User Agent do cliente que solicitou o token
     * Para auditoria e detecção de anomalias
     */
    user_agent;
    /**
     * Número de tentativas de uso do token
     * Para detectar ataques de força bruta
     */
    attempts;
    /**
     * Data da última tentativa de uso
     */
    last_attempt_at;
    /**
     * Motivo da invalidação (se aplicável)
     * Ex: 'expired', 'used', 'revoked', 'suspicious_activity'
     */
    invalidation_reason;
    /**
     * Metadados adicionais em formato JSON
     * Para informações extras de auditoria
     */
    metadata;
    created_at;
    updated_at;
    /**
     * Verifica se o token está válido
     * @returns true se o token não expirou e não foi usado
     */
    isValid() {
        const now = new Date();
        return !this.is_used && this.expires_at > now;
    }
    /**
     * Verifica se o token expirou
     * @returns true se o token expirou
     */
    isExpired() {
        const now = new Date();
        return this.expires_at <= now;
    }
    /**
     * Marca o token como usado
     * @param reason Motivo da invalidação
     */
    markAsUsed(reason = 'used') {
        this.is_used = true;
        this.used_at = new Date();
        this.invalidation_reason = reason;
    }
    /**
     * Incrementa o contador de tentativas
     */
    incrementAttempts() {
        this.attempts += 1;
        this.last_attempt_at = new Date();
    }
    /**
     * Calcula o tempo restante até a expiração em minutos
     * @returns Minutos restantes ou 0 se expirado
     */
    getMinutesUntilExpiration() {
        const now = new Date();
        if (this.expires_at <= now) {
            return 0;
        }
        return Math.ceil((this.expires_at.getTime() - now.getTime()) / (1000 * 60));
    }
    /**
     * Verifica se o token pertence a um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se pertence ao usuário
     */
    belongsToUser(usuarioId) {
        return this.usuario_id === usuarioId;
    }
    /**
     * Verifica se o token foi criado recentemente (últimas 24 horas)
     * @returns true se foi criado recentemente
     */
    isRecentlyCreated() {
        const now = new Date();
        const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > oneDayAgo;
    }
    /**
     * Verifica se há muitas tentativas de uso (possível ataque)
     * @param maxAttempts Número máximo de tentativas permitidas
     * @returns true se excedeu o limite
     */
    hasTooManyAttempts(maxAttempts = 5) {
        return this.attempts >= maxAttempts;
    }
    /**
     * Verifica se o token expira em breve (próximos 5 minutos)
     * @param minutes Minutos para considerar como "em breve"
     * @returns true se expira em breve
     */
    expiresWithin(minutes = 5) {
        const now = new Date();
        const futureTime = new Date(now.getTime() + minutes * 60 * 1000);
        return this.expires_at <= futureTime;
    }
    /**
     * Calcula há quantos minutos o token foi criado
     * @returns minutos desde a criação
     */
    getMinutesSinceCreation() {
        const now = new Date();
        const diffMs = now.getTime() - this.created_at.getTime();
        return Math.floor(diffMs / (1000 * 60));
    }
    /**
     * Obtém o status atual do token
     * @returns status do token
     */
    getStatus() {
        if (this.is_used)
            return 'used';
        if (this.isExpired())
            return 'expired';
        if (this.hasTooManyAttempts())
            return 'too_many_attempts';
        return 'valid';
    }
    /**
     * Verifica se tem informações de cliente (IP e User Agent)
     * @returns true se tem informações de cliente
     */
    hasClientInfo() {
        return !!(this.client_ip || this.user_agent);
    }
    /**
     * Adiciona metadados ao token
     * @param key Chave do metadado
     * @param value Valor do metadado
     */
    addMetadata(key, value) {
        if (!this.metadata) {
            this.metadata = {};
        }
        this.metadata[key] = value;
    }
    /**
     * Obtém um metadado específico
     * @param key Chave do metadado
     * @returns Valor do metadado ou undefined
     */
    getMetadata(key) {
        return this.metadata?.[key];
    }
    /**
     * Obtém informações resumidas do token
     * @returns objeto com informações resumidas
     */
    getSummary() {
        return {
            id: this.id,
            usuario_id: this.usuario_id,
            is_used: this.is_used,
            expires_at: this.expires_at,
            created_at: this.created_at,
            attempts: this.attempts,
            status: this.getStatus(),
            minutesUntilExpiration: this.getMinutesUntilExpiration(),
            hasClientInfo: this.hasClientInfo(),
        };
    }
    /**
     * Invalida o token com um motivo específico
     * @param reason Motivo da invalidação
     */
    invalidate(reason) {
        this.is_used = true;
        this.used_at = new Date();
        this.invalidation_reason = reason;
    }
    /**
     * Verifica se o token foi invalidado por motivos de segurança
     * @returns true se foi invalidado por segurança
     */
    isSecurityInvalidated() {
        const securityReasons = [
            'suspicious_activity',
            'too_many_attempts',
            'security_breach',
            'admin_revoke',
        ];
        return securityReasons.includes(this.invalidation_reason);
    }
    /**
     * Gera uma chave única para o token
     * @returns chave única
     */
    getUniqueKey() {
        return `password_reset_${this.usuario_id}_${this.id}`;
    }
    /**
     * Verifica se o token está em estado consistente
     * @returns true se está consistente
     */
    isConsistent() {
        return (!!this.id &&
            !!this.token &&
            !!this.token_hash &&
            !!this.usuario_id &&
            !!this.expires_at &&
            !!this.created_at &&
            typeof this.is_used === 'boolean' &&
            typeof this.attempts === 'number');
    }
    /**
     * Remove informações sensíveis para logs
     * @returns objeto sanitizado
     */
    toSafeLog() {
        return {
            id: this.id,
            usuario_id: this.usuario_id,
            token_preview: this.token.substring(0, 8) + '...',
            is_used: this.is_used,
            expires_at: this.expires_at,
            created_at: this.created_at,
            attempts: this.attempts,
            status: this.getStatus(),
            hasClientInfo: this.hasClientInfo(),
        };
    }
    /**
     * Formata a data de expiração para exibição
     * @returns data formatada
     */
    getExpiracaoFormatada() {
        return this.expires_at.toLocaleString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
        });
    }
    /**
     * Formata a data de criação para exibição
     * @returns data formatada
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
        });
    }
    /**
     * Verifica se o token pode ser usado para reset de senha
     * @returns true se pode ser usado
     */
    canBeUsedForReset() {
        return (this.isValid() &&
            !this.hasTooManyAttempts() &&
            !this.isSecurityInvalidated());
    }
};
exports.PasswordResetToken = PasswordResetToken;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], PasswordResetToken.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'varchar',
        length: 255,
        unique: true,
        nullable: false,
        comment: 'Token único para recuperação de senha',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Token é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Token deve ser uma string' }),
    (0, class_validator_1.Length)(10, 255, { message: 'Token deve ter entre 10 e 255 caracteres' }),
    __metadata("design:type", String)
], PasswordResetToken.prototype, "token", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'varchar',
        length: 255,
        nullable: false,
        comment: 'Hash do token para verificação segura',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Hash do token é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Hash do token deve ser uma string' }),
    (0, class_validator_1.Length)(32, 255, {
        message: 'Hash do token deve ter entre 32 e 255 caracteres',
    }),
    __metadata("design:type", String)
], PasswordResetToken.prototype, "token_hash", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'usuario_id' }),
    __metadata("design:type", typeof (_a = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _a : Object)
], PasswordResetToken.prototype, "usuario", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'uuid',
        nullable: false,
        comment: 'ID do usuário associado ao token',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do usuário é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário inválido' }),
    __metadata("design:type", String)
], PasswordResetToken.prototype, "usuario_id", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'timestamp',
        nullable: false,
        comment: 'Data e hora de expiração do token',
    }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], PasswordResetToken.prototype, "expires_at", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'boolean',
        default: false,
        nullable: false,
        comment: 'Indica se o token já foi utilizado',
    }),
    (0, class_validator_1.IsBoolean)({ message: 'Campo is_used deve ser um boolean' }),
    __metadata("design:type", Boolean)
], PasswordResetToken.prototype, "is_used", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'timestamp',
        nullable: true,
        comment: 'Data e hora em que o token foi utilizado',
    }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], PasswordResetToken.prototype, "used_at", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'varchar',
        length: 45, // IPv6 max length
        nullable: true,
        comment: 'IP do cliente que solicitou o token',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'IP do cliente deve ser uma string' }),
    (0, class_validator_1.Length)(7, 45, { message: 'IP do cliente deve ter entre 7 e 45 caracteres' }),
    __metadata("design:type", String)
], PasswordResetToken.prototype, "client_ip", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'text',
        nullable: true,
        comment: 'User Agent do cliente que solicitou o token',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'User Agent deve ser uma string' }),
    __metadata("design:type", String)
], PasswordResetToken.prototype, "user_agent", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'integer',
        default: 0,
        nullable: false,
        comment: 'Número de tentativas de uso do token',
    }),
    (0, class_validator_1.IsNumber)({}, { message: 'Número de tentativas deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Número de tentativas não pode ser negativo' }),
    (0, class_validator_1.Max)(100, { message: 'Número de tentativas não pode exceder 100' }),
    __metadata("design:type", Number)
], PasswordResetToken.prototype, "attempts", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'timestamp',
        nullable: true,
        comment: 'Data da última tentativa de uso',
    }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], PasswordResetToken.prototype, "last_attempt_at", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'varchar',
        length: 50,
        nullable: true,
        comment: 'Motivo da invalidação do token',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Motivo da invalidação deve ser uma string' }),
    (0, class_validator_1.Length)(3, 50, {
        message: 'Motivo da invalidação deve ter entre 3 e 50 caracteres',
    }),
    __metadata("design:type", String)
], PasswordResetToken.prototype, "invalidation_reason", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'jsonb',
        nullable: true,
        comment: 'Metadados adicionais para auditoria',
    }),
    __metadata("design:type", typeof (_e = typeof Record !== "undefined" && Record) === "function" ? _e : Object)
], PasswordResetToken.prototype, "metadata", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({
        type: 'timestamp',
        default: () => 'CURRENT_TIMESTAMP',
        comment: 'Data de criação do registro',
    }),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], PasswordResetToken.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({
        type: 'timestamp',
        default: () => 'CURRENT_TIMESTAMP',
        onUpdate: 'CURRENT_TIMESTAMP',
        comment: 'Data da última atualização do registro',
    }),
    __metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], PasswordResetToken.prototype, "updated_at", void 0);
exports.PasswordResetToken = PasswordResetToken = __decorate([
    (0, typeorm_1.Entity)('password_reset_tokens'),
    (0, typeorm_1.Index)(['token'], { unique: true }),
    (0, typeorm_1.Index)(['usuario_id', 'is_used']),
    (0, typeorm_1.Index)(['expires_at']),
    (0, typeorm_1.Index)(['used_at'])
], PasswordResetToken);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,