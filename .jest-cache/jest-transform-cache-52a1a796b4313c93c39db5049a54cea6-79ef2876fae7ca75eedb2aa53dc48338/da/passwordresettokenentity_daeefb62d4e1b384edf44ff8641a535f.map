{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\password-reset-token.entity.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\password-reset-token.entity.ts"],"sourcesContent":["import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  ManyToOne,\n  JoinColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  Index,\n} from 'typeorm';\nimport {\n  IsNotEmpty,\n  IsUUID,\n  IsBoolean,\n  IsOptional,\n  IsString,\n  IsNumber,\n  Length,\n  Min,\n  Max,\n} from 'class-validator';\nimport { Usuario } from './usuario.entity';\n\n/**\n * Entidade para Tokens de Recuperação de Senha\n *\n * Armazena tokens temporários para recuperação de senha com:\n * - Associação ao usuário\n * - Token único e seguro\n * - Controle de expiração\n * - Rastreamento de uso\n * - Auditoria de tentativas\n */\n@Entity('password_reset_tokens')\n@Index(['token'], { unique: true })\n@Index(['usuario_id', 'is_used'])\n@Index(['expires_at'])\n@Index(['used_at'])\nexport class PasswordResetToken {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * Token único para recuperação de senha\n   * Gerado com alta entropia para segurança\n   */\n  @Column({\n    type: 'varchar',\n    length: 255,\n    unique: true,\n    nullable: false,\n    comment: 'Token único para recuperação de senha',\n  })\n  @IsNotEmpty({ message: 'Token é obrigatório' })\n  @IsString({ message: 'Token deve ser uma string' })\n  @Length(10, 255, { message: 'Token deve ter entre 10 e 255 caracteres' })\n  token: string;\n\n  /**\n   * Hash do token para verificação segura\n   * Armazenamos o hash para evitar exposição do token original\n   */\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    comment: 'Hash do token para verificação segura',\n  })\n  @IsNotEmpty({ message: 'Hash do token é obrigatório' })\n  @IsString({ message: 'Hash do token deve ser uma string' })\n  @Length(32, 255, {\n    message: 'Hash do token deve ter entre 32 e 255 caracteres',\n  })\n  token_hash: string;\n\n  /**\n   * Usuário associado ao token\n   */\n  @ManyToOne(() => Usuario, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'usuario_id' })\n  usuario: Usuario;\n\n  @Column({\n    type: 'uuid',\n    nullable: false,\n    comment: 'ID do usuário associado ao token',\n  })\n  @IsNotEmpty({ message: 'ID do usuário é obrigatório' })\n  @IsUUID('4', { message: 'ID do usuário inválido' })\n  usuario_id: string;\n\n  /**\n   * Data e hora de expiração do token\n   * Padrão: 15 minutos após criação\n   */\n  @Column({\n    type: 'timestamp',\n    nullable: false,\n    comment: 'Data e hora de expiração do token',\n  })\n  expires_at: Date;\n\n  /**\n   * Indica se o token já foi utilizado\n   * Tokens são de uso único\n   */\n  @Column({\n    type: 'boolean',\n    default: false,\n    nullable: false,\n    comment: 'Indica se o token já foi utilizado',\n  })\n  @IsBoolean({ message: 'Campo is_used deve ser um boolean' })\n  is_used: boolean;\n\n  /**\n   * Data e hora em que o token foi utilizado\n   */\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n    comment: 'Data e hora em que o token foi utilizado',\n  })\n  used_at: Date;\n\n  /**\n   * IP do cliente que solicitou o token\n   * Para auditoria e segurança\n   */\n  @Column({\n    type: 'varchar',\n    length: 45, // IPv6 max length\n    nullable: true,\n    comment: 'IP do cliente que solicitou o token',\n  })\n  @IsOptional()\n  @IsString({ message: 'IP do cliente deve ser uma string' })\n  @Length(7, 45, { message: 'IP do cliente deve ter entre 7 e 45 caracteres' })\n  client_ip: string;\n\n  /**\n   * User Agent do cliente que solicitou o token\n   * Para auditoria e detecção de anomalias\n   */\n  @Column({\n    type: 'text',\n    nullable: true,\n    comment: 'User Agent do cliente que solicitou o token',\n  })\n  @IsOptional()\n  @IsString({ message: 'User Agent deve ser uma string' })\n  user_agent: string;\n\n  /**\n   * Número de tentativas de uso do token\n   * Para detectar ataques de força bruta\n   */\n  @Column({\n    type: 'integer',\n    default: 0,\n    nullable: false,\n    comment: 'Número de tentativas de uso do token',\n  })\n  @IsNumber({}, { message: 'Número de tentativas deve ser um número' })\n  @Min(0, { message: 'Número de tentativas não pode ser negativo' })\n  @Max(100, { message: 'Número de tentativas não pode exceder 100' })\n  attempts: number;\n\n  /**\n   * Data da última tentativa de uso\n   */\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n    comment: 'Data da última tentativa de uso',\n  })\n  last_attempt_at: Date;\n\n  /**\n   * Motivo da invalidação (se aplicável)\n   * Ex: 'expired', 'used', 'revoked', 'suspicious_activity'\n   */\n  @Column({\n    type: 'varchar',\n    length: 50,\n    nullable: true,\n    comment: 'Motivo da invalidação do token',\n  })\n  @IsOptional()\n  @IsString({ message: 'Motivo da invalidação deve ser uma string' })\n  @Length(3, 50, {\n    message: 'Motivo da invalidação deve ter entre 3 e 50 caracteres',\n  })\n  invalidation_reason: string;\n\n  /**\n   * Metadados adicionais em formato JSON\n   * Para informações extras de auditoria\n   */\n  @Column({\n    type: 'jsonb',\n    nullable: true,\n    comment: 'Metadados adicionais para auditoria',\n  })\n  metadata: Record<string, any>;\n\n  @CreateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP',\n    comment: 'Data de criação do registro',\n  })\n  created_at: Date;\n\n  @UpdateDateColumn({\n    type: 'timestamp',\n    default: () => 'CURRENT_TIMESTAMP',\n    onUpdate: 'CURRENT_TIMESTAMP',\n    comment: 'Data da última atualização do registro',\n  })\n  updated_at: Date;\n\n  /**\n   * Verifica se o token está válido\n   * @returns true se o token não expirou e não foi usado\n   */\n  isValid(): boolean {\n    const now = new Date();\n    return !this.is_used && this.expires_at > now;\n  }\n\n  /**\n   * Verifica se o token expirou\n   * @returns true se o token expirou\n   */\n  isExpired(): boolean {\n    const now = new Date();\n    return this.expires_at <= now;\n  }\n\n  /**\n   * Marca o token como usado\n   * @param reason Motivo da invalidação\n   */\n  markAsUsed(reason: string = 'used'): void {\n    this.is_used = true;\n    this.used_at = new Date();\n    this.invalidation_reason = reason;\n  }\n\n  /**\n   * Incrementa o contador de tentativas\n   */\n  incrementAttempts(): void {\n    this.attempts += 1;\n    this.last_attempt_at = new Date();\n  }\n\n  /**\n   * Calcula o tempo restante até a expiração em minutos\n   * @returns Minutos restantes ou 0 se expirado\n   */\n  getMinutesUntilExpiration(): number {\n    const now = new Date();\n    if (this.expires_at <= now) {\n      return 0;\n    }\n    return Math.ceil((this.expires_at.getTime() - now.getTime()) / (1000 * 60));\n  }\n\n  /**\n   * Verifica se o token pertence a um usuário específico\n   * @param usuarioId ID do usuário\n   * @returns true se pertence ao usuário\n   */\n  belongsToUser(usuarioId: string): boolean {\n    return this.usuario_id === usuarioId;\n  }\n\n  /**\n   * Verifica se o token foi criado recentemente (últimas 24 horas)\n   * @returns true se foi criado recentemente\n   */\n  isRecentlyCreated(): boolean {\n    const now = new Date();\n    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    return this.created_at > oneDayAgo;\n  }\n\n  /**\n   * Verifica se há muitas tentativas de uso (possível ataque)\n   * @param maxAttempts Número máximo de tentativas permitidas\n   * @returns true se excedeu o limite\n   */\n  hasTooManyAttempts(maxAttempts: number = 5): boolean {\n    return this.attempts >= maxAttempts;\n  }\n\n  /**\n   * Verifica se o token expira em breve (próximos 5 minutos)\n   * @param minutes Minutos para considerar como \"em breve\"\n   * @returns true se expira em breve\n   */\n  expiresWithin(minutes: number = 5): boolean {\n    const now = new Date();\n    const futureTime = new Date(now.getTime() + minutes * 60 * 1000);\n    return this.expires_at <= futureTime;\n  }\n\n  /**\n   * Calcula há quantos minutos o token foi criado\n   * @returns minutos desde a criação\n   */\n  getMinutesSinceCreation(): number {\n    const now = new Date();\n    const diffMs = now.getTime() - this.created_at.getTime();\n    return Math.floor(diffMs / (1000 * 60));\n  }\n\n  /**\n   * Obtém o status atual do token\n   * @returns status do token\n   */\n  getStatus(): 'valid' | 'expired' | 'used' | 'too_many_attempts' {\n    if (this.is_used) return 'used';\n    if (this.isExpired()) return 'expired';\n    if (this.hasTooManyAttempts()) return 'too_many_attempts';\n    return 'valid';\n  }\n\n  /**\n   * Verifica se tem informações de cliente (IP e User Agent)\n   * @returns true se tem informações de cliente\n   */\n  hasClientInfo(): boolean {\n    return !!(this.client_ip || this.user_agent);\n  }\n\n  /**\n   * Adiciona metadados ao token\n   * @param key Chave do metadado\n   * @param value Valor do metadado\n   */\n  addMetadata(key: string, value: any): void {\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    this.metadata[key] = value;\n  }\n\n  /**\n   * Obtém um metadado específico\n   * @param key Chave do metadado\n   * @returns Valor do metadado ou undefined\n   */\n  getMetadata(key: string): any {\n    return this.metadata?.[key];\n  }\n\n  /**\n   * Obtém informações resumidas do token\n   * @returns objeto com informações resumidas\n   */\n  getSummary(): {\n    id: string;\n    usuario_id: string;\n    is_used: boolean;\n    expires_at: Date;\n    created_at: Date;\n    attempts: number;\n    status: string;\n    minutesUntilExpiration: number;\n    hasClientInfo: boolean;\n  } {\n    return {\n      id: this.id,\n      usuario_id: this.usuario_id,\n      is_used: this.is_used,\n      expires_at: this.expires_at,\n      created_at: this.created_at,\n      attempts: this.attempts,\n      status: this.getStatus(),\n      minutesUntilExpiration: this.getMinutesUntilExpiration(),\n      hasClientInfo: this.hasClientInfo(),\n    };\n  }\n\n  /**\n   * Invalida o token com um motivo específico\n   * @param reason Motivo da invalidação\n   */\n  invalidate(reason: string): void {\n    this.is_used = true;\n    this.used_at = new Date();\n    this.invalidation_reason = reason;\n  }\n\n  /**\n   * Verifica se o token foi invalidado por motivos de segurança\n   * @returns true se foi invalidado por segurança\n   */\n  isSecurityInvalidated(): boolean {\n    const securityReasons = [\n      'suspicious_activity',\n      'too_many_attempts',\n      'security_breach',\n      'admin_revoke',\n    ];\n\n    return securityReasons.includes(this.invalidation_reason);\n  }\n\n  /**\n   * Gera uma chave única para o token\n   * @returns chave única\n   */\n  getUniqueKey(): string {\n    return `password_reset_${this.usuario_id}_${this.id}`;\n  }\n\n  /**\n   * Verifica se o token está em estado consistente\n   * @returns true se está consistente\n   */\n  isConsistent(): boolean {\n    return (\n      !!this.id &&\n      !!this.token &&\n      !!this.token_hash &&\n      !!this.usuario_id &&\n      !!this.expires_at &&\n      !!this.created_at &&\n      typeof this.is_used === 'boolean' &&\n      typeof this.attempts === 'number'\n    );\n  }\n\n  /**\n   * Remove informações sensíveis para logs\n   * @returns objeto sanitizado\n   */\n  toSafeLog(): {\n    id: string;\n    usuario_id: string;\n    token_preview: string;\n    is_used: boolean;\n    expires_at: Date;\n    created_at: Date;\n    attempts: number;\n    status: string;\n    hasClientInfo: boolean;\n  } {\n    return {\n      id: this.id,\n      usuario_id: this.usuario_id,\n      token_preview: this.token.substring(0, 8) + '...',\n      is_used: this.is_used,\n      expires_at: this.expires_at,\n      created_at: this.created_at,\n      attempts: this.attempts,\n      status: this.getStatus(),\n      hasClientInfo: this.hasClientInfo(),\n    };\n  }\n\n  /**\n   * Formata a data de expiração para exibição\n   * @returns data formatada\n   */\n  getExpiracaoFormatada(): string {\n    return this.expires_at.toLocaleString('pt-BR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  }\n\n  /**\n   * Formata a data de criação para exibição\n   * @returns data formatada\n   */\n  getCriacaoFormatada(): string {\n    return this.created_at.toLocaleString('pt-BR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  }\n\n  /**\n   * Verifica se o token pode ser usado para reset de senha\n   * @returns true se pode ser usado\n   */\n  canBeUsedForReset(): boolean {\n    return (\n      this.isValid() &&\n      !this.hasTooManyAttempts() &&\n      !this.isSecurityInvalidated()\n    );\n  }\n}\n"],"version":3}