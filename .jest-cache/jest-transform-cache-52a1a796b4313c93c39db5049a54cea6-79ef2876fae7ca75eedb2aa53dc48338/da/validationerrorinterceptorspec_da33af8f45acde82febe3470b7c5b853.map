{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\validation-error.interceptor.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\validation-error.interceptor.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport {\n  BadRequestException,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { of, throwError } from 'rxjs';\nimport {\n  ValidationErrorInterceptor,\n  ValidationMessageHelper,\n} from './validation-error.interceptor';\n\ndescribe('ValidationErrorInterceptor', () => {\n  let interceptor: ValidationErrorInterceptor;\n  let mockExecutionContext: ExecutionContext;\n  let mockCallHandler: CallHandler;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [ValidationErrorInterceptor],\n    }).compile();\n\n    interceptor = module.get<ValidationErrorInterceptor>(\n      ValidationErrorInterceptor,\n    );\n\n    mockExecutionContext = {\n      switchToHttp: jest.fn(),\n      getClass: jest.fn(),\n      getHandler: jest.fn(),\n      getArgs: jest.fn(),\n      getArgByIndex: jest.fn(),\n      switchToRpc: jest.fn(),\n      switchToWs: jest.fn(),\n      getType: jest.fn(),\n    };\n\n    mockCallHandler = {\n      handle: jest.fn(),\n    };\n  });\n\n  describe('intercept', () => {\n    it('deve passar erros não relacionados à validação sem modificação', (done) => {\n      const nonValidationError = new Error('Erro genérico');\n      mockCallHandler.handle = jest.fn(() =>\n        throwError(() => nonValidationError),\n      );\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        error: (error) => {\n          expect(error).toBe(nonValidationError);\n          done();\n        },\n      });\n    });\n\n    it('deve passar BadRequestException não relacionado à validação', (done) => {\n      const nonValidationBadRequest = new BadRequestException(\n        'Erro customizado',\n      );\n      mockCallHandler.handle = jest.fn(() =>\n        throwError(() => nonValidationBadRequest),\n      );\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        error: (error) => {\n          expect(error).toBeInstanceOf(BadRequestException);\n          expect(error.getResponse()).toBe('Erro customizado');\n          done();\n        },\n      });\n    });\n\n    it('deve melhorar erros de validação do class-validator', (done) => {\n      const validationError = new BadRequestException({\n        error: 'Bad Request',\n        message: [\n          'nome must be a string',\n          'email must be an email',\n          'idade must not be less than 18',\n        ],\n        statusCode: 400,\n      });\n\n      mockCallHandler.handle = jest.fn(() => throwError(() => validationError));\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        error: (error) => {\n          try {\n            expect(error).toBeInstanceOf(BadRequestException);\n            const response = error.getResponse();\n\n            expect(response).toHaveProperty('error', 'Erro de Validação');\n            expect(response).toHaveProperty(\n              'message',\n              'Os dados fornecidos contêm erros de validação',\n            );\n            expect(response).toHaveProperty('details');\n            expect(response).toHaveProperty('timestamp');\n            expect(response).toHaveProperty('statusCode', 400);\n\n            done();\n          } catch (e) {\n            done(e);\n          }\n        },\n      });\n    });\n\n    it('deve agrupar erros por campo', (done) => {\n      const validationError = new BadRequestException({\n        error: 'Bad Request',\n        message: [\n          'nome must be a string',\n          'nome must be longer than 2 characters',\n          'email must be an email',\n        ],\n        statusCode: 400,\n      });\n\n      mockCallHandler.handle = jest.fn(() => throwError(() => validationError));\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        error: (error) => {\n          try {\n            const response = error.getResponse();\n            const details = response.details;\n\n            expect(details).toHaveProperty('nome');\n            expect(details).toHaveProperty('email');\n            expect(details.nome).toHaveLength(2); // Dois erros para o campo nome\n            expect(details.email).toHaveLength(1); // Um erro para o campo email\n\n            done();\n          } catch (e) {\n            done(e);\n          }\n        },\n      });\n    });\n\n    it('deve melhorar mensagens de erro de enum', async () => {\n      const enumError = new BadRequestException({\n        error: 'Bad Request',\n        message: [\n          'status must be one of the following values [ATIVO, INATIVO, PENDENTE]',\n        ],\n        statusCode: 400,\n      });\n\n      mockCallHandler.handle = jest.fn(() => throwError(() => enumError));\n\n      try {\n        await interceptor\n          .intercept(mockExecutionContext, mockCallHandler)\n          .toPromise();\n      } catch (error) {\n        const response = error.getResponse();\n        console.log('Response structure:', JSON.stringify(response, null, 2));\n\n        expect(response).toHaveProperty('details');\n        const details = response.details;\n        console.log('Details structure:', JSON.stringify(details, null, 2));\n\n        // Verifica se o campo status existe e tem pelo menos um erro\n        expect(details).toHaveProperty('status');\n        expect(Array.isArray(details.status)).toBe(true);\n        expect(details.status.length).toBeGreaterThan(0);\n\n        expect(details.status[0]).toContain(\n          'deve ser um dos seguintes valores',\n        );\n        expect(details.status[0]).toContain('ATIVO, INATIVO, PENDENTE');\n      }\n    });\n\n    it('deve melhorar mensagens de erro de tipo', async () => {\n      const typeError = new BadRequestException({\n        error: 'Bad Request',\n        message: ['idade must be a number', 'ativo must be a boolean'],\n        statusCode: 400,\n      });\n\n      mockCallHandler.handle = jest.fn(() => throwError(() => typeError));\n\n      try {\n        await interceptor\n          .intercept(mockExecutionContext, mockCallHandler)\n          .toPromise();\n      } catch (error) {\n        const response = error.getResponse();\n        expect(response).toHaveProperty('details');\n        const details = response.details;\n\n        // Verifica se os campos existem e têm pelo menos um erro\n        expect(details).toHaveProperty('idade');\n        expect(Array.isArray(details.idade)).toBe(true);\n        expect(details.idade.length).toBeGreaterThan(0);\n\n        expect(details).toHaveProperty('ativo');\n        expect(Array.isArray(details.ativo)).toBe(true);\n        expect(details.ativo.length).toBeGreaterThan(0);\n\n        expect(details.idade[0]).toContain('deve ser um número');\n        expect(details.ativo[0]).toContain('deve ser um verdadeiro ou falso');\n      }\n    });\n\n    it('deve melhorar mensagens de erro de tamanho', (done) => {\n      const lengthError = new BadRequestException({\n        error: 'Bad Request',\n        message: [\n          'nome must be longer than 2 characters',\n          'descricao must be shorter than 100 characters',\n        ],\n        statusCode: 400,\n      });\n\n      mockCallHandler.handle = jest.fn(() => throwError(() => lengthError));\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        error: (error) => {\n          try {\n            const response = error.getResponse();\n            const details = response.details;\n\n            expect(details.nome[0]).toContain('deve ter mais de 2 caracteres');\n            expect(details.descricao[0]).toContain(\n              'deve ter menos de 100 caracteres',\n            );\n\n            done();\n          } catch (e) {\n            done(e);\n          }\n        },\n      });\n    });\n\n    it('deve melhorar mensagens de erro numérico', (done) => {\n      const numericError = new BadRequestException({\n        error: 'Bad Request',\n        message: [\n          'idade must not be less than 18',\n          'salario must not be greater than 50000',\n        ],\n        statusCode: 400,\n      });\n\n      mockCallHandler.handle = jest.fn(() => throwError(() => numericError));\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        error: (error) => {\n          try {\n            const response = error.getResponse();\n            const details = response.details;\n\n            expect(details.idade[0]).toContain('deve ser maior ou igual a 18');\n            expect(details.salario[0]).toContain(\n              'deve ser menor ou igual a 50000',\n            );\n\n            done();\n          } catch (e) {\n            done(e);\n          }\n        },\n      });\n    });\n\n    it('deve passar dados válidos sem modificação', (done) => {\n      const validData = { id: 1, nome: 'Teste' };\n      mockCallHandler.handle = jest.fn(() => of(validData));\n\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: (data) => {\n          expect(data).toBe(validData);\n          done();\n        },\n      });\n    });\n  });\n});\n\ndescribe('ValidationMessageHelper', () => {\n  describe('required', () => {\n    it('deve criar mensagem para campo obrigatório', () => {\n      const message = ValidationMessageHelper.required('nome');\n      expect(message).toBe(\"O campo 'nome' é obrigatório\");\n    });\n  });\n\n  describe('invalidType', () => {\n    it('deve criar mensagem para tipo inválido', () => {\n      const message = ValidationMessageHelper.invalidType('idade', 'number');\n      expect(message).toBe(\"O campo 'idade' deve ser número\");\n    });\n\n    it('deve mapear tipos em inglês para português', () => {\n      expect(ValidationMessageHelper.invalidType('campo', 'string')).toBe(\n        \"O campo 'campo' deve ser texto\",\n      );\n      expect(ValidationMessageHelper.invalidType('campo', 'boolean')).toBe(\n        \"O campo 'campo' deve ser verdadeiro ou falso\",\n      );\n      expect(ValidationMessageHelper.invalidType('campo', 'email')).toBe(\n        \"O campo 'campo' deve ser email válido\",\n      );\n    });\n  });\n\n  describe('invalidLength', () => {\n    it('deve criar mensagem para tamanho com min e max', () => {\n      const message = ValidationMessageHelper.invalidLength('nome', 2, 50);\n      expect(message).toBe(\"O campo 'nome' deve ter entre 2 e 50 caracteres\");\n    });\n\n    it('deve criar mensagem apenas para mínimo', () => {\n      const message = ValidationMessageHelper.invalidLength('nome', 2);\n      expect(message).toBe(\"O campo 'nome' deve ter pelo menos 2 caracteres\");\n    });\n\n    it('deve criar mensagem apenas para máximo', () => {\n      const message = ValidationMessageHelper.invalidLength(\n        'nome',\n        undefined,\n        50,\n      );\n      expect(message).toBe(\"O campo 'nome' deve ter no máximo 50 caracteres\");\n    });\n\n    it('deve criar mensagem genérica quando não há limites', () => {\n      const message = ValidationMessageHelper.invalidLength('nome');\n      expect(message).toBe(\"O campo 'nome' tem tamanho inválido\");\n    });\n  });\n\n  describe('invalidRange', () => {\n    it('deve criar mensagem para intervalo com min e max', () => {\n      const message = ValidationMessageHelper.invalidRange('idade', 18, 65);\n      expect(message).toBe(\"O campo 'idade' deve estar entre 18 e 65\");\n    });\n\n    it('deve criar mensagem apenas para mínimo', () => {\n      const message = ValidationMessageHelper.invalidRange('idade', 18);\n      expect(message).toBe(\"O campo 'idade' deve ser maior ou igual a 18\");\n    });\n\n    it('deve criar mensagem apenas para máximo', () => {\n      const message = ValidationMessageHelper.invalidRange(\n        'idade',\n        undefined,\n        65,\n      );\n      expect(message).toBe(\"O campo 'idade' deve ser menor ou igual a 65\");\n    });\n  });\n\n  describe('invalidFormat', () => {\n    it('deve criar mensagem para formato inválido', () => {\n      const message = ValidationMessageHelper.invalidFormat('email', 'email');\n      expect(message).toBe(\n        \"O campo 'email' deve ter o formato: email válido (exemplo: usuario@dominio.com)\",\n      );\n    });\n\n    it('deve mapear formatos conhecidos', () => {\n      expect(ValidationMessageHelper.invalidFormat('cpf', 'cpf')).toContain(\n        'CPF válido (exemplo: 123.456.789-00)',\n      );\n      expect(\n        ValidationMessageHelper.invalidFormat('telefone', 'phone'),\n      ).toContain('telefone válido (exemplo: (11) 99999-9999)');\n    });\n\n    it('deve usar formato original se não mapeado', () => {\n      const message = ValidationMessageHelper.invalidFormat(\n        'campo',\n        'formato_customizado',\n      );\n      expect(message).toBe(\n        \"O campo 'campo' deve ter o formato: formato_customizado\",\n      );\n    });\n  });\n});\n"],"version":3}