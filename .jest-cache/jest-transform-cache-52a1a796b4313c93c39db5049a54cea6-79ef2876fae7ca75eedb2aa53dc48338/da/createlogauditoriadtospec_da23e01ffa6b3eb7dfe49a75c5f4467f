4ef8ad74273747a6c34f379e4f8a61a7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
const create_log_auditoria_dto_1 = require("../../../../src/modules/auditoria/dto/create-log-auditoria.dto");
const tipo_operacao_enum_1 = require("../../../../src/modules/auditoria/enums/tipo-operacao.enum");
describe('CreateLogAuditoriaDto', () => {
    it('deve ser válido com todos os campos obrigatórios', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
            entidade_afetada: 'Usuario',
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBe(0);
    });
    it('deve ser inválido sem tipo_operacao', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            entidade_afetada: 'Usuario',
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBeGreaterThan(0);
        expect(errors[0].property).toBe('tipo_operacao');
    });
    it('deve ser inválido sem entidade_afetada', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBeGreaterThan(0);
        expect(errors[0].property).toBe('entidade_afetada');
    });
    it('deve ser inválido com tipo_operacao inválido', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: 'INVALID_TYPE',
            entidade_afetada: 'Usuario',
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBeGreaterThan(0);
        expect(errors[0].property).toBe('tipo_operacao');
    });
    it('deve ser válido com campos opcionais', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
            entidade_afetada: 'Usuario',
            entidade_id: '123e4567-e89b-12d3-a456-426614174000',
            dados_anteriores: { nome: 'João' },
            dados_novos: { nome: 'João Silva' },
            usuario_id: '123e4567-e89b-12d3-a456-426614174001',
            ip_origem: '192.168.1.1',
            user_agent: 'Mozilla/5.0',
            endpoint: '/api/v1/usuarios',
            metodo_http: 'PUT',
            dados_sensiveis_acessados: ['cpf', 'renda_familiar'],
            motivo: 'Correção de dados cadastrais',
            descricao: 'Atualização de nome do usuário',
            data_hora: new Date().toISOString(),
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBe(0);
    });
    it('deve ser inválido com entidade_id em formato inválido', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            entidade_afetada: 'Usuario',
            entidade_id: 'id-invalido',
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBeGreaterThan(0);
        expect(errors[0].property).toBe('entidade_id');
    });
    it('deve ser inválido com IP em formato inválido', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            entidade_afetada: 'Usuario',
            ip_origem: 'ip-invalido',
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBeGreaterThan(0);
        expect(errors[0].property).toBe('ip_origem');
    });
    it('deve ser válido com dados_sensiveis_acessados como array vazio', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            entidade_afetada: 'Usuario',
            dados_sensiveis_acessados: [],
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBe(0);
    });
    it('deve ser inválido com dados_sensiveis_acessados como string', async () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            entidade_afetada: 'Usuario',
            dados_sensiveis_acessados: 'cpf',
        });
        const errors = await (0, class_validator_1.validate)(dto);
        expect(errors.length).toBeGreaterThan(0);
        expect(errors[0].property).toBe('dados_sensiveis_acessados');
    });
    it('deve verificar corretamente se contém dados LGPD', () => {
        const dtoComDadosLGPD = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            entidade_afetada: 'Usuario',
            dados_sensiveis_acessados: ['cpf', 'renda_familiar'],
        });
        const dtoSemDadosLGPD = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            entidade_afetada: 'Usuario',
            dados_sensiveis_acessados: [],
        });
        const dtoSemCampoLGPD = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            entidade_afetada: 'Usuario',
        });
        expect(dtoComDadosLGPD.contemDadosLGPD()).toBe(true);
        expect(dtoSemDadosLGPD.contemDadosLGPD()).toBe(false);
        expect(dtoSemCampoLGPD.contemDadosLGPD()).toBe(false);
    });
    it('deve retornar uma representação textual correta', () => {
        const dto = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
            entidade_afetada: 'Usuario',
            entidade_id: '123e4567-e89b-12d3-a456-426614174000',
            descricao: 'Criação de novo usuário',
        });
        expect(dto.toString()).toBe('[create] Usuario (123e4567-e89b-12d3-a456-426614174000) - Criação de novo usuário');
        const dtoSemDescricao = (0, class_transformer_1.plainToInstance)(create_log_auditoria_dto_1.CreateLogAuditoriaDto, {
            tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
            entidade_afetada: 'Usuario',
        });
        expect(dtoSemDescricao.toString()).toBe('[create] Usuario - Sem descrição');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFx0ZXN0XFxtb2R1bGVzXFxhdWRpdG9yaWFcXGR0b1xcY3JlYXRlLWxvZy1hdWRpdG9yaWEuZHRvLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxxREFBMkM7QUFDM0MseURBQW9EO0FBQ3BELDZHQUF1RztBQUN2RyxtR0FBMEY7QUFFMUYsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxFQUFFLENBQUMsa0RBQWtELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDaEUsTUFBTSxHQUFHLEdBQUcsSUFBQSxtQ0FBZSxFQUFDLGdEQUFxQixFQUFFO1lBQ2pELGFBQWEsRUFBRSxpQ0FBWSxDQUFDLE1BQU07WUFDbEMsZ0JBQWdCLEVBQUUsU0FBUztTQUM1QixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsMEJBQVEsRUFBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRCxNQUFNLEdBQUcsR0FBRyxJQUFBLG1DQUFlLEVBQUMsZ0RBQXFCLEVBQUU7WUFDakQsZ0JBQWdCLEVBQUUsU0FBUztTQUM1QixDQUFDLENBQUM7UUFFSCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsMEJBQVEsRUFBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMs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QyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxHQUFHLEVBQUU7UUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBQSxtQ0FBZSxFQUFDLGdEQUFxQixFQUFFO1lBQ2pELGFBQWEsRUFBRSxpQ0FBWSxDQUFDLE1BQU07WUFDbEMsZ0JBQWdCLEVBQUUsU0FBUztZQUMzQixXQUFXLEVBQUUsc0NBQXNDO1lBQ25ELFNBQVMsRUFBRSx5QkFBeUI7U0FDckMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDekIsbUZBQW1GLENBQ3BGLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBRyxJQUFBLG1DQUFlLEVBQUMsZ0RBQXFCLEVBQUU7WUFDN0QsYUFBYSxFQUFFLGlDQUFZLENBQUMsTUFBTTtZQUNsQyxnQkFBZ0IsRUFBRSxTQUFTO1NBQzVCLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUM5RSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcdGVzdFxcbW9kdWxlc1xcYXVkaXRvcmlhXFxkdG9cXGNyZWF0ZS1sb2ctYXVkaXRvcmlhLmR0by5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZhbGlkYXRlIH0gZnJvbSAnY2xhc3MtdmFsaWRhdG9yJztcbmltcG9ydCB7IHBsYWluVG9JbnN0YW5jZSB9IGZyb20gJ2NsYXNzLXRyYW5zZm9ybWVyJztcbmltcG9ydCB7IENyZWF0ZUxvZ0F1ZGl0b3JpYUR0byB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F1ZGl0b3JpYS9kdG8vY3JlYXRlLWxvZy1hdWRpdG9yaWEuZHRvJztcbmltcG9ydCB7IFRpcG9PcGVyYWNhbyB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F1ZGl0b3JpYS9lbnVtcy90aXBvLW9wZXJhY2FvLmVudW0nO1xuXG5kZXNjcmliZSgnQ3JlYXRlTG9nQXVkaXRvcmlhRHRvJywgKCkgPT4ge1xuICBpdCgnZGV2ZSBzZXIgdsOhbGlkbyBjb20gdG9kb3Mgb3MgY2FtcG9zIG9icmlnYXTDs3Jpb3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZHRvID0gcGxhaW5Ub0luc3RhbmNlKENyZWF0ZUxvZ0F1ZGl0b3JpYUR0bywge1xuICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGVycm9ycyA9IGF3YWl0IHZhbGlkYXRlKGR0byk7XG4gICAgZXhwZWN0KGVycm9ycy5sZW5ndGgpLnRvQmUoMCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZlIHNlciBpbnbDoWxpZG8gc2VtIHRpcG9fb3BlcmFjYW8nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZHRvID0gcGxhaW5Ub0luc3RhbmNlKENyZWF0ZUxvZ0F1ZGl0b3JpYUR0bywge1xuICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoZHRvKTtcbiAgICBleHBlY3QoZXJyb3JzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIGV4cGVjdChlcnJvcnNbMF0ucHJvcGVydHkpLnRvQmUoJ3RpcG9fb3BlcmFjYW8nKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIGludsOhbGlkbyBzZW0gZW50aWRhZGVfYWZldGFkYScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkdG8gPSBwbGFpblRvSW5zdGFuY2UoQ3JlYXRlTG9nQXVkaXRvcmlhRHRvLCB7XG4gICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoZHRvKTtcbiAgICBleHBlY3QoZXJyb3JzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIGV4cGVjdChlcnJvcnNbMF0ucHJvcGVydHkpLnRvQmUoJ2VudGlkYWRlX2FmZXRhZGEnKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIGludsOhbGlkbyBjb20gdGlwb19vcGVyYWNhbyBpbnbDoWxpZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZHRvID0gcGxhaW5Ub0luc3RhbmNlKENyZWF0ZUxvZ0F1ZGl0b3JpYUR0bywge1xuICAgICAgdGlwb19vcGVyYWNhbzogJ0lOVkFMSURfVFlQRScgYXMgVGlwb09wZXJhY2FvLFxuICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoZHRvKTtcbiAgICBleHBlY3QoZXJyb3JzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIGV4cGVjdChlcnJvcnNbMF0ucHJvcGVydHkpLnRvQmUoJ3RpcG9fb3BlcmFjYW8nKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIHbDoWxpZG8gY29tIGNhbXBvcyBvcGNpb25haXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZHRvID0gcGxhaW5Ub0luc3RhbmNlKENyZWF0ZUxvZ0F1ZGl0b3JpYUR0bywge1xuICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLlVQREFURSxcbiAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICAgIGVudGlkYWRlX2lkOiAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwJyxcbiAgICAgIGRhZG9zX2FudGVyaW9yZXM6IHsgbm9tZTogJ0pvw6NvJyB9LFxuICAgICAgZGFkb3Nfbm92b3M6IHsgbm9tZTogJ0pvw6NvIFNpbHZhJyB9LFxuICAgICAgdXN1YXJpb19pZDogJzEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMScsXG4gICAgICBpcF9vcmlnZW06ICcxOTIuMTY4LjEuMScsXG4gICAgICB1c2VyX2FnZW50OiAnTW96aWxsYS81LjAnLFxuICAgICAgZW5kcG9pbnQ6ICcvYXBpL3YxL3VzdWFyaW9zJyxcbiAgICAgIG1ldG9kb19odHRwOiAnUFVUJyxcbiAgICAgIGRhZG9zX3NlbnNpdmVpc19hY2Vzc2Fkb3M6IFsnY3BmJywgJ3JlbmRhX2ZhbWlsaWFyJ10sXG4gICAgICBtb3Rpdm86ICdDb3JyZcOnw6NvIGRlIGRhZG9zIGNhZGFzdHJhaXMnLFxuICAgICAgZGVzY3JpY2FvOiAnQXR1YWxpemHDp8OjbyBkZSBub21lIGRvIHVzdcOhcmlvJyxcbiAgICAgIGRhdGFfaG9yYTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoZHRvKTtcbiAgICBleHBlY3QoZXJyb3JzLmxlbmd0aCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIGludsOhbGlkbyBjb20gZW50aWRhZGVfaWQgZW0gZm9ybWF0byBpbnbDoWxpZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZHRvID0gcGxhaW5Ub0luc3RhbmNlKENyZWF0ZUxvZ0F1ZGl0b3JpYUR0bywge1xuICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLlJFQUQsXG4gICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnVXN1YXJpbycsXG4gICAgICBlbnRpZGFkZV9pZDogJ2lkLWludmFsaWRvJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGVycm9ycyA9IGF3YWl0IHZhbGlkYXRlKGR0byk7XG4gICAgZXhwZWN0KGVycm9ycy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QoZXJyb3JzWzBdLnByb3BlcnR5KS50b0JlKCdlbnRpZGFkZV9pZCcpO1xuICB9KTtcblxuICBpdCgnZGV2ZSBzZXIgaW52w6FsaWRvIGNvbSBJUCBlbSBmb3JtYXRvIGludsOhbGlkbycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkdG8gPSBwbGFpblRvSW5zdGFuY2UoQ3JlYXRlTG9nQXVkaXRvcmlhRHRvLCB7XG4gICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uUkVBRCxcbiAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICAgIGlwX29yaWdlbTogJ2lwLWludmFsaWRvJyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGVycm9ycyA9IGF3YWl0IHZhbGlkYXRlKGR0byk7XG4gICAgZXhwZWN0KGVycm9ycy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QoZXJyb3JzWzBdLnByb3BlcnR5KS50b0JlKCdpcF9vcmlnZW0nKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIHbDoWxpZG8gY29tIGRhZG9zX3NlbnNpdmVpc19hY2Vzc2Fkb3MgY29tbyBhcnJheSB2YXppbycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkdG8gPSBwbGFpblRvSW5zdGFuY2UoQ3JlYXRlTG9nQXVkaXRvcmlhRHRvLCB7XG4gICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uUkVBRCxcbiAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICAgIGRhZG9zX3NlbnNpdmVpc19hY2Vzc2Fkb3M6IFtdLFxuICAgIH0pO1xuXG4gICAgY29uc3QgZXJyb3JzID0gYXdhaXQgdmFsaWRhdGUoZHRvKTtcbiAgICBleHBlY3QoZXJyb3JzLmxlbmd0aCkudG9CZSgwKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIGludsOhbGlkbyBjb20gZGFkb3Nfc2Vuc2l2ZWlzX2FjZXNzYWRvcyBjb21vIHN0cmluZycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBkdG8gPSBwbGFpblRvSW5zdGFuY2UoQ3JlYXRlTG9nQXVkaXRvcmlhRHRvLCB7XG4gICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uUkVBRCxcbiAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICAgIGRhZG9zX3NlbnNpdmVpc19hY2Vzc2Fkb3M6ICdjcGYnIGFzIGFueSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGVycm9ycyA9IGF3YWl0IHZhbGlkYXRlKGR0byk7XG4gICAgZXhwZWN0KGVycm9ycy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICBleHBlY3QoZXJyb3JzWzBdLnByb3BlcnR5KS50b0JlKCdkYWRvc19zZW5zaXZlaXNfYWNlc3NhZG9zJyk7XG4gIH0pO1xuXG4gIGl0KCdkZXZlIHZlcmlmaWNhciBjb3JyZXRhbWVudGUgc2UgY29udMOpbSBkYWRvcyBMR1BEJywgKCkgPT4ge1xuICAgIGNvbnN0IGR0b0NvbURhZG9zTEdQRCA9IHBsYWluVG9JbnN0YW5jZShDcmVhdGVMb2dBdWRpdG9yaWFEdG8sIHtcbiAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5SRUFELFxuICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgICAgZGFkb3Nfc2Vuc2l2ZWlzX2FjZXNzYWRvczogWydjcGYnLCAncmVuZGFfZmFtaWxpYXInXSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGR0b1NlbURhZG9zTEdQRCA9IHBsYWluVG9JbnN0YW5jZShDcmVhdGVMb2dBdWRpdG9yaWFEdG8sIHtcbiAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5SRUFELFxuICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgICAgZGFkb3Nfc2Vuc2l2ZWlzX2FjZXNzYWRvczogW10sXG4gICAgfSk7XG5cbiAgICBjb25zdCBkdG9TZW1DYW1wb0xHUEQgPSBwbGFpblRvSW5zdGFuY2UoQ3JlYXRlTG9nQXVkaXRvcmlhRHRvLCB7XG4gICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uUkVBRCxcbiAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICB9KTtcblxuICAgIGV4cGVjdChkdG9Db21EYWRvc0xHUEQuY29udGVtRGFkb3NMR1BEKCkpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGR0b1NlbURhZG9zTEdQRC5jb250ZW1EYWRvc0xHUEQoKSkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KGR0b1NlbUNhbXBvTEdQRC5jb250ZW1EYWRvc0xHUEQoKSkudG9CZShmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdkZXZlIHJldG9ybmFyIHVtYSByZXByZXNlbnRhw6fDo28gdGV4dHVhbCBjb3JyZXRhJywgKCkgPT4ge1xuICAgIGNvbnN0IGR0byA9IHBsYWluVG9JbnN0YW5jZShDcmVhdGVMb2dBdWRpdG9yaWFEdG8sIHtcbiAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5DUkVBVEUsXG4gICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnVXN1YXJpbycsXG4gICAgICBlbnRpZGFkZV9pZDogJzEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMCcsXG4gICAgICBkZXNjcmljYW86ICdDcmlhw6fDo28gZGUgbm92byB1c3XDoXJpbycsXG4gICAgfSk7XG5cbiAgICBleHBlY3QoZHRvLnRvU3RyaW5nKCkpLnRvQmUoXG4gICAgICAnW2NyZWF0ZV0gVXN1YXJpbyAoMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwKSAtIENyaWHDp8OjbyBkZSBub3ZvIHVzdcOhcmlvJyxcbiAgICApO1xuXG4gICAgY29uc3QgZHRvU2VtRGVzY3JpY2FvID0gcGxhaW5Ub0luc3RhbmNlKENyZWF0ZUxvZ0F1ZGl0b3JpYUR0bywge1xuICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICB9KTtcblxuICAgIGV4cGVjdChkdG9TZW1EZXNjcmljYW8udG9TdHJpbmcoKSkudG9CZSgnW2NyZWF0ZV0gVXN1YXJpbyAtIFNlbSBkZXNjcmnDp8OjbycpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9