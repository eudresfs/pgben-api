2ac6f13f92d6e34a825b31e64a3077fe
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggingInterceptor = void 0;
const common_1 = require("@nestjs/common");
const logging_service_1 = require("./logging.service");
const operators_1 = require("rxjs/operators");
/**
 * Interceptor de Logging
 *
 * Intercepta todas as requisições HTTP e registra informações como:
 * - Método HTTP
 * - URL
 * - IP do cliente
 * - Código de status da resposta
 * - Tempo de resposta
 */
let LoggingInterceptor = class LoggingInterceptor {
    loggingService;
    constructor(loggingService) {
        this.loggingService = loggingService;
    }
    intercept(context, next) {
        const ctx = context.switchToHttp();
        const request = ctx.getRequest();
        const userAgent = request.headers?.['user-agent'] || request.get?.('user-agent') || '';
        const ip = request.ip;
        const method = request.method;
        const originalUrl = request.url || request.originalUrl;
        const userId = request.user ? request.user.id : 'anônimo';
        const startTime = Date.now();
        this.loggingService.info(`Requisição iniciada: ${method} ${originalUrl}`, 'HTTP', {
            method,
            url: originalUrl,
            ip,
            userAgent,
            userId,
        });
        return next.handle().pipe((0, operators_1.tap)({
            next: (data) => {
                const response = ctx.getResponse();
                const { statusCode } = response;
                const contentLength = response.getHeader?.('content-length') ||
                    response.get?.('content-length') ||
                    0;
                const responseTime = Date.now() - startTime;
                this.loggingService.info(`Requisição concluída: ${method} ${originalUrl} - Status: ${statusCode} - Tempo: ${responseTime}ms`, 'HTTP', {
                    method,
                    url: originalUrl,
                    statusCode,
                    contentLength,
                    duration: responseTime,
                    userId,
                });
            },
            error: (error) => {
                const response = ctx.getResponse();
                const statusCode = error.status || 500;
                const responseTime = Date.now() - startTime;
                this.loggingService.error(`Requisição falhou: ${method} ${originalUrl} - Status: ${statusCode} - Tempo: ${responseTime}ms - Erro: ${error.message}`, error.stack, 'HTTP', {
                    method,
                    url: originalUrl,
                    statusCode,
                    duration: responseTime,
                    userId,
                    error: error.message,
                });
            },
        }));
    }
};
exports.LoggingInterceptor = LoggingInterceptor;
exports.LoggingInterceptor = LoggingInterceptor = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof logging_service_1.LoggingService !== "undefined" && logging_service_1.LoggingService) === "function" ? _a : Object])
], LoggingInterceptor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbG9nZ2luZ1xcbG9nZ2luZy5pbnRlcmNlcHRvci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsMkNBS3dCO0FBQ3hCLHVEQUFtRDtBQUVuRCw4Q0FBcUM7QUFVckM7Ozs7Ozs7OztHQVNHO0FBRUksSUFBTSxrQkFBa0IsR0FBeEIsTUFBTSxrQkFBa0I7SUFDQTtJQUE3QixZQUE2QixjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDO0lBRS9ELFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCO1FBQ3BELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNuQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFXLENBQUM7UUFDMUMsTUFBTSxTQUFTLEdBQ2IsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkUsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUN0QixNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQzlCLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUN2RCxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRTFELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUU3QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDdEIsd0JBQXdCLE1BQU0sSUFBSSxXQUFXLEVBQUUsRUFDL0MsTUFBTSxFQUNOO1lBQ0UsTUFBTTtZQUNOLEdBQUcsRUFBRSxXQUFXO1lBQ2hCLEVBQUU7WUFDRixTQUFTO1lBQ1QsTUFBTTtTQUNQLENBQ0YsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FDdkIsSUFBQSxlQUFHLEVBQUM7WUFDRixJQUFJLEVBQUUsQ0FBQyxJQUFTLEVBQUUsRUFBRTtnQkFDbEIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBWSxDQUFDO2dCQUM3QyxNQUFNLEVBQUUsVUFBVSxFQUFFLEdBQUcsUUFBUSxDQUFDO2dCQUNoQyxNQUFNLGFBQWEsR0FDakIsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO29CQUN0QyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQ2hDLENBQUMsQ0FBQztnQkFDSixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDO2dCQUU1QyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDdEIseUJBQXlCLE1BQU0sSUFBSSxXQUFXLGNBQWMsVUFBVSxhQUFhLFlBQVksSUFBSSxFQUNuRyxNQUFNLEVBQ047b0JBQ0UsTUFBTTtvQkFDTixHQUFHLEVBQUUsV0FBVztvQkFDaEIsVUFBVTtvQkFDVixhQUFhO29CQUNiLFFBQVEsRUFBRSxZQUFZO29CQUN0QixNQUFNO2lCQUNQLENBQ0YsQ0FBQztZQUNKLENBQUM7WUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtnQkFDZixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFZLENBQUM7Z0JBQzdDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDO2dCQUN2QyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDO2dCQUU1QyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FDdkIsc0JBQXNCLE1BQU0sSUFBSSxXQUFXLGNBQWMsVUFBVSxhQUFhLFlBQVksY0FBYyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQ3pILEtBQUssQ0FBQyxLQUFLLEVBQ1gsTUFBTSxFQUNOO29CQUNFLE1BQU07b0JBQ04sR0FBRyxFQUFFLFdBQVc7b0JBQ2hCLFVBQVU7b0JBQ1YsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLE1BQU07b0JBQ04sS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPO2lCQUNyQixDQUNGLENBQUM7WUFDSixDQUFDO1NBQ0YsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQXpFWSxnREFBa0I7NkJBQWxCLGtCQUFrQjtJQUQ5QixJQUFBLG1CQUFVLEdBQUU7eURBRWtDLGdDQUFjLG9CQUFkLGdDQUFjO0dBRGhELGtCQUFrQixDQXlFOUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbG9nZ2luZ1xcbG9nZ2luZy5pbnRlcmNlcHRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBJbmplY3RhYmxlLFxuICBOZXN0SW50ZXJjZXB0b3IsXG4gIEV4ZWN1dGlvbkNvbnRleHQsXG4gIENhbGxIYW5kbGVyLFxufSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBMb2dnaW5nU2VydmljZSB9IGZyb20gJy4vbG9nZ2luZy5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5cbi8vIEVzdGVuZGVyIGEgaW50ZXJmYWNlIFJlcXVlc3QgcGFyYSBpbmNsdWlyIGEgcHJvcHJpZWRhZGUgdXNlclxuZGVjbGFyZSBtb2R1bGUgJ2V4cHJlc3MnIHtcbiAgaW50ZXJmYWNlIFJlcXVlc3Qge1xuICAgIHVzZXI/OiBhbnk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbnRlcmNlcHRvciBkZSBMb2dnaW5nXG4gKlxuICogSW50ZXJjZXB0YSB0b2RhcyBhcyByZXF1aXNpw6fDtWVzIEhUVFAgZSByZWdpc3RyYSBpbmZvcm1hw6fDtWVzIGNvbW86XG4gKiAtIE3DqXRvZG8gSFRUUFxuICogLSBVUkxcbiAqIC0gSVAgZG8gY2xpZW50ZVxuICogLSBDw7NkaWdvIGRlIHN0YXR1cyBkYSByZXNwb3N0YVxuICogLSBUZW1wbyBkZSByZXNwb3N0YVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9nZ2luZ0ludGVyY2VwdG9yIGltcGxlbWVudHMgTmVzdEludGVyY2VwdG9yIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBsb2dnaW5nU2VydmljZTogTG9nZ2luZ1NlcnZpY2UpIHt9XG5cbiAgaW50ZXJjZXB0KGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsIG5leHQ6IENhbGxIYW5kbGVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBjdHggPSBjb250ZXh0LnN3aXRjaFRvSHR0cCgpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBjdHguZ2V0UmVxdWVzdDxSZXF1ZXN0PigpO1xuICAgIGNvbnN0IHVzZXJBZ2VudCA9XG4gICAgICByZXF1ZXN0LmhlYWRlcnM/LlsndXNlci1hZ2VudCddIHx8IHJlcXVlc3QuZ2V0Py4oJ3VzZXItYWdlbnQnKSB8fCAnJztcbiAgICBjb25zdCBpcCA9IHJlcXVlc3QuaXA7XG4gICAgY29uc3QgbWV0aG9kID0gcmVxdWVzdC5tZXRob2Q7XG4gICAgY29uc3Qgb3JpZ2luYWxVcmwgPSByZXF1ZXN0LnVybCB8fCByZXF1ZXN0Lm9yaWdpbmFsVXJsO1xuICAgIGNvbnN0IHVzZXJJZCA9IHJlcXVlc3QudXNlciA/IHJlcXVlc3QudXNlci5pZCA6ICdhbsO0bmltbyc7XG5cbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgdGhpcy5sb2dnaW5nU2VydmljZS5pbmZvKFxuICAgICAgYFJlcXVpc2nDp8OjbyBpbmljaWFkYTogJHttZXRob2R9ICR7b3JpZ2luYWxVcmx9YCxcbiAgICAgICdIVFRQJyxcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICB1cmw6IG9yaWdpbmFsVXJsLFxuICAgICAgICBpcCxcbiAgICAgICAgdXNlckFnZW50LFxuICAgICAgICB1c2VySWQsXG4gICAgICB9LFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUoKS5waXBlKFxuICAgICAgdGFwKHtcbiAgICAgICAgbmV4dDogKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gY3R4LmdldFJlc3BvbnNlPFJlc3BvbnNlPigpO1xuICAgICAgICAgIGNvbnN0IHsgc3RhdHVzQ29kZSB9ID0gcmVzcG9uc2U7XG4gICAgICAgICAgY29uc3QgY29udGVudExlbmd0aCA9XG4gICAgICAgICAgICByZXNwb25zZS5nZXRIZWFkZXI/LignY29udGVudC1sZW5ndGgnKSB8fFxuICAgICAgICAgICAgcmVzcG9uc2UuZ2V0Py4oJ2NvbnRlbnQtbGVuZ3RoJykgfHxcbiAgICAgICAgICAgIDA7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VUaW1lID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgICAgICAgIHRoaXMubG9nZ2luZ1NlcnZpY2UuaW5mbyhcbiAgICAgICAgICAgIGBSZXF1aXNpw6fDo28gY29uY2x1w61kYTogJHttZXRob2R9ICR7b3JpZ2luYWxVcmx9IC0gU3RhdHVzOiAke3N0YXR1c0NvZGV9IC0gVGVtcG86ICR7cmVzcG9uc2VUaW1lfW1zYCxcbiAgICAgICAgICAgICdIVFRQJyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICB1cmw6IG9yaWdpbmFsVXJsLFxuICAgICAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgICAgICBjb250ZW50TGVuZ3RoLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogcmVzcG9uc2VUaW1lLFxuICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiAoZXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGN0eC5nZXRSZXNwb25zZTxSZXNwb25zZT4oKTtcbiAgICAgICAgICBjb25zdCBzdGF0dXNDb2RlID0gZXJyb3Iuc3RhdHVzIHx8IDUwMDtcbiAgICAgICAgICBjb25zdCByZXNwb25zZVRpbWUgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICAgICAgdGhpcy5sb2dnaW5nU2VydmljZS5lcnJvcihcbiAgICAgICAgICAgIGBSZXF1aXNpw6fDo28gZmFsaG91OiAke21ldGhvZH0gJHtvcmlnaW5hbFVybH0gLSBTdGF0dXM6ICR7c3RhdHVzQ29kZX0gLSBUZW1wbzogJHtyZXNwb25zZVRpbWV9bXMgLSBFcnJvOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgICAgIGVycm9yLnN0YWNrLFxuICAgICAgICAgICAgJ0hUVFAnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgIHVybDogb3JpZ2luYWxVcmwsXG4gICAgICAgICAgICAgIHN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiByZXNwb25zZVRpbWUsXG4gICAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=