{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\logging.interceptor.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\logging.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { LoggingService } from './logging.service';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Request, Response } from 'express';\n\n// Estender a interface Request para incluir a propriedade user\ndeclare module 'express' {\n  interface Request {\n    user?: any;\n  }\n}\n\n/**\n * Interceptor de Logging\n *\n * Intercepta todas as requisições HTTP e registra informações como:\n * - Método HTTP\n * - URL\n * - IP do cliente\n * - Código de status da resposta\n * - Tempo de resposta\n */\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  constructor(private readonly loggingService: LoggingService) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const ctx = context.switchToHttp();\n    const request = ctx.getRequest<Request>();\n    const userAgent =\n      request.headers?.['user-agent'] || request.get?.('user-agent') || '';\n    const ip = request.ip;\n    const method = request.method;\n    const originalUrl = request.url || request.originalUrl;\n    const userId = request.user ? request.user.id : 'anônimo';\n\n    const startTime = Date.now();\n\n    this.loggingService.info(\n      `Requisição iniciada: ${method} ${originalUrl}`,\n      'HTTP',\n      {\n        method,\n        url: originalUrl,\n        ip,\n        userAgent,\n        userId,\n      },\n    );\n\n    return next.handle().pipe(\n      tap({\n        next: (data: any) => {\n          const response = ctx.getResponse<Response>();\n          const { statusCode } = response;\n          const contentLength =\n            response.getHeader?.('content-length') ||\n            response.get?.('content-length') ||\n            0;\n          const responseTime = Date.now() - startTime;\n\n          this.loggingService.info(\n            `Requisição concluída: ${method} ${originalUrl} - Status: ${statusCode} - Tempo: ${responseTime}ms`,\n            'HTTP',\n            {\n              method,\n              url: originalUrl,\n              statusCode,\n              contentLength,\n              duration: responseTime,\n              userId,\n            },\n          );\n        },\n        error: (error) => {\n          const response = ctx.getResponse<Response>();\n          const statusCode = error.status || 500;\n          const responseTime = Date.now() - startTime;\n\n          this.loggingService.error(\n            `Requisição falhou: ${method} ${originalUrl} - Status: ${statusCode} - Tempo: ${responseTime}ms - Erro: ${error.message}`,\n            error.stack,\n            'HTTP',\n            {\n              method,\n              url: originalUrl,\n              statusCode,\n              duration: responseTime,\n              userId,\n              error: error.message,\n            },\n          );\n        },\n      }),\n    );\n  }\n}\n"],"version":3}