b06d3bbf5322435522b44549e1182b95
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const minio_service_1 = require("../minio.service");
const criptografia_service_1 = require("../criptografia.service");
const config_1 = require("@nestjs/config");
// Teste mínimo para verificar se o ambiente de teste está funcionando
describe('MinioService - Teste Simples', () => {
    let service;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                minio_service_1.MinioService,
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn((key, defaultValue) => {
                            const config = {
                                MINIO_BUCKET: 'test-bucket',
                                MINIO_ENDPOINT: 'localhost',
                                MINIO_PORT: 9000,
                                MINIO_USE_SSL: false,
                                MINIO_ACCESS_KEY: 'minioadmin',
                                MINIO_SECRET_KEY: 'minioadmin',
                            };
                            return config[key] || defaultValue;
                        }),
                    },
                },
                {
                    provide: criptografia_service_1.CriptografiaService,
                    useValue: {
                        criptografarBuffer: jest.fn(),
                        descriptografarBuffer: jest.fn(),
                        gerarHash: jest.fn(),
                        verificarHash: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(minio_service_1.MinioService);
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcc2VydmljZXNcXHRlc3RzXFxtaW5pby5zaW1wbGUuc3BlYy50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDZDQUFzRDtBQUN0RCxvREFBZ0Q7QUFDaEQsa0VBQThEO0FBQzlELDJDQUErQztBQUUvQyxzRUFBc0U7QUFDdEUsUUFBUSxDQUFDLDhCQUE4QixFQUFFLEdBQUcsRUFBRTtJQUM1QyxJQUFJLE9BQXFCLENBQUM7SUFFMUIsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxTQUFTLEVBQUU7Z0JBQ1QsNEJBQVk7Z0JBQ1o7b0JBQ0UsT0FBTyxFQUFFLHNCQUFhO29CQUN0QixRQUFRLEVBQUU7d0JBQ1IsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFXLEVBQUUsWUFBa0IsRUFBRSxFQUFFOzRCQUMvQyxNQUFNLE1BQU0sR0FBRztnQ0FDYixZQUFZLEVBQUUsYUFBYTtnQ0FDM0IsY0FBYyxFQUFFLFdBQVc7Z0NBQzNCLFVBQVUsRUFBRSxJQUFJO2dDQUNoQixhQUFhLEVBQUUsS0FBSztnQ0FDcEIsZ0JBQWdCLEVBQUUsWUFBWTtnQ0FDOUIsZ0JBQWdCLEVBQUUsWUFBWTs2QkFDL0IsQ0FBQzs0QkFDRixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFZLENBQUM7d0JBQ3JDLENBQUMsQ0FBQztxQkFDSDtpQkFDRjtnQkFDRDtvQkFDRSxPQUFPLEVBQUUsMENBQW1CO29CQUM1QixRQUFRLEVBQUU7d0JBQ1Isa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTt3QkFDN0IscUJBQXFCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTt3QkFDaEMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7d0JBQ3BCLGFBQWEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO3FCQUN6QjtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWUsNEJBQVksQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcc2hhcmVkXFxzZXJ2aWNlc1xcdGVzdHNcXG1pbmlvLnNpbXBsZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgTWluaW9TZXJ2aWNlIH0gZnJvbSAnLi4vbWluaW8uc2VydmljZSc7XG5pbXBvcnQgeyBDcmlwdG9ncmFmaWFTZXJ2aWNlIH0gZnJvbSAnLi4vY3JpcHRvZ3JhZmlhLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJ0BuZXN0anMvY29uZmlnJztcblxuLy8gVGVzdGUgbcOtbmltbyBwYXJhIHZlcmlmaWNhciBzZSBvIGFtYmllbnRlIGRlIHRlc3RlIGVzdMOhIGZ1bmNpb25hbmRvXG5kZXNjcmliZSgnTWluaW9TZXJ2aWNlIC0gVGVzdGUgU2ltcGxlcycsICgpID0+IHtcbiAgbGV0IHNlcnZpY2U6IE1pbmlvU2VydmljZTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIE1pbmlvU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGdldDogamVzdC5mbigoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgTUlOSU9fQlVDS0VUOiAndGVzdC1idWNrZXQnLFxuICAgICAgICAgICAgICAgIE1JTklPX0VORFBPSU5UOiAnbG9jYWxob3N0JyxcbiAgICAgICAgICAgICAgICBNSU5JT19QT1JUOiA5MDAwLFxuICAgICAgICAgICAgICAgIE1JTklPX1VTRV9TU0w6IGZhbHNlLFxuICAgICAgICAgICAgICAgIE1JTklPX0FDQ0VTU19LRVk6ICdtaW5pb2FkbWluJyxcbiAgICAgICAgICAgICAgICBNSU5JT19TRUNSRVRfS0VZOiAnbWluaW9hZG1pbicsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJldHVybiBjb25maWdba2V5XSB8fCBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQ3JpcHRvZ3JhZmlhU2VydmljZSxcbiAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgY3JpcHRvZ3JhZmFyQnVmZmVyOiBqZXN0LmZuKCksXG4gICAgICAgICAgICBkZXNjcmlwdG9ncmFmYXJCdWZmZXI6IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGdlcmFySGFzaDogamVzdC5mbigpLFxuICAgICAgICAgICAgdmVyaWZpY2FySGFzaDogamVzdC5mbigpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pLmNvbXBpbGUoKTtcblxuICAgIHNlcnZpY2UgPSBtb2R1bGUuZ2V0PE1pbmlvU2VydmljZT4oTWluaW9TZXJ2aWNlKTtcbiAgfSk7XG5cbiAgaXQoJ2RldmUgc2VyIGRlZmluaWRvJywgKCkgPT4ge1xuICAgIGV4cGVjdChzZXJ2aWNlKS50b0JlRGVmaW5lZCgpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9