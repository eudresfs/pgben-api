d39b646fd9747e55376960edd680899d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DeterminacaoJudicialConsolidadoService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeterminacaoJudicialConsolidadoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const determinacao_judicial_entity_1 = require("../../../entities/determinacao-judicial.entity");
const processo_judicial_service_1 = require("./processo-judicial.service");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
/**
 * Serviço consolidado para gerenciamento de determinações judiciais
 *
 * Este serviço unifica as funcionalidades dos módulos judicial e solicitação,
 * mantendo a separação de responsabilidades através de métodos específicos.
 *
 * Funcionalidades:
 * - Gestão completa de determinações judiciais (CRUD)
 * - Integração com processos judiciais
 * - Integração com solicitações de benefício
 * - Controle de prazos e vencimentos
 * - Transações atômicas para operações complexas
 * - Soft delete e hard delete conforme contexto
 */
let DeterminacaoJudicialConsolidadoService = DeterminacaoJudicialConsolidadoService_1 = class DeterminacaoJudicialConsolidadoService {
    determinacaoRepository;
    solicitacaoRepository;
    processoJudicialService;
    dataSource;
    logger = new common_1.Logger(DeterminacaoJudicialConsolidadoService_1.name);
    constructor(determinacaoRepository, solicitacaoRepository, processoJudicialService, dataSource) {
        this.determinacaoRepository = determinacaoRepository;
        this.solicitacaoRepository = solicitacaoRepository;
        this.processoJudicialService = processoJudicialService;
        this.dataSource = dataSource;
    }
    // ========================================
    // MÉTODOS PRINCIPAIS (CONTEXTO JUDICIAL)
    // ========================================
    /**
     * Cria uma nova determinação judicial no contexto judicial
     *
     * @param data Dados da determinação judicial a ser criada
     * @param usuarioId ID do usuário que está criando a determinação
     * @returns A determinação judicial criada
     */
    async create(data, usuarioId) {
        this.logger.log(`Criando determinação judicial: ${JSON.stringify(data)}`);
        // Verificar se o processo judicial existe e se o ID foi fornecido
        if (!data.processo_judicial_id) {
            throw new common_1.BadRequestException('ID do processo judicial é obrigatório');
        }
        await this.processoJudicialService.findById(data.processo_judicial_id);
        // Criar a nova determinação
        const novaDeterminacao = this.determinacaoRepository.create({
            ...data,
            usuario_id: usuarioId,
            created_by: usuarioId,
            updated_by: usuarioId,
        });
        return this.determinacaoRepository.save(novaDeterminacao);
    }
    /**
     * Busca uma determinação judicial pelo ID
     *
     * @param id ID da determinação judicial
     * @param includeRelations Relações a incluir na busca
     * @returns A determinação judicial encontrada
     * @throws NotFoundException se a determinação não for encontrada
     */
    async findById(id, includeRelations = ['processo_judicial']) {
        const determinacao = await this.determinacaoRepository.findOne({
            where: { id },
            relations: includeRelations,
        });
        if (!determinacao) {
            throw new common_1.NotFoundException(`Determinação judicial com ID ${id} não encontrada`);
        }
        return determinacao;
    }
    /**
     * Lista determinações judiciais com paginação e filtros
     *
     * @param options Opções de busca e paginação
     * @returns Lista paginada de determinações judiciais
     */
    async findAll(options) {
        const { page = 1, limit = 10, processoJudicialId, solicitacaoId, cidadaoId, tipo, cumprida, termo, } = options;
        const where = { ativo: true };
        // Aplicar filtros
        if (processoJudicialId) {
            where.processo_judicial_id = processoJudicialId;
        }
        if (solicitacaoId) {
            where.solicitacao_id = solicitacaoId;
        }
        if (cidadaoId) {
            where.cidadao_id = cidadaoId;
        }
        if (tipo) {
            where.tipo = tipo;
        }
        if (cumprida !== undefined) {
            where.cumprida = cumprida;
        }
        const findOptions = {
            where,
            skip: (page - 1) * limit,
            take: limit,
            order: {
                data_determinacao: 'DESC',
            },
            relations: ['processo_judicial'],
        };
        // Aplicar busca por texto, se fornecido
        if (termo) {
            findOptions.where = [
                { ...where, numero_processo: (0, typeorm_2.Like)(`%${termo}%`) },
                { ...where, numero_determinacao: (0, typeorm_2.Like)(`%${termo}%`) },
                { ...where, descricao: (0, typeorm_2.Like)(`%${termo}%`) },
            ];
        }
        const [determinacoes, total] = await this.determinacaoRepository.findAndCount(findOptions);
        return {
            data: determinacoes,
            meta: {
                page,
                limit,
                total,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Atualiza uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @param data Dados atualizados da determinação
     * @param usuarioId ID do usuário que está atualizando a determinação
     * @returns A determinação judicial atualizada
     * @throws NotFoundException se a determinação não for encontrada
     */
    async update(id, data, usuarioId) {
        const determinacao = await this.findById(id);
        this.logger.log(`Atualizando determinação judicial ${id}: ${JSON.stringify(data)}`);
        // Atualizar os dados da determinação
        this.determinacaoRepository.merge(determinacao, {
            ...data,
            updated_by: usuarioId,
        });
        return this.determinacaoRepository.save(determinacao);
    }
    /**
     * Marca uma determinação judicial como cumprida
     *
     * @param id ID da determinação judicial
     * @param observacao Observação sobre o cumprimento
     * @param usuarioId ID do usuário que está marcando a determinação como cumprida
     * @returns A determinação judicial atualizada
     * @throws NotFoundException se a determinação não for encontrada
     */
    async marcarComoCumprida(id, observacao, usuarioId) {
        const determinacao = await this.findById(id);
        if (determinacao.cumprida) {
            throw new common_1.BadRequestException('Esta determinação judicial já está marcada como cumprida');
        }
        this.logger.log(`Marcando determinação judicial ${id} como cumprida`);
        // Atualizar o status da determinação
        determinacao.cumprida = true;
        determinacao.data_cumprimento = new Date();
        determinacao.observacao_cumprimento = observacao;
        determinacao.updated_by = usuarioId;
        return this.determinacaoRepository.save(determinacao);
    }
    /**
     * Desativa (soft delete) uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @param usuarioId ID do usuário que está desativando a determinação
     * @returns Verdadeiro se a operação foi bem-sucedida
     * @throws NotFoundException se a determinação não for encontrada
     */
    async desativar(id, usuarioId) {
        const determinacao = await this.findById(id);
        this.logger.log(`Desativando determinação judicial ${id}`);
        // Desativar a determinação
        determinacao.ativo = false;
        determinacao.updated_by = usuarioId;
        await this.determinacaoRepository.save(determinacao);
        return true;
    }
    // ========================================
    // MÉTODOS ESPECÍFICOS PARA SOLICITAÇÕES
    // ========================================
    /**
     * Cria uma nova determinação judicial no contexto de solicitação
     *
     * @param createDeterminacaoDto Dados da determinação judicial
     * @param usuarioId ID do usuário que está criando a determinação
     * @returns Determinação judicial criada
     */
    async createForSolicitacao(createDeterminacaoDto, usuarioId) {
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Verificar se a solicitação existe
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: createDeterminacaoDto.solicitacao_id },
            });
            if (!solicitacao) {
                throw new common_1.NotFoundException('Solicitação de benefício não encontrada');
            }
            // Verificar se já existe determinação com o mesmo número de processo para a solicitação
            const determinacaoExistente = await this.determinacaoRepository.findOne({
                where: {
                    solicitacao_id: createDeterminacaoDto.solicitacao_id,
                    numero_processo: createDeterminacaoDto.numero_processo,
                },
            });
            if (determinacaoExistente) {
                throw new common_1.ConflictException('Já existe uma determinação judicial com este número de processo para esta solicitação');
            }
            // Criar a determinação judicial
            const novaDeterminacao = this.determinacaoRepository.create({
                ...createDeterminacaoDto,
                usuario_id: usuarioId,
            });
            const determinacaoSalva = await queryRunner.manager.save(novaDeterminacao);
            // Atualizar a solicitação para indicar que possui determinação judicial
            await queryRunner.manager.update(solicitacao_entity_1.Solicitacao, { id: createDeterminacaoDto.solicitacao_id }, {
                determinacao_judicial_flag: true,
                determinacao_judicial_id: determinacaoSalva.id,
            });
            await queryRunner.commitTransaction();
            return determinacaoSalva;
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.ConflictException) {
                throw error;
            }
            this.logger.error(`Erro ao criar determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao criar determinação judicial');
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Busca todas as determinações judiciais de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @returns Lista de determinações judiciais
     */
    async findBySolicitacaoId(solicitacaoId) {
        try {
            // Verificar se a solicitação existe
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: solicitacaoId },
            });
            if (!solicitacao) {
                throw new common_1.NotFoundException('Solicitação de benefício não encontrada');
            }
            return this.determinacaoRepository.find({
                where: { solicitacao_id: solicitacaoId },
                order: { data_determinacao: 'DESC' },
            });
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar determinações judiciais: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar determinações judiciais');
        }
    }
    /**
     * Atualiza uma determinação judicial no contexto de solicitação
     * @param id ID da determinação judicial
     * @param updateDeterminacaoDto Dados para atualização
     * @returns Determinação judicial atualizada
     */
    async updateForSolicitacao(id, updateDeterminacaoDto) {
        try {
            // Verificar se a determinação existe
            const determinacao = await this.determinacaoRepository.findOne({
                where: { id },
            });
            if (!determinacao) {
                throw new common_1.NotFoundException('Determinação judicial não encontrada');
            }
            // Atualizar a determinação
            await this.determinacaoRepository.update(id, updateDeterminacaoDto);
            // Retornar a determinação atualizada
            return this.findById(id, ['solicitacao']);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao atualizar determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao atualizar determinação judicial');
        }
    }
    /**
     * Registra o cumprimento de uma determinação judicial (alias para marcarComoCumprida)
     * @param id ID da determinação judicial
     * @param observacoes Observações sobre o cumprimento
     * @returns Determinação judicial atualizada
     */
    async registrarCumprimento(id, observacoes) {
        try {
            // Verificar se a determinação existe
            const determinacao = await this.determinacaoRepository.findOne({
                where: { id },
            });
            if (!determinacao) {
                throw new common_1.NotFoundException('Determinação judicial não encontrada');
            }
            // Atualizar a determinação com a data de cumprimento
            const updateData = {
                data_cumprimento: new Date(),
            };
            if (observacoes) {
                updateData.observacao_cumprimento = observacoes;
            }
            await this.determinacaoRepository.update(id, updateData);
            // Retornar a determinação atualizada
            return this.findById(id, ['solicitacao']);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao registrar cumprimento de determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao registrar cumprimento de determinação judicial');
        }
    }
    /**
     * Remove uma determinação judicial do contexto de solicitação
     * @param id ID da determinação judicial
     * @returns Void
     */
    async removeFromSolicitacao(id) {
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        try {
            // Verificar se a determinação existe
            const determinacao = await this.determinacaoRepository.findOne({
                where: { id },
                relations: ['solicitacao'],
            });
            if (!determinacao) {
                throw new common_1.NotFoundException('Determinação judicial não encontrada');
            }
            // Verificar se é a determinação principal da solicitação
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { determinacao_judicial_id: id },
            });
            if (solicitacao) {
                // Se for a determinação principal, verificar se há outras determinações
                const outrasDeterminacoes = await this.determinacaoRepository.find({
                    where: { solicitacao_id: determinacao.solicitacao_id },
                });
                if (outrasDeterminacoes.length > 1) {
                    // Se houver outras determinações, definir a mais recente como principal
                    const outrasDeterminacoesOrdenadas = outrasDeterminacoes
                        .filter((det) => det.id !== id)
                        .sort((a, b) => b.data_determinacao.getTime() - a.data_determinacao.getTime());
                    // Atualizar a solicitação com a nova determinação principal
                    await queryRunner.manager.update(solicitacao_entity_1.Solicitacao, { id: determinacao.solicitacao_id }, { determinacao_judicial_id: outrasDeterminacoesOrdenadas[0].id });
                }
                else {
                    // Se não houver outras determinações, remover a referência na solicitação
                    await queryRunner.manager.update(solicitacao_entity_1.Solicitacao, { id: determinacao.solicitacao_id }, {
                        determinacao_judicial_flag: false,
                        determinacao_judicial_id: null,
                    });
                }
            }
            // Remover a determinação
            await queryRunner.manager.remove(determinacao);
            await queryRunner.commitTransaction();
        }
        catch (error) {
            await queryRunner.rollbackTransaction();
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao remover determinação judicial: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao remover determinação judicial');
        }
        finally {
            await queryRunner.release();
        }
    }
    // ========================================
    // MÉTODOS DE BUSCA ESPECIALIZADOS
    // ========================================
    /**
     * Busca determinações judiciais por processo judicial
     *
     * @param processoJudicialId ID do processo judicial
     * @returns Lista de determinações judiciais
     */
    async findByProcessoJudicial(processoJudicialId) {
        return this.determinacaoRepository.find({
            where: { processo_judicial_id: processoJudicialId, ativo: true },
            order: { data_determinacao: 'DESC' },
        });
    }
    /**
     * Busca determinações judiciais por solicitação
     *
     * @param solicitacaoId ID da solicitação
     * @returns Lista de determinações judiciais
     */
    async findBySolicitacao(solicitacaoId) {
        return this.determinacaoRepository.find({
            where: { solicitacao_id: solicitacaoId, ativo: true },
            order: { data_determinacao: 'DESC' },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Busca determinações judiciais por cidadão
     *
     * @param cidadaoId ID do cidadão
     * @returns Lista de determinações judiciais
     */
    async findByCidadao(cidadaoId) {
        return this.determinacaoRepository.find({
            where: { cidadao_id: cidadaoId, ativo: true },
            order: { data_determinacao: 'DESC' },
            relations: ['processo_judicial'],
        });
    }
    // ========================================
    // MÉTODOS DE GESTÃO DE PRAZOS
    // ========================================
    /**
     * Retorna determinações judiciais com prazo próximo de expirar ou expirado
     *
     * @param diasAviso Número de dias para considerar como prazo próximo
     * @returns Lista de determinações judiciais
     */
    async findDeterminacoesComPrazoProximo(diasAviso = 7) {
        const hoje = new Date();
        const limiteDias = new Date();
        limiteDias.setDate(hoje.getDate() + diasAviso);
        return this.determinacaoRepository.find({
            where: {
                ativo: true,
                cumprida: false,
                data_prazo: (0, typeorm_2.MoreThanOrEqual)(hoje) && (0, typeorm_2.LessThanOrEqual)(limiteDias),
            },
            order: { data_prazo: 'ASC' },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Retorna determinações judiciais com prazo expirado
     *
     * @returns Lista de determinações judiciais
     */
    async findDeterminacoesComPrazoExpirado() {
        const hoje = new Date();
        return this.determinacaoRepository.find({
            where: {
                ativo: true,
                cumprida: false,
                data_prazo: (0, typeorm_2.LessThan)(hoje),
            },
            order: { data_prazo: 'ASC' },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Busca determinações judiciais pendentes de cumprimento
     *
     * @returns Lista de determinações judiciais pendentes
     */
    async findPendentes() {
        return this.determinacaoRepository.find({
            where: {
                ativo: true,
                cumprida: false,
            },
            order: { data_determinacao: 'DESC' },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Alterna o status ativo/inativo de uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @param usuarioId ID do usuário que está alterando o status
     * @returns A determinação judicial atualizada
     * @throws NotFoundException se a determinação não for encontrada
     */
    async toggleAtivo(id, usuarioId) {
        const determinacao = await this.findById(id);
        this.logger.log(`Alternando status ativo da determinação judicial ${id}`);
        // Alternar o status ativo
        determinacao.ativo = !determinacao.ativo;
        determinacao.updated_by = usuarioId;
        return this.determinacaoRepository.save(determinacao);
    }
    /**
     * Remove permanentemente uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @returns Void
     * @throws NotFoundException se a determinação não for encontrada
     */
    async remove(id) {
        const determinacao = await this.findById(id);
        this.logger.log(`Removendo determinação judicial ${id}`);
        await this.determinacaoRepository.remove(determinacao);
    }
};
exports.DeterminacaoJudicialConsolidadoService = DeterminacaoJudicialConsolidadoService;
exports.DeterminacaoJudicialConsolidadoService = DeterminacaoJudicialConsolidadoService = DeterminacaoJudicialConsolidadoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(determinacao_judicial_entity_1.DeterminacaoJudicial)),
    __param(1, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof processo_judicial_service_1.ProcessoJudicialService !== "undefined" && processo_judicial_service_1.ProcessoJudicialService) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _d : Object])
], DeterminacaoJudicialConsolidadoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,