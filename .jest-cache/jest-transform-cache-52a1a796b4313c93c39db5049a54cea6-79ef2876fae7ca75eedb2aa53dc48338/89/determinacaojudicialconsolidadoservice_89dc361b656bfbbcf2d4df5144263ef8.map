{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\services\\determinacao-judicial-consolidado.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\services\\determinacao-judicial-consolidado.service.ts"],"sourcesContent":["import {\n  Injectable,\n  Logger,\n  NotFoundException,\n  BadRequestException,\n  ConflictException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  Repository,\n  FindOptionsWhere,\n  FindManyOptions,\n  Like,\n  LessThanOrEqual,\n  MoreThanOrEqual,\n  LessThan,\n  DataSource,\n} from 'typeorm';\nimport {\n  DeterminacaoJudicial,\n  TipoDeterminacaoJudicial,\n} from '../../../entities/determinacao-judicial.entity';\nimport { ProcessoJudicialService } from './processo-judicial.service';\nimport { PaginatedResult } from '../../../common/interfaces/paginated-result.interface';\nimport {\n  CreateDeterminacaoJudicialDto,\n  UpdateDeterminacaoJudicialDto,\n} from '../dtos/determinacao-judicial.dto';\nimport { SolicitacaoCreateDeterminacaoJudicialDto } from '../../solicitacao/dto/create-determinacao-judicial.dto';\nimport { SolicitacaoUpdateDeterminacaoJudicialDto } from '../../solicitacao/dto/update-determinacao-judicial.dto';\nimport { Solicitacao } from '../../../entities/solicitacao.entity';\n\n/**\n * Serviço consolidado para gerenciamento de determinações judiciais\n *\n * Este serviço unifica as funcionalidades dos módulos judicial e solicitação,\n * mantendo a separação de responsabilidades através de métodos específicos.\n *\n * Funcionalidades:\n * - Gestão completa de determinações judiciais (CRUD)\n * - Integração com processos judiciais\n * - Integração com solicitações de benefício\n * - Controle de prazos e vencimentos\n * - Transações atômicas para operações complexas\n * - Soft delete e hard delete conforme contexto\n */\n@Injectable()\nexport class DeterminacaoJudicialConsolidadoService {\n  private readonly logger = new Logger(\n    DeterminacaoJudicialConsolidadoService.name,\n  );\n\n  constructor(\n    @InjectRepository(DeterminacaoJudicial)\n    private readonly determinacaoRepository: Repository<DeterminacaoJudicial>,\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    private readonly processoJudicialService: ProcessoJudicialService,\n    private readonly dataSource: DataSource,\n  ) {}\n\n  // ========================================\n  // MÉTODOS PRINCIPAIS (CONTEXTO JUDICIAL)\n  // ========================================\n\n  /**\n   * Cria uma nova determinação judicial no contexto judicial\n   *\n   * @param data Dados da determinação judicial a ser criada\n   * @param usuarioId ID do usuário que está criando a determinação\n   * @returns A determinação judicial criada\n   */\n  async create(\n    data: CreateDeterminacaoJudicialDto,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    this.logger.log(`Criando determinação judicial: ${JSON.stringify(data)}`);\n\n    // Verificar se o processo judicial existe e se o ID foi fornecido\n    if (!data.processo_judicial_id) {\n      throw new BadRequestException('ID do processo judicial é obrigatório');\n    }\n\n    await this.processoJudicialService.findById(data.processo_judicial_id);\n\n    // Criar a nova determinação\n    const novaDeterminacao = this.determinacaoRepository.create({\n      ...data,\n      usuario_id: usuarioId,\n      created_by: usuarioId,\n      updated_by: usuarioId,\n    });\n\n    return this.determinacaoRepository.save(novaDeterminacao);\n  }\n\n  /**\n   * Busca uma determinação judicial pelo ID\n   *\n   * @param id ID da determinação judicial\n   * @param includeRelations Relações a incluir na busca\n   * @returns A determinação judicial encontrada\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async findById(\n    id: string,\n    includeRelations: string[] = ['processo_judicial'],\n  ): Promise<DeterminacaoJudicial> {\n    const determinacao = await this.determinacaoRepository.findOne({\n      where: { id },\n      relations: includeRelations,\n    });\n\n    if (!determinacao) {\n      throw new NotFoundException(\n        `Determinação judicial com ID ${id} não encontrada`,\n      );\n    }\n\n    return determinacao;\n  }\n\n  /**\n   * Lista determinações judiciais com paginação e filtros\n   *\n   * @param options Opções de busca e paginação\n   * @returns Lista paginada de determinações judiciais\n   */\n  async findAll(options: {\n    page?: number;\n    limit?: number;\n    processoJudicialId?: string;\n    solicitacaoId?: string;\n    cidadaoId?: string;\n    tipo?: TipoDeterminacaoJudicial;\n    cumprida?: boolean;\n    termo?: string;\n  }): Promise<PaginatedResult<DeterminacaoJudicial>> {\n    const {\n      page = 1,\n      limit = 10,\n      processoJudicialId,\n      solicitacaoId,\n      cidadaoId,\n      tipo,\n      cumprida,\n      termo,\n    } = options;\n\n    const where: FindOptionsWhere<DeterminacaoJudicial> = { ativo: true };\n\n    // Aplicar filtros\n    if (processoJudicialId) {\n      where.processo_judicial_id = processoJudicialId;\n    }\n\n    if (solicitacaoId) {\n      where.solicitacao_id = solicitacaoId;\n    }\n\n    if (cidadaoId) {\n      where.cidadao_id = cidadaoId;\n    }\n\n    if (tipo) {\n      where.tipo = tipo;\n    }\n\n    if (cumprida !== undefined) {\n      where.cumprida = cumprida;\n    }\n\n    const findOptions: FindManyOptions<DeterminacaoJudicial> = {\n      where,\n      skip: (page - 1) * limit,\n      take: limit,\n      order: {\n        data_determinacao: 'DESC',\n      },\n      relations: ['processo_judicial'],\n    };\n\n    // Aplicar busca por texto, se fornecido\n    if (termo) {\n      findOptions.where = [\n        { ...where, numero_processo: Like(`%${termo}%`) },\n        { ...where, numero_determinacao: Like(`%${termo}%`) },\n        { ...where, descricao: Like(`%${termo}%`) },\n      ];\n    }\n\n    const [determinacoes, total] =\n      await this.determinacaoRepository.findAndCount(findOptions);\n\n    return {\n      data: determinacoes,\n      meta: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Atualiza uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @param data Dados atualizados da determinação\n   * @param usuarioId ID do usuário que está atualizando a determinação\n   * @returns A determinação judicial atualizada\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async update(\n    id: string,\n    data: UpdateDeterminacaoJudicialDto,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const determinacao = await this.findById(id);\n\n    this.logger.log(\n      `Atualizando determinação judicial ${id}: ${JSON.stringify(data)}`,\n    );\n\n    // Atualizar os dados da determinação\n    this.determinacaoRepository.merge(determinacao, {\n      ...data,\n      updated_by: usuarioId,\n    });\n\n    return this.determinacaoRepository.save(determinacao);\n  }\n\n  /**\n   * Marca uma determinação judicial como cumprida\n   *\n   * @param id ID da determinação judicial\n   * @param observacao Observação sobre o cumprimento\n   * @param usuarioId ID do usuário que está marcando a determinação como cumprida\n   * @returns A determinação judicial atualizada\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async marcarComoCumprida(\n    id: string,\n    observacao: string,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const determinacao = await this.findById(id);\n\n    if (determinacao.cumprida) {\n      throw new BadRequestException(\n        'Esta determinação judicial já está marcada como cumprida',\n      );\n    }\n\n    this.logger.log(`Marcando determinação judicial ${id} como cumprida`);\n\n    // Atualizar o status da determinação\n    determinacao.cumprida = true;\n    determinacao.data_cumprimento = new Date();\n    determinacao.observacao_cumprimento = observacao;\n    determinacao.updated_by = usuarioId;\n\n    return this.determinacaoRepository.save(determinacao);\n  }\n\n  /**\n   * Desativa (soft delete) uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @param usuarioId ID do usuário que está desativando a determinação\n   * @returns Verdadeiro se a operação foi bem-sucedida\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async desativar(id: string, usuarioId: string): Promise<boolean> {\n    const determinacao = await this.findById(id);\n\n    this.logger.log(`Desativando determinação judicial ${id}`);\n\n    // Desativar a determinação\n    determinacao.ativo = false;\n    determinacao.updated_by = usuarioId;\n\n    await this.determinacaoRepository.save(determinacao);\n    return true;\n  }\n\n  // ========================================\n  // MÉTODOS ESPECÍFICOS PARA SOLICITAÇÕES\n  // ========================================\n\n  /**\n   * Cria uma nova determinação judicial no contexto de solicitação\n   *\n   * @param createDeterminacaoDto Dados da determinação judicial\n   * @param usuarioId ID do usuário que está criando a determinação\n   * @returns Determinação judicial criada\n   */\n  async createForSolicitacao(\n    createDeterminacaoDto: SolicitacaoCreateDeterminacaoJudicialDto,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      // Verificar se a solicitação existe\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: createDeterminacaoDto.solicitacao_id },\n      });\n\n      if (!solicitacao) {\n        throw new NotFoundException('Solicitação de benefício não encontrada');\n      }\n\n      // Verificar se já existe determinação com o mesmo número de processo para a solicitação\n      const determinacaoExistente = await this.determinacaoRepository.findOne({\n        where: {\n          solicitacao_id: createDeterminacaoDto.solicitacao_id,\n          numero_processo: createDeterminacaoDto.numero_processo,\n        },\n      });\n\n      if (determinacaoExistente) {\n        throw new ConflictException(\n          'Já existe uma determinação judicial com este número de processo para esta solicitação',\n        );\n      }\n\n      // Criar a determinação judicial\n      const novaDeterminacao = this.determinacaoRepository.create({\n        ...createDeterminacaoDto,\n        usuario_id: usuarioId,\n      });\n\n      const determinacaoSalva =\n        await queryRunner.manager.save(novaDeterminacao);\n\n      // Atualizar a solicitação para indicar que possui determinação judicial\n      await queryRunner.manager.update(\n        Solicitacao,\n        { id: createDeterminacaoDto.solicitacao_id },\n        {\n          determinacao_judicial_flag: true,\n          determinacao_judicial_id: determinacaoSalva.id,\n        },\n      );\n\n      await queryRunner.commitTransaction();\n\n      return determinacaoSalva;\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao criar determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao criar determinação judicial',\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  /**\n   * Busca todas as determinações judiciais de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de determinações judiciais\n   */\n  async findBySolicitacaoId(\n    solicitacaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    try {\n      // Verificar se a solicitação existe\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: solicitacaoId },\n      });\n\n      if (!solicitacao) {\n        throw new NotFoundException('Solicitação de benefício não encontrada');\n      }\n\n      return this.determinacaoRepository.find({\n        where: { solicitacao_id: solicitacaoId },\n        order: { data_determinacao: 'DESC' },\n      });\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao buscar determinações judiciais: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao buscar determinações judiciais',\n      );\n    }\n  }\n\n  /**\n   * Atualiza uma determinação judicial no contexto de solicitação\n   * @param id ID da determinação judicial\n   * @param updateDeterminacaoDto Dados para atualização\n   * @returns Determinação judicial atualizada\n   */\n  async updateForSolicitacao(\n    id: string,\n    updateDeterminacaoDto: SolicitacaoUpdateDeterminacaoJudicialDto,\n  ): Promise<DeterminacaoJudicial> {\n    try {\n      // Verificar se a determinação existe\n      const determinacao = await this.determinacaoRepository.findOne({\n        where: { id },\n      });\n\n      if (!determinacao) {\n        throw new NotFoundException('Determinação judicial não encontrada');\n      }\n\n      // Atualizar a determinação\n      await this.determinacaoRepository.update(id, updateDeterminacaoDto);\n\n      // Retornar a determinação atualizada\n      return this.findById(id, ['solicitacao']);\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao atualizar determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao atualizar determinação judicial',\n      );\n    }\n  }\n\n  /**\n   * Registra o cumprimento de uma determinação judicial (alias para marcarComoCumprida)\n   * @param id ID da determinação judicial\n   * @param observacoes Observações sobre o cumprimento\n   * @returns Determinação judicial atualizada\n   */\n  async registrarCumprimento(\n    id: string,\n    observacoes?: string,\n  ): Promise<DeterminacaoJudicial> {\n    try {\n      // Verificar se a determinação existe\n      const determinacao = await this.determinacaoRepository.findOne({\n        where: { id },\n      });\n\n      if (!determinacao) {\n        throw new NotFoundException('Determinação judicial não encontrada');\n      }\n\n      // Atualizar a determinação com a data de cumprimento\n      const updateData: Partial<DeterminacaoJudicial> = {\n        data_cumprimento: new Date(),\n      };\n\n      if (observacoes) {\n        updateData.observacao_cumprimento = observacoes;\n      }\n\n      await this.determinacaoRepository.update(id, updateData);\n\n      // Retornar a determinação atualizada\n      return this.findById(id, ['solicitacao']);\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao registrar cumprimento de determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao registrar cumprimento de determinação judicial',\n      );\n    }\n  }\n\n  /**\n   * Remove uma determinação judicial do contexto de solicitação\n   * @param id ID da determinação judicial\n   * @returns Void\n   */\n  async removeFromSolicitacao(id: string): Promise<void> {\n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n\n    try {\n      // Verificar se a determinação existe\n      const determinacao = await this.determinacaoRepository.findOne({\n        where: { id },\n        relations: ['solicitacao'],\n      });\n\n      if (!determinacao) {\n        throw new NotFoundException('Determinação judicial não encontrada');\n      }\n\n      // Verificar se é a determinação principal da solicitação\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { determinacao_judicial_id: id },\n      });\n\n      if (solicitacao) {\n        // Se for a determinação principal, verificar se há outras determinações\n        const outrasDeterminacoes = await this.determinacaoRepository.find({\n          where: { solicitacao_id: determinacao.solicitacao_id },\n        });\n\n        if (outrasDeterminacoes.length > 1) {\n          // Se houver outras determinações, definir a mais recente como principal\n          const outrasDeterminacoesOrdenadas = outrasDeterminacoes\n            .filter((det) => det.id !== id)\n            .sort(\n              (a, b) =>\n                b.data_determinacao.getTime() - a.data_determinacao.getTime(),\n            );\n\n          // Atualizar a solicitação com a nova determinação principal\n          await queryRunner.manager.update(\n            Solicitacao,\n            { id: determinacao.solicitacao_id },\n            { determinacao_judicial_id: outrasDeterminacoesOrdenadas[0].id },\n          );\n        } else {\n          // Se não houver outras determinações, remover a referência na solicitação\n          await queryRunner.manager.update(\n            Solicitacao,\n            { id: determinacao.solicitacao_id },\n            {\n              determinacao_judicial_flag: false,\n              determinacao_judicial_id: null as unknown as string,\n            },\n          );\n        }\n      }\n\n      // Remover a determinação\n      await queryRunner.manager.remove(determinacao);\n\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      await queryRunner.rollbackTransaction();\n\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao remover determinação judicial: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao remover determinação judicial',\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  // ========================================\n  // MÉTODOS DE BUSCA ESPECIALIZADOS\n  // ========================================\n\n  /**\n   * Busca determinações judiciais por processo judicial\n   *\n   * @param processoJudicialId ID do processo judicial\n   * @returns Lista de determinações judiciais\n   */\n  async findByProcessoJudicial(\n    processoJudicialId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoRepository.find({\n      where: { processo_judicial_id: processoJudicialId, ativo: true },\n      order: { data_determinacao: 'DESC' },\n    });\n  }\n\n  /**\n   * Busca determinações judiciais por solicitação\n   *\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de determinações judiciais\n   */\n  async findBySolicitacao(\n    solicitacaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoRepository.find({\n      where: { solicitacao_id: solicitacaoId, ativo: true },\n      order: { data_determinacao: 'DESC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Busca determinações judiciais por cidadão\n   *\n   * @param cidadaoId ID do cidadão\n   * @returns Lista de determinações judiciais\n   */\n  async findByCidadao(cidadaoId: string): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoRepository.find({\n      where: { cidadao_id: cidadaoId, ativo: true },\n      order: { data_determinacao: 'DESC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  // ========================================\n  // MÉTODOS DE GESTÃO DE PRAZOS\n  // ========================================\n\n  /**\n   * Retorna determinações judiciais com prazo próximo de expirar ou expirado\n   *\n   * @param diasAviso Número de dias para considerar como prazo próximo\n   * @returns Lista de determinações judiciais\n   */\n  async findDeterminacoesComPrazoProximo(\n    diasAviso: number = 7,\n  ): Promise<DeterminacaoJudicial[]> {\n    const hoje = new Date();\n    const limiteDias = new Date();\n    limiteDias.setDate(hoje.getDate() + diasAviso);\n\n    return this.determinacaoRepository.find({\n      where: {\n        ativo: true,\n        cumprida: false,\n        data_prazo: MoreThanOrEqual(hoje) && LessThanOrEqual(limiteDias),\n      },\n      order: { data_prazo: 'ASC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Retorna determinações judiciais com prazo expirado\n   *\n   * @returns Lista de determinações judiciais\n   */\n  async findDeterminacoesComPrazoExpirado(): Promise<DeterminacaoJudicial[]> {\n    const hoje = new Date();\n\n    return this.determinacaoRepository.find({\n      where: {\n        ativo: true,\n        cumprida: false,\n        data_prazo: LessThan(hoje),\n      },\n      order: { data_prazo: 'ASC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Busca determinações judiciais pendentes de cumprimento\n   *\n   * @returns Lista de determinações judiciais pendentes\n   */\n  async findPendentes(): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoRepository.find({\n      where: {\n        ativo: true,\n        cumprida: false,\n      },\n      order: { data_determinacao: 'DESC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Alterna o status ativo/inativo de uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @param usuarioId ID do usuário que está alterando o status\n   * @returns A determinação judicial atualizada\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async toggleAtivo(\n    id: string,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const determinacao = await this.findById(id);\n\n    this.logger.log(`Alternando status ativo da determinação judicial ${id}`);\n\n    // Alternar o status ativo\n    determinacao.ativo = !determinacao.ativo;\n    determinacao.updated_by = usuarioId;\n\n    return this.determinacaoRepository.save(determinacao);\n  }\n\n  /**\n   * Remove permanentemente uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @returns Void\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async remove(id: string): Promise<void> {\n    const determinacao = await this.findById(id);\n\n    this.logger.log(`Removendo determinação judicial ${id}`);\n\n    await this.determinacaoRepository.remove(determinacao);\n  }\n}\n"],"version":3}