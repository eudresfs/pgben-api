2ff64228a9f8fac802c1b05256f8399a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var HealthCheckService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthCheckService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
/**
 * Serviço para verificar a saúde de serviços externos como Redis,
 * permitindo que a aplicação inicialize mesmo com falhas em serviços não-críticos
 */
let HealthCheckService = HealthCheckService_1 = class HealthCheckService {
    configService;
    logger = new common_1.Logger(HealthCheckService_1.name);
    constructor(configService) {
        this.configService = configService;
    }
    /**
     * Verifica a disponibilidade do Redis
     * @returns true se o Redis estiver disponível, false caso contrário
     */
    async isRedisAvailable() {
        // TEMPORÁRIO: Desabilitando verificação do Redis para evitar travamento
        this.logger.warn('⚠️ Verificação do Redis desabilitada temporariamente para evitar travamento');
        return false;
        // TODO: Reabilitar após resolver problemas de conectividade
        /*
        // Verificar se o Redis está desabilitado por configuração
        const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';
        
        if (disableRedis) {
          this.logger.warn('Redis desabilitado por configuração. Algumas funcionalidades não estarão disponíveis.');
          return false;
        }
        
        const host = this.configService.get('REDIS_HOST', 'localhost');
        const port = parseInt(this.configService.get('REDIS_PORT', '6379'));
        const password = this.configService.get('REDIS_PASSWORD', '');
    
        const redis = new Redis({
          host,
          port,
          password,
          connectTimeout: 3000,
          maxRetriesPerRequest: 1,
          retryStrategy: () => null,
        });
    
        try {
          this.logger.log(`Verificando conexão com Redis em ${host}:${port}...`);
          await redis.ping();
          this.logger.log('Conexão com Redis estabelecida com sucesso');
          await redis.quit();
          return true;
        } catch (error) {
          this.logger.warn(`Redis não disponível: ${error.message}`);
          try {
            await redis.quit();
          } catch {}
          return false;
        }
        */
    }
    /**
     * Imprime informações sobre o status dos serviços externos
     * @param redisAvailable Status da disponibilidade do Redis
     */
    logServicesStatus(redisAvailable) {
        this.logger.log('========== Status dos Serviços Externos ==========');
        // Verificar se o Redis está desabilitado por configuração
        const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';
        if (disableRedis) {
            this.logger.log(`Redis: DESABILITADO POR CONFIGURAÇÃO ⚠️`);
            this.logger.warn('⚠️ Redis desabilitado intencionalmente. Funcionalidades que dependem de filas estão desativadas.');
        }
        else {
            this.logger.log(`Redis: ${redisAvailable ? 'DISPONÍVEL ✅' : 'INDISPONÍVEL ❌'}`);
            if (!redisAvailable) {
                this.logger.warn('⚠️ Redis indisponível: funcionalidades que dependem de filas não funcionarão corretamente');
                this.logger.warn('⚠️ Serviços afetados: Auditoria assíncrona, processamento em background');
            }
        }
        this.logger.log('==================================================');
    }
};
exports.HealthCheckService = HealthCheckService;
exports.HealthCheckService = HealthCheckService = HealthCheckService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], HealthCheckService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcc2VydmljZXNcXGhlYWx0aC1jaGVjay5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQW9EO0FBQ3BELDJDQUErQztBQUcvQzs7O0dBR0c7QUFFSSxJQUFNLGtCQUFrQiwwQkFBeEIsTUFBTSxrQkFBa0I7SUFHVDtJQUZILE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxvQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5RCxZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7SUFFcEQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQjtRQUNwQix3RUFBd0U7UUFDeEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QsNkVBQTZFLENBQzlFLENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQztRQUViLDREQUE0RDtRQUM1RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFtQ0U7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssaUJBQWlCLENBQUMsY0FBdUI7UUFDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELENBQUMsQ0FBQztRQUV0RSwwREFBMEQ7UUFDMUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssTUFBTSxDQUFDO1FBRXhFLElBQUksWUFBWSxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMseUNBQXlDLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZCxrR0FBa0csQ0FDbkcsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQ2IsVUFBVSxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FDL0QsQ0FBQztZQUNGLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QsMkZBQTJGLENBQzVGLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QseUVBQXlFLENBQzFFLENBQUM7WUFDSixDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNGLENBQUE7QUF0RlksZ0RBQWtCOzZCQUFsQixrQkFBa0I7SUFEOUIsSUFBQSxtQkFBVSxHQUFFO3lEQUl3QixzQkFBYSxvQkFBYixzQkFBYTtHQUhyQyxrQkFBa0IsQ0FzRjlCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXHNlcnZpY2VzXFxoZWFsdGgtY2hlY2suc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBMb2dnZXIgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBDb25maWdTZXJ2aWNlIH0gZnJvbSAnQG5lc3Rqcy9jb25maWcnO1xuaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnO1xuXG4vKipcbiAqIFNlcnZpw6dvIHBhcmEgdmVyaWZpY2FyIGEgc2HDumRlIGRlIHNlcnZpw6dvcyBleHRlcm5vcyBjb21vIFJlZGlzLFxuICogcGVybWl0aW5kbyBxdWUgYSBhcGxpY2HDp8OjbyBpbmljaWFsaXplIG1lc21vIGNvbSBmYWxoYXMgZW0gc2VydmnDp29zIG7Do28tY3LDrXRpY29zXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIZWFsdGhDaGVja1NlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlciA9IG5ldyBMb2dnZXIoSGVhbHRoQ2hlY2tTZXJ2aWNlLm5hbWUpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnU2VydmljZTogQ29uZmlnU2VydmljZSkge31cblxuICAvKipcbiAgICogVmVyaWZpY2EgYSBkaXNwb25pYmlsaWRhZGUgZG8gUmVkaXNcbiAgICogQHJldHVybnMgdHJ1ZSBzZSBvIFJlZGlzIGVzdGl2ZXIgZGlzcG9uw612ZWwsIGZhbHNlIGNhc28gY29udHLDoXJpb1xuICAgKi9cbiAgYXN5bmMgaXNSZWRpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAvLyBURU1QT1LDgVJJTzogRGVzYWJpbGl0YW5kbyB2ZXJpZmljYcOnw6NvIGRvIFJlZGlzIHBhcmEgZXZpdGFyIHRyYXZhbWVudG9cbiAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgJ+KaoO+4jyBWZXJpZmljYcOnw6NvIGRvIFJlZGlzIGRlc2FiaWxpdGFkYSB0ZW1wb3JhcmlhbWVudGUgcGFyYSBldml0YXIgdHJhdmFtZW50bycsXG4gICAgKTtcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBUT0RPOiBSZWFiaWxpdGFyIGFww7NzIHJlc29sdmVyIHByb2JsZW1hcyBkZSBjb25lY3RpdmlkYWRlXG4gICAgLypcbiAgICAvLyBWZXJpZmljYXIgc2UgbyBSZWRpcyBlc3TDoSBkZXNhYmlsaXRhZG8gcG9yIGNvbmZpZ3VyYcOnw6NvXG4gICAgY29uc3QgZGlzYWJsZVJlZGlzID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldCgnRElTQUJMRV9SRURJUycpID09PSAndHJ1ZSc7XG4gICAgXG4gICAgaWYgKGRpc2FibGVSZWRpcykge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignUmVkaXMgZGVzYWJpbGl0YWRvIHBvciBjb25maWd1cmHDp8Ojby4gQWxndW1hcyBmdW5jaW9uYWxpZGFkZXMgbsOjbyBlc3RhcsOjbyBkaXNwb27DrXZlaXMuJyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGhvc3QgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdSRURJU19IT1NUJywgJ2xvY2FsaG9zdCcpO1xuICAgIGNvbnN0IHBvcnQgPSBwYXJzZUludCh0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdSRURJU19QT1JUJywgJzYzNzknKSk7XG4gICAgY29uc3QgcGFzc3dvcmQgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdSRURJU19QQVNTV09SRCcsICcnKTtcblxuICAgIGNvbnN0IHJlZGlzID0gbmV3IFJlZGlzKHtcbiAgICAgIGhvc3QsXG4gICAgICBwb3J0LFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBjb25uZWN0VGltZW91dDogMzAwMCxcbiAgICAgIG1heFJldHJpZXNQZXJSZXF1ZXN0OiAxLFxuICAgICAgcmV0cnlTdHJhdGVneTogKCkgPT4gbnVsbCxcbiAgICB9KTtcblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coYFZlcmlmaWNhbmRvIGNvbmV4w6NvIGNvbSBSZWRpcyBlbSAke2hvc3R9OiR7cG9ydH0uLi5gKTtcbiAgICAgIGF3YWl0IHJlZGlzLnBpbmcoKTtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZygnQ29uZXjDo28gY29tIFJlZGlzIGVzdGFiZWxlY2lkYSBjb20gc3VjZXNzbycpO1xuICAgICAgYXdhaXQgcmVkaXMucXVpdCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oYFJlZGlzIG7Do28gZGlzcG9uw612ZWw6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHJlZGlzLnF1aXQoKTtcbiAgICAgIH0gY2F0Y2gge31cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgKi9cbiAgfVxuXG4gIC8qKlxuICAgKiBJbXByaW1lIGluZm9ybWHDp8O1ZXMgc29icmUgbyBzdGF0dXMgZG9zIHNlcnZpw6dvcyBleHRlcm5vc1xuICAgKiBAcGFyYW0gcmVkaXNBdmFpbGFibGUgU3RhdHVzIGRhIGRpc3BvbmliaWxpZGFkZSBkbyBSZWRpc1xuICAgKi9cbiAgcHJpdmF0ZSBsb2dTZXJ2aWNlc1N0YXR1cyhyZWRpc0F2YWlsYWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMubG9nZ2VyLmxvZygnPT09PT09PT09PSBTdGF0dXMgZG9zIFNlcnZpw6dvcyBFeHRlcm5vcyA9PT09PT09PT09Jyk7XG5cbiAgICAvLyBWZXJpZmljYXIgc2UgbyBSZWRpcyBlc3TDoSBkZXNhYmlsaXRhZG8gcG9yIGNvbmZpZ3VyYcOnw6NvXG4gICAgY29uc3QgZGlzYWJsZVJlZGlzID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldCgnRElTQUJMRV9SRURJUycpID09PSAndHJ1ZSc7XG5cbiAgICBpZiAoZGlzYWJsZVJlZGlzKSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coYFJlZGlzOiBERVNBQklMSVRBRE8gUE9SIENPTkZJR1VSQcOHw4NPIOKaoO+4j2ApO1xuICAgICAgdGhpcy5sb2dnZXIud2FybihcbiAgICAgICAgJ+KaoO+4jyBSZWRpcyBkZXNhYmlsaXRhZG8gaW50ZW5jaW9uYWxtZW50ZS4gRnVuY2lvbmFsaWRhZGVzIHF1ZSBkZXBlbmRlbSBkZSBmaWxhcyBlc3TDo28gZGVzYXRpdmFkYXMuJyxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcbiAgICAgICAgYFJlZGlzOiAke3JlZGlzQXZhaWxhYmxlID8gJ0RJU1BPTsONVkVMIOKchScgOiAnSU5ESVNQT07DjVZFTCDinYwnfWAsXG4gICAgICApO1xuICAgICAgaWYgKCFyZWRpc0F2YWlsYWJsZSkge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAgICfimqDvuI8gUmVkaXMgaW5kaXNwb27DrXZlbDogZnVuY2lvbmFsaWRhZGVzIHF1ZSBkZXBlbmRlbSBkZSBmaWxhcyBuw6NvIGZ1bmNpb25hcsOjbyBjb3JyZXRhbWVudGUnLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAgICfimqDvuI8gU2VydmnDp29zIGFmZXRhZG9zOiBBdWRpdG9yaWEgYXNzw61uY3JvbmEsIHByb2Nlc3NhbWVudG8gZW0gYmFja2dyb3VuZCcsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIubG9nKCc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScpO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=