a4ad58d5e84b6faf9e38cb659701fe9e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagamentoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const pagamento_entity_1 = require("../../../entities/pagamento.entity");
const status_pagamento_enum_1 = require("../../../enums/status-pagamento.enum");
const status_transition_validator_1 = require("../validators/status-transition-validator");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
/**
 * Serviço para gerenciamento de operações relacionadas a pagamentos
 *
 * Implementa a lógica de negócio para criação, consulta, atualização
 * e gerenciamento de ciclo de vida dos pagamentos no sistema.
 *
 * @author Equipe PGBen
 */
let PagamentoService = class PagamentoService {
    pagamentoRepository;
    statusValidator;
    constructor(pagamentoRepository, statusValidator) {
        this.pagamentoRepository = pagamentoRepository;
        this.statusValidator = statusValidator;
    }
    /**
     * Cria um novo registro de pagamento para uma solicitação aprovada
     *
     * @param solicitacaoId ID da solicitação aprovada
     * @param createDto Dados para criação do pagamento
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Pagamento criado
     */
    async createPagamento(solicitacaoId, createDto, usuarioId) {
        // Validar se a solicitação existe e está aprovada
        // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);
        // if (!solicitacao) {
        //   throw new NotFoundException('Solicitação não encontrada');
        // }
        // if (solicitacao.status !== 'aprovada') {
        //   throw new ConflictException('Somente solicitações aprovadas podem ter pagamentos liberados');
        // }
        // Validar método de pagamento e informações bancárias
        if (createDto.metodoPagamento !== 'presencial' &&
            !createDto.infoBancariaId) {
            throw new common_1.ConflictException('Informações bancárias são obrigatórias para pagamentos não presenciais');
        }
        // Validar limites de valor
        // await this.validarLimitesPagamento(solicitacao.tipoBeneficioId, createDto.valor);
        // Normalizar campos de enum antes de criar a entidade
        const dadosNormalizados = (0, enum_normalizer_util_1.normalizeEnumFields)({
            solicitacaoId,
            infoBancariaId: createDto.infoBancariaId,
            valor: createDto.valor,
            dataLiberacao: createDto.dataLiberacao,
            status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, // Status inicial ao criar o pagamento
            metodoPagamento: createDto.metodoPagamento,
            liberadoPor: usuarioId,
            observacoes: createDto.observacoes,
        });
        // Criar nova entidade de pagamento
        const pagamento = this.pagamentoRepository.create(dadosNormalizados);
        // Salvar o pagamento
        const result = await this.pagamentoRepository.save(pagamento);
        // Atualizar status da solicitação
        // await this.solicitacaoService.atualizarStatusParaPagamentoPendente(solicitacaoId);
        // Registrar operação no log de auditoria
        // await this.auditoriaService.registrarOperacao({
        //   tipoOperacao: 'CRIACAO_PAGAMENTO',
        //   usuarioId,
        //   entidadeId: result.id,
        //   tipoEntidade: 'PAGAMENTO',
        //   dadosAnteriores: null,
        //   dadosNovos: result
        // });
        return result;
    }
    /**
     * Atualiza o status de um pagamento existente
     *
     * @param id ID do pagamento
     * @param novoStatus Novo status do pagamento
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Pagamento atualizado
     */
    async atualizarStatus(id, novoStatus, usuarioId) {
        // Buscar o pagamento pelo ID
        const pagamento = await this.findOne(id);
        if (!pagamento) {
            throw new common_1.NotFoundException('Pagamento não encontrado');
        }
        // Validar a transição de status
        const transitionResult = this.statusValidator.canTransition(pagamento.status, novoStatus);
        if (!transitionResult.allowed) {
            throw new common_1.ConflictException(`Transição de status não permitida: ${transitionResult.reason}`);
        }
        // Salvar dados anteriores para auditoria
        const dadosAnteriores = { ...pagamento };
        // Normalizar o novo status antes de atualizar
        const statusNormalizado = (0, enum_normalizer_util_1.normalizeEnumFields)({
            status: novoStatus,
        }).status;
        // Atualizar o status
        pagamento.status = statusNormalizado;
        // Salvar a atualização
        const result = await this.pagamentoRepository.save(pagamento);
        // Atualizar status da solicitação, se necessário
        // if (novoStatus === StatusPagamentoEnum.CONFIRMADO) {
        //   await this.solicitacaoService.atualizarStatusParaConcluido(pagamento.solicitacaoId);
        // } else if (novoStatus === StatusPagamentoEnum.CANCELADO) {
        //   await this.solicitacaoService.atualizarStatusParaAprovado(pagamento.solicitacaoId);
        // }
        // Registrar operação no log de auditoria
        // await this.auditoriaService.registrarOperacao({
        //   tipoOperacao: 'ATUALIZACAO_STATUS_PAGAMENTO',
        //   usuarioId,
        //   entidadeId: id,
        //   tipoEntidade: 'PAGAMENTO',
        //   dadosAnteriores,
        //   dadosNovos: result
        // });
        return result;
    }
    /**
     * Cancela um pagamento existente
     *
     * @param id ID do pagamento a ser cancelado
     * @param usuarioId ID do usuário que está realizando a operação
     * @param motivoCancelamento Motivo do cancelamento
     * @returns Pagamento cancelado
     */
    async cancelarPagamento(id, usuarioId, motivoCancelamento) {
        // Buscar o pagamento pelo ID
        const pagamento = await this.findOne(id);
        if (!pagamento) {
            throw new common_1.NotFoundException('Pagamento não encontrado');
        }
        // Verificar se o pagamento pode ser cancelado
        if (!this.statusValidator.canBeCanceled(pagamento.status)) {
            throw new common_1.ConflictException('Este pagamento não pode ser cancelado devido ao seu status atual');
        }
        // Salvar dados anteriores para auditoria
        const dadosAnteriores = { ...pagamento };
        // Atualizar o status e registrar motivo do cancelamento
        pagamento.status = status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO;
        pagamento.observacoes = pagamento.observacoes
            ? `${pagamento.observacoes}\nMotivo do cancelamento: ${motivoCancelamento}`
            : `Motivo do cancelamento: ${motivoCancelamento}`;
        // Salvar a atualização
        const result = await this.pagamentoRepository.save(pagamento);
        // Atualizar status da solicitação
        // await this.solicitacaoService.atualizarStatusParaAprovado(pagamento.solicitacaoId);
        // Registrar operação no log de auditoria
        // await this.auditoriaService.registrarOperacao({
        //   tipoOperacao: 'CANCELAMENTO_PAGAMENTO',
        //   usuarioId,
        //   entidadeId: id,
        //   tipoEntidade: 'PAGAMENTO',
        //   dadosAnteriores,
        //   dadosNovos: result,
        //   observacoes: motivoCancelamento
        // });
        return result;
    }
    /**
     * Busca um pagamento pelo ID
     *
     * @param id ID do pagamento
     * @returns Pagamento encontrado ou null
     */
    async findOne(id) {
        return this.pagamentoRepository.findOneBy({ id });
    }
    /**
     * Busca um pagamento pelo ID com todos os relacionamentos
     *
     * @param id ID do pagamento
     * @returns Pagamento encontrado com relacionamentos ou null
     */
    async findOneWithRelations(id) {
        return this.pagamentoRepository.findOne({
            where: { id },
            relations: ['comprovantes', 'confirmacoes'],
        });
    }
    /**
     * Lista pagamentos com filtros e paginação
     *
     * @param options Opções de filtro
     * @returns Lista de pagamentos com meta-informações de paginação
     */
    async findAll(options) {
        const { status, unidadeId, dataInicio, dataFim, metodoPagamento, page = 1, limit = 10, } = options;
        // Construir a query base
        const queryBuilder = this.pagamentoRepository.createQueryBuilder('pagamento');
        // Adicionar condições
        if (status) {
            queryBuilder.andWhere('pagamento.status = :status', { status });
        }
        if (metodoPagamento) {
            queryBuilder.andWhere('pagamento.metodo_pagamento = :metodoPagamento', {
                metodoPagamento,
            });
        }
        if (dataInicio) {
            queryBuilder.andWhere('pagamento.data_liberacao >= :dataInicio', {
                dataInicio,
            });
        }
        if (dataFim) {
            queryBuilder.andWhere('pagamento.data_liberacao <= :dataFim', {
                dataFim,
            });
        }
        // Filtro por unidade (requer join com solicitação)
        if (unidadeId) {
            queryBuilder
                .innerJoin('solicitacao', 's', 'pagamento.solicitacao_id = s.id')
                .andWhere('s.unidade_id = :unidadeId', { unidadeId });
        }
        // Adicionar paginação
        queryBuilder.skip((page - 1) * limit).take(limit);
        // Ordenar por data de liberação (mais recentes primeiro)
        queryBuilder.orderBy('pagamento.data_liberacao', 'DESC');
        // Executar a query
        const [items, total] = await queryBuilder.getManyAndCount();
        return {
            items,
            total,
            page,
            limit,
        };
    }
    /**
     * Lista pagamentos pendentes (liberados mas não confirmados)
     *
     * @param options Opções de filtro
     * @returns Lista de pagamentos pendentes
     */
    async findPendentes(options) {
        const { unidadeId, tipoBeneficioId, page = 1, limit = 10 } = options;
        // Construir a query base
        const queryBuilder = this.pagamentoRepository.createQueryBuilder('pagamento');
        // Filtrar apenas pagamentos liberados
        queryBuilder.where('pagamento.status = :status', {
            status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
        });
        // Filtros adicionais que requerem joins
        if (unidadeId || tipoBeneficioId) {
            queryBuilder.innerJoin('solicitacao', 's', 'pagamento.solicitacao_id = s.id');
            if (unidadeId) {
                queryBuilder.andWhere('s.unidade_id = :unidadeId', { unidadeId });
            }
            if (tipoBeneficioId) {
                queryBuilder.andWhere('s.tipo_beneficio_id = :tipoBeneficioId', {
                    tipoBeneficioId,
                });
            }
        }
        // Adicionar paginação
        queryBuilder.skip((page - 1) * limit).take(limit);
        // Ordenar por data de liberação (mais antigos primeiro)
        queryBuilder.orderBy('pagamento.data_liberacao', 'ASC');
        // Executar a query
        const [items, total] = await queryBuilder.getManyAndCount();
        return {
            items,
            total,
            page,
            limit,
        };
    }
    /**
     * Valida se o valor está dentro dos limites permitidos para o tipo de benefício
     *
     * @param tipoBeneficioId ID do tipo de benefício
     * @param valor Valor a ser validado
     * @throws ConflictException se o valor exceder os limites permitidos
     */
    async validarLimitesPagamento(tipoBeneficioId, valor) {
        // Esta é uma implementação de placeholder
        // Será integrada com o ConfiguracaoModule ou TipoBeneficioService
        // const tipoBeneficio = await this.tipoBeneficioService.findOne(tipoBeneficioId);
        // if (!tipoBeneficio) {
        //   throw new NotFoundException('Tipo de benefício não encontrado');
        // }
        // if (valor > tipoBeneficio.valorMaximo) {
        //   throw new ConflictException(
        //     `O valor excede o limite máximo permitido (${tipoBeneficio.valorMaximo}) para este tipo de benefício`
        //   );
        // }
        // if (valor < tipoBeneficio.valorMinimo) {
        //   throw new ConflictException(
        //     `O valor está abaixo do limite mínimo permitido (${tipoBeneficio.valorMinimo}) para este tipo de benefício`
        //   );
        // }
    }
};
exports.PagamentoService = PagamentoService;
exports.PagamentoService = PagamentoService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(pagamento_entity_1.Pagamento)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof status_transition_validator_1.StatusTransitionValidator !== "undefined" && status_transition_validator_1.StatusTransitionValidator) === "function" ? _b : Object])
], PagamentoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,