90d29e2f98d4064a6133bb147a4e21c5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registeredProcessors = exports.getBullConfig = void 0;
const common_1 = require("@nestjs/common");
/**
 * Configuração centralizada do Bull para evitar duplicação de processadores
 */
const getBullConfig = (configService) => {
    const logger = new common_1.Logger('BullConfig');
    // Verificar se o Redis deve ser desabilitado (útil para desenvolvimento)
    const disableRedis = configService.get('DISABLE_REDIS') === 'true';
    if (disableRedis) {
        logger.warn('Redis desabilitado por configuração. Filas não funcionarão.');
        // Retornar configuração mínima que não tentará conectar ao Redis
        return {
            redis: {
                maxRetriesPerRequest: 0,
                enableReadyCheck: false,
                connectTimeout: 1,
                retryStrategy: () => null, // Não tentar reconectar
            },
            defaultJobOptions: {
                attempts: 1,
                removeOnComplete: true,
                removeOnFail: true,
            },
        };
    }
    return {
        redis: {
            host: configService.get('REDIS_HOST', 'localhost'),
            port: parseInt(configService.get('REDIS_PORT', '6379')),
            password: configService.get('REDIS_PASSWORD', ''),
            // Opções de conexão mais resilientes
            maxRetriesPerRequest: 2,
            enableReadyCheck: false,
            connectTimeout: 5000,
            // Estratégia de reconexão mais inteligente
            retryStrategy: (times) => {
                if (times > 3) {
                    // Após 3 tentativas, esperar mais tempo entre tentativas
                    logger.warn(`Falha ao conectar ao Redis após ${times} tentativas. Nova tentativa em 10s.`);
                    return 10000; // 10 segundos
                }
                return Math.min(times * 1000, 3000); // Espera crescente até 3 segundos
            },
        },
        defaultJobOptions: {
            attempts: 3,
            backoff: {
                type: 'exponential',
                delay: 1000,
            },
            removeOnComplete: true,
            removeOnFail: false,
        },
    };
};
exports.getBullConfig = getBullConfig;
// Variável global para controlar quais processadores já foram registrados
exports.registeredProcessors = new Set();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGNvbmZpZ1xcYnVsbC5jb25maWcudHMiLCJtYXBwaW5ncyI6Ijs7O0FBRUEsMkNBQXdDO0FBRXhDOztHQUVHO0FBQ0ksTUFBTSxhQUFhLEdBQUcsQ0FDM0IsYUFBNEIsRUFDVCxFQUFFO0lBQ3JCLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBRXhDLHlFQUF5RTtJQUN6RSxNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLE1BQU0sQ0FBQztJQUVuRSxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkRBQTZELENBQUMsQ0FBQztRQUMzRSxpRUFBaUU7UUFDakUsT0FBTztZQUNMLEtBQUssRUFBRTtnQkFDTCxvQkFBb0IsRUFBRSxDQUFDO2dCQUN2QixnQkFBZ0IsRUFBRSxLQUFLO2dCQUN2QixjQUFjLEVBQUUsQ0FBQztnQkFDakIsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSx3QkFBd0I7YUFDcEQ7WUFDRCxpQkFBaUIsRUFBRTtnQkFDakIsUUFBUSxFQUFFLENBQUM7Z0JBQ1gsZ0JBQWdCLEVBQUUsSUFBSTtnQkFDdEIsWUFBWSxFQUFFLElBQUk7YUFDbkI7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDO1lBQ2xELElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdkQsUUFBUSxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDO1lBQ2pELHFDQUFxQztZQUNyQyxvQkFBb0IsRUFBRSxDQUFDO1lBQ3ZCLGdCQUFnQixFQUFFLEtBQUs7WUFDdkIsY0FBYyxFQUFFLElBQUk7WUFDcEIsMkNBQTJDO1lBQzNDLGFBQWEsRUFBRSxDQUFDLEtBQWEsRUFBRSxFQUFFO2dCQUMvQixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztvQkFDZCx5REFBeUQ7b0JBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQ1QsbUNBQW1DLEtBQUsscUNBQXFDLENBQzlFLENBQUM7b0JBQ0YsT0FBTyxLQUFLLENBQUMsQ0FBQyxjQUFjO2dCQUM5QixDQUFDO2dCQUNELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsa0NBQWtDO1lBQ3pFLENBQUM7U0FDRjtRQUNELGlCQUFpQixFQUFFO1lBQ2pCLFFBQVEsRUFBRSxDQUFDO1lBQ1gsT0FBTyxFQUFFO2dCQUNQLElBQUksRUFBRSxhQUFhO2dCQUNuQixLQUFLLEVBQUUsSUFBSTthQUNaO1lBQ0QsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixZQUFZLEVBQUUsS0FBSztTQUNwQjtLQUNGLENBQUM7QUFDSixDQUFDLENBQUM7QUF6RFcsUUFBQSxhQUFhLGlCQXlEeEI7QUFFRiwwRUFBMEU7QUFDN0QsUUFBQSxvQkFBb0IsR0FBRyxJQUFJLEdBQUcsRUFBVSxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxjb25maWdcXGJ1bGwuY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbmZpZ1NlcnZpY2UgfSBmcm9tICdAbmVzdGpzL2NvbmZpZyc7XG5pbXBvcnQgeyBCdWxsTW9kdWxlT3B0aW9ucyB9IGZyb20gJ0BuZXN0anMvYnVsbCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5cbi8qKlxuICogQ29uZmlndXJhw6fDo28gY2VudHJhbGl6YWRhIGRvIEJ1bGwgcGFyYSBldml0YXIgZHVwbGljYcOnw6NvIGRlIHByb2Nlc3NhZG9yZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEJ1bGxDb25maWcgPSAoXG4gIGNvbmZpZ1NlcnZpY2U6IENvbmZpZ1NlcnZpY2UsXG4pOiBCdWxsTW9kdWxlT3B0aW9ucyA9PiB7XG4gIGNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0J1bGxDb25maWcnKTtcblxuICAvLyBWZXJpZmljYXIgc2UgbyBSZWRpcyBkZXZlIHNlciBkZXNhYmlsaXRhZG8gKMO6dGlsIHBhcmEgZGVzZW52b2x2aW1lbnRvKVxuICBjb25zdCBkaXNhYmxlUmVkaXMgPSBjb25maWdTZXJ2aWNlLmdldCgnRElTQUJMRV9SRURJUycpID09PSAndHJ1ZSc7XG5cbiAgaWYgKGRpc2FibGVSZWRpcykge1xuICAgIGxvZ2dlci53YXJuKCdSZWRpcyBkZXNhYmlsaXRhZG8gcG9yIGNvbmZpZ3VyYcOnw6NvLiBGaWxhcyBuw6NvIGZ1bmNpb25hcsOjby4nKTtcbiAgICAvLyBSZXRvcm5hciBjb25maWd1cmHDp8OjbyBtw61uaW1hIHF1ZSBuw6NvIHRlbnRhcsOhIGNvbmVjdGFyIGFvIFJlZGlzXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlZGlzOiB7XG4gICAgICAgIG1heFJldHJpZXNQZXJSZXF1ZXN0OiAwLFxuICAgICAgICBlbmFibGVSZWFkeUNoZWNrOiBmYWxzZSxcbiAgICAgICAgY29ubmVjdFRpbWVvdXQ6IDEsXG4gICAgICAgIHJldHJ5U3RyYXRlZ3k6ICgpID0+IG51bGwsIC8vIE7Do28gdGVudGFyIHJlY29uZWN0YXJcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0Sm9iT3B0aW9uczoge1xuICAgICAgICBhdHRlbXB0czogMSxcbiAgICAgICAgcmVtb3ZlT25Db21wbGV0ZTogdHJ1ZSxcbiAgICAgICAgcmVtb3ZlT25GYWlsOiB0cnVlLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZWRpczoge1xuICAgICAgaG9zdDogY29uZmlnU2VydmljZS5nZXQoJ1JFRElTX0hPU1QnLCAnbG9jYWxob3N0JyksXG4gICAgICBwb3J0OiBwYXJzZUludChjb25maWdTZXJ2aWNlLmdldCgnUkVESVNfUE9SVCcsICc2Mzc5JykpLFxuICAgICAgcGFzc3dvcmQ6IGNvbmZpZ1NlcnZpY2UuZ2V0KCdSRURJU19QQVNTV09SRCcsICcnKSxcbiAgICAgIC8vIE9ww6fDtWVzIGRlIGNvbmV4w6NvIG1haXMgcmVzaWxpZW50ZXNcbiAgICAgIG1heFJldHJpZXNQZXJSZXF1ZXN0OiAyLFxuICAgICAgZW5hYmxlUmVhZHlDaGVjazogZmFsc2UsXG4gICAgICBjb25uZWN0VGltZW91dDogNTAwMCxcbiAgICAgIC8vIEVzdHJhdMOpZ2lhIGRlIHJlY29uZXjDo28gbWFpcyBpbnRlbGlnZW50ZVxuICAgICAgcmV0cnlTdHJhdGVneTogKHRpbWVzOiBudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKHRpbWVzID4gMykge1xuICAgICAgICAgIC8vIEFww7NzIDMgdGVudGF0aXZhcywgZXNwZXJhciBtYWlzIHRlbXBvIGVudHJlIHRlbnRhdGl2YXNcbiAgICAgICAgICBsb2dnZXIud2FybihcbiAgICAgICAgICAgIGBGYWxoYSBhbyBjb25lY3RhciBhbyBSZWRpcyBhcMOzcyAke3RpbWVzfSB0ZW50YXRpdmFzLiBOb3ZhIHRlbnRhdGl2YSBlbSAxMHMuYCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiAxMDAwMDsgLy8gMTAgc2VndW5kb3NcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTWF0aC5taW4odGltZXMgKiAxMDAwLCAzMDAwKTsgLy8gRXNwZXJhIGNyZXNjZW50ZSBhdMOpIDMgc2VndW5kb3NcbiAgICAgIH0sXG4gICAgfSxcbiAgICBkZWZhdWx0Sm9iT3B0aW9uczoge1xuICAgICAgYXR0ZW1wdHM6IDMsXG4gICAgICBiYWNrb2ZmOiB7XG4gICAgICAgIHR5cGU6ICdleHBvbmVudGlhbCcsXG4gICAgICAgIGRlbGF5OiAxMDAwLFxuICAgICAgfSxcbiAgICAgIHJlbW92ZU9uQ29tcGxldGU6IHRydWUsXG4gICAgICByZW1vdmVPbkZhaWw6IGZhbHNlLFxuICAgIH0sXG4gIH07XG59O1xuXG4vLyBWYXJpw6F2ZWwgZ2xvYmFsIHBhcmEgY29udHJvbGFyIHF1YWlzIHByb2Nlc3NhZG9yZXMgasOhIGZvcmFtIHJlZ2lzdHJhZG9zXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJlZFByb2Nlc3NvcnMgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiJdLCJ2ZXJzaW9uIjozfQ==