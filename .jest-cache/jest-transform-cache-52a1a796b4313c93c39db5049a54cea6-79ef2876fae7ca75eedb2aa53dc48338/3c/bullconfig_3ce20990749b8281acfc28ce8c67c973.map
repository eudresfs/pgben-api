{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\config\\bull.config.ts","mappings":";;;AAEA,2CAAwC;AAExC;;GAEG;AACI,MAAM,aAAa,GAAG,CAC3B,aAA4B,EACT,EAAE;IACrB,MAAM,MAAM,GAAG,IAAI,eAAM,CAAC,YAAY,CAAC,CAAC;IAExC,yEAAyE;IACzE,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,MAAM,CAAC;IAEnE,IAAI,YAAY,EAAE,CAAC;QACjB,MAAM,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;QAC3E,iEAAiE;QACjE,OAAO;YACL,KAAK,EAAE;gBACL,oBAAoB,EAAE,CAAC;gBACvB,gBAAgB,EAAE,KAAK;gBACvB,cAAc,EAAE,CAAC;gBACjB,aAAa,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,wBAAwB;aACpD;YACD,iBAAiB,EAAE;gBACjB,QAAQ,EAAE,CAAC;gBACX,gBAAgB,EAAE,IAAI;gBACtB,YAAY,EAAE,IAAI;aACnB;SACF,CAAC;IACJ,CAAC;IAED,OAAO;QACL,KAAK,EAAE;YACL,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC;YAClD,IAAI,EAAE,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YACvD,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,gBAAgB,EAAE,EAAE,CAAC;YACjD,qCAAqC;YACrC,oBAAoB,EAAE,CAAC;YACvB,gBAAgB,EAAE,KAAK;YACvB,cAAc,EAAE,IAAI;YACpB,2CAA2C;YAC3C,aAAa,EAAE,CAAC,KAAa,EAAE,EAAE;gBAC/B,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;oBACd,yDAAyD;oBACzD,MAAM,CAAC,IAAI,CACT,mCAAmC,KAAK,qCAAqC,CAC9E,CAAC;oBACF,OAAO,KAAK,CAAC,CAAC,cAAc;gBAC9B,CAAC;gBACD,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,kCAAkC;YACzE,CAAC;SACF;QACD,iBAAiB,EAAE;YACjB,QAAQ,EAAE,CAAC;YACX,OAAO,EAAE;gBACP,IAAI,EAAE,aAAa;gBACnB,KAAK,EAAE,IAAI;aACZ;YACD,gBAAgB,EAAE,IAAI;YACtB,YAAY,EAAE,KAAK;SACpB;KACF,CAAC;AACJ,CAAC,CAAC;AAzDW,QAAA,aAAa,iBAyDxB;AAEF,0EAA0E;AAC7D,QAAA,oBAAoB,GAAG,IAAI,GAAG,EAAU,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\config\\bull.config.ts"],"sourcesContent":["import { ConfigService } from '@nestjs/config';\nimport { BullModuleOptions } from '@nestjs/bull';\nimport { Logger } from '@nestjs/common';\n\n/**\n * Configuração centralizada do Bull para evitar duplicação de processadores\n */\nexport const getBullConfig = (\n  configService: ConfigService,\n): BullModuleOptions => {\n  const logger = new Logger('BullConfig');\n\n  // Verificar se o Redis deve ser desabilitado (útil para desenvolvimento)\n  const disableRedis = configService.get('DISABLE_REDIS') === 'true';\n\n  if (disableRedis) {\n    logger.warn('Redis desabilitado por configuração. Filas não funcionarão.');\n    // Retornar configuração mínima que não tentará conectar ao Redis\n    return {\n      redis: {\n        maxRetriesPerRequest: 0,\n        enableReadyCheck: false,\n        connectTimeout: 1,\n        retryStrategy: () => null, // Não tentar reconectar\n      },\n      defaultJobOptions: {\n        attempts: 1,\n        removeOnComplete: true,\n        removeOnFail: true,\n      },\n    };\n  }\n\n  return {\n    redis: {\n      host: configService.get('REDIS_HOST', 'localhost'),\n      port: parseInt(configService.get('REDIS_PORT', '6379')),\n      password: configService.get('REDIS_PASSWORD', ''),\n      // Opções de conexão mais resilientes\n      maxRetriesPerRequest: 2,\n      enableReadyCheck: false,\n      connectTimeout: 5000,\n      // Estratégia de reconexão mais inteligente\n      retryStrategy: (times: number) => {\n        if (times > 3) {\n          // Após 3 tentativas, esperar mais tempo entre tentativas\n          logger.warn(\n            `Falha ao conectar ao Redis após ${times} tentativas. Nova tentativa em 10s.`,\n          );\n          return 10000; // 10 segundos\n        }\n        return Math.min(times * 1000, 3000); // Espera crescente até 3 segundos\n      },\n    },\n    defaultJobOptions: {\n      attempts: 3,\n      backoff: {\n        type: 'exponential',\n        delay: 1000,\n      },\n      removeOnComplete: true,\n      removeOnFail: false,\n    },\n  };\n};\n\n// Variável global para controlar quais processadores já foram registrados\nexport const registeredProcessors = new Set<string>();\n"],"version":3}