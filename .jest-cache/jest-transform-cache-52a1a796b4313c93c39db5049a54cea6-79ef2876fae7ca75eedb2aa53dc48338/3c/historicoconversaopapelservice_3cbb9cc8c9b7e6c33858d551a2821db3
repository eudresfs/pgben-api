9cfbabf8d2c4fa5b3441d42ab5a27f1b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var HistoricoConversaoPapelService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HistoricoConversaoPapelService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const historico_conversao_papel_entity_1 = require("../../../entities/historico-conversao-papel.entity");
const notificacao_service_1 = require("../../notificacao/services/notificacao.service");
/**
 * Serviço de Histórico de Conversão de Papel
 *
 * Responsável por registrar e consultar o histórico de conversões de papéis
 * dos cidadãos no sistema.
 */
let HistoricoConversaoPapelService = HistoricoConversaoPapelService_1 = class HistoricoConversaoPapelService {
    historicoRepository;
    notificacaoService;
    logger = new common_1.Logger(HistoricoConversaoPapelService_1.name);
    constructor(historicoRepository, notificacaoService) {
        this.historicoRepository = historicoRepository;
        this.notificacaoService = notificacaoService;
    }
    /**
     * Cria um novo registro de histórico de conversão de papel
     * @param createHistoricoDto Dados do histórico a ser criado
     * @param usuarioId ID do usuário que está realizando a conversão
     * @returns Histórico criado
     */
    async create(createHistoricoDto, usuarioId) {
        try {
            // Criar o registro de histórico
            const novoHistorico = this.historicoRepository.create({
                ...createHistoricoDto,
                usuario_id: usuarioId,
                notificacao_enviada: false,
            });
            // Salvar o registro
            const historicoSalvo = await this.historicoRepository.save(novoHistorico);
            // Enviar notificação para o técnico responsável, se fornecido
            if (createHistoricoDto.tecnico_notificado_id) {
                try {
                    await this.notificacaoService.enviarNotificacao({
                        destinatario_id: createHistoricoDto.tecnico_notificado_id,
                        tipo: 'CONVERSAO_PAPEL',
                        titulo: 'Conversão de Papel de Cidadão',
                        conteudo: `Um cidadão foi convertido de ${createHistoricoDto.papel_anterior} para ${createHistoricoDto.papel_novo}. Justificativa: ${createHistoricoDto.justificativa}`,
                        dados: {
                            historico_id: historicoSalvo.id,
                            cidadao_id: createHistoricoDto.cidadao_id,
                            papel_anterior: createHistoricoDto.papel_anterior,
                            papel_novo: createHistoricoDto.papel_novo,
                        },
                    });
                    // Atualizar o registro para indicar que a notificação foi enviada
                    await this.historicoRepository.update(historicoSalvo.id, {
                        notificacao_enviada: true,
                    });
                }
                catch (error) {
                    this.logger.error(`Erro ao enviar notificação de conversão de papel: ${error.message}`, error.stack);
                    // Não interromper o fluxo se a notificação falhar
                }
            }
            return historicoSalvo;
        }
        catch (error) {
            this.logger.error(`Erro ao criar histórico de conversão de papel: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao criar histórico de conversão de papel');
        }
    }
    /**
     * Busca o histórico de conversões de papel de um cidadão
     * @param cidadaoId ID do cidadão
     * @returns Lista de registros de histórico
     */
    async findByCidadaoId(cidadaoId) {
        try {
            return this.historicoRepository.find({
                where: { cidadao_id: cidadaoId },
                order: { created_at: 'DESC' },
            });
        }
        catch (error) {
            this.logger.error(`Erro ao buscar histórico de conversão de papel: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar histórico de conversão de papel');
        }
    }
    /**
     * Busca um registro de histórico pelo ID
     * @param id ID do registro
     * @returns Registro de histórico
     * @throws NotFoundException se o registro não for encontrado
     */
    async findById(id) {
        try {
            const historico = await this.historicoRepository.findOne({
                where: { id },
            });
            if (!historico) {
                throw new common_1.NotFoundException('Histórico de conversão não encontrado');
            }
            return historico;
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao buscar histórico de conversão: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar histórico de conversão');
        }
    }
    /**
     * Cria um novo registro de histórico de conversão de papel (alias para o método create)
     * @param createHistoricoDto Dados do histórico a ser criado
     * @param usuarioId ID do usuário que está realizando a conversão
     * @returns Histórico criado
     */
    async criarHistorico(createHistoricoDto, usuarioId) {
        return this.create(createHistoricoDto, usuarioId);
    }
    /**
     * Busca o histórico de conversões de papel por período
     * @param dataInicio Data de início do período
     * @param dataFim Data de fim do período
     * @param options Opções adicionais de filtro
     * @returns Lista de registros de histórico
     */
    async findByPeriodo(dataInicio, dataFim, options) {
        try {
            const { cidadaoId, papelAnterior, papelNovo, page = 1, limit = 10 } = options || {};
            const skip = (page - 1) * limit;
            // Construir a query base
            const queryBuilder = this.historicoRepository.createQueryBuilder('historico')
                .where('historico.created_at BETWEEN :dataInicio AND :dataFim', {
                dataInicio,
                dataFim,
            })
                .orderBy('historico.created_at', 'DESC');
            // Adicionar filtros opcionais
            if (cidadaoId) {
                queryBuilder.andWhere('historico.cidadao_id = :cidadaoId', { cidadaoId });
            }
            if (papelAnterior) {
                queryBuilder.andWhere('historico.papel_anterior = :papelAnterior', { papelAnterior });
            }
            if (papelNovo) {
                queryBuilder.andWhere('historico.papel_novo = :papelNovo', { papelNovo });
            }
            // Executar a query com paginação
            const [items, total] = await queryBuilder
                .skip(skip)
                .take(limit)
                .getManyAndCount();
            return { items, total };
        }
        catch (error) {
            this.logger.error(`Erro ao buscar histórico de conversão por período: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar histórico de conversão por período');
        }
    }
};
exports.HistoricoConversaoPapelService = HistoricoConversaoPapelService;
exports.HistoricoConversaoPapelService = HistoricoConversaoPapelService = HistoricoConversaoPapelService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(historico_conversao_papel_entity_1.HistoricoConversaoPapel)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof notificacao_service_1.NotificacaoService !== "undefined" && notificacao_service_1.NotificacaoService) === "function" ? _b : Object])
], HistoricoConversaoPapelService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,