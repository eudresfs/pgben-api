{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador-token.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador-token.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { JwtService } from '@nestjs/jwt';\nimport {\n  BadRequestException,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { IntegradorToken, TokenRevogado } from '../../../entities';\nimport { IntegradorTokenService } from '../services/integrador-token.service';\nimport { IntegradorService } from '../services/integrador.service';\nimport { CreateTokenDto } from '../dto/create-token.dto';\n\n/**\n * Testes unitários para o serviço de tokens de integradores.\n * Valida a geração, validação e revogação de tokens, além das verificações\n * de permissões e restrições de IP.\n */\ndescribe('IntegradorTokenService', () => {\n  let service: IntegradorTokenService;\n  let integradorService: IntegradorService;\n  let jwtService: JwtService;\n  let tokenRepository: any;\n  let tokenRevogadoRepository: any;\n\n  // Mocks de repositórios e serviços\n  const mockTokenRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    remove: jest.fn(),\n  };\n\n  const mockTokenRevogadoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    delete: jest.fn(),\n    createQueryBuilder: jest.fn().mockReturnThis(),\n    delete: jest.fn().mockReturnThis(),\n    from: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n    execute: jest.fn(),\n  };\n\n  const mockIntegradorService = {\n    findById: jest.fn(),\n    registrarAcesso: jest.fn(),\n  };\n\n  const mockJwtService = {\n    sign: jest.fn(),\n    verify: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        IntegradorTokenService,\n        {\n          provide: getRepositoryToken(IntegradorToken),\n          useValue: mockTokenRepository,\n        },\n        {\n          provide: getRepositoryToken(TokenRevogado),\n          useValue: mockTokenRevogadoRepository,\n        },\n        {\n          provide: IntegradorService,\n          useValue: mockIntegradorService,\n        },\n        {\n          provide: JwtService,\n          useValue: mockJwtService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<IntegradorTokenService>(IntegradorTokenService);\n    integradorService = module.get<IntegradorService>(IntegradorService);\n    jwtService = module.get<JwtService>(JwtService);\n    tokenRepository = module.get(getRepositoryToken(IntegradorToken));\n    tokenRevogadoRepository = module.get(getRepositoryToken(TokenRevogado));\n\n    // Mock da função crypto.createHash que é usada no serviço\n    jest.spyOn(global.crypto, 'createHash').mockReturnValue({\n      update: jest.fn().mockReturnThis(),\n      digest: jest.fn().mockReturnValue('token-hash'),\n    } as any);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('createToken', () => {\n    it('deve criar um token com sucesso', async () => {\n      // Arrange\n      const integradorId = 'integrador-id';\n      const createTokenDto: CreateTokenDto = {\n        nome: 'Token Teste',\n        descricao: 'Token para testes',\n        escopos: ['read:dados_basicos', 'write:solicitacoes'],\n        diasValidade: 30,\n        semExpiracao: false,\n      };\n\n      const integrador = {\n        id: integradorId,\n        nome: 'Integrador Teste',\n        ativo: true,\n        permissoesEscopo: [\n          'read:dados_basicos',\n          'write:solicitacoes',\n          'read:cidadaos',\n        ],\n      };\n\n      const tokenEntity = {\n        id: 'token-id',\n        integradorId,\n        nome: createTokenDto.nome,\n        descricao: createTokenDto.descricao,\n        tokenHash: 'token-hash',\n        escopos: createTokenDto.escopos,\n        dataExpiracao: expect.any(Date),\n        dataCriacao: new Date(),\n      };\n\n      const jwtToken = 'jwt-token-string';\n\n      mockIntegradorService.findById.mockResolvedValue(integrador);\n      mockTokenRepository.create.mockReturnValue(tokenEntity);\n      mockTokenRepository.save.mockResolvedValue(tokenEntity);\n      mockJwtService.sign.mockReturnValue(jwtToken);\n\n      // Act\n      const result = await service.createToken(integradorId, createTokenDto);\n\n      // Assert\n      expect(mockIntegradorService.findById).toHaveBeenCalledWith(integradorId);\n      expect(mockJwtService.sign).toHaveBeenCalledWith(\n        {\n          sub: `integrador:${integradorId}`,\n          name: integrador.nome,\n          type: 'api_token',\n          scopes: createTokenDto.escopos,\n        },\n        { expiresIn: '30d' },\n      );\n      expect(mockTokenRepository.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          integradorId,\n          nome: createTokenDto.nome,\n          descricao: createTokenDto.descricao,\n          tokenHash: expect.any(String),\n          escopos: createTokenDto.escopos,\n          dataExpiracao: expect.any(Date),\n        }),\n      );\n      expect(mockTokenRepository.save).toHaveBeenCalled();\n      expect(result).toEqual({\n        token: jwtToken,\n        tokenInfo: expect.any(Object),\n      });\n    });\n\n    it('deve criar um token sem expiração quando semExpiracao=true', async () => {\n      // Arrange\n      const integradorId = 'integrador-id';\n      const createTokenDto: CreateTokenDto = {\n        nome: 'Token Permanente',\n        descricao: 'Token sem expiração',\n        escopos: ['read:dados_basicos'],\n        semExpiracao: true,\n      };\n\n      const integrador = {\n        id: integradorId,\n        nome: 'Integrador Teste',\n        ativo: true,\n        permissoesEscopo: [\n          'read:dados_basicos',\n          'write:solicitacoes',\n          'read:cidadaos',\n        ],\n      };\n\n      const tokenEntity = {\n        id: 'token-id',\n        integradorId,\n        nome: createTokenDto.nome,\n        descricao: createTokenDto.descricao,\n        tokenHash: 'token-hash',\n        escopos: createTokenDto.escopos,\n        dataExpiracao: null, // Sem expiração\n        dataCriacao: new Date(),\n      };\n\n      mockIntegradorService.findById.mockResolvedValue(integrador);\n      mockTokenRepository.create.mockReturnValue(tokenEntity);\n      mockTokenRepository.save.mockResolvedValue(tokenEntity);\n      mockJwtService.sign.mockReturnValue('jwt-token-string');\n\n      // Act\n      const result = await service.createToken(integradorId, createTokenDto);\n\n      // Assert\n      expect(mockJwtService.sign).toHaveBeenCalledWith(\n        expect.any(Object),\n        {}, // Sem opções de expiração\n      );\n      expect(mockTokenRepository.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          dataExpiracao: null, // Confirma que token não tem expiração\n        }),\n      );\n      expect(result.tokenInfo.dataExpiracao).toBeNull();\n    });\n\n    it('deve lançar BadRequestException quando integrador está inativo', async () => {\n      // Arrange\n      const integradorId = 'integrador-id';\n      const createTokenDto: CreateTokenDto = {\n        nome: 'Token Teste',\n        escopos: ['read:dados_basicos'],\n      };\n\n      const integrador = {\n        id: integradorId,\n        nome: 'Integrador Inativo',\n        ativo: false,\n      };\n\n      mockIntegradorService.findById.mockResolvedValue(integrador);\n\n      // Act & Assert\n      await expect(\n        service.createToken(integradorId, createTokenDto),\n      ).rejects.toThrow(BadRequestException);\n      expect(mockIntegradorService.findById).toHaveBeenCalledWith(integradorId);\n      expect(mockTokenRepository.create).not.toHaveBeenCalled();\n      expect(mockTokenRepository.save).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar BadRequestException quando escopo solicitado não é permitido', async () => {\n      // Arrange\n      const integradorId = 'integrador-id';\n      const createTokenDto: CreateTokenDto = {\n        nome: 'Token Teste',\n        escopos: ['read:dados_basicos', 'admin:sistema'], // escopo não permitido\n      };\n\n      const integrador = {\n        id: integradorId,\n        nome: 'Integrador Teste',\n        ativo: true,\n        permissoesEscopo: ['read:dados_basicos', 'write:solicitacoes'],\n      };\n\n      mockIntegradorService.findById.mockResolvedValue(integrador);\n\n      // Act & Assert\n      await expect(\n        service.createToken(integradorId, createTokenDto),\n      ).rejects.toThrow(BadRequestException);\n      expect(mockIntegradorService.findById).toHaveBeenCalledWith(integradorId);\n      expect(mockTokenRepository.create).not.toHaveBeenCalled();\n      expect(mockTokenRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('findAllByIntegrador', () => {\n    it('deve retornar todos os tokens de um integrador', async () => {\n      // Arrange\n      const integradorId = 'integrador-id';\n      const tokens = [\n        {\n          id: 'token-1',\n          integradorId,\n          nome: 'Token 1',\n          dataCriacao: new Date(),\n        },\n        {\n          id: 'token-2',\n          integradorId,\n          nome: 'Token 2',\n          dataCriacao: new Date(),\n        },\n      ];\n\n      mockIntegradorService.findById.mockResolvedValue({ id: integradorId });\n      mockTokenRepository.find.mockResolvedValue(tokens);\n\n      // Act\n      const result = await service.findAllByIntegrador(integradorId);\n\n      // Assert\n      expect(mockIntegradorService.findById).toHaveBeenCalledWith(integradorId);\n      expect(mockTokenRepository.find).toHaveBeenCalledWith({\n        where: { integradorId },\n        order: { dataCriacao: 'DESC' },\n      });\n      expect(result).toHaveLength(2);\n      expect(result[0].id).toEqual(tokens[0].id);\n      expect(result[1].id).toEqual(tokens[1].id);\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar um token específico pelo ID', async () => {\n      // Arrange\n      const tokenId = 'token-id';\n      const token = {\n        id: tokenId,\n        integradorId: 'integrador-id',\n        nome: 'Token Teste',\n        dataCriacao: new Date(),\n      };\n\n      mockTokenRepository.findOne.mockResolvedValue(token);\n\n      // Act\n      const result = await service.findOne(tokenId);\n\n      // Assert\n      expect(mockTokenRepository.findOne).toHaveBeenCalledWith({\n        where: { id: tokenId },\n      });\n      expect(result).toBeDefined();\n      expect(result.id).toEqual(tokenId);\n    });\n\n    it('deve lançar NotFoundException quando token não existe', async () => {\n      // Arrange\n      const tokenId = 'token-inexistente';\n      mockTokenRepository.findOne.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(service.findOne(tokenId)).rejects.toThrow(NotFoundException);\n      expect(mockTokenRepository.findOne).toHaveBeenCalledWith({\n        where: { id: tokenId },\n      });\n    });\n  });\n\n  describe('revogarToken', () => {\n    it('deve revogar um token com sucesso', async () => {\n      // Arrange\n      const tokenId = 'token-id';\n      const motivo = 'Teste de revogação';\n\n      const token = {\n        id: tokenId,\n        integradorId: 'integrador-id',\n        nome: 'Token para Revogar',\n        tokenHash: 'token-hash',\n        revogado: false,\n        dataExpiracao: new Date(Date.now() + 1000 * 60 * 60 * 24 * 30), // 30 dias no futuro\n      };\n\n      const tokenRevogado = {\n        ...token,\n        revogado: true,\n        dataRevogacao: expect.any(Date),\n        motivoRevogacao: motivo,\n      };\n\n      mockTokenRepository.findOne.mockResolvedValue(token);\n      mockTokenRepository.save.mockResolvedValue(tokenRevogado);\n      mockTokenRevogadoRepository.create.mockReturnValue({\n        tokenHash: token.tokenHash,\n        integradorId: token.integradorId,\n        motivoRevogacao: motivo,\n        dataExpiracao: token.dataExpiracao,\n        dataLimpeza: expect.any(Date),\n      });\n      mockTokenRevogadoRepository.save.mockResolvedValue({});\n\n      // Act\n      const result = await service.revogarToken(tokenId, motivo);\n\n      // Assert\n      expect(mockTokenRepository.findOne).toHaveBeenCalledWith({\n        where: { id: tokenId },\n      });\n      expect(mockTokenRepository.save).toHaveBeenCalledWith(\n        expect.objectContaining({\n          id: tokenId,\n          revogado: true,\n          dataRevogacao: expect.any(Date),\n          motivoRevogacao: motivo,\n        }),\n      );\n      expect(mockTokenRevogadoRepository.create).toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.save).toHaveBeenCalled();\n      expect(result.revogado).toBe(true);\n      expect(result.motivoRevogacao).toEqual(motivo);\n    });\n\n    it('deve lançar BadRequestException ao tentar revogar um token já revogado', async () => {\n      // Arrange\n      const tokenId = 'token-id';\n      const motivo = 'Teste de revogação';\n\n      const token = {\n        id: tokenId,\n        nome: 'Token já Revogado',\n        revogado: true,\n        dataRevogacao: new Date(Date.now() - 1000 * 60 * 60), // 1 hora atrás\n        motivoRevogacao: 'Revogado anteriormente',\n      };\n\n      mockTokenRepository.findOne.mockResolvedValue(token);\n\n      // Act & Assert\n      await expect(service.revogarToken(tokenId, motivo)).rejects.toThrow(\n        BadRequestException,\n      );\n      expect(mockTokenRepository.findOne).toHaveBeenCalledWith({\n        where: { id: tokenId },\n      });\n      expect(mockTokenRepository.save).not.toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.create).not.toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.save).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar NotFoundException ao tentar revogar um token inexistente', async () => {\n      // Arrange\n      const tokenId = 'token-inexistente';\n      const motivo = 'Teste de revogação';\n\n      mockTokenRepository.findOne.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(service.revogarToken(tokenId, motivo)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockTokenRepository.findOne).toHaveBeenCalledWith({\n        where: { id: tokenId },\n      });\n      expect(mockTokenRepository.save).not.toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.create).not.toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('validateToken', () => {\n    it('deve validar um token válido com sucesso', async () => {\n      // Arrange\n      const token = 'valid-jwt-token';\n      const tokenHash = 'token-hash';\n      const integradorId = 'integrador-id';\n\n      const jwtPayload = {\n        sub: `integrador:${integradorId}`,\n        name: 'Integrador Teste',\n        type: 'api_token',\n        scopes: ['read:dados_basicos'],\n      };\n\n      const integrador = {\n        id: integradorId,\n        nome: 'Integrador Teste',\n        ativo: true,\n      };\n\n      const tokenInfo = {\n        id: 'token-id',\n        integradorId,\n        tokenHash,\n        ultimoUso: null,\n      };\n\n      mockJwtService.verify.mockReturnValue(jwtPayload);\n      mockTokenRevogadoRepository.findOne.mockResolvedValue(null); // Não está revogado\n      mockIntegradorService.findById.mockResolvedValue(integrador);\n      mockTokenRepository.findOne.mockResolvedValue(tokenInfo);\n\n      // Act\n      const result = await service.validateToken(token);\n\n      // Assert\n      expect(mockJwtService.verify).toHaveBeenCalledWith(token);\n      expect(mockTokenRevogadoRepository.findOne).toHaveBeenCalledWith({\n        where: { tokenHash },\n      });\n      expect(mockIntegradorService.findById).toHaveBeenCalledWith(integradorId);\n      expect(mockIntegradorService.registrarAcesso).toHaveBeenCalledWith(\n        integradorId,\n      );\n      expect(mockTokenRepository.findOne).toHaveBeenCalledWith({\n        where: { tokenHash },\n      });\n      expect(mockTokenRepository.save).toHaveBeenCalledWith(\n        expect.objectContaining({\n          id: tokenInfo.id,\n          ultimoUso: expect.any(Date),\n        }),\n      );\n      expect(result).toEqual({\n        ...jwtPayload,\n        integrador,\n      });\n    });\n\n    it('deve lançar UnauthorizedException quando token está revogado', async () => {\n      // Arrange\n      const token = 'revoked-jwt-token';\n      const tokenHash = 'token-hash';\n      const integradorId = 'integrador-id';\n\n      const jwtPayload = {\n        sub: `integrador:${integradorId}`,\n        name: 'Integrador Teste',\n        type: 'api_token',\n      };\n\n      mockJwtService.verify.mockReturnValue(jwtPayload);\n      mockTokenRevogadoRepository.findOne.mockResolvedValue({\n        id: 'revoked-id',\n        tokenHash,\n      }); // Token revogado\n\n      // Act & Assert\n      await expect(service.validateToken(token)).rejects.toThrow(\n        UnauthorizedException,\n      );\n      expect(mockJwtService.verify).toHaveBeenCalledWith(token);\n      expect(mockTokenRevogadoRepository.findOne).toHaveBeenCalledWith({\n        where: { tokenHash },\n      });\n      expect(mockIntegradorService.findById).not.toHaveBeenCalled();\n      expect(mockIntegradorService.registrarAcesso).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar UnauthorizedException quando integrador está inativo', async () => {\n      // Arrange\n      const token = 'valid-jwt-token';\n      const tokenHash = 'token-hash';\n      const integradorId = 'integrador-id';\n\n      const jwtPayload = {\n        sub: `integrador:${integradorId}`,\n        name: 'Integrador Inativo',\n        type: 'api_token',\n      };\n\n      const integrador = {\n        id: integradorId,\n        nome: 'Integrador Inativo',\n        ativo: false, // Integrador inativo\n      };\n\n      mockJwtService.verify.mockReturnValue(jwtPayload);\n      mockTokenRevogadoRepository.findOne.mockResolvedValue(null); // Não está revogado\n      mockIntegradorService.findById.mockResolvedValue(integrador);\n\n      // Act & Assert\n      await expect(service.validateToken(token)).rejects.toThrow(\n        UnauthorizedException,\n      );\n      expect(mockJwtService.verify).toHaveBeenCalledWith(token);\n      expect(mockTokenRevogadoRepository.findOne).toHaveBeenCalledWith({\n        where: { tokenHash },\n      });\n      expect(mockIntegradorService.findById).toHaveBeenCalledWith(integradorId);\n      expect(mockIntegradorService.registrarAcesso).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar UnauthorizedException quando type do token não é api_token', async () => {\n      // Arrange\n      const token = 'wrong-type-token';\n\n      const jwtPayload = {\n        sub: 'user:123',\n        name: 'Usuário',\n        type: 'user_token', // Tipo incorreto\n      };\n\n      mockJwtService.verify.mockReturnValue(jwtPayload);\n\n      // Act & Assert\n      await expect(service.validateToken(token)).rejects.toThrow(\n        UnauthorizedException,\n      );\n      expect(mockJwtService.verify).toHaveBeenCalledWith(token);\n      expect(mockTokenRevogadoRepository.findOne).not.toHaveBeenCalled();\n      expect(mockIntegradorService.findById).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('hasRequiredScopes', () => {\n    it('deve retornar true quando token tem todos os escopos necessários', () => {\n      // Arrange\n      const payload = {\n        scopes: ['read:dados_basicos', 'write:solicitacoes', 'read:cidadaos'],\n      };\n      const requiredScopes = ['read:dados_basicos', 'write:solicitacoes'];\n\n      // Act\n      const result = service.hasRequiredScopes(payload, requiredScopes);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando token não tem todos os escopos necessários', () => {\n      // Arrange\n      const payload = {\n        scopes: ['read:dados_basicos'],\n      };\n      const requiredScopes = ['read:dados_basicos', 'write:solicitacoes'];\n\n      // Act\n      const result = service.hasRequiredScopes(payload, requiredScopes);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('deve retornar true quando não há escopos requeridos', () => {\n      // Arrange\n      const payload = {\n        scopes: ['read:dados_basicos'],\n      };\n      const requiredScopes = [];\n\n      // Act\n      const result = service.hasRequiredScopes(payload, requiredScopes);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando payload não tem escopos', () => {\n      // Arrange\n      const payload = {};\n      const requiredScopes = ['read:dados_basicos'];\n\n      // Act\n      const result = service.hasRequiredScopes(payload, requiredScopes);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isIpAllowed', () => {\n    it('deve retornar true quando IP está na lista de permitidos', () => {\n      // Arrange\n      const integrador = {\n        ipPermitidos: ['192.168.1.1', '10.0.0.1', '172.16.0.1'],\n      };\n      const ipAddress = '192.168.1.1';\n\n      // Act\n      const result = service.isIpAllowed(integrador, ipAddress);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar false quando IP não está na lista de permitidos', () => {\n      // Arrange\n      const integrador = {\n        ipPermitidos: ['192.168.1.1', '10.0.0.1'],\n      };\n      const ipAddress = '172.16.0.1';\n\n      // Act\n      const result = service.isIpAllowed(integrador, ipAddress);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('deve retornar true quando não há lista de IPs permitidos', () => {\n      // Arrange\n      const integrador = {\n        ipPermitidos: [],\n      };\n      const ipAddress = '192.168.1.1';\n\n      // Act\n      const result = service.isIpAllowed(integrador, ipAddress);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('deve retornar true quando a propriedade ipPermitidos não existe', () => {\n      // Arrange\n      const integrador = {};\n      const ipAddress = '192.168.1.1';\n\n      // Act\n      const result = service.isIpAllowed(integrador, ipAddress);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('limparTokensRevogadosExpirados', () => {\n    it('deve remover tokens revogados expirados', async () => {\n      // Arrange\n      mockTokenRevogadoRepository.execute.mockResolvedValue({ affected: 5 });\n\n      // Act\n      const result = await service.limparTokensRevogadosExpirados();\n\n      // Assert\n      expect(mockTokenRevogadoRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.delete).toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.from).toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.where).toHaveBeenCalled();\n      expect(mockTokenRevogadoRepository.execute).toHaveBeenCalled();\n      expect(result).toBe(5);\n    });\n\n    it('deve retornar 0 quando nenhum token for removido', async () => {\n      // Arrange\n      mockTokenRevogadoRepository.execute.mockResolvedValue({ affected: 0 });\n\n      // Act\n      const result = await service.limparTokensRevogadosExpirados();\n\n      // Assert\n      expect(mockTokenRevogadoRepository.execute).toHaveBeenCalled();\n      expect(result).toBe(0);\n    });\n  });\n});\n"],"version":3}