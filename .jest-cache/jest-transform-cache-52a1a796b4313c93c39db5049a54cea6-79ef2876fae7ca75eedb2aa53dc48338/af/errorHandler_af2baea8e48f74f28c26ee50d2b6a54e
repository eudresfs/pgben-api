bbb87b19573d36d3a74c74f9c383d240
"use strict";
/**
 * Middleware de tratamento de erros integrado ao catálogo
 *
 * Estende o filtro de exceções existente para suportar
 * o novo sistema de catálogo de erros, mantendo
 * compatibilidade com o sistema atual.
 *
 * @see docs/ADRs/catalogo-erros.md
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CatalogAwareExceptionFilter_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CatalogAwareExceptionFilter = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const constants_1 = require("../../constants");
const util_1 = require("../../request-context/util");
const base_api_exception_1 = require("../base-api.exception");
const unified_logger_service_1 = require("../../logging/unified-logger.service");
const AppError_1 = require("./AppError");
const catalog_1 = require("./catalog");
/**
 * Filtro de exceções aprimorado com suporte ao catálogo de erros
 *
 * Mantém compatibilidade total com o sistema existente enquanto
 * adiciona suporte completo para o novo catálogo de erros.
 */
let CatalogAwareExceptionFilter = CatalogAwareExceptionFilter_1 = class CatalogAwareExceptionFilter {
    config;
    logger;
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.logger.setContext(CatalogAwareExceptionFilter_1.name);
    }
    catch(exception, host) {
        const ctx = host.switchToHttp();
        const req = ctx.getRequest();
        const res = ctx.getResponse();
        const path = req.url;
        const timestamp = new Date().toISOString();
        const requestId = req.headers[constants_1.REQUEST_ID_TOKEN_HEADER];
        const requestContext = (0, util_1.createRequestContext)(req);
        // Extrair idioma do header para localização (padrão: pt-BR)
        const acceptedLanguage = req.headers['accept-language']?.split(',')[0] || 'pt-BR';
        let stack;
        let statusCode;
        let errorName;
        let message;
        let details;
        let localizedMessage;
        let validationErrors;
        let errorCode;
        let category;
        let severity;
        let legalReference;
        // Tratamento estruturado por tipo de exceção
        switch (true) {
            case exception instanceof AppError_1.AppError:
                // Novo sistema de catálogo de erros
                const appError = exception;
                statusCode = appError.getStatus();
                errorName = appError.constructor.name;
                errorCode = appError.errorCode;
                message = appError.message;
                localizedMessage = appError.localizedMessage;
                category = appError.definition.category;
                severity = appError.definition.severity;
                legalReference = appError.definition.legalReference;
                details = appError.getApiResponse(this.shouldIncludeDetails());
                // Log estruturado específico para AppError
                this.logAppError(appError, requestContext, requestId);
                break;
            case exception instanceof base_api_exception_1.BaseApiException:
                // Sistema existente de exceções customizadas
                statusCode = exception.getStatus();
                errorName = exception.constructor.name;
                message = exception.message;
                localizedMessage = exception.localizedMessage?.[acceptedLanguage];
                details = exception.details || exception.getResponse();
                break;
            case exception instanceof common_1.BadRequestException:
                // Tratamento de erros de validação
                statusCode = exception.getStatus();
                errorName = exception.constructor.name;
                const response = exception.getResponse();
                if (response?.message && Array.isArray(response.message)) {
                    validationErrors = this.processValidationErrors(response.message);
                    message = 'Erro de validação';
                    details = { validationErrors };
                }
                else {
                    message = response?.message || exception.message;
                    details = response;
                }
                break;
            case exception instanceof common_1.HttpException:
                // Outras exceções HTTP do NestJS
                statusCode = exception.getStatus();
                errorName = exception.constructor.name;
                message = exception.message;
                details = exception.getResponse();
                break;
            case exception instanceof Error:
                // Erros genéricos do JavaScript
                statusCode = common_1.HttpStatus.INTERNAL_SERVER_ERROR;
                errorName = exception.constructor.name;
                message = exception.message;
                stack = exception.stack;
                // Tentar mapear para erro do catálogo se possível
                if (this.isDatabaseError(exception)) {
                    const mappedError = this.tryMapDatabaseError(exception, acceptedLanguage);
                    if (mappedError) {
                        statusCode = mappedError.getStatus();
                        errorCode = mappedError.errorCode;
                        message = mappedError.message;
                        localizedMessage = mappedError.localizedMessage;
                        category = mappedError.definition.category;
                        severity = mappedError.definition.severity;
                        details = mappedError.getApiResponse(this.shouldIncludeDetails());
                    }
                }
                break;
            default:
                // Erro desconhecido
                statusCode = common_1.HttpStatus.INTERNAL_SERVER_ERROR;
                errorName = 'UnknownException';
                message = 'Erro interno do servidor';
                break;
        }
        // Criar resposta de erro padronizada
        const errorResponse = {
            statusCode,
            message: localizedMessage || message,
            code: errorCode || errorName,
            details,
            errors: validationErrors,
            timestamp,
            path,
        };
        // Adicionar informações do catálogo se disponíveis
        if (category) {
            errorResponse.category = category;
        }
        if (severity) {
            errorResponse.severity = severity;
        }
        if (legalReference) {
            errorResponse.legalReference = legalReference;
        }
        // Log estruturado do erro (se não foi logado como AppError)
        if (!(exception instanceof AppError_1.AppError)) {
            const logLevel = this.getLogLevel(statusCode, severity);
            const logMessage = `${errorName}: ${message}`;
            const logMeta = {
                statusCode,
                errorName,
                errorCode,
                category,
                severity,
                path,
                requestId,
                userAgent: req.headers['user-agent'],
                ip: req.ip,
                method: req.method,
                stack: stack && this.config.get('NODE_ENV') === 'development'
                    ? stack
                    : undefined,
            };
            if (logLevel === 'error') {
                this.logger.error(requestContext, logMessage, logMeta);
            }
            else {
                this.logger.warn(requestContext, logMessage, logMeta);
            }
        }
        // Proteger dados sensíveis em produção
        const isProduction = this.config.get('NODE_ENV') === 'production';
        if (isProduction && statusCode === common_1.HttpStatus.INTERNAL_SERVER_ERROR) {
            errorResponse.message = 'Erro interno do servidor';
            if (!errorCode) {
                errorResponse.details = undefined;
            }
        }
        res.status(statusCode).json(errorResponse);
    }
    /**
     * Log específico para erros do catálogo
     */
    logAppError(appError, requestContext, requestId) {
        const logData = appError.getLogData();
        const logLevel = this.getLogLevel(appError.getStatus(), appError.definition.severity);
        const logMessage = `[${appError.errorCode}] ${appError.message}`;
        const logMeta = {
            ...logData,
            requestId,
            path: requestContext.path,
            method: requestContext.method,
            userAgent: requestContext.userAgent,
            ip: requestContext.ip,
        };
        if (logLevel === 'error') {
            this.logger.error(requestContext, logMessage, logMeta);
        }
        else {
            this.logger.warn(requestContext, logMessage, logMeta);
        }
        // Log adicional para erros críticos
        if (appError.isCritical()) {
            this.logger.error(requestContext, `CRITICAL ERROR: ${logMessage}`, {
                ...logMeta,
                alert: true,
                criticalError: true,
            });
        }
    }
    /**
     * Determina o nível de log baseado no status HTTP e severidade
     */
    getLogLevel(statusCode, severity) {
        if (severity === catalog_1.ErrorSeverity.CRITICAL ||
            severity === catalog_1.ErrorSeverity.HIGH) {
            return 'error';
        }
        return statusCode >= 500 ? 'error' : 'warn';
    }
    /**
     * Verifica se deve incluir detalhes na resposta
     */
    shouldIncludeDetails() {
        return this.config.get('NODE_ENV') !== 'production';
    }
    /**
     * Verifica se o erro é relacionado ao banco de dados
     */
    isDatabaseError(error) {
        const dbErrorIndicators = [
            'duplicate key',
            'foreign key',
            'check constraint',
            'not null',
            'violates',
            'constraint',
            'ECONNREFUSED',
            'ETIMEDOUT',
            'connection',
        ];
        const errorMessage = error.message.toLowerCase();
        return dbErrorIndicators.some((indicator) => errorMessage.includes(indicator.toLowerCase()));
    }
    /**
     * Tenta mapear erro de banco para erro do catálogo
     */
    tryMapDatabaseError(error, language) {
        try {
            // Extrair código PostgreSQL se disponível
            const postgresCodeMatch = error.message.match(/code:\s*(\d+)/);
            if (postgresCodeMatch) {
                const postgresCode = postgresCodeMatch[1];
                return AppError_1.AppError.fromPostgresError(postgresCode, {
                    cause: error,
                    metadata: {
                        originalMessage: error.message,
                    },
                }, language);
            }
            // Mapear por padrões na mensagem
            const message = error.message.toLowerCase();
            if (message.includes('duplicate key') ||
                message.includes('unique constraint')) {
                return AppError_1.AppError.fromPostgresError('23505', {
                    cause: error,
                    metadata: { originalMessage: error.message },
                }, language);
            }
            if (message.includes('foreign key') ||
                message.includes('violates foreign key')) {
                return AppError_1.AppError.fromPostgresError('23503', {
                    cause: error,
                    metadata: { originalMessage: error.message },
                }, language);
            }
            if (message.includes('check constraint')) {
                return AppError_1.AppError.fromPostgresError('23514', {
                    cause: error,
                    metadata: { originalMessage: error.message },
                }, language);
            }
            if (message.includes('not null')) {
                return AppError_1.AppError.fromPostgresError('23502', {
                    cause: error,
                    metadata: { originalMessage: error.message },
                }, language);
            }
            return null;
        }
        catch {
            return null;
        }
    }
    /**
     * Processa erros de validação do class-validator em formato estruturado
     */
    processValidationErrors(validationErrors) {
        const result = [];
        for (const error of validationErrors) {
            if (typeof error === 'string') {
                result.push({
                    field: 'unknown',
                    messages: [error],
                });
            }
            else if (error && typeof error === 'object' && 'property' in error) {
                const validationError = error;
                const messages = validationError.constraints
                    ? Object.values(validationError.constraints)
                    : ['Erro de validação'];
                result.push({
                    field: validationError.property,
                    messages,
                });
                if (validationError.children && validationError.children.length > 0) {
                    const childErrors = this.processValidationErrors(validationError.children);
                    result.push(...childErrors.map((childError) => ({
                        field: `${validationError.property}.${childError.field}`,
                        messages: childError.messages,
                    })));
                }
            }
        }
        return result;
    }
};
exports.CatalogAwareExceptionFilter = CatalogAwareExceptionFilter;
exports.CatalogAwareExceptionFilter = CatalogAwareExceptionFilter = CatalogAwareExceptionFilter_1 = __decorate([
    (0, common_1.Injectable)(),
    (0, common_1.Catch)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof unified_logger_service_1.UnifiedLoggerService !== "undefined" && unified_logger_service_1.UnifiedLoggerService) === "function" ? _b : Object])
], CatalogAwareExceptionFilter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,