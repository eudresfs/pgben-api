9ca05fa17e4ad1788d66744a2d0ac276
"use strict";
/**
 * Definição dos eventos relacionados a solicitações
 *
 * Este arquivo contém as interfaces e tipos para os eventos emitidos pelo módulo de solicitação.
 * Estes eventos são utilizados para comunicação assíncrona entre os diferentes componentes do sistema.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolicitacaoEventType = void 0;
/**
 * Tipos de eventos disponíveis no módulo de solicitação
 */
var SolicitacaoEventType;
(function (SolicitacaoEventType) {
    SolicitacaoEventType["CREATED"] = "solicitacao.created";
    SolicitacaoEventType["UPDATED"] = "solicitacao.updated";
    SolicitacaoEventType["STATUS_CHANGED"] = "solicitacao.status_changed";
    SolicitacaoEventType["DEADLINE_APPROACHING"] = "solicitacao.deadline_approaching";
    SolicitacaoEventType["DEADLINE_EXPIRED"] = "solicitacao.deadline_expired";
    SolicitacaoEventType["ASSIGNED"] = "solicitacao.assigned";
    SolicitacaoEventType["APPROVED"] = "solicitacao.approved";
    SolicitacaoEventType["REJECTED"] = "solicitacao.rejected";
    SolicitacaoEventType["RELEASED"] = "solicitacao.released";
    SolicitacaoEventType["COMPLETED"] = "solicitacao.completed";
    SolicitacaoEventType["CANCELED"] = "solicitacao.canceled";
    SolicitacaoEventType["ARCHIVED"] = "solicitacao.archived";
    SolicitacaoEventType["JUDICIAL_DETERMINATION_ATTACHED"] = "solicitacao.judicial_determination_attached";
    SolicitacaoEventType["JUDICIAL_DETERMINATION_REMOVED"] = "solicitacao.judicial_determination_removed";
    SolicitacaoEventType["PENDENCY_CREATED"] = "solicitacao.pendency_created";
    SolicitacaoEventType["PENDENCY_RESOLVED"] = "solicitacao.pendency_resolved";
})(SolicitacaoEventType || (exports.SolicitacaoEventType = SolicitacaoEventType = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHNvbGljaXRhY2FvXFxldmVudHNcXHNvbGljaXRhY2FvLWV2ZW50cy50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7OztBQUlIOztHQUVHO0FBQ0gsSUFBWSxvQkFpQlg7QUFqQkQsV0FBWSxvQkFBb0I7SUFDOUIsdURBQStCLENBQUE7SUFDL0IsdURBQStCLENBQUE7SUFDL0IscUVBQTZDLENBQUE7SUFDN0MsaUZBQXlELENBQUE7SUFDekQseUVBQWlELENBQUE7SUFDakQseURBQWlDLENBQUE7SUFDakMseURBQWlDLENBQUE7SUFDakMseURBQWlDLENBQUE7SUFDakMseURBQWlDLENBQUE7SUFDakMsMkRBQW1DLENBQUE7SUFDbkMseURBQWlDLENBQUE7SUFDakMseURBQWlDLENBQUE7SUFDakMsdUdBQStFLENBQUE7SUFDL0UscUdBQTZFLENBQUE7SUFDN0UseUVBQWlELENBQUE7SUFDakQsMkVBQW1ELENBQUE7QUFDckQsQ0FBQyxFQWpCVyxvQkFBb0Isb0NBQXBCLG9CQUFvQixRQWlCL0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHNvbGljaXRhY2FvXFxldmVudHNcXHNvbGljaXRhY2FvLWV2ZW50cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIERlZmluacOnw6NvIGRvcyBldmVudG9zIHJlbGFjaW9uYWRvcyBhIHNvbGljaXRhw6fDtWVzXG4gKlxuICogRXN0ZSBhcnF1aXZvIGNvbnTDqW0gYXMgaW50ZXJmYWNlcyBlIHRpcG9zIHBhcmEgb3MgZXZlbnRvcyBlbWl0aWRvcyBwZWxvIG3Ds2R1bG8gZGUgc29saWNpdGHDp8Ojby5cbiAqIEVzdGVzIGV2ZW50b3Mgc8OjbyB1dGlsaXphZG9zIHBhcmEgY29tdW5pY2HDp8OjbyBhc3PDrW5jcm9uYSBlbnRyZSBvcyBkaWZlcmVudGVzIGNvbXBvbmVudGVzIGRvIHNpc3RlbWEuXG4gKi9cblxuaW1wb3J0IHsgU3RhdHVzU29saWNpdGFjYW8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdGllcy9zb2xpY2l0YWNhby5lbnRpdHknO1xuXG4vKipcbiAqIFRpcG9zIGRlIGV2ZW50b3MgZGlzcG9uw612ZWlzIG5vIG3Ds2R1bG8gZGUgc29saWNpdGHDp8Ojb1xuICovXG5leHBvcnQgZW51bSBTb2xpY2l0YWNhb0V2ZW50VHlwZSB7XG4gIENSRUFURUQgPSAnc29saWNpdGFjYW8uY3JlYXRlZCcsXG4gIFVQREFURUQgPSAnc29saWNpdGFjYW8udXBkYXRlZCcsXG4gIFNUQVRVU19DSEFOR0VEID0gJ3NvbGljaXRhY2FvLnN0YXR1c19jaGFuZ2VkJyxcbiAgREVBRExJTkVfQVBQUk9BQ0hJTkcgPSAnc29saWNpdGFjYW8uZGVhZGxpbmVfYXBwcm9hY2hpbmcnLFxuICBERUFETElORV9FWFBJUkVEID0gJ3NvbGljaXRhY2FvLmRlYWRsaW5lX2V4cGlyZWQnLFxuICBBU1NJR05FRCA9ICdzb2xpY2l0YWNhby5hc3NpZ25lZCcsXG4gIEFQUFJPVkVEID0gJ3NvbGljaXRhY2FvLmFwcHJvdmVkJyxcbiAgUkVKRUNURUQgPSAnc29saWNpdGFjYW8ucmVqZWN0ZWQnLFxuICBSRUxFQVNFRCA9ICdzb2xpY2l0YWNhby5yZWxlYXNlZCcsXG4gIENPTVBMRVRFRCA9ICdzb2xpY2l0YWNhby5jb21wbGV0ZWQnLFxuICBDQU5DRUxFRCA9ICdzb2xpY2l0YWNhby5jYW5jZWxlZCcsXG4gIEFSQ0hJVkVEID0gJ3NvbGljaXRhY2FvLmFyY2hpdmVkJyxcbiAgSlVESUNJQUxfREVURVJNSU5BVElPTl9BVFRBQ0hFRCA9ICdzb2xpY2l0YWNhby5qdWRpY2lhbF9kZXRlcm1pbmF0aW9uX2F0dGFjaGVkJyxcbiAgSlVESUNJQUxfREVURVJNSU5BVElPTl9SRU1PVkVEID0gJ3NvbGljaXRhY2FvLmp1ZGljaWFsX2RldGVybWluYXRpb25fcmVtb3ZlZCcsXG4gIFBFTkRFTkNZX0NSRUFURUQgPSAnc29saWNpdGFjYW8ucGVuZGVuY3lfY3JlYXRlZCcsXG4gIFBFTkRFTkNZX1JFU09MVkVEID0gJ3NvbGljaXRhY2FvLnBlbmRlbmN5X3Jlc29sdmVkJyxcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgYmFzZSBwYXJhIGV2ZW50b3MgZGUgc29saWNpdGHDp8Ojb1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvRXZlbnQge1xuICB0eXBlOiBTb2xpY2l0YWNhb0V2ZW50VHlwZTtcbiAgc29saWNpdGFjYW9JZDogc3RyaW5nO1xuICB0aW1lc3RhbXA6IERhdGU7XG4gIGRhdGE/OiBhbnk7XG59XG5cbi8qKlxuICogRXZlbnRvIGVtaXRpZG8gcXVhbmRvIHVtYSBzb2xpY2l0YcOnw6NvIMOpIGNyaWFkYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvQ3JlYXRlZEV2ZW50IGV4dGVuZHMgU29saWNpdGFjYW9FdmVudCB7XG4gIHR5cGU6IFNvbGljaXRhY2FvRXZlbnRUeXBlLkNSRUFURUQ7XG4gIGRhdGE6IHtcbiAgICBwcm90b2NvbG86IHN0cmluZztcbiAgICB0aXBvQmVuZWZpY2lvSWQ6IHN0cmluZztcbiAgICBjaWRhZGFvSWQ6IHN0cmluZztcbiAgICB0ZWNuaWNvSWQ6IHN0cmluZztcbiAgICB1bmlkYWRlSWQ6IHN0cmluZztcbiAgfTtcbn1cblxuLyoqXG4gKiBFdmVudG8gZW1pdGlkbyBxdWFuZG8gbyBzdGF0dXMgZGUgdW1hIHNvbGljaXRhw6fDo28gw6kgYWx0ZXJhZG9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTb2xpY2l0YWNhb1N0YXR1c0NoYW5nZWRFdmVudCBleHRlbmRzIFNvbGljaXRhY2FvRXZlbnQge1xuICB0eXBlOiBTb2xpY2l0YWNhb0V2ZW50VHlwZS5TVEFUVVNfQ0hBTkdFRDtcbiAgZGF0YToge1xuICAgIHN0YXR1c0FudGVyaW9yOiBTdGF0dXNTb2xpY2l0YWNhbztcbiAgICBzdGF0dXNBdHVhbDogU3RhdHVzU29saWNpdGFjYW87XG4gICAgdXN1YXJpb0lkOiBzdHJpbmc7XG4gICAgb2JzZXJ2YWNhbz86IHN0cmluZztcbiAgfTtcbn1cblxuLyoqXG4gKiBFdmVudG8gZW1pdGlkbyBxdWFuZG8gdW0gcHJhem8gZXN0w6EgcHLDs3hpbW8gZGUgZXhwaXJhclxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvRGVhZGxpbmVBcHByb2FjaGluZ0V2ZW50IGV4dGVuZHMgU29saWNpdGFjYW9FdmVudCB7XG4gIHR5cGU6IFNvbGljaXRhY2FvRXZlbnRUeXBlLkRFQURMSU5FX0FQUFJPQUNISU5HO1xuICBkYXRhOiB7XG4gICAgdGlwb1ByYXpvOiAnYW5hbGlzZScgfCAnZG9jdW1lbnRvcycgfCAncHJvY2Vzc2FtZW50byc7XG4gICAgZGF0YVByYXpvOiBEYXRlO1xuICAgIGRpYXNSZXN0YW50ZXM6IG51bWJlcjtcbiAgICBkZXRlcm1pbmFjYW9KdWRpY2lhbDogYm9vbGVhbjtcbiAgfTtcbn1cblxuLyoqXG4gKiBFdmVudG8gZW1pdGlkbyBxdWFuZG8gdW0gcHJhem8gZXhwaXJvdVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvRGVhZGxpbmVFeHBpcmVkRXZlbnQgZXh0ZW5kcyBTb2xpY2l0YWNhb0V2ZW50IHtcbiAgdHlwZTogU29saWNpdGFjYW9FdmVudFR5cGUuREVBRExJTkVfRVhQSVJFRDtcbiAgZGF0YToge1xuICAgIHRpcG9QcmF6bzogJ2FuYWxpc2UnIHwgJ2RvY3VtZW50b3MnIHwgJ3Byb2Nlc3NhbWVudG8nO1xuICAgIGRhdGFQcmF6bzogRGF0ZTtcbiAgICBkaWFzQXRyYXNvOiBudW1iZXI7XG4gICAgZGV0ZXJtaW5hY2FvSnVkaWNpYWw6IGJvb2xlYW47XG4gIH07XG59XG5cbi8qKlxuICogRXZlbnRvIGVtaXRpZG8gcXVhbmRvIHVtYSBzb2xpY2l0YcOnw6NvIMOpIGF0cmlidcOtZGEgYSB1bSB0w6ljbmljb1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvQXNzaWduZWRFdmVudCBleHRlbmRzIFNvbGljaXRhY2FvRXZlbnQge1xuICB0eXBlOiBTb2xpY2l0YWNhb0V2ZW50VHlwZS5BU1NJR05FRDtcbiAgZGF0YToge1xuICAgIHRlY25pY29BbnRlcmlvcklkPzogc3RyaW5nO1xuICAgIHRlY25pY29BdHVhbElkOiBzdHJpbmc7XG4gICAgdXN1YXJpb0F0cmlidWljYW9JZDogc3RyaW5nO1xuICAgIG1vdGl2b0F0cmlidWljYW8/OiBzdHJpbmc7XG4gIH07XG59XG5cbi8qKlxuICogRXZlbnRvIGVtaXRpZG8gcXVhbmRvIHVtYSBzb2xpY2l0YcOnw6NvIMOpIGFwcm92YWRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU29saWNpdGFjYW9BcHByb3ZlZEV2ZW50IGV4dGVuZHMgU29saWNpdGFjYW9FdmVudCB7XG4gIHR5cGU6IFNvbGljaXRhY2FvRXZlbnRUeXBlLkFQUFJPVkVEO1xuICBkYXRhOiB7XG4gICAgYXByb3ZhZG9ySWQ6IHN0cmluZztcbiAgICBvYnNlcnZhY2FvPzogc3RyaW5nO1xuICAgIGRhdGFBcHJvdmFjYW86IERhdGU7XG4gIH07XG59XG5cbi8qKlxuICogRXZlbnRvIGVtaXRpZG8gcXVhbmRvIHVtYSBzb2xpY2l0YcOnw6NvIMOpIHJlcHJvdmFkYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvUmVqZWN0ZWRFdmVudCBleHRlbmRzIFNvbGljaXRhY2FvRXZlbnQge1xuICB0eXBlOiBTb2xpY2l0YWNhb0V2ZW50VHlwZS5SRUpFQ1RFRDtcbiAgZGF0YToge1xuICAgIHJlcHJvdmFkb3JJZDogc3RyaW5nO1xuICAgIG1vdGl2b1JlcHJvdmFjYW86IHN0cmluZztcbiAgICBkYXRhUmVwcm92YWNhbzogRGF0ZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBFdmVudG8gZW1pdGlkbyBxdWFuZG8gdW1hIHNvbGljaXRhw6fDo28gw6kgbGliZXJhZGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTb2xpY2l0YWNhb1JlbGVhc2VkRXZlbnQgZXh0ZW5kcyBTb2xpY2l0YWNhb0V2ZW50IHtcbiAgdHlwZTogU29saWNpdGFjYW9FdmVudFR5cGUuUkVMRUFTRUQ7XG4gIGRhdGE6IHtcbiAgICBsaWJlcmFkb3JJZDogc3RyaW5nO1xuICAgIGRhdGFMaWJlcmFjYW86IERhdGU7XG4gICAgb2JzZXJ2YWNhbz86IHN0cmluZztcbiAgfTtcbn1cblxuLyoqXG4gKiBFdmVudG8gZW1pdGlkbyBxdWFuZG8gdW1hIGRldGVybWluYcOnw6NvIGp1ZGljaWFsIMOpIGFuZXhhZGEgw6Agc29saWNpdGHDp8Ojb1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvSnVkaWNpYWxEZXRlcm1pbmF0aW9uQXR0YWNoZWRFdmVudFxuICBleHRlbmRzIFNvbGljaXRhY2FvRXZlbnQge1xuICB0eXBlOiBTb2xpY2l0YWNhb0V2ZW50VHlwZS5KVURJQ0lBTF9ERVRFUk1JTkFUSU9OX0FUVEFDSEVEO1xuICBkYXRhOiB7XG4gICAgZGV0ZXJtaW5hY2FvSnVkaWNpYWxJZDogc3RyaW5nO1xuICAgIHVzdWFyaW9JZDogc3RyaW5nO1xuICAgIG9ic2VydmFjYW8/OiBzdHJpbmc7XG4gIH07XG59XG5cbi8qKlxuICogRXZlbnRvIGVtaXRpZG8gcXVhbmRvIHVtYSBwZW5kw6puY2lhIMOpIGNyaWFkYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvbGljaXRhY2FvUGVuZGVuY3lDcmVhdGVkRXZlbnQgZXh0ZW5kcyBTb2xpY2l0YWNhb0V2ZW50IHtcbiAgdHlwZTogU29saWNpdGFjYW9FdmVudFR5cGUuUEVOREVOQ1lfQ1JFQVRFRDtcbiAgZGF0YToge1xuICAgIHBlbmRlbmNpYUlkOiBzdHJpbmc7XG4gICAgZGVzY3JpY2FvOiBzdHJpbmc7XG4gICAgcHJhem8/OiBEYXRlO1xuICAgIHVzdWFyaW9JZDogc3RyaW5nO1xuICB9O1xufVxuXG4vKipcbiAqIEV2ZW50byBlbWl0aWRvIHF1YW5kbyB1bWEgcGVuZMOqbmNpYSDDqSByZXNvbHZpZGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTb2xpY2l0YWNhb1BlbmRlbmN5UmVzb2x2ZWRFdmVudCBleHRlbmRzIFNvbGljaXRhY2FvRXZlbnQge1xuICB0eXBlOiBTb2xpY2l0YWNhb0V2ZW50VHlwZS5QRU5ERU5DWV9SRVNPTFZFRDtcbiAgZGF0YToge1xuICAgIHBlbmRlbmNpYUlkOiBzdHJpbmc7XG4gICAgcmVzb2x1Y2FvOiBzdHJpbmc7XG4gICAgdXN1YXJpb0lkOiBzdHJpbmc7XG4gICAgZGF0YVJlc29sdWNhbzogRGF0ZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaXBvIHVuacOjbyBxdWUgcmVwcmVzZW50YSB0b2RvcyBvcyBwb3Nzw612ZWlzIGV2ZW50b3MgZGUgc29saWNpdGHDp8Ojb1xuICovXG5leHBvcnQgdHlwZSBTb2xpY2l0YWNhb0V2ZW50VW5pb24gPVxuICB8IFNvbGljaXRhY2FvQ3JlYXRlZEV2ZW50XG4gIHwgU29saWNpdGFjYW9TdGF0dXNDaGFuZ2VkRXZlbnRcbiAgfCBTb2xpY2l0YWNhb0RlYWRsaW5lQXBwcm9hY2hpbmdFdmVudFxuICB8IFNvbGljaXRhY2FvRGVhZGxpbmVFeHBpcmVkRXZlbnRcbiAgfCBTb2xpY2l0YWNhb0Fzc2lnbmVkRXZlbnRcbiAgfCBTb2xpY2l0YWNhb0FwcHJvdmVkRXZlbnRcbiAgfCBTb2xpY2l0YWNhb1JlamVjdGVkRXZlbnRcbiAgfCBTb2xpY2l0YWNhb1JlbGVhc2VkRXZlbnRcbiAgfCBTb2xpY2l0YWNhb0p1ZGljaWFsRGV0ZXJtaW5hdGlvbkF0dGFjaGVkRXZlbnRcbiAgfCBTb2xpY2l0YWNhb1BlbmRlbmN5Q3JlYXRlZEV2ZW50XG4gIHwgU29saWNpdGFjYW9QZW5kZW5jeVJlc29sdmVkRXZlbnQ7XG4iXSwidmVyc2lvbiI6M30=