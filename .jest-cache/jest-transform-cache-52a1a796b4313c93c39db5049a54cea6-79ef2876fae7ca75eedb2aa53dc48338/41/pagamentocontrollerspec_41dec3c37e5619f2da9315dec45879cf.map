{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\controllers\\pagamento.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\controllers\\pagamento.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { PagamentoController } from '../../../controllers/pagamento.controller';\nimport { PagamentoService } from '../../../services/pagamento.service';\nimport { IntegracaoCidadaoService } from '../../../services/integracao-cidadao.service';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport { PagamentoCreateDto } from '../../../dtos/pagamento-create.dto';\nimport { AtualizarStatusDto } from '../../../dtos/atualizar-status.dto';\nimport { CancelarPagamentoDto } from '../../../dtos/cancelar-pagamento.dto';\nimport { FilterPagamentoDto } from '../../../dtos/filter-pagamento.dto';\n\n/**\n * Testes unitários para PagamentoController\n * \n * Valida o comportamento dos endpoints de pagamento, garantindo que os controladores\n * interagem corretamente com os serviços subjacentes e retornam as respostas esperadas.\n */\ndescribe('PagamentoController', () => {\n  let controller: PagamentoController;\n  let pagamentoService: PagamentoService;\n  let integracaoCidadaoService: IntegracaoCidadaoService;\n\n  // Mock de um pagamento para ser utilizado nos testes\n  const pagamentoMock = {\n    id: 'pagamento-id-1',\n    solicitacaoId: 'solicitacao-id-1',\n    valor: 500,\n    status: StatusPagamentoEnum.LIBERADO,\n    metodoPagamento: 'pix',\n    infoBancariaId: 'info-bancaria-id-1',\n    dataLiberacao: new Date(),\n    dataCriacao: new Date(),\n    dataAtualizacao: new Date(),\n    liberadoPor: 'usuario-id-1',\n    observacoes: 'Pagamento de benefício eventual'\n  };\n\n  // Mock da lista de pagamentos\n  const pagamentosListMock = [\n    pagamentoMock,\n    {\n      ...pagamentoMock,\n      id: 'pagamento-id-2',\n      solicitacaoId: 'solicitacao-id-2',\n      valor: 300\n    }\n  ];\n\n  // Mock de resposta paginada\n  const paginatedResponseMock = {\n    items: pagamentosListMock,\n    total: pagamentosListMock.length,\n    page: 1,\n    limit: 10\n  };\n\n  // Mock das informações bancárias\n  const infoBancariasMock = [\n    {\n      id: 'info-bancaria-id-1',\n      banco: '001',\n      nomeBanco: 'Banco do Brasil',\n      agencia: '1234',\n      conta: '12345-6',\n      tipoConta: 'Corrente',\n      principal: true\n    },\n    {\n      id: 'info-bancaria-id-2',\n      pixTipo: 'email',\n      pixChave: 'u***@e***.com',\n      principal: false\n    }\n  ];\n\n  // Mock do request para simular o usuário autenticado\n  const mockRequest = {\n    user: {\n      id: 'usuario-id-1',\n      nome: 'Usuário Teste',\n      perfil: 'operador'\n    }\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [PagamentoController],\n      providers: [\n        {\n          provide: PagamentoService,\n          useValue: {\n            createPagamento: jest.fn().mockResolvedValue(pagamentoMock),\n            findOne: jest.fn().mockResolvedValue(pagamentoMock),\n            findOneWithRelations: jest.fn().mockResolvedValue(pagamentoMock),\n            findAll: jest.fn().mockResolvedValue(paginatedResponseMock),\n            findPendentes: jest.fn().mockResolvedValue(paginatedResponseMock),\n            atualizarStatus: jest.fn().mockResolvedValue({\n              ...pagamentoMock,\n              status: StatusPagamentoEnum.CONFIRMADO\n            }),\n            cancelarPagamento: jest.fn().mockResolvedValue({\n              ...pagamentoMock,\n              status: StatusPagamentoEnum.CANCELADO,\n              motivoCancelamento: 'Cancelado a pedido do beneficiário',\n              dataCancelamento: new Date()\n            })\n          }\n        },\n        {\n          provide: IntegracaoCidadaoService,\n          useValue: {\n            obterInformacoesBancarias: jest.fn().mockResolvedValue(infoBancariasMock)\n          }\n        }\n      ],\n    }).compile();\n\n    controller = module.get<PagamentoController>(PagamentoController);\n    pagamentoService = module.get<PagamentoService>(PagamentoService);\n    integracaoCidadaoService = module.get<IntegracaoCidadaoService>(IntegracaoCidadaoService);\n  });\n\n  it('deve estar definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('createPagamento', () => {\n    it('deve criar um pagamento com sucesso', async () => {\n      // Arrange\n      const solicitacaoId = 'solicitacao-id-1';\n      const createDto: PagamentoCreateDto = {\n        infoBancariaId: 'info-bancaria-id-1',\n        valor: 500,\n        dataLiberacao: new Date(),\n        metodoPagamento: 'pix',\n        observacoes: 'Pagamento teste'\n      };\n\n      // Act\n      const resultado = await controller.createPagamento(\n        solicitacaoId,\n        createDto,\n        mockRequest as any\n      );\n\n      // Assert\n      expect(resultado).toEqual(pagamentoMock);\n      expect(pagamentoService.createPagamento).toHaveBeenCalledWith(\n        solicitacaoId,\n        createDto,\n        mockRequest.user.id\n      );\n    });\n\n    it('deve lançar erro quando o serviço falha na criação', async () => {\n      // Arrange\n      const solicitacaoId = 'solicitacao-id-1';\n      const createDto: PagamentoCreateDto = {\n        infoBancariaId: 'info-bancaria-id-1',\n        valor: 500,\n        dataLiberacao: new Date(),\n        metodoPagamento: 'pix',\n        observacoes: 'Pagamento teste'\n      };\n      \n      jest.spyOn(pagamentoService, 'createPagamento').mockRejectedValue(\n        new ConflictException('Erro ao criar pagamento')\n      );\n\n      // Act & Assert\n      await expect(\n        controller.createPagamento(solicitacaoId, createDto, mockRequest as any)\n      ).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('getPagamento', () => {\n    it('deve retornar um pagamento pelo ID', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n\n      // Act\n      const resultado = await controller.getPagamento(pagamentoId);\n\n      // Assert\n      expect(resultado).toEqual(pagamentoMock);\n      expect(pagamentoService.findOneWithRelations).toHaveBeenCalledWith(pagamentoId);\n    });\n\n    it('deve lançar erro quando o pagamento não existe', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n      \n      jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        controller.getPagamento(pagamentoId)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('listarPagamentos', () => {\n    it('deve retornar lista paginada de pagamentos', async () => {\n      // Arrange\n      const filterDto: FilterPagamentoDto = {\n        status: StatusPagamentoEnum.LIBERADO,\n        page: 1,\n        limit: 10\n      };\n\n      // Act\n      const resultado = await controller.listarPagamentos(filterDto);\n\n      // Assert\n      expect(resultado).toEqual(paginatedResponseMock);\n      expect(pagamentoService.findAll).toHaveBeenCalledWith(filterDto);\n    });\n  });\n\n  describe('listarPagamentosPendentes', () => {\n    it('deve retornar lista paginada de pagamentos pendentes', async () => {\n      // Arrange\n      const query = {\n        unidadeId: 'unidade-id-1',\n        tipoBeneficioId: 'tipo-beneficio-id-1',\n        page: 1,\n        limit: 10\n      };\n\n      // Act\n      const resultado = await controller.listarPagamentosPendentes(query);\n\n      // Assert\n      expect(resultado).toEqual(paginatedResponseMock);\n      expect(pagamentoService.findPendentes).toHaveBeenCalledWith(query);\n    });\n  });\n\n  describe('atualizarStatus', () => {\n    it('deve atualizar o status de um pagamento', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const updateDto: AtualizarStatusDto = {\n        status: StatusPagamentoEnum.CONFIRMADO\n      };\n      \n      const pagamentoAtualizado = {\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.CONFIRMADO\n      };\n\n      // Act\n      const resultado = await controller.atualizarStatus(\n        pagamentoId,\n        updateDto,\n        mockRequest as any\n      );\n\n      // Assert\n      expect(resultado).toEqual(pagamentoAtualizado);\n      expect(pagamentoService.atualizarStatus).toHaveBeenCalledWith(\n        pagamentoId,\n        updateDto.status,\n        mockRequest.user.id\n      );\n    });\n\n    it('deve lançar erro quando o pagamento não existe', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n      const updateDto: AtualizarStatusDto = {\n        status: StatusPagamentoEnum.CONFIRMADO\n      };\n      \n      jest.spyOn(pagamentoService, 'atualizarStatus').mockRejectedValue(\n        new NotFoundException('Pagamento não encontrado')\n      );\n\n      // Act & Assert\n      await expect(\n        controller.atualizarStatus(pagamentoId, updateDto, mockRequest as any)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('cancelarPagamento', () => {\n    it('deve cancelar um pagamento com sucesso', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const cancelarDto: CancelarPagamentoDto = {\n        motivoCancelamento: 'Cancelado a pedido do beneficiário'\n      };\n      \n      const pagamentoCancelado = {\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.CANCELADO,\n        motivoCancelamento: 'Cancelado a pedido do beneficiário',\n        dataCancelamento: expect.any(Date)\n      };\n\n      // Act\n      const resultado = await controller.cancelarPagamento(\n        pagamentoId,\n        cancelarDto,\n        mockRequest as any\n      );\n\n      // Assert\n      expect(resultado).toEqual(pagamentoCancelado);\n      expect(pagamentoService.cancelarPagamento).toHaveBeenCalledWith(\n        pagamentoId,\n        mockRequest.user.id,\n        cancelarDto.motivoCancelamento\n      );\n    });\n  });\n\n  describe('getInfoBancarias', () => {\n    it('deve retornar informações bancárias de um beneficiário', async () => {\n      // Arrange\n      const beneficiarioId = 'beneficiario-id-1';\n\n      // Act\n      const resultado = await controller.getInfoBancarias(beneficiarioId);\n\n      // Assert\n      expect(resultado).toEqual(infoBancariasMock);\n      expect(integracaoCidadaoService.obterInformacoesBancarias).toHaveBeenCalledWith(\n        beneficiarioId\n      );\n    });\n\n    it('deve lançar erro quando o beneficiário não existe', async () => {\n      // Arrange\n      const beneficiarioId = 'beneficiario-inexistente';\n      \n      jest.spyOn(integracaoCidadaoService, 'obterInformacoesBancarias').mockRejectedValue(\n        new NotFoundException('Beneficiário não encontrado')\n      );\n\n      // Act & Assert\n      await expect(\n        controller.getInfoBancarias(beneficiarioId)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"],"version":3}