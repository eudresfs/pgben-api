163695f7d75d5c3cf65612d422520153
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const testing_1 = require("@nestjs/testing");
const uuid_1 = require("uuid");
const constants_1 = require("../constants");
const logger_service_1 = require("../logger/logger.service");
const all_exceptions_filter_1 = require("./all-exceptions.filter");
const mockMessage1 = 'mock exception string';
const mockMessage2 = { hello: 'world', hi: 'joe' };
const mockMessage3 = 'Something is very wrong';
const mockException1 = new common_1.HttpException(mockMessage1, common_1.HttpStatus.NOT_FOUND);
const mockException2 = new common_1.HttpException(mockMessage2, common_1.HttpStatus.BAD_REQUEST);
const mockError = new Error(mockMessage3);
describe('AllExceptionsFilter', () => {
    let mockContext;
    let mockRequest;
    let mockResponse;
    const mockConfigService = {
        get: () => 'development',
    };
    const mockedLogger = {
        warn: jest.fn().mockReturnThis(),
        setContext: jest.fn().mockReturnThis(),
    };
    let filter;
    beforeEach(async () => {
        /** mock request object */
        mockRequest = {
            headers: {},
            url: 'mock-url',
            header: jest.fn(),
        };
        mockRequest.headers[constants_1.REQUEST_ID_TOKEN_HEADER] = (0, uuid_1.v4)();
        /** mock response object */
        mockResponse = {
            status: jest.fn().mockReturnThis(),
            json: jest.fn().mockReturnThis(),
        };
        /** mock execution context */
        mockContext = {
            switchToHttp: () => ({
                getRequest: () => mockRequest,
                getResponse: () => mockResponse,
            }),
        };
        const moduleRef = await testing_1.Test.createTestingModule({
            providers: [
                all_exceptions_filter_1.AllExceptionsFilter,
                { provide: config_1.ConfigService, useValue: mockConfigService },
                { provide: logger_service_1.AppLogger, useValue: mockedLogger },
            ],
        }).compile();
        // config = moduleRef.get<ConfigService>(ConfigService);
        filter = moduleRef.get(all_exceptions_filter_1.AllExceptionsFilter);
    });
    it('should be defined', async () => {
        expect(filter).toBeDefined();
    });
    it('should handle both HttpException and unhandled Error', async () => {
        filter.catch(mockException1, mockContext);
        expect(mockResponse.status).toBeCalled();
        expect(mockResponse.json).toBeCalled();
        filter.catch(mockError, mockContext);
        expect(mockResponse.status).toBeCalled();
        expect(mockResponse.json).toBeCalled();
    });
    it('should handle HttpException with right status code', async () => {
        filter.catch(mockException1, mockContext);
        expect(mockResponse.status).toBeCalledWith(common_1.HttpStatus.NOT_FOUND);
        filter.catch(mockException2, mockContext);
        expect(mockResponse.status).toBeCalledWith(common_1.HttpStatus.BAD_REQUEST);
    });
    it('should handle unhandled error with status code 500', async () => {
        filter.catch(mockError, mockContext);
        expect(mockResponse.status).toBeCalledWith(common_1.HttpStatus.INTERNAL_SERVER_ERROR);
    });
    it('should handle exception with plain string message', async () => {
        filter.catch(mockException1, mockContext);
        expect(mockResponse.json).toBeCalledWith(expect.objectContaining({
            error: expect.objectContaining({
                statusCode: common_1.HttpStatus.NOT_FOUND,
                message: mockMessage1,
            }),
        }));
    });
    it('should handle exception with object type message', async () => {
        filter.catch(mockException2, mockContext);
        expect(mockResponse.json).toBeCalledWith(expect.objectContaining({
            error: expect.objectContaining({
                statusCode: common_1.HttpStatus.BAD_REQUEST,
                details: mockMessage2,
            }),
        }));
    });
    it('should respond with Error message in development mode', async () => {
        // const configSpy = jest
        //   .spyOn(config, 'get')
        //   .mockImplementation(() => 'development');
        filter.catch(mockError, mockContext);
        expect(mockResponse.json).toBeCalledWith(expect.objectContaining({
            error: expect.objectContaining({
                statusCode: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
                message: mockMessage3,
            }),
        }));
        // configSpy.mockClear();
    });
    it('should suppress Error message in production mode', async () => {
        const configSpy = jest
            .spyOn(mockConfigService, 'get')
            .mockImplementation(() => 'production');
        filter.catch(mockError, mockContext);
        expect(mockResponse.json).toBeCalledWith(expect.objectContaining({
            error: expect.objectContaining({
                statusCode: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
                message: 'Internal server error',
            }),
        }));
        configSpy.mockClear();
    });
    it('should contain request id in response', async () => {
        filter.catch(mockMessage1, mockContext);
        expect(mockResponse.json).toBeCalledWith(expect.objectContaining({
            error: expect.objectContaining({
                requestId: mockRequest.headers[constants_1.REQUEST_ID_TOKEN_HEADER],
            }),
        }));
    });
    it('should contain request path in response', async () => {
        filter.catch(mockMessage1, mockContext);
        expect(mockResponse.json).toBeCalledWith(expect.objectContaining({
            error: expect.objectContaining({
                path: mockRequest.url,
            }),
        }));
    });
    it('should contain timestamp in response', async () => {
        const mockDate = new Date();
        const dateSpy = jest
            .spyOn(global, 'Date')
            .mockImplementation(() => mockDate);
        filter.catch(mockException1, mockContext);
        expect(mockResponse.status).toBeCalledWith(common_1.HttpStatus.NOT_FOUND);
        expect(mockResponse.json).toBeCalledWith(expect.objectContaining({
            error: expect.objectContaining({
                timestamp: mockDate.toISOString(),
            }),
        }));
        dateSpy.mockClear();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,