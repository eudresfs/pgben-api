1712afdce7b50733da0e03686fdf4377
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TipoBeneficioSchemaRepository = void 0;
const typeorm_1 = require("typeorm");
const tipo_beneficio_schema_entity_1 = require("../../../entities/tipo-beneficio-schema.entity");
const common_1 = require("@nestjs/common");
const enums_1 = require("@/enums");
/**
 * Repositório customizado para TipoBeneficioSchema
 * Fornece métodos otimizados para consultas específicas de schemas de benefícios
 */
let TipoBeneficioSchemaRepository = class TipoBeneficioSchemaRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(tipo_beneficio_schema_entity_1.TipoBeneficioSchema, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca o schema ativo para um tipo de benefício específico
     *
     * @param tipoBeneficioId ID do tipo de benefício
     * @returns Schema ativo ou null se não encontrado
     */
    async findByTipoBeneficioId(tipoBeneficioId) {
        return this.findOne({
            where: {
                tipo_beneficio_id: tipoBeneficioId,
                status: enums_1.Status.ATIVO,
            },
            relations: ['tipo_beneficio'],
        });
    }
    /**
     * Busca schema por entidade de dados
     *
     * @param entidadeDados Nome da entidade de dados
     * @returns Lista de schemas que usam a entidade especificada
     */
    async findByEntidadeDados(entidadeDados) {
        return this.find({
            where: {
                entidade_dados: entidadeDados,
                status: enums_1.Status.ATIVO,
            },
            relations: ['tipo_beneficio'],
        });
    }
    /**
     * Busca todos os schemas ativos com seus tipos de benefícios
     *
     * @returns Lista de schemas ativos
     */
    async findAllAtivos() {
        return this.find({
            where: { status: enums_1.Status.ATIVO },
            relations: ['tipo_beneficio'],
            order: { created_at: 'DESC' },
        });
    }
    /**
     * Busca schemas por versão
     *
     * @param versao Versão do schema
     * @returns Lista de schemas da versão especificada
     */
    async findByVersao(versao) {
        return this.find({
            where: {
                versao,
                status: enums_1.Status.ATIVO,
            },
            relations: ['tipo_beneficio'],
        });
    }
    /**
     * Busca schemas criados recentemente (últimas 24 horas)
     *
     * @returns Lista de schemas recentes
     */
    async findRecentes() {
        const umDiaAtras = new Date();
        umDiaAtras.setDate(umDiaAtras.getDate() - 1);
        return this.createQueryBuilder('schema')
            .leftJoinAndSelect('schema.tipo_beneficio', 'tipo_beneficio')
            .where('schema.created_at > :dataLimite', { dataLimite: umDiaAtras })
            .andWhere('schema.ativo = :ativo', { status: enums_1.Status.ATIVO })
            .orderBy('schema.created_at', 'DESC')
            .getMany();
    }
    /**
     * Busca schemas que contêm um campo específico
     *
     * @param nomeCampo Nome do campo a ser buscado
     * @returns Lista de schemas que contêm o campo
     */
    async findByCampo(nomeCampo) {
        return this.createQueryBuilder('schema')
            .leftJoinAndSelect('schema.tipo_beneficio', 'tipo_beneficio')
            .where('schema.ativo = :ativo', { status: enums_1.Status.ATIVO })
            .andWhere(`EXISTS (
          SELECT 1 FROM jsonb_array_elements(schema.schema_estrutura->'campos') AS campo
          WHERE campo->>'nome' = :nomeCampo
        )`, { nomeCampo })
            .getMany();
    }
    /**
     * Atualiza a versão de um schema
     *
     * @param id ID do schema
     * @param novaVersao Nova versão
     * @returns Schema atualizado
     */
    async atualizarVersao(id, novaVersao) {
        await this.update(id, { versao: novaVersao });
        const schema = await this.findOne({
            where: { id },
            relations: ['tipo_beneficio'],
        });
        if (!schema) {
            throw new Error(`Schema com ID ${id} não encontrado`);
        }
        return schema;
    }
    /**
     * Desativa um schema
     *
     * @param id ID do schema
     * @returns Resultado da operação
     */
    async desativar(id) {
        await this.update(id, { status: enums_1.Status.INATIVO });
    }
    /**
     * Ativa um schema
     *
     * @param id ID do schema
     * @returns Resultado da operação
     */
    async ativar(id) {
        await this.update(id, { status: enums_1.Status.ATIVO });
    }
    /**
     * Conta quantos schemas existem por entidade de dados
     *
     * @returns Objeto com contagem por entidade
     */
    async contarPorEntidade() {
        const resultado = await this.createQueryBuilder('schema')
            .select('schema.entidade_dados', 'entidade')
            .addSelect('COUNT(*)', 'total')
            .where('schema.ativo = :ativo', { status: enums_1.Status.ATIVO })
            .groupBy('schema.entidade_dados')
            .getRawMany();
        return resultado.reduce((acc, item) => {
            acc[item.entidade] = parseInt(item.total);
            return acc;
        }, {});
    }
    /**
     * Valida se existe conflito de schema para um tipo de benefício
     *
     * @param tipoBeneficioId ID do tipo de benefício
     * @param excludeId ID do schema a ser excluído da validação (opcional)
     * @returns True se existe conflito
     */
    async existeConflito(tipoBeneficioId, excludeId) {
        const query = this.createQueryBuilder('schema')
            .where('schema.tipo_beneficio_id = :tipoBeneficioId', { tipoBeneficioId })
            .andWhere('schema.ativo = :ativo', { status: enums_1.Status.ATIVO });
        if (excludeId) {
            query.andWhere('schema.id != :excludeId', { excludeId });
        }
        const count = await query.getCount();
        return count > 0;
    }
};
exports.TipoBeneficioSchemaRepository = TipoBeneficioSchemaRepository;
exports.TipoBeneficioSchemaRepository = TipoBeneficioSchemaRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], TipoBeneficioSchemaRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,