{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\tipo-beneficio-schema.repository.ts","mappings":";;;;;;;;;;;;;AAAA,qCAAiD;AACjD,iGAAqF;AACrF,2CAA4C;AAC5C,mCAAiC;AAEjC;;;GAGG;AAEI,IAAM,6BAA6B,GAAnC,MAAM,6BAA8B,SAAQ,oBAA+B;IAC5D;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,kDAAmB,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAD3C,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qBAAqB,CACzB,eAAuB;QAEvB,OAAO,IAAI,CAAC,OAAO,CAAC;YAClB,KAAK,EAAE;gBACL,iBAAiB,EAAE,eAAe;gBAClC,MAAM,EAAE,cAAM,CAAC,KAAK;aACrB;YACD,SAAS,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,mBAAmB,CACvB,aAAqB;QAErB,OAAO,IAAI,CAAC,IAAI,CAAC;YACf,KAAK,EAAE;gBACL,cAAc,EAAE,aAAa;gBAC7B,MAAM,EAAE,cAAM,CAAC,KAAK;aACrB;YACD,SAAS,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa;QACjB,OAAO,IAAI,CAAC,IAAI,CAAC;YACf,KAAK,EAAE,EAAE,MAAM,EAAE,cAAM,CAAC,KAAK,EAAE;YAC/B,SAAS,EAAE,CAAC,gBAAgB,CAAC;YAC7B,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;SAC9B,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC;YACf,KAAK,EAAE;gBACL,MAAM;gBACN,MAAM,EAAE,cAAM,CAAC,KAAK;aACrB;YACD,SAAS,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,YAAY;QAChB,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAC9B,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QAE7C,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;aACrC,iBAAiB,CAAC,uBAAuB,EAAE,gBAAgB,CAAC;aAC5D,KAAK,CAAC,iCAAiC,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;aACpE,QAAQ,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,cAAM,CAAC,KAAK,EAAE,CAAC;aAC3D,OAAO,CAAC,mBAAmB,EAAE,MAAM,CAAC;aACpC,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,SAAiB;QACjC,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;aACrC,iBAAiB,CAAC,uBAAuB,EAAE,gBAAgB,CAAC;aAC5D,KAAK,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,cAAM,CAAC,KAAK,EAAE,CAAC;aACxD,QAAQ,CACP;;;UAGE,EACF,EAAE,SAAS,EAAE,CACd;aACA,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,eAAe,CACnB,EAAU,EACV,UAAkB;QAElB,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QAC9C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC;YAChC,KAAK,EAAE,EAAE,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,gBAAgB,CAAC;SAC9B,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,MAAM,IAAI,KAAK,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;QACxD,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,SAAS,CAAC,EAAU;QACxB,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,cAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IACpD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,cAAM,CAAC,KAAK,EAAE,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB;QACrB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;aACtD,MAAM,CAAC,uBAAuB,EAAE,UAAU,CAAC;aAC3C,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC;aAC9B,KAAK,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,cAAM,CAAC,KAAK,EAAE,CAAC;aACxD,OAAO,CAAC,uBAAuB,CAAC;aAChC,UAAU,EAAE,CAAC;QAEhB,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACpC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,cAAc,CAClB,eAAuB,EACvB,SAAkB;QAElB,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;aAC5C,KAAK,CAAC,6CAA6C,EAAE,EAAE,eAAe,EAAE,CAAC;aACzE,QAAQ,CAAC,uBAAuB,EAAE,EAAE,MAAM,EAAE,cAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QAE/D,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,QAAQ,CAAC,yBAAyB,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAC3D,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;QACrC,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;CACF,CAAA;AA9LY,sEAA6B;wCAA7B,6BAA6B;IADzC,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,6BAA6B,CA8LzC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\tipo-beneficio-schema.repository.ts"],"sourcesContent":["import { DataSource, Repository } from 'typeorm';\nimport { TipoBeneficioSchema } from '../../../entities/tipo-beneficio-schema.entity';\nimport { Injectable } from '@nestjs/common';\nimport { Status } from '@/enums';\n\n/**\n * Repositório customizado para TipoBeneficioSchema\n * Fornece métodos otimizados para consultas específicas de schemas de benefícios\n */\n@Injectable()\nexport class TipoBeneficioSchemaRepository extends Repository<TipoBeneficioSchema> {\n  constructor(private dataSource: DataSource) {\n    super(TipoBeneficioSchema, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca o schema ativo para um tipo de benefício específico\n   *\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns Schema ativo ou null se não encontrado\n   */\n  async findByTipoBeneficioId(\n    tipoBeneficioId: string,\n  ): Promise<TipoBeneficioSchema | null> {\n    return this.findOne({\n      where: {\n        tipo_beneficio_id: tipoBeneficioId,\n        status: Status.ATIVO,\n      },\n      relations: ['tipo_beneficio'],\n    });\n  }\n\n  /**\n   * Busca schema por entidade de dados\n   *\n   * @param entidadeDados Nome da entidade de dados\n   * @returns Lista de schemas que usam a entidade especificada\n   */\n  async findByEntidadeDados(\n    entidadeDados: string,\n  ): Promise<TipoBeneficioSchema[]> {\n    return this.find({\n      where: {\n        entidade_dados: entidadeDados,\n        status: Status.ATIVO,\n      },\n      relations: ['tipo_beneficio'],\n    });\n  }\n\n  /**\n   * Busca todos os schemas ativos com seus tipos de benefícios\n   *\n   * @returns Lista de schemas ativos\n   */\n  async findAllAtivos(): Promise<TipoBeneficioSchema[]> {\n    return this.find({\n      where: { status: Status.ATIVO },\n      relations: ['tipo_beneficio'],\n      order: { created_at: 'DESC' },\n    });\n  }\n\n  /**\n   * Busca schemas por versão\n   *\n   * @param versao Versão do schema\n   * @returns Lista de schemas da versão especificada\n   */\n  async findByVersao(versao: string): Promise<TipoBeneficioSchema[]> {\n    return this.find({\n      where: {\n        versao,\n        status: Status.ATIVO,\n      },\n      relations: ['tipo_beneficio'],\n    });\n  }\n\n  /**\n   * Busca schemas criados recentemente (últimas 24 horas)\n   *\n   * @returns Lista de schemas recentes\n   */\n  async findRecentes(): Promise<TipoBeneficioSchema[]> {\n    const umDiaAtras = new Date();\n    umDiaAtras.setDate(umDiaAtras.getDate() - 1);\n\n    return this.createQueryBuilder('schema')\n      .leftJoinAndSelect('schema.tipo_beneficio', 'tipo_beneficio')\n      .where('schema.created_at > :dataLimite', { dataLimite: umDiaAtras })\n      .andWhere('schema.ativo = :ativo', { status: Status.ATIVO })\n      .orderBy('schema.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Busca schemas que contêm um campo específico\n   *\n   * @param nomeCampo Nome do campo a ser buscado\n   * @returns Lista de schemas que contêm o campo\n   */\n  async findByCampo(nomeCampo: string): Promise<TipoBeneficioSchema[]> {\n    return this.createQueryBuilder('schema')\n      .leftJoinAndSelect('schema.tipo_beneficio', 'tipo_beneficio')\n      .where('schema.ativo = :ativo', { status: Status.ATIVO })\n      .andWhere(\n        `EXISTS (\n          SELECT 1 FROM jsonb_array_elements(schema.schema_estrutura->'campos') AS campo\n          WHERE campo->>'nome' = :nomeCampo\n        )`,\n        { nomeCampo },\n      )\n      .getMany();\n  }\n\n  /**\n   * Atualiza a versão de um schema\n   *\n   * @param id ID do schema\n   * @param novaVersao Nova versão\n   * @returns Schema atualizado\n   */\n  async atualizarVersao(\n    id: string,\n    novaVersao: string,\n  ): Promise<TipoBeneficioSchema> {\n    await this.update(id, { versao: novaVersao });\n    const schema = await this.findOne({\n      where: { id },\n      relations: ['tipo_beneficio'],\n    });\n    if (!schema) {\n      throw new Error(`Schema com ID ${id} não encontrado`);\n    }\n    return schema;\n  }\n\n  /**\n   * Desativa um schema\n   *\n   * @param id ID do schema\n   * @returns Resultado da operação\n   */\n  async desativar(id: string): Promise<void> {\n    await this.update(id, { status: Status.INATIVO });\n  }\n\n  /**\n   * Ativa um schema\n   *\n   * @param id ID do schema\n   * @returns Resultado da operação\n   */\n  async ativar(id: string): Promise<void> {\n    await this.update(id, { status: Status.ATIVO });\n  }\n\n  /**\n   * Conta quantos schemas existem por entidade de dados\n   *\n   * @returns Objeto com contagem por entidade\n   */\n  async contarPorEntidade(): Promise<Record<string, number>> {\n    const resultado = await this.createQueryBuilder('schema')\n      .select('schema.entidade_dados', 'entidade')\n      .addSelect('COUNT(*)', 'total')\n      .where('schema.ativo = :ativo', { status: Status.ATIVO })\n      .groupBy('schema.entidade_dados')\n      .getRawMany();\n\n    return resultado.reduce((acc, item) => {\n      acc[item.entidade] = parseInt(item.total);\n      return acc;\n    }, {});\n  }\n\n  /**\n   * Valida se existe conflito de schema para um tipo de benefício\n   *\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @param excludeId ID do schema a ser excluído da validação (opcional)\n   * @returns True se existe conflito\n   */\n  async existeConflito(\n    tipoBeneficioId: string,\n    excludeId?: string,\n  ): Promise<boolean> {\n    const query = this.createQueryBuilder('schema')\n      .where('schema.tipo_beneficio_id = :tipoBeneficioId', { tipoBeneficioId })\n      .andWhere('schema.ativo = :ativo', { status: Status.ATIVO });\n\n    if (excludeId) {\n      query.andWhere('schema.id != :excludeId', { excludeId });\n    }\n\n    const count = await query.getCount();\n    return count > 0;\n  }\n}\n"],"version":3}