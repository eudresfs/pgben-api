{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-queue.processor.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-queue.processor.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Job, Queue } from 'bull';\nimport { LogAuditoriaRepository } from '../repositories/log-auditoria.repository';\nimport { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';\nimport { TipoOperacao } from '../../../enums/tipo-operacao.enum';\nimport { registeredProcessors } from '../../../config/bull.config';\n\n/**\n * Processador da Fila de Auditoria\n *\n * Responsável por processar os logs de auditoria enfileirados, garantindo\n * que o registro de operações seja feito de forma assíncrona sem impactar\n * na performance das requisições enquanto mantém a rastreabilidade\n * das operações para compliance com LGPD.\n * \n * Esta implementação não usa o decorador @Processor para evitar duplicação\n * de processadores. Em vez disso, registra o processador manualmente na fila.\n */\n@Injectable()\nexport class AuditoriaQueueProcessor implements OnModuleInit {\n  private readonly logger = new Logger(AuditoriaQueueProcessor.name);\n\n  constructor(\n    // ← MUDANÇA: Use o repository customizado em vez do TypeORM direto\n    private readonly logAuditoriaRepository: LogAuditoriaRepository,\n    @InjectQueue('auditoria')\n    private readonly auditoriaQueue: Queue,\n  ) {}\n  \n  /**\n   * Registra o processador manualmente na fila quando o módulo é inicializado\n   */\n  async onModuleInit() {\n    try {\n      // Registra o processador de logs de auditoria\n      if (!registeredProcessors.has('registrar-log')) {\n        await this.auditoriaQueue.process('registrar-log', async (job) => {\n          return this.processarLogAuditoria(job);\n        });\n        \n        registeredProcessors.add('registrar-log');\n        this.logger.log('Processador registrar-log registrado com sucesso');\n      } else {\n        this.logger.warn('Processador registrar-log já registrado, ignorando registro duplicado');\n      }\n      \n      // Registra o processador de acesso a dados sensíveis\n      if (!registeredProcessors.has('registrar-acesso-dados-sensiveis')) {\n        await this.auditoriaQueue.process('registrar-acesso-dados-sensiveis', async (job) => {\n          return this.processarAcessoDadosSensiveis(job);\n        });\n        \n        registeredProcessors.add('registrar-acesso-dados-sensiveis');\n        this.logger.log('Processador registrar-acesso-dados-sensiveis registrado com sucesso');\n      } else {\n        this.logger.warn('Processador registrar-acesso-dados-sensiveis já registrado, ignorando registro duplicado');\n      }\n    } catch (error) {\n      this.logger.error(`Erro ao registrar processadores: ${error.message}`, error.stack);\n    }\n  }\n\n  /**\n   * Processa os logs de auditoria enfileirados\n   *\n   * @param job Trabalho contendo os dados do log de auditoria\n   */\n  async processarLogAuditoria(job: Job<CreateLogAuditoriaDto>): Promise<void> {\n    try {\n      const logData = job.data;\n      this.logger.debug(\n        `Processando log de auditoria: ${logData.entidade_afetada} - ${logData.tipo_operacao}`,\n      );\n\n      // ← MUDANÇA: Use o método create do repository customizado\n      const savedLog = await this.logAuditoriaRepository.create(logData);\n\n      this.logger.debug(\n        `Log de auditoria processado com sucesso: ID ${savedLog.id}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar log de auditoria: ${error.message}`,\n        error.stack,\n      );\n      // Rejeita o job para que seja tentado novamente (conforme configuração de backoff)\n      throw error;\n    }\n  }\n\n  /**\n   * Processa os registros de acesso a dados sensíveis\n   *\n   * @param job Trabalho contendo os dados de acesso a dados sensíveis\n   */\n  async processarAcessoDadosSensiveis(job: Job<any>): Promise<void> {\n    try {\n      const {\n        usuarioId,\n        entidade,\n        entidadeId,\n        camposSensiveis,\n        ip,\n        userAgent,\n        endpoint,\n        metodo,\n        timestamp,\n      } = job.data;\n\n      this.logger.debug(\n        `Processando acesso a dados sensíveis: ${entidade} - Campos: ${camposSensiveis.join(', ')}`,\n      );\n\n      // ← MUDANÇA: Crie um DTO e use o repository customizado\n      const createLogDto: CreateLogAuditoriaDto = {\n        tipo_operacao: TipoOperacao.ACCESS,\n        entidade_afetada: entidade,\n        entidade_id: entidadeId,\n        dados_anteriores: {},\n        dados_novos: {},\n        usuario_id: usuarioId,\n        ip_origem: ip,\n        user_agent: userAgent,\n        endpoint: endpoint,\n        metodo_http: metodo,\n        dados_sensiveis_acessados: camposSensiveis,\n        data_hora: timestamp || new Date(),\n        descricao: `Acesso a dados sensíveis (${camposSensiveis.join(', ')}) da entidade ${entidade}`,\n        validar: function (validationGroup?: string): void {\n          throw new Error('Function not implemented.');\n        }\n      };\n\n      // Use o repository customizado\n      const savedLog = await this.logAuditoriaRepository.create(createLogDto);\n\n      this.logger.debug(\n        `Acesso a dados sensíveis registrado com sucesso: ID ${savedLog.id}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar acesso a dados sensíveis: ${error.message}`,\n        error.stack,\n      );\n      // Rejeita o job para que seja tentado novamente (conforme configuração de backoff)\n      throw error;\n    }\n  }\n}"],"version":3}