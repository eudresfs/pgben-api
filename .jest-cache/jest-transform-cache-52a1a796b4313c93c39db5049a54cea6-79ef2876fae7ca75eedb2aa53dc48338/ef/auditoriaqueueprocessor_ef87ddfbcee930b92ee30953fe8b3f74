e5558e9f1769ffb6d6eaa8990129b015
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuditoriaQueueProcessor_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaQueueProcessor = void 0;
const common_1 = require("@nestjs/common");
const bull_1 = require("@nestjs/bull");
const bull_2 = require("bull");
const log_auditoria_repository_1 = require("../repositories/log-auditoria.repository");
const tipo_operacao_enum_1 = require("../../../enums/tipo-operacao.enum");
const bull_config_1 = require("../../../config/bull.config");
/**
 * Processador da Fila de Auditoria
 *
 * Responsável por processar os logs de auditoria enfileirados, garantindo
 * que o registro de operações seja feito de forma assíncrona sem impactar
 * na performance das requisições enquanto mantém a rastreabilidade
 * das operações para compliance com LGPD.
 *
 * Esta implementação não usa o decorador @Processor para evitar duplicação
 * de processadores. Em vez disso, registra o processador manualmente na fila.
 */
let AuditoriaQueueProcessor = AuditoriaQueueProcessor_1 = class AuditoriaQueueProcessor {
    logAuditoriaRepository;
    auditoriaQueue;
    logger = new common_1.Logger(AuditoriaQueueProcessor_1.name);
    constructor(
    // ← MUDANÇA: Use o repository customizado em vez do TypeORM direto
    logAuditoriaRepository, auditoriaQueue) {
        this.logAuditoriaRepository = logAuditoriaRepository;
        this.auditoriaQueue = auditoriaQueue;
    }
    /**
     * Registra o processador manualmente na fila quando o módulo é inicializado
     */
    async onModuleInit() {
        try {
            // Registra o processador de logs de auditoria
            if (!bull_config_1.registeredProcessors.has('registrar-log')) {
                await this.auditoriaQueue.process('registrar-log', async (job) => {
                    return this.processarLogAuditoria(job);
                });
                bull_config_1.registeredProcessors.add('registrar-log');
                this.logger.log('Processador registrar-log registrado com sucesso');
            }
            else {
                this.logger.warn('Processador registrar-log já registrado, ignorando registro duplicado');
            }
            // Registra o processador de acesso a dados sensíveis
            if (!bull_config_1.registeredProcessors.has('registrar-acesso-dados-sensiveis')) {
                await this.auditoriaQueue.process('registrar-acesso-dados-sensiveis', async (job) => {
                    return this.processarAcessoDadosSensiveis(job);
                });
                bull_config_1.registeredProcessors.add('registrar-acesso-dados-sensiveis');
                this.logger.log('Processador registrar-acesso-dados-sensiveis registrado com sucesso');
            }
            else {
                this.logger.warn('Processador registrar-acesso-dados-sensiveis já registrado, ignorando registro duplicado');
            }
        }
        catch (error) {
            this.logger.error(`Erro ao registrar processadores: ${error.message}`, error.stack);
        }
    }
    /**
     * Processa os logs de auditoria enfileirados
     *
     * @param job Trabalho contendo os dados do log de auditoria
     */
    async processarLogAuditoria(job) {
        try {
            const logData = job.data;
            this.logger.debug(`Processando log de auditoria: ${logData.entidade_afetada} - ${logData.tipo_operacao}`);
            // ← MUDANÇA: Use o método create do repository customizado
            const savedLog = await this.logAuditoriaRepository.create(logData);
            this.logger.debug(`Log de auditoria processado com sucesso: ID ${savedLog.id}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar log de auditoria: ${error.message}`, error.stack);
            // Rejeita o job para que seja tentado novamente (conforme configuração de backoff)
            throw error;
        }
    }
    /**
     * Processa os registros de acesso a dados sensíveis
     *
     * @param job Trabalho contendo os dados de acesso a dados sensíveis
     */
    async processarAcessoDadosSensiveis(job) {
        try {
            const { usuarioId, entidade, entidadeId, camposSensiveis, ip, userAgent, endpoint, metodo, timestamp, } = job.data;
            this.logger.debug(`Processando acesso a dados sensíveis: ${entidade} - Campos: ${camposSensiveis.join(', ')}`);
            // ← MUDANÇA: Crie um DTO e use o repository customizado
            const createLogDto = {
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.ACCESS,
                entidade_afetada: entidade,
                entidade_id: entidadeId,
                dados_anteriores: {},
                dados_novos: {},
                usuario_id: usuarioId,
                ip_origem: ip,
                user_agent: userAgent,
                endpoint: endpoint,
                metodo_http: metodo,
                dados_sensiveis_acessados: camposSensiveis,
                data_hora: timestamp || new Date(),
                descricao: `Acesso a dados sensíveis (${camposSensiveis.join(', ')}) da entidade ${entidade}`,
                validar: function (validationGroup) {
                    throw new Error('Function not implemented.');
                }
            };
            // Use o repository customizado
            const savedLog = await this.logAuditoriaRepository.create(createLogDto);
            this.logger.debug(`Acesso a dados sensíveis registrado com sucesso: ID ${savedLog.id}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar acesso a dados sensíveis: ${error.message}`, error.stack);
            // Rejeita o job para que seja tentado novamente (conforme configuração de backoff)
            throw error;
        }
    }
};
exports.AuditoriaQueueProcessor = AuditoriaQueueProcessor;
exports.AuditoriaQueueProcessor = AuditoriaQueueProcessor = AuditoriaQueueProcessor_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, bull_1.InjectQueue)('auditoria')),
    __metadata("design:paramtypes", [typeof (_a = typeof log_auditoria_repository_1.LogAuditoriaRepository !== "undefined" && log_auditoria_repository_1.LogAuditoriaRepository) === "function" ? _a : Object, typeof (_b = typeof bull_2.Queue !== "undefined" && bull_2.Queue) === "function" ? _b : Object])
], AuditoriaQueueProcessor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,