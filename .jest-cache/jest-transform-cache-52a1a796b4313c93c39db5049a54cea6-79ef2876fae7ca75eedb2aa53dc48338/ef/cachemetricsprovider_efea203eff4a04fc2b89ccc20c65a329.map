{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\cache\\cache-metrics.provider.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\cache\\cache-metrics.provider.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport { EnhancedMetricsService } from '../monitoring/enhanced-metrics.service';\n\n/**\n * Provedor de métricas para o sistema de cache\n *\n * Este provedor coleta métricas do sistema de cache e as envia para o serviço de métricas\n * para monitoramento e análise de performance.\n */\n@Injectable()\nexport class CacheMetricsProvider implements OnModuleInit {\n  private readonly logger = new Logger(CacheMetricsProvider.name);\n  private readonly cacheEnabled: boolean;\n  private readonly cacheType: string;\n  private readonly metricsInterval = 60000; // 1 minuto\n  private metricsTimer: NodeJS.Timeout;\n\n  // Contadores para cálculo de métricas\n  private cacheHits = 0;\n  private cacheMisses = 0;\n  private cacheFailures = 0;\n  private cacheRecoveryAttempts = 0;\n  private responseTimesMs: Map<string, number[]> = new Map();\n  private cacheOperations = {\n    get: 0,\n    set: 0,\n    del: 0,\n    clear: 0,\n  };\n\n  constructor(\n    private readonly metricsService: EnhancedMetricsService,\n    private readonly configService: ConfigService,\n    @InjectQueue('cache') private readonly cacheQueue: Queue,\n  ) {\n    // Verificar se o Redis está habilitado\n    this.cacheEnabled = this.configService.get('DISABLE_REDIS') !== 'true';\n    this.cacheType = this.cacheEnabled ? 'redis' : 'memory';\n  }\n\n  /**\n   * Inicializa a coleta periódica de métricas quando o módulo é inicializado\n   */\n  onModuleInit() {\n    this.startMetricsCollection();\n    this.logger.log(\n      `Iniciando coleta de métricas de cache (${this.cacheType})`,\n    );\n  }\n\n  /**\n   * Inicia a coleta periódica de métricas\n   */\n  private startMetricsCollection(): void {\n    // Coletar métricas imediatamente na inicialização\n    this.collectMetrics();\n\n    // Configurar coleta periódica\n    this.metricsTimer = setInterval(() => {\n      this.collectMetrics();\n    }, this.metricsInterval);\n  }\n\n  /**\n   * Coleta métricas do sistema de cache\n   */\n  private async collectMetrics(): Promise<void> {\n    try {\n      if (!this.cacheEnabled) {\n        // Se o cache estiver desabilitado, apenas reporta métricas zeradas\n        this.reportEmptyMetrics();\n        return;\n      }\n\n      // Coletar métricas do Redis via Bull\n      const jobCounts = await this.cacheQueue.getJobCounts();\n      const activeJobs = await this.cacheQueue.getJobs(['active']);\n      const waitingJobs = await this.cacheQueue.getJobs(['waiting']);\n      const completedJobs = await this.cacheQueue.getJobs(['completed']);\n      const failedJobs = await this.cacheQueue.getJobs(['failed']);\n\n      // Calcular tamanho aproximado do cache em bytes\n      let totalSizeBytes = 0;\n      const allJobs = [...activeJobs, ...waitingJobs, ...completedJobs];\n      for (const job of allJobs) {\n        // Estimar tamanho baseado no JSON stringificado\n        const jobSize = JSON.stringify(job.data).length;\n        totalSizeBytes += jobSize;\n      }\n\n      // Atualizar métricas\n      this.metricsService.updateCacheSize(totalSizeBytes, this.cacheType);\n\n      // Calcular e atualizar taxa de acertos se houver operações\n      const totalOps = this.cacheHits + this.cacheMisses;\n      if (totalOps > 0) {\n        const hitRatio = this.cacheHits / totalOps;\n        this.metricsService.updateCacheHitRatio(hitRatio, this.cacheType);\n      }\n\n      // Registrar operações acumuladas\n      Object.entries(this.cacheOperations).forEach(([operation, count]) => {\n        if (count > 0) {\n          this.metricsService.recordCacheOperation(\n            operation,\n            true, // assumimos sucesso para métricas acumuladas\n            this.cacheType,\n          );\n          // Resetar contador após registrar\n          this.cacheOperations[operation] = 0;\n        }\n      });\n\n      // Registrar falhas e tentativas de recuperação\n      if (this.cacheFailures > 0) {\n        this.metricsService.recordCacheFailures(\n          this.cacheFailures,\n          this.cacheType,\n        );\n        this.cacheFailures = 0;\n      }\n\n      if (this.cacheRecoveryAttempts > 0) {\n        this.metricsService.recordCacheRecoveryAttempts(\n          this.cacheRecoveryAttempts,\n          this.cacheType,\n        );\n        this.cacheRecoveryAttempts = 0;\n      }\n\n      // Registrar tempos de resposta\n      this.responseTimesMs.forEach((times, key) => {\n        if (times.length > 0) {\n          const avgTime =\n            times.reduce((sum, time) => sum + time, 0) / times.length;\n          this.metricsService.recordCacheResponseTime(\n            avgTime,\n            key,\n            this.cacheType,\n          );\n        }\n      });\n      this.responseTimesMs.clear();\n\n      // Resetar contadores\n      this.cacheHits = 0;\n      this.cacheMisses = 0;\n\n      this.logger.debug(\n        `Métricas de cache coletadas: ${allJobs.length} itens, ${totalSizeBytes} bytes`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao coletar métricas de cache: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Reporta métricas vazias quando o cache está desabilitado\n   */\n  private reportEmptyMetrics(): void {\n    this.metricsService.updateCacheSize(0, this.cacheType);\n    this.metricsService.updateCacheHitRatio(0, this.cacheType);\n  }\n\n  /**\n   * Registra um hit no cache\n   */\n  registerCacheHit(): void {\n    this.cacheHits++;\n    this.cacheOperations.get++;\n  }\n\n  /**\n   * Registra um miss no cache\n   */\n  registerCacheMiss(): void {\n    this.cacheMisses++;\n    this.cacheOperations.get++;\n  }\n\n  /**\n   * Registra uma operação de set no cache\n   */\n  registerCacheSet(): void {\n    this.cacheOperations.set++;\n  }\n\n  /**\n   * Registra uma operação de delete no cache\n   */\n  registerCacheDelete(): void {\n    this.cacheOperations.del++;\n  }\n\n  /**\n   * Registra uma operação de clear no cache\n   */\n  registerCacheClear(): void {\n    this.cacheOperations.clear++;\n  }\n\n  /**\n   * Registra uma falha no cache\n   */\n  registerCacheFailure(): void {\n    this.cacheFailures++;\n    this.metricsService.recordCacheOperation('failure', false, this.cacheType);\n  }\n\n  /**\n   * Registra uma tentativa de recuperação do circuit breaker\n   */\n  registerCacheRecoveryAttempt(): void {\n    this.cacheRecoveryAttempts++;\n    this.metricsService.recordCacheOperation('recovery', true, this.cacheType);\n  }\n\n  /**\n   * Registra o tempo de resposta de uma operação de cache\n   * @param key Chave do cache\n   * @param timeMs Tempo em milissegundos (opcional)\n   */\n  registerCacheResponseTime(key: string, timeMs?: number): void {\n    const time = timeMs || 0;\n    if (!this.responseTimesMs.has(key)) {\n      this.responseTimesMs.set(key, []);\n    }\n    const times = this.responseTimesMs.get(key);\n    if (times) {\n      times.push(time);\n    }\n  }\n}\n"],"version":3}