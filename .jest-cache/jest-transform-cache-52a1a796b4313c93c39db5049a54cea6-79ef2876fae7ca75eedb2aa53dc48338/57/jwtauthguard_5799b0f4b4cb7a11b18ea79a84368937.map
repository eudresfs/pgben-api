{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\guards\\jwt-auth.guard.ts","mappings":";;;;;;;;;;;;;AAAA,2CAIwB;AACxB,uCAAyC;AACzC,+CAA6C;AAC7C,qEAA+D;AAE/D;;;GAGG;AAEI,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,IAAA,oBAAS,EAAC,KAAK,CAAC;IAC5B;IAApB,YAAoB,SAAoB;QACtC,KAAK,EAAE,CAAC;QADU,cAAS,GAAT,SAAS,CAAW;IAExC,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,OAAyB;QACnC,mDAAmD;QACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAU,gCAAa,EAAE;YACxE,OAAO,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,QAAQ,EAAE;SACnB,CAAC,CAAC;QAEH,oDAAoD;QACpD,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,8CAA8C;QAC9C,OAAO,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,aAAa,CAAC,GAAQ,EAAE,IAAS;QAC/B,wEAAwE;QACxE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;YACjB,MAAM,GAAG,IAAI,IAAI,8BAAqB,CAAC,gBAAgB,CAAC,CAAC;QAC3D,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAtCY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;yDAEoB,gBAAS,oBAAT,gBAAS;GAD7B,YAAY,CAsCxB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\guards\\jwt-auth.guard.ts"],"sourcesContent":["import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from '../decorators/public.decorator';\n\n/**\n * Guarda de autenticação JWT que respeita o decorador @Public()\n * Endpoints marcados como públicos não requerem autenticação\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * Verifica se o endpoint requer autenticação\n   * @param context Contexto de execução\n   * @returns true se o endpoint não requer autenticação ou se o usuário está autenticado\n   */\n  canActivate(context: ExecutionContext) {\n    // Verifica se o endpoint está marcado como público\n    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n\n    // Se for público, permite o acesso sem autenticação\n    if (isPublic) {\n      return true;\n    }\n\n    // Caso contrário, verifica a autenticação JWT\n    return super.canActivate(context);\n  }\n\n  /**\n   * Manipula erros de autenticação\n   * @param err Erro ocorrido\n   * @returns Nunca retorna, sempre lança uma exceção\n   */\n  handleRequest(err: any, user: any) {\n    // Se ocorrer um erro ou o usuário não for encontrado, lança uma exceção\n    if (err || !user) {\n      throw err || new UnauthorizedException('Não autorizado');\n    }\n    return user;\n  }\n}\n"],"version":3}