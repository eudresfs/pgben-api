{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\interceptors\\cidadao-audit.interceptor.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\interceptors\\cidadao-audit.interceptor.ts"],"sourcesContent":["import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n  Logger,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Request } from 'express';\nimport { AuditoriaQueueService } from '../../auditoria/services/auditoria-queue.service';\nimport { TipoOperacao } from '../../../enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../../auditoria/dto/create-log-auditoria.dto';\n\n/**\n * Interceptor para auditoria de acesso a dados sensíveis de cidadãos\n *\n * Registra todas as operações de acesso a dados sensíveis para compliance com LGPD\n *\n * NOTA DE PERFORMANCE: Este interceptor foi identificado como possível causa de lentidão\n * em endpoints críticos. Versão otimizada para diagnóstico e performance.\n */\n@Injectable()\nexport class CidadaoAuditInterceptor implements NestInterceptor {\n  private readonly logger = new Logger(CidadaoAuditInterceptor.name);\n\n  constructor(private readonly auditoriaQueueService: AuditoriaQueueService) {}\n\n  /**\n   * Intercepta requisições para auditoria LGPD, usando padrão totalmente não-bloqueante\n   * \n   * OTIMIZAÇÃO DE PERFORMANCE:\n   * - Processo executado em segundo plano com setTimeout\n   * - Não bloqueia ou atrasa a resposta para o usuário\n   * - Logging mínimo para evitar sobrecarga do log\n   * \n   * @param context Contexto da execução\n   * @param next Handler para a próxima etapa\n   * @returns Observable da resposta processada\n   */\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    // Capturar dados básicos da requisição\n    const request = context.switchToHttp().getRequest<Request>();\n    const { method, url } = request;\n    \n    // Verificação preliminar rápida para determinar se a operação precisa ser auditada\n    // Esta etapa é mantida síncrona por ser muito rápida (microssegundos)\n    const needsAudit = this.isSensitiveOperation(method, url);\n    \n    // Se não precisar de auditoria, simplesmente prosseguir\n    if (!needsAudit) {\n      return next.handle();\n    }\n    \n    // Capturar timestamp inicial para medição de tempo\n    const startTime = Date.now();\n    const requestId = `${method}-${url.substring(0, 30)}-${startTime}`;\n    \n    // Processar a requisição normalmente e fazer a auditoria em segundo plano\n    return next.handle().pipe(\n      tap({\n        next: (data) => {\n          // Executar auditoria em segundo plano (não-bloqueante)\n          setTimeout(() => {\n            try {\n              const duration = Date.now() - startTime;\n              const { params, query, body, user } = request;\n              const userId = user?.id || 'anônimo';\n              const userRole = user?.role_id || 'não autenticado';\n              \n              // Log mínimo para diagnóstico\n              if (duration > 500) {\n                this.logger.log(\n                  `AUDIT-SUCCESS [${requestId}] Duração: ${duration}ms, Usuário: ${userId}`,\n                );\n              }\n              \n              // Registrar em sistema de auditoria\n              this.registerAuditEvent({\n                userId,\n                userRole,\n                method,\n                url,\n                params,\n                query,\n                body: this.sanitizeBody(body),\n                timestamp: new Date(),\n                duration,\n                status: 'success',\n                requestId,\n              });\n            } catch (auditError) {\n              // Erro na auditoria não deve afetar o fluxo principal\n              this.logger.warn(`Erro na auditoria [${requestId}]: ${auditError.message}`);\n            }\n          }, 10); // Pequeno delay para garantir que não bloqueie\n        },\n        error: (error) => {\n          // Auditoria de erro em segundo plano (não-bloqueante)\n          setTimeout(() => {\n            try {\n              const duration = Date.now() - startTime;\n              const { params, query, body, user } = request;\n              const userId = user?.id || 'anônimo';\n              const userRole = user?.role_id || 'não autenticado';\n              \n              // Log mínimo para erros importantes\n              this.logger.warn(\n                `AUDIT-ERROR [${requestId}] Duração: ${duration}ms, Erro: ${error.message.substring(0, 50)}`,\n              );\n              \n              // Registrar erro em sistema de auditoria\n              this.registerAuditEvent({\n                userId,\n                userRole,\n                method,\n                url,\n                params,\n                query,\n                body: this.sanitizeBody(body),\n                timestamp: new Date(),\n                duration,\n                status: 'error',\n                errorMessage: error.message,\n                requestId,\n              });\n            } catch (auditError) {\n              // Erro na auditoria não deve afetar o fluxo principal\n              this.logger.warn(`Erro na auditoria de erro [${requestId}]: ${auditError.message}`);\n            }\n          }, 10); // Pequeno delay para garantir que não bloqueie\n        },\n      }),\n    );\n  }\n\n  /**\n   * Verifica se a operação é sensível do ponto de vista da LGPD\n   */\n  private isSensitiveOperation(method: string, url: string): boolean {\n    // Operações de leitura de dados pessoais\n    if (\n      url.includes('/v1/cidadao/') &&\n      (method === 'GET' || method === 'POST')\n    ) {\n      return true;\n    }\n\n    // Operações de modificação de dados pessoais\n    if (\n      url.includes('/v1/cidadao') &&\n      (method === 'PUT' || method === 'DELETE')\n    ) {\n      return true;\n    }\n\n    // Busca por CPF ou NIS (dados sensíveis)\n    if (url.includes('/v1/cidadao/cpf/') || url.includes('/v1/cidadao/nis/')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Extrai o ID da entidade da URL\n   */\n  private extractEntityId(url: string): string {\n    // Padrão para extrair UUID da URL\n    const uuidPattern =\n      /\\/([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})/i;\n    const match = url.match(uuidPattern);\n\n    if (match && match[1]) {\n      return match[1];\n    }\n\n    // Se não encontrou UUID, tenta extrair CPF ou NIS\n    if (url.includes('/cpf/')) {\n      const cpfMatch = url.match(/\\/cpf\\/([^/]+)/);\n      return cpfMatch ? cpfMatch[1] : 'desconhecido';\n    }\n\n    if (url.includes('/nis/')) {\n      const nisMatch = url.match(/\\/nis\\/([^/]+)/);\n      return nisMatch ? nisMatch[1] : 'desconhecido';\n    }\n\n    return 'desconhecido';\n  }\n\n  /**\n   * Verifica se o corpo da requisição contém dados sensíveis\n   */\n  private containsSensitiveData(body: any): boolean {\n    if (!body) {return false;}\n\n    const sensitiveFields = [\n      'cpf',\n      'nis',\n      'rg',\n      'data_nascimento',\n      'renda',\n      'composicao_familiar',\n    ];\n\n    return sensitiveFields.some((field) => field in body);\n  }\n\n  /**\n   * Extrai os campos sensíveis do corpo da requisição\n   */\n  private extractSensitiveFields(body: any): string[] {\n    if (!body) {return [];}\n\n    const sensitiveFields = [\n      'cpf',\n      'nis',\n      'rg',\n      'data_nascimento',\n      'renda',\n      'composicao_familiar',\n      'telefone',\n      'email',\n      'endereco',\n    ];\n\n    return sensitiveFields.filter((field) => field in body);\n  }\n\n  /**\n   * Remove dados sensíveis do corpo da requisição para o log de auditoria\n   */\n  private sanitizeBody(body: any): any {\n    if (!body) {return null;}\n\n    const sanitized = { ...body };\n\n    // Mascarar dados sensíveis\n    if (sanitized.cpf) {\n      sanitized.cpf = this.maskCPF(sanitized.cpf);\n    }\n\n    if (sanitized.nis) {\n      sanitized.nis = this.maskNIS(sanitized.nis);\n    }\n\n    if (sanitized.rg) {\n      sanitized.rg = '***MASKED***';\n    }\n\n    if (sanitized.telefone) {\n      sanitized.telefone = '***MASKED***';\n    }\n\n    if (sanitized.email) {\n      sanitized.email = '***MASKED***';\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Mascara o CPF para exibir apenas os primeiros e últimos dígitos\n   */\n  private maskCPF(cpf: string): string {\n    if (!cpf) {return '';}\n\n    const cpfLimpo = cpf.replace(/\\D/g, '');\n    if (cpfLimpo.length !== 11) {return '***INVALID***';}\n\n    return `${cpfLimpo.substring(0, 3)}.***.${cpfLimpo.substring(9)}`;\n  }\n\n  /**\n   * Mascara o NIS para exibir apenas os primeiros e últimos dígitos\n   */\n  private maskNIS(nis: string): string {\n    if (!nis) {return '';}\n\n    const nisLimpo = nis.replace(/\\D/g, '');\n    if (nisLimpo.length !== 11) {return '***INVALID***';}\n\n    return `${nisLimpo.substring(0, 3)}.***.${nisLimpo.substring(9)}`;\n  }\n\n  /**\n   * Registra evento de auditoria no sistema\n   * (Implementação futura - integração com sistema de auditoria)\n   */\n  /**\n   * Versão otimizada e não bloqueante do registro de auditoria\n   * Esta implementação não bloqueia o fluxo principal da aplicação\n   */\n  private registerAuditEvent(event: any): void {\n    // Execute de forma não bloqueante em um processo assíncrono separado\n    setTimeout(async () => {\n      const requestId = `${event.method}-${event.url}-${Date.now()}`;\n      console.time(`AUDIT-EVENT-${requestId}`);\n      \n      try {\n        // Versão simplificada para diagnóstico\n        const logAuditoriaDto = new CreateLogAuditoriaDto();\n        \n        // Configuração básica\n        logAuditoriaDto.tipo_operacao = event.method === 'GET' ? TipoOperacao.READ : \n                                       event.method === 'POST' ? TipoOperacao.CREATE : \n                                       event.method === 'DELETE' ? TipoOperacao.DELETE : \n                                       TipoOperacao.UPDATE;\n        \n        logAuditoriaDto.entidade_afetada = 'Cidadao';\n        logAuditoriaDto.entidade_id = this.extractEntityId(event.url);\n        logAuditoriaDto.usuario_id = event.userId;\n        logAuditoriaDto.endpoint = event.url;\n        logAuditoriaDto.metodo_http = event.method;\n        \n        // Enfileirar sem aguardar resultado (fire and forget)\n        this.auditoriaQueueService.enfileirarLogAuditoria(logAuditoriaDto)\n          .catch(err => this.logger.warn(`Erro em auditoria: ${err.message}`));\n        \n      } catch (error) {\n        // Apenas log, não interrompe o fluxo principal\n        this.logger.warn(`Erro ao registrar auditoria: ${error.message}`);\n      } finally {\n        console.timeEnd(`AUDIT-EVENT-${requestId}`);\n      }\n    }, 5); // Executa após 5ms para não bloquear\n  }\n}\n"],"version":3}