{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-funeral.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-funeral.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { DadosFuneral } from '../../../entities/dados-funeral.entity';\nimport { ParentescoEnum, TipoUrnaEnum } from '@/enums';\n\n/**\n * Repositório customizado para DadosFuneral\n * Extende o repositório base do TypeORM com métodos específicos\n */\n@Injectable()\nexport class DadosFuneralRepository extends Repository<DadosFuneral> {\n  constructor(private dataSource: DataSource) {\n    super(DadosFuneral, dataSource.createEntityManager());\n  }\n\n  /**\n   * Buscar dados de funeral por solicitação com relacionamentos\n   */\n  async findBySolicitacaoWithRelations(\n    solicitacaoId: string,\n  ): Promise<DadosFuneral | null> {\n    return this.findOne({\n      where: { solicitacao_id: solicitacaoId },\n      relations: [\n        'solicitacao',\n        'solicitacao.cidadao',\n        'solicitacao.tipo_beneficio',\n      ],\n    });\n  }\n\n  /**\n   * Buscar dados por período de óbito\n   */\n  async findByPeriodoObito(\n    dataInicio: Date,\n    dataFim: Date,\n  ): Promise<DadosFuneral[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.data_obito BETWEEN :dataInicio AND :dataFim', {\n        dataInicio,\n        dataFim,\n      })\n      .orderBy('dados.data_obito', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por grau de parentesco\n   */\n  async findByGrauParentesco(\n    grauParentesco: ParentescoEnum,\n  ): Promise<DadosFuneral[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.grau_parentesco_requerente = :grauParentesco', {\n        grauParentesco,\n      })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por tipo de urna\n   */\n  async findByTipoUrna(tipoUrna: TipoUrnaEnum): Promise<DadosFuneral[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.tipo_urna_necessaria = :tipoUrna', { tipoUrna })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por local de óbito\n   */\n  async findByLocalObito(localObito: string): Promise<DadosFuneral[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('LOWER(dados.local_obito) LIKE LOWER(:localObito)', {\n        localObito: `%${localObito}%`,\n      })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por período de autorização\n   */\n  async findByPeriodoAutorizacao(\n    dataInicio: Date,\n    dataFim: Date,\n  ): Promise<DadosFuneral[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.data_autorizacao BETWEEN :dataInicio AND :dataFim', {\n        dataInicio,\n        dataFim,\n      })\n      .orderBy('dados.data_autorizacao', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar estatísticas de funeral\n   */\n  async getEstatisticas(): Promise<{\n    totalObitos: number;\n    porGrauParentesco: Record<string, number>;\n    porTipoUrna: Record<string, number>;\n    porLocalObito: Record<string, number>;\n    tempoMedioAutorizacao: number;\n  }> {\n    const totalObitos = await this.count();\n\n    // Estatísticas por grau de parentesco\n    const porGrauResult = await this.createQueryBuilder('dados')\n      .select('dados.grau_parentesco_requerente', 'grau')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.grau_parentesco_requerente')\n      .getRawMany();\n\n    const porGrauParentesco = porGrauResult.reduce((acc, item) => {\n      acc[item.grau] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por tipo de urna\n    const porUrnaResult = await this.createQueryBuilder('dados')\n      .select('dados.tipo_urna_necessaria', 'urna')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.tipo_urna_necessaria')\n      .getRawMany();\n\n    const porTipoUrna = porUrnaResult.reduce((acc, item) => {\n      acc[item.urna] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por local de óbito (top 10)\n    const porLocalResult = await this.createQueryBuilder('dados')\n      .select('dados.local_obito', 'local')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.local_obito')\n      .orderBy('quantidade', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    const porLocalObito = porLocalResult.reduce((acc, item) => {\n      acc[item.local] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Tempo médio entre óbito e autorização (em dias)\n    const tempoMedioResult = await this.createQueryBuilder('dados')\n      .select(\n        'AVG(EXTRACT(DAY FROM (dados.data_autorizacao - dados.data_obito)))',\n        'tempoMedio',\n      )\n      .where('dados.data_autorizacao IS NOT NULL')\n      .andWhere('dados.data_obito IS NOT NULL')\n      .getRawOne();\n\n    const tempoMedioAutorizacao = parseFloat(tempoMedioResult.tempoMedio) || 0;\n\n    return {\n      totalObitos,\n      porGrauParentesco,\n      porTipoUrna,\n      porLocalObito,\n      tempoMedioAutorizacao,\n    };\n  }\n\n  /**\n   * Verificar duplicatas por dados do falecido\n   */\n  async findDuplicatesByFalecido(\n    nomeFalecido: string,\n    dataObito: Date,\n    excludeId?: string,\n  ): Promise<DadosFuneral[]> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .where('LOWER(dados.nome_completo_falecido) = LOWER(:nomeFalecido)', {\n        nomeFalecido,\n      })\n      .andWhere('dados.data_obito = :dataObito', { dataObito });\n\n    if (excludeId) {\n      query.andWhere('dados.id != :excludeId', { excludeId });\n    }\n\n    return query.getMany();\n  }\n\n  /**\n   * Buscar dados de funeral com filtros avançados\n   */\n  async findWithFilters(filters: {\n    dataObitoInicio?: Date;\n    dataObitoFim?: Date;\n    dataAutorizacaoInicio?: Date;\n    dataAutorizacaoFim?: Date;\n    grauParentesco?: ParentescoEnum;\n    tipoUrna?: TipoUrnaEnum;\n    localObito?: string;\n    nomeFalecido?: string;\n    page?: number;\n    limit?: number;\n  }): Promise<{ data: DadosFuneral[]; total: number }> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao');\n\n    if (filters.dataObitoInicio && filters.dataObitoFim) {\n      query.andWhere(\n        'dados.data_obito BETWEEN :dataObitoInicio AND :dataObitoFim',\n        {\n          dataObitoInicio: filters.dataObitoInicio,\n          dataObitoFim: filters.dataObitoFim,\n        },\n      );\n    }\n\n    if (filters.dataAutorizacaoInicio && filters.dataAutorizacaoFim) {\n      query.andWhere(\n        'dados.data_autorizacao BETWEEN :dataAutorizacaoInicio AND :dataAutorizacaoFim',\n        {\n          dataAutorizacaoInicio: filters.dataAutorizacaoInicio,\n          dataAutorizacaoFim: filters.dataAutorizacaoFim,\n        },\n      );\n    }\n\n    if (filters.grauParentesco) {\n      query.andWhere('dados.grau_parentesco_requerente = :grauParentesco', {\n        grauParentesco: filters.grauParentesco,\n      });\n    }\n\n    if (filters.tipoUrna) {\n      query.andWhere('dados.tipo_urna_necessaria = :tipoUrna', {\n        tipoUrna: filters.tipoUrna,\n      });\n    }\n\n    if (filters.localObito) {\n      query.andWhere('LOWER(dados.local_obito) LIKE LOWER(:localObito)', {\n        localObito: `%${filters.localObito}%`,\n      });\n    }\n\n    if (filters.nomeFalecido) {\n      query.andWhere(\n        'LOWER(dados.nome_completo_falecido) LIKE LOWER(:nomeFalecido)',\n        {\n          nomeFalecido: `%${filters.nomeFalecido}%`,\n        },\n      );\n    }\n\n    const total = await query.getCount();\n\n    if (filters.page && filters.limit) {\n      query.skip((filters.page - 1) * filters.limit).take(filters.limit);\n    }\n\n    query.orderBy('dados.data_obito', 'DESC');\n\n    const data = await query.getMany();\n\n    return { data, total };\n  }\n\n  /**\n   * Buscar óbitos por mês para relatórios\n   */\n  async getObitosPorMes(\n    ano: number,\n  ): Promise<{ mes: number; quantidade: number }[]> {\n    return this.createQueryBuilder('dados')\n      .select('EXTRACT(MONTH FROM dados.data_obito)', 'mes')\n      .addSelect('COUNT(*)', 'quantidade')\n      .where('EXTRACT(YEAR FROM dados.data_obito) = :ano', { ano })\n      .groupBy('EXTRACT(MONTH FROM dados.data_obito)')\n      .orderBy('mes', 'ASC')\n      .getRawMany()\n      .then((results) =>\n        results.map((item) => ({\n          mes: parseInt(item.mes),\n          quantidade: parseInt(item.quantidade),\n        })),\n      );\n  }\n}\n"],"version":3}