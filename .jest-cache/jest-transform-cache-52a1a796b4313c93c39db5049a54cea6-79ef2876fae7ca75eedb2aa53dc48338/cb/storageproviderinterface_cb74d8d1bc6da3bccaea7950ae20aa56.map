{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\interfaces\\storage-provider.interface.ts","mappings":";;;AAmGA;;GAEG;AACH,IAAY,mBAIX;AAJD,WAAY,mBAAmB;IAC7B,sCAAe,CAAA;IACf,gCAAS,CAAA;IACT,sCAAe,CAAA;AACjB,CAAC,EAJW,mBAAmB,mCAAnB,mBAAmB,QAI9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\interfaces\\storage-provider.interface.ts"],"sourcesContent":["/**\n * Interface para provedores de armazenamento\n *\n * Define os métodos que devem ser implementados por qualquer\n * provedor de armazenamento de documentos (local, S3, MinIO, etc.)\n */\nexport interface StorageProvider {\n  /**\n   * Nome do provedor de armazenamento\n   */\n  readonly nome: string;\n\n  /**\n   * Salva um arquivo no armazenamento\n   * @param buffer Buffer do arquivo\n   * @param nomeArquivo Nome do arquivo\n   * @param mimetype Tipo MIME do arquivo\n   * @param metadados Metadados opcionais do arquivo\n   * @returns Caminho ou identificador do arquivo armazenado\n   */\n  salvarArquivo(\n    buffer: Buffer,\n    nomeArquivo: string,\n    mimetype: string,\n    metadados?: Record<string, any>,\n  ): Promise<string>;\n\n  /**\n   * Obtém um arquivo do armazenamento\n   * @param caminho Caminho ou identificador do arquivo\n   * @returns Buffer do arquivo\n   */\n  obterArquivo(caminho: string): Promise<Buffer>;\n\n  /**\n   * Remove um arquivo do armazenamento\n   * @param caminho Caminho ou identificador do arquivo\n   */\n  removerArquivo(caminho: string): Promise<void>;\n  /**\n   * Faz upload de um arquivo (alias para salvarArquivo)\n   * @param buffer Buffer do arquivo\n   * @param key Chave única para identificar o arquivo\n   * @param mimetype Tipo MIME do arquivo\n   * @param metadata Metadados opcionais do arquivo\n   * @returns Caminho ou URL do arquivo armazenado\n   */\n  upload(\n    buffer: Buffer,\n    key: string,\n    mimetype: string,\n    metadata?: Record<string, any>,\n  ): Promise<string>;\n\n  /**\n   * Faz download de um arquivo (alias para obterArquivo)\n   * @param key Chave do arquivo\n   * @returns Buffer do arquivo\n   */\n  download(key: string): Promise<Buffer>;\n\n  /**\n   * Remove um arquivo (alias para removerArquivo)\n   * @param key Chave do arquivo\n   */\n  delete(key: string): Promise<void>;\n\n  /**\n   * Obtém a URL de acesso a um arquivo\n   * @param key Chave do arquivo\n   * @param expiresIn Tempo de expiração da URL em segundos (opcional)\n   * @returns URL de acesso ao arquivo\n   */\n  getUrl(key: string, expiresIn?: number): string | Promise<string>;\n\n  /**\n   * Verifica se um arquivo existe\n   * @param key Chave do arquivo\n   * @returns true se o arquivo existe, false caso contrário\n   */\n  exists(key: string): Promise<boolean>;\n\n  /**\n   * Copia um arquivo de uma chave para outra\n   * @param sourceKey Chave do arquivo de origem\n   * @param destinationKey Chave do arquivo de destino\n   * @returns Caminho ou URL do arquivo copiado\n   */\n  copy(sourceKey: string, destinationKey: string): Promise<string>;\n\n  /**\n   * Lista arquivos com um prefixo específico\n   * @param prefix Prefixo para filtrar arquivos\n   * @param maxKeys Número máximo de chaves a retornar\n   * @returns Lista de chaves de arquivos\n   */\n  list(prefix: string, maxKeys?: number): Promise<string[]>;\n}\n\n/**\n * Tipos de provedores de armazenamento suportados\n */\nexport enum TipoStorageProvider {\n  LOCAL = 'local',\n  S3 = 's3',\n  MINIO = 'minio',\n}\n"],"version":3}