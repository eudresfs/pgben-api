419fe1de6d25a7844dcc9f600f978516
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const auditoria_service_1 = require("../../../../src/modules/auditoria/services/auditoria.service");
const log_auditoria_entity_1 = require("../../../../src/modules/auditoria/entities/log-auditoria.entity");
const tipo_operacao_enum_1 = require("../../../../src/modules/auditoria/enums/tipo-operacao.enum");
const create_log_auditoria_dto_1 = require("../../../../src/modules/auditoria/dto/create-log-auditoria.dto");
const common_1 = require("@nestjs/common");
describe('AuditoriaService', () => {
    let service;
    let repository;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auditoria_service_1.AuditoriaService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria),
                    useValue: {
                        create: jest.fn().mockImplementation((dto) => dto),
                        save: jest.fn().mockResolvedValue({ id: 'mock-log-id' }),
                        find: jest.fn().mockResolvedValue([]),
                        findOne: jest.fn().mockResolvedValue(null),
                        update: jest.fn().mockResolvedValue({ affected: 1 }),
                        delete: jest.fn().mockResolvedValue({ affected: 1 }),
                    },
                },
            ],
        }).compile();
        service = module.get(auditoria_service_1.AuditoriaService);
        repository = module.get((0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria));
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
    describe('create', () => {
        it('deve criar um novo log de auditoria', async () => {
            const createDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            createDto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.CREATE;
            createDto.entidade_afetada = 'Usuario';
            createDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';
            createDto.descricao = 'Criação de novo usuário';
            createDto.ip_origem = '192.168.1.1';
            createDto.usuario_id = 'mock-user-id';
            const result = await service.create(createDto);
            expect(repository.create).toHaveBeenCalledWith(createDto);
            expect(repository.save).toHaveBeenCalled();
            expect(result).toEqual({ id: 'mock-log-id' });
        });
        it('deve validar os dados antes de criar', async () => {
            const invalidDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            // Não definimos campos obrigatórios
            // Mockamos o método de validação para simular falha
            jest
                .spyOn(create_log_auditoria_dto_1.CreateLogAuditoriaDto.prototype, 'validar')
                .mockImplementation(() => {
                throw new Error('Dados inválidos');
            });
            await expect(service.create(invalidDto)).rejects.toThrow('Dados inválidos');
            expect(repository.save).not.toHaveBeenCalled();
        });
    });
    describe('findAll', () => {
        it('deve retornar uma lista de logs de auditoria', async () => {
            const mockLogs = [
                {
                    id: 'log-1',
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'Usuario',
                    created_at: new Date(),
                },
                {
                    id: 'log-2',
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
                    entidade_afetada: 'Documento',
                    created_at: new Date(),
                },
            ];
            jest
                .spyOn(repository, 'find')
                .mockResolvedValueOnce(mockLogs);
            const result = await service.findAll();
            expect(repository.find).toHaveBeenCalled();
            expect(result).toEqual(mockLogs);
        });
        it('deve aplicar filtros quando fornecidos', async () => {
            const filtros = {
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'Usuario',
                usuario_id: 'user-1',
                data_inicio: new Date('2023-01-01'),
                data_fim: new Date('2023-01-31'),
            };
            await service.findAll(filtros);
            expect(repository.find).toHaveBeenCalledWith({
                where: expect.objectContaining({
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'Usuario',
                    usuario_id: 'user-1',
                    created_at: expect.any(Object),
                }),
                order: { created_at: 'DESC' },
            });
        });
    });
    describe('findOne', () => {
        it('deve retornar um log de auditoria pelo ID', async () => {
            const mockLog = {
                id: 'log-1',
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'Usuario',
                created_at: new Date(),
            };
            jest
                .spyOn(repository, 'findOne')
                .mockResolvedValueOnce(mockLog);
            const result = await service.findOne('log-1');
            expect(repository.findOne).toHaveBeenCalledWith({
                where: { id: 'log-1' },
            });
            expect(result).toEqual(mockLog);
        });
        it('deve lançar NotFoundException quando o log não é encontrado', async () => {
            jest.spyOn(repository, 'findOne').mockResolvedValueOnce(null);
            await expect(service.findOne('non-existent-id')).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('update', () => {
        it('deve atualizar um log de auditoria existente', async () => {
            const updateDto = {
                descricao: 'Descrição atualizada',
            };
            const mockLog = {
                id: 'log-1',
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'Usuario',
                descricao: 'Descrição original',
                created_at: new Date(),
            };
            jest
                .spyOn(repository, 'findOne')
                .mockResolvedValueOnce(mockLog);
            await service.update('log-1', updateDto);
            expect(repository.update).toHaveBeenCalledWith('log-1', updateDto);
        });
        it('deve lançar NotFoundException quando o log não é encontrado', async () => {
            jest.spyOn(repository, 'findOne').mockResolvedValueOnce(null);
            await expect(service.update('non-existent-id', {})).rejects.toThrow(common_1.NotFoundException);
            expect(repository.update).not.toHaveBeenCalled();
        });
    });
    describe('remove', () => {
        it('deve remover um log de auditoria existente', async () => {
            const mockLog = {
                id: 'log-1',
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'Usuario',
                created_at: new Date(),
            };
            jest
                .spyOn(repository, 'findOne')
                .mockResolvedValueOnce(mockLog);
            await service.remove('log-1');
            expect(repository.delete).toHaveBeenCalledWith('log-1');
        });
        it('deve lançar NotFoundException quando o log não é encontrado', async () => {
            jest.spyOn(repository, 'findOne').mockResolvedValueOnce(null);
            await expect(service.remove('non-existent-id')).rejects.toThrow(common_1.NotFoundException);
            expect(repository.delete).not.toHaveBeenCalled();
        });
    });
    describe('findByEntidade', () => {
        it('deve retornar logs de auditoria para uma entidade específica', async () => {
            const mockLogs = [
                {
                    id: 'log-1',
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'Usuario',
                    entidade_id: 'user-1',
                    created_at: new Date(),
                },
                {
                    id: 'log-2',
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
                    entidade_afetada: 'Usuario',
                    entidade_id: 'user-1',
                    created_at: new Date(),
                },
            ];
            jest
                .spyOn(repository, 'find')
                .mockResolvedValueOnce(mockLogs);
            const result = await service.findByEntidade('Usuario', 'user-1');
            expect(repository.find).toHaveBeenCalledWith({
                where: {
                    entidade_afetada: 'Usuario',
                    entidade_id: 'user-1',
                },
                order: { created_at: 'DESC' },
            });
            expect(result).toEqual(mockLogs);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFx0ZXN0XFxtb2R1bGVzXFxhdWRpdG9yaWFcXHNlcnZpY2VzXFxhdWRpdG9yaWEuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXNEO0FBQ3RELDZDQUFxRDtBQUVyRCxvR0FBZ0c7QUFDaEcsMEdBQStGO0FBQy9GLG1HQUEwRjtBQUMxRiw2R0FBdUc7QUFDdkcsMkNBQW1EO0FBRW5ELFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsSUFBSSxPQUF5QixDQUFDO0lBQzlCLElBQUksVUFBb0MsQ0FBQztJQUV6QyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxNQUFNLEdBQWtCLE1BQU0sY0FBSSxDQUFDLG1CQUFtQixDQUFDO1lBQzNELFNBQVMsRUFBRTtnQkFDVCxvQ0FBZ0I7Z0JBQ2hCO29CQUNFLE9BQU8sRUFBRSxJQUFBLDRCQUFrQixFQUFDLG1DQUFZLENBQUM7b0JBQ3pDLFFBQVEsRUFBRTt3QkFDUixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUM7d0JBQ2xELElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEVBQUUsYUFBYSxFQUFFLENBQUM7d0JBQ3hELElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDO3dCQUNyQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQzt3QkFDMUMsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQzt3QkFDcEQsTUFBTSxF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dkI7Z0JBQ0Q7b0JBQ0UsRUFBRSxFQUFFLE9BQU87b0JBQ1gsYUFBYSxFQUFFLGlDQUFZLENBQUMsTUFBTTtvQkFDbEMsZ0JBQWdCLEVBQUUsU0FBUztvQkFDM0IsV0FBVyxFQUFFLFFBQVE7b0JBQ3JCLFVBQVUsRUFBRSxJQUFJLElBQUksRUFBRTtpQkFDdkI7YUFDRixDQUFDO1lBRUYsSUFBSTtpQkFDRCxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQztpQkFDekIscUJBQXFCLENBQUMsUUFBMEIsQ0FBQyxDQUFDO1lBRXJELE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFakUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztnQkFDM0MsS0FBSyxFQUFFO29CQUNMLGdCQUFnQixFQUFFLFNBQVM7b0JBQzNCLFdBQVcsRUFBRSxRQUFRO2lCQUN0QjtnQkFDRCxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFO2FBQzlCLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcdGVzdFxcbW9kdWxlc1xcYXVkaXRvcmlhXFxzZXJ2aWNlc1xcYXVkaXRvcmlhLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcbmltcG9ydCB7IGdldFJlcG9zaXRvcnlUb2tlbiB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XG5pbXBvcnQgeyBBdWRpdG9yaWFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvYXVkaXRvcmlhL3NlcnZpY2VzL2F1ZGl0b3JpYS5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ0F1ZGl0b3JpYSB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F1ZGl0b3JpYS9lbnRpdGllcy9sb2ctYXVkaXRvcmlhLmVudGl0eSc7XG5pbXBvcnQgeyBUaXBvT3BlcmFjYW8gfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvbW9kdWxlcy9hdWRpdG9yaWEvZW51bXMvdGlwby1vcGVyYWNhby5lbnVtJztcbmltcG9ydCB7IENyZWF0ZUxvZ0F1ZGl0b3JpYUR0byB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9tb2R1bGVzL2F1ZGl0b3JpYS9kdG8vY3JlYXRlLWxvZy1hdWRpdG9yaWEuZHRvJztcbmltcG9ydCB7IE5vdEZvdW5kRXhjZXB0aW9uIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuXG5kZXNjcmliZSgnQXVkaXRvcmlhU2VydmljZScsICgpID0+IHtcbiAgbGV0IHNlcnZpY2U6IEF1ZGl0b3JpYVNlcnZpY2U7XG4gIGxldCByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PExvZ0F1ZGl0b3JpYT47XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlOiBUZXN0aW5nTW9kdWxlID0gYXdhaXQgVGVzdC5jcmVhdGVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICBBdWRpdG9yaWFTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogZ2V0UmVwb3NpdG9yeVRva2VuKExvZ0F1ZGl0b3JpYSksXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGNyZWF0ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoZHRvKSA9PiBkdG8pLFxuICAgICAgICAgICAgc2F2ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgaWQ6ICdtb2NrLWxvZy1pZCcgfSksXG4gICAgICAgICAgICBmaW5kOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoW10pLFxuICAgICAgICAgICAgZmluZE9uZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpLFxuICAgICAgICAgICAgdXBkYXRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBhZmZlY3RlZDogMSB9KSxcbiAgICAgICAgICAgIGRlbGV0ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHsgYWZmZWN0ZWQ6IDEgfSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSkuY29tcGlsZSgpO1xuXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8QXVkaXRvcmlhU2VydmljZT4oQXVkaXRvcmlhU2VydmljZSk7XG4gICAgcmVwb3NpdG9yeSA9IG1vZHVsZS5nZXQ8UmVwb3NpdG9yeTxMb2dBdWRpdG9yaWE+PihcbiAgICAgIGdldFJlcG9zaXRvcnlUb2tlbihMb2dBdWRpdG9yaWEpLFxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdkZXZlIHNlciBkZWZpbmlkbycsICgpID0+IHtcbiAgICBleHBlY3Qoc2VydmljZSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyZWF0ZScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBjcmlhciB1bSBub3ZvIGxvZyBkZSBhdWRpdG9yaWEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVEdG8gPSBuZXcgQ3JlYXRlTG9nQXVkaXRvcmlhRHRvKCk7XG4gICAgICBjcmVhdGVEdG8udGlwb19vcGVyYWNhbyA9IFRpcG9PcGVyYWNhby5DUkVBVEU7XG4gICAgICBjcmVhdGVEdG8uZW50aWRhZGVfYWZldGFkYSA9ICdVc3VhcmlvJztcbiAgICAgIGNyZWF0ZUR0by5lbnRpZGFkZV9pZCA9ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnO1xuICAgICAgY3JlYXRlRHRvLmRlc2NyaWNhbyA9ICdDcmlhw6fDo28gZGUgbm92byB1c3XDoXJpbyc7XG4gICAgICBjcmVhdGVEdG8uaXBfb3JpZ2VtID0gJzE5Mi4xNjguMS4xJztcbiAgICAgIGNyZWF0ZUR0by51c3VhcmlvX2lkID0gJ21vY2stdXNlci1pZCc7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuY3JlYXRlKGNyZWF0ZUR0byk7XG5cbiAgICAgIGV4cGVjdChyZXBvc2l0b3J5LmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoY3JlYXRlRHRvKTtcbiAgICAgIGV4cGVjdChyZXBvc2l0b3J5LnNhdmUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoeyBpZDogJ21vY2stbG9nLWlkJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHZhbGlkYXIgb3MgZGFkb3MgYW50ZXMgZGUgY3JpYXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkRHRvID0gbmV3IENyZWF0ZUxvZ0F1ZGl0b3JpYUR0bygpO1xuICAgICAgLy8gTsOjbyBkZWZpbmltb3MgY2FtcG9zIG9icmlnYXTDs3Jpb3NcblxuICAgICAgLy8gTW9ja2Ftb3MgbyBtw6l0b2RvIGRlIHZhbGlkYcOnw6NvIHBhcmEgc2ltdWxhciBmYWxoYVxuICAgICAgamVzdFxuICAgICAgICAuc3B5T24oQ3JlYXRlTG9nQXVkaXRvcmlhRHRvLnByb3RvdHlwZSwgJ3ZhbGlkYXInKVxuICAgICAgICAubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RhZG9zIGludsOhbGlkb3MnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChzZXJ2aWNlLmNyZWF0ZShpbnZhbGlkRHRvKSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnRGFkb3MgaW52w6FsaWRvcycsXG4gICAgICApO1xuICAgICAgZXhwZWN0KHJlcG9zaXRvcnkuc2F2ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2ZpbmRBbGwnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmV0b3JuYXIgdW1hIGxpc3RhIGRlIGxvZ3MgZGUgYXVkaXRvcmlhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0xvZ3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2xvZy0xJyxcbiAgICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdsb2ctMicsXG4gICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLlVQREFURSxcbiAgICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnRG9jdW1lbnRvJyxcbiAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgamVzdFxuICAgICAgICAuc3B5T24ocmVwb3NpdG9yeSwgJ2ZpbmQnKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tMb2dzIGFzIExvZ0F1ZGl0b3JpYVtdKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5maW5kQWxsKCk7XG5cbiAgICAgIGV4cGVjdChyZXBvc2l0b3J5LmZpbmQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0xvZ3MpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgYXBsaWNhciBmaWx0cm9zIHF1YW5kbyBmb3JuZWNpZG9zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmlsdHJvcyA9IHtcbiAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgICAgICB1c3VhcmlvX2lkOiAndXNlci0xJyxcbiAgICAgICAgZGF0YV9pbmljaW86IG5ldyBEYXRlKCcyMDIzLTAxLTAxJyksXG4gICAgICAgIGRhdGFfZmltOiBuZXcgRGF0ZSgnMjAyMy0wMS0zMScpLFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgc2VydmljZS5maW5kQWxsKGZpbHRyb3MpO1xuXG4gICAgICBleHBlY3QocmVwb3NpdG9yeS5maW5kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHdoZXJlOiBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnVXN1YXJpbycsXG4gICAgICAgICAgdXN1YXJpb19pZDogJ3VzZXItMScsXG4gICAgICAgICAgY3JlYXRlZF9hdDogZXhwZWN0LmFueShPYmplY3QpLFxuICAgICAgICB9KSxcbiAgICAgICAgb3JkZXI6IHsgY3JlYXRlZF9hdDogJ0RFU0MnIH0sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2ZpbmRPbmUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmV0b3JuYXIgdW0gbG9nIGRlIGF1ZGl0b3JpYSBwZWxvIElEJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0xvZyA9IHtcbiAgICAgICAgaWQ6ICdsb2ctMScsXG4gICAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5DUkVBVEUsXG4gICAgICAgIGVudGlkYWRlX2FmZXRhZGE6ICdVc3VhcmlvJyxcbiAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKSxcbiAgICAgIH07XG5cbiAgICAgIGplc3RcbiAgICAgICAgLnNweU9uKHJlcG9zaXRvcnksICdmaW5kT25lJylcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrTG9nIGFzIExvZ0F1ZGl0b3JpYSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuZmluZE9uZSgnbG9nLTEnKTtcblxuICAgICAgZXhwZWN0KHJlcG9zaXRvcnkuZmluZE9uZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB3aGVyZTogeyBpZDogJ2xvZy0xJyB9LFxuICAgICAgfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tMb2cpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGFuw6dhciBOb3RGb3VuZEV4Y2VwdGlvbiBxdWFuZG8gbyBsb2cgbsOjbyDDqSBlbmNvbnRyYWRvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgamVzdC5zcHlPbihyZXBvc2l0b3J5LCAnZmluZE9uZScpLm1vY2tSZXNvbHZlZFZhbHVlT25jZShudWxsKTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHNlcnZpY2UuZmluZE9uZSgnbm9uLWV4aXN0ZW50LWlkJykpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgTm90Rm91bmRFeGNlcHRpb24sXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndXBkYXRlJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGF0dWFsaXphciB1bSBsb2cgZGUgYXVkaXRvcmlhIGV4aXN0ZW50ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZUR0byA9IHtcbiAgICAgICAgZGVzY3JpY2FvOiAnRGVzY3Jpw6fDo28gYXR1YWxpemFkYScsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtb2NrTG9nID0ge1xuICAgICAgICBpZDogJ2xvZy0xJyxcbiAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLkNSRUFURSxcbiAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgICAgICBkZXNjcmljYW86ICdEZXNjcmnDp8OjbyBvcmlnaW5hbCcsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBqZXN0XG4gICAgICAgIC5zcHlPbihyZXBvc2l0b3J5LCAnZmluZE9uZScpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja0xvZyBhcyBMb2dBdWRpdG9yaWEpO1xuXG4gICAgICBhd2FpdCBzZXJ2aWNlLnVwZGF0ZSgnbG9nLTEnLCB1cGRhdGVEdG8pO1xuXG4gICAgICBleHBlY3QocmVwb3NpdG9yeS51cGRhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdsb2ctMScsIHVwZGF0ZUR0byk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBsYW7Dp2FyIE5vdEZvdW5kRXhjZXB0aW9uIHF1YW5kbyBvIGxvZyBuw6NvIMOpIGVuY29udHJhZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnNweU9uKHJlcG9zaXRvcnksICdmaW5kT25lJykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG51bGwpO1xuXG4gICAgICBhd2FpdCBleHBlY3Qoc2VydmljZS51cGRhdGUoJ25vbi1leGlzdGVudC1pZCcsIHt9KSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICBOb3RGb3VuZEV4Y2VwdGlvbixcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVwb3NpdG9yeS51cGRhdGUpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZW1vdmUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmVtb3ZlciB1bSBsb2cgZGUgYXVkaXRvcmlhIGV4aXN0ZW50ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tMb2cgPSB7XG4gICAgICAgIGlkOiAnbG9nLTEnLFxuICAgICAgICB0aXBvX29wZXJhY2FvOiBUaXBvT3BlcmFjYW8uQ1JFQVRFLFxuICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnVXN1YXJpbycsXG4gICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgICB9O1xuXG4gICAgICBqZXN0XG4gICAgICAgIC5zcHlPbihyZXBvc2l0b3J5LCAnZmluZE9uZScpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja0xvZyBhcyBMb2dBdWRpdG9yaWEpO1xuXG4gICAgICBhd2FpdCBzZXJ2aWNlLnJlbW92ZSgnbG9nLTEnKTtcblxuICAgICAgZXhwZWN0KHJlcG9zaXRvcnkuZGVsZXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnbG9nLTEnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGxhbsOnYXIgTm90Rm91bmRFeGNlcHRpb24gcXVhbmRvIG8gbG9nIG7Do28gw6kgZW5jb250cmFkbycsIGFzeW5jICgpID0+IHtcbiAgICAgIGplc3Quc3B5T24ocmVwb3NpdG9yeSwgJ2ZpbmRPbmUnKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobnVsbCk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChzZXJ2aWNlLnJlbW92ZSgnbm9uLWV4aXN0ZW50LWlkJykpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgTm90Rm91bmRFeGNlcHRpb24sXG4gICAgICApO1xuICAgICAgZXhwZWN0KHJlcG9zaXRvcnkuZGVsZXRlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmluZEJ5RW50aWRhZGUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmV0b3JuYXIgbG9ncyBkZSBhdWRpdG9yaWEgcGFyYSB1bWEgZW50aWRhZGUgZXNwZWPDrWZpY2EnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrTG9ncyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnbG9nLTEnLFxuICAgICAgICAgIHRpcG9fb3BlcmFjYW86IFRpcG9PcGVyYWNhby5DUkVBVEUsXG4gICAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgICAgICAgIGVudGlkYWRlX2lkOiAndXNlci0xJyxcbiAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdsb2ctMicsXG4gICAgICAgICAgdGlwb19vcGVyYWNhbzogVGlwb09wZXJhY2FvLlVQREFURSxcbiAgICAgICAgICBlbnRpZGFkZV9hZmV0YWRhOiAnVXN1YXJpbycsXG4gICAgICAgICAgZW50aWRhZGVfaWQ6ICd1c2VyLTEnLFxuICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBqZXN0XG4gICAgICAgIC5zcHlPbihyZXBvc2l0b3J5LCAnZmluZCcpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja0xvZ3MgYXMgTG9nQXVkaXRvcmlhW10pO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzZXJ2aWNlLmZpbmRCeUVudGlkYWRlKCdVc3VhcmlvJywgJ3VzZXItMScpO1xuXG4gICAgICBleHBlY3QocmVwb3NpdG9yeS5maW5kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgZW50aWRhZGVfYWZldGFkYTogJ1VzdWFyaW8nLFxuICAgICAgICAgIGVudGlkYWRlX2lkOiAndXNlci0xJyxcbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXI6IHsgY3JlYXRlZF9hdDogJ0RFU0MnIH0sXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja0xvZ3MpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9