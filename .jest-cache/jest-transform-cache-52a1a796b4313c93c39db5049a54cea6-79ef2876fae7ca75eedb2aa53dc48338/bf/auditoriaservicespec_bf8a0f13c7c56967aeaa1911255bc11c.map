{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\services\\auditoria.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\services\\auditoria.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AuditoriaService } from '../../../../src/modules/auditoria/services/auditoria.service';\nimport { LogAuditoria } from '../../../../src/modules/auditoria/entities/log-auditoria.entity';\nimport { TipoOperacao } from '../../../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../../../../src/modules/auditoria/dto/create-log-auditoria.dto';\nimport { NotFoundException } from '@nestjs/common';\n\ndescribe('AuditoriaService', () => {\n  let service: AuditoriaService;\n  let repository: Repository<LogAuditoria>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuditoriaService,\n        {\n          provide: getRepositoryToken(LogAuditoria),\n          useValue: {\n            create: jest.fn().mockImplementation((dto) => dto),\n            save: jest.fn().mockResolvedValue({ id: 'mock-log-id' }),\n            find: jest.fn().mockResolvedValue([]),\n            findOne: jest.fn().mockResolvedValue(null),\n            update: jest.fn().mockResolvedValue({ affected: 1 }),\n            delete: jest.fn().mockResolvedValue({ affected: 1 }),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<AuditoriaService>(AuditoriaService);\n    repository = module.get<Repository<LogAuditoria>>(\n      getRepositoryToken(LogAuditoria),\n    );\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('create', () => {\n    it('deve criar um novo log de auditoria', async () => {\n      const createDto = new CreateLogAuditoriaDto();\n      createDto.tipo_operacao = TipoOperacao.CREATE;\n      createDto.entidade_afetada = 'Usuario';\n      createDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';\n      createDto.descricao = 'Criação de novo usuário';\n      createDto.ip_origem = '192.168.1.1';\n      createDto.usuario_id = 'mock-user-id';\n\n      const result = await service.create(createDto);\n\n      expect(repository.create).toHaveBeenCalledWith(createDto);\n      expect(repository.save).toHaveBeenCalled();\n      expect(result).toEqual({ id: 'mock-log-id' });\n    });\n\n    it('deve validar os dados antes de criar', async () => {\n      const invalidDto = new CreateLogAuditoriaDto();\n      // Não definimos campos obrigatórios\n\n      // Mockamos o método de validação para simular falha\n      jest\n        .spyOn(CreateLogAuditoriaDto.prototype, 'validar')\n        .mockImplementation(() => {\n          throw new Error('Dados inválidos');\n        });\n\n      await expect(service.create(invalidDto)).rejects.toThrow(\n        'Dados inválidos',\n      );\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista de logs de auditoria', async () => {\n      const mockLogs = [\n        {\n          id: 'log-1',\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Usuario',\n          created_at: new Date(),\n        },\n        {\n          id: 'log-2',\n          tipo_operacao: TipoOperacao.UPDATE,\n          entidade_afetada: 'Documento',\n          created_at: new Date(),\n        },\n      ];\n\n      jest\n        .spyOn(repository, 'find')\n        .mockResolvedValueOnce(mockLogs as LogAuditoria[]);\n\n      const result = await service.findAll();\n\n      expect(repository.find).toHaveBeenCalled();\n      expect(result).toEqual(mockLogs);\n    });\n\n    it('deve aplicar filtros quando fornecidos', async () => {\n      const filtros = {\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        usuario_id: 'user-1',\n        data_inicio: new Date('2023-01-01'),\n        data_fim: new Date('2023-01-31'),\n      };\n\n      await service.findAll(filtros);\n\n      expect(repository.find).toHaveBeenCalledWith({\n        where: expect.objectContaining({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Usuario',\n          usuario_id: 'user-1',\n          created_at: expect.any(Object),\n        }),\n        order: { created_at: 'DESC' },\n      });\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar um log de auditoria pelo ID', async () => {\n      const mockLog = {\n        id: 'log-1',\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        created_at: new Date(),\n      };\n\n      jest\n        .spyOn(repository, 'findOne')\n        .mockResolvedValueOnce(mockLog as LogAuditoria);\n\n      const result = await service.findOne('log-1');\n\n      expect(repository.findOne).toHaveBeenCalledWith({\n        where: { id: 'log-1' },\n      });\n      expect(result).toEqual(mockLog);\n    });\n\n    it('deve lançar NotFoundException quando o log não é encontrado', async () => {\n      jest.spyOn(repository, 'findOne').mockResolvedValueOnce(null);\n\n      await expect(service.findOne('non-existent-id')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar um log de auditoria existente', async () => {\n      const updateDto = {\n        descricao: 'Descrição atualizada',\n      };\n\n      const mockLog = {\n        id: 'log-1',\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        descricao: 'Descrição original',\n        created_at: new Date(),\n      };\n\n      jest\n        .spyOn(repository, 'findOne')\n        .mockResolvedValueOnce(mockLog as LogAuditoria);\n\n      await service.update('log-1', updateDto);\n\n      expect(repository.update).toHaveBeenCalledWith('log-1', updateDto);\n    });\n\n    it('deve lançar NotFoundException quando o log não é encontrado', async () => {\n      jest.spyOn(repository, 'findOne').mockResolvedValueOnce(null);\n\n      await expect(service.update('non-existent-id', {})).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(repository.update).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('remove', () => {\n    it('deve remover um log de auditoria existente', async () => {\n      const mockLog = {\n        id: 'log-1',\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        created_at: new Date(),\n      };\n\n      jest\n        .spyOn(repository, 'findOne')\n        .mockResolvedValueOnce(mockLog as LogAuditoria);\n\n      await service.remove('log-1');\n\n      expect(repository.delete).toHaveBeenCalledWith('log-1');\n    });\n\n    it('deve lançar NotFoundException quando o log não é encontrado', async () => {\n      jest.spyOn(repository, 'findOne').mockResolvedValueOnce(null);\n\n      await expect(service.remove('non-existent-id')).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(repository.delete).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('findByEntidade', () => {\n    it('deve retornar logs de auditoria para uma entidade específica', async () => {\n      const mockLogs = [\n        {\n          id: 'log-1',\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Usuario',\n          entidade_id: 'user-1',\n          created_at: new Date(),\n        },\n        {\n          id: 'log-2',\n          tipo_operacao: TipoOperacao.UPDATE,\n          entidade_afetada: 'Usuario',\n          entidade_id: 'user-1',\n          created_at: new Date(),\n        },\n      ];\n\n      jest\n        .spyOn(repository, 'find')\n        .mockResolvedValueOnce(mockLogs as LogAuditoria[]);\n\n      const result = await service.findByEntidade('Usuario', 'user-1');\n\n      expect(repository.find).toHaveBeenCalledWith({\n        where: {\n          entidade_afetada: 'Usuario',\n          entidade_id: 'user-1',\n        },\n        order: { created_at: 'DESC' },\n      });\n      expect(result).toEqual(mockLogs);\n    });\n  });\n});\n"],"version":3}