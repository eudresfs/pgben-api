{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\permission.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\permission.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { PermissionService } from './permission.service';\nimport { PermissionRepository } from '../repositories/permission.repository';\nimport { UserPermissionRepository } from '../repositories/user-permission.repository';\nimport { RolePermissionRepository } from '../repositories/role-permission.repository';\nimport { PermissionGroupRepository } from '../repositories/permission-group.repository';\nimport { PermissionGroupMappingRepository } from '../repositories/permission-group-mapping.repository';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Permission } from '../entities/permission.entity';\nimport { UserPermission } from '../entities/user-permission.entity';\nimport { ScopeType } from '../entities/user-permission.entity';\nimport { PermissionGroup } from '../entities/permission-group.entity';\nimport { PermissionGroupMapping } from '../entities/permission-group-mapping.entity';\nimport { RolePermission } from '../entities/role-permission.entity';\nimport { Logger } from '@nestjs/common';\n\n// Mock para o cache manager\nconst mockCacheManager = {\n  get: jest.fn(),\n  set: jest.fn(),\n  del: jest.fn(),\n};\n\n// Mock para o repositório de permissões\nconst mockPermissionRepository = {\n  findByName: jest.fn(),\n  findByPattern: jest.fn(),\n  find: jest.fn(),\n  create: jest.fn(),\n  save: jest.fn(),\n};\n\n// Mock para o repositório de permissões de usuário\nconst mockUserPermissionRepository = {\n  findByUserIdWithPermissions: jest.fn(),\n  findByUserIdAndPermissionName: jest.fn(),\n  findByUserAndPermission: jest.fn(),\n  createUserPermission: jest.fn(),\n  updateUserPermission: jest.fn(),\n  create: jest.fn(),\n  save: jest.fn(),\n  softDelete: jest.fn(),\n};\n\n// Mock para o repositório de permissões de role\nconst mockRolePermissionRepository = {\n  findByRoleIdWithPermissions: jest.fn(),\n  create: jest.fn(),\n  save: jest.fn(),\n};\n\n// Mock para o repositório de grupos de permissões\nconst mockPermissionGroupRepository = {\n  findByName: jest.fn(),\n  find: jest.fn(),\n};\n\n// Mock para o repositório de mapeamentos de grupos de permissões\nconst mockPermissionGroupMappingRepository = {\n  findByGroupId: jest.fn(),\n};\n\ndescribe('PermissionService', () => {\n  let service: PermissionService;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PermissionService,\n        {\n          provide: PermissionRepository,\n          useValue: mockPermissionRepository,\n        },\n        {\n          provide: UserPermissionRepository,\n          useValue: mockUserPermissionRepository,\n        },\n        {\n          provide: RolePermissionRepository,\n          useValue: mockRolePermissionRepository,\n        },\n        {\n          provide: PermissionGroupRepository,\n          useValue: mockPermissionGroupRepository,\n        },\n        {\n          provide: PermissionGroupMappingRepository,\n          useValue: mockPermissionGroupMappingRepository,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n        {\n          provide: Logger,\n          useValue: {\n            log: jest.fn(),\n            error: jest.fn(),\n            warn: jest.fn(),\n            debug: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<PermissionService>(PermissionService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('getUserPermissions', () => {\n    it('should return only active and non-expired user permissions by default', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const mockPermissions = [\n        { id: 'perm-1', name: 'usuario.visualizar' },\n        { id: 'perm-2', name: 'usuario.editar' },\n        { id: 'perm-3', name: 'usuario.excluir' },\n        { id: 'perm-4', name: 'usuario.criar' },\n      ];\n\n      const now = new Date();\n      const futureDate = new Date(now.getTime() + 10000000); // Data futura\n      const pastDate = new Date(now.getTime() - 10000000); // Data passada\n\n      const mockUserPermissions = [\n        { permission: mockPermissions[0], granted: true, validUntil: null }, // Ativa, sem expiração\n        {\n          permission: mockPermissions[1],\n          granted: true,\n          validUntil: futureDate,\n        }, // Ativa, não expirada\n        { permission: mockPermissions[2], granted: false, validUntil: null }, // Inativa\n        { permission: mockPermissions[3], granted: true, validUntil: pastDate }, // Ativa, mas expirada\n      ] as UserPermission[];\n\n      mockUserPermissionRepository.findByUserIdWithPermissions.mockResolvedValue(\n        mockUserPermissions,\n      );\n\n      // Act\n      const result = await service.getUserPermissions(userId);\n\n      // Assert\n      expect(\n        mockUserPermissionRepository.findByUserIdWithPermissions,\n      ).toHaveBeenCalledWith(userId);\n      // Deve retornar apenas as permissões ativas e não expiradas\n      expect(result).toEqual([mockPermissions[0], mockPermissions[1]]);\n    });\n\n    it('should return all user permissions when includeInactive is true', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const mockPermissions = [\n        { id: 'perm-1', name: 'usuario.visualizar' },\n        { id: 'perm-2', name: 'usuario.editar' },\n        { id: 'perm-3', name: 'usuario.excluir' },\n        { id: 'perm-4', name: 'usuario.criar' },\n      ];\n\n      const now = new Date();\n      const futureDate = new Date(now.getTime() + 10000000); // Data futura\n      const pastDate = new Date(now.getTime() - 10000000); // Data passada\n\n      const mockUserPermissions = [\n        { permission: mockPermissions[0], granted: true, validUntil: null }, // Ativa, sem expiração\n        {\n          permission: mockPermissions[1],\n          granted: true,\n          validUntil: futureDate,\n        }, // Ativa, não expirada\n        { permission: mockPermissions[2], granted: false, validUntil: null }, // Inativa\n        { permission: mockPermissions[3], granted: true, validUntil: pastDate }, // Ativa, mas expirada\n      ] as UserPermission[];\n\n      mockUserPermissionRepository.findByUserIdWithPermissions.mockResolvedValue(\n        mockUserPermissions,\n      );\n\n      // Act\n      const result = await service.getUserPermissions(userId, true);\n\n      // Assert\n      expect(\n        mockUserPermissionRepository.findByUserIdWithPermissions,\n      ).toHaveBeenCalledWith(userId);\n      // Deve retornar todas as permissões\n      expect(result).toEqual(mockPermissions);\n    });\n\n    it('should return empty array when user has no permissions', async () => {\n      // Arrange\n      const userId = 'user-123';\n      mockUserPermissionRepository.findByUserIdWithPermissions.mockResolvedValue(\n        [],\n      );\n\n      // Act\n      const result = await service.getUserPermissions(userId);\n\n      // Assert\n      expect(\n        mockUserPermissionRepository.findByUserIdWithPermissions,\n      ).toHaveBeenCalledWith(userId);\n      expect(result).toEqual([]);\n    });\n\n    it('should return empty array when userId is not provided', async () => {\n      // Arrange\n      const userId = '';\n\n      // Act\n      const result = await service.getUserPermissions(userId);\n\n      // Assert\n      expect(\n        mockUserPermissionRepository.findByUserIdWithPermissions,\n      ).not.toHaveBeenCalled();\n      expect(result).toEqual([]);\n    });\n\n    it('should handle errors and return empty array', async () => {\n      // Arrange\n      const userId = 'user-123';\n      mockUserPermissionRepository.findByUserIdWithPermissions.mockRejectedValue(\n        new Error('Database error'),\n      );\n\n      // Act\n      const result = await service.getUserPermissions(userId);\n\n      // Assert\n      expect(\n        mockUserPermissionRepository.findByUserIdWithPermissions,\n      ).toHaveBeenCalledWith(userId);\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('hasPermission', () => {\n    it('should return true when user has exact permission with matching scope', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: 'usuario.visualizar',\n      } as Permission;\n      const mockUserPermission = {\n        id: 'up-1',\n        userId: 'user-123',\n        permission: mockPermission,\n        permissionId: 'perm-1',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: null,\n        granted: true,\n        validUntil: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: 'admin-user',\n        updatedBy: null,\n      } as UserPermission;\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para encontrar a permissão\n      mockUserPermissionRepository.findByUserIdAndPermissionName.mockResolvedValue(\n        [mockUserPermission],\n      );\n\n      // Act\n      const result = await service.hasPermission(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserIdAndPermissionName,\n      ).toHaveBeenCalledWith('user-123', 'usuario.visualizar');\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return false when user does not have the permission', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para não encontrar a permissão\n      mockUserPermissionRepository.findByUserIdAndPermissionName.mockResolvedValue(\n        [],\n      );\n\n      // Act\n      const result = await service.hasPermission(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserIdAndPermissionName,\n      ).toHaveBeenCalledWith('user-123', 'usuario.visualizar');\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(false);\n    });\n\n    it('should check for wildcard permissions when exact permission is not found', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar.detalhes',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      const mockWildcardPermission = {\n        id: 'perm-1',\n        name: 'usuario.visualizar.*',\n      } as Permission;\n      const mockUserPermission = {\n        id: 'up-1',\n        userId: 'user-123',\n        permission: mockWildcardPermission,\n        permissionId: 'perm-1',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: null,\n        granted: true,\n        validUntil: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: 'admin-user',\n        updatedBy: null,\n      } as UserPermission;\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para não encontrar a permissão exata\n      mockUserPermissionRepository.findByUserIdAndPermissionName.mockResolvedValue(\n        [],\n      );\n\n      // Configurar o mock para encontrar permissões com wildcard\n      mockPermissionRepository.findByPattern.mockResolvedValue([\n        mockWildcardPermission,\n      ]);\n      mockUserPermissionRepository.findByUserIdWithPermissions.mockResolvedValue(\n        [mockUserPermission],\n      );\n\n      // Act\n      const result = await service.hasPermission(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserIdAndPermissionName,\n      ).toHaveBeenCalledWith('user-123', 'usuario.visualizar.detalhes');\n      expect(mockPermissionRepository.findByPattern).toHaveBeenCalled();\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return permission from cache when available', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      // Configurar o mock para retornar do cache\n      mockCacheManager.get.mockResolvedValue(true); // Está em cache e é true\n\n      // Act\n      const result = await service.hasPermission(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserIdAndPermissionName,\n      ).not.toHaveBeenCalled(); // Não deve chamar o repositório\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('grantPermission', () => {\n    it('should grant a new permission to a user', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const createdBy = 'admin-user';\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: 'usuario.visualizar',\n      } as Permission;\n\n      // Configurar o mock para encontrar a permissão\n      mockPermissionRepository.findByName.mockResolvedValue(mockPermission);\n\n      // Configurar o mock para não encontrar permissão existente\n      mockUserPermissionRepository.findByUserAndPermission.mockResolvedValue(\n        null,\n      );\n\n      // Configurar o mock para criar a permissão do usuário\n      mockUserPermissionRepository.createUserPermission.mockResolvedValue({\n        id: 'up-1',\n        userId,\n        permissionId: 'perm-1',\n        scopeType,\n        scopeId,\n        granted: true,\n        createdBy,\n      });\n\n      // Act\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        null, // validUntil\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalledWith(userId, mockPermission.id, scopeType, undefined);\n      expect(\n        mockUserPermissionRepository.createUserPermission,\n      ).toHaveBeenCalledWith({\n        userId,\n        permissionId: mockPermission.id,\n        granted: true,\n        scopeType,\n        scopeId: undefined,\n        validUntil: null,\n        createdBy,\n      });\n      expect(mockCacheManager.del).toHaveBeenCalled(); // Deve limpar o cache\n      expect(result).toBe(true);\n    });\n\n    it('should update an existing permission for a user', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const createdBy = 'admin-user';\n      const validUntil = new Date('2026-01-01');\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: 'usuario.visualizar',\n      } as Permission;\n      const existingPermission = {\n        id: 'up-1',\n        userId,\n        permissionId: 'perm-1',\n        scopeType,\n        scopeId: undefined,\n        granted: false,\n        validUntil: null,\n      };\n\n      // Configurar o mock para encontrar a permissão\n      mockPermissionRepository.findByName.mockResolvedValue(mockPermission);\n\n      // Configurar o mock para encontrar permissão existente\n      mockUserPermissionRepository.findByUserAndPermission.mockResolvedValue(\n        existingPermission,\n      );\n\n      // Configurar o mock para atualizar a permissão do usuário\n      mockUserPermissionRepository.updateUserPermission.mockResolvedValue({\n        ...existingPermission,\n        granted: true,\n        validUntil,\n        updatedBy: createdBy,\n      });\n\n      // Act\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        validUntil,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalledWith(userId, mockPermission.id, scopeType, undefined);\n      expect(\n        mockUserPermissionRepository.updateUserPermission,\n      ).toHaveBeenCalledWith(existingPermission.id, {\n        granted: true,\n        validUntil,\n        updatedBy: createdBy,\n      });\n      expect(mockCacheManager.del).toHaveBeenCalled(); // Deve limpar o cache\n      expect(result).toBe(true);\n    });\n\n    it('should return false when permission does not exist', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const createdBy = 'admin-user';\n\n      // Configurar o mock para não encontrar a permissão\n      mockPermissionRepository.findByName.mockResolvedValue(null);\n\n      // Act\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        null, // validUntil\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.createUserPermission,\n      ).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.updateUserPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n\n    it('should return false when userId is not provided', async () => {\n      // Arrange\n      const userId = '';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const createdBy = 'admin-user';\n\n      // Act\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        null, // validUntil\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n\n    it('should return false when trying to grant permission with UNIT scope but no scopeId', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.UNIT;\n      const scopeId = undefined;\n      const createdBy = 'admin-user';\n\n      // Act\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        null, // validUntil\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n\n    it('should return false when validUntil is in the past', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const createdBy = 'admin-user';\n      const validUntil = new Date('2020-01-01'); // Data no passado\n\n      // Act\n      const result = await service.grantPermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        validUntil,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('revokePermission', () => {\n    it('should revoke a permission from a user', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const revokedBy = 'admin-user';\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: 'usuario.visualizar',\n      } as Permission;\n      const mockUserPermission = {\n        id: 'up-1',\n        userId,\n        permissionId: 'perm-1',\n        scopeType,\n        scopeId: undefined,\n        granted: true,\n        validUntil: null,\n      };\n\n      // Configurar o mock para encontrar a permissão\n      mockPermissionRepository.findByName.mockResolvedValue(mockPermission);\n\n      // Configurar o mock para encontrar a permissão do usuário\n      mockUserPermissionRepository.findByUserAndPermission.mockResolvedValue(\n        mockUserPermission,\n      );\n\n      // Configurar o mock para atualizar a permissão do usuário\n      mockUserPermissionRepository.updateUserPermission.mockResolvedValue({\n        ...mockUserPermission,\n        granted: false,\n        updatedBy: revokedBy,\n      });\n\n      // Act\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        revokedBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalledWith(userId, mockPermission.id, scopeType, undefined);\n      expect(\n        mockUserPermissionRepository.updateUserPermission,\n      ).toHaveBeenCalledWith(mockUserPermission.id, {\n        granted: false,\n        updatedBy: revokedBy,\n      });\n      expect(mockCacheManager.del).toHaveBeenCalled(); // Deve limpar o cache\n      expect(result).toBe(true);\n    });\n\n    it('should return true when permission is already revoked', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const revokedBy = 'admin-user';\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: 'usuario.visualizar',\n      } as Permission;\n      const mockUserPermission = {\n        id: 'up-1',\n        userId,\n        permissionId: 'perm-1',\n        scopeType,\n        scopeId: undefined,\n        granted: false, // Já está revogada\n        validUntil: null,\n      };\n\n      // Configurar o mock para encontrar a permissão\n      mockPermissionRepository.findByName.mockResolvedValue(mockPermission);\n\n      // Configurar o mock para encontrar a permissão do usuário (já revogada)\n      mockUserPermissionRepository.findByUserAndPermission.mockResolvedValue(\n        mockUserPermission,\n      );\n\n      // Act\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        revokedBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalledWith(userId, mockPermission.id, scopeType, undefined);\n      expect(\n        mockUserPermissionRepository.updateUserPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(true);\n    });\n\n    it('should return false when permission does not exist', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const revokedBy = 'admin-user';\n\n      // Configurar o mock para não encontrar a permissão\n      mockPermissionRepository.findByName.mockResolvedValue(null);\n\n      // Act\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        revokedBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.updateUserPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n\n    it('should return false when user does not have the permission', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const revokedBy = 'admin-user';\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: 'usuario.visualizar',\n      } as Permission;\n\n      // Configurar o mock para encontrar a permissão\n      mockPermissionRepository.findByName.mockResolvedValue(mockPermission);\n\n      // Configurar o mock para não encontrar a permissão do usuário\n      mockUserPermissionRepository.findByUserAndPermission.mockResolvedValue(\n        null,\n      );\n\n      // Act\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        revokedBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalledWith(userId, mockPermission.id, scopeType, undefined);\n      expect(\n        mockUserPermissionRepository.updateUserPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n\n    it('should return false when userId is not provided', async () => {\n      // Arrange\n      const userId = '';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n      const revokedBy = 'admin-user';\n\n      // Act\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        revokedBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n\n    it('should return false when trying to revoke permission with UNIT scope but no scopeId', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.UNIT;\n      const scopeId = undefined;\n      const revokedBy = 'admin-user';\n\n      // Act\n      const result = await service.revokePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n        revokedBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).not.toHaveBeenCalled();\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).not.toHaveBeenCalled();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('createPermission', () => {\n    it('should create a new permission', async () => {\n      // Arrange\n      const permissionName = 'modulo.operacao';\n      const description = 'Descrição da permissão';\n      const createdBy = 'admin-user';\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: permissionName,\n        description,\n        createdBy,\n      } as Permission;\n\n      // Configurar o mock para não encontrar a permissão existente\n      mockPermissionRepository.findByName.mockResolvedValue(null);\n\n      // Configurar o mock para criar a permissão\n      mockPermissionRepository.create.mockReturnValue(mockPermission);\n      mockPermissionRepository.save.mockResolvedValue({\n        ...mockPermission,\n        id: 'perm-1',\n      });\n\n      // Act\n      const result = await service.createPermission(\n        permissionName,\n        description,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(mockPermissionRepository.create).toHaveBeenCalledWith({\n        name: permissionName,\n        description,\n        createdBy,\n      });\n      expect(mockPermissionRepository.save).toHaveBeenCalled();\n      expect(result).toEqual(mockPermission);\n    });\n\n    it('should return existing permission if it already exists', async () => {\n      // Arrange\n      const permissionName = 'modulo.operacao';\n      const description = 'Descrição da permissão';\n      const createdBy = 'admin-user';\n\n      const existingPermission = {\n        id: 'perm-1',\n        name: permissionName,\n        description: 'Permissão existente',\n        createdBy: 'outro-usuario',\n      } as Permission;\n\n      // Configurar o mock para encontrar a permissão existente\n      mockPermissionRepository.findByName.mockResolvedValue(existingPermission);\n\n      // Act\n      const result = await service.createPermission(\n        permissionName,\n        description,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(mockPermissionRepository.create).not.toHaveBeenCalled();\n      expect(mockPermissionRepository.save).not.toHaveBeenCalled();\n      expect(result).toEqual(existingPermission);\n    });\n\n    it('should return null when permission name is invalid', async () => {\n      // Arrange\n      const permissionName = 'permissao-invalida'; // Sem ponto\n      const description = 'Descrição da permissão';\n      const createdBy = 'admin-user';\n\n      // Act\n      const result = await service.createPermission(\n        permissionName,\n        description,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).not.toHaveBeenCalled();\n      expect(mockPermissionRepository.create).not.toHaveBeenCalled();\n      expect(mockPermissionRepository.save).not.toHaveBeenCalled();\n      expect(result).toBeNull();\n    });\n\n    it('should handle errors and return null', async () => {\n      // Arrange\n      const permissionName = 'modulo.operacao';\n      const description = 'Descrição da permissão';\n      const createdBy = 'admin-user';\n\n      // Configurar o mock para lançar um erro\n      mockPermissionRepository.findByName.mockRejectedValue(\n        new Error('Database error'),\n      );\n\n      // Act\n      const result = await service.createPermission(\n        permissionName,\n        description,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('createPermissionIfNotExists', () => {\n    it('should create a new permission if it does not exist', async () => {\n      // Arrange\n      const permissionName = 'modulo.operacao';\n      const description = 'Descrição da permissão';\n      const createdBy = 'admin-user';\n\n      const mockPermission = {\n        id: 'perm-1',\n        name: permissionName,\n        description,\n        createdBy,\n      } as Permission;\n\n      // Configurar o mock para não encontrar a permissão existente\n      mockPermissionRepository.findByName.mockResolvedValue(null);\n\n      // Configurar o mock para criar a permissão\n      mockPermissionRepository.create.mockReturnValue(mockPermission);\n      mockPermissionRepository.save.mockResolvedValue({\n        ...mockPermission,\n        id: 'perm-1',\n      });\n\n      // Act\n      const result = await service.createPermissionIfNotExists(\n        permissionName,\n        description,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(mockPermissionRepository.create).toHaveBeenCalledWith({\n        name: permissionName,\n        description,\n        createdBy,\n      });\n      expect(mockPermissionRepository.save).toHaveBeenCalled();\n      expect(result).toEqual(mockPermission);\n    });\n\n    it('should return existing permission if it already exists', async () => {\n      // Arrange\n      const permissionName = 'modulo.operacao';\n      const description = 'Descrição da permissão';\n      const createdBy = 'admin-user';\n\n      const existingPermission = {\n        id: 'perm-1',\n        name: permissionName,\n        description: 'Permissão existente',\n        createdBy: 'outro-usuario',\n      } as Permission;\n\n      // Configurar o mock para encontrar a permissão existente\n      mockPermissionRepository.findByName.mockResolvedValue(existingPermission);\n\n      // Act\n      const result = await service.createPermissionIfNotExists(\n        permissionName,\n        description,\n        createdBy,\n      );\n\n      // Assert\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        permissionName,\n      );\n      expect(mockPermissionRepository.create).not.toHaveBeenCalled();\n      expect(mockPermissionRepository.save).not.toHaveBeenCalled();\n      expect(result).toEqual(existingPermission);\n    });\n  });\n\n  describe('checkCompositePermission', () => {\n    it('should return true when user has a wildcard module permission', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar.detalhes';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      const wildcardPermission = {\n        id: 'perm-wild',\n        name: 'usuario.*',\n      } as Permission;\n      const userPermission = {\n        id: 'up-wild-1',\n        userId: 'user-123',\n        permission: wildcardPermission,\n        permissionId: 'perm-wild',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: null,\n        granted: true,\n        validUntil: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: 'admin-user',\n        updatedBy: null,\n      } as UserPermission;\n\n      // Mock para o cache\n      mockCacheManager.get.mockResolvedValue(null); // Não tem em cache\n\n      // Mock para encontrar a permissão wildcard\n      mockPermissionRepository.findByName.mockResolvedValue(wildcardPermission);\n\n      // Mock para encontrar as permissões do usuário\n      mockUserPermissionRepository.findByUserAndPermission.mockResolvedValue(\n        userPermission,\n      );\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        'usuario.*',\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalledWith(\n        userId,\n        wildcardPermission.id,\n        ScopeType.GLOBAL,\n        undefined,\n      );\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return true when user has a wildcard operation permission', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar.detalhes';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      const wildcardPermission = {\n        id: 'perm-wild',\n        name: '*.detalhes',\n      } as Permission;\n      const userPermission = {\n        id: 'up-wild-1',\n        userId: 'user-123',\n        permission: wildcardPermission,\n        permissionId: 'perm-wild',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: null,\n        granted: true,\n        validUntil: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: 'admin-user',\n        updatedBy: null,\n      } as UserPermission;\n\n      // Mock para o cache\n      mockCacheManager.get.mockImplementation((key) => {\n        if (key.includes('usuario.*')) {\n          return null;\n        }\n        if (key.includes(permissionName)) {\n          return null;\n        }\n        return null;\n      });\n\n      // Mock para encontrar a permissão wildcard\n      mockPermissionRepository.findByName.mockImplementation((name) => {\n        if (name === 'usuario.*') {\n          return null;\n        }\n        if (name === '*.detalhes') {\n          return wildcardPermission;\n        }\n        return null;\n      });\n\n      // Mock para encontrar as permissões do usuário\n      mockUserPermissionRepository.findByUserAndPermission.mockImplementation(\n        (uid, permId, scopeT, scopeI) => {\n          if (permId === wildcardPermission.id) {\n            return userPermission;\n          }\n          return null;\n        },\n      );\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        '*.detalhes',\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalled();\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return true when user has a super admin wildcard permission', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar.detalhes';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      const wildcardPermission = { id: 'perm-wild', name: '*.*' } as Permission;\n      const userPermission = {\n        id: 'up-wild-1',\n        userId: 'user-123',\n        permission: wildcardPermission,\n        permissionId: 'perm-wild',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: null,\n        granted: true,\n        validUntil: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: 'admin-user',\n        updatedBy: null,\n      } as UserPermission;\n\n      // Mock para o cache\n      mockCacheManager.get.mockImplementation((key) => {\n        if (key.includes('usuario.*')) {\n          return null;\n        }\n        if (key.includes('*.detalhes')) {\n          return null;\n        }\n        if (key.includes(permissionName)) {\n          return null;\n        }\n        return null;\n      });\n\n      // Mock para encontrar a permissão wildcard\n      mockPermissionRepository.findByName.mockImplementation((name) => {\n        if (name === 'usuario.*') {\n          return null;\n        }\n        if (name === '*.detalhes') {\n          return null;\n        }\n        if (name === '*.*') {\n          return wildcardPermission;\n        }\n        return null;\n      });\n\n      // Mock para encontrar as permissões do usuário\n      mockUserPermissionRepository.findByUserAndPermission.mockImplementation(\n        (uid, permId, scopeT, scopeI) => {\n          if (permId === wildcardPermission.id) {\n            return userPermission;\n          }\n          return null;\n        },\n      );\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith('*.*');\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalled();\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return true when permission is found in cache', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar.detalhes';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      // Mock para o cache - já tem em cache\n      mockCacheManager.get.mockResolvedValue(true);\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionRepository.findByName).not.toHaveBeenCalled(); // Não deve chamar o repositório\n      expect(result).toBe(true);\n    });\n\n    it('should return false when user does not have any matching permission', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar.detalhes';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      // Mock para o cache\n      mockCacheManager.get.mockResolvedValue(null); // Não tem em cache\n\n      // Mock para encontrar a permissão wildcard\n      mockPermissionRepository.findByName.mockResolvedValue(null); // Nenhuma permissão encontrada\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionRepository.findByName).toHaveBeenCalled();\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache (resultado negativo)\n      expect(result).toBe(false);\n    });\n\n    it('should return false when permission format is invalid', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'invalidformat'; // Formato inválido, sem ponto\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false when userId is not provided', async () => {\n      // Arrange\n      const userId = '';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false when trying to check permission with UNIT scope but no scopeId', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar';\n      const scopeType = ScopeType.UNIT;\n      const scopeId = undefined;\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false when user has a matching permission but it is expired', async () => {\n      // Arrange\n      const userId = 'user-123';\n      const permissionName = 'usuario.visualizar.detalhes';\n      const scopeType = ScopeType.GLOBAL;\n      const scopeId = undefined;\n\n      const wildcardPermission = {\n        id: 'perm-wild',\n        name: 'usuario.*',\n      } as Permission;\n      const userPermission = {\n        id: 'up-wild-expired',\n        userId: 'user-123',\n        permission: wildcardPermission,\n        permissionId: 'perm-wild',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: null,\n        granted: true,\n        validUntil: new Date('2020-01-01'), // Data no passado\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        createdBy: 'admin-user',\n        updatedBy: null,\n      } as UserPermission;\n\n      // Mock para o cache\n      mockCacheManager.get.mockResolvedValue(null); // Não tem em cache\n\n      // Mock para encontrar a permissão wildcard\n      mockPermissionRepository.findByName.mockResolvedValue(wildcardPermission);\n\n      // Mock para encontrar as permissões do usuário\n      mockUserPermissionRepository.findByUserAndPermission.mockResolvedValue(\n        userPermission,\n      );\n\n      // Act\n      const result = await service.checkCompositePermission(\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      );\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionRepository.findByName).toHaveBeenCalledWith(\n        'usuario.*',\n      );\n      expect(\n        mockUserPermissionRepository.findByUserAndPermission,\n      ).toHaveBeenCalledWith(\n        userId,\n        wildcardPermission.id,\n        ScopeType.GLOBAL,\n        undefined,\n      );\n      expect(result).toBe(false);\n    });\n  });\n});\n"],"version":3}