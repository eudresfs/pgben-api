{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\guards\\pagamento-access.guard.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\guards\\pagamento-access.guard.ts"],"sourcesContent":["import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  ForbiddenException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { PagamentoService } from '../services/pagamento.service';\nimport { IntegracaoCidadaoService } from '../services/integracao-cidadao.service';\nimport { IntegracaoSolicitacaoService } from '../services/integracao-solicitacao.service';\n\n// Chaves para metadados de controle de acesso\nexport const PERFIS_KEY = 'perfis_permitidos';\nexport const UNIDADES_KEY = 'verificar_unidade';\n\n/**\n * Guard para controle de acesso aos endpoints do módulo de pagamento\n *\n * Implementa verificações de permissão baseadas em:\n * - Perfil do usuário (admin, operador, etc)\n * - Unidade do usuário vs unidade do pagamento/solicitação\n * - Propriedade do recurso (pagamento, comprovante, confirmação)\n *\n * @author Equipe PGBen\n */\n@Injectable()\nexport class PagamentoAccessGuard implements CanActivate {\n  constructor(\n    private reflector: Reflector,\n    private pagamentoService: PagamentoService,\n    private cidadaoService: IntegracaoCidadaoService,\n    private solicitacaoService: IntegracaoSolicitacaoService,\n  ) {}\n\n  /**\n   * Verifica se o usuário tem permissão para acessar o recurso\n   *\n   * @param context Contexto de execução\n   * @returns true se o usuário tem permissão, false caso contrário\n   */\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const perfisPermitidos =\n      this.reflector.getAllAndOverride<string[]>(PERFIS_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ]) || [];\n\n    const verificarUnidade =\n      this.reflector.getAllAndOverride<boolean>(UNIDADES_KEY, [\n        context.getHandler(),\n        context.getClass(),\n      ]) || false;\n\n    const request = context.switchToHttp().getRequest();\n    const usuario = request.user;\n\n    // Se não há usuário autenticado, negar acesso\n    if (!usuario) {\n      throw new ForbiddenException('Usuário não autenticado');\n    }\n\n    // Verificar perfil do usuário\n    if (\n      perfisPermitidos.length > 0 &&\n      !perfisPermitidos.includes(usuario.perfil)\n    ) {\n      throw new ForbiddenException(\n        `Acesso restrito a: ${perfisPermitidos.join(', ')}`,\n      );\n    }\n\n    // Super admin sempre tem acesso\n    if (usuario.perfil === 'super_admin') {\n      return true;\n    }\n\n    // Se não precisa verificar unidade, permitir acesso\n    if (!verificarUnidade) {\n      return true;\n    }\n\n    // Obter IDs dos parâmetros da requisição\n    const pagamentoId = request.params.pagamentoId || request.params.id;\n    const beneficiarioId = request.params.beneficiarioId;\n    const comprovanteId = request.params.comprovanteId;\n\n    // Verificar acesso baseado no ID do pagamento\n    if (pagamentoId) {\n      try {\n        const pagamento =\n          await this.pagamentoService.findOneWithRelations(pagamentoId);\n\n        if (!pagamento) {\n          throw new NotFoundException('Pagamento não encontrado');\n        }\n\n        // Verificar status da solicitação associada ao pagamento\n        // Usando o método que existe no serviço\n        const solicitacaoStatus =\n          await this.solicitacaoService.verificarSolicitacaoAprovada(\n            pagamento.solicitacaoId,\n          );\n\n        if (!solicitacaoStatus) {\n          throw new NotFoundException('Solicitação não encontrada');\n        }\n\n        // Obter a unidade da solicitação\n        const unidadeId = solicitacaoStatus.unidadeId;\n\n        // Verificar se o usuário pertence à mesma unidade da solicitação\n        if (usuario.unidadeId !== unidadeId && usuario.perfil !== 'admin') {\n          throw new ForbiddenException('Acesso restrito à unidade responsável');\n        }\n\n        // Verificações adicionais para comprovantes\n        if (comprovanteId && usuario.perfil !== 'admin') {\n          // Verificar se o comprovante existe e pertence ao pagamento\n          // Usando um método genérico que deve existir no serviço\n          const comprovante =\n            await this.pagamentoService.findOne(comprovanteId);\n\n          // Verificar se o comprovante pertence ao pagamento\n          if (\n            !comprovante ||\n            comprovante.solicitacaoId !== pagamento.solicitacaoId\n          ) {\n            throw new ForbiddenException(\n              'Comprovante não encontrado ou não pertence ao pagamento',\n            );\n          }\n        }\n      } catch (error) {\n        if (error instanceof NotFoundException) {\n          throw error;\n        }\n        throw new ForbiddenException('Erro ao verificar permissões de acesso');\n      }\n\n      return true;\n    }\n\n    // Verificar acesso baseado no ID do beneficiário\n    if (beneficiarioId) {\n      try {\n        // Obter informações do beneficiário usando o método correto que existe no serviço\n        const cidadao =\n          await this.cidadaoService.obterDadosPessoais(beneficiarioId);\n\n        if (!cidadao) {\n          throw new NotFoundException('Beneficiário não encontrado');\n        }\n\n        // Verificar se o usuário pertence à mesma unidade do cidadão\n        // Assumindo que a unidade está disponível nos dados retornados\n        const unidadeId = cidadao.unidadeId || null;\n\n        if (\n          unidadeId &&\n          usuario.unidadeId !== unidadeId &&\n          usuario.perfil !== 'admin'\n        ) {\n          throw new ForbiddenException(\n            'Acesso restrito à unidade responsável pelo beneficiário',\n          );\n        }\n      } catch (error) {\n        if (error instanceof NotFoundException) {\n          throw error;\n        }\n        throw new ForbiddenException(\n          'Erro ao verificar permissões de acesso ao beneficiário',\n        );\n      }\n\n      return true;\n    }\n\n    // Se chegou aqui, permitir acesso\n    return true;\n  }\n}\n"],"version":3}