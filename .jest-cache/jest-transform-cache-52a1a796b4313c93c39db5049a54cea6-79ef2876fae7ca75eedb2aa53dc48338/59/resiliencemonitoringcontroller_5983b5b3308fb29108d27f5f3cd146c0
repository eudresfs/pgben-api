75efd22234f98d38d0606b3ec01865db
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResilienceMonitoringController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const resilient_auditoria_service_1 = require("../services/resilient-auditoria.service");
const hybrid_cache_service_1 = require("../services/hybrid-cache.service");
const health_check_service_1 = require("../services/health-check.service");
const jwt_auth_guard_1 = require("../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../auth/guards/roles.guard");
const role_decorator_1 = require("../../auth/decorators/role.decorator");
const roles_constants_1 = require("../constants/roles.constants");
/**
 * Controller de Monitoramento de Resiliência
 *
 * Fornece endpoints para monitorar o status e métricas dos serviços resilientes:
 * - Status geral do sistema
 * - Métricas detalhadas de cache
 * - Métricas de auditoria
 * - Health checks de serviços externos
 * - Alertas e notificações
 *
 * Acesso restrito a administradores do sistema
 */
let ResilienceMonitoringController = class ResilienceMonitoringController {
    resilientAuditoriaService;
    hybridCacheService;
    healthCheckService;
    constructor(resilientAuditoriaService, hybridCacheService, healthCheckService) {
        this.resilientAuditoriaService = resilientAuditoriaService;
        this.hybridCacheService = hybridCacheService;
        this.healthCheckService = healthCheckService;
    }
    /**
     * Obtém status geral de resiliência do sistema
     */
    async getResilienceStatus() {
        const timestamp = new Date().toISOString();
        // Obter status dos serviços
        // Verificar status dos serviços
        const redisAvailable = await this.healthCheckService.isRedisAvailable();
        const servicesStatus = {
            redis: {
                status: redisAvailable ? 'up' : 'down',
                lastCheck: new Date().toISOString(),
                latency: redisAvailable ? 5 : undefined,
            },
            database: {
                status: 'up', // Assumindo que o banco está sempre disponível se a aplicação está rodando
                lastCheck: new Date().toISOString(),
                latency: 10,
            },
        };
        const cacheMetrics = this.hybridCacheService.getMetrics();
        const auditoriaMetrics = this.resilientAuditoriaService.getMetrics();
        // Avaliar status do cache
        const cacheStatus = this.evaluateCacheStatus(cacheMetrics, servicesStatus.redis?.status === 'up');
        // Avaliar status da auditoria
        const auditoriaStatus = this.evaluateAuditoriaStatus(auditoriaMetrics, servicesStatus.redis?.status === 'up');
        // Gerar alertas
        const alerts = this.generateAlerts(cacheMetrics, auditoriaMetrics, servicesStatus);
        // Determinar status geral
        const overall = this.determineOverallStatus(cacheStatus.status, auditoriaStatus.status, servicesStatus);
        return {
            timestamp,
            overall,
            services: {
                cache: cacheStatus,
                auditoria: auditoriaStatus,
                redis: {
                    status: servicesStatus.redis?.status || 'down',
                    latency: servicesStatus.redis?.latency,
                    lastCheck: servicesStatus.redis?.lastCheck || timestamp,
                },
                database: {
                    status: servicesStatus.database?.status || 'down',
                    latency: servicesStatus.database?.latency,
                    lastCheck: servicesStatus.database?.lastCheck || timestamp,
                },
            },
            alerts,
        };
    }
    /**
     * Obtém métricas detalhadas do cache híbrido
     */
    async getCacheMetrics() {
        const metrics = this.hybridCacheService.getMetrics();
        // Verificar status dos serviços
        const redisAvailable = await this.healthCheckService.isRedisAvailable();
        const servicesStatus = {
            redis: {
                status: redisAvailable ? 'up' : 'down',
                lastCheck: new Date().toISOString(),
                latency: redisAvailable ? 5 : undefined,
            },
            database: {
                status: 'up', // Assumindo que o banco está sempre disponível se a aplicação está rodando
                lastCheck: new Date().toISOString(),
                latency: 10,
            },
        };
        return {
            timestamp: new Date().toISOString(),
            l1Cache: {
                size: metrics.l1Size,
                maxSize: metrics.l1MaxSize,
                utilizationRate: (metrics.l1Size / metrics.l1MaxSize) * 100,
                hitRate: metrics.l1HitRate,
                hits: metrics.l1Hits,
                misses: metrics.l1Misses,
            },
            l2Cache: {
                available: servicesStatus.redis?.status === 'up',
                hitRate: metrics.l2HitRate,
                hits: metrics.l2Hits,
                misses: metrics.l2Misses,
                failovers: metrics.failovers,
            },
            overall: {
                hitRate: metrics.overallHitRate,
                evictions: metrics.evictions,
                warmingOperations: metrics.warmingOperations,
                criticalKeysCount: metrics.criticalKeysCount,
                pendingOperations: metrics.pendingOperations,
            },
            performance: {
                l1ResponseTime: '< 1ms',
                l2ResponseTime: servicesStatus.redis?.latency
                    ? `${servicesStatus.redis.latency}ms`
                    : 'N/A',
            },
        };
    }
    /**
     * Obtém métricas detalhadas da auditoria resiliente
     */
    async getAuditoriaMetrics() {
        const metrics = this.resilientAuditoriaService.getMetrics();
        // Verificar status dos serviços
        const redisAvailable = await this.healthCheckService.isRedisAvailable();
        const servicesStatus = {
            redis: {
                status: redisAvailable ? 'up' : 'down',
                lastCheck: new Date().toISOString(),
                latency: redisAvailable ? 5 : undefined,
            },
            database: {
                status: 'up', // Assumindo que o banco está sempre disponível se a aplicação está rodando
                lastCheck: new Date().toISOString(),
                latency: 10,
            },
        };
        const totalOperations = metrics.queueSuccesses + metrics.queueFailures;
        return {
            timestamp: new Date().toISOString(),
            queue: {
                available: servicesStatus.redis?.status === 'up',
                successRate: metrics.queueSuccessRate,
                successes: metrics.queueSuccesses,
                failures: metrics.queueFailures,
                totalOperations,
            },
            fallbacks: {
                syncFallbackUsage: metrics.fallbackUsageRate,
                syncFallbacks: metrics.syncFallbacks,
                fileBackupUsage: metrics.backupUsageRate,
                fileBackups: metrics.fileBackups,
            },
            recovery: {
                recoveredLogs: metrics.recoveredLogs,
                lastRecoveryRun: 'Informação não disponível', // Implementar se necessário
            },
            reliability: {
                dataLossRisk: this.calculateDataLossRisk(metrics),
                systemResilience: this.calculateSystemResilience(metrics, servicesStatus.redis?.status === 'up'),
            },
        };
    }
    /**
     * Força execução de cache warming
     */
    async forceCacheWarming() {
        await this.hybridCacheService.performCacheWarming();
        return {
            message: 'Cache warming executado com sucesso',
            timestamp: new Date().toISOString(),
        };
    }
    /**
     * Força execução de recuperação de logs de auditoria
     */
    async forceAuditoriaRecovery() {
        await this.resilientAuditoriaService.processBackupAuditLogs();
        return {
            message: 'Recuperação de logs de auditoria executada com sucesso',
            timestamp: new Date().toISOString(),
        };
    }
    /**
     * Reseta métricas (útil para testes e manutenção)
     */
    async resetMetrics() {
        this.hybridCacheService.resetMetrics();
        this.resilientAuditoriaService.resetMetrics();
        return {
            message: 'Métricas de resiliência resetadas com sucesso',
            timestamp: new Date().toISOString(),
        };
    }
    // Métodos privados para avaliação de status
    evaluateCacheStatus(metrics, redisAvailable) {
        let status;
        if (metrics.overallHitRate >= 80 && redisAvailable) {
            status = 'healthy';
        }
        else if (metrics.overallHitRate >= 60 || !redisAvailable) {
            status = 'degraded';
        }
        else {
            status = 'critical';
        }
        return {
            status,
            l1Available: true, // L1 sempre disponível
            l2Available: redisAvailable,
            metrics,
        };
    }
    evaluateAuditoriaStatus(metrics, redisAvailable) {
        let status;
        if (metrics.queueSuccessRate >= 95 && redisAvailable) {
            status = 'healthy';
        }
        else if (metrics.queueSuccessRate >= 80 ||
            metrics.fallbackUsageRate < 20) {
            status = 'degraded';
        }
        else {
            status = 'critical';
        }
        return {
            status,
            queueAvailable: redisAvailable,
            syncFallbackActive: metrics.syncFallbacks > 0,
            fileBackupActive: metrics.fileBackups > 0,
            metrics,
        };
    }
    determineOverallStatus(cacheStatus, auditoriaStatus, servicesStatus) {
        const statuses = [cacheStatus, auditoriaStatus];
        // Se algum serviço crítico está down
        if (servicesStatus.database?.status === 'down') {
            return 'critical';
        }
        // Se algum componente está crítico
        if (statuses.includes('critical')) {
            return 'critical';
        }
        // Se algum componente está degradado
        if (statuses.includes('degraded') ||
            servicesStatus.redis?.status === 'down') {
            return 'degraded';
        }
        return 'healthy';
    }
    generateAlerts(cacheMetrics, auditoriaMetrics, servicesStatus) {
        const alerts = [];
        const timestamp = new Date().toISOString();
        // Alertas de cache
        if (cacheMetrics.overallHitRate < 60) {
            alerts.push({
                severity: 'warning',
                service: 'cache',
                message: `Taxa de hit do cache baixa: ${cacheMetrics.overallHitRate.toFixed(1)}%`,
                timestamp,
            });
        }
        if (cacheMetrics.failovers > 10) {
            alerts.push({
                severity: 'critical',
                service: 'cache',
                message: `Muitos failovers do cache L2: ${cacheMetrics.failovers}`,
                timestamp,
            });
        }
        // Alertas de auditoria
        if (auditoriaMetrics.queueSuccessRate < 90) {
            alerts.push({
                severity: 'warning',
                service: 'auditoria',
                message: `Taxa de sucesso da fila de auditoria baixa: ${auditoriaMetrics.queueSuccessRate.toFixed(1)}%`,
                timestamp,
            });
        }
        if (auditoriaMetrics.fileBackups > 0) {
            alerts.push({
                severity: 'critical',
                service: 'auditoria',
                message: `Logs de auditoria sendo salvos em backup: ${auditoriaMetrics.fileBackups}`,
                timestamp,
            });
        }
        // Alertas de serviços externos
        if (servicesStatus.redis?.status === 'down') {
            alerts.push({
                severity: 'critical',
                service: 'redis',
                message: 'Redis indisponível - sistema operando em modo degradado',
                timestamp,
            });
        }
        if (servicesStatus.database?.status === 'down') {
            alerts.push({
                severity: 'critical',
                service: 'database',
                message: 'Banco de dados indisponível',
                timestamp,
            });
        }
        return alerts;
    }
    calculateDataLossRisk(metrics) {
        if (metrics.fileBackups > 0) {
            return 'high';
        }
        if (metrics.queueSuccessRate < 95) {
            return 'medium';
        }
        return 'low';
    }
    calculateSystemResilience(metrics, redisAvailable) {
        let score = 100;
        // Penalizar por falhas na fila
        if (metrics.queueSuccessRate < 100) {
            score -= (100 - metrics.queueSuccessRate) * 0.5;
        }
        // Penalizar por uso de fallbacks
        score -= metrics.fallbackUsageRate * 0.3;
        // Penalizar por backups em arquivo
        score -= metrics.backupUsageRate * 0.8;
        // Penalizar por Redis indisponível
        if (!redisAvailable) {
            score -= 20;
        }
        return Math.max(0, Math.min(100, score));
    }
};
exports.ResilienceMonitoringController = ResilienceMonitoringController;
__decorate([
    (0, common_1.Get)('status'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({
        summary: 'Status geral de resiliência',
        description: 'Retorna o status consolidado de todos os serviços resilientes do sistema',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status de resiliência obtido com sucesso',
        schema: {
            type: 'object',
            properties: {
                timestamp: { type: 'string', format: 'date-time' },
                overall: { type: 'string', enum: ['healthy', 'degraded', 'critical'] },
                services: { type: 'object' },
                alerts: { type: 'array' },
            },
        },
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], ResilienceMonitoringController.prototype, "getResilienceStatus", null);
__decorate([
    (0, common_1.Get)('cache/metrics'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({
        summary: 'Métricas do cache híbrido',
        description: 'Retorna métricas detalhadas do sistema de cache em múltiplas camadas',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas do cache obtidas com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ResilienceMonitoringController.prototype, "getCacheMetrics", null);
__decorate([
    (0, common_1.Get)('auditoria/metrics'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({
        summary: 'Métricas da auditoria resiliente',
        description: 'Retorna métricas detalhadas do sistema de auditoria com fallbacks',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas da auditoria obtidas com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ResilienceMonitoringController.prototype, "getAuditoriaMetrics", null);
__decorate([
    (0, common_1.Post)('cache/warm'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({
        summary: 'Força cache warming',
        description: 'Executa manualmente o processo de aquecimento do cache para chaves críticas',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Cache warming executado com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ResilienceMonitoringController.prototype, "forceCacheWarming", null);
__decorate([
    (0, common_1.Post)('auditoria/recover'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({
        summary: 'Força recuperação de logs',
        description: 'Executa manualmente o processo de recuperação de logs de auditoria em backup',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Recuperação de logs executada com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ResilienceMonitoringController.prototype, "forceAuditoriaRecovery", null);
__decorate([
    (0, common_1.Post)('metrics/reset'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({
        summary: 'Reseta métricas',
        description: 'Reseta todas as métricas de resiliência (use com cuidado)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas resetadas com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], ResilienceMonitoringController.prototype, "resetMetrics", null);
exports.ResilienceMonitoringController = ResilienceMonitoringController = __decorate([
    (0, swagger_1.ApiTags)('Monitoramento de Resiliência'),
    (0, common_1.Controller)('api/resilience'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof resilient_auditoria_service_1.ResilientAuditoriaService !== "undefined" && resilient_auditoria_service_1.ResilientAuditoriaService) === "function" ? _a : Object, typeof (_b = typeof hybrid_cache_service_1.HybridCacheService !== "undefined" && hybrid_cache_service_1.HybridCacheService) === "function" ? _b : Object, typeof (_c = typeof health_check_service_1.HealthCheckService !== "undefined" && health_check_service_1.HealthCheckService) === "function" ? _c : Object])
], ResilienceMonitoringController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,