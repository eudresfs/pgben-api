c414c92ecec7478c0ffbc41f6b4f28cd
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ValidacaoExclusividadeService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidacaoExclusividadeService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const typeorm_2 = require("@nestjs/typeorm");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
/**
 * Serviço responsável por validar a exclusividade de papéis dos cidadãos
 * nas solicitações de benefícios.
 *
 * Conforme requisito crítico (5.1 Exclusividade de Papéis) da especificação técnica,
 * um cidadão não pode simultaneamente ser beneficiário principal e
 * fazer parte da composição familiar de outro beneficiário.
 */
let ValidacaoExclusividadeService = ValidacaoExclusividadeService_1 = class ValidacaoExclusividadeService {
    solicitacaoRepository;
    logger = new common_1.Logger(ValidacaoExclusividadeService_1.name);
    constructor(solicitacaoRepository) {
        this.solicitacaoRepository = solicitacaoRepository;
    }
    /**
     * Valida se um cidadão pode ser beneficiário principal
     * verificando se ele não faz parte da composição familiar de outras solicitações ativas
     *
     * @param cidadaoId ID do cidadão a ser validado
     * @returns true se o cidadão pode ser beneficiário, false caso contrário
     * @throws BadRequestException se o cidadão já faz parte da composição familiar de outra solicitação
     */
    async validarExclusividadeBeneficiario(cidadaoId) {
        this.logger.log(`Validando exclusividade de papel para cidadão ${cidadaoId}`);
        // Verifica se o cidadão faz parte da composição familiar de alguma solicitação ativa
        const solicitacoesComCidadaoNaComposicao = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .where(`solicitacao.dados_complementares->'composicao_familiar' @> :membro`, {
            membro: JSON.stringify([{ cidadao_id: cidadaoId }]),
        })
            .andWhere(`solicitacao.status NOT IN (:...statusInativos)`, {
            statusInativos: [
                solicitacao_entity_1.StatusSolicitacao.CANCELADA,
                solicitacao_entity_1.StatusSolicitacao.INDEFERIDA,
                solicitacao_entity_1.StatusSolicitacao.ARQUIVADA,
            ],
        })
            .getCount();
        if (solicitacoesComCidadaoNaComposicao > 0) {
            this.logger.warn(`Cidadão ${cidadaoId} já faz parte da composição familiar de outra solicitação ativa`);
            throw new common_1.BadRequestException('Cidadão não pode ser beneficiário principal pois já faz parte da composição familiar de outra solicitação ativa');
        }
        return true;
    }
    /**
     * Valida se um cidadão pode ser incluído na composição familiar
     * verificando se ele não é beneficiário principal em outras solicitações ativas
     *
     * @param cidadaoId ID do cidadão a ser validado
     * @returns true se o cidadão pode ser incluído na composição familiar, false caso contrário
     * @throws BadRequestException se o cidadão já é beneficiário principal em outra solicitação
     */
    async validarExclusividadeComposicaoFamiliar(cidadaoId) {
        this.logger.log(`Validando exclusividade para composição familiar: cidadão ${cidadaoId}`);
        // Verifica se o cidadão é beneficiário principal em alguma solicitação ativa
        const solicitacoesComCidadaoBeneficiario = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .where('solicitacao.beneficiario_id = :cidadaoId', { cidadaoId })
            .andWhere(`solicitacao.status NOT IN (:...statusInativos)`, {
            statusInativos: [
                solicitacao_entity_1.StatusSolicitacao.CANCELADA,
                solicitacao_entity_1.StatusSolicitacao.INDEFERIDA,
                solicitacao_entity_1.StatusSolicitacao.ARQUIVADA,
            ],
        })
            .getCount();
        if (solicitacoesComCidadaoBeneficiario > 0) {
            this.logger.warn(`Cidadão ${cidadaoId} já é beneficiário principal em outra solicitação ativa`);
            throw new common_1.BadRequestException('Cidadão não pode ser incluído na composição familiar pois já é beneficiário principal em outra solicitação ativa');
        }
        return true;
    }
    /**
     * Valida a composição familiar completa, verificando se todos os membros
     * podem ser incluídos (não são beneficiários principais em outras solicitações)
     *
     * @param composicaoFamiliar Array de IDs de cidadãos da composição familiar
     * @returns true se todos os membros podem ser incluídos na composição familiar
     * @throws BadRequestException se algum membro não pode ser incluído
     */
    async validarComposicaoFamiliarCompleta(composicaoFamiliar) {
        this.logger.log(`Validando composição familiar completa com ${composicaoFamiliar.length} membros`);
        // Valida cada membro da composição familiar
        for (const cidadaoId of composicaoFamiliar) {
            await this.validarExclusividadeComposicaoFamiliar(cidadaoId);
        }
        return true;
    }
};
exports.ValidacaoExclusividadeService = ValidacaoExclusividadeService;
exports.ValidacaoExclusividadeService = ValidacaoExclusividadeService = ValidacaoExclusividadeService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_2.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.Repository !== "undefined" && typeorm_1.Repository) === "function" ? _a : Object])
], ValidacaoExclusividadeService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,