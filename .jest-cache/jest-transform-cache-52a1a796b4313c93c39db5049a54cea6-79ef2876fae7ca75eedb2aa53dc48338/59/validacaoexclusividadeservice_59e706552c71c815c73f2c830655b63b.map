{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\validacao-exclusividade.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CAAyE;AACzE,qCAAqC;AACrC,6CAAmD;AACnD,6EAG8C;AAE9C;;;;;;;GAOG;AAEI,IAAM,6BAA6B,qCAAnC,MAAM,6BAA6B;IAK9B;IAJO,MAAM,GAAG,IAAI,eAAM,CAAC,+BAA6B,CAAC,IAAI,CAAC,CAAC;IAEzE,YAEU,qBAA8C;QAA9C,0BAAqB,GAArB,qBAAqB,CAAyB;IACrD,CAAC;IAEJ;;;;;;;OAOG;IACH,KAAK,CAAC,gCAAgC,CAAC,SAAiB;QACtD,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,iDAAiD,SAAS,EAAE,CAC7D,CAAC;QAEF,qFAAqF;QACrF,MAAM,kCAAkC,GAAG,MAAM,IAAI,CAAC,qBAAqB;aACxE,kBAAkB,CAAC,aAAa,CAAC;aACjC,KAAK,CACJ,oEAAoE,EACpE;YACE,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,CAAC;SACpD,CACF;aACA,QAAQ,CAAC,gDAAgD,EAAE;YAC1D,cAAc,EAAE;gBACd,sCAAiB,CAAC,SAAS;gBAC3B,sCAAiB,CAAC,UAAU;gBAC5B,sCAAiB,CAAC,SAAS;aAC5B;SACF,CAAC;aACD,QAAQ,EAAE,CAAC;QAEd,IAAI,kCAAkC,GAAG,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,WAAW,SAAS,iEAAiE,CACtF,CAAC;YACF,MAAM,IAAI,4BAAmB,CAC3B,iHAAiH,CAClH,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,sCAAsC,CAC1C,SAAiB;QAEjB,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,6DAA6D,SAAS,EAAE,CACzE,CAAC;QAEF,6EAA6E;QAC7E,MAAM,kCAAkC,GAAG,MAAM,IAAI,CAAC,qBAAqB;aACxE,kBAAkB,CAAC,aAAa,CAAC;aACjC,KAAK,CAAC,0CAA0C,EAAE,EAAE,SAAS,EAAE,CAAC;aAChE,QAAQ,CAAC,gDAAgD,EAAE;YAC1D,cAAc,EAAE;gBACd,sCAAiB,CAAC,SAAS;gBAC3B,sCAAiB,CAAC,UAAU;gBAC5B,sCAAiB,CAAC,SAAS;aAC5B;SACF,CAAC;aACD,QAAQ,EAAE,CAAC;QAEd,IAAI,kCAAkC,GAAG,CAAC,EAAE,CAAC;YAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,WAAW,SAAS,yDAAyD,CAC9E,CAAC;YACF,MAAM,IAAI,4BAAmB,CAC3B,kHAAkH,CACnH,CAAC;QACJ,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,iCAAiC,CACrC,kBAA4B;QAE5B,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,8CAA8C,kBAAkB,CAAC,MAAM,UAAU,CAClF,CAAC;QAEF,4CAA4C;QAC5C,KAAK,MAAM,SAAS,IAAI,kBAAkB,EAAE,CAAC;YAC3C,MAAM,IAAI,CAAC,sCAAsC,CAAC,SAAS,CAAC,CAAC;QAC/D,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AAjHY,sEAA6B;wCAA7B,6BAA6B;IADzC,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,0BAAgB,EAAC,gCAAW,CAAC,CAAA;yDACC,oBAAU,oBAAV,oBAAU;GALhC,6BAA6B,CAiHzC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\validacao-exclusividade.service.ts"],"sourcesContent":["import { Injectable, Logger, BadRequestException } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../../entities/solicitacao.entity';\n\n/**\n * Serviço responsável por validar a exclusividade de papéis dos cidadãos\n * nas solicitações de benefícios.\n *\n * Conforme requisito crítico (5.1 Exclusividade de Papéis) da especificação técnica,\n * um cidadão não pode simultaneamente ser beneficiário principal e\n * fazer parte da composição familiar de outro beneficiário.\n */\n@Injectable()\nexport class ValidacaoExclusividadeService {\n  private readonly logger = new Logger(ValidacaoExclusividadeService.name);\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private solicitacaoRepository: Repository<Solicitacao>,\n  ) {}\n\n  /**\n   * Valida se um cidadão pode ser beneficiário principal\n   * verificando se ele não faz parte da composição familiar de outras solicitações ativas\n   *\n   * @param cidadaoId ID do cidadão a ser validado\n   * @returns true se o cidadão pode ser beneficiário, false caso contrário\n   * @throws BadRequestException se o cidadão já faz parte da composição familiar de outra solicitação\n   */\n  async validarExclusividadeBeneficiario(cidadaoId: string): Promise<boolean> {\n    this.logger.log(\n      `Validando exclusividade de papel para cidadão ${cidadaoId}`,\n    );\n\n    // Verifica se o cidadão faz parte da composição familiar de alguma solicitação ativa\n    const solicitacoesComCidadaoNaComposicao = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .where(\n        `solicitacao.dados_complementares->'composicao_familiar' @> :membro`,\n        {\n          membro: JSON.stringify([{ cidadao_id: cidadaoId }]),\n        },\n      )\n      .andWhere(`solicitacao.status NOT IN (:...statusInativos)`, {\n        statusInativos: [\n          StatusSolicitacao.CANCELADA,\n          StatusSolicitacao.INDEFERIDA,\n          StatusSolicitacao.ARQUIVADA,\n        ],\n      })\n      .getCount();\n\n    if (solicitacoesComCidadaoNaComposicao > 0) {\n      this.logger.warn(\n        `Cidadão ${cidadaoId} já faz parte da composição familiar de outra solicitação ativa`,\n      );\n      throw new BadRequestException(\n        'Cidadão não pode ser beneficiário principal pois já faz parte da composição familiar de outra solicitação ativa',\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Valida se um cidadão pode ser incluído na composição familiar\n   * verificando se ele não é beneficiário principal em outras solicitações ativas\n   *\n   * @param cidadaoId ID do cidadão a ser validado\n   * @returns true se o cidadão pode ser incluído na composição familiar, false caso contrário\n   * @throws BadRequestException se o cidadão já é beneficiário principal em outra solicitação\n   */\n  async validarExclusividadeComposicaoFamiliar(\n    cidadaoId: string,\n  ): Promise<boolean> {\n    this.logger.log(\n      `Validando exclusividade para composição familiar: cidadão ${cidadaoId}`,\n    );\n\n    // Verifica se o cidadão é beneficiário principal em alguma solicitação ativa\n    const solicitacoesComCidadaoBeneficiario = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .where('solicitacao.beneficiario_id = :cidadaoId', { cidadaoId })\n      .andWhere(`solicitacao.status NOT IN (:...statusInativos)`, {\n        statusInativos: [\n          StatusSolicitacao.CANCELADA,\n          StatusSolicitacao.INDEFERIDA,\n          StatusSolicitacao.ARQUIVADA,\n        ],\n      })\n      .getCount();\n\n    if (solicitacoesComCidadaoBeneficiario > 0) {\n      this.logger.warn(\n        `Cidadão ${cidadaoId} já é beneficiário principal em outra solicitação ativa`,\n      );\n      throw new BadRequestException(\n        'Cidadão não pode ser incluído na composição familiar pois já é beneficiário principal em outra solicitação ativa',\n      );\n    }\n\n    return true;\n  }\n\n  /**\n   * Valida a composição familiar completa, verificando se todos os membros\n   * podem ser incluídos (não são beneficiários principais em outras solicitações)\n   *\n   * @param composicaoFamiliar Array de IDs de cidadãos da composição familiar\n   * @returns true se todos os membros podem ser incluídos na composição familiar\n   * @throws BadRequestException se algum membro não pode ser incluído\n   */\n  async validarComposicaoFamiliarCompleta(\n    composicaoFamiliar: string[],\n  ): Promise<boolean> {\n    this.logger.log(\n      `Validando composição familiar completa com ${composicaoFamiliar.length} membros`,\n    );\n\n    // Valida cada membro da composição familiar\n    for (const cidadaoId of composicaoFamiliar) {\n      await this.validarExclusividadeComposicaoFamiliar(cidadaoId);\n    }\n\n    return true;\n  }\n}\n"],"version":3}