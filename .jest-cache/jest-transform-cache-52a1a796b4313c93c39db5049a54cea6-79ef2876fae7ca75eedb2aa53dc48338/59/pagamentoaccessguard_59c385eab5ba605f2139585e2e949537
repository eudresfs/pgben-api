fb817649776efd56b90f2c1f452016d0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagamentoAccessGuard = exports.UNIDADES_KEY = exports.PERFIS_KEY = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const pagamento_service_1 = require("../services/pagamento.service");
const integracao_cidadao_service_1 = require("../services/integracao-cidadao.service");
const integracao_solicitacao_service_1 = require("../services/integracao-solicitacao.service");
// Chaves para metadados de controle de acesso
exports.PERFIS_KEY = 'perfis_permitidos';
exports.UNIDADES_KEY = 'verificar_unidade';
/**
 * Guard para controle de acesso aos endpoints do módulo de pagamento
 *
 * Implementa verificações de permissão baseadas em:
 * - Perfil do usuário (admin, operador, etc)
 * - Unidade do usuário vs unidade do pagamento/solicitação
 * - Propriedade do recurso (pagamento, comprovante, confirmação)
 *
 * @author Equipe PGBen
 */
let PagamentoAccessGuard = class PagamentoAccessGuard {
    reflector;
    pagamentoService;
    cidadaoService;
    solicitacaoService;
    constructor(reflector, pagamentoService, cidadaoService, solicitacaoService) {
        this.reflector = reflector;
        this.pagamentoService = pagamentoService;
        this.cidadaoService = cidadaoService;
        this.solicitacaoService = solicitacaoService;
    }
    /**
     * Verifica se o usuário tem permissão para acessar o recurso
     *
     * @param context Contexto de execução
     * @returns true se o usuário tem permissão, false caso contrário
     */
    async canActivate(context) {
        const perfisPermitidos = this.reflector.getAllAndOverride(exports.PERFIS_KEY, [
            context.getHandler(),
            context.getClass(),
        ]) || [];
        const verificarUnidade = this.reflector.getAllAndOverride(exports.UNIDADES_KEY, [
            context.getHandler(),
            context.getClass(),
        ]) || false;
        const request = context.switchToHttp().getRequest();
        const usuario = request.user;
        // Se não há usuário autenticado, negar acesso
        if (!usuario) {
            throw new common_1.ForbiddenException('Usuário não autenticado');
        }
        // Verificar perfil do usuário
        if (perfisPermitidos.length > 0 &&
            !perfisPermitidos.includes(usuario.perfil)) {
            throw new common_1.ForbiddenException(`Acesso restrito a: ${perfisPermitidos.join(', ')}`);
        }
        // Super admin sempre tem acesso
        if (usuario.perfil === 'super_admin') {
            return true;
        }
        // Se não precisa verificar unidade, permitir acesso
        if (!verificarUnidade) {
            return true;
        }
        // Obter IDs dos parâmetros da requisição
        const pagamentoId = request.params.pagamentoId || request.params.id;
        const beneficiarioId = request.params.beneficiarioId;
        const comprovanteId = request.params.comprovanteId;
        // Verificar acesso baseado no ID do pagamento
        if (pagamentoId) {
            try {
                const pagamento = await this.pagamentoService.findOneWithRelations(pagamentoId);
                if (!pagamento) {
                    throw new common_1.NotFoundException('Pagamento não encontrado');
                }
                // Verificar status da solicitação associada ao pagamento
                // Usando o método que existe no serviço
                const solicitacaoStatus = await this.solicitacaoService.verificarSolicitacaoAprovada(pagamento.solicitacaoId);
                if (!solicitacaoStatus) {
                    throw new common_1.NotFoundException('Solicitação não encontrada');
                }
                // Obter a unidade da solicitação
                const unidadeId = solicitacaoStatus.unidadeId;
                // Verificar se o usuário pertence à mesma unidade da solicitação
                if (usuario.unidadeId !== unidadeId && usuario.perfil !== 'admin') {
                    throw new common_1.ForbiddenException('Acesso restrito à unidade responsável');
                }
                // Verificações adicionais para comprovantes
                if (comprovanteId && usuario.perfil !== 'admin') {
                    // Verificar se o comprovante existe e pertence ao pagamento
                    // Usando um método genérico que deve existir no serviço
                    const comprovante = await this.pagamentoService.findOne(comprovanteId);
                    // Verificar se o comprovante pertence ao pagamento
                    if (!comprovante ||
                        comprovante.solicitacaoId !== pagamento.solicitacaoId) {
                        throw new common_1.ForbiddenException('Comprovante não encontrado ou não pertence ao pagamento');
                    }
                }
            }
            catch (error) {
                if (error instanceof common_1.NotFoundException) {
                    throw error;
                }
                throw new common_1.ForbiddenException('Erro ao verificar permissões de acesso');
            }
            return true;
        }
        // Verificar acesso baseado no ID do beneficiário
        if (beneficiarioId) {
            try {
                // Obter informações do beneficiário usando o método correto que existe no serviço
                const cidadao = await this.cidadaoService.obterDadosPessoais(beneficiarioId);
                if (!cidadao) {
                    throw new common_1.NotFoundException('Beneficiário não encontrado');
                }
                // Verificar se o usuário pertence à mesma unidade do cidadão
                // Assumindo que a unidade está disponível nos dados retornados
                const unidadeId = cidadao.unidadeId || null;
                if (unidadeId &&
                    usuario.unidadeId !== unidadeId &&
                    usuario.perfil !== 'admin') {
                    throw new common_1.ForbiddenException('Acesso restrito à unidade responsável pelo beneficiário');
                }
            }
            catch (error) {
                if (error instanceof common_1.NotFoundException) {
                    throw error;
                }
                throw new common_1.ForbiddenException('Erro ao verificar permissões de acesso ao beneficiário');
            }
            return true;
        }
        // Se chegou aqui, permitir acesso
        return true;
    }
};
exports.PagamentoAccessGuard = PagamentoAccessGuard;
exports.PagamentoAccessGuard = PagamentoAccessGuard = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object, typeof (_b = typeof pagamento_service_1.PagamentoService !== "undefined" && pagamento_service_1.PagamentoService) === "function" ? _b : Object, typeof (_c = typeof integracao_cidadao_service_1.IntegracaoCidadaoService !== "undefined" && integracao_cidadao_service_1.IntegracaoCidadaoService) === "function" ? _c : Object, typeof (_d = typeof integracao_solicitacao_service_1.IntegracaoSolicitacaoService !== "undefined" && integracao_solicitacao_service_1.IntegracaoSolicitacaoService) === "function" ? _d : Object])
], PagamentoAccessGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,