{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\cache\\redis.config.ts","mappings":";;AAaA,wCA8BC;AAxCD;;;;;;;;;GASG;AACH,SAAgB,cAAc,CAAC,aAA4B;IACzD,OAAO;QACL,IAAI,EAAE,aAAa,CAAC,GAAG,CAAS,YAAY,EAAE,WAAW,CAAC;QAC1D,IAAI,EAAE,aAAa,CAAC,GAAG,CAAS,YAAY,EAAE,IAAI,CAAC;QACnD,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAS,gBAAgB,EAAE,EAAE,CAAC;QACzD,EAAE,EAAE,aAAa,CAAC,GAAG,CAAS,UAAU,EAAE,CAAC,CAAC;QAE5C,uCAAuC;QACvC,cAAc,EAAE,aAAa,CAAC,GAAG,CAAS,uBAAuB,EAAE,IAAI,CAAC;QACxE,cAAc,EAAE,aAAa,CAAC,GAAG,CAAS,uBAAuB,EAAE,IAAI,CAAC;QACxE,oBAAoB,EAAE,aAAa,CAAC,GAAG,CAAS,mBAAmB,EAAE,CAAC,CAAC;QAEvE,6BAA6B;QAC7B,aAAa,CAAC,KAAK;YACjB,wCAAwC;YACxC,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC;YAC1C,OAAO,KAAK,CAAC;QACf,CAAC;QAED,oCAAoC;QACpC,gBAAgB,EAAE,IAAI;QACtB,kBAAkB,EAAE,IAAI;QAExB,8BAA8B;QAC9B,SAAS,EAAE,KAAK;QAChB,OAAO,EAAE,IAAI;QAEb,sBAAsB;QACtB,sBAAsB,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;KAC9D,CAAC;AACJ,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\cache\\redis.config.ts"],"sourcesContent":["import { ConfigService } from '@nestjs/config';\nimport { RedisOptions } from 'ioredis';\n\n/**\n * Configurações otimizadas para o Redis\n * \n * Estas configurações são projetadas para melhorar a resiliência e performance\n * da conexão com o Redis, incluindo:\n * - Reconexão automática com backoff exponencial\n * - Timeout de comandos para evitar bloqueios\n * - Número máximo de tentativas de reconexão\n * - Monitoramento de saúde da conexão\n */\nexport function getRedisConfig(configService: ConfigService): RedisOptions {\n  return {\n    host: configService.get<string>('REDIS_HOST', 'localhost'),\n    port: configService.get<number>('REDIS_PORT', 6379),\n    password: configService.get<string>('REDIS_PASSWORD', ''),\n    db: configService.get<number>('REDIS_DB', 0),\n    \n    // Configurações de timeout e reconexão\n    connectTimeout: configService.get<number>('REDIS_CONNECT_TIMEOUT', 5000),\n    commandTimeout: configService.get<number>('REDIS_COMMAND_TIMEOUT', 2000),\n    maxRetriesPerRequest: configService.get<number>('REDIS_MAX_RETRIES', 3),\n    \n    // Configurações de reconexão\n    retryStrategy(times) {\n      // Backoff exponencial com limite máximo\n      const delay = Math.min(times * 100, 3000);\n      return delay;\n    },\n    \n    // Configurações de saúde da conexão\n    enableReadyCheck: true,\n    enableOfflineQueue: true,\n    \n    // Configurações de desempenho\n    keepAlive: 10000,\n    noDelay: true,\n    \n    // Tratamento de erros\n    showFriendlyErrorStack: process.env.NODE_ENV !== 'production',\n  };\n}\n"],"version":3}