ec1ef3ae8dfaef1e17ab57eece07e991
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRedisConfig = getRedisConfig;
/**
 * Configurações otimizadas para o Redis
 *
 * Estas configurações são projetadas para melhorar a resiliência e performance
 * da conexão com o Redis, incluindo:
 * - Reconexão automática com backoff exponencial
 * - Timeout de comandos para evitar bloqueios
 * - Número máximo de tentativas de reconexão
 * - Monitoramento de saúde da conexão
 */
function getRedisConfig(configService) {
    return {
        host: configService.get('REDIS_HOST', 'localhost'),
        port: configService.get('REDIS_PORT', 6379),
        password: configService.get('REDIS_PASSWORD', ''),
        db: configService.get('REDIS_DB', 0),
        // Configurações de timeout e reconexão
        connectTimeout: configService.get('REDIS_CONNECT_TIMEOUT', 5000),
        commandTimeout: configService.get('REDIS_COMMAND_TIMEOUT', 2000),
        maxRetriesPerRequest: configService.get('REDIS_MAX_RETRIES', 3),
        // Configurações de reconexão
        retryStrategy(times) {
            // Backoff exponencial com limite máximo
            const delay = Math.min(times * 100, 3000);
            return delay;
        },
        // Configurações de saúde da conexão
        enableReadyCheck: true,
        enableOfflineQueue: true,
        // Configurações de desempenho
        keepAlive: 10000,
        noDelay: true,
        // Tratamento de erros
        showFriendlyErrorStack: process.env.NODE_ENV !== 'production',
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcY2FjaGVcXHJlZGlzLmNvbmZpZy50cyIsIm1hcHBpbmdzIjoiOztBQWFBLHdDQThCQztBQXhDRDs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixjQUFjLENBQUMsYUFBNEI7SUFDekQsT0FBTztRQUNMLElBQUksRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFTLFlBQVksRUFBRSxXQUFXLENBQUM7UUFDMUQsSUFBSSxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQVMsWUFBWSxFQUFFLElBQUksQ0FBQztRQUNuRCxRQUFRLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBUyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7UUFDekQsRUFBRSxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQVMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUU1Qyx1Q0FBdUM7UUFDdkMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQVMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDO1FBQ3hFLGNBQWMsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFTLHVCQUF1QixFQUFFLElBQUksQ0FBQztRQUN4RSxvQkFBb0IsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFTLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUV2RSw2QkFBNkI7UUFDN0IsYUFBYSxDQUFDLEtBQUs7WUFDakIsd0NBQXdDO1lBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMxQyxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxvQ0FBb0M7UUFDcEMsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0QixrQkFBa0IsRUFBRSxJQUFJO1FBRXhCLDhCQUE4QjtRQUM5QixTQUFTLEVBQUUsS0FBSztRQUNoQixPQUFPLEVBQUUsSUFBSTtRQUViLHNCQUFzQjtRQUN0QixzQkFBc0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZO0tBQzlELENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXGNhY2hlXFxyZWRpcy5jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJ0BuZXN0anMvY29uZmlnJztcbmltcG9ydCB7IFJlZGlzT3B0aW9ucyB9IGZyb20gJ2lvcmVkaXMnO1xuXG4vKipcbiAqIENvbmZpZ3VyYcOnw7VlcyBvdGltaXphZGFzIHBhcmEgbyBSZWRpc1xuICogXG4gKiBFc3RhcyBjb25maWd1cmHDp8O1ZXMgc8OjbyBwcm9qZXRhZGFzIHBhcmEgbWVsaG9yYXIgYSByZXNpbGnDqm5jaWEgZSBwZXJmb3JtYW5jZVxuICogZGEgY29uZXjDo28gY29tIG8gUmVkaXMsIGluY2x1aW5kbzpcbiAqIC0gUmVjb25leMOjbyBhdXRvbcOhdGljYSBjb20gYmFja29mZiBleHBvbmVuY2lhbFxuICogLSBUaW1lb3V0IGRlIGNvbWFuZG9zIHBhcmEgZXZpdGFyIGJsb3F1ZWlvc1xuICogLSBOw7ptZXJvIG3DoXhpbW8gZGUgdGVudGF0aXZhcyBkZSByZWNvbmV4w6NvXG4gKiAtIE1vbml0b3JhbWVudG8gZGUgc2HDumRlIGRhIGNvbmV4w6NvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWRpc0NvbmZpZyhjb25maWdTZXJ2aWNlOiBDb25maWdTZXJ2aWNlKTogUmVkaXNPcHRpb25zIHtcbiAgcmV0dXJuIHtcbiAgICBob3N0OiBjb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdSRURJU19IT1NUJywgJ2xvY2FsaG9zdCcpLFxuICAgIHBvcnQ6IGNvbmZpZ1NlcnZpY2UuZ2V0PG51bWJlcj4oJ1JFRElTX1BPUlQnLCA2Mzc5KSxcbiAgICBwYXNzd29yZDogY29uZmlnU2VydmljZS5nZXQ8c3RyaW5nPignUkVESVNfUEFTU1dPUkQnLCAnJyksXG4gICAgZGI6IGNvbmZpZ1NlcnZpY2UuZ2V0PG51bWJlcj4oJ1JFRElTX0RCJywgMCksXG4gICAgXG4gICAgLy8gQ29uZmlndXJhw6fDtWVzIGRlIHRpbWVvdXQgZSByZWNvbmV4w6NvXG4gICAgY29ubmVjdFRpbWVvdXQ6IGNvbmZpZ1NlcnZpY2UuZ2V0PG51bWJlcj4oJ1JFRElTX0NPTk5FQ1RfVElNRU9VVCcsIDUwMDApLFxuICAgIGNvbW1hbmRUaW1lb3V0OiBjb25maWdTZXJ2aWNlLmdldDxudW1iZXI+KCdSRURJU19DT01NQU5EX1RJTUVPVVQnLCAyMDAwKSxcbiAgICBtYXhSZXRyaWVzUGVyUmVxdWVzdDogY29uZmlnU2VydmljZS5nZXQ8bnVtYmVyPignUkVESVNfTUFYX1JFVFJJRVMnLCAzKSxcbiAgICBcbiAgICAvLyBDb25maWd1cmHDp8O1ZXMgZGUgcmVjb25leMOjb1xuICAgIHJldHJ5U3RyYXRlZ3kodGltZXMpIHtcbiAgICAgIC8vIEJhY2tvZmYgZXhwb25lbmNpYWwgY29tIGxpbWl0ZSBtw6F4aW1vXG4gICAgICBjb25zdCBkZWxheSA9IE1hdGgubWluKHRpbWVzICogMTAwLCAzMDAwKTtcbiAgICAgIHJldHVybiBkZWxheTtcbiAgICB9LFxuICAgIFxuICAgIC8vIENvbmZpZ3VyYcOnw7VlcyBkZSBzYcO6ZGUgZGEgY29uZXjDo29cbiAgICBlbmFibGVSZWFkeUNoZWNrOiB0cnVlLFxuICAgIGVuYWJsZU9mZmxpbmVRdWV1ZTogdHJ1ZSxcbiAgICBcbiAgICAvLyBDb25maWd1cmHDp8O1ZXMgZGUgZGVzZW1wZW5ob1xuICAgIGtlZXBBbGl2ZTogMTAwMDAsXG4gICAgbm9EZWxheTogdHJ1ZSxcbiAgICBcbiAgICAvLyBUcmF0YW1lbnRvIGRlIGVycm9zXG4gICAgc2hvd0ZyaWVuZGx5RXJyb3JTdGFjazogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==