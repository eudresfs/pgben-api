fa973d3c8dc58b821890258fad9bca6a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricaDefinicao = exports.GranularidadeTemporal = exports.CategoriaMetrica = exports.TipoMetrica = void 0;
const typeorm_1 = require("typeorm");
const metrica_snapshot_entity_1 = require("./metrica-snapshot.entity");
const metrica_configuracao_entity_1 = require("./metrica-configuracao.entity");
/**
 * Tipos de métricas suportados pelo sistema
 */
var TipoMetrica;
(function (TipoMetrica) {
    /** Contagem simples de ocorrências */
    TipoMetrica["CONTAGEM"] = "contagem";
    /** Soma de valores */
    TipoMetrica["SOMA"] = "soma";
    /** Média de valores */
    TipoMetrica["MEDIA"] = "media";
    /** Valor mínimo */
    TipoMetrica["MINIMO"] = "minimo";
    /** Valor máximo */
    TipoMetrica["MAXIMO"] = "maximo";
    /** Métrica calculada a partir de outras métricas usando fórmula personalizada */
    TipoMetrica["COMPOSTA"] = "composta";
    /** Percentil (requer parâmetro adicional) */
    TipoMetrica["PERCENTIL"] = "percentil";
    /** Contagem de valores distintos */
    TipoMetrica["CARDINALIDADE"] = "cardinalidade";
    /** Taxa de variação entre períodos */
    TipoMetrica["TAXA_VARIACAO"] = "taxa_variacao";
})(TipoMetrica || (exports.TipoMetrica = TipoMetrica = {}));
/**
 * Categorias de métricas para organização
 */
var CategoriaMetrica;
(function (CategoriaMetrica) {
    CategoriaMetrica["FINANCEIRO"] = "financeiro";
    CategoriaMetrica["OPERACIONAL"] = "operacional";
    CategoriaMetrica["DESEMPENHO"] = "desempenho";
    CategoriaMetrica["QUALIDADE"] = "qualidade";
    CategoriaMetrica["USUARIO"] = "usuario";
    CategoriaMetrica["BENEFICIO"] = "beneficio";
    CategoriaMetrica["PROCESSAMENTO"] = "processamento";
    CategoriaMetrica["SISTEMA"] = "sistema";
})(CategoriaMetrica || (exports.CategoriaMetrica = CategoriaMetrica = {}));
/**
 * Granularidades temporais suportadas para agregação
 */
var GranularidadeTemporal;
(function (GranularidadeTemporal) {
    GranularidadeTemporal["MINUTO"] = "minuto";
    GranularidadeTemporal["HORA"] = "hora";
    GranularidadeTemporal["DIA"] = "dia";
    GranularidadeTemporal["SEMANA"] = "semana";
    GranularidadeTemporal["MES"] = "mes";
    GranularidadeTemporal["TRIMESTRE"] = "trimestre";
    GranularidadeTemporal["ANO"] = "ano";
})(GranularidadeTemporal || (exports.GranularidadeTemporal = GranularidadeTemporal = {}));
/**
 * Definição de uma métrica no sistema
 *
 * Esta entidade armazena a definição de cada métrica, incluindo sua fórmula
 * de cálculo, tipo, categoria, e configurações de coleta e armazenamento.
 */
let MetricaDefinicao = class MetricaDefinicao {
    id;
    /**
     * Código único da métrica (snake_case)
     * Exemplo: 'tempo_medio_processamento_beneficio'
     */
    codigo;
    /**
     * Nome de exibição da métrica
     * Exemplo: 'Tempo Médio de Processamento de Benefício'
     */
    nome;
    /**
     * Descrição detalhada da métrica
     */
    descricao;
    /**
     * Tipo da métrica (contagem, soma, média, etc.)
     */
    tipo;
    /**
     * Categoria da métrica para organização
     */
    categoria;
    /**
     * Unidade de medida da métrica
     * Exemplo: 'segundos', 'reais', 'percentual', 'quantidade'
     */
    unidade;
    /**
     * Prefixo a ser exibido antes do valor
     * Exemplo: 'R$', '$'
     */
    prefixo;
    /**
     * Sufixo a ser exibido após o valor
     * Exemplo: '%', 'ms'
     */
    sufixo;
    /**
     * Número de casas decimais a serem exibidas
     */
    casas_decimais;
    /**
     * Consulta SQL para coletar dados (para métricas baseadas em banco de dados)
     */
    sql_consulta;
    /**
     * Fórmula para cálculo (para métricas compostas)
     * Pode referenciar outras métricas usando seus códigos
     * Exemplo: 'metrica_a / metrica_b * 100'
     */
    formula_calculo;
    /**
     * Fonte de dados da métrica
     * Exemplo: 'banco_dados', 'api', 'evento', 'arquivo'
     */
    fonte_dados;
    /**
     * Especificação de como agregar os dados em diferentes períodos
     * Exemplo: 'soma', 'media', 'ultimo', 'primeiro'
     */
    agregacao_temporal;
    /**
     * Granularidade mínima de coleta/armazenamento
     */
    granularidade;
    /**
     * Referência a outras métricas utilizadas no cálculo (caso seja composta)
     * Armazenado como array de códigos de métricas
     */
    metricas_dependentes;
    /**
     * Flag que indica se a métrica está ativa para coleta
     */
    ativa;
    /**
     * Parâmetros específicos para o tipo de métrica
     * Armazenado como JSON
     * Exemplo para PERCENTIL: { "percentil": 95 }
     */
    parametros_especificos;
    /**
     * Tags para filtrar e categorizar métricas
     */
    tags;
    /**
     * Versão atual da definição da métrica
     */
    versao;
    /**
     * Data da última coleta bem-sucedida
     */
    ultima_coleta;
    /**
     * Flag que indica se a métrica é calculada em tempo real ou pré-calculada
     */
    calculo_tempo_real;
    /**
     * Usuário que criou a métrica
     */
    criado_por;
    /**
     * Usuário que atualizou a métrica pela última vez
     */
    atualizado_por;
    /**
     * Data de criação do registro
     */
    created_at;
    /**
     * Data da última atualização do registro
     */
    updated_at;
    /**
     * Relacionamento com snapshots históricos da métrica
     *
     * Usando lazy loading para evitar dependências circulares
     */
    snapshots;
    /**
     * Relacionamento com configurações de coleta e armazenamento
     *
     * Usando lazy loading para evitar dependências circulares
     */
    configuracoes;
};
exports.MetricaDefinicao = MetricaDefinicao;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100, unique: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "codigo", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100 }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'text' }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: TipoMetrica,
        enumName: 'tipo_metrica',
        default: TipoMetrica.CONTAGEM,
    }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "tipo", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: CategoriaMetrica,
        enumName: 'categoria_metrica',
        default: CategoriaMetrica.OPERACIONAL,
    }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "categoria", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 50, nullable: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "unidade", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 10, nullable: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "prefixo", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 10, nullable: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "sufixo", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 2 }),
    __metadata("design:type", Number)
], MetricaDefinicao.prototype, "casas_decimais", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "sql_consulta", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "formula_calculo", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 50, default: 'banco_dados' }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "fonte_dados", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 20, default: 'soma' }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "agregacao_temporal", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: GranularidadeTemporal,
        enumName: 'granularidade_temporal',
        default: GranularidadeTemporal.DIA,
    }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "granularidade", void 0);
__decorate([
    (0, typeorm_1.Column)('simple-array', { nullable: true }),
    __metadata("design:type", Array)
], MetricaDefinicao.prototype, "metricas_dependentes", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    __metadata("design:type", Boolean)
], MetricaDefinicao.prototype, "ativa", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", typeof (_a = typeof Record !== "undefined" && Record) === "function" ? _a : Object)
], MetricaDefinicao.prototype, "parametros_especificos", void 0);
__decorate([
    (0, typeorm_1.Column)('simple-array', { nullable: true }),
    __metadata("design:type", Array)
], MetricaDefinicao.prototype, "tags", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 1 }),
    __metadata("design:type", Number)
], MetricaDefinicao.prototype, "versao", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'timestamp', nullable: true }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], MetricaDefinicao.prototype, "ultima_coleta", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: false }),
    __metadata("design:type", Boolean)
], MetricaDefinicao.prototype, "calculo_tempo_real", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100, nullable: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "criado_por", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100, nullable: true }),
    __metadata("design:type", String)
], MetricaDefinicao.prototype, "atualizado_por", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], MetricaDefinicao.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], MetricaDefinicao.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => metrica_snapshot_entity_1.MetricaSnapshot, (snapshot) => snapshot.definicao, {
        lazy: true,
    }),
    __metadata("design:type", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], MetricaDefinicao.prototype, "snapshots", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => metrica_configuracao_entity_1.MetricaConfiguracao, (config) => config.metrica, {
        lazy: true,
    }),
    __metadata("design:type", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], MetricaDefinicao.prototype, "configuracoes", void 0);
exports.MetricaDefinicao = MetricaDefinicao = __decorate([
    (0, typeorm_1.Entity)('metrica_definicao'),
    (0, typeorm_1.Index)(['codigo'], { unique: true })
], MetricaDefinicao);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,