c150bcb01c96a2d0e67210d04128763a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosNatalidadeService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const dados_natalidade_entity_1 = require("../../../entities/dados-natalidade.entity");
/**
 * Serviço para gerenciar dados específicos de Auxílio Natalidade
 */
let DadosNatalidadeService = class DadosNatalidadeService {
    dadosNatalidadeRepository;
    constructor(dadosNatalidadeRepository) {
        this.dadosNatalidadeRepository = dadosNatalidadeRepository;
    }
    /**
     * Criar dados de natalidade para uma solicitação
     */
    async create(createDto) {
        // Verificar se já existem dados para esta solicitação
        const existingData = await this.dadosNatalidadeRepository.findOne({
            where: { solicitacao_id: createDto.solicitacao_id },
        });
        if (existingData) {
            throw new Error('Já existem dados de natalidade para esta solicitação');
        }
        const dadosNatalidade = this.dadosNatalidadeRepository.create(createDto);
        return this.dadosNatalidadeRepository.save(dadosNatalidade);
    }
    /**
     * Buscar dados de natalidade por ID
     */
    async findOne(id) {
        const dadosNatalidade = await this.dadosNatalidadeRepository.findOne({
            where: { id },
            relations: ['solicitacao'],
        });
        if (!dadosNatalidade) {
            throw new common_1.NotFoundException('Dados de natalidade não encontrados');
        }
        return dadosNatalidade;
    }
    /**
     * Buscar dados de natalidade por solicitação
     */
    async findBySolicitacao(solicitacaoId) {
        const dadosNatalidade = await this.dadosNatalidadeRepository.findOne({
            where: { solicitacao_id: solicitacaoId },
            relations: ['solicitacao'],
        });
        if (!dadosNatalidade) {
            throw new common_1.NotFoundException('Dados de natalidade não encontrados para esta solicitação');
        }
        return dadosNatalidade;
    }
    /**
     * Atualizar dados de natalidade
     */
    async update(id, updateDto) {
        const dadosNatalidade = await this.findOne(id);
        // Atualizar apenas os campos fornecidos
        Object.assign(dadosNatalidade, updateDto);
        return this.dadosNatalidadeRepository.save(dadosNatalidade);
    }
    /**
     * Remover dados de natalidade
     */
    async remove(id) {
        const dadosNatalidade = await this.findOne(id);
        await this.dadosNatalidadeRepository.remove(dadosNatalidade);
    }
    /**
     * Verificar se existem dados de natalidade para uma solicitação
     */
    async existsBySolicitacao(solicitacaoId) {
        const count = await this.dadosNatalidadeRepository.count({
            where: { solicitacao_id: solicitacaoId },
        });
        return count > 0;
    }
    /**
     * Buscar todos os dados de natalidade com paginação
     */
    async findAll(page = 1, limit = 10) {
        const [data, total] = await this.dadosNatalidadeRepository.findAndCount({
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
};
exports.DadosNatalidadeService = DadosNatalidadeService;
exports.DadosNatalidadeService = DadosNatalidadeService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(dados_natalidade_entity_1.DadosNatalidade)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], DadosNatalidadeService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,