{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\validators\\is-not-future-date.validator.ts","mappings":";;;;;;;;;AAyCA,0CAWC;AApDD,qDAMyB;AAEzB;;GAEG;AAEI,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;IACpC,QAAQ,CAAC,IAAS,EAAE,IAAyB;QAC3C,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC,CAAC,0EAA0E;QAElG,oCAAoC;QACpC,MAAM,cAAc,GAAG,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAEpE,iCAAiC;QACjC,IAAI,KAAK,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;YACpC,OAAO,KAAK,CAAC;QACf,CAAC;QAED,4EAA4E;QAC5E,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;QACzB,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3B,cAAc,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAEpC,OAAO,cAAc,IAAI,KAAK,CAAC;IACjC,CAAC;IAED,cAAc,CAAC,IAAyB;QACtC,OAAO,4BAA4B,CAAC;IACtC,CAAC;CACF,CAAA;AAvBY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,qCAAmB,EAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;GAClD,yBAAyB,CAuBrC;AAED;;;GAGG;AACH,SAAgB,eAAe,CAAC,iBAAqC;IACnE,OAAO,UAAU,MAAc,EAAE,YAAoB;QACnD,IAAA,mCAAiB,EAAC;YAChB,IAAI,EAAE,iBAAiB;YACvB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,OAAO,EAAE,iBAAiB;YAC1B,WAAW,EAAE,EAAE;YACf,SAAS,EAAE,yBAAyB;SACrC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\validators\\is-not-future-date.validator.ts"],"sourcesContent":["import {\n  registerDecorator,\n  ValidationOptions,\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\n/**\n * Validador personalizado que verifica se uma data não é futura\n */\n@ValidatorConstraint({ name: 'isNotFutureDate', async: false })\nexport class IsNotFutureDateConstraint implements ValidatorConstraintInterface {\n  validate(date: any, args: ValidationArguments) {\n    if (!date) return true; // Deixar que outras validações (como @IsNotEmpty) lidem com valores nulos\n\n    // Converter para Date se for string\n    const dateToValidate = date instanceof Date ? date : new Date(date);\n\n    // Verificar se é uma data válida\n    if (isNaN(dateToValidate.getTime())) {\n      return false;\n    }\n\n    // Verificar se a data não é futura (considerando apenas a data, não a hora)\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    dateToValidate.setHours(0, 0, 0, 0);\n\n    return dateToValidate <= today;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'A data não pode ser futura';\n  }\n}\n\n/**\n * Decorador personalizado que verifica se uma data não é futura\n * @param validationOptions Opções adicionais para a validação\n */\nexport function IsNotFutureDate(validationOptions?: ValidationOptions) {\n  return function (object: Object, propertyName: string) {\n    registerDecorator({\n      name: 'isNotFutureDate',\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsNotFutureDateConstraint,\n    });\n  };\n}\n"],"version":3}