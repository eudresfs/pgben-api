{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\auth.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\auth.service.spec.ts"],"sourcesContent":["import { UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Test, TestingModule } from '@nestjs/testing';\n\nimport { AppLogger } from '../../shared/logger/logger.service';\nimport { RequestContext } from '../../shared/request-context/request-context.dto';\nimport { UsuarioService } from '../../modules/usuario/services/usuario.service';\nimport { Role } from '../../shared/enums/role.enum';\nimport { ROLE } from '../constants/role.constant';\nimport {\n  AuthTokenOutput,\n  UserAccessTokenClaims,\n} from '../dtos/auth-token-output.dto';\nimport { UserOutput } from '../adapters/usuario-adapter';\nimport { AuthService } from './auth.service';\n\ndescribe('AuthService', () => {\n  let service: AuthService;\n\n  const accessTokenClaims: UserAccessTokenClaims = {\n    id: 6,\n    username: 'john',\n    roles: [Role.TECNICO],\n  };\n\n  const registerInput = {\n    username: 'jhon',\n    name: 'Jhon doe',\n    password: 'any password',\n    roles: [Role.TECNICO],\n    isAccountDisabled: false,\n    email: 'randomUser@random.com',\n  };\n\n  const currentDate = new Date().toString();\n\n  const userOutput: UserOutput = {\n    name: 'John doe',\n    isAccountDisabled: false,\n    email: 'randomUser@random.com',\n    created_at: currentDate,\n    updated_at: currentDate,\n    ...accessTokenClaims,\n  };\n\n  const authToken: AuthTokenOutput = {\n    accessToken: 'random_access_token',\n    refreshToken: 'random_refresh_token',\n  };\n\n  const mockedUsuarioService = {\n    findById: jest.fn(),\n    create: jest.fn(),\n    findByEmail: jest.fn(),\n  };\n\n  const mockedJwtService = {\n    sign: jest.fn(),\n  };\n\n  const mockedConfigService = { get: jest.fn() };\n\n  const mockedLogger = { setContext: jest.fn(), log: jest.fn() };\n\n  beforeEach(async () => {\n    const moduleRef: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthService,\n        { provide: UsuarioService, useValue: mockedUsuarioService },\n        { provide: JwtService, useValue: mockedJwtService },\n        { provide: ConfigService, useValue: mockedConfigService },\n        { provide: AppLogger, useValue: mockedLogger },\n      ],\n    }).compile();\n\n    service = moduleRef.get<AuthService>(AuthService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  const ctx = new RequestContext();\n\n  describe('validateUser', () => {\n    const bcrypt = require('bcrypt');\n    jest\n      .spyOn(bcrypt, 'compare')\n      .mockImplementation(() => Promise.resolve(true));\n\n    it('should success when username/password valid', async () => {\n      const mockUsuario = {\n        id: '123',\n        nome: 'John Doe',\n        email: 'jhon@example.com',\n        senhaHash: 'hashedpassword',\n        status: 'ativo',\n        role: Role.TECNICO,\n      };\n\n      jest\n        .spyOn(mockedUsuarioService, 'findByEmail')\n        .mockImplementation(() => Promise.resolve(mockUsuario));\n\n      const result = await service.validateUser(\n        ctx,\n        'jhon@example.com',\n        'somepass',\n      );\n\n      expect(result).toHaveProperty('id', '123');\n      expect(result).toHaveProperty('username', 'jhon@example.com');\n      expect(mockedUsuarioService.findByEmail).toBeCalledWith(\n        'jhon@example.com',\n      );\n    });\n\n    it('should fail when username/password invalid', async () => {\n      // Usuário não encontrado\n      jest\n        .spyOn(mockedUsuarioService, 'findByEmail')\n        .mockImplementation(() => Promise.resolve(null));\n\n      await expect(\n        service.validateUser(ctx, 'jhon@example.com', 'somepass'),\n      ).rejects.toThrowError(UnauthorizedException);\n\n      // Senha incorreta\n      jest.spyOn(mockedUsuarioService, 'findByEmail').mockImplementation(() =>\n        Promise.resolve({\n          id: '123',\n          nome: 'John Doe',\n          email: 'jhon@example.com',\n          senhaHash: 'hashedpassword',\n          status: 'ativo',\n        }),\n      );\n\n      jest\n        .spyOn(bcrypt, 'compare')\n        .mockImplementation(() => Promise.resolve(false));\n\n      await expect(\n        service.validateUser(ctx, 'jhon@example.com', 'wrongpass'),\n      ).rejects.toThrowError(UnauthorizedException);\n    });\n\n    it('should fail when user account is disabled', async () => {\n      jest.spyOn(mockedUsuarioService, 'findByEmail').mockImplementation(() =>\n        Promise.resolve({\n          id: '123',\n          nome: 'John Doe',\n          email: 'jhon@example.com',\n          senhaHash: 'hashedpassword',\n          status: 'inativo',\n        }),\n      );\n\n      jest\n        .spyOn(bcrypt, 'compare')\n        .mockImplementation(() => Promise.resolve(true));\n\n      await expect(\n        service.validateUser(ctx, 'jhon@example.com', 'somepass'),\n      ).rejects.toThrowError(UnauthorizedException);\n    });\n  });\n\n  describe('login', () => {\n    it('should return auth token for valid user', async () => {\n      jest.spyOn(service, 'getAuthToken').mockImplementation(() => authToken);\n\n      const result = service.login(ctx);\n\n      expect(service.getAuthToken).toBeCalledWith(ctx, accessTokenClaims);\n      expect(result).toEqual(authToken);\n    });\n  });\n\n  describe('register', () => {\n    it('should register new user', async () => {\n      const mockUsuarioCriado = {\n        id: '123',\n        nome: 'Jhon doe',\n        email: 'randomUser@random.com',\n        status: 'ativo',\n        role: Role.TECNICO,\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n\n      jest\n        .spyOn(mockedUsuarioService, 'create')\n        .mockImplementation(() => Promise.resolve(mockUsuarioCriado));\n\n      const result = await service.register(ctx, registerInput);\n\n      expect(mockedUsuarioService.create).toBeCalled();\n      expect(result).toHaveProperty('name', 'Jhon doe');\n      expect(result).toHaveProperty('email', 'randomUser@random.com');\n    });\n  });\n\n  describe('refreshToken', () => {\n    ctx.user = accessTokenClaims;\n\n    it('should generate auth token', async () => {\n      const mockUsuario = {\n        id: '123',\n        nome: 'John Doe',\n        email: 'jhon@example.com',\n        status: 'ativo',\n        role: Role.TECNICO,\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n\n      jest\n        .spyOn(mockedUsuarioService, 'findById')\n        .mockImplementation(() => Promise.resolve(mockUsuario));\n\n      jest.spyOn(service, 'getAuthToken').mockImplementation(() => authToken);\n\n      // Criar um input para o refresh token\n      const refreshTokenInput = {\n        refreshToken: 'valid-refresh-token'\n      };\n      \n      // Mock do RefreshTokenService\n      const mockRefreshToken = {\n        token: 'valid-refresh-token',\n        revoked: false,\n        expiresAt: new Date(Date.now() + 1000 * 60 * 60), // 1 hora no futuro\n        usuario: { id: '123' }\n      };\n      \n      // Mock do serviço de tokens\n      const mockRefreshTokenService = {\n        findToken: jest.fn().mockResolvedValue(mockRefreshToken),\n        revokeToken: jest.fn().mockResolvedValue(true),\n        revokeDescendantTokens: jest.fn().mockResolvedValue(true),\n        createToken: jest.fn().mockResolvedValue({ token: 'new-refresh-token' })\n      };\n      \n      // Substituir o serviço mockado\n      Object.defineProperty(service, 'refreshTokenService', {\n        value: mockRefreshTokenService\n      });\n      \n      const result = await service.refreshToken(ctx, refreshTokenInput);\n\n      expect(service.getAuthToken).toBeCalled();\n      expect(result).toMatchObject(authToken);\n    });\n\n    it('should throw exception when user is not valid', async () => {\n      jest\n        .spyOn(mockedUsuarioService, 'findById')\n        .mockImplementation(() => Promise.resolve(null));\n\n      // Criar um input para o refresh token\n      const refreshTokenInput = {\n        refreshToken: 'invalid-refresh-token'\n      };\n      \n      // Mock do RefreshTokenService\n      const mockRefreshToken = {\n        token: 'invalid-refresh-token',\n        revoked: false,\n        expiresAt: new Date(Date.now() + 1000 * 60 * 60), // 1 hora no futuro\n        usuario: { id: '999' } // ID que não existe\n      };\n      \n      // Mock do serviço de tokens\n      const mockRefreshTokenService = {\n        findToken: jest.fn().mockResolvedValue(mockRefreshToken),\n        revokeToken: jest.fn().mockResolvedValue(true),\n        revokeDescendantTokens: jest.fn().mockResolvedValue(true),\n        createToken: jest.fn().mockResolvedValue(null)\n      };\n      \n      // Substituir o serviço mockado\n      Object.defineProperty(service, 'refreshTokenService', {\n        value: mockRefreshTokenService\n      });\n      \n      await expect(service.refreshToken(ctx, refreshTokenInput)).rejects.toThrowError(\n        'Usuário não encontrado',\n      );\n    });\n\n    afterEach(() => {\n      jest.resetAllMocks();\n    });\n  });\n\n  describe('getAuthToken', () => {\n    const accessTokenExpiry = 100;\n    const refreshTokenExpiry = 200;\n    const user = { id: 5, username: 'username', roles: [Role.CIDADAO] };\n\n    const subject = { sub: user.id };\n    const payload = {\n      username: user.username,\n      sub: user.id,\n      roles: [Role.CIDADAO],\n    };\n\n    beforeEach(() => {\n      jest.spyOn(mockedConfigService, 'get').mockImplementation((key) => {\n        let value: number | null = null;\n        switch (key) {\n          case 'jwt.accessTokenExpiresInSec':\n            value = accessTokenExpiry;\n            break;\n          case 'jwt.refreshTokenExpiresInSec':\n            value = refreshTokenExpiry;\n            break;\n        }\n        return value;\n      });\n\n      jest\n        .spyOn(mockedJwtService, 'sign')\n        .mockImplementation(() => 'signed-response');\n    });\n\n    it('should generate access token with payload', () => {\n      const result = service.getAuthToken(ctx, user);\n\n      expect(mockedJwtService.sign).toBeCalledWith(\n        { ...payload, ...subject },\n        { expiresIn: accessTokenExpiry },\n      );\n\n      expect(result).toMatchObject({\n        accessToken: 'signed-response',\n      });\n    });\n\n    it('should generate refresh token with subject', () => {\n      const result = service.getAuthToken(ctx, user);\n\n      expect(mockedJwtService.sign).toBeCalledWith(subject, {\n        expiresIn: refreshTokenExpiry,\n      });\n\n      expect(result).toMatchObject({\n        refreshToken: 'signed-response',\n      });\n    });\n\n    afterEach(() => {\n      jest.resetAllMocks();\n    });\n  });\n});\n"],"version":3}