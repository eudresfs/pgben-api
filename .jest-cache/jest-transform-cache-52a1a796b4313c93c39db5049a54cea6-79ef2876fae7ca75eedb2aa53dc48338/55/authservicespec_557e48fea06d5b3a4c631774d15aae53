d9a7bc2ca65a3c8df05a629d3a7a22e2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const jwt_1 = require("@nestjs/jwt");
const testing_1 = require("@nestjs/testing");
const logger_service_1 = require("../../shared/logger/logger.service");
const request_context_dto_1 = require("../../shared/request-context/request-context.dto");
const usuario_service_1 = require("../../modules/usuario/services/usuario.service");
const role_enum_1 = require("../../shared/enums/role.enum");
const auth_service_1 = require("./auth.service");
describe('AuthService', () => {
    let service;
    const accessTokenClaims = {
        id: 6,
        username: 'john',
        roles: [role_enum_1.Role.TECNICO],
    };
    const registerInput = {
        username: 'jhon',
        name: 'Jhon doe',
        password: 'any password',
        roles: [role_enum_1.Role.TECNICO],
        isAccountDisabled: false,
        email: 'randomUser@random.com',
    };
    const currentDate = new Date().toString();
    const userOutput = {
        name: 'John doe',
        isAccountDisabled: false,
        email: 'randomUser@random.com',
        created_at: currentDate,
        updated_at: currentDate,
        ...accessTokenClaims,
    };
    const authToken = {
        accessToken: 'random_access_token',
        refreshToken: 'random_refresh_token',
    };
    const mockedUsuarioService = {
        findById: jest.fn(),
        create: jest.fn(),
        findByEmail: jest.fn(),
    };
    const mockedJwtService = {
        sign: jest.fn(),
    };
    const mockedConfigService = { get: jest.fn() };
    const mockedLogger = { setContext: jest.fn(), log: jest.fn() };
    beforeEach(async () => {
        const moduleRef = await testing_1.Test.createTestingModule({
            providers: [
                auth_service_1.AuthService,
                { provide: usuario_service_1.UsuarioService, useValue: mockedUsuarioService },
                { provide: jwt_1.JwtService, useValue: mockedJwtService },
                { provide: config_1.ConfigService, useValue: mockedConfigService },
                { provide: logger_service_1.AppLogger, useValue: mockedLogger },
            ],
        }).compile();
        service = moduleRef.get(auth_service_1.AuthService);
    });
    it('should be defined', () => {
        expect(service).toBeDefined();
    });
    const ctx = new request_context_dto_1.RequestContext();
    describe('validateUser', () => {
        const bcrypt = require('bcrypt');
        jest
            .spyOn(bcrypt, 'compare')
            .mockImplementation(() => Promise.resolve(true));
        it('should success when username/password valid', async () => {
            const mockUsuario = {
                id: '123',
                nome: 'John Doe',
                email: 'jhon@example.com',
                senhaHash: 'hashedpassword',
                status: 'ativo',
                role: role_enum_1.Role.TECNICO,
            };
            jest
                .spyOn(mockedUsuarioService, 'findByEmail')
                .mockImplementation(() => Promise.resolve(mockUsuario));
            const result = await service.validateUser(ctx, 'jhon@example.com', 'somepass');
            expect(result).toHaveProperty('id', '123');
            expect(result).toHaveProperty('username', 'jhon@example.com');
            expect(mockedUsuarioService.findByEmail).toBeCalledWith('jhon@example.com');
        });
        it('should fail when username/password invalid', async () => {
            // Usuário não encontrado
            jest
                .spyOn(mockedUsuarioService, 'findByEmail')
                .mockImplementation(() => Promise.resolve(null));
            await expect(service.validateUser(ctx, 'jhon@example.com', 'somepass')).rejects.toThrowError(common_1.UnauthorizedException);
            // Senha incorreta
            jest.spyOn(mockedUsuarioService, 'findByEmail').mockImplementation(() => Promise.resolve({
                id: '123',
                nome: 'John Doe',
                email: 'jhon@example.com',
                senhaHash: 'hashedpassword',
                status: 'ativo',
            }));
            jest
                .spyOn(bcrypt, 'compare')
                .mockImplementation(() => Promise.resolve(false));
            await expect(service.validateUser(ctx, 'jhon@example.com', 'wrongpass')).rejects.toThrowError(common_1.UnauthorizedException);
        });
        it('should fail when user account is disabled', async () => {
            jest.spyOn(mockedUsuarioService, 'findByEmail').mockImplementation(() => Promise.resolve({
                id: '123',
                nome: 'John Doe',
                email: 'jhon@example.com',
                senhaHash: 'hashedpassword',
                status: 'inativo',
            }));
            jest
                .spyOn(bcrypt, 'compare')
                .mockImplementation(() => Promise.resolve(true));
            await expect(service.validateUser(ctx, 'jhon@example.com', 'somepass')).rejects.toThrowError(common_1.UnauthorizedException);
        });
    });
    describe('login', () => {
        it('should return auth token for valid user', async () => {
            jest.spyOn(service, 'getAuthToken').mockImplementation(() => authToken);
            const result = service.login(ctx);
            expect(service.getAuthToken).toBeCalledWith(ctx, accessTokenClaims);
            expect(result).toEqual(authToken);
        });
    });
    describe('register', () => {
        it('should register new user', async () => {
            const mockUsuarioCriado = {
                id: '123',
                nome: 'Jhon doe',
                email: 'randomUser@random.com',
                status: 'ativo',
                role: role_enum_1.Role.TECNICO,
                created_at: new Date(),
                updated_at: new Date(),
            };
            jest
                .spyOn(mockedUsuarioService, 'create')
                .mockImplementation(() => Promise.resolve(mockUsuarioCriado));
            const result = await service.register(ctx, registerInput);
            expect(mockedUsuarioService.create).toBeCalled();
            expect(result).toHaveProperty('name', 'Jhon doe');
            expect(result).toHaveProperty('email', 'randomUser@random.com');
        });
    });
    describe('refreshToken', () => {
        ctx.user = accessTokenClaims;
        it('should generate auth token', async () => {
            const mockUsuario = {
                id: '123',
                nome: 'John Doe',
                email: 'jhon@example.com',
                status: 'ativo',
                role: role_enum_1.Role.TECNICO,
                created_at: new Date(),
                updated_at: new Date(),
            };
            jest
                .spyOn(mockedUsuarioService, 'findById')
                .mockImplementation(() => Promise.resolve(mockUsuario));
            jest.spyOn(service, 'getAuthToken').mockImplementation(() => authToken);
            // Criar um input para o refresh token
            const refreshTokenInput = {
                refreshToken: 'valid-refresh-token'
            };
            // Mock do RefreshTokenService
            const mockRefreshToken = {
                token: 'valid-refresh-token',
                revoked: false,
                expiresAt: new Date(Date.now() + 1000 * 60 * 60), // 1 hora no futuro
                usuario: { id: '123' }
            };
            // Mock do serviço de tokens
            const mockRefreshTokenService = {
                findToken: jest.fn().mockResolvedValue(mockRefreshToken),
                revokeToken: jest.fn().mockResolvedValue(true),
                revokeDescendantTokens: jest.fn().mockResolvedValue(true),
                createToken: jest.fn().mockResolvedValue({ token: 'new-refresh-token' })
            };
            // Substituir o serviço mockado
            Object.defineProperty(service, 'refreshTokenService', {
                value: mockRefreshTokenService
            });
            const result = await service.refreshToken(ctx, refreshTokenInput);
            expect(service.getAuthToken).toBeCalled();
            expect(result).toMatchObject(authToken);
        });
        it('should throw exception when user is not valid', async () => {
            jest
                .spyOn(mockedUsuarioService, 'findById')
                .mockImplementation(() => Promise.resolve(null));
            // Criar um input para o refresh token
            const refreshTokenInput = {
                refreshToken: 'invalid-refresh-token'
            };
            // Mock do RefreshTokenService
            const mockRefreshToken = {
                token: 'invalid-refresh-token',
                revoked: false,
                expiresAt: new Date(Date.now() + 1000 * 60 * 60), // 1 hora no futuro
                usuario: { id: '999' } // ID que não existe
            };
            // Mock do serviço de tokens
            const mockRefreshTokenService = {
                findToken: jest.fn().mockResolvedValue(mockRefreshToken),
                revokeToken: jest.fn().mockResolvedValue(true),
                revokeDescendantTokens: jest.fn().mockResolvedValue(true),
                createToken: jest.fn().mockResolvedValue(null)
            };
            // Substituir o serviço mockado
            Object.defineProperty(service, 'refreshTokenService', {
                value: mockRefreshTokenService
            });
            await expect(service.refreshToken(ctx, refreshTokenInput)).rejects.toThrowError('Usuário não encontrado');
        });
        afterEach(() => {
            jest.resetAllMocks();
        });
    });
    describe('getAuthToken', () => {
        const accessTokenExpiry = 100;
        const refreshTokenExpiry = 200;
        const user = { id: 5, username: 'username', roles: [role_enum_1.Role.CIDADAO] };
        const subject = { sub: user.id };
        const payload = {
            username: user.username,
            sub: user.id,
            roles: [role_enum_1.Role.CIDADAO],
        };
        beforeEach(() => {
            jest.spyOn(mockedConfigService, 'get').mockImplementation((key) => {
                let value = null;
                switch (key) {
                    case 'jwt.accessTokenExpiresInSec':
                        value = accessTokenExpiry;
                        break;
                    case 'jwt.refreshTokenExpiresInSec':
                        value = refreshTokenExpiry;
                        break;
                }
                return value;
            });
            jest
                .spyOn(mockedJwtService, 'sign')
                .mockImplementation(() => 'signed-response');
        });
        it('should generate access token with payload', () => {
            const result = service.getAuthToken(ctx, user);
            expect(mockedJwtService.sign).toBeCalledWith({ ...payload, ...subject }, { expiresIn: accessTokenExpiry });
            expect(result).toMatchObject({
                accessToken: 'signed-response',
            });
        });
        it('should generate refresh token with subject', () => {
            const result = service.getAuthToken(ctx, user);
            expect(mockedJwtService.sign).toBeCalledWith(subject, {
                expiresIn: refreshTokenExpiry,
            });
            expect(result).toMatchObject({
                refreshToken: 'signed-response',
            });
        });
        afterEach(() => {
            jest.resetAllMocks();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,