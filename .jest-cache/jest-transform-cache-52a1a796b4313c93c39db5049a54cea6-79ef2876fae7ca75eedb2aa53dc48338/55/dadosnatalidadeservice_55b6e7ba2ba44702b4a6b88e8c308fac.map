{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-natalidade.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-natalidade.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DadosNatalidade } from '../../../entities/dados-natalidade.entity';\nimport {\n  CreateDadosNatalidadeDto,\n  UpdateDadosNatalidadeDto,\n} from '../dto/create-dados-natalidade.dto';\n\n/**\n * Serviço para gerenciar dados específicos de Auxílio Natalidade\n */\n@Injectable()\nexport class DadosNatalidadeService {\n  constructor(\n    @InjectRepository(DadosNatalidade)\n    private readonly dadosNatalidadeRepository: Repository<DadosNatalidade>,\n  ) {}\n\n  /**\n   * Criar dados de natalidade para uma solicitação\n   */\n  async create(createDto: CreateDadosNatalidadeDto): Promise<DadosNatalidade> {\n    // Verificar se já existem dados para esta solicitação\n    const existingData = await this.dadosNatalidadeRepository.findOne({\n      where: { solicitacao_id: createDto.solicitacao_id },\n    });\n\n    if (existingData) {\n      throw new Error('Já existem dados de natalidade para esta solicitação');\n    }\n\n    const dadosNatalidade = this.dadosNatalidadeRepository.create(createDto);\n    return this.dadosNatalidadeRepository.save(dadosNatalidade);\n  }\n\n  /**\n   * Buscar dados de natalidade por ID\n   */\n  async findOne(id: string): Promise<DadosNatalidade> {\n    const dadosNatalidade = await this.dadosNatalidadeRepository.findOne({\n      where: { id },\n      relations: ['solicitacao'],\n    });\n\n    if (!dadosNatalidade) {\n      throw new NotFoundException('Dados de natalidade não encontrados');\n    }\n\n    return dadosNatalidade;\n  }\n\n  /**\n   * Buscar dados de natalidade por solicitação\n   */\n  async findBySolicitacao(solicitacaoId: string): Promise<DadosNatalidade> {\n    const dadosNatalidade = await this.dadosNatalidadeRepository.findOne({\n      where: { solicitacao_id: solicitacaoId },\n      relations: ['solicitacao'],\n    });\n\n    if (!dadosNatalidade) {\n      throw new NotFoundException(\n        'Dados de natalidade não encontrados para esta solicitação',\n      );\n    }\n\n    return dadosNatalidade;\n  }\n\n  /**\n   * Atualizar dados de natalidade\n   */\n  async update(\n    id: string,\n    updateDto: UpdateDadosNatalidadeDto,\n  ): Promise<DadosNatalidade> {\n    const dadosNatalidade = await this.findOne(id);\n\n    // Atualizar apenas os campos fornecidos\n    Object.assign(dadosNatalidade, updateDto);\n\n    return this.dadosNatalidadeRepository.save(dadosNatalidade);\n  }\n\n  /**\n   * Remover dados de natalidade\n   */\n  async remove(id: string): Promise<void> {\n    const dadosNatalidade = await this.findOne(id);\n    await this.dadosNatalidadeRepository.remove(dadosNatalidade);\n  }\n\n  /**\n   * Verificar se existem dados de natalidade para uma solicitação\n   */\n  async existsBySolicitacao(solicitacaoId: string): Promise<boolean> {\n    const count = await this.dadosNatalidadeRepository.count({\n      where: { solicitacao_id: solicitacaoId },\n    });\n    return count > 0;\n  }\n\n  /**\n   * Buscar todos os dados de natalidade com paginação\n   */\n  async findAll(\n    page: number = 1,\n    limit: number = 10,\n  ): Promise<{\n    data: DadosNatalidade[];\n    total: number;\n    page: number;\n    limit: number;\n  }> {\n    const [data, total] = await this.dadosNatalidadeRepository.findAndCount({\n      relations: ['solicitacao'],\n      skip: (page - 1) * limit,\n      take: limit,\n      order: { created_at: 'DESC' },\n    });\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n    };\n  }\n}\n"],"version":3}