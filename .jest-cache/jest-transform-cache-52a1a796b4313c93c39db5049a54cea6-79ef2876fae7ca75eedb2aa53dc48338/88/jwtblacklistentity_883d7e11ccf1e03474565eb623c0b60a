5df44ed98d82b8f1022cc72d5d7263a1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtBlacklist = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const swagger_1 = require("@nestjs/swagger");
/**
 * Entidade JWT Blacklist
 *
 * Armazena tokens JWT invalidados para prevenir reutilização
 * de tokens comprometidos ou revogados
 */
let JwtBlacklist = class JwtBlacklist {
    id;
    jti;
    usuario_id;
    token_type;
    expires_at;
    reason;
    client_ip;
    user_agent;
    metadata;
    created_at;
    updated_at;
    /**
     * Verifica se o token ainda está na blacklist (não expirou)
     * @returns true se ainda está blacklisted
     */
    isStillBlacklisted() {
        return new Date() < this.expires_at;
    }
    /**
     * Verifica se o token pode ser removido da blacklist
     * @returns true se pode ser removido
     */
    canBeRemoved() {
        return new Date() >= this.expires_at;
    }
    /**
     * Obtém o tempo restante até a expiração em minutos
     * @returns minutos até expiração
     */
    getMinutesUntilExpiration() {
        const now = new Date();
        const diffMs = this.expires_at.getTime() - now.getTime();
        return Math.max(0, Math.floor(diffMs / (1000 * 60)));
    }
    /**
     * Adiciona metadados ao registro
     * @param key Chave do metadado
     * @param value Valor do metadado
     */
    addMetadata(key, value) {
        if (!this.metadata) {
            this.metadata = {};
        }
        this.metadata[key] = value;
    }
    /**
     * Obtém um metadado específico
     * @param key Chave do metadado
     * @returns Valor do metadado ou undefined
     */
    getMetadata(key) {
        return this.metadata?.[key];
    }
    /**
     * Verifica se o token pertence a um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se pertence ao usuário
     */
    belongsToUser(usuarioId) {
        return this.usuario_id === usuarioId;
    }
    /**
     * Verifica se é um token de acesso
     * @returns true se é access token
     */
    isAccessToken() {
        return this.token_type === 'access';
    }
    /**
     * Verifica se é um token de refresh
     * @returns true se é refresh token
     */
    isRefreshToken() {
        return this.token_type === 'refresh';
    }
    /**
     * Verifica se o token foi invalidado recentemente (últimas 24 horas)
     * @returns true se foi invalidado recentemente
     */
    wasRecentlyBlacklisted() {
        const now = new Date();
        const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > oneDayAgo;
    }
    /**
     * Calcula há quantos minutos o token foi blacklisted
     * @returns minutos desde a blacklist
     */
    getMinutesSinceBlacklisted() {
        const now = new Date();
        const diffMs = now.getTime() - this.created_at.getTime();
        return Math.floor(diffMs / (1000 * 60));
    }
    /**
     * Verifica se o token expira em breve (próximas 2 horas)
     * @returns true se expira em breve
     */
    expiresWithin(hours = 2) {
        const now = new Date();
        const futureTime = new Date(now.getTime() + hours * 60 * 60 * 1000);
        return this.expires_at <= futureTime;
    }
    /**
     * Obtém informações resumidas do token blacklisted
     * @returns objeto com informações resumidas
     */
    getSummary() {
        return {
            id: this.id,
            jti: this.jti,
            usuario_id: this.usuario_id,
            token_type: this.token_type,
            reason: this.reason,
            expires_at: this.expires_at,
            created_at: this.created_at,
            isStillBlacklisted: this.isStillBlacklisted(),
            minutesUntilExpiration: this.getMinutesUntilExpiration()
        };
    }
    /**
     * Verifica se tem informações de cliente (IP e User Agent)
     * @returns true se tem informações de cliente
     */
    hasClientInfo() {
        return !!(this.client_ip || this.user_agent);
    }
    /**
     * Obtém uma descrição legível do motivo da blacklist
     * @returns descrição formatada
     */
    getReasonDescription() {
        const reasonMap = {
            'user_logout': 'Logout do usuário',
            'token_compromised': 'Token comprometido',
            'password_changed': 'Senha alterada',
            'account_suspended': 'Conta suspensa',
            'security_breach': 'Violação de segurança',
            'admin_revoke': 'Revogado pelo administrador',
            'expired': 'Token expirado',
            'invalid_use': 'Uso inválido'
        };
        return reasonMap[this.reason] || this.reason;
    }
    /**
     * Verifica se o token foi blacklisted por motivos de segurança
     * @returns true se foi por motivos de segurança
     */
    isSecurityRelated() {
        const securityReasons = [
            'token_compromised',
            'password_changed',
            'account_suspended',
            'security_breach',
            'admin_revoke'
        ];
        return securityReasons.includes(this.reason);
    }
    /**
     * Gera uma chave única para o token blacklisted
     * @returns chave única
     */
    getUniqueKey() {
        return `blacklist_${this.jti}_${this.usuario_id}`;
    }
    /**
     * Verifica se o registro está em estado consistente
     * @returns true se está consistente
     */
    isConsistent() {
        return (!!this.id &&
            !!this.jti &&
            !!this.usuario_id &&
            !!this.token_type &&
            !!this.reason &&
            !!this.expires_at &&
            !!this.created_at);
    }
    /**
     * Remove metadados sensíveis para logs
     * @returns objeto sanitizado
     */
    toSafeLog() {
        return {
            id: this.id,
            jti: this.jti.substring(0, 8) + '...',
            usuario_id: this.usuario_id,
            token_type: this.token_type,
            reason: this.reason,
            expires_at: this.expires_at,
            created_at: this.created_at,
            hasClientInfo: this.hasClientInfo()
        };
    }
    /**
     * Formata a data de expiração para exibição
     * @returns data formatada
     */
    getExpiracaoFormatada() {
        return this.expires_at.toLocaleString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    /**
     * Formata a data de criação para exibição
     * @returns data formatada
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
};
exports.JwtBlacklist = JwtBlacklist;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID único do registro',
        example: 'uuid-v4',
    }),
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], JwtBlacklist.prototype, "id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'JWT ID (jti) - Identificador único do token',
        example: 'jti-uuid-v4',
    }),
    (0, typeorm_1.Column)({ type: 'varchar', length: 255, unique: true }),
    (0, typeorm_1.Index)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'JTI é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'JTI deve ser uma string' }),
    (0, class_validator_1.Length)(10, 255, { message: 'JTI deve ter entre 10 e 255 caracteres' }),
    __metadata("design:type", String)
], JwtBlacklist.prototype, "jti", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID do usuário proprietário do token',
        example: 'user-uuid-v4',
    }),
    (0, typeorm_1.Column)({ type: 'uuid' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do usuário é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário inválido' }),
    __metadata("design:type", String)
], JwtBlacklist.prototype, "usuario_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tipo do token (access, refresh)',
        example: 'access',
    }),
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: ['access', 'refresh'],
        default: 'access'
    }),
    (0, class_validator_1.IsEnum)(['access', 'refresh'], { message: 'Tipo de token deve ser access ou refresh' }),
    __metadata("design:type", String)
], JwtBlacklist.prototype, "token_type", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Data de expiração original do token',
        example: '2024-01-15T10:30:00Z',
    }),
    (0, typeorm_1.Column)({ type: 'timestamp with time zone' }),
    __metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], JwtBlacklist.prototype, "expires_at", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Motivo da invalidação',
        example: 'user_logout',
    }),
    (0, typeorm_1.Column)({ type: 'varchar', length: 100 }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Motivo da invalidação é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Motivo deve ser uma string' }),
    (0, class_validator_1.Length)(3, 100, { message: 'Motivo deve ter entre 3 e 100 caracteres' }),
    __metadata("design:type", String)
], JwtBlacklist.prototype, "reason", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'IP do cliente quando o token foi invalidado',
        example: '192.168.1.100',
        required: false,
    }),
    (0, typeorm_1.Column)({ type: 'varchar', length: 45, nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'IP do cliente deve ser uma string' }),
    (0, class_validator_1.Length)(7, 45, { message: 'IP do cliente deve ter entre 7 e 45 caracteres' }),
    __metadata("design:type", String)
], JwtBlacklist.prototype, "client_ip", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'User Agent do cliente',
        required: false,
    }),
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'User Agent deve ser uma string' }),
    __metadata("design:type", String)
], JwtBlacklist.prototype, "user_agent", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Metadados adicionais em formato JSON',
        required: false,
    }),
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", typeof (_b = typeof Record !== "undefined" && Record) === "function" ? _b : Object)
], JwtBlacklist.prototype, "metadata", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Data de criação do registro',
        example: '2024-01-01T10:00:00Z',
    }),
    (0, typeorm_1.CreateDateColumn)({ type: 'timestamp with time zone' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], JwtBlacklist.prototype, "created_at", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Data da última atualização',
        example: '2024-01-01T10:00:00Z',
    }),
    (0, typeorm_1.UpdateDateColumn)({ type: 'timestamp with time zone' }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], JwtBlacklist.prototype, "updated_at", void 0);
exports.JwtBlacklist = JwtBlacklist = __decorate([
    (0, typeorm_1.Entity)('jwt_blacklist'),
    (0, typeorm_1.Index)(['jti'], { unique: true }),
    (0, typeorm_1.Index)(['usuario_id']),
    (0, typeorm_1.Index)(['expires_at']),
    (0, typeorm_1.Index)(['created_at'])
], JwtBlacklist);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,