{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\jwt-blacklist.entity.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\jwt-blacklist.entity.ts"],"sourcesContent":["import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  Index,\n} from 'typeorm';\nimport { IsNotEmpty, IsUUID, IsString, IsEnum, IsOptional, Length } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Entidade JWT Blacklist\n * \n * Armazena tokens JWT invalidados para prevenir reutilização\n * de tokens comprometidos ou revogados\n */\n@Entity('jwt_blacklist')\n@Index(['jti'], { unique: true })\n@Index(['usuario_id'])\n@Index(['expires_at'])\n@Index(['created_at'])\nexport class JwtBlacklist {\n  @ApiProperty({\n    description: 'ID único do registro',\n    example: 'uuid-v4',\n  })\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty({\n    description: 'JWT ID (jti) - Identificador único do token',\n    example: 'jti-uuid-v4',\n  })\n  @Column({ type: 'varchar', length: 255, unique: true })\n  @Index()\n  @IsNotEmpty({ message: 'JTI é obrigatório' })\n  @IsString({ message: 'JTI deve ser uma string' })\n  @Length(10, 255, { message: 'JTI deve ter entre 10 e 255 caracteres' })\n  jti: string;\n\n  @ApiProperty({\n    description: 'ID do usuário proprietário do token',\n    example: 'user-uuid-v4',\n  })\n  @Column({ type: 'uuid' })\n  @IsNotEmpty({ message: 'ID do usuário é obrigatório' })\n  @IsUUID('4', { message: 'ID do usuário inválido' })\n  usuario_id: string;\n\n  @ApiProperty({\n    description: 'Tipo do token (access, refresh)',\n    example: 'access',\n  })\n  @Column({ \n    type: 'enum', \n    enum: ['access', 'refresh'],\n    default: 'access'\n  })\n  @IsEnum(['access', 'refresh'], { message: 'Tipo de token deve ser access ou refresh' })\n  token_type: 'access' | 'refresh';\n\n  @ApiProperty({\n    description: 'Data de expiração original do token',\n    example: '2024-01-15T10:30:00Z',\n  })\n  @Column({ type: 'timestamp with time zone' })\n  expires_at: Date;\n\n  @ApiProperty({\n    description: 'Motivo da invalidação',\n    example: 'user_logout',\n  })\n  @Column({ type: 'varchar', length: 100 })\n  @IsNotEmpty({ message: 'Motivo da invalidação é obrigatório' })\n  @IsString({ message: 'Motivo deve ser uma string' })\n  @Length(3, 100, { message: 'Motivo deve ter entre 3 e 100 caracteres' })\n  reason: string;\n\n  @ApiProperty({\n    description: 'IP do cliente quando o token foi invalidado',\n    example: '192.168.1.100',\n    required: false,\n  })\n  @Column({ type: 'varchar', length: 45, nullable: true })\n  @IsOptional()\n  @IsString({ message: 'IP do cliente deve ser uma string' })\n  @Length(7, 45, { message: 'IP do cliente deve ter entre 7 e 45 caracteres' })\n  client_ip?: string;\n\n  @ApiProperty({\n    description: 'User Agent do cliente',\n    required: false,\n  })\n  @Column({ type: 'text', nullable: true })\n  @IsOptional()\n  @IsString({ message: 'User Agent deve ser uma string' })\n  user_agent?: string;\n\n  @ApiProperty({\n    description: 'Metadados adicionais em formato JSON',\n    required: false,\n  })\n  @Column({ type: 'jsonb', nullable: true })\n  metadata?: Record<string, any>;\n\n  @ApiProperty({\n    description: 'Data de criação do registro',\n    example: '2024-01-01T10:00:00Z',\n  })\n  @CreateDateColumn({ type: 'timestamp with time zone' })\n  created_at: Date;\n\n  @ApiProperty({\n    description: 'Data da última atualização',\n    example: '2024-01-01T10:00:00Z',\n  })\n  @UpdateDateColumn({ type: 'timestamp with time zone' })\n  updated_at: Date;\n\n  /**\n   * Verifica se o token ainda está na blacklist (não expirou)\n   * @returns true se ainda está blacklisted\n   */\n  isStillBlacklisted(): boolean {\n    return new Date() < this.expires_at;\n  }\n\n  /**\n   * Verifica se o token pode ser removido da blacklist\n   * @returns true se pode ser removido\n   */\n  canBeRemoved(): boolean {\n    return new Date() >= this.expires_at;\n  }\n\n  /**\n   * Obtém o tempo restante até a expiração em minutos\n   * @returns minutos até expiração\n   */\n  getMinutesUntilExpiration(): number {\n    const now = new Date();\n    const diffMs = this.expires_at.getTime() - now.getTime();\n    return Math.max(0, Math.floor(diffMs / (1000 * 60)));\n  }\n\n  /**\n   * Adiciona metadados ao registro\n   * @param key Chave do metadado\n   * @param value Valor do metadado\n   */\n  addMetadata(key: string, value: any): void {\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    this.metadata[key] = value;\n  }\n\n  /**\n   * Obtém um metadado específico\n   * @param key Chave do metadado\n   * @returns Valor do metadado ou undefined\n   */\n  getMetadata(key: string): any {\n    return this.metadata?.[key];\n  }\n\n  /**\n   * Verifica se o token pertence a um usuário específico\n   * @param usuarioId ID do usuário\n   * @returns true se pertence ao usuário\n   */\n  belongsToUser(usuarioId: string): boolean {\n    return this.usuario_id === usuarioId;\n  }\n\n  /**\n   * Verifica se é um token de acesso\n   * @returns true se é access token\n   */\n  isAccessToken(): boolean {\n    return this.token_type === 'access';\n  }\n\n  /**\n   * Verifica se é um token de refresh\n   * @returns true se é refresh token\n   */\n  isRefreshToken(): boolean {\n    return this.token_type === 'refresh';\n  }\n\n  /**\n   * Verifica se o token foi invalidado recentemente (últimas 24 horas)\n   * @returns true se foi invalidado recentemente\n   */\n  wasRecentlyBlacklisted(): boolean {\n    const now = new Date();\n    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    return this.created_at > oneDayAgo;\n  }\n\n  /**\n   * Calcula há quantos minutos o token foi blacklisted\n   * @returns minutos desde a blacklist\n   */\n  getMinutesSinceBlacklisted(): number {\n    const now = new Date();\n    const diffMs = now.getTime() - this.created_at.getTime();\n    return Math.floor(diffMs / (1000 * 60));\n  }\n\n  /**\n   * Verifica se o token expira em breve (próximas 2 horas)\n   * @returns true se expira em breve\n   */\n  expiresWithin(hours: number = 2): boolean {\n    const now = new Date();\n    const futureTime = new Date(now.getTime() + hours * 60 * 60 * 1000);\n    return this.expires_at <= futureTime;\n  }\n\n  /**\n   * Obtém informações resumidas do token blacklisted\n   * @returns objeto com informações resumidas\n   */\n  getSummary(): {\n    id: string;\n    jti: string;\n    usuario_id: string;\n    token_type: string;\n    reason: string;\n    expires_at: Date;\n    created_at: Date;\n    isStillBlacklisted: boolean;\n    minutesUntilExpiration: number;\n  } {\n    return {\n      id: this.id,\n      jti: this.jti,\n      usuario_id: this.usuario_id,\n      token_type: this.token_type,\n      reason: this.reason,\n      expires_at: this.expires_at,\n      created_at: this.created_at,\n      isStillBlacklisted: this.isStillBlacklisted(),\n      minutesUntilExpiration: this.getMinutesUntilExpiration()\n    };\n  }\n\n  /**\n   * Verifica se tem informações de cliente (IP e User Agent)\n   * @returns true se tem informações de cliente\n   */\n  hasClientInfo(): boolean {\n    return !!(this.client_ip || this.user_agent);\n  }\n\n  /**\n   * Obtém uma descrição legível do motivo da blacklist\n   * @returns descrição formatada\n   */\n  getReasonDescription(): string {\n    const reasonMap: Record<string, string> = {\n      'user_logout': 'Logout do usuário',\n      'token_compromised': 'Token comprometido',\n      'password_changed': 'Senha alterada',\n      'account_suspended': 'Conta suspensa',\n      'security_breach': 'Violação de segurança',\n      'admin_revoke': 'Revogado pelo administrador',\n      'expired': 'Token expirado',\n      'invalid_use': 'Uso inválido'\n    };\n    \n    return reasonMap[this.reason] || this.reason;\n  }\n\n  /**\n   * Verifica se o token foi blacklisted por motivos de segurança\n   * @returns true se foi por motivos de segurança\n   */\n  isSecurityRelated(): boolean {\n    const securityReasons = [\n      'token_compromised',\n      'password_changed',\n      'account_suspended',\n      'security_breach',\n      'admin_revoke'\n    ];\n    \n    return securityReasons.includes(this.reason);\n  }\n\n  /**\n   * Gera uma chave única para o token blacklisted\n   * @returns chave única\n   */\n  getUniqueKey(): string {\n    return `blacklist_${this.jti}_${this.usuario_id}`;\n  }\n\n  /**\n   * Verifica se o registro está em estado consistente\n   * @returns true se está consistente\n   */\n  isConsistent(): boolean {\n    return (\n      !!this.id &&\n      !!this.jti &&\n      !!this.usuario_id &&\n      !!this.token_type &&\n      !!this.reason &&\n      !!this.expires_at &&\n      !!this.created_at\n    );\n  }\n\n  /**\n   * Remove metadados sensíveis para logs\n   * @returns objeto sanitizado\n   */\n  toSafeLog(): {\n    id: string;\n    jti: string;\n    usuario_id: string;\n    token_type: string;\n    reason: string;\n    expires_at: Date;\n    created_at: Date;\n    hasClientInfo: boolean;\n  } {\n    return {\n      id: this.id,\n      jti: this.jti.substring(0, 8) + '...',\n      usuario_id: this.usuario_id,\n      token_type: this.token_type,\n      reason: this.reason,\n      expires_at: this.expires_at,\n      created_at: this.created_at,\n      hasClientInfo: this.hasClientInfo()\n    };\n  }\n\n  /**\n   * Formata a data de expiração para exibição\n   * @returns data formatada\n   */\n  getExpiracaoFormatada(): string {\n    return this.expires_at.toLocaleString('pt-BR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n\n  /**\n   * Formata a data de criação para exibição\n   * @returns data formatada\n   */\n  getCriacaoFormatada(): string {\n    return this.created_at.toLocaleString('pt-BR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n}"],"version":3}