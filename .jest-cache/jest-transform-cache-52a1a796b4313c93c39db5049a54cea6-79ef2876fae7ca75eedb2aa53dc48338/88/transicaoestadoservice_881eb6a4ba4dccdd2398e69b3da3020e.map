{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\transicao-estado.service.ts","mappings":";;;;;;;;;AAAA,2CAIwB;AAExB,+DAGmC;AAEnC;;;;;GAKG;AAEI,IAAM,sBAAsB,GAA5B,MAAM,sBAAsB;IACjC;;;;;OAKG;IACH,iBAAiB,CACf,WAA8B,EAC9B,UAA6B;QAE7B,OAAO,uCAAqB,CAAC,WAAW,CAAC,EAAE,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC;IAC3E,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,WAA8B;QAChD,OAAO,uCAAqB,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACK,iBAAiB,CACvB,WAA8B,EAC9B,UAA6B;QAE7B,OAAO,GAAG,WAAW,SAAS,UAAU,EAAE,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACH,wBAAwB,CACtB,WAA8B,EAC9B,UAA6B;QAE7B,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAC9D,OAAO,sCAAoB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IAC3C,CAAC;IAED;;;;;;OAMG;IACH,gCAAgC,CAC9B,WAA8B,EAC9B,UAA6B,EAC7B,iBAA2B;QAE3B,MAAM,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,CACzD,WAAW,EACX,UAAU,CACX,CAAC;QAEF,8EAA8E;QAC9E,IAAI,qBAAqB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,yEAAyE;QACzE,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAC9C,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CACtC,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,2BAA2B,CAC/B,WAA8B,EAC9B,UAA6B,EAC7B,SAAiB;QAEjB,oCAAoC;QACpC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,CAAC;YACrD,MAAM,IAAI,4BAAmB,CAC3B,gBAAgB,WAAW,SAAS,UAAU,kBAAkB,CACjE,CAAC;QACJ,CAAC;QAED,wEAAwE;QACxE,uEAAuE;QACvE,mEAAmE;QAEnE,gFAAgF;QAChF,4FAA4F;QAC5F,4FAA4F;QAC5F,IAAI;IACN,CAAC;CACF,CAAA;AA3GY,wDAAsB;iCAAtB,sBAAsB;IADlC,IAAA,mBAAU,GAAE;GACA,sBAAsB,CA2GlC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\transicao-estado.service.ts"],"sourcesContent":["import {\n  Injectable,\n  BadRequestException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { StatusSolicitacao } from '../../../entities/solicitacao.entity';\nimport {\n  TRANSICOES_PERMITIDAS,\n  PERMISSOES_TRANSICAO,\n} from '../config/workflow-config';\n\n/**\n * Serviço de Transição de Estado\n *\n * Responsável por gerenciar as regras de transição entre estados das solicitações.\n * Centraliza a lógica de validação de transições e permissões necessárias.\n */\n@Injectable()\nexport class TransicaoEstadoService {\n  /**\n   * Verifica se uma transição de estado é válida\n   * @param estadoAtual Estado atual da solicitação\n   * @param novoEstado Estado para o qual se deseja transicionar\n   * @returns Boolean indicando se a transição é permitida\n   */\n  isTransicaoValida(\n    estadoAtual: StatusSolicitacao,\n    novoEstado: StatusSolicitacao,\n  ): boolean {\n    return TRANSICOES_PERMITIDAS[estadoAtual]?.includes(novoEstado) || false;\n  }\n\n  /**\n   * Obtém todos os estados possíveis a partir de um estado atual\n   * @param estadoAtual Estado atual da solicitação\n   * @returns Array com os estados possíveis\n   */\n  getEstadosPossiveis(estadoAtual: StatusSolicitacao): StatusSolicitacao[] {\n    return TRANSICOES_PERMITIDAS[estadoAtual] || [];\n  }\n\n  /**\n   * Obtém a chave de transição para um par de estados\n   * @param estadoAtual Estado atual da solicitação\n   * @param novoEstado Estado para o qual se deseja transicionar\n   * @returns Chave de transição no formato ESTADO_ATUAL_PARA_NOVO_ESTADO\n   */\n  private getChaveTransicao(\n    estadoAtual: StatusSolicitacao,\n    novoEstado: StatusSolicitacao,\n  ): string {\n    return `${estadoAtual}_PARA_${novoEstado}`;\n  }\n\n  /**\n   * Obtém as permissões necessárias para realizar uma transição\n   * @param estadoAtual Estado atual da solicitação\n   * @param novoEstado Estado para o qual se deseja transicionar\n   * @returns Array com os nomes das permissões necessárias\n   */\n  getPermissoesNecessarias(\n    estadoAtual: StatusSolicitacao,\n    novoEstado: StatusSolicitacao,\n  ): string[] {\n    const chave = this.getChaveTransicao(estadoAtual, novoEstado);\n    return PERMISSOES_TRANSICAO[chave] || [];\n  }\n\n  /**\n   * Verifica se um usuário tem permissão para realizar uma transição\n   * @param estadoAtual Estado atual da solicitação\n   * @param novoEstado Estado para o qual se deseja transicionar\n   * @param permissoesUsuario Array com as permissões do usuário\n   * @returns Boolean indicando se o usuário tem permissão para a transição\n   */\n  usuarioTemPermissaoParaTransicao(\n    estadoAtual: StatusSolicitacao,\n    novoEstado: StatusSolicitacao,\n    permissoesUsuario: string[],\n  ): boolean {\n    const permissoesNecessarias = this.getPermissoesNecessarias(\n      estadoAtual,\n      novoEstado,\n    );\n\n    // Se não houver permissões definidas para a transição, assume que é permitida\n    if (permissoesNecessarias.length === 0) {\n      return true;\n    }\n\n    // Verifica se o usuário possui pelo menos uma das permissões necessárias\n    return permissoesNecessarias.some((permissao) =>\n      permissoesUsuario.includes(permissao),\n    );\n  }\n\n  /**\n   * Verifica se uma transição é permitida, lançando exceções caso não seja\n   * @param estadoAtual Estado atual da solicitação\n   * @param novoEstado Estado para o qual se deseja transicionar\n   * @param usuarioId ID do usuário que está realizando a transição\n   * @throws BadRequestException se a transição não for válida\n   * @throws ForbiddenException se o usuário não tiver permissão\n   */\n  async verificarTransicaoPermitida(\n    estadoAtual: StatusSolicitacao,\n    novoEstado: StatusSolicitacao,\n    usuarioId: string,\n  ): Promise<void> {\n    // Verificar se a transição é válida\n    if (!this.isTransicaoValida(estadoAtual, novoEstado)) {\n      throw new BadRequestException(\n        `Transição de ${estadoAtual} para ${novoEstado} não é permitida`,\n      );\n    }\n\n    // Aqui seria necessário um serviço de usuário para buscar as permissões\n    // Para simplificar, estamos apenas verificando se a transição é válida\n    // em um ambiente de produção, buscaríamos as permissões do usuário\n\n    // const permissoesUsuario = await this.usuarioService.getPermissoes(usuarioId);\n    // if (!this.usuarioTemPermissaoParaTransicao(estadoAtual, novoEstado, permissoesUsuario)) {\n    //   throw new ForbiddenException('Usuário não tem permissão para realizar esta transição');\n    // }\n  }\n}\n"],"version":3}