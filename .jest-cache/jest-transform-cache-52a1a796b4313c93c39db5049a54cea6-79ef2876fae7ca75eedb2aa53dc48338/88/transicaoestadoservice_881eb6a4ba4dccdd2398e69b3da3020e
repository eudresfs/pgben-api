0feda4ac2b97d3b600a2cfde3052b1cf
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransicaoEstadoService = void 0;
const common_1 = require("@nestjs/common");
const workflow_config_1 = require("../config/workflow-config");
/**
 * Serviço de Transição de Estado
 *
 * Responsável por gerenciar as regras de transição entre estados das solicitações.
 * Centraliza a lógica de validação de transições e permissões necessárias.
 */
let TransicaoEstadoService = class TransicaoEstadoService {
    /**
     * Verifica se uma transição de estado é válida
     * @param estadoAtual Estado atual da solicitação
     * @param novoEstado Estado para o qual se deseja transicionar
     * @returns Boolean indicando se a transição é permitida
     */
    isTransicaoValida(estadoAtual, novoEstado) {
        return workflow_config_1.TRANSICOES_PERMITIDAS[estadoAtual]?.includes(novoEstado) || false;
    }
    /**
     * Obtém todos os estados possíveis a partir de um estado atual
     * @param estadoAtual Estado atual da solicitação
     * @returns Array com os estados possíveis
     */
    getEstadosPossiveis(estadoAtual) {
        return workflow_config_1.TRANSICOES_PERMITIDAS[estadoAtual] || [];
    }
    /**
     * Obtém a chave de transição para um par de estados
     * @param estadoAtual Estado atual da solicitação
     * @param novoEstado Estado para o qual se deseja transicionar
     * @returns Chave de transição no formato ESTADO_ATUAL_PARA_NOVO_ESTADO
     */
    getChaveTransicao(estadoAtual, novoEstado) {
        return `${estadoAtual}_PARA_${novoEstado}`;
    }
    /**
     * Obtém as permissões necessárias para realizar uma transição
     * @param estadoAtual Estado atual da solicitação
     * @param novoEstado Estado para o qual se deseja transicionar
     * @returns Array com os nomes das permissões necessárias
     */
    getPermissoesNecessarias(estadoAtual, novoEstado) {
        const chave = this.getChaveTransicao(estadoAtual, novoEstado);
        return workflow_config_1.PERMISSOES_TRANSICAO[chave] || [];
    }
    /**
     * Verifica se um usuário tem permissão para realizar uma transição
     * @param estadoAtual Estado atual da solicitação
     * @param novoEstado Estado para o qual se deseja transicionar
     * @param permissoesUsuario Array com as permissões do usuário
     * @returns Boolean indicando se o usuário tem permissão para a transição
     */
    usuarioTemPermissaoParaTransicao(estadoAtual, novoEstado, permissoesUsuario) {
        const permissoesNecessarias = this.getPermissoesNecessarias(estadoAtual, novoEstado);
        // Se não houver permissões definidas para a transição, assume que é permitida
        if (permissoesNecessarias.length === 0) {
            return true;
        }
        // Verifica se o usuário possui pelo menos uma das permissões necessárias
        return permissoesNecessarias.some((permissao) => permissoesUsuario.includes(permissao));
    }
    /**
     * Verifica se uma transição é permitida, lançando exceções caso não seja
     * @param estadoAtual Estado atual da solicitação
     * @param novoEstado Estado para o qual se deseja transicionar
     * @param usuarioId ID do usuário que está realizando a transição
     * @throws BadRequestException se a transição não for válida
     * @throws ForbiddenException se o usuário não tiver permissão
     */
    async verificarTransicaoPermitida(estadoAtual, novoEstado, usuarioId) {
        // Verificar se a transição é válida
        if (!this.isTransicaoValida(estadoAtual, novoEstado)) {
            throw new common_1.BadRequestException(`Transição de ${estadoAtual} para ${novoEstado} não é permitida`);
        }
        // Aqui seria necessário um serviço de usuário para buscar as permissões
        // Para simplificar, estamos apenas verificando se a transição é válida
        // em um ambiente de produção, buscaríamos as permissões do usuário
        // const permissoesUsuario = await this.usuarioService.getPermissoes(usuarioId);
        // if (!this.usuarioTemPermissaoParaTransicao(estadoAtual, novoEstado, permissoesUsuario)) {
        //   throw new ForbiddenException('Usuário não tem permissão para realizar esta transição');
        // }
    }
};
exports.TransicaoEstadoService = TransicaoEstadoService;
exports.TransicaoEstadoService = TransicaoEstadoService = __decorate([
    (0, common_1.Injectable)()
], TransicaoEstadoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,