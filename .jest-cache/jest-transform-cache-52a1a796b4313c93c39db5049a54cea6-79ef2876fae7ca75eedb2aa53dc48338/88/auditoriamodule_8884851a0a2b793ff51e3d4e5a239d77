1f3e9e6c61067fc888e20aa090c128f0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AuditoriaModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaModule = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const bull_1 = require("@nestjs/bull");
const jwt_1 = require("@nestjs/jwt");
const config_1 = require("@nestjs/config");
const schedule_adapter_module_1 = require("../../shared/schedule/schedule-adapter.module");
const auth_module_1 = require("../../auth/auth.module");
// Entidades
const entities_1 = require("../../entities");
// Serviços Core
const auditoria_service_1 = require("./services/auditoria.service");
const auditoria_queue_service_1 = require("./services/auditoria-queue.service");
const auditoria_queue_processor_1 = require("./services/auditoria-queue.processor");
// Serviços Especializados
const auditoria_signature_service_1 = require("./services/auditoria-signature.service");
const auditoria_exportacao_service_1 = require("./services/auditoria-exportacao.service");
const auditoria_monitoramento_service_1 = require("./services/auditoria-monitoramento.service");
// Controladores
const auditoria_controller_1 = require("./controllers/auditoria.controller");
const auditoria_exportacao_controller_1 = require("./controllers/auditoria-exportacao.controller");
const auditoria_monitoramento_controller_1 = require("./controllers/auditoria-monitoramento.controller");
// Middleware
const auditoria_middleware_1 = require("./middlewares/auditoria.middleware");
// Repositórios
const log_auditoria_repository_1 = require("./repositories/log-auditoria.repository");
/**
 * Módulo de Auditoria Unificado
 *
 * Responsável por registrar e gerenciar logs de auditoria do sistema,
 * garantindo a rastreabilidade das operações e compliance com LGPD.
 *
 * Funcionalidades:
 * - Registro automático de operações via middleware e interceptores
 * - Proteção contra tampering usando assinaturas JWT
 * - Compressão de dados para otimização de espaço
 * - Particionamento de tabelas para melhor performance
 * - Exportação de logs em diferentes formatos
 * - Monitoramento de performance e integridade
 * - Processamento assíncrono via filas
 *
 * Este módulo é global e deve ser importado apenas pelo módulo principal (AppModule).
 * Os serviços são exportados para serem usados em qualquer outro módulo sem necessidade de reimportação.
 */
let AuditoriaModule = AuditoriaModule_1 = class AuditoriaModule {
    logger = new common_1.Logger(AuditoriaModule_1.name);
    /**
     * Configura o middleware de auditoria para todas as rotas da API
     * Restaurado com tratamento de erros
     */
    configure(consumer) {
        try {
            consumer
                .apply(auditoria_middleware_1.AuditoriaMiddleware)
                .exclude({ path: 'health', method: common_1.RequestMethod.ALL }, { path: 'metrics', method: common_1.RequestMethod.ALL }, { path: 'api-docs', method: common_1.RequestMethod.ALL }, { path: 'auditoria/monitoramento', method: common_1.RequestMethod.ALL })
                .forRoutes({ path: '*', method: common_1.RequestMethod.ALL });
            this.logger.log('Middleware de auditoria configurado com sucesso');
        }
        catch (error) {
            this.logger.error(`Erro ao configurar middleware de auditoria: ${error.message}`);
            // Não propagar erro para não bloquear a inicialização da aplicação
        }
    }
};
exports.AuditoriaModule = AuditoriaModule;
exports.AuditoriaModule = AuditoriaModule = AuditoriaModule_1 = __decorate([
    (0, common_1.Global)(),
    (0, common_1.Module)({
        imports: [
            // Configuração do TypeORM para entidades do módulo
            typeorm_1.TypeOrmModule.forFeature([entities_1.LogAuditoria]),
            // Configuração assíncrona do BullModule
            bull_1.BullModule.registerQueueAsync({
                name: 'auditoria',
                imports: [config_1.ConfigModule],
                useFactory: (configService) => ({
                    redis: {
                        host: configService.get('REDIS_HOST', 'localhost'),
                        port: configService.get('REDIS_PORT', 6379),
                    },
                }),
                inject: [config_1.ConfigService],
            }),
            // Módulo de agendamento de tarefas
            schedule_adapter_module_1.ScheduleAdapterModule,
            // Módulo de autenticação (para JwtAuthGuard e JwtBlacklistService)
            (0, common_1.forwardRef)(() => auth_module_1.AuthModule),
            // Configuração assíncrona do JwtModule
            jwt_1.JwtModule.registerAsync({
                imports: [config_1.ConfigModule],
                useFactory: (configService) => ({
                    secret: configService.get('JWT_SECRET'),
                    signOptions: { expiresIn: '1d' },
                }),
                inject: [config_1.ConfigService],
            }),
        ],
        controllers: [
            auditoria_controller_1.AuditoriaController,
            auditoria_exportacao_controller_1.AuditoriaExportacaoController,
            auditoria_monitoramento_controller_1.AuditoriaMonitoramentoController,
        ],
        providers: [
            // Serviços Core
            auditoria_service_1.AuditoriaService,
            auditoria_queue_service_1.AuditoriaQueueService,
            auditoria_queue_processor_1.AuditoriaQueueProcessor,
            // Repositórios
            log_auditoria_repository_1.LogAuditoriaRepository,
            // Serviços Especializados
            auditoria_signature_service_1.AuditoriaSignatureService,
            auditoria_exportacao_service_1.AuditoriaExportacaoService,
            auditoria_monitoramento_service_1.AuditoriaMonitoramentoService,
        ],
        exports: [
            // Exporta os serviços principais para uso em outros módulos
            auditoria_service_1.AuditoriaService,
            auditoria_queue_service_1.AuditoriaQueueService,
            log_auditoria_repository_1.LogAuditoriaRepository,
            auditoria_signature_service_1.AuditoriaSignatureService,
        ],
    })
], AuditoriaModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,