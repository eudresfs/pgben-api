{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\fluxo-completo.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\fluxo-completo.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { TipoOperacao } from '../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { LogAuditoria } from '../../src/modules/auditoria/entities/log-auditoria.entity';\nimport { ConfigModule } from '@nestjs/config';\n\n// Importações corretas para os serviços\nclass CriptografiaService {\n  criptografar: jest.Mock;\n  descriptografar: jest.Mock;\n  criptografarArquivo: jest.Mock;\n  descriptografarArquivo: jest.Mock;\n}\n\nclass MinioService {\n  inicializarBucket: jest.Mock;\n  uploadArquivo: jest.Mock;\n  downloadArquivo: jest.Mock;\n  listarArquivos: jest.Mock;\n}\n\ndescribe('Fluxo Completo (e2e)', () => {\n  let app: INestApplication;\n  let criptografiaService: CriptografiaService;\n  let minioService: MinioService;\n  let logAuditoriaRepository: any;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        AppModule,\n      ],\n    })\n      .overrideProvider(getRepositoryToken(LogAuditoria))\n      .useValue({\n        create: jest.fn().mockImplementation((dto) => dto),\n        save: jest.fn().mockResolvedValue({ id: 'mock-log-id' }),\n        find: jest.fn().mockResolvedValue([]),\n        findOne: jest.fn().mockResolvedValue(null),\n      })\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(\n      new ValidationPipe({\n        transform: true,\n        whitelist: true,\n        forbidNonWhitelisted: true,\n      }),\n    );\n\n    criptografiaService =\n      moduleFixture.get<CriptografiaService>(CriptografiaService);\n    minioService = moduleFixture.get<MinioService>(MinioService);\n    logAuditoriaRepository = moduleFixture.get(\n      getRepositoryToken(LogAuditoria),\n    );\n\n    // Mock das funções do MinioService\n    jest.spyOn(minioService, 'inicializarBucket').mockResolvedValue(undefined);\n    jest.spyOn(minioService, 'uploadArquivo').mockResolvedValue({\n      etag: 'mock-etag',\n      versionId: 'mock-version',\n    });\n    jest.spyOn(minioService, 'downloadArquivo').mockResolvedValue({\n      buffer: Buffer.from('conteúdo do arquivo'),\n      contentType: 'application/pdf',\n    });\n\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await app.close();\n  });\n\n  describe('Fluxo de Auditoria', () => {\n    it('deve registrar log de auditoria ao criar um novo recurso', async () => {\n      // Simula a criação de um novo usuário\n      const novoUsuario = {\n        nome: 'João Silva',\n        cpf: '529.982.247-25',\n        email: 'joao@exemplo.com',\n        telefone: '(84) 99999-8888',\n        endereco: {\n          cep: '59000-000',\n          logradouro: 'Rua das Flores',\n          numero: 123,\n          bairro: 'Centro',\n          cidade: 'Natal',\n          uf: 'RN',\n        },\n      };\n\n      // Faz a requisição para criar o usuário\n      await request(app.getHttpServer())\n        .post('/api/v1/usuarios')\n        .send(novoUsuario)\n        .expect(201);\n\n      // Verifica se o log de auditoria foi criado\n      expect(logAuditoriaRepository.save).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Usuario',\n          dados_sensiveis_acessados: expect.arrayContaining([\n            'cpf',\n            'endereco',\n          ]),\n        }),\n      );\n    });\n\n    it('deve registrar log de auditoria ao consultar dados sensíveis', async () => {\n      // Simula a consulta de um usuário com dados sensíveis\n      await request(app.getHttpServer())\n        .get('/api/v1/usuarios/123e4567-e89b-12d3-a456-426614174000')\n        .expect(200);\n\n      // Verifica se o log de auditoria foi criado\n      expect(logAuditoriaRepository.save).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.READ,\n          entidade_afetada: 'Usuario',\n          entidade_id: '123e4567-e89b-12d3-a456-426614174000',\n        }),\n      );\n    });\n  });\n\n  describe('Fluxo de Criptografia', () => {\n    it('deve criptografar dados sensíveis antes de armazenar', async () => {\n      // Espia o método de criptografia\n      const spyCriptografar = jest.spyOn(criptografiaService, 'criptografar');\n\n      // Simula a criação de um documento com dados sensíveis\n      const novoDocumento = {\n        titulo: 'Contrato de Trabalho',\n        tipo: 'PDF',\n        conteudo: 'Dados sensíveis do contrato',\n        usuario_id: '123e4567-e89b-12d3-a456-426614174000',\n      };\n\n      // Faz a requisição para criar o documento\n      await request(app.getHttpServer())\n        .post('/api/v1/documentos')\n        .send(novoDocumento)\n        .expect(201);\n\n      // Verifica se o método de criptografia foi chamado\n      expect(spyCriptografar).toHaveBeenCalled();\n    });\n\n    it('deve descriptografar dados sensíveis ao consultar', async () => {\n      // Espia o método de descriptografia\n      const spyDescriptografar = jest.spyOn(\n        criptografiaService,\n        'descriptografar',\n      );\n\n      // Simula a consulta de um documento com dados sensíveis\n      await request(app.getHttpServer())\n        .get('/api/v1/documentos/123e4567-e89b-12d3-a456-426614174000')\n        .expect(200);\n\n      // Verifica se o método de descriptografia foi chamado\n      expect(spyDescriptografar).toHaveBeenCalled();\n    });\n  });\n\n  describe('Fluxo de Armazenamento no MinIO', () => {\n    it('deve armazenar documentos no MinIO com criptografia', async () => {\n      // Cria um buffer simulando um arquivo\n      const arquivoBuffer = Buffer.from('Conteúdo do arquivo PDF');\n\n      // Simula o upload de um documento\n      await request(app.getHttpServer())\n        .post('/api/v1/documentos/upload')\n        .attach('arquivo', arquivoBuffer, {\n          filename: 'documento.pdf',\n          contentType: 'application/pdf',\n        })\n        .field(\n          'metadados',\n          JSON.stringify({\n            titulo: 'Contrato de Trabalho',\n            tipo: 'PDF',\n            usuario_id: '123e4567-e89b-12d3-a456-426614174000',\n          }),\n        )\n        .expect(201);\n\n      // Verifica se o método de upload do MinIO foi chamado com criptografia\n      expect(minioService.uploadArquivo).toHaveBeenCalledWith(\n        expect.any(Buffer),\n        expect.stringContaining('documento.pdf'),\n        'pgben-documentos',\n        'application/pdf',\n        expect.objectContaining({\n          titulo: 'Contrato de Trabalho',\n          tipo: 'PDF',\n          usuario_id: '123e4567-e89b-12d3-a456-426614174000',\n        }),\n        true, // Criptografar = true\n      );\n    });\n\n    it('deve recuperar documentos do MinIO e descriptografar', async () => {\n      // Simula o download de um documento\n      await request(app.getHttpServer())\n        .get('/api/v1/documentos/123e4567-e89b-12d3-a456-426614174000/download')\n        .expect(200);\n\n      // Verifica se o método de download do MinIO foi chamado\n      expect(minioService.downloadArquivo).toHaveBeenCalledWith(\n        expect.stringContaining('123e4567-e89b-12d3-a456-426614174000'),\n        'pgben-documentos',\n      );\n    });\n  });\n\n  describe('Validação de DTOs', () => {\n    it('deve rejeitar dados inválidos com mensagens apropriadas', async () => {\n      // Simula a criação de um usuário com CPF inválido\n      const usuarioInvalido = {\n        nome: 'João Silva',\n        cpf: '111.111.111-11', // CPF inválido (dígitos repetidos)\n        email: 'joao@exemplo.com',\n        telefone: '(84) 99999-8888',\n        endereco: {\n          cep: '59000-000',\n          logradouro: 'Rua das Flores',\n          numero: 123,\n          bairro: 'Centro',\n          cidade: 'Natal',\n          uf: 'RN',\n        },\n      };\n\n      // Faz a requisição para criar o usuário\n      const response = await request(app.getHttpServer())\n        .post('/api/v1/usuarios')\n        .send(usuarioInvalido)\n        .expect(400);\n\n      // Verifica se a resposta contém a mensagem de erro apropriada\n      expect(response.body.message).toContain('CPF inválido');\n    });\n\n    it('deve rejeitar dados incompletos com mensagens apropriadas', async () => {\n      // Simula a criação de um usuário sem campos obrigatórios\n      const usuarioIncompleto = {\n        nome: 'João Silva',\n        // CPF ausente (obrigatório)\n        email: 'joao@exemplo.com',\n        // Outros campos obrigatórios ausentes\n      };\n\n      // Faz a requisição para criar o usuário\n      const response = await request(app.getHttpServer())\n        .post('/api/v1/usuarios')\n        .send(usuarioIncompleto)\n        .expect(400);\n\n      // Verifica se a resposta contém as mensagens de erro apropriadas\n      expect(response.body.message).toContain('cpf');\n    });\n  });\n\n  describe('Fluxo Completo', () => {\n    it('deve executar o fluxo completo de criação, auditoria, criptografia e armazenamento', async () => {\n      // Espia os métodos relevantes\n      const spyCriptografar = jest.spyOn(criptografiaService, 'criptografar');\n\n      // Simula a criação de um documento com dados sensíveis e upload de arquivo\n      const arquivoBuffer = Buffer.from('Conteúdo do arquivo PDF');\n\n      await request(app.getHttpServer())\n        .post('/api/v1/documentos/upload')\n        .attach('arquivo', arquivoBuffer, {\n          filename: 'documento.pdf',\n          contentType: 'application/pdf',\n        })\n        .field(\n          'metadados',\n          JSON.stringify({\n            titulo: 'Contrato de Trabalho',\n            tipo: 'PDF',\n            conteudo: 'Dados sensíveis do contrato',\n            usuario_id: '123e4567-e89b-12d3-a456-426614174000',\n          }),\n        )\n        .expect(201);\n\n      // Verifica se os métodos de criptografia foram chamados\n      expect(spyCriptografar).toHaveBeenCalled();\n\n      // Verifica se o método de upload do MinIO foi chamado\n      expect(minioService.uploadArquivo).toHaveBeenCalled();\n\n      // Verifica se o log de auditoria foi criado\n      expect(logAuditoriaRepository.save).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Documento',\n        }),\n      );\n    });\n  });\n});\n"],"version":3}