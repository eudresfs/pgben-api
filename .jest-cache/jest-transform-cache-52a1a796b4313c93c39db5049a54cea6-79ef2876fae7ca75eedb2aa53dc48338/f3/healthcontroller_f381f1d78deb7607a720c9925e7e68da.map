{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\health.controller.ts","mappings":";;;;;;;;;;;;;AAAA,2CAAiD;AACjD,+CAO0B;AAC1B,6EAAgE;AAChE,6CAA0C;AAC1C,2EAA+F;AAC/F,kGAAkG;AAElG;;;;;GAKG;AAGI,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAEjB;IACA;IACA;IACA;IACA;IACA;IANV,YACU,MAA0B,EAC1B,IAAyB,EACzB,EAA0B,EAC1B,MAA6B,EAC7B,IAAyB,EACzB,cAAqC;QALrC,WAAM,GAAN,MAAM,CAAoB;QAC1B,SAAI,GAAJ,IAAI,CAAqB;QACzB,OAAE,GAAF,EAAE,CAAwB;QAC1B,WAAM,GAAN,MAAM,CAAuB;QAC7B,SAAI,GAAJ,IAAI,CAAqB;QACzB,mBAAc,GAAd,cAAc,CAAuB;QAG7C,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;QACvD,OAAO,CAAC,GAAG,CAAC,kCAAkC,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAC;IAED;;;OAGG;IAIG,AAAN,KAAK,CAAC,KAAK;QACT,OAAO,CAAC,GAAG,CAAC,4CAA4C,CAAC,CAAC;QAE1D,qCAAqC;QACrC,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtE,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,KAAK,MAAM,CAAC;QAE1D,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACvB,iDAAiD;YACjD,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC;YAEnC,6CAA6C;YAC7C,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,8BAA8B,CAAC;YAEzE,2BAA2B;YAC3B,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,EAAE,QAAQ;YAEvE,yBAAyB;YACzB,GAAG,EAAE,CACH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBAC7B,IAAI,EAAE,GAAG;gBACT,gBAAgB,EAAE,GAAG,EAAE,oBAAoB;aAC5C,CAAC;YAEJ,kBAAkB;YAClB,KAAK,IAAI,EAAE;gBACT,sDAAsD;gBACtD,OAAO;oBACL,KAAK,EAAE;wBACL,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;wBACtE,OAAO,EAAE,YAAY;4BACnB,CAAC,CAAC,qCAAqC;4BACvC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,oCAAoC,CAAC;qBACjG;iBACgC,CAAC,CAAC,mDAAmD;YAC1F,CAAC;YAED,8DAA8D;YAC9D,gBAAgB;YAChB,kEAAkE;YAClE,aAAa;YACb,iBAAiB;YACjB,yDAAyD;YACzD,0CAA0C;YAC1C,sDAAsD;YACtD,wCAAwC;YACxC,8CAA8C;YAC9C,QAAQ;YACR,yCAAyC;YACzC,KAAK;SACN,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IAGH,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;QACzD,OAAO;YACL,MAAM,EAAE,IAAI;YACZ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,OAAO,EAAE,WAAW;YACpB,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,OAAO;SACpD,CAAC;IACJ,CAAC;IAED;;OAEG;IAIH,aAAa;QACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IAIH,WAAW;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACvB,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,aAAa,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;YAC7D,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;YAC3D,GAAG,EAAE,CACH,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBAC7B,IAAI,EAAE,GAAG;gBACT,gBAAgB,EAAE,GAAG;aACtB,CAAC;SACL,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,kBAAkB;IAClB,YAAY;IACZ,yBAAyB;IACzB,kEAAkE;IAClE,aAAa;IACb,iBAAiB;IACjB,yDAAyD;IACzD,0CAA0C;IAC1C,sDAAsD;IACtD,wCAAwC;IACxC,8CAA8C;IAC9C,QAAQ;IACR,OAAO;IACP,IAAI;IAEJ;;OAEG;IAIG,AAAN,KAAK,CAAC,UAAU;QACd,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,gBAAgB,EAAE,CAAC;QACtE,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,KAAK,MAAM,CAAC;QAE1D,OAAO;YACL,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;YACtE,IAAI,EAAE;gBACJ,KAAK,EAAE;oBACL,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC;oBACtE,OAAO,EAAE,YAAY;wBACnB,CAAC,CAAC,qCAAqC;wBACvC,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,oCAAoC,CAAC;iBACjG;aACF;SACF,CAAC;IACJ,CAAC;CACF,CAAA;AA9JY,4CAAgB;AAqBrB;IAHL,IAAA,YAAG,GAAE;IACL,IAAA,yBAAM,GAAE;IACR,IAAA,sBAAW,GAAE;;;;6CAoDb;AAQD;IAFC,IAAA,YAAG,EAAC,MAAM,CAAC;IACX,IAAA,yBAAM,GAAE;;;;4CASR;AAQD;IAHC,IAAA,YAAG,EAAC,IAAI,CAAC;IACT,IAAA,yBAAM,GAAE;IACR,IAAA,sBAAW,GAAE;;;;qDAGb;AAQD;IAHC,IAAA,YAAG,EAAC,QAAQ,CAAC;IACb,IAAA,yBAAM,GAAE;IACR,IAAA,sBAAW,GAAE;;;;mDAWb;AA0BK;IAHL,IAAA,YAAG,EAAC,OAAO,CAAC;IACZ,IAAA,yBAAM,GAAE;IACR,IAAA,sBAAW,GAAE;;;;kDAgBb;2BA7JU,gBAAgB;IAF5B,IAAA,iBAAO,EAAC,sBAAsB,CAAC;IAC/B,IAAA,mBAAU,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;yDAGzB,6BAAkB,oBAAlB,6BAAkB,oDACpB,8BAAmB,oBAAnB,8BAAmB,oDACrB,iCAAsB,oBAAtB,iCAAsB,oDAClB,gCAAqB,oBAArB,gCAAqB,oDACvB,8BAAmB,oBAAnB,8BAAmB,oDACT,yCAAqB,oBAArB,yCAAqB;GAPpC,gBAAgB,CA8J5B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\health.controller.ts"],"sourcesContent":["import { Controller, Get } from '@nestjs/common';\nimport {\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n  HealthCheck,\n  MemoryHealthIndicator,\n  DiskHealthIndicator,\n} from '@nestjs/terminus';\nimport { Public } from '../../auth/decorators/public.decorator';\nimport { ApiTags } from '@nestjs/swagger';\nimport { HealthCheckService as AppHealthCheckService } from '../services/health-check.service';\n// import { StorageHealthService } from '../../modules/documento/services/storage-health.service';\n\n/**\n * Controlador de Health Check\n *\n * Fornece endpoints para verificar a sa√∫de da aplica√ß√£o\n * e seus componentes (banco de dados, mem√≥ria, disco, etc.)\n */\n@ApiTags('M√©tricas e Dashboard')\n@Controller({ path: 'health', version: '1' })\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private db: TypeOrmHealthIndicator,\n    private memory: MemoryHealthIndicator,\n    private disk: DiskHealthIndicator,\n    private appHealthCheck: AppHealthCheckService,\n    // private storageHealth: StorageHealthService,\n  ) {\n    console.log('üî• DEBUG: HealthController inicializado');\n    console.log('üî• DEBUG: Caminho do controller:', '/health');\n  }\n\n  /**\n   * Endpoint principal de health check\n   * Verifica todos os componentes da aplica√ß√£o\n   */\n  @Get()\n  @Public()\n  @HealthCheck()\n  async check() {\n    console.log('üî• HEALTH CONTROLLER: check() foi chamado!');\n    \n    // Verificar disponibilidade do Redis\n    const isRedisAvailable = await this.appHealthCheck.isRedisAvailable();\n    const disableRedis = process.env.DISABLE_REDIS === 'true';\n    \n    return this.health.check([\n      // Verificar se o banco de dados est√° funcionando\n      () => this.db.pingCheck('database'),\n\n      // Verificar se o site oficial est√° acess√≠vel\n      () => this.http.pingCheck('site_oficial', 'https://www.natal.rn.gov.br/'),\n\n      // Verificar uso de mem√≥ria\n      () => this.memory.checkHeap('memory_heap', 300 * 1024 * 1024), // 300MB\n\n      // Verificar uso de disco\n      () =>\n        this.disk.checkStorage('disk', {\n          path: '/',\n          thresholdPercent: 0.9, // 90% de uso m√°ximo\n        }),\n        \n      // Verificar Redis\n      async () => {\n        // Usando o formato correto para HealthIndicatorResult\n        return {\n          redis: {\n            status: disableRedis ? 'disabled' : (isRedisAvailable ? 'up' : 'down'),\n            message: disableRedis \n              ? 'Redis desabilitado por configura√ß√£o' \n              : (isRedisAvailable ? 'Conex√£o com Redis estabelecida' : 'N√£o foi poss√≠vel conectar ao Redis'),\n          }\n        } as unknown as Record<string, any>; // For√ßar tipo compat√≠vel com HealthIndicatorResult\n      },\n      \n      // Verificar Storage (S3/MinIO) - Temporariamente desabilitado\n      // async () => {\n      //   const storageStatus = await this.storageHealth.checkHealth();\n      //   return {\n      //     storage: {\n      //       status: storageStatus.isHealthy ? 'up' : 'down',\n      //       provider: storageStatus.provider,\n      //       message: storageStatus.details.error || 'OK',\n      //       details: storageStatus.details,\n      //       lastChecked: storageStatus.timestamp,\n      //     }\n      //   } as unknown as Record<string, any>;\n      // },\n    ]);\n  }\n\n  /**\n   * Endpoint simplificado para verifica√ß√µes r√°pidas\n   * Retorna apenas status OK se a aplica√ß√£o estiver funcionando\n   */\n  @Get('ping')\n  @Public()\n  ping() {\n    console.log('üî• HEALTH CONTROLLER: ping() foi chamado!');\n    return {\n      status: 'ok',\n      timestamp: new Date().toISOString(),\n      service: 'pgben-api',\n      version: process.env.npm_package_version || '1.0.0',\n    };\n  }\n\n  /**\n   * Verifica apenas o banco de dados\n   */\n  @Get('db')\n  @Public()\n  @HealthCheck()\n  checkDatabase() {\n    return this.health.check([() => this.db.pingCheck('database')]);\n  }\n\n  /**\n   * Verifica uso de recursos do sistema\n   */\n  @Get('system')\n  @Public()\n  @HealthCheck()\n  checkSystem() {\n    return this.health.check([\n      () => this.memory.checkHeap('memory_heap', 300 * 1024 * 1024),\n      () => this.memory.checkRSS('memory_rss', 300 * 1024 * 1024),\n      () =>\n        this.disk.checkStorage('disk', {\n          path: '/',\n          thresholdPercent: 0.9,\n        }),\n    ]);\n  }\n  \n  /**\n   * Verifica apenas o storage (S3/MinIO) - Temporariamente desabilitado\n   */\n  // @Get('storage')\n  // @Public()\n  // async checkStorage() {\n  //   const storageStatus = await this.storageHealth.checkHealth();\n  //   return {\n  //     storage: {\n  //       status: storageStatus.isHealthy ? 'up' : 'down',\n  //       provider: storageStatus.provider,\n  //       message: storageStatus.details.error || 'OK',\n  //       details: storageStatus.details,\n  //       lastChecked: storageStatus.timestamp,\n  //     }\n  //   };\n  // }\n\n  /**\n   * Verifica a disponibilidade do Redis\n   */\n  @Get('redis')\n  @Public()\n  @HealthCheck()\n  async checkRedis() {\n    const isRedisAvailable = await this.appHealthCheck.isRedisAvailable();\n    const disableRedis = process.env.DISABLE_REDIS === 'true';\n    \n    return {\n      status: disableRedis ? 'disabled' : (isRedisAvailable ? 'up' : 'down'),\n      info: {\n        redis: {\n          status: disableRedis ? 'disabled' : (isRedisAvailable ? 'up' : 'down'),\n          message: disableRedis \n            ? 'Redis desabilitado por configura√ß√£o' \n            : (isRedisAvailable ? 'Conex√£o com Redis estabelecida' : 'N√£o foi poss√≠vel conectar ao Redis'),\n        },\n      },\n    };\n  }\n}\n"],"version":3}