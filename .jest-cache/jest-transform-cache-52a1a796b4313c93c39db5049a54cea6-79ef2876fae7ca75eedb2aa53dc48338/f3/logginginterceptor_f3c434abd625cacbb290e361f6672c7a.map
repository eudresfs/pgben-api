{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\logging.interceptor.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAKwB;AAExB,8CAAqC;AAErC,6DAAqD;AACrD,kDAA+D;AAGxD,IAAM,kBAAkB,0BAAxB,MAAM,kBAAkB;IACT;IAApB,YAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QACtC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,oBAAkB,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QACpD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,MAAM,GAAG,GAAG,IAAA,2BAAoB,EAAC,OAAO,CAAC,CAAC;QAE1C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CACvB,IAAA,eAAG,EAAC,GAAG,EAAE;YACP,MAAM,QAAQ,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,WAAW,EAAE,CAAC;YACtD,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;YAEvC,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;YAEtC,MAAM,OAAO,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC;YAErD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAmB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF,CAAA;AAxBY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;yDAEoB,0BAAS,oBAAT,0BAAS;GAD7B,kBAAkB,CAwB9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\interceptors\\logging.interceptor.ts"],"sourcesContent":["import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { AppLogger } from '../logger/logger.service';\nimport { createRequestContext } from '../request-context/util';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  constructor(private appLogger: AppLogger) {\n    this.appLogger.setContext(LoggingInterceptor.name);\n  }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const request = context.switchToHttp().getRequest();\n    const method = request.method;\n    const ctx = createRequestContext(request);\n\n    const now = Date.now();\n    return next.handle().pipe(\n      tap(() => {\n        const response = context.switchToHttp().getResponse();\n        const statusCode = response.statusCode;\n\n        const responseTime = Date.now() - now;\n\n        const resData = { method, statusCode, responseTime };\n\n        this.appLogger.log(ctx, 'Request completed', { resData });\n      }),\n    );\n  }\n}\n"],"version":3}