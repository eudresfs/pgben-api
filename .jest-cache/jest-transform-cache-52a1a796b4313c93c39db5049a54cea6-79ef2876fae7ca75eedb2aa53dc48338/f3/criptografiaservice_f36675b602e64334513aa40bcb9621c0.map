{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\criptografia.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\criptografia.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\n\nimport { ConfigService } from '@nestjs/config';\nimport * as crypto from 'crypto';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { ChaveMonitorService } from './chave-monitor.service';\n\n/**\n * Serviço de Criptografia\n *\n * Responsável por criptografar e descriptografar dados sensíveis,\n * especialmente documentos armazenados no MinIO.\n * Implementa criptografia AES-256-GCM para garantir confidencialidade\n * e integridade dos dados.\n */\n@Injectable()\nexport class CriptografiaService {\n  private readonly logger = new Logger(CriptografiaService.name);\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly keyLength = 32; // 256 bits\n  private readonly ivLength = 16; // 128 bits\n  private readonly authTagLength = 16; // 128 bits\n  private readonly masterKey: Buffer;\n  private readonly keyPath: string;\n  private readonly tiposSensiveis: string[];\n\n  constructor(\n    private configService: ConfigService,\n    private chaveMonitorService?: ChaveMonitorService,\n  ) {\n    // Obter a chave da variável de ambiente ou do arquivo\n    const envKey = this.configService.get<string>('ENCRYPTION_KEY');\n\n    // Inicializar a lista de tipos sensíveis\n    this.tiposSensiveis = this.configService.get<string[]>(\n      'TIPOS_DOCUMENTOS_SENSIVEIS',\n      [\n        'ATESTADO_MEDICO',\n        'LAUDO_MEDICO',\n        'DOCUMENTO_IDENTIDADE',\n        'CPF',\n        'CARTAO_NIS',\n        'DECLARACAO_SAUDE',\n        'PRONTUARIO_MEDICO',\n      ],\n    );\n\n    if (envKey) {\n      // Usar a chave da variável de ambiente\n      this.masterKey = Buffer.from(envKey);\n      this.logger.log('Usando chave de criptografia da variável de ambiente');\n    } else {\n      // Caminho padrão para o arquivo de chave\n      this.keyPath =\n        this.configService.get<string>('ENCRYPTION_KEY_PATH') ||\n        path.join(process.cwd(), 'config', 'encryption.key');\n\n      // Garantir que o diretório da chave existe\n      const keyDir = path.dirname(this.keyPath);\n      if (!fs.existsSync(keyDir)) {\n        fs.mkdirSync(keyDir, { recursive: true });\n      }\n\n      // Verificar se a chave já existe, caso contrário, criar uma nova\n      if (fs.existsSync(this.keyPath)) {\n        this.masterKey = fs.readFileSync(this.keyPath);\n        this.logger.log('Chave de criptografia carregada do arquivo');\n\n        // Verificar integridade da chave se o monitor estiver disponível\n        if (this.chaveMonitorService) {\n          const integridadeOk = this.chaveMonitorService.verificarIntegridade();\n          if (!integridadeOk) {\n            this.logger.warn(\n              'Alerta de segurança: Possível comprometimento da chave de criptografia',\n            );\n          }\n        }\n      } else {\n        this.masterKey = crypto.randomBytes(this.keyLength);\n        fs.writeFileSync(this.keyPath, this.masterKey, { mode: 0o600 });\n        this.logger.log('Nova chave de criptografia gerada e salva');\n\n        // Criar backup da chave se o monitor estiver disponível\n        if (this.chaveMonitorService) {\n          this.chaveMonitorService.criarBackup();\n        }\n      }\n    }\n  }\n\n  /**\n   * Criptografa um buffer de dados\n   * @param data Buffer a ser criptografado\n   * @returns Objeto com dados criptografados, IV e tag de autenticação\n   */\n  criptografarBuffer(data: Buffer): {\n    dadosCriptografados: Buffer;\n    iv: Buffer;\n    authTag: Buffer;\n  } {\n    // Gerar IV (Initialization Vector) aleatório\n    const iv = crypto.randomBytes(this.ivLength);\n\n    // Criar cipher com algoritmo, chave e IV\n    const cipher = crypto.createCipheriv(this.algorithm, this.masterKey, iv, {\n      authTagLength: this.authTagLength,\n    });\n\n    // Criptografar dados\n    const dadosCriptografados = Buffer.concat([\n      cipher.update(data),\n      cipher.final(),\n    ]);\n\n    // Obter tag de autenticação\n    const authTag = cipher.getAuthTag();\n\n    return { dadosCriptografados, iv, authTag };\n  }\n\n  /**\n   * Descriptografa um buffer de dados\n   * @param dadosCriptografados Buffer criptografado\n   * @param iv Initialization Vector usado na criptografia\n   * @param authTag Tag de autenticação para verificar integridade\n   * @returns Buffer descriptografado\n   */\n  descriptografarBuffer(\n    dadosCriptografados: Buffer,\n    iv: Buffer,\n    authTag: Buffer,\n  ): Buffer {\n    try {\n      // Criar decipher com algoritmo, chave e IV\n      const decipher = crypto.createDecipheriv(\n        this.algorithm,\n        this.masterKey,\n        iv,\n        {\n          authTagLength: this.authTagLength,\n        },\n      );\n\n      // Definir tag de autenticação para verificação\n      decipher.setAuthTag(authTag);\n\n      // Descriptografar dados\n      const dadosDescriptografados = Buffer.concat([\n        decipher.update(dadosCriptografados),\n        decipher.final(),\n      ]);\n\n      return dadosDescriptografados;\n    } catch (error) {\n      this.logger.error(`Erro ao descriptografar dados: ${error.message}`);\n      throw new Error(\n        'Falha na descriptografia. Os dados podem ter sido corrompidos ou adulterados.',\n      );\n    }\n  }\n\n  /**\n   * Criptografa um arquivo\n   * @param caminhoArquivo Caminho do arquivo a ser criptografado\n   * @param caminhoDestino Caminho onde o arquivo criptografado será salvo\n   * @returns Metadados de criptografia (IV e tag de autenticação)\n   */\n  criptografarArquivo(\n    caminhoArquivo: string,\n    caminhoDestino: string,\n  ): {\n    iv: string;\n    authTag: string;\n  } {\n    // Ler arquivo\n    const dados = fs.readFileSync(caminhoArquivo);\n\n    // Criptografar dados\n    const { dadosCriptografados, iv, authTag } = this.criptografarBuffer(dados);\n\n    // Salvar arquivo criptografado\n    fs.writeFileSync(caminhoDestino, dadosCriptografados);\n\n    // Retornar metadados de criptografia em formato base64\n    return {\n      iv: iv.toString('base64'),\n      authTag: authTag.toString('base64'),\n    };\n  }\n\n  /**\n   * Descriptografa um arquivo\n   * @param caminhoArquivo Caminho do arquivo criptografado\n   * @param caminhoDestino Caminho onde o arquivo descriptografado será salvo\n   * @param iv Initialization Vector em formato base64\n   * @param authTag Tag de autenticação em formato base64\n   */\n  descriptografarArquivo(\n    caminhoArquivo: string,\n    caminhoDestino: string,\n    iv: string,\n    authTag: string,\n  ): void {\n    // Ler arquivo criptografado\n    const dadosCriptografados = fs.readFileSync(caminhoArquivo);\n\n    // Converter IV e authTag de base64 para Buffer\n    const ivBuffer = Buffer.from(iv, 'base64');\n    const authTagBuffer = Buffer.from(authTag, 'base64');\n\n    // Descriptografar dados\n    const dadosDescriptografados = this.descriptografarBuffer(\n      dadosCriptografados,\n      ivBuffer,\n      authTagBuffer,\n    );\n\n    // Salvar arquivo descriptografado\n    fs.writeFileSync(caminhoDestino, dadosDescriptografados);\n  }\n\n  /**\n   * Criptografa um buffer e retorna um único buffer contendo\n   * todos os dados necessários para descriptografia\n   * @param data Buffer a ser criptografado\n   * @returns Buffer contendo IV, authTag e dados criptografados\n   */\n  criptografarParaTransporte(data: Buffer): Buffer {\n    // Criptografar dados\n    const { dadosCriptografados, iv, authTag } = this.criptografarBuffer(data);\n\n    // Criar buffer com formato: [IV_LENGTH(2)][IV(16)][AUTH_TAG_LENGTH(2)][AUTH_TAG(16)][ENCRYPTED_DATA]\n    const resultado = Buffer.alloc(\n      4 + iv.length + authTag.length + dadosCriptografados.length,\n    );\n\n    // Escrever tamanho do IV (2 bytes)\n    resultado.writeUInt16BE(iv.length, 0);\n\n    // Escrever IV\n    iv.copy(resultado, 2);\n\n    // Escrever tamanho da tag de autenticação (2 bytes)\n    resultado.writeUInt16BE(authTag.length, 2 + iv.length);\n\n    // Escrever tag de autenticação\n    authTag.copy(resultado, 4 + iv.length);\n\n    // Escrever dados criptografados\n    dadosCriptografados.copy(resultado, 4 + iv.length + authTag.length);\n\n    return resultado;\n  }\n\n  /**\n   * Descriptografa um buffer que foi criptografado com criptografarParaTransporte\n   * @param data Buffer contendo IV, authTag e dados criptografados\n   * @returns Buffer descriptografado\n   */\n  descriptografarDeTransporte(data: Buffer): Buffer {\n    // Ler tamanho do IV (2 bytes)\n    const ivLength = data.readUInt16BE(0);\n\n    // Ler IV\n    const iv = data.slice(2, 2 + ivLength);\n\n    // Ler tamanho da tag de autenticação (2 bytes)\n    const authTagLength = data.readUInt16BE(2 + ivLength);\n\n    // Ler tag de autenticação\n    const authTag = data.slice(4 + ivLength, 4 + ivLength + authTagLength);\n\n    // Ler dados criptografados\n    const dadosCriptografados = data.slice(4 + ivLength + authTagLength);\n\n    // Descriptografar dados\n    return this.descriptografarBuffer(dadosCriptografados, iv, authTag);\n  }\n\n  /**\n   * Gera um hash SHA-256 de um buffer\n   * @param data Buffer para calcular o hash\n   * @returns Hash SHA-256 em formato hexadecimal\n   */\n  gerarHash(data: Buffer): string {\n    return crypto.createHash('sha256').update(data).digest('hex');\n  }\n\n  /**\n   * Verifica se um buffer corresponde a um hash SHA-256\n   * @param data Buffer para verificar\n   * @param hash Hash SHA-256 em formato hexadecimal\n   * @returns true se o hash corresponder, false caso contrário\n   */\n  verificarHash(data: Buffer, hash: string): boolean {\n    const calculatedHash = this.gerarHash(data);\n    return calculatedHash === hash;\n  }\n\n  /**\n   * Verifica se um tipo de documento deve ser criptografado\n   * @param tipoDocumento Tipo de documento\n   * @returns true se o documento deve ser criptografado, false caso contrário\n   */\n  deveSerCriptografado(tipoDocumento: string): boolean {\n    return this.tiposSensiveis.includes(tipoDocumento);\n  }\n\n  /**\n   * Converte o formato dos dados criptografados para compatibilidade com a implementação anterior\n   * @param resultado Resultado da criptografia no formato do serviço compartilhado\n   * @returns Resultado formatado no estilo do serviço específico de documento\n   */\n  formatarParaLegado(resultado: {\n    dadosCriptografados: Buffer;\n    iv: Buffer;\n    authTag: Buffer;\n  }): {\n    bufferCriptografado: Buffer;\n    iv: string;\n    authTag: string;\n  } {\n    return {\n      bufferCriptografado: resultado.dadosCriptografados,\n      iv: resultado.iv.toString('hex'),\n      authTag: resultado.authTag.toString('hex'),\n    };\n  }\n\n  /**\n   * Criptografa um buffer (método legado para compatibilidade)\n   * @param buffer Buffer a ser criptografado\n   * @returns Objeto com o buffer criptografado e os metadados necessários para descriptografia\n   */\n  criptografar(buffer: Buffer): {\n    bufferCriptografado: Buffer;\n    iv: string;\n    authTag: string;\n  } {\n    try {\n      // Usar o método interno e converter o formato\n      const resultado = this.criptografarBuffer(buffer);\n      return this.formatarParaLegado(resultado);\n    } catch (error) {\n      this.logger.error(`Erro ao criptografar documento: ${error.message}`);\n      throw new Error(`Erro ao criptografar documento: ${error.message}`);\n    }\n  }\n\n  /**\n   * Descriptografa um buffer (método legado para compatibilidade)\n   * @param bufferCriptografado Buffer criptografado\n   * @param iv Vetor de inicialização usado na criptografia (em formato hexadecimal)\n   * @param authTag Tag de autenticação gerada na criptografia (em formato hexadecimal)\n   * @returns Buffer descriptografado\n   */\n  descriptografar(\n    bufferCriptografado: Buffer,\n    iv: string,\n    authTag: string,\n  ): Buffer {\n    try {\n      // Converter IV e authTag de hex para Buffer\n      const ivBuffer = Buffer.from(iv, 'hex');\n      const authTagBuffer = Buffer.from(authTag, 'hex');\n\n      // Usar o método interno para descriptografar\n      return this.descriptografarBuffer(\n        bufferCriptografado,\n        ivBuffer,\n        authTagBuffer,\n      );\n    } catch (error) {\n      this.logger.error(`Erro ao descriptografar documento: ${error.message}`);\n      throw new Error(`Erro ao descriptografar documento: ${error.message}`);\n    }\n  }\n}\n"],"version":3}