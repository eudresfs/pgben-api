6dc1c7a83af18d367fa388f5b5b4253f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthController = void 0;
const common_1 = require("@nestjs/common");
const terminus_1 = require("@nestjs/terminus");
const public_decorator_1 = require("../../auth/decorators/public.decorator");
const swagger_1 = require("@nestjs/swagger");
const health_check_service_1 = require("../services/health-check.service");
// import { StorageHealthService } from '../../modules/documento/services/storage-health.service';
/**
 * Controlador de Health Check
 *
 * Fornece endpoints para verificar a sa√∫de da aplica√ß√£o
 * e seus componentes (banco de dados, mem√≥ria, disco, etc.)
 */
let HealthController = class HealthController {
    health;
    http;
    db;
    memory;
    disk;
    appHealthCheck;
    constructor(health, http, db, memory, disk, appHealthCheck) {
        this.health = health;
        this.http = http;
        this.db = db;
        this.memory = memory;
        this.disk = disk;
        this.appHealthCheck = appHealthCheck;
        console.log('üî• DEBUG: HealthController inicializado');
        console.log('üî• DEBUG: Caminho do controller:', '/health');
    }
    /**
     * Endpoint principal de health check
     * Verifica todos os componentes da aplica√ß√£o
     */
    async check() {
        console.log('üî• HEALTH CONTROLLER: check() foi chamado!');
        // Verificar disponibilidade do Redis
        const isRedisAvailable = await this.appHealthCheck.isRedisAvailable();
        const disableRedis = process.env.DISABLE_REDIS === 'true';
        return this.health.check([
            // Verificar se o banco de dados est√° funcionando
            () => this.db.pingCheck('database'),
            // Verificar se o site oficial est√° acess√≠vel
            () => this.http.pingCheck('site_oficial', 'https://www.natal.rn.gov.br/'),
            // Verificar uso de mem√≥ria
            () => this.memory.checkHeap('memory_heap', 300 * 1024 * 1024), // 300MB
            // Verificar uso de disco
            () => this.disk.checkStorage('disk', {
                path: '/',
                thresholdPercent: 0.9, // 90% de uso m√°ximo
            }),
            // Verificar Redis
            async () => {
                // Usando o formato correto para HealthIndicatorResult
                return {
                    redis: {
                        status: disableRedis ? 'disabled' : (isRedisAvailable ? 'up' : 'down'),
                        message: disableRedis
                            ? 'Redis desabilitado por configura√ß√£o'
                            : (isRedisAvailable ? 'Conex√£o com Redis estabelecida' : 'N√£o foi poss√≠vel conectar ao Redis'),
                    }
                }; // For√ßar tipo compat√≠vel com HealthIndicatorResult
            },
            // Verificar Storage (S3/MinIO) - Temporariamente desabilitado
            // async () => {
            //   const storageStatus = await this.storageHealth.checkHealth();
            //   return {
            //     storage: {
            //       status: storageStatus.isHealthy ? 'up' : 'down',
            //       provider: storageStatus.provider,
            //       message: storageStatus.details.error || 'OK',
            //       details: storageStatus.details,
            //       lastChecked: storageStatus.timestamp,
            //     }
            //   } as unknown as Record<string, any>;
            // },
        ]);
    }
    /**
     * Endpoint simplificado para verifica√ß√µes r√°pidas
     * Retorna apenas status OK se a aplica√ß√£o estiver funcionando
     */
    ping() {
        console.log('üî• HEALTH CONTROLLER: ping() foi chamado!');
        return {
            status: 'ok',
            timestamp: new Date().toISOString(),
            service: 'pgben-api',
            version: process.env.npm_package_version || '1.0.0',
        };
    }
    /**
     * Verifica apenas o banco de dados
     */
    checkDatabase() {
        return this.health.check([() => this.db.pingCheck('database')]);
    }
    /**
     * Verifica uso de recursos do sistema
     */
    checkSystem() {
        return this.health.check([
            () => this.memory.checkHeap('memory_heap', 300 * 1024 * 1024),
            () => this.memory.checkRSS('memory_rss', 300 * 1024 * 1024),
            () => this.disk.checkStorage('disk', {
                path: '/',
                thresholdPercent: 0.9,
            }),
        ]);
    }
    /**
     * Verifica apenas o storage (S3/MinIO) - Temporariamente desabilitado
     */
    // @Get('storage')
    // @Public()
    // async checkStorage() {
    //   const storageStatus = await this.storageHealth.checkHealth();
    //   return {
    //     storage: {
    //       status: storageStatus.isHealthy ? 'up' : 'down',
    //       provider: storageStatus.provider,
    //       message: storageStatus.details.error || 'OK',
    //       details: storageStatus.details,
    //       lastChecked: storageStatus.timestamp,
    //     }
    //   };
    // }
    /**
     * Verifica a disponibilidade do Redis
     */
    async checkRedis() {
        const isRedisAvailable = await this.appHealthCheck.isRedisAvailable();
        const disableRedis = process.env.DISABLE_REDIS === 'true';
        return {
            status: disableRedis ? 'disabled' : (isRedisAvailable ? 'up' : 'down'),
            info: {
                redis: {
                    status: disableRedis ? 'disabled' : (isRedisAvailable ? 'up' : 'down'),
                    message: disableRedis
                        ? 'Redis desabilitado por configura√ß√£o'
                        : (isRedisAvailable ? 'Conex√£o com Redis estabelecida' : 'N√£o foi poss√≠vel conectar ao Redis'),
                },
            },
        };
    }
};
exports.HealthController = HealthController;
__decorate([
    (0, common_1.Get)(),
    (0, public_decorator_1.Public)(),
    (0, terminus_1.HealthCheck)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], HealthController.prototype, "check", null);
__decorate([
    (0, common_1.Get)('ping'),
    (0, public_decorator_1.Public)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HealthController.prototype, "ping", null);
__decorate([
    (0, common_1.Get)('db'),
    (0, public_decorator_1.Public)(),
    (0, terminus_1.HealthCheck)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HealthController.prototype, "checkDatabase", null);
__decorate([
    (0, common_1.Get)('system'),
    (0, public_decorator_1.Public)(),
    (0, terminus_1.HealthCheck)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HealthController.prototype, "checkSystem", null);
__decorate([
    (0, common_1.Get)('redis'),
    (0, public_decorator_1.Public)(),
    (0, terminus_1.HealthCheck)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], HealthController.prototype, "checkRedis", null);
exports.HealthController = HealthController = __decorate([
    (0, swagger_1.ApiTags)('M√©tricas e Dashboard'),
    (0, common_1.Controller)({ path: 'health', version: '1' }),
    __metadata("design:paramtypes", [typeof (_a = typeof terminus_1.HealthCheckService !== "undefined" && terminus_1.HealthCheckService) === "function" ? _a : Object, typeof (_b = typeof terminus_1.HttpHealthIndicator !== "undefined" && terminus_1.HttpHealthIndicator) === "function" ? _b : Object, typeof (_c = typeof terminus_1.TypeOrmHealthIndicator !== "undefined" && terminus_1.TypeOrmHealthIndicator) === "function" ? _c : Object, typeof (_d = typeof terminus_1.MemoryHealthIndicator !== "undefined" && terminus_1.MemoryHealthIndicator) === "function" ? _d : Object, typeof (_e = typeof terminus_1.DiskHealthIndicator !== "undefined" && terminus_1.DiskHealthIndicator) === "function" ? _e : Object, typeof (_f = typeof health_check_service_1.HealthCheckService !== "undefined" && health_check_service_1.HealthCheckService) === "function" ? _f : Object])
], HealthController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,