ed1e388063c518aeddcc8e59d882719c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AuthService_1;
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const jwt_1 = require("@nestjs/jwt");
const class_transformer_1 = require("class-transformer");
const logger_service_1 = require("../../shared/logger/logger.service");
const usuario_service_1 = require("../../modules/usuario/services/usuario.service");
const auth_token_output_dto_1 = require("../dtos/auth-token-output.dto");
const usuario_adapter_1 = require("../adapters/usuario-adapter");
const refresh_token_service_1 = require("./refresh-token.service");
const permission_service_1 = require("./permission.service");
let AuthService = AuthService_1 = class AuthService {
    usuarioService;
    refreshTokenService;
    jwtService;
    configService;
    logger;
    permissionService;
    // Valores padrão no formato semântico
    DEFAULT_ACCESS_TOKEN_EXPIRES_IN = '1h';
    DEFAULT_REFRESH_TOKEN_EXPIRES_IN = '7d';
    /**
     * Gera um JTI (JWT ID) único
     * @returns string - JTI único
     */
    generateJti() {
        // Combinar timestamp, número aleatório e hash para garantir unicidade
        const timestamp = Date.now().toString(36);
        const randomPart = Math.random().toString(36).substring(2, 15);
        return `${timestamp}-${randomPart}`;
    }
    constructor(usuarioService, refreshTokenService, jwtService, configService, logger, permissionService) {
        this.usuarioService = usuarioService;
        this.refreshTokenService = refreshTokenService;
        this.jwtService = jwtService;
        this.configService = configService;
        this.logger = logger;
        this.permissionService = permissionService;
        this.logger.setContext(AuthService_1.name);
        // Log das configurações de token
        const accessTokenExpiresIn = this.getAccessTokenExpiresIn();
        const refreshTokenExpiresIn = this.getRefreshTokenExpiresIn();
        this.logger.log({}, `Configuração de tokens - Access Token: ${accessTokenExpiresIn}, ` +
            `Refresh Token: ${refreshTokenExpiresIn} ` +
            `(em segundos: ${this.timeToSeconds(refreshTokenExpiresIn)})`);
        // Debug das variáveis de ambiente
        console.log('JWT_REFRESH_TOKEN_EXPIRES_IN:', this.configService.get('JWT_REFRESH_TOKEN_EXPIRES_IN', 'não definido'));
        console.log('JWT_ACCESS_TOKEN_EXPIRES_IN:', this.configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN', 'não definido'));
    }
    /**
     * Obtém o tempo de expiração do access token no formato semântico (1h, 7d, etc)
     */
    getAccessTokenExpiresIn() {
        return this.configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN', this.DEFAULT_ACCESS_TOKEN_EXPIRES_IN);
    }
    /**
     * Obtém o tempo de expiração do refresh token no formato semântico (1h, 7d, etc)
     */
    getRefreshTokenExpiresIn() {
        return this.configService.get('JWT_REFRESH_TOKEN_EXPIRES_IN', this.DEFAULT_REFRESH_TOKEN_EXPIRES_IN);
    }
    /**
     * Converte uma string de tempo no formato semântico (1h, 7d, etc) para segundos
     */
    timeToSeconds(timeString) {
        // Se for apenas um número, considera como segundos
        if (/^\d+$/.test(timeString)) {
            return parseInt(timeString, 10);
        }
        // Se for no formato número+unidade (ex: 7d, 24h, etc)
        const match = timeString.match(/^(\d+)([smhdw])$/);
        if (match) {
            const value = parseInt(match[1], 10);
            const unit = match[2];
            switch (unit) {
                case 's':
                    return value; // segundos
                case 'm':
                    return value * 60; // minutos
                case 'h':
                    return value * 60 * 60; // horas
                case 'd':
                    return value * 24 * 60 * 60; // dias
                case 'w':
                    return value * 7 * 24 * 60 * 60; // semanas
                default:
                    return 86400; // padrão: 1 dia
            }
        }
        // Fallback para valores que não conseguimos interpretar
        this.logger.warn({}, `Não foi possível interpretar o formato de tempo: ${timeString}, usando 1 dia como padrão`);
        return 86400; // 1 dia em segundos
    }
    async validateUser(ctx, username, pass) {
        this.logger.log(ctx, `${this.validateUser.name} foi chamado`);
        // Buscar usuário pelo email (username)
        const usuario = await this.usuarioService.findByEmail(username);
        if (!usuario) {
            throw new common_1.UnauthorizedException('Nome de usuário ou senha inválidos');
        }
        // Verificar se a senha está correta
        const senhaCorreta = await require('bcrypt').compare(pass, usuario.senhaHash);
        if (!senhaCorreta) {
            throw new common_1.UnauthorizedException('Nome de usuário ou senha inválidos');
        }
        // Verificar se o usuário está ativo
        if (usuario.status === 'inativo') {
            throw new common_1.UnauthorizedException('Esta conta de usuário foi desativada');
        }
        // Obter as permissões do usuário
        const permissions = await this.permissionService.getUserPermissions(usuario.id);
        // Obter os escopos das permissões
        const permissionScopes = {};
        // Converter para o formato esperado incluindo permissões
        return usuario_adapter_1.UsuarioAdapter.toUserAccessTokenClaims(usuario, permissions, permissionScopes);
    }
    async login(ctx) {
        this.logger.log(ctx, `${this.login.name} foi chamado`);
        // Obter o token de autenticação
        const tokens = this.getAuthToken(ctx, ctx.user);
        // Criar e salvar o refresh token
        const usuario = await this.usuarioService.findById(ctx.user.id);
        if (!usuario) {
            throw new common_1.UnauthorizedException('Usuário não encontrado');
        }
        // Obter o tempo de expiração
        const refreshTokenExpiresIn = this.getRefreshTokenExpiresIn();
        const refreshTokenSeconds = this.timeToSeconds(refreshTokenExpiresIn);
        this.logger.log(ctx, `Criando refresh token com duração de ${refreshTokenExpiresIn} (${refreshTokenSeconds} segundos)`);
        const refreshToken = await this.refreshTokenService.createToken(usuario, refreshTokenSeconds);
        return {
            ...tokens,
            refreshToken: refreshToken.token,
        };
    }
    async refreshToken(ctx, refreshTokenInput) {
        this.logger.log(ctx, `${this.refreshToken.name} foi chamado`);
        // Encontrar o token de refresh
        const refreshToken = await this.refreshTokenService.findToken(refreshTokenInput.refreshToken);
        // Verificar se o token existe e não foi revogado
        if (!refreshToken || refreshToken.revoked) {
            throw new common_1.UnauthorizedException('Token de refresh inválido');
        }
        // Verificar se o token expirou
        if (new Date() > refreshToken.expires_at) {
            throw new common_1.UnauthorizedException('Token de refresh expirado');
        }
        // Revogar apenas o token de refresh atual
        // Não adicionamos o access token à blacklist, pois isso causaria problemas
        // com requisições subsequentes
        const ipAddress = ctx.req?.ip || '0.0.0.0';
        await this.refreshTokenService.revokeToken(refreshToken.token, ipAddress);
        // Não revogar tokens descendentes para evitar problemas com a blacklist
        // await this.refreshTokenService.revokeDescendantTokens(
        //   refreshToken,
        //   ipAddress,
        // );
        // Obter o usuário
        const usuario = await this.usuarioService.findById(refreshToken.usuario.id);
        if (!usuario) {
            throw new common_1.UnauthorizedException('Usuário não encontrado');
        }
        // Gerar novos tokens
        const userOutput = usuario_adapter_1.UsuarioAdapter.toUserOutput(usuario);
        const tokens = this.getAuthToken(ctx, userOutput);
        // Obter o tempo de expiração
        const refreshTokenExpiresIn = this.getRefreshTokenExpiresIn();
        const refreshTokenSeconds = this.timeToSeconds(refreshTokenExpiresIn);
        this.logger.log(ctx, `Criando novo refresh token com duração de ${refreshTokenExpiresIn} (${refreshTokenSeconds} segundos)`);
        const newRefreshToken = await this.refreshTokenService.createToken(usuario, refreshTokenSeconds);
        return {
            ...tokens,
            refreshToken: newRefreshToken.token,
        };
    }
    getAuthToken(ctx, user) {
        this.logger.log(ctx, `${this.getAuthToken.name} was called`);
        // Gerar um JTI (JWT ID) único para cada token
        const jti = this.generateJti();
        const subject = { sub: user.id };
        const payload = {
            username: user.username,
            sub: user.id,
            roles: user.roles,
        };
        // Adicionar permissões ao payload se disponíveis
        if ('permissions' in user && user.permissions) {
            payload['permissions'] = user.permissions;
        }
        // Adicionar escopos de permissões ao payload se disponíveis
        if ('permissionScopes' in user && user.permissionScopes) {
            payload['permissionScopes'] = user.permissionScopes;
        }
        // Garantir que estamos usando o algoritmo RS256 e a chave privada para assinar o token
        const privateKey = Buffer.from(this.configService.get('JWT_PRIVATE_KEY_BASE64', ''), 'base64').toString('utf8');
        // Obter valores de expiração no formato semântico
        const accessTokenExpiresIn = this.getAccessTokenExpiresIn();
        const refreshTokenExpiresIn = this.getRefreshTokenExpiresIn();
        this.logger.log(ctx, `Gerando tokens - Access token expira em: ${accessTokenExpiresIn}, Refresh token expira em: ${refreshTokenExpiresIn}`);
        const accessToken = this.jwtService.sign({
            ...payload,
            ...subject,
        }, {
            secret: privateKey,
            algorithm: 'RS256',
            expiresIn: accessTokenExpiresIn,
            jwtid: jti,
        });
        // Para o refreshToken, usamos o mesmo JwtService, mas com opções diferentes de expiração
        // Gerar um JTI diferente para o refresh token
        const refreshJti = this.generateJti();
        const refreshTokenJwt = this.jwtService.sign({
            ...subject,
        }, {
            secret: privateKey,
            algorithm: 'RS256',
            expiresIn: refreshTokenExpiresIn,
            jwtid: refreshJti,
        });
        const authToken = {
            accessToken,
            refreshToken: refreshTokenJwt,
        };
        return (0, class_transformer_1.plainToClass)(auth_token_output_dto_1.AuthTokenOutput, authToken, {
            excludeExtraneousValues: true,
        });
    }
};
exports.AuthService = AuthService;
exports.AuthService = AuthService = AuthService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof usuario_service_1.UsuarioService !== "undefined" && usuario_service_1.UsuarioService) === "function" ? _a : Object, typeof (_b = typeof refresh_token_service_1.RefreshTokenService !== "undefined" && refresh_token_service_1.RefreshTokenService) === "function" ? _b : Object, typeof (_c = typeof jwt_1.JwtService !== "undefined" && jwt_1.JwtService) === "function" ? _c : Object, typeof (_d = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _d : Object, typeof (_e = typeof logger_service_1.AppLogger !== "undefined" && logger_service_1.AppLogger) === "function" ? _e : Object, typeof (_f = typeof permission_service_1.PermissionService !== "undefined" && permission_service_1.PermissionService) === "function" ? _f : Object])
], AuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,