{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\enhanced-metrics.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\enhanced-metrics.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { EnhancedMetricsService } from '../enhanced-metrics.service';\nimport * as client from 'prom-client';\n\n/**\n * Testes unitários para o serviço de métricas aprimorado\n *\n * Verifica o funcionamento dos métodos de coleta e exposição de métricas\n * avançadas da aplicação usando Prometheus, com foco em segurança e compliance LGPD\n */\ndescribe('EnhancedMetricsService', () => {\n  let service: EnhancedMetricsService;\n\n  // Mocks para os contadores e medidores do Prometheus\n  const mockCounter = {\n    inc: jest.fn(),\n  };\n\n  const mockGauge = {\n    inc: jest.fn(),\n    dec: jest.fn(),\n    set: jest.fn(),\n  };\n\n  const mockHistogram = {\n    observe: jest.fn(),\n  };\n\n  const mockRegistry = {\n    metrics: jest.fn().mockResolvedValue('enhanced_metrics_data'),\n    registerMetric: jest.fn(),\n    clear: jest.fn(),\n  };\n\n  // Mock das classes do Prometheus\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    // Mock das funções do prom-client\n    jest.spyOn(client, 'Counter').mockImplementation((config: any) => {\n      return {\n        ...mockCounter,\n        ...config,\n        inc: jest.fn().mockImplementation((labels) => {\n          return mockCounter.inc(labels);\n        }),\n      };\n    });\n\n    jest.spyOn(client, 'Gauge').mockImplementation((config: any) => {\n      return {\n        ...mockGauge,\n        ...config,\n        inc: jest.fn().mockImplementation((labels, value) => {\n          return mockGauge.inc(labels, value);\n        }),\n        dec: jest.fn().mockImplementation((labels, value) => {\n          return mockGauge.dec(labels, value);\n        }),\n        set: jest.fn().mockImplementation((labels, value) => {\n          return mockGauge.set(labels, value);\n        }),\n      };\n    });\n\n    jest.spyOn(client, 'Histogram').mockImplementation((config: any) => {\n      return {\n        ...mockHistogram,\n        ...config,\n        observe: jest.fn().mockImplementation((labels, value) => {\n          return mockHistogram.observe(labels, value);\n        }),\n      };\n    });\n\n    // Mock do Registry com todos os métodos necessários\n    const mockRegistryInstance = {\n      ...mockRegistry,\n      metrics: jest.fn().mockResolvedValue('metrics_data'),\n      registerMetric: jest.fn(),\n      clear: jest.fn(),\n      resetMetrics: jest.fn(),\n      getMetricsAsJSON: jest.fn().mockResolvedValue([]),\n      getMetricsAsArray: jest.fn().mockReturnValue([]),\n      removeSingleMetric: jest.fn(),\n      getSingleMetric: jest.fn().mockReturnValue(null),\n      getSingleMetricAsString: jest.fn().mockResolvedValue(''),\n      contentType: 'text/plain; version=0.0.4; charset=utf-8',\n    } as unknown as client.Registry;\n\n    jest\n      .spyOn(client, 'Registry')\n      .mockImplementation(() => mockRegistryInstance);\n\n    jest.spyOn(client, 'collectDefaultMetrics').mockImplementation(() => ({}));\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [EnhancedMetricsService],\n    }).compile();\n\n    service = module.get<EnhancedMetricsService>(EnhancedMetricsService);\n\n    // Mock para process.memoryUsage\n    (process as any).memoryUsage = jest.fn().mockReturnValue({\n      rss: 1024 * 1024 * 100, // 100MB\n      heapTotal: 1024 * 1024 * 50, // 50MB\n      heapUsed: 1024 * 1024 * 30, // 30MB\n      external: 1024 * 1024 * 10, // 10MB\n      arrayBuffers: 1024 * 1024 * 5, // 5MB\n    });\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('constructor', () => {\n    it('deve inicializar o registro e as métricas padrão', () => {\n      expect(client.Registry).toHaveBeenCalled();\n      expect(client.collectDefaultMetrics).toHaveBeenCalled();\n\n      // Verificar se os contadores e medidores foram criados com os parâmetros corretos\n      expect(client.Counter).toHaveBeenCalled();\n      expect(client.Histogram).toHaveBeenCalled();\n      expect(client.Gauge).toHaveBeenCalled();\n    });\n  });\n\n  describe('Métricas HTTP', () => {\n    it('deve registrar uma requisição HTTP', () => {\n      service.recordHttpRequest('GET', '/api/cidadaos', 200, 'admin');\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        method: 'GET',\n        route: '/api/cidadaos',\n        status_code: '200',\n        user_role: 'admin',\n      });\n    });\n\n    it('deve registrar uma requisição HTTP com usuário anônimo', () => {\n      service.recordHttpRequest('GET', '/api/public', 200);\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        method: 'GET',\n        route: '/api/public',\n        status_code: '200',\n        user_role: 'anonymous',\n      });\n    });\n\n    it('deve registrar a duração de uma requisição HTTP', () => {\n      service.recordHttpRequestDuration(\n        'POST',\n        '/api/cidadaos',\n        201,\n        0.5,\n        'admin',\n      );\n\n      expect(mockHistogram.observe).toHaveBeenCalledWith(\n        {\n          method: 'POST',\n          route: '/api/cidadaos',\n          status_code: '201',\n          user_role: 'admin',\n        },\n        0.5,\n      );\n    });\n\n    it('deve gerenciar contadores de requisições em andamento', () => {\n      service.incrementHttpRequestsInProgress('GET', '/api/cidadaos', 'admin');\n      expect(mockGauge.inc).toHaveBeenCalledWith({\n        method: 'GET',\n        route: '/api/cidadaos',\n        user_role: 'admin',\n      });\n\n      service.decrementHttpRequestsInProgress('GET', '/api/cidadaos', 'admin');\n      expect(mockGauge.dec).toHaveBeenCalledWith({\n        method: 'GET',\n        route: '/api/cidadaos',\n        user_role: 'admin',\n      });\n    });\n  });\n\n  describe('Métricas de Banco de Dados', () => {\n    it('deve registrar uma consulta ao banco de dados', () => {\n      service.recordDatabaseQuery('Usuario', 'SELECT', true);\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        entity: 'Usuario',\n        operation: 'SELECT',\n        success: 'true',\n      });\n    });\n\n    it('deve registrar a duração de uma consulta ao banco de dados', () => {\n      service.recordDatabaseQueryDuration('Usuario', 'SELECT', 0.1);\n\n      expect(mockHistogram.observe).toHaveBeenCalledWith(\n        { entity: 'Usuario', operation: 'SELECT' },\n        0.1,\n      );\n    });\n\n    it('deve atualizar o número de conexões ativas com o banco de dados', () => {\n      service.setDatabaseConnectionsActive(5);\n\n      expect(mockGauge.set).toHaveBeenCalledWith(5);\n    });\n  });\n\n  describe('Métricas de Segurança', () => {\n    it('deve registrar um evento de segurança', () => {\n      service.recordSecurityEvent('login_failed', 'warning', 'auth');\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        type: 'login_failed',\n        severity: 'warning',\n        source: 'auth',\n      });\n    });\n\n    it('deve registrar uma tentativa de autenticação', () => {\n      service.recordAuthenticationAttempt(true, 'local', '192.168.1.1');\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        success: 'true',\n        method: 'local',\n        ip_address: '192.168.1.1',\n      });\n    });\n\n    it('deve registrar uma falha de autorização', () => {\n      service.recordAuthorizationFailure('/api/admin', 'admin', 'user');\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        resource: '/api/admin',\n        required_role: 'admin',\n        user_role: 'user',\n      });\n    });\n\n    it('deve registrar um acesso a dados protegidos pela LGPD', () => {\n      service.recordLgpdDataAccess('dados_pessoais', 'leitura', true, 'admin');\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        data_type: 'dados_pessoais',\n        operation: 'leitura',\n        authorized: 'true',\n        user_role: 'admin',\n      });\n    });\n\n    it('deve registrar uma tentativa de autenticação', () => {\n      service.recordAuthenticationAttempt(true, 'local', '192.168.1.1');\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        success: 'true',\n        method: 'local',\n        ip_address: '192.168.1.1',\n      });\n    });\n\n    it('deve registrar uma falha de autorização', () => {\n      service.recordAuthorizationFailure('/api/admin', 'admin', 'user');\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        resource: '/api/admin',\n        required_role: 'admin',\n        user_role: 'user',\n      });\n    });\n  });\n\n  describe('Métricas de Documentos', () => {\n    it('deve registrar uma operação com documento', () => {\n      service.recordDocumentOperation('upload', 'pdf', true, true);\n\n      expect(mockCounter.inc).toHaveBeenCalledWith({\n        operation: 'upload',\n        document_type: 'pdf',\n        sensitive: 'true',\n        encrypted: 'true',\n      });\n    });\n\n    it('deve registrar o tamanho do armazenamento de documentos', () => {\n      service.setDocumentStorageBytes(1024, 'pdf', true);\n\n      expect(mockGauge.set).toHaveBeenCalledWith(\n        { document_type: 'pdf', sensitive: 'true' },\n        1024,\n      );\n    });\n\n    it('deve atualizar o tamanho total de armazenamento de documentos', () => {\n      service.setDocumentStorageBytes(1024, 'pdf', true);\n\n      expect(mockGauge.set).toHaveBeenCalledWith(\n        { document_type: 'pdf', sensitive: 'true' },\n        1024,\n      );\n    });\n\n    it('deve registrar a duração de um upload de documento', () => {\n      service.recordDocumentUploadDuration('pdf', true, true, 2.5);\n\n      expect(mockHistogram.observe).toHaveBeenCalledWith(\n        {\n          document_type: 'pdf',\n          sensitive: 'true',\n          encrypted: 'true',\n        },\n        2.5,\n      );\n    });\n\n    it('deve registrar a duração de um download de documento', () => {\n      service.recordDocumentDownloadDuration('pdf', true, true, 1.2);\n\n      expect(mockHistogram.observe).toHaveBeenCalledWith(\n        {\n          document_type: 'pdf',\n          sensitive: 'true',\n          encrypted: 'true',\n        },\n        1.2,\n      );\n    });\n  });\n\n  describe('Métricas de Sistema', () => {\n    it('deve atualizar as métricas de uso de memória', () => {\n      service.updateMemoryUsage();\n\n      expect(mockGauge.set).toHaveBeenCalledWith(\n        { type: 'rss' },\n        1024 * 1024 * 100,\n      );\n      expect(mockGauge.set).toHaveBeenCalledWith(\n        { type: 'heapTotal' },\n        1024 * 1024 * 50,\n      );\n      expect(mockGauge.set).toHaveBeenCalledWith(\n        { type: 'heapUsed' },\n        1024 * 1024 * 30,\n      );\n      expect(mockGauge.set).toHaveBeenCalledWith(\n        { type: 'external' },\n        1024 * 1024 * 10,\n      );\n      expect(mockGauge.set).toHaveBeenCalledWith(\n        { type: 'arrayBuffers' },\n        1024 * 1024 * 5,\n      );\n    });\n\n    it('deve lidar com a ausência de arrayBuffers no memoryUsage', () => {\n      // Mock para process.memoryUsage sem arrayBuffers\n      (process as any).memoryUsage = jest.fn().mockReturnValue({\n        rss: 1024 * 1024 * 100,\n        heapTotal: 1024 * 1024 * 50,\n        heapUsed: 1024 * 1024 * 30,\n        external: 1024 * 1024 * 10,\n      });\n\n      service.updateMemoryUsage();\n\n      // Verifica se não tentou definir arrayBuffers\n      const arrayBuffersCalls = mockGauge.set.mock.calls.filter(\n        (call: any) => call[0].type === 'arrayBuffers',\n      );\n      expect(arrayBuffersCalls.length).toBe(0);\n    });\n\n    it('deve atualizar a métrica de uso de CPU', () => {\n      service.updateCpuUsage(75.5);\n\n      expect(mockGauge.set).toHaveBeenCalledWith(75.5);\n    });\n  });\n\n  describe('getMetrics', () => {\n    it('deve retornar as métricas coletadas', async () => {\n      const result = await service.getMetrics();\n\n      expect(result).toBe('enhanced_metrics_data');\n      expect(mockRegistry.metrics).toHaveBeenCalled();\n    });\n  });\n\n  describe('getRegister', () => {\n    it('deve retornar o registro de métricas', () => {\n      const result = service.getRegister();\n\n      expect(result).toBe(mockRegistry);\n    });\n  });\n});\n"],"version":3}