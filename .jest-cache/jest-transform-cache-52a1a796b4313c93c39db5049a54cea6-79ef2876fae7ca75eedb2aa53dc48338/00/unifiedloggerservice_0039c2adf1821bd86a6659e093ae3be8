7f2132294ec0937842ed46451bbc5927
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var UnifiedLoggerService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnifiedLoggerService = void 0;
const common_1 = require("@nestjs/common");
const winston_1 = require("winston");
const nest_winston_1 = require("nest-winston");
const winston_config_1 = require("./winston.config");
/**
 * Serviço de Logging Unificado
 *
 * Unifica as funcionalidades do AppLogger e LoggingService em um único
 * serviço de logging consistente e flexível.
 *
 * Mantém compatibilidade total com código existente e fornece recursos adicionais
 * para logging contextualizado, estruturado e com melhor performance.
 *
 * Características:
 * - Compatibilidade total com AppLogger e LoggingService
 * - Logging estruturado com Winston
 * - Contexto automático e manual
 * - Formatação consistente de timestamps
 * - Suporte a metadados extensíveis
 */
let UnifiedLoggerService = UnifiedLoggerService_1 = class UnifiedLoggerService {
    winstonLogger;
    context;
    logger;
    constructor(winstonLogger) {
        this.winstonLogger = winstonLogger;
        // Usar o logger injetado ou criar um novo com a configuração padrão
        this.logger = this.winstonLogger || (0, winston_1.createLogger)(winston_config_1.winstonConfig);
    }
    /**
     * Define o contexto para todos os logs deste serviço
     * Compatível com AppLogger.setContext()
     */
    setContext(context) {
        this.context = context;
    }
    /**
     * Cria uma nova instância do logger com contexto específico
     * Compatível com outros loggers que usam child()
     */
    child(options) {
        const childLogger = new UnifiedLoggerService_1(this.winstonLogger);
        childLogger.setContext(options.context);
        return childLogger;
    }
    /**
     * Log de nível error
     * Compatível com AppLogger.error() e LoggingService.error()
     */
    error(ctxOrMessage, messageOrMeta, metaOrTrace, extraMeta) {
        const timestamp = new Date().toISOString();
        // Compatibilidade com a API antiga (AppLogger)
        if (typeof ctxOrMessage !== 'string') {
            const ctx = ctxOrMessage;
            const message = messageOrMeta;
            const meta = metaOrTrace;
            return this.logger.error({
                message,
                contextName: this.context,
                ctx,
                timestamp,
                level: 'error',
                ...meta,
            });
        }
        // Nova API (LoggingService)
        const message = ctxOrMessage;
        const context = messageOrMeta || this.context;
        const trace = typeof metaOrTrace === 'string' ? metaOrTrace : undefined;
        const meta = typeof metaOrTrace === 'object' ? metaOrTrace : extraMeta;
        return this.logger.error(message, {
            context,
            trace,
            timestamp,
            level: 'error',
            ...meta,
        });
    }
    /**
     * Log de nível warn
     * Compatível com AppLogger.warn() e LoggingService.warn()
     */
    warn(ctxOrMessage, messageOrMeta, meta) {
        const timestamp = new Date().toISOString();
        // Compatibilidade com a API antiga (AppLogger)
        if (typeof ctxOrMessage !== 'string') {
            const ctx = ctxOrMessage;
            const message = messageOrMeta;
            return this.logger.warn({
                message,
                contextName: this.context,
                ctx,
                timestamp,
                level: 'warn',
                ...meta,
            });
        }
        // Nova API (LoggingService)
        const message = ctxOrMessage;
        const context = messageOrMeta || this.context;
        return this.logger.warn(message, {
            context,
            timestamp,
            level: 'warn',
            ...meta,
        });
    }
    /**
     * Log de nível debug
     * Compatível com AppLogger.debug()
     */
    debug(ctxOrMessage, messageOrMeta, meta) {
        const timestamp = new Date().toISOString();
        // Compatibilidade com a API antiga (AppLogger)
        if (typeof ctxOrMessage !== 'string') {
            const ctx = ctxOrMessage;
            const message = messageOrMeta;
            return this.logger.debug({
                message,
                contextName: this.context,
                ctx,
                timestamp,
                level: 'debug',
                ...meta,
            });
        }
        // Nova API (LoggingService)
        const message = ctxOrMessage;
        const context = messageOrMeta || this.context;
        return this.logger.debug(message, {
            context,
            timestamp,
            level: 'debug',
            ...meta,
        });
    }
    /**
     * Log de nível verbose
     * Compatível com AppLogger.verbose()
     */
    verbose(ctxOrMessage, messageOrMeta, meta) {
        const timestamp = new Date().toISOString();
        // Compatibilidade com a API antiga (AppLogger)
        if (typeof ctxOrMessage !== 'string') {
            const ctx = ctxOrMessage;
            const message = messageOrMeta;
            return this.logger.verbose({
                message,
                contextName: this.context,
                ctx,
                timestamp,
                level: 'verbose',
                ...meta,
            });
        }
        // Nova API (LoggingService)
        const message = ctxOrMessage;
        const context = messageOrMeta || this.context;
        return this.logger.verbose(message, {
            context,
            timestamp,
            level: 'verbose',
            ...meta,
        });
    }
    /**
     * Log de nível info (compatível com AppLogger.log())
     * Compatível com AppLogger.log()
     */
    log(ctxOrMessage, messageOrMeta, meta) {
        const timestamp = new Date().toISOString();
        // Compatibilidade com a API antiga (AppLogger)
        if (typeof ctxOrMessage !== 'string') {
            const ctx = ctxOrMessage;
            const message = messageOrMeta;
            return this.logger.info({
                message,
                contextName: this.context,
                ctx,
                timestamp,
                level: 'info',
                ...meta,
            });
        }
        // Nova API (LoggingService)
        const message = ctxOrMessage;
        const context = messageOrMeta || this.context;
        return this.logger.info(message, {
            context,
            timestamp,
            level: 'info',
            ...meta,
        });
    }
    // Alias para log (compatibilidade com LoggingService)
    info(ctxOrMessage, messageOrMeta, meta) {
        return this.log(ctxOrMessage, messageOrMeta, meta);
    }
    /**
     * Registra uma operação de banco de dados
     */
    logDatabase(operation, entity, duration, query) {
        this.logger.debug(`DB: ${operation} ${entity} - ${duration}ms`, {
            context: 'Database',
            operation,
            entity,
            duration,
            query,
            timestamp: new Date().toISOString(),
        });
    }
    /**
     * Registra uma operação de autenticação
     */
    logAuth(operation, userId, success, ip, userAgent) {
        this.logger.info(`Auth: ${operation} - Usuário: ${userId} - Sucesso: ${success}`, {
            context: 'Authentication',
            operation,
            userId,
            success,
            ip,
            userAgent,
            timestamp: new Date().toISOString(),
        });
    }
    /**
     * Registra uma operação de negócio
     */
    logBusiness(operation, entity, entityId, userId, details) {
        this.logger.info(`Business: ${operation} ${entity} ${entityId} - Usuário: ${userId}`, {
            context: 'Business',
            operation,
            entity,
            entityId,
            userId,
            details,
            timestamp: new Date().toISOString(),
        });
    }
};
exports.UnifiedLoggerService = UnifiedLoggerService;
exports.UnifiedLoggerService = UnifiedLoggerService = UnifiedLoggerService_1 = __decorate([
    (0, common_1.Injectable)({ scope: common_1.Scope.TRANSIENT }),
    __param(0, (0, common_1.Optional)()),
    __param(0, (0, common_1.Inject)(nest_winston_1.WINSTON_MODULE_PROVIDER)),
    __metadata("design:paramtypes", [typeof (_a = typeof winston_1.Logger !== "undefined" && winston_1.Logger) === "function" ? _a : Object])
], UnifiedLoggerService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,