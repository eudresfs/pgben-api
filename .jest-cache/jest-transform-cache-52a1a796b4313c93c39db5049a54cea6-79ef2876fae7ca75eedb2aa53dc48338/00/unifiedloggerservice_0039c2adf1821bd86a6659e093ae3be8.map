{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\unified-logger.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\unified-logger.service.ts"],"sourcesContent":["import { Injectable, Scope, Inject, Optional } from '@nestjs/common';\nimport { Logger, createLogger } from 'winston';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\nimport { RequestContext } from '../request-context/request-context.dto';\nimport { winstonConfig } from './winston.config';\n\n/**\n * Serviço de Logging Unificado\n *\n * Unifica as funcionalidades do AppLogger e LoggingService em um único\n * serviço de logging consistente e flexível.\n *\n * Mantém compatibilidade total com código existente e fornece recursos adicionais\n * para logging contextualizado, estruturado e com melhor performance.\n *\n * Características:\n * - Compatibilidade total com AppLogger e LoggingService\n * - Logging estruturado com Winston\n * - Contexto automático e manual\n * - Formatação consistente de timestamps\n * - Suporte a metadados extensíveis\n */\n@Injectable({ scope: Scope.TRANSIENT })\nexport class UnifiedLoggerService {\n  private context?: string;\n  private logger: Logger;\n\n  constructor(\n    @Optional()\n    @Inject(WINSTON_MODULE_PROVIDER)\n    private readonly winstonLogger?: Logger,\n  ) {\n    // Usar o logger injetado ou criar um novo com a configuração padrão\n    this.logger = this.winstonLogger || createLogger(winstonConfig);\n  }\n\n  /**\n   * Define o contexto para todos os logs deste serviço\n   * Compatível com AppLogger.setContext()\n   */\n  public setContext(context: string): void {\n    this.context = context;\n  }\n\n  /**\n   * Cria uma nova instância do logger com contexto específico\n   * Compatível com outros loggers que usam child()\n   */\n  public child(options: { context: string }): UnifiedLoggerService {\n    const childLogger = new UnifiedLoggerService(this.winstonLogger);\n    childLogger.setContext(options.context);\n    return childLogger;\n  }\n\n  /**\n   * Log de nível error\n   * Compatível com AppLogger.error() e LoggingService.error()\n   */\n  error(\n    ctxOrMessage: RequestContext | string,\n    messageOrMeta?: string | Record<string, any>,\n    metaOrTrace?: Record<string, any> | string,\n    extraMeta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    // Compatibilidade com a API antiga (AppLogger)\n    if (typeof ctxOrMessage !== 'string') {\n      const ctx = ctxOrMessage;\n      const message = messageOrMeta as string;\n      const meta = metaOrTrace as Record<string, any>;\n\n      return this.logger.error({\n        message,\n        contextName: this.context,\n        ctx,\n        timestamp,\n        level: 'error',\n        ...meta,\n      });\n    }\n\n    // Nova API (LoggingService)\n    const message = ctxOrMessage;\n    const context = (messageOrMeta as string) || this.context;\n    const trace = typeof metaOrTrace === 'string' ? metaOrTrace : undefined;\n    const meta = typeof metaOrTrace === 'object' ? metaOrTrace : extraMeta;\n\n    return this.logger.error(message, {\n      context,\n      trace,\n      timestamp,\n      level: 'error',\n      ...meta,\n    });\n  }\n\n  /**\n   * Log de nível warn\n   * Compatível com AppLogger.warn() e LoggingService.warn()\n   */\n  warn(\n    ctxOrMessage: RequestContext | string,\n    messageOrMeta?: string | Record<string, any>,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    // Compatibilidade com a API antiga (AppLogger)\n    if (typeof ctxOrMessage !== 'string') {\n      const ctx = ctxOrMessage;\n      const message = messageOrMeta as string;\n\n      return this.logger.warn({\n        message,\n        contextName: this.context,\n        ctx,\n        timestamp,\n        level: 'warn',\n        ...meta,\n      });\n    }\n\n    // Nova API (LoggingService)\n    const message = ctxOrMessage;\n    const context = (messageOrMeta as string) || this.context;\n\n    return this.logger.warn(message, {\n      context,\n      timestamp,\n      level: 'warn',\n      ...meta,\n    });\n  }\n\n  /**\n   * Log de nível debug\n   * Compatível com AppLogger.debug()\n   */\n  debug(\n    ctxOrMessage: RequestContext | string,\n    messageOrMeta?: string | Record<string, any>,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    // Compatibilidade com a API antiga (AppLogger)\n    if (typeof ctxOrMessage !== 'string') {\n      const ctx = ctxOrMessage;\n      const message = messageOrMeta as string;\n\n      return this.logger.debug({\n        message,\n        contextName: this.context,\n        ctx,\n        timestamp,\n        level: 'debug',\n        ...meta,\n      });\n    }\n\n    // Nova API (LoggingService)\n    const message = ctxOrMessage;\n    const context = (messageOrMeta as string) || this.context;\n\n    return this.logger.debug(message, {\n      context,\n      timestamp,\n      level: 'debug',\n      ...meta,\n    });\n  }\n\n  /**\n   * Log de nível verbose\n   * Compatível com AppLogger.verbose()\n   */\n  verbose(\n    ctxOrMessage: RequestContext | string,\n    messageOrMeta?: string | Record<string, any>,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    // Compatibilidade com a API antiga (AppLogger)\n    if (typeof ctxOrMessage !== 'string') {\n      const ctx = ctxOrMessage;\n      const message = messageOrMeta as string;\n\n      return this.logger.verbose({\n        message,\n        contextName: this.context,\n        ctx,\n        timestamp,\n        level: 'verbose',\n        ...meta,\n      });\n    }\n\n    // Nova API (LoggingService)\n    const message = ctxOrMessage;\n    const context = (messageOrMeta as string) || this.context;\n\n    return this.logger.verbose(message, {\n      context,\n      timestamp,\n      level: 'verbose',\n      ...meta,\n    });\n  }\n\n  /**\n   * Log de nível info (compatível com AppLogger.log())\n   * Compatível com AppLogger.log()\n   */\n  log(\n    ctxOrMessage: RequestContext | string,\n    messageOrMeta?: string | Record<string, any>,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    // Compatibilidade com a API antiga (AppLogger)\n    if (typeof ctxOrMessage !== 'string') {\n      const ctx = ctxOrMessage;\n      const message = messageOrMeta as string;\n\n      return this.logger.info({\n        message,\n        contextName: this.context,\n        ctx,\n        timestamp,\n        level: 'info',\n        ...meta,\n      });\n    }\n\n    // Nova API (LoggingService)\n    const message = ctxOrMessage;\n    const context = (messageOrMeta as string) || this.context;\n\n    return this.logger.info(message, {\n      context,\n      timestamp,\n      level: 'info',\n      ...meta,\n    });\n  }\n\n  // Alias para log (compatibilidade com LoggingService)\n  info(\n    ctxOrMessage: RequestContext | string,\n    messageOrMeta?: string | Record<string, any>,\n    meta?: Record<string, any>,\n  ): Logger {\n    return this.log(ctxOrMessage, messageOrMeta, meta);\n  }\n\n  /**\n   * Registra uma operação de banco de dados\n   */\n  logDatabase(\n    operation: string,\n    entity: string,\n    duration: number,\n    query?: string,\n  ): void {\n    this.logger.debug(`DB: ${operation} ${entity} - ${duration}ms`, {\n      context: 'Database',\n      operation,\n      entity,\n      duration,\n      query,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Registra uma operação de autenticação\n   */\n  logAuth(\n    operation: string,\n    userId: string,\n    success: boolean,\n    ip?: string,\n    userAgent?: string,\n  ): void {\n    this.logger.info(\n      `Auth: ${operation} - Usuário: ${userId} - Sucesso: ${success}`,\n      {\n        context: 'Authentication',\n        operation,\n        userId,\n        success,\n        ip,\n        userAgent,\n        timestamp: new Date().toISOString(),\n      },\n    );\n  }\n\n  /**\n   * Registra uma operação de negócio\n   */\n  logBusiness(\n    operation: string,\n    entity: string,\n    entityId: string,\n    userId: string,\n    details?: Record<string, any>,\n  ): void {\n    this.logger.info(\n      `Business: ${operation} ${entity} ${entityId} - Usuário: ${userId}`,\n      {\n        context: 'Business',\n        operation,\n        entity,\n        entityId,\n        userId,\n        details,\n        timestamp: new Date().toISOString(),\n      },\n    );\n  }\n}\n"],"version":3}