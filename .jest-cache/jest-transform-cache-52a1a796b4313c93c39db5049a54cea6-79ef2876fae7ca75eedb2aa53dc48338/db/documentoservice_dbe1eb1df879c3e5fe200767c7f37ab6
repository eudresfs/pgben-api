bef2810967a87670e001e074aca6dc07
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DocumentoService_1;
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const documento_entity_1 = require("../../../entities/documento.entity");
const input_sanitizer_validator_1 = require("../validators/input-sanitizer.validator");
const storage_provider_factory_1 = require("../factories/storage-provider.factory");
const path_1 = require("path");
const uuid_1 = require("uuid");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
const unified_logger_service_1 = require("../../../shared/logging/unified-logger.service");
const config_1 = require("@nestjs/config");
const mime_validation_service_1 = require("./mime-validation.service");
let DocumentoService = DocumentoService_1 = class DocumentoService {
    documentoRepository;
    inputSanitizer;
    storageProviderFactory;
    configService;
    mimeValidationService;
    logger = new unified_logger_service_1.UnifiedLoggerService();
    maxRetries;
    retryDelay;
    constructor(documentoRepository, inputSanitizer, storageProviderFactory, configService, mimeValidationService) {
        this.documentoRepository = documentoRepository;
        this.inputSanitizer = inputSanitizer;
        this.storageProviderFactory = storageProviderFactory;
        this.configService = configService;
        this.mimeValidationService = mimeValidationService;
        this.logger.setContext(DocumentoService_1.name);
        this.maxRetries = this.configService.get('DOCUMENTO_MAX_RETRIES', 3);
        this.retryDelay = this.configService.get('DOCUMENTO_RETRY_DELAY', 1000);
    }
    /**
     * Lista documentos por cidadão
     */
    async findByCidadao(cidadaoId, tipo, reutilizavel) {
        const queryBuilder = this.documentoRepository
            .createQueryBuilder('documento')
            .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')
            .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')
            .where('documento.cidadao_id = :cidadaoId', { cidadaoId })
            .andWhere('documento.removed_at IS NULL')
            .orderBy('documento.data_upload', 'DESC');
        if (tipo) {
            queryBuilder.andWhere('documento.tipo = :tipo', { tipo });
        }
        return queryBuilder.getMany();
    }
    /**
     * Lista documentos por solicitação
     */
    async findBySolicitacao(solicitacaoId, tipo) {
        const queryBuilder = this.documentoRepository
            .createQueryBuilder('documento')
            .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')
            .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')
            .where('documento.solicitacao_id = :solicitacaoId', { solicitacaoId })
            .andWhere('documento.removed_at IS NULL')
            .orderBy('documento.data_upload', 'DESC');
        if (tipo) {
            queryBuilder.andWhere('documento.tipo = :tipo', { tipo });
        }
        return queryBuilder.getMany();
    }
    /**
     * Busca um documento pelo ID
     */
    async findById(id) {
        const documento = await this.documentoRepository
            .createQueryBuilder('documento')
            .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')
            .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')
            .where('documento.id = :id', { id })
            .andWhere('documento.removed_at IS NULL')
            .getOne();
        if (!documento) {
            throw new common_1.NotFoundException('Documento não encontrado');
        }
        return documento;
    }
    /**
     * Faz o download de um documento
     */
    async download(id) {
        const documento = await this.findById(id);
        const storageProvider = this.storageProviderFactory.getProvider();
        try {
            const buffer = await storageProvider.obterArquivo(documento.caminho);
            return {
                buffer,
                mimetype: documento.mimetype,
                nomeOriginal: documento.nome_original,
            };
        }
        catch (error) {
            throw new common_1.InternalServerErrorException('Erro ao fazer download do documento');
        }
    }
    /**
     * Método auxiliar para retry com backoff exponencial
     */
    async retryOperation(operation, operationName, maxRetries = this.maxRetries) {
        let lastError = new Error('Operação falhou após todas as tentativas');
        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                this.logger.debug(`Tentativa ${attempt}/${maxRetries} para ${operationName}`);
                return await operation();
            }
            catch (error) {
                lastError = error;
                this.logger.warn(`Falha na tentativa ${attempt}/${maxRetries} para ${operationName}: ${error.message}`, { error: error.message, attempt, maxRetries });
                if (attempt < maxRetries) {
                    const delay = this.retryDelay * Math.pow(2, attempt - 1); // Backoff exponencial
                    this.logger.debug(`Aguardando ${delay}ms antes da próxima tentativa`);
                    await new Promise((resolve) => setTimeout(resolve, delay));
                }
            }
        }
        throw lastError;
    }
    /**
     * Valida as configurações necessárias para o upload
     */
    validateUploadConfiguration() {
        const storageProvider = this.storageProviderFactory.getProvider();
        if (!storageProvider) {
            throw new common_1.InternalServerErrorException('Provedor de storage não configurado');
        }
        this.logger.debug(`Usando provedor de storage: ${storageProvider.nome}`);
    }
    /**
     * Faz upload de um novo documento com logging detalhado e retry automático
     */
    async upload(arquivo, uploadDocumentoDto, usuarioId) {
        const uploadId = (0, uuid_1.v4)();
        let caminhoArmazenamento = null;
        const startTime = Date.now();
        this.logger.info(`Iniciando upload de documento [${uploadId}]`, {
            uploadId,
            arquivo: {
                nome: arquivo.originalname,
                tamanho: arquivo.size,
                mimetype: arquivo.mimetype,
            },
            tipo: uploadDocumentoDto.tipo,
            cidadaoId: uploadDocumentoDto.cidadao_id,
            solicitacaoId: uploadDocumentoDto.solicitacao_id,
            usuarioId,
            reutilizavel: uploadDocumentoDto.reutilizavel,
        });
        try {
            // Validar configurações
            this.validateUploadConfiguration();
            const storageProvider = this.storageProviderFactory.getProvider();
            // Validar entrada básica
            if (!arquivo || !arquivo.buffer || arquivo.buffer.length === 0) {
                throw new common_1.BadRequestException('Arquivo não fornecido ou vazio');
            }
            if (!uploadDocumentoDto.cidadao_id) {
                throw new common_1.BadRequestException('ID do cidadão é obrigatório');
            }
            this.logger.debug(`Validando arquivo com validação MIME avançada [${uploadId}]`, {
                uploadId,
                mimetype: arquivo.mimetype,
                tamanho: arquivo.size,
                tipoBeneficio: uploadDocumentoDto.tipo,
            });
            // Validar arquivo com validação MIME avançada
            const mimeValidationResult = await this.retryOperation(() => this.mimeValidationService.validateFile(arquivo, uploadDocumentoDto.tipo, uploadId), `validação MIME avançada [${uploadId}]`, 2);
            if (!mimeValidationResult.isValid) {
                this.logger.warn(`Arquivo rejeitado na validação [${uploadId}]`, {
                    uploadId,
                    errors: mimeValidationResult.validationErrors,
                    warnings: mimeValidationResult.securityWarnings,
                });
                throw new common_1.BadRequestException(`Arquivo inválido: ${mimeValidationResult.validationErrors.join(', ')}`);
            }
            if (mimeValidationResult.securityWarnings.length > 0) {
                this.logger.warn(`Avisos de segurança detectados [${uploadId}]`, {
                    uploadId,
                    warnings: mimeValidationResult.securityWarnings,
                });
            }
            // Usar hash da validação MIME avançada
            const hashArquivo = mimeValidationResult.fileHash;
            this.logger.debug(`Hash do arquivo obtido da validação [${uploadId}]: ${hashArquivo.substring(0, 16)}...`);
            // Verificar se já existe um documento com o mesmo hash (reutilização)
            if (uploadDocumentoDto.reutilizavel) {
                this.logger.debug(`Verificando reutilização de documento [${uploadId}]`, {
                    uploadId,
                    hashArquivo,
                    tipo: uploadDocumentoDto.tipo,
                    cidadaoId: uploadDocumentoDto.cidadao_id,
                });
                const documentoExistente = await this.documentoRepository
                    .createQueryBuilder('documento')
                    .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')
                    .where('documento.hash_arquivo = :hashArquivo', { hashArquivo })
                    .andWhere('documento.tipo = :tipo', { tipo: uploadDocumentoDto.tipo })
                    .andWhere('documento.cidadao_id = :cidadaoId', {
                    cidadaoId: uploadDocumentoDto.cidadao_id,
                })
                    .andWhere('documento.removed_at IS NULL')
                    .getOne();
                if (documentoExistente) {
                    this.logger.info(`Documento reutilizado [${uploadId}]`, {
                        uploadId,
                        documentoExistenteId: documentoExistente.id,
                        hashArquivo,
                        tempoProcessamento: Date.now() - startTime,
                    });
                    // Retornar documento existente se for reutilizável
                    if (uploadDocumentoDto.solicitacao_id) {
                        // Atualizar para associar à nova solicitação se necessário
                        documentoExistente.solicitacao_id =
                            uploadDocumentoDto.solicitacao_id;
                        return this.documentoRepository.save(documentoExistente);
                    }
                    return documentoExistente;
                }
            }
            // Gerar nome único para o arquivo
            const extensao = (0, path_1.extname)(arquivo.originalname);
            const nomeArquivo = `${(0, uuid_1.v4)()}${extensao}`;
            this.logger.debug(`Nome único gerado [${uploadId}]: ${nomeArquivo}`);
            // Salvar arquivo no storage com retry
            this.logger.debug(`Salvando arquivo no storage [${uploadId}]`, {
                uploadId,
                nomeArquivo,
                provedor: storageProvider.nome,
            });
            caminhoArmazenamento = await this.retryOperation(() => storageProvider.salvarArquivo(arquivo.buffer, nomeArquivo, arquivo.mimetype), `upload para storage [${uploadId}]`);
            if (!caminhoArmazenamento) {
                throw new common_1.InternalServerErrorException('Falha ao salvar arquivo no storage - caminho vazio');
            }
            this.logger.debug(`Arquivo salvo no storage [${uploadId}]: ${caminhoArmazenamento}`);
            // Criar metadados enriquecidos
            const metadados = {
                upload_info: {
                    upload_id: uploadId,
                    timestamp: new Date().toISOString(),
                    file_hash: hashArquivo,
                    validation_result: mimeValidationResult,
                    storage_provider: storageProvider.nome,
                    ip: 'unknown', // Pode ser obtido do request se necessário
                    user_agent: 'unknown', // Pode ser obtido do request se necessário
                },
            };
            // Normalizar campos de enum antes de salvar
            const dadosDocumento = (0, enum_normalizer_util_1.normalizeEnumFields)({
                cidadao_id: uploadDocumentoDto.cidadao_id,
                solicitacao_id: uploadDocumentoDto.solicitacao_id,
                tipo: uploadDocumentoDto.tipo,
                nome_arquivo: nomeArquivo,
                nome_original: arquivo.originalname,
                caminho: caminhoArmazenamento,
                tamanho: arquivo.size,
                mimetype: arquivo.mimetype,
                hash_arquivo: hashArquivo,
                reutilizavel: uploadDocumentoDto.reutilizavel || false,
                descricao: uploadDocumentoDto.descricao,
                usuario_upload_id: usuarioId,
                data_upload: new Date(),
                metadados: metadados,
            });
            this.logger.debug(`Salvando metadados no banco [${uploadId}]`);
            // Salvar documento no banco de dados
            const novoDocumento = new documento_entity_1.Documento();
            Object.assign(novoDocumento, dadosDocumento);
            // Salvar documento no banco com retry
            const resultado = await this.retryOperation(() => this.documentoRepository.save(novoDocumento), `salvamento no banco [${uploadId}]`, 2);
            const documentoId = resultado.id;
            this.logger.debug(`Documento salvo no banco [${uploadId}]: ${documentoId}`);
            // Buscar o documento com as relações
            const documentoComRelacoes = await this.documentoRepository
                .createQueryBuilder('documento')
                .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')
                .where('documento.id = :id', { id: documentoId })
                .getOne();
            const tempoTotal = Date.now() - startTime;
            this.logger.info(`Upload de documento concluído com sucesso [${uploadId}]`, {
                uploadId,
                documentoId,
                hashArquivo,
                caminhoArmazenamento,
                tempoProcessamento: tempoTotal,
                tamanhoArquivo: arquivo.size,
                tipo: uploadDocumentoDto.tipo,
            });
            return documentoComRelacoes;
        }
        catch (error) {
            const tempoTotal = Date.now() - startTime;
            const storageProvider = this.storageProviderFactory.getProvider();
            this.logger.error(`Falha no upload de documento [${uploadId}]`, {
                uploadId,
                erro: error.message,
                stack: error.stack,
                tempoProcessamento: tempoTotal,
                arquivo: {
                    nome: arquivo?.originalname,
                    tamanho: arquivo?.size,
                    mimetype: arquivo?.mimetype,
                },
                caminhoArmazenamento,
                tipo: uploadDocumentoDto.tipo,
                cidadaoId: uploadDocumentoDto.cidadao_id,
            });
            // Limpar arquivo do storage em caso de erro
            if (caminhoArmazenamento && storageProvider) {
                try {
                    this.logger.debug(`Limpando arquivo do storage após erro [${uploadId}]: ${caminhoArmazenamento}`);
                    await storageProvider.removerArquivo(caminhoArmazenamento);
                    this.logger.debug(`Arquivo removido do storage [${uploadId}]`);
                }
                catch (cleanupError) {
                    this.logger.error(`Erro ao limpar arquivo do storage após falha [${uploadId}]`, {
                        uploadId,
                        caminhoArmazenamento,
                        cleanupError: cleanupError.message,
                        originalError: error.message,
                    });
                }
            }
            // Re-lançar exceções conhecidas
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.NotFoundException) {
                throw error;
            }
            // Tratar erros específicos do storage
            if (error.message?.includes('S3') || error.message?.includes('storage')) {
                throw new common_1.InternalServerErrorException('Erro no sistema de armazenamento. Tente novamente em alguns minutos.');
            }
            // Tratar erros de banco de dados
            if (error.message?.includes('database') ||
                error.message?.includes('connection')) {
                throw new common_1.InternalServerErrorException('Erro de conexão com banco de dados. Tente novamente.');
            }
            // Erro genérico
            throw new common_1.InternalServerErrorException('Erro interno no upload do documento. Contate o suporte se o problema persistir.');
        }
    }
    /**
     * Marca um documento como verificado
     */
    async verificar(id, usuarioId, observacoes) {
        const documento = await this.findById(id);
        if (documento.verificado) {
            throw new common_1.BadRequestException('Documento já foi verificado');
        }
        documento.verificado = true;
        documento.data_verificacao = new Date();
        documento.usuario_verificacao_id = usuarioId;
        documento.observacoes_verificacao = observacoes;
        const documentoAtualizado = await this.documentoRepository.save(documento);
        return this.documentoRepository
            .createQueryBuilder('documento')
            .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')
            .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')
            .where('documento.id = :id', { id: documentoAtualizado.id })
            .getOne();
    }
    /**
     * Remove um documento (soft delete)
     */
    async remover(id, usuarioId) {
        const documento = await this.findById(id);
        documento.removed_at = new Date();
        // Nota: removed_by não está definido na entidade, seria necessário adicionar se precisar
        return this.documentoRepository.save(documento);
    }
    /**
     * Busca documentos reutilizáveis por tipo e cidadão
     */
    async findReutilizaveis(cidadaoId, tipo) {
        const queryBuilder = this.documentoRepository
            .createQueryBuilder('documento')
            .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')
            .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')
            .where('documento.reutilizavel = :reutilizavel', { reutilizavel: true })
            .andWhere('documento.verificado = :verificado', { verificado: true })
            .andWhere('documento.removed_at IS NULL')
            .andWhere('(documento.data_validade IS NULL OR documento.data_validade >= :now)', { now: new Date() })
            .orderBy('documento.data_upload', 'DESC');
        if (cidadaoId) {
            queryBuilder.andWhere('documento.cidadao_id = :cidadaoId', { cidadaoId });
        }
        if (tipo) {
            queryBuilder.andWhere('documento.tipo = :tipo', { tipo });
        }
        return queryBuilder.getMany();
    }
    /**
     * Obtém estatísticas de documentos
     */
    async getEstatisticas(cidadaoId) {
        const baseQuery = this.documentoRepository
            .createQueryBuilder('documento')
            .where('documento.removed_at IS NULL');
        if (cidadaoId) {
            baseQuery.andWhere('documento.cidadao_id = :cidadaoId', { cidadaoId });
        }
        const [total, verificados, pendentes, reutilizaveis] = await Promise.all([
            baseQuery.getCount(),
            baseQuery
                .clone()
                .andWhere('documento.verificado = :verificado', { verificado: true })
                .getCount(),
            baseQuery
                .clone()
                .andWhere('documento.verificado = :verificado', { verificado: false })
                .getCount(),
            baseQuery
                .clone()
                .andWhere('documento.reutilizavel = :reutilizavel', {
                reutilizavel: true,
            })
                .getCount(),
        ]);
        return {
            total,
            verificados,
            pendentes,
            reutilizaveis,
        };
    }
};
exports.DocumentoService = DocumentoService;
exports.DocumentoService = DocumentoService = DocumentoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(documento_entity_1.Documento)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof input_sanitizer_validator_1.InputSanitizerValidator !== "undefined" && input_sanitizer_validator_1.InputSanitizerValidator) === "function" ? _b : Object, typeof (_c = typeof storage_provider_factory_1.StorageProviderFactory !== "undefined" && storage_provider_factory_1.StorageProviderFactory) === "function" ? _c : Object, typeof (_d = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _d : Object, typeof (_e = typeof mime_validation_service_1.MimeValidationService !== "undefined" && mime_validation_service_1.MimeValidationService) === "function" ? _e : Object])
], DocumentoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,