{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\services\\documento.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CAKwB;AACxB,6CAAmD;AACnD,qCAAqC;AACrC,yEAA+D;AAE/D,uFAAkF;AAClF,oFAA+E;AAI/E,+BAA+B;AAC/B,+BAAoC;AACpC,qFAAiF;AACjF,2FAAsF;AACtF,2CAA+C;AAC/C,uEAGmC;AAG5B,IAAM,gBAAgB,wBAAtB,MAAM,gBAAgB;IAOR;IAEA;IACA;IACA;IACA;IAXF,MAAM,GAAG,IAAI,6CAAoB,EAAE,CAAC;IACpC,UAAU,CAAS;IACnB,UAAU,CAAS;IAEpC,YAEmB,mBAA0C,EAE1C,cAAuC,EACvC,sBAA8C,EAC9C,aAA4B,EAC5B,qBAA4C;QAL5C,wBAAmB,GAAnB,mBAAmB,CAAuB;QAE1C,mBAAc,GAAd,cAAc,CAAyB;QACvC,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,kBAAa,GAAb,aAAa,CAAe;QAC5B,0BAAqB,GAArB,qBAAqB,CAAuB;QAE7D,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,kBAAgB,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CACtC,uBAAuB,EACvB,CAAC,CACF,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CACtC,uBAAuB,EACvB,IAAI,CACL,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CACjB,SAAiB,EACjB,IAAa,EACb,YAAsB;QAEtB,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB;aAC1C,kBAAkB,CAAC,WAAW,CAAC;aAC/B,iBAAiB,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;aAC/D,iBAAiB,CAAC,+BAA+B,EAAE,qBAAqB,CAAC;aACzE,KAAK,CAAC,mCAAmC,EAAE,EAAE,SAAS,EAAE,CAAC;aACzD,QAAQ,CAAC,8BAA8B,CAAC;aACxC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAE5C,IAAI,IAAI,EAAE,CAAC;YACT,YAAY,CAAC,QAAQ,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,OAAO,YAAY,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,aAAqB,EAAE,IAAa;QAC1D,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB;aAC1C,kBAAkB,CAAC,WAAW,CAAC;aAC/B,iBAAiB,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;aAC/D,iBAAiB,CAAC,+BAA+B,EAAE,qBAAqB,CAAC;aACzE,KAAK,CAAC,2CAA2C,EAAE,EAAE,aAAa,EAAE,CAAC;aACrE,QAAQ,CAAC,8BAA8B,CAAC;aACxC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAE5C,IAAI,IAAI,EAAE,CAAC;YACT,YAAY,CAAC,QAAQ,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,OAAO,YAAY,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,mBAAmB;aAC7C,kBAAkB,CAAC,WAAW,CAAC;aAC/B,iBAAiB,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;aAC/D,iBAAiB,CAAC,+BAA+B,EAAE,qBAAqB,CAAC;aACzE,KAAK,CAAC,oBAAoB,EAAE,EAAE,EAAE,EAAE,CAAC;aACnC,QAAQ,CAAC,8BAA8B,CAAC;aACxC,MAAM,EAAE,CAAC;QAEZ,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,0BAAiB,CAAC,0BAA0B,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ,CACZ,EAAU;QAEV,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1C,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;QAElE,IAAI,CAAC;YACH,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YAErE,OAAO;gBACL,MAAM;gBACN,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,YAAY,EAAE,SAAS,CAAC,aAAa;aACtC,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,qCAA4B,CACpC,qCAAqC,CACtC,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,cAAc,CAC1B,SAA2B,EAC3B,aAAqB,EACrB,aAAqB,IAAI,CAAC,UAAU;QAEpC,IAAI,SAAS,GAAU,IAAI,KAAK,CAC9B,0CAA0C,CAC3C,CAAC;QAEF,KAAK,IAAI,OAAO,GAAG,CAAC,EAAE,OAAO,IAAI,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC;YACvD,IAAI,CAAC;gBACH,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,aAAa,OAAO,IAAI,UAAU,SAAS,aAAa,EAAE,CAC3D,CAAC;gBACF,OAAO,MAAM,SAAS,EAAE,CAAC;YAC3B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,SAAS,GAAG,KAAK,CAAC;gBAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,sBAAsB,OAAO,IAAI,UAAU,SAAS,aAAa,KAAK,KAAK,CAAC,OAAO,EAAE,EACrF,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,CAC9C,CAAC;gBAEF,IAAI,OAAO,GAAG,UAAU,EAAE,CAAC;oBACzB,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,sBAAsB;oBAChF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,KAAK,+BAA+B,CAAC,CAAC;oBACtE,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBAC7D,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,SAAS,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,2BAA2B;QACjC,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;QAClE,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,MAAM,IAAI,qCAA4B,CACpC,qCAAqC,CACtC,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CACV,OAAY,EACZ,kBAAsC,EACtC,SAAiB;QAEjB,MAAM,QAAQ,GAAG,IAAA,SAAM,GAAE,CAAC;QAC1B,IAAI,oBAAoB,GAAkB,IAAI,CAAC;QAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kCAAkC,QAAQ,GAAG,EAAE;YAC9D,QAAQ;YACR,OAAO,EAAE;gBACP,IAAI,EAAE,OAAO,CAAC,YAAY;gBAC1B,OAAO,EAAE,OAAO,CAAC,IAAI;gBACrB,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC3B;YACD,IAAI,EAAE,kBAAkB,CAAC,IAAI;YAC7B,SAAS,EAAE,kBAAkB,CAAC,UAAU;YACxC,aAAa,EAAE,kBAAkB,CAAC,cAAc;YAChD,SAAS;YACT,YAAY,EAAE,kBAAkB,CAAC,YAAY;SAC9C,CAAC,CAAC;QAEH,IAAI,CAAC;YACH,wBAAwB;YACxB,IAAI,CAAC,2BAA2B,EAAE,CAAC;YACnC,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;YAElE,yBAAyB;YACzB,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC/D,MAAM,IAAI,4BAAmB,CAAC,gCAAgC,CAAC,CAAC;YAClE,CAAC;YAED,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,CAAC;gBACnC,MAAM,IAAI,4BAAmB,CAAC,6BAA6B,CAAC,CAAC;YAC/D,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,kDAAkD,QAAQ,GAAG,EAC7D;gBACE,QAAQ;gBACR,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,OAAO,EAAE,OAAO,CAAC,IAAI;gBACrB,aAAa,EAAE,kBAAkB,CAAC,IAAI;aACvC,CACF,CAAC;YAEF,8CAA8C;YAC9C,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,cAAc,CACpD,GAAG,EAAE,CACH,IAAI,CAAC,qBAAqB,CAAC,YAAY,CACrC,OAAO,EACP,kBAAkB,CAAC,IAAI,EACvB,QAAQ,CACT,EACH,4BAA4B,QAAQ,GAAG,EACvC,CAAC,CACF,CAAC;YAEF,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;gBAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mCAAmC,QAAQ,GAAG,EAAE;oBAC/D,QAAQ;oBACR,MAAM,EAAE,oBAAoB,CAAC,gBAAgB;oBAC7C,QAAQ,EAAE,oBAAoB,CAAC,gBAAgB;iBAChD,CAAC,CAAC;gBAEH,MAAM,IAAI,4BAAmB,CAC3B,qBAAqB,oBAAoB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACxE,CAAC;YACJ,CAAC;YAED,IAAI,oBAAoB,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mCAAmC,QAAQ,GAAG,EAAE;oBAC/D,QAAQ;oBACR,QAAQ,EAAE,oBAAoB,CAAC,gBAAgB;iBAChD,CAAC,CAAC;YACL,CAAC;YAED,uCAAuC;YACvC,MAAM,WAAW,GAAG,oBAAoB,CAAC,QAAQ,CAAC;YAElD,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,wCAAwC,QAAQ,MAAM,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CACxF,CAAC;YAEF,sEAAsE;YACtE,IAAI,kBAAkB,CAAC,YAAY,EAAE,CAAC;gBACpC,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,0CAA0C,QAAQ,GAAG,EACrD;oBACE,QAAQ;oBACR,WAAW;oBACX,IAAI,EAAE,kBAAkB,CAAC,IAAI;oBAC7B,SAAS,EAAE,kBAAkB,CAAC,UAAU;iBACzC,CACF,CAAC;gBAEF,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,mBAAmB;qBACtD,kBAAkB,CAAC,WAAW,CAAC;qBAC/B,iBAAiB,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;qBAC/D,KAAK,CAAC,uCAAuC,EAAE,EAAE,WAAW,EAAE,CAAC;qBAC/D,QAAQ,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,kBAAkB,CAAC,IAAI,EAAE,CAAC;qBACrE,QAAQ,CAAC,mCAAmC,EAAE;oBAC7C,SAAS,EAAE,kBAAkB,CAAC,UAAU;iBACzC,CAAC;qBACD,QAAQ,CAAC,8BAA8B,CAAC;qBACxC,MAAM,EAAE,CAAC;gBAEZ,IAAI,kBAAkB,EAAE,CAAC;oBACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,QAAQ,GAAG,EAAE;wBACtD,QAAQ;wBACR,oBAAoB,EAAE,kBAAkB,CAAC,EAAE;wBAC3C,WAAW;wBACX,kBAAkB,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;qBAC3C,CAAC,CAAC;oBAEH,mDAAmD;oBACnD,IAAI,kBAAkB,CAAC,cAAc,EAAE,CAAC;wBACtC,2DAA2D;wBAC3D,kBAAkB,CAAC,cAAc;4BAC/B,kBAAkB,CAAC,cAAc,CAAC;wBACpC,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBAC3D,CAAC;oBACD,OAAO,kBAAkB,CAAC;gBAC5B,CAAC;YACH,CAAC;YAED,kCAAkC;YAClC,MAAM,QAAQ,GAAG,IAAA,cAAO,EAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC/C,MAAM,WAAW,GAAG,GAAG,IAAA,SAAM,GAAE,GAAG,QAAQ,EAAE,CAAC;YAE7C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,QAAQ,MAAM,WAAW,EAAE,CAAC,CAAC;YAErE,sCAAsC;YACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,QAAQ,GAAG,EAAE;gBAC7D,QAAQ;gBACR,WAAW;gBACX,QAAQ,EAAE,eAAe,CAAC,IAAI;aAC/B,CAAC,CAAC;YAEH,oBAAoB,GAAG,MAAM,IAAI,CAAC,cAAc,CAC9C,GAAG,EAAE,CACH,eAAe,CAAC,aAAa,CAC3B,OAAO,CAAC,MAAM,EACd,WAAW,EACX,OAAO,CAAC,QAAQ,CACjB,EACH,wBAAwB,QAAQ,GAAG,CACpC,CAAC;YAEF,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBAC1B,MAAM,IAAI,qCAA4B,CACpC,oDAAoD,CACrD,CAAC;YACJ,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,6BAA6B,QAAQ,MAAM,oBAAoB,EAAE,CAClE,CAAC;YAEF,+BAA+B;YAC/B,MAAM,SAAS,GAAG;gBAChB,WAAW,EAAE;oBACX,SAAS,EAAE,QAAQ;oBACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,SAAS,EAAE,WAAW;oBACtB,iBAAiB,EAAE,oBAAoB;oBACvC,gBAAgB,EAAE,eAAe,CAAC,IAAI;oBACtC,EAAE,EAAE,SAAS,EAAE,2CAA2C;oBAC1D,UAAU,EAAE,SAAS,EAAE,2CAA2C;iBACnE;aACF,CAAC;YAEF,4CAA4C;YAC5C,MAAM,cAAc,GAAG,IAAA,0CAAmB,EAAC;gBACzC,UAAU,EAAE,kBAAkB,CAAC,UAAU;gBACzC,cAAc,EAAE,kBAAkB,CAAC,cAAc;gBACjD,IAAI,EAAE,kBAAkB,CAAC,IAAI;gBAC7B,YAAY,EAAE,WAAW;gBACzB,aAAa,EAAE,OAAO,CAAC,YAAY;gBACnC,OAAO,EAAE,oBAAoB;gBAC7B,OAAO,EAAE,OAAO,CAAC,IAAI;gBACrB,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,YAAY,EAAE,WAAW;gBACzB,YAAY,EAAE,kBAAkB,CAAC,YAAY,IAAI,KAAK;gBACtD,SAAS,EAAE,kBAAkB,CAAC,SAAS;gBACvC,iBAAiB,EAAE,SAAS;gBAC5B,WAAW,EAAE,IAAI,IAAI,EAAE;gBACvB,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,QAAQ,GAAG,CAAC,CAAC;YAE/D,qCAAqC;YACrC,MAAM,aAAa,GAAG,IAAI,4BAAS,EAAE,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;YAE7C,sCAAsC;YACtC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CACzC,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,EAClD,wBAAwB,QAAQ,GAAG,EACnC,CAAC,CACF,CAAC;YAEF,MAAM,WAAW,GAAI,SAAkC,CAAC,EAAE,CAAC;YAE3D,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,6BAA6B,QAAQ,MAAM,WAAW,EAAE,CACzD,CAAC;YAEF,qCAAqC;YACrC,MAAM,oBAAoB,GAAG,MAAM,IAAI,CAAC,mBAAmB;iBACxD,kBAAkB,CAAC,WAAW,CAAC;iBAC/B,iBAAiB,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;iBAC/D,KAAK,CAAC,oBAAoB,EAAE,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC;iBAChD,MAAM,EAAE,CAAC;YAEZ,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAE1C,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,8CAA8C,QAAQ,GAAG,EACzD;gBACE,QAAQ;gBACR,WAAW;gBACX,WAAW;gBACX,oBAAoB;gBACpB,kBAAkB,EAAE,UAAU;gBAC9B,cAAc,EAAE,OAAO,CAAC,IAAI;gBAC5B,IAAI,EAAE,kBAAkB,CAAC,IAAI;aAC9B,CACF,CAAC;YAEF,OAAO,oBAAoB,CAAC;QAC9B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAC1C,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,CAAC;YAElE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,QAAQ,GAAG,EAAE;gBAC9D,QAAQ;gBACR,IAAI,EAAE,KAAK,CAAC,OAAO;gBACnB,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,kBAAkB,EAAE,UAAU;gBAC9B,OAAO,EAAE;oBACP,IAAI,EAAE,OAAO,EAAE,YAAY;oBAC3B,OAAO,EAAE,OAAO,EAAE,IAAI;oBACtB,QAAQ,EAAE,OAAO,EAAE,QAAQ;iBAC5B;gBACD,oBAAoB;gBACpB,IAAI,EAAE,kBAAkB,CAAC,IAAI;gBAC7B,SAAS,EAAE,kBAAkB,CAAC,UAAU;aACzC,CAAC,CAAC;YAEH,4CAA4C;YAC5C,IAAI,oBAAoB,IAAI,eAAe,EAAE,CAAC;gBAC5C,IAAI,CAAC;oBACH,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,0CAA0C,QAAQ,MAAM,oBAAoB,EAAE,CAC/E,CAAC;oBACF,MAAM,eAAe,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;oBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,QAAQ,GAAG,CAAC,CAAC;gBACjE,CAAC;gBAAC,OAAO,YAAY,EAAE,CAAC;oBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,iDAAiD,QAAQ,GAAG,EAC5D;wBACE,QAAQ;wBACR,oBAAoB;wBACpB,YAAY,EAAE,YAAY,CAAC,OAAO;wBAClC,aAAa,EAAE,KAAK,CAAC,OAAO;qBAC7B,CACF,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,gCAAgC;YAChC,IACE,KAAK,YAAY,4BAAmB;gBACpC,KAAK,YAAY,0BAAiB,EAClC,CAAC;gBACD,MAAM,KAAK,CAAC;YACd,CAAC;YAED,sCAAsC;YACtC,IAAI,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxE,MAAM,IAAI,qCAA4B,CACpC,sEAAsE,CACvE,CAAC;YACJ,CAAC;YAED,iCAAiC;YACjC,IACE,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,UAAU,CAAC;gBACnC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,YAAY,CAAC,EACrC,CAAC;gBACD,MAAM,IAAI,qCAA4B,CACpC,sDAAsD,CACvD,CAAC;YACJ,CAAC;YAED,gBAAgB;YAChB,MAAM,IAAI,qCAA4B,CACpC,iFAAiF,CAClF,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CAAC,EAAU,EAAE,SAAiB,EAAE,WAAoB;QACjE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE1C,IAAI,SAAS,CAAC,UAAU,EAAE,CAAC;YACzB,MAAM,IAAI,4BAAmB,CAAC,6BAA6B,CAAC,CAAC;QAC/D,CAAC;QAED,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC;QAC5B,SAAS,CAAC,gBAAgB,GAAG,IAAI,IAAI,EAAE,CAAC;QACxC,SAAS,CAAC,sBAAsB,GAAG,SAAS,CAAC;QAC7C,SAAS,CAAC,uBAAuB,GAAG,WAAW,CAAC;QAEhD,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE3E,OAAO,IAAI,CAAC,mBAAmB;aAC5B,kBAAkB,CAAC,WAAW,CAAC;aAC/B,iBAAiB,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;aAC/D,iBAAiB,CAAC,+BAA+B,EAAE,qBAAqB,CAAC;aACzE,KAAK,CAAC,oBAAoB,EAAE,EAAE,EAAE,EAAE,mBAAmB,CAAC,EAAE,EAAE,CAAC;aAC3D,MAAM,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO,CAAC,EAAU,EAAE,SAAiB;QACzC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAE1C,SAAS,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;QAClC,yFAAyF;QAEzF,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CAAC,SAAkB,EAAE,IAAa;QACvD,MAAM,YAAY,GAAG,IAAI,CAAC,mBAAmB;aAC1C,kBAAkB,CAAC,WAAW,CAAC;aAC/B,iBAAiB,CAAC,0BAA0B,EAAE,gBAAgB,CAAC;aAC/D,iBAAiB,CAAC,+BAA+B,EAAE,qBAAqB,CAAC;aACzE,KAAK,CAAC,wCAAwC,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;aACvE,QAAQ,CAAC,oCAAoC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;aACpE,QAAQ,CAAC,8BAA8B,CAAC;aACxC,QAAQ,CACP,sEAAsE,EACtE,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,EAAE,CACpB;aACA,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAE5C,IAAI,SAAS,EAAE,CAAC;YACd,YAAY,CAAC,QAAQ,CAAC,mCAAmC,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAC5E,CAAC;QAED,IAAI,IAAI,EAAE,CAAC;YACT,YAAY,CAAC,QAAQ,CAAC,wBAAwB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,OAAO,YAAY,CAAC,OAAO,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,SAAkB;QACtC,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB;aACvC,kBAAkB,CAAC,WAAW,CAAC;aAC/B,KAAK,CAAC,8BAA8B,CAAC,CAAC;QAEzC,IAAI,SAAS,EAAE,CAAC;YACd,SAAS,CAAC,QAAQ,CAAC,mCAAmC,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;YACvE,SAAS,CAAC,QAAQ,EAAE;YACpB,SAAS;iBACN,KAAK,EAAE;iBACP,QAAQ,CAAC,oCAAoC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;iBACpE,QAAQ,EAAE;YACb,SAAS;iBACN,KAAK,EAAE;iBACP,QAAQ,CAAC,oCAAoC,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;iBACrE,QAAQ,EAAE;YACb,SAAS;iBACN,KAAK,EAAE;iBACP,QAAQ,CAAC,wCAAwC,EAAE;gBAClD,YAAY,EAAE,IAAI;aACnB,CAAC;iBACD,QAAQ,EAAE;SACd,CAAC,CAAC;QAEH,OAAO;YACL,KAAK;YACL,WAAW;YACX,SAAS;YACT,aAAa;SACd,CAAC;IACJ,CAAC;CACF,CAAA;AA1jBY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;IAOR,WAAA,IAAA,0BAAgB,EAAC,4BAAS,CAAC,CAAA;yDACU,oBAAU,oBAAV,oBAAU,oDAEf,mDAAuB,oBAAvB,mDAAuB,oDACf,iDAAsB,oBAAtB,iDAAsB,oDAC/B,sBAAa,oBAAb,sBAAa,oDACL,+CAAqB,oBAArB,+CAAqB;GAZpD,gBAAgB,CA0jB5B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\services\\documento.service.ts"],"sourcesContent":["import {\n  Injectable,\n  BadRequestException,\n  NotFoundException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Documento } from '../../../entities/documento.entity';\n\nimport { InputSanitizerValidator } from '../validators/input-sanitizer.validator';\nimport { StorageProviderFactory } from '../factories/storage-provider.factory';\nimport { UploadDocumentoDto } from '../dto/upload-documento.dto';\nimport { TipoDocumentoEnum } from '@/enums';\nimport { createHash } from 'crypto';\nimport { extname } from 'path';\nimport { v4 as uuidv4 } from 'uuid';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\nimport { UnifiedLoggerService } from '../../../shared/logging/unified-logger.service';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  MimeValidationService,\n  MimeValidationResult,\n} from './mime-validation.service';\n\n@Injectable()\nexport class DocumentoService {\n  private readonly logger = new UnifiedLoggerService();\n  private readonly maxRetries: number;\n  private readonly retryDelay: number;\n\n  constructor(\n    @InjectRepository(Documento)\n    private readonly documentoRepository: Repository<Documento>,\n\n    private readonly inputSanitizer: InputSanitizerValidator,\n    private readonly storageProviderFactory: StorageProviderFactory,\n    private readonly configService: ConfigService,\n    private readonly mimeValidationService: MimeValidationService,\n  ) {\n    this.logger.setContext(DocumentoService.name);\n    this.maxRetries = this.configService.get<number>(\n      'DOCUMENTO_MAX_RETRIES',\n      3,\n    );\n    this.retryDelay = this.configService.get<number>(\n      'DOCUMENTO_RETRY_DELAY',\n      1000,\n    );\n  }\n\n  /**\n   * Lista documentos por cidadão\n   */\n  async findByCidadao(\n    cidadaoId: string,\n    tipo?: string,\n    reutilizavel?: boolean,\n  ) {\n    const queryBuilder = this.documentoRepository\n      .createQueryBuilder('documento')\n      .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')\n      .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')\n      .where('documento.cidadao_id = :cidadaoId', { cidadaoId })\n      .andWhere('documento.removed_at IS NULL')\n      .orderBy('documento.data_upload', 'DESC');\n\n    if (tipo) {\n      queryBuilder.andWhere('documento.tipo = :tipo', { tipo });\n    }\n\n    return queryBuilder.getMany();\n  }\n\n  /**\n   * Lista documentos por solicitação\n   */\n  async findBySolicitacao(solicitacaoId: string, tipo?: string) {\n    const queryBuilder = this.documentoRepository\n      .createQueryBuilder('documento')\n      .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')\n      .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')\n      .where('documento.solicitacao_id = :solicitacaoId', { solicitacaoId })\n      .andWhere('documento.removed_at IS NULL')\n      .orderBy('documento.data_upload', 'DESC');\n\n    if (tipo) {\n      queryBuilder.andWhere('documento.tipo = :tipo', { tipo });\n    }\n\n    return queryBuilder.getMany();\n  }\n\n  /**\n   * Busca um documento pelo ID\n   */\n  async findById(id: string) {\n    const documento = await this.documentoRepository\n      .createQueryBuilder('documento')\n      .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')\n      .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')\n      .where('documento.id = :id', { id })\n      .andWhere('documento.removed_at IS NULL')\n      .getOne();\n\n    if (!documento) {\n      throw new NotFoundException('Documento não encontrado');\n    }\n\n    return documento;\n  }\n\n  /**\n   * Faz o download de um documento\n   */\n  async download(\n    id: string,\n  ): Promise<{ buffer: Buffer; mimetype: string; nomeOriginal: string }> {\n    const documento = await this.findById(id);\n    const storageProvider = this.storageProviderFactory.getProvider();\n\n    try {\n      const buffer = await storageProvider.obterArquivo(documento.caminho);\n\n      return {\n        buffer,\n        mimetype: documento.mimetype,\n        nomeOriginal: documento.nome_original,\n      };\n    } catch (error) {\n      throw new InternalServerErrorException(\n        'Erro ao fazer download do documento',\n      );\n    }\n  }\n\n  /**\n   * Método auxiliar para retry com backoff exponencial\n   */\n  private async retryOperation<T>(\n    operation: () => Promise<T>,\n    operationName: string,\n    maxRetries: number = this.maxRetries,\n  ): Promise<T> {\n    let lastError: Error = new Error(\n      'Operação falhou após todas as tentativas',\n    );\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        this.logger.debug(\n          `Tentativa ${attempt}/${maxRetries} para ${operationName}`,\n        );\n        return await operation();\n      } catch (error) {\n        lastError = error;\n        this.logger.warn(\n          `Falha na tentativa ${attempt}/${maxRetries} para ${operationName}: ${error.message}`,\n          { error: error.message, attempt, maxRetries },\n        );\n\n        if (attempt < maxRetries) {\n          const delay = this.retryDelay * Math.pow(2, attempt - 1); // Backoff exponencial\n          this.logger.debug(`Aguardando ${delay}ms antes da próxima tentativa`);\n          await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n      }\n    }\n\n    throw lastError;\n  }\n\n  /**\n   * Valida as configurações necessárias para o upload\n   */\n  private validateUploadConfiguration(): void {\n    const storageProvider = this.storageProviderFactory.getProvider();\n    if (!storageProvider) {\n      throw new InternalServerErrorException(\n        'Provedor de storage não configurado',\n      );\n    }\n\n    this.logger.debug(`Usando provedor de storage: ${storageProvider.nome}`);\n  }\n\n  /**\n   * Faz upload de um novo documento com logging detalhado e retry automático\n   */\n  async upload(\n    arquivo: any,\n    uploadDocumentoDto: UploadDocumentoDto,\n    usuarioId: string,\n  ) {\n    const uploadId = uuidv4();\n    let caminhoArmazenamento: string | null = null;\n    const startTime = Date.now();\n\n    this.logger.info(`Iniciando upload de documento [${uploadId}]`, {\n      uploadId,\n      arquivo: {\n        nome: arquivo.originalname,\n        tamanho: arquivo.size,\n        mimetype: arquivo.mimetype,\n      },\n      tipo: uploadDocumentoDto.tipo,\n      cidadaoId: uploadDocumentoDto.cidadao_id,\n      solicitacaoId: uploadDocumentoDto.solicitacao_id,\n      usuarioId,\n      reutilizavel: uploadDocumentoDto.reutilizavel,\n    });\n\n    try {\n      // Validar configurações\n      this.validateUploadConfiguration();\n      const storageProvider = this.storageProviderFactory.getProvider();\n\n      // Validar entrada básica\n      if (!arquivo || !arquivo.buffer || arquivo.buffer.length === 0) {\n        throw new BadRequestException('Arquivo não fornecido ou vazio');\n      }\n\n      if (!uploadDocumentoDto.cidadao_id) {\n        throw new BadRequestException('ID do cidadão é obrigatório');\n      }\n\n      this.logger.debug(\n        `Validando arquivo com validação MIME avançada [${uploadId}]`,\n        {\n          uploadId,\n          mimetype: arquivo.mimetype,\n          tamanho: arquivo.size,\n          tipoBeneficio: uploadDocumentoDto.tipo,\n        },\n      );\n\n      // Validar arquivo com validação MIME avançada\n      const mimeValidationResult = await this.retryOperation(\n        () =>\n          this.mimeValidationService.validateFile(\n            arquivo,\n            uploadDocumentoDto.tipo,\n            uploadId,\n          ),\n        `validação MIME avançada [${uploadId}]`,\n        2, // Menos tentativas para validação\n      );\n\n      if (!mimeValidationResult.isValid) {\n        this.logger.warn(`Arquivo rejeitado na validação [${uploadId}]`, {\n          uploadId,\n          errors: mimeValidationResult.validationErrors,\n          warnings: mimeValidationResult.securityWarnings,\n        });\n\n        throw new BadRequestException(\n          `Arquivo inválido: ${mimeValidationResult.validationErrors.join(', ')}`,\n        );\n      }\n\n      if (mimeValidationResult.securityWarnings.length > 0) {\n        this.logger.warn(`Avisos de segurança detectados [${uploadId}]`, {\n          uploadId,\n          warnings: mimeValidationResult.securityWarnings,\n        });\n      }\n\n      // Usar hash da validação MIME avançada\n      const hashArquivo = mimeValidationResult.fileHash;\n\n      this.logger.debug(\n        `Hash do arquivo obtido da validação [${uploadId}]: ${hashArquivo.substring(0, 16)}...`,\n      );\n\n      // Verificar se já existe um documento com o mesmo hash (reutilização)\n      if (uploadDocumentoDto.reutilizavel) {\n        this.logger.debug(\n          `Verificando reutilização de documento [${uploadId}]`,\n          {\n            uploadId,\n            hashArquivo,\n            tipo: uploadDocumentoDto.tipo,\n            cidadaoId: uploadDocumentoDto.cidadao_id,\n          },\n        );\n\n        const documentoExistente = await this.documentoRepository\n          .createQueryBuilder('documento')\n          .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')\n          .where('documento.hash_arquivo = :hashArquivo', { hashArquivo })\n          .andWhere('documento.tipo = :tipo', { tipo: uploadDocumentoDto.tipo })\n          .andWhere('documento.cidadao_id = :cidadaoId', {\n            cidadaoId: uploadDocumentoDto.cidadao_id,\n          })\n          .andWhere('documento.removed_at IS NULL')\n          .getOne();\n\n        if (documentoExistente) {\n          this.logger.info(`Documento reutilizado [${uploadId}]`, {\n            uploadId,\n            documentoExistenteId: documentoExistente.id,\n            hashArquivo,\n            tempoProcessamento: Date.now() - startTime,\n          });\n\n          // Retornar documento existente se for reutilizável\n          if (uploadDocumentoDto.solicitacao_id) {\n            // Atualizar para associar à nova solicitação se necessário\n            documentoExistente.solicitacao_id =\n              uploadDocumentoDto.solicitacao_id;\n            return this.documentoRepository.save(documentoExistente);\n          }\n          return documentoExistente;\n        }\n      }\n\n      // Gerar nome único para o arquivo\n      const extensao = extname(arquivo.originalname);\n      const nomeArquivo = `${uuidv4()}${extensao}`;\n\n      this.logger.debug(`Nome único gerado [${uploadId}]: ${nomeArquivo}`);\n\n      // Salvar arquivo no storage com retry\n      this.logger.debug(`Salvando arquivo no storage [${uploadId}]`, {\n        uploadId,\n        nomeArquivo,\n        provedor: storageProvider.nome,\n      });\n\n      caminhoArmazenamento = await this.retryOperation(\n        () =>\n          storageProvider.salvarArquivo(\n            arquivo.buffer,\n            nomeArquivo,\n            arquivo.mimetype,\n          ),\n        `upload para storage [${uploadId}]`,\n      );\n\n      if (!caminhoArmazenamento) {\n        throw new InternalServerErrorException(\n          'Falha ao salvar arquivo no storage - caminho vazio',\n        );\n      }\n\n      this.logger.debug(\n        `Arquivo salvo no storage [${uploadId}]: ${caminhoArmazenamento}`,\n      );\n\n      // Criar metadados enriquecidos\n      const metadados = {\n        upload_info: {\n          upload_id: uploadId,\n          timestamp: new Date().toISOString(),\n          file_hash: hashArquivo,\n          validation_result: mimeValidationResult,\n          storage_provider: storageProvider.nome,\n          ip: 'unknown', // Pode ser obtido do request se necessário\n          user_agent: 'unknown', // Pode ser obtido do request se necessário\n        },\n      };\n\n      // Normalizar campos de enum antes de salvar\n      const dadosDocumento = normalizeEnumFields({\n        cidadao_id: uploadDocumentoDto.cidadao_id,\n        solicitacao_id: uploadDocumentoDto.solicitacao_id,\n        tipo: uploadDocumentoDto.tipo,\n        nome_arquivo: nomeArquivo,\n        nome_original: arquivo.originalname,\n        caminho: caminhoArmazenamento,\n        tamanho: arquivo.size,\n        mimetype: arquivo.mimetype,\n        hash_arquivo: hashArquivo,\n        reutilizavel: uploadDocumentoDto.reutilizavel || false,\n        descricao: uploadDocumentoDto.descricao,\n        usuario_upload_id: usuarioId,\n        data_upload: new Date(),\n        metadados: metadados,\n      });\n\n      this.logger.debug(`Salvando metadados no banco [${uploadId}]`);\n\n      // Salvar documento no banco de dados\n      const novoDocumento = new Documento();\n      Object.assign(novoDocumento, dadosDocumento);\n\n      // Salvar documento no banco com retry\n      const resultado = await this.retryOperation(\n        () => this.documentoRepository.save(novoDocumento),\n        `salvamento no banco [${uploadId}]`,\n        2, // Menos tentativas para operações de banco\n      );\n\n      const documentoId = (resultado as unknown as Documento).id;\n\n      this.logger.debug(\n        `Documento salvo no banco [${uploadId}]: ${documentoId}`,\n      );\n\n      // Buscar o documento com as relações\n      const documentoComRelacoes = await this.documentoRepository\n        .createQueryBuilder('documento')\n        .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')\n        .where('documento.id = :id', { id: documentoId })\n        .getOne();\n\n      const tempoTotal = Date.now() - startTime;\n\n      this.logger.info(\n        `Upload de documento concluído com sucesso [${uploadId}]`,\n        {\n          uploadId,\n          documentoId,\n          hashArquivo,\n          caminhoArmazenamento,\n          tempoProcessamento: tempoTotal,\n          tamanhoArquivo: arquivo.size,\n          tipo: uploadDocumentoDto.tipo,\n        },\n      );\n\n      return documentoComRelacoes;\n    } catch (error) {\n      const tempoTotal = Date.now() - startTime;\n      const storageProvider = this.storageProviderFactory.getProvider();\n\n      this.logger.error(`Falha no upload de documento [${uploadId}]`, {\n        uploadId,\n        erro: error.message,\n        stack: error.stack,\n        tempoProcessamento: tempoTotal,\n        arquivo: {\n          nome: arquivo?.originalname,\n          tamanho: arquivo?.size,\n          mimetype: arquivo?.mimetype,\n        },\n        caminhoArmazenamento,\n        tipo: uploadDocumentoDto.tipo,\n        cidadaoId: uploadDocumentoDto.cidadao_id,\n      });\n\n      // Limpar arquivo do storage em caso de erro\n      if (caminhoArmazenamento && storageProvider) {\n        try {\n          this.logger.debug(\n            `Limpando arquivo do storage após erro [${uploadId}]: ${caminhoArmazenamento}`,\n          );\n          await storageProvider.removerArquivo(caminhoArmazenamento);\n          this.logger.debug(`Arquivo removido do storage [${uploadId}]`);\n        } catch (cleanupError) {\n          this.logger.error(\n            `Erro ao limpar arquivo do storage após falha [${uploadId}]`,\n            {\n              uploadId,\n              caminhoArmazenamento,\n              cleanupError: cleanupError.message,\n              originalError: error.message,\n            },\n          );\n        }\n      }\n\n      // Re-lançar exceções conhecidas\n      if (\n        error instanceof BadRequestException ||\n        error instanceof NotFoundException\n      ) {\n        throw error;\n      }\n\n      // Tratar erros específicos do storage\n      if (error.message?.includes('S3') || error.message?.includes('storage')) {\n        throw new InternalServerErrorException(\n          'Erro no sistema de armazenamento. Tente novamente em alguns minutos.',\n        );\n      }\n\n      // Tratar erros de banco de dados\n      if (\n        error.message?.includes('database') ||\n        error.message?.includes('connection')\n      ) {\n        throw new InternalServerErrorException(\n          'Erro de conexão com banco de dados. Tente novamente.',\n        );\n      }\n\n      // Erro genérico\n      throw new InternalServerErrorException(\n        'Erro interno no upload do documento. Contate o suporte se o problema persistir.',\n      );\n    }\n  }\n\n  /**\n   * Marca um documento como verificado\n   */\n  async verificar(id: string, usuarioId: string, observacoes?: string) {\n    const documento = await this.findById(id);\n\n    if (documento.verificado) {\n      throw new BadRequestException('Documento já foi verificado');\n    }\n\n    documento.verificado = true;\n    documento.data_verificacao = new Date();\n    documento.usuario_verificacao_id = usuarioId;\n    documento.observacoes_verificacao = observacoes;\n\n    const documentoAtualizado = await this.documentoRepository.save(documento);\n\n    return this.documentoRepository\n      .createQueryBuilder('documento')\n      .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')\n      .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')\n      .where('documento.id = :id', { id: documentoAtualizado.id })\n      .getOne();\n  }\n\n  /**\n   * Remove um documento (soft delete)\n   */\n  async remover(id: string, usuarioId: string) {\n    const documento = await this.findById(id);\n\n    documento.removed_at = new Date();\n    // Nota: removed_by não está definido na entidade, seria necessário adicionar se precisar\n\n    return this.documentoRepository.save(documento);\n  }\n\n  /**\n   * Busca documentos reutilizáveis por tipo e cidadão\n   */\n  async findReutilizaveis(cidadaoId?: string, tipo?: string) {\n    const queryBuilder = this.documentoRepository\n      .createQueryBuilder('documento')\n      .leftJoinAndSelect('documento.usuario_upload', 'usuario_upload')\n      .leftJoinAndSelect('documento.usuario_verificacao', 'usuario_verificacao')\n      .where('documento.reutilizavel = :reutilizavel', { reutilizavel: true })\n      .andWhere('documento.verificado = :verificado', { verificado: true })\n      .andWhere('documento.removed_at IS NULL')\n      .andWhere(\n        '(documento.data_validade IS NULL OR documento.data_validade >= :now)',\n        { now: new Date() },\n      )\n      .orderBy('documento.data_upload', 'DESC');\n\n    if (cidadaoId) {\n      queryBuilder.andWhere('documento.cidadao_id = :cidadaoId', { cidadaoId });\n    }\n\n    if (tipo) {\n      queryBuilder.andWhere('documento.tipo = :tipo', { tipo });\n    }\n\n    return queryBuilder.getMany();\n  }\n\n  /**\n   * Obtém estatísticas de documentos\n   */\n  async getEstatisticas(cidadaoId?: string) {\n    const baseQuery = this.documentoRepository\n      .createQueryBuilder('documento')\n      .where('documento.removed_at IS NULL');\n\n    if (cidadaoId) {\n      baseQuery.andWhere('documento.cidadao_id = :cidadaoId', { cidadaoId });\n    }\n\n    const [total, verificados, pendentes, reutilizaveis] = await Promise.all([\n      baseQuery.getCount(),\n      baseQuery\n        .clone()\n        .andWhere('documento.verificado = :verificado', { verificado: true })\n        .getCount(),\n      baseQuery\n        .clone()\n        .andWhere('documento.verificado = :verificado', { verificado: false })\n        .getCount(),\n      baseQuery\n        .clone()\n        .andWhere('documento.reutilizavel = :reutilizavel', {\n          reutilizavel: true,\n        })\n        .getCount(),\n    ]);\n\n    return {\n      total,\n      verificados,\n      pendentes,\n      reutilizaveis,\n    };\n  }\n}\n"],"version":3}