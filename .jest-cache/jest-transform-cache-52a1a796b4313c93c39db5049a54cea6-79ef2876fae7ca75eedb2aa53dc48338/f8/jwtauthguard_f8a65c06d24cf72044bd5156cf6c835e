37d8a155ea19bf31be04bf55f608d558
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtAuthGuard = void 0;
// src/auth/guards/jwt-auth.guard.ts
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const passport_1 = require("@nestjs/passport");
const jwt_1 = require("@nestjs/jwt");
const strategy_constant_1 = require("../constants/strategy.constant");
const public_decorator_1 = require("../decorators/public.decorator");
const jwt_blacklist_service_1 = require("../services/jwt-blacklist.service");
let JwtAuthGuard = class JwtAuthGuard extends (0, passport_1.AuthGuard)(strategy_constant_1.STRATEGY_JWT_AUTH) {
    reflector;
    jwtService;
    jwtBlacklistService;
    constructor(reflector, jwtService, jwtBlacklistService) {
        super();
        this.reflector = reflector;
        this.jwtService = jwtService;
        this.jwtBlacklistService = jwtBlacklistService;
    }
    async canActivate(context) {
        // Verificar se a rota está marcada como pública
        const isPublic = this.reflector.getAllAndOverride(public_decorator_1.IS_PUBLIC_KEY, [
            context.getHandler(),
            context.getClass(),
        ]);
        // Se a rota for pública, permitir acesso sem autenticação
        if (isPublic) {
            return true;
        }
        // Adicionando verificações de token nos cabeçalhos
        const request = context.switchToHttp().getRequest();
        const authHeader = request.headers.authorization;
        if (!authHeader || !authHeader.startsWith('Bearer ')) {
            throw new common_1.UnauthorizedException('Token de autenticação não fornecido');
        }
        // Extrair o token do cabeçalho
        const token = authHeader.substring(7);
        try {
            // Decodificar o token para obter o JTI
            const decodedToken = this.jwtService.decode(token);
            if (!decodedToken || !decodedToken.jti) {
                throw new common_1.UnauthorizedException('Token inválido - JTI não encontrado');
            }
            // Verificar se o token está na blacklist, usando o formato correto
            const checkBlacklistResult = await this.jwtBlacklistService.isTokenBlacklisted({
                jti: decodedToken.jti
            });
            if (checkBlacklistResult.is_blacklisted) {
                throw new common_1.UnauthorizedException('Token foi revogado');
            }
        }
        catch (error) {
            if (error instanceof common_1.UnauthorizedException) {
                throw error;
            }
            // Se houver erro na decodificação, deixar o passport lidar com isso
        }
        // Continuar com a validação padrão do passport
        const result = await super.canActivate(context);
        return result;
    }
    handleRequest(err, user, info) {
        // Você pode lançar uma exceção com base nos argumentos "info" ou "err"
        if (err || !user) {
            throw (err ||
                new common_1.UnauthorizedException(info instanceof Error ? info.message : 'Falha na autenticação'));
        }
        return user;
    }
};
exports.JwtAuthGuard = JwtAuthGuard;
exports.JwtAuthGuard = JwtAuthGuard = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object, typeof (_b = typeof jwt_1.JwtService !== "undefined" && jwt_1.JwtService) === "function" ? _b : Object, typeof (_c = typeof jwt_blacklist_service_1.JwtBlacklistService !== "undefined" && jwt_blacklist_service_1.JwtBlacklistService) === "function" ? _c : Object])
], JwtAuthGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXGd1YXJkc1xcand0LWF1dGguZ3VhcmQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLG9DQUFvQztBQUNwQywyQ0FJd0I7QUFDeEIsdUNBQXlDO0FBQ3pDLCtDQUE2QztBQUM3QyxxQ0FBeUM7QUFDekMsc0VBQW1FO0FBQ25FLHFFQUErRDtBQUMvRCw2RUFBd0U7QUFHakUsSUFBTSxZQUFZLEdBQWxCLE1BQU0sWUFBYSxTQUFRLElBQUEsb0JBQVMsRUFBQyxxQ0FBaUIsQ0FBQztJQUVsRDtJQUNBO0lBQ0E7SUFIVixZQUNVLFNBQW9CLEVBQ3BCLFVBQXNCLEVBQ3RCLG1CQUF3QztRQUVoRCxLQUFLLEVBQUUsQ0FBQztRQUpBLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0Qix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO0lBR2xELENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQXlCO1FBQ3pDLGdEQUFnRDtRQUNoRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFVLGdDQUFhLEVBQUU7WUFDeEUsT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUNwQixPQUFPLENBQUMsUUFBUSxFQUFFO1NBQ25CLENBQUMsQ0FBQztRQUVILDBEQUEwRDtRQUMxRCxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ2IsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBRUQsbURBQW1EO1FBQ25ELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNwRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUVqRCxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQ3JELE1BQU0sSUFBSSw4QkFBcUIsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBQ3pFLENBQUM7UUFFRCwrQkFBK0I7UUFDL0IsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QyxJQUFJLENBQUM7WUFDSCx1Q0FBdUM7WUFDdkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFRLENBQUM7WUFFMUQsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDdkMsTUFBTSxJQUFJLDhCQUFxQixDQUFDLHFDQUFxQyxDQUFDLENBQUM7WUFDekUsQ0FBQztZQUVELG1FQUFtRTtZQUNuRSxNQUFNLG9CQUFvQixHQUFHLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDO2dCQUM3RSxHQUFHLEVBQUUsWUFBWSxDQUFDLEdBQUc7YUFDdEIsQ0FBQyxDQUFDO1lBRUgsSUFBSSxvQkFBb0IsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDeEMsTUFBTSxJQUFJLDhCQUFxQixDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDeEQsQ0FBQztRQUNILENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSxLQUFLLFlBQVksOEJBQXFCLEVBQUUsQ0FBQztnQkFDM0MsTUFBTSxLQUFLLENBQUM7WUFDZCxDQUFDO1lBQ0Qsb0VBQW9FO1FBQ3RFLENBQUM7UUFFRCwrQ0FBK0M7UUFDL0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hELE9BQU8sTUFBaUIsQ0FBQztJQUMzQixDQUFDO0lBRUQsYUFBYSxDQUFDLEdBQVEsRUFBRSxJQUFTLEVBQUUsSUFBUztRQUMxQyx1RUFBdUU7UUFDdkUsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixNQUFNLENBQ0osR0FBRztnQkFDSCxJQUFJLDhCQUFxQixDQUN2QixJQUFJLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FDL0QsQ0FDRixDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUE7QUF4RVksb0NBQVk7dUJBQVosWUFBWTtJQUR4QixJQUFBLG1CQUFVLEdBQUU7eURBR1UsZ0JBQVMsb0JBQVQsZ0JBQVMsb0RBQ1IsZ0JBQVUsb0JBQVYsZ0JBQVUsb0RBQ0QsMkNBQW1CLG9CQUFuQiwyQ0FBbUI7R0FKdkMsWUFBWSxDQXdFeEIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXGd1YXJkc1xcand0LWF1dGguZ3VhcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2F1dGgvZ3VhcmRzL2p3dC1hdXRoLmd1YXJkLnRzXG5pbXBvcnQge1xuICBFeGVjdXRpb25Db250ZXh0LFxuICBJbmplY3RhYmxlLFxuICBVbmF1dGhvcml6ZWRFeGNlcHRpb24sXG59IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IFJlZmxlY3RvciB9IGZyb20gJ0BuZXN0anMvY29yZSc7XG5pbXBvcnQgeyBBdXRoR3VhcmQgfSBmcm9tICdAbmVzdGpzL3Bhc3Nwb3J0JztcbmltcG9ydCB7IEp3dFNlcnZpY2UgfSBmcm9tICdAbmVzdGpzL2p3dCc7XG5pbXBvcnQgeyBTVFJBVEVHWV9KV1RfQVVUSCB9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneS5jb25zdGFudCc7XG5pbXBvcnQgeyBJU19QVUJMSUNfS0VZIH0gZnJvbSAnLi4vZGVjb3JhdG9ycy9wdWJsaWMuZGVjb3JhdG9yJztcbmltcG9ydCB7IEp3dEJsYWNrbGlzdFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9qd3QtYmxhY2tsaXN0LnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSnd0QXV0aEd1YXJkIGV4dGVuZHMgQXV0aEd1YXJkKFNUUkFURUdZX0pXVF9BVVRIKSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVmbGVjdG9yOiBSZWZsZWN0b3IsXG4gICAgcHJpdmF0ZSBqd3RTZXJ2aWNlOiBKd3RTZXJ2aWNlLFxuICAgIHByaXZhdGUgand0QmxhY2tsaXN0U2VydmljZTogSnd0QmxhY2tsaXN0U2VydmljZSxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGFzeW5jIGNhbkFjdGl2YXRlKGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAvLyBWZXJpZmljYXIgc2UgYSByb3RhIGVzdMOhIG1hcmNhZGEgY29tbyBww7pibGljYVxuICAgIGNvbnN0IGlzUHVibGljID0gdGhpcy5yZWZsZWN0b3IuZ2V0QWxsQW5kT3ZlcnJpZGU8Ym9vbGVhbj4oSVNfUFVCTElDX0tFWSwgW1xuICAgICAgY29udGV4dC5nZXRIYW5kbGVyKCksXG4gICAgICBjb250ZXh0LmdldENsYXNzKCksXG4gICAgXSk7XG5cbiAgICAvLyBTZSBhIHJvdGEgZm9yIHDDumJsaWNhLCBwZXJtaXRpciBhY2Vzc28gc2VtIGF1dGVudGljYcOnw6NvXG4gICAgaWYgKGlzUHVibGljKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBBZGljaW9uYW5kbyB2ZXJpZmljYcOnw7VlcyBkZSB0b2tlbiBub3MgY2FiZcOnYWxob3NcbiAgICBjb25zdCByZXF1ZXN0ID0gY29udGV4dC5zd2l0Y2hUb0h0dHAoKS5nZXRSZXF1ZXN0KCk7XG4gICAgY29uc3QgYXV0aEhlYWRlciA9IHJlcXVlc3QuaGVhZGVycy5hdXRob3JpemF0aW9uO1xuXG4gICAgaWYgKCFhdXRoSGVhZGVyIHx8ICFhdXRoSGVhZGVyLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSkge1xuICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbignVG9rZW4gZGUgYXV0ZW50aWNhw6fDo28gbsOjbyBmb3JuZWNpZG8nKTtcbiAgICB9XG5cbiAgICAvLyBFeHRyYWlyIG8gdG9rZW4gZG8gY2FiZcOnYWxob1xuICAgIGNvbnN0IHRva2VuID0gYXV0aEhlYWRlci5zdWJzdHJpbmcoNyk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gRGVjb2RpZmljYXIgbyB0b2tlbiBwYXJhIG9idGVyIG8gSlRJXG4gICAgICBjb25zdCBkZWNvZGVkVG9rZW4gPSB0aGlzLmp3dFNlcnZpY2UuZGVjb2RlKHRva2VuKSBhcyBhbnk7XG4gICAgICBcbiAgICAgIGlmICghZGVjb2RlZFRva2VuIHx8ICFkZWNvZGVkVG9rZW4uanRpKSB7XG4gICAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFeGNlcHRpb24oJ1Rva2VuIGludsOhbGlkbyAtIEpUSSBuw6NvIGVuY29udHJhZG8nKTtcbiAgICAgIH1cblxuICAgICAgLy8gVmVyaWZpY2FyIHNlIG8gdG9rZW4gZXN0w6EgbmEgYmxhY2tsaXN0LCB1c2FuZG8gbyBmb3JtYXRvIGNvcnJldG9cbiAgICAgIGNvbnN0IGNoZWNrQmxhY2tsaXN0UmVzdWx0ID0gYXdhaXQgdGhpcy5qd3RCbGFja2xpc3RTZXJ2aWNlLmlzVG9rZW5CbGFja2xpc3RlZCh7XG4gICAgICAgIGp0aTogZGVjb2RlZFRva2VuLmp0aVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmIChjaGVja0JsYWNrbGlzdFJlc3VsdC5pc19ibGFja2xpc3RlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVW5hdXRob3JpemVkRXhjZXB0aW9uKCdUb2tlbiBmb2kgcmV2b2dhZG8nKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVW5hdXRob3JpemVkRXhjZXB0aW9uKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgLy8gU2UgaG91dmVyIGVycm8gbmEgZGVjb2RpZmljYcOnw6NvLCBkZWl4YXIgbyBwYXNzcG9ydCBsaWRhciBjb20gaXNzb1xuICAgIH1cblxuICAgIC8vIENvbnRpbnVhciBjb20gYSB2YWxpZGHDp8OjbyBwYWRyw6NvIGRvIHBhc3Nwb3J0XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuY2FuQWN0aXZhdGUoY29udGV4dCk7XG4gICAgcmV0dXJuIHJlc3VsdCBhcyBib29sZWFuO1xuICB9XG5cbiAgaGFuZGxlUmVxdWVzdChlcnI6IGFueSwgdXNlcjogYW55LCBpbmZvOiBhbnkpIHtcbiAgICAvLyBWb2PDqiBwb2RlIGxhbsOnYXIgdW1hIGV4Y2XDp8OjbyBjb20gYmFzZSBub3MgYXJndW1lbnRvcyBcImluZm9cIiBvdSBcImVyclwiXG4gICAgaWYgKGVyciB8fCAhdXNlcikge1xuICAgICAgdGhyb3cgKFxuICAgICAgICBlcnIgfHxcbiAgICAgICAgbmV3IFVuYXV0aG9yaXplZEV4Y2VwdGlvbihcbiAgICAgICAgICBpbmZvIGluc3RhbmNlb2YgRXJyb3IgPyBpbmZvLm1lc3NhZ2UgOiAnRmFsaGEgbmEgYXV0ZW50aWNhw6fDo28nLFxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdXNlcjtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9