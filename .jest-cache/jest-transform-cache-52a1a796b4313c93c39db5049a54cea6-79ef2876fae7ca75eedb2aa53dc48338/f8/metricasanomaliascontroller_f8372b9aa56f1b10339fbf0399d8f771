a2aedc2c781a985216e0f91c91dc3af2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasAnomaliasController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const services_1 = require("../services");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
/**
 * Controlador para detecção de anomalias e análise de tendências
 */
let MetricasAnomaliasController = class MetricasAnomaliasController {
    anomaliasService;
    constructor(anomaliasService) {
        this.anomaliasService = anomaliasService;
    }
    /**
     * Detecta anomalias para um snapshot específico
     */
    async detectarAnomalias(id, nivelConfianca, janelaTemporal) {
        return this.anomaliasService.detectarAnomaliasPorSnapshot(id, nivelConfianca || services_1.NivelConfiancaAnomalia.MEDIO, janelaTemporal ? Number(janelaTemporal) : 30);
    }
    /**
     * Executa detecção de anomalias em lote para todas as métricas
     */
    async detectarAnomaliasBatch(nivelConfianca, janelaTemporal) {
        return this.anomaliasService.detectarAnomaliasBatch(janelaTemporal ? Number(janelaTemporal) : 7, nivelConfianca || services_1.NivelConfiancaAnomalia.MEDIO);
    }
    /**
     * Analisa tendências para uma métrica
     */
    async analisarTendencias(id, body) {
        return this.anomaliasService.analisarTendencias(id, new Date(body.data_inicial), new Date(body.data_final), body.dimensoes || {});
    }
};
exports.MetricasAnomaliasController = MetricasAnomaliasController;
__decorate([
    (0, common_1.Post)('anomalias/snapshot/:id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({ summary: 'Detectar anomalias para um snapshot específico' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do snapshot' }),
    (0, swagger_1.ApiQuery)({
        name: 'nivel_confianca',
        description: 'Nível de confiança para detecção',
        enum: services_1.NivelConfiancaAnomalia,
        required: false,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'janela_temporal',
        description: 'Número de dias a considerar para o histórico',
        required: false,
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Resultado da detecção de anomalias',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Snapshot não encontrado',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Query)('nivel_confianca')),
    __param(2, (0, common_1.Query)('janela_temporal')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_b = typeof services_1.NivelConfiancaAnomalia !== "undefined" && services_1.NivelConfiancaAnomalia) === "function" ? _b : Object, Number]),
    __metadata("design:returntype", Promise)
], MetricasAnomaliasController.prototype, "detectarAnomalias", null);
__decorate([
    (0, common_1.Post)('anomalias/batch'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({
        summary: 'Detectar anomalias em lote para todas as métricas',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'nivel_confianca',
        description: 'Nível de confiança para detecção',
        enum: services_1.NivelConfiancaAnomalia,
        required: false,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'janela_temporal',
        description: 'Número de dias a considerar para o histórico',
        required: false,
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Lista de anomalias detectadas',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Query)('nivel_confianca')),
    __param(1, (0, common_1.Query)('janela_temporal')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof services_1.NivelConfiancaAnomalia !== "undefined" && services_1.NivelConfiancaAnomalia) === "function" ? _c : Object, Number]),
    __metadata("design:returntype", Promise)
], MetricasAnomaliasController.prototype, "detectarAnomaliasBatch", null);
__decorate([
    (0, common_1.Post)('tendencias/metrica/:id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.COORDENADOR),
    (0, swagger_1.ApiOperation)({ summary: 'Analisar tendências para uma métrica' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID da métrica' }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Resultado da análise de tendências',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.NOT_FOUND,
        description: 'Métrica não encontrada',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.UNAUTHORIZED,
        description: 'Não autorizado',
    }),
    (0, swagger_1.ApiResponse)({ status: common_1.HttpStatus.FORBIDDEN, description: 'Acesso negado' }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], MetricasAnomaliasController.prototype, "analisarTendencias", null);
exports.MetricasAnomaliasController = MetricasAnomaliasController = __decorate([
    (0, swagger_1.ApiTags)('Métricas e Dashboard'),
    (0, common_1.Controller)('metricas/analise'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof services_1.MetricasAnomaliasService !== "undefined" && services_1.MetricasAnomaliasService) === "function" ? _a : Object])
], MetricasAnomaliasController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,