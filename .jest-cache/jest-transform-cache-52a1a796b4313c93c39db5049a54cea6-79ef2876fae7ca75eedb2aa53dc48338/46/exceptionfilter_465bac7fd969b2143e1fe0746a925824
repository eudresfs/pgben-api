34fe47eb0307795f4440969aabb0f574
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalExceptionFilter = void 0;
const common_1 = require("@nestjs/common");
const logging_service_1 = require("./logging.service");
/**
 * Filtro de Exceções Global
 *
 * Captura todas as exceções lançadas pela aplicação e:
 * - Registra informações detalhadas no log
 * - Formata a resposta de erro para o cliente
 * - Adiciona informações de rastreamento em ambiente de desenvolvimento
 */
let GlobalExceptionFilter = class GlobalExceptionFilter {
    loggingService;
    constructor(loggingService) {
        this.loggingService = loggingService;
    }
    catch(exception, host) {
        const ctx = host.switchToHttp();
        const request = ctx.getRequest();
        const response = ctx.getResponse();
        const status = exception instanceof common_1.HttpException
            ? exception.getStatus()
            : common_1.HttpStatus.INTERNAL_SERVER_ERROR;
        const message = exception instanceof common_1.HttpException
            ? exception.message
            : 'Erro interno do servidor';
        const errorResponse = {
            statusCode: status,
            timestamp: new Date().toISOString(),
            path: request.url,
            method: request.method,
            message,
        };
        // Adicionar detalhes do erro em ambiente de desenvolvimento
        if (process.env.NODE_ENV !== 'production') {
            errorResponse['error'] =
                exception instanceof Error ? exception.name : 'Erro desconhecido';
            errorResponse['stack'] =
                exception instanceof Error ? exception.stack : undefined;
        }
        // Log detalhado do erro
        const userId = request.user ? request.user.id : 'anônimo';
        const userIp = request.ip;
        const userAgent = request.headers?.['user-agent'] || request.get?.('user-agent') || '';
        this.loggingService.error(`Exceção capturada: ${request.method} ${request.url} - Status: ${status} - Mensagem: ${message}`, exception instanceof Error
            ? exception.stack
            : 'Sem stack trace disponível', 'ExceptionFilter', {
            method: request.method,
            path: request.url,
            statusCode: status,
            message,
            userId,
            ip: userIp,
            userAgent,
        });
        response.status(status).json(errorResponse);
    }
};
exports.GlobalExceptionFilter = GlobalExceptionFilter;
exports.GlobalExceptionFilter = GlobalExceptionFilter = __decorate([
    (0, common_1.Catch)(),
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof logging_service_1.LoggingService !== "undefined" && logging_service_1.LoggingService) === "function" ? _a : Object])
], GlobalExceptionFilter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbG9nZ2luZ1xcZXhjZXB0aW9uLmZpbHRlci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsMkNBT3dCO0FBQ3hCLHVEQUFtRDtBQVVuRDs7Ozs7OztHQU9HO0FBR0ksSUFBTSxxQkFBcUIsR0FBM0IsTUFBTSxxQkFBcUI7SUFDSDtJQUE3QixZQUE2QixjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFBRyxDQUFDO0lBRS9ELEtBQUssQ0FBQyxTQUFrQixFQUFFLElBQW1CO1FBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFXLENBQUM7UUFDMUMsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBWSxDQUFDO1FBRTdDLE1BQU0sTUFBTSxHQUNWLFNBQVMsWUFBWSxzQkFBYTtZQUNoQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRTtZQUN2QixDQUFDLENBQUMsbUJBQVUsQ0FBQyxxQkFBcUIsQ0FBQztRQUV2QyxNQUFNLE9BQU8sR0FDWCxTQUFTLFlBQVksc0JBQWE7WUFDaEMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPO1lBQ25CLENBQUMsQ0FBQywwQkFBMEIsQ0FBQztRQUVqQyxNQUFNLGFBQWEsR0FBRztZQUNwQixVQUFVLEVBQUUsTUFBTTtZQUNsQixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7WUFDbkMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHO1lBQ2pCLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTTtZQUN0QixPQUFPO1NBQ1IsQ0FBQztRQUVGLDREQUE0RDtRQUM1RCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRSxDQUFDO1lBQzFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BCLFNBQVMsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDO1lBQ3BFLGFBQWEsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BCLFNBQVMsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUM3RCxDQUFDO1FBRUQsd0JBQXdCO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDMUQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUMxQixNQUFNLFNBQVMsR0FDYixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV2RSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FDdkIsc0JBQXNCLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLEdBQUcsY0FBYyxNQUFNLGdCQUFnQixPQUFPLEVBQUUsRUFDaEcsU0FBUyxZQUFZLEtBQUs7WUFDeEIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLO1lBQ2pCLENBQUMsQ0FBQyw0QkFBNEIsRUFDaEMsaUJBQWlCLEVBQ2pCO1lBQ0UsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1lBQ3RCLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRztZQUNqQixVQUFVLEVBQUUsTUFBTTtZQUNsQixPQUFPO1lBQ1AsTUFBTTtZQUNOLEVBQUUsRUFBRSxNQUFNO1lBQ1YsU0FBUztTQUNWLENBQ0YsQ0FBQztRQUVGLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRixDQUFBO0FBM0RZLHNEQUFxQjtnQ0FBckIscUJBQXFCO0lBRmpDLElBQUEsY0FBSyxHQUFFO0lBQ1AsSUFBQSxtQkFBVSxHQUFFO3lEQUVrQyxnQ0FBYyxvQkFBZCxnQ0FBYztHQURoRCxxQkFBcUIsQ0EyRGpDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXGxvZ2dpbmdcXGV4Y2VwdGlvbi5maWx0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRXhjZXB0aW9uRmlsdGVyLFxuICBDYXRjaCxcbiAgQXJndW1lbnRzSG9zdCxcbiAgSHR0cEV4Y2VwdGlvbixcbiAgSHR0cFN0YXR1cyxcbiAgSW5qZWN0YWJsZSxcbn0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgTG9nZ2luZ1NlcnZpY2UgfSBmcm9tICcuL2xvZ2dpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuXG4vLyBFc3RlbmRlciBhIGludGVyZmFjZSBSZXF1ZXN0IHBhcmEgaW5jbHVpciBhIHByb3ByaWVkYWRlIHVzZXJcbmRlY2xhcmUgbW9kdWxlICdleHByZXNzJyB7XG4gIGludGVyZmFjZSBSZXF1ZXN0IHtcbiAgICB1c2VyPzogYW55O1xuICB9XG59XG5cbi8qKlxuICogRmlsdHJvIGRlIEV4Y2XDp8O1ZXMgR2xvYmFsXG4gKlxuICogQ2FwdHVyYSB0b2RhcyBhcyBleGNlw6fDtWVzIGxhbsOnYWRhcyBwZWxhIGFwbGljYcOnw6NvIGU6XG4gKiAtIFJlZ2lzdHJhIGluZm9ybWHDp8O1ZXMgZGV0YWxoYWRhcyBubyBsb2dcbiAqIC0gRm9ybWF0YSBhIHJlc3Bvc3RhIGRlIGVycm8gcGFyYSBvIGNsaWVudGVcbiAqIC0gQWRpY2lvbmEgaW5mb3JtYcOnw7VlcyBkZSByYXN0cmVhbWVudG8gZW0gYW1iaWVudGUgZGUgZGVzZW52b2x2aW1lbnRvXG4gKi9cbkBDYXRjaCgpXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR2xvYmFsRXhjZXB0aW9uRmlsdGVyIGltcGxlbWVudHMgRXhjZXB0aW9uRmlsdGVyIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBsb2dnaW5nU2VydmljZTogTG9nZ2luZ1NlcnZpY2UpIHt9XG5cbiAgY2F0Y2goZXhjZXB0aW9uOiB1bmtub3duLCBob3N0OiBBcmd1bWVudHNIb3N0KSB7XG4gICAgY29uc3QgY3R4ID0gaG9zdC5zd2l0Y2hUb0h0dHAoKTtcbiAgICBjb25zdCByZXF1ZXN0ID0gY3R4LmdldFJlcXVlc3Q8UmVxdWVzdD4oKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGN0eC5nZXRSZXNwb25zZTxSZXNwb25zZT4oKTtcblxuICAgIGNvbnN0IHN0YXR1cyA9XG4gICAgICBleGNlcHRpb24gaW5zdGFuY2VvZiBIdHRwRXhjZXB0aW9uXG4gICAgICAgID8gZXhjZXB0aW9uLmdldFN0YXR1cygpXG4gICAgICAgIDogSHR0cFN0YXR1cy5JTlRFUk5BTF9TRVJWRVJfRVJST1I7XG5cbiAgICBjb25zdCBtZXNzYWdlID1cbiAgICAgIGV4Y2VwdGlvbiBpbnN0YW5jZW9mIEh0dHBFeGNlcHRpb25cbiAgICAgICAgPyBleGNlcHRpb24ubWVzc2FnZVxuICAgICAgICA6ICdFcnJvIGludGVybm8gZG8gc2Vydmlkb3InO1xuXG4gICAgY29uc3QgZXJyb3JSZXNwb25zZSA9IHtcbiAgICAgIHN0YXR1c0NvZGU6IHN0YXR1cyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgcGF0aDogcmVxdWVzdC51cmwsXG4gICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgbWVzc2FnZSxcbiAgICB9O1xuXG4gICAgLy8gQWRpY2lvbmFyIGRldGFsaGVzIGRvIGVycm8gZW0gYW1iaWVudGUgZGUgZGVzZW52b2x2aW1lbnRvXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGVycm9yUmVzcG9uc2VbJ2Vycm9yJ10gPVxuICAgICAgICBleGNlcHRpb24gaW5zdGFuY2VvZiBFcnJvciA/IGV4Y2VwdGlvbi5uYW1lIDogJ0Vycm8gZGVzY29uaGVjaWRvJztcbiAgICAgIGVycm9yUmVzcG9uc2VbJ3N0YWNrJ10gPVxuICAgICAgICBleGNlcHRpb24gaW5zdGFuY2VvZiBFcnJvciA/IGV4Y2VwdGlvbi5zdGFjayA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBMb2cgZGV0YWxoYWRvIGRvIGVycm9cbiAgICBjb25zdCB1c2VySWQgPSByZXF1ZXN0LnVzZXIgPyByZXF1ZXN0LnVzZXIuaWQgOiAnYW7DtG5pbW8nO1xuICAgIGNvbnN0IHVzZXJJcCA9IHJlcXVlc3QuaXA7XG4gICAgY29uc3QgdXNlckFnZW50ID1cbiAgICAgIHJlcXVlc3QuaGVhZGVycz8uWyd1c2VyLWFnZW50J10gfHwgcmVxdWVzdC5nZXQ/LigndXNlci1hZ2VudCcpIHx8ICcnO1xuXG4gICAgdGhpcy5sb2dnaW5nU2VydmljZS5lcnJvcihcbiAgICAgIGBFeGNlw6fDo28gY2FwdHVyYWRhOiAke3JlcXVlc3QubWV0aG9kfSAke3JlcXVlc3QudXJsfSAtIFN0YXR1czogJHtzdGF0dXN9IC0gTWVuc2FnZW06ICR7bWVzc2FnZX1gLFxuICAgICAgZXhjZXB0aW9uIGluc3RhbmNlb2YgRXJyb3JcbiAgICAgICAgPyBleGNlcHRpb24uc3RhY2tcbiAgICAgICAgOiAnU2VtIHN0YWNrIHRyYWNlIGRpc3BvbsOtdmVsJyxcbiAgICAgICdFeGNlcHRpb25GaWx0ZXInLFxuICAgICAge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRoOiByZXF1ZXN0LnVybCxcbiAgICAgICAgc3RhdHVzQ29kZTogc3RhdHVzLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIGlwOiB1c2VySXAsXG4gICAgICAgIHVzZXJBZ2VudCxcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLnN0YXR1cyhzdGF0dXMpLmpzb24oZXJyb3JSZXNwb25zZSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==