{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\exception.filter.ts","mappings":";;;;;;;;;;;;;AAAA,2CAOwB;AACxB,uDAAmD;AAUnD;;;;;;;GAOG;AAGI,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;IACH;IAA7B,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;IAAG,CAAC;IAE/D,KAAK,CAAC,SAAkB,EAAE,IAAmB;QAC3C,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAChC,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,EAAW,CAAC;QAC1C,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAY,CAAC;QAE7C,MAAM,MAAM,GACV,SAAS,YAAY,sBAAa;YAChC,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE;YACvB,CAAC,CAAC,mBAAU,CAAC,qBAAqB,CAAC;QAEvC,MAAM,OAAO,GACX,SAAS,YAAY,sBAAa;YAChC,CAAC,CAAC,SAAS,CAAC,OAAO;YACnB,CAAC,CAAC,0BAA0B,CAAC;QAEjC,MAAM,aAAa,GAAG;YACpB,UAAU,EAAE,MAAM;YAClB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,IAAI,EAAE,OAAO,CAAC,GAAG;YACjB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,OAAO;SACR,CAAC;QAEF,4DAA4D;QAC5D,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YAC1C,aAAa,CAAC,OAAO,CAAC;gBACpB,SAAS,YAAY,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,CAAC;YACpE,aAAa,CAAC,OAAO,CAAC;gBACpB,SAAS,YAAY,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7D,CAAC;QAED,wBAAwB;QACxB,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;QAC1D,MAAM,MAAM,GAAG,OAAO,CAAC,EAAE,CAAC;QAC1B,MAAM,SAAS,GACb,OAAO,CAAC,OAAO,EAAE,CAAC,YAAY,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAEvE,IAAI,CAAC,cAAc,CAAC,KAAK,CACvB,sBAAsB,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,GAAG,cAAc,MAAM,gBAAgB,OAAO,EAAE,EAChG,SAAS,YAAY,KAAK;YACxB,CAAC,CAAC,SAAS,CAAC,KAAK;YACjB,CAAC,CAAC,4BAA4B,EAChC,iBAAiB,EACjB;YACE,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,IAAI,EAAE,OAAO,CAAC,GAAG;YACjB,UAAU,EAAE,MAAM;YAClB,OAAO;YACP,MAAM;YACN,EAAE,EAAE,MAAM;YACV,SAAS;SACV,CACF,CAAC;QAEF,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC;CACF,CAAA;AA3DY,sDAAqB;gCAArB,qBAAqB;IAFjC,IAAA,cAAK,GAAE;IACP,IAAA,mBAAU,GAAE;yDAEkC,gCAAc,oBAAd,gCAAc;GADhD,qBAAqB,CA2DjC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\exception.filter.ts"],"sourcesContent":["import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { LoggingService } from './logging.service';\nimport { Request, Response } from 'express';\n\n// Estender a interface Request para incluir a propriedade user\ndeclare module 'express' {\n  interface Request {\n    user?: any;\n  }\n}\n\n/**\n * Filtro de Exceções Global\n *\n * Captura todas as exceções lançadas pela aplicação e:\n * - Registra informações detalhadas no log\n * - Formata a resposta de erro para o cliente\n * - Adiciona informações de rastreamento em ambiente de desenvolvimento\n */\n@Catch()\n@Injectable()\nexport class GlobalExceptionFilter implements ExceptionFilter {\n  constructor(private readonly loggingService: LoggingService) {}\n\n  catch(exception: unknown, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest<Request>();\n    const response = ctx.getResponse<Response>();\n\n    const status =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const message =\n      exception instanceof HttpException\n        ? exception.message\n        : 'Erro interno do servidor';\n\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      method: request.method,\n      message,\n    };\n\n    // Adicionar detalhes do erro em ambiente de desenvolvimento\n    if (process.env.NODE_ENV !== 'production') {\n      errorResponse['error'] =\n        exception instanceof Error ? exception.name : 'Erro desconhecido';\n      errorResponse['stack'] =\n        exception instanceof Error ? exception.stack : undefined;\n    }\n\n    // Log detalhado do erro\n    const userId = request.user ? request.user.id : 'anônimo';\n    const userIp = request.ip;\n    const userAgent =\n      request.headers?.['user-agent'] || request.get?.('user-agent') || '';\n\n    this.loggingService.error(\n      `Exceção capturada: ${request.method} ${request.url} - Status: ${status} - Mensagem: ${message}`,\n      exception instanceof Error\n        ? exception.stack\n        : 'Sem stack trace disponível',\n      'ExceptionFilter',\n      {\n        method: request.method,\n        path: request.url,\n        statusCode: status,\n        message,\n        userId,\n        ip: userIp,\n        userAgent,\n      },\n    );\n\n    response.status(status).json(errorResponse);\n  }\n}\n"],"version":3}