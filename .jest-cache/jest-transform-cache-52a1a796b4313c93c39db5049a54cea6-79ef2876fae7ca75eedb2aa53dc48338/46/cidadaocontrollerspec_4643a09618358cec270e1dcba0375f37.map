{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\tests\\cidadao.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\tests\\cidadao.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CidadaoController } from '../controllers/cidadao.controller';\nimport { CidadaoService } from '../services/cidadao.service';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport { Sexo } from '../entities/cidadao.entity';\n\n/**\n * Testes unitários para o controlador de cidadão\n *\n * Verifica o funcionamento dos endpoints relacionados aos cidadãos\n */\ndescribe('CidadaoController', () => {\n  let controller: CidadaoController;\n\n  // Mock do serviço de cidadão\n  const mockCidadaoService = {\n    findAll: jest.fn(),\n    findById: jest.fn(),\n    findByCpf: jest.fn(),\n    findByNis: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    findSolicitacoesByCidadaoId: jest.fn(),\n    addComposicaoFamiliar: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [CidadaoController],\n      providers: [\n        {\n          provide: CidadaoService,\n          useValue: mockCidadaoService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<CidadaoController>(CidadaoController);\n  });\n\n  it('deve ser definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista paginada de cidadãos', async () => {\n      const mockResult = {\n        items: [\n          {\n            id: '1',\n            nome: 'João Silva',\n            cpf: '123.456.789-00',\n          },\n          {\n            id: '2',\n            nome: 'Maria Souza',\n            cpf: '987.654.321-00',\n          },\n        ],\n        meta: {\n          total: 2,\n          page: 1,\n          limit: 10,\n          pages: 1,\n        },\n      };\n\n      mockCidadaoService.findAll.mockResolvedValue(mockResult);\n\n      // Mock do objeto request com o usuário logado\n      const mockRequest = {\n        user: {\n          unidadeId: 'unidade-id-1',\n        },\n      };\n\n      const result = await controller.findAll(\n        mockRequest,\n        1,\n        10,\n        undefined,\n        undefined,\n      );\n\n      expect(result).toEqual(mockResult);\n      expect(mockCidadaoService.findAll).toHaveBeenCalledWith({\n        page: 1,\n        limit: 10,\n        search: undefined,\n        bairro: undefined,\n        unidadeId: 'unidade-id-1',\n      });\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar um cidadão quando encontrado pelo ID', async () => {\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n      };\n\n      mockCidadaoService.findById.mockResolvedValue(mockCidadao);\n\n      const result = await controller.findOne('1');\n\n      expect(result).toEqual(mockCidadao);\n      expect(mockCidadaoService.findById).toHaveBeenCalledWith('1');\n    });\n\n    it('deve propagar NotFoundException quando o cidadão não é encontrado', async () => {\n      mockCidadaoService.findById.mockRejectedValue(\n        new NotFoundException('Cidadão não encontrado'),\n      );\n\n      await expect(controller.findOne('999')).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockCidadaoService.findById).toHaveBeenCalledWith('999');\n    });\n  });\n\n  describe('findByCpf', () => {\n    it('deve retornar um cidadão quando encontrado pelo CPF', async () => {\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n      };\n\n      mockCidadaoService.findByCpf.mockResolvedValue(mockCidadao);\n\n      const result = await controller.findByCpf('123.456.789-00');\n\n      expect(result).toEqual(mockCidadao);\n      expect(mockCidadaoService.findByCpf).toHaveBeenCalledWith(\n        '123.456.789-00',\n      );\n    });\n\n    it('deve propagar NotFoundException quando o cidadão não é encontrado pelo CPF', async () => {\n      mockCidadaoService.findByCpf.mockRejectedValue(\n        new NotFoundException('Cidadão não encontrado'),\n      );\n\n      await expect(controller.findByCpf('999.999.999-99')).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockCidadaoService.findByCpf).toHaveBeenCalledWith(\n        '999.999.999-99',\n      );\n    });\n  });\n\n  describe('create', () => {\n    it('deve criar um novo cidadão quando os dados são válidos', async () => {\n      const createCidadaoDto = {\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        rg: '1234567',\n        data_nascimento: new Date('1990-01-01'),\n        sexo: Sexo.MASCULINO,\n        renda: 1500,\n        telefone: '(84) 99999-9999',\n        email: 'joao@example.com',\n        endereco: {\n          cep: '59000-000',\n          logradouro: 'Rua Principal',\n          numero: '123',\n          bairro: 'Centro',\n          cidade: 'Natal',\n          estado: 'RN',\n        },\n      };\n\n      const mockCidadao = {\n        id: '1',\n        ...createCidadaoDto,\n      };\n\n      mockCidadaoService.create.mockResolvedValue(mockCidadao);\n\n      // Mock do objeto request com o usuário logado\n      const mockRequest = {\n        user: {\n          unidadeId: 'unidade-id-1',\n        },\n      };\n\n      const result = await controller.create(createCidadaoDto, mockRequest);\n\n      expect(result).toEqual(mockCidadao);\n      expect(mockCidadaoService.create).toHaveBeenCalledWith(\n        createCidadaoDto,\n        'unidade-id-1',\n      );\n    });\n\n    it('deve propagar ConflictException quando já existe um cidadão com o mesmo CPF', async () => {\n      const createCidadaoDto = {\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        rg: '1234567',\n        data_nascimento: new Date('1990-01-01'),\n        sexo: Sexo.MASCULINO,\n        endereco: {\n          cep: '59000-000',\n          logradouro: 'Rua Principal',\n          numero: '123',\n          bairro: 'Centro',\n          cidade: 'Natal',\n          estado: 'RN',\n        },\n      };\n\n      mockCidadaoService.create.mockRejectedValue(\n        new ConflictException('CPF já cadastrado'),\n      );\n\n      // Mock do objeto request com o usuário logado\n      const mockRequest = {\n        user: {\n          unidadeId: 'unidade-id-1',\n        },\n      };\n\n      await expect(\n        controller.create(createCidadaoDto, mockRequest),\n      ).rejects.toThrow(ConflictException);\n      expect(mockCidadaoService.create).toHaveBeenCalledWith(\n        createCidadaoDto,\n        'unidade-id-1',\n      );\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar um cidadão existente', async () => {\n      const updateCidadaoDto = {\n        nome: 'João Silva Atualizado',\n        telefone: '(84) 88888-8888',\n      };\n\n      const mockUpdatedCidadao = {\n        id: '1',\n        nome: 'João Silva Atualizado',\n        cpf: '123.456.789-00',\n        telefone: '(84) 88888-8888',\n      };\n\n      mockCidadaoService.update.mockResolvedValue(mockUpdatedCidadao);\n\n      const result = await controller.update('1', updateCidadaoDto);\n\n      expect(result).toEqual(mockUpdatedCidadao);\n      expect(mockCidadaoService.update).toHaveBeenCalledWith(\n        '1',\n        updateCidadaoDto,\n      );\n    });\n\n    it('deve propagar NotFoundException quando o cidadão não existe', async () => {\n      const updateCidadaoDto = {\n        nome: 'João Silva Atualizado',\n      };\n\n      mockCidadaoService.update.mockRejectedValue(\n        new NotFoundException('Cidadão não encontrado'),\n      );\n\n      await expect(controller.update('999', updateCidadaoDto)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockCidadaoService.update).toHaveBeenCalledWith(\n        '999',\n        updateCidadaoDto,\n      );\n    });\n  });\n\n  describe('findByNis', () => {\n    it('deve retornar um cidadão quando encontrado pelo NIS', async () => {\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        nis: '12345678901',\n      };\n\n      mockCidadaoService.findByNis.mockResolvedValue(mockCidadao);\n\n      const result = await controller.findByNis('12345678901');\n\n      expect(result).toEqual(mockCidadao);\n      expect(mockCidadaoService.findByNis).toHaveBeenCalledWith('12345678901');\n    });\n\n    it('deve propagar NotFoundException quando o cidadão não é encontrado pelo NIS', async () => {\n      mockCidadaoService.findByNis.mockRejectedValue(\n        new NotFoundException('Cidadão não encontrado'),\n      );\n\n      await expect(controller.findByNis('99999999999')).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockCidadaoService.findByNis).toHaveBeenCalledWith('99999999999');\n    });\n  });\n});\n"],"version":3}