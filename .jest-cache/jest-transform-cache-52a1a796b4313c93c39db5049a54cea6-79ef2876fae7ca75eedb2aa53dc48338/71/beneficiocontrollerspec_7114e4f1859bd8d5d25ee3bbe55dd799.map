{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\tests\\beneficio.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\tests\\beneficio.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { BeneficioController } from '../controllers/beneficio.controller';\nimport { BeneficioService } from '../services/beneficio.service';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport { Periodicidade } from '../entities/tipo-beneficio.entity';\nimport { TipoAprovador } from '../dto/configurar-fluxo.dto';\nimport { TipoDocumentoEnum } from '@/enums';\n\ndescribe('BeneficioController', () => {\n  let controller: BeneficioController;\n  let service: BeneficioService;\n\n  // Mock do serviço de benefícios\n  const mockBeneficioService = {\n    findAll: jest.fn(),\n    findById: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    findRequisitosByBeneficioId: jest.fn(),\n    addRequisito: jest.fn(),\n    configurarFluxo: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [BeneficioController],\n      providers: [\n        {\n          provide: BeneficioService,\n          useValue: mockBeneficioService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<BeneficioController>(BeneficioController);\n    service = module.get<BeneficioService>(BeneficioService);\n  });\n\n  it('deve ser definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista paginada de benefícios', async () => {\n      const mockBeneficios = [\n        {\n          id: '1',\n          nome: 'Cesta Básica',\n          descricao:\n            'Benefício de cesta básica para famílias em vulnerabilidade',\n          valor: 150.0,\n          ativo: true,\n        },\n        {\n          id: '2',\n          nome: 'Auxílio Moradia',\n          descricao: 'Benefício para auxílio de aluguel',\n          valor: 300.0,\n          ativo: true,\n        },\n      ];\n\n      const mockResult = {\n        items: mockBeneficios,\n        meta: {\n          total: 2,\n          page: 1,\n          limit: 10,\n          pages: 1,\n        },\n      };\n\n      mockBeneficioService.findAll.mockResolvedValue(mockResult);\n\n      const result = await controller.findAll(1, 10, undefined, undefined);\n\n      expect(result).toEqual(mockResult);\n      expect(mockBeneficioService.findAll).toHaveBeenCalledWith({\n        page: 1,\n        limit: 10,\n        search: undefined,\n        ativo: undefined,\n      });\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar um benefício quando encontrado', async () => {\n      const mockBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        ativo: true,\n      };\n\n      mockBeneficioService.findById.mockResolvedValue(mockBeneficio);\n\n      const result = await controller.findOne('1');\n\n      expect(result).toEqual(mockBeneficio);\n      expect(mockBeneficioService.findById).toHaveBeenCalledWith('1');\n    });\n\n    it('deve lançar NotFoundException quando o benefício não é encontrado', async () => {\n      mockBeneficioService.findById.mockRejectedValue(new NotFoundException());\n\n      await expect(controller.findOne('999')).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockBeneficioService.findById).toHaveBeenCalledWith('999');\n    });\n  });\n\n  describe('create', () => {\n    it('deve criar um novo benefício quando os dados são válidos', async () => {\n      const createBeneficioDto = {\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        periodicidade: Periodicidade.MENSAL,\n        base_juridica: 'Lei Municipal 123/2023',\n        criterios_elegibilidade: {\n          idade_minima: 18,\n          renda_maxima: 1500,\n          outros: ['Residir no município'],\n        },\n      };\n\n      const mockBeneficio = {\n        id: '1',\n        ...createBeneficioDto,\n        ativo: true,\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n\n      mockBeneficioService.create.mockResolvedValue(mockBeneficio);\n\n      const result = await controller.create(createBeneficioDto);\n\n      expect(result).toEqual(mockBeneficio);\n      expect(mockBeneficioService.create).toHaveBeenCalledWith(\n        createBeneficioDto,\n      );\n    });\n\n    it('deve lançar ConflictException quando já existe um benefício com o mesmo nome', async () => {\n      const createBeneficioDto = {\n        nome: 'Cesta Básica',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 150.0,\n        periodicidade: Periodicidade.MENSAL,\n        base_juridica: 'Lei Municipal 123/2023',\n        criterios_elegibilidade: {\n          idade_minima: 18,\n          renda_maxima: 1500,\n          outros: ['Residir no município'],\n        },\n      };\n\n      mockBeneficioService.create.mockRejectedValue(new ConflictException());\n\n      await expect(controller.create(createBeneficioDto)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(mockBeneficioService.create).toHaveBeenCalledWith(\n        createBeneficioDto,\n      );\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar um benefício existente', async () => {\n      const updateBeneficioDto = {\n        nome: 'Cesta Básica Atualizada',\n        valor: 200.0,\n      };\n\n      const mockUpdatedBeneficio = {\n        id: '1',\n        nome: 'Cesta Básica Atualizada',\n        descricao: 'Benefício de cesta básica para famílias em vulnerabilidade',\n        valor: 200.0,\n        ativo: true,\n      };\n\n      mockBeneficioService.update.mockResolvedValue(mockUpdatedBeneficio);\n\n      const result = await controller.update('1', updateBeneficioDto);\n\n      expect(result).toEqual(mockUpdatedBeneficio);\n      expect(mockBeneficioService.update).toHaveBeenCalledWith(\n        '1',\n        updateBeneficioDto,\n      );\n    });\n\n    it('deve lançar NotFoundException quando o benefício não existe', async () => {\n      const updateBeneficioDto = {\n        nome: 'Cesta Básica Atualizada',\n      };\n\n      mockBeneficioService.update.mockRejectedValue(new NotFoundException());\n\n      await expect(\n        controller.update('999', updateBeneficioDto),\n      ).rejects.toThrow(NotFoundException);\n      expect(mockBeneficioService.update).toHaveBeenCalledWith(\n        '999',\n        updateBeneficioDto,\n      );\n    });\n  });\n\n  describe('findRequisitos', () => {\n    it('deve retornar os requisitos documentais de um benefício', async () => {\n      const mockRequisitos = [\n        {\n          id: '1',\n          nome: 'CPF',\n          obrigatorio: true,\n        },\n        {\n          id: '2',\n          nome: 'Comprovante de Residência',\n          obrigatorio: true,\n        },\n      ];\n\n      mockBeneficioService.findRequisitosByBeneficioId.mockResolvedValue(\n        mockRequisitos,\n      );\n\n      const result = await controller.findRequisitos('1');\n\n      expect(result).toEqual(mockRequisitos);\n      expect(\n        mockBeneficioService.findRequisitosByBeneficioId,\n      ).toHaveBeenCalledWith('1');\n    });\n  });\n\n  describe('addRequisito', () => {\n    it('deve adicionar um requisito documental a um benefício', async () => {\n      const createRequisitoDto = {\n        tipo_documento: TipoDocumentoEnum.CPF,\n        nome: 'CPF do Solicitante',\n        descricao: 'Documento de identificação',\n        obrigatorio: true,\n      };\n\n      const mockRequisito = {\n        id: '1',\n        ...createRequisitoDto,\n        tipo_beneficio: {\n          id: '1',\n          nome: 'Cesta Básica',\n        },\n      };\n\n      mockBeneficioService.addRequisito.mockResolvedValue(mockRequisito);\n\n      const result = await controller.addRequisito('1', createRequisitoDto);\n\n      expect(result).toEqual(mockRequisito);\n      expect(mockBeneficioService.addRequisito).toHaveBeenCalledWith(\n        '1',\n        createRequisitoDto,\n      );\n    });\n  });\n\n  describe('configurarFluxo', () => {\n    it('deve configurar o fluxo de aprovação de um benefício', async () => {\n      const configurarFluxoDto = {\n        descricao: 'Fluxo de aprovação para cesta básica',\n        etapas: [\n          {\n            ordem: 1,\n            nome: 'Análise técnica',\n            descricao: 'Verificação inicial dos documentos',\n            tipo_aprovador: TipoAprovador.TECNICO,\n            prazo_dias: 2,\n          },\n          {\n            ordem: 2,\n            nome: 'Aprovação coordenação',\n            descricao: 'Aprovação pela coordenação da unidade',\n            tipo_aprovador: TipoAprovador.GESTOR_UNIDADE,\n            prazo_dias: 3,\n          },\n        ],\n      };\n\n      const mockFluxo = {\n        id: '1',\n        ...configurarFluxoDto,\n        tipo_beneficio: {\n          id: '1',\n          nome: 'Cesta Básica',\n        },\n      };\n\n      mockBeneficioService.configurarFluxo.mockResolvedValue(mockFluxo);\n\n      const result = await controller.configurarFluxo('1', configurarFluxoDto);\n\n      expect(result).toEqual(mockFluxo);\n      expect(mockBeneficioService.configurarFluxo).toHaveBeenCalledWith(\n        '1',\n        configurarFluxoDto,\n      );\n    });\n  });\n});\n"],"version":3}