{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\configuracao-renovacao.entity.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\configuracao-renovacao.entity.ts"],"sourcesContent":["import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsBoolean,\n  IsNumber,\n  Min,\n  IsUUID,\n} from 'class-validator';\nimport { TipoBeneficio } from './tipo-beneficio.entity';\n\n/**\n * Entidade de Configuração de Renovação Automática\n *\n * Armazena as configurações para renovação automática de benefícios,\n * permitindo definir regras específicas por tipo de benefício.\n */\n@Entity('configuracao_renovacao')\n@Index(['tipo_beneficio_id'])\nexport class ConfiguracaoRenovacao {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ name: 'tipo_beneficio_id', type: 'uuid' })\n  @IsNotEmpty({ message: 'ID do tipo de benefício é obrigatório' })\n  @IsUUID('4', { message: 'ID do tipo de benefício inválido' })\n  tipo_beneficio_id: string;\n\n  @ManyToOne(() => TipoBeneficio, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'tipo_beneficio_id' })\n  tipo_beneficio: TipoBeneficio;\n\n  @Column({ name: 'renovacao_automatica', type: 'boolean', default: false })\n  @IsBoolean({ message: 'Renovação automática deve ser um booleano' })\n  renovacao_automatica: boolean;\n\n  @Column({ name: 'dias_antecedencia_renovacao', type: 'integer', default: 7 })\n  @IsNumber({}, { message: 'Dias de antecedência deve ser um número' })\n  @Min(1, { message: 'Dias de antecedência deve ser no mínimo 1' })\n  dias_antecedencia_renovacao: number;\n\n  @Column({ name: 'numero_maximo_renovacoes', type: 'integer', nullable: true })\n  @IsOptional()\n  @IsNumber({}, { message: 'Número máximo de renovações deve ser um número' })\n  @Min(0, { message: 'Número máximo de renovações não pode ser negativo' })\n  numero_maximo_renovacoes?: number;\n\n  @Column({\n    name: 'requer_aprovacao_renovacao',\n    type: 'boolean',\n    default: true,\n  })\n  @IsBoolean({ message: 'Requer aprovação de renovação deve ser um booleano' })\n  requer_aprovacao_renovacao: boolean;\n\n  @Column({ name: 'ativo', type: 'boolean', default: true })\n  @IsBoolean({ message: 'Ativo deve ser um booleano' })\n  ativo: boolean;\n\n  @Column({ name: 'usuario_id', type: 'uuid' })\n  @IsNotEmpty({ message: 'ID do usuário é obrigatório' })\n  @IsUUID('4', { message: 'ID do usuário inválido' })\n  usuario_id: string;\n\n  @Column({ name: 'observacoes', type: 'text', nullable: true })\n  @IsOptional()\n  observacoes?: string;\n\n  @CreateDateColumn({ name: 'created_at' })\n  created_at: Date;\n\n  @UpdateDateColumn({ name: 'updated_at' })\n  updated_at: Date;\n\n  // Getters e Setters\n  get createdAt(): Date {\n    return this.created_at;\n  }\n\n  get updatedAt(): Date {\n    return this.updated_at;\n  }\n\n  // Métodos Utilitários\n\n  /**\n   * Verifica se a configuração foi criada recentemente (últimas 24 horas)\n   */\n  isCriadoRecentemente(): boolean {\n    const agora = new Date();\n    const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);\n    return this.created_at > umDiaAtras;\n  }\n\n  /**\n   * Calcula a idade do registro em dias\n   */\n  getIdadeRegistroEmDias(): number {\n    const agora = new Date();\n    const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  }\n\n  /**\n   * Verifica se a configuração está ativa\n   */\n  isAtivo(): boolean {\n    return this.ativo;\n  }\n\n  /**\n   * Verifica se a renovação automática está habilitada\n   */\n  isRenovacaoAutomaticaHabilitada(): boolean {\n    return this.renovacao_automatica && this.ativo;\n  }\n\n  /**\n   * Verifica se requer aprovação para renovação\n   */\n  requerAprovacaoRenovacao(): boolean {\n    return this.requer_aprovacao_renovacao;\n  }\n\n  /**\n   * Verifica se tem limite de renovações\n   */\n  temLimiteRenovacoes(): boolean {\n    return (\n      this.numero_maximo_renovacoes !== null &&\n      this.numero_maximo_renovacoes !== undefined &&\n      this.numero_maximo_renovacoes > 0\n    );\n  }\n\n  /**\n   * Obtém o número máximo de renovações\n   */\n  getNumeroMaximoRenovacoes(): number | null {\n    return this.numero_maximo_renovacoes || null;\n  }\n\n  /**\n   * Obtém os dias de antecedência para renovação\n   */\n  getDiasAntecedenciaRenovacao(): number {\n    return this.dias_antecedencia_renovacao;\n  }\n\n  /**\n   * Calcula a data limite para iniciar o processo de renovação\n   * baseado na data de vencimento do benefício\n   */\n  calcularDataInicioRenovacao(dataVencimento: Date): Date {\n    const dataInicio = new Date(dataVencimento);\n    dataInicio.setDate(dataInicio.getDate() - this.dias_antecedencia_renovacao);\n    return dataInicio;\n  }\n\n  /**\n   * Verifica se é hora de iniciar o processo de renovação\n   */\n  isHoraDeRenovar(dataVencimento: Date): boolean {\n    if (!this.isRenovacaoAutomaticaHabilitada()) return false;\n\n    const agora = new Date();\n    const dataInicioRenovacao =\n      this.calcularDataInicioRenovacao(dataVencimento);\n\n    return agora >= dataInicioRenovacao;\n  }\n\n  /**\n   * Verifica se ainda pode renovar baseado no limite\n   */\n  podeRenovar(numeroRenovacoesRealizadas: number): boolean {\n    if (!this.isRenovacaoAutomaticaHabilitada()) return false;\n\n    if (!this.temLimiteRenovacoes()) return true;\n\n    return (\n      this.numero_maximo_renovacoes !== undefined &&\n      numeroRenovacoesRealizadas < this.numero_maximo_renovacoes\n    );\n  }\n\n  /**\n   * Calcula quantas renovações ainda são possíveis\n   */\n  getRenovacoesRestantes(numeroRenovacoesRealizadas: number): number {\n    if (!this.temLimiteRenovacoes()) return -1; // Ilimitado\n\n    const restantes =\n      (this.numero_maximo_renovacoes ?? 0) - numeroRenovacoesRealizadas;\n    return Math.max(0, restantes);\n  }\n\n  /**\n   * Verifica se pertence a um tipo de benefício\n   */\n  pertenceAoTipoBeneficio(tipoBeneficioId: string): boolean {\n    return this.tipo_beneficio_id === tipoBeneficioId;\n  }\n\n  /**\n   * Verifica se foi configurado por um usuário\n   */\n  foiConfiguradoPorUsuario(usuarioId: string): boolean {\n    return this.usuario_id === usuarioId;\n  }\n\n  /**\n   * Obtém um resumo da configuração\n   */\n  getSummary(): string {\n    const renovacao = this.isRenovacaoAutomaticaHabilitada()\n      ? 'Habilitada'\n      : 'Desabilitada';\n    const aprovacao = this.requerAprovacaoRenovacao()\n      ? 'Requer aprovação'\n      : 'Automática';\n    const limite = this.temLimiteRenovacoes()\n      ? `Máx: ${this.numero_maximo_renovacoes}`\n      : 'Ilimitado';\n\n    return `Renovação: ${renovacao} | ${aprovacao} | ${limite} | ${this.dias_antecedencia_renovacao} dias antecedência`;\n  }\n\n  /**\n   * Gera uma chave única para a configuração\n   */\n  getUniqueKey(): string {\n    return `config_renovacao_${this.tipo_beneficio_id}`;\n  }\n\n  /**\n   * Verifica se a configuração é consistente\n   */\n  isConsistente(): boolean {\n    // Verifica se tem tipo de benefício\n    if (!this.tipo_beneficio_id) return false;\n\n    // Verifica se tem usuário\n    if (!this.usuario_id) return false;\n\n    // Verifica se dias de antecedência é válido\n    if (this.dias_antecedencia_renovacao < 1) return false;\n\n    // Se tem limite, deve ser positivo\n    if (\n      this.temLimiteRenovacoes() &&\n      this.numero_maximo_renovacoes !== undefined &&\n      this.numero_maximo_renovacoes <= 0\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifica se pode ser removida\n   */\n  podeSerRemovida(): boolean {\n    // Pode implementar lógica adicional aqui\n    // Por exemplo, verificar se tem benefícios ativos usando esta configuração\n    return true;\n  }\n\n  /**\n   * Clona a configuração (sem ID)\n   */\n  clone(): Partial<ConfiguracaoRenovacao> {\n    return {\n      tipo_beneficio_id: this.tipo_beneficio_id,\n      renovacao_automatica: this.renovacao_automatica,\n      dias_antecedencia_renovacao: this.dias_antecedencia_renovacao,\n      numero_maximo_renovacoes: this.numero_maximo_renovacoes,\n      requer_aprovacao_renovacao: this.requer_aprovacao_renovacao,\n      ativo: this.ativo,\n      usuario_id: this.usuario_id,\n      observacoes: this.observacoes,\n    };\n  }\n\n  /**\n   * Verifica se é uma configuração crítica\n   */\n  isCritica(): boolean {\n    // Configurações com renovação automática sem aprovação são críticas\n    return (\n      this.isRenovacaoAutomaticaHabilitada() && !this.requerAprovacaoRenovacao()\n    );\n  }\n\n  /**\n   * Obtém o nível de automação\n   */\n  getNivelAutomacao(): 'MANUAL' | 'SEMI_AUTOMATICO' | 'AUTOMATICO' {\n    if (!this.renovacao_automatica) return 'MANUAL';\n    if (this.requer_aprovacao_renovacao) return 'SEMI_AUTOMATICO';\n    return 'AUTOMATICO';\n  }\n\n  /**\n   * Obtém a descrição do nível de automação\n   */\n  getDescricaoNivelAutomacao(): string {\n    const descricoes = {\n      MANUAL: 'Renovação manual - requer intervenção do usuário',\n      SEMI_AUTOMATICO:\n        'Renovação semi-automática - processo automático com aprovação',\n      AUTOMATICO: 'Renovação totalmente automática - sem intervenção manual',\n    };\n    return descricoes[this.getNivelAutomacao()];\n  }\n\n  /**\n   * Formata a data de criação\n   */\n  getCriacaoFormatada(): string {\n    return this.created_at.toLocaleDateString('pt-BR');\n  }\n\n  /**\n   * Formata a data de atualização\n   */\n  getAtualizacaoFormatada(): string {\n    return this.updated_at.toLocaleDateString('pt-BR');\n  }\n\n  /**\n   * Remove informações sensíveis para logs\n   */\n  toSafeLog(): Partial<ConfiguracaoRenovacao> {\n    return {\n      id: this.id,\n      tipo_beneficio_id: this.tipo_beneficio_id,\n      renovacao_automatica: this.renovacao_automatica,\n      dias_antecedencia_renovacao: this.dias_antecedencia_renovacao,\n      numero_maximo_renovacoes: this.numero_maximo_renovacoes,\n      requer_aprovacao_renovacao: this.requer_aprovacao_renovacao,\n      ativo: this.ativo,\n      created_at: this.created_at,\n      updated_at: this.updated_at,\n    };\n  }\n\n  /**\n   * Obtém sugestões de melhoria para a configuração\n   */\n  getSugestoesMelhoria(): string[] {\n    const sugestoes: string[] = [];\n\n    if (!this.observacoes || this.observacoes.trim().length === 0) {\n      sugestoes.push('Adicionar observações sobre a configuração');\n    }\n\n    if (\n      this.isRenovacaoAutomaticaHabilitada() &&\n      !this.requerAprovacaoRenovacao()\n    ) {\n      sugestoes.push('Considerar exigir aprovação para renovações automáticas');\n    }\n\n    if (!this.temLimiteRenovacoes()) {\n      sugestoes.push('Considerar definir um limite máximo de renovações');\n    }\n\n    if (this.dias_antecedencia_renovacao < 7) {\n      sugestoes.push(\n        'Considerar aumentar os dias de antecedência para pelo menos 7 dias',\n      );\n    }\n\n    if (!this.isConsistente()) {\n      sugestoes.push('Verificar e corrigir inconsistências nos dados');\n    }\n\n    return sugestoes;\n  }\n\n  /**\n   * Verifica se precisa de atualização (dados muito antigos)\n   */\n  precisaAtualizacao(): boolean {\n    // Configurações com mais de 1 ano podem precisar de revisão\n    const umAnoAtras = new Date();\n    umAnoAtras.setFullYear(umAnoAtras.getFullYear() - 1);\n    return this.updated_at < umAnoAtras;\n  }\n\n  /**\n   * Obtém estatísticas da configuração\n   */\n  getEstatisticas(): {\n    nivelAutomacao: string;\n    diasAntecedencia: number;\n    temLimite: boolean;\n    limiteRenovacoes: number | null;\n    requerAprovacao: boolean;\n    ativo: boolean;\n  } {\n    return {\n      nivelAutomacao: this.getNivelAutomacao(),\n      diasAntecedencia: this.dias_antecedencia_renovacao,\n      temLimite: this.temLimiteRenovacoes(),\n      limiteRenovacoes: this.getNumeroMaximoRenovacoes(),\n      requerAprovacao: this.requer_aprovacao_renovacao,\n      ativo: this.ativo,\n    };\n  }\n\n  /**\n   * Simula o processo de renovação\n   */\n  simularRenovacao(\n    dataVencimento: Date,\n    numeroRenovacoesRealizadas: number,\n  ): {\n    podeRenovar: boolean;\n    dataInicioRenovacao: Date;\n    renovacoesRestantes: number;\n    requerAprovacao: boolean;\n    motivo?: string;\n  } {\n    const podeRenovar = this.podeRenovar(numeroRenovacoesRealizadas);\n    const dataInicioRenovacao =\n      this.calcularDataInicioRenovacao(dataVencimento);\n    const renovacoesRestantes = this.getRenovacoesRestantes(\n      numeroRenovacoesRealizadas,\n    );\n\n    let motivo: string | undefined;\n    if (!podeRenovar) {\n      if (!this.isRenovacaoAutomaticaHabilitada()) {\n        motivo = 'Renovação automática não está habilitada';\n      } else if (\n        this.temLimiteRenovacoes() &&\n        this.numero_maximo_renovacoes !== undefined &&\n        numeroRenovacoesRealizadas >= this.numero_maximo_renovacoes\n      ) {\n        motivo = 'Limite máximo de renovações atingido';\n      }\n    }\n\n    return {\n      podeRenovar,\n      dataInicioRenovacao,\n      renovacoesRestantes,\n      requerAprovacao: this.requer_aprovacao_renovacao,\n      motivo,\n    };\n  }\n}\n"],"version":3}