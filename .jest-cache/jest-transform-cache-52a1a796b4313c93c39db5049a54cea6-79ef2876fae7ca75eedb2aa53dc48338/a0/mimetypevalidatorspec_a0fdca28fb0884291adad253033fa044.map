{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\__tests__\\mime-type.validator.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\__tests__\\mime-type.validator.spec.ts"],"sourcesContent":["import { MimeTypeValidator } from '../mime-type.validator';\nimport { MIME_TYPE_CONFIGS, BLOCKED_MIME_TYPES } from '../../config/documento.config';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\ndescribe('MimeTypeValidator', () => {\n  let validator: MimeTypeValidator;\n\n  beforeEach(() => {\n    validator = new MimeTypeValidator();\n  });\n\n  describe('validateMimeType', () => {\n    it('deve validar um PDF válido', async () => {\n      // Criar um buffer que simula um PDF (com magic number correto)\n      const pdfBuffer = Buffer.from([\n        0x25, 0x50, 0x44, 0x46, // %PDF magic number\n        ...Buffer.from('-1.4\\n%âãÏÓ\\n'), // PDF header\n      ]);\n\n      const result = await validator.validateMimeType(\n        pdfBuffer,\n        'application/pdf',\n        'documento.pdf',\n        pdfBuffer.length\n      );\n\n      expect(result.isValid).toBe(true);\n      expect(result.detectedMimeType).toBe('application/pdf');\n      expect(result.fileExtension).toBe('pdf');\n    });\n\n    it('deve rejeitar arquivo com extensão perigosa', async () => {\n      const buffer = Buffer.from('conteúdo qualquer');\n      \n      const result = await validator.validateMimeType(\n        buffer,\n        'application/octet-stream',\n        'malware.exe',\n        buffer.length\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.hasDangerousExtension).toBe(true);\n      expect(result.message).toContain('Extensão de arquivo não permitida');\n    });\n\n    it('deve rejeitar tipo MIME bloqueado', async () => {\n      const buffer = Buffer.from('conteúdo');\n      \n      const result = await validator.validateMimeType(\n        buffer,\n        'text/javascript',\n        'script.js',\n        buffer.length\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.isBlockedMimeType).toBe(true);\n      expect(result.message).toContain('Tipo MIME bloqueado');\n    });\n\n    it('deve rejeitar arquivo que excede tamanho máximo', async () => {\n      const buffer = Buffer.from('conteúdo');\n      const largeSize = 25 * 1024 * 1024; // 25MB (maior que o limite global)\n      \n      const result = await validator.validateMimeType(\n        buffer,\n        'application/pdf',\n        'documento.pdf',\n        largeSize\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.exceedsMaxSize).toBe(true);\n      expect(result.message).toContain('excede o tamanho máximo');\n    });\n\n    it('deve detectar mismatch entre tipo declarado e detectado', async () => {\n      // Buffer que simula uma imagem JPEG\n      const jpegBuffer = Buffer.from([\n        0xFF, 0xD8, 0xFF, 0xE0, // JPEG magic number\n        ...Buffer.from('fake jpeg content'),\n      ]);\n\n      const result = await validator.validateMimeType(\n        jpegBuffer,\n        'application/pdf', // Tipo declarado incorreto\n        'imagem.jpg',\n        jpegBuffer.length\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.magicNumberMismatch).toBe(true);\n      expect(result.message).toContain('não corresponde ao tipo real');\n    });\n\n    it('deve validar arquivo de texto simples', async () => {\n      const textBuffer = Buffer.from('Este é um arquivo de texto simples.\\nCom quebras de linha.');\n      \n      const result = await validator.validateMimeType(\n        textBuffer,\n        'text/plain',\n        'documento.txt',\n        textBuffer.length\n      );\n\n      expect(result.isValid).toBe(true);\n      expect(result.detectedMimeType).toBe('text/plain');\n    });\n\n    it('deve detectar conteúdo suspeito em arquivo', async () => {\n      const suspiciousBuffer = Buffer.from(`\n        Conteúdo normal do arquivo\n        <script>alert('xss')</script>\n        Mais conteúdo\n      `);\n      \n      const result = await validator.validateMimeType(\n        suspiciousBuffer,\n        'text/plain',\n        'arquivo.txt',\n        suspiciousBuffer.length\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.isSuspicious).toBe(true);\n      expect(result.securityFlags?.hasEmbeddedContent).toBe(true);\n      expect(result.message).toContain('conteúdo suspeito');\n    });\n\n    it('deve detectar JavaScript em PDF', async () => {\n      const pdfWithJsBuffer = Buffer.from(`\n        %PDF-1.4\n        /JavaScript (alert('malicious'))\n        /JS (document.cookie)\n        resto do conteúdo PDF\n      `);\n      \n      const result = await validator.validateMimeType(\n        pdfWithJsBuffer,\n        'application/pdf',\n        'documento.pdf',\n        pdfWithJsBuffer.length\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.isSuspicious).toBe(true);\n      expect(result.message).toContain('JavaScript incorporado');\n    });\n\n    it('deve detectar alta densidade de caracteres não-ASCII', async () => {\n      // Criar buffer com muitos caracteres não-ASCII (possível ofuscação)\n      const obfuscatedBuffer = Buffer.from(\n        'texto' + '\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89'.repeat(20)\n      );\n      \n      const result = await validator.validateMimeType(\n        obfuscatedBuffer,\n        'text/plain',\n        'arquivo.txt',\n        obfuscatedBuffer.length\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.isSuspicious).toBe(true);\n      expect(result.message).toContain('caracteres não-ASCII');\n    });\n  });\n\n  describe('generateFileHash', () => {\n    it('deve gerar hash SHA256 consistente', () => {\n      const buffer = Buffer.from('conteúdo de teste');\n      \n      const hash1 = validator.generateFileHash(buffer);\n      const hash2 = validator.generateFileHash(buffer);\n      \n      expect(hash1).toBe(hash2);\n      expect(hash1).toHaveLength(64); // SHA256 em hex\n      expect(hash1).toMatch(/^[a-f0-9]{64}$/);\n    });\n\n    it('deve gerar hashes diferentes para conteúdos diferentes', () => {\n      const buffer1 = Buffer.from('conteúdo 1');\n      const buffer2 = Buffer.from('conteúdo 2');\n      \n      const hash1 = validator.generateFileHash(buffer1);\n      const hash2 = validator.generateFileHash(buffer2);\n      \n      expect(hash1).not.toBe(hash2);\n    });\n  });\n\n  describe('requiresEncryption', () => {\n    it('deve retornar true para documentos sensíveis', () => {\n      const sensitiveTypes = [\n        'application/pdf',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ];\n\n      sensitiveTypes.forEach(mimeType => {\n        expect(validator.requiresEncryption(mimeType)).toBe(true);\n      });\n    });\n\n    it('deve retornar false para imagens', () => {\n      const imageTypes = [\n        'image/jpeg',\n        'image/png',\n      ];\n\n      imageTypes.forEach(mimeType => {\n        expect(validator.requiresEncryption(mimeType)).toBe(false);\n      });\n    });\n  });\n\n  describe('allowsThumbnail', () => {\n    it('deve retornar true para imagens', () => {\n      const imageTypes = [\n        'image/jpeg',\n        'image/png',\n      ];\n\n      imageTypes.forEach(mimeType => {\n        expect(validator.allowsThumbnail(mimeType)).toBe(true);\n      });\n    });\n\n    it('deve retornar true para PDFs', () => {\n      expect(validator.allowsThumbnail('application/pdf')).toBe(true);\n    });\n\n    it('deve retornar false para documentos do Office', () => {\n      const officeTypes = [\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      ];\n\n      officeTypes.forEach(mimeType => {\n        expect(validator.allowsThumbnail(mimeType)).toBe(false);\n      });\n    });\n  });\n\n  describe('analyzeFileContent', () => {\n    it('deve detectar tags de script', () => {\n      const content = Buffer.from('<script>alert(\"xss\")</script>');\n      \n      const result = validator['analyzeFileContent'](content, 'text/html');\n      \n      expect(result.isSuspicious).toBe(true);\n      expect(result.hasEmbeddedContent).toBe(true);\n      expect(result.reason).toContain('script');\n    });\n\n    it('deve detectar URLs javascript', () => {\n      const content = Buffer.from('href=\"javascript:alert(1)\"');\n      \n      const result = validator['analyzeFileContent'](content, 'text/html');\n      \n      expect(result.isSuspicious).toBe(true);\n      expect(result.hasEmbeddedContent).toBe(true);\n    });\n\n    it('deve detectar event handlers', () => {\n      const content = Buffer.from('<img onload=\"malicious()\" />');\n      \n      const result = validator['analyzeFileContent'](content, 'text/html');\n      \n      expect(result.isSuspicious).toBe(true);\n      expect(result.hasEmbeddedContent).toBe(true);\n    });\n\n    it('deve detectar null bytes', () => {\n      const content = Buffer.from('texto\\x00com\\x00null\\x00bytes');\n      \n      const result = validator['analyzeFileContent'](content, 'text/plain');\n      \n      expect(result.isSuspicious).toBe(true);\n    });\n\n    it('não deve detectar conteúdo normal como suspeito', () => {\n      const content = Buffer.from(`\n        Este é um documento normal.\n        Contém texto, números 123 e pontuação!\n        Email: usuario@exemplo.com\n        URL: https://exemplo.com\n      `);\n      \n      const result = validator['analyzeFileContent'](content, 'text/plain');\n      \n      expect(result.isSuspicious).toBe(false);\n      expect(result.hasEmbeddedContent).toBe(false);\n    });\n  });\n\n  describe('extractFileExtension', () => {\n    it('deve extrair extensão corretamente', () => {\n      const testCases = [\n        { filename: 'documento.pdf', expected: 'pdf' },\n        { filename: 'imagem.JPEG', expected: 'jpeg' },\n        { filename: 'arquivo.com.extensao.txt', expected: 'txt' },\n        { filename: 'sem_extensao', expected: '' },\n        { filename: '.hidden', expected: 'hidden' },\n      ];\n\n      testCases.forEach(({ filename, expected }) => {\n        const result = validator['extractFileExtension'](filename);\n        expect(result).toBe(expected);\n      });\n    });\n  });\n\n  describe('integração com configuração', () => {\n    it('deve usar configurações do documento.config', () => {\n      // Verificar se os tipos permitidos estão sendo usados\n      const allowedTypes = Object.values(MIME_TYPE_CONFIGS)\n        .flatMap(config => config.mimeTypes);\n      \n      expect(allowedTypes).toContain('application/pdf');\n      expect(allowedTypes).toContain('image/jpeg');\n      expect(allowedTypes).toContain('text/plain');\n    });\n\n    it('deve usar tipos bloqueados da configuração', () => {\n      expect(BLOCKED_MIME_TYPES).toContain('text/javascript');\n      expect(BLOCKED_MIME_TYPES).toContain('application/zip');\n      expect(BLOCKED_MIME_TYPES).toContain('image/svg+xml');\n    });\n  });\n\n  describe('casos de uso reais', () => {\n    it('deve processar upload de certidão de nascimento (PDF)', async () => {\n      const pdfBuffer = Buffer.from([\n        0x25, 0x50, 0x44, 0x46, // %PDF\n        ...Buffer.from('-1.4\\nCertidão de Nascimento\\nNome: João da Silva'),\n      ]);\n\n      const result = await validator.validateMimeType(\n        pdfBuffer,\n        'application/pdf',\n        'certidao_nascimento.pdf',\n        pdfBuffer.length\n      );\n\n      expect(result.isValid).toBe(true);\n      expect(result.detectedMimeType).toBe('application/pdf');\n    });\n\n    it('deve processar upload de foto de documento (JPEG)', async () => {\n      const jpegBuffer = Buffer.from([\n        0xFF, 0xD8, 0xFF, 0xE0, // JPEG magic\n        ...Buffer.from('fake jpeg image data'),\n      ]);\n\n      const result = await validator.validateMimeType(\n        jpegBuffer,\n        'image/jpeg',\n        'foto_documento.jpg',\n        jpegBuffer.length\n      );\n\n      expect(result.isValid).toBe(true);\n      expect(result.detectedMimeType).toBe('image/jpeg');\n    });\n\n    it('deve rejeitar tentativa de upload de malware', async () => {\n      const malwareBuffer = Buffer.from('MZ\\x90\\x00'); // PE header\n\n      const result = await validator.validateMimeType(\n        malwareBuffer,\n        'application/pdf',\n        'documento.exe',\n        malwareBuffer.length\n      );\n\n      expect(result.isValid).toBe(false);\n      expect(result.securityFlags?.hasDangerousExtension).toBe(true);\n    });\n  });\n});"],"version":3}