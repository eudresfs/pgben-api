{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\enum-validator.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\enum-validator.ts"],"sourcesContent":["import {\n  registerDecorator,\n  ValidationOptions,\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\n/**\n * Validador customizado para enums com mensagens de erro aprimoradas\n * \n * Características:\n * - Mensagens de erro mais amigáveis\n * - Sugestões de valores válidos\n * - Suporte a case-insensitive (opcional)\n * - Formatação automática de valores\n */\n@ValidatorConstraint({ name: 'isEnumValue', async: false })\nexport class IsEnumValueConstraint implements ValidatorConstraintInterface {\n  validate(value: any, args: ValidationArguments): boolean {\n    const [enumObject, options] = args.constraints;\n    const { caseSensitive = true } = options || {};\n    \n    if (value === null || value === undefined) {\n      return false;\n    }\n    \n    const enumValues = Object.values(enumObject);\n    \n    if (caseSensitive) {\n      return enumValues.includes(value);\n    }\n    \n    // Comparação case-insensitive\n    const valueStr = String(value).toLowerCase();\n    return enumValues.some(enumValue => \n      String(enumValue).toLowerCase() === valueStr\n    );\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    const [enumObject, options] = args.constraints;\n    const { enumName, caseSensitive = true } = options || {};\n    const enumValues = Object.values(enumObject);\n    const property = args.property;\n    const value = args.value;\n    \n    // Encontrar valores similares para sugestões\n    const suggestions = this.findSimilarValues(value, enumValues);\n    \n    let message = `O campo '${property}' deve ser um dos valores válidos`;\n    \n    if (enumName) {\n      message += ` para ${enumName}`;\n    }\n    \n    message += `: ${enumValues.join(', ')}`;\n    \n    if (suggestions.length > 0) {\n      message += `. Você quis dizer: ${suggestions.join(', ')}?`;\n    }\n    \n    if (!caseSensitive) {\n      message += ' (não diferencia maiúsculas/minúsculas)';\n    }\n    \n    return message;\n  }\n  \n  /**\n   * Encontra valores similares usando distância de Levenshtein simplificada\n   */\n  private findSimilarValues(input: any, enumValues: any[]): string[] {\n    if (!input || typeof input !== 'string') {\n      return [];\n    }\n    \n    const inputStr = input.toLowerCase();\n    const suggestions: Array<{ value: string; distance: number }> = [];\n    \n    for (const enumValue of enumValues) {\n      const enumStr = String(enumValue).toLowerCase();\n      const distance = this.levenshteinDistance(inputStr, enumStr);\n      \n      // Considerar como sugestão se a distância for pequena\n      if (distance <= Math.max(2, Math.floor(enumStr.length * 0.3))) {\n        suggestions.push({ value: String(enumValue), distance });\n      }\n    }\n    \n    // Ordenar por distância e retornar os 3 melhores\n    return suggestions\n      .sort((a, b) => a.distance - b.distance)\n      .slice(0, 3)\n      .map(s => s.value);\n  }\n  \n  /**\n   * Calcula a distância de Levenshtein entre duas strings\n   */\n  private levenshteinDistance(str1: string, str2: string): number {\n    const matrix = Array(str2.length + 1).fill(null).map(() => \n      Array(str1.length + 1).fill(null)\n    );\n    \n    for (let i = 0; i <= str1.length; i++) {\n      matrix[0][i] = i;\n    }\n    \n    for (let j = 0; j <= str2.length; j++) {\n      matrix[j][0] = j;\n    }\n    \n    for (let j = 1; j <= str2.length; j++) {\n      for (let i = 1; i <= str1.length; i++) {\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[j][i] = Math.min(\n          matrix[j][i - 1] + 1,     // deletion\n          matrix[j - 1][i] + 1,     // insertion\n          matrix[j - 1][i - 1] + indicator // substitution\n        );\n      }\n    }\n    \n    return matrix[str2.length][str1.length];\n  }\n}\n\n/**\n * Decorator para validação de enum com mensagens aprimoradas\n * \n * @param enumObject - O objeto enum a ser validado\n * @param options - Opções de validação\n * @param validationOptions - Opções padrão do class-validator\n * \n * @example\n * ```typescript\n * enum StatusEnum {\n *   ATIVO = 'ATIVO',\n *   INATIVO = 'INATIVO',\n *   PENDENTE = 'PENDENTE'\n * }\n * \n * class CreateUserDto {\n *   @IsEnumValue(StatusEnum, {\n *     enumName: 'Status do Usuário',\n *     caseSensitive: false\n *   })\n *   status: StatusEnum;\n * }\n * ```\n */\nexport function IsEnumValue(\n  enumObject: object,\n  options?: {\n    enumName?: string;\n    caseSensitive?: boolean;\n  },\n  validationOptions?: ValidationOptions\n) {\n  return function (object: object, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: [enumObject, options],\n      validator: IsEnumValueConstraint,\n    });\n  };\n}\n\n/**\n * Utilitário para criar mensagens de erro padronizadas para enums\n */\nexport class EnumValidationHelper {\n  /**\n   * Cria uma mensagem de erro padronizada para enum\n   */\n  static createEnumMessage(\n    enumObject: object,\n    enumName?: string,\n    fieldName?: string\n  ): string {\n    const values = Object.values(enumObject).join(', ');\n    const field = fieldName || 'campo';\n    const name = enumName || 'enum';\n    \n    return `O ${field} deve ser um dos valores válidos para ${name}: ${values}`;\n  }\n  \n  /**\n   * Verifica se um valor é válido para o enum\n   */\n  static isValidEnumValue(value: any, enumObject: object): boolean {\n    return Object.values(enumObject).includes(value);\n  }\n  \n  /**\n   * Normaliza um valor para o enum (útil para case-insensitive)\n   */\n  static normalizeEnumValue(\n    value: any,\n    enumObject: object,\n    caseSensitive = true\n  ): any {\n    if (!value) return value;\n    \n    const enumValues = Object.values(enumObject);\n    \n    if (caseSensitive) {\n      return enumValues.find(enumValue => enumValue === value);\n    }\n    \n    const valueStr = String(value).toLowerCase();\n    return enumValues.find(enumValue => \n      String(enumValue).toLowerCase() === valueStr\n    );\n  }\n  \n  /**\n   * Obtém todos os valores válidos de um enum\n   */\n  static getEnumValues(enumObject: object): any[] {\n    return Object.values(enumObject);\n  }\n  \n  /**\n   * Obtém todas as chaves de um enum\n   */\n  static getEnumKeys(enumObject: object): string[] {\n    return Object.keys(enumObject);\n  }\n}"],"version":3}