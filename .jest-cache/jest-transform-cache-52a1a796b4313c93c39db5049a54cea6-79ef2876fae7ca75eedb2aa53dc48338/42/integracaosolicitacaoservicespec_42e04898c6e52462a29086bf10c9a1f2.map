{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\integracao-solicitacao.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\integracao-solicitacao.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { of, throwError } from 'rxjs';\nimport { AxiosResponse } from 'axios';\nimport { IntegracaoSolicitacaoService } from '../../services/integracao-solicitacao.service';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\n\n/**\n * Testes unitários para o serviço de integração com o módulo de solicitação\n * \n * Verifica o funcionamento correto das operações de consulta e atualização\n * de status de solicitações relacionadas a pagamentos.\n * \n * @author Equipe PGBen\n */\ndescribe('IntegracaoSolicitacaoService', () => {\n  let service: IntegracaoSolicitacaoService;\n  let httpService: HttpService;\n  let configService: ConfigService;\n\n  // Mock do HttpService\n  const mockHttpService = {\n    get: jest.fn(),\n    post: jest.fn(),\n    patch: jest.fn()\n  };\n\n  // Mock do ConfigService\n  const mockConfigService = {\n    get: jest.fn().mockImplementation((key) => {\n      if (key === 'solicitacao.apiUrl') {return 'http://api-solicitacao.pgben.local';}\n      if (key === 'solicitacao.apiKey') {return 'api-key-mock';}\n      if (key === 'solicitacao.statusPagamentoPendente') {return 'PAGAMENTO_PENDENTE';}\n      if (key === 'solicitacao.statusPagamentoRealizado') {return 'PAGAMENTO_REALIZADO';}\n      if (key === 'solicitacao.statusPagamentoCancelado') {return 'PAGAMENTO_CANCELADO';}\n      return null;\n    })\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        IntegracaoSolicitacaoService,\n        {\n          provide: HttpService,\n          useValue: mockHttpService\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService\n        }\n      ],\n    }).compile();\n\n    service = module.get<IntegracaoSolicitacaoService>(IntegracaoSolicitacaoService);\n    httpService = module.get<HttpService>(HttpService);\n    configService = module.get<ConfigService>(ConfigService);\n\n    // Limpar mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  describe('verificarStatusSolicitacao', () => {\n    const solicitacaoId = 'solicitacao-id';\n    \n    const mockSolicitacao = {\n      id: solicitacaoId,\n      status: 'PAGAMENTO_PENDENTE',\n      cidadaoId: 'cidadao-id',\n      valorAprovado: 500.00,\n      createdAt: '2023-01-01T00:00:00Z'\n    };\n\n    it('deve retornar status da solicitação quando encontrada', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockSolicitacao,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.verificarStatusSolicitacao(solicitacaoId);\n\n      // Verificar resultado\n      expect(result).toEqual(mockSolicitacao.status);\n      expect(mockHttpService.get).toHaveBeenCalledWith(\n        `http://api-solicitacao.pgben.local/solicitacoes/${solicitacaoId}`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock'\n          })\n        })\n      );\n    });\n\n    it('deve lançar NotFoundException quando solicitação não encontrada', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Solicitação não encontrada' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(service.verificarStatusSolicitacao(solicitacaoId)).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve propagar outros erros HTTP', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 500,\n            data: { message: 'Erro interno do servidor' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(service.verificarStatusSolicitacao(solicitacaoId)).rejects.toThrow();\n    });\n  });\n\n  describe('verificarSolicitacaoElegivel', () => {\n    const solicitacaoId = 'solicitacao-id';\n\n    it('deve retornar true quando solicitação está elegível para pagamento', async () => {\n      // Configurar mock para verificarStatusSolicitacao\n      jest.spyOn(service, 'verificarStatusSolicitacao').mockResolvedValue('PAGAMENTO_PENDENTE');\n\n      // Executar método\n      const result = await service.verificarSolicitacaoElegivel(solicitacaoId);\n\n      // Verificar resultado\n      expect(result).toBe(true);\n      expect(service.verificarStatusSolicitacao).toHaveBeenCalledWith(solicitacaoId);\n    });\n\n    it('deve retornar false quando solicitação não está elegível para pagamento', async () => {\n      // Configurar mock para verificarStatusSolicitacao\n      jest.spyOn(service, 'verificarStatusSolicitacao').mockResolvedValue('PAGAMENTO_REALIZADO');\n\n      // Executar método\n      const result = await service.verificarSolicitacaoElegivel(solicitacaoId);\n\n      // Verificar resultado\n      expect(result).toBe(false);\n    });\n\n    it('deve propagar exceções de verificarStatusSolicitacao', async () => {\n      // Configurar mock para verificarStatusSolicitacao\n      jest.spyOn(service, 'verificarStatusSolicitacao').mockRejectedValue(\n        new NotFoundException('Solicitação não encontrada')\n      );\n\n      // Executar e verificar exceção\n      await expect(service.verificarSolicitacaoElegivel(solicitacaoId)).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('atualizarStatusSolicitacao', () => {\n    const solicitacaoId = 'solicitacao-id';\n    const usuarioId = 'usuario-id';\n    const statusPagamento = StatusPagamentoEnum.LIBERADO;\n    \n    const mockResposta = {\n      id: solicitacaoId,\n      status: 'PAGAMENTO_REALIZADO',\n      updatedAt: '2023-01-02T00:00:00Z'\n    };\n\n    it('deve atualizar status da solicitação para PAGAMENTO_REALIZADO quando pagamento liberado', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockResposta,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.patch.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.atualizarStatusSolicitacao(solicitacaoId, statusPagamento, usuarioId);\n\n      // Verificar resultado\n      expect(result).toBe(true);\n      expect(mockHttpService.patch).toHaveBeenCalledWith(\n        `http://api-solicitacao.pgben.local/solicitacoes/${solicitacaoId}/status`,\n        { status: 'PAGAMENTO_REALIZADO', motivo: expect.any(String) },\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock',\n            'x-user-id': usuarioId\n          })\n        })\n      );\n    });\n\n    it('deve atualizar status da solicitação para PAGAMENTO_CANCELADO quando pagamento cancelado', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: { ...mockResposta, status: 'PAGAMENTO_CANCELADO' },\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.patch.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.atualizarStatusSolicitacao(\n        solicitacaoId, \n        StatusPagamentoEnum.CANCELADO, \n        usuarioId\n      );\n\n      // Verificar resultado\n      expect(result).toBe(true);\n      expect(mockHttpService.patch).toHaveBeenCalledWith(\n        `http://api-solicitacao.pgben.local/solicitacoes/${solicitacaoId}/status`,\n        { status: 'PAGAMENTO_CANCELADO', motivo: expect.any(String) },\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock',\n            'x-user-id': usuarioId\n          })\n        })\n      );\n    });\n\n    it('deve lançar ConflictException quando status de pagamento não requer atualização da solicitação', async () => {\n      // Executar e verificar exceção\n      await expect(\n        service.atualizarStatusSolicitacao(solicitacaoId, StatusPagamentoEnum.AGENDADO, usuarioId)\n      ).rejects.toThrow(ConflictException);\n      \n      expect(mockHttpService.patch).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar NotFoundException quando solicitação não encontrada', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.patch.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Solicitação não encontrada' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(\n        service.atualizarStatusSolicitacao(solicitacaoId, StatusPagamentoEnum.LIBERADO, usuarioId)\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve propagar outros erros HTTP', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.patch.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 500,\n            data: { message: 'Erro interno do servidor' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(\n        service.atualizarStatusSolicitacao(solicitacaoId, StatusPagamentoEnum.LIBERADO, usuarioId)\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('obterDetalhesSolicitacao', () => {\n    const solicitacaoId = 'solicitacao-id';\n    \n    const mockSolicitacao = {\n      id: solicitacaoId,\n      status: 'PAGAMENTO_PENDENTE',\n      cidadaoId: 'cidadao-id',\n      valorAprovado: 500.00,\n      createdAt: '2023-01-01T00:00:00Z',\n      beneficio: {\n        id: 'beneficio-id',\n        nome: 'Auxílio Moradia',\n        descricao: 'Auxílio para famílias em situação de vulnerabilidade'\n      },\n      unidade: {\n        id: 'unidade-id',\n        nome: 'CRAS Centro',\n        endereco: 'Rua Principal, 123'\n      }\n    };\n\n    it('deve retornar detalhes da solicitação quando encontrada', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockSolicitacao,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any\n      };\n      \n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.obterDetalhesSolicitacao(solicitacaoId);\n\n      // Verificar resultado\n      expect(result).toEqual(mockSolicitacao);\n      expect(mockHttpService.get).toHaveBeenCalledWith(\n        `http://api-solicitacao.pgben.local/solicitacoes/${solicitacaoId}`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock'\n          }),\n          params: {\n            expand: 'beneficio,unidade'\n          }\n        })\n      );\n    });\n\n    it('deve lançar NotFoundException quando solicitação não encontrada', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Solicitação não encontrada' }\n          }\n        }))\n      );\n\n      // Executar e verificar exceção\n      await expect(service.obterDetalhesSolicitacao(solicitacaoId)).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"],"version":3}