458675f41a54dd14c86fb01bfc96f0b6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BeneficioService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const tipo_beneficio_entity_1 = require("../../../entities/tipo-beneficio.entity");
const requisito_documento_entity_1 = require("../../../entities/requisito-documento.entity");
const fluxo_beneficio_entity_1 = require("../../../entities/fluxo-beneficio.entity");
const enums_1 = require("@/enums");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
const tipo_beneficio_schema_entity_1 = require("../../../entities/tipo-beneficio-schema.entity");
/**
 * Serviço de Benefícios
 *
 * Responsável pela lógica de negócio relacionada aos tipos de benefícios,
 * requisitos documentais e fluxos de aprovação.
 */
let BeneficioService = class BeneficioService {
    tipoBeneficioRepository;
    requisitoDocumentoRepository;
    fluxoBeneficioRepository;
    tipoBeneficioSchemaRepository;
    constructor(tipoBeneficioRepository, requisitoDocumentoRepository, fluxoBeneficioRepository, tipoBeneficioSchemaRepository) {
        this.tipoBeneficioRepository = tipoBeneficioRepository;
        this.requisitoDocumentoRepository = requisitoDocumentoRepository;
        this.fluxoBeneficioRepository = fluxoBeneficioRepository;
        this.tipoBeneficioSchemaRepository = tipoBeneficioSchemaRepository;
    }
    /**
     * Lista todos os tipos de benefícios com paginação e filtros
     * Inclui schema ativo e requisitos de documento para cada benefício
     */
    async findAll(options) {
        const { page = 1, limit = 10, search, ativo } = options;
        const queryBuilder = this.tipoBeneficioRepository
            .createQueryBuilder('tipo_beneficio')
            .leftJoinAndSelect('tipo_beneficio.requisito_documento', 'requisito_documento');
        // Aplicar filtros
        if (search) {
            queryBuilder.where('tipo_beneficio.nome ILIKE :search', {
                search: `%${search}%`,
            });
        }
        if (ativo !== undefined) {
            queryBuilder.andWhere('tipo_beneficio.ativo = :ativo', { ativo });
        }
        // Calcular paginação
        const skip = (page - 1) * limit;
        queryBuilder.skip(skip).take(limit);
        // Ordenação padrão
        queryBuilder.orderBy('tipo_beneficio.created_at', 'DESC');
        // Executar consulta
        const result = await queryBuilder.getManyAndCount();
        const items = result[0];
        const total = result[1];
        // Enriquecer cada item com schema ativo
        const itemsEnriquecidos = await Promise.all(items.map(async (item) => {
            // Obter schema ativo para o tipo de benefício
            const schemaAtivo = await this.tipoBeneficioSchemaRepository.findOne({
                where: { tipo_beneficio_id: item.id, status: enums_1.Status.ATIVO },
            });
            return {
                ...item,
                schema: schemaAtivo,
            };
        }));
        return {
            items: itemsEnriquecidos,
            meta: {
                total,
                page,
                limit,
                pages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca um tipo de benefício por ID com schema
     */
    async findById(id) {
        const tipoBeneficio = await this.tipoBeneficioRepository.findOne({
            where: { id },
            relations: ['requisito_documento'],
        });
        if (!tipoBeneficio) {
            throw new common_1.NotFoundException(`Tipo de benefício com ID ${id} não encontrado`);
        }
        // Obter schema ativo do benefício
        const schema = await this.tipoBeneficioSchemaRepository.findOne({
            where: { tipo_beneficio_id: id, status: enums_1.Status.ATIVO },
        });
        return {
            ...tipoBeneficio,
            schema: schema ? { ...schema.schema_estrutura } : null,
        };
    }
    /**
     * Cria um novo tipo de benefício
     */
    async create(createTipoBeneficioDto) {
        // Verificar se já existe um benefício com o mesmo nome
        const existingBeneficio = await this.tipoBeneficioRepository.findOne({
            where: { nome: createTipoBeneficioDto.nome },
        });
        if (existingBeneficio) {
            throw new common_1.ConflictException(`Já existe um tipo de benefício com o nome '${createTipoBeneficioDto.nome}'`);
        }
        // Normalizar campos de enum antes de criar
        const normalizedData = (0, enum_normalizer_util_1.normalizeEnumFields)(createTipoBeneficioDto);
        // Gera um código se não for fornecido
        if (!normalizedData.codigo) {
            normalizedData.codigo = normalizedData.nome
                .normalize('NFD')
                .replace(/[\u0300-\u036f]/g, '') // Remove accents
                .toUpperCase()
                .replace(/\s+/g, '_'); // Replace spaces with underscore
        }
        // Define o status como ativo por padrão
        if (!normalizedData.status) {
            normalizedData.status = enums_1.Status.ATIVO;
        }
        // Criar novo tipo de benefício
        const tipoBeneficio = this.tipoBeneficioRepository.create(normalizedData);
        return this.tipoBeneficioRepository.save(tipoBeneficio);
    }
    /**
     * Atualiza um tipo de benefício existente
     */
    async update(id, updateTipoBeneficioDto) {
        // Verificar se o benefício existe
        const tipoBeneficio = await this.findById(id);
        // Se estiver alterando o nome, verificar se já existe outro com o mesmo nome
        if (updateTipoBeneficioDto.nome &&
            updateTipoBeneficioDto.nome !== tipoBeneficio.nome) {
            const existingBeneficio = await this.tipoBeneficioRepository.findOne({
                where: { nome: updateTipoBeneficioDto.nome },
            });
            if (existingBeneficio && existingBeneficio.id !== id) {
                throw new common_1.ConflictException(`Já existe um tipo de benefício com o nome '${updateTipoBeneficioDto.nome}'`);
            }
        }
        // Normalizar campos de enum antes de atualizar
        const normalizedData = (0, enum_normalizer_util_1.normalizeEnumFields)(updateTipoBeneficioDto);
        // Atualizar e salvar
        Object.assign(tipoBeneficio, normalizedData);
        return this.tipoBeneficioRepository.save(tipoBeneficio);
    }
    /**
     * Lista requisitos documentais de um benefício
     */
    async findRequisitosByBeneficioId(beneficioId) {
        // Verificar se o benefício existe
        await this.findById(beneficioId);
        // Buscar requisitos
        return this.requisitoDocumentoRepository.find({
            where: { tipo_beneficio: { id: beneficioId } },
            order: { obrigatorio: 'DESC', tipo_documento: 'ASC' },
        });
    }
    /**
     * Adiciona requisito documental a um benefício
     */
    async addRequisito(beneficioId, createRequisitoDocumentoDto) {
        // Verificar se o benefício existe
        const tipoBeneficio = await this.findById(beneficioId);
        // Verificar se já existe um requisito com o mesmo tipo de documento para este benefício
        const existingRequisito = await this.requisitoDocumentoRepository.findOne({
            where: {
                tipo_documento: createRequisitoDocumentoDto.tipo_documento,
                tipo_beneficio: { id: beneficioId },
            },
        });
        if (existingRequisito) {
            throw new common_1.ConflictException(`Já existe um requisito com o tipo de documento '${createRequisitoDocumentoDto.tipo_documento}' para este benefício`);
        }
        // Criar e salvar o requisito
        const requisito = this.requisitoDocumentoRepository.create({
            ...createRequisitoDocumentoDto,
            tipo_beneficio: tipoBeneficio,
        });
        return this.requisitoDocumentoRepository.save(requisito);
    }
    /**
     * Configura fluxo de aprovação de um benefício
     */
    async configurarFluxo(beneficioId, configurarFluxoDto) {
        // Verificar se o benefício existe
        const tipoBeneficio = await this.findById(beneficioId);
        // Validar etapas do fluxo
        if (!configurarFluxoDto.etapas || configurarFluxoDto.etapas.length === 0) {
            throw new common_1.BadRequestException('O fluxo deve conter pelo menos uma etapa');
        }
        // Verificar se já existe um fluxo para este benefício
        const fluxos = await this.fluxoBeneficioRepository.find({
            where: { tipo_beneficio: { id: beneficioId } },
            order: { ordem: 'ASC' },
        });
        // Remover fluxos existentes
        if (fluxos && fluxos.length > 0) {
            await this.fluxoBeneficioRepository.remove(fluxos);
        }
        // Criar novas etapas do fluxo
        const novasEtapas = configurarFluxoDto.etapas.map((etapa, index) => {
            return this.fluxoBeneficioRepository.create({
                tipo_beneficio: tipoBeneficio,
                nome_etapa: etapa.nome,
                tipo_etapa: etapa.tipo_aprovador, // Converter o tipo de aprovador para tipo de etapa
                perfil_responsavel: etapa.tipo_aprovador, // Converter o tipo de aprovador para perfil responsável
                ordem: etapa.ordem || index + 1,
                descricao: etapa.descricao,
                obrigatorio: true, // Valor padrão
                permite_retorno: false, // Valor padrão
                setor_id: etapa.prazo_dias ? etapa.prazo_dias.toString() : undefined, // Usar prazo_dias como setor_id temporário
            });
        });
        // Salvar as novas etapas
        return this.fluxoBeneficioRepository.save(novasEtapas);
    }
};
exports.BeneficioService = BeneficioService;
exports.BeneficioService = BeneficioService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(tipo_beneficio_entity_1.TipoBeneficio)),
    __param(1, (0, typeorm_1.InjectRepository)(requisito_documento_entity_1.RequisitoDocumento)),
    __param(2, (0, typeorm_1.InjectRepository)(fluxo_beneficio_entity_1.FluxoBeneficio)),
    __param(3, (0, typeorm_1.InjectRepository)(tipo_beneficio_schema_entity_1.TipoBeneficioSchema)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object])
], BeneficioService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,