78b140e8d7636caf52f9d39dcc6927a7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConverterPapelDto = void 0;
const swagger_1 = require("@nestjs/swagger");
const class_validator_1 = require("class-validator");
/**
 * DTO para conversão de papel de um cidadão
 *
 * Permite converter um cidadão que está na composição familiar de uma solicitação
 * para se tornar o beneficiário principal de uma nova solicitação.
 */
class ConverterPapelDto {
    solicitacao_origem_id;
    cidadao_id;
    tipo_beneficio_id;
    unidade_id;
    justificativa;
    dados_complementares;
}
exports.ConverterPapelDto = ConverterPapelDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID da solicitação onde o cidadão está na composição familiar',
        example: '123e4567-e89b-12d3-a456-426614174000',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da solicitação original é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da solicitação deve ser um UUID válido' }),
    __metadata("design:type", String)
], ConverterPapelDto.prototype, "solicitacao_origem_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID do cidadão a ser convertido de membro para beneficiário',
        example: '123e4567-e89b-12d3-a456-426614174001',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do cidadão é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do cidadão deve ser um UUID válido' }),
    __metadata("design:type", String)
], ConverterPapelDto.prototype, "cidadao_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID do tipo de benefício para a nova solicitação',
        example: '123e4567-e89b-12d3-a456-426614174002',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do tipo de benefício é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do tipo de benefício deve ser um UUID válido' }),
    __metadata("design:type", String)
], ConverterPapelDto.prototype, "tipo_beneficio_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID da unidade para a nova solicitação',
        example: '123e4567-e89b-12d3-a456-426614174003',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da unidade é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da unidade deve ser um UUID válido' }),
    __metadata("design:type", String)
], ConverterPapelDto.prototype, "unidade_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Justificativa para a conversão de papel',
        example: 'Cidadão precisa ser beneficiário devido a mudança na situação familiar',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Justificativa é obrigatória' }),
    (0, class_validator_1.IsString)({ message: 'Justificativa deve ser uma string' }),
    __metadata("design:type", String)
], ConverterPapelDto.prototype, "justificativa", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Dados complementares específicos para o tipo de benefício',
        example: { campo1: 'valor1', campo2: 'valor2' },
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_a = typeof Record !== "undefined" && Record) === "function" ? _a : Object)
], ConverterPapelDto.prototype, "dados_complementares", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHNvbGljaXRhY2FvXFxkdG9cXGNvbnZlcnRlci1wYXBlbC5kdG8udHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUE4QztBQUM5QyxxREFBMkU7QUFFM0U7Ozs7O0dBS0c7QUFDSCxNQUFhLGlCQUFpQjtJQU81QixxQkFBcUIsQ0FBUztJQVE5QixVQUFVLENBQVM7SUFRbkIsaUJBQWlCLENBQVM7SUFRMUIsVUFBVSxDQUFTO0lBU25CLGFBQWEsQ0FBUztJQVF0QixvQkFBb0IsQ0FBdUI7Q0FDNUM7QUFqREQsOENBaURDO0FBMUNDO0lBTkMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUFFLDhEQUE4RDtRQUMzRSxPQUFPLEVBQUUsc0NBQXNDO0tBQ2hELENBQUM7SUFDRCxJQUFBLDRCQUFVLEVBQUMsRUFBRSxPQUFPLEVBQUUsMENBQTBDLEVBQUUsQ0FBQztJQUNuRSxJQUFBLHdCQUFNLEVBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLDJDQUEyQyxFQUFFLENBQUM7O2dFQUN4QztBQVE5QjtJQU5DLElBQUEscUJBQVcsRUFBQztRQUNYLFdBQVcsRUFBRSw0REFBNEQ7UUFDekUsT0FBTyxFQUFFLHNDQUFzQztLQUNoRCxDQUFDO0lBQ0QsSUFBQSw0QkFBVSxFQUFDLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLENBQUM7SUFDdEQsSUFBQSx3QkFBTSxFQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxDQUFDOztxREFDL0M7QUFRbkI7SUFOQyxJQUFBLHFCQUFXLEVBQUM7UUFDWCxXQUFXLEVBQUUsaURBQWlEO1FBQzlELE9BQU8sRUFBRSxzQ0FBc0M7S0FDaEQsQ0FBQztJQUNELElBQUEsNEJBQVUsRUFBQyxFQUFFLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxDQUFDO0lBQ2hFLElBQUEsd0JBQU0sRUFBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsaURBQWlELEVBQUUsQ0FBQzs7NERBQ2xEO0FBUTFCO0lBTkMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUFFLHVDQUF1QztRQUNwRCxPQUFPLEVBQUUsc0NBQXNDO0tBQ2hELENBQUM7SUFDRCxJQUFBLDRCQUFVLEVBQUMsRUFBRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQztJQUN0RCxJQUFBLHdCQUFNLEVBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLHVDQUF1QyxFQUFFLENBQUM7O3FEQUMvQztBQVNuQjtJQVBDLElBQUEscUJBQVcsRUFBQztRQUNYLFdBQVcsRUFBRSx5Q0FBeUM7UUFDdEQsT0FBTyxFQUNMLHdFQUF3RTtLQUMzRSxDQUFDO0lBQ0QsSUFBQSw0QkFBVSxFQUFDLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLENBQUM7SUFDdEQsSUFBQSwwQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLENBQUM7O3dEQUNyQztBQVF0QjtJQU5DLElBQUEscUJBQVcsRUFBQztRQUNYLFdBQVcsRUFBRSwyREFBMkQ7UUFDeEUsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFO1FBQy9DLFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUM7SUFDRCxJQUFBLDRCQUFVLEdBQUU7a0RBQ1UsTUFBTSxvQkFBTixNQUFNOytEQUFjIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxzb2xpY2l0YWNhb1xcZHRvXFxjb252ZXJ0ZXItcGFwZWwuZHRvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwaVByb3BlcnR5IH0gZnJvbSAnQG5lc3Rqcy9zd2FnZ2VyJztcbmltcG9ydCB7IElzTm90RW1wdHksIElzU3RyaW5nLCBJc1VVSUQsIElzT3B0aW9uYWwgfSBmcm9tICdjbGFzcy12YWxpZGF0b3InO1xuXG4vKipcbiAqIERUTyBwYXJhIGNvbnZlcnPDo28gZGUgcGFwZWwgZGUgdW0gY2lkYWTDo29cbiAqXG4gKiBQZXJtaXRlIGNvbnZlcnRlciB1bSBjaWRhZMOjbyBxdWUgZXN0w6EgbmEgY29tcG9zacOnw6NvIGZhbWlsaWFyIGRlIHVtYSBzb2xpY2l0YcOnw6NvXG4gKiBwYXJhIHNlIHRvcm5hciBvIGJlbmVmaWNpw6FyaW8gcHJpbmNpcGFsIGRlIHVtYSBub3ZhIHNvbGljaXRhw6fDo28uXG4gKi9cbmV4cG9ydCBjbGFzcyBDb252ZXJ0ZXJQYXBlbER0byB7XG4gIEBBcGlQcm9wZXJ0eSh7XG4gICAgZGVzY3JpcHRpb246ICdJRCBkYSBzb2xpY2l0YcOnw6NvIG9uZGUgbyBjaWRhZMOjbyBlc3TDoSBuYSBjb21wb3Npw6fDo28gZmFtaWxpYXInLFxuICAgIGV4YW1wbGU6ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnLFxuICB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdJRCBkYSBzb2xpY2l0YcOnw6NvIG9yaWdpbmFsIMOpIG9icmlnYXTDs3JpbycgfSlcbiAgQElzVVVJRCgnNCcsIHsgbWVzc2FnZTogJ0lEIGRhIHNvbGljaXRhw6fDo28gZGV2ZSBzZXIgdW0gVVVJRCB2w6FsaWRvJyB9KVxuICBzb2xpY2l0YWNhb19vcmlnZW1faWQ6IHN0cmluZztcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnSUQgZG8gY2lkYWTDo28gYSBzZXIgY29udmVydGlkbyBkZSBtZW1icm8gcGFyYSBiZW5lZmljacOhcmlvJyxcbiAgICBleGFtcGxlOiAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAxJyxcbiAgfSlcbiAgQElzTm90RW1wdHkoeyBtZXNzYWdlOiAnSUQgZG8gY2lkYWTDo28gw6kgb2JyaWdhdMOzcmlvJyB9KVxuICBASXNVVUlEKCc0JywgeyBtZXNzYWdlOiAnSUQgZG8gY2lkYWTDo28gZGV2ZSBzZXIgdW0gVVVJRCB2w6FsaWRvJyB9KVxuICBjaWRhZGFvX2lkOiBzdHJpbmc7XG5cbiAgQEFwaVByb3BlcnR5KHtcbiAgICBkZXNjcmlwdGlvbjogJ0lEIGRvIHRpcG8gZGUgYmVuZWbDrWNpbyBwYXJhIGEgbm92YSBzb2xpY2l0YcOnw6NvJyxcbiAgICBleGFtcGxlOiAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAyJyxcbiAgfSlcbiAgQElzTm90RW1wdHkoeyBtZXNzYWdlOiAnSUQgZG8gdGlwbyBkZSBiZW5lZsOtY2lvIMOpIG9icmlnYXTDs3JpbycgfSlcbiAgQElzVVVJRCgnNCcsIHsgbWVzc2FnZTogJ0lEIGRvIHRpcG8gZGUgYmVuZWbDrWNpbyBkZXZlIHNlciB1bSBVVUlEIHbDoWxpZG8nIH0pXG4gIHRpcG9fYmVuZWZpY2lvX2lkOiBzdHJpbmc7XG5cbiAgQEFwaVByb3BlcnR5KHtcbiAgICBkZXNjcmlwdGlvbjogJ0lEIGRhIHVuaWRhZGUgcGFyYSBhIG5vdmEgc29saWNpdGHDp8OjbycsXG4gICAgZXhhbXBsZTogJzEyM2U0NTY3LWU4OWItMTJkMy1hNDU2LTQyNjYxNDE3NDAwMycsXG4gIH0pXG4gIEBJc05vdEVtcHR5KHsgbWVzc2FnZTogJ0lEIGRhIHVuaWRhZGUgw6kgb2JyaWdhdMOzcmlvJyB9KVxuICBASXNVVUlEKCc0JywgeyBtZXNzYWdlOiAnSUQgZGEgdW5pZGFkZSBkZXZlIHNlciB1bSBVVUlEIHbDoWxpZG8nIH0pXG4gIHVuaWRhZGVfaWQ6IHN0cmluZztcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnSnVzdGlmaWNhdGl2YSBwYXJhIGEgY29udmVyc8OjbyBkZSBwYXBlbCcsXG4gICAgZXhhbXBsZTpcbiAgICAgICdDaWRhZMOjbyBwcmVjaXNhIHNlciBiZW5lZmljacOhcmlvIGRldmlkbyBhIG11ZGFuw6dhIG5hIHNpdHVhw6fDo28gZmFtaWxpYXInLFxuICB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdKdXN0aWZpY2F0aXZhIMOpIG9icmlnYXTDs3JpYScgfSlcbiAgQElzU3RyaW5nKHsgbWVzc2FnZTogJ0p1c3RpZmljYXRpdmEgZGV2ZSBzZXIgdW1hIHN0cmluZycgfSlcbiAganVzdGlmaWNhdGl2YTogc3RyaW5nO1xuXG4gIEBBcGlQcm9wZXJ0eSh7XG4gICAgZGVzY3JpcHRpb246ICdEYWRvcyBjb21wbGVtZW50YXJlcyBlc3BlY8OtZmljb3MgcGFyYSBvIHRpcG8gZGUgYmVuZWbDrWNpbycsXG4gICAgZXhhbXBsZTogeyBjYW1wbzE6ICd2YWxvcjEnLCBjYW1wbzI6ICd2YWxvcjInIH0sXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICB9KVxuICBASXNPcHRpb25hbCgpXG4gIGRhZG9zX2NvbXBsZW1lbnRhcmVzPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==