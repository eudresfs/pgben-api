{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\template-renderer.service.ts","mappings":";;;;;;;;;;AAAA,2CAAoD;AAGpD;;;GAGG;AAEI,IAAM,uBAAuB,+BAA7B,MAAM,uBAAuB;IACjB,MAAM,GAAG,IAAI,eAAM,CAAC,yBAAuB,CAAC,IAAI,CAAC,CAAC;IAEnE;;;;;;OAMG;IACH,UAAU,CAAC,QAAgB,EAAE,QAA6B;QACxD,IAAI,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,6BAA6B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,wBAAwB,CAClF,CAAC;YAEF,qDAAqD;YACrD,wBAAwB;YACxB,OAAO,QAAQ,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;gBACzD,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;gBAE3D,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;oBACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,aAAa,GAAG,6CAA6C,CAC9D,CAAC;oBACF,OAAO,KAAK,CAAC,CAAC,wDAAwD;gBACxE,CAAC;gBAED,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,gCAAgC,KAAK,CAAC,OAAO,EAAE,EAC/C,KAAK,CAAC,KAAK,CACZ,CAAC;YACF,MAAM,IAAI,KAAK,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,qBAAqB,CACnB,QAA8B,EAC9B,QAA6B;QAE7B,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC;YACpD,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,iBAAiB,EAAE,QAAQ,CAAC;SAChE,CAAC;IACJ,CAAC;IAED;;;OAGG;IACK,iBAAiB,CAAC,GAAwB,EAAE,IAAY;QAC9D,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;YAC3C,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACnE,CAAC,EAAE,GAAG,CAAC,CAAC;IACV,CAAC;CACF,CAAA;AAjEY,0DAAuB;kCAAvB,uBAAuB;IADnC,IAAA,mBAAU,GAAE;GACA,uBAAuB,CAiEnC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\template-renderer.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { NotificationTemplate } from '../../../entities';\n\n/**\n * Serviço responsável por renderizar templates de notificação\n * substituindo variáveis pelos valores de contexto\n */\n@Injectable()\nexport class TemplateRendererService {\n  private readonly logger = new Logger(TemplateRendererService.name);\n\n  /**\n   * Renderiza um template substituindo variáveis pelos valores do contexto\n   *\n   * @param template Template a ser renderizado\n   * @param contexto Dados de contexto para substituição\n   * @returns Conteúdo renderizado\n   */\n  renderizar(template: string, contexto: Record<string, any>): string {\n    try {\n      this.logger.debug(\n        `Renderizando template com ${Object.keys(contexto).length} variáveis de contexto`,\n      );\n\n      // Implementação simples de substituição de variáveis\n      // Formato: {{variavel}}\n      return template.replace(/\\{\\{([^}]+)\\}\\}/g, (match, key) => {\n        const value = this.getNestedProperty(contexto, key.trim());\n\n        if (value === undefined) {\n          this.logger.warn(\n            `Variável \"${key}\" não encontrada no contexto da notificação`,\n          );\n          return match; // Mantém o placeholder se a variável não for encontrada\n        }\n\n        return String(value);\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao renderizar template: ${error.message}`,\n        error.stack,\n      );\n      throw new Error(`Falha ao renderizar template: ${error.message}`);\n    }\n  }\n\n  /**\n   * Renderiza um template completo de notificação\n   *\n   * @param template Objeto de template\n   * @param contexto Dados de contexto para substituição\n   * @returns Objeto com assunto e conteúdo renderizados\n   */\n  renderizarNotificacao(\n    template: NotificationTemplate,\n    contexto: Record<string, any>,\n  ): { assunto: string; conteudo: string } {\n    return {\n      assunto: this.renderizar(template.assunto, contexto),\n      conteudo: this.renderizar(template.template_conteudo, contexto),\n    };\n  }\n\n  /**\n   * Recupera propriedade aninhada de um objeto usando notação de ponto\n   * Ex: \"usuario.endereco.cidade\" buscará contexto.usuario.endereco.cidade\n   */\n  private getNestedProperty(obj: Record<string, any>, path: string): any {\n    return path.split('.').reduce((prev, curr) => {\n      return prev && prev[curr] !== undefined ? prev[curr] : undefined;\n    }, obj);\n  }\n}\n"],"version":3}