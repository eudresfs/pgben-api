{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\controllers\\integracao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\controllers\\integracao.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Query,\n  Put,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { IntegracaoService } from '../services/integracao.service';\nimport { IntegracaoUpdateDto } from '../dtos/integracao/integracao-update.dto';\nimport { IntegracaoTestDto } from '../dtos/integracao/integracao-test.dto';\nimport { IntegracaoResponseDto } from '../dtos/integracao/integracao-response.dto';\nimport { IntegracaoTipoEnum } from '../../../enums/integracao-tipo.enum';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { ApiErrorResponse } from '../../../shared/dtos/api-error-response.dto';\nimport { EntityNotFoundException } from '../../../shared/exceptions';\n\n/**\n * Controlador responsável pelas operações de configurações de integração externa\n */\n@ApiTags('Configuração')\n@Controller('configuracao/integracoes')\nexport class IntegracaoController {\n  constructor(private readonly integracaoService: IntegracaoService) {}\n\n  /**\n   * Busca todas as configurações de integração\n   * @param tipo Tipo opcional para filtrar\n   * @returns Lista de configurações\n   */\n  @Get()\n  @ApiOperation({ summary: 'Buscar todas as configurações de integração' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de configurações encontradas',\n    type: [IntegracaoResponseDto],\n  })\n  async buscarTodas(\n    @Query('tipo') tipo?: IntegracaoTipoEnum,\n  ): Promise<IntegracaoResponseDto[]> {\n    return this.integracaoService.buscarTodas(tipo);\n  }\n\n  /**\n   * Busca uma configuração de integração específica por seu código\n   * @param codigo Código da configuração\n   * @returns Configuração encontrada\n   */\n  @Get(':codigo')\n  @ApiOperation({ summary: 'Buscar configuração de integração por código' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único da configuração',\n    example: 'smtp-principal',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Configuração encontrada',\n    type: IntegracaoResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Configuração não encontrada',\n  })\n  async buscarPorCodigo(\n    @Param('codigo') codigo: string,\n  ): Promise<IntegracaoResponseDto> {\n    return this.integracaoService.buscarPorCodigo(codigo);\n  }\n\n  /**\n   * Cria ou atualiza uma configuração de integração\n   * @param codigo Código da configuração\n   * @param dto Dados para atualização\n   * @returns Configuração atualizada\n   */\n  @Put(':codigo')\n  @ApiOperation({ summary: 'Criar ou atualizar configuração de integração' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único da configuração',\n    example: 'smtp-principal',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Configuração criada/atualizada com sucesso',\n    type: IntegracaoResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos',\n  })\n  async atualizarOuCriar(\n    @Param('codigo') codigo: string,\n    @Body() dto: IntegracaoUpdateDto,\n  ): Promise<IntegracaoResponseDto> {\n    return this.integracaoService.atualizarOuCriar(codigo, dto);\n  }\n\n  /**\n   * Remove uma configuração de integração\n   * @param codigo Código da configuração\n   */\n  @Delete(':codigo')\n  @ApiOperation({ summary: 'Remover configuração de integração' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único da configuração',\n    example: 'smtp-principal',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Configuração removida com sucesso',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Configuração não encontrada',\n  })\n  async remover(@Param('codigo') codigo: string): Promise<void> {\n    await this.integracaoService.remover(codigo);\n  }\n\n  /**\n   * Testa uma configuração de integração\n   * @param dto Dados para teste da configuração\n   * @returns Resultado do teste\n   */\n  @Post('testar')\n  @ApiOperation({ summary: 'Testar configuração de integração' })\n  @ApiResponse({\n    status: 200,\n    description: 'Teste executado com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        sucesso: {\n          type: 'boolean',\n          description: 'Indica se o teste foi bem-sucedido',\n        },\n        mensagem: {\n          type: 'string',\n          description: 'Mensagem detalhada do resultado do teste',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou erro no teste',\n  })\n  async testar(\n    @Body() dto: IntegracaoTestDto,\n  ): Promise<{ sucesso: boolean; mensagem: string }> {\n    return this.integracaoService.testar(dto);\n  }\n\n  /**\n   * Ativa ou desativa uma configuração de integração\n   * @param codigo Código da configuração\n   * @param ativo Status de ativação\n   * @returns Configuração atualizada\n   */\n  @Put(':codigo/status')\n  @ApiOperation({ summary: 'Ativar ou desativar configuração de integração' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único da configuração',\n    example: 'smtp-principal',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Status da configuração atualizado com sucesso',\n    type: IntegracaoResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Configuração não encontrada',\n  })\n  async alterarStatus(\n    @Param('codigo') codigo: string,\n    @Body() { ativo }: { ativo: boolean },\n  ): Promise<IntegracaoResponseDto> {\n    return this.integracaoService.alterarStatus(codigo, ativo);\n  }\n\n  /**\n   * Busca a configuração ativa para um determinado tipo de integração\n   * @param tipo Tipo da integração\n   * @returns Configuração ativa ou null\n   */\n  @Get('ativa/:tipo')\n  @ApiOperation({ summary: 'Buscar configuração ativa por tipo' })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo de integração',\n    enum: IntegracaoTipoEnum,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Configuração ativa encontrada',\n    type: IntegracaoResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Nenhuma configuração ativa encontrada',\n  })\n  async buscarConfigAtiva(\n    @Param('tipo') tipo: IntegracaoTipoEnum,\n  ): Promise<IntegracaoResponseDto> {\n    const config = await this.integracaoService.buscarConfigAtiva(tipo);\n    if (!config) {\n      throw new EntityNotFoundException(\n        'Configuração de integração',\n        tipo,\n        'tipo',\n      );\n    }\n    return config;\n  }\n}\n"],"version":3}