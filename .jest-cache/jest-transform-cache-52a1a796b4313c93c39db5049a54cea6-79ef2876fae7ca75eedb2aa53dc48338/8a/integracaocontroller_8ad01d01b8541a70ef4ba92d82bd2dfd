20b86024e9237a7668e30b21d76e8acc
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegracaoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const integracao_service_1 = require("../services/integracao.service");
const integracao_update_dto_1 = require("../dtos/integracao/integracao-update.dto");
const integracao_test_dto_1 = require("../dtos/integracao/integracao-test.dto");
const integracao_response_dto_1 = require("../dtos/integracao/integracao-response.dto");
const integracao_tipo_enum_1 = require("../../../enums/integracao-tipo.enum");
const exceptions_1 = require("../../../shared/exceptions");
/**
 * Controlador responsável pelas operações de configurações de integração externa
 */
let IntegracaoController = class IntegracaoController {
    integracaoService;
    constructor(integracaoService) {
        this.integracaoService = integracaoService;
    }
    /**
     * Busca todas as configurações de integração
     * @param tipo Tipo opcional para filtrar
     * @returns Lista de configurações
     */
    async buscarTodas(tipo) {
        return this.integracaoService.buscarTodas(tipo);
    }
    /**
     * Busca uma configuração de integração específica por seu código
     * @param codigo Código da configuração
     * @returns Configuração encontrada
     */
    async buscarPorCodigo(codigo) {
        return this.integracaoService.buscarPorCodigo(codigo);
    }
    /**
     * Cria ou atualiza uma configuração de integração
     * @param codigo Código da configuração
     * @param dto Dados para atualização
     * @returns Configuração atualizada
     */
    async atualizarOuCriar(codigo, dto) {
        return this.integracaoService.atualizarOuCriar(codigo, dto);
    }
    /**
     * Remove uma configuração de integração
     * @param codigo Código da configuração
     */
    async remover(codigo) {
        await this.integracaoService.remover(codigo);
    }
    /**
     * Testa uma configuração de integração
     * @param dto Dados para teste da configuração
     * @returns Resultado do teste
     */
    async testar(dto) {
        return this.integracaoService.testar(dto);
    }
    /**
     * Ativa ou desativa uma configuração de integração
     * @param codigo Código da configuração
     * @param ativo Status de ativação
     * @returns Configuração atualizada
     */
    async alterarStatus(codigo, { ativo }) {
        return this.integracaoService.alterarStatus(codigo, ativo);
    }
    /**
     * Busca a configuração ativa para um determinado tipo de integração
     * @param tipo Tipo da integração
     * @returns Configuração ativa ou null
     */
    async buscarConfigAtiva(tipo) {
        const config = await this.integracaoService.buscarConfigAtiva(tipo);
        if (!config) {
            throw new exceptions_1.EntityNotFoundException('Configuração de integração', tipo, 'tipo');
        }
        return config;
    }
};
exports.IntegracaoController = IntegracaoController;
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar todas as configurações de integração' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de configurações encontradas',
        type: [integracao_response_dto_1.IntegracaoResponseDto],
    }),
    __param(0, (0, common_1.Query)('tipo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof integracao_tipo_enum_1.IntegracaoTipoEnum !== "undefined" && integracao_tipo_enum_1.IntegracaoTipoEnum) === "function" ? _b : Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], IntegracaoController.prototype, "buscarTodas", null);
__decorate([
    (0, common_1.Get)(':codigo'),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar configuração de integração por código' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único da configuração',
        example: 'smtp-principal',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Configuração encontrada',
        type: integracao_response_dto_1.IntegracaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Configuração não encontrada',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], IntegracaoController.prototype, "buscarPorCodigo", null);
__decorate([
    (0, common_1.Put)(':codigo'),
    (0, swagger_1.ApiOperation)({ summary: 'Criar ou atualizar configuração de integração' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único da configuração',
        example: 'smtp-principal',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Configuração criada/atualizada com sucesso',
        type: integracao_response_dto_1.IntegracaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof integracao_update_dto_1.IntegracaoUpdateDto !== "undefined" && integracao_update_dto_1.IntegracaoUpdateDto) === "function" ? _e : Object]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], IntegracaoController.prototype, "atualizarOuCriar", null);
__decorate([
    (0, common_1.Delete)(':codigo'),
    (0, swagger_1.ApiOperation)({ summary: 'Remover configuração de integração' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único da configuração',
        example: 'smtp-principal',
    }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Configuração removida com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Configuração não encontrada',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], IntegracaoController.prototype, "remover", null);
__decorate([
    (0, common_1.Post)('testar'),
    (0, swagger_1.ApiOperation)({ summary: 'Testar configuração de integração' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Teste executado com sucesso',
        schema: {
            type: 'object',
            properties: {
                sucesso: {
                    type: 'boolean',
                    description: 'Indica se o teste foi bem-sucedido',
                },
                mensagem: {
                    type: 'string',
                    description: 'Mensagem detalhada do resultado do teste',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou erro no teste',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_h = typeof integracao_test_dto_1.IntegracaoTestDto !== "undefined" && integracao_test_dto_1.IntegracaoTestDto) === "function" ? _h : Object]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], IntegracaoController.prototype, "testar", null);
__decorate([
    (0, common_1.Put)(':codigo/status'),
    (0, swagger_1.ApiOperation)({ summary: 'Ativar ou desativar configuração de integração' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único da configuração',
        example: 'smtp-principal',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status da configuração atualizado com sucesso',
        type: integracao_response_dto_1.IntegracaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Configuração não encontrada',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], IntegracaoController.prototype, "alterarStatus", null);
__decorate([
    (0, common_1.Get)('ativa/:tipo'),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar configuração ativa por tipo' }),
    (0, swagger_1.ApiParam)({
        name: 'tipo',
        description: 'Tipo de integração',
        enum: integracao_tipo_enum_1.IntegracaoTipoEnum,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Configuração ativa encontrada',
        type: integracao_response_dto_1.IntegracaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Nenhuma configuração ativa encontrada',
    }),
    __param(0, (0, common_1.Param)('tipo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_l = typeof integracao_tipo_enum_1.IntegracaoTipoEnum !== "undefined" && integracao_tipo_enum_1.IntegracaoTipoEnum) === "function" ? _l : Object]),
    __metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], IntegracaoController.prototype, "buscarConfigAtiva", null);
exports.IntegracaoController = IntegracaoController = __decorate([
    (0, swagger_1.ApiTags)('Configuração'),
    (0, common_1.Controller)('configuracao/integracoes'),
    __metadata("design:paramtypes", [typeof (_a = typeof integracao_service_1.IntegracaoService !== "undefined" && integracao_service_1.IntegracaoService) === "function" ? _a : Object])
], IntegracaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,