018503b03b54004dfea78fdda51599aa
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TemplateRendererService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateRendererService = void 0;
const common_1 = require("@nestjs/common");
/**
 * Serviço responsável por renderizar templates de notificação
 * substituindo variáveis pelos valores de contexto
 */
let TemplateRendererService = TemplateRendererService_1 = class TemplateRendererService {
    logger = new common_1.Logger(TemplateRendererService_1.name);
    /**
     * Renderiza um template substituindo variáveis pelos valores do contexto
     *
     * @param template Template a ser renderizado
     * @param contexto Dados de contexto para substituição
     * @returns Conteúdo renderizado
     */
    renderizar(template, contexto) {
        try {
            this.logger.debug(`Renderizando template com ${Object.keys(contexto).length} variáveis de contexto`);
            // Implementação simples de substituição de variáveis
            // Formato: {{variavel}}
            return template.replace(/\{\{([^}]+)\}\}/g, (match, key) => {
                const value = this.getNestedProperty(contexto, key.trim());
                if (value === undefined) {
                    this.logger.warn(`Variável "${key}" não encontrada no contexto da notificação`);
                    return match; // Mantém o placeholder se a variável não for encontrada
                }
                return String(value);
            });
        }
        catch (error) {
            this.logger.error(`Erro ao renderizar template: ${error.message}`, error.stack);
            throw new Error(`Falha ao renderizar template: ${error.message}`);
        }
    }
    /**
     * Renderiza um template completo de notificação
     *
     * @param template Objeto de template
     * @param contexto Dados de contexto para substituição
     * @returns Objeto com assunto e conteúdo renderizados
     */
    renderizarNotificacao(template, contexto) {
        return {
            assunto: this.renderizar(template.assunto, contexto),
            conteudo: this.renderizar(template.template_conteudo, contexto),
        };
    }
    /**
     * Recupera propriedade aninhada de um objeto usando notação de ponto
     * Ex: "usuario.endereco.cidade" buscará contexto.usuario.endereco.cidade
     */
    getNestedProperty(obj, path) {
        return path.split('.').reduce((prev, curr) => {
            return prev && prev[curr] !== undefined ? prev[curr] : undefined;
        }, obj);
    }
};
exports.TemplateRendererService = TemplateRendererService;
exports.TemplateRendererService = TemplateRendererService = TemplateRendererService_1 = __decorate([
    (0, common_1.Injectable)()
], TemplateRendererService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXG5vdGlmaWNhY2FvXFxzZXJ2aWNlc1xcdGVtcGxhdGUtcmVuZGVyZXIuc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsMkNBQW9EO0FBR3BEOzs7R0FHRztBQUVJLElBQU0sdUJBQXVCLCtCQUE3QixNQUFNLHVCQUF1QjtJQUNqQixNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMseUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbkU7Ozs7OztPQU1HO0lBQ0gsVUFBVSxDQUFDLFFBQWdCLEVBQUUsUUFBNkI7UUFDeEQsSUFBSSxDQUFDO1lBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsNkJBQTZCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSx3QkFBd0IsQ0FDbEYsQ0FBQztZQUVGLHFEQUFxRDtZQUNyRCx3QkFBd0I7WUFDeEIsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUN6RCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUUzRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztvQkFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ2QsYUFBYSxHQUFHLDZDQUE2QyxDQUM5RCxDQUFDO29CQUNGLE9BQU8sS0FBSyxDQUFDLENBQUMsd0RBQXdEO2dCQUN4RSxDQUFDO2dCQUVELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FDZixnQ0FBZ0MsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUMvQyxLQUFLLENBQUMsS0FBSyxDQUNaLENBQUM7WUFDRixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFpQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNwRSxDQUFDO0lBQ0gsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILHFCQUFxQixDQUNuQixRQUE4QixFQUM5QixRQUE2QjtRQUU3QixPQUFPO1lBQ0wsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7WUFDcEQsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQztTQUNoRSxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNLLGlCQUFpQixDQUFDLEdBQXdCLEVBQUUsSUFBWTtRQUM5RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO1lBQzNDLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ25FLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNWLENBQUM7Q0FDRixDQUFBO0FBakVZLDBEQUF1QjtrQ0FBdkIsdUJBQXVCO0lBRG5DLElBQUEsbUJBQVUsR0FBRTtHQUNBLHVCQUF1QixDQWlFbkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXG5vdGlmaWNhY2FvXFxzZXJ2aWNlc1xcdGVtcGxhdGUtcmVuZGVyZXIuc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBMb2dnZXIgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBOb3RpZmljYXRpb25UZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL2VudGl0aWVzJztcblxuLyoqXG4gKiBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIHJlbmRlcml6YXIgdGVtcGxhdGVzIGRlIG5vdGlmaWNhw6fDo29cbiAqIHN1YnN0aXR1aW5kbyB2YXJpw6F2ZWlzIHBlbG9zIHZhbG9yZXMgZGUgY29udGV4dG9cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlUmVuZGVyZXJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKFRlbXBsYXRlUmVuZGVyZXJTZXJ2aWNlLm5hbWUpO1xuXG4gIC8qKlxuICAgKiBSZW5kZXJpemEgdW0gdGVtcGxhdGUgc3Vic3RpdHVpbmRvIHZhcmnDoXZlaXMgcGVsb3MgdmFsb3JlcyBkbyBjb250ZXh0b1xuICAgKlxuICAgKiBAcGFyYW0gdGVtcGxhdGUgVGVtcGxhdGUgYSBzZXIgcmVuZGVyaXphZG9cbiAgICogQHBhcmFtIGNvbnRleHRvIERhZG9zIGRlIGNvbnRleHRvIHBhcmEgc3Vic3RpdHVpw6fDo29cbiAgICogQHJldHVybnMgQ29udGXDumRvIHJlbmRlcml6YWRvXG4gICAqL1xuICByZW5kZXJpemFyKHRlbXBsYXRlOiBzdHJpbmcsIGNvbnRleHRvOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICAgIGBSZW5kZXJpemFuZG8gdGVtcGxhdGUgY29tICR7T2JqZWN0LmtleXMoY29udGV4dG8pLmxlbmd0aH0gdmFyacOhdmVpcyBkZSBjb250ZXh0b2AsXG4gICAgICApO1xuXG4gICAgICAvLyBJbXBsZW1lbnRhw6fDo28gc2ltcGxlcyBkZSBzdWJzdGl0dWnDp8OjbyBkZSB2YXJpw6F2ZWlzXG4gICAgICAvLyBGb3JtYXRvOiB7e3ZhcmlhdmVsfX1cbiAgICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtcXHsoW159XSspXFx9XFx9L2csIChtYXRjaCwga2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXROZXN0ZWRQcm9wZXJ0eShjb250ZXh0bywga2V5LnRyaW0oKSk7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmxvZ2dlci53YXJuKFxuICAgICAgICAgICAgYFZhcmnDoXZlbCBcIiR7a2V5fVwiIG7Do28gZW5jb250cmFkYSBubyBjb250ZXh0byBkYSBub3RpZmljYcOnw6NvYCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBtYXRjaDsgLy8gTWFudMOpbSBvIHBsYWNlaG9sZGVyIHNlIGEgdmFyacOhdmVsIG7Do28gZm9yIGVuY29udHJhZGFcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICBgRXJybyBhbyByZW5kZXJpemFyIHRlbXBsYXRlOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgZXJyb3Iuc3RhY2ssXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWxoYSBhbyByZW5kZXJpemFyIHRlbXBsYXRlOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcml6YSB1bSB0ZW1wbGF0ZSBjb21wbGV0byBkZSBub3RpZmljYcOnw6NvXG4gICAqXG4gICAqIEBwYXJhbSB0ZW1wbGF0ZSBPYmpldG8gZGUgdGVtcGxhdGVcbiAgICogQHBhcmFtIGNvbnRleHRvIERhZG9zIGRlIGNvbnRleHRvIHBhcmEgc3Vic3RpdHVpw6fDo29cbiAgICogQHJldHVybnMgT2JqZXRvIGNvbSBhc3N1bnRvIGUgY29udGXDumRvIHJlbmRlcml6YWRvc1xuICAgKi9cbiAgcmVuZGVyaXphck5vdGlmaWNhY2FvKFxuICAgIHRlbXBsYXRlOiBOb3RpZmljYXRpb25UZW1wbGF0ZSxcbiAgICBjb250ZXh0bzogUmVjb3JkPHN0cmluZywgYW55PixcbiAgKTogeyBhc3N1bnRvOiBzdHJpbmc7IGNvbnRldWRvOiBzdHJpbmcgfSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFzc3VudG86IHRoaXMucmVuZGVyaXphcih0ZW1wbGF0ZS5hc3N1bnRvLCBjb250ZXh0byksXG4gICAgICBjb250ZXVkbzogdGhpcy5yZW5kZXJpemFyKHRlbXBsYXRlLnRlbXBsYXRlX2NvbnRldWRvLCBjb250ZXh0byksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWN1cGVyYSBwcm9wcmllZGFkZSBhbmluaGFkYSBkZSB1bSBvYmpldG8gdXNhbmRvIG5vdGHDp8OjbyBkZSBwb250b1xuICAgKiBFeDogXCJ1c3VhcmlvLmVuZGVyZWNvLmNpZGFkZVwiIGJ1c2NhcsOhIGNvbnRleHRvLnVzdWFyaW8uZW5kZXJlY28uY2lkYWRlXG4gICAqL1xuICBwcml2YXRlIGdldE5lc3RlZFByb3BlcnR5KG9iajogUmVjb3JkPHN0cmluZywgYW55PiwgcGF0aDogc3RyaW5nKTogYW55IHtcbiAgICByZXR1cm4gcGF0aC5zcGxpdCgnLicpLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgcmV0dXJuIHByZXYgJiYgcHJldltjdXJyXSAhPT0gdW5kZWZpbmVkID8gcHJldltjdXJyXSA6IHVuZGVmaW5lZDtcbiAgICB9LCBvYmopO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=