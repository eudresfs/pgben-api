288c22d5f90fc48462dd88502a9000bf
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MetricaCalculoService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricaCalculoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const config_1 = require("@nestjs/config");
const mathjs = __importStar(require("mathjs"));
const metrica_definicao_entity_1 = require("../../../entities/metrica-definicao.entity");
const metrica_snapshot_entity_1 = require("../../../entities/metrica-snapshot.entity");
/**
 * Serviço responsável pelo cálculo de valores de métricas
 *
 * Este serviço implementa algoritmos para calcular valores de métricas
 * conforme seu tipo, fonte de dados e fórmulas definidas.
 */
let MetricaCalculoService = MetricaCalculoService_1 = class MetricaCalculoService {
    metricaDefinicaoRepository;
    metricaSnapshotRepository;
    configService;
    dataSource;
    logger = new common_1.Logger(MetricaCalculoService_1.name);
    mathParser;
    constructor(metricaDefinicaoRepository, metricaSnapshotRepository, configService, dataSource) {
        this.metricaDefinicaoRepository = metricaDefinicaoRepository;
        this.metricaSnapshotRepository = metricaSnapshotRepository;
        this.configService = configService;
        this.dataSource = dataSource;
        // Inicializar o parser matemático para cálculo de fórmulas
        this.mathParser = mathjs.parser();
    }
    /**
     * Calcula o valor de uma métrica conforme sua definição e tipo
     *
     * @param metrica Definição da métrica
     * @param periodoInicio Data de início do período
     * @param periodoFim Data de fim do período
     * @param dimensoes Dimensões para filtrar o cálculo
     * @returns Valor numérico da métrica
     */
    async calcularValorMetrica(metrica, periodoInicio, periodoFim, dimensoes = {}) {
        this.logger.debug(`Calculando valor para métrica: ${metrica.codigo}`);
        try {
            switch (metrica.tipo) {
                case metrica_definicao_entity_1.TipoMetrica.CONTAGEM:
                    return this.calcularContagem(metrica, periodoInicio, periodoFim, dimensoes);
                case metrica_definicao_entity_1.TipoMetrica.SOMA:
                    return this.calcularSoma(metrica, periodoInicio, periodoFim, dimensoes);
                case metrica_definicao_entity_1.TipoMetrica.MEDIA:
                    return this.calcularMedia(metrica, periodoInicio, periodoFim, dimensoes);
                case metrica_definicao_entity_1.TipoMetrica.MINIMO:
                    return this.calcularMinimo(metrica, periodoInicio, periodoFim, dimensoes);
                case metrica_definicao_entity_1.TipoMetrica.MAXIMO:
                    return this.calcularMaximo(metrica, periodoInicio, periodoFim, dimensoes);
                case metrica_definicao_entity_1.TipoMetrica.PERCENTIL:
                    const percentil = metrica.parametros_especificos?.percentil || 90;
                    return this.calcularPercentil(metrica, periodoInicio, periodoFim, dimensoes, percentil);
                case metrica_definicao_entity_1.TipoMetrica.CARDINALIDADE:
                    return this.calcularCardinalidade(metrica, periodoInicio, periodoFim, dimensoes);
                case metrica_definicao_entity_1.TipoMetrica.TAXA_VARIACAO:
                    return this.calcularTaxaVariacao(metrica, periodoInicio, periodoFim, dimensoes);
                case metrica_definicao_entity_1.TipoMetrica.COMPOSTA:
                    return this.calcularMetricaComposta(metrica, periodoInicio, periodoFim, dimensoes);
                default:
                    throw new Error(`Tipo de métrica não suportado: ${metrica.tipo}`);
            }
        }
        catch (error) {
            this.logger.error(`Erro ao calcular métrica ${metrica.codigo}: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Calcula métrica do tipo CONTAGEM
     */
    async calcularContagem(metrica, periodoInicio, periodoFim, dimensoes) {
        if (!metrica.sql_consulta) {
            throw new Error(`Consulta SQL não definida para métrica ${metrica.codigo}`);
        }
        const sqlOriginal = metrica.sql_consulta;
        // Substituir placeholders de período
        let sql = sqlOriginal
            .replace(/\$\{PERIODO_INICIO\}/g, `'${periodoInicio.toISOString()}'`)
            .replace(/\$\{PERIODO_FIM\}/g, `'${periodoFim.toISOString()}'`);
        // Substituir placeholders de dimensões
        for (const [chave, valor] of Object.entries(dimensoes)) {
            const placeholder = `\${DIMENSAO.${chave}}`;
            sql = sql.replace(new RegExp(placeholder, 'g'), typeof valor === 'string' ? `'${valor}'` : String(valor));
        }
        try {
            // Executar consulta SQL
            const resultado = await this.dataSource.query(sql);
            if (!resultado || resultado.length === 0) {
                return 0;
            }
            // Obter o primeiro valor da primeira linha
            const primeiraLinha = resultado[0];
            const primeiraColuna = Object.values(primeiraLinha)[0];
            return Number(primeiraColuna) || 0;
        }
        catch (error) {
            this.logger.error(`Erro na execução da consulta SQL: ${error.message}`);
            throw new Error(`Erro ao executar consulta para métrica ${metrica.codigo}: ${error.message}`);
        }
    }
    /**
     * Calcula métrica do tipo SOMA
     */
    async calcularSoma(metrica, periodoInicio, periodoFim, dimensoes) {
        // A implementação é similar à contagem, pois a diferença está na consulta SQL
        return this.calcularContagem(metrica, periodoInicio, periodoFim, dimensoes);
    }
    /**
     * Calcula métrica do tipo MEDIA
     */
    async calcularMedia(metrica, periodoInicio, periodoFim, dimensoes) {
        // A implementação é similar à contagem, pois a diferença está na consulta SQL
        return this.calcularContagem(metrica, periodoInicio, periodoFim, dimensoes);
    }
    /**
     * Calcula métrica do tipo MINIMO
     */
    async calcularMinimo(metrica, periodoInicio, periodoFim, dimensoes) {
        // A implementação é similar à contagem, pois a diferença está na consulta SQL
        return this.calcularContagem(metrica, periodoInicio, periodoFim, dimensoes);
    }
    /**
     * Calcula métrica do tipo MAXIMO
     */
    async calcularMaximo(metrica, periodoInicio, periodoFim, dimensoes) {
        // A implementação é similar à contagem, pois a diferença está na consulta SQL
        return this.calcularContagem(metrica, periodoInicio, periodoFim, dimensoes);
    }
    /**
     * Calcula métrica do tipo PERCENTIL
     */
    async calcularPercentil(metrica, periodoInicio, periodoFim, dimensoes, percentil) {
        if (!metrica.sql_consulta) {
            throw new Error(`Consulta SQL não definida para métrica ${metrica.codigo}`);
        }
        // Substituir placeholder de percentil na consulta
        let sql = metrica.sql_consulta
            .replace(/\$\{PERIODO_INICIO\}/g, `'${periodoInicio.toISOString()}'`)
            .replace(/\$\{PERIODO_FIM\}/g, `'${periodoFim.toISOString()}'`)
            .replace(/\$\{PERCENTIL\}/g, percentil.toString());
        // Substituir placeholders de dimensões
        for (const [chave, valor] of Object.entries(dimensoes)) {
            const placeholder = `\${DIMENSAO.${chave}}`;
            sql = sql.replace(new RegExp(placeholder, 'g'), typeof valor === 'string' ? `'${valor}'` : String(valor));
        }
        try {
            // Executar consulta SQL
            const resultado = await this.dataSource.query(sql);
            if (!resultado || resultado.length === 0) {
                return 0;
            }
            // Obter o primeiro valor da primeira linha
            const primeiraLinha = resultado[0];
            const primeiraColuna = Object.values(primeiraLinha)[0];
            return Number(primeiraColuna) || 0;
        }
        catch (error) {
            this.logger.error(`Erro na execução da consulta SQL: ${error.message}`);
            throw new Error(`Erro ao executar consulta para métrica ${metrica.codigo}: ${error.message}`);
        }
    }
    /**
     * Calcula métrica do tipo CARDINALIDADE
     */
    async calcularCardinalidade(metrica, periodoInicio, periodoFim, dimensoes) {
        // A implementação é similar à contagem, pois a diferença está na consulta SQL
        return this.calcularContagem(metrica, periodoInicio, periodoFim, dimensoes);
    }
    /**
     * Calcula métrica do tipo TAXA_VARIACAO
     */
    async calcularTaxaVariacao(metrica, periodoInicio, periodoFim, dimensoes) {
        // Calcular valor atual
        const valorAtual = await this.calcularContagem(metrica, periodoInicio, periodoFim, dimensoes);
        // Calcular valor do período anterior
        const periodoDuracao = periodoFim.getTime() - periodoInicio.getTime();
        const periodoAnteriorFim = new Date(periodoInicio.getTime());
        const periodoAnteriorInicio = new Date(periodoInicio.getTime() - periodoDuracao);
        let valorAnterior;
        try {
            valorAnterior = await this.calcularContagem(metrica, periodoAnteriorInicio, periodoAnteriorFim, dimensoes);
        }
        catch (error) {
            this.logger.warn(`Erro ao calcular valor anterior para taxa de variação: ${error.message}`);
            valorAnterior = 0;
        }
        // Evitar divisão por zero
        if (valorAnterior === 0) {
            // Se o valor anterior for zero e o atual não for, temos 100% de aumento
            return valorAtual > 0 ? 100 : 0;
        }
        // Calcular taxa de variação percentual
        const taxaVariacao = ((valorAtual - valorAnterior) / Math.abs(valorAnterior)) * 100;
        return Number(taxaVariacao.toFixed(2));
    }
    /**
     * Calcula métrica do tipo COMPOSTA
     */
    async calcularMetricaComposta(metrica, periodoInicio, periodoFim, dimensoes) {
        if (!metrica.formula_calculo) {
            throw new Error(`Fórmula de cálculo não definida para métrica composta ${metrica.codigo}`);
        }
        if (!metrica.metricas_dependentes ||
            metrica.metricas_dependentes.length === 0) {
            throw new Error(`Métricas dependentes não definidas para métrica composta ${metrica.codigo}`);
        }
        // Obter valores de todas as métricas dependentes
        const valoresMetricas = {};
        for (const codigoMetrica of metrica.metricas_dependentes) {
            try {
                // Buscar definição da métrica dependente
                const metricaDependente = await this.metricaDefinicaoRepository.findOne({
                    where: { codigo: codigoMetrica, ativa: true },
                });
                if (!metricaDependente) {
                    throw new Error(`Métrica dependente não encontrada ou inativa: ${codigoMetrica}`);
                }
                // Calcular valor da métrica dependente
                const valor = await this.calcularValorMetrica(metricaDependente, periodoInicio, periodoFim, dimensoes);
                valoresMetricas[codigoMetrica] = valor;
            }
            catch (error) {
                this.logger.error(`Erro ao calcular métrica dependente ${codigoMetrica}: ${error.message}`);
                throw new Error(`Erro ao calcular métrica dependente ${codigoMetrica}: ${error.message}`);
            }
        }
        // Avaliar a fórmula de cálculo com os valores obtidos
        try {
            // Limpar o contexto do parser
            this.mathParser.clear();
            // Definir variáveis com os valores das métricas dependentes
            for (const [codigo, valor] of Object.entries(valoresMetricas)) {
                this.mathParser.set(codigo, valor);
            }
            // Avaliar a fórmula
            const resultado = this.mathParser.evaluate(metrica.formula_calculo);
            if (isNaN(resultado)) {
                throw new Error(`Resultado do cálculo é NaN`);
            }
            return Number(resultado);
        }
        catch (error) {
            this.logger.error(`Erro ao avaliar fórmula para métrica ${metrica.codigo}: ${error.message}`);
            throw new Error(`Erro ao avaliar fórmula para métrica ${metrica.codigo}: ${error.message}`);
        }
    }
};
exports.MetricaCalculoService = MetricaCalculoService;
exports.MetricaCalculoService = MetricaCalculoService = MetricaCalculoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(metrica_definicao_entity_1.MetricaDefinicao)),
    __param(1, (0, typeorm_1.InjectRepository)(metrica_snapshot_entity_1.MetricaSnapshot)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _d : Object])
], MetricaCalculoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,