{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\services\\relatorio-pagamento.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\services\\relatorio-pagamento.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { RelatorioPagamentoService } from '../../../services/relatorio-pagamento.service';\nimport { Pagamento } from '../../../entities/pagamento.entity';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../../enums/metodo-pagamento.enum';\n\n/**\n * Testes unitários para RelatorioPagamentoService\n * \n * Garante que os métodos de geração de relatórios e estatísticas \n * sobre pagamentos funcionem corretamente.\n * \n * @author Equipe PGBen\n */\ndescribe('RelatorioPagamentoService', () => {\n  let service: RelatorioPagamentoService;\n  let pagamentoRepository: Repository<Pagamento>;\n\n  // Dados de exemplo para testes\n  const pagamentosMock = [\n    {\n      id: 'pagamento-id-1',\n      solicitacaoId: 'solicitacao-id-1',\n      valor: 500,\n      status: StatusPagamentoEnum.FINALIZADO,\n      metodoPagamento: MetodoPagamentoEnum.PIX,\n      infoBancariaId: 'info-bancaria-id-1',\n      dataLiberacao: new Date('2025-01-15'),\n      dataCriacao: new Date('2025-01-10'),\n      dataAtualizacao: new Date('2025-01-20'),\n      liberadoPor: 'usuario-id-1',\n      unidadeId: 'unidade-id-1',\n      observacoes: 'Pagamento de benefício eventual',\n      dadosAdicionais: {\n        tipoBeneficio: 'Auxílio Moradia',\n        valorAprovado: 500\n      }\n    },\n    {\n      id: 'pagamento-id-2',\n      solicitacaoId: 'solicitacao-id-2',\n      valor: 300,\n      status: StatusPagamentoEnum.FINALIZADO,\n      metodoPagamento: MetodoPagamentoEnum.PRESENCIAL,\n      dataLiberacao: new Date('2025-02-10'),\n      dataCriacao: new Date('2025-02-05'),\n      dataAtualizacao: new Date('2025-02-15'),\n      liberadoPor: 'usuario-id-2',\n      unidadeId: 'unidade-id-1',\n      observacoes: 'Pagamento de benefício alimentação',\n      dadosAdicionais: {\n        tipoBeneficio: 'Auxílio Alimentação',\n        valorAprovado: 300\n      }\n    },\n    {\n      id: 'pagamento-id-3',\n      solicitacaoId: 'solicitacao-id-3',\n      valor: 1000,\n      status: StatusPagamentoEnum.PAGO,\n      metodoPagamento: MetodoPagamentoEnum.TRANSFERENCIA,\n      infoBancariaId: 'info-bancaria-id-3',\n      dataLiberacao: new Date('2025-03-05'),\n      dataCriacao: new Date('2025-03-01'),\n      dataAtualizacao: new Date('2025-03-05'),\n      liberadoPor: 'usuario-id-1',\n      unidadeId: 'unidade-id-2',\n      observacoes: 'Pagamento de benefício funeral',\n      dadosAdicionais: {\n        tipoBeneficio: 'Auxílio Funeral',\n        valorAprovado: 1000\n      }\n    },\n    {\n      id: 'pagamento-id-4',\n      solicitacaoId: 'solicitacao-id-4',\n      valor: 500,\n      status: StatusPagamentoEnum.CANCELADO,\n      metodoPagamento: MetodoPagamentoEnum.PIX,\n      infoBancariaId: 'info-bancaria-id-4',\n      dataLiberacao: new Date('2025-01-20'),\n      dataCriacao: new Date('2025-01-15'),\n      dataAtualizacao: new Date('2025-01-22'),\n      liberadoPor: 'usuario-id-2',\n      unidadeId: 'unidade-id-1',\n      observacoes: 'CANCELADO: Dados bancários incorretos',\n      dadosAdicionais: {\n        tipoBeneficio: 'Auxílio Moradia',\n        valorAprovado: 500\n      }\n    }\n  ];\n\n  const mockQueryBuilder = {\n    select: jest.fn().mockReturnThis(),\n    addSelect: jest.fn().mockReturnThis(),\n    from: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n    andWhere: jest.fn().mockReturnThis(),\n    groupBy: jest.fn().mockReturnThis(),\n    orderBy: jest.fn().mockReturnThis(),\n    getRawMany: jest.fn().mockResolvedValue([]),\n    getRawOne: jest.fn().mockResolvedValue({}),\n    execute: jest.fn().mockResolvedValue([])\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        RelatorioPagamentoService,\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: {\n            createQueryBuilder: jest.fn().mockReturnValue(mockQueryBuilder),\n            find: jest.fn().mockResolvedValue(pagamentosMock),\n            findAndCount: jest.fn().mockResolvedValue([pagamentosMock, pagamentosMock.length]),\n            manager: {\n              query: jest.fn().mockResolvedValue([])\n            }\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<RelatorioPagamentoService>(RelatorioPagamentoService);\n    pagamentoRepository = module.get<Repository<Pagamento>>(getRepositoryToken(Pagamento));\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('gerarRelatorioMensal', () => {\n    it('deve gerar relatório mensal por período', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      \n      const mockResultado = [\n        { mes: '2025-01', total: 1000, quantidade: 2 },\n        { mes: '2025-02', total: 300, quantidade: 1 },\n        { mes: '2025-03', total: 1000, quantidade: 1 }\n      ];\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioMensal(dataInicio, dataFim);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith('pagamento.dataLiberacao >= :dataInicio', { dataInicio });\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith('pagamento.dataLiberacao <= :dataFim', { dataFim });\n      expect(mockQueryBuilder.groupBy).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por unidade quando especificado', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      const unidadeId = 'unidade-id-1';\n      \n      const mockResultado = [\n        { mes: '2025-01', total: 500, quantidade: 1 },\n        { mes: '2025-02', total: 300, quantidade: 1 }\n      ];\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioMensal(dataInicio, dataFim, unidadeId);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith('pagamento.unidadeId = :unidadeId', { unidadeId });\n    });\n\n    it('deve filtrar apenas pagamentos finalizados/pagos quando especificado', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      const unidadeId = null;\n      const apenasFinalizados = true;\n      \n      const mockResultado = [\n        { mes: '2025-01', total: 500, quantidade: 1 },\n        { mes: '2025-02', total: 300, quantidade: 1 },\n        { mes: '2025-03', total: 1000, quantidade: 1 }\n      ];\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioMensal(dataInicio, dataFim, unidadeId, apenasFinalizados);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\n        'pagamento.status IN (:...statusFinalizado)', \n        { statusFinalizado: [StatusPagamentoEnum.FINALIZADO, StatusPagamentoEnum.PAGO] }\n      );\n    });\n  });\n\n  describe('gerarRelatorioPorMetodo', () => {\n    it('deve gerar relatório por método de pagamento', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      \n      const mockResultado = [\n        { metodoPagamento: 'pix', total: 1000, quantidade: 2 },\n        { metodoPagamento: 'presencial', total: 300, quantidade: 1 },\n        { metodoPagamento: 'transferencia', total: 1000, quantidade: 1 }\n      ];\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorMetodo(dataInicio, dataFim);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n      expect(mockQueryBuilder.groupBy).toHaveBeenCalled();\n    });\n\n    it('deve filtrar apenas pagamentos não cancelados', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      \n      const mockResultado = [\n        { metodoPagamento: 'pix', total: 500, quantidade: 1 },\n        { metodoPagamento: 'presencial', total: 300, quantidade: 1 },\n        { metodoPagamento: 'transferencia', total: 1000, quantidade: 1 }\n      ];\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorMetodo(dataInicio, dataFim);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\n        'pagamento.status != :statusCancelado', \n        { statusCancelado: StatusPagamentoEnum.CANCELADO }\n      );\n    });\n  });\n\n  describe('gerarRelatorioPorStatus', () => {\n    it('deve gerar relatório por status de pagamento', async () => {\n      // Arrange\n      const mockResultado = [\n        { status: 'finalizado', total: 800, quantidade: 2 },\n        { status: 'pago', total: 1000, quantidade: 1 },\n        { status: 'cancelado', total: 500, quantidade: 1 }\n      ];\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorStatus();\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n      expect(mockQueryBuilder.groupBy).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por período quando especificado', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      \n      const mockResultado = [\n        { status: 'finalizado', total: 800, quantidade: 2 },\n        { status: 'pago', total: 1000, quantidade: 1 },\n        { status: 'cancelado', total: 500, quantidade: 1 }\n      ];\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorStatus(dataInicio, dataFim);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith('pagamento.dataLiberacao >= :dataInicio', { dataInicio });\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith('pagamento.dataLiberacao <= :dataFim', { dataFim });\n    });\n  });\n\n  describe('gerarRelatorioPorUnidade', () => {\n    it('deve gerar relatório por unidade', async () => {\n      // Arrange\n      const mockResultado = [\n        { unidadeId: 'unidade-id-1', nomeUnidade: 'CRAS Centro', total: 1300, quantidade: 3 },\n        { unidadeId: 'unidade-id-2', nomeUnidade: 'CRAS Norte', total: 1000, quantidade: 1 }\n      ];\n      \n      jest.spyOn(pagamentoRepository.manager, 'query').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorUnidade();\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(pagamentoRepository.manager.query).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por período quando especificado', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      \n      const mockResultado = [\n        { unidadeId: 'unidade-id-1', nomeUnidade: 'CRAS Centro', total: 1300, quantidade: 3 },\n        { unidadeId: 'unidade-id-2', nomeUnidade: 'CRAS Norte', total: 1000, quantidade: 1 }\n      ];\n      \n      jest.spyOn(pagamentoRepository.manager, 'query').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorUnidade(dataInicio, dataFim);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(pagamentoRepository.manager.query).toHaveBeenCalledWith(\n        expect.stringContaining('WHERE p.data_liberacao >= $1 AND p.data_liberacao <= $2'),\n        [dataInicio, dataFim]\n      );\n    });\n  });\n\n  describe('gerarRelatorioPorTipoBeneficio', () => {\n    it('deve gerar relatório por tipo de benefício', async () => {\n      // Arrange\n      const mockResultado = [\n        { tipoBeneficio: 'Auxílio Moradia', total: 1000, quantidade: 2 },\n        { tipoBeneficio: 'Auxílio Alimentação', total: 300, quantidade: 1 },\n        { tipoBeneficio: 'Auxílio Funeral', total: 1000, quantidade: 1 }\n      ];\n      \n      jest.spyOn(pagamentoRepository.manager, 'query').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorTipoBeneficio();\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(pagamentoRepository.manager.query).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por unidade quando especificado', async () => {\n      // Arrange\n      const unidadeId = 'unidade-id-1';\n      \n      const mockResultado = [\n        { tipoBeneficio: 'Auxílio Moradia', total: 500, quantidade: 1 },\n        { tipoBeneficio: 'Auxílio Alimentação', total: 300, quantidade: 1 }\n      ];\n      \n      jest.spyOn(pagamentoRepository.manager, 'query').mockResolvedValueOnce(mockResultado);\n\n      // Act\n      const resultado = await service.gerarRelatorioPorTipoBeneficio(null, null, unidadeId);\n\n      // Assert\n      expect(resultado).toEqual(mockResultado);\n      expect(pagamentoRepository.manager.query).toHaveBeenCalledWith(\n        expect.stringContaining('WHERE p.unidade_id = $1'),\n        [unidadeId]\n      );\n    });\n  });\n\n  describe('obterEstatisticasGerais', () => {\n    it('deve obter estatísticas gerais de pagamentos', async () => {\n      // Arrange\n      const mockEstatisticas = {\n        totalPagamentos: 4,\n        totalValorPago: 2300,\n        totalFinalizados: 2,\n        totalEmProcessamento: 1,\n        totalCancelados: 1,\n        mediaValorPagamento: 575,\n        pagamentosPorMetodo: {\n          pix: 2,\n          presencial: 1,\n          transferencia: 1\n        }\n      };\n      \n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalPagamentos: '4',\n        totalValorPago: '2300.00',\n        totalFinalizados: '2',\n        totalEmProcessamento: '1',\n        totalCancelados: '1'\n      });\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany')\n        .mockResolvedValueOnce([\n          { metodoPagamento: 'pix', quantidade: '2' },\n          { metodoPagamento: 'presencial', quantidade: '1' },\n          { metodoPagamento: 'transferencia', quantidade: '1' }\n        ]);\n\n      // Act\n      const resultado = await service.obterEstatisticasGerais();\n\n      // Assert\n      expect(resultado).toEqual(expect.objectContaining({\n        totalPagamentos: 4,\n        totalValorPago: 2300,\n        totalFinalizados: 2,\n        totalEmProcessamento: 1,\n        totalCancelados: 1,\n        pagamentosPorMetodo: expect.any(Object)\n      }));\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por período quando especificado', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      \n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalPagamentos: '4',\n        totalValorPago: '2300.00',\n        totalFinalizados: '2',\n        totalEmProcessamento: '1',\n        totalCancelados: '1'\n      });\n      \n      jest.spyOn(mockQueryBuilder, 'getRawMany')\n        .mockResolvedValueOnce([\n          { metodoPagamento: 'pix', quantidade: '2' },\n          { metodoPagamento: 'presencial', quantidade: '1' },\n          { metodoPagamento: 'transferencia', quantidade: '1' }\n        ]);\n\n      // Act\n      const resultado = await service.obterEstatisticasGerais(dataInicio, dataFim);\n\n      // Assert\n      expect(resultado).toBeDefined();\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith('pagamento.dataLiberacao >= :dataInicio', { dataInicio });\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith('pagamento.dataLiberacao <= :dataFim', { dataFim });\n    });\n  });\n});\n"],"version":3}