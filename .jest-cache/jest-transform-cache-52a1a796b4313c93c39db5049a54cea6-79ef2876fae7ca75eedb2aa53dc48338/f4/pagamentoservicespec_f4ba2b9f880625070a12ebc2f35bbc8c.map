{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\pagamento.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\pagamento.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { PagamentoService } from '../../services/pagamento.service';\nimport { Pagamento } from '../../entities';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../enums/metodo-pagamento.enum';\nimport { StatusTransitionValidator } from '../../validators/status-transition-validator';\nimport { PixValidator } from '../../validators/pix-validator';\nimport { ConflictException, NotFoundException } from '@nestjs/common';\n\n/**\n * Testes unitários para o serviço de pagamento\n *\n * Verifica o funcionamento correto das operações de criação, consulta,\n * atualização e gerenciamento de status de pagamentos.\n *\n * @author Equipe PGBen\n */\ndescribe('PagamentoService', () => {\n  let service: PagamentoService;\n  let pagamentoRepository: Repository<Pagamento>;\n  let statusValidator: StatusTransitionValidator;\n  let pixValidator: PixValidator;\n\n  // Mock do repositório\n  const mockPagamentoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n    update: jest.fn(),\n  };\n\n  // Mock do validador de status\n  const mockStatusValidator = {\n    validarTransicao: jest.fn(),\n    getProximosStatusPossiveis: jest.fn(),\n    getStatusInicial: jest.fn().mockReturnValue(StatusPagamentoEnum.AGENDADO),\n    isStatusFinal: jest.fn(),\n  };\n\n  // Mock do validador de PIX\n  const mockPixValidator = {\n    validarChavePix: jest.fn(),\n    mascaraChavePix: jest.fn(),\n    obterTipoChavePix: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PagamentoService,\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: mockPagamentoRepository,\n        },\n        {\n          provide: StatusTransitionValidator,\n          useValue: mockStatusValidator,\n        },\n        {\n          provide: PixValidator,\n          useValue: mockPixValidator,\n        },\n      ],\n    }).compile();\n\n    service = module.get<PagamentoService>(PagamentoService);\n    pagamentoRepository = module.get<Repository<Pagamento>>(\n      getRepositoryToken(Pagamento),\n    );\n    statusValidator = module.get<StatusTransitionValidator>(\n      StatusTransitionValidator,\n    );\n    pixValidator = module.get<PixValidator>(PixValidator);\n\n    // Limpar mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  describe('createPagamento', () => {\n    const createDto = {\n      valor: 500.0,\n      dataLiberacao: new Date(),\n      metodoPagamento: MetodoPagamentoEnum.PIX,\n      infoBancariaId: 'info-bancaria-id',\n      dadosBancarios: {\n        pixTipo: 'cpf',\n        pixChave: '12345678909',\n      },\n      observacoes: 'Pagamento de benefício',\n    };\n\n    const usuarioId = 'usuario-id';\n    const solicitacaoId = 'solicitacao-id';\n\n    it('deve criar um novo pagamento com sucesso', async () => {\n      // Configurar mocks\n      mockPixValidator.validarChavePix.mockReturnValue(true);\n      mockPixValidator.mascaraChavePix.mockReturnValue('***.456.789-**');\n\n      const pagamentoMock = {\n        id: 'pagamento-id',\n        solicitacaoId,\n        ...createDto,\n        status: StatusPagamentoEnum.AGENDADO,\n        responsavelLiberacao: usuarioId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPagamentoRepository.create.mockReturnValue(pagamentoMock);\n      mockPagamentoRepository.save.mockResolvedValue(pagamentoMock);\n\n      // Executar método\n      const result = await service.createPagamento(\n        solicitacaoId,\n        createDto,\n        usuarioId,\n      );\n\n      // Verificar resultado\n      expect(result).toEqual(pagamentoMock);\n      expect(mockPagamentoRepository.create).toHaveBeenCalledWith({\n        solicitacaoId,\n        ...createDto,\n        status: StatusPagamentoEnum.AGENDADO,\n        responsavelLiberacao: usuarioId,\n      });\n      expect(mockPagamentoRepository.save).toHaveBeenCalledWith(pagamentoMock);\n      expect(mockPixValidator.validarChavePix).toHaveBeenCalledWith(\n        createDto.dadosBancarios.pixChave,\n        createDto.dadosBancarios.pixTipo,\n      );\n    });\n\n    it('deve rejeitar pagamento com chave PIX inválida', async () => {\n      // Configurar mocks\n      mockPixValidator.validarChavePix.mockReturnValue(false);\n\n      // Executar e verificar exceção\n      await expect(\n        service.createPagamento(solicitacaoId, createDto, usuarioId),\n      ).rejects.toThrow('Chave PIX inválida');\n\n      expect(mockPagamentoRepository.create).not.toHaveBeenCalled();\n      expect(mockPagamentoRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar um pagamento quando encontrado', async () => {\n      const pagamentoMock = {\n        id: 'pagamento-id',\n        solicitacaoId: 'solicitacao-id',\n        status: StatusPagamentoEnum.AGENDADO,\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n\n      const result = await service.findOne('pagamento-id');\n\n      expect(result).toEqual(pagamentoMock);\n      expect(mockPagamentoRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'pagamento-id' },\n      });\n    });\n\n    it('deve retornar null quando pagamento não for encontrado', async () => {\n      mockPagamentoRepository.findOne.mockResolvedValue(null);\n\n      const result = await service.findOne('pagamento-inexistente');\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('findAll', () => {\n    it('deve retornar lista paginada de pagamentos', async () => {\n      const pagamentosMock = [\n        { id: 'pagamento-1', status: StatusPagamentoEnum.AGENDADO },\n        { id: 'pagamento-2', status: StatusPagamentoEnum.LIBERADO },\n      ];\n\n      mockPagamentoRepository.findAndCount.mockResolvedValue([\n        pagamentosMock,\n        2,\n      ]);\n\n      const result = await service.findAll({ page: 1, limit: 10 });\n\n      expect(result).toEqual({\n        items: pagamentosMock,\n        total: 2,\n        page: 1,\n        limit: 10,\n      });\n    });\n\n    it('deve aplicar filtros corretamente', async () => {\n      mockPagamentoRepository.findAndCount.mockResolvedValue([[], 0]);\n\n      await service.findAll({\n        status: StatusPagamentoEnum.LIBERADO,\n        unidadeId: 'unidade-id',\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        page: 1,\n        limit: 10,\n      });\n\n      // Verificar se o filtro foi aplicado na query\n      expect(mockPagamentoRepository.findAndCount).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            status: StatusPagamentoEnum.LIBERADO,\n            metodoPagamento: MetodoPagamentoEnum.PIX,\n          }),\n        }),\n      );\n    });\n  });\n\n  describe('atualizarStatus', () => {\n    const pagamentoId = 'pagamento-id';\n    const usuarioId = 'usuario-id';\n\n    it('deve atualizar status com sucesso quando transição é válida', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        status: StatusPagamentoEnum.AGENDADO,\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockStatusValidator.validarTransicao.mockReturnValue(true);\n      mockPagamentoRepository.save.mockResolvedValue({\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.LIBERADO,\n      });\n\n      // Executar método\n      const result = await service.atualizarStatus(\n        pagamentoId,\n        StatusPagamentoEnum.LIBERADO,\n        usuarioId,\n      );\n\n      // Verificar resultado\n      expect(result.status).toBe(StatusPagamentoEnum.LIBERADO);\n      expect(mockStatusValidator.validarTransicao).toHaveBeenCalledWith(\n        StatusPagamentoEnum.AGENDADO,\n        StatusPagamentoEnum.LIBERADO,\n      );\n    });\n\n    it('deve rejeitar atualização quando pagamento não existe', async () => {\n      mockPagamentoRepository.findOne.mockResolvedValue(null);\n\n      await expect(\n        service.atualizarStatus(\n          pagamentoId,\n          StatusPagamentoEnum.LIBERADO,\n          usuarioId,\n        ),\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve rejeitar atualização quando transição é inválida', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        status: StatusPagamentoEnum.AGENDADO,\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockStatusValidator.validarTransicao.mockReturnValue(false);\n\n      // Executar e verificar exceção\n      await expect(\n        service.atualizarStatus(\n          pagamentoId,\n          StatusPagamentoEnum.CONFIRMADO,\n          usuarioId,\n        ),\n      ).rejects.toThrow(ConflictException);\n\n      expect(mockPagamentoRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('cancelarPagamento', () => {\n    const pagamentoId = 'pagamento-id';\n    const usuarioId = 'usuario-id';\n    const motivoCancelamento = 'Motivo de cancelamento';\n\n    it('deve cancelar pagamento com sucesso quando status permite', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        solicitacaoId: 'solicitacao-id',\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockStatusValidator.validarTransicao.mockReturnValue(true);\n      mockPagamentoRepository.save.mockResolvedValue({\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.CANCELADO,\n        observacoes: `CANCELADO: ${motivoCancelamento}`,\n      });\n\n      // Executar método\n      const result = await service.cancelarPagamento(\n        pagamentoId,\n        usuarioId,\n        motivoCancelamento,\n      );\n\n      // Verificar resultado\n      expect(result.status).toBe(StatusPagamentoEnum.CANCELADO);\n      expect(result.observacoes).toContain(motivoCancelamento);\n    });\n\n    it('deve rejeitar cancelamento quando pagamento não existe', async () => {\n      mockPagamentoRepository.findOne.mockResolvedValue(null);\n\n      await expect(\n        service.cancelarPagamento(pagamentoId, usuarioId, motivoCancelamento),\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve rejeitar cancelamento quando transição é inválida', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        status: StatusPagamentoEnum.CONFIRMADO,\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockStatusValidator.validarTransicao.mockReturnValue(false);\n\n      // Executar e verificar exceção\n      await expect(\n        service.cancelarPagamento(pagamentoId, usuarioId, motivoCancelamento),\n      ).rejects.toThrow(ConflictException);\n    });\n  });\n\n  describe('findPendentes', () => {\n    it('deve retornar pagamentos com status LIBERADO', async () => {\n      const pagamentosMock = [\n        { id: 'pagamento-1', status: StatusPagamentoEnum.LIBERADO },\n      ];\n\n      mockPagamentoRepository.findAndCount.mockResolvedValue([\n        pagamentosMock,\n        1,\n      ]);\n\n      const result = await service.findPendentes({ page: 1, limit: 10 });\n\n      expect(result.items).toEqual(pagamentosMock);\n      expect(mockPagamentoRepository.findAndCount).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            status: StatusPagamentoEnum.LIBERADO,\n          }),\n        }),\n      );\n    });\n  });\n});\n"],"version":3}