d0b1c5c23370f3888046b4768d6a263d
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EmailChannelService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailChannelService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const template_renderer_service_1 = require("../services/template-renderer.service");
/**
 * Implementação do canal de notificação por e-mail
 *
 * Responsável pelo envio de notificações através de e-mail utilizando
 * o serviço SMTP configurado no sistema
 */
let EmailChannelService = EmailChannelService_1 = class EmailChannelService {
    configService;
    templateRenderer;
    canal_id = 'email';
    logger = new common_1.Logger(EmailChannelService_1.name);
    constructor(configService, templateRenderer) {
        this.configService = configService;
        this.templateRenderer = templateRenderer;
    }
    /**
     * Envia uma notificação por e-mail
     *
     * @param notificacao Notificação a ser enviada
     * @returns Resultado do envio
     */
    async enviar(notificacao) {
        try {
            this.logger.log(`Iniciando envio de email para destinatário: ${notificacao.destinatario_id}`);
            // Obter template relacionado à notificação
            const template = notificacao.template;
            if (!template.canais_suportados.includes('email')) {
                throw new Error(`Template ${template.id} não suporta o canal de email`);
            }
            // Renderizar template com os dados de contexto
            const { assunto, conteudo } = this.templateRenderer.renderizarNotificacao(template, notificacao.dados_contexto);
            // Simula a integração com um serviço de email (como Nodemailer)
            // Na implementação real, isso se conectaria ao serviço SMTP configurado
            await this.simularEnvioEmail(notificacao.destinatario_id, assunto, conteudo);
            const dataEnvio = new Date();
            this.logger.log(`Email enviado com sucesso para ${notificacao.destinatario_id}`);
            return {
                sucesso: true,
                mensagem: 'Email enviado com sucesso',
                data_envio: dataEnvio,
                dados_resposta: {
                    canal: 'email',
                    destinatario: notificacao.destinatario_id,
                    assunto,
                },
            };
        }
        catch (error) {
            this.logger.error(`Erro ao enviar email para ${notificacao.destinatario_id}: ${error.message}`, error.stack);
            return {
                sucesso: false,
                mensagem: `Falha ao enviar email: ${error.message}`,
                data_envio: new Date(),
                erro: error,
            };
        }
    }
    /**
     * Verifica se o canal de email está disponível para envio
     *
     * @returns Status de disponibilidade
     */
    async verificarDisponibilidade() {
        try {
            // Verificar configurações SMTP e conectividade
            const smtpHost = this.configService.get('EMAIL_SMTP_HOST');
            const smtpPort = this.configService.get('EMAIL_SMTP_PORT');
            if (!smtpHost || !smtpPort) {
                this.logger.warn('Configurações SMTP incompletas ou ausentes');
                return false;
            }
            // Na implementação real, poderia testar conectividade ao servidor SMTP
            return true;
        }
        catch (error) {
            this.logger.error(`Erro ao verificar disponibilidade do canal de email: ${error.message}`);
            return false;
        }
    }
    /**
     * Método para simular o envio de email (apenas para demonstração)
     * Na implementação real, seria substituído pela integração com um serviço como Nodemailer
     */
    async simularEnvioEmail(destinatario, assunto, conteudo) {
        // Simula latência de rede e processamento
        await new Promise((resolve) => setTimeout(resolve, 100));
        this.logger.debug(`
      === SIMULAÇÃO DE EMAIL ===
      Para: ${destinatario}
      Assunto: ${assunto}
      Conteúdo: ${conteudo.substring(0, 100)}${conteudo.length > 100 ? '...' : ''}
      ==========================
    `);
        // Simulação de registro para fins de auditoria
        this.registrarEnvioAuditoria(destinatario, assunto);
    }
    /**
     * Registra o envio de email no sistema de auditoria
     * Integração com o módulo de auditoria existente no sistema
     */
    registrarEnvioAuditoria(destinatario, assunto) {
        this.logger.debug(`Registrando envio de email em logs de auditoria: ${destinatario} - ${assunto}`);
        // Na implementação real, integraria com o serviço de auditoria do sistema
    }
};
exports.EmailChannelService = EmailChannelService;
exports.EmailChannelService = EmailChannelService = EmailChannelService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof template_renderer_service_1.TemplateRendererService !== "undefined" && template_renderer_service_1.TemplateRendererService) === "function" ? _b : Object])
], EmailChannelService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,