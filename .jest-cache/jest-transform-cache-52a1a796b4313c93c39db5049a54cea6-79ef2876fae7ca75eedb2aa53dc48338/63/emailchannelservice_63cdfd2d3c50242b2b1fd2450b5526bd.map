{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\channels\\email-channel.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\channels\\email-channel.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  CanalNotificacao,\n  ResultadoEnvio,\n} from '../interfaces/notification-channel.interface';\nimport { NotificacaoSistema, NotificationTemplate } from '../../../entities';\nimport { TemplateRendererService } from '../services/template-renderer.service';\n\n/**\n * Implementação do canal de notificação por e-mail\n *\n * Responsável pelo envio de notificações através de e-mail utilizando\n * o serviço SMTP configurado no sistema\n */\n@Injectable()\nexport class EmailChannelService implements CanalNotificacao {\n  readonly canal_id = 'email';\n  private readonly logger = new Logger(EmailChannelService.name);\n\n  constructor(\n    private configService: ConfigService,\n    private templateRenderer: TemplateRendererService,\n  ) {}\n\n  /**\n   * Envia uma notificação por e-mail\n   *\n   * @param notificacao Notificação a ser enviada\n   * @returns Resultado do envio\n   */\n  async enviar(notificacao: NotificacaoSistema): Promise<ResultadoEnvio> {\n    try {\n      this.logger.log(\n        `Iniciando envio de email para destinatário: ${notificacao.destinatario_id}`,\n      );\n\n      // Obter template relacionado à notificação\n      const template = notificacao.template;\n\n      if (!template.canais_suportados.includes('email' as any)) {\n        throw new Error(`Template ${template.id} não suporta o canal de email`);\n      }\n\n      // Renderizar template com os dados de contexto\n      const { assunto, conteudo } = this.templateRenderer.renderizarNotificacao(\n        template,\n        notificacao.dados_contexto,\n      );\n\n      // Simula a integração com um serviço de email (como Nodemailer)\n      // Na implementação real, isso se conectaria ao serviço SMTP configurado\n      await this.simularEnvioEmail(\n        notificacao.destinatario_id,\n        assunto,\n        conteudo,\n      );\n\n      const dataEnvio = new Date();\n\n      this.logger.log(\n        `Email enviado com sucesso para ${notificacao.destinatario_id}`,\n      );\n\n      return {\n        sucesso: true,\n        mensagem: 'Email enviado com sucesso',\n        data_envio: dataEnvio,\n        dados_resposta: {\n          canal: 'email',\n          destinatario: notificacao.destinatario_id,\n          assunto,\n        },\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao enviar email para ${notificacao.destinatario_id}: ${error.message}`,\n        error.stack,\n      );\n\n      return {\n        sucesso: false,\n        mensagem: `Falha ao enviar email: ${error.message}`,\n        data_envio: new Date(),\n        erro: error,\n      };\n    }\n  }\n\n  /**\n   * Verifica se o canal de email está disponível para envio\n   *\n   * @returns Status de disponibilidade\n   */\n  async verificarDisponibilidade(): Promise<boolean> {\n    try {\n      // Verificar configurações SMTP e conectividade\n      const smtpHost = this.configService.get<string>('EMAIL_SMTP_HOST');\n      const smtpPort = this.configService.get<number>('EMAIL_SMTP_PORT');\n\n      if (!smtpHost || !smtpPort) {\n        this.logger.warn('Configurações SMTP incompletas ou ausentes');\n        return false;\n      }\n\n      // Na implementação real, poderia testar conectividade ao servidor SMTP\n      return true;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar disponibilidade do canal de email: ${error.message}`,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Método para simular o envio de email (apenas para demonstração)\n   * Na implementação real, seria substituído pela integração com um serviço como Nodemailer\n   */\n  private async simularEnvioEmail(\n    destinatario: string,\n    assunto: string,\n    conteudo: string,\n  ): Promise<void> {\n    // Simula latência de rede e processamento\n    await new Promise((resolve) => setTimeout(resolve, 100));\n\n    this.logger.debug(`\n      === SIMULAÇÃO DE EMAIL ===\n      Para: ${destinatario}\n      Assunto: ${assunto}\n      Conteúdo: ${conteudo.substring(0, 100)}${conteudo.length > 100 ? '...' : ''}\n      ==========================\n    `);\n\n    // Simulação de registro para fins de auditoria\n    this.registrarEnvioAuditoria(destinatario, assunto);\n  }\n\n  /**\n   * Registra o envio de email no sistema de auditoria\n   * Integração com o módulo de auditoria existente no sistema\n   */\n  private registrarEnvioAuditoria(destinatario: string, assunto: string): void {\n    this.logger.debug(\n      `Registrando envio de email em logs de auditoria: ${destinatario} - ${assunto}`,\n    );\n    // Na implementação real, integraria com o serviço de auditoria do sistema\n  }\n}\n"],"version":3}