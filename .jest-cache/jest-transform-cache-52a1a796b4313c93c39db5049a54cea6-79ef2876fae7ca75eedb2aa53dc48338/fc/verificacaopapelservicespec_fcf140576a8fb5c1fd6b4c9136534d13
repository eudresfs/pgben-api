1e7b7f660c42b3687d8a2d1e06ae7048
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const common_1 = require("@nestjs/common");
const verificacao_papel_service_1 = require("@modules/cidadao/services/verificacao-papel.service");
const cidadao_service_1 = require("@modules/cidadao/services/cidadao.service");
const historico_conversao_papel_service_1 = require("@modules/cidadao/services/historico-conversao-papel.service");
const papel_cidadao_service_1 = require("@modules/cidadao/services/papel-cidadao.service");
const papel_cidadao_entity_1 = require("@modules/cidadao/entities/papel-cidadao.entity");
const tipo_papel_enum_1 = require("@modules/cidadao/enums/tipo-papel.enum");
const composicao_familiar_entity_1 = require("@modules/cidadao/entities/composicao-familiar.entity");
const cidadao_entity_1 = require("@modules/cidadao/entities/cidadao.entity");
describe('VerificacaoPapelService', () => {
    let service;
    let papelRepository;
    let historicoService;
    let dataSource;
    const mockCidadaoRepository = {
        findOne: jest.fn(),
    };
    const mockPapelRepository = {
        find: jest.fn(),
        findOne: jest.fn(),
        create: jest.fn(),
        save: jest.fn(),
        update: jest.fn(),
    };
    const mockComposicaoFamiliarRepository = {
        find: jest.fn(),
        findOne: jest.fn(),
    };
    const mockCidadaoService = {
        findById: jest.fn(),
    };
    const mockHistoricoService = {
        criarHistorico: jest.fn(),
    };
    const mockQueryRunner = {
        connect: jest.fn(),
        startTransaction: jest.fn(),
        commitTransaction: jest.fn(),
        rollbackTransaction: jest.fn(),
        release: jest.fn(),
        manager: {
            find: jest.fn(),
            findOne: jest.fn(),
            create: jest.fn(),
            save: jest.fn(),
            update: jest.fn(),
        },
    };
    const mockDataSource = {
        createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),
        transaction: jest.fn(),
    };
    const mockCidadao = {
        id: '550e8400-e29b-41d4-a716-446655440000',
        nome: 'João da Silva',
        cpf: '12345678901',
        email: 'joao@example.com',
    };
    const mockCidadaoResponse = {
        id: '550e8400-e29b-41d4-a716-446655440000',
        nome: 'João da Silva',
        cpf: '12345678901',
        email: 'joao@example.com',
    };
    const mockPapelCidadao = {
        id: '660e8400-e29b-41d4-a716-446655440000',
        cidadao_id: '550e8400-e29b-41d4-a716-446655440000',
        tipo_papel: tipo_papel_enum_1.TipoPapel.MEMBRO_COMPOSICAO,
        ativo: true,
        metadados: {},
        created_at: new Date(),
        updated_at: new Date(),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                verificacao_papel_service_1.VerificacaoPapelService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(cidadao_entity_1.Cidadao),
                    useValue: mockCidadaoRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(papel_cidadao_entity_1.PapelCidadao),
                    useValue: mockPapelRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(composicao_familiar_entity_1.ComposicaoFamiliar),
                    useValue: mockComposicaoFamiliarRepository,
                },
                {
                    provide: cidadao_service_1.CidadaoService,
                    useValue: mockCidadaoService,
                },
                {
                    provide: historico_conversao_papel_service_1.HistoricoConversaoPapelService,
                    useValue: mockHistoricoService,
                },
                {
                    provide: typeorm_2.DataSource,
                    useValue: mockDataSource,
                },
                {
                    provide: papel_cidadao_service_1.PapelCidadaoService,
                    useValue: {
                        create: jest.fn(),
                        findById: jest.fn(),
                    },
                },
            ],
        }).compile();
        service = module.get(verificacao_papel_service_1.VerificacaoPapelService);
        papelRepository = module.get((0, typeorm_1.getRepositoryToken)(papel_cidadao_entity_1.PapelCidadao));
        historicoService = module.get(historico_conversao_papel_service_1.HistoricoConversaoPapelService);
        dataSource = module.get(typeorm_2.DataSource);
        jest.clearAllMocks();
    });
    it('deve estar definido', () => {
        expect(service).toBeDefined();
    });
    describe('verificarConflitoPapeis', () => {
        const cpf = '12345678901';
        const novoPapel = tipo_papel_enum_1.TipoPapel.BENEFICIARIO;
        it('deve retornar sem conflito quando não há papéis ativos', async () => {
            mockCidadaoRepository.findOne.mockResolvedValue({
                ...mockCidadao,
                papeis: [],
            });
            const result = await service.verificarConflitoPapeis(cpf);
            expect(result.temConflito).toBe(false);
            expect(result.detalhes).toBe('Nenhum papel ativo encontrado');
        });
        it('deve retornar sem conflito quando não há regras de conflito', async () => {
            mockCidadaoRepository.findOne.mockResolvedValue({
                ...mockCidadao,
                papeis: [],
            });
            const result = await service.verificarConflitoPapeis(cpf);
            expect(result.temConflito).toBe(false);
            expect(result.detalhes).toBe('Nenhum papel ativo encontrado');
        });
        it('deve detectar conflito quando há regra de conflito ativa', async () => {
            const cidadaoComPapeis = {
                ...mockCidadao,
                papeis: [
                    {
                        ...mockPapelCidadao,
                        tipo_papel: 'beneficiario',
                        ativo: true,
                    },
                    {
                        id: '2',
                        cidadao_id: mockCidadao.id,
                        tipo_papel: 'requerente',
                        ativo: true,
                    },
                ],
            };
            mockCidadaoRepository.findOne.mockResolvedValue(cidadaoComPapeis);
            const result = await service.verificarConflitoPapeis(cpf);
            expect(result.temConflito).toBe(true);
            expect(result.detalhes).toContain('beneficiário e requerente simultaneamente');
        });
        it('deve buscar cidadão com papéis', async () => {
            mockCidadaoRepository.findOne.mockResolvedValue({
                ...mockCidadao,
                papeis: [],
            });
            await service.verificarConflitoPapeis(cpf);
            expect(mockCidadaoRepository.findOne).toHaveBeenCalledWith({
                where: { cpf },
                relations: ['papeis'],
            });
        });
        it('deve retornar resultado válido quando cidadão não existe', async () => {
            mockCidadaoRepository.findOne.mockResolvedValue(null);
            const result = await service.verificarConflitoPapeis(cpf);
            expect(result.temConflito).toBe(false);
            expect(result.detalhes).toBe('Cidadão não encontrado');
        });
    });
    describe('converterParaBeneficiario', () => {
        const cidadaoId = '550e8400-e29b-41d4-a716-446655440000';
        const motivo = 'Conversão para beneficiário';
        it('deve converter um membro da composição para beneficiário', async () => {
            const novoPapel = {
                id: '880e8400-e29b-41d4-a716-446655440000',
                cidadao_id: cidadaoId,
                tipo_papel: 'beneficiario',
                ativo: true,
                metadados: {},
                created_at: new Date(),
                updated_at: new Date(),
            };
            const papelMembroComposicao = {
                ...mockPapelCidadao,
                tipo_papel: 'membro_composicao',
                ativo: true,
            };
            const cidadaoComPapeis = {
                ...mockCidadao,
                papeis: [papelMembroComposicao],
            };
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn().mockResolvedValueOnce(cidadaoComPapeis), // busca do cidadão com papéis
                    find: jest.fn(),
                    update: jest.fn().mockResolvedValue({ affected: 1 }),
                    create: jest.fn().mockReturnValue(novoPapel),
                    save: jest.fn().mockResolvedValue(novoPapel),
                };
                return callback(manager);
            });
            mockHistoricoService.criarHistorico.mockResolvedValue({
                id: 'historico-id',
            });
            const result = await service.converterParaBeneficiario(cidadaoId, motivo);
            expect(result.sucesso).toBe(true);
            expect(result.mensagem).toBe('Conversão para beneficiário realizada com sucesso');
            expect(result.historicoId).toBeDefined();
            expect(mockHistoricoService.criarHistorico).toHaveBeenCalled();
        });
        it('deve lançar NotFoundException quando cidadão não existir', async () => {
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn().mockResolvedValue(null),
                    find: jest.fn(),
                    update: jest.fn(),
                    create: jest.fn(),
                    save: jest.fn(),
                };
                return callback(manager);
            });
            await expect(service.converterParaBeneficiario(cidadaoId, motivo)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve lançar ConflictException quando cidadão já for beneficiário', async () => {
            const papelBeneficiario = {
                ...mockPapelCidadao,
                tipo_papel: 'beneficiario',
                ativo: true,
            };
            const cidadaoComBeneficiario = {
                ...mockCidadao,
                papeis: [papelBeneficiario],
            };
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest.fn().mockResolvedValueOnce(cidadaoComBeneficiario), // busca do cidadão com papel beneficiário
                    find: jest.fn(),
                    update: jest.fn(),
                    create: jest.fn(),
                    save: jest.fn(),
                };
                return callback(manager);
            });
            await expect(service.converterParaBeneficiario(cidadaoId, motivo)).rejects.toThrow('Cidadão já é beneficiário');
        });
        it('deve desativar papéis conflitantes durante a conversão', async () => {
            const novoPapel = {
                id: '880e8400-e29b-41d4-a716-446655440000',
                cidadao_id: cidadaoId,
                tipo_papel: 'beneficiario',
                ativo: true,
                metadados: {},
                created_at: new Date(),
                updated_at: new Date(),
            };
            const papelMembroComposicao = {
                ...mockPapelCidadao,
                tipo_papel: 'membro_composicao',
                ativo: true,
            };
            const cidadaoComPapeis = {
                ...mockCidadao,
                papeis: [papelMembroComposicao],
            };
            const mockManager = {
                findOne: jest.fn().mockResolvedValueOnce(cidadaoComPapeis), // busca do cidadão com papéis
                find: jest.fn(),
                update: jest.fn().mockResolvedValue({ affected: 1 }),
                create: jest.fn().mockReturnValue(novoPapel),
                save: jest.fn().mockResolvedValue(novoPapel),
            };
            mockDataSource.transaction.mockImplementation(async (callback) => {
                return callback(mockManager);
            });
            mockHistoricoService.criarHistorico.mockResolvedValue({
                id: 'historico-id',
            });
            await service.converterParaBeneficiario(cidadaoId, motivo);
            // Verifica se o save foi chamado duas vezes (desativar papel antigo + criar novo papel)
            expect(mockManager.save).toHaveBeenCalledTimes(2);
            // Verifica se o papel antigo foi desativado (primeira chamada)
            expect(mockManager.save).toHaveBeenNthCalledWith(1, expect.objectContaining({
                id: papelMembroComposicao.id,
                ativo: false,
            }));
            // Verifica se o novo papel foi criado (segunda chamada)
            expect(mockManager.save).toHaveBeenNthCalledWith(2, novoPapel);
        });
        it('deve criar histórico de conversão', async () => {
            const novoPapel = {
                id: '880e8400-e29b-41d4-a716-446655440000',
                cidadao_id: cidadaoId,
                tipo_papel: 'beneficiario',
                ativo: true,
                metadados: {},
                created_at: new Date(),
                updated_at: new Date(),
            };
            mockDataSource.transaction.mockImplementation(async (callback) => {
                const manager = {
                    findOne: jest
                        .fn()
                        .mockResolvedValueOnce(mockCidadao) // busca do cidadão
                        .mockResolvedValueOnce(null), // verificação de papel existente
                    find: jest.fn().mockResolvedValueOnce([mockPapelCidadao]), // papéis ativos
                    update: jest.fn().mockResolvedValue({ affected: 1 }),
                    create: jest.fn().mockReturnValue(novoPapel),
                    save: jest.fn().mockResolvedValue(novoPapel),
                };
                return callback(manager);
            });
            mockHistoricoService.criarHistorico.mockResolvedValue({});
            await service.converterParaBeneficiario(cidadaoId, motivo);
            expect(mockHistoricoService.criarHistorico).toHaveBeenCalledWith({
                cidadao_id: cidadaoId,
                papel_anterior: 'membro_composicao',
                papel_novo: 'beneficiario',
                justificativa: motivo,
            }, 'sistema');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,