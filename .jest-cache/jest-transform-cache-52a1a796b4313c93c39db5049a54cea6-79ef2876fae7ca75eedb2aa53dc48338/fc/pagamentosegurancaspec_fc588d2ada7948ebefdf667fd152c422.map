{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\pagamento-seguranca.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\pagamento-seguranca.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { HttpModule } from '@nestjs/axios';\n\nimport { PagamentoModule } from '../../pagamento.module';\nimport {\n  Pagamento,\n  ComprovantePagamento,\n  ConfirmacaoRecebimento,\n} from '../../entities';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../enums/metodo-pagamento.enum';\nimport { PagamentoService } from '../../services/pagamento.service';\nimport { IntegracaoSolicitacaoService } from '../../services/integracao-solicitacao.service';\nimport { IntegracaoCidadaoService } from '../../services/integracao-cidadao.service';\nimport { IntegracaoDocumentoService } from '../../services/integracao-documento.service';\nimport { AuditoriaPagamentoService } from '../../services/auditoria-pagamento.service';\n\n/**\n * Testes de integração para segurança do módulo de pagamento\n *\n * Verifica o funcionamento correto dos mecanismos de segurança,\n * incluindo autenticação, autorização e proteção de dados sensíveis.\n *\n * @author Equipe PGBen\n */\ndescribe('Segurança do Módulo de Pagamento (Integration)', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let pagamentoService: PagamentoService;\n\n  // Dados de teste\n  const usuarioId = 'usuario-teste-id';\n  const usuarioOutraUnidadeId = 'usuario-outra-unidade-id';\n  const solicitacaoId = 'solicitacao-teste-id';\n  const unidadeId = 'unidade-teste-id';\n  const outraUnidadeId = 'outra-unidade-id';\n  const pagamentoId = 'pagamento-teste-id';\n  const comprovanteId = 'comprovante-teste-id';\n\n  // Mock dos serviços externos\n  const mockIntegracaoSolicitacaoService = {\n    verificarStatusSolicitacao: jest\n      .fn()\n      .mockResolvedValue('PAGAMENTO_PENDENTE'),\n    verificarSolicitacaoElegivel: jest.fn().mockResolvedValue(true),\n    atualizarStatusSolicitacao: jest.fn().mockResolvedValue(true),\n    obterDetalhesSolicitacao: jest.fn().mockResolvedValue({\n      id: solicitacaoId,\n      unidadeId: unidadeId,\n      status: 'PAGAMENTO_PENDENTE',\n    }),\n  };\n\n  const mockIntegracaoCidadaoService = {\n    obterDadosCidadao: jest.fn().mockResolvedValue({\n      id: 'cidadao-id',\n      nome: 'João da Silva',\n      cpf: '12345678900',\n    }),\n    obterDadosBancarios: jest.fn().mockResolvedValue([\n      {\n        id: 'info-bancaria-id',\n        tipo: 'PIX',\n        pixTipo: 'CPF',\n        pixChave: '12345678900',\n      },\n    ]),\n    validarDadosBancarios: jest.fn().mockResolvedValue(true),\n  };\n\n  const mockIntegracaoDocumentoService = {\n    uploadComprovante: jest.fn().mockResolvedValue({\n      id: 'documento-id',\n      nome: 'comprovante.pdf',\n    }),\n    obterComprovante: jest.fn().mockResolvedValue({\n      id: 'documento-id',\n      nome: 'comprovante.pdf',\n    }),\n    listarComprovantes: jest.fn().mockResolvedValue([]),\n    removerComprovante: jest.fn().mockResolvedValue(undefined),\n  };\n\n  const mockAuditoriaPagamentoService = {\n    logCriacaoPagamento: jest.fn(),\n    logMudancaStatus: jest.fn(),\n    logCancelamentoPagamento: jest.fn(),\n    logUploadComprovante: jest.fn(),\n    logRemocaoComprovante: jest.fn(),\n    logConfirmacaoRecebimento: jest.fn(),\n    logErroProcessamento: jest.fn(),\n    logTentativaAcessoNaoAutorizado: jest.fn(),\n  };\n\n  // Mock dos repositórios\n  const mockPagamentoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n    update: jest.fn(),\n  };\n\n  const mockComprovanteRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n    delete: jest.fn(),\n  };\n\n  const mockConfirmacaoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        PagamentoModule,\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) => ({\n            secret: configService.get<string>('JWT_SECRET') || 'test-secret',\n            signOptions: { expiresIn: '1h' },\n          }),\n          inject: [ConfigService],\n        }),\n        HttpModule,\n      ],\n      providers: [\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: mockPagamentoRepository,\n        },\n        {\n          provide: getRepositoryToken(ComprovantePagamento),\n          useValue: mockComprovanteRepository,\n        },\n        {\n          provide: getRepositoryToken(ConfirmacaoRecebimento),\n          useValue: mockConfirmacaoRepository,\n        },\n      ],\n    })\n      .overrideProvider(IntegracaoSolicitacaoService)\n      .useValue(mockIntegracaoSolicitacaoService)\n      .overrideProvider(IntegracaoCidadaoService)\n      .useValue(mockIntegracaoCidadaoService)\n      .overrideProvider(IntegracaoDocumentoService)\n      .useValue(mockIntegracaoDocumentoService)\n      .overrideProvider(AuditoriaPagamentoService)\n      .useValue(mockAuditoriaPagamentoService)\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    pagamentoService = moduleFixture.get<PagamentoService>(PagamentoService);\n\n    await app.init();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // Função auxiliar para gerar tokens JWT com diferentes perfis\n  const gerarToken = (\n    userId: string,\n    perfis: string[] = ['usuario'],\n    unidadeId: string = 'unidade-teste-id',\n  ) => {\n    return jwtService.sign({\n      sub: userId,\n      perfis,\n      unidadeId,\n    });\n  };\n\n  describe('Autenticação', () => {\n    it('deve rejeitar acesso sem token JWT', async () => {\n      const response = await request(app.getHttpServer()).get('/pagamentos');\n\n      expect(response.status).toBe(401);\n    });\n\n    it('deve rejeitar acesso com token JWT inválido', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/pagamentos')\n        .set('Authorization', 'Bearer token-invalido');\n\n      expect(response.status).toBe(401);\n    });\n\n    it('deve permitir acesso com token JWT válido', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findAndCount.mockResolvedValue([[], 0]);\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .get('/pagamentos')\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n    });\n  });\n\n  describe('Autorização por Perfil', () => {\n    it('deve rejeitar acesso a operações administrativas para usuários sem perfil adequado', async () => {\n      // Token com perfil básico\n      const token = gerarToken(usuarioId, ['usuario_basico']);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/cancelar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          motivo: 'Teste de cancelamento',\n        });\n\n      expect(response.status).toBe(403);\n      expect(\n        mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado,\n      ).toHaveBeenCalled();\n    });\n\n    it('deve permitir acesso a operações administrativas para usuários com perfil adequado', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findOne.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        unidadeId,\n      });\n\n      mockPagamentoRepository.save.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.CANCELADO,\n        unidadeId,\n      });\n\n      // Token com perfil administrativo\n      const token = gerarToken(usuarioId, ['admin_pagamentos']);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/cancelar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          motivo: 'Teste de cancelamento',\n        });\n\n      expect(response.status).toBe(200);\n    });\n  });\n\n  describe('Segurança por Unidade (Row-Level Security)', () => {\n    it('deve rejeitar acesso a pagamentos de outra unidade', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findOne.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        unidadeId: outraUnidadeId, // Unidade diferente do usuário\n      });\n\n      // Token de usuário de uma unidade específica\n      const token = gerarToken(usuarioId, ['usuario'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(403);\n      expect(\n        mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado,\n      ).toHaveBeenCalled();\n    });\n\n    it('deve permitir acesso a pagamentos da mesma unidade', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findOne.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        unidadeId, // Mesma unidade do usuário\n      });\n\n      // Token de usuário da mesma unidade\n      const token = gerarToken(usuarioId, ['usuario'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n    });\n\n    it('deve permitir acesso global para usuários com perfil super_admin', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findOne.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        unidadeId: outraUnidadeId, // Unidade diferente do usuário\n      });\n\n      // Token com perfil super_admin\n      const token = gerarToken(usuarioId, ['super_admin'], 'qualquer-unidade');\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n    });\n  });\n\n  describe('Proteção de Dados Sensíveis', () => {\n    it('deve mascarar dados bancários na resposta', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findOne.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        unidadeId,\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        dadosBancarios: {\n          pixTipo: 'CPF',\n          pixChave: '12345678900',\n        },\n      });\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n\n      // Verificar que a chave PIX está mascarada\n      expect(response.body.dadosBancarios.pixChave).not.toBe('12345678900');\n      expect(response.body.dadosBancarios.pixChave).toContain('*');\n    });\n\n    it('deve mascarar CPF na resposta', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findOne.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        unidadeId,\n        beneficiario: {\n          id: 'cidadao-id',\n          nome: 'João da Silva',\n          cpf: '12345678900',\n        },\n      });\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n\n      // Verificar que o CPF está mascarado\n      if (response.body.beneficiario && response.body.beneficiario.cpf) {\n        expect(response.body.beneficiario.cpf).not.toBe('12345678900');\n        expect(response.body.beneficiario.cpf).toContain('*');\n      }\n    });\n  });\n\n  describe('Validação de Uploads', () => {\n    it('deve rejeitar uploads de arquivos maliciosos', async () => {\n      // Criar arquivo de teste com extensão suspeita\n      const buffer = Buffer.from('conteúdo malicioso');\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'malicioso.exe');\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('não permitido');\n    });\n\n    it('deve rejeitar uploads de arquivos muito grandes', async () => {\n      // Criar arquivo de teste muito grande (simulado)\n      const buffer = Buffer.alloc(6 * 1024 * 1024); // 6MB\n\n      const token = gerarToken(usuarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'grande.pdf');\n\n      expect(response.status).toBe(413); // Payload Too Large\n    });\n  });\n\n  describe('Proteção contra Ataques', () => {\n    it('deve registrar tentativas de acesso não autorizado', async () => {\n      // Configurar mock\n      mockPagamentoRepository.findOne.mockResolvedValue({\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.AGENDADO,\n        unidadeId: outraUnidadeId,\n      });\n\n      const token = gerarToken(usuarioId);\n\n      await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(\n        mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado,\n      ).toHaveBeenCalled();\n    });\n\n    it('deve limitar taxa de requisições (rate limiting)', async () => {\n      const token = gerarToken(usuarioId);\n\n      // Fazer múltiplas requisições em sequência\n      const promises = Array(20)\n        .fill(0)\n        .map(() =>\n          request(app.getHttpServer())\n            .get('/pagamentos')\n            .set('Authorization', `Bearer ${token}`),\n        );\n\n      const responses = await Promise.all(promises);\n\n      // Verificar se alguma requisição foi limitada (429 Too Many Requests)\n      const limitedRequests = responses.filter((res) => res.status === 429);\n\n      // Em um ambiente real, algumas requisições seriam limitadas\n      // No ambiente de teste, isso depende da configuração do rate limiter\n      console.log(\n        `Requisições limitadas: ${limitedRequests.length} de ${promises.length}`,\n      );\n    });\n  });\n});\n"],"version":3}