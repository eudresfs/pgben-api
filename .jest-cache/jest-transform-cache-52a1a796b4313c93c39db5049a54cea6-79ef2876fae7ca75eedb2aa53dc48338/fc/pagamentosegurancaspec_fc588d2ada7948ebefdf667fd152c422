9832c7ab73737833c0d59557cfd09496
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const request = __importStar(require("supertest"));
const typeorm_1 = require("@nestjs/typeorm");
const config_1 = require("@nestjs/config");
const jwt_1 = require("@nestjs/jwt");
const axios_1 = require("@nestjs/axios");
const pagamento_module_1 = require("../../pagamento.module");
const entities_1 = require("../../entities");
const status_pagamento_enum_1 = require("../../enums/status-pagamento.enum");
const metodo_pagamento_enum_1 = require("../../enums/metodo-pagamento.enum");
const pagamento_service_1 = require("../../services/pagamento.service");
const integracao_solicitacao_service_1 = require("../../services/integracao-solicitacao.service");
const integracao_cidadao_service_1 = require("../../services/integracao-cidadao.service");
const integracao_documento_service_1 = require("../../services/integracao-documento.service");
const auditoria_pagamento_service_1 = require("../../services/auditoria-pagamento.service");
/**
 * Testes de integração para segurança do módulo de pagamento
 *
 * Verifica o funcionamento correto dos mecanismos de segurança,
 * incluindo autenticação, autorização e proteção de dados sensíveis.
 *
 * @author Equipe PGBen
 */
describe('Segurança do Módulo de Pagamento (Integration)', () => {
    let app;
    let jwtService;
    let pagamentoService;
    // Dados de teste
    const usuarioId = 'usuario-teste-id';
    const usuarioOutraUnidadeId = 'usuario-outra-unidade-id';
    const solicitacaoId = 'solicitacao-teste-id';
    const unidadeId = 'unidade-teste-id';
    const outraUnidadeId = 'outra-unidade-id';
    const pagamentoId = 'pagamento-teste-id';
    const comprovanteId = 'comprovante-teste-id';
    // Mock dos serviços externos
    const mockIntegracaoSolicitacaoService = {
        verificarStatusSolicitacao: jest
            .fn()
            .mockResolvedValue('PAGAMENTO_PENDENTE'),
        verificarSolicitacaoElegivel: jest.fn().mockResolvedValue(true),
        atualizarStatusSolicitacao: jest.fn().mockResolvedValue(true),
        obterDetalhesSolicitacao: jest.fn().mockResolvedValue({
            id: solicitacaoId,
            unidadeId: unidadeId,
            status: 'PAGAMENTO_PENDENTE',
        }),
    };
    const mockIntegracaoCidadaoService = {
        obterDadosCidadao: jest.fn().mockResolvedValue({
            id: 'cidadao-id',
            nome: 'João da Silva',
            cpf: '12345678900',
        }),
        obterDadosBancarios: jest.fn().mockResolvedValue([
            {
                id: 'info-bancaria-id',
                tipo: 'PIX',
                pixTipo: 'CPF',
                pixChave: '12345678900',
            },
        ]),
        validarDadosBancarios: jest.fn().mockResolvedValue(true),
    };
    const mockIntegracaoDocumentoService = {
        uploadComprovante: jest.fn().mockResolvedValue({
            id: 'documento-id',
            nome: 'comprovante.pdf',
        }),
        obterComprovante: jest.fn().mockResolvedValue({
            id: 'documento-id',
            nome: 'comprovante.pdf',
        }),
        listarComprovantes: jest.fn().mockResolvedValue([]),
        removerComprovante: jest.fn().mockResolvedValue(undefined),
    };
    const mockAuditoriaPagamentoService = {
        logCriacaoPagamento: jest.fn(),
        logMudancaStatus: jest.fn(),
        logCancelamentoPagamento: jest.fn(),
        logUploadComprovante: jest.fn(),
        logRemocaoComprovante: jest.fn(),
        logConfirmacaoRecebimento: jest.fn(),
        logErroProcessamento: jest.fn(),
        logTentativaAcessoNaoAutorizado: jest.fn(),
    };
    // Mock dos repositórios
    const mockPagamentoRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
        update: jest.fn(),
    };
    const mockComprovanteRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
        delete: jest.fn(),
    };
    const mockConfirmacaoRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
    };
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [
                pagamento_module_1.PagamentoModule,
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
                jwt_1.JwtModule.registerAsync({
                    imports: [config_1.ConfigModule],
                    useFactory: async (configService) => ({
                        secret: configService.get('JWT_SECRET') || 'test-secret',
                        signOptions: { expiresIn: '1h' },
                    }),
                    inject: [config_1.ConfigService],
                }),
                axios_1.HttpModule,
            ],
            providers: [
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.Pagamento),
                    useValue: mockPagamentoRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.ComprovantePagamento),
                    useValue: mockComprovanteRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.ConfirmacaoRecebimento),
                    useValue: mockConfirmacaoRepository,
                },
            ],
        })
            .overrideProvider(integracao_solicitacao_service_1.IntegracaoSolicitacaoService)
            .useValue(mockIntegracaoSolicitacaoService)
            .overrideProvider(integracao_cidadao_service_1.IntegracaoCidadaoService)
            .useValue(mockIntegracaoCidadaoService)
            .overrideProvider(integracao_documento_service_1.IntegracaoDocumentoService)
            .useValue(mockIntegracaoDocumentoService)
            .overrideProvider(auditoria_pagamento_service_1.AuditoriaPagamentoService)
            .useValue(mockAuditoriaPagamentoService)
            .compile();
        app = moduleFixture.createNestApplication();
        jwtService = moduleFixture.get(jwt_1.JwtService);
        pagamentoService = moduleFixture.get(pagamento_service_1.PagamentoService);
        await app.init();
    });
    afterAll(async () => {
        await app.close();
    });
    beforeEach(() => {
        jest.clearAllMocks();
    });
    // Função auxiliar para gerar tokens JWT com diferentes perfis
    const gerarToken = (userId, perfis = ['usuario'], unidadeId = 'unidade-teste-id') => {
        return jwtService.sign({
            sub: userId,
            perfis,
            unidadeId,
        });
    };
    describe('Autenticação', () => {
        it('deve rejeitar acesso sem token JWT', async () => {
            const response = await request(app.getHttpServer()).get('/pagamentos');
            expect(response.status).toBe(401);
        });
        it('deve rejeitar acesso com token JWT inválido', async () => {
            const response = await request(app.getHttpServer())
                .get('/pagamentos')
                .set('Authorization', 'Bearer token-invalido');
            expect(response.status).toBe(401);
        });
        it('deve permitir acesso com token JWT válido', async () => {
            // Configurar mock
            mockPagamentoRepository.findAndCount.mockResolvedValue([[], 0]);
            const token = gerarToken(usuarioId);
            const response = await request(app.getHttpServer())
                .get('/pagamentos')
                .set('Authorization', `Bearer ${token}`);
            expect(response.status).toBe(200);
        });
    });
    describe('Autorização por Perfil', () => {
        it('deve rejeitar acesso a operações administrativas para usuários sem perfil adequado', async () => {
            // Token com perfil básico
            const token = gerarToken(usuarioId, ['usuario_basico']);
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/cancelar`)
                .set('Authorization', `Bearer ${token}`)
                .send({
                motivo: 'Teste de cancelamento',
            });
            expect(response.status).toBe(403);
            expect(mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado).toHaveBeenCalled();
        });
        it('deve permitir acesso a operações administrativas para usuários com perfil adequado', async () => {
            // Configurar mock
            mockPagamentoRepository.findOne.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                unidadeId,
            });
            mockPagamentoRepository.save.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
                unidadeId,
            });
            // Token com perfil administrativo
            const token = gerarToken(usuarioId, ['admin_pagamentos']);
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/cancelar`)
                .set('Authorization', `Bearer ${token}`)
                .send({
                motivo: 'Teste de cancelamento',
            });
            expect(response.status).toBe(200);
        });
    });
    describe('Segurança por Unidade (Row-Level Security)', () => {
        it('deve rejeitar acesso a pagamentos de outra unidade', async () => {
            // Configurar mock
            mockPagamentoRepository.findOne.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                unidadeId: outraUnidadeId, // Unidade diferente do usuário
            });
            // Token de usuário de uma unidade específica
            const token = gerarToken(usuarioId, ['usuario'], unidadeId);
            const response = await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${token}`);
            expect(response.status).toBe(403);
            expect(mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado).toHaveBeenCalled();
        });
        it('deve permitir acesso a pagamentos da mesma unidade', async () => {
            // Configurar mock
            mockPagamentoRepository.findOne.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                unidadeId, // Mesma unidade do usuário
            });
            // Token de usuário da mesma unidade
            const token = gerarToken(usuarioId, ['usuario'], unidadeId);
            const response = await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${token}`);
            expect(response.status).toBe(200);
        });
        it('deve permitir acesso global para usuários com perfil super_admin', async () => {
            // Configurar mock
            mockPagamentoRepository.findOne.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                unidadeId: outraUnidadeId, // Unidade diferente do usuário
            });
            // Token com perfil super_admin
            const token = gerarToken(usuarioId, ['super_admin'], 'qualquer-unidade');
            const response = await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${token}`);
            expect(response.status).toBe(200);
        });
    });
    describe('Proteção de Dados Sensíveis', () => {
        it('deve mascarar dados bancários na resposta', async () => {
            // Configurar mock
            mockPagamentoRepository.findOne.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                unidadeId,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900',
                },
            });
            const token = gerarToken(usuarioId);
            const response = await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${token}`);
            expect(response.status).toBe(200);
            // Verificar que a chave PIX está mascarada
            expect(response.body.dadosBancarios.pixChave).not.toBe('12345678900');
            expect(response.body.dadosBancarios.pixChave).toContain('*');
        });
        it('deve mascarar CPF na resposta', async () => {
            // Configurar mock
            mockPagamentoRepository.findOne.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                unidadeId,
                beneficiario: {
                    id: 'cidadao-id',
                    nome: 'João da Silva',
                    cpf: '12345678900',
                },
            });
            const token = gerarToken(usuarioId);
            const response = await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${token}`);
            expect(response.status).toBe(200);
            // Verificar que o CPF está mascarado
            if (response.body.beneficiario && response.body.beneficiario.cpf) {
                expect(response.body.beneficiario.cpf).not.toBe('12345678900');
                expect(response.body.beneficiario.cpf).toContain('*');
            }
        });
    });
    describe('Validação de Uploads', () => {
        it('deve rejeitar uploads de arquivos maliciosos', async () => {
            // Criar arquivo de teste com extensão suspeita
            const buffer = Buffer.from('conteúdo malicioso');
            const token = gerarToken(usuarioId);
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/comprovantes`)
                .set('Authorization', `Bearer ${token}`)
                .attach('arquivo', buffer, 'malicioso.exe');
            expect(response.status).toBe(400);
            expect(response.body.message).toContain('não permitido');
        });
        it('deve rejeitar uploads de arquivos muito grandes', async () => {
            // Criar arquivo de teste muito grande (simulado)
            const buffer = Buffer.alloc(6 * 1024 * 1024); // 6MB
            const token = gerarToken(usuarioId);
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/comprovantes`)
                .set('Authorization', `Bearer ${token}`)
                .attach('arquivo', buffer, 'grande.pdf');
            expect(response.status).toBe(413); // Payload Too Large
        });
    });
    describe('Proteção contra Ataques', () => {
        it('deve registrar tentativas de acesso não autorizado', async () => {
            // Configurar mock
            mockPagamentoRepository.findOne.mockResolvedValue({
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                unidadeId: outraUnidadeId,
            });
            const token = gerarToken(usuarioId);
            await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${token}`);
            expect(mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado).toHaveBeenCalled();
        });
        it('deve limitar taxa de requisições (rate limiting)', async () => {
            const token = gerarToken(usuarioId);
            // Fazer múltiplas requisições em sequência
            const promises = Array(20)
                .fill(0)
                .map(() => request(app.getHttpServer())
                .get('/pagamentos')
                .set('Authorization', `Bearer ${token}`));
            const responses = await Promise.all(promises);
            // Verificar se alguma requisição foi limitada (429 Too Many Requests)
            const limitedRequests = responses.filter((res) => res.status === 429);
            // Em um ambiente real, algumas requisições seriam limitadas
            // No ambiente de teste, isso depende da configuração do rate limiter
            console.log(`Requisições limitadas: ${limitedRequests.length} de ${promises.length}`);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,