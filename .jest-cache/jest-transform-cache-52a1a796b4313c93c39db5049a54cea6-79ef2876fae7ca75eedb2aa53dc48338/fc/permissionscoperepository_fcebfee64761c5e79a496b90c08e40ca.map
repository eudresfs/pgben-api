{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-scope.repository.ts","mappings":";;;;;;;;;;;;;AAAA,qCAAiD;AACjD,2CAA4C;AAC5C,oFAAyE;AAGzE;;;;;GAKG;AAEI,IAAM,yBAAyB,GAA/B,MAAM,yBAA0B,SAAQ,oBAA2B;IACpD;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,yCAAe,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QADvC,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB,CACtB,YAAoB;QAEpB,OAAO,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,sBAAsB,CAC1B,gBAA4B;QAE5B,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;IACxE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qCAAqC,CACzC,gBAA4B;QAE5B,OAAO,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC;aAC/C,iBAAiB,CAAC,4BAA4B,EAAE,WAAW,CAAC;aAC5D,KAAK,CAAC,yDAAyD,EAAE;YAChE,gBAAgB;SACjB,CAAC;aACD,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qBAAqB,CACzB,IAA8B;QAE9B,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACpC,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,qBAAqB,CACzB,EAAU,EACV,IAA8B;QAE9B,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAChC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qBAAqB,CAAC,EAAU;QACpC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACrC,OAAO,CACL,MAAM,CAAC,QAAQ,KAAK,IAAI;YACxB,MAAM,CAAC,QAAQ,KAAK,SAAS;YAC7B,MAAM,CAAC,QAAQ,GAAG,CAAC,CACpB,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,oCAAoC,CACxC,YAAoB;QAEpB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC;QACjE,OAAO,CACL,MAAM,CAAC,QAAQ,KAAK,IAAI;YACxB,MAAM,CAAC,QAAQ,KAAK,SAAS;YAC7B,MAAM,CAAC,QAAQ,GAAG,CAAC,CACpB,CAAC;IACJ,CAAC;CACF,CAAA;AAzGY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,yBAAyB,CAyGrC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\permission-scope.repository.ts"],"sourcesContent":["import { DataSource, Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { PermissionScope } from '../../entities/permission-scope.entity';\nimport { TipoEscopo } from '../../entities/user-permission.entity';\n\n/**\n * Repositório para a entidade PermissionScope.\n *\n * Fornece métodos para manipulação de escopos padrão para permissões no banco de dados,\n * incluindo busca por permissão, tipo de escopo e operações de CRUD.\n */\n@Injectable()\nexport class PermissionScopeRepository extends Repository<PermissionScope> {\n  constructor(private dataSource: DataSource) {\n    super(PermissionScope, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca escopo por ID de permissão.\n   *\n   * @param permissionId ID da permissão\n   * @returns O escopo encontrado ou null\n   */\n  async findByPermissionId(\n    permissionId: string,\n  ): Promise<PermissionScope | null> {\n    return this.findOne({ where: { permissao_id: permissionId } });\n  }\n\n  /**\n   * Busca escopos por tipo de escopo padrão.\n   *\n   * @param defaultScopeType Tipo de escopo padrão\n   * @returns Lista de escopos encontrados\n   */\n  async findByDefaultScopeType(\n    defaultScopeType: TipoEscopo,\n  ): Promise<PermissionScope[]> {\n    return this.find({ where: { tipo_escopo_padrao: defaultScopeType } });\n  }\n\n  /**\n   * Busca escopos por tipo de escopo padrão com permissões relacionadas.\n   *\n   * @param defaultScopeType Tipo de escopo padrão\n   * @returns Lista de escopos encontrados com permissões relacionadas\n   */\n  async findByDefaultScopeTypeWithPermissions(\n    defaultScopeType: TipoEscopo,\n  ): Promise<PermissionScope[]> {\n    return this.createQueryBuilder('escopo_permissao')\n      .leftJoinAndSelect('escopo_permissao.permissao', 'permissao')\n      .where('escopo_permissao.tipo_escopo_padrao = :defaultScopeType', {\n        defaultScopeType,\n      })\n      .getMany();\n  }\n\n  /**\n   * Cria um novo escopo padrão para uma permissão.\n   *\n   * @param data Dados do escopo a ser criado\n   * @returns O escopo criado\n   */\n  async createPermissionScope(\n    data: Partial<PermissionScope>,\n  ): Promise<PermissionScope> {\n    const permissionScope = this.create(data);\n    return this.save(permissionScope);\n  }\n\n  /**\n   * Atualiza um escopo padrão existente.\n   *\n   * @param id ID do escopo a ser atualizado\n   * @param data Dados atualizados do escopo\n   * @returns O escopo atualizado ou null se não encontrado\n   */\n  async updatePermissionScope(\n    id: string,\n    data: Partial<PermissionScope>,\n  ): Promise<PermissionScope | null> {\n    await this.update(id, data);\n    return this.findOneBy({ id });\n  }\n\n  /**\n   * Remove um escopo padrão.\n   *\n   * @param id ID do escopo a ser removido\n   * @returns true se o escopo foi removido, false caso contrário\n   */\n  async removePermissionScope(id: string): Promise<boolean> {\n    const result = await this.delete(id);\n    return (\n      result.affected !== null &&\n      result.affected !== undefined &&\n      result.affected > 0\n    );\n  }\n\n  /**\n   * Remove todos os escopos padrão de uma permissão.\n   *\n   * @param permissionId ID da permissão\n   * @returns true se os escopos foram removidos, false caso contrário\n   */\n  async removePermissionScopesByPermissionId(\n    permissionId: string,\n  ): Promise<boolean> {\n    const result = await this.delete({ permissao_id: permissionId });\n    return (\n      result.affected !== null &&\n      result.affected !== undefined &&\n      result.affected > 0\n    );\n  }\n}\n"],"version":3}