1ffd9c222159e8989f72d27ac6d3be92
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionScopeRepository = void 0;
const typeorm_1 = require("typeorm");
const common_1 = require("@nestjs/common");
const permission_scope_entity_1 = require("../../entities/permission-scope.entity");
/**
 * Repositório para a entidade PermissionScope.
 *
 * Fornece métodos para manipulação de escopos padrão para permissões no banco de dados,
 * incluindo busca por permissão, tipo de escopo e operações de CRUD.
 */
let PermissionScopeRepository = class PermissionScopeRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(permission_scope_entity_1.PermissionScope, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca escopo por ID de permissão.
     *
     * @param permissionId ID da permissão
     * @returns O escopo encontrado ou null
     */
    async findByPermissionId(permissionId) {
        return this.findOne({ where: { permissao_id: permissionId } });
    }
    /**
     * Busca escopos por tipo de escopo padrão.
     *
     * @param defaultScopeType Tipo de escopo padrão
     * @returns Lista de escopos encontrados
     */
    async findByDefaultScopeType(defaultScopeType) {
        return this.find({ where: { tipo_escopo_padrao: defaultScopeType } });
    }
    /**
     * Busca escopos por tipo de escopo padrão com permissões relacionadas.
     *
     * @param defaultScopeType Tipo de escopo padrão
     * @returns Lista de escopos encontrados com permissões relacionadas
     */
    async findByDefaultScopeTypeWithPermissions(defaultScopeType) {
        return this.createQueryBuilder('escopo_permissao')
            .leftJoinAndSelect('escopo_permissao.permissao', 'permissao')
            .where('escopo_permissao.tipo_escopo_padrao = :defaultScopeType', {
            defaultScopeType,
        })
            .getMany();
    }
    /**
     * Cria um novo escopo padrão para uma permissão.
     *
     * @param data Dados do escopo a ser criado
     * @returns O escopo criado
     */
    async createPermissionScope(data) {
        const permissionScope = this.create(data);
        return this.save(permissionScope);
    }
    /**
     * Atualiza um escopo padrão existente.
     *
     * @param id ID do escopo a ser atualizado
     * @param data Dados atualizados do escopo
     * @returns O escopo atualizado ou null se não encontrado
     */
    async updatePermissionScope(id, data) {
        await this.update(id, data);
        return this.findOneBy({ id });
    }
    /**
     * Remove um escopo padrão.
     *
     * @param id ID do escopo a ser removido
     * @returns true se o escopo foi removido, false caso contrário
     */
    async removePermissionScope(id) {
        const result = await this.delete(id);
        return (result.affected !== null &&
            result.affected !== undefined &&
            result.affected > 0);
    }
    /**
     * Remove todos os escopos padrão de uma permissão.
     *
     * @param permissionId ID da permissão
     * @returns true se os escopos foram removidos, false caso contrário
     */
    async removePermissionScopesByPermissionId(permissionId) {
        const result = await this.delete({ permissao_id: permissionId });
        return (result.affected !== null &&
            result.affected !== undefined &&
            result.affected > 0);
    }
};
exports.PermissionScopeRepository = PermissionScopeRepository;
exports.PermissionScopeRepository = PermissionScopeRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], PermissionScopeRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXHJlcG9zaXRvcmllc1xccGVybWlzc2lvbi1zY29wZS5yZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQ0FBaUQ7QUFDakQsMkNBQTRDO0FBQzVDLG9GQUF5RTtBQUd6RTs7Ozs7R0FLRztBQUVJLElBQU0seUJBQXlCLEdBQS9CLE1BQU0seUJBQTBCLFNBQVEsb0JBQTJCO0lBQ3BEO0lBQXBCLFlBQW9CLFVBQXNCO1FBQ3hDLEtBQUssQ0FBQyx5Q0FBZSxFQUFFLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7UUFEdkMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUUxQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxLQUFLLENBQUMsa0JBQWtCLENBQ3RCLFlBQW9CO1FBRXBCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLHNCQUFzQixDQUMxQixnQkFBNEI7UUFFNUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLHFDQUFxQyxDQUN6QyxnQkFBNEI7UUFFNUIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7YUFDL0MsaUJBQWlCLENBQUMsNEJBQTRCLEVBQUUsV0FBVyxDQUFDO2FBQzVELEtBQUssQ0FBQyx5REFBeUQsRUFBRTtZQUNoRSxnQkFBZ0I7U0FDakIsQ0FBQzthQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLHFCQUFxQixDQUN6QixJQUE4QjtRQUU5QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLHFCQUFxQixDQUN6QixFQUFVLEVBQ1YsSUFBOEI7UUFFOUIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxFQUFVO1FBQ3BDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQyxPQUFPLENBQ0wsTUFBTSxDQUFDLFFBQVEsS0FBSyxJQUFJO1lBQ3hCLE1BQU0sQ0FBQyxRQUFRLEtBQUssU0FBUztZQUM3QixNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FDcEIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEtBQUssQ0FBQyxvQ0FBb0MsQ0FDeEMsWUFBb0I7UUFFcEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDakUsT0FBTyxDQUNMLE1BQU0sQ0FBQyxRQUFRLEtBQUssSUFBSTtZQUN4QixNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVM7WUFDN0IsTUFBTSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQ3BCLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQXpHWSw4REFBeUI7b0NBQXpCLHlCQUF5QjtJQURyQyxJQUFBLG1CQUFVLEdBQUU7eURBRXFCLG9CQUFVLG9CQUFWLG9CQUFVO0dBRC9CLHlCQUF5QixDQXlHckMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGF1dGhcXHJlcG9zaXRvcmllc1xccGVybWlzc2lvbi1zY29wZS5yZXBvc2l0b3J5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFTb3VyY2UsIFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBQZXJtaXNzaW9uU2NvcGUgfSBmcm9tICcuLi8uLi9lbnRpdGllcy9wZXJtaXNzaW9uLXNjb3BlLmVudGl0eSc7XG5pbXBvcnQgeyBUaXBvRXNjb3BvIH0gZnJvbSAnLi4vLi4vZW50aXRpZXMvdXNlci1wZXJtaXNzaW9uLmVudGl0eSc7XG5cbi8qKlxuICogUmVwb3NpdMOzcmlvIHBhcmEgYSBlbnRpZGFkZSBQZXJtaXNzaW9uU2NvcGUuXG4gKlxuICogRm9ybmVjZSBtw6l0b2RvcyBwYXJhIG1hbmlwdWxhw6fDo28gZGUgZXNjb3BvcyBwYWRyw6NvIHBhcmEgcGVybWlzc8O1ZXMgbm8gYmFuY28gZGUgZGFkb3MsXG4gKiBpbmNsdWluZG8gYnVzY2EgcG9yIHBlcm1pc3PDo28sIHRpcG8gZGUgZXNjb3BvIGUgb3BlcmHDp8O1ZXMgZGUgQ1JVRC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBlcm1pc3Npb25TY29wZVJlcG9zaXRvcnkgZXh0ZW5kcyBSZXBvc2l0b3J5PFBlcm1pc3Npb25TY29wZT4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTb3VyY2U6IERhdGFTb3VyY2UpIHtcbiAgICBzdXBlcihQZXJtaXNzaW9uU2NvcGUsIGRhdGFTb3VyY2UuY3JlYXRlRW50aXR5TWFuYWdlcigpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSBlc2NvcG8gcG9yIElEIGRlIHBlcm1pc3PDo28uXG4gICAqXG4gICAqIEBwYXJhbSBwZXJtaXNzaW9uSWQgSUQgZGEgcGVybWlzc8Ojb1xuICAgKiBAcmV0dXJucyBPIGVzY29wbyBlbmNvbnRyYWRvIG91IG51bGxcbiAgICovXG4gIGFzeW5jIGZpbmRCeVBlcm1pc3Npb25JZChcbiAgICBwZXJtaXNzaW9uSWQ6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxQZXJtaXNzaW9uU2NvcGUgfCBudWxsPiB7XG4gICAgcmV0dXJuIHRoaXMuZmluZE9uZSh7IHdoZXJlOiB7IHBlcm1pc3Nhb19pZDogcGVybWlzc2lvbklkIH0gfSk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgZXNjb3BvcyBwb3IgdGlwbyBkZSBlc2NvcG8gcGFkcsOjby5cbiAgICpcbiAgICogQHBhcmFtIGRlZmF1bHRTY29wZVR5cGUgVGlwbyBkZSBlc2NvcG8gcGFkcsOjb1xuICAgKiBAcmV0dXJucyBMaXN0YSBkZSBlc2NvcG9zIGVuY29udHJhZG9zXG4gICAqL1xuICBhc3luYyBmaW5kQnlEZWZhdWx0U2NvcGVUeXBlKFxuICAgIGRlZmF1bHRTY29wZVR5cGU6IFRpcG9Fc2NvcG8sXG4gICk6IFByb21pc2U8UGVybWlzc2lvblNjb3BlW10+IHtcbiAgICByZXR1cm4gdGhpcy5maW5kKHsgd2hlcmU6IHsgdGlwb19lc2NvcG9fcGFkcmFvOiBkZWZhdWx0U2NvcGVUeXBlIH0gfSk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgZXNjb3BvcyBwb3IgdGlwbyBkZSBlc2NvcG8gcGFkcsOjbyBjb20gcGVybWlzc8O1ZXMgcmVsYWNpb25hZGFzLlxuICAgKlxuICAgKiBAcGFyYW0gZGVmYXVsdFNjb3BlVHlwZSBUaXBvIGRlIGVzY29wbyBwYWRyw6NvXG4gICAqIEByZXR1cm5zIExpc3RhIGRlIGVzY29wb3MgZW5jb250cmFkb3MgY29tIHBlcm1pc3PDtWVzIHJlbGFjaW9uYWRhc1xuICAgKi9cbiAgYXN5bmMgZmluZEJ5RGVmYXVsdFNjb3BlVHlwZVdpdGhQZXJtaXNzaW9ucyhcbiAgICBkZWZhdWx0U2NvcGVUeXBlOiBUaXBvRXNjb3BvLFxuICApOiBQcm9taXNlPFBlcm1pc3Npb25TY29wZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlUXVlcnlCdWlsZGVyKCdlc2NvcG9fcGVybWlzc2FvJylcbiAgICAgIC5sZWZ0Sm9pbkFuZFNlbGVjdCgnZXNjb3BvX3Blcm1pc3Nhby5wZXJtaXNzYW8nLCAncGVybWlzc2FvJylcbiAgICAgIC53aGVyZSgnZXNjb3BvX3Blcm1pc3Nhby50aXBvX2VzY29wb19wYWRyYW8gPSA6ZGVmYXVsdFNjb3BlVHlwZScsIHtcbiAgICAgICAgZGVmYXVsdFNjb3BlVHlwZSxcbiAgICAgIH0pXG4gICAgICAuZ2V0TWFueSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyaWEgdW0gbm92byBlc2NvcG8gcGFkcsOjbyBwYXJhIHVtYSBwZXJtaXNzw6NvLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSBEYWRvcyBkbyBlc2NvcG8gYSBzZXIgY3JpYWRvXG4gICAqIEByZXR1cm5zIE8gZXNjb3BvIGNyaWFkb1xuICAgKi9cbiAgYXN5bmMgY3JlYXRlUGVybWlzc2lvblNjb3BlKFxuICAgIGRhdGE6IFBhcnRpYWw8UGVybWlzc2lvblNjb3BlPixcbiAgKTogUHJvbWlzZTxQZXJtaXNzaW9uU2NvcGU+IHtcbiAgICBjb25zdCBwZXJtaXNzaW9uU2NvcGUgPSB0aGlzLmNyZWF0ZShkYXRhKTtcbiAgICByZXR1cm4gdGhpcy5zYXZlKHBlcm1pc3Npb25TY29wZSk7XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgdW0gZXNjb3BvIHBhZHLDo28gZXhpc3RlbnRlLlxuICAgKlxuICAgKiBAcGFyYW0gaWQgSUQgZG8gZXNjb3BvIGEgc2VyIGF0dWFsaXphZG9cbiAgICogQHBhcmFtIGRhdGEgRGFkb3MgYXR1YWxpemFkb3MgZG8gZXNjb3BvXG4gICAqIEByZXR1cm5zIE8gZXNjb3BvIGF0dWFsaXphZG8gb3UgbnVsbCBzZSBuw6NvIGVuY29udHJhZG9cbiAgICovXG4gIGFzeW5jIHVwZGF0ZVBlcm1pc3Npb25TY29wZShcbiAgICBpZDogc3RyaW5nLFxuICAgIGRhdGE6IFBhcnRpYWw8UGVybWlzc2lvblNjb3BlPixcbiAgKTogUHJvbWlzZTxQZXJtaXNzaW9uU2NvcGUgfCBudWxsPiB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoaWQsIGRhdGEpO1xuICAgIHJldHVybiB0aGlzLmZpbmRPbmVCeSh7IGlkIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB1bSBlc2NvcG8gcGFkcsOjby5cbiAgICpcbiAgICogQHBhcmFtIGlkIElEIGRvIGVzY29wbyBhIHNlciByZW1vdmlkb1xuICAgKiBAcmV0dXJucyB0cnVlIHNlIG8gZXNjb3BvIGZvaSByZW1vdmlkbywgZmFsc2UgY2FzbyBjb250csOhcmlvXG4gICAqL1xuICBhc3luYyByZW1vdmVQZXJtaXNzaW9uU2NvcGUoaWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZGVsZXRlKGlkKTtcbiAgICByZXR1cm4gKFxuICAgICAgcmVzdWx0LmFmZmVjdGVkICE9PSBudWxsICYmXG4gICAgICByZXN1bHQuYWZmZWN0ZWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgcmVzdWx0LmFmZmVjdGVkID4gMFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRvZG9zIG9zIGVzY29wb3MgcGFkcsOjbyBkZSB1bWEgcGVybWlzc8Ojby5cbiAgICpcbiAgICogQHBhcmFtIHBlcm1pc3Npb25JZCBJRCBkYSBwZXJtaXNzw6NvXG4gICAqIEByZXR1cm5zIHRydWUgc2Ugb3MgZXNjb3BvcyBmb3JhbSByZW1vdmlkb3MsIGZhbHNlIGNhc28gY29udHLDoXJpb1xuICAgKi9cbiAgYXN5bmMgcmVtb3ZlUGVybWlzc2lvblNjb3Blc0J5UGVybWlzc2lvbklkKFxuICAgIHBlcm1pc3Npb25JZDogc3RyaW5nLFxuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmRlbGV0ZSh7IHBlcm1pc3Nhb19pZDogcGVybWlzc2lvbklkIH0pO1xuICAgIHJldHVybiAoXG4gICAgICByZXN1bHQuYWZmZWN0ZWQgIT09IG51bGwgJiZcbiAgICAgIHJlc3VsdC5hZmZlY3RlZCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICByZXN1bHQuYWZmZWN0ZWQgPiAwXG4gICAgKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9