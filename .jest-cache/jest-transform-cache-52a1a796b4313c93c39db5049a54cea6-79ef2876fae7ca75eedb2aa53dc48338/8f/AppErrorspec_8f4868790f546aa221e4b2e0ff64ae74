b87344049c2f449ecf355f3fbafe808a
"use strict";
/**
 * Testes para a classe AppError
 *
 * Valida a funcionalidade da classe principal
 * de erro do sistema de catálogo.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const AppError_1 = require("./AppError");
const catalog_1 = require("./catalog");
describe('AppError', () => {
    describe('Constructor', () => {
        it('should create AppError with valid error code', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error).toBeInstanceOf(AppError_1.AppError);
            expect(error.errorCode).toBe('VAL_CPF_001');
            expect(error.definition).toBe(catalog_1.ERROR_CATALOG['VAL_CPF_001']);
            expect(error.getStatus()).toBe(400);
        });
        it('should create AppError with context', () => {
            const context = {
                cpf: '12345678901',
                operationalContext: {
                    module: 'cidadao',
                    operation: 'create',
                },
            };
            const error = new AppError_1.AppError('VAL_CPF_001', context);
            expect(error.context).toEqual(context);
        });
        it('should create AppError with custom message', () => {
            const customMessage = 'Mensagem personalizada';
            const error = new AppError_1.AppError('VAL_CPF_001', {}, customMessage);
            expect(error.message).toBe(customMessage);
        });
        it('should throw error for invalid error code', () => {
            expect(() => {
                new AppError_1.AppError('INVALID_CODE');
            }).toThrow('Código de erro INVALID_CODE não encontrado no catálogo');
        });
    });
    describe('Message Interpolation', () => {
        it('should interpolate message with context values', () => {
            const context = { cpf: '12345678901' };
            const error = new AppError_1.AppError('VAL_CPF_002', context);
            expect(error.message).toBe('Já existe um cidadão cadastrado com o CPF 12345678901');
        });
        it('should handle missing context values gracefully', () => {
            const error = new AppError_1.AppError('VAL_CPF_002', {});
            expect(error.message).toBe('Já existe um cidadão cadastrado com o CPF {cpf}');
        });
        it('should interpolate multiple placeholders', () => {
            const context = { minAge: 18, maxAge: 65 };
            const error = new AppError_1.AppError('VAL_AGE_001', context);
            expect(error.message).toBe('Idade deve estar entre 18 e 65 anos');
        });
    });
    describe('Localized Messages', () => {
        it('should return Portuguese message by default', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error.getLocalizedMessage()).toBe('CPF informado é inválido');
        });
        it('should return Portuguese message for pt-BR locale', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error.getLocalizedMessage('pt-BR')).toBe('CPF informado é inválido');
        });
        it('should fallback to default message for unsupported locale', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error.getLocalizedMessage('en-US')).toBe('CPF informado é inválido');
        });
    });
    describe('JSON Representation', () => {
        it('should return complete JSON representation', () => {
            const context = {
                cpf: '12345678901',
                operationalContext: {
                    module: 'cidadao',
                    operation: 'create',
                },
            };
            const error = new AppError_1.AppError('VAL_CPF_002', context);
            const json = error.toJSON();
            expect(json).toHaveProperty('errorCode', 'VAL_CPF_002');
            expect(json).toHaveProperty('message');
            expect(json).toHaveProperty('httpStatus', 409);
            expect(json).toHaveProperty('category', catalog_1.ErrorCategory.VALIDATION);
            expect(json).toHaveProperty('severity', catalog_1.ErrorSeverity.MEDIUM);
            expect(json).toHaveProperty('context', context);
            expect(json).toHaveProperty('timestamp');
        });
        it('should include legal reference when available', () => {
            const error = new AppError_1.AppError('BEN_NAT_001');
            const json = error.toJSON();
            if (catalog_1.ERROR_CATALOG['BEN_NAT_001'].legalReference) {
                expect(json).toHaveProperty('legalReference');
            }
        });
    });
    describe('Log Data', () => {
        it('should return sanitized log data', () => {
            const context = {
                cpf: '12345678901',
                password: 'secret123',
                operationalContext: {
                    module: 'cidadao',
                    operation: 'create',
                },
            };
            const error = new AppError_1.AppError('VAL_CPF_002', context);
            const logData = error.getLogData();
            expect(logData.context.cpf).toBe('***.***.***-**');
            expect(logData.context.password).toBe('[REDACTED]');
            expect(logData.context.operationalContext).toEqual(context.operationalContext);
        });
        it('should include stack trace in log data', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            const logData = error.getLogData();
            expect(logData).toHaveProperty('stack');
            expect(logData.stack).toBeTruthy();
        });
    });
    describe('API Data', () => {
        it('should return API-safe data without sensitive information', () => {
            const context = {
                cpf: '12345678901',
                password: 'secret123',
                operationalContext: {
                    module: 'cidadao',
                    operation: 'create',
                },
            };
            const error = new AppError_1.AppError('VAL_CPF_002', context);
            const apiData = error.getApiData();
            expect(apiData.context).not.toHaveProperty('password');
            expect(apiData).not.toHaveProperty('stack');
            expect(apiData).toHaveProperty('errorCode');
            expect(apiData).toHaveProperty('message');
            expect(apiData).toHaveProperty('httpStatus');
        });
    });
    describe('Severity and Category Checks', () => {
        it('should correctly identify critical errors', () => {
            const error = new AppError_1.AppError('INT_DB_001');
            expect(error.isCritical()).toBe(true);
            expect(error.isHigh()).toBe(false);
        });
        it('should correctly identify high severity errors', () => {
            const error = new AppError_1.AppError('BEN_NAT_001');
            expect(error.isHigh()).toBe(true);
            expect(error.isCritical()).toBe(false);
        });
        it('should correctly identify validation category', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error.isValidationError()).toBe(true);
            expect(error.isBenefitError()).toBe(false);
        });
        it('should correctly identify benefit category', () => {
            const error = new AppError_1.AppError('BEN_NAT_001');
            expect(error.isBenefitError()).toBe(true);
            expect(error.isValidationError()).toBe(false);
        });
    });
    describe('Static Factory Methods', () => {
        it('should create AppError from PostgreSQL error code', () => {
            const pgError = {
                code: '23505',
                message: 'duplicate key value violates unique constraint',
                constraint: 'uk_cidadao_cpf',
                table: 'cidadao',
            };
            const context = {
                operationalContext: {
                    module: 'cidadao',
                    operation: 'create',
                },
            };
            const error = AppError_1.AppError.fromPostgresError('23505', pgError, context);
            expect(error).toBeInstanceOf(AppError_1.AppError);
            expect(error.errorCode).toBe('SYS_UNIQUE_001');
        });
        it('should throw error for unmapped PostgreSQL code', () => {
            const pgError = {
                code: '99999',
                message: 'unknown error',
            };
            expect(() => {
                AppError_1.AppError.fromPostgresError('99999', pgError, {});
            }).toThrow('Código PostgreSQL 99999 não mapeado no catálogo');
        });
    });
    describe('Error Inheritance', () => {
        it('should be instance of Error', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error).toBeInstanceOf(Error);
        });
        it('should have correct name property', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error.name).toBe('AppError');
        });
        it('should have stack trace', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error.stack).toBeTruthy();
        });
    });
    describe('Context Validation', () => {
        it('should handle empty context', () => {
            const error = new AppError_1.AppError('VAL_CPF_001', {});
            expect(error.context).toEqual({});
        });
        it('should handle undefined context', () => {
            const error = new AppError_1.AppError('VAL_CPF_001');
            expect(error.context).toEqual({});
        });
        it('should preserve complex context objects', () => {
            const context = {
                operationalContext: {
                    module: 'cidadao',
                    operation: 'create',
                    entityType: 'Cidadao',
                    entityId: '123',
                },
                metadata: {
                    constraint: 'uk_cidadao_cpf',
                    table: 'cidadao',
                    userAgent: 'Mozilla/5.0...',
                },
            };
            const error = new AppError_1.AppError('VAL_CPF_001', context);
            expect(error.context).toEqual(context);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcZXhjZXB0aW9uc1xcZXJyb3ItY2F0YWxvZ1xcQXBwRXJyb3Iuc3BlYy50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7O0FBRUgseUNBQW9EO0FBQ3BELHVDQUF3RTtBQUV4RSxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUN4QixRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtRQUMzQixFQUFFLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1lBQ3RELE1BQU0sS0FBSyxHQUFHLElBQUksbUJBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUUxQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLG1CQUFRLENBQUMsQ0FBQztZQUN2QyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM1QyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7WUFDN0MsTUFBTSxPQUFPLEdBQWlCO2dCQUM1QixHQUFHLEVBQUUsYUFBYTtnQkFDbEIsa0JBQWtCLEVBQUU7b0JBQ2xCLE1BQU0sRUFBRSxTQUFTO29CQUNqQixTQUFTLEVBQUUsUUFBUTtpQkFDcEI7YUFDRixDQUFDO1lBRUYsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBUSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUVuRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8s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QUU7WUFDekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxtQkFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxNQUFNLE9BQU8sR0FBaUI7Z0JBQzVCLGtCQUFrQixFQUFFO29CQUNsQixNQUFNLEVBQUUsU0FBUztvQkFDakIsU0FBUyxFQUFFLFFBQVE7b0JBQ25CLFVBQVUsRUFBRSxTQUFTO29CQUNyQixRQUFRLEVBQUUsS0FBSztpQkFDaEI7Z0JBQ0QsUUFBUSxFQUFFO29CQUNSLFVBQVUsRUFBRSxnQkFBZ0I7b0JBQzVCLEtBQUssRUFBRSxTQUFTO29CQUNoQixTQUFTLEVBQUUsZ0JBQWdCO2lCQUM1QjthQUNGLENBQUM7WUFFRixNQUFNLEtBQUssR0FBRyxJQUFJLG1CQUFRLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBRW5ELE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcc2hhcmVkXFxleGNlcHRpb25zXFxlcnJvci1jYXRhbG9nXFxBcHBFcnJvci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdGVzIHBhcmEgYSBjbGFzc2UgQXBwRXJyb3JcbiAqIFxuICogVmFsaWRhIGEgZnVuY2lvbmFsaWRhZGUgZGEgY2xhc3NlIHByaW5jaXBhbFxuICogZGUgZXJybyBkbyBzaXN0ZW1hIGRlIGNhdMOhbG9nby5cbiAqL1xuXG5pbXBvcnQgeyBBcHBFcnJvciwgRXJyb3JDb250ZXh0IH0gZnJvbSAnLi9BcHBFcnJvcic7XG5pbXBvcnQgeyBFUlJPUl9DQVRBTE9HLCBFcnJvclNldmVyaXR5LCBFcnJvckNhdGVnb3J5IH0gZnJvbSAnLi9jYXRhbG9nJztcblxuZGVzY3JpYmUoJ0FwcEVycm9yJywgKCkgPT4ge1xuICBkZXNjcmliZSgnQ29uc3RydWN0b3InLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgQXBwRXJyb3Igd2l0aCB2YWxpZCBlcnJvciBjb2RlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAxJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZUluc3RhbmNlT2YoQXBwRXJyb3IpO1xuICAgICAgZXhwZWN0KGVycm9yLmVycm9yQ29kZSkudG9CZSgnVkFMX0NQRl8wMDEnKTtcbiAgICAgIGV4cGVjdChlcnJvci5kZWZpbml0aW9uKS50b0JlKEVSUk9SX0NBVEFMT0dbJ1ZBTF9DUEZfMDAxJ10pO1xuICAgICAgZXhwZWN0KGVycm9yLmdldFN0YXR1cygpKS50b0JlKDQwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBBcHBFcnJvciB3aXRoIGNvbnRleHQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZXh0OiBFcnJvckNvbnRleHQgPSB7XG4gICAgICAgIGNwZjogJzEyMzQ1Njc4OTAxJyxcbiAgICAgICAgb3BlcmF0aW9uYWxDb250ZXh0OiB7XG4gICAgICAgICAgbW9kdWxlOiAnY2lkYWRhbycsXG4gICAgICAgICAgb3BlcmF0aW9uOiAnY3JlYXRlJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKCdWQUxfQ1BGXzAwMScsIGNvbnRleHQpO1xuICAgICAgXG4gICAgICBleHBlY3QoZXJyb3IuY29udGV4dCkudG9FcXVhbChjb250ZXh0KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIEFwcEVycm9yIHdpdGggY3VzdG9tIG1lc3NhZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21NZXNzYWdlID0gJ01lbnNhZ2VtIHBlcnNvbmFsaXphZGEnO1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAxJywge30sIGN1c3RvbU1lc3NhZ2UpO1xuICAgICAgXG4gICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG9CZShjdXN0b21NZXNzYWdlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGludmFsaWQgZXJyb3IgY29kZScsICgpID0+IHtcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIG5ldyBBcHBFcnJvcignSU5WQUxJRF9DT0RFJyk7XG4gICAgICB9KS50b1Rocm93KCdDw7NkaWdvIGRlIGVycm8gSU5WQUxJRF9DT0RFIG7Do28gZW5jb250cmFkbyBubyBjYXTDoWxvZ28nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ01lc3NhZ2UgSW50ZXJwb2xhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGludGVycG9sYXRlIG1lc3NhZ2Ugd2l0aCBjb250ZXh0IHZhbHVlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB7IGNwZjogJzEyMzQ1Njc4OTAxJyB9O1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAyJywgY29udGV4dCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0JlKCdKw6EgZXhpc3RlIHVtIGNpZGFkw6NvIGNhZGFzdHJhZG8gY29tIG8gQ1BGIDEyMzQ1Njc4OTAxJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBtaXNzaW5nIGNvbnRleHQgdmFsdWVzIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignVkFMX0NQRl8wMDInLCB7fSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0JlKCdKw6EgZXhpc3RlIHVtIGNpZGFkw6NvIGNhZGFzdHJhZG8gY29tIG8gQ1BGIHtjcGZ9Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGludGVycG9sYXRlIG11bHRpcGxlIHBsYWNlaG9sZGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSB7IG1pbkFnZTogMTgsIG1heEFnZTogNjUgfTtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKCdWQUxfQUdFXzAwMScsIGNvbnRleHQpO1xuICAgICAgXG4gICAgICBleHBlY3QoZXJyb3IubWVzc2FnZSkudG9CZSgnSWRhZGUgZGV2ZSBlc3RhciBlbnRyZSAxOCBlIDY1IGFub3MnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0xvY2FsaXplZCBNZXNzYWdlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBQb3J0dWd1ZXNlIG1lc3NhZ2UgYnkgZGVmYXVsdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKCdWQUxfQ1BGXzAwMScpO1xuICAgICAgXG4gICAgICBleHBlY3QoZXJyb3IuZ2V0TG9jYWxpemVkTWVzc2FnZSgpKS50b0JlKCdDUEYgaW5mb3JtYWRvIMOpIGludsOhbGlkbycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gUG9ydHVndWVzZSBtZXNzYWdlIGZvciBwdC1CUiBsb2NhbGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignVkFMX0NQRl8wMDEnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGVycm9yLmdldExvY2FsaXplZE1lc3NhZ2UoJ3B0LUJSJykpLnRvQmUoJ0NQRiBpbmZvcm1hZG8gw6kgaW52w6FsaWRvJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZhbGxiYWNrIHRvIGRlZmF1bHQgbWVzc2FnZSBmb3IgdW5zdXBwb3J0ZWQgbG9jYWxlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAxJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5nZXRMb2NhbGl6ZWRNZXNzYWdlKCdlbi1VUycpKS50b0JlKCdDUEYgaW5mb3JtYWRvIMOpIGludsOhbGlkbycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSlNPTiBSZXByZXNlbnRhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBjb21wbGV0ZSBKU09OIHJlcHJlc2VudGF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGV4dDogRXJyb3JDb250ZXh0ID0ge1xuICAgICAgICBjcGY6ICcxMjM0NTY3ODkwMScsXG4gICAgICAgIG9wZXJhdGlvbmFsQ29udGV4dDoge1xuICAgICAgICAgIG1vZHVsZTogJ2NpZGFkYW8nLFxuICAgICAgICAgIG9wZXJhdGlvbjogJ2NyZWF0ZScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignVkFMX0NQRl8wMDInLCBjb250ZXh0KTtcbiAgICAgIGNvbnN0IGpzb24gPSBlcnJvci50b0pTT04oKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGpzb24pLnRvSGF2ZVByb3BlcnR5KCdlcnJvckNvZGUnLCAnVkFMX0NQRl8wMDInKTtcbiAgICAgIGV4cGVjdChqc29uKS50b0hhdmVQcm9wZXJ0eSgnbWVzc2FnZScpO1xuICAgICAgZXhwZWN0KGpzb24pLnRvSGF2ZVByb3BlcnR5KCdodHRwU3RhdHVzJywgNDA5KTtcbiAgICAgIGV4cGVjdChqc29uKS50b0hhdmVQcm9wZXJ0eSgnY2F0ZWdvcnknLCBFcnJvckNhdGVnb3J5LlZBTElEQVRJT04pO1xuICAgICAgZXhwZWN0KGpzb24pLnRvSGF2ZVByb3BlcnR5KCdzZXZlcml0eScsIEVycm9yU2V2ZXJpdHkuTUVESVVNKTtcbiAgICAgIGV4cGVjdChqc29uKS50b0hhdmVQcm9wZXJ0eSgnY29udGV4dCcsIGNvbnRleHQpO1xuICAgICAgZXhwZWN0KGpzb24pLnRvSGF2ZVByb3BlcnR5KCd0aW1lc3RhbXAnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW5jbHVkZSBsZWdhbCByZWZlcmVuY2Ugd2hlbiBhdmFpbGFibGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignQkVOX05BVF8wMDEnKTtcbiAgICAgIGNvbnN0IGpzb24gPSBlcnJvci50b0pTT04oKTtcbiAgICAgIFxuICAgICAgaWYgKEVSUk9SX0NBVEFMT0dbJ0JFTl9OQVRfMDAxJ10ubGVnYWxSZWZlcmVuY2UpIHtcbiAgICAgICAgZXhwZWN0KGpzb24pLnRvSGF2ZVByb3BlcnR5KCdsZWdhbFJlZmVyZW5jZScpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTG9nIERhdGEnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gc2FuaXRpemVkIGxvZyBkYXRhJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGV4dDogRXJyb3JDb250ZXh0ID0ge1xuICAgICAgICBjcGY6ICcxMjM0NTY3ODkwMScsXG4gICAgICAgIHBhc3N3b3JkOiAnc2VjcmV0MTIzJyxcbiAgICAgICAgb3BlcmF0aW9uYWxDb250ZXh0OiB7XG4gICAgICAgICAgbW9kdWxlOiAnY2lkYWRhbycsXG4gICAgICAgICAgb3BlcmF0aW9uOiAnY3JlYXRlJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKCdWQUxfQ1BGXzAwMicsIGNvbnRleHQpO1xuICAgICAgY29uc3QgbG9nRGF0YSA9IGVycm9yLmdldExvZ0RhdGEoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGxvZ0RhdGEuY29udGV4dC5jcGYpLnRvQmUoJyoqKi4qKiouKioqLSoqJyk7XG4gICAgICBleHBlY3QobG9nRGF0YS5jb250ZXh0LnBhc3N3b3JkKS50b0JlKCdbUkVEQUNURURdJyk7XG4gICAgICBleHBlY3QobG9nRGF0YS5jb250ZXh0Lm9wZXJhdGlvbmFsQ29udGV4dCkudG9FcXVhbChjb250ZXh0Lm9wZXJhdGlvbmFsQ29udGV4dCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgc3RhY2sgdHJhY2UgaW4gbG9nIGRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignVkFMX0NQRl8wMDEnKTtcbiAgICAgIGNvbnN0IGxvZ0RhdGEgPSBlcnJvci5nZXRMb2dEYXRhKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChsb2dEYXRhKS50b0hhdmVQcm9wZXJ0eSgnc3RhY2snKTtcbiAgICAgIGV4cGVjdChsb2dEYXRhLnN0YWNrKS50b0JlVHJ1dGh5KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBUEkgRGF0YScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBBUEktc2FmZSBkYXRhIHdpdGhvdXQgc2Vuc2l0aXZlIGluZm9ybWF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGV4dDogRXJyb3JDb250ZXh0ID0ge1xuICAgICAgICBjcGY6ICcxMjM0NTY3ODkwMScsXG4gICAgICAgIHBhc3N3b3JkOiAnc2VjcmV0MTIzJyxcbiAgICAgICAgb3BlcmF0aW9uYWxDb250ZXh0OiB7XG4gICAgICAgICAgbW9kdWxlOiAnY2lkYWRhbycsXG4gICAgICAgICAgb3BlcmF0aW9uOiAnY3JlYXRlJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKCdWQUxfQ1BGXzAwMicsIGNvbnRleHQpO1xuICAgICAgY29uc3QgYXBpRGF0YSA9IGVycm9yLmdldEFwaURhdGEoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGFwaURhdGEuY29udGV4dCkubm90LnRvSGF2ZVByb3BlcnR5KCdwYXNzd29yZCcpO1xuICAgICAgZXhwZWN0KGFwaURhdGEpLm5vdC50b0hhdmVQcm9wZXJ0eSgnc3RhY2snKTtcbiAgICAgIGV4cGVjdChhcGlEYXRhKS50b0hhdmVQcm9wZXJ0eSgnZXJyb3JDb2RlJyk7XG4gICAgICBleHBlY3QoYXBpRGF0YSkudG9IYXZlUHJvcGVydHkoJ21lc3NhZ2UnKTtcbiAgICAgIGV4cGVjdChhcGlEYXRhKS50b0hhdmVQcm9wZXJ0eSgnaHR0cFN0YXR1cycpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU2V2ZXJpdHkgYW5kIENhdGVnb3J5IENoZWNrcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNvcnJlY3RseSBpZGVudGlmeSBjcml0aWNhbCBlcnJvcnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignSU5UX0RCXzAwMScpO1xuICAgICAgXG4gICAgICBleHBlY3QoZXJyb3IuaXNDcml0aWNhbCgpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGVycm9yLmlzSGlnaCgpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY29ycmVjdGx5IGlkZW50aWZ5IGhpZ2ggc2V2ZXJpdHkgZXJyb3JzJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ0JFTl9OQVRfMDAxJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5pc0hpZ2goKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChlcnJvci5pc0NyaXRpY2FsKCkpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjb3JyZWN0bHkgaWRlbnRpZnkgdmFsaWRhdGlvbiBjYXRlZ29yeScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEFwcEVycm9yKCdWQUxfQ1BGXzAwMScpO1xuICAgICAgXG4gICAgICBleHBlY3QoZXJyb3IuaXNWYWxpZGF0aW9uRXJyb3IoKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChlcnJvci5pc0JlbmVmaXRFcnJvcigpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY29ycmVjdGx5IGlkZW50aWZ5IGJlbmVmaXQgY2F0ZWdvcnknLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignQkVOX05BVF8wMDEnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGVycm9yLmlzQmVuZWZpdEVycm9yKCkpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZXJyb3IuaXNWYWxpZGF0aW9uRXJyb3IoKSkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTdGF0aWMgRmFjdG9yeSBNZXRob2RzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIEFwcEVycm9yIGZyb20gUG9zdGdyZVNRTCBlcnJvciBjb2RlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGdFcnJvciA9IHtcbiAgICAgICAgY29kZTogJzIzNTA1JyxcbiAgICAgICAgbWVzc2FnZTogJ2R1cGxpY2F0ZSBrZXkgdmFsdWUgdmlvbGF0ZXMgdW5pcXVlIGNvbnN0cmFpbnQnLFxuICAgICAgICBjb25zdHJhaW50OiAndWtfY2lkYWRhb19jcGYnLFxuICAgICAgICB0YWJsZTogJ2NpZGFkYW8nLFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgY29udGV4dDogRXJyb3JDb250ZXh0ID0ge1xuICAgICAgICBvcGVyYXRpb25hbENvbnRleHQ6IHtcbiAgICAgICAgICBtb2R1bGU6ICdjaWRhZGFvJyxcbiAgICAgICAgICBvcGVyYXRpb246ICdjcmVhdGUnLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgZXJyb3IgPSBBcHBFcnJvci5mcm9tUG9zdGdyZXNFcnJvcignMjM1MDUnLCBwZ0Vycm9yLCBjb250ZXh0KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihBcHBFcnJvcik7XG4gICAgICBleHBlY3QoZXJyb3IuZXJyb3JDb2RlKS50b0JlKCdTWVNfVU5JUVVFXzAwMScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBmb3IgdW5tYXBwZWQgUG9zdGdyZVNRTCBjb2RlJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGdFcnJvciA9IHtcbiAgICAgICAgY29kZTogJzk5OTk5JyxcbiAgICAgICAgbWVzc2FnZTogJ3Vua25vd24gZXJyb3InLFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgQXBwRXJyb3IuZnJvbVBvc3RncmVzRXJyb3IoJzk5OTk5JywgcGdFcnJvciwge30pO1xuICAgICAgfSkudG9UaHJvdygnQ8OzZGlnbyBQb3N0Z3JlU1FMIDk5OTk5IG7Do28gbWFwZWFkbyBubyBjYXTDoWxvZ28nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEluaGVyaXRhbmNlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYmUgaW5zdGFuY2Ugb2YgRXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignVkFMX0NQRl8wMDEnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihFcnJvcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhdmUgY29ycmVjdCBuYW1lIHByb3BlcnR5JywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAxJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5uYW1lKS50b0JlKCdBcHBFcnJvcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYXZlIHN0YWNrIHRyYWNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAxJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5zdGFjaykudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29udGV4dCBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IGNvbnRleHQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBBcHBFcnJvcignVkFMX0NQRl8wMDEnLCB7fSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5jb250ZXh0KS50b0VxdWFsKHt9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHVuZGVmaW5lZCBjb250ZXh0JywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAxJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5jb250ZXh0KS50b0VxdWFsKHt9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcHJlc2VydmUgY29tcGxleCBjb250ZXh0IG9iamVjdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZXh0OiBFcnJvckNvbnRleHQgPSB7XG4gICAgICAgIG9wZXJhdGlvbmFsQ29udGV4dDoge1xuICAgICAgICAgIG1vZHVsZTogJ2NpZGFkYW8nLFxuICAgICAgICAgIG9wZXJhdGlvbjogJ2NyZWF0ZScsXG4gICAgICAgICAgZW50aXR5VHlwZTogJ0NpZGFkYW8nLFxuICAgICAgICAgIGVudGl0eUlkOiAnMTIzJyxcbiAgICAgICAgfSxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICBjb25zdHJhaW50OiAndWtfY2lkYWRhb19jcGYnLFxuICAgICAgICAgIHRhYmxlOiAnY2lkYWRhbycsXG4gICAgICAgICAgdXNlckFnZW50OiAnTW96aWxsYS81LjAuLi4nLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgQXBwRXJyb3IoJ1ZBTF9DUEZfMDAxJywgY29udGV4dCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChlcnJvci5jb250ZXh0KS50b0VxdWFsKGNvbnRleHQpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==