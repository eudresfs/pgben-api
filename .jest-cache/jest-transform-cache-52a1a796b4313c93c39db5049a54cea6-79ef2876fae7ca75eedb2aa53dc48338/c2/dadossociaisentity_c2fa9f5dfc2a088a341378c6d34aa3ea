0c0d5a3d611c535ae28afc5cab2125cc
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosSociais = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const cidadao_entity_1 = require("./cidadao.entity");
const escolaridade_enum_1 = require("../enums/escolaridade.enum");
const situacao_trabalho_enum_1 = require("../enums/situacao-trabalho.enum");
let DadosSociais = class DadosSociais {
    id;
    cidadao_id;
    cidadao;
    escolaridade;
    publico_prioritario;
    renda;
    ocupacao;
    recebe_pbf;
    valor_pbf;
    recebe_bpc;
    tipo_bpc;
    valor_bpc;
    curso_profissionalizante;
    interesse_curso_profissionalizante;
    situacao_trabalho;
    area_trabalho;
    familiar_apto_trabalho;
    area_interesse_familiar;
    observacoes;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get cidadaoId() {
        return this.cidadao_id;
    }
    set cidadaoId(value) {
        this.cidadao_id = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se os dados foram criados recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se os dados foram removidos
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se os dados estão ativos
     */
    isAtivo() {
        return !this.removed_at;
    }
    /**
     * Verifica se é público prioritário
     */
    isPublicoPrioritario() {
        return !!this.publico_prioritario;
    }
    /**
     * Verifica se tem renda
     */
    temRenda() {
        return this.renda !== null && this.renda !== undefined && this.renda > 0;
    }
    /**
     * Obtém a renda formatada
     */
    getRendaFormatada() {
        if (!this.temRenda())
            return 'Sem renda';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(this.renda);
    }
    /**
     * Verifica se recebe Programa Bolsa Família
     */
    recebePBF() {
        return this.recebe_pbf;
    }
    /**
     * Obtém o valor do PBF formatado
     */
    getValorPBFFormatado() {
        if (!this.recebe_pbf || !this.valor_pbf)
            return 'Não recebe';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(this.valor_pbf);
    }
    /**
     * Verifica se recebe Benefício de Prestação Continuada
     */
    recebeBPC() {
        return this.recebe_bpc;
    }
    /**
     * Obtém o valor do BPC formatado
     */
    getValorBPCFormatado() {
        if (!this.recebe_bpc || !this.valor_bpc)
            return 'Não recebe';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(this.valor_bpc);
    }
    /**
     * Verifica se recebe algum benefício social
     */
    recebeBeneficioSocial() {
        return this.recebePBF() || this.recebeBPC();
    }
    /**
     * Calcula o total de benefícios recebidos
     */
    getTotalBeneficios() {
        let total = 0;
        if (this.recebe_pbf && this.valor_pbf)
            total += this.valor_pbf;
        if (this.recebe_bpc && this.valor_bpc)
            total += this.valor_bpc;
        return total;
    }
    /**
     * Obtém o total de benefícios formatado
     */
    getTotalBeneficiosFormatado() {
        const total = this.getTotalBeneficios();
        if (total === 0)
            return 'Nenhum benefício';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(total);
    }
    /**
     * Verifica se tem interesse em curso profissionalizante
     */
    temInteresseCursoProfissionalizante() {
        return !!this.interesse_curso_profissionalizante;
    }
    /**
     * Verifica se já fez curso profissionalizante
     */
    jafezCursoProfissionalizante() {
        return !!(this.curso_profissionalizante && this.curso_profissionalizante.trim());
    }
    /**
     * Verifica se está empregado
     */
    isEmpregado() {
        return this.situacao_trabalho === situacao_trabalho_enum_1.SituacaoTrabalhoEnum.EMPREGADO_FORMAL;
    }
    /**
     * Verifica se está desempregado
     */
    isDesempregado() {
        return this.situacao_trabalho === situacao_trabalho_enum_1.SituacaoTrabalhoEnum.DESEMPREGADO;
    }
    /**
     * Verifica se é autônomo
     */
    isAutonomo() {
        return this.situacao_trabalho === situacao_trabalho_enum_1.SituacaoTrabalhoEnum.AUTONOMO;
    }
    /**
     * Verifica se é aposentado
     */
    isAposentado() {
        return this.situacao_trabalho === situacao_trabalho_enum_1.SituacaoTrabalhoEnum.APOSENTADO;
    }
    /**
     * Verifica se é pensionista
     */
    isPensionista() {
        return this.situacao_trabalho === situacao_trabalho_enum_1.SituacaoTrabalhoEnum.PENSIONISTA;
    }
    /**
     * Verifica se tem familiar apto ao trabalho
     */
    temFamiliarAptoTrabalho() {
        return !!this.familiar_apto_trabalho;
    }
    /**
     * Obtém a descrição da escolaridade
     */
    getDescricaoEscolaridade() {
        const descricoes = {
            [escolaridade_enum_1.EscolaridadeEnum.ANALFABETO]: 'Analfabeto',
            [escolaridade_enum_1.EscolaridadeEnum.FUNDAMENTAL_INCOMPLETO]: 'Fundamental Incompleto',
            [escolaridade_enum_1.EscolaridadeEnum.FUNDAMENTAL_COMPLETO]: 'Fundamental Completo',
            [escolaridade_enum_1.EscolaridadeEnum.MEDIO_INCOMPLETO]: 'Médio Incompleto',
            [escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO]: 'Médio Completo',
            [escolaridade_enum_1.EscolaridadeEnum.SUPERIOR_INCOMPLETO]: 'Superior Incompleto',
            [escolaridade_enum_1.EscolaridadeEnum.SUPERIOR_COMPLETO]: 'Superior Completo',
            [escolaridade_enum_1.EscolaridadeEnum.POS_GRADUACAO]: 'Pós-graduação',
        };
        return descricoes[this.escolaridade] || this.escolaridade;
    }
    /**
     * Obtém a descrição da situação de trabalho
     */
    getDescricaoSituacaoTrabalho() {
        if (!this.situacao_trabalho)
            return 'Não informado';
        const descricoes = {
            [situacao_trabalho_enum_1.SituacaoTrabalhoEnum.EMPREGADO_FORMAL]: 'Empregado',
            [situacao_trabalho_enum_1.SituacaoTrabalhoEnum.DESEMPREGADO]: 'Desempregado',
            [situacao_trabalho_enum_1.SituacaoTrabalhoEnum.AUTONOMO]: 'Autônomo',
            [situacao_trabalho_enum_1.SituacaoTrabalhoEnum.APOSENTADO]: 'Aposentado',
            [situacao_trabalho_enum_1.SituacaoTrabalhoEnum.PENSIONISTA]: 'Pensionista',
            [situacao_trabalho_enum_1.SituacaoTrabalhoEnum.ESTUDANTE]: 'Estudante',
            [situacao_trabalho_enum_1.SituacaoTrabalhoEnum.DO_LAR]: 'Do lar',
        };
        return descricoes[this.situacao_trabalho] || this.situacao_trabalho;
    }
    /**
     * Verifica se pertence a um cidadão específico
     */
    pertenceAoCidadao(cidadaoId) {
        return this.cidadao_id === cidadaoId;
    }
    /**
     * Obtém um resumo dos dados sociais
     */
    getSummary() {
        const escolaridade = this.getDescricaoEscolaridade();
        const situacao = this.getDescricaoSituacaoTrabalho();
        const renda = this.getRendaFormatada();
        const beneficios = this.recebeBeneficioSocial() ? ' - Recebe benefícios' : '';
        return `${escolaridade} - ${situacao} - ${renda}${beneficios}`;
    }
    /**
     * Gera uma chave única para os dados
     */
    getUniqueKey() {
        return `dados_sociais_${this.cidadao_id}`;
    }
    /**
     * Verifica se os dados são consistentes
     */
    isConsistente() {
        // Verifica se tem cidadão
        if (!this.cidadao_id)
            return false;
        // Verifica se tem escolaridade
        if (!this.escolaridade)
            return false;
        // Se recebe PBF, deve ter valor
        if (this.recebe_pbf && (!this.valor_pbf || this.valor_pbf <= 0)) {
            return false;
        }
        // Se recebe BPC, deve ter valor e tipo
        if (this.recebe_bpc && (!this.valor_bpc || this.valor_bpc <= 0 || !this.tipo_bpc)) {
            return false;
        }
        // Se tem renda, deve ser positiva
        if (this.renda !== null && this.renda !== undefined && this.renda < 0) {
            return false;
        }
        return true;
    }
    /**
     * Verifica se pode ser removido
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        // Outras validações específicas podem ser adicionadas
        return true;
    }
    /**
     * Clona os dados sociais (sem ID)
     */
    clone() {
        return {
            cidadao_id: this.cidadao_id,
            escolaridade: this.escolaridade,
            publico_prioritario: this.publico_prioritario,
            renda: this.renda,
            ocupacao: this.ocupacao,
            recebe_pbf: this.recebe_pbf,
            valor_pbf: this.valor_pbf,
            recebe_bpc: this.recebe_bpc,
            tipo_bpc: this.tipo_bpc,
            valor_bpc: this.valor_bpc,
            curso_profissionalizante: this.curso_profissionalizante,
            interesse_curso_profissionalizante: this.interesse_curso_profissionalizante,
            situacao_trabalho: this.situacao_trabalho,
            area_trabalho: this.area_trabalho,
            familiar_apto_trabalho: this.familiar_apto_trabalho,
            area_interesse_familiar: this.area_interesse_familiar,
            observacoes: this.observacoes,
        };
    }
    /**
     * Verifica se é elegível para programas de capacitação
     */
    isElegivelCapacitacao() {
        return this.isDesempregado() || this.temInteresseCursoProfissionalizante();
    }
    /**
     * Verifica se tem potencial de geração de renda
     */
    temPotencialGeracaoRenda() {
        return this.temFamiliarAptoTrabalho() || this.temInteresseCursoProfissionalizante() || this.jafezCursoProfissionalizante();
    }
    /**
     * Calcula a renda total (própria + benefícios)
     */
    getRendaTotal() {
        let total = 0;
        if (this.renda)
            total += this.renda;
        total += this.getTotalBeneficios();
        return total;
    }
    /**
     * Obtém a renda total formatada
     */
    getRendaTotalFormatada() {
        const total = this.getRendaTotal();
        if (total === 0)
            return 'Sem renda';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
        }).format(total);
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            escolaridade: this.escolaridade,
            publico_prioritario: this.publico_prioritario,
            situacao_trabalho: this.situacao_trabalho,
            recebe_pbf: this.recebe_pbf,
            recebe_bpc: this.recebe_bpc,
            interesse_curso_profissionalizante: this.interesse_curso_profissionalizante,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para os dados sociais
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.ocupacao && this.isEmpregado()) {
            sugestoes.push('Definir ocupação para pessoa empregada');
        }
        if (!this.area_trabalho && (this.isEmpregado() || this.isAutonomo())) {
            sugestoes.push('Especificar área de trabalho');
        }
        if (this.isDesempregado() && !this.temInteresseCursoProfissionalizante()) {
            sugestoes.push('Verificar interesse em capacitação profissional');
        }
        if (this.recebe_pbf && !this.valor_pbf) {
            sugestoes.push('Informar valor do Programa Bolsa Família');
        }
        if (this.recebe_bpc && (!this.valor_bpc || !this.tipo_bpc)) {
            sugestoes.push('Completar informações do BPC (valor e tipo)');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar consistência dos dados sociais');
        }
        return sugestoes;
    }
    /**
     * Verifica se precisa de atualização (dados antigos)
     */
    precisaAtualizacao() {
        const seiseMesesAtras = new Date();
        seiseMesesAtras.setMonth(seiseMesesAtras.getMonth() - 6);
        return this.updated_at < seiseMesesAtras;
    }
};
exports.DadosSociais = DadosSociais;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], DadosSociais.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do cidadão é obrigatório' }),
    __metadata("design:type", String)
], DadosSociais.prototype, "cidadao_id", void 0);
__decorate([
    (0, typeorm_1.OneToOne)(() => cidadao_entity_1.Cidadao, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'cidadao_id' }),
    __metadata("design:type", typeof (_a = typeof cidadao_entity_1.Cidadao !== "undefined" && cidadao_entity_1.Cidadao) === "function" ? _a : Object)
], DadosSociais.prototype, "cidadao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: escolaridade_enum_1.EscolaridadeEnum,
        enumName: 'escolaridade_enum',
        nullable: false,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Escolaridade é obrigatória' }),
    (0, class_validator_1.IsEnum)(escolaridade_enum_1.EscolaridadeEnum, { message: 'Escolaridade inválida' }),
    __metadata("design:type", typeof (_b = typeof escolaridade_enum_1.EscolaridadeEnum !== "undefined" && escolaridade_enum_1.EscolaridadeEnum) === "function" ? _b : Object)
], DadosSociais.prototype, "escolaridade", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo publico_prioritario deve ser um true ou false' }),
    __metadata("design:type", Boolean)
], DadosSociais.prototype, "publico_prioritario", void 0);
__decorate([
    (0, typeorm_1.Column)('decimal', { precision: 10, scale: 2, nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Renda deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Renda não pode ser negativa' }),
    __metadata("design:type", Number)
], DadosSociais.prototype, "renda", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosSociais.prototype, "ocupacao", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: false }),
    (0, class_validator_1.IsBoolean)({ message: 'O campo recebe_pbf deve ser um valor booleano' }),
    __metadata("design:type", Boolean)
], DadosSociais.prototype, "recebe_pbf", void 0);
__decorate([
    (0, typeorm_1.Column)('decimal', { precision: 10, scale: 2, nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Valor PBF deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Valor do PBF não pode ser negativa' }),
    __metadata("design:type", Number)
], DadosSociais.prototype, "valor_pbf", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: false }),
    (0, class_validator_1.IsBoolean)({ message: 'O campo recebe_bpc deve ser um valor booleano' }),
    __metadata("design:type", Boolean)
], DadosSociais.prototype, "recebe_bpc", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'O campo tipo_bpc deve ser um texto' }),
    __metadata("design:type", String)
], DadosSociais.prototype, "tipo_bpc", void 0);
__decorate([
    (0, typeorm_1.Column)('decimal', { precision: 10, scale: 2, nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Valor do BPC deve Rendaser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Valor do BPC não pode ser negativa' }),
    __metadata("design:type", Number)
], DadosSociais.prototype, "valor_bpc", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'O campo curso_profissionalizante deve ser um texto' }),
    __metadata("design:type", String)
], DadosSociais.prototype, "curso_profissionalizante", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo interesse_curso_profissionalizante deve ser um true ou false' }),
    __metadata("design:type", Boolean)
], DadosSociais.prototype, "interesse_curso_profissionalizante", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: situacao_trabalho_enum_1.SituacaoTrabalhoEnum,
        enumName: 'situacao_trabalho_enum',
        nullable: true,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEnum)(situacao_trabalho_enum_1.SituacaoTrabalhoEnum, { message: 'Situação de trabalho inválida' }),
    __metadata("design:type", typeof (_c = typeof situacao_trabalho_enum_1.SituacaoTrabalhoEnum !== "undefined" && situacao_trabalho_enum_1.SituacaoTrabalhoEnum) === "function" ? _c : Object)
], DadosSociais.prototype, "situacao_trabalho", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'O campo area_trabalho deve ser um texto' }),
    __metadata("design:type", String)
], DadosSociais.prototype, "area_trabalho", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo familiar_apto_trabalho deve ser um true ou false' }),
    __metadata("design:type", Boolean)
], DadosSociais.prototype, "familiar_apto_trabalho", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'O campo area_interesse_familiar deve ser um texto' }),
    __metadata("design:type", String)
], DadosSociais.prototype, "area_interesse_familiar", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosSociais.prototype, "observacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], DadosSociais.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], DadosSociais.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], DadosSociais.prototype, "removed_at", void 0);
exports.DadosSociais = DadosSociais = __decorate([
    (0, typeorm_1.Entity)('dados_sociais'),
    (0, typeorm_1.Index)(['cidadao_id'], { unique: true })
], DadosSociais);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,