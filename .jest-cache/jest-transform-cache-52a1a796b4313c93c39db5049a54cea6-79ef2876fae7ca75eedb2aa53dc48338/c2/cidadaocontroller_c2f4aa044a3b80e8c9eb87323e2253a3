ead24cd005b05044cd38e7d33ff84ed6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var CidadaoController_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CidadaoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const create_cidadao_dto_1 = require("../dto/create-cidadao.dto");
const update_cidadao_dto_1 = require("../dto/update-cidadao.dto");
const create_composicao_familiar_dto_1 = require("../dto/create-composicao-familiar.dto");
const busca_cidadao_dto_1 = require("../dto/busca-cidadao.dto");
const cidadao_service_1 = require("../services/cidadao.service");
const cidadao_repository_1 = require("../repositories/cidadao.repository");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
// import { MulterUploader } from '../../common/uploaders/multer.uploader';
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const cidadao_response_dto_1 = require("../dto/cidadao-response.dto");
const api_error_response_dto_1 = require("../../../shared/dtos/api-error-response.dto");
/**
 * Controlador de cidadãos
 *
 * Responsável por gerenciar as rotas relacionadas a cidadãos/beneficiários
 */
let CidadaoController = CidadaoController_1 = class CidadaoController {
    cidadaoService;
    cidadaoRepository;
    logger = new common_1.Logger(CidadaoController_1.name);
    constructor(cidadaoService, cidadaoRepository) {
        this.cidadaoService = cidadaoService;
        this.cidadaoRepository = cidadaoRepository;
    }
    /**
     * Lista todos os cidadãos com filtros e paginação
     */
    async findAll(req, page = 1, limit = 10, search, bairro) {
        // Inicia medição de tempo para performance
        const startTime = Date.now();
        const requestId = `LIST-${Date.now()}`;
        this.logger.log(`[${requestId}] Início de processamento da listagem de cidadãos`);
        try {
            // Restaurando o código original com monitoramento de performance
            const result = await this.cidadaoService.findAll({
                page,
                limit,
                search,
                bairro,
                unidadeId: req?.user?.unidade_id,
            });
            // Registra tempo total da operação para monitoramento
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`[${requestId}] Operação lenta (findAll): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            // Registra erro para diagnóstico
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    async findByCursor(cursor, limit = 10, search, bairro, orderBy, orderDirection) {
        return { data: [], message: 'Endpoint desativado temporariamente para diagnóstico' };
        // Código original comentado para permitir compilação
        /*return this.cidadaoService.findByCursor({
          cursor,
          limit,
          search,
          bairro,
          unidadeId: req?.user?.unidade_id,
          orderBy,
          orderDirection,
        });*/
    }
    /**
     * Busca unificada de cidadão por ID, CPF, NIS, telefone ou nome
     */
    async buscarCidadao(query) {
        return this.cidadaoService.buscarCidadao(query);
    }
    /**
     * Obtém detalhes de um cidadão específico
     */
    async findOne(id) {
        return this.cidadaoService.findById(id, false); // Não carregar relacionamentos por padrão para melhor performance
    }
    /**
     * Cria um novo cidadão
     */
    async create(createCidadaoDto, req) {
        const startTime = Date.now();
        try {
            const result = await this.cidadaoService.create(createCidadaoDto, req?.user?.id, req?.user?.unidade_id);
            const duration = Date.now() - startTime;
            this.logger.log(`✅ Cidadão criado com sucesso em ${duration}ms`, {
                cidadaoId: result.id,
                duration
            });
            return result;
        }
        catch (error) {
            const duration = Date.now() - startTime;
            this.logger.error(`❌ Erro ao criar cidadão após ${duration}ms:`, {
                error: error.message,
                duration
            });
            throw error;
        }
    }
    /**
     * Atualiza um cidadão existente
     */
    async update(id, updateCidadaoDto, req) {
        // Inicia medição de tempo para performance
        const startTime = Date.now();
        const requestId = `UPDATE-${id.substring(0, 8)}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início de processamento de atualização de cidadão`);
        try {
            // Restaurando o código original com monitoramento de performance
            const result = await this.cidadaoService.update(id, updateCidadaoDto, req.user.id);
            // Registra tempo total da operação para monitoramento
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`[${requestId}] Operação lenta (update): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            // Registra erro para diagnóstico
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Busca um cidadão pelo CPF
     * @param cpf CPF do cidadão
     * @returns Dados do cidadão encontrado
     */
    async findByCpf(cpf) {
        // Inicia medição de tempo para performance
        const startTime = Date.now();
        const requestId = `CPF-${cpf.substring(Math.max(0, cpf.length - 4))}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início de processamento da requisição CPF`);
        try {
            // Chama o serviço otimizado para buscar por CPF
            const result = await this.cidadaoService.findByCpf(cpf, true);
            // Registra tempo total da operação para monitoramento
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`[${requestId}] Operação lenta: ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            // Registra erro para diagnóstico
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Busca cidadão por NIS
     */
    async findByNis(nis) {
        // Inicia medição de tempo para performance
        const startTime = Date.now();
        const requestId = `NIS-${nis.substring(Math.max(0, nis.length - 4))}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início de processamento da requisição NIS`);
        try {
            // Chama o serviço otimizado para buscar por NIS
            const result = await this.cidadaoService.findByNis(nis, true);
            // Registra tempo total da operação para monitoramento
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`[${requestId}] Operação lenta: ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            // Registra erro para diagnóstico
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
    /**
     * Obtém histórico de solicitações de um cidadão
     */
    async findSolicitacoes(id) {
        return this.cidadaoService.findSolicitacoesByCidadaoId(id);
    }
    /**
     * Adiciona membro à composição familiar
     */
    async addComposicaoFamiliar(id, createComposicaoFamiliarDto, req) {
        // Inicia medição de tempo para performance
        const startTime = Date.now();
        const requestId = `COMP-${id.substring(0, 8)}-${Date.now()}`;
        this.logger.log(`[${requestId}] Início de processamento de adição na composição familiar`);
        try {
            // Restaurando o código original com monitoramento de performance
            const result = await this.cidadaoService.addComposicaoFamiliar(id, createComposicaoFamiliarDto, req?.user?.id);
            // Registra tempo total da operação para monitoramento
            const totalTime = Date.now() - startTime;
            if (totalTime > 500) {
                this.logger.warn(`[${requestId}] Operação lenta (addComposicaoFamiliar): ${totalTime}ms`);
            }
            else {
                this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);
            }
            return result;
        }
        catch (error) {
            // Registra erro para diagnóstico
            const totalTime = Date.now() - startTime;
            this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);
            throw error;
        }
    }
};
exports.CidadaoController = CidadaoController;
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.listar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'user.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Listar cidadãos',
        description: 'Retorna uma lista paginada de cidadãos com opções de filtro.',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Lista de cidadãos retornada com sucesso',
        type: cidadao_response_dto_1.CidadaoPaginatedResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        type: Number,
        description: 'Número da página (padrão: 1)',
        example: 1,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        description: 'Número de itens por página (padrão: 10, máximo: 100)',
        example: 10,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'search',
        required: false,
        type: String,
        description: 'Termo de busca (busca por nome, CPF ou NIS)',
        example: 'Maria',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'bairro',
        required: false,
        type: String,
        description: 'Filtrar por bairro',
        example: 'Centro',
    }),
    __param(0, (0, common_1.Request)()),
    __param(1, (0, common_1.Query)('page')),
    __param(2, (0, common_1.Query)('limit')),
    __param(3, (0, common_1.Query)('search')),
    __param(4, (0, common_1.Query)('bairro')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Object, String, String]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], CidadaoController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('cursor'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiOperation)({
        summary: 'Lista cidadãos com paginação por cursor (mais eficiente para grandes volumes)',
        description: 'Implementa paginação baseada em cursor, que é mais eficiente que a paginação por offset para grandes volumes de dados.'
    }),
    (0, swagger_1.ApiQuery)({
        name: 'cursor',
        required: false,
        type: String,
        description: 'Cursor para a próxima página (ID do último item da página anterior)',
        example: '550e8400-e29b-41d4-a716-446655440000',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        description: 'Quantidade de itens por página',
        example: 10,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'search',
        required: false,
        type: String,
        description: 'Busca por nome, CPF ou NIS',
        example: 'João',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'bairro',
        required: false,
        type: String,
        description: 'Filtrar por bairro',
        example: 'Centro',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'orderBy',
        required: false,
        type: String,
        description: 'Campo para ordenação',
        example: 'created_at',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'orderDirection',
        required: false,
        enum: ['ASC', 'DESC'],
        description: 'Direção da ordenação',
        example: 'DESC',
    }),
    __param(0, (0, common_1.Query)('cursor')),
    __param(1, (0, common_1.Query)('limit')),
    __param(2, (0, common_1.Query)('search')),
    __param(3, (0, common_1.Query)('bairro')),
    __param(4, (0, common_1.Query)('orderBy')),
    __param(5, (0, common_1.Query)('orderDirection')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, String, String, String, String]),
    __metadata("design:returntype", Promise)
], CidadaoController.prototype, "findByCursor", null);
__decorate([
    (0, common_1.Get)('busca'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar cidadão',
        description: 'Busca um cidadão por ID, CPF, NIS, telefone ou nome. Permite apenas um parâmetro por vez.',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'id',
        required: false,
        type: String,
        description: 'ID do cidadão (UUID)',
        example: '550e8400-e29b-41d4-a716-446655440000',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'cpf',
        required: false,
        type: String,
        description: 'CPF do cidadão (com ou sem formatação)',
        example: '12345678901',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'nis',
        required: false,
        type: String,
        description: 'NIS do cidadão',
        example: '12345678901',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'telefone',
        required: false,
        type: String,
        description: 'Telefone do cidadão (com ou sem formatação)',
        example: '11987654321',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'nome',
        required: false,
        type: String,
        description: 'Nome do cidadão (busca parcial)',
        example: 'João Silva',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'includeRelations',
        required: false,
        type: Boolean,
        description: 'Incluir relacionamentos (composição familiar, etc.)',
        example: false,
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Cidadão(s) encontrado(s) com sucesso',
        schema: {
            oneOf: [
                { $ref: '#/components/schemas/CidadaoResponseDto' },
                {
                    type: 'array',
                    items: { $ref: '#/components/schemas/CidadaoResponseDto' },
                },
            ],
        },
    }),
    (0, swagger_1.ApiBadRequestResponse)({
        description: 'Parâmetros de busca inválidos',
        type: api_error_response_dto_1.ApiErrorResponse,
        schema: {
            example: {
                statusCode: 400,
                message: 'Forneça apenas um parâmetro de busca por vez',
                error: 'Bad Request',
            },
        },
    }),
    (0, swagger_1.ApiNotFoundResponse)({
        description: 'Cidadão não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_d = typeof busca_cidadao_dto_1.BuscaCidadaoDto !== "undefined" && busca_cidadao_dto_1.BuscaCidadaoDto) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], CidadaoController.prototype, "buscarCidadao", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Obter detalhes de um cidadão',
        description: 'Retorna os detalhes completos de um cidadão pelo seu ID.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        required: true,
        description: 'ID do cidadão',
        example: '550e8400-e29b-41d4-a716-446655440000',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Cidadão encontrado com sucesso',
        type: cidadao_response_dto_1.CidadaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'ID inválido',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('id', new common_1.ParseUUIDPipe({ version: '4' }))),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], CidadaoController.prototype, "findOne", null);
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.criar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'user.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Criar cidadão',
        description: 'Cadastra um novo cidadão no sistema.',
        requestBody: {
            description: 'Dados do cidadão a ser criado',
            required: true,
            content: {
                'application/json': {
                    schema: {
                        $ref: '#/components/schemas/CreateCidadaoDto',
                    },
                    examples: {
                        'cidadao-completo': {
                            summary: 'Cidadão com dados completos',
                            description: 'Exemplo de criação de cidadão com todos os dados preenchidos',
                            value: {
                                nome: 'Maria da Silva Santos',
                                cpf: '123.456.789-00',
                                rg: '1234567',
                                prontuario_suas: 'SUAS1234567',
                                naturalidade: 'Natal',
                                data_nascimento: '1985-03-15',
                                sexo: 'FEMININO',
                                estado_civil: 'SOLTEIRA',
                                nis: '12345678901',
                                telefone: '(84) 99999-9999',
                                email: 'maria.silva@email.com',
                                endereco: {
                                    logradouro: 'Rua das Flores',
                                    numero: '123',
                                    complemento: 'Apto 101',
                                    bairro: 'Centro',
                                    cidade: 'Natal',
                                    estado: 'RN',
                                    cep: '59000-000',
                                    ponto_referencia: 'Próximo ao Corpo de Bombeiros',
                                    tempo_de_residencia: 2
                                },
                                papeis: [{
                                        tipo_papel: 'requerente',
                                        metadados: {
                                            grau_parentesco: 'Responsável'
                                        }
                                    }]
                            }
                        },
                        'cidadao-minimo': {
                            summary: 'Cidadão com dados mínimos',
                            description: 'Exemplo de criação de cidadão apenas com campos obrigatórios',
                            value: {
                                nome: 'João Santos',
                                cpf: '987.654.321-00',
                                rg: '7654321',
                                prontuario_suas: 'SUAS7654321',
                                naturalidade: 'Natal',
                                data_nascimento: '1990-07-20',
                                sexo: 'MASCULINO',
                                estado_civil: 'SOLTEIRO',
                                nis: '10987654321',
                                telefone: '(84) 88888-8888',
                                endereco: {
                                    logradouro: 'Rua Principal',
                                    numero: '456',
                                    bairro: 'Cidade Nova',
                                    cidade: 'Natal',
                                    estado: 'RN',
                                    cep: '59100-000',
                                    tempo_de_residencia: 5
                                }
                            }
                        }
                    }
                }
            }
        }
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Cidadão criado com sucesso',
        type: cidadao_response_dto_1.CidadaoResponseDto,
    }),
    (0, swagger_1.ApiBadRequestResponse)({
        description: 'Dados inválidos fornecidos',
        type: api_error_response_dto_1.ApiErrorResponse,
        schema: {
            example: {
                statusCode: 400,
                message: 'CPF inválido',
                error: 'Bad Request',
            },
        },
    }),
    (0, swagger_1.ApiConflictResponse)({
        description: 'Conflito - CPF ou NIS já cadastrado',
        type: api_error_response_dto_1.ApiErrorResponse,
        schema: {
            example: {
                statusCode: 409,
                message: 'Já existe um cidadão cadastrado com este CPF',
                error: 'Conflict',
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Cidadão criado com sucesso',
        type: cidadao_response_dto_1.CidadaoResponseDto,
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_g = typeof create_cidadao_dto_1.CreateCidadaoDto !== "undefined" && create_cidadao_dto_1.CreateCidadaoDto) === "function" ? _g : Object, Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], CidadaoController.prototype, "create", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.editar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'cidadao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualizar cidadão existente',
        description: 'Atualiza os dados de um cidadão existente.',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        required: true,
        description: 'ID do cidadão a ser atualizado',
        example: '550e8400-e29b-41d4-a716-446655440000',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Cidadão atualizado com sucesso',
        type: cidadao_response_dto_1.CidadaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'CPF ou NIS já em uso',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('id', new common_1.ParseUUIDPipe({ version: '4' }))),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_j = typeof update_cidadao_dto_1.UpdateCidadaoDto !== "undefined" && update_cidadao_dto_1.UpdateCidadaoDto) === "function" ? _j : Object, Object]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], CidadaoController.prototype, "update", null);
__decorate([
    (0, common_1.Get)('cpf/:cpf'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.buscar.cpf' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar cidadão por CPF',
        description: 'Busca um cidadão pelo CPF, com ou sem formatação',
    }),
    (0, swagger_1.ApiParam)({
        name: 'cpf',
        type: String,
        description: 'CPF do cidadão (com ou sem formatação)',
        example: '123.456.789-00',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Cidadão encontrado',
        type: cidadao_response_dto_1.CidadaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'CPF inválido',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('cpf')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], CidadaoController.prototype, "findByCpf", null);
__decorate([
    (0, common_1.Get)('nis/:nis'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.buscar.nis' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Buscar cidadão por NIS',
        description: 'Busca um cidadão pelo número do NIS (PIS/PASEP).',
    }),
    (0, swagger_1.ApiParam)({
        name: 'nis',
        required: true,
        description: 'Número do NIS (PIS/PASEP)',
        example: '12345678901',
    }),
    (0, swagger_1.ApiOkResponse)({
        description: 'Cidadão encontrado com sucesso',
        type: cidadao_response_dto_1.CidadaoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'NIS inválido',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Cidadão não encontrado',
        type: api_error_response_dto_1.ApiErrorResponse,
    }),
    __param(0, (0, common_1.Param)('nis')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], CidadaoController.prototype, "findByNis", null);
__decorate([
    (0, common_1.Get)(':id/solicitacao'),
    (0, swagger_1.ApiOperation)({ summary: 'Histórico de solicitações' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Histórico retornado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Cidadão não encontrado' }),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'cidadao.unidadeId',
    }, { permissionName: 'solicitacao.listar' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], CidadaoController.prototype, "findSolicitacoes", null);
__decorate([
    (0, common_1.Post)(':id/composicao'),
    (0, swagger_1.ApiOperation)({ summary: 'Adicionar membro à composição familiar' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Membro adicionado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Cidadão não encontrado' }),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.editar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'cidadao.unidadeId',
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_o = typeof create_composicao_familiar_dto_1.CreateComposicaoFamiliarDto !== "undefined" && create_composicao_familiar_dto_1.CreateComposicaoFamiliarDto) === "function" ? _o : Object, Object]),
    __metadata("design:returntype", Promise)
], CidadaoController.prototype, "addComposicaoFamiliar", null);
exports.CidadaoController = CidadaoController = CidadaoController_1 = __decorate([
    (0, swagger_1.ApiTags)('Cidadão'),
    (0, swagger_1.ApiExtraModels)(cidadao_response_dto_1.CidadaoResponseDto, cidadao_response_dto_1.CidadaoComposicaoFamiliarDto),
    (0, common_1.Controller)('cidadao'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof cidadao_service_1.CidadaoService !== "undefined" && cidadao_service_1.CidadaoService) === "function" ? _a : Object, typeof (_b = typeof cidadao_repository_1.CidadaoRepository !== "undefined" && cidadao_repository_1.CidadaoRepository) === "function" ? _b : Object])
], CidadaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,