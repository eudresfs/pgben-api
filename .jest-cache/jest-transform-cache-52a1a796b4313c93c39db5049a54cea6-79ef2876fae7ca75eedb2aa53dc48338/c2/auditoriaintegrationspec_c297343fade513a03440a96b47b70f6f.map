{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\auditoria.integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\auditoria.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { LogAuditoria } from '../../src/modules/auditoria/entities/log-auditoria.entity';\nimport { TipoOperacao } from '../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { JwtService } from '@nestjs/jwt';\n\ndescribe('Auditoria (Integração)', () => {\n  let app: INestApplication;\n  let logAuditoriaRepository: Repository<LogAuditoria>;\n  let jwtService: JwtService;\n  let authToken: string;\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n\n    logAuditoriaRepository = moduleFixture.get<Repository<LogAuditoria>>(\n      getRepositoryToken(LogAuditoria),\n    );\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    // Gerar token de autenticação para testes\n    authToken = jwtService.sign({\n      id: 'test-user-id',\n      nome: 'Usuário de Teste',\n      email: 'teste@exemplo.com',\n      roles: ['admin'],\n    });\n  });\n\n  beforeEach(async () => {\n    // Limpar logs de auditoria antes de cada teste\n    await logAuditoriaRepository.clear();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('Auditoria de operações CRUD', () => {\n    it('deve registrar log ao criar um documento', async () => {\n      // Arrange\n      const documentoDto = {\n        nome: 'Documento de Teste',\n        tipo: 'PDF',\n        solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',\n      };\n\n      // Act\n      await request(app.getHttpServer())\n        .post('/api/documentos')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(documentoDto)\n        .expect(201);\n\n      // Assert\n      const logs = await logAuditoriaRepository.find();\n      expect(logs).toHaveLength(1);\n      expect(logs[0].tipo_operacao).toBe(TipoOperacao.CREATE);\n      expect(logs[0].entidade_afetada).toBe('documentos');\n      expect(logs[0].usuario_id).toBe('test-user-id');\n      expect(logs[0].dados_novos).toEqual(\n        expect.objectContaining(documentoDto),\n      );\n    });\n\n    it('deve registrar log ao consultar um documento', async () => {\n      // Act\n      await request(app.getHttpServer())\n        .get('/api/documentos/documento-123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      const logs = await logAuditoriaRepository.find();\n      expect(logs).toHaveLength(1);\n      expect(logs[0].tipo_operacao).toBe(TipoOperacao.READ);\n      expect(logs[0].entidade_afetada).toBe('documentos');\n      expect(logs[0].entidade_id).toBe('documento-123');\n      expect(logs[0].usuario_id).toBe('test-user-id');\n    });\n\n    it('deve registrar log ao atualizar um documento', async () => {\n      // Arrange\n      const documentoDto = {\n        nome: 'Documento Atualizado',\n        tipo: 'DOCX',\n      };\n\n      // Act\n      await request(app.getHttpServer())\n        .put('/api/documentos/documento-123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send(documentoDto)\n        .expect(200);\n\n      // Assert\n      const logs = await logAuditoriaRepository.find();\n      expect(logs).toHaveLength(1);\n      expect(logs[0].tipo_operacao).toBe(TipoOperacao.UPDATE);\n      expect(logs[0].entidade_afetada).toBe('documentos');\n      expect(logs[0].entidade_id).toBe('documento-123');\n      expect(logs[0].usuario_id).toBe('test-user-id');\n      expect(logs[0].dados_novos).toEqual(\n        expect.objectContaining(documentoDto),\n      );\n    });\n\n    it('deve registrar log ao excluir um documento', async () => {\n      // Act\n      await request(app.getHttpServer())\n        .delete('/api/documentos/documento-123')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      const logs = await logAuditoriaRepository.find();\n      expect(logs).toHaveLength(1);\n      expect(logs[0].tipo_operacao).toBe(TipoOperacao.DELETE);\n      expect(logs[0].entidade_afetada).toBe('documentos');\n      expect(logs[0].entidade_id).toBe('documento-123');\n      expect(logs[0].usuario_id).toBe('test-user-id');\n    });\n  });\n\n  describe('API de Auditoria', () => {\n    it('deve permitir consulta de logs de auditoria', async () => {\n      // Arrange\n      const log1 = logAuditoriaRepository.create({\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-1',\n        descricao: 'Criação de documento',\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      });\n\n      const log2 = logAuditoriaRepository.create({\n        tipo_operacao: TipoOperacao.UPDATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-1',\n        descricao: 'Atualização de documento',\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      });\n\n      await logAuditoriaRepository.save([log1, log2]);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ entidade_afetada: 'documentos' })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(2);\n      expect(response.body.total).toBe(2);\n    });\n\n    it('deve permitir consulta de logs por tipo de operação', async () => {\n      // Arrange\n      const log1 = logAuditoriaRepository.create({\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-1',\n        descricao: 'Criação de documento',\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      });\n\n      const log2 = logAuditoriaRepository.create({\n        tipo_operacao: TipoOperacao.UPDATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-1',\n        descricao: 'Atualização de documento',\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      });\n\n      await logAuditoriaRepository.save([log1, log2]);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ tipo_operacao: TipoOperacao.CREATE })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(1);\n      expect(response.body.data[0].tipo_operacao).toBe(TipoOperacao.CREATE);\n    });\n\n    it('deve permitir geração de relatório de auditoria', async () => {\n      // Arrange\n      const log1 = logAuditoriaRepository.create({\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-1',\n        descricao: 'Criação de documento',\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      });\n\n      const log2 = logAuditoriaRepository.create({\n        tipo_operacao: TipoOperacao.UPDATE,\n        entidade_afetada: 'documentos',\n        entidade_id: 'doc-1',\n        descricao: 'Atualização de documento',\n        usuario_id: 'test-user-id',\n        ip_origem: '127.0.0.1',\n      });\n\n      await logAuditoriaRepository.save([log1, log2]);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/auditoria/relatorio')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ formato: 'json' })\n        .expect(200);\n\n      // Assert\n      expect(response.body).toHaveLength(2);\n    });\n  });\n});\n"],"version":3}