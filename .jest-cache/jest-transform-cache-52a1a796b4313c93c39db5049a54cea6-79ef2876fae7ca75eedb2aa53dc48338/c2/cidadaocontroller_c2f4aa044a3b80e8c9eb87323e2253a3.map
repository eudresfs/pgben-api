{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\cidadao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\cidadao.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Query,\n  Put,\n  Delete,\n  ParseUUIDPipe,\n  DefaultValuePipe,\n  ParseIntPipe,\n  BadRequestException,\n  UseInterceptors,\n  UploadedFiles,\n  UseGuards,\n  HttpStatus,\n  Res,\n  SetMetadata,\n  Logger,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiQuery,\n  ApiParam,\n  ApiOkResponse,\n  ApiConflictResponse,\n  ApiNotFoundResponse,\n  ApiBadRequestResponse,\n  ApiExtraModels,\n} from '@nestjs/swagger';\nimport { CreateCidadaoDto } from '../dto/create-cidadao.dto';\nimport { UpdateCidadaoDto } from '../dto/update-cidadao.dto';\nimport { CreateComposicaoFamiliarDto } from '../dto/create-composicao-familiar.dto';\nimport { BuscaCidadaoDto } from '../dto/busca-cidadao.dto';\nimport { CidadaoService } from '../services/cidadao.service';\nimport { CidadaoRepository } from '../repositories/cidadao.repository';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\n// import { MulterUploader } from '../../common/uploaders/multer.uploader';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { Cidadao } from '../../../entities/cidadao.entity';\nimport { ScopeType } from '../../../entities/user-permission.entity';\nimport {\n  CidadaoResponseDto,\n  CidadaoPaginatedResponseDto,\n  CidadaoComposicaoFamiliarDto,\n} from '../dto/cidadao-response.dto';\nimport { ApiErrorResponse } from '../../../shared/dtos/api-error-response.dto';\n\n/**\n * Controlador de cidadãos\n *\n * Responsável por gerenciar as rotas relacionadas a cidadãos/beneficiários\n */\n@ApiTags('Cidadão')\n@ApiExtraModels(CidadaoResponseDto, CidadaoComposicaoFamiliarDto)\n@Controller('cidadao')\n@UseGuards(JwtAuthGuard)\n@ApiBearerAuth()\nexport class CidadaoController {\n  private readonly logger = new Logger(CidadaoController.name);\n  \n  constructor(\n    private readonly cidadaoService: CidadaoService,\n    private readonly cidadaoRepository: CidadaoRepository,\n  ) {}\n\n  /**\n   * Lista todos os cidadãos com filtros e paginação\n   */\n  @Get()\n  @RequiresPermission(\n  {\n    permissionName: 'cidadao.listar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'user.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Listar cidadãos',\n    description: 'Retorna uma lista paginada de cidadãos com opções de filtro.',\n  })\n  @ApiOkResponse({\n    description: 'Lista de cidadãos retornada com sucesso',\n    type: CidadaoPaginatedResponseDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado',\n    type: ApiErrorResponse,\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Número da página (padrão: 1)',\n    example: 1,\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Número de itens por página (padrão: 10, máximo: 100)',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'search',\n    required: false,\n    type: String,\n    description: 'Termo de busca (busca por nome, CPF ou NIS)',\n    example: 'Maria',\n  })\n  @ApiQuery({\n    name: 'bairro',\n    required: false,\n    type: String,\n    description: 'Filtrar por bairro',\n    example: 'Centro',\n  })\n  async findAll(\n    @Request() req,\n    @Query('page') page = 1,\n    @Query('limit') limit = 10,\n    @Query('search') search?: string,\n    @Query('bairro') bairro?: string,\n  ): Promise<any> {\n    // Inicia medição de tempo para performance\n    const startTime = Date.now();\n    const requestId = `LIST-${Date.now()}`;\n    this.logger.log(`[${requestId}] Início de processamento da listagem de cidadãos`);\n    \n    try {\n      // Restaurando o código original com monitoramento de performance\n      const result = await this.cidadaoService.findAll({\n        page,\n        limit,\n        search,\n        bairro,\n        unidadeId: req?.user?.unidade_id,\n      });\n      \n      // Registra tempo total da operação para monitoramento\n      const totalTime = Date.now() - startTime;\n      if (totalTime > 500) {\n        this.logger.warn(`[${requestId}] Operação lenta (findAll): ${totalTime}ms`);\n      } else {\n        this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);\n      }\n      \n      return result;\n    } catch (error) {\n      // Registra erro para diagnóstico\n      const totalTime = Date.now() - startTime;\n      this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);\n      throw error;\n    }\n  }\n\n  @Get('cursor')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @ApiOperation({ \n    summary: 'Lista cidadãos com paginação por cursor (mais eficiente para grandes volumes)', \n    description: 'Implementa paginação baseada em cursor, que é mais eficiente que a paginação por offset para grandes volumes de dados.'\n  })\n  @ApiQuery({\n    name: 'cursor',\n    required: false,\n    type: String,\n    description: 'Cursor para a próxima página (ID do último item da página anterior)',\n    example: '550e8400-e29b-41d4-a716-446655440000',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Quantidade de itens por página',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'search',\n    required: false,\n    type: String,\n    description: 'Busca por nome, CPF ou NIS',\n    example: 'João',\n  })\n  @ApiQuery({\n    name: 'bairro',\n    required: false,\n    type: String,\n    description: 'Filtrar por bairro',\n    example: 'Centro',\n  })\n  @ApiQuery({\n    name: 'orderBy',\n    required: false,\n    type: String,\n    description: 'Campo para ordenação',\n    example: 'created_at',\n  })\n  @ApiQuery({\n    name: 'orderDirection',\n    required: false,\n    enum: ['ASC', 'DESC'],\n    description: 'Direção da ordenação',\n    example: 'DESC',\n  })\n  async findByCursor(\n    @Query('cursor') cursor?: string,\n    @Query('limit') limit = 10,\n    @Query('search') search?: string,\n    @Query('bairro') bairro?: string,\n    @Query('orderBy') orderBy?: string,\n    @Query('orderDirection') orderDirection?: 'ASC' | 'DESC',\n  ) {\n    return { data: [], message: 'Endpoint desativado temporariamente para diagnóstico' };\n    // Código original comentado para permitir compilação\n    /*return this.cidadaoService.findByCursor({\n      cursor,\n      limit,\n      search,\n      bairro,\n      unidadeId: req?.user?.unidade_id,\n      orderBy,\n      orderDirection,\n    });*/\n  }\n\n  /**\n   * Busca unificada de cidadão por ID, CPF, NIS, telefone ou nome\n   */\n  @Get('busca')\n  @RequiresPermission({\n    permissionName: 'cidadao.visualizar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'cidadao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Buscar cidadão',\n    description: 'Busca um cidadão por ID, CPF, NIS, telefone ou nome. Permite apenas um parâmetro por vez.',\n  })\n  @ApiQuery({\n    name: 'id',\n    required: false,\n    type: String,\n    description: 'ID do cidadão (UUID)',\n    example: '550e8400-e29b-41d4-a716-446655440000',\n  })\n  @ApiQuery({\n    name: 'cpf',\n    required: false,\n    type: String,\n    description: 'CPF do cidadão (com ou sem formatação)',\n    example: '12345678901',\n  })\n  @ApiQuery({\n    name: 'nis',\n    required: false,\n    type: String,\n    description: 'NIS do cidadão',\n    example: '12345678901',\n  })\n  @ApiQuery({\n    name: 'telefone',\n    required: false,\n    type: String,\n    description: 'Telefone do cidadão (com ou sem formatação)',\n    example: '11987654321',\n  })\n  @ApiQuery({\n    name: 'nome',\n    required: false,\n    type: String,\n    description: 'Nome do cidadão (busca parcial)',\n    example: 'João Silva',\n  })\n  @ApiQuery({\n    name: 'includeRelations',\n    required: false,\n    type: Boolean,\n    description: 'Incluir relacionamentos (composição familiar, etc.)',\n    example: false,\n  })\n  @ApiOkResponse({\n    description: 'Cidadão(s) encontrado(s) com sucesso',\n    schema: {\n      oneOf: [\n        { $ref: '#/components/schemas/CidadaoResponseDto' },\n        {\n          type: 'array',\n          items: { $ref: '#/components/schemas/CidadaoResponseDto' },\n        },\n      ],\n    },\n  })\n  @ApiBadRequestResponse({\n    description: 'Parâmetros de busca inválidos',\n    type: ApiErrorResponse,\n    schema: {\n      example: {\n        statusCode: 400,\n        message: 'Forneça apenas um parâmetro de busca por vez',\n        error: 'Bad Request',\n      },\n    },\n  })\n  @ApiNotFoundResponse({\n    description: 'Cidadão não encontrado',\n    type: ApiErrorResponse,\n  })\n  async buscarCidadao(\n    @Query() query: BuscaCidadaoDto,\n  ): Promise<CidadaoResponseDto | CidadaoResponseDto[]> {\n    return this.cidadaoService.buscarCidadao(query);\n  }\n  \n\n\n  /**\n   * Obtém detalhes de um cidadão específico\n   */\n  @Get(':id')\n  @RequiresPermission({\n    permissionName: 'cidadao.visualizar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'cidadao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Obter detalhes de um cidadão',\n    description: 'Retorna os detalhes completos de um cidadão pelo seu ID.',\n  })\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'ID do cidadão',\n    example: '550e8400-e29b-41d4-a716-446655440000',\n  })\n  @ApiOkResponse({\n    description: 'Cidadão encontrado com sucesso',\n    type: CidadaoResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão não encontrado',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'ID inválido',\n    type: ApiErrorResponse,\n  })\n  async findOne(\n    @Param('id', new ParseUUIDPipe({ version: '4' })) id: string,\n  ): Promise<CidadaoResponseDto> {\n    return this.cidadaoService.findById(id, false); // Não carregar relacionamentos por padrão para melhor performance\n  }\n\n  /**\n   * Cria um novo cidadão\n   */\n  @Post()\n  @RequiresPermission({\n    permissionName: 'cidadao.criar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'user.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Criar cidadão',\n    description: 'Cadastra um novo cidadão no sistema.',\n    requestBody: {\n      description: 'Dados do cidadão a ser criado',\n      required: true,\n      content: {\n        'application/json': {\n          schema: {\n            $ref: '#/components/schemas/CreateCidadaoDto',\n          },\n          examples: {\n            'cidadao-completo': {\n              summary: 'Cidadão com dados completos',\n              description: 'Exemplo de criação de cidadão com todos os dados preenchidos',\n              value: {\n                nome: 'Maria da Silva Santos',\n                cpf: '123.456.789-00',\n                rg: '1234567',\n                prontuario_suas: 'SUAS1234567',\n                naturalidade: 'Natal',\n                data_nascimento: '1985-03-15',\n                sexo: 'FEMININO',\n                estado_civil: 'SOLTEIRA',\n                nis: '12345678901',\n                telefone: '(84) 99999-9999',\n                email: 'maria.silva@email.com',\n                endereco: {\n                  logradouro: 'Rua das Flores',\n                  numero: '123',\n                  complemento: 'Apto 101',\n                  bairro: 'Centro',\n                  cidade: 'Natal',\n                  estado: 'RN',\n                  cep: '59000-000',\n                  ponto_referencia: 'Próximo ao Corpo de Bombeiros',\n                  tempo_de_residencia: 2\n                },\n                papeis: [{\n                  tipo_papel: 'requerente',\n                  metadados: {\n                    grau_parentesco: 'Responsável'\n                  }\n                }]\n              }\n            },\n            'cidadao-minimo': {\n              summary: 'Cidadão com dados mínimos',\n              description: 'Exemplo de criação de cidadão apenas com campos obrigatórios',\n              value: {\n                nome: 'João Santos',\n                cpf: '987.654.321-00',\n                rg: '7654321',\n                prontuario_suas: 'SUAS7654321',\n                naturalidade: 'Natal',\n                data_nascimento: '1990-07-20',\n                sexo: 'MASCULINO',\n                estado_civil: 'SOLTEIRO',\n                nis: '10987654321',\n                telefone: '(84) 88888-8888',\n                endereco: {\n                  logradouro: 'Rua Principal',\n                  numero: '456',\n                  bairro: 'Cidade Nova',\n                  cidade: 'Natal',\n                  estado: 'RN',\n                  cep: '59100-000',\n                  tempo_de_residencia: 5\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  })\n  @ApiOkResponse({\n    description: 'Cidadão criado com sucesso',\n    type: CidadaoResponseDto,\n  })\n  @ApiBadRequestResponse({\n    description: 'Dados inválidos fornecidos',\n    type: ApiErrorResponse,\n    schema: {\n      example: {\n        statusCode: 400,\n        message: 'CPF inválido',\n        error: 'Bad Request',\n      },\n    },\n  })\n  @ApiConflictResponse({\n    description: 'Conflito - CPF ou NIS já cadastrado',\n    type: ApiErrorResponse,\n    schema: {\n      example: {\n        statusCode: 409,\n        message: 'Já existe um cidadão cadastrado com este CPF',\n        error: 'Conflict',\n      },\n    },\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Cidadão criado com sucesso',\n    type: CidadaoResponseDto,\n  })\n  async create(\n    @Body() createCidadaoDto: CreateCidadaoDto,\n    @Request() req,\n  ): Promise<CidadaoResponseDto> {\n    const startTime = Date.now();\n\n    try {\n      const result = await this.cidadaoService.create(\n        createCidadaoDto,\n        req?.user?.id,\n        req?.user?.unidade_id,\n      );\n      \n      const duration = Date.now() - startTime;\n      this.logger.log(`✅ Cidadão criado com sucesso em ${duration}ms`, {\n        cidadaoId: result.id,\n        duration\n      });\n      \n      return result;\n    } catch (error) {\n      const duration = Date.now() - startTime;\n      this.logger.error(`❌ Erro ao criar cidadão após ${duration}ms:`, {\n        error: error.message,\n        duration\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Atualiza um cidadão existente\n   */\n  @Put(':id')\n  @RequiresPermission({\n    permissionName: 'cidadao.editar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'cidadao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Atualizar cidadão existente',\n    description: 'Atualiza os dados de um cidadão existente.',\n  })\n  @ApiParam({\n    name: 'id',\n    required: true,\n    description: 'ID do cidadão a ser atualizado',\n    example: '550e8400-e29b-41d4-a716-446655440000',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Cidadão atualizado com sucesso',\n    type: CidadaoResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão não encontrado',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 409,\n    description: 'CPF ou NIS já em uso',\n    type: ApiErrorResponse,\n  })\n  async update(\n    @Param('id', new ParseUUIDPipe({ version: '4' })) id: string,\n    @Body() updateCidadaoDto: UpdateCidadaoDto,\n    @Request() req,\n  ): Promise<any> {\n    // Inicia medição de tempo para performance\n    const startTime = Date.now();\n    const requestId = `UPDATE-${id.substring(0, 8)}-${Date.now()}`;\n    this.logger.log(`[${requestId}] Início de processamento de atualização de cidadão`);\n    \n    try {\n      // Restaurando o código original com monitoramento de performance\n      const result = await this.cidadaoService.update(id, updateCidadaoDto, req.user.id);\n      \n      // Registra tempo total da operação para monitoramento\n      const totalTime = Date.now() - startTime;\n      if (totalTime > 500) {\n        this.logger.warn(`[${requestId}] Operação lenta (update): ${totalTime}ms`);\n      } else {\n        this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);\n      }\n      \n      return result;\n    } catch (error) {\n      // Registra erro para diagnóstico\n      const totalTime = Date.now() - startTime;\n      this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Busca um cidadão pelo CPF\n   * @param cpf CPF do cidadão\n   * @returns Dados do cidadão encontrado\n   */\n  @Get('cpf/:cpf')\n  @RequiresPermission({ permissionName: 'cidadao.buscar.cpf' })\n  @ApiOperation({\n    summary: 'Buscar cidadão por CPF',\n    description: 'Busca um cidadão pelo CPF, com ou sem formatação',\n  })\n  @ApiParam({\n    name: 'cpf',\n    type: String,\n    description: 'CPF do cidadão (com ou sem formatação)',\n    example: '123.456.789-00',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Cidadão encontrado',\n    type: CidadaoResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'CPF inválido',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão não encontrado',\n    type: ApiErrorResponse,\n  })\n  async findByCpf(@Param('cpf') cpf: string): Promise<CidadaoResponseDto> {\n    // Inicia medição de tempo para performance\n    const startTime = Date.now();\n    const requestId = `CPF-${cpf.substring(Math.max(0, cpf.length - 4))}-${Date.now()}`;\n    this.logger.log(`[${requestId}] Início de processamento da requisição CPF`);\n    \n    try {\n      // Chama o serviço otimizado para buscar por CPF\n      const result = await this.cidadaoService.findByCpf(cpf, true);\n      \n      // Registra tempo total da operação para monitoramento\n      const totalTime = Date.now() - startTime;\n      if (totalTime > 500) {\n        this.logger.warn(`[${requestId}] Operação lenta: ${totalTime}ms`);\n      } else {\n        this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);\n      }\n      \n      return result;\n    } catch (error) {\n      // Registra erro para diagnóstico\n      const totalTime = Date.now() - startTime;\n      this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Busca cidadão por NIS\n   */\n  @Get('nis/:nis')\n  @RequiresPermission({ permissionName: 'cidadao.buscar.nis' })\n  @ApiOperation({\n    summary: 'Buscar cidadão por NIS',\n    description: 'Busca um cidadão pelo número do NIS (PIS/PASEP).',\n  })\n  @ApiParam({\n    name: 'nis',\n    required: true,\n    description: 'Número do NIS (PIS/PASEP)',\n    example: '12345678901',\n  })\n  @ApiOkResponse({\n    description: 'Cidadão encontrado com sucesso',\n    type: CidadaoResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'NIS inválido',\n    type: ApiErrorResponse,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Cidadão não encontrado',\n    type: ApiErrorResponse,\n  })\n  async findByNis(@Param('nis') nis: string): Promise<CidadaoResponseDto> {\n    // Inicia medição de tempo para performance\n    const startTime = Date.now();\n    const requestId = `NIS-${nis.substring(Math.max(0, nis.length - 4))}-${Date.now()}`;\n    this.logger.log(`[${requestId}] Início de processamento da requisição NIS`);\n    \n    try {\n      // Chama o serviço otimizado para buscar por NIS\n      const result = await this.cidadaoService.findByNis(nis, true);\n      \n      // Registra tempo total da operação para monitoramento\n      const totalTime = Date.now() - startTime;\n      if (totalTime > 500) {\n        this.logger.warn(`[${requestId}] Operação lenta: ${totalTime}ms`);\n      } else {\n        this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);\n      }\n      \n      return result;\n    } catch (error) {\n      // Registra erro para diagnóstico\n      const totalTime = Date.now() - startTime;\n      this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Obtém histórico de solicitações de um cidadão\n   */\n  @Get(':id/solicitacao')\n  @ApiOperation({ summary: 'Histórico de solicitações' })\n  @ApiResponse({ status: 200, description: 'Histórico retornado com sucesso' })\n  @ApiResponse({ status: 404, description: 'Cidadão não encontrado' })\n  @RequiresPermission(\n    {\n      permissionName: 'cidadao.visualizar',\n      scopeType: ScopeType.UNIT,\n      scopeIdExpression: 'cidadao.unidadeId',\n    },\n    { permissionName: 'solicitacao.listar' }\n  )\n  async findSolicitacoes(@Param('id') id: string) {\n    return this.cidadaoService.findSolicitacoesByCidadaoId(id);\n  }\n\n  /**\n   * Adiciona membro à composição familiar\n   */\n  @Post(':id/composicao')\n  @ApiOperation({ summary: 'Adicionar membro à composição familiar' })\n  @ApiResponse({ status: 201, description: 'Membro adicionado com sucesso' })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  @ApiResponse({ status: 404, description: 'Cidadão não encontrado' })\n  @RequiresPermission({\n    permissionName: 'cidadao.editar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'cidadao.unidadeId',\n  })\n  async addComposicaoFamiliar(\n    @Param('id') id: string,\n    @Body() createComposicaoFamiliarDto: CreateComposicaoFamiliarDto,\n    @Request() req,\n  ) {\n    // Inicia medição de tempo para performance\n    const startTime = Date.now();\n    const requestId = `COMP-${id.substring(0, 8)}-${Date.now()}`;\n    this.logger.log(`[${requestId}] Início de processamento de adição na composição familiar`);\n    \n    try {\n      // Restaurando o código original com monitoramento de performance\n      const result = await this.cidadaoService.addComposicaoFamiliar(\n        id,\n        createComposicaoFamiliarDto,\n        req?.user?.id,\n      );\n      \n      // Registra tempo total da operação para monitoramento\n      const totalTime = Date.now() - startTime;\n      if (totalTime > 500) {\n        this.logger.warn(`[${requestId}] Operação lenta (addComposicaoFamiliar): ${totalTime}ms`);\n      } else {\n        this.logger.log(`[${requestId}] Operação concluída em ${totalTime}ms`);\n      }\n      \n      return result;\n    } catch (error) {\n      // Registra erro para diagnóstico\n      const totalTime = Date.now() - startTime;\n      this.logger.error(`[${requestId}] Erro em ${totalTime}ms: ${error.message}`);\n      throw error;\n    }\n  }\n}\n"],"version":3}