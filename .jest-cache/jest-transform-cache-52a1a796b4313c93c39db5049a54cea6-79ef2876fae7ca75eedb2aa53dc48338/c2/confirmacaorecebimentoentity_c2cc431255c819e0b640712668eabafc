34f0bc6362e1baa68f63dfde17f12a60
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmacaoRecebimento = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const pagamento_entity_1 = require("./pagamento.entity");
const usuario_entity_1 = require("./usuario.entity");
const metodo_confirmacao_enum_1 = require("../enums/metodo-confirmacao.enum");
const cidadao_entity_1 = require("./cidadao.entity");
/**
 * Entidade que representa uma confirmação de recebimento de pagamento.
 *
 * Esta entidade armazena informações sobre as confirmações de recebimento
 * dos benefícios pelos beneficiários, incluindo método de confirmação e dados do destinatário.
 *
 * @author Equipe PGBen
 */
let ConfirmacaoRecebimento = class ConfirmacaoRecebimento {
    /**
     * Identificador único da confirmação
     */
    id;
    /**
     * Referência ao pagamento confirmado
     */
    pagamento_id;
    /**
     * Data em que a confirmação foi registrada
     */
    data_confirmacao;
    /**
     * Método utilizado para confirmar o recebimento
     */
    metodo_confirmacao;
    /**
     * Referência ao usuário (técnico ou beneficiário) que registrou a confirmação
     */
    confirmado_por;
    /**
     * Referência ao cidadão que recebeu o benefício, se diferente do beneficiário original
     */
    destinatario_id;
    /**
     * Observações adicionais sobre a confirmação
     */
    observacoes;
    /**
     * Data de criação do registro
     */
    created_at;
    /**
     * Data da última atualização do registro
     */
    updated_at;
    /**
     * Relacionamento com a entidade Pagamento
     */
    pagamento;
    /**
     * Relacionamentos com outras entidades serão implementados após a criação das entidades relacionadas
     */
    responsavel_confirmacao;
    destinatario;
};
exports.ConfirmacaoRecebimento = ConfirmacaoRecebimento;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], ConfirmacaoRecebimento.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'pagamento_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do pagamento é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do pagamento deve ser um UUID válido' }),
    __metadata("design:type", String)
], ConfirmacaoRecebimento.prototype, "pagamento_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'data_confirmacao', type: 'timestamp' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Data de confirmação é obrigatória' }),
    __metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], ConfirmacaoRecebimento.prototype, "data_confirmacao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        name: 'metodo_confirmacao',
        type: 'enum',
        enum: metodo_confirmacao_enum_1.MetodoConfirmacaoEnum,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Método de confirmação é obrigatório' }),
    (0, class_validator_1.IsEnum)(metodo_confirmacao_enum_1.MetodoConfirmacaoEnum, { message: 'Método de confirmação inválido' }),
    __metadata("design:type", typeof (_b = typeof metodo_confirmacao_enum_1.MetodoConfirmacaoEnum !== "undefined" && metodo_confirmacao_enum_1.MetodoConfirmacaoEnum) === "function" ? _b : Object)
], ConfirmacaoRecebimento.prototype, "metodo_confirmacao", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'confirmado_por' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do usuário que confirmou é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário deve ser um UUID válido' }),
    __metadata("design:type", String)
], ConfirmacaoRecebimento.prototype, "confirmado_por", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'destinatario_id', nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do destinatário deve ser um UUID válido' }),
    __metadata("design:type", String)
], ConfirmacaoRecebimento.prototype, "destinatario_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Observações devem ser uma string' }),
    (0, class_validator_1.MaxLength)(1000, {
        message: 'Observações devem ter no máximo 1000 caracteres',
    }),
    __metadata("design:type", String)
], ConfirmacaoRecebimento.prototype, "observacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], ConfirmacaoRecebimento.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], ConfirmacaoRecebimento.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => pagamento_entity_1.Pagamento, (pagamento) => pagamento.id),
    (0, typeorm_1.JoinColumn)({ name: 'pagamento_id' }),
    __metadata("design:type", typeof (_e = typeof pagamento_entity_1.Pagamento !== "undefined" && pagamento_entity_1.Pagamento) === "function" ? _e : Object)
], ConfirmacaoRecebimento.prototype, "pagamento", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario),
    (0, typeorm_1.JoinColumn)({ name: 'confirmado_por' }),
    (0, typeorm_1.JoinColumn)({ name: 'confirmado_por' }),
    __metadata("design:type", typeof (_f = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _f : Object)
], ConfirmacaoRecebimento.prototype, "responsavel_confirmacao", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => cidadao_entity_1.Cidadao),
    (0, typeorm_1.JoinColumn)({ name: 'destinatario_id' }),
    __metadata("design:type", typeof (_g = typeof cidadao_entity_1.Cidadao !== "undefined" && cidadao_entity_1.Cidadao) === "function" ? _g : Object)
], ConfirmacaoRecebimento.prototype, "destinatario", void 0);
exports.ConfirmacaoRecebimento = ConfirmacaoRecebimento = __decorate([
    (0, typeorm_1.Entity)('confirmacao_recebimento')
], ConfirmacaoRecebimento);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,