5f2ecb3d5a3e68b3b3dd4afc2b84f8ab
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const request = __importStar(require("supertest"));
const app_module_1 = require("../../src/app.module");
const typeorm_1 = require("@nestjs/typeorm");
const log_auditoria_entity_1 = require("../../src/modules/auditoria/entities/log-auditoria.entity");
const tipo_operacao_enum_1 = require("../../src/modules/auditoria/enums/tipo-operacao.enum");
const jwt_1 = require("@nestjs/jwt");
describe('Auditoria (Integração)', () => {
    let app;
    let logAuditoriaRepository;
    let jwtService;
    let authToken;
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [app_module_1.AppModule],
        }).compile();
        app = moduleFixture.createNestApplication();
        await app.init();
        logAuditoriaRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria));
        jwtService = moduleFixture.get(jwt_1.JwtService);
        // Gerar token de autenticação para testes
        authToken = jwtService.sign({
            id: 'test-user-id',
            nome: 'Usuário de Teste',
            email: 'teste@exemplo.com',
            roles: ['admin'],
        });
    });
    beforeEach(async () => {
        // Limpar logs de auditoria antes de cada teste
        await logAuditoriaRepository.clear();
    });
    afterAll(async () => {
        await app.close();
    });
    describe('Auditoria de operações CRUD', () => {
        it('deve registrar log ao criar um documento', async () => {
            // Arrange
            const documentoDto = {
                nome: 'Documento de Teste',
                tipo: 'PDF',
                solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',
            };
            // Act
            await request(app.getHttpServer())
                .post('/api/documentos')
                .set('Authorization', `Bearer ${authToken}`)
                .send(documentoDto)
                .expect(201);
            // Assert
            const logs = await logAuditoriaRepository.find();
            expect(logs).toHaveLength(1);
            expect(logs[0].tipo_operacao).toBe(tipo_operacao_enum_1.TipoOperacao.CREATE);
            expect(logs[0].entidade_afetada).toBe('documentos');
            expect(logs[0].usuario_id).toBe('test-user-id');
            expect(logs[0].dados_novos).toEqual(expect.objectContaining(documentoDto));
        });
        it('deve registrar log ao consultar um documento', async () => {
            // Act
            await request(app.getHttpServer())
                .get('/api/documentos/documento-123')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            const logs = await logAuditoriaRepository.find();
            expect(logs).toHaveLength(1);
            expect(logs[0].tipo_operacao).toBe(tipo_operacao_enum_1.TipoOperacao.READ);
            expect(logs[0].entidade_afetada).toBe('documentos');
            expect(logs[0].entidade_id).toBe('documento-123');
            expect(logs[0].usuario_id).toBe('test-user-id');
        });
        it('deve registrar log ao atualizar um documento', async () => {
            // Arrange
            const documentoDto = {
                nome: 'Documento Atualizado',
                tipo: 'DOCX',
            };
            // Act
            await request(app.getHttpServer())
                .put('/api/documentos/documento-123')
                .set('Authorization', `Bearer ${authToken}`)
                .send(documentoDto)
                .expect(200);
            // Assert
            const logs = await logAuditoriaRepository.find();
            expect(logs).toHaveLength(1);
            expect(logs[0].tipo_operacao).toBe(tipo_operacao_enum_1.TipoOperacao.UPDATE);
            expect(logs[0].entidade_afetada).toBe('documentos');
            expect(logs[0].entidade_id).toBe('documento-123');
            expect(logs[0].usuario_id).toBe('test-user-id');
            expect(logs[0].dados_novos).toEqual(expect.objectContaining(documentoDto));
        });
        it('deve registrar log ao excluir um documento', async () => {
            // Act
            await request(app.getHttpServer())
                .delete('/api/documentos/documento-123')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            const logs = await logAuditoriaRepository.find();
            expect(logs).toHaveLength(1);
            expect(logs[0].tipo_operacao).toBe(tipo_operacao_enum_1.TipoOperacao.DELETE);
            expect(logs[0].entidade_afetada).toBe('documentos');
            expect(logs[0].entidade_id).toBe('documento-123');
            expect(logs[0].usuario_id).toBe('test-user-id');
        });
    });
    describe('API de Auditoria', () => {
        it('deve permitir consulta de logs de auditoria', async () => {
            // Arrange
            const log1 = logAuditoriaRepository.create({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-1',
                descricao: 'Criação de documento',
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            });
            const log2 = logAuditoriaRepository.create({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-1',
                descricao: 'Atualização de documento',
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            });
            await logAuditoriaRepository.save([log1, log2]);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ entidade_afetada: 'documentos' })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(2);
            expect(response.body.total).toBe(2);
        });
        it('deve permitir consulta de logs por tipo de operação', async () => {
            // Arrange
            const log1 = logAuditoriaRepository.create({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-1',
                descricao: 'Criação de documento',
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            });
            const log2 = logAuditoriaRepository.create({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-1',
                descricao: 'Atualização de documento',
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            });
            await logAuditoriaRepository.save([log1, log2]);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(1);
            expect(response.body.data[0].tipo_operacao).toBe(tipo_operacao_enum_1.TipoOperacao.CREATE);
        });
        it('deve permitir geração de relatório de auditoria', async () => {
            // Arrange
            const log1 = logAuditoriaRepository.create({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-1',
                descricao: 'Criação de documento',
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            });
            const log2 = logAuditoriaRepository.create({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
                entidade_afetada: 'documentos',
                entidade_id: 'doc-1',
                descricao: 'Atualização de documento',
                usuario_id: 'test-user-id',
                ip_origem: '127.0.0.1',
            });
            await logAuditoriaRepository.save([log1, log2]);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/auditoria/relatorio')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ formato: 'json' })
                .expect(200);
            // Assert
            expect(response.body).toHaveLength(2);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,