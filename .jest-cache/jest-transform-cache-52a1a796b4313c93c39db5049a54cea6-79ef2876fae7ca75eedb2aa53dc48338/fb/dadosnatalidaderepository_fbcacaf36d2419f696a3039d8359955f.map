{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-natalidade.repository.ts","mappings":";;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,qCAAiD;AACjD,uFAA4E;AAE5E;;;GAGG;AAEI,IAAM,yBAAyB,GAA/B,MAAM,yBAA0B,SAAQ,oBAA2B;IACpD;IAApB,YAAoB,UAAsB;QACxC,KAAK,CAAC,yCAAe,EAAE,UAAU,CAAC,mBAAmB,EAAE,CAAC,CAAC;QADvC,eAAU,GAAV,UAAU,CAAY;IAE1C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,8BAA8B,CAClC,aAAqB;QAErB,OAAO,IAAI,CAAC,OAAO,CAAC;YAClB,KAAK,EAAE,EAAE,cAAc,EAAE,aAAa,EAAE;YACxC,SAAS,EAAE;gBACT,aAAa;gBACb,qBAAqB;gBACrB,4BAA4B;aAC7B;SACF,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,uBAAuB,CAC3B,UAAgB,EAChB,OAAa;QAEb,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aACpC,iBAAiB,CAAC,mBAAmB,EAAE,aAAa,CAAC;aACrD,iBAAiB,CAAC,qBAAqB,EAAE,SAAS,CAAC;aACnD,KAAK,CAAC,wDAAwD,EAAE;YAC/D,UAAU;YACV,OAAO;SACR,CAAC;aACD,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC;aACxC,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,SAAiB;QACrC,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aACpC,iBAAiB,CAAC,mBAAmB,EAAE,aAAa,CAAC;aACrD,iBAAiB,CAAC,qBAAqB,EAAE,SAAS,CAAC;aACnD,KAAK,CAAC,+BAA+B,EAAE,EAAE,SAAS,EAAE,CAAC;aACrD,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC;aACnC,OAAO,EAAE,CAAC;IACf,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aACpC,MAAM,CAAC,2BAA2B,EAAE,UAAU,CAAC;aAC/C,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC;aAC9B,OAAO,CAAC,2BAA2B,CAAC;aACpC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;aACxB,UAAU,EAAE,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe;QAMnB,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;QAE5C,iCAAiC;QACjC,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aAC9D,MAAM,CAAC,kBAAkB,EAAE,MAAM,CAAC;aAClC,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC;aACnC,OAAO,CAAC,kBAAkB,CAAC;aAC3B,UAAU,EAAE,CAAC;QAEhB,MAAM,YAAY,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YAC3D,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC3C,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,4BAA4B;QAC5B,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aAC7D,MAAM,CAAC,2BAA2B,EAAE,UAAU,CAAC;aAC/C,SAAS,CAAC,UAAU,EAAE,YAAY,CAAC;aACnC,OAAO,CAAC,2BAA2B,CAAC;aACpC,UAAU,EAAE,CAAC;QAEhB,MAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACzD,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/C,OAAO,GAAG,CAAC;QACb,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,6BAA6B;QAC7B,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aAC5D,MAAM,CAAC,8BAA8B,EAAE,OAAO,CAAC;aAC/C,KAAK,CAAC,qCAAqC,CAAC;aAC5C,SAAS,EAAE,CAAC;QAEf,MAAM,qBAAqB,GAAG,UAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEtE,OAAO;YACL,gBAAgB;YAChB,YAAY;YACZ,WAAW;YACX,qBAAqB;SACtB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CACxB,QAAgB,EAChB,cAAoB,EACpB,SAAkB;QAElB,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aAC3C,iBAAiB,CAAC,mBAAmB,EAAE,aAAa,CAAC;aACrD,KAAK,CAAC,oDAAoD,EAAE,EAAE,QAAQ,EAAE,CAAC;aACzE,QAAQ,CAAC,yCAAyC,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QAE3E,IAAI,SAAS,EAAE,CAAC;YACd,KAAK,CAAC,QAAQ,CAAC,wBAAwB,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CAAC,OASrB;QACC,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;aAC3C,iBAAiB,CAAC,mBAAmB,EAAE,aAAa,CAAC;aACrD,iBAAiB,CAAC,qBAAqB,EAAE,SAAS,CAAC,CAAC;QAEvD,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1C,KAAK,CAAC,QAAQ,CAAC,wDAAwD,EAAE;gBACvE,UAAU,EAAE,OAAO,CAAC,UAAU;gBAC9B,OAAO,EAAE,OAAO,CAAC,OAAO;aACzB,CAAC,CAAC;QACL,CAAC;QAED,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YACtB,KAAK,CAAC,QAAQ,CAAC,+BAA+B,EAAE;gBAC9C,SAAS,EAAE,OAAO,CAAC,SAAS;aAC7B,CAAC,CAAC;QACL,CAAC;QAED,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;YACrB,KAAK,CAAC,QAAQ,CAAC,wDAAwD,EAAE;gBACvE,QAAQ,EAAE,IAAI,OAAO,CAAC,QAAQ,GAAG;aAClC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,OAAO,CAAC,mBAAmB,EAAE,CAAC;YAChC,KAAK,CAAC,QAAQ,CAAC,sCAAsC,EAAE;gBACrD,QAAQ,EAAE,OAAO,CAAC,mBAAmB;aACtC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,OAAO,CAAC,mBAAmB,EAAE,CAAC;YAChC,KAAK,CAAC,QAAQ,CAAC,sCAAsC,EAAE;gBACrD,QAAQ,EAAE,OAAO,CAAC,mBAAmB;aACtC,CAAC,CAAC;QACL,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC;QAErC,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YAClC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACrE,CAAC;QAED,KAAK,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;QAE/C,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;QAEnC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACzB,CAAC;CACF,CAAA;AAlMY,8DAAyB;oCAAzB,yBAAyB;IADrC,IAAA,mBAAU,GAAE;yDAEqB,oBAAU,oBAAV,oBAAU;GAD/B,yBAAyB,CAkMrC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-natalidade.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { DadosNatalidade } from '../../../entities/dados-natalidade.entity';\n\n/**\n * Repositório customizado para DadosNatalidade\n * Extende o repositório base do TypeORM com métodos específicos\n */\n@Injectable()\nexport class DadosNatalidadeRepository extends Repository<DadosNatalidade> {\n  constructor(private dataSource: DataSource) {\n    super(DadosNatalidade, dataSource.createEntityManager());\n  }\n\n  /**\n   * Buscar dados de natalidade por solicitação com relacionamentos\n   */\n  async findBySolicitacaoWithRelations(\n    solicitacaoId: string,\n  ): Promise<DadosNatalidade | null> {\n    return this.findOne({\n      where: { solicitacao_id: solicitacaoId },\n      relations: [\n        'solicitacao',\n        'solicitacao.cidadao',\n        'solicitacao.tipo_beneficio',\n      ],\n    });\n  }\n\n  /**\n   * Buscar dados de natalidade por período de nascimento\n   */\n  async findByPeriodoNascimento(\n    dataInicio: Date,\n    dataFim: Date,\n  ): Promise<DadosNatalidade[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.data_nascimento BETWEEN :dataInicio AND :dataFim', {\n        dataInicio,\n        dataFim,\n      })\n      .orderBy('dados.data_nascimento', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados de natalidade por tipo de parto\n   */\n  async findByTipoParto(tipoParto: string): Promise<DadosNatalidade[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.tipo_parto = :tipoParto', { tipoParto })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Contar solicitações por hospital\n   */\n  async countByHospital(): Promise<{ hospital: string; total: number }[]> {\n    return this.createQueryBuilder('dados')\n      .select('dados.hospital_nascimento', 'hospital')\n      .addSelect('COUNT(*)', 'total')\n      .groupBy('dados.hospital_nascimento')\n      .orderBy('total', 'DESC')\n      .getRawMany();\n  }\n\n  /**\n   * Buscar estatísticas de natalidade\n   */\n  async getEstatisticas(): Promise<{\n    totalNascimentos: number;\n    porTipoParto: Record<string, number>;\n    porHospital: Record<string, number>;\n    mediaIdadeGestacional: number;\n  }> {\n    const totalNascimentos = await this.count();\n\n    // Estatísticas por tipo de parto\n    const porTipoPartoResult = await this.createQueryBuilder('dados')\n      .select('dados.tipo_parto', 'tipo')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.tipo_parto')\n      .getRawMany();\n\n    const porTipoParto = porTipoPartoResult.reduce((acc, item) => {\n      acc[item.tipo] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por hospital\n    const porHospitalResult = await this.createQueryBuilder('dados')\n      .select('dados.hospital_nascimento', 'hospital')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.hospital_nascimento')\n      .getRawMany();\n\n    const porHospital = porHospitalResult.reduce((acc, item) => {\n      acc[item.hospital] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Média de idade gestacional\n    const mediaIdadeResult = await this.createQueryBuilder('dados')\n      .select('AVG(dados.idade_gestacional)', 'media')\n      .where('dados.idade_gestacional IS NOT NULL')\n      .getRawOne();\n\n    const mediaIdadeGestacional = parseFloat(mediaIdadeResult.media) || 0;\n\n    return {\n      totalNascimentos,\n      porTipoParto,\n      porHospital,\n      mediaIdadeGestacional,\n    };\n  }\n\n  /**\n   * Verificar duplicatas por dados do bebê\n   */\n  async findDuplicatesByBaby(\n    nomeBebe: string,\n    dataNascimento: Date,\n    excludeId?: string,\n  ): Promise<DadosNatalidade[]> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .where('LOWER(dados.nome_completo_bebe) = LOWER(:nomeBebe)', { nomeBebe })\n      .andWhere('dados.data_nascimento = :dataNascimento', { dataNascimento });\n\n    if (excludeId) {\n      query.andWhere('dados.id != :excludeId', { excludeId });\n    }\n\n    return query.getMany();\n  }\n\n  /**\n   * Buscar dados de natalidade com filtros avançados\n   */\n  async findWithFilters(filters: {\n    dataInicio?: Date;\n    dataFim?: Date;\n    tipoParto?: string;\n    hospital?: string;\n    idadeGestacionalMin?: number;\n    idadeGestacionalMax?: number;\n    page?: number;\n    limit?: number;\n  }): Promise<{ data: DadosNatalidade[]; total: number }> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao');\n\n    if (filters.dataInicio && filters.dataFim) {\n      query.andWhere('dados.data_nascimento BETWEEN :dataInicio AND :dataFim', {\n        dataInicio: filters.dataInicio,\n        dataFim: filters.dataFim,\n      });\n    }\n\n    if (filters.tipoParto) {\n      query.andWhere('dados.tipo_parto = :tipoParto', {\n        tipoParto: filters.tipoParto,\n      });\n    }\n\n    if (filters.hospital) {\n      query.andWhere('LOWER(dados.hospital_nascimento) LIKE LOWER(:hospital)', {\n        hospital: `%${filters.hospital}%`,\n      });\n    }\n\n    if (filters.idadeGestacionalMin) {\n      query.andWhere('dados.idade_gestacional >= :idadeMin', {\n        idadeMin: filters.idadeGestacionalMin,\n      });\n    }\n\n    if (filters.idadeGestacionalMax) {\n      query.andWhere('dados.idade_gestacional <= :idadeMax', {\n        idadeMax: filters.idadeGestacionalMax,\n      });\n    }\n\n    const total = await query.getCount();\n\n    if (filters.page && filters.limit) {\n      query.skip((filters.page - 1) * filters.limit).take(filters.limit);\n    }\n\n    query.orderBy('dados.data_nascimento', 'DESC');\n\n    const data = await query.getMany();\n\n    return { data, total };\n  }\n}\n"],"version":3}