9445da0eb172a43bcdff2fb99bef3f3f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const auditoria_queue_service_1 = require("../../../../src/modules/auditoria/services/auditoria-queue.service");
const log_auditoria_entity_1 = require("../../../../src/modules/auditoria/entities/log-auditoria.entity");
const tipo_operacao_enum_1 = require("../../../../src/modules/auditoria/enums/tipo-operacao.enum");
const create_log_auditoria_dto_1 = require("../../../../src/modules/auditoria/dto/create-log-auditoria.dto");
describe('AuditoriaQueueService', () => {
    let service;
    let mockQueue;
    beforeEach(async () => {
        mockQueue = {
            add: jest.fn().mockResolvedValue({ id: 'mock-job-id' }),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auditoria_queue_service_1.AuditoriaQueueService,
                {
                    provide: 'BullQueue_auditoria',
                    useValue: mockQueue,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria),
                    useClass: typeorm_2.Repository,
                },
            ],
        }).compile();
        service = module.get(auditoria_queue_service_1.AuditoriaQueueService);
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
    describe('enfileirarLogAuditoria', () => {
        it('deve enfileirar um log de auditoria com sucesso', async () => {
            const logDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            logDto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.CREATE;
            logDto.entidade_afetada = 'Usuario';
            logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';
            logDto.descricao = 'Criação de novo usuário';
            logDto.ip_origem = '192.168.1.1';
            logDto.usuario_id = 'mock-user-id';
            await service.enfileirarLogAuditoria(logDto);
            expect(mockQueue.add).toHaveBeenCalledWith('registrar-log', logDto, expect.objectContaining({
                attempts: 3,
                backoff: expect.objectContaining({
                    type: 'exponential',
                    delay: 1000,
                }),
            }));
        });
        it('deve lidar com erros ao enfileirar', async () => {
            const logDto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            logDto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.CREATE;
            logDto.entidade_afetada = 'Usuario';
            mockQueue.add.mockRejectedValueOnce(new Error('Erro ao enfileirar'));
            await expect(service.enfileirarLogAuditoria(logDto)).rejects.toThrow('Erro ao enfileirar');
        });
    });
    describe('enfileirarAcessoDadosSensiveis', () => {
        it('deve enfileirar um registro de acesso a dados sensíveis', async () => {
            const usuarioId = 'mock-user-id';
            const entidade = 'Usuario';
            const entidadeId = '123e4567-e89b-12d3-a456-426614174000';
            const dadosSensiveis = ['cpf', 'renda_familiar'];
            const ip = '192.168.1.1';
            const userAgent = 'Mozilla/5.0';
            const endpoint = '/api/v1/usuarios';
            const metodo = 'GET';
            await service.enfileirarAcessoDadosSensiveis(usuarioId, entidade, entidadeId, dadosSensiveis, ip, userAgent, endpoint, metodo);
            expect(mockQueue.add).toHaveBeenCalledWith('registrar-acesso-dados-sensiveis', expect.objectContaining({
                usuario_id: usuarioId,
                entidade_afetada: entidade,
                entidade_id: entidadeId,
                dados_sensiveis_acessados: dadosSensiveis,
                ip_origem: ip,
                user_agent: userAgent,
                endpoint: endpoint,
                metodo_http: metodo,
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
            }), expect.objectContaining({
                attempts: 3,
                backoff: expect.objectContaining({
                    type: 'exponential',
                    delay: 1000,
                }),
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,