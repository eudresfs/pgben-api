7ac18bb57e2f0651bc659b821a6a23d7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosNatalidadeRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const dados_natalidade_entity_1 = require("../../../entities/dados-natalidade.entity");
/**
 * Repositório customizado para DadosNatalidade
 * Extende o repositório base do TypeORM com métodos específicos
 */
let DadosNatalidadeRepository = class DadosNatalidadeRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(dados_natalidade_entity_1.DadosNatalidade, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Buscar dados de natalidade por solicitação com relacionamentos
     */
    async findBySolicitacaoWithRelations(solicitacaoId) {
        return this.findOne({
            where: { solicitacao_id: solicitacaoId },
            relations: [
                'solicitacao',
                'solicitacao.cidadao',
                'solicitacao.tipo_beneficio',
            ],
        });
    }
    /**
     * Buscar dados de natalidade por período de nascimento
     */
    async findByPeriodoNascimento(dataInicio, dataFim) {
        return this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')
            .where('dados.data_nascimento BETWEEN :dataInicio AND :dataFim', {
            dataInicio,
            dataFim,
        })
            .orderBy('dados.data_nascimento', 'DESC')
            .getMany();
    }
    /**
     * Buscar dados de natalidade por tipo de parto
     */
    async findByTipoParto(tipoParto) {
        return this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')
            .where('dados.tipo_parto = :tipoParto', { tipoParto })
            .orderBy('dados.created_at', 'DESC')
            .getMany();
    }
    /**
     * Contar solicitações por hospital
     */
    async countByHospital() {
        return this.createQueryBuilder('dados')
            .select('dados.hospital_nascimento', 'hospital')
            .addSelect('COUNT(*)', 'total')
            .groupBy('dados.hospital_nascimento')
            .orderBy('total', 'DESC')
            .getRawMany();
    }
    /**
     * Buscar estatísticas de natalidade
     */
    async getEstatisticas() {
        const totalNascimentos = await this.count();
        // Estatísticas por tipo de parto
        const porTipoPartoResult = await this.createQueryBuilder('dados')
            .select('dados.tipo_parto', 'tipo')
            .addSelect('COUNT(*)', 'quantidade')
            .groupBy('dados.tipo_parto')
            .getRawMany();
        const porTipoParto = porTipoPartoResult.reduce((acc, item) => {
            acc[item.tipo] = parseInt(item.quantidade);
            return acc;
        }, {});
        // Estatísticas por hospital
        const porHospitalResult = await this.createQueryBuilder('dados')
            .select('dados.hospital_nascimento', 'hospital')
            .addSelect('COUNT(*)', 'quantidade')
            .groupBy('dados.hospital_nascimento')
            .getRawMany();
        const porHospital = porHospitalResult.reduce((acc, item) => {
            acc[item.hospital] = parseInt(item.quantidade);
            return acc;
        }, {});
        // Média de idade gestacional
        const mediaIdadeResult = await this.createQueryBuilder('dados')
            .select('AVG(dados.idade_gestacional)', 'media')
            .where('dados.idade_gestacional IS NOT NULL')
            .getRawOne();
        const mediaIdadeGestacional = parseFloat(mediaIdadeResult.media) || 0;
        return {
            totalNascimentos,
            porTipoParto,
            porHospital,
            mediaIdadeGestacional,
        };
    }
    /**
     * Verificar duplicatas por dados do bebê
     */
    async findDuplicatesByBaby(nomeBebe, dataNascimento, excludeId) {
        const query = this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .where('LOWER(dados.nome_completo_bebe) = LOWER(:nomeBebe)', { nomeBebe })
            .andWhere('dados.data_nascimento = :dataNascimento', { dataNascimento });
        if (excludeId) {
            query.andWhere('dados.id != :excludeId', { excludeId });
        }
        return query.getMany();
    }
    /**
     * Buscar dados de natalidade com filtros avançados
     */
    async findWithFilters(filters) {
        const query = this.createQueryBuilder('dados')
            .leftJoinAndSelect('dados.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.cidadao', 'cidadao');
        if (filters.dataInicio && filters.dataFim) {
            query.andWhere('dados.data_nascimento BETWEEN :dataInicio AND :dataFim', {
                dataInicio: filters.dataInicio,
                dataFim: filters.dataFim,
            });
        }
        if (filters.tipoParto) {
            query.andWhere('dados.tipo_parto = :tipoParto', {
                tipoParto: filters.tipoParto,
            });
        }
        if (filters.hospital) {
            query.andWhere('LOWER(dados.hospital_nascimento) LIKE LOWER(:hospital)', {
                hospital: `%${filters.hospital}%`,
            });
        }
        if (filters.idadeGestacionalMin) {
            query.andWhere('dados.idade_gestacional >= :idadeMin', {
                idadeMin: filters.idadeGestacionalMin,
            });
        }
        if (filters.idadeGestacionalMax) {
            query.andWhere('dados.idade_gestacional <= :idadeMax', {
                idadeMax: filters.idadeGestacionalMax,
            });
        }
        const total = await query.getCount();
        if (filters.page && filters.limit) {
            query.skip((filters.page - 1) * filters.limit).take(filters.limit);
        }
        query.orderBy('dados.data_nascimento', 'DESC');
        const data = await query.getMany();
        return { data, total };
    }
};
exports.DadosNatalidadeRepository = DadosNatalidadeRepository;
exports.DadosNatalidadeRepository = DadosNatalidadeRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], DadosNatalidadeRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,