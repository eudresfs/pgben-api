{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\services\\auditoria-queue.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,6CAAqD;AACrD,qCAAqC;AACrC,gHAA2G;AAC3G,0GAA+F;AAC/F,mGAA0F;AAC1F,6GAAuG;AAGvG,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,OAA8B,CAAC;IACnC,IAAI,SAAc,CAAC;IAEnB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,SAAS,GAAG;YACV,GAAG,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC;SACxD,CAAC;QAEF,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,+CAAqB;gBACrB;oBACE,OAAO,EAAE,qBAAqB;oBAC9B,QAAQ,EAAE,SAAS;iBACpB;gBACD;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,mCAAY,CAAC;oBACzC,QAAQ,EAAE,oBAAU;iBACrB;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAwB,+CAAqB,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,MAAM,GAAG,IAAI,gDAAqB,EAAE,CAAC;YAC3C,MAAM,CAAC,aAAa,GAAG,iCAAY,CAAC,MAAM,CAAC;YAC3C,MAAM,CAAC,gBAAgB,GAAG,SAAS,CAAC;YACpC,MAAM,CAAC,WAAW,GAAG,sCAAsC,CAAC;YAC5D,MAAM,CAAC,SAAS,GAAG,yBAAyB,CAAC;YAC7C,MAAM,CAAC,SAAS,GAAG,aAAa,CAAC;YACjC,MAAM,CAAC,UAAU,GAAG,cAAc,CAAC;YAEnC,MAAM,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;YAE7C,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,oBAAoB,CACxC,eAAe,EACf,MAAM,EACN,MAAM,CAAC,gBAAgB,CAAC;gBACtB,QAAQ,EAAE,CAAC;gBACX,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAC/B,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,MAAM,GAAG,IAAI,gDAAqB,EAAE,CAAC;YAC3C,MAAM,CAAC,aAAa,GAAG,iCAAY,CAAC,MAAM,CAAC;YAC3C,MAAM,CAAC,gBAAgB,GAAG,SAAS,CAAC;YAEpC,SAAS,CAAC,GAAG,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAErE,MAAM,MAAM,CAAC,OAAO,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAClE,oBAAoB,CACrB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;QAC9C,EAAE,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,SAAS,GAAG,cAAc,CAAC;YACjC,MAAM,QAAQ,GAAG,SAAS,CAAC;YAC3B,MAAM,UAAU,GAAG,sCAAsC,CAAC;YAC1D,MAAM,cAAc,GAAG,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;YACjD,MAAM,EAAE,GAAG,aAAa,CAAC;YACzB,MAAM,SAAS,GAAG,aAAa,CAAC;YAChC,MAAM,QAAQ,GAAG,kBAAkB,CAAC;YACpC,MAAM,MAAM,GAAG,KAAK,CAAC;YAErB,MAAM,OAAO,CAAC,8BAA8B,CAC1C,SAAS,EACT,QAAQ,EACR,UAAU,EACV,cAAc,EACd,EAAE,EACF,SAAS,EACT,QAAQ,EACR,MAAM,CACP,CAAC;YAEF,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,oBAAoB,CACxC,kCAAkC,EAClC,MAAM,CAAC,gBAAgB,CAAC;gBACtB,UAAU,EAAE,SAAS;gBACrB,gBAAgB,EAAE,QAAQ;gBAC1B,WAAW,EAAE,UAAU;gBACvB,yBAAyB,EAAE,cAAc;gBACzC,SAAS,EAAE,EAAE;gBACb,UAAU,EAAE,SAAS;gBACrB,QAAQ,EAAE,QAAQ;gBAClB,WAAW,EAAE,MAAM;gBACnB,aAAa,EAAE,iCAAY,CAAC,IAAI;aACjC,CAAC,EACF,MAAM,CAAC,gBAAgB,CAAC;gBACtB,QAAQ,EAAE,CAAC;gBACX,OAAO,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAC/B,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,IAAI;iBACZ,CAAC;aACH,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\services\\auditoria-queue.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { AuditoriaQueueService } from '../../../../src/modules/auditoria/services/auditoria-queue.service';\nimport { LogAuditoria } from '../../../../src/modules/auditoria/entities/log-auditoria.entity';\nimport { TipoOperacao } from '../../../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../../../../src/modules/auditoria/dto/create-log-auditoria.dto';\nimport { InjectQueue } from '@nestjs/bull';\n\ndescribe('AuditoriaQueueService', () => {\n  let service: AuditoriaQueueService;\n  let mockQueue: any;\n\n  beforeEach(async () => {\n    mockQueue = {\n      add: jest.fn().mockResolvedValue({ id: 'mock-job-id' }),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuditoriaQueueService,\n        {\n          provide: 'BullQueue_auditoria',\n          useValue: mockQueue,\n        },\n        {\n          provide: getRepositoryToken(LogAuditoria),\n          useClass: Repository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<AuditoriaQueueService>(AuditoriaQueueService);\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('enfileirarLogAuditoria', () => {\n    it('deve enfileirar um log de auditoria com sucesso', async () => {\n      const logDto = new CreateLogAuditoriaDto();\n      logDto.tipo_operacao = TipoOperacao.CREATE;\n      logDto.entidade_afetada = 'Usuario';\n      logDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';\n      logDto.descricao = 'Criação de novo usuário';\n      logDto.ip_origem = '192.168.1.1';\n      logDto.usuario_id = 'mock-user-id';\n\n      await service.enfileirarLogAuditoria(logDto);\n\n      expect(mockQueue.add).toHaveBeenCalledWith(\n        'registrar-log',\n        logDto,\n        expect.objectContaining({\n          attempts: 3,\n          backoff: expect.objectContaining({\n            type: 'exponential',\n            delay: 1000,\n          }),\n        }),\n      );\n    });\n\n    it('deve lidar com erros ao enfileirar', async () => {\n      const logDto = new CreateLogAuditoriaDto();\n      logDto.tipo_operacao = TipoOperacao.CREATE;\n      logDto.entidade_afetada = 'Usuario';\n\n      mockQueue.add.mockRejectedValueOnce(new Error('Erro ao enfileirar'));\n\n      await expect(service.enfileirarLogAuditoria(logDto)).rejects.toThrow(\n        'Erro ao enfileirar',\n      );\n    });\n  });\n\n  describe('enfileirarAcessoDadosSensiveis', () => {\n    it('deve enfileirar um registro de acesso a dados sensíveis', async () => {\n      const usuarioId = 'mock-user-id';\n      const entidade = 'Usuario';\n      const entidadeId = '123e4567-e89b-12d3-a456-426614174000';\n      const dadosSensiveis = ['cpf', 'renda_familiar'];\n      const ip = '192.168.1.1';\n      const userAgent = 'Mozilla/5.0';\n      const endpoint = '/api/v1/usuarios';\n      const metodo = 'GET';\n\n      await service.enfileirarAcessoDadosSensiveis(\n        usuarioId,\n        entidade,\n        entidadeId,\n        dadosSensiveis,\n        ip,\n        userAgent,\n        endpoint,\n        metodo,\n      );\n\n      expect(mockQueue.add).toHaveBeenCalledWith(\n        'registrar-acesso-dados-sensiveis',\n        expect.objectContaining({\n          usuario_id: usuarioId,\n          entidade_afetada: entidade,\n          entidade_id: entidadeId,\n          dados_sensiveis_acessados: dadosSensiveis,\n          ip_origem: ip,\n          user_agent: userAgent,\n          endpoint: endpoint,\n          metodo_http: metodo,\n          tipo_operacao: TipoOperacao.READ,\n        }),\n        expect.objectContaining({\n          attempts: 3,\n          backoff: expect.objectContaining({\n            type: 'exponential',\n            delay: 1000,\n          }),\n        }),\n      );\n    });\n  });\n});\n"],"version":3}