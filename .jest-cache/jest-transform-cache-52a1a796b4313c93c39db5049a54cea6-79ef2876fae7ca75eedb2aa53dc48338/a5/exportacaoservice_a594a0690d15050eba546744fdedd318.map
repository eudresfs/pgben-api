{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\exportacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\exportacao.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Solicitacao } from '../../../entities/solicitacao.entity';\nimport { TipoBeneficio } from '../../../entities/tipo-beneficio.entity';\n\n/**\n * Serviço de Exportação de Dados\n *\n * Responsável por exportar dados de solicitações de benefícios em diferentes formatos,\n * como CSV, para análise e relatórios.\n */\n@Injectable()\nexport class ExportacaoService {\n  private readonly logger = new Logger(ExportacaoService.name);\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    @InjectRepository(TipoBeneficio)\n    private readonly tipoBeneficioRepository: Repository<TipoBeneficio>,\n  ) {}\n\n  /**\n   * Exporta solicitações de benefício em formato CSV\n   *\n   * @param filtros Filtros para as solicitações a serem exportadas\n   * @returns String em formato CSV\n   */\n  async exportarSolicitacoesCSV(filtros?: any): Promise<string> {\n    try {\n      // Construir query com filtros opcionais\n      const where: any = {};\n\n      if (filtros?.cidadao_id) {\n        where.cidadao_id = filtros.cidadao_id;\n      }\n\n      if (filtros?.tipo_beneficio_id) {\n        where.tipo_beneficio_id = filtros.tipo_beneficio_id;\n      }\n\n      if (filtros?.status) {\n        where.status = filtros.status;\n      }\n\n      if (filtros?.data_inicio && filtros?.data_fim) {\n        where.created_at = {\n          $gte: new Date(filtros.data_inicio),\n          $lte: new Date(filtros.data_fim),\n        };\n      }\n\n      // Buscar solicitações\n      const solicitacoes = await this.solicitacaoRepository.find({\n        where,\n        relations: ['tipo_beneficio'],\n        order: { created_at: 'DESC' },\n      });\n\n      // Transformar dados para CSV\n      const dados = await this.transformarDadosParaCSV(solicitacoes);\n\n      // Definir cabeçalhos padrão\n      const cabecalhosBasicos = [\n        'ID',\n        'ID do Cidadão',\n        'Tipo de Benefício',\n        'Status',\n        'Data da Solicitação',\n        'Última Atualização',\n      ];\n\n      // Obter todos os campos dinâmicos\n      const camposDinamicos = new Set<string>();\n      dados.forEach((item) => {\n        Object.keys(item).forEach((key) => {\n          if (\n            ![\n              'id',\n              'cidadao_id',\n              'tipo_beneficio',\n              'status',\n              'data_solicitacao',\n              'updated_at',\n            ].includes(key)\n          ) {\n            camposDinamicos.add(key);\n          }\n        });\n      });\n\n      // Montar cabeçalho completo\n      const cabecalhoCompleto = [\n        ...cabecalhosBasicos,\n        ...Array.from(camposDinamicos),\n      ];\n\n      // Gerar linha de cabeçalho CSV\n      let csv = cabecalhoCompleto.map(this.escaparCampoCSV).join(',') + '\\n';\n\n      // Gerar linhas de dados\n      dados.forEach((item) => {\n        const linha = [\n          this.escaparCampoCSV(item.id || ''),\n          this.escaparCampoCSV(item.cidadao_id || ''),\n          this.escaparCampoCSV(item.tipo_beneficio || ''),\n          this.escaparCampoCSV(item.status || ''),\n          this.escaparCampoCSV(item.data_solicitacao || ''),\n          this.escaparCampoCSV(item.updated_at || ''),\n        ];\n\n        // Adicionar campos dinâmicos\n        camposDinamicos.forEach((campo) => {\n          linha.push(this.escaparCampoCSV(item[campo] || ''));\n        });\n\n        csv += linha.join(',') + '\\n';\n      });\n\n      return csv;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao exportar solicitações para CSV: ${error.message}`,\n        error.stack,\n      );\n      throw new Error('Erro ao exportar solicitações para CSV');\n    }\n  }\n\n  /**\n   * Transforma dados de solicitações para o formato CSV\n   *\n   * @param solicitacoes Lista de solicitações\n   * @returns Dados formatados para CSV\n   */\n  private async transformarDadosParaCSV(\n    solicitacoes: Solicitacao[],\n  ): Promise<any[]> {\n    return solicitacoes.map((solicitacao) => {\n      // Dados básicos\n      const dadosBasicos = {\n        id: solicitacao.id,\n        cidadao_id: solicitacao.beneficiario_id,\n        tipo_beneficio: solicitacao.tipo_beneficio?.nome || 'Não especificado',\n        status: solicitacao.status,\n        data_solicitacao: this.formatarData(solicitacao.created_at),\n        updated_at: this.formatarData(solicitacao.updated_at),\n      };\n\n      // Adicionar dados dinâmicos\n      const dadosDinamicos = solicitacao.dados_dinamicos || {};\n\n      // Mesclar dados básicos com dados dinâmicos\n      return {\n        ...dadosBasicos,\n        ...this.processarDadosDinamicos(dadosDinamicos),\n      };\n    });\n  }\n\n  /**\n   * Processa dados dinâmicos para exportação\n   *\n   * @param dados Dados dinâmicos\n   * @returns Dados processados\n   */\n  private processarDadosDinamicos(dados: any): any {\n    const resultado = {};\n\n    // Processar cada campo dinâmico\n    Object.keys(dados).forEach((chave) => {\n      const valor = dados[chave];\n\n      // Processar conforme o tipo\n      if (valor === null || valor === undefined) {\n        resultado[chave] = '';\n      } else if (typeof valor === 'object' && valor instanceof Date) {\n        resultado[chave] = this.formatarData(valor);\n      } else if (typeof valor === 'object') {\n        resultado[chave] = JSON.stringify(valor);\n      } else {\n        resultado[chave] = String(valor);\n      }\n    });\n\n    return resultado;\n  }\n\n  /**\n   * Formata data para string no formato DD/MM/YYYY HH:MM:SS\n   *\n   * @param data Data a ser formatada\n   * @returns Data formatada\n   */\n  private formatarData(data: Date): string {\n    if (!data) {\n      return '';\n    }\n\n    const dia = data.getDate().toString().padStart(2, '0');\n    const mes = (data.getMonth() + 1).toString().padStart(2, '0');\n    const ano = data.getFullYear();\n    const hora = data.getHours().toString().padStart(2, '0');\n    const minuto = data.getMinutes().toString().padStart(2, '0');\n    const segundo = data.getSeconds().toString().padStart(2, '0');\n\n    return `${dia}/${mes}/${ano} ${hora}:${minuto}:${segundo}`;\n  }\n\n  /**\n   * Escapa um campo para formato CSV\n   *\n   * @param valor Valor a ser escapado\n   * @returns Valor escapado para CSV\n   */\n  private escaparCampoCSV(valor: any): string {\n    if (valor === null || valor === undefined) {\n      return '';\n    }\n\n    const str = String(valor);\n\n    // Se o valor contém vírgulas, aspas ou quebras de linha, envolvê-lo em aspas duplas\n    if (\n      str.includes(',') ||\n      str.includes('\"') ||\n      str.includes('\\n') ||\n      str.includes('\\r')\n    ) {\n      // Substituir aspas duplas por duas aspas duplas (padrão CSV)\n      return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n    }\n\n    return str;\n  }\n}\n"],"version":3}