7b5f302a5c3d87dc32d0f1602601de55
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SseService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SseService = void 0;
const common_1 = require("@nestjs/common");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
/**
 * Serviço SSE (Server-Sent Events)
 *
 * Responsável por gerenciar conexões SSE e envio de notificações em tempo real.
 * Mantém um mapa de conexões ativas por usuário e fornece métodos para
 * envio de notificações individuais ou em massa.
 */
let SseService = SseService_1 = class SseService {
    isUserConnected(userId) {
        throw new Error('Method not implemented.');
    }
    getUserConnectionCount(userId) {
        throw new Error('Method not implemented.');
    }
    logger = new common_1.Logger(SseService_1.name);
    /** Mapa de conexões ativas: userId -> Map<connectionId, Subject> */
    connections = new Map();
    /** Intervalo de heartbeat em milissegundos (30 segundos) */
    heartbeatInterval = 30000;
    /** Máximo de conexões por usuário */
    maxConnectionsPerUser = 5;
    /**
     * Cria uma nova conexão SSE para o usuário
     * @param userId ID do usuário
     * @param clientInfo Informações do cliente (opcional)
     * @returns Observable de MessageEvent para a conexão SSE
     */
    createConnection(userId, clientInfo) {
        const connectionId = this.generateConnectionId();
        const subject = new rxjs_1.Subject();
        // Inicializa mapa do usuário se não existir
        if (!this.connections.has(userId)) {
            this.connections.set(userId, new Map());
        }
        const userConnections = this.connections.get(userId);
        // Verifica limite de conexões por usuário
        if (userConnections.size >= this.maxConnectionsPerUser) {
            this.logger.warn(`Usuário ${userId} atingiu o limite de ${this.maxConnectionsPerUser} conexões`);
            // Remove a conexão mais antiga
            const oldestConnectionId = userConnections.keys().next().value;
            this.removeConnection(userId, oldestConnectionId);
        }
        userConnections.set(connectionId, subject);
        this.logger.log(`Nova conexão SSE: ${userId}:${connectionId}`);
        if (clientInfo) {
            this.logger.debug(`Cliente conectado: ${clientInfo.userAgent} - IP: ${clientInfo.ip}`);
        }
        // Configura heartbeat
        const heartbeat$ = (0, rxjs_1.interval)(this.heartbeatInterval).pipe((0, operators_1.map)(() => {
            const heartbeatEvent = {
                type: 'heartbeat',
                timestamp: new Date(),
                connectionId
            };
            return {
                data: JSON.stringify(heartbeatEvent)
            };
        }));
        // Combina notificações com heartbeat
        return new rxjs_1.Observable(observer => {
            // Envia evento de conexão estabelecida
            observer.next({
                data: JSON.stringify({
                    type: 'connection_established',
                    connectionId,
                    timestamp: new Date()
                })
            });
            const subscription = subject.asObservable().subscribe(observer);
            const heartbeatSub = heartbeat$.subscribe(observer);
            // Cleanup na desconexão
            return () => {
                subscription.unsubscribe();
                heartbeatSub.unsubscribe();
                this.removeConnection(userId, connectionId);
            };
        });
    }
    /**
     * Envia notificação para usuário específico
     * @param userId ID do usuário destinatário
     * @param notification Dados da notificação
     */
    sendToUser(userId, notification) {
        const userConnections = this.connections.get(userId);
        if (!userConnections || userConnections.size === 0) {
            this.logger.warn(`Usuário ${userId} não tem conexões ativas`);
            return;
        }
        const messageEvent = {
            data: JSON.stringify({
                ...notification,
                timestamp: notification.timestamp.toISOString()
            })
        };
        // Envia para todas as conexões do usuário
        let successCount = 0;
        userConnections.forEach((subject, connectionId) => {
            try {
                subject.next(messageEvent);
                successCount++;
                this.logger.debug(`Notificação enviada: ${userId}:${connectionId}`);
            }
            catch (error) {
                this.logger.error(`Erro ao enviar notificação para ${userId}:${connectionId}: ${error.message}`);
                this.removeConnection(userId, connectionId);
            }
        });
        this.logger.log(`Notificação enviada para ${successCount}/${userConnections.size} conexões do usuário ${userId}`);
    }
    /**
     * Envia notificação para múltiplos usuários
     * @param userIds Lista de IDs dos usuários
     * @param notification Dados da notificação (sem userId)
     */
    sendToUsers(userIds, notification) {
        this.logger.log(`Enviando notificação em massa para ${userIds.length} usuários`);
        userIds.forEach(userId => {
            this.sendToUser(userId, { ...notification, userId });
        });
    }
    /**
     * Envia notificação broadcast para todos os usuários conectados
     * @param notification Dados da notificação
     */
    broadcastToAll(notification) {
        const connectedUserIds = Array.from(this.connections.keys());
        this.logger.log(`Enviando broadcast para ${connectedUserIds.length} usuários conectados`);
        this.sendToUsers(connectedUserIds, notification);
    }
    /**
     * Remove uma conexão específica
     * @param userId ID do usuário
     * @param connectionId ID da conexão
     */
    removeConnection(userId, connectionId) {
        const userConnections = this.connections.get(userId);
        if (userConnections) {
            const subject = userConnections.get(connectionId);
            if (subject) {
                subject.complete();
            }
            userConnections.delete(connectionId);
            // Remove mapa do usuário se não houver mais conexões
            if (userConnections.size === 0) {
                this.connections.delete(userId);
            }
            this.logger.log(`Conexão removida: ${userId}:${connectionId}`);
        }
    }
    /**
     * Remove todas as conexões de um usuário
     * @param userId ID do usuário
     */
    removeUserConnections(userId) {
        const userConnections = this.connections.get(userId);
        if (userConnections) {
            userConnections.forEach((subject, connectionId) => {
                subject.complete();
                this.logger.log(`Conexão removida: ${userId}:${connectionId}`);
            });
            this.connections.delete(userId);
            this.logger.log(`Todas as conexões do usuário ${userId} foram removidas`);
        }
    }
    /**
     * Verifica se um usuário tem conexões ativas
     * @param userId ID do usuário
     * @returns true se o usuário tem conexões ativas
     */
    hasActiveConnections(userId) {
        const userConnections = this.connections.get(userId);
        return userConnections ? userConnections.size > 0 : false;
    }
    /**
     * Retorna estatísticas das conexões
     * @returns Estatísticas detalhadas das conexões SSE
     */
    getConnectionStats() {
        let totalConnections = 0;
        const connectionsPerUser = {};
        this.connections.forEach((userConns, userId) => {
            const connectionCount = userConns.size;
            totalConnections += connectionCount;
            connectionsPerUser[userId] = connectionCount;
        });
        return {
            totalUsers: this.connections.size,
            totalConnections,
            connectionsPerUser,
            lastUpdated: new Date()
        };
    }
    /**
     * Retorna lista de usuários conectados
     * @returns Array com IDs dos usuários conectados
     */
    getConnectedUsers() {
        return Array.from(this.connections.keys());
    }
    /**
     * Limpa todas as conexões (usado para shutdown graceful)
     */
    clearAllConnections() {
        this.logger.log('Limpando todas as conexões SSE');
        this.connections.forEach((userConns, userId) => {
            userConns.forEach((subject, connectionId) => {
                subject.complete();
            });
        });
        this.connections.clear();
        this.logger.log('Todas as conexões SSE foram limpas');
    }
    /**
     * Gera um ID único para a conexão
     * @returns ID único da conexão
     */
    generateConnectionId() {
        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }
};
exports.SseService = SseService;
exports.SseService = SseService = SseService_1 = __decorate([
    (0, common_1.Injectable)()
], SseService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,