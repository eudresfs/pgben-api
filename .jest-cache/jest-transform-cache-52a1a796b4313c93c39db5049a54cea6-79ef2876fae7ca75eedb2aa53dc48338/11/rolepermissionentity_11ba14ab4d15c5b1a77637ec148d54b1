095a106f54477df9a295b66af9678e49
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePermission = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const permission_entity_1 = require("./permission.entity");
const usuario_entity_1 = require("./usuario.entity");
/**
 * Entidade que representa o relacionamento entre roles e permissões.
 *
 * Esta entidade permite mapear as permissões granulares para as roles existentes,
 * facilitando a transição do modelo baseado em roles para o modelo de permissões granulares.
 */
let RolePermission = class RolePermission {
    /**
     * Identificador único do mapeamento
     */
    id;
    /**
     * Referência à role
     */
    role_id;
    /**
     * Referência à permissão
     */
    permissao_id;
    /**
     * Relação com a permissão
     */
    permissao;
    /**
     * Data de criação
     */
    created_at;
    /**
     * Data de atualização
     */
    updated_at;
    /**
     * Usuário que criou o mapeamento
     */
    criado_por;
    /**
     * Relação com o usuário que criou o mapeamento
     */
    usuario_criador;
    // Getters e setters para compatibilidade com código existente
    get roleId() {
        return this.role_id;
    }
    set roleId(value) {
        this.role_id = value;
    }
    get permissionId() {
        return this.permissao_id;
    }
    set permissionId(value) {
        this.permissao_id = value;
    }
    get permission() {
        return this.permissao;
    }
    set permission(value) {
        this.permissao = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get createdBy() {
        return this.criado_por;
    }
    set createdBy(value) {
        this.criado_por = value;
    }
    get creator() {
        return this.usuario_criador;
    }
    set creator(value) {
        this.usuario_criador = value;
    }
    // Métodos utilitários
    /**
     * Verifica se o mapeamento foi criado por um usuário específico
     */
    foiCriadoPor(usuarioId) {
        return this.criado_por === usuarioId;
    }
    /**
     * Cria uma chave única para o mapeamento
     */
    getUniqueKey() {
        return `${this.role_id}-${this.permissao_id}`;
    }
    /**
     * Verifica se o mapeamento é válido
     */
    isValido() {
        return !!(this.role_id && this.permissao_id);
    }
    /**
     * Define o criador do mapeamento
     */
    definirCriador(usuarioId) {
        this.criado_por = usuarioId;
    }
    /**
     * Verifica se o mapeamento pertence a uma role específica
     */
    pertenceARole(roleId) {
        return this.role_id === roleId;
    }
    /**
     * Verifica se o mapeamento contém uma permissão específica
     */
    contemPermissao(permissaoId) {
        return this.permissao_id === permissaoId;
    }
    /**
     * Verifica se o mapeamento foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        if (!this.created_at)
            return false;
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do mapeamento em dias
     */
    getIdadeEmDias() {
        if (!this.created_at)
            return 0;
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
    }
    /**
     * Verifica se o mapeamento tem criador definido
     */
    temCriador() {
        return !!this.criado_por;
    }
    /**
     * Obtém informações resumidas do mapeamento
     */
    getSummary() {
        return {
            id: this.id,
            role_id: this.role_id,
            permissao_id: this.permissao_id,
            criado_por: this.criado_por,
            created_at: this.created_at,
            idadeEmDias: this.getIdadeEmDias()
        };
    }
    /**
     * Verifica se o mapeamento é compatível com outro mapeamento
     */
    isCompatibleWith(otherMapping) {
        // Mapeamentos são compatíveis se pertencem à mesma role
        return this.role_id === otherMapping.role_id;
    }
    /**
     * Gera uma chave única mais robusta para o mapeamento
     */
    getExtendedUniqueKey() {
        return `role_permission_${this.role_id}_${this.permissao_id}_${this.id}`;
    }
    /**
     * Verifica se o mapeamento está em estado consistente
     */
    isConsistente() {
        return (!!this.id &&
            !!this.role_id &&
            !!this.permissao_id &&
            !!this.created_at);
    }
    /**
     * Obtém uma descrição legível do mapeamento
     */
    getDescricao() {
        const permissaoNome = this.permissao?.nome || 'Permissão não carregada';
        return `Role ${this.role_id} -> Permissão: ${permissaoNome}`;
    }
    /**
     * Verifica se o mapeamento pode ser removido
     */
    podeSerRemovido() {
        // Por padrão, todos os mapeamentos podem ser removidos
        // Esta lógica pode ser expandida conforme regras de negócio
        return true;
    }
    /**
     * Clona o mapeamento (sem ID e datas)
     */
    clone() {
        return {
            role_id: this.role_id,
            permissao_id: this.permissao_id,
            criado_por: this.criado_por
        };
    }
    /**
     * Verifica se o mapeamento é para uma permissão de administrador
     */
    isAdminPermission() {
        return this.permissao?.isAdminPermission() || false;
    }
    /**
     * Verifica se o mapeamento é para uma permissão de sistema
     */
    isSystemPermission() {
        return this.permissao?.isSystemPermission() || false;
    }
    /**
     * Obtém o nível de criticidade do mapeamento baseado na permissão
     */
    getCriticalityLevel() {
        return this.permissao?.getCriticalityLevel() || 'LOW';
    }
    /**
     * Formata a data de criação para exibição
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
};
exports.RolePermission = RolePermission;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], RolePermission.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', name: 'role_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da role é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da role inválido' }),
    __metadata("design:type", String)
], RolePermission.prototype, "role_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', name: 'permissao_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da permissão é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da permissão inválido' }),
    __metadata("design:type", String)
], RolePermission.prototype, "permissao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => permission_entity_1.Permission, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'permissao_id' }),
    __metadata("design:type", typeof (_a = typeof permission_entity_1.Permission !== "undefined" && permission_entity_1.Permission) === "function" ? _a : Object)
], RolePermission.prototype, "permissao", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], RolePermission.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], RolePermission.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'criado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário criador inválido' }),
    __metadata("design:type", Object)
], RolePermission.prototype, "criado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'criado_por' }),
    __metadata("design:type", Object)
], RolePermission.prototype, "usuario_criador", void 0);
exports.RolePermission = RolePermission = __decorate([
    (0, typeorm_1.Entity)('role_permissao'),
    (0, typeorm_1.Index)(['role_id']),
    (0, typeorm_1.Index)(['permissao_id']),
    (0, typeorm_1.Index)(['role_id', 'permissao_id'], { unique: true }),
    (0, typeorm_1.Index)(['criado_por'])
], RolePermission);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,