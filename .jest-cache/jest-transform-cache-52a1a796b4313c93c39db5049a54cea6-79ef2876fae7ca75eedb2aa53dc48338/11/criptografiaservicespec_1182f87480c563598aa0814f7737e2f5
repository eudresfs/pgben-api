1a38fd707e1ab00646a06566f4f1e908
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const config_1 = require("@nestjs/config");
const criptografia_service_1 = require("../../../../src/modules/criptografia/services/criptografia.service");
describe('CriptografiaService', () => {
    let service;
    let configService;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            imports: [
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
            ],
            providers: [
                criptografia_service_1.CriptografiaService,
                {
                    provide: config_1.ConfigService,
                    useValue: {
                        get: jest.fn((key) => {
                            if (key === 'ENCRYPTION_KEY') {
                                return 'chave-de-criptografia-de-32-caracteres';
                            }
                            if (key === 'ENCRYPTION_IV') {
                                return 'vetor-de-16-chars';
                            }
                            return null;
                        }),
                    },
                },
            ],
        }).compile();
        service = module.get(criptografia_service_1.CriptografiaService);
        configService = module.get(config_1.ConfigService);
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
    describe('criptografar', () => {
        it('deve criptografar um texto corretamente', () => {
            const textoOriginal = 'Dados sensíveis para criptografar';
            const textoCriptografado = service.criptografar(textoOriginal);
            // O texto criptografado não deve ser igual ao original
            expect(textoCriptografado).not.toEqual(textoOriginal);
            // O texto criptografado deve ser uma string não vazia
            expect(typeof textoCriptografado).toBe('string');
            expect(textoCriptografado.length).toBeGreaterThan(0);
        });
        it('deve gerar criptografias diferentes para o mesmo texto em chamadas distintas', () => {
            const textoOriginal = 'Dados sensíveis para criptografar';
            const criptografia1 = service.criptografar(textoOriginal);
            const criptografia2 = service.criptografar(textoOriginal);
            // Devido ao IV aleatório, as criptografias devem ser diferentes
            expect(criptografia1).not.toEqual(criptografia2);
        });
        it('deve retornar string vazia ao criptografar null ou undefined', () => {
            expect(service.criptografar(null)).toBe('');
            expect(service.criptografar(undefined)).toBe('');
        });
        it('deve criptografar objetos convertendo-os para JSON', () => {
            const objetoOriginal = { nome: 'João', cpf: '123.456.789-00' };
            const textoCriptografado = service.criptografar(objetoOriginal);
            // O texto criptografado deve ser uma string não vazia
            expect(typeof textoCriptografado).toBe('string');
            expect(textoCriptografado.length).toBeGreaterThan(0);
        });
    });
    describe('descriptografar', () => {
        it('deve descriptografar corretamente um texto previamente criptografado', () => {
            const textoOriginal = 'Dados sensíveis para criptografar';
            const textoCriptografado = service.criptografar(textoOriginal);
            const textoDescriptografado = service.descriptografar(textoCriptografado);
            expect(textoDescriptografado).toEqual(textoOriginal);
        });
        it('deve retornar string vazia ao descriptografar null ou undefined', () => {
            expect(service.descriptografar(null)).toBe('');
            expect(service.descriptografar(undefined)).toBe('');
        });
        it('deve descriptografar e converter para objeto quando o conteúdo original era um objeto', () => {
            const objetoOriginal = { nome: 'João', cpf: '123.456.789-00' };
            const textoCriptografado = service.criptografar(objetoOriginal);
            const objetoDescriptografado = service.descriptografarParaObjeto(textoCriptografado);
            expect(objetoDescriptografado).toEqual(objetoOriginal);
        });
        it('deve lançar erro ao tentar descriptografar um texto inválido', () => {
            const textoInvalido = 'texto-nao-criptografado';
            expect(() => service.descriptografar(textoInvalido)).toThrow();
        });
    });
    describe('criptografarArquivo', () => {
        it('deve criptografar um buffer de arquivo corretamente', () => {
            const conteudoOriginal = Buffer.from('Conteúdo do arquivo sensível');
            const conteudoCriptografado = service.criptografarArquivo(conteudoOriginal);
            // O conteúdo criptografado não deve ser igual ao original
            expect(conteudoCriptografado.equals(conteudoOriginal)).toBe(false);
            // O conteúdo criptografado deve ser um Buffer não vazio
            expect(Buffer.isBuffer(conteudoCriptografado)).toBe(true);
            expect(conteudoCriptografado.length).toBeGreaterThan(0);
        });
        it('deve retornar Buffer vazio ao criptografar null ou undefined', () => {
            expect(service.criptografarArquivo(null).length).toBe(0);
            expect(service.criptografarArquivo(undefined).length).toBe(0);
        });
    });
    describe('descriptografarArquivo', () => {
        it('deve descriptografar corretamente um buffer previamente criptografado', () => {
            const conteudoOriginal = Buffer.from('Conteúdo do arquivo sensível');
            const conteudoCriptografado = service.criptografarArquivo(conteudoOriginal);
            const conteudoDescriptografado = service.descriptografarArquivo(conteudoCriptografado);
            expect(conteudoDescriptografado.equals(conteudoOriginal)).toBe(true);
        });
        it('deve retornar Buffer vazio ao descriptografar null ou undefined', () => {
            expect(service.descriptografarArquivo(null).length).toBe(0);
            expect(service.descriptografarArquivo(undefined).length).toBe(0);
        });
        it('deve lançar erro ao tentar descriptografar um buffer inválido', () => {
            const bufferInvalido = Buffer.from('buffer-nao-criptografado');
            expect(() => service.descriptografarArquivo(bufferInvalido)).toThrow();
        });
    });
    describe('gerarHash', () => {
        it('deve gerar um hash para uma string', () => {
            const textoOriginal = 'Texto para gerar hash';
            const hash = service.gerarHash(textoOriginal);
            // O hash deve ser uma string não vazia
            expect(typeof hash).toBe('string');
            expect(hash.length).toBeGreaterThan(0);
            // O hash não deve ser igual ao texto original
            expect(hash).not.toEqual(textoOriginal);
        });
        it('deve gerar o mesmo hash para o mesmo texto', () => {
            const textoOriginal = 'Texto para gerar hash';
            const hash1 = service.gerarHash(textoOriginal);
            const hash2 = service.gerarHash(textoOriginal);
            // Os hashes devem ser iguais
            expect(hash1).toEqual(hash2);
        });
        it('deve gerar hashes diferentes para textos diferentes', () => {
            const texto1 = 'Texto 1';
            const texto2 = 'Texto 2';
            const hash1 = service.gerarHash(texto1);
            const hash2 = service.gerarHash(texto2);
            // Os hashes devem ser diferentes
            expect(hash1).not.toEqual(hash2);
        });
        it('deve retornar string vazia ao gerar hash de null ou undefined', () => {
            expect(service.gerarHash(null)).toBe('');
            expect(service.gerarHash(undefined)).toBe('');
        });
    });
    describe('verificarHash', () => {
        it('deve verificar corretamente um hash válido', () => {
            const textoOriginal = 'Texto para verificar hash';
            const hash = service.gerarHash(textoOriginal);
            const resultado = service.verificarHash(textoOriginal, hash);
            expect(resultado).toBe(true);
        });
        it('deve rejeitar um hash inválido', () => {
            const textoOriginal = 'Texto para verificar hash';
            const hashInvalido = 'hash-invalido';
            const resultado = service.verificarHash(textoOriginal, hashInvalido);
            expect(resultado).toBe(false);
        });
        it('deve rejeitar quando o texto é diferente do original', () => {
            const textoOriginal = 'Texto para verificar hash';
            const hash = service.gerarHash(textoOriginal);
            const resultado = service.verificarHash('Texto diferente', hash);
            expect(resultado).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFx0ZXN0XFxtb2R1bGVzXFxjcmlwdG9ncmFmaWFcXHNlcnZpY2VzXFxjcmlwdG9ncmFmaWEuc2VydmljZS5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXNEO0FBQ3RELDJDQUE2RDtBQUM3RCw2R0FBeUc7QUFFekcsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxJQUFJLE9BQTRCLENBQUM7SUFDakMsSUFBSSxhQUE0QixDQUFDO0lBRWpDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsT0FBTyxFQUFFO2dCQUNQLHFCQUFZLENBQUMsT0FBTyxDQUFDO29CQUNuQixRQUFRLEVBQUUsSUFBSTtvQkFDZCxXQUFXLEVBQUUsV0FBVztpQkFDekIsQ0FBQzthQUNIO1lBQ0QsU0FBUyxFQUFFO2dCQUNULDBDQUFtQjtnQkFDbkI7b0JBQ0UsT0FBTyxFQUFFLHNCQUFhO29CQUN0QixRQUFRLEVBQUU7d0JBQ1IsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFXLEVBQUUsRUFBRTs0QkFDM0IsSUFBSSxHQUFHLEtBQUssZ0JBQWdCLEVBQzFCLENBQUM7Z0NBQUEsT0FBTyx3Q0FBd0MsQ0FBQzs0QkFBQSxDQUFDOzRCQUNwRCxJQUFJLEdBQUcsS0FBSyxlQUFlLEVBQUUsQ0FBQztnQ0FBQSxPQUFPLG1CQUFtQixDQUFDOzRCQUFBLENBQUM7NEJBQzFELE9BQU8sSUFBSSxDQUFDO3dCQUNkLENBQUMsQ0FBQztxQkFDSDtpQkFDRjthQUNGO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQXNCLDBDQUFtQixDQUFDLENBQUM7UUFDL0QsYUFBYSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWdCLHNCQUFhLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDNUIsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEdBQUcsRUFBRTtZQUNqRCxNQUFNLGFBQWEsR0FBRyxtQ0FBbUMsQ0FBQztZQUMxRCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFL0QsdURBQXVEO1lBQ3ZELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFdEQsc0RBQXNEO1lBQ3RELE1BQU0sQ0FBQyxPQUFPLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOEVBQThFLEVBQUUsR0FBRyxFQUFFO1lBQ3RGLE1BQU0sYUFBYSxHQUFHLG1DQUFtQyxDQUFDO1lBRTFELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDMUQsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUUxRCxnRUFBZ0U7WUFDaEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOERBQThELEVBQUUsR0FBRyxFQUFFO1lBQ3RFLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG9EQUFvRCxFQUFFLEdBQUcsRUFBRTtZQUM1RCxNQUFNLGNBQWMsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLGdCQUFnQixFQUFFLENBQUM7WUFDL0QsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRWhFLHNEQUFzRDtZQUN0RCxNQUFNLENBQUMsT0FBTyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqRCxNQUFNLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxFQUFFO1FBQy9CLEVBQUUsQ0FBQyxzRUFBc0UsRUFBRSxHQUFHLEVBQUU7WUFDOUUsTUFBTSxhQUFhLEdBQUcsbUNBQW1DLENBQUM7WUFDMUQsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9ELE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBRTFFLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpRUFBaUUsRUFBRSxHQUFHLEVBQUU7WUFDekUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsdUZBQXVGLEVBQUUsR0FBRyxFQUFFO1lBQy9GLE1BQU0sY0FBYyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQztZQUMvRCxNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDaEUsTUFBTSxzQkFBc0IsR0FDMUIsT0FBTyxDQUFDLHlCQUF5QixDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFFeEQsTUFBTSxDQUFDLHNCQUFzQixDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDhEQUE4RCxFQUFFLEdBQUcsRUFBRTtZQUN0RSxNQUFNLGFBQWEsR0FBRyx5QkFBeUIsQ0FBQztZQUVoRCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMscUJBQXFCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxHQUFHLEVBQUU7WUFDN0QsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDckUsTUFBTSxxQkFBcUIsR0FDekIsT0FBTyxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFaEQsMERBQTBEO1lBQzFELE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUVuRSx3REFBd0Q7WUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxRCxNQUFNLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDhEQUE4RCxFQUFFLEdBQUcsRUFBRTtZQUN0RSxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RCxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUN0QyxFQUFFLENBQUMsdUVBQXVFLEVBQUUsR0FBRyxFQUFFO1lBQy9FLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1lBQ3JFLE1BQU0scUJBQXFCLEdBQ3pCLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sd0JBQXdCLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUM3RCxxQkFBcUIsQ0FDdEIsQ0FBQztZQUVGLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpRUFBaUUsRUFBRSxHQUFHLEVBQUU7WUFDekUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0RBQStELEVBQUUsR0FBRyxFQUFFO1lBQ3ZFLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUUvRCxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxXQUFXLEVBQUUsR0FBRyxFQUFFO1FBQ3pCLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxHQUFHLEVBQUU7WUFDNUMsTUFBTSxhQUFhLEdBQUcsdUJBQXVCLENBQUM7WUFDOUMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUU5Qyx1Q0FBdUM7WUFDdkMsTUFBTSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXZDLDhDQUE4QztZQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7WUFDcEQsTUFBTSxhQUFhLEdBQUcsdUJBQXVCLENBQUM7WUFFOUMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMvQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRS9DLDZCQUE2QjtZQUM3QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEdBQUcsRUFBRTtZQUM3RCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDekIsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBRXpCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUV4QyxpQ0FBaUM7WUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0RBQStELEVBQUUsR0FBRyxFQUFFO1lBQ3ZFLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUM3QixFQUFFLENBQUMsNENBQTRDLEVBQUUsR0FBRyxFQUFFO1lBQ3BELE1BQU0sYUFBYSxHQUFHLDJCQUEyQixDQUFDO1lBQ2xELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFOUMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFN0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7WUFDeEMsTUFBTSxhQUFhLEdBQUcsMkJBQTJCLENBQUM7WUFDbEQsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDO1lBRXJDLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBRXJFLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsc0RBQXNELEVBQUUsR0FBRyxFQUFFO1lBQzlELE1BQU0sYUFBYSxHQUFHLDJCQUEyQixDQUFDO1lBQ2xELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFOUMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVqRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHRlc3RcXG1vZHVsZXNcXGNyaXB0b2dyYWZpYVxcc2VydmljZXNcXGNyaXB0b2dyYWZpYS5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBDb25maWdNb2R1bGUsIENvbmZpZ1NlcnZpY2UgfSBmcm9tICdAbmVzdGpzL2NvbmZpZyc7XG5pbXBvcnQgeyBDcmlwdG9ncmFmaWFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvY3JpcHRvZ3JhZmlhL3NlcnZpY2VzL2NyaXB0b2dyYWZpYS5zZXJ2aWNlJztcblxuZGVzY3JpYmUoJ0NyaXB0b2dyYWZpYVNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBzZXJ2aWNlOiBDcmlwdG9ncmFmaWFTZXJ2aWNlO1xuICBsZXQgY29uZmlnU2VydmljZTogQ29uZmlnU2VydmljZTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgaW1wb3J0czogW1xuICAgICAgICBDb25maWdNb2R1bGUuZm9yUm9vdCh7XG4gICAgICAgICAgaXNHbG9iYWw6IHRydWUsXG4gICAgICAgICAgZW52RmlsZVBhdGg6ICcuZW52LnRlc3QnLFxuICAgICAgICB9KSxcbiAgICAgIF0sXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgQ3JpcHRvZ3JhZmlhU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IENvbmZpZ1NlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGdldDogamVzdC5mbigoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGtleSA9PT0gJ0VOQ1JZUFRJT05fS0VZJylcbiAgICAgICAgICAgICAgICB7cmV0dXJuICdjaGF2ZS1kZS1jcmlwdG9ncmFmaWEtZGUtMzItY2FyYWN0ZXJlcyc7fVxuICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnRU5DUllQVElPTl9JVicpIHtyZXR1cm4gJ3ZldG9yLWRlLTE2LWNoYXJzJzt9XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSkuY29tcGlsZSgpO1xuXG4gICAgc2VydmljZSA9IG1vZHVsZS5nZXQ8Q3JpcHRvZ3JhZmlhU2VydmljZT4oQ3JpcHRvZ3JhZmlhU2VydmljZSk7XG4gICAgY29uZmlnU2VydmljZSA9IG1vZHVsZS5nZXQ8Q29uZmlnU2VydmljZT4oQ29uZmlnU2VydmljZSk7XG4gIH0pO1xuXG4gIGl0KCdkZXZlIHNlciBkZWZpbmlkbycsICgpID0+IHtcbiAgICBleHBlY3Qoc2VydmljZSkudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyaXB0b2dyYWZhcicsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBjcmlwdG9ncmFmYXIgdW0gdGV4dG8gY29ycmV0YW1lbnRlJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGV4dG9PcmlnaW5hbCA9ICdEYWRvcyBzZW5zw612ZWlzIHBhcmEgY3JpcHRvZ3JhZmFyJztcbiAgICAgIGNvbnN0IHRleHRvQ3JpcHRvZ3JhZmFkbyA9IHNlcnZpY2UuY3JpcHRvZ3JhZmFyKHRleHRvT3JpZ2luYWwpO1xuXG4gICAgICAvLyBPIHRleHRvIGNyaXB0b2dyYWZhZG8gbsOjbyBkZXZlIHNlciBpZ3VhbCBhbyBvcmlnaW5hbFxuICAgICAgZXhwZWN0KHRleHRvQ3JpcHRvZ3JhZmFkbykubm90LnRvRXF1YWwodGV4dG9PcmlnaW5hbCk7XG5cbiAgICAgIC8vIE8gdGV4dG8gY3JpcHRvZ3JhZmFkbyBkZXZlIHNlciB1bWEgc3RyaW5nIG7Do28gdmF6aWFcbiAgICAgIGV4cGVjdCh0eXBlb2YgdGV4dG9DcmlwdG9ncmFmYWRvKS50b0JlKCdzdHJpbmcnKTtcbiAgICAgIGV4cGVjdCh0ZXh0b0NyaXB0b2dyYWZhZG8ubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBnZXJhciBjcmlwdG9ncmFmaWFzIGRpZmVyZW50ZXMgcGFyYSBvIG1lc21vIHRleHRvIGVtIGNoYW1hZGFzIGRpc3RpbnRhcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRleHRvT3JpZ2luYWwgPSAnRGFkb3Mgc2Vuc8OtdmVpcyBwYXJhIGNyaXB0b2dyYWZhcic7XG5cbiAgICAgIGNvbnN0IGNyaXB0b2dyYWZpYTEgPSBzZXJ2aWNlLmNyaXB0b2dyYWZhcih0ZXh0b09yaWdpbmFsKTtcbiAgICAgIGNvbnN0IGNyaXB0b2dyYWZpYTIgPSBzZXJ2aWNlLmNyaXB0b2dyYWZhcih0ZXh0b09yaWdpbmFsKTtcblxuICAgICAgLy8gRGV2aWRvIGFvIElWIGFsZWF0w7NyaW8sIGFzIGNyaXB0b2dyYWZpYXMgZGV2ZW0gc2VyIGRpZmVyZW50ZXNcbiAgICAgIGV4cGVjdChjcmlwdG9ncmFmaWExKS5ub3QudG9FcXVhbChjcmlwdG9ncmFmaWEyKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHJldG9ybmFyIHN0cmluZyB2YXppYSBhbyBjcmlwdG9ncmFmYXIgbnVsbCBvdSB1bmRlZmluZWQnLCAoKSA9PiB7XG4gICAgICBleHBlY3Qoc2VydmljZS5jcmlwdG9ncmFmYXIobnVsbCkpLnRvQmUoJycpO1xuICAgICAgZXhwZWN0KHNlcnZpY2UuY3JpcHRvZ3JhZmFyKHVuZGVmaW5lZCkpLnRvQmUoJycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgY3JpcHRvZ3JhZmFyIG9iamV0b3MgY29udmVydGVuZG8tb3MgcGFyYSBKU09OJywgKCkgPT4ge1xuICAgICAgY29uc3Qgb2JqZXRvT3JpZ2luYWwgPSB7IG5vbWU6ICdKb8OjbycsIGNwZjogJzEyMy40NTYuNzg5LTAwJyB9O1xuICAgICAgY29uc3QgdGV4dG9DcmlwdG9ncmFmYWRvID0gc2VydmljZS5jcmlwdG9ncmFmYXIob2JqZXRvT3JpZ2luYWwpO1xuXG4gICAgICAvLyBPIHRleHRvIGNyaXB0b2dyYWZhZG8gZGV2ZSBzZXIgdW1hIHN0cmluZyBuw6NvIHZhemlhXG4gICAgICBleHBlY3QodHlwZW9mIHRleHRvQ3JpcHRvZ3JhZmFkbykudG9CZSgnc3RyaW5nJyk7XG4gICAgICBleHBlY3QodGV4dG9DcmlwdG9ncmFmYWRvLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZGVzY3JpcHRvZ3JhZmFyJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGRlc2NyaXB0b2dyYWZhciBjb3JyZXRhbWVudGUgdW0gdGV4dG8gcHJldmlhbWVudGUgY3JpcHRvZ3JhZmFkbycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRleHRvT3JpZ2luYWwgPSAnRGFkb3Mgc2Vuc8OtdmVpcyBwYXJhIGNyaXB0b2dyYWZhcic7XG4gICAgICBjb25zdCB0ZXh0b0NyaXB0b2dyYWZhZG8gPSBzZXJ2aWNlLmNyaXB0b2dyYWZhcih0ZXh0b09yaWdpbmFsKTtcbiAgICAgIGNvbnN0IHRleHRvRGVzY3JpcHRvZ3JhZmFkbyA9IHNlcnZpY2UuZGVzY3JpcHRvZ3JhZmFyKHRleHRvQ3JpcHRvZ3JhZmFkbyk7XG5cbiAgICAgIGV4cGVjdCh0ZXh0b0Rlc2NyaXB0b2dyYWZhZG8pLnRvRXF1YWwodGV4dG9PcmlnaW5hbCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSByZXRvcm5hciBzdHJpbmcgdmF6aWEgYW8gZGVzY3JpcHRvZ3JhZmFyIG51bGwgb3UgdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHNlcnZpY2UuZGVzY3JpcHRvZ3JhZmFyKG51bGwpKS50b0JlKCcnKTtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmRlc2NyaXB0b2dyYWZhcih1bmRlZmluZWQpKS50b0JlKCcnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGRlc2NyaXB0b2dyYWZhciBlIGNvbnZlcnRlciBwYXJhIG9iamV0byBxdWFuZG8gbyBjb250ZcO6ZG8gb3JpZ2luYWwgZXJhIHVtIG9iamV0bycsICgpID0+IHtcbiAgICAgIGNvbnN0IG9iamV0b09yaWdpbmFsID0geyBub21lOiAnSm/Do28nLCBjcGY6ICcxMjMuNDU2Ljc4OS0wMCcgfTtcbiAgICAgIGNvbnN0IHRleHRvQ3JpcHRvZ3JhZmFkbyA9IHNlcnZpY2UuY3JpcHRvZ3JhZmFyKG9iamV0b09yaWdpbmFsKTtcbiAgICAgIGNvbnN0IG9iamV0b0Rlc2NyaXB0b2dyYWZhZG8gPVxuICAgICAgICBzZXJ2aWNlLmRlc2NyaXB0b2dyYWZhclBhcmFPYmpldG8odGV4dG9DcmlwdG9ncmFmYWRvKTtcblxuICAgICAgZXhwZWN0KG9iamV0b0Rlc2NyaXB0b2dyYWZhZG8pLnRvRXF1YWwob2JqZXRvT3JpZ2luYWwpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGFuw6dhciBlcnJvIGFvIHRlbnRhciBkZXNjcmlwdG9ncmFmYXIgdW0gdGV4dG8gaW52w6FsaWRvJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGV4dG9JbnZhbGlkbyA9ICd0ZXh0by1uYW8tY3JpcHRvZ3JhZmFkbyc7XG5cbiAgICAgIGV4cGVjdCgoKSA9PiBzZXJ2aWNlLmRlc2NyaXB0b2dyYWZhcih0ZXh0b0ludmFsaWRvKSkudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY3JpcHRvZ3JhZmFyQXJxdWl2bycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBjcmlwdG9ncmFmYXIgdW0gYnVmZmVyIGRlIGFycXVpdm8gY29ycmV0YW1lbnRlJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGV1ZG9PcmlnaW5hbCA9IEJ1ZmZlci5mcm9tKCdDb250ZcO6ZG8gZG8gYXJxdWl2byBzZW5zw612ZWwnKTtcbiAgICAgIGNvbnN0IGNvbnRldWRvQ3JpcHRvZ3JhZmFkbyA9XG4gICAgICAgIHNlcnZpY2UuY3JpcHRvZ3JhZmFyQXJxdWl2byhjb250ZXVkb09yaWdpbmFsKTtcblxuICAgICAgLy8gTyBjb250ZcO6ZG8gY3JpcHRvZ3JhZmFkbyBuw6NvIGRldmUgc2VyIGlndWFsIGFvIG9yaWdpbmFsXG4gICAgICBleHBlY3QoY29udGV1ZG9DcmlwdG9ncmFmYWRvLmVxdWFscyhjb250ZXVkb09yaWdpbmFsKSkudG9CZShmYWxzZSk7XG5cbiAgICAgIC8vIE8gY29udGXDumRvIGNyaXB0b2dyYWZhZG8gZGV2ZSBzZXIgdW0gQnVmZmVyIG7Do28gdmF6aW9cbiAgICAgIGV4cGVjdChCdWZmZXIuaXNCdWZmZXIoY29udGV1ZG9DcmlwdG9ncmFmYWRvKSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChjb250ZXVkb0NyaXB0b2dyYWZhZG8ubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSByZXRvcm5hciBCdWZmZXIgdmF6aW8gYW8gY3JpcHRvZ3JhZmFyIG51bGwgb3UgdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHNlcnZpY2UuY3JpcHRvZ3JhZmFyQXJxdWl2byhudWxsKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICBleHBlY3Qoc2VydmljZS5jcmlwdG9ncmFmYXJBcnF1aXZvKHVuZGVmaW5lZCkubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZGVzY3JpcHRvZ3JhZmFyQXJxdWl2bycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBkZXNjcmlwdG9ncmFmYXIgY29ycmV0YW1lbnRlIHVtIGJ1ZmZlciBwcmV2aWFtZW50ZSBjcmlwdG9ncmFmYWRvJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGV1ZG9PcmlnaW5hbCA9IEJ1ZmZlci5mcm9tKCdDb250ZcO6ZG8gZG8gYXJxdWl2byBzZW5zw612ZWwnKTtcbiAgICAgIGNvbnN0IGNvbnRldWRvQ3JpcHRvZ3JhZmFkbyA9XG4gICAgICAgIHNlcnZpY2UuY3JpcHRvZ3JhZmFyQXJxdWl2byhjb250ZXVkb09yaWdpbmFsKTtcbiAgICAgIGNvbnN0IGNvbnRldWRvRGVzY3JpcHRvZ3JhZmFkbyA9IHNlcnZpY2UuZGVzY3JpcHRvZ3JhZmFyQXJxdWl2byhcbiAgICAgICAgY29udGV1ZG9DcmlwdG9ncmFmYWRvLFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KGNvbnRldWRvRGVzY3JpcHRvZ3JhZmFkby5lcXVhbHMoY29udGV1ZG9PcmlnaW5hbCkpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSByZXRvcm5hciBCdWZmZXIgdmF6aW8gYW8gZGVzY3JpcHRvZ3JhZmFyIG51bGwgb3UgdW5kZWZpbmVkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHNlcnZpY2UuZGVzY3JpcHRvZ3JhZmFyQXJxdWl2byhudWxsKS5sZW5ndGgpLnRvQmUoMCk7XG4gICAgICBleHBlY3Qoc2VydmljZS5kZXNjcmlwdG9ncmFmYXJBcnF1aXZvKHVuZGVmaW5lZCkubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGFuw6dhciBlcnJvIGFvIHRlbnRhciBkZXNjcmlwdG9ncmFmYXIgdW0gYnVmZmVyIGludsOhbGlkbycsICgpID0+IHtcbiAgICAgIGNvbnN0IGJ1ZmZlckludmFsaWRvID0gQnVmZmVyLmZyb20oJ2J1ZmZlci1uYW8tY3JpcHRvZ3JhZmFkbycpO1xuXG4gICAgICBleHBlY3QoKCkgPT4gc2VydmljZS5kZXNjcmlwdG9ncmFmYXJBcnF1aXZvKGJ1ZmZlckludmFsaWRvKSkudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VyYXJIYXNoJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGdlcmFyIHVtIGhhc2ggcGFyYSB1bWEgc3RyaW5nJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGV4dG9PcmlnaW5hbCA9ICdUZXh0byBwYXJhIGdlcmFyIGhhc2gnO1xuICAgICAgY29uc3QgaGFzaCA9IHNlcnZpY2UuZ2VyYXJIYXNoKHRleHRvT3JpZ2luYWwpO1xuXG4gICAgICAvLyBPIGhhc2ggZGV2ZSBzZXIgdW1hIHN0cmluZyBuw6NvIHZhemlhXG4gICAgICBleHBlY3QodHlwZW9mIGhhc2gpLnRvQmUoJ3N0cmluZycpO1xuICAgICAgZXhwZWN0KGhhc2gubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMCk7XG5cbiAgICAgIC8vIE8gaGFzaCBuw6NvIGRldmUgc2VyIGlndWFsIGFvIHRleHRvIG9yaWdpbmFsXG4gICAgICBleHBlY3QoaGFzaCkubm90LnRvRXF1YWwodGV4dG9PcmlnaW5hbCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBnZXJhciBvIG1lc21vIGhhc2ggcGFyYSBvIG1lc21vIHRleHRvJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGV4dG9PcmlnaW5hbCA9ICdUZXh0byBwYXJhIGdlcmFyIGhhc2gnO1xuXG4gICAgICBjb25zdCBoYXNoMSA9IHNlcnZpY2UuZ2VyYXJIYXNoKHRleHRvT3JpZ2luYWwpO1xuICAgICAgY29uc3QgaGFzaDIgPSBzZXJ2aWNlLmdlcmFySGFzaCh0ZXh0b09yaWdpbmFsKTtcblxuICAgICAgLy8gT3MgaGFzaGVzIGRldmVtIHNlciBpZ3VhaXNcbiAgICAgIGV4cGVjdChoYXNoMSkudG9FcXVhbChoYXNoMik7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBnZXJhciBoYXNoZXMgZGlmZXJlbnRlcyBwYXJhIHRleHRvcyBkaWZlcmVudGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGV4dG8xID0gJ1RleHRvIDEnO1xuICAgICAgY29uc3QgdGV4dG8yID0gJ1RleHRvIDInO1xuXG4gICAgICBjb25zdCBoYXNoMSA9IHNlcnZpY2UuZ2VyYXJIYXNoKHRleHRvMSk7XG4gICAgICBjb25zdCBoYXNoMiA9IHNlcnZpY2UuZ2VyYXJIYXNoKHRleHRvMik7XG5cbiAgICAgIC8vIE9zIGhhc2hlcyBkZXZlbSBzZXIgZGlmZXJlbnRlc1xuICAgICAgZXhwZWN0KGhhc2gxKS5ub3QudG9FcXVhbChoYXNoMik7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSByZXRvcm5hciBzdHJpbmcgdmF6aWEgYW8gZ2VyYXIgaGFzaCBkZSBudWxsIG91IHVuZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChzZXJ2aWNlLmdlcmFySGFzaChudWxsKSkudG9CZSgnJyk7XG4gICAgICBleHBlY3Qoc2VydmljZS5nZXJhckhhc2godW5kZWZpbmVkKSkudG9CZSgnJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd2ZXJpZmljYXJIYXNoJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHZlcmlmaWNhciBjb3JyZXRhbWVudGUgdW0gaGFzaCB2w6FsaWRvJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGV4dG9PcmlnaW5hbCA9ICdUZXh0byBwYXJhIHZlcmlmaWNhciBoYXNoJztcbiAgICAgIGNvbnN0IGhhc2ggPSBzZXJ2aWNlLmdlcmFySGFzaCh0ZXh0b09yaWdpbmFsKTtcblxuICAgICAgY29uc3QgcmVzdWx0YWRvID0gc2VydmljZS52ZXJpZmljYXJIYXNoKHRleHRvT3JpZ2luYWwsIGhhc2gpO1xuXG4gICAgICBleHBlY3QocmVzdWx0YWRvKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgcmVqZWl0YXIgdW0gaGFzaCBpbnbDoWxpZG8nLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0b09yaWdpbmFsID0gJ1RleHRvIHBhcmEgdmVyaWZpY2FyIGhhc2gnO1xuICAgICAgY29uc3QgaGFzaEludmFsaWRvID0gJ2hhc2gtaW52YWxpZG8nO1xuXG4gICAgICBjb25zdCByZXN1bHRhZG8gPSBzZXJ2aWNlLnZlcmlmaWNhckhhc2godGV4dG9PcmlnaW5hbCwgaGFzaEludmFsaWRvKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdGFkbykudG9CZShmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSByZWplaXRhciBxdWFuZG8gbyB0ZXh0byDDqSBkaWZlcmVudGUgZG8gb3JpZ2luYWwnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0b09yaWdpbmFsID0gJ1RleHRvIHBhcmEgdmVyaWZpY2FyIGhhc2gnO1xuICAgICAgY29uc3QgaGFzaCA9IHNlcnZpY2UuZ2VyYXJIYXNoKHRleHRvT3JpZ2luYWwpO1xuXG4gICAgICBjb25zdCByZXN1bHRhZG8gPSBzZXJ2aWNlLnZlcmlmaWNhckhhc2goJ1RleHRvIGRpZmVyZW50ZScsIGhhc2gpO1xuXG4gICAgICBleHBlY3QocmVzdWx0YWRvKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==