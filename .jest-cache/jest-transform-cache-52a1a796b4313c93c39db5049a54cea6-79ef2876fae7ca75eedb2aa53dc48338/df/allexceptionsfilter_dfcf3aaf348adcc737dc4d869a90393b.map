{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\filters\\all-exceptions.filter.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\filters\\all-exceptions.filter.ts"],"sourcesContent":["import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  BadRequestException,\n} from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request, Response } from 'express';\nimport { ValidationError } from 'class-validator';\nimport { REQUEST_ID_TOKEN_HEADER } from '../constants';\nimport { createRequestContext } from '../request-context/util';\nimport { BaseApiException } from '../exceptions/base-api.exception';\nimport { UnifiedLoggerService } from '../logging/unified-logger.service';\nimport { ApiErrorResponse } from '../dtos/api-error-response.dto';\n\n/**\n * Filtro global para tratamento de exceções\n *\n * Padroniza todas as respostas de erro da aplicação,\n * garantindo consistência e logging adequado.\n *\n * Características:\n * - Tratamento específico para diferentes tipos de exceção\n * - Logging estruturado com contexto de requisição\n * - Respostas padronizadas conforme ApiErrorResponse\n * - Suporte a validação e localização de mensagens\n * - Proteção de dados sensíveis em produção\n */\n@Injectable()\n@Catch()\nexport class AllExceptionsFilter<T> implements ExceptionFilter {\n  constructor(\n    private readonly config: ConfigService,\n    private readonly logger: UnifiedLoggerService,\n  ) {\n    this.logger.setContext(AllExceptionsFilter.name);\n  }\n\n  catch(exception: T, host: ArgumentsHost): any {\n    const ctx = host.switchToHttp();\n    const req: Request = ctx.getRequest<Request>();\n    const res: Response = ctx.getResponse<Response>();\n\n    const path = req.url;\n    const timestamp = new Date().toISOString();\n    const requestId = req.headers[REQUEST_ID_TOKEN_HEADER] as string;\n    const requestContext = createRequestContext(req);\n\n    // Extrair idioma do header para localização (padrão: pt-BR)\n    const acceptedLanguage =\n      req.headers['accept-language']?.split(',')[0] || 'pt-BR';\n\n    let stack: string | undefined;\n    let statusCode: HttpStatus;\n    let errorName: string;\n    let message: string;\n    let details: any;\n    let localizedMessage: string | undefined;\n    let validationErrors:\n      | Array<{ field: string; messages: string[] }>\n      | undefined;\n\n    // Tratamento estruturado por tipo de exceção\n    switch (true) {\n      case exception instanceof BaseApiException:\n        statusCode = exception.getStatus();\n        errorName = exception.constructor.name;\n        message = exception.message;\n        localizedMessage = exception.localizedMessage?.[acceptedLanguage];\n        details = exception.details || exception.getResponse();\n        break;\n\n      case exception instanceof BadRequestException:\n        statusCode = exception.getStatus();\n        errorName = exception.constructor.name;\n        const response = exception.getResponse() as any;\n\n        // Tratar erros de validação do class-validator\n        if (response?.message && Array.isArray(response.message)) {\n          validationErrors = this.processValidationErrors(response.message);\n          message = 'Erro de validação';\n          details = { validationErrors };\n        } else {\n          message = response?.message || exception.message;\n          details = response;\n        }\n        break;\n\n      case exception instanceof HttpException:\n        statusCode = exception.getStatus();\n        errorName = exception.constructor.name;\n        message = exception.message;\n        details = exception.getResponse();\n        break;\n\n      case exception instanceof Error:\n        statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n        errorName = exception.constructor.name;\n        message = exception.message;\n        stack = exception.stack;\n        break;\n\n      default:\n        statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n        errorName = 'UnknownException';\n        message = 'Erro interno do servidor';\n        break;\n    }\n\n    // Criar resposta de erro padronizada\n    const errorResponse: ApiErrorResponse = {\n      statusCode,\n      message,\n      code: errorName,\n      details,\n      errors: validationErrors,\n      timestamp,\n      path,\n    };\n\n    // Log estruturado do erro\n    const logLevel = statusCode >= 500 ? 'error' : 'warn';\n    const logMessage = `${errorName}: ${message}`;\n    const logMeta = {\n      statusCode,\n      errorName,\n      path,\n      requestId,\n      userAgent: req.headers['user-agent'],\n      ip: req.ip,\n      method: req.method,\n      stack:\n        stack && this.config.get<string>('NODE_ENV') === 'development'\n          ? stack\n          : undefined,\n    };\n\n    if (logLevel === 'error') {\n      this.logger.error(requestContext, logMessage, logMeta);\n    } else {\n      this.logger.warn(requestContext, logMessage, logMeta);\n    }\n\n    // Proteger dados sensíveis em produção\n    const isProduction = this.config.get<string>('NODE_ENV') === 'production';\n    if (isProduction && statusCode === HttpStatus.INTERNAL_SERVER_ERROR) {\n      errorResponse.message = 'Erro interno do servidor';\n      errorResponse.details = undefined;\n    }\n\n    res.status(statusCode).json(errorResponse);\n  }\n\n  /**\n   * Processa erros de validação do class-validator em formato estruturado\n   */\n  private processValidationErrors(\n    validationErrors: string[] | ValidationError[],\n  ): Array<{ field: string; messages: string[] }> {\n    const result: Array<{ field: string; messages: string[] }> = [];\n\n    for (const error of validationErrors) {\n      if (typeof error === 'string') {\n        // Erro simples como string\n        result.push({\n          field: 'unknown',\n          messages: [error],\n        });\n      } else if (error && typeof error === 'object' && 'property' in error) {\n        // ValidationError do class-validator\n        const validationError = error as ValidationError;\n        const messages = validationError.constraints\n          ? Object.values(validationError.constraints)\n          : ['Erro de validação'];\n\n        result.push({\n          field: validationError.property,\n          messages,\n        });\n\n        // Processar erros aninhados\n        if (validationError.children && validationError.children.length > 0) {\n          const childErrors = this.processValidationErrors(\n            validationError.children,\n          );\n          result.push(\n            ...childErrors.map((childError) => ({\n              field: `${validationError.property}.${childError.field}`,\n              messages: childError.messages,\n            })),\n          );\n        }\n      }\n    }\n\n    return result;\n  }\n}\n"],"version":3}