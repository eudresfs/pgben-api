{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\tests\\parametro.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\tests\\parametro.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ParametroService } from '../services/parametro.service';\nimport { ParametroRepository } from '../repositories/parametro.repository';\nimport { ParametroCreateDto } from '../dtos/parametro/parametro-create.dto';\nimport { ParametroUpdateDto } from '../dtos/parametro/parametro-update.dto';\nimport { ParametroTipoEnum } from '../enums/parametro-tipo.enum';\nimport { NotFoundException, BadRequestException } from '@nestjs/common';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\n\n// Mock do Cache Manager\nconst mockCacheManager = {\n  get: jest.fn(),\n  set: jest.fn(),\n  del: jest.fn(),\n};\n\n// Mock do Repositório\nconst mockParametroRepository = {\n  findByChave: jest.fn(),\n  findAll: jest.fn(),\n  findByCategoria: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n};\n\ndescribe('ParametroService', () => {\n  let service: ParametroService;\n  let repository: ParametroRepository;\n  let cacheManager: Cache;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ParametroService,\n        {\n          provide: ParametroRepository,\n          useValue: mockParametroRepository,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n      ],\n    }).compile();\n\n    service = module.get<ParametroService>(ParametroService);\n    repository = module.get<ParametroRepository>(ParametroRepository);\n    cacheManager = module.get<Cache>(CACHE_MANAGER);\n\n    // Limpar todos os mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n    expect(repository).toBeDefined();\n    expect(cacheManager).toBeDefined();\n  });\n\n  describe('buscarPorChave', () => {\n    it('deve retornar um parâmetro pelo cache quando disponível', async () => {\n      // Arrange\n      const parametroMock = {\n        id: '1',\n        chave: 'sistema.nome',\n        valor: 'PGBen',\n        tipo: ParametroTipoEnum.STRING,\n        descricao: 'Nome do sistema',\n        categoria: 'sistema',\n      };\n      \n      jest.spyOn(cacheManager, 'get').mockResolvedValue(parametroMock);\n      \n      // Act\n      const resultado = await service.buscarPorChave('sistema.nome');\n      \n      // Assert\n      expect(resultado).toEqual(parametroMock);\n      expect(cacheManager.get).toHaveBeenCalledWith('parametro:sistema.nome');\n      expect(repository.findByChave).not.toHaveBeenCalled();\n    });\n\n    it('deve retornar um parâmetro do repositório quando não estiver no cache', async () => {\n      // Arrange\n      const parametroMock = {\n        id: '1',\n        chave: 'sistema.nome',\n        valor: 'PGBen',\n        tipo: ParametroTipoEnum.STRING,\n        descricao: 'Nome do sistema',\n        categoria: 'sistema',\n      };\n      \n      jest.spyOn(cacheManager, 'get').mockResolvedValue(null);\n      jest.spyOn(repository, 'findByChave').mockResolvedValue(parametroMock);\n      jest.spyOn(cacheManager, 'set').mockResolvedValue(undefined);\n      \n      // Act\n      const resultado = await service.buscarPorChave('sistema.nome');\n      \n      // Assert\n      expect(resultado).toEqual(parametroMock);\n      expect(cacheManager.get).toHaveBeenCalledWith('parametro:sistema.nome');\n      expect(repository.findByChave).toHaveBeenCalledWith('sistema.nome');\n      expect(cacheManager.set).toHaveBeenCalledWith(\n        'parametro:sistema.nome',\n        parametroMock,\n        { ttl: 3600 }\n      );\n    });\n\n    it('deve lançar NotFoundException quando o parâmetro não for encontrado', async () => {\n      // Arrange\n      jest.spyOn(cacheManager, 'get').mockResolvedValue(null);\n      jest.spyOn(repository, 'findByChave').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.buscarPorChave('parametro.inexistente'))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(cacheManager.get).toHaveBeenCalledWith('parametro:parametro.inexistente');\n      expect(repository.findByChave).toHaveBeenCalledWith('parametro.inexistente');\n    });\n  });\n\n  describe('buscarTodos', () => {\n    it('deve retornar todos os parâmetros', async () => {\n      // Arrange\n      const parametrosMock = [\n        {\n          id: '1',\n          chave: 'sistema.nome',\n          valor: 'PGBen',\n          tipo: ParametroTipoEnum.STRING,\n          descricao: 'Nome do sistema',\n          categoria: 'sistema',\n        },\n        {\n          id: '2',\n          chave: 'sistema.versao',\n          valor: '1.0.0',\n          tipo: ParametroTipoEnum.STRING,\n          descricao: 'Versão do sistema',\n          categoria: 'sistema',\n        },\n      ];\n      \n      jest.spyOn(repository, 'findAll').mockResolvedValue(parametrosMock);\n      \n      // Act\n      const resultado = await service.buscarTodos();\n      \n      // Assert\n      expect(resultado).toEqual(parametrosMock);\n      expect(repository.findAll).toHaveBeenCalled();\n    });\n  });\n\n  describe('buscarPorCategoria', () => {\n    it('deve retornar parâmetros filtrados por categoria', async () => {\n      // Arrange\n      const parametrosMock = [\n        {\n          id: '1',\n          chave: 'sistema.nome',\n          valor: 'PGBen',\n          tipo: ParametroTipoEnum.STRING,\n          descricao: 'Nome do sistema',\n          categoria: 'sistema',\n        },\n        {\n          id: '2',\n          chave: 'sistema.versao',\n          valor: '1.0.0',\n          tipo: ParametroTipoEnum.STRING,\n          descricao: 'Versão do sistema',\n          categoria: 'sistema',\n        },\n      ];\n      \n      jest.spyOn(repository, 'findByCategoria').mockResolvedValue(parametrosMock);\n      \n      // Act\n      const resultado = await service.buscarPorCategoria('sistema');\n      \n      // Assert\n      expect(resultado).toEqual(parametrosMock);\n      expect(repository.findByCategoria).toHaveBeenCalledWith('sistema');\n    });\n  });\n\n  describe('criar', () => {\n    it('deve criar um novo parâmetro com sucesso', async () => {\n      // Arrange\n      const dto: ParametroCreateDto = {\n        chave: 'novo.parametro',\n        valor: 'Valor do novo parâmetro',\n        tipo: ParametroTipoEnum.STRING,\n        descricao: 'Descrição do novo parâmetro',\n        categoria: 'novo',\n      };\n      \n      const parametroMock = {\n        id: '3',\n        ...dto,\n      };\n      \n      jest.spyOn(repository, 'findByChave').mockResolvedValue(null);\n      jest.spyOn(repository, 'save').mockResolvedValue(parametroMock);\n      jest.spyOn(cacheManager, 'set').mockResolvedValue(undefined);\n      \n      // Act\n      const resultado = await service.criar(dto);\n      \n      // Assert\n      expect(resultado).toEqual(parametroMock);\n      expect(repository.findByChave).toHaveBeenCalledWith('novo.parametro');\n      expect(repository.save).toHaveBeenCalledWith(expect.objectContaining(dto));\n      expect(cacheManager.set).toHaveBeenCalledWith(\n        'parametro:novo.parametro',\n        parametroMock,\n        { ttl: 3600 }\n      );\n    });\n\n    it('deve lançar BadRequestException ao tentar criar um parâmetro com chave existente', async () => {\n      // Arrange\n      const dto: ParametroCreateDto = {\n        chave: 'parametro.existente',\n        valor: 'Valor do parâmetro',\n        tipo: ParametroTipoEnum.STRING,\n        descricao: 'Descrição do parâmetro',\n        categoria: 'existente',\n      };\n      \n      const parametroExistente = {\n        id: '4',\n        ...dto,\n      };\n      \n      jest.spyOn(repository, 'findByChave').mockResolvedValue(parametroExistente);\n      \n      // Act & Assert\n      await expect(service.criar(dto))\n        .rejects\n        .toThrow(BadRequestException);\n      \n      expect(repository.findByChave).toHaveBeenCalledWith('parametro.existente');\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('atualizar', () => {\n    it('deve atualizar um parâmetro existente com sucesso', async () => {\n      // Arrange\n      const chave = 'parametro.existente';\n      const dto: ParametroUpdateDto = {\n        valor: 'Novo valor',\n        descricao: 'Nova descrição',\n        categoria: 'categoria-atualizada',\n      };\n      \n      const parametroExistente = {\n        id: '5',\n        chave,\n        valor: 'Valor antigo',\n        tipo: ParametroTipoEnum.STRING,\n        descricao: 'Descrição antiga',\n        categoria: 'categoria-antiga',\n      };\n      \n      const parametroAtualizado = {\n        ...parametroExistente,\n        ...dto,\n      };\n      \n      jest.spyOn(repository, 'findByChave').mockResolvedValue(parametroExistente);\n      jest.spyOn(repository, 'save').mockResolvedValue(parametroAtualizado);\n      jest.spyOn(cacheManager, 'set').mockResolvedValue(undefined);\n      \n      // Act\n      const resultado = await service.atualizar(chave, dto);\n      \n      // Assert\n      expect(resultado).toEqual(parametroAtualizado);\n      expect(repository.findByChave).toHaveBeenCalledWith(chave);\n      expect(repository.save).toHaveBeenCalledWith(expect.objectContaining({\n        ...parametroExistente,\n        ...dto,\n      }));\n      expect(cacheManager.set).toHaveBeenCalledWith(\n        `parametro:${chave}`,\n        parametroAtualizado,\n        { ttl: 3600 }\n      );\n    });\n\n    it('deve lançar NotFoundException ao tentar atualizar um parâmetro inexistente', async () => {\n      // Arrange\n      const chave = 'parametro.inexistente';\n      const dto: ParametroUpdateDto = {\n        valor: 'Novo valor',\n        descricao: 'Nova descrição',\n        categoria: 'nova-categoria',\n      };\n      \n      jest.spyOn(repository, 'findByChave').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.atualizar(chave, dto))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(repository.findByChave).toHaveBeenCalledWith(chave);\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('remover', () => {\n    it('deve remover um parâmetro existente com sucesso', async () => {\n      // Arrange\n      const chave = 'parametro.existente';\n      const parametroExistente = {\n        id: '6',\n        chave,\n        valor: 'Valor',\n        tipo: ParametroTipoEnum.STRING,\n        descricao: 'Descrição',\n        categoria: 'categoria',\n      };\n      \n      jest.spyOn(repository, 'findByChave').mockResolvedValue(parametroExistente);\n      jest.spyOn(repository, 'remove').mockResolvedValue(undefined);\n      jest.spyOn(cacheManager, 'del').mockResolvedValue(undefined);\n      \n      // Act\n      await service.remover(chave);\n      \n      // Assert\n      expect(repository.findByChave).toHaveBeenCalledWith(chave);\n      expect(repository.remove).toHaveBeenCalledWith(parametroExistente);\n      expect(cacheManager.del).toHaveBeenCalledWith(`parametro:${chave}`);\n    });\n\n    it('deve lançar NotFoundException ao tentar remover um parâmetro inexistente', async () => {\n      // Arrange\n      const chave = 'parametro.inexistente';\n      \n      jest.spyOn(repository, 'findByChave').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.remover(chave))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(repository.findByChave).toHaveBeenCalledWith(chave);\n      expect(repository.remove).not.toHaveBeenCalled();\n      expect(cacheManager.del).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('obterValorTipado', () => {\n    it('deve retornar o valor tipado para um parâmetro existente', async () => {\n      // Arrange\n      const chave = 'numero.parametro';\n      const parametroMock = {\n        id: '7',\n        chave,\n        valor: '123',\n        tipo: ParametroTipoEnum.NUMBER,\n        descricao: 'Parâmetro numérico',\n        categoria: 'numeros',\n      };\n      \n      jest.spyOn(service, 'buscarPorChave').mockResolvedValue(parametroMock);\n      \n      // Act\n      const resultado = await service.obterValorTipado<number>(chave);\n      \n      // Assert\n      expect(resultado).toBe(123);\n      expect(service.buscarPorChave).toHaveBeenCalledWith(chave);\n    });\n\n    it('deve retornar o valor padrão quando o parâmetro não existir', async () => {\n      // Arrange\n      const chave = 'parametro.inexistente';\n      const valorPadrao = 'valor padrão';\n      \n      jest.spyOn(service, 'buscarPorChave').mockImplementation(() => {\n        throw new NotFoundException(`Parâmetro com chave '${chave}' não encontrado`);\n      });\n      \n      // Act\n      const resultado = await service.obterValorTipado<string>(chave, valorPadrao);\n      \n      // Assert\n      expect(resultado).toBe(valorPadrao);\n      expect(service.buscarPorChave).toHaveBeenCalledWith(chave);\n    });\n  });\n});\n"],"version":3}