91d9e9c0932897e4f2e4a5783c22a961
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var PasswordResetService_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordResetService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const config_1 = require("@nestjs/config");
const schedule_1 = require("@nestjs/schedule");
const jwt_1 = require("@nestjs/jwt");
const crypto = __importStar(require("crypto"));
const bcrypt = __importStar(require("bcrypt"));
const password_reset_token_entity_1 = require("../../entities/password-reset-token.entity");
const usuario_repository_1 = require("../../modules/usuario/repositories/usuario.repository");
const email_service_1 = require("../../common/services/email.service");
const audit_service_1 = require("../../audit/services/audit.service");
const audit_log_entity_1 = require("../../entities/audit-log.entity");
let PasswordResetService = PasswordResetService_1 = class PasswordResetService {
    passwordResetTokenRepository;
    usuarioRepository;
    emailService;
    auditService;
    configService;
    jwtService;
    dataSource;
    logger = new common_1.Logger(PasswordResetService_1.name);
    tokenExpirationMinutes;
    maxAttemptsPerToken;
    maxRequestsPerHour;
    constructor(passwordResetTokenRepository, usuarioRepository, emailService, auditService, configService, jwtService, dataSource) {
        this.passwordResetTokenRepository = passwordResetTokenRepository;
        this.usuarioRepository = usuarioRepository;
        this.emailService = emailService;
        this.auditService = auditService;
        this.configService = configService;
        this.jwtService = jwtService;
        this.dataSource = dataSource;
        this.tokenExpirationMinutes = this.configService.get('PASSWORD_RESET_EXPIRATION_MINUTES', 15);
        this.maxAttemptsPerToken = this.configService.get('PASSWORD_RESET_MAX_ATTEMPTS', 3);
        this.maxRequestsPerHour = this.configService.get('PASSWORD_RESET_MAX_REQUESTS_PER_HOUR', 5);
        // Iniciar limpeza automática de tokens expirados
        this.startTokenCleanup();
    }
    /**
     * Solicita recuperação de senha
     */
    async requestPasswordReset(requestDto, clientInfo) {
        const { email } = requestDto;
        try {
            // Buscar usuário pelo email
            const usuario = await this.usuarioRepository.findByEmail(email.toLowerCase());
            // Por segurança, sempre retornamos sucesso mesmo se o email não existir
            if (!usuario) {
                this.logger.warn(`Tentativa de reset para email inexistente: ${email}`, {
                    ip: clientInfo.ip,
                    userAgent: clientInfo.userAgent,
                });
                await this.auditService.logSecurityEvent(audit_log_entity_1.AuditAction.PASSWORD_RESET, `Tentativa de reset para email inexistente: ${email}`, undefined, audit_log_entity_1.AuditSeverity.MEDIUM, { email }, { ip: clientInfo.ip, userAgent: clientInfo.userAgent });
                return {
                    message: 'Se o email existir, você receberá instruções para redefinir sua senha.',
                    expiresInMinutes: this.tokenExpirationMinutes,
                };
            }
            // Verificar rate limiting
            await this.checkRateLimit(usuario.id, clientInfo.ip);
            // Invalidar tokens anteriores do usuário
            await this.invalidateUserTokens(usuario.id, 'new_request');
            // Gerar novo token
            const token = this.generateSecureToken();
            const tokenHash = await this.hashToken(token);
            const expiresAt = new Date(Date.now() + this.tokenExpirationMinutes * 60 * 1000);
            // Salvar token no banco
            const passwordResetToken = this.passwordResetTokenRepository.create({
                token: token.substring(0, 8) + '...', // Armazenar apenas parte do token para auditoria
                token_hash: tokenHash,
                usuario_id: usuario.id,
                expires_at: expiresAt,
                client_ip: clientInfo.ip,
                user_agent: clientInfo.userAgent,
                metadata: {
                    origin: clientInfo.origin,
                    referer: clientInfo.referer,
                },
            });
            await this.passwordResetTokenRepository.save(passwordResetToken);
            // Enviar email
            await this.sendPasswordResetEmail(usuario, token, expiresAt);
            // Log de auditoria
            await this.auditService.logUserAction(usuario.id, audit_log_entity_1.AuditAction.PASSWORD_RESET, 'password_reset_token', passwordResetToken.id, 'Solicitação de recuperação de senha', { ip: clientInfo.ip, userAgent: clientInfo.userAgent });
            this.logger.log(`Token de recuperação gerado para usuário ${usuario.id}`);
            return {
                message: 'Se o email existir, você receberá instruções para redefinir sua senha.',
                expiresInMinutes: this.tokenExpirationMinutes,
            };
        }
        catch (error) {
            this.logger.error('Erro ao solicitar recuperação de senha', error.stack);
            await this.auditService.logSecurityEvent(audit_log_entity_1.AuditAction.PASSWORD_RESET, `Erro ao processar solicitação de reset: ${error.message}`, undefined, audit_log_entity_1.AuditSeverity.HIGH, { email, error: error.message }, { ip: clientInfo.ip, userAgent: clientInfo.userAgent });
            throw new common_1.InternalServerErrorException('Erro interno. Tente novamente mais tarde.');
        }
    }
    /**
     * Redefine a senha usando o token
     */
    async resetPassword(resetDto, clientInfo) {
        const { token, newPassword, confirmPassword } = resetDto;
        // Validar senhas
        if (newPassword !== confirmPassword) {
            throw new common_1.BadRequestException('As senhas não coincidem');
        }
        if (newPassword.length < 8) {
            throw new common_1.BadRequestException('A senha deve ter pelo menos 8 caracteres');
        }
        try {
            // Buscar token válido
            const resetToken = await this.findValidToken(token);
            if (!resetToken) {
                await this.auditService.logSecurityEvent(audit_log_entity_1.AuditAction.PASSWORD_RESET, 'Tentativa de uso de token inválido para reset de senha', undefined, audit_log_entity_1.AuditSeverity.HIGH, { tokenPrefix: token.substring(0, 8) }, { ip: clientInfo.ip, userAgent: clientInfo.userAgent });
                throw new common_1.UnauthorizedException('Token inválido ou expirado');
            }
            // Carregar usuário pelo ID
            const usuario = await this.usuarioRepository.findById(resetToken.usuario_id);
            if (!usuario) {
                throw new common_1.NotFoundException('Usuário não encontrado');
            }
            // Verificar se a nova senha é diferente da atual
            const isSamePassword = await bcrypt.compare(newPassword, usuario.senhaHash);
            if (isSamePassword) {
                throw new common_1.BadRequestException('A nova senha deve ser diferente da senha atual');
            }
            // Hash da nova senha
            const hashedPassword = await bcrypt.hash(newPassword, 12);
            // Atualizar senha do usuário usando query builder
            await this.passwordResetTokenRepository
                .manager
                .createQueryBuilder()
                .update('usuario')
                .set({
                senha: hashedPassword,
                updated_at: new Date()
            })
                .where("id = :id", { id: usuario.id })
                .execute();
            // Marcar token como usado
            resetToken.markAsUsed('password_changed');
            await this.passwordResetTokenRepository.save(resetToken);
            // Invalidar outros tokens do usuário
            await this.invalidateUserTokens(usuario.id, 'password_changed', resetToken.id);
            // Enviar email de confirmação
            await this.sendPasswordResetConfirmationEmail(usuario, clientInfo);
            // Log de auditoria
            await this.auditService.logUserAction(usuario.id, audit_log_entity_1.AuditAction.PASSWORD_RESET, 'usuario', usuario.id, 'Senha redefinida com sucesso', { ip: clientInfo.ip, userAgent: clientInfo.userAgent });
            await this.auditService.logSecurityEvent(audit_log_entity_1.AuditAction.PASSWORD_RESET, `Senha redefinida com sucesso para o usuário ${usuario.email}`, usuario.id, audit_log_entity_1.AuditSeverity.MEDIUM, { email: usuario.email }, { ip: clientInfo.ip, userAgent: clientInfo.userAgent });
            this.logger.log(`Senha redefinida com sucesso para usuário ${usuario.id}`);
            return {
                message: 'Senha redefinida com sucesso. Você pode fazer login com sua nova senha.',
            };
        }
        catch (error) {
            // Registrar erro e redirecionar
            const foundToken = await this.findValidToken(token);
            if (foundToken) {
                foundToken.markAsUsed('password_reset_error');
                await this.passwordResetTokenRepository.save(foundToken);
            }
            this.logger.error('Erro ao redefinir senha', error.stack);
            await this.auditService.logSecurityEvent(audit_log_entity_1.AuditAction.PASSWORD_RESET, `Erro ao redefinir senha: ${error.message}`, foundToken?.usuario?.id, audit_log_entity_1.AuditSeverity.HIGH, { tokenPrefix: token.substring(0, 8), error: error.message }, { ip: clientInfo.ip, userAgent: clientInfo.userAgent });
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.UnauthorizedException ||
                error instanceof common_1.NotFoundException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Erro interno. Tente novamente mais tarde.');
        }
    }
    /**
     * Valida se um token é válido
     */
    async validateToken(token) {
        try {
            const resetToken = await this.findValidToken(token);
            if (!resetToken) {
                return { valid: false };
            }
            return {
                valid: true,
                expiresInMinutes: resetToken.getMinutesUntilExpiration(),
            };
        }
        catch (error) {
            this.logger.error('Erro ao validar token', error.stack);
            return { valid: false };
        }
    }
    /**
     * Obtém estatísticas de recuperação de senha
     */
    async getPasswordResetStats() {
        const now = new Date();
        const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);
        const [totalRequests, activeTokens, expiredTokens, usedTokens, requestsLast24h] = await Promise.all([
            this.passwordResetTokenRepository.count(),
            this.passwordResetTokenRepository.count({
                where: {
                    is_used: false,
                    expires_at: (0, typeorm_2.LessThan)(now),
                },
            }),
            this.passwordResetTokenRepository.count({
                where: {
                    is_used: false,
                    expires_at: (0, typeorm_2.LessThan)(now),
                },
            }),
            this.passwordResetTokenRepository.count({
                where: { is_used: true },
            }),
            this.passwordResetTokenRepository.count({
                where: {
                    created_at: (0, typeorm_2.LessThan)(last24h),
                },
            }),
        ]);
        // Calcular tempo médio de uso
        const usedTokensWithTime = await this.passwordResetTokenRepository
            .createQueryBuilder('token')
            .select('AVG(EXTRACT(EPOCH FROM (token.used_at - token.created_at)) / 60)', 'avgMinutes')
            .where('token.is_used = true AND token.used_at IS NOT NULL')
            .getRawOne();
        const averageTimeToUse = parseFloat(usedTokensWithTime?.avgMinutes || '0');
        return {
            totalRequests,
            activeTokens,
            expiredTokens,
            usedTokens,
            requestsLast24h,
            averageTimeToUse,
        };
    }
    /**
     * Limpeza automática de tokens expirados (executa a cada hora)
     */
    async cleanupExpiredTokens() {
        try {
            const now = new Date();
            const result = await this.passwordResetTokenRepository.delete({
                expires_at: (0, typeorm_2.LessThan)(now),
                is_used: false,
            });
            if (result.affected && result.affected > 0) {
                this.logger.log(`Removidos ${result.affected} tokens de recuperação expirados`);
            }
            return result.affected || 0;
        }
        catch (error) {
            this.logger.error('Erro na limpeza de tokens expirados', error.stack);
            return 0;
        }
    }
    /**
     * Limpeza de tokens antigos usados (executa diariamente)
     */
    async cleanupOldUsedTokens() {
        try {
            const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
            const result = await this.passwordResetTokenRepository.delete({
                is_used: true,
                used_at: (0, typeorm_2.LessThan)(thirtyDaysAgo),
            });
            if (result.affected && result.affected > 0) {
                this.logger.log(`Removidos ${result.affected} tokens de recuperação antigos`);
            }
            return result.affected || 0;
        }
        catch (error) {
            this.logger.error('Erro na limpeza de tokens antigos', error.stack);
            return 0;
        }
    }
    // Métodos privados
    generateSecureToken() {
        return crypto.randomBytes(32).toString('hex');
    }
    async hashToken(token) {
        return bcrypt.hash(token, 10);
    }
    async findValidToken(token) {
        const tokens = await this.passwordResetTokenRepository.find({
            where: {
                is_used: false,
                expires_at: (0, typeorm_2.LessThan)(new Date()),
            },
            relations: ['usuario'],
        });
        for (const resetToken of tokens) {
            const isValid = await bcrypt.compare(token, resetToken.token_hash);
            if (isValid && resetToken.isValid()) {
                // Incrementar tentativas
                resetToken.incrementAttempts();
                await this.passwordResetTokenRepository.save(resetToken);
                // Verificar limite de tentativas
                if (resetToken.attempts > this.maxAttemptsPerToken) {
                    resetToken.markAsUsed('max_attempts_exceeded');
                    await this.passwordResetTokenRepository.save(resetToken);
                    return null;
                }
                return resetToken;
            }
        }
        return null;
    }
    async checkRateLimit(usuarioId, ip) {
        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
        const recentRequests = await this.passwordResetTokenRepository.count({
            where: [
                {
                    usuario_id: usuarioId,
                    created_at: (0, typeorm_2.LessThan)(oneHourAgo),
                },
                {
                    client_ip: ip,
                    created_at: (0, typeorm_2.LessThan)(oneHourAgo),
                },
            ],
        });
        if (recentRequests >= this.maxRequestsPerHour) {
            throw new common_1.BadRequestException('Muitas solicitações de recuperação. Tente novamente mais tarde.');
        }
    }
    async invalidateUserTokens(usuarioId, reason, excludeTokenId) {
        const query = this.passwordResetTokenRepository
            .createQueryBuilder()
            .update(password_reset_token_entity_1.PasswordResetToken)
            .set({
            is_used: true,
            invalidation_reason: reason,
            updated_at: new Date(),
        })
            .where('usuario_id = :usuarioId', { usuarioId })
            .andWhere('is_used = false');
        if (excludeTokenId) {
            query.andWhere('id != :excludeTokenId', { excludeTokenId });
        }
        await query.execute();
    }
    async sendPasswordResetEmail(usuario, token, expiresAt) {
        const expiresInMinutes = Math.ceil((expiresAt.getTime() - Date.now()) / (1000 * 60));
        await this.emailService.sendPasswordResetEmail(usuario.email, usuario.nome, token, expiresInMinutes);
    }
    async sendPasswordResetConfirmationEmail(usuario, clientInfo) {
        await this.emailService.sendPasswordResetConfirmationEmail(usuario.email, usuario.nome);
    }
    /**
     * Inicia a limpeza automática de tokens expirados
     * Migrado do PasswordRecoveryService
     */
    startTokenCleanup() {
        const CLEANUP_INTERVAL = 24 * 60 * 60 * 1000; // 24 horas
        // Executar limpeza a cada 24 horas
        setInterval(async () => {
            try {
                await this.cleanupExpiredTokens();
            }
            catch (error) {
                this.logger.error(`Erro na limpeza automática de tokens: ${error.message}`);
            }
        }, CLEANUP_INTERVAL);
        // Executar limpeza de tokens usados a cada 24 horas
        setInterval(async () => {
            try {
                await this.cleanupOldUsedTokens();
            }
            catch (error) {
                this.logger.error(`Erro na limpeza de tokens usados: ${error.message}`);
            }
        }, CLEANUP_INTERVAL);
    }
    /**
     * Obtém estatísticas de tokens de recuperação
     * Migrado do PasswordRecoveryService
     * @returns Estatísticas dos tokens
     */
    async getTokenStats() {
        const now = new Date();
        const [total, active, expired, used] = await Promise.all([
            this.passwordResetTokenRepository.count(),
            this.passwordResetTokenRepository.count({
                where: {
                    is_used: false,
                    expires_at: (0, typeorm_2.LessThan)(now),
                },
            }),
            this.passwordResetTokenRepository.count({
                where: {
                    expires_at: (0, typeorm_2.LessThan)(now),
                },
            }),
            this.passwordResetTokenRepository.count({
                where: {
                    is_used: true,
                },
            }),
        ]);
        return { total, active, expired, used };
    }
};
exports.PasswordResetService = PasswordResetService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_HOUR),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], PasswordResetService.prototype, "cleanupExpiredTokens", null);
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_2AM),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], PasswordResetService.prototype, "cleanupOldUsedTokens", null);
exports.PasswordResetService = PasswordResetService = PasswordResetService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(password_reset_token_entity_1.PasswordResetToken)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof usuario_repository_1.UsuarioRepository !== "undefined" && usuario_repository_1.UsuarioRepository) === "function" ? _b : Object, typeof (_c = typeof email_service_1.EmailService !== "undefined" && email_service_1.EmailService) === "function" ? _c : Object, typeof (_d = typeof audit_service_1.AuditService !== "undefined" && audit_service_1.AuditService) === "function" ? _d : Object, typeof (_e = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _e : Object, typeof (_f = typeof jwt_1.JwtService !== "undefined" && jwt_1.JwtService) === "function" ? _f : Object, typeof (_g = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _g : Object])
], PasswordResetService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,