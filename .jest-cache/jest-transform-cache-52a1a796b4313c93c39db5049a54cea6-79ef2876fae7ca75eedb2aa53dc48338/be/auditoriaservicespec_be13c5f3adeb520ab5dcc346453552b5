c62221d37ef2e632985e00f7f4fd9e44
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const auditoria_service_1 = require("../services/auditoria.service");
const entities_1 = require("../../../entities");
const create_log_auditoria_dto_1 = require("../dto/create-log-auditoria.dto");
const tipo_operacao_enum_1 = require("../../auditoria/enums/tipo-operacao.enum");
const mockLogAuditoriaRepository = () => ({
    create: jest.fn(),
    save: jest.fn(),
    findOne: jest.fn(),
    find: jest.fn(),
    createQueryBuilder: jest.fn(() => ({
        where: jest.fn().mockReturnThis(),
        andWhere: jest.fn().mockReturnThis(),
        orderBy: jest.fn().mockReturnThis(),
        skip: jest.fn().mockReturnThis(),
        take: jest.fn().mockReturnThis(),
        getManyAndCount: jest.fn(),
    })),
});
describe('AuditoriaService', () => {
    let service;
    let repository;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auditoria_service_1.AuditoriaService,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.LogAuditoria),
                    useFactory: mockLogAuditoriaRepository,
                },
            ],
        }).compile();
        service = module.get(auditoria_service_1.AuditoriaService);
        repository = module.get((0, typeorm_1.getRepositoryToken)(entities_1.LogAuditoria));
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
    describe('create', () => {
        it('deve criar um log de auditoria', async () => {
            const dto = new create_log_auditoria_dto_1.CreateLogAuditoriaDto();
            dto.tipo_operacao = tipo_operacao_enum_1.TipoOperacao.CREATE;
            dto.entidade_afetada = 'Documento';
            dto.entidade_id = '123';
            dto.descricao = 'Criação de documento';
            dto.dados_anteriores = {};
            dto.dados_novos = { nome: 'Documento 1' };
            dto.usuario_id = 'user-123';
            dto.ip_origem = '127.0.0.1';
            const createLogAuditoriaDto = dto;
            const logAuditoria = new entities_1.LogAuditoria();
            Object.assign(logAuditoria, createLogAuditoriaDto, { id: 'log-123' });
            jest.spyOn(repository, 'create').mockReturnValue(logAuditoria);
            jest.spyOn(repository, 'save').mockResolvedValue(logAuditoria);
            const result = await service.create(createLogAuditoriaDto);
            expect(repository.create).toHaveBeenCalledWith(createLogAuditoriaDto);
            expect(repository.save).toHaveBeenCalledWith(logAuditoria);
            expect(result).toEqual(logAuditoria);
        });
    });
    describe('findAll', () => {
        it('deve retornar logs de auditoria paginados', async () => {
            const queryParams = {
                pagina: 1,
                itens_por_pagina: 10,
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'Documento',
                usuario_id: 'user-123',
                data_inicial: '2025-01-01T00:00:00Z',
                data_final: '2025-01-31T23:59:59Z',
            };
            const logs = [new entities_1.LogAuditoria(), new entities_1.LogAuditoria()];
            const count = 2;
            const queryBuilder = repository.createQueryBuilder();
            jest
                .spyOn(queryBuilder, 'getManyAndCount')
                .mockResolvedValue([logs, count]);
            const result = await service.findAll(queryParams);
            expect(repository.createQueryBuilder).toHaveBeenCalled();
            expect(queryBuilder.where).toHaveBeenCalled();
            expect(queryBuilder.andWhere).toHaveBeenCalledTimes(4);
            expect(queryBuilder.orderBy).toHaveBeenCalled();
            expect(queryBuilder.skip).toHaveBeenCalledWith(0);
            expect(queryBuilder.take).toHaveBeenCalledWith(10);
            expect(result).toEqual({
                data: logs,
                total: count,
                page: 1,
                limit: 10,
                totalPages: 1,
            });
        });
    });
    describe('findOne', () => {
        it('deve retornar um log de auditoria pelo ID', async () => {
            const logId = 'log-123';
            const logAuditoria = new entities_1.LogAuditoria();
            logAuditoria.id = logId;
            jest.spyOn(repository, 'findOne').mockResolvedValue(logAuditoria);
            const result = await service.findOne(logId);
            expect(repository.findOne).toHaveBeenCalledWith({ where: { id: logId } });
            expect(result).toEqual(logAuditoria);
        });
        it('deve retornar null quando o log não existe', async () => {
            const logId = 'non-existent-id';
            jest.spyOn(repository, 'findOne').mockResolvedValue(null);
            const result = await service.findOne(logId);
            expect(repository.findOne).toHaveBeenCalledWith({ where: { id: logId } });
            expect(result).toBeNull();
        });
    });
    describe('exportarLogs', () => {
        it('deve exportar logs de auditoria', async () => {
            const queryParams = {
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                entidade_afetada: 'Documento',
                usuario_id: 'user-123',
                data_inicial: '2025-01-01T00:00:00Z',
                data_final: '2025-01-31T23:59:59Z',
            };
            const logs = [
                {
                    id: 'log-1',
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'Documento',
                    entidade_id: 'doc-1',
                    descricao: 'Criação de documento',
                    created_at: new Date('2025-01-15'),
                    usuario_id: 'user-123',
                },
                {
                    id: 'log-2',
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.UPDATE,
                    entidade_afetada: 'Documento',
                    entidade_id: 'doc-1',
                    descricao: 'Atualização de documento',
                    created_at: new Date('2025-01-16'),
                    usuario_id: 'user-123',
                },
            ];
            jest.spyOn(repository, 'find').mockResolvedValue(logs);
            // Adicionando o método exportarLogs ao serviço para o teste
            service['exportarLogs'] = jest.fn().mockResolvedValue(logs);
            const result = await service['exportarLogs'](queryParams);
            expect(repository.find).toHaveBeenCalled();
            expect(result).toHaveLength(2);
            expect(result[0]).toHaveProperty('id', 'log-1');
            expect(result[1]).toHaveProperty('id', 'log-2');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,