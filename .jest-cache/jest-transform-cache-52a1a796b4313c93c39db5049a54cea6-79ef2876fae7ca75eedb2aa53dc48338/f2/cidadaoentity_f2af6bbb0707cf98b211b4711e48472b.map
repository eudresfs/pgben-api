{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\cidadao.entity.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\cidadao.entity.ts"],"sourcesContent":["import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  DeleteDateColumn,\n  Index,\n  OneToMany,\n  ManyToOne,\n  JoinColumn,\n} from 'typeorm';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  Length,\n  IsOptional,\n  IsEnum,\n  Validate,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { CPFValidator } from '../modules/cidadao/validators/cpf-validator';\nimport { NISValidator } from '../modules/cidadao/validators/nis-validator';\nimport { TelefoneValidator } from '../modules/cidadao/validators/telefone-validator';\nimport { PapelCidadao } from './papel-cidadao.entity';\nimport { ComposicaoFamiliar } from './composicao-familiar.entity';\nimport { Sexo } from '../enums/sexo.enum';\nimport { Unidade } from './unidade.entity';\nimport { EstadoCivil } from '../enums/estado-civil.enum';\n\n\n@Entity('cidadao')\n@Index(['cpf'], { unique: true })\n@Index(['nis'], { unique: true, where: 'nis IS NOT NULL' })\n@Index(['nome'])\n@Index(['telefone'])\n@Index(['created_at'])\n@Index(['unidade_id'])\n@Index('idx_cidadao_endereco_bairro') \n@Index('idx_cidadao_endereco_cidade') \n@Index('idx_cidadao_nome_trgm')\nexport class Cidadao {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  @IsNotEmpty({ message: 'Nome é obrigatório' })\n  @IsString({ message: 'Nome deve ser uma string' })\n  @MinLength(3, { message: 'Nome deve ter no mínimo 3 caracteres' })\n  @MaxLength(100, { message: 'Nome deve ter no máximo 100 caracteres' })\n  nome: string;\n\n  @Column()\n  @IsOptional()\n  nome_social: string;\n\n  @Column({ unique: true })\n  @IsNotEmpty({ message: 'CPF é obrigatório' })\n  @Length(11, 14, { message: 'CPF deve ter entre 11 e 14 caracteres' })\n  @Validate(CPFValidator, { message: 'CPF inválido' })\n  cpf: string;\n\n  @Column()\n  @IsNotEmpty({ message: 'RG é obrigatório' })\n  rg: string;\n\n  @Column({ unique: true, nullable: false })\n  @Length(11, 11, { message: 'NIS deve ter 11 caracteres' })\n  @Validate(NISValidator, { message: 'NIS inválido' })\n  nis: string;\n\n  @Column({ unique: true })\n  @IsNotEmpty({ message: 'Nome da mãe é obrigatório' })\n  @IsString({ message: 'Nome da mãe deve ser uma string' })\n  @MinLength(3, { message: 'Nome da mãe deve ter no mínimo 3 caracteres' })\n  @MaxLength(100, { message: 'Nome da mãe deve ter no máximo 100 caracteres' })\n  nome_mae: string;\n\n  @Column({ unique: true })\n  @IsNotEmpty({ message: 'Naturalidade é obrigatório' })\n  naturalidade: string;\n\n  @Column({ nullable: false })\n  @IsNotEmpty({ message: 'Prontuario SUAS é obrigatório' })\n  prontuario_suas: string;\n\n  @Column({ type: 'date' })\n  @IsNotEmpty({ message: 'Data de nascimento é obrigatória' })\n  data_nascimento: Date;\n\n  @OneToMany(() => PapelCidadao, (papelCidadao) => papelCidadao.cidadao)\n  papeis: PapelCidadao[];\n\n  @OneToMany(() => ComposicaoFamiliar, (composicaoFamiliar) => composicaoFamiliar.cidadao)\n  composicao_familiar: ComposicaoFamiliar[];\n\n  @Column({\n    type: 'enum',\n    enum: Sexo,\n    enumName: 'sexo_enum',\n  })\n  @IsEnum(Sexo, { message: 'Sexo inválido' })\n  @IsNotEmpty({ message: 'Sexo é obrigatório' })\n  sexo: Sexo;\n\n  @Column({ nullable: false })\n  @IsNotEmpty({ message: 'Telefone é obrigatório' })\n  @Validate(TelefoneValidator, { message: 'Telefone inválido' })\n  telefone: string;\n\n  @Column({ nullable: true })\n  @IsOptional()\n  @IsEmail({}, { message: 'Email inválido' })\n  email: string;\n\n  @Column({\n    type: 'enum',\n    enum: EstadoCivil,\n    enumName: 'estado_civil_enum',\n  })\n  @IsEnum(Sexo, { message: 'Estado civil inválido' })\n  @IsNotEmpty({ message: 'Estado Civil é obrigatório' })\n  estado_civil: EstadoCivil;\n  \n\n  @Column('jsonb')\n  @IsNotEmpty({ message: 'Endereço é obrigatório' })\n  @Index()\n  endereco: {\n    logradouro: string;\n    numero: string;\n    complemento?: string;\n    bairro: string;\n    cidade: string;\n    estado: string;\n    cep: string;\n    ponto_referencia?: string;\n    tempo_de_residencia: number;\n  };\n\n  @Column({ type: 'uuid', nullable: false })\n  unidade_id: string;\n\n  @ManyToOne(() => Unidade, { nullable: false })\n  @JoinColumn({ name: 'unidade_id' })\n  unidade: Unidade;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @DeleteDateColumn()\n  removed_at: Date;\n\n  /**\n   * Verifica se o cidadão foi criado recentemente (últimas 24 horas)\n   * @returns true se foi criado nas últimas 24 horas\n   */\n  isCriadoRecentemente(): boolean {\n    const agora = new Date();\n    const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);\n    return this.created_at > umDiaAtras;\n  }\n\n  /**\n   * Calcula a idade do cidadão em anos\n   * @returns idade em anos\n   */\n  getIdade(): number {\n    const hoje = new Date();\n    const nascimento = new Date(this.data_nascimento);\n    let idade = hoje.getFullYear() - nascimento.getFullYear();\n    const mesAtual = hoje.getMonth();\n    const mesNascimento = nascimento.getMonth();\n    \n    if (mesAtual < mesNascimento || (mesAtual === mesNascimento && hoje.getDate() < nascimento.getDate())) {\n      idade--;\n    }\n    \n    return idade;\n  }\n\n  /**\n   * Verifica se o cidadão é maior de idade\n   * @returns true se é maior de idade\n   */\n  isMaiorIdade(): boolean {\n    return this.getIdade() >= 18;\n  }\n\n  /**\n   * Verifica se o cidadão é idoso (65+ anos)\n   * @returns true se é idoso\n   */\n  isIdoso(): boolean {\n    return this.getIdade() >= 65;\n  }\n\n  /**\n   * Verifica se o cidadão é criança (0-12 anos)\n   * @returns true se é criança\n   */\n  isCrianca(): boolean {\n    return this.getIdade() <= 12;\n  }\n\n  /**\n   * Verifica se o cidadão é adolescente (13-17 anos)\n   * @returns true se é adolescente\n   */\n  isAdolescente(): boolean {\n    const idade = this.getIdade();\n    return idade >= 13 && idade <= 17;\n  }\n\n  /**\n   * Verifica se tem nome social definido\n   * @returns true se tem nome social\n   */\n  temNomeSocial(): boolean {\n    return this.nome_social !== null && this.nome_social !== undefined && this.nome_social.trim() !== '';\n  }\n\n  /**\n   * Obtém o nome preferencial (nome social se existir, senão nome civil)\n   * @returns nome preferencial\n   */\n  getNomePreferencial(): string {\n    return this.temNomeSocial() ? this.nome_social : this.nome;\n  }\n\n  /**\n   * Verifica se tem email cadastrado\n   * @returns true se tem email\n   */\n  temEmail(): boolean {\n    return this.email !== null && this.email !== undefined && this.email.trim() !== '';\n  }\n\n  /**\n   * Obtém o endereço completo formatado\n   * @returns endereço formatado\n   */\n  getEnderecoCompleto(): string {\n    if (!this.endereco) return 'Endereço não informado';\n    \n    const { logradouro, numero, complemento, bairro, cidade, estado, cep } = this.endereco;\n    let endereco = `${logradouro}, ${numero}`;\n    \n    if (complemento) {\n      endereco += `, ${complemento}`;\n    }\n    \n    endereco += ` - ${bairro}, ${cidade}/${estado} - CEP: ${cep}`;\n    return endereco;\n  }\n\n  /**\n   * Verifica se o cidadão pertence a uma unidade específica\n   * @param unidadeId ID da unidade\n   * @returns true se pertence à unidade\n   */\n  pertenceAUnidade(unidadeId: string): boolean {\n    return this.unidade_id === unidadeId;\n  }\n\n  /**\n   * Verifica se o cidadão foi removido (soft delete)\n   * @returns true se foi removido\n   */\n  foiRemovido(): boolean {\n    return this.removed_at !== null && this.removed_at !== undefined;\n  }\n\n  /**\n   * Verifica se o cidadão está ativo\n   * @returns true se está ativo\n   */\n  isAtivo(): boolean {\n    return !this.foiRemovido();\n  }\n\n  /**\n   * Obtém um resumo das informações do cidadão\n   * @returns objeto com resumo das informações\n   */\n  getSummary(): {\n    id: string;\n    nome: string;\n    nomePreferencial: string;\n    cpf: string;\n    idade: number;\n    sexo: string;\n    telefone: string;\n    temEmail: boolean;\n    unidadeId: string;\n    ativo: boolean;\n    criadoEm: Date;\n  } {\n    return {\n      id: this.id,\n      nome: this.nome,\n      nomePreferencial: this.getNomePreferencial(),\n      cpf: this.cpf,\n      idade: this.getIdade(),\n      sexo: this.sexo,\n      telefone: this.telefone,\n      temEmail: this.temEmail(),\n      unidadeId: this.unidade_id,\n      ativo: this.isAtivo(),\n      criadoEm: this.created_at\n    };\n  }\n\n  /**\n   * Gera uma chave única para o cidadão\n   * @returns chave única\n   */\n  getUniqueKey(): string {\n    return `cidadao_${this.cpf}`;\n  }\n\n  /**\n   * Verifica se o estado do cidadão é consistente\n   * @returns true se está consistente\n   */\n  isConsistente(): boolean {\n    return (\n      this.id !== null &&\n      this.nome !== null &&\n      this.cpf !== null &&\n      this.nis !== null &&\n      this.data_nascimento !== null &&\n      this.unidade_id !== null &&\n      this.created_at !== null &&\n      this.updated_at !== null &&\n      this.created_at <= this.updated_at\n    );\n  }\n\n  /**\n   * Verifica se o cidadão nasceu em uma cidade específica\n   * @param cidade nome da cidade\n   * @returns true se nasceu na cidade\n   */\n  nasceuEm(cidade: string): boolean {\n    return this.naturalidade.toLowerCase().includes(cidade.toLowerCase());\n  }\n\n  /**\n   * Verifica se o cidadão mora em uma cidade específica\n   * @param cidade nome da cidade\n   * @returns true se mora na cidade\n   */\n  moraEm(cidade: string): boolean {\n    return this.endereco?.cidade?.toLowerCase() === cidade.toLowerCase();\n  }\n\n  /**\n   * Verifica se o cidadão mora em um bairro específico\n   * @param bairro nome do bairro\n   * @returns true se mora no bairro\n   */\n  moraNoBairro(bairro: string): boolean {\n    return this.endereco?.bairro?.toLowerCase() === bairro.toLowerCase();\n  }\n\n  /**\n   * Obtém a faixa etária do cidadão\n   * @returns faixa etária\n   */\n  getFaixaEtaria(): string {\n    const idade = this.getIdade();\n    \n    if (idade <= 12) return 'Criança';\n    if (idade <= 17) return 'Adolescente';\n    if (idade <= 29) return 'Jovem';\n    if (idade <= 59) return 'Adulto';\n    return 'Idoso';\n  }\n\n  /**\n   * Verifica se o cidadão tem papéis ativos\n   * @returns true se tem papéis ativos\n   */\n  temPapeisAtivos(): boolean {\n    return this.papeis && this.papeis.some(papel => papel.ativo);\n  }\n\n  /**\n   * Obtém o número de familiares cadastrados\n   * @returns número de familiares\n   */\n  getNumeroFamiliares(): number {\n    return this.composicao_familiar ? this.composicao_familiar.length : 0;\n  }\n\n  /**\n   * Verifica se tem composição familiar cadastrada\n   * @returns true se tem familiares\n   */\n  temComposicaoFamiliar(): boolean {\n    return this.getNumeroFamiliares() > 0;\n  }\n\n  /**\n   * Formata o CPF para exibição\n   * @returns CPF formatado\n   */\n  getCpfFormatado(): string {\n    const cpf = this.cpf.replace(/\\D/g, '');\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n  }\n\n  /**\n   * Formata o telefone para exibição\n   * @returns telefone formatado\n   */\n  getTelefoneFormatado(): string {\n    const telefone = this.telefone.replace(/\\D/g, '');\n    if (telefone.length === 11) {\n      return telefone.replace(/(\\d{2})(\\d{5})(\\d{4})/, '($1) $2-$3');\n    } else if (telefone.length === 10) {\n      return telefone.replace(/(\\d{2})(\\d{4})(\\d{4})/, '($1) $2-$3');\n    }\n    return this.telefone;\n  }\n\n  /**\n   * Formata a data de nascimento\n   * @returns data formatada\n   */\n  getDataNascimentoFormatada(): string {\n    return new Date(this.data_nascimento).toLocaleDateString('pt-BR');\n  }\n\n  /**\n   * Formata a data de criação\n   * @returns data formatada\n   */\n  getCriacaoFormatada(): string {\n    return this.created_at.toLocaleString('pt-BR');\n  }\n\n  /**\n   * Formata a data de atualização\n   * @returns data formatada\n   */\n  getAtualizacaoFormatada(): string {\n    return this.updated_at.toLocaleString('pt-BR');\n  }\n\n  /**\n   * Remove informações sensíveis para logs\n   * @returns versão segura para logs\n   */\n  toSafeLog(): object {\n    return {\n      id: this.id,\n      nome: this.nome,\n      idade: this.getIdade(),\n      sexo: this.sexo,\n      unidadeId: this.unidade_id,\n      ativo: this.isAtivo(),\n      criadoEm: this.created_at\n    };\n  }\n\n  /**\n   * Verifica se o cidadão pode ser removido\n   * @returns true se pode ser removido\n   */\n  podeSerRemovido(): boolean {\n    // Lógica básica - pode ser expandida conforme regras de negócio\n    return this.isAtivo();\n  }\n\n  /**\n   * Clona o cidadão (sem ID e datas)\n   * @returns nova instância do cidadão\n   */\n  clone(): Cidadao {\n    const novoCidadao = new Cidadao();\n    novoCidadao.nome = this.nome;\n    novoCidadao.nome_social = this.nome_social;\n    novoCidadao.cpf = this.cpf;\n    novoCidadao.rg = this.rg;\n    novoCidadao.nis = this.nis;\n    novoCidadao.nome_mae = this.nome_mae;\n    novoCidadao.naturalidade = this.naturalidade;\n    novoCidadao.prontuario_suas = this.prontuario_suas;\n    novoCidadao.data_nascimento = this.data_nascimento;\n    novoCidadao.sexo = this.sexo;\n    novoCidadao.telefone = this.telefone;\n    novoCidadao.email = this.email;\n    novoCidadao.endereco = { ...this.endereco };\n    novoCidadao.unidade_id = this.unidade_id;\n    return novoCidadao;\n  }\n\n  /**\n   * Verifica se é um caso prioritário (idoso, criança, etc.)\n   * @returns true se é prioritário\n   */\n  isPrioritario(): boolean {\n    return this.isIdoso() || this.isCrianca() || this.isAdolescente();\n  }\n\n  /**\n   * Obtém sugestões de verificação de dados\n   * @returns array de sugestões\n   */\n  getSugestoesVerificacao(): string[] {\n    const sugestoes: string[] = [];\n    \n    if (!this.temEmail()) {\n      sugestoes.push('Considere cadastrar um email para contato');\n    }\n    \n    if (!this.temComposicaoFamiliar()) {\n      sugestoes.push('Cadastre a composição familiar para análise completa');\n    }\n    \n    if (!this.temPapeisAtivos()) {\n      sugestoes.push('Defina papéis para o cidadão no sistema');\n    }\n    \n    const idade = this.getIdade();\n    if (idade < 0 || idade > 120) {\n      sugestoes.push('Verifique a data de nascimento - idade calculada parece incorreta');\n    }\n    \n    return sugestoes;\n  }\n}\n\nexport { Sexo };\n"],"version":3}