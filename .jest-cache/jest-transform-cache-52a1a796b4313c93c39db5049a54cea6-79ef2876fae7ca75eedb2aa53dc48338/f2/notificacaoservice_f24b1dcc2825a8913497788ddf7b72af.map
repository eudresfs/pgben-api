{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\notificacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\notificacao.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  UnauthorizedException,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  NotificacaoSistema,\n  StatusNotificacaoProcessamento,\n  TipoNotificacao,\n} from '../../../entities/notification.entity';\nimport { SseService } from './sse.service';\nimport { SseNotification } from '../interfaces/sse-notification.interface';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\n\n/**\n * Serviço de Notificações\n *\n * Responsável pela lógica de negócio relacionada às notificações\n * enviadas aos usuários do sistema\n */\n@Injectable()\nexport class NotificacaoService {\n  constructor(\n    @InjectRepository(NotificacaoSistema)\n    private notificacaoRepository: Repository<NotificacaoSistema>,\n    @Inject(forwardRef(() => SseService))\n    private readonly sseService: SseService,\n  ) {}\n\n  /**\n   * Lista todas as notificações de um usuário com paginação e filtros\n   */\n  async findAll(options: {\n    page?: number;\n    limit?: number;\n    status?: StatusNotificacaoProcessamento;\n    userId: string;\n  }) {\n    const { page = 1, limit = 10, status, userId } = options;\n\n    const queryBuilder = this.notificacaoRepository\n      .createQueryBuilder('notificacao')\n      .where('notificacao.destinatario_id = :userId', { userId });\n\n    if (status) {\n      queryBuilder.andWhere('notificacao.status = :status', { status });\n    }\n\n    // Calcular paginação\n    const skip = (page - 1) * limit;\n    queryBuilder.skip(skip).take(limit);\n\n    // Ordenação padrão (mais recentes primeiro)\n    queryBuilder.orderBy('notificacao.created_at', 'DESC');\n\n    // Executar consulta\n    const [items, total] = await queryBuilder.getManyAndCount();\n\n    return {\n      items,\n      meta: {\n        total,\n        page,\n        limit,\n        pages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Busca uma notificação pelo ID\n   */\n  async findById(id: string, userId: string) {\n    const notificacao = await this.notificacaoRepository.findOne({\n      where: { id },\n    });\n\n    if (!notificacao) {\n      throw new NotFoundException(`Notificação com ID ${id} não encontrada`);\n    }\n\n    // Verificar se a notificação pertence ao usuário\n    if (notificacao.destinatario_id !== userId) {\n      throw new UnauthorizedException(\n        'Você não tem permissão para acessar esta notificação',\n      );\n    }\n\n    return notificacao;\n  }\n\n  /**\n   * Marca uma notificação como lida\n   */\n  async marcarComoLida(id: string, userId: string) {\n    const notificacao = await this.findById(id, userId);\n\n    if (notificacao.status === StatusNotificacaoProcessamento.LIDA) {\n      return notificacao; // Já está marcada como lida\n    }\n\n    // Normalizar o status antes de atualizar\n    const statusNormalizado = normalizeEnumFields({ status: StatusNotificacaoProcessamento.LIDA }).status;\n    \n    notificacao.status = statusNormalizado;\n    notificacao.data_leitura = new Date();\n\n    return this.notificacaoRepository.save(notificacao);\n  }\n\n  /**\n   * Marca uma notificação como arquivada\n   */\n  async arquivar(id: string, userId: string) {\n    const notificacao = await this.findById(id, userId);\n\n    if (notificacao.status === StatusNotificacaoProcessamento.ARQUIVADA) {\n      return notificacao; // Já está arquivada\n    }\n\n    // Normalizar o status antes de atualizar\n    const statusNormalizado = normalizeEnumFields({ status: StatusNotificacaoProcessamento.ARQUIVADA }).status;\n    \n    notificacao.status = statusNormalizado;\n\n    return this.notificacaoRepository.save(notificacao);\n  }\n\n  /**\n   * Marca todas as notificações do usuário como lidas\n   */\n  async marcarTodasComoLidas(userId: string) {\n    const agora = new Date();\n\n    await this.notificacaoRepository.update(\n      {\n        destinatario_id: userId,\n        status: StatusNotificacaoProcessamento.NAO_LIDA,\n      },\n      {\n        status: StatusNotificacaoProcessamento.LIDA,\n        data_leitura: agora,\n      },\n    );\n\n    return { message: 'Todas as notificações foram marcadas como lidas' };\n  }\n\n  /**\n   * Obtém o contador de notificações não lidas do usuário\n   */\n  async contadorNaoLidas(userId: string) {\n    const count = await this.notificacaoRepository.count({\n      where: {\n        destinatario_id: userId,\n        status: StatusNotificacaoProcessamento.NAO_LIDA,\n      },\n    });\n\n    return { count };\n  }\n\n  /**\n   * Cria uma nova notificação\n   * Este método é utilizado internamente por outros serviços\n   */\n  async criar(dados: {\n    destinatario_id: string;\n    tipo: TipoNotificacao;\n    titulo: string;\n    conteudo: string;\n    entidade_relacionada_id?: string;\n    entidade_tipo?: string;\n    link?: string;\n  }) {\n    // Normalizar campos de enum antes de criar a notificação\n    const dadosNormalizados = normalizeEnumFields({\n      ...dados,\n      status: StatusNotificacaoProcessamento.NAO_LIDA,\n    });\n\n    const notificacao = this.notificacaoRepository.create(dadosNormalizados);\n\n    return this.notificacaoRepository.save(notificacao);\n  }\n\n  /**\n   * Cria uma notificação de sistema\n   */\n  async criarNotificacaoSistema(dados: {\n    destinatario_id: string;\n    titulo: string;\n    conteudo: string;\n    link?: string;\n  }) {\n    return this.criar({\n      ...dados,\n      tipo: TipoNotificacao.SISTEMA,\n    });\n  }\n\n  /**\n   * Cria uma notificação de solicitação\n   */\n  async criarNotificacaoSolicitacao(dados: {\n    destinatario_id: string;\n    titulo: string;\n    conteudo: string;\n    solicitacao_id: string;\n    link?: string;\n  }) {\n    return this.criar({\n      destinatario_id: dados.destinatario_id,\n      tipo: TipoNotificacao.SOLICITACAO,\n      titulo: dados.titulo,\n      conteudo: dados.conteudo,\n      entidade_relacionada_id: dados.solicitacao_id,\n      entidade_tipo: 'solicitacao',\n      link: dados.link,\n    });\n  }\n\n  /**\n   * Cria uma notificação de pendência\n   */\n  async criarNotificacaoPendencia(dados: {\n    destinatario_id: string;\n    titulo: string;\n    conteudo: string;\n    solicitacao_id: string;\n    link?: string;\n  }) {\n    return this.criar({\n      destinatario_id: dados.destinatario_id,\n      tipo: TipoNotificacao.PENDENCIA,\n      titulo: dados.titulo,\n      conteudo: dados.conteudo,\n      entidade_relacionada_id: dados.solicitacao_id,\n      entidade_tipo: 'solicitacao',\n      link: dados.link,\n    });\n  }\n\n  /**\n   * Cria uma notificação de aprovação\n   */\n  async criarNotificacaoAprovacao(dados: {\n    destinatario_id: string;\n    titulo: string;\n    conteudo: string;\n    solicitacao_id: string;\n    link?: string;\n  }) {\n    return this.criar({\n      destinatario_id: dados.destinatario_id,\n      tipo: TipoNotificacao.APROVACAO,\n      titulo: dados.titulo,\n      conteudo: dados.conteudo,\n      entidade_relacionada_id: dados.solicitacao_id,\n      entidade_tipo: 'solicitacao',\n      link: dados.link,\n    });\n  }\n\n  /**\n   * Cria uma notificação de liberação\n   */\n  async criarNotificacaoLiberacao(dados: {\n    destinatario_id: string;\n    titulo: string;\n    conteudo: string;\n    solicitacao_id: string;\n    link?: string;\n  }) {\n    return this.criar({\n      destinatario_id: dados.destinatario_id,\n      tipo: TipoNotificacao.LIBERACAO,\n      titulo: dados.titulo,\n      conteudo: dados.conteudo,\n      entidade_relacionada_id: dados.solicitacao_id,\n      entidade_tipo: 'solicitacao',\n      link: dados.link,\n    });\n  }\n\n  /**\n   * Cria uma notificação de alerta\n   */\n  async criarNotificacaoAlerta(dados: {\n    destinatario_id: string;\n    titulo: string;\n    conteudo: string;\n    entidade_relacionada_id?: string;\n    entidade_tipo?: string;\n    link?: string;\n  }) {\n    return this.criar({\n      ...dados,\n      tipo: TipoNotificacao.ALERTA,\n    });\n  }\n\n  /**\n   * Envia uma notificação com base no tipo fornecido\n   * @param dados Dados da notificação a ser enviada\n   */\n  async enviarNotificacao(dados: {\n    destinatario_id: string;\n    tipo: TipoNotificacao | string;\n    titulo: string;\n    conteudo: string;\n    dados?: Record<string, any>;\n    entidade_relacionada_id?: string;\n    entidade_tipo?: string;\n    link?: string;\n  }) {\n    // Extrair entidade relacionada dos dados, se fornecida\n    const entidadeRelacionadaId = dados.entidade_relacionada_id || \n      (dados.dados && dados.dados.historico_id) || \n      (dados.dados && dados.dados.solicitacao_id);\n    \n    const entidadeTipo = dados.entidade_tipo || \n      (dados.dados && dados.dados.historico_id ? 'historico' : undefined) || \n      (dados.dados && dados.dados.solicitacao_id ? 'solicitacao' : undefined);\n\n    // Determinar o tipo de notificação\n    let tipoNotificacao: TipoNotificacao;\n    if (typeof dados.tipo === 'string') {\n      switch (dados.tipo.toUpperCase()) {\n        case 'SISTEMA':\n          tipoNotificacao = TipoNotificacao.SISTEMA;\n          break;\n        case 'SOLICITACAO':\n          tipoNotificacao = TipoNotificacao.SOLICITACAO;\n          break;\n        case 'PENDENCIA':\n          tipoNotificacao = TipoNotificacao.PENDENCIA;\n          break;\n        case 'APROVACAO':\n          tipoNotificacao = TipoNotificacao.APROVACAO;\n          break;\n        case 'LIBERACAO':\n          tipoNotificacao = TipoNotificacao.LIBERACAO;\n          break;\n        case 'ALERTA':\n          tipoNotificacao = TipoNotificacao.ALERTA;\n          break;\n        case 'CONVERSAO_PAPEL':\n          tipoNotificacao = TipoNotificacao.ALERTA;\n          break;\n        default:\n          tipoNotificacao = TipoNotificacao.SISTEMA;\n      }\n    } else {\n      tipoNotificacao = dados.tipo;\n    }\n\n    // Criar a notificação usando o método genérico\n    return this.criar({\n      destinatario_id: dados.destinatario_id,\n      tipo: tipoNotificacao,\n      titulo: dados.titulo,\n      conteudo: dados.conteudo,\n      entidade_relacionada_id: entidadeRelacionadaId,\n      entidade_tipo: entidadeTipo,\n      link: dados.link,\n    });\n  }\n\n  /**\n   * Cria notificação e envia via SSE em tempo real\n   * @param dados Dados da notificação\n   * @returns Notificação criada\n   */\n  async criarEBroadcast(dados: {\n    destinatario_id: string;\n    tipo: TipoNotificacao | string;\n    titulo: string;\n    conteudo: string;\n    dados?: Record<string, any>;\n    entidade_relacionada_id?: string;\n    entidade_tipo?: string;\n    link?: string;\n    prioridade?: 'low' | 'medium' | 'high';\n  }): Promise<NotificacaoSistema> {\n    // Cria a notificação no banco de dados\n    const notificacao = await this.criar({\n      destinatario_id: dados.destinatario_id,\n      tipo: dados.tipo as TipoNotificacao,\n      titulo: dados.titulo,\n      conteudo: dados.conteudo,\n      entidade_relacionada_id: dados.entidade_relacionada_id,\n      entidade_tipo: dados.entidade_tipo,\n      link: dados.link,\n    });\n\n    // Envia via SSE se o usuário estiver conectado\n    const sseNotification: SseNotification = {\n      id: notificacao.id,\n      userId: notificacao.destinatario_id,\n      type: dados.tipo as TipoNotificacao,\n      title: dados.titulo,\n      message: dados.conteudo,\n      data: notificacao.dados_contexto,\n      timestamp: notificacao.created_at,\n      priority: dados.prioridade ?? 'medium',\n    };\n\n    this.sseService.sendToUser(notificacao.destinatario_id, sseNotification);\n\n    return notificacao;\n  }\n\n  /**\n   * Envia notificação em massa via SSE\n   * @param userIds Lista de IDs dos usuários\n   * @param dados Dados da notificação\n   * @returns Lista de notificações criadas\n   */\n  async broadcastParaUsuarios(\n    userIds: string[],\n    dados: {\n      tipo: TipoNotificacao | string;\n      titulo: string;\n      conteudo: string;\n      dados?: Record<string, any>;\n      entidade_relacionada_id?: string;\n      entidade_tipo?: string;\n      link?: string;\n      prioridade?: 'low' | 'medium' | 'high';\n    }\n  ): Promise<NotificacaoSistema[]> {\n    // Cria notificações no banco para todos os usuários\n    const notificacoes = await Promise.all(\n      userIds.map(userId =>\n        this.criar({\n          destinatario_id: userId,\n          tipo: dados.tipo as TipoNotificacao,\n          titulo: dados.titulo,\n          conteudo: dados.conteudo,\n          entidade_relacionada_id: dados.entidade_relacionada_id,\n          entidade_tipo: dados.entidade_tipo,\n          link: dados.link,\n        })\n      )\n    );\n\n    // Envia via SSE para usuários conectados\n    const sseNotification = {\n      id: `broadcast-${Date.now()}`, // ID único para broadcast\n      type: dados.tipo as TipoNotificacao,\n      title: dados.titulo,\n      message: dados.conteudo,\n      data: dados.dados,\n      timestamp: new Date(),\n      priority: dados.prioridade ?? 'medium',\n    };\n\n    this.sseService.sendToUsers(userIds, sseNotification);\n\n    return notificacoes;\n  }\n\n  /**\n   * Envia notificação broadcast para todos os usuários conectados\n   * @param dados Dados da notificação\n   */\n  async broadcastGeral(dados: {\n    tipo: TipoNotificacao | string;\n    titulo: string;\n    conteudo: string;\n    dados?: Record<string, any>;\n    prioridade?: 'low' | 'medium' | 'high';\n  }): Promise<void> {\n    const sseNotification = {\n      id: `broadcast-geral-${Date.now()}`,\n      type: dados.tipo as TipoNotificacao,\n      title: dados.titulo,\n      message: dados.conteudo,\n      data: dados.dados,\n      timestamp: new Date(),\n      priority: dados.prioridade ?? 'medium',\n    };\n\n    this.sseService.broadcastToAll(sseNotification);\n  }\n\n  /**\n   * Verifica se um usuário tem conexões SSE ativas\n   * @param userId ID do usuário\n   * @returns true se o usuário está conectado via SSE\n   */\n  isUserConnectedSSE(userId: string): boolean {\n    return this.sseService.hasActiveConnections(userId);\n  }\n\n  /**\n   * Obtém estatísticas das conexões SSE\n   * @returns Estatísticas das conexões\n   */\n  getSSEStats() {\n    return this.sseService.getConnectionStats();\n  }\n}\n"],"version":3}