b642f0341f33aaf75da0d2c4f9f75497
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var Cidadao_1;
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sexo = exports.Cidadao = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const cpf_validator_1 = require("../modules/cidadao/validators/cpf-validator");
const nis_validator_1 = require("../modules/cidadao/validators/nis-validator");
const telefone_validator_1 = require("../modules/cidadao/validators/telefone-validator");
const papel_cidadao_entity_1 = require("./papel-cidadao.entity");
const composicao_familiar_entity_1 = require("./composicao-familiar.entity");
const sexo_enum_1 = require("../enums/sexo.enum");
Object.defineProperty(exports, "Sexo", { enumerable: true, get: function () { return sexo_enum_1.Sexo; } });
const unidade_entity_1 = require("./unidade.entity");
const estado_civil_enum_1 = require("../enums/estado-civil.enum");
let Cidadao = Cidadao_1 = class Cidadao {
    id;
    nome;
    nome_social;
    cpf;
    rg;
    nis;
    nome_mae;
    naturalidade;
    prontuario_suas;
    data_nascimento;
    papeis;
    composicao_familiar;
    sexo;
    telefone;
    email;
    estado_civil;
    endereco;
    unidade_id;
    unidade;
    created_at;
    updated_at;
    removed_at;
    /**
     * Verifica se o cidadão foi criado recentemente (últimas 24 horas)
     * @returns true se foi criado nas últimas 24 horas
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do cidadão em anos
     * @returns idade em anos
     */
    getIdade() {
        const hoje = new Date();
        const nascimento = new Date(this.data_nascimento);
        let idade = hoje.getFullYear() - nascimento.getFullYear();
        const mesAtual = hoje.getMonth();
        const mesNascimento = nascimento.getMonth();
        if (mesAtual < mesNascimento || (mesAtual === mesNascimento && hoje.getDate() < nascimento.getDate())) {
            idade--;
        }
        return idade;
    }
    /**
     * Verifica se o cidadão é maior de idade
     * @returns true se é maior de idade
     */
    isMaiorIdade() {
        return this.getIdade() >= 18;
    }
    /**
     * Verifica se o cidadão é idoso (65+ anos)
     * @returns true se é idoso
     */
    isIdoso() {
        return this.getIdade() >= 65;
    }
    /**
     * Verifica se o cidadão é criança (0-12 anos)
     * @returns true se é criança
     */
    isCrianca() {
        return this.getIdade() <= 12;
    }
    /**
     * Verifica se o cidadão é adolescente (13-17 anos)
     * @returns true se é adolescente
     */
    isAdolescente() {
        const idade = this.getIdade();
        return idade >= 13 && idade <= 17;
    }
    /**
     * Verifica se tem nome social definido
     * @returns true se tem nome social
     */
    temNomeSocial() {
        return this.nome_social !== null && this.nome_social !== undefined && this.nome_social.trim() !== '';
    }
    /**
     * Obtém o nome preferencial (nome social se existir, senão nome civil)
     * @returns nome preferencial
     */
    getNomePreferencial() {
        return this.temNomeSocial() ? this.nome_social : this.nome;
    }
    /**
     * Verifica se tem email cadastrado
     * @returns true se tem email
     */
    temEmail() {
        return this.email !== null && this.email !== undefined && this.email.trim() !== '';
    }
    /**
     * Obtém o endereço completo formatado
     * @returns endereço formatado
     */
    getEnderecoCompleto() {
        if (!this.endereco)
            return 'Endereço não informado';
        const { logradouro, numero, complemento, bairro, cidade, estado, cep } = this.endereco;
        let endereco = `${logradouro}, ${numero}`;
        if (complemento) {
            endereco += `, ${complemento}`;
        }
        endereco += ` - ${bairro}, ${cidade}/${estado} - CEP: ${cep}`;
        return endereco;
    }
    /**
     * Verifica se o cidadão pertence a uma unidade específica
     * @param unidadeId ID da unidade
     * @returns true se pertence à unidade
     */
    pertenceAUnidade(unidadeId) {
        return this.unidade_id === unidadeId;
    }
    /**
     * Verifica se o cidadão foi removido (soft delete)
     * @returns true se foi removido
     */
    foiRemovido() {
        return this.removed_at !== null && this.removed_at !== undefined;
    }
    /**
     * Verifica se o cidadão está ativo
     * @returns true se está ativo
     */
    isAtivo() {
        return !this.foiRemovido();
    }
    /**
     * Obtém um resumo das informações do cidadão
     * @returns objeto com resumo das informações
     */
    getSummary() {
        return {
            id: this.id,
            nome: this.nome,
            nomePreferencial: this.getNomePreferencial(),
            cpf: this.cpf,
            idade: this.getIdade(),
            sexo: this.sexo,
            telefone: this.telefone,
            temEmail: this.temEmail(),
            unidadeId: this.unidade_id,
            ativo: this.isAtivo(),
            criadoEm: this.created_at
        };
    }
    /**
     * Gera uma chave única para o cidadão
     * @returns chave única
     */
    getUniqueKey() {
        return `cidadao_${this.cpf}`;
    }
    /**
     * Verifica se o estado do cidadão é consistente
     * @returns true se está consistente
     */
    isConsistente() {
        return (this.id !== null &&
            this.nome !== null &&
            this.cpf !== null &&
            this.nis !== null &&
            this.data_nascimento !== null &&
            this.unidade_id !== null &&
            this.created_at !== null &&
            this.updated_at !== null &&
            this.created_at <= this.updated_at);
    }
    /**
     * Verifica se o cidadão nasceu em uma cidade específica
     * @param cidade nome da cidade
     * @returns true se nasceu na cidade
     */
    nasceuEm(cidade) {
        return this.naturalidade.toLowerCase().includes(cidade.toLowerCase());
    }
    /**
     * Verifica se o cidadão mora em uma cidade específica
     * @param cidade nome da cidade
     * @returns true se mora na cidade
     */
    moraEm(cidade) {
        return this.endereco?.cidade?.toLowerCase() === cidade.toLowerCase();
    }
    /**
     * Verifica se o cidadão mora em um bairro específico
     * @param bairro nome do bairro
     * @returns true se mora no bairro
     */
    moraNoBairro(bairro) {
        return this.endereco?.bairro?.toLowerCase() === bairro.toLowerCase();
    }
    /**
     * Obtém a faixa etária do cidadão
     * @returns faixa etária
     */
    getFaixaEtaria() {
        const idade = this.getIdade();
        if (idade <= 12)
            return 'Criança';
        if (idade <= 17)
            return 'Adolescente';
        if (idade <= 29)
            return 'Jovem';
        if (idade <= 59)
            return 'Adulto';
        return 'Idoso';
    }
    /**
     * Verifica se o cidadão tem papéis ativos
     * @returns true se tem papéis ativos
     */
    temPapeisAtivos() {
        return this.papeis && this.papeis.some(papel => papel.ativo);
    }
    /**
     * Obtém o número de familiares cadastrados
     * @returns número de familiares
     */
    getNumeroFamiliares() {
        return this.composicao_familiar ? this.composicao_familiar.length : 0;
    }
    /**
     * Verifica se tem composição familiar cadastrada
     * @returns true se tem familiares
     */
    temComposicaoFamiliar() {
        return this.getNumeroFamiliares() > 0;
    }
    /**
     * Formata o CPF para exibição
     * @returns CPF formatado
     */
    getCpfFormatado() {
        const cpf = this.cpf.replace(/\D/g, '');
        return cpf.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
    }
    /**
     * Formata o telefone para exibição
     * @returns telefone formatado
     */
    getTelefoneFormatado() {
        const telefone = this.telefone.replace(/\D/g, '');
        if (telefone.length === 11) {
            return telefone.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
        }
        else if (telefone.length === 10) {
            return telefone.replace(/(\d{2})(\d{4})(\d{4})/, '($1) $2-$3');
        }
        return this.telefone;
    }
    /**
     * Formata a data de nascimento
     * @returns data formatada
     */
    getDataNascimentoFormatada() {
        return new Date(this.data_nascimento).toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de criação
     * @returns data formatada
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleString('pt-BR');
    }
    /**
     * Formata a data de atualização
     * @returns data formatada
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     * @returns versão segura para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            nome: this.nome,
            idade: this.getIdade(),
            sexo: this.sexo,
            unidadeId: this.unidade_id,
            ativo: this.isAtivo(),
            criadoEm: this.created_at
        };
    }
    /**
     * Verifica se o cidadão pode ser removido
     * @returns true se pode ser removido
     */
    podeSerRemovido() {
        // Lógica básica - pode ser expandida conforme regras de negócio
        return this.isAtivo();
    }
    /**
     * Clona o cidadão (sem ID e datas)
     * @returns nova instância do cidadão
     */
    clone() {
        const novoCidadao = new Cidadao_1();
        novoCidadao.nome = this.nome;
        novoCidadao.nome_social = this.nome_social;
        novoCidadao.cpf = this.cpf;
        novoCidadao.rg = this.rg;
        novoCidadao.nis = this.nis;
        novoCidadao.nome_mae = this.nome_mae;
        novoCidadao.naturalidade = this.naturalidade;
        novoCidadao.prontuario_suas = this.prontuario_suas;
        novoCidadao.data_nascimento = this.data_nascimento;
        novoCidadao.sexo = this.sexo;
        novoCidadao.telefone = this.telefone;
        novoCidadao.email = this.email;
        novoCidadao.endereco = { ...this.endereco };
        novoCidadao.unidade_id = this.unidade_id;
        return novoCidadao;
    }
    /**
     * Verifica se é um caso prioritário (idoso, criança, etc.)
     * @returns true se é prioritário
     */
    isPrioritario() {
        return this.isIdoso() || this.isCrianca() || this.isAdolescente();
    }
    /**
     * Obtém sugestões de verificação de dados
     * @returns array de sugestões
     */
    getSugestoesVerificacao() {
        const sugestoes = [];
        if (!this.temEmail()) {
            sugestoes.push('Considere cadastrar um email para contato');
        }
        if (!this.temComposicaoFamiliar()) {
            sugestoes.push('Cadastre a composição familiar para análise completa');
        }
        if (!this.temPapeisAtivos()) {
            sugestoes.push('Defina papéis para o cidadão no sistema');
        }
        const idade = this.getIdade();
        if (idade < 0 || idade > 120) {
            sugestoes.push('Verifique a data de nascimento - idade calculada parece incorreta');
        }
        return sugestoes;
    }
};
exports.Cidadao = Cidadao;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], Cidadao.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Nome deve ser uma string' }),
    (0, class_validator_1.MinLength)(3, { message: 'Nome deve ter no mínimo 3 caracteres' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Nome deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], Cidadao.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], Cidadao.prototype, "nome_social", void 0);
__decorate([
    (0, typeorm_1.Column)({ unique: true }),
    (0, class_validator_1.IsNotEmpty)({ message: 'CPF é obrigatório' }),
    (0, class_validator_1.Length)(11, 14, { message: 'CPF deve ter entre 11 e 14 caracteres' }),
    (0, class_validator_1.Validate)(cpf_validator_1.CPFValidator, { message: 'CPF inválido' }),
    __metadata("design:type", String)
], Cidadao.prototype, "cpf", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'RG é obrigatório' }),
    __metadata("design:type", String)
], Cidadao.prototype, "rg", void 0);
__decorate([
    (0, typeorm_1.Column)({ unique: true, nullable: false }),
    (0, class_validator_1.Length)(11, 11, { message: 'NIS deve ter 11 caracteres' }),
    (0, class_validator_1.Validate)(nis_validator_1.NISValidator, { message: 'NIS inválido' }),
    __metadata("design:type", String)
], Cidadao.prototype, "nis", void 0);
__decorate([
    (0, typeorm_1.Column)({ unique: true }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome da mãe é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Nome da mãe deve ser uma string' }),
    (0, class_validator_1.MinLength)(3, { message: 'Nome da mãe deve ter no mínimo 3 caracteres' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Nome da mãe deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], Cidadao.prototype, "nome_mae", void 0);
__decorate([
    (0, typeorm_1.Column)({ unique: true }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Naturalidade é obrigatório' }),
    __metadata("design:type", String)
], Cidadao.prototype, "naturalidade", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: false }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Prontuario SUAS é obrigatório' }),
    __metadata("design:type", String)
], Cidadao.prototype, "prontuario_suas", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'date' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Data de nascimento é obrigatória' }),
    __metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], Cidadao.prototype, "data_nascimento", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => papel_cidadao_entity_1.PapelCidadao, (papelCidadao) => papelCidadao.cidadao),
    __metadata("design:type", Array)
], Cidadao.prototype, "papeis", void 0);
__decorate([
    (0, typeorm_1.OneToMany)(() => composicao_familiar_entity_1.ComposicaoFamiliar, (composicaoFamiliar) => composicaoFamiliar.cidadao),
    __metadata("design:type", Array)
], Cidadao.prototype, "composicao_familiar", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: sexo_enum_1.Sexo,
        enumName: 'sexo_enum',
    }),
    (0, class_validator_1.IsEnum)(sexo_enum_1.Sexo, { message: 'Sexo inválido' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Sexo é obrigatório' }),
    __metadata("design:type", typeof (_b = typeof sexo_enum_1.Sexo !== "undefined" && sexo_enum_1.Sexo) === "function" ? _b : Object)
], Cidadao.prototype, "sexo", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: false }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Telefone é obrigatório' }),
    (0, class_validator_1.Validate)(telefone_validator_1.TelefoneValidator, { message: 'Telefone inválido' }),
    __metadata("design:type", String)
], Cidadao.prototype, "telefone", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEmail)({}, { message: 'Email inválido' }),
    __metadata("design:type", String)
], Cidadao.prototype, "email", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: estado_civil_enum_1.EstadoCivil,
        enumName: 'estado_civil_enum',
    }),
    (0, class_validator_1.IsEnum)(sexo_enum_1.Sexo, { message: 'Estado civil inválido' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Estado Civil é obrigatório' }),
    __metadata("design:type", typeof (_c = typeof estado_civil_enum_1.EstadoCivil !== "undefined" && estado_civil_enum_1.EstadoCivil) === "function" ? _c : Object)
], Cidadao.prototype, "estado_civil", void 0);
__decorate([
    (0, typeorm_1.Column)('jsonb'),
    (0, class_validator_1.IsNotEmpty)({ message: 'Endereço é obrigatório' }),
    (0, typeorm_1.Index)(),
    __metadata("design:type", Object)
], Cidadao.prototype, "endereco", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: false }),
    __metadata("design:type", String)
], Cidadao.prototype, "unidade_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => unidade_entity_1.Unidade, { nullable: false }),
    (0, typeorm_1.JoinColumn)({ name: 'unidade_id' }),
    __metadata("design:type", typeof (_d = typeof unidade_entity_1.Unidade !== "undefined" && unidade_entity_1.Unidade) === "function" ? _d : Object)
], Cidadao.prototype, "unidade", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], Cidadao.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], Cidadao.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], Cidadao.prototype, "removed_at", void 0);
exports.Cidadao = Cidadao = Cidadao_1 = __decorate([
    (0, typeorm_1.Entity)('cidadao'),
    (0, typeorm_1.Index)(['cpf'], { unique: true }),
    (0, typeorm_1.Index)(['nis'], { unique: true, where: 'nis IS NOT NULL' }),
    (0, typeorm_1.Index)(['nome']),
    (0, typeorm_1.Index)(['telefone']),
    (0, typeorm_1.Index)(['created_at']),
    (0, typeorm_1.Index)(['unidade_id']),
    (0, typeorm_1.Index)('idx_cidadao_endereco_bairro'),
    (0, typeorm_1.Index)('idx_cidadao_endereco_cidade'),
    (0, typeorm_1.Index)('idx_cidadao_nome_trgm')
], Cidadao);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,