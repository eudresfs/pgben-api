6425f200d8b22466848e4737a144caad
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var VerificacaoPapelController_1;
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificacaoPapelController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const verificacao_papel_service_1 = require("../services/verificacao-papel.service");
const cidadao_service_1 = require("../services/cidadao.service");
const verificacao_conflito_papel_dto_1 = require("../dto/verificacao-conflito-papel.dto");
const conversao_papel_dto_1 = require("../dto/conversao-papel.dto");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const sexo_enum_1 = require("../../../enums/sexo.enum");
/**
 * Controller de Verificação de Papel
 *
 * Responsável por expor os endpoints de verificação e conversão de papéis
 * dos cidadãos no sistema.
 */
let VerificacaoPapelController = VerificacaoPapelController_1 = class VerificacaoPapelController {
    verificacaoPapelService;
    cidadaoService;
    logger = new common_1.Logger(VerificacaoPapelController_1.name);
    constructor(verificacaoPapelService, cidadaoService) {
        this.verificacaoPapelService = verificacaoPapelService;
        this.cidadaoService = cidadaoService;
    }
    /**
     * Verifica se um cidadão possui conflito de papéis
     * @param verificacaoDto Dados para verificação
     * @returns Resultado da verificação
     */
    async verificarConflito(verificacaoDto) {
        this.logger.log(`Iniciando verificação de conflito para CPF: ${this.maskCpf(verificacaoDto.cpf)}`);
        try {
            const resultado = await this.verificacaoPapelService.verificarConflitoPapeis(verificacaoDto.cpf);
            this.logger.log(`Verificação de conflito concluída para CPF: ${this.maskCpf(verificacaoDto.cpf)}`);
            return resultado;
        }
        catch (error) {
            this.logger.error(`Erro ao verificar conflito para CPF: ${this.maskCpf(verificacaoDto.cpf)}`, error.stack);
            throw error;
        }
    }
    /**
     * Converte um membro de composição familiar para cidadão beneficiário
     * @param conversaoDto Dados para conversão
     * @param req Requisição autenticada
     * @returns Resultado da conversão
     */
    async converterParaBeneficiario(conversaoDto, req) {
        const usuarioId = req.user.id;
        const cpfMasked = this.maskCpf(conversaoDto.cpf);
        this.logger.log(`Iniciando conversão para beneficiário - CPF: ${cpfMasked}, Usuário: ${usuarioId}`);
        try {
            this.validateConversaoParaBeneficiario(conversaoDto);
            const dadosCidadao = this.buildDadosCidadao(conversaoDto);
            // Buscar cidadão pelo CPF para obter o ID
            const cidadao = await this.cidadaoService.findByCpf(conversaoDto.cpf);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            const resultado = await this.verificacaoPapelService.converterParaBeneficiario(cidadao.id, conversaoDto.justificativa);
            this.logger.log(`Conversão para beneficiário concluída - CPF: ${cpfMasked}`);
            return resultado;
        }
        catch (error) {
            this.logger.error(`Erro na conversão para beneficiário - CPF: ${cpfMasked}`, error.stack);
            throw error;
        }
    }
    /**
     * Converte um cidadão beneficiário para membro de composição familiar
     * @param conversaoDto Dados para conversão
     * @param req Requisição autenticada
     * @returns Resultado da conversão
     */
    async converterParaComposicaoFamiliar(conversaoDto, req) {
        const usuarioId = req.user.id;
        const cpfMasked = this.maskCpf(conversaoDto.cpf);
        this.logger.log(`Iniciando conversão para composição familiar - CPF: ${cpfMasked}, Usuário: ${usuarioId}`);
        try {
            const resultado = await this.verificacaoPapelService.converterParaComposicaoFamiliar(conversaoDto.cpf, conversaoDto.cidadao_alvo_id, conversaoDto.dados_composicao, conversaoDto.justificativa, usuarioId);
            this.logger.log(`Conversão para composição familiar concluída - CPF: ${cpfMasked}`);
            return resultado;
        }
        catch (error) {
            this.logger.error(`Erro na conversão para composição familiar - CPF: ${cpfMasked}`, error.stack);
            throw error;
        }
    }
    /**
     * Valida os dados necessários para conversão para beneficiário
     * @private
     */
    validateConversaoParaBeneficiario(conversaoDto) {
        if (!conversaoDto.dados_cidadao) {
            throw new common_1.BadRequestException('Dados do cidadão são obrigatórios para a conversão');
        }
        const { dados_cidadao } = conversaoDto;
        if (!dados_cidadao.data_nascimento) {
            throw new common_1.BadRequestException('Data de nascimento é obrigatória');
        }
        if (!dados_cidadao.nome?.trim()) {
            throw new common_1.BadRequestException('Nome do cidadão é obrigatório');
        }
        if (!dados_cidadao.sexo ||
            !Object.values(sexo_enum_1.Sexo).includes(dados_cidadao.sexo)) {
            throw new common_1.BadRequestException('Sexo do cidadão é obrigatório e deve ser válido');
        }
        // Validação adicional da data de nascimento
        const dataNascimento = new Date(dados_cidadao.data_nascimento);
        if (isNaN(dataNascimento.getTime())) {
            throw new common_1.BadRequestException('Data de nascimento deve ser uma data válida');
        }
        const hoje = new Date();
        if (dataNascimento > hoje) {
            throw new common_1.BadRequestException('Data de nascimento não pode ser futura');
        }
        // Validação de idade mínima/máxima razoável (ex: entre 0 e 150 anos)
        const idade = hoje.getFullYear() - dataNascimento.getFullYear();
        if (idade > 150) {
            throw new common_1.BadRequestException('Data de nascimento inválida - idade muito avançada');
        }
    }
    /**
     * Constrói o objeto de dados do cidadão com validações
     * @private
     */
    buildDadosCidadao(conversaoDto) {
        const { dados_cidadao } = conversaoDto;
        // A validação já garante que data_nascimento existe
        if (!dados_cidadao.data_nascimento) {
            throw new common_1.BadRequestException('Data de nascimento é obrigatória');
        }
        return {
            nome: dados_cidadao.nome.trim(),
            cpf: conversaoDto.cpf,
            rg: dados_cidadao.rg?.trim() || '',
            nis: dados_cidadao.nis?.trim() || undefined,
            email: dados_cidadao.email?.trim() || undefined,
            telefone: dados_cidadao.telefone?.trim() || undefined,
            data_nascimento: new Date(dados_cidadao.data_nascimento),
            sexo: dados_cidadao.sexo,
            endereco: dados_cidadao.endereco,
        };
    }
    /**
     * Mascara o CPF para logs (mantém apenas os 3 primeiros e 2 últimos dígitos)
     * @private
     */
    maskCpf(cpf) {
        if (!cpf || cpf.length < 11) {
            return '***';
        }
        const cleanCpf = cpf.replace(/\D/g, '');
        if (cleanCpf.length !== 11) {
            return '***';
        }
        return `${cleanCpf.substring(0, 3)}*****${cleanCpf.substring(9)}`;
    }
};
exports.VerificacaoPapelController = VerificacaoPapelController;
__decorate([
    (0, common_1.Post)('verificar-conflito'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.verificar-conflito-papel',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'params.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Verifica se um cidadão possui conflito de papéis',
        description: 'Endpoint para verificar se um cidadão possui conflitos de papéis no sistema',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Verificação realizada com sucesso',
        type: verificacao_conflito_papel_dto_1.VerificacaoConflitoPapelResponseDto,
    }),
    (0, swagger_1.ApiBadRequestResponse)({
        description: 'Dados de entrada inválidos',
    }),
    (0, swagger_1.ApiUnauthorizedResponse)({
        description: 'Token de autenticação inválido ou ausente',
    }),
    (0, swagger_1.ApiForbiddenResponse)({
        description: 'Usuário não possui permissão para esta operação',
    }),
    __param(0, (0, common_1.Body)(common_1.ValidationPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof verificacao_conflito_papel_dto_1.VerificacaoConflitoPapelDto !== "undefined" && verificacao_conflito_papel_dto_1.VerificacaoConflitoPapelDto) === "function" ? _c : Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], VerificacaoPapelController.prototype, "verificarConflito", null);
__decorate([
    (0, common_1.Post)('converter-para-beneficiario'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.converter-papel',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'params.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Converte um membro de composição familiar para cidadão beneficiário',
        description: 'Endpoint para converter um membro de composição familiar em cidadão beneficiário',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Conversão realizada com sucesso',
        type: conversao_papel_dto_1.ConversaoPapelResponseDto,
    }),
    (0, swagger_1.ApiBadRequestResponse)({
        description: 'Dados de entrada inválidos ou incompletos',
    }),
    (0, swagger_1.ApiUnauthorizedResponse)({
        description: 'Token de autenticação inválido ou ausente',
    }),
    (0, swagger_1.ApiForbiddenResponse)({
        description: 'Usuário não possui permissão para esta operação',
    }),
    __param(0, (0, common_1.Body)(common_1.ValidationPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof conversao_papel_dto_1.ConversaoParaBeneficiarioDto !== "undefined" && conversao_papel_dto_1.ConversaoParaBeneficiarioDto) === "function" ? _e : Object, Object]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], VerificacaoPapelController.prototype, "converterParaBeneficiario", null);
__decorate([
    (0, common_1.Post)('converter-para-composicao-familiar'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'cidadao.converter-papel',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'params.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Converte um cidadão beneficiário para membro de composição familiar',
        description: 'Endpoint para converter um cidadão beneficiário em membro de composição familiar',
    }),
    (0, swagger_1.ApiResponse)({
        status: common_1.HttpStatus.OK,
        description: 'Conversão realizada com sucesso',
        type: conversao_papel_dto_1.ConversaoPapelResponseDto,
    }),
    (0, swagger_1.ApiBadRequestResponse)({
        description: 'Dados de entrada inválidos ou incompletos',
    }),
    (0, swagger_1.ApiUnauthorizedResponse)({
        description: 'Token de autenticação inválido ou ausente',
    }),
    (0, swagger_1.ApiForbiddenResponse)({
        description: 'Usuário não possui permissão para esta operação',
    }),
    __param(0, (0, common_1.Body)(common_1.ValidationPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_g = typeof conversao_papel_dto_1.ConversaoParaComposicaoFamiliarDto !== "undefined" && conversao_papel_dto_1.ConversaoParaComposicaoFamiliarDto) === "function" ? _g : Object, Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], VerificacaoPapelController.prototype, "converterParaComposicaoFamiliar", null);
exports.VerificacaoPapelController = VerificacaoPapelController = VerificacaoPapelController_1 = __decorate([
    (0, swagger_1.ApiTags)('Cidadão'),
    (0, common_1.Controller)('cidadao/verificacao-papel'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof verificacao_papel_service_1.VerificacaoPapelService !== "undefined" && verificacao_papel_service_1.VerificacaoPapelService) === "function" ? _a : Object, typeof (_b = typeof cidadao_service_1.CidadaoService !== "undefined" && cidadao_service_1.CidadaoService) === "function" ? _b : Object])
], VerificacaoPapelController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,