{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\verificacao-papel.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\verificacao-papel.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n  HttpCode,\n  HttpStatus,\n  BadRequestException,\n  NotFoundException,\n  Logger,\n  ParseUUIDPipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiBadRequestResponse,\n  ApiUnauthorizedResponse,\n  ApiForbiddenResponse,\n} from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { VerificacaoPapelService } from '../services/verificacao-papel.service';\nimport { CidadaoService } from '../services/cidadao.service';\nimport {\n  VerificacaoConflitoPapelDto,\n  VerificacaoConflitoPapelResponseDto,\n} from '../dto/verificacao-conflito-papel.dto';\nimport {\n  ConversaoParaBeneficiarioDto,\n  ConversaoParaComposicaoFamiliarDto,\n  ConversaoPapelResponseDto,\n} from '../dto/conversao-papel.dto';\nimport { TipoEscopo } from '../../../entities/user-permission.entity';\nimport { Sexo } from '../../../enums/sexo.enum';\nimport { EnderecoDto } from '../dto/create-cidadao.dto';\n\ninterface AuthenticatedUser {\n  id: string;\n  email: string;\n  // Adicione outras propriedades conforme necessário\n}\n\ninterface AuthenticatedRequest extends Request {\n  user: AuthenticatedUser;\n}\n\n/**\n * Controller de Verificação de Papel\n *\n * Responsável por expor os endpoints de verificação e conversão de papéis\n * dos cidadãos no sistema.\n */\n@ApiTags('Cidadão')\n@Controller('cidadao/verificacao-papel')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class VerificacaoPapelController {\n  private readonly logger = new Logger(VerificacaoPapelController.name);\n\n  constructor(\n    private readonly verificacaoPapelService: VerificacaoPapelService,\n    private readonly cidadaoService: CidadaoService,\n  ) {}\n\n  /**\n   * Verifica se um cidadão possui conflito de papéis\n   * @param verificacaoDto Dados para verificação\n   * @returns Resultado da verificação\n   */\n  @Post('verificar-conflito')\n  @HttpCode(HttpStatus.OK)\n  @RequiresPermission({\n    permissionName: 'cidadao.verificar-conflito-papel',\n    scopeType: TipoEscopo.UNIDADE,\n    scopeIdExpression: 'params.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Verifica se um cidadão possui conflito de papéis',\n    description:\n      'Endpoint para verificar se um cidadão possui conflitos de papéis no sistema',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Verificação realizada com sucesso',\n    type: VerificacaoConflitoPapelResponseDto,\n  })\n  @ApiBadRequestResponse({\n    description: 'Dados de entrada inválidos',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Token de autenticação inválido ou ausente',\n  })\n  @ApiForbiddenResponse({\n    description: 'Usuário não possui permissão para esta operação',\n  })\n  async verificarConflito(\n    @Body(ValidationPipe) verificacaoDto: VerificacaoConflitoPapelDto,\n  ): Promise<VerificacaoConflitoPapelResponseDto> {\n    this.logger.log(\n      `Iniciando verificação de conflito para CPF: ${this.maskCpf(verificacaoDto.cpf)}`,\n    );\n\n    try {\n      const resultado =\n        await this.verificacaoPapelService.verificarConflitoPapeis(\n          verificacaoDto.cpf,\n        );\n\n      this.logger.log(\n        `Verificação de conflito concluída para CPF: ${this.maskCpf(verificacaoDto.cpf)}`,\n      );\n      return resultado;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar conflito para CPF: ${this.maskCpf(verificacaoDto.cpf)}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Converte um membro de composição familiar para cidadão beneficiário\n   * @param conversaoDto Dados para conversão\n   * @param req Requisição autenticada\n   * @returns Resultado da conversão\n   */\n  @Post('converter-para-beneficiario')\n  @HttpCode(HttpStatus.OK)\n  @RequiresPermission({\n    permissionName: 'cidadao.converter-papel',\n    scopeType: TipoEscopo.UNIDADE,\n    scopeIdExpression: 'params.unidadeId',\n  })\n  @ApiOperation({\n    summary:\n      'Converte um membro de composição familiar para cidadão beneficiário',\n    description:\n      'Endpoint para converter um membro de composição familiar em cidadão beneficiário',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Conversão realizada com sucesso',\n    type: ConversaoPapelResponseDto,\n  })\n  @ApiBadRequestResponse({\n    description: 'Dados de entrada inválidos ou incompletos',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Token de autenticação inválido ou ausente',\n  })\n  @ApiForbiddenResponse({\n    description: 'Usuário não possui permissão para esta operação',\n  })\n  async converterParaBeneficiario(\n    @Body(ValidationPipe) conversaoDto: ConversaoParaBeneficiarioDto,\n    @Req() req: AuthenticatedRequest,\n  ): Promise<ConversaoPapelResponseDto> {\n    const usuarioId = req.user.id;\n    const cpfMasked = this.maskCpf(conversaoDto.cpf);\n\n    this.logger.log(\n      `Iniciando conversão para beneficiário - CPF: ${cpfMasked}, Usuário: ${usuarioId}`,\n    );\n\n    try {\n      this.validateConversaoParaBeneficiario(conversaoDto);\n\n      const dadosCidadao = this.buildDadosCidadao(conversaoDto);\n\n      // Buscar cidadão pelo CPF para obter o ID\n      const cidadao = await this.cidadaoService.findByCpf(conversaoDto.cpf);\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      const resultado =\n        await this.verificacaoPapelService.converterParaBeneficiario(\n          cidadao.id,\n          conversaoDto.justificativa,\n        );\n\n      this.logger.log(\n        `Conversão para beneficiário concluída - CPF: ${cpfMasked}`,\n      );\n      return resultado;\n    } catch (error) {\n      this.logger.error(\n        `Erro na conversão para beneficiário - CPF: ${cpfMasked}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Converte um cidadão beneficiário para membro de composição familiar\n   * @param conversaoDto Dados para conversão\n   * @param req Requisição autenticada\n   * @returns Resultado da conversão\n   */\n  @Post('converter-para-composicao-familiar')\n  @HttpCode(HttpStatus.OK)\n  @RequiresPermission({\n    permissionName: 'cidadao.converter-papel',\n    scopeType: TipoEscopo.UNIDADE,\n    scopeIdExpression: 'params.unidadeId',\n  })\n  @ApiOperation({\n    summary:\n      'Converte um cidadão beneficiário para membro de composição familiar',\n    description:\n      'Endpoint para converter um cidadão beneficiário em membro de composição familiar',\n  })\n  @ApiResponse({\n    status: HttpStatus.OK,\n    description: 'Conversão realizada com sucesso',\n    type: ConversaoPapelResponseDto,\n  })\n  @ApiBadRequestResponse({\n    description: 'Dados de entrada inválidos ou incompletos',\n  })\n  @ApiUnauthorizedResponse({\n    description: 'Token de autenticação inválido ou ausente',\n  })\n  @ApiForbiddenResponse({\n    description: 'Usuário não possui permissão para esta operação',\n  })\n  async converterParaComposicaoFamiliar(\n    @Body(ValidationPipe) conversaoDto: ConversaoParaComposicaoFamiliarDto,\n    @Req() req: AuthenticatedRequest,\n  ): Promise<ConversaoPapelResponseDto> {\n    const usuarioId = req.user.id;\n    const cpfMasked = this.maskCpf(conversaoDto.cpf);\n\n    this.logger.log(\n      `Iniciando conversão para composição familiar - CPF: ${cpfMasked}, Usuário: ${usuarioId}`,\n    );\n\n    try {\n      const resultado =\n        await this.verificacaoPapelService.converterParaComposicaoFamiliar(\n          conversaoDto.cpf,\n          conversaoDto.cidadao_alvo_id,\n          conversaoDto.dados_composicao,\n          conversaoDto.justificativa,\n          usuarioId,\n        );\n\n      this.logger.log(\n        `Conversão para composição familiar concluída - CPF: ${cpfMasked}`,\n      );\n      return resultado;\n    } catch (error) {\n      this.logger.error(\n        `Erro na conversão para composição familiar - CPF: ${cpfMasked}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Valida os dados necessários para conversão para beneficiário\n   * @private\n   */\n  private validateConversaoParaBeneficiario(\n    conversaoDto: ConversaoParaBeneficiarioDto,\n  ): void {\n    if (!conversaoDto.dados_cidadao) {\n      throw new BadRequestException(\n        'Dados do cidadão são obrigatórios para a conversão',\n      );\n    }\n\n    const { dados_cidadao } = conversaoDto;\n\n    if (!dados_cidadao.data_nascimento) {\n      throw new BadRequestException('Data de nascimento é obrigatória');\n    }\n\n    if (!dados_cidadao.nome?.trim()) {\n      throw new BadRequestException('Nome do cidadão é obrigatório');\n    }\n\n    if (\n      !dados_cidadao.sexo ||\n      !Object.values(Sexo).includes(dados_cidadao.sexo as Sexo)\n    ) {\n      throw new BadRequestException(\n        'Sexo do cidadão é obrigatório e deve ser válido',\n      );\n    }\n\n    // Validação adicional da data de nascimento\n    const dataNascimento = new Date(dados_cidadao.data_nascimento);\n    if (isNaN(dataNascimento.getTime())) {\n      throw new BadRequestException(\n        'Data de nascimento deve ser uma data válida',\n      );\n    }\n\n    const hoje = new Date();\n    if (dataNascimento > hoje) {\n      throw new BadRequestException('Data de nascimento não pode ser futura');\n    }\n\n    // Validação de idade mínima/máxima razoável (ex: entre 0 e 150 anos)\n    const idade = hoje.getFullYear() - dataNascimento.getFullYear();\n    if (idade > 150) {\n      throw new BadRequestException(\n        'Data de nascimento inválida - idade muito avançada',\n      );\n    }\n  }\n\n  /**\n   * Constrói o objeto de dados do cidadão com validações\n   * @private\n   */\n  private buildDadosCidadao(conversaoDto: ConversaoParaBeneficiarioDto) {\n    const { dados_cidadao } = conversaoDto;\n\n    // A validação já garante que data_nascimento existe\n    if (!dados_cidadao.data_nascimento) {\n      throw new BadRequestException('Data de nascimento é obrigatória');\n    }\n\n    return {\n      nome: dados_cidadao.nome.trim(),\n      cpf: conversaoDto.cpf,\n      rg: dados_cidadao.rg?.trim() || '',\n      nis: dados_cidadao.nis?.trim() || undefined,\n      email: dados_cidadao.email?.trim() || undefined,\n      telefone: dados_cidadao.telefone?.trim() || undefined,\n      data_nascimento: new Date(dados_cidadao.data_nascimento),\n      sexo: dados_cidadao.sexo as Sexo,\n      endereco: dados_cidadao.endereco as unknown as EnderecoDto,\n    };\n  }\n\n  /**\n   * Mascara o CPF para logs (mantém apenas os 3 primeiros e 2 últimos dígitos)\n   * @private\n   */\n  private maskCpf(cpf: string): string {\n    if (!cpf || cpf.length < 11) {\n      return '***';\n    }\n\n    const cleanCpf = cpf.replace(/\\D/g, '');\n    if (cleanCpf.length !== 11) {\n      return '***';\n    }\n\n    return `${cleanCpf.substring(0, 3)}*****${cleanCpf.substring(9)}`;\n  }\n}\n"],"version":3}