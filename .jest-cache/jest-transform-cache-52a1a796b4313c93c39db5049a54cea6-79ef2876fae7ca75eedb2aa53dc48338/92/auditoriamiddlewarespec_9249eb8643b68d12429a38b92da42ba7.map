{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\tests\\middlewares\\auditoria.middleware.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\tests\\middlewares\\auditoria.middleware.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuditoriaMiddleware } from '../../middlewares/auditoria.middleware';\nimport { AuditoriaService } from '../../services/auditoria.service';\nimport { AuditoriaQueueService } from '../../services/auditoria-queue.service';\nimport { TipoOperacao } from '../../../auditoria/enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../../dto/create-log-auditoria.dto';\nimport { LogAuditoria } from '../../entities';\nimport { Request, Response } from 'express';\n\n// Função auxiliar para criar um mock do objeto Request do Express\nfunction createMockRequest(options: any = {}): Request {\n  const mockRequest = {\n    get: jest.fn(),\n    header: jest.fn(),\n    accepts: jest.fn(),\n    acceptsCharsets: jest.fn(),\n    acceptsEncodings: jest.fn(),\n    acceptsLanguages: jest.fn(),\n    acceptsTypes: jest.fn(),\n    range: jest.fn(),\n    param: jest.fn(),\n    is: jest.fn(),\n    cookies: {},\n    signedCookies: {},\n    query: {},\n    params: {},\n    route: {},\n    secure: false,\n    stale: false,\n    xhr: false,\n    fresh: false,\n    protocol: 'http',\n    hostname: 'localhost',\n    subdomains: [],\n    baseUrl: '',\n    path: '',\n    url: '',\n    app: {},\n    res: {},\n    next: jest.fn(),\n    ...options,\n  };\n\n  return mockRequest as unknown as Request;\n}\n\n// Função auxiliar para criar um mock do objeto Response do Express\nfunction createMockResponse(options: any = {}): Response {\n  const mockResponse = {\n    status: jest.fn().mockReturnThis(),\n    sendStatus: jest.fn().mockReturnThis(),\n    json: jest.fn().mockReturnThis(),\n    send: jest.fn().mockReturnThis(),\n    end: jest.fn().mockReturnThis(),\n    type: jest.fn().mockReturnThis(),\n    cookie: jest.fn().mockReturnThis(),\n    clearCookie: jest.fn().mockReturnThis(),\n    redirect: jest.fn().mockReturnThis(),\n    render: jest.fn().mockReturnThis(),\n    set: jest.fn().mockReturnThis(),\n    setHeader: jest.fn().mockReturnThis(),\n    get: jest.fn(),\n    getHeader: jest.fn(),\n    getHeaders: jest.fn(),\n    contentType: jest.fn().mockReturnThis(),\n    format: jest.fn(),\n    attachment: jest.fn().mockReturnThis(),\n    append: jest.fn().mockReturnThis(),\n    header: jest.fn().mockReturnThis(),\n    headersSent: false,\n    locals: {},\n    charset: '',\n    app: {},\n    req: {},\n    on: jest.fn().mockImplementation((event, callback) => {\n      if (event === 'finish') {\n        callback();\n      }\n      return mockResponse;\n    }),\n    ...options,\n  };\n\n  return mockResponse as unknown as Response;\n}\n\ndescribe('AuditoriaMiddleware', () => {\n  let middleware: AuditoriaMiddleware;\n  let auditoriaService: AuditoriaService;\n\n  const mockAuditoriaService = {\n    create: jest.fn(),\n  };\n\n  const mockAuditoriaQueueService = {\n    enfileirarLogAuditoria: jest.fn(),\n    enfileirarAcessoDadosSensiveis: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuditoriaMiddleware,\n        {\n          provide: AuditoriaService,\n          useValue: mockAuditoriaService,\n        },\n        {\n          provide: AuditoriaQueueService,\n          useValue: mockAuditoriaQueueService,\n        },\n      ],\n    }).compile();\n\n    middleware = module.get<AuditoriaMiddleware>(AuditoriaMiddleware);\n    auditoriaService = module.get<AuditoriaService>(AuditoriaService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(middleware).toBeDefined();\n  });\n\n  describe('use', () => {\n    it('deve registrar operação GET', () => {\n      // Arrange\n      const req = createMockRequest({\n        method: 'GET',\n        originalUrl: '/api/documentos/123',\n        user: { id: 'user-123', nome: 'Usuário Teste' },\n        ip: '127.0.0.1',\n        headers: {},\n      });\n      const res = createMockResponse({\n        statusCode: 200,\n      });\n      const next = jest.fn();\n\n      const expectedLogDto = new CreateLogAuditoriaDto();\n      expectedLogDto.tipo_operacao = TipoOperacao.READ;\n      expectedLogDto.entidade_afetada = 'documentos';\n      expectedLogDto.entidade_id = '123';\n      expectedLogDto.descricao = 'Consulta de documento';\n      expectedLogDto.dados_anteriores = {};\n      expectedLogDto.dados_novos = {};\n      expectedLogDto.usuario_id = 'user-123';\n      expectedLogDto.ip_origem = '127.0.0.1';\n\n      const mockLogAuditoria = new LogAuditoria();\n      mockAuditoriaService.create.mockResolvedValue(mockLogAuditoria);\n\n      // Act\n      middleware.use(req, res, next);\n\n      // Assert\n      expect(next).toHaveBeenCalled();\n      expect(res.on).toHaveBeenCalledWith('finish', expect.any(Function));\n      expect(auditoriaService.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.READ,\n          entidade_afetada: 'documentos',\n          entidade_id: '123',\n          usuario_id: 'user-123',\n          ip_origem: '127.0.0.1',\n        }),\n      );\n    });\n\n    it('deve registrar operação POST', () => {\n      // Arrange\n      const req = createMockRequest({\n        method: 'POST',\n        originalUrl: '/api/documentos',\n        user: { id: 'user-123', nome: 'Usuário Teste' },\n        ip: '127.0.0.1',\n        headers: {},\n        body: { nome: 'Documento Teste', conteudo: 'Conteúdo do documento' },\n      });\n      const res = createMockResponse({\n        statusCode: 201,\n      });\n      const next = jest.fn();\n\n      const mockLogAuditoria = new LogAuditoria();\n      mockAuditoriaService.create.mockResolvedValue(mockLogAuditoria);\n\n      // Act\n      middleware.use(req, res, next);\n\n      // Assert\n      expect(next).toHaveBeenCalled();\n      expect(res.on).toHaveBeenCalledWith('finish', expect.any(Function));\n      expect(auditoriaService.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'documentos',\n          dados_novos: req.body,\n          usuario_id: 'user-123',\n          ip_origem: '127.0.0.1',\n        }),\n      );\n    });\n\n    it('deve registrar operação PUT', () => {\n      // Arrange\n      const req = createMockRequest({\n        method: 'PUT',\n        originalUrl: '/api/documentos/123',\n        user: { id: 'user-123', nome: 'Usuário Teste' },\n        ip: '127.0.0.1',\n        headers: {},\n        body: { nome: 'Documento Atualizado', conteudo: 'Novo conteúdo' },\n      });\n      const res = createMockResponse({\n        statusCode: 200,\n      });\n      const next = jest.fn();\n\n      const mockLogAuditoria = new LogAuditoria();\n      mockAuditoriaService.create.mockResolvedValue(mockLogAuditoria);\n\n      // Act\n      middleware.use(req, res, next);\n\n      // Assert\n      expect(next).toHaveBeenCalled();\n      expect(res.on).toHaveBeenCalledWith('finish', expect.any(Function));\n      expect(auditoriaService.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.UPDATE,\n          entidade_afetada: 'documentos',\n          entidade_id: '123',\n          dados_novos: req.body,\n          usuario_id: 'user-123',\n          ip_origem: '127.0.0.1',\n        }),\n      );\n    });\n\n    it('deve registrar operação DELETE', () => {\n      // Arrange\n      const req = createMockRequest({\n        method: 'DELETE',\n        originalUrl: '/api/documentos/123',\n        user: { id: 'user-123', nome: 'Usuário Teste' },\n        ip: '127.0.0.1',\n        headers: {},\n      });\n      const res = createMockResponse({\n        statusCode: 204,\n      });\n      const next = jest.fn();\n\n      const mockLogAuditoria = new LogAuditoria();\n      mockAuditoriaService.create.mockResolvedValue(mockLogAuditoria);\n\n      // Act\n      middleware.use(req, res, next);\n\n      // Assert\n      expect(next).toHaveBeenCalled();\n      expect(res.on).toHaveBeenCalledWith('finish', expect.any(Function));\n      expect(auditoriaService.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.DELETE,\n          entidade_afetada: 'documentos',\n          entidade_id: '123',\n          usuario_id: 'user-123',\n          ip_origem: '127.0.0.1',\n        }),\n      );\n    });\n\n    it('deve registrar operação PATCH', () => {\n      // Arrange\n      const req = createMockRequest({\n        method: 'PATCH',\n        originalUrl: '/api/documentos/123',\n        user: { id: 'user-123', nome: 'Usuário Teste' },\n        ip: '127.0.0.1',\n        headers: {},\n      });\n      const res = createMockResponse({\n        statusCode: 200,\n      });\n      const next = jest.fn();\n\n      // Act\n      middleware.use(req, res, next);\n\n      // Assert\n      expect(next).toHaveBeenCalled();\n      expect(res.on).toHaveBeenCalledWith('finish', expect.any(Function));\n      expect(auditoriaService.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.UPDATE,\n          entidade_afetada: 'documentos',\n          entidade_id: '123',\n          usuario_id: 'user-123',\n          ip_origem: '127.0.0.1',\n        }),\n      );\n    });\n\n    it('não deve registrar operações para rotas ignoradas', () => {\n      // Arrange\n      const req = createMockRequest({\n        method: 'GET',\n        originalUrl: '/api/health',\n        user: { id: 'user-123', nome: 'Usuário Teste' },\n        ip: '127.0.0.1',\n        headers: {},\n      });\n      const res = createMockResponse({\n        statusCode: 200,\n      });\n      const next = jest.fn();\n\n      // Act\n      middleware.use(req, res, next);\n\n      // Assert\n      expect(next).toHaveBeenCalled();\n      expect(auditoriaService.create).not.toHaveBeenCalled();\n    });\n\n    it('deve lidar com requisições sem usuário autenticado', () => {\n      // Arrange\n      const req = createMockRequest({\n        method: 'GET',\n        originalUrl: '/api/documentos/123',\n        user: null,\n        ip: '127.0.0.1',\n        headers: {},\n      });\n      const res = createMockResponse({\n        statusCode: 200,\n      });\n      const next = jest.fn();\n\n      const mockLogAuditoria = new LogAuditoria();\n      mockAuditoriaService.create.mockResolvedValue(mockLogAuditoria);\n\n      // Act\n      middleware.use(req, res, next);\n\n      // Assert\n      expect(next).toHaveBeenCalled();\n      expect(res.on).toHaveBeenCalledWith('finish', expect.any(Function));\n      expect(auditoriaService.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          tipo_operacao: TipoOperacao.READ,\n          entidade_afetada: 'documentos',\n          entidade_id: '123',\n          usuario_id: null,\n          ip_origem: '127.0.0.1',\n        }),\n      );\n    });\n  });\n});\n"],"version":3}