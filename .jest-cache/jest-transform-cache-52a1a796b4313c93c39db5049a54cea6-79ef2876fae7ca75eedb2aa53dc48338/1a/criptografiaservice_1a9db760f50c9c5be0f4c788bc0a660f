514965d618accb7f6387bfe8354b0425
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CriptografiaService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CriptografiaService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const crypto = __importStar(require("crypto"));
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const chave_monitor_service_1 = require("./chave-monitor.service");
/**
 * Serviço de Criptografia
 *
 * Responsável por criptografar e descriptografar dados sensíveis,
 * especialmente documentos armazenados no MinIO.
 * Implementa criptografia AES-256-GCM para garantir confidencialidade
 * e integridade dos dados.
 */
let CriptografiaService = CriptografiaService_1 = class CriptografiaService {
    configService;
    chaveMonitorService;
    logger = new common_1.Logger(CriptografiaService_1.name);
    algorithm = 'aes-256-gcm';
    keyLength = 32; // 256 bits
    ivLength = 16; // 128 bits
    authTagLength = 16; // 128 bits
    masterKey;
    keyPath;
    tiposSensiveis;
    constructor(configService, chaveMonitorService) {
        this.configService = configService;
        this.chaveMonitorService = chaveMonitorService;
        // Obter a chave da variável de ambiente ou do arquivo
        const envKey = this.configService.get('ENCRYPTION_KEY');
        // Inicializar a lista de tipos sensíveis
        this.tiposSensiveis = this.configService.get('TIPOS_DOCUMENTOS_SENSIVEIS', [
            'ATESTADO_MEDICO',
            'LAUDO_MEDICO',
            'DOCUMENTO_IDENTIDADE',
            'CPF',
            'CARTAO_NIS',
            'DECLARACAO_SAUDE',
            'PRONTUARIO_MEDICO',
        ]);
        if (envKey) {
            // Usar a chave da variável de ambiente
            this.masterKey = Buffer.from(envKey);
            this.logger.log('Usando chave de criptografia da variável de ambiente');
        }
        else {
            // Caminho padrão para o arquivo de chave
            this.keyPath =
                this.configService.get('ENCRYPTION_KEY_PATH') ||
                    path.join(process.cwd(), 'config', 'encryption.key');
            // Garantir que o diretório da chave existe
            const keyDir = path.dirname(this.keyPath);
            if (!fs.existsSync(keyDir)) {
                fs.mkdirSync(keyDir, { recursive: true });
            }
            // Verificar se a chave já existe, caso contrário, criar uma nova
            if (fs.existsSync(this.keyPath)) {
                this.masterKey = fs.readFileSync(this.keyPath);
                this.logger.log('Chave de criptografia carregada do arquivo');
                // Verificar integridade da chave se o monitor estiver disponível
                if (this.chaveMonitorService) {
                    const integridadeOk = this.chaveMonitorService.verificarIntegridade();
                    if (!integridadeOk) {
                        this.logger.warn('Alerta de segurança: Possível comprometimento da chave de criptografia');
                    }
                }
            }
            else {
                this.masterKey = crypto.randomBytes(this.keyLength);
                fs.writeFileSync(this.keyPath, this.masterKey, { mode: 0o600 });
                this.logger.log('Nova chave de criptografia gerada e salva');
                // Criar backup da chave se o monitor estiver disponível
                if (this.chaveMonitorService) {
                    this.chaveMonitorService.criarBackup();
                }
            }
        }
    }
    /**
     * Criptografa um buffer de dados
     * @param data Buffer a ser criptografado
     * @returns Objeto com dados criptografados, IV e tag de autenticação
     */
    criptografarBuffer(data) {
        // Gerar IV (Initialization Vector) aleatório
        const iv = crypto.randomBytes(this.ivLength);
        // Criar cipher com algoritmo, chave e IV
        const cipher = crypto.createCipheriv(this.algorithm, this.masterKey, iv, {
            authTagLength: this.authTagLength,
        });
        // Criptografar dados
        const dadosCriptografados = Buffer.concat([
            cipher.update(data),
            cipher.final(),
        ]);
        // Obter tag de autenticação
        const authTag = cipher.getAuthTag();
        return { dadosCriptografados, iv, authTag };
    }
    /**
     * Descriptografa um buffer de dados
     * @param dadosCriptografados Buffer criptografado
     * @param iv Initialization Vector usado na criptografia
     * @param authTag Tag de autenticação para verificar integridade
     * @returns Buffer descriptografado
     */
    descriptografarBuffer(dadosCriptografados, iv, authTag) {
        try {
            // Criar decipher com algoritmo, chave e IV
            const decipher = crypto.createDecipheriv(this.algorithm, this.masterKey, iv, {
                authTagLength: this.authTagLength,
            });
            // Definir tag de autenticação para verificação
            decipher.setAuthTag(authTag);
            // Descriptografar dados
            const dadosDescriptografados = Buffer.concat([
                decipher.update(dadosCriptografados),
                decipher.final(),
            ]);
            return dadosDescriptografados;
        }
        catch (error) {
            this.logger.error(`Erro ao descriptografar dados: ${error.message}`);
            throw new Error('Falha na descriptografia. Os dados podem ter sido corrompidos ou adulterados.');
        }
    }
    /**
     * Criptografa um arquivo
     * @param caminhoArquivo Caminho do arquivo a ser criptografado
     * @param caminhoDestino Caminho onde o arquivo criptografado será salvo
     * @returns Metadados de criptografia (IV e tag de autenticação)
     */
    criptografarArquivo(caminhoArquivo, caminhoDestino) {
        // Ler arquivo
        const dados = fs.readFileSync(caminhoArquivo);
        // Criptografar dados
        const { dadosCriptografados, iv, authTag } = this.criptografarBuffer(dados);
        // Salvar arquivo criptografado
        fs.writeFileSync(caminhoDestino, dadosCriptografados);
        // Retornar metadados de criptografia em formato base64
        return {
            iv: iv.toString('base64'),
            authTag: authTag.toString('base64'),
        };
    }
    /**
     * Descriptografa um arquivo
     * @param caminhoArquivo Caminho do arquivo criptografado
     * @param caminhoDestino Caminho onde o arquivo descriptografado será salvo
     * @param iv Initialization Vector em formato base64
     * @param authTag Tag de autenticação em formato base64
     */
    descriptografarArquivo(caminhoArquivo, caminhoDestino, iv, authTag) {
        // Ler arquivo criptografado
        const dadosCriptografados = fs.readFileSync(caminhoArquivo);
        // Converter IV e authTag de base64 para Buffer
        const ivBuffer = Buffer.from(iv, 'base64');
        const authTagBuffer = Buffer.from(authTag, 'base64');
        // Descriptografar dados
        const dadosDescriptografados = this.descriptografarBuffer(dadosCriptografados, ivBuffer, authTagBuffer);
        // Salvar arquivo descriptografado
        fs.writeFileSync(caminhoDestino, dadosDescriptografados);
    }
    /**
     * Criptografa um buffer e retorna um único buffer contendo
     * todos os dados necessários para descriptografia
     * @param data Buffer a ser criptografado
     * @returns Buffer contendo IV, authTag e dados criptografados
     */
    criptografarParaTransporte(data) {
        // Criptografar dados
        const { dadosCriptografados, iv, authTag } = this.criptografarBuffer(data);
        // Criar buffer com formato: [IV_LENGTH(2)][IV(16)][AUTH_TAG_LENGTH(2)][AUTH_TAG(16)][ENCRYPTED_DATA]
        const resultado = Buffer.alloc(4 + iv.length + authTag.length + dadosCriptografados.length);
        // Escrever tamanho do IV (2 bytes)
        resultado.writeUInt16BE(iv.length, 0);
        // Escrever IV
        iv.copy(resultado, 2);
        // Escrever tamanho da tag de autenticação (2 bytes)
        resultado.writeUInt16BE(authTag.length, 2 + iv.length);
        // Escrever tag de autenticação
        authTag.copy(resultado, 4 + iv.length);
        // Escrever dados criptografados
        dadosCriptografados.copy(resultado, 4 + iv.length + authTag.length);
        return resultado;
    }
    /**
     * Descriptografa um buffer que foi criptografado com criptografarParaTransporte
     * @param data Buffer contendo IV, authTag e dados criptografados
     * @returns Buffer descriptografado
     */
    descriptografarDeTransporte(data) {
        // Ler tamanho do IV (2 bytes)
        const ivLength = data.readUInt16BE(0);
        // Ler IV
        const iv = data.slice(2, 2 + ivLength);
        // Ler tamanho da tag de autenticação (2 bytes)
        const authTagLength = data.readUInt16BE(2 + ivLength);
        // Ler tag de autenticação
        const authTag = data.slice(4 + ivLength, 4 + ivLength + authTagLength);
        // Ler dados criptografados
        const dadosCriptografados = data.slice(4 + ivLength + authTagLength);
        // Descriptografar dados
        return this.descriptografarBuffer(dadosCriptografados, iv, authTag);
    }
    /**
     * Gera um hash SHA-256 de um buffer
     * @param data Buffer para calcular o hash
     * @returns Hash SHA-256 em formato hexadecimal
     */
    gerarHash(data) {
        return crypto.createHash('sha256').update(data).digest('hex');
    }
    /**
     * Verifica se um buffer corresponde a um hash SHA-256
     * @param data Buffer para verificar
     * @param hash Hash SHA-256 em formato hexadecimal
     * @returns true se o hash corresponder, false caso contrário
     */
    verificarHash(data, hash) {
        const calculatedHash = this.gerarHash(data);
        return calculatedHash === hash;
    }
    /**
     * Verifica se um tipo de documento deve ser criptografado
     * @param tipoDocumento Tipo de documento
     * @returns true se o documento deve ser criptografado, false caso contrário
     */
    deveSerCriptografado(tipoDocumento) {
        return this.tiposSensiveis.includes(tipoDocumento);
    }
    /**
     * Converte o formato dos dados criptografados para compatibilidade com a implementação anterior
     * @param resultado Resultado da criptografia no formato do serviço compartilhado
     * @returns Resultado formatado no estilo do serviço específico de documento
     */
    formatarParaLegado(resultado) {
        return {
            bufferCriptografado: resultado.dadosCriptografados,
            iv: resultado.iv.toString('hex'),
            authTag: resultado.authTag.toString('hex'),
        };
    }
    /**
     * Criptografa um buffer (método legado para compatibilidade)
     * @param buffer Buffer a ser criptografado
     * @returns Objeto com o buffer criptografado e os metadados necessários para descriptografia
     */
    criptografar(buffer) {
        try {
            // Usar o método interno e converter o formato
            const resultado = this.criptografarBuffer(buffer);
            return this.formatarParaLegado(resultado);
        }
        catch (error) {
            this.logger.error(`Erro ao criptografar documento: ${error.message}`);
            throw new Error(`Erro ao criptografar documento: ${error.message}`);
        }
    }
    /**
     * Descriptografa um buffer (método legado para compatibilidade)
     * @param bufferCriptografado Buffer criptografado
     * @param iv Vetor de inicialização usado na criptografia (em formato hexadecimal)
     * @param authTag Tag de autenticação gerada na criptografia (em formato hexadecimal)
     * @returns Buffer descriptografado
     */
    descriptografar(bufferCriptografado, iv, authTag) {
        try {
            // Converter IV e authTag de hex para Buffer
            const ivBuffer = Buffer.from(iv, 'hex');
            const authTagBuffer = Buffer.from(authTag, 'hex');
            // Usar o método interno para descriptografar
            return this.descriptografarBuffer(bufferCriptografado, ivBuffer, authTagBuffer);
        }
        catch (error) {
            this.logger.error(`Erro ao descriptografar documento: ${error.message}`);
            throw new Error(`Erro ao descriptografar documento: ${error.message}`);
        }
    }
};
exports.CriptografiaService = CriptografiaService;
exports.CriptografiaService = CriptografiaService = CriptografiaService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof chave_monitor_service_1.ChaveMonitorService !== "undefined" && chave_monitor_service_1.ChaveMonitorService) === "function" ? _b : Object])
], CriptografiaService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,