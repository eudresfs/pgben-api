{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\csv.strategy.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,6DAAyD;AACzD,uEAAkE;AAGlE;;;;;GAKG;AACH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAS3B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC;QAC7B,qBAAqB,EAAE,yBAAyB;KACjD,CAAC,CAAC,CAAC;IAEJ,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;QACrB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QACxE,QAAQ,EAAE;YACR,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;SAClB;KACF,CAAC,CAAC,CAAC;IAjBJ,IAAI,QAAqB,CAAC;IAC1B,IAAI,gBAAkC,CAAC;IAEvC,4BAA4B;IAC5B,MAAM,yBAAyB,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;QAC1D,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;KACrD,CAAC,CAAC;IAaH,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,0BAAW;gBACX;oBACE,OAAO,EAAE,qCAAgB;oBACzB,QAAQ,EAAE;wBACR,eAAe,EAAE,IAAI;6BAClB,EAAE,EAAE;6BACJ,eAAe,CAAC,8BAA8B,CAAC;wBAClD,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,SAAS,CAAC;qBACxD;iBACF;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAc,0BAAW,CAAC,CAAC;QAChD,gBAAgB,GAAG,MAAM,CAAC,GAAG,CAAmB,qCAAgB,CAAC,CAAC;QAElE,kCAAkC;QAClC,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,IAAI,GAAG,YAAY,CAAC;YAC1B,MAAM,KAAK,GAAG;gBACZ,MAAM,EAAE,yBAAyB;gBACjC,SAAS,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE;gBACjC,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;aACxD,CAAC;YACF,MAAM,MAAM,GAAG,EAAE,CAAC;YAElB,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAEzD,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC3D,MAAM,CAAC,gBAAgB,CAAC,WAAW,CAAC,EACpC,KAAK,CACN,CAAC;YACF,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC3D,MAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CACxD,CAAC;YACF,MAAM,CAAC,yBAAyB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,MAAM,IAAI,GAAG,YAAY,CAAC;YAC1B,MAAM,KAAK,GAAG;gBACZ,MAAM,EAAE,oCAAoC;gBAC5C,OAAO,EAAE,yBAAyB;gBAClC,OAAO,EAAE,eAAe;gBACxB,aAAa,EAAE,iBAAiB;gBAChC,KAAK,EAAE;oBACL,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE;oBAC9D,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,EAAE;iBAC/D;gBACD,KAAK,EAAE,GAAG;aACX,CAAC;YACF,MAAM,MAAM,GAAG,EAAE,CAAC;YAElB,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,yBAAyB,CAAC,CAAC,oBAAoB,CAAC;gBACrD,IAAI,EAAE,MAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC;gBAC7D,MAAM,EAAE,MAAM,CAAC,eAAe,CAAC;oBAC7B,MAAM,CAAC,gBAAgB,CAAC;wBACtB,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;wBACtB,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;qBAC1B,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,IAAI,GAAG,cAAc,CAAC;YAC5B,MAAM,KAAK,GAAG;gBACZ,MAAM,EAAE,sCAAsC;gBAC9C,OAAO,EAAE,yBAAyB;gBAClC,OAAO,EAAE,eAAe;gBACxB,KAAK,EAAE;oBACL,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,EAAE;oBACtC,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,EAAE;oBACtC,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE;iBACvC;gBACD,KAAK,EAAE,EAAE;aACV,CAAC;YACF,MAAM,MAAM,GAAG,EAAE,CAAC;YAElB,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,yBAAyB,CAAC,CAAC,oBAAoB,CAAC;gBACrD,IAAI,EAAE,MAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC;gBAC7D,MAAM,EAAE,MAAM,CAAC,eAAe,CAAC;oBAC7B,MAAM,CAAC,gBAAgB,CAAC;wBACtB,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;wBACtB,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;qBAC1B,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,IAAI,GAAG,cAAc,CAAC;YAC5B,MAAM,KAAK,GAAG;gBACZ,MAAM,EAAE,uCAAuC;gBAC/C,OAAO,EAAE,yBAAyB;gBAClC,KAAK,EAAE;oBACL;wBACE,OAAO,EAAE,WAAW;wBACpB,iBAAiB,EAAE,EAAE;wBACrB,qBAAqB,EAAE,EAAE;wBACzB,qBAAqB,EAAE,CAAC;qBACzB;oBACD;wBACE,OAAO,EAAE,WAAW;wBACpB,iBAAiB,EAAE,EAAE;wBACrB,qBAAqB,EAAE,EAAE;wBACzB,qBAAqB,EAAE,CAAC;qBACzB;iBACF;gBACD,MAAM,EAAE;oBACN,iBAAiB,EAAE,EAAE;oBACrB,qBAAqB,EAAE,EAAE;oBACzB,qBAAqB,EAAE,EAAE;iBAC1B;aACF,CAAC;YACF,MAAM,MAAM,GAAG,EAAE,CAAC;YAElB,MAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAE1C,MAAM,CAAC,yBAAyB,CAAC,CAAC,oBAAoB,CAAC;gBACrD,IAAI,EAAE,MAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC;gBAC7D,MAAM,EAAE,MAAM,CAAC,eAAe,CAAC;oBAC7B,MAAM,CAAC,gBAAgB,CAAC;wBACtB,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;wBACtB,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC;qBAC1B,CAAC;iBACH,CAAC;aACH,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;YACjD,yBAAyB,CAAC,mBAAmB,CAAC;gBAC5C,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,qBAAqB,CAAC,SAAS,CAAC;aACzD,CAAC,CAAC;YAEH,MAAM,IAAI,GAAG,YAAY,CAAC;YAC1B,MAAM,KAAK,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;YAC7C,MAAM,MAAM,GAAG,EAAE,CAAC;YAElB,MAAM,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAC/D,mBAAmB,CACpB,CAAC;YAEF,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC,oBAAoB,CAC3D,MAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CACxD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\csv.strategy.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CsvStrategy } from '../strategies/csv.strategy';\nimport { TempFilesService } from '../services/temp-files.service';\nimport * as fs from 'fs';\n\n/**\n * Testes unitários para a estratégia de relatórios em CSV\n *\n * Este arquivo contém testes que validam a funcionalidade da estratégia\n * responsável por gerar relatórios em formato CSV\n */\ndescribe('CsvStrategy', () => {\n  let strategy: CsvStrategy;\n  let tempFilesService: TempFilesService;\n\n  // Mock para fs e csv-writer\n  const mockCreateObjectCsvWriter = jest.fn().mockReturnValue({\n    writeRecords: jest.fn().mockResolvedValue(undefined),\n  });\n\n  jest.mock('csv-writer', () => ({\n    createObjectCsvWriter: mockCreateObjectCsvWriter,\n  }));\n\n  jest.mock('fs', () => ({\n    readFileSync: jest.fn().mockReturnValue(Buffer.from('mock csv content')),\n    promises: {\n      unlink: jest.fn(),\n    },\n  }));\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CsvStrategy,\n        {\n          provide: TempFilesService,\n          useValue: {\n            getTempFilePath: jest\n              .fn()\n              .mockReturnValue('temp/relatorios/test-123.csv'),\n            cleanupTempFile: jest.fn().mockResolvedValue(undefined),\n          },\n        },\n      ],\n    }).compile();\n\n    strategy = module.get<CsvStrategy>(CsvStrategy);\n    tempFilesService = module.get<TempFilesService>(TempFilesService);\n\n    // Reset mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(strategy).toBeDefined();\n  });\n\n  describe('gerar', () => {\n    it('deve gerar um relatório CSV e retornar um buffer', async () => {\n      const tipo = 'beneficios';\n      const dados = {\n        titulo: 'Relatório de Benefícios',\n        cabecalho: { data: '01/01/2025' },\n        itens: [{ id: 1, nome: 'Benefício Teste', valor: 100 }],\n      };\n      const opcoes = {};\n\n      const result = await strategy.gerar(tipo, dados, opcoes);\n\n      expect(result).toBeInstanceOf(Buffer);\n      expect(tempFilesService.getTempFilePath).toHaveBeenCalledWith(\n        expect.stringContaining('relatorio'),\n        'csv',\n      );\n      expect(tempFilesService.cleanupTempFile).toHaveBeenCalledWith(\n        expect.stringContaining('temp/relatorios/test-123.csv'),\n      );\n      expect(mockCreateObjectCsvWriter).toHaveBeenCalled();\n    });\n\n    it('deve gerar relatório de benefícios corretamente', async () => {\n      const tipo = 'beneficios';\n      const dados = {\n        titulo: 'Relatório de Benefícios Concedidos',\n        periodo: '01/01/2025 a 31/01/2025',\n        unidade: 'Unidade Teste',\n        tipoBeneficio: 'Auxílio Moradia',\n        itens: [\n          { id: 1, nome: 'Benefício 1', data: '01/01/2025', valor: 100 },\n          { id: 2, nome: 'Benefício 2', data: '15/01/2025', valor: 200 },\n        ],\n        total: 300,\n      };\n      const opcoes = {};\n\n      await strategy.gerar(tipo, dados, opcoes);\n\n      expect(mockCreateObjectCsvWriter).toHaveBeenCalledWith({\n        path: expect.stringContaining('temp/relatorios/test-123.csv'),\n        header: expect.arrayContaining([\n          expect.objectContaining({\n            id: expect.any(String),\n            title: expect.any(String),\n          }),\n        ]),\n      });\n    });\n\n    it('deve gerar relatório de solicitações corretamente', async () => {\n      const tipo = 'solicitacoes';\n      const dados = {\n        titulo: 'Relatório de Solicitações por Status',\n        periodo: '01/01/2025 a 31/01/2025',\n        unidade: 'Unidade Teste',\n        itens: [\n          { status: 'Pendente', quantidade: 10 },\n          { status: 'Aprovado', quantidade: 20 },\n          { status: 'Reprovado', quantidade: 5 },\n        ],\n        total: 35,\n      };\n      const opcoes = {};\n\n      await strategy.gerar(tipo, dados, opcoes);\n\n      expect(mockCreateObjectCsvWriter).toHaveBeenCalledWith({\n        path: expect.stringContaining('temp/relatorios/test-123.csv'),\n        header: expect.arrayContaining([\n          expect.objectContaining({\n            id: expect.any(String),\n            title: expect.any(String),\n          }),\n        ]),\n      });\n    });\n\n    it('deve gerar relatório de atendimentos corretamente', async () => {\n      const tipo = 'atendimentos';\n      const dados = {\n        titulo: 'Relatório de Atendimentos por Unidade',\n        periodo: '01/01/2025 a 31/01/2025',\n        itens: [\n          {\n            unidade: 'Unidade A',\n            totalSolicitacoes: 15,\n            solicitacoesLiberadas: 10,\n            solicitacoesPendentes: 5,\n          },\n          {\n            unidade: 'Unidade B',\n            totalSolicitacoes: 20,\n            solicitacoesLiberadas: 15,\n            solicitacoesPendentes: 5,\n          },\n        ],\n        totais: {\n          totalSolicitacoes: 35,\n          solicitacoesLiberadas: 25,\n          solicitacoesPendentes: 10,\n        },\n      };\n      const opcoes = {};\n\n      await strategy.gerar(tipo, dados, opcoes);\n\n      expect(mockCreateObjectCsvWriter).toHaveBeenCalledWith({\n        path: expect.stringContaining('temp/relatorios/test-123.csv'),\n        header: expect.arrayContaining([\n          expect.objectContaining({\n            id: expect.any(String),\n            title: expect.any(String),\n          }),\n        ]),\n      });\n    });\n\n    it('deve lidar com erros corretamente', async () => {\n      const mockError = new Error('Erro ao gerar CSV');\n      mockCreateObjectCsvWriter.mockReturnValueOnce({\n        writeRecords: jest.fn().mockRejectedValueOnce(mockError),\n      });\n\n      const tipo = 'beneficios';\n      const dados = { titulo: 'Teste', itens: [] };\n      const opcoes = {};\n\n      await expect(strategy.gerar(tipo, dados, opcoes)).rejects.toThrow(\n        'Erro ao gerar CSV',\n      );\n\n      expect(tempFilesService.cleanupTempFile).toHaveBeenCalledWith(\n        expect.stringContaining('temp/relatorios/test-123.csv'),\n      );\n    });\n  });\n});\n"],"version":3}