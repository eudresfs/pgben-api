d63169bedd40d8517fc05e4c6ce942ea
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefreshTokenService = void 0;
/* eslint-disable prettier/prettier */
// src/auth/services/refresh-token.service.ts
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const refresh_token_entity_1 = require("../../entities/refresh-token.entity");
let RefreshTokenService = class RefreshTokenService {
    refreshTokenRepository;
    constructor(refreshTokenRepository) {
        this.refreshTokenRepository = refreshTokenRepository;
    }
    /**
     * Cria um novo token de refresh para o usuário
     * @param user Usuário para quem o token será criado
     * @param ttl Tempo de vida do token em segundos
     * @returns O token de refresh criado
     */
    async createToken(user, ttl) {
        const expiresAt = new Date();
        expiresAt.setTime(expiresAt.getTime() + ttl * 1000);
        const refreshToken = this.refreshTokenRepository.create({
            usuario: user,
            usuario_id: user.id,
            token: this.generateToken(),
            expires_at: expiresAt,
        });
        return this.refreshTokenRepository.save(refreshToken);
    }
    /**
     * Encontra um token pelo seu valor
     * @param token Valor do token a ser encontrado
     * @returns O token encontrado ou null
     */
    async findToken(token) {
        return this.refreshTokenRepository.findOne({
            where: { token },
            relations: ['usuario'],
        });
    }
    /**
     * Busca todos os tokens ativos de um usuário
     * @param usuarioId ID do usuário
     * @returns Lista de tokens ativos
     */
    async findActiveTokensByUserId(usuarioId) {
        return this.refreshTokenRepository.find({
            where: {
                usuario_id: usuarioId,
                revoked: false,
                expires_at: (0, typeorm_2.MoreThan)(new Date()), // Apenas tokens não expirados
            },
        });
    }
    /**
     * Revoga um token específico
     * @param token Valor do token a ser revogado
     * @param ipAddress Endereço IP que solicitou a revogação
     * @param replacedByToken Token que substituiu este (opcional)
     */
    async revokeToken(token, ipAddress, replacedByToken) {
        await this.refreshTokenRepository.update({ token }, {
            revoked: true,
            revoked_at: new Date(),
            revokedByIp: ipAddress,
            replacedByToken: replacedByToken,
        });
    }
    /**
     * Revoga todos os tokens descendentes deste token
     * @param refreshToken Token pai
     * @param ipAddress Endereço IP que solicitou a revogação
     */
    async revokeDescendantTokens(refreshToken, ipAddress) {
        // Se houver um token que substituiu este token, revogue-o também
        if (refreshToken.replacedByToken) {
            const childToken = await this.refreshTokenRepository.findOne({
                where: { token: refreshToken.replacedByToken },
            });
            if (childToken && !childToken.revoked) {
                await this.revokeToken(childToken.token, ipAddress);
                // Recursivamente revogar descendentes
                await this.revokeDescendantTokens(childToken, ipAddress);
            }
        }
    }
    /**
     * Revoga todos os tokens ativos de um usuário
     * @param usuarioId ID do usuário
     * @param ipAddress Endereço IP que solicitou a revogação
     * @returns Número de tokens revogados
     */
    async revokeAllUserTokens(usuarioId, ipAddress) {
        const tokens = await this.findActiveTokensByUserId(usuarioId);
        for (const token of tokens) {
            await this.revokeToken(token.token, ipAddress);
        }
        return tokens.length;
    }
    /**
     * Gera um valor de token aleatório e seguro
     * @returns String hexadecimal aleatória
     */
    generateToken() {
        return require('crypto').randomBytes(40).toString('hex');
    }
};
exports.RefreshTokenService = RefreshTokenService;
exports.RefreshTokenService = RefreshTokenService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(refresh_token_entity_1.RefreshToken)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], RefreshTokenService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,