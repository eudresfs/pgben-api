{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\refresh-token.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\refresh-token.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\n// src/auth/services/refresh-token.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, MoreThan } from 'typeorm';\nimport { RefreshToken } from '../../entities/refresh-token.entity';\nimport { Usuario } from '../../entities/usuario.entity';\n\n@Injectable()\nexport class RefreshTokenService {\n  constructor(\n    @InjectRepository(RefreshToken)\n    private refreshTokenRepository: Repository<RefreshToken>,\n  ) {}\n\n  /**\n   * Cria um novo token de refresh para o usuário\n   * @param user Usuário para quem o token será criado\n   * @param ttl Tempo de vida do token em segundos\n   * @returns O token de refresh criado\n   */\n  async createToken(user: Usuario, ttl: number): Promise<RefreshToken> {\n    const expiresAt = new Date();\n    expiresAt.setTime(expiresAt.getTime() + ttl * 1000);\n\n    const refreshToken = this.refreshTokenRepository.create({\n      usuario: user,\n      usuario_id: user.id,\n      token: this.generateToken(),\n      expires_at: expiresAt,\n    });\n\n    return this.refreshTokenRepository.save(refreshToken);\n  }\n\n  /**\n   * Encontra um token pelo seu valor\n   * @param token Valor do token a ser encontrado\n   * @returns O token encontrado ou null\n   */\n  async findToken(token: string): Promise<RefreshToken | null> {\n    return this.refreshTokenRepository.findOne({\n      where: { token },\n      relations: ['usuario'],\n    });\n  }\n\n  /**\n   * Busca todos os tokens ativos de um usuário\n   * @param usuarioId ID do usuário\n   * @returns Lista de tokens ativos\n   */\n  async findActiveTokensByUserId(usuarioId: string): Promise<RefreshToken[]> {\n    return this.refreshTokenRepository.find({\n      where: {\n        usuario_id: usuarioId,\n        revoked: false,\n        expires_at: MoreThan(new Date()), // Apenas tokens não expirados\n      },\n    });\n  }\n\n  /**\n   * Revoga um token específico\n   * @param token Valor do token a ser revogado\n   * @param ipAddress Endereço IP que solicitou a revogação\n   * @param replacedByToken Token que substituiu este (opcional)\n   */\n  async revokeToken(\n    token: string,\n    ipAddress: string,\n    replacedByToken?: string,\n  ): Promise<void> {\n    await this.refreshTokenRepository.update(\n      { token },\n      {\n        revoked: true,\n        revoked_at: new Date(),\n        revokedByIp: ipAddress,\n        replacedByToken: replacedByToken,\n      },\n    );\n  }\n\n  /**\n   * Revoga todos os tokens descendentes deste token\n   * @param refreshToken Token pai\n   * @param ipAddress Endereço IP que solicitou a revogação\n   */\n  async revokeDescendantTokens(\n    refreshToken: RefreshToken,\n    ipAddress: string,\n  ): Promise<void> {\n    // Se houver um token que substituiu este token, revogue-o também\n    if (refreshToken.replacedByToken) {\n      const childToken = await this.refreshTokenRepository.findOne({\n        where: { token: refreshToken.replacedByToken },\n      });\n\n      if (childToken && !childToken.revoked) {\n        await this.revokeToken(childToken.token, ipAddress);\n\n        // Recursivamente revogar descendentes\n        await this.revokeDescendantTokens(childToken, ipAddress);\n      }\n    }\n  }\n\n  /**\n   * Revoga todos os tokens ativos de um usuário\n   * @param usuarioId ID do usuário\n   * @param ipAddress Endereço IP que solicitou a revogação\n   * @returns Número de tokens revogados\n   */\n  async revokeAllUserTokens(\n    usuarioId: string,\n    ipAddress: string,\n  ): Promise<number> {\n    const tokens = await this.findActiveTokensByUserId(usuarioId);\n\n    for (const token of tokens) {\n      await this.revokeToken(token.token, ipAddress);\n    }\n\n    return tokens.length;\n  }\n\n  /**\n   * Gera um valor de token aleatório e seguro\n   * @returns String hexadecimal aleatória\n   */\n  private generateToken(): string {\n    return require('crypto').randomBytes(40).toString('hex');\n  }\n}\n"],"version":3}