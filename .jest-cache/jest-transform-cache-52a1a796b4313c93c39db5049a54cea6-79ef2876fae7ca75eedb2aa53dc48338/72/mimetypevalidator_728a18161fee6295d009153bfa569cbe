1e3052207692924c6ce6af4a32ab674f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MimeTypeValidator = void 0;
const common_1 = require("@nestjs/common");
const file_type_1 = __importDefault(require("file-type"));
const documento_config_1 = require("../config/documento.config");
const crypto = __importStar(require("crypto"));
let MimeTypeValidator = class MimeTypeValidator {
    /**
     * Valida o tipo MIME de um arquivo com verificações de segurança avançadas
     */
    async validateMimeType(buffer, declaredMimeType, originalFilename, fileSize) {
        try {
            const fileExtension = this.extractFileExtension(originalFilename);
            const securityFlags = {
                isSuspicious: false,
                hasEmbeddedContent: false,
                exceedsMaxSize: false,
                hasDangerousExtension: false,
                isBlockedMimeType: false,
                magicNumberMismatch: false,
            };
            // 1. Verificar extensão perigosa
            if (documento_config_1.BLOCKED_EXTENSIONS.includes(fileExtension)) {
                securityFlags.hasDangerousExtension = true;
                return {
                    isValid: false,
                    declaredMimeType,
                    fileExtension,
                    fileSize,
                    securityFlags,
                    message: `Extensão de arquivo não permitida: .${fileExtension}`,
                };
            }
            // 2. Verificar tipo MIME bloqueado
            if (documento_config_1.BLOCKED_MIME_TYPES.includes(declaredMimeType)) {
                securityFlags.isBlockedMimeType = true;
                return {
                    isValid: false,
                    declaredMimeType,
                    fileExtension,
                    fileSize,
                    securityFlags,
                    message: `Tipo MIME bloqueado por motivos de segurança: ${declaredMimeType}`,
                };
            }
            // 3. Detectar o tipo real do arquivo usando magic numbers
            const fileTypeResult = await file_type_1.default.fromBuffer(buffer);
            if (!fileTypeResult && documento_config_1.SECURITY_CONFIG.VERIFY_MAGIC_NUMBERS) {
                // Para alguns tipos como text/plain, file-type pode não detectar
                if (declaredMimeType !== 'text/plain') {
                    return {
                        isValid: false,
                        declaredMimeType,
                        fileExtension,
                        fileSize,
                        securityFlags,
                        message: 'Não foi possível verificar a assinatura do arquivo',
                    };
                }
            }
            const detectedMimeType = fileTypeResult?.mime || declaredMimeType;
            // 4. Verificar se o tipo detectado está na lista de permitidos
            if (!(0, documento_config_1.isMimeTypePermitido)(detectedMimeType)) {
                return {
                    isValid: false,
                    detectedMimeType,
                    declaredMimeType,
                    fileExtension,
                    fileSize,
                    securityFlags,
                    message: `Tipo de arquivo não permitido: ${detectedMimeType}`,
                };
            }
            // 5. Verificar correspondência entre tipo declarado e detectado
            if (fileTypeResult && declaredMimeType !== detectedMimeType) {
                securityFlags.magicNumberMismatch = true;
                return {
                    isValid: false,
                    detectedMimeType,
                    declaredMimeType,
                    fileExtension,
                    fileSize,
                    securityFlags,
                    message: `Tipo declarado (${declaredMimeType}) não corresponde ao tipo real (${detectedMimeType})`,
                };
            }
            // 6. Verificar tamanho do arquivo
            const maxSize = (0, documento_config_1.getMaxFileSize)(detectedMimeType);
            if (fileSize > maxSize) {
                securityFlags.exceedsMaxSize = true;
                return {
                    isValid: false,
                    detectedMimeType,
                    declaredMimeType,
                    fileExtension,
                    fileSize,
                    securityFlags,
                    message: `Arquivo excede o tamanho máximo permitido: ${fileSize} bytes > ${maxSize} bytes`,
                };
            }
            // 7. Verificar tamanho global
            if (fileSize > documento_config_1.SECURITY_CONFIG.MAX_FILE_SIZE) {
                securityFlags.exceedsMaxSize = true;
                return {
                    isValid: false,
                    detectedMimeType,
                    declaredMimeType,
                    fileExtension,
                    fileSize,
                    securityFlags,
                    message: `Arquivo excede o tamanho máximo global: ${fileSize} bytes > ${documento_config_1.SECURITY_CONFIG.MAX_FILE_SIZE} bytes`,
                };
            }
            // 8. Verificações de conteúdo suspeito
            if (documento_config_1.SECURITY_CONFIG.SCAN_CONTENT) {
                const contentAnalysis = this.analyzeFileContent(buffer, detectedMimeType);
                if (contentAnalysis.isSuspicious) {
                    securityFlags.isSuspicious = true;
                    securityFlags.hasEmbeddedContent = contentAnalysis.hasEmbeddedContent;
                    if (documento_config_1.SECURITY_CONFIG.QUARANTINE_SUSPICIOUS) {
                        return {
                            isValid: false,
                            detectedMimeType,
                            declaredMimeType,
                            fileExtension,
                            fileSize,
                            securityFlags,
                            message: `Arquivo contém conteúdo suspeito: ${contentAnalysis.reason}`,
                        };
                    }
                }
            }
            return {
                isValid: true,
                detectedMimeType,
                declaredMimeType,
                fileExtension,
                fileSize,
                securityFlags,
            };
        }
        catch (error) {
            return {
                isValid: false,
                declaredMimeType,
                fileExtension: this.extractFileExtension(originalFilename),
                fileSize,
                message: `Erro na validação do tipo MIME: ${error.message}`,
            };
        }
    }
    /**
     * Extrai a extensão do arquivo
     */
    extractFileExtension(filename) {
        const parts = filename.toLowerCase().split('.');
        return parts.length > 1 ? parts[parts.length - 1] : '';
    }
    /**
     * Analisa o conteúdo do arquivo em busca de padrões suspeitos
     */
    analyzeFileContent(buffer, mimeType) {
        const content = buffer.toString('utf8', 0, Math.min(buffer.length, 1024)); // Primeiros 1KB
        // Padrões suspeitos comuns
        const suspiciousPatterns = [
            /<script[^>]*>/i, // Tags de script
            /javascript:/i, // URLs javascript
            /vbscript:/i, // URLs vbscript
            /on\w+\s*=/i, // Event handlers (onclick, onload, etc.)
            /%3Cscript/i, // Script tags codificados
            /\x00/, // Null bytes
            /\\x[0-9a-f]{2}/i, // Sequências de escape hexadecimal
        ];
        // Verificar padrões suspeitos
        for (const pattern of suspiciousPatterns) {
            if (pattern.test(content)) {
                return {
                    isSuspicious: true,
                    hasEmbeddedContent: true,
                    reason: `Padrão suspeito detectado: ${pattern.source}`,
                };
            }
        }
        // Verificações específicas por tipo MIME
        if (mimeType === 'application/pdf') {
            // PDFs podem conter JavaScript
            if (content.includes('/JavaScript') || content.includes('/JS')) {
                return {
                    isSuspicious: true,
                    hasEmbeddedContent: true,
                    reason: 'PDF contém JavaScript incorporado',
                };
            }
        }
        // Verificar densidade de caracteres não-ASCII (possível ofuscação)
        const nonAsciiCount = (content.match(/[\x80-\xFF]/g) || []).length;
        const nonAsciiRatio = nonAsciiCount / content.length;
        if (nonAsciiRatio > 0.3 && mimeType.startsWith('text/')) {
            return {
                isSuspicious: true,
                hasEmbeddedContent: false,
                reason: 'Alta densidade de caracteres não-ASCII em arquivo de texto',
            };
        }
        return {
            isSuspicious: false,
            hasEmbeddedContent: false,
        };
    }
    /**
     * Gera hash do arquivo para detecção de duplicatas e verificação de integridade
     */
    generateFileHash(buffer) {
        return crypto.createHash('sha256').update(buffer).digest('hex');
    }
    /**
     * Verifica se o arquivo requer criptografia
     */
    requiresEncryption(mimeType) {
        return (0, documento_config_1.requiresEncryption)(mimeType);
    }
    /**
     * Verifica se é possível gerar thumbnail
     */
    allowsThumbnail(mimeType) {
        return (0, documento_config_1.allowsThumbnail)(mimeType);
    }
};
exports.MimeTypeValidator = MimeTypeValidator;
exports.MimeTypeValidator = MimeTypeValidator = __decorate([
    (0, common_1.Injectable)()
], MimeTypeValidator);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,