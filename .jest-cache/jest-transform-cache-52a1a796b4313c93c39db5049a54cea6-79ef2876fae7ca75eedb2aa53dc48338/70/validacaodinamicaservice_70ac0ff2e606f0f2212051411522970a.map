{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\validacao-dinamica.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\validacao-dinamica.service.ts"],"sourcesContent":["import { Injectable, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  CampoDinamicoBeneficio,\n  TipoDado,\n} from '../../../entities/campo-dinamico-beneficio.entity';\nimport { Logger } from '@nestjs/common';\n\n/**\n * Interface para resultado de validação\n */\nexport interface ValidationResult {\n  valido: boolean;\n  erros: Array<{\n    campo: string;\n    mensagem: string;\n  }>;\n}\n\n/**\n * Serviço de Validação Dinâmica\n *\n * Responsável por validar dados dinâmicos conforme esquema definido\n * para cada tipo de benefício.\n */\n@Injectable()\nexport class ValidacaoDinamicaService {\n  private readonly logger = new Logger(ValidacaoDinamicaService.name);\n\n  constructor(\n    @InjectRepository(CampoDinamicoBeneficio)\n    private campoDinamicoRepository: Repository<CampoDinamicoBeneficio>,\n  ) {}\n\n  /**\n   * Valida dados dinâmicos conforme esquema definido para o tipo de benefício\n   *\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @param dados Dados a serem validados\n   * @returns Resultado da validação\n   */\n  async validarCamposDinamicos(\n    tipoBeneficioId: string,\n    dados: any,\n  ): Promise<ValidationResult> {\n    if (!dados) {\n      return {\n        valido: false,\n        erros: [{ campo: 'dados', mensagem: 'Dados não informados' }],\n      };\n    }\n\n    try {\n      // Buscar esquema de campos para o tipo de benefício\n      const campos = await this.campoDinamicoRepository.find({\n        where: { tipo_beneficio_id: tipoBeneficioId, ativo: true },\n        order: { ordem: 'ASC' },\n      });\n\n      if (!campos || campos.length === 0) {\n        this.logger.warn(\n          `Nenhum campo dinâmico encontrado para o tipo de benefício ${tipoBeneficioId}`,\n        );\n        return { valido: true, erros: [] }; // Se não há campos definidos, considera válido\n      }\n\n      // Definir o tipo apropriado para o array de erros\n      type ErroValidacao = { campo: string; mensagem: string };\n      const erros: ErroValidacao[] = [];\n\n      // Validar campos obrigatórios e tipos\n      for (const campo of campos) {\n        // Verificar se campo obrigatório foi informado\n        if (\n          campo.obrigatorio &&\n          (dados[campo.nome] === undefined || dados[campo.nome] === null)\n        ) {\n          erros.push({\n            campo: campo.nome,\n            mensagem: `O campo ${campo.label} é obrigatório`,\n          });\n          continue;\n        }\n\n        // Se o campo não foi informado e não é obrigatório, continua\n        if (dados[campo.nome] === undefined || dados[campo.nome] === null) {\n          continue;\n        }\n\n        // Validar tipo do campo\n        const valorCampo = dados[campo.nome];\n\n        switch (campo.tipo) {\n          case TipoDado.STRING:\n            this.validarString(campo, valorCampo, erros);\n            break;\n          case TipoDado.NUMBER:\n            this.validarNumber(campo, valorCampo, erros);\n            break;\n          case TipoDado.BOOLEAN:\n            this.validarBoolean(campo, valorCampo, erros);\n            break;\n          case TipoDado.DATE:\n            this.validarDate(campo, valorCampo, erros);\n            break;\n          case TipoDado.ARRAY:\n            this.validarArray(campo, valorCampo, erros);\n            break;\n          case TipoDado.OBJECT:\n            this.validarObject(campo, valorCampo, erros);\n            break;\n        }\n      }\n\n      return {\n        valido: erros.length === 0,\n        erros,\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao validar campos dinâmicos: ${error.message}`,\n        error.stack,\n      );\n      throw new BadRequestException('Erro ao validar campos dinâmicos');\n    }\n  }\n\n  /**\n   * Valida campo do tipo string\n   */\n  private validarString(\n    campo: CampoDinamicoBeneficio,\n    valor: any,\n    erros: Array<{ campo: string; mensagem: string }>,\n  ): void {\n    if (typeof valor !== 'string') {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser um texto`,\n      });\n      return;\n    }\n\n    const validacoes = campo.validacoes || {};\n\n    // Validar tamanho mínimo\n    if (\n      validacoes.minLength !== undefined &&\n      valor.length < validacoes.minLength\n    ) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ter no mínimo ${validacoes.minLength} caracteres`,\n      });\n    }\n\n    // Validar tamanho máximo\n    if (\n      validacoes.maxLength !== undefined &&\n      valor.length > validacoes.maxLength\n    ) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} não pode ter mais de ${validacoes.maxLength} caracteres`,\n      });\n    }\n\n    // Validar padrão (regex)\n    if (validacoes.pattern && !new RegExp(validacoes.pattern).test(valor)) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} não está no formato esperado`,\n      });\n    }\n\n    // Validar enum (valores permitidos)\n    if (\n      validacoes.enum &&\n      Array.isArray(validacoes.enum) &&\n      !validacoes.enum.includes(valor)\n    ) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser um dos seguintes valores: ${validacoes.enum.join(', ')}`,\n      });\n    }\n  }\n\n  /**\n   * Valida campo do tipo number\n   */\n  private validarNumber(\n    campo: CampoDinamicoBeneficio,\n    valor: any,\n    erros: Array<{ campo: string; mensagem: string }>,\n  ): void {\n    // Converter para número se for string numérica\n    if (typeof valor === 'string' && !isNaN(Number(valor))) {\n      valor = Number(valor);\n    }\n\n    if (typeof valor !== 'number' || isNaN(valor)) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser um número`,\n      });\n      return;\n    }\n\n    const validacoes = campo.validacoes || {};\n\n    // Validar valor mínimo\n    if (validacoes.min !== undefined && valor < validacoes.min) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser maior ou igual a ${validacoes.min}`,\n      });\n    }\n\n    // Validar valor máximo\n    if (validacoes.max !== undefined && valor > validacoes.max) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser menor ou igual a ${validacoes.max}`,\n      });\n    }\n  }\n\n  /**\n   * Valida campo do tipo boolean\n   */\n  private validarBoolean(\n    campo: CampoDinamicoBeneficio,\n    valor: any,\n    erros: Array<{ campo: string; mensagem: string }>,\n  ): void {\n    // Converter strings 'true' e 'false' para boolean\n    if (valor === 'true') {\n      valor = true;\n    }\n    if (valor === 'false') {\n      valor = false;\n    }\n\n    if (typeof valor !== 'boolean') {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser um valor booleano (verdadeiro/falso)`,\n      });\n    }\n  }\n\n  /**\n   * Valida campo do tipo date\n   */\n  private validarDate(\n    campo: CampoDinamicoBeneficio,\n    valor: any,\n    erros: Array<{ campo: string; mensagem: string }>,\n  ): void {\n    // Tentar converter para data\n    const data = new Date(valor);\n\n    if (isNaN(data.getTime())) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser uma data válida`,\n      });\n      return;\n    }\n\n    const validacoes = campo.validacoes || {};\n\n    // Validar data mínima\n    if (validacoes.min && new Date(validacoes.min) > data) {\n      const dataMinima = new Date(validacoes.min).toLocaleDateString('pt-BR');\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser uma data posterior a ${dataMinima}`,\n      });\n    }\n\n    // Validar data máxima\n    if (validacoes.max && new Date(validacoes.max) < data) {\n      const dataMaxima = new Date(validacoes.max).toLocaleDateString('pt-BR');\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser uma data anterior a ${dataMaxima}`,\n      });\n    }\n  }\n\n  /**\n   * Valida campo do tipo array\n   */\n  private validarArray(\n    campo: CampoDinamicoBeneficio,\n    valor: any,\n    erros: Array<{ campo: string; mensagem: string }>,\n  ): void {\n    if (!Array.isArray(valor)) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser uma lista`,\n      });\n      return;\n    }\n\n    const validacoes = campo.validacoes || {};\n\n    // Validar tamanho mínimo\n    if (\n      validacoes.minLength !== undefined &&\n      valor.length < validacoes.minLength\n    ) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ter no mínimo ${validacoes.minLength} item(ns)`,\n      });\n    }\n\n    // Validar tamanho máximo\n    if (\n      validacoes.maxLength !== undefined &&\n      valor.length > validacoes.maxLength\n    ) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} não pode ter mais de ${validacoes.maxLength} item(ns)`,\n      });\n    }\n  }\n\n  /**\n   * Valida campo do tipo object\n   */\n  private validarObject(\n    campo: CampoDinamicoBeneficio,\n    valor: any,\n    erros: Array<{ campo: string; mensagem: string }>,\n  ): void {\n    if (typeof valor !== 'object' || valor === null || Array.isArray(valor)) {\n      erros.push({\n        campo: campo.nome,\n        mensagem: `O campo ${campo.label} deve ser um objeto`,\n      });\n    }\n  }\n}\n"],"version":3}