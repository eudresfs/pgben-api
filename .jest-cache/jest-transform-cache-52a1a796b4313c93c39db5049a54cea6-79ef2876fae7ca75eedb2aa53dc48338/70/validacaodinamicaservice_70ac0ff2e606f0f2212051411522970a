12142fb2b6fbc9667d417d943a226c81
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var ValidacaoDinamicaService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidacaoDinamicaService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const campo_dinamico_beneficio_entity_1 = require("../../../entities/campo-dinamico-beneficio.entity");
const common_2 = require("@nestjs/common");
/**
 * Serviço de Validação Dinâmica
 *
 * Responsável por validar dados dinâmicos conforme esquema definido
 * para cada tipo de benefício.
 */
let ValidacaoDinamicaService = ValidacaoDinamicaService_1 = class ValidacaoDinamicaService {
    campoDinamicoRepository;
    logger = new common_2.Logger(ValidacaoDinamicaService_1.name);
    constructor(campoDinamicoRepository) {
        this.campoDinamicoRepository = campoDinamicoRepository;
    }
    /**
     * Valida dados dinâmicos conforme esquema definido para o tipo de benefício
     *
     * @param tipoBeneficioId ID do tipo de benefício
     * @param dados Dados a serem validados
     * @returns Resultado da validação
     */
    async validarCamposDinamicos(tipoBeneficioId, dados) {
        if (!dados) {
            return {
                valido: false,
                erros: [{ campo: 'dados', mensagem: 'Dados não informados' }],
            };
        }
        try {
            // Buscar esquema de campos para o tipo de benefício
            const campos = await this.campoDinamicoRepository.find({
                where: { tipo_beneficio_id: tipoBeneficioId, ativo: true },
                order: { ordem: 'ASC' },
            });
            if (!campos || campos.length === 0) {
                this.logger.warn(`Nenhum campo dinâmico encontrado para o tipo de benefício ${tipoBeneficioId}`);
                return { valido: true, erros: [] }; // Se não há campos definidos, considera válido
            }
            const erros = [];
            // Validar campos obrigatórios e tipos
            for (const campo of campos) {
                // Verificar se campo obrigatório foi informado
                if (campo.obrigatorio &&
                    (dados[campo.nome] === undefined || dados[campo.nome] === null)) {
                    erros.push({
                        campo: campo.nome,
                        mensagem: `O campo ${campo.label} é obrigatório`,
                    });
                    continue;
                }
                // Se o campo não foi informado e não é obrigatório, continua
                if (dados[campo.nome] === undefined || dados[campo.nome] === null) {
                    continue;
                }
                // Validar tipo do campo
                const valorCampo = dados[campo.nome];
                switch (campo.tipo) {
                    case campo_dinamico_beneficio_entity_1.TipoDado.STRING:
                        this.validarString(campo, valorCampo, erros);
                        break;
                    case campo_dinamico_beneficio_entity_1.TipoDado.NUMBER:
                        this.validarNumber(campo, valorCampo, erros);
                        break;
                    case campo_dinamico_beneficio_entity_1.TipoDado.BOOLEAN:
                        this.validarBoolean(campo, valorCampo, erros);
                        break;
                    case campo_dinamico_beneficio_entity_1.TipoDado.DATE:
                        this.validarDate(campo, valorCampo, erros);
                        break;
                    case campo_dinamico_beneficio_entity_1.TipoDado.ARRAY:
                        this.validarArray(campo, valorCampo, erros);
                        break;
                    case campo_dinamico_beneficio_entity_1.TipoDado.OBJECT:
                        this.validarObject(campo, valorCampo, erros);
                        break;
                }
            }
            return {
                valido: erros.length === 0,
                erros,
            };
        }
        catch (error) {
            this.logger.error(`Erro ao validar campos dinâmicos: ${error.message}`, error.stack);
            throw new common_1.BadRequestException('Erro ao validar campos dinâmicos');
        }
    }
    /**
     * Valida campo do tipo string
     */
    validarString(campo, valor, erros) {
        if (typeof valor !== 'string') {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser um texto`,
            });
            return;
        }
        const validacoes = campo.validacoes || {};
        // Validar tamanho mínimo
        if (validacoes.minLength !== undefined &&
            valor.length < validacoes.minLength) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ter no mínimo ${validacoes.minLength} caracteres`,
            });
        }
        // Validar tamanho máximo
        if (validacoes.maxLength !== undefined &&
            valor.length > validacoes.maxLength) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} não pode ter mais de ${validacoes.maxLength} caracteres`,
            });
        }
        // Validar padrão (regex)
        if (validacoes.pattern && !new RegExp(validacoes.pattern).test(valor)) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} não está no formato esperado`,
            });
        }
        // Validar enum (valores permitidos)
        if (validacoes.enum &&
            Array.isArray(validacoes.enum) &&
            !validacoes.enum.includes(valor)) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser um dos seguintes valores: ${validacoes.enum.join(', ')}`,
            });
        }
    }
    /**
     * Valida campo do tipo number
     */
    validarNumber(campo, valor, erros) {
        // Converter para número se for string numérica
        if (typeof valor === 'string' && !isNaN(Number(valor))) {
            valor = Number(valor);
        }
        if (typeof valor !== 'number' || isNaN(valor)) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser um número`,
            });
            return;
        }
        const validacoes = campo.validacoes || {};
        // Validar valor mínimo
        if (validacoes.min !== undefined && valor < validacoes.min) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser maior ou igual a ${validacoes.min}`,
            });
        }
        // Validar valor máximo
        if (validacoes.max !== undefined && valor > validacoes.max) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser menor ou igual a ${validacoes.max}`,
            });
        }
    }
    /**
     * Valida campo do tipo boolean
     */
    validarBoolean(campo, valor, erros) {
        // Converter strings 'true' e 'false' para boolean
        if (valor === 'true') {
            valor = true;
        }
        if (valor === 'false') {
            valor = false;
        }
        if (typeof valor !== 'boolean') {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser um valor booleano (verdadeiro/falso)`,
            });
        }
    }
    /**
     * Valida campo do tipo date
     */
    validarDate(campo, valor, erros) {
        // Tentar converter para data
        const data = new Date(valor);
        if (isNaN(data.getTime())) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser uma data válida`,
            });
            return;
        }
        const validacoes = campo.validacoes || {};
        // Validar data mínima
        if (validacoes.min && new Date(validacoes.min) > data) {
            const dataMinima = new Date(validacoes.min).toLocaleDateString('pt-BR');
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser uma data posterior a ${dataMinima}`,
            });
        }
        // Validar data máxima
        if (validacoes.max && new Date(validacoes.max) < data) {
            const dataMaxima = new Date(validacoes.max).toLocaleDateString('pt-BR');
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser uma data anterior a ${dataMaxima}`,
            });
        }
    }
    /**
     * Valida campo do tipo array
     */
    validarArray(campo, valor, erros) {
        if (!Array.isArray(valor)) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser uma lista`,
            });
            return;
        }
        const validacoes = campo.validacoes || {};
        // Validar tamanho mínimo
        if (validacoes.minLength !== undefined &&
            valor.length < validacoes.minLength) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ter no mínimo ${validacoes.minLength} item(ns)`,
            });
        }
        // Validar tamanho máximo
        if (validacoes.maxLength !== undefined &&
            valor.length > validacoes.maxLength) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} não pode ter mais de ${validacoes.maxLength} item(ns)`,
            });
        }
    }
    /**
     * Valida campo do tipo object
     */
    validarObject(campo, valor, erros) {
        if (typeof valor !== 'object' || valor === null || Array.isArray(valor)) {
            erros.push({
                campo: campo.nome,
                mensagem: `O campo ${campo.label} deve ser um objeto`,
            });
        }
    }
};
exports.ValidacaoDinamicaService = ValidacaoDinamicaService;
exports.ValidacaoDinamicaService = ValidacaoDinamicaService = ValidacaoDinamicaService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(campo_dinamico_beneficio_entity_1.CampoDinamicoBeneficio)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ValidacaoDinamicaService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,