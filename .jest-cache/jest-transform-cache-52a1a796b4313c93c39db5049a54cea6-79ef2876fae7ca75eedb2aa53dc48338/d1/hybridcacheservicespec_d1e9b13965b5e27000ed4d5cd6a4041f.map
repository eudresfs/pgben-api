{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\hybrid-cache.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\hybrid-cache.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigService } from '@nestjs/config';\nimport { Logger } from '@nestjs/common';\nimport { HybridCacheService } from './hybrid-cache.service';\nimport { HealthCheckService } from './health-check.service';\nimport { CacheService } from '../cache/cache.service';\n\ndescribe('HybridCacheService', () => {\n  let service: HybridCacheService;\n  let healthCheckService: jest.Mocked<HealthCheckService>;\n  let cacheService: jest.Mocked<CacheService>;\n  let configService: jest.Mocked<ConfigService>;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        HybridCacheService,\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn((key: string, defaultValue?: any) => {\n              const config = {\n                'CACHE_L1_MAX_SIZE': '100',\n                'CACHE_DEFAULT_TTL': '60000',\n                'CACHE_ENABLE_L2': 'true',\n                'CACHE_ENABLE_WARMING': 'true',\n                'CACHE_WARMING_INTERVAL': '30000'\n              };\n              return config[key] || defaultValue;\n            })\n          }\n        },\n        {\n          provide: HealthCheckService,\n          useValue: {\n            isRedisAvailable: jest.fn()\n          }\n        },\n        {\n          provide: CacheService,\n          useValue: {\n            get: jest.fn(),\n            set: jest.fn(),\n            del: jest.fn(),\n            has: jest.fn()\n          }\n        }\n      ]\n    }).compile();\n\n    service = module.get<HybridCacheService>(HybridCacheService);\n    healthCheckService = module.get(HealthCheckService);\n    cacheService = module.get(CacheService);\n    configService = module.get(ConfigService);\n\n    // Reset metrics before each test\n    service.resetMetrics();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('get', () => {\n    it('deve retornar valor do cache L1 quando disponível', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      // Simular valor no L1\n      await service.set(key, value, 60000, 'medium');\n      \n      // Act\n      const result = await service.get(key);\n      \n      // Assert\n      expect(result).toEqual(value);\n    });\n\n    it('deve buscar no cache L2 quando L1 miss e L2 disponível', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.get.mockResolvedValue(value);\n      \n      // Act\n      const result = await service.get(key);\n      \n      // Assert\n      expect(result).toEqual(value);\n      expect(cacheService.get).toHaveBeenCalledWith(key);\n    });\n\n    it('deve retornar null quando não encontrado em nenhum cache', async () => {\n      // Arrange\n      const key = 'test-key';\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.get.mockResolvedValue(null);\n      \n      // Act\n      const result = await service.get(key);\n      \n      // Assert\n      expect(result).toBeNull();\n    });\n\n    it('deve funcionar apenas com L1 quando L2 indisponível', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(false);\n      \n      // Adicionar ao L1\n      await service.set(key, value, 60000, 'medium');\n      \n      // Act\n      const result = await service.get(key);\n      \n      // Assert\n      expect(result).toEqual(value);\n      expect(cacheService.get).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('set', () => {\n    it('deve armazenar no cache L1', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      \n      // Act\n      await service.set(key, value, 60000, 'medium');\n      \n      // Assert\n      const result = await service.get(key);\n      expect(result).toEqual(value);\n    });\n\n    it('deve armazenar no cache L2 quando disponível', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.set.mockResolvedValue(undefined);\n      \n      // Act\n      await service.set(key, value, 60000, 'medium');\n      \n      // Assert\n      expect(cacheService.set).toHaveBeenCalledWith(\n        key,\n        value,\n        60000\n      );\n    });\n\n    it('deve funcionar apenas com L1 quando L2 indisponível', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(false);\n      \n      // Act\n      await service.set(key, value, 60000, 'medium');\n      \n      // Assert\n      const result = await service.get(key);\n      expect(result).toEqual(value);\n      expect(cacheService.set).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('del', () => {\n    it('deve remover do cache L1', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      await service.set(key, value, 60000, 'medium');\n      \n      // Act\n      await service.del(key);\n      \n      // Assert\n      const result = await service.get(key);\n      expect(result).toBeNull();\n    });\n\n    it('deve remover do cache L2 quando disponível', async () => {\n      // Arrange\n      const key = 'test-key';\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.del.mockResolvedValue(undefined);\n      \n      // Act\n      await service.del(key);\n      \n      // Assert\n      expect(cacheService.del).toHaveBeenCalledWith(key);\n    });\n  });\n\n  describe('has', () => {\n    it('deve retornar true quando chave existe no L1', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      await service.set(key, value, 60000, 'medium');\n      \n      // Act\n      const result = await service.has(key);\n      \n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('deve verificar no L2 quando não existe no L1', async () => {\n      // Arrange\n      const key = 'test-key';\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.has.mockResolvedValue(true);\n      \n      // Act\n      const result = await service.has(key);\n      \n      // Assert\n      expect(result).toBe(true);\n      expect(cacheService.has).toHaveBeenCalledWith(key);\n    });\n\n    it('deve retornar false quando não existe em nenhum cache', async () => {\n      // Arrange\n      const key = 'test-key';\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.has.mockResolvedValue(false);\n      \n      // Act\n      const result = await service.has(key);\n      \n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getOrSet', () => {\n    it('deve retornar valor existente do cache', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'cached-value' };\n      const factory = jest.fn().mockResolvedValue({ data: 'new-value' });\n      \n      await service.set(key, value, 60000, 'medium');\n      \n      // Act\n      const result = await service.getOrSet(key, factory, 60000, 'medium');\n      \n      // Assert\n      expect(result).toEqual(value);\n      expect(factory).not.toHaveBeenCalled();\n    });\n\n    it('deve executar factory e armazenar quando valor não existe', async () => {\n      // Arrange\n      const key = 'test-key';\n      const newValue = { data: 'new-value' };\n      const factory = jest.fn().mockResolvedValue(newValue);\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.get.mockResolvedValue(null);\n      \n      // Act\n      const result = await service.getOrSet(key, factory, 60000, 'medium');\n      \n      // Assert\n      expect(result).toEqual(newValue);\n      expect(factory).toHaveBeenCalled();\n    });\n  });\n\n  describe('eviction', () => {\n    it('deve remover entradas expiradas durante limpeza', async () => {\n      // Arrange\n      const key1 = 'expired-key';\n      const key2 = 'valid-key';\n      const value1 = 'value1';\n      const value2 = 'value2';\n      \n      // Simular entrada expirada\n      await service.set(key1, value1, -1000, 'low'); // TTL negativo = expirado\n      await service.set(key2, value2, 60000, 'medium');\n      \n      // Act\n      await service['cleanupExpiredCache']();\n      \n      // Assert\n      expect(await service.get(key1)).toBeNull();\n      expect(await service.get(key2)).toBe(value2);\n    });\n  });\n\n  describe('métricas', () => {\n    it('deve calcular métricas corretamente', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.get.mockResolvedValue(null);\n      \n      // Simular algumas operações\n      await service.get(key); // L1 miss, L2 miss\n      await service.set(key, value, 60000, 'medium');\n      await service.get(key); // L1 hit\n\n      // Act\n      const metrics = service.getMetrics();\n\n      // Assert\n      expect(metrics.l1Hits).toBe(1);\n      expect(metrics.l1Misses).toBe(1);\n      expect(metrics.l2Misses).toBe(1);\n      expect(metrics.l1HitRate).toBe(50);\n      expect(metrics.overallHitRate).toBeCloseTo(33.33, 2);\n    });\n\n    it('deve resetar métricas corretamente', () => {\n      // Arrange - simular algumas operações\n      service['metrics'] = {\n        l1Hits: 10,\n        l1Misses: 5,\n        l2Hits: 3,\n        l2Misses: 2,\n        evictions: 1,\n        warmingOperations: 2,\n        failovers: 1\n      };\n      \n      // Act\n      service.resetMetrics();\n      \n      // Assert\n      const metrics = service.getMetrics();\n      expect(metrics.l1Hits).toBe(0);\n      expect(metrics.l1Misses).toBe(0);\n      expect(metrics.l2Hits).toBe(0);\n      expect(metrics.l2Misses).toBe(0);\n      expect(metrics.evictions).toBe(0);\n      expect(metrics.warmingOperations).toBe(0);\n      expect(metrics.failovers).toBe(0);\n    });\n  });\n\n  describe('clear', () => {\n    it('deve limpar todos os caches', async () => {\n      // Arrange\n      const key1 = 'key1';\n      const key2 = 'key2';\n      const value1 = 'value1';\n      const value2 = 'value2';\n      \n      await service.set(key1, value1, 60000, 'medium');\n      await service.set(key2, value2, 60000, 'medium');\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      \n      // Act\n      await service.clear();\n      \n      // Assert\n      expect(await service.get(key1)).toBeUndefined();\n      expect(await service.get(key2)).toBeUndefined();\n    });\n  });\n\n  describe('warming', () => {\n    it('deve aquecer cache com chaves críticas', async () => {\n      // Arrange\n      const criticalKey = 'critical-key';\n      const value = { data: 'critical-value' };\n      \n      // Marcar como crítica\n      await service.set(criticalKey, value, 60000, 'critical');\n      \n      // Simular que não está no L1 mas está no L2\n      service['l1Cache'].clear();\n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.get.mockResolvedValue(value);\n      \n      // Act\n      await service['performCacheWarming']();\n      \n      // Assert\n      const result = await service.get(criticalKey);\n      expect(result).toEqual(value);\n    });\n  });\n\n  describe('error handling', () => {\n    it('deve lidar com erros do L2 graciosamente', async () => {\n      // Arrange\n      const key = 'test-key';\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.get.mockRejectedValue(new Error('Redis error'));\n      \n      // Act & Assert\n      const result = await service.get(key);\n      expect(result).toBeNull();\n      \n      // Verificar se erro foi registrado nas métricas\n       const metrics = service.getMetrics();\n       expect(metrics.failovers).toBeGreaterThan(0);\n    });\n\n    it('deve continuar funcionando com L1 quando L2 falha', async () => {\n      // Arrange\n      const key = 'test-key';\n      const value = { data: 'test-value' };\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.set.mockRejectedValue(new Error('Redis error'));\n      \n      // Act\n      await service.set(key, value, 60000, 'medium');\n      \n      // Assert - deve funcionar com L1\n      const result = await service.get(key);\n      expect(result).toEqual(value);\n    });\n  });\n\n  describe('priority handling', () => {\n    it('deve tratar prioridades corretamente', async () => {\n      // Arrange\n      const criticalKey = 'critical-key';\n      const lowKey = 'low-key';\n      const value = { data: 'test' };\n      const factory = async () => value;\n      \n      // Act\n      service.registerCriticalKey(criticalKey, factory);\n      await service.getOrSet(lowKey, factory, 60000, 'low');\n      \n      // Assert - chave crítica deve estar marcada\n      expect(service['criticalKeys'].has(criticalKey)).toBe(true);\n      expect(service['criticalKeys'].has(lowKey)).toBe(false);\n    });\n  });\n\n  describe('concurrent operations', () => {\n    it('deve lidar com operações concorrentes', async () => {\n      // Arrange\n      const key = 'concurrent-key';\n      const factory = jest.fn().mockResolvedValue({ data: 'factory-value' });\n      \n      healthCheckService.isRedisAvailable.mockResolvedValue(true);\n      cacheService.get.mockResolvedValue(null);\n      \n      // Act - múltiplas chamadas simultâneas\n      const promises = [\n        service.getOrSet(key, factory, 60000, 'medium'),\n        service.getOrSet(key, factory, 60000, 'medium'),\n        service.getOrSet(key, factory, 60000, 'medium')\n      ];\n      \n      const results = await Promise.all(promises);\n      \n      // Assert - factory deve ser chamado apenas uma vez\n      expect(factory).toHaveBeenCalledTimes(1);\n      results.forEach(result => {\n        expect(result).toEqual({ data: 'factory-value' });\n      });\n    });\n  });\n});"],"version":3}