{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\confirmacoes.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\confirmacoes.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { HttpModule } from '@nestjs/axios';\n\nimport { PagamentoModule } from '../../pagamento.module';\nimport {\n  Pagamento,\n  ComprovantePagamento,\n  ConfirmacaoRecebimento,\n} from '../../entities';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../enums/metodo-pagamento.enum';\nimport { PagamentoService } from '../../services/pagamento.service';\nimport { AuditoriaPagamentoService } from '../../services/auditoria-pagamento.service';\n\n/**\n * Testes de integração para confirmações de recebimento de pagamento\n *\n * Verifica o funcionamento correto das operações de registro, consulta\n * e listagem de confirmações de recebimento de pagamentos.\n *\n * @author Equipe PGBen\n */\ndescribe('Confirmações de Recebimento (Integration)', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let pagamentoService: PagamentoService;\n  let auditoriaPagamentoService: AuditoriaPagamentoService;\n\n  let pagamentoRepository: Repository<Pagamento>;\n  let confirmacaoRepository: Repository<ConfirmacaoRecebimento>;\n\n  // Dados de teste\n  const usuarioId = 'usuario-teste-id';\n  const gestorId = 'gestor-teste-id';\n  const unidadeId = 'unidade-teste-id';\n  const pagamentoId = 'pagamento-teste-id';\n  const confirmacaoId = 'confirmacao-teste-id';\n  const beneficiarioId = 'beneficiario-teste-id';\n\n  // Mock dos repositórios\n  const mockPagamentoRepository = {\n    findOne: jest.fn(),\n    save: jest.fn(),\n    update: jest.fn(),\n  };\n\n  const mockConfirmacaoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n  };\n\n  // Mock do serviço de auditoria\n  const mockAuditoriaPagamentoService = {\n    logConfirmacaoRecebimento: jest.fn(),\n    logErroProcessamento: jest.fn(),\n    logTentativaAcessoNaoAutorizado: jest.fn(),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        PagamentoModule,\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: (configService: ConfigService) => ({\n            secret: configService.get('JWT_SECRET') || 'teste-secret',\n            signOptions: { expiresIn: '1h' },\n          }),\n          inject: [ConfigService],\n        }),\n        HttpModule,\n      ],\n      providers: [\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: mockPagamentoRepository,\n        },\n        {\n          provide: getRepositoryToken(ConfirmacaoRecebimento),\n          useValue: mockConfirmacaoRepository,\n        },\n        {\n          provide: getRepositoryToken(ComprovantePagamento),\n          useValue: {},\n        },\n        {\n          provide: AuditoriaPagamentoService,\n          useValue: mockAuditoriaPagamentoService,\n        },\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    pagamentoService = moduleFixture.get<PagamentoService>(PagamentoService);\n    auditoriaPagamentoService = moduleFixture.get<AuditoriaPagamentoService>(\n      AuditoriaPagamentoService,\n    );\n\n    pagamentoRepository = moduleFixture.get<Repository<Pagamento>>(\n      getRepositoryToken(Pagamento),\n    );\n    confirmacaoRepository = moduleFixture.get<\n      Repository<ConfirmacaoRecebimento>\n    >(getRepositoryToken(ConfirmacaoRecebimento));\n\n    await app.init();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // Configurar mocks padrão\n    mockPagamentoRepository.findOne.mockImplementation((options) => {\n      if (options.where?.id === pagamentoId) {\n        return Promise.resolve({\n          id: pagamentoId,\n          status: StatusPagamentoEnum.PAGO,\n          unidadeId,\n          beneficiarioId,\n          valor: 500.0,\n          metodoPagamento: MetodoPagamentoEnum.PIX,\n        });\n      }\n      return Promise.resolve(null);\n    });\n\n    mockConfirmacaoRepository.findOne.mockImplementation((options) => {\n      if (options.where?.id === confirmacaoId) {\n        return Promise.resolve({\n          id: confirmacaoId,\n          pagamentoId,\n          dataConfirmacao: new Date(),\n          observacoes: 'Pagamento recebido via PIX',\n          numeroProtocolo: '123456789',\n          confirmadoPor: beneficiarioId,\n          createdAt: new Date(),\n        });\n      } else if (options.where?.pagamentoId === pagamentoId) {\n        return Promise.resolve({\n          id: confirmacaoId,\n          pagamentoId,\n          dataConfirmacao: new Date(),\n          observacoes: 'Pagamento recebido via PIX',\n          numeroProtocolo: '123456789',\n          confirmadoPor: beneficiarioId,\n          createdAt: new Date(),\n        });\n      }\n      return Promise.resolve(null);\n    });\n\n    mockConfirmacaoRepository.create.mockImplementation((dto) => ({\n      id: confirmacaoId,\n      pagamentoId: dto.pagamentoId,\n      dataConfirmacao: dto.dataConfirmacao || new Date(),\n      observacoes: dto.observacoes,\n      numeroProtocolo: dto.numeroProtocolo || '123456789',\n      confirmadoPor: dto.confirmadoPor || beneficiarioId,\n      createdAt: new Date(),\n    }));\n\n    mockConfirmacaoRepository.save.mockImplementation((dto) =>\n      Promise.resolve(dto),\n    );\n  });\n\n  // Função auxiliar para gerar tokens JWT\n  const gerarToken = (\n    userId: string,\n    perfis: string[] = ['usuario'],\n    unidadeId: string = 'unidade-teste-id',\n  ) => {\n    return jwtService.sign({\n      sub: userId,\n      perfis,\n      unidade: unidadeId,\n    });\n  };\n\n  describe('Registro de Confirmações', () => {\n    it('deve registrar confirmação de recebimento com sucesso', async () => {\n      const token = gerarToken(beneficiarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          observacoes: 'Pagamento recebido via PIX',\n          dataConfirmacao: new Date().toISOString(),\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.pagamentoId).toBe(pagamentoId);\n\n      expect(mockConfirmacaoRepository.create).toHaveBeenCalled();\n      expect(mockConfirmacaoRepository.save).toHaveBeenCalled();\n      expect(\n        auditoriaPagamentoService.logConfirmacaoRecebimento,\n      ).toHaveBeenCalled();\n    });\n\n    it('deve rejeitar confirmação para pagamento não encontrado', async () => {\n      // Sobrescrever mock para este teste\n      mockPagamentoRepository.findOne.mockResolvedValueOnce(null);\n\n      const token = gerarToken(beneficiarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/pagamento-inexistente/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          observacoes: 'Pagamento recebido via PIX',\n          dataConfirmacao: new Date().toISOString(),\n        });\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toContain('não encontrado');\n    });\n\n    it('deve rejeitar confirmação sem dados obrigatórios', async () => {\n      const token = gerarToken(beneficiarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          // Faltando observacoes\n          dataConfirmacao: new Date().toISOString(),\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('observacoes');\n    });\n\n    it('deve rejeitar confirmação duplicada', async () => {\n      // Mock para simular que já existe confirmação para o pagamento\n      mockConfirmacaoRepository.findOne.mockImplementation((options) => {\n        if (options.where?.pagamentoId === pagamentoId) {\n          return Promise.resolve({\n            id: confirmacaoId,\n            pagamentoId,\n            dataConfirmacao: new Date(),\n            observacoes: 'Confirmação anterior',\n            confirmadoPor: beneficiarioId,\n          });\n        }\n        return Promise.resolve(null);\n      });\n\n      const token = gerarToken(beneficiarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          observacoes: 'Segunda confirmação',\n          dataConfirmacao: new Date().toISOString(),\n        });\n\n      expect(response.status).toBe(409); // Conflict\n      expect(response.body.message).toContain('já possui uma confirmação');\n    });\n  });\n\n  describe('Consulta de Confirmações', () => {\n    it('deve buscar confirmação por ID com sucesso', async () => {\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/confirmacoes/${confirmacaoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('id', confirmacaoId);\n      expect(response.body).toHaveProperty('pagamentoId', pagamentoId);\n    });\n\n    it('deve buscar confirmação por pagamentoId com sucesso', async () => {\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}/confirmacao`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('id', confirmacaoId);\n      expect(response.body).toHaveProperty('pagamentoId', pagamentoId);\n    });\n\n    it('deve retornar 404 ao buscar confirmação inexistente', async () => {\n      // Sobrescrever mock para este teste\n      mockConfirmacaoRepository.findOne.mockResolvedValueOnce(null);\n\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/confirmacoes/confirmacao-inexistente`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toContain('não encontrada');\n    });\n\n    it('deve listar confirmações com paginação', async () => {\n      // Mock para listar confirmações\n      mockConfirmacaoRepository.findAndCount.mockResolvedValueOnce([\n        [\n          {\n            id: confirmacaoId,\n            pagamentoId,\n            dataConfirmacao: new Date(),\n            observacoes: 'Pagamento recebido via PIX',\n            numeroProtocolo: '123456789',\n            confirmadoPor: beneficiarioId,\n            createdAt: new Date(),\n          },\n          {\n            id: 'confirmacao-id-2',\n            pagamentoId: 'outro-pagamento-id',\n            dataConfirmacao: new Date(),\n            observacoes: 'Outro pagamento recebido',\n            numeroProtocolo: '987654321',\n            confirmadoPor: 'outro-beneficiario-id',\n            createdAt: new Date(),\n          },\n        ],\n        2, // Total count\n      ]);\n\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .get(`/confirmacoes`)\n        .query({ page: 1, limit: 10 })\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('items');\n      expect(response.body).toHaveProperty('meta');\n      expect(response.body.items).toBeInstanceOf(Array);\n      expect(response.body.items).toHaveLength(2);\n      expect(response.body.meta.totalItems).toBe(2);\n    });\n  });\n\n  describe('Segurança e Autorização', () => {\n    it('deve permitir beneficiário confirmar próprio pagamento', async () => {\n      // Sobrescrever mock para este teste\n      mockPagamentoRepository.findOne.mockResolvedValueOnce({\n        id: pagamentoId,\n        status: StatusPagamentoEnum.PAGO,\n        unidadeId,\n        beneficiarioId,\n        valor: 500.0,\n      });\n\n      const token = gerarToken(beneficiarioId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          observacoes: 'Confirmação pelo beneficiário',\n          dataConfirmacao: new Date().toISOString(),\n        });\n\n      expect(response.status).toBe(201);\n    });\n\n    it('deve permitir gestor registrar confirmação', async () => {\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          observacoes: 'Confirmação pelo gestor',\n          dataConfirmacao: new Date().toISOString(),\n          confirmadoPor: beneficiarioId,\n        });\n\n      expect(response.status).toBe(201);\n    });\n\n    it('deve rejeitar acesso de usuário sem permissão às confirmações', async () => {\n      const token = gerarToken(\n        'outro-usuario',\n        ['usuario_basico'],\n        'outra-unidade',\n      );\n\n      const response = await request(app.getHttpServer())\n        .get(`/confirmacoes`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(403);\n      expect(\n        mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado,\n      ).toHaveBeenCalled();\n    });\n\n    it('deve rejeitar confirmação de pagamento de outra unidade', async () => {\n      // Sobrescrever mock para este teste\n      mockPagamentoRepository.findOne.mockResolvedValueOnce({\n        id: pagamentoId,\n        status: StatusPagamentoEnum.PAGO,\n        unidadeId: 'outra-unidade-id',\n        beneficiarioId: 'outro-beneficiario-id',\n        valor: 500.0,\n      });\n\n      const token = gerarToken(usuarioId, ['usuario'], unidadeId);\n\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          observacoes: 'Tentativa de confirmação',\n          dataConfirmacao: new Date().toISOString(),\n        });\n\n      expect(response.status).toBe(403);\n      expect(\n        mockAuditoriaPagamentoService.logTentativaAcessoNaoAutorizado,\n      ).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}