7c00a7da14405cdb6fb23885857d89f1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsCPF = void 0;
const class_validator_1 = require("class-validator");
/**
 * Validador personalizado para CPF
 *
 * Verifica se um CPF é válido usando o algoritmo de validação oficial
 */
let IsCPF = class IsCPF {
    validate(cpf) {
        if (!cpf) {
            return false;
        }
        // Remove caracteres não numéricos
        cpf = cpf.replace(/[^\d]/g, '');
        // Verifica se tem 11 dígitos
        if (cpf.length !== 11) {
            return false;
        }
        // Verifica se todos os dígitos são iguais (caso inválido)
        if (/^(\d)\1{10}$/.test(cpf)) {
            return false;
        }
        // Algoritmo de validação do CPF
        let soma = 0;
        let resto;
        // Primeiro dígito verificador
        for (let i = 1; i <= 9; i++) {
            soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);
        }
        resto = (soma * 10) % 11;
        if (resto === 10 || resto === 11) {
            resto = 0;
        }
        if (resto !== parseInt(cpf.substring(9, 10))) {
            return false;
        }
        // Segundo dígito verificador
        soma = 0;
        for (let i = 1; i <= 10; i++) {
            soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);
        }
        resto = (soma * 10) % 11;
        if (resto === 10 || resto === 11) {
            resto = 0;
        }
        if (resto !== parseInt(cpf.substring(10, 11))) {
            return false;
        }
        return true;
    }
    defaultMessage() {
        return 'CPF inválido';
    }
};
exports.IsCPF = IsCPF;
exports.IsCPF = IsCPF = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'isCPF', async: false })
], IsCPF);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcdmFsaWRhdG9yc1xcY3BmLnZhbGlkYXRvci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFHeUI7QUFFekI7Ozs7R0FJRztBQUVJLElBQU0sS0FBSyxHQUFYLE1BQU0sS0FBSztJQUNoQixRQUFRLENBQUMsR0FBVztRQUNsQixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDVCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxrQ0FBa0M7UUFDbEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWhDLDZCQUE2QjtRQUM3QixJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDdEIsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsMERBQTBEO1FBQzFELElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELGdDQUFnQztRQUNoQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7UUFDYixJQUFJLEtBQUssQ0FBQztRQUVWLDhCQUE4QjtRQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDNUIsSUFBSSxHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUNqQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1osQ0FBQztRQUNELElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDN0MsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksR0FBRyxDQUFDLENBQUM7UUFDVCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDN0IsSUFBSSxHQUFHLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELEtBQUssR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDekIsSUFBSSxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUNqQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1osQ0FBQztRQUNELElBQUksS0FBSyxLQUFLLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUMsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7Q0FDRixDQUFBO0FBeERZLHNCQUFLO2dCQUFMLEtBQUs7SUFEakIsSUFBQSxxQ0FBbUIsRUFBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO0dBQ3hDLEtBQUssQ0F3RGpCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXHZhbGlkYXRvcnNcXGNwZi52YWxpZGF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVmFsaWRhdG9yQ29uc3RyYWludCxcbiAgVmFsaWRhdG9yQ29uc3RyYWludEludGVyZmFjZSxcbn0gZnJvbSAnY2xhc3MtdmFsaWRhdG9yJztcblxuLyoqXG4gKiBWYWxpZGFkb3IgcGVyc29uYWxpemFkbyBwYXJhIENQRlxuICpcbiAqIFZlcmlmaWNhIHNlIHVtIENQRiDDqSB2w6FsaWRvIHVzYW5kbyBvIGFsZ29yaXRtbyBkZSB2YWxpZGHDp8OjbyBvZmljaWFsXG4gKi9cbkBWYWxpZGF0b3JDb25zdHJhaW50KHsgbmFtZTogJ2lzQ1BGJywgYXN5bmM6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgSXNDUEYgaW1wbGVtZW50cyBWYWxpZGF0b3JDb25zdHJhaW50SW50ZXJmYWNlIHtcbiAgdmFsaWRhdGUoY3BmOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAoIWNwZikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBjYXJhY3RlcmVzIG7Do28gbnVtw6lyaWNvc1xuICAgIGNwZiA9IGNwZi5yZXBsYWNlKC9bXlxcZF0vZywgJycpO1xuXG4gICAgLy8gVmVyaWZpY2Egc2UgdGVtIDExIGTDrWdpdG9zXG4gICAgaWYgKGNwZi5sZW5ndGggIT09IDExKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmVyaWZpY2Egc2UgdG9kb3Mgb3MgZMOtZ2l0b3Mgc8OjbyBpZ3VhaXMgKGNhc28gaW52w6FsaWRvKVxuICAgIGlmICgvXihcXGQpXFwxezEwfSQvLnRlc3QoY3BmKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFsZ29yaXRtbyBkZSB2YWxpZGHDp8OjbyBkbyBDUEZcbiAgICBsZXQgc29tYSA9IDA7XG4gICAgbGV0IHJlc3RvO1xuXG4gICAgLy8gUHJpbWVpcm8gZMOtZ2l0byB2ZXJpZmljYWRvclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IDk7IGkrKykge1xuICAgICAgc29tYSA9IHNvbWEgKyBwYXJzZUludChjcGYuc3Vic3RyaW5nKGkgLSAxLCBpKSkgKiAoMTEgLSBpKTtcbiAgICB9XG5cbiAgICByZXN0byA9IChzb21hICogMTApICUgMTE7XG4gICAgaWYgKHJlc3RvID09PSAxMCB8fCByZXN0byA9PT0gMTEpIHtcbiAgICAgIHJlc3RvID0gMDtcbiAgICB9XG4gICAgaWYgKHJlc3RvICE9PSBwYXJzZUludChjcGYuc3Vic3RyaW5nKDksIDEwKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBTZWd1bmRvIGTDrWdpdG8gdmVyaWZpY2Fkb3JcbiAgICBzb21hID0gMDtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMDsgaSsrKSB7XG4gICAgICBzb21hID0gc29tYSArIHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoaSAtIDEsIGkpKSAqICgxMiAtIGkpO1xuICAgIH1cblxuICAgIHJlc3RvID0gKHNvbWEgKiAxMCkgJSAxMTtcbiAgICBpZiAocmVzdG8gPT09IDEwIHx8IHJlc3RvID09PSAxMSkge1xuICAgICAgcmVzdG8gPSAwO1xuICAgIH1cbiAgICBpZiAocmVzdG8gIT09IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoMTAsIDExKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGRlZmF1bHRNZXNzYWdlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdDUEYgaW52w6FsaWRvJztcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9