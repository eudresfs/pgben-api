{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\util\\converters.ts","mappings":";;;AAAA,0CAAmD;AACnD,8CAA+D;AAE/D;;;GAGG;AACH,MAAa,kBAAkB;IAC7B;;;;;;;;OAQG;IACH,MAAM,CAAC,eAAe,CACpB,KAAa,EACb,KAAa,EACb,IAAuB;QAEvB,IAAI,CAAC;YACH,QAAQ,IAAI,EAAE,CAAC;gBACb,KAAK,yBAAiB,CAAC,MAAM;oBAC3B,OAAO,KAAK,CAAC;gBAEf,KAAK,yBAAiB,CAAC,MAAM;oBAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC7B,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;wBAClB,MAAM,IAAI,2CAA8B,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;oBAC/D,CAAC;oBACD,OAAO,MAAM,CAAC;gBAEhB,KAAK,yBAAiB,CAAC,OAAO;oBAC5B,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,MAAM,EAAE,CAAC;wBACnC,OAAO,IAAI,CAAC;oBACd,CAAC;oBACD,IAAI,KAAK,CAAC,WAAW,EAAE,KAAK,OAAO,EAAE,CAAC;wBACpC,OAAO,KAAK,CAAC;oBACf,CAAC;oBACD,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;wBAClB,OAAO,IAAI,CAAC;oBACd,CAAC;oBACD,IAAI,KAAK,KAAK,GAAG,EAAE,CAAC;wBAClB,OAAO,KAAK,CAAC;oBACf,CAAC;oBACD,MAAM,IAAI,2CAA8B,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;gBAE/D,KAAK,yBAAiB,CAAC,IAAI;oBACzB,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAE3B,KAAK,yBAAiB,CAAC,IAAI;oBACzB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC7B,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;wBAC1B,MAAM,IAAI,2CAA8B,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;oBAC/D,CAAC;oBACD,OAAO,IAAI,CAAC;gBAEd;oBACE,MAAM,IAAI,2CAA8B,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YACjE,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,2CAA8B,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,UAAU,CAAC,KAAU,EAAE,IAAuB;QACnD,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YAC1C,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,yBAAiB,CAAC,MAAM;gBAC3B,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;YAEvB,KAAK,yBAAiB,CAAC,MAAM;gBAC3B,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;YAEvB,KAAK,yBAAiB,CAAC,OAAO;gBAC5B,OAAO,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;YAElC,KAAK,yBAAiB,CAAC,IAAI;gBACzB,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAE/B,KAAK,yBAAiB,CAAC,IAAI;gBACzB,IAAI,KAAK,YAAY,IAAI,EAAE,CAAC;oBAC1B,OAAO,KAAK,CAAC,WAAW,EAAE,CAAC;gBAC7B,CAAC;gBAED,qDAAqD;gBACrD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7B,IAAI,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC;oBAC1B,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW;gBACnC,CAAC;gBACD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;YAE5B;gBACE,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,iBAAiB,CAAC,KAAa,EAAE,IAAuB;QAC7D,IAAI,CAAC;YACH,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;YAC/C,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,oBAAoB,CAAC,KAAU,EAAE,IAAuB;QAC7D,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;YAC1C,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,yBAAiB,CAAC,IAAI;gBACzB,IAAI,KAAK,YAAY,IAAI,EAAE,CAAC;oBAC1B,4BAA4B;oBAC5B,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,KAAK,CAAC,WAAW,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;gBACzO,CAAC;gBACD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;YAEvB,KAAK,yBAAiB,CAAC,IAAI;gBACzB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;oBAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;gBACxC,CAAC;gBACD,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;YAEvB;gBACE,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;IACH,CAAC;CACF;AApJD,gDAoJC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\util\\converters.ts"],"sourcesContent":["import { ParametroTipoEnum } from '../../../enums';\nimport { ParametroTipoInvalidoException } from '../exceptions';\n\n/**\n * Classe utilitária que fornece métodos para converter valores de parâmetros\n * entre string e seus tipos nativos correspondentes.\n */\nexport class ParametroConverter {\n  /**\n   * Converte um valor de string para o tipo especificado.\n   *\n   * @param chave - Chave do parâmetro (usado para mensagens de erro)\n   * @param valor - Valor em formato string\n   * @param tipo - Tipo para o qual converter\n   * @returns O valor convertido para o tipo especificado\n   * @throws ParametroTipoInvalidoException se a conversão falhar\n   */\n  static paraValorTipado(\n    chave: string,\n    valor: string,\n    tipo: ParametroTipoEnum,\n  ): any {\n    try {\n      switch (tipo) {\n        case ParametroTipoEnum.STRING:\n          return valor;\n\n        case ParametroTipoEnum.NUMBER:\n          const numero = Number(valor);\n          if (isNaN(numero)) {\n            throw new ParametroTipoInvalidoException(chave, valor, tipo);\n          }\n          return numero;\n\n        case ParametroTipoEnum.BOOLEAN:\n          if (valor.toLowerCase() === 'true') {\n            return true;\n          }\n          if (valor.toLowerCase() === 'false') {\n            return false;\n          }\n          if (valor === '1') {\n            return true;\n          }\n          if (valor === '0') {\n            return false;\n          }\n          throw new ParametroTipoInvalidoException(chave, valor, tipo);\n\n        case ParametroTipoEnum.JSON:\n          return JSON.parse(valor);\n\n        case ParametroTipoEnum.DATE:\n          const data = new Date(valor);\n          if (isNaN(data.getTime())) {\n            throw new ParametroTipoInvalidoException(chave, valor, tipo);\n          }\n          return data;\n\n        default:\n          throw new ParametroTipoInvalidoException(chave, valor, tipo);\n      }\n    } catch (error) {\n      throw new ParametroTipoInvalidoException(chave, valor, tipo);\n    }\n  }\n\n  /**\n   * Converte um valor de qualquer tipo para string para armazenamento.\n   *\n   * @param valor - Valor a ser convertido\n   * @param tipo - Tipo original do valor\n   * @returns O valor convertido para string\n   */\n  static paraString(valor: any, tipo: ParametroTipoEnum): string {\n    if (valor === null || valor === undefined) {\n      return '';\n    }\n\n    switch (tipo) {\n      case ParametroTipoEnum.STRING:\n        return String(valor);\n\n      case ParametroTipoEnum.NUMBER:\n        return String(valor);\n\n      case ParametroTipoEnum.BOOLEAN:\n        return valor ? 'true' : 'false';\n\n      case ParametroTipoEnum.JSON:\n        return JSON.stringify(valor);\n\n      case ParametroTipoEnum.DATE:\n        if (valor instanceof Date) {\n          return valor.toISOString();\n        }\n\n        // Tenta converter para Date se não for uma instância\n        const data = new Date(valor);\n        if (isNaN(data.getTime())) {\n          return String(valor); // Fallback\n        }\n        return data.toISOString();\n\n      default:\n        return String(valor);\n    }\n  }\n\n  /**\n   * Verifica se um valor string pode ser convertido para o tipo especificado.\n   *\n   * @param valor - Valor em formato string\n   * @param tipo - Tipo para o qual verificar a conversão\n   * @returns true se o valor pode ser convertido, false caso contrário\n   */\n  static podeConverterPara(valor: string, tipo: ParametroTipoEnum): boolean {\n    try {\n      this.paraValorTipado('validação', valor, tipo);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Formata um valor para exibição amigável, conforme seu tipo.\n   *\n   * @param valor - Valor a ser formatado\n   * @param tipo - Tipo do valor\n   * @returns String formatada para exibição\n   */\n  static formatarParaExibicao(valor: any, tipo: ParametroTipoEnum): string {\n    if (valor === null || valor === undefined) {\n      return '';\n    }\n\n    switch (tipo) {\n      case ParametroTipoEnum.DATE:\n        if (valor instanceof Date) {\n          // Formato: DD/MM/YYYY HH:MM\n          return `${valor.getDate().toString().padStart(2, '0')}/${(valor.getMonth() + 1).toString().padStart(2, '0')}/${valor.getFullYear()} ${valor.getHours().toString().padStart(2, '0')}:${valor.getMinutes().toString().padStart(2, '0')}`;\n        }\n        return String(valor);\n\n      case ParametroTipoEnum.JSON:\n        if (typeof valor === 'object') {\n          return JSON.stringify(valor, null, 2);\n        }\n        return String(valor);\n\n      default:\n        return String(valor);\n    }\n  }\n}\n"],"version":3}