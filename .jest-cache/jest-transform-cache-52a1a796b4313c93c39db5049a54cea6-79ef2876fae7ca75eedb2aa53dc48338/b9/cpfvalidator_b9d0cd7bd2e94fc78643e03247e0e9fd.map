{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\cpf.validator.ts","mappings":";;;;;;;;;AAAA,qDAGyB;AAEzB;;;;GAIG;AAEI,IAAM,KAAK,GAAX,MAAM,KAAK;IAChB,QAAQ,CAAC,GAAW;QAClB,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,KAAK,CAAC;QACf,CAAC;QAED,kCAAkC;QAClC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEhC,6BAA6B;QAC7B,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YACtB,OAAO,KAAK,CAAC;QACf,CAAC;QAED,0DAA0D;QAC1D,IAAI,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAC7B,OAAO,KAAK,CAAC;QACf,CAAC;QAED,gCAAgC;QAChC,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,KAAK,CAAC;QAEV,8BAA8B;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAC7D,CAAC;QAED,KAAK,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;QACzB,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,EAAE,EAAE,CAAC;YACjC,KAAK,GAAG,CAAC,CAAC;QACZ,CAAC;QACD,IAAI,KAAK,KAAK,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;YAC7C,OAAO,KAAK,CAAC;QACf,CAAC;QAED,6BAA6B;QAC7B,IAAI,GAAG,CAAC,CAAC;QACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7B,IAAI,GAAG,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAC7D,CAAC;QAED,KAAK,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC;QACzB,IAAI,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,EAAE,EAAE,CAAC;YACjC,KAAK,GAAG,CAAC,CAAC;QACZ,CAAC;QACD,IAAI,KAAK,KAAK,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;YAC9C,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc;QACZ,OAAO,cAAc,CAAC;IACxB,CAAC;CACF,CAAA;AAxDY,sBAAK;gBAAL,KAAK;IADjB,IAAA,qCAAmB,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;GACxC,KAAK,CAwDjB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\cpf.validator.ts"],"sourcesContent":["import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\n/**\n * Validador personalizado para CPF\n *\n * Verifica se um CPF é válido usando o algoritmo de validação oficial\n */\n@ValidatorConstraint({ name: 'isCPF', async: false })\nexport class IsCPF implements ValidatorConstraintInterface {\n  validate(cpf: string): boolean {\n    if (!cpf) {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    cpf = cpf.replace(/[^\\d]/g, '');\n\n    // Verifica se tem 11 dígitos\n    if (cpf.length !== 11) {\n      return false;\n    }\n\n    // Verifica se todos os dígitos são iguais (caso inválido)\n    if (/^(\\d)\\1{10}$/.test(cpf)) {\n      return false;\n    }\n\n    // Algoritmo de validação do CPF\n    let soma = 0;\n    let resto;\n\n    // Primeiro dígito verificador\n    for (let i = 1; i <= 9; i++) {\n      soma = soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);\n    }\n\n    resto = (soma * 10) % 11;\n    if (resto === 10 || resto === 11) {\n      resto = 0;\n    }\n    if (resto !== parseInt(cpf.substring(9, 10))) {\n      return false;\n    }\n\n    // Segundo dígito verificador\n    soma = 0;\n    for (let i = 1; i <= 10; i++) {\n      soma = soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);\n    }\n\n    resto = (soma * 10) % 11;\n    if (resto === 10 || resto === 11) {\n      resto = 0;\n    }\n    if (resto !== parseInt(cpf.substring(10, 11))) {\n      return false;\n    }\n\n    return true;\n  }\n\n  defaultMessage(): string {\n    return 'CPF inválido';\n  }\n}\n"],"version":3}