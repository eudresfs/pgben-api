{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\api\\documento.api.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\api\\documento.api.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from '../../src/app.module';\nimport { JwtService } from '@nestjs/jwt';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Documento } from '../../src/modules/documento/entities/documento.entity';\nimport { MinioService } from '../../src/shared/services/minio.service';\nimport { CriptografiaService } from '../../src/shared/services/criptografia.service';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\n\ndescribe('Documento API', () => {\n  let app: INestApplication;\n  let documentoRepository: Repository<Documento>;\n  let minioService: MinioService;\n  let criptografiaService: CriptografiaService;\n  let jwtService: JwtService;\n  let authToken: string;\n  let testFilePath: string;\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({ transform: true }));\n    await app.init();\n\n    documentoRepository = moduleFixture.get<Repository<Documento>>(\n      getRepositoryToken(Documento),\n    );\n    minioService = moduleFixture.get<MinioService>(MinioService);\n    criptografiaService =\n      moduleFixture.get<CriptografiaService>(CriptografiaService);\n    jwtService = moduleFixture.get<JwtService>(JwtService);\n\n    // Gerar token de autenticação para testes\n    authToken = jwtService.sign({\n      id: 'test-user-id',\n      nome: 'Usuário de Teste',\n      email: 'teste@exemplo.com',\n      roles: ['admin'],\n    });\n\n    // Criar arquivo temporário para testes\n    testFilePath = path.join(__dirname, '..', 'temp-test-file.txt');\n    fs.writeFileSync(testFilePath, 'Conteúdo de teste para upload de arquivo');\n  });\n\n  beforeEach(async () => {\n    // Limpar documentos antes de cada teste\n    await documentoRepository.clear();\n\n    // Espiar o MinioService para evitar chamadas reais ao MinIO durante os testes\n    jest\n      .spyOn(minioService, 'uploadArquivo')\n      .mockImplementation(async (arquivo, nomeArquivo, metadados) => {\n        return {\n          etag: 'mock-etag',\n          versionId: 'mock-version-id',\n        };\n      });\n\n    jest\n      .spyOn(minioService, 'downloadArquivo')\n      .mockImplementation(async (nomeArquivo) => {\n        return Buffer.from('Conteúdo mockado do arquivo');\n      });\n\n    jest\n      .spyOn(minioService, 'removerArquivo')\n      .mockImplementation(async (nomeArquivo) => {\n        return true;\n      });\n  });\n\n  afterAll(async () => {\n    // Remover arquivo temporário\n    if (fs.existsSync(testFilePath)) {\n      fs.unlinkSync(testFilePath);\n    }\n    await app.close();\n  });\n\n  describe('POST /api/documentos/upload', () => {\n    it('deve fazer upload de um documento não sensível', async () => {\n      // Act\n      const response = await request(app.getHttpServer())\n        .post('/api/documentos/upload')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('arquivo', testFilePath)\n        .field('nome', 'Documento de Teste')\n        .field('tipo', 'contrato')\n        .field('sensivel', 'false')\n        .expect(201);\n\n      // Assert\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.nome).toBe('Documento de Teste');\n      expect(response.body.tipo).toBe('contrato');\n      expect(response.body.sensivel).toBe(false);\n      expect(response.body.hash).toBeDefined();\n      expect(response.body.tamanho).toBeGreaterThan(0);\n      expect(response.body.usuario_id).toBe('test-user-id');\n\n      // Verificar se o documento foi salvo no repositório\n      const savedDoc = await documentoRepository.findOne({\n        where: { id: response.body.id },\n      });\n      expect(savedDoc).toBeDefined();\n    });\n\n    it('deve fazer upload de um documento sensível com criptografia', async () => {\n      // Espiar o CriptografiaService para verificar se a criptografia é chamada\n      const spyCriptografar = jest.spyOn(\n        criptografiaService,\n        'cryptografarBuffer',\n      );\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .post('/api/documentos/upload')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('arquivo', testFilePath)\n        .field('nome', 'Documento Sensível')\n        .field('tipo', 'pessoal')\n        .field('sensivel', 'true')\n        .expect(201);\n\n      // Assert\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.nome).toBe('Documento Sensível');\n      expect(response.body.tipo).toBe('pessoal');\n      expect(response.body.sensivel).toBe(true);\n      expect(response.body.criptografado).toBe(true);\n      expect(response.body.iv).toBeDefined();\n      expect(response.body.auth_tag).toBeDefined();\n\n      // Verificar se a criptografia foi chamada\n      expect(spyCriptografar).toHaveBeenCalled();\n    });\n\n    it('deve validar os campos obrigatórios', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .post('/api/documentos/upload')\n        .set('Authorization', `Bearer ${authToken}`)\n        .attach('arquivo', testFilePath)\n        // Faltando campo nome, que é obrigatório\n        .field('tipo', 'contrato')\n        .expect(400);\n    });\n\n    it('deve requerer autenticação', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .post('/api/documentos/upload')\n        .attach('arquivo', testFilePath)\n        .field('nome', 'Documento de Teste')\n        .field('tipo', 'contrato')\n        .expect(401);\n    });\n  });\n\n  describe('GET /api/documentos', () => {\n    it('deve listar documentos paginados', async () => {\n      // Arrange\n      const documentos = [];\n      for (let i = 0; i < 5; i++) {\n        documentos.push(\n          documentoRepository.create({\n            nome: `Documento ${i}`,\n            tipo: 'contrato',\n            caminho: `documentos/doc-${i}.pdf`,\n            mime_type: 'application/pdf',\n            tamanho: 1024,\n            hash: crypto.randomBytes(32).toString('hex'),\n            sensivel: false,\n            criptografado: false,\n            usuario_id: 'test-user-id',\n          }),\n        );\n      }\n      await documentoRepository.save(documentos);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/documentos')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ page: 1, limit: 3 })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(3);\n      expect(response.body.total).toBe(5);\n      expect(response.body.page).toBe(1);\n      expect(response.body.limit).toBe(3);\n      expect(response.body.totalPages).toBe(2);\n    });\n\n    it('deve filtrar documentos por tipo', async () => {\n      // Arrange\n      const documentos = [\n        documentoRepository.create({\n          nome: 'Documento Contrato',\n          tipo: 'contrato',\n          caminho: 'documentos/contrato.pdf',\n          mime_type: 'application/pdf',\n          tamanho: 1024,\n          hash: crypto.randomBytes(32).toString('hex'),\n          sensivel: false,\n          criptografado: false,\n          usuario_id: 'test-user-id',\n        }),\n        documentoRepository.create({\n          nome: 'Documento Pessoal',\n          tipo: 'pessoal',\n          caminho: 'documentos/pessoal.pdf',\n          mime_type: 'application/pdf',\n          tamanho: 1024,\n          hash: crypto.randomBytes(32).toString('hex'),\n          sensivel: true,\n          criptografado: true,\n          iv: Buffer.from('iv-mock').toString('base64'),\n          auth_tag: Buffer.from('auth-tag-mock').toString('base64'),\n          usuario_id: 'test-user-id',\n        }),\n      ];\n      await documentoRepository.save(documentos);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/documentos')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ tipo: 'pessoal' })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(1);\n      expect(response.body.data[0].tipo).toBe('pessoal');\n    });\n\n    it('deve filtrar documentos por sensibilidade', async () => {\n      // Arrange\n      const documentos = [\n        documentoRepository.create({\n          nome: 'Documento Não Sensível',\n          tipo: 'contrato',\n          caminho: 'documentos/contrato.pdf',\n          mime_type: 'application/pdf',\n          tamanho: 1024,\n          hash: crypto.randomBytes(32).toString('hex'),\n          sensivel: false,\n          criptografado: false,\n          usuario_id: 'test-user-id',\n        }),\n        documentoRepository.create({\n          nome: 'Documento Sensível',\n          tipo: 'pessoal',\n          caminho: 'documentos/pessoal.pdf',\n          mime_type: 'application/pdf',\n          tamanho: 1024,\n          hash: crypto.randomBytes(32).toString('hex'),\n          sensivel: true,\n          criptografado: true,\n          iv: Buffer.from('iv-mock').toString('base64'),\n          auth_tag: Buffer.from('auth-tag-mock').toString('base64'),\n          usuario_id: 'test-user-id',\n        }),\n      ];\n      await documentoRepository.save(documentos);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get('/api/documentos')\n        .set('Authorization', `Bearer ${authToken}`)\n        .query({ sensivel: 'true' })\n        .expect(200);\n\n      // Assert\n      expect(response.body.data).toHaveLength(1);\n      expect(response.body.data[0].sensivel).toBe(true);\n    });\n  });\n\n  describe('GET /api/documentos/:id', () => {\n    it('deve retornar um documento específico pelo ID', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome: 'Documento para Busca',\n        tipo: 'contrato',\n        caminho: 'documentos/busca.pdf',\n        mime_type: 'application/pdf',\n        tamanho: 1024,\n        hash: crypto.randomBytes(32).toString('hex'),\n        sensivel: false,\n        criptografado: false,\n        usuario_id: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get(`/api/documentos/${documento.id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(response.body.id).toBe(documento.id);\n      expect(response.body.nome).toBe('Documento para Busca');\n    });\n\n    it('deve retornar 404 para ID inexistente', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .get('/api/documentos/id-inexistente')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n  });\n\n  describe('GET /api/documentos/:id/download', () => {\n    it('deve baixar um documento não sensível', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome: 'Documento para Download',\n        tipo: 'contrato',\n        caminho: 'documentos/download.pdf',\n        mime_type: 'application/pdf',\n        tamanho: 1024,\n        hash: crypto.randomBytes(32).toString('hex'),\n        sensivel: false,\n        criptografado: false,\n        usuario_id: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get(`/api/documentos/${documento.id}/download`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(response.header['content-type']).toBe('application/pdf');\n      expect(response.header['content-disposition']).toContain('attachment');\n      expect(response.header['content-disposition']).toContain('download.pdf');\n      expect(response.body).toBeInstanceOf(Buffer);\n    });\n\n    it('deve baixar e descriptografar um documento sensível', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome: 'Documento Sensível para Download',\n        tipo: 'pessoal',\n        caminho: 'documentos/sensivel.pdf',\n        mime_type: 'application/pdf',\n        tamanho: 1024,\n        hash: crypto.randomBytes(32).toString('hex'),\n        sensivel: true,\n        criptografado: true,\n        iv: Buffer.from('iv-mock').toString('base64'),\n        auth_tag: Buffer.from('auth-tag-mock').toString('base64'),\n        usuario_id: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      // Espiar o CriptografiaService para verificar se a descriptografia é chamada\n      const spyDescriptografar = jest\n        .spyOn(criptografiaService, 'descriptografarBuffer')\n        .mockImplementation((dados, iv, authTag) => {\n          return Buffer.from('Conteúdo descriptografado mockado');\n        });\n\n      // Act\n      const response = await request(app.getHttpServer())\n        .get(`/api/documentos/${documento.id}/download`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      expect(response.header['content-type']).toBe('application/pdf');\n      expect(response.body).toBeInstanceOf(Buffer);\n      expect(spyDescriptografar).toHaveBeenCalled();\n    });\n\n    it('deve requerer autenticação para download', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome: 'Documento para Download',\n        tipo: 'contrato',\n        caminho: 'documentos/download.pdf',\n        mime_type: 'application/pdf',\n        tamanho: 1024,\n        hash: crypto.randomBytes(32).toString('hex'),\n        sensivel: false,\n        criptografado: false,\n        usuario_id: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      // Act & Assert\n      await request(app.getHttpServer())\n        .get(`/api/documentos/${documento.id}/download`)\n        .expect(401);\n    });\n  });\n\n  describe('DELETE /api/documentos/:id', () => {\n    it('deve excluir um documento', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome: 'Documento para Exclusão',\n        tipo: 'contrato',\n        caminho: 'documentos/exclusao.pdf',\n        mime_type: 'application/pdf',\n        tamanho: 1024,\n        hash: crypto.randomBytes(32).toString('hex'),\n        sensivel: false,\n        criptografado: false,\n        usuario_id: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      // Act\n      await request(app.getHttpServer())\n        .delete(`/api/documentos/${documento.id}`)\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(200);\n\n      // Assert\n      const deletedDoc = await documentoRepository.findOne({\n        where: { id: documento.id },\n      });\n      expect(deletedDoc).toBeNull();\n      expect(minioService.removerArquivo).toHaveBeenCalledWith(\n        'documentos/exclusao.pdf',\n      );\n    });\n\n    it('deve retornar 404 ao tentar excluir documento inexistente', async () => {\n      // Act & Assert\n      await request(app.getHttpServer())\n        .delete('/api/documentos/id-inexistente')\n        .set('Authorization', `Bearer ${authToken}`)\n        .expect(404);\n    });\n\n    it('deve requerer autenticação para exclusão', async () => {\n      // Arrange\n      const documento = documentoRepository.create({\n        nome: 'Documento para Exclusão',\n        tipo: 'contrato',\n        caminho: 'documentos/exclusao.pdf',\n        mime_type: 'application/pdf',\n        tamanho: 1024,\n        hash: crypto.randomBytes(32).toString('hex'),\n        sensivel: false,\n        criptografado: false,\n        usuario_id: 'test-user-id',\n      });\n      await documentoRepository.save(documento);\n\n      // Act & Assert\n      await request(app.getHttpServer())\n        .delete(`/api/documentos/${documento.id}`)\n        .expect(401);\n    });\n  });\n});\n"],"version":3}