{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\notification-manager.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\notification-manager.service.ts"],"sourcesContent":["import { Injectable, Logger, Inject, OnModuleInit } from '@nestjs/common';\n\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, LessThanOrEqual, IsNull } from 'typeorm';\nimport { ModuleRef } from '@nestjs/core';\nimport { ScheduleAdapterService } from '../../../shared/schedule/schedule-adapter.service';\nimport { NotificationTemplate } from '../../../entities/notification-template.entity';\nimport {\n  NotificacaoSistema,\n  StatusNotificacaoProcessamento,\n} from '../../../entities/notification.entity';\nimport { CanalNotificacao } from '../interfaces/notification-channel.interface';\nimport { TemplateRendererService } from './template-renderer.service';\nimport { CreateNotificationDto } from '../dtos/create-notification.dto';\nimport { CreateNotificationTemplateDto } from '../dtos/create-notification-template.dto';\n\n/**\n * Serviço Gerenciador de Notificações\n *\n * Responsável por coordenar os processos de criação, agendamento e envio\n * de notificações através dos diferentes canais disponíveis\n */\n@Injectable()\nexport class NotificationManagerService implements OnModuleInit {\n  private readonly logger = new Logger(NotificationManagerService.name);\n  private canaisNotificacao: Map<string, CanalNotificacao> = new Map();\n\n  constructor(\n    @InjectRepository(NotificationTemplate)\n    private templateRepository: Repository<NotificationTemplate>,\n    @InjectRepository(NotificacaoSistema)\n    private notificacaoRepository: Repository<NotificacaoSistema>,\n    private templateRenderer: TemplateRendererService,\n    private moduleRef: ModuleRef,\n    private scheduleAdapter: ScheduleAdapterService,\n  ) {}\n\n  /**\n   * Inicializa os canais de notificação disponíveis\n   * Método chamado automaticamente na inicialização do módulo\n   */\n  async onModuleInit() {\n    this.logger.log('Inicializando o gerenciador de notificações');\n    await this.registrarCanaisDisponiveis();\n    await this.iniciarProcessamentoFila();\n  }\n\n  /**\n   * Cria um novo template de notificação\n   *\n   * @param createTemplateDto DTO com dados do template\n   * @returns Template criado\n   */\n  async criarTemplate(\n    createTemplateDto: CreateNotificationTemplateDto,\n  ): Promise<NotificationTemplate> {\n    // Verificar se os canais informados estão disponíveis\n    for (const canal of createTemplateDto.canais_suportados) {\n      if (!this.canaisNotificacao.has(canal)) {\n        this.logger.warn(\n          `Canal ${canal} informado no template não está disponível no sistema`,\n        );\n      }\n    }\n\n    const template = this.templateRepository.create({\n      ...createTemplateDto,\n      ativo: createTemplateDto.ativo ?? true,\n    });\n\n    return this.templateRepository.save(template);\n  }\n\n  /**\n   * Cria uma nova notificação e a envia ou agenda seu envio\n   *\n   * @param createNotificationDto DTO com dados da notificação\n   * @returns Notificação criada\n   */\n  async criarNotificacao(\n    createNotificationDto: CreateNotificationDto,\n  ): Promise<NotificacaoSistema> {\n    // Buscar o template\n    const template = await this.templateRepository.findOne({\n      where: { id: createNotificationDto.template_id },\n    });\n\n    if (!template) {\n      throw new Error(\n        `Template com ID ${createNotificationDto.template_id} não encontrado`,\n      );\n    }\n\n    if (!template.ativo) {\n      throw new Error(\n        `Template com ID ${createNotificationDto.template_id} está inativo`,\n      );\n    }\n\n    // Criar a notificação\n    const notificacao = this.notificacaoRepository.create({\n      destinatario_id: createNotificationDto.destinatario_id,\n      template: template,\n      dados_contexto: createNotificationDto.dados_contexto,\n      status: StatusNotificacaoProcessamento.PENDENTE,\n      tentativas_envio: 0,\n      data_agendamento: createNotificationDto.data_agendamento,\n    });\n\n    const notificacaoSalva = await this.notificacaoRepository.save(notificacao);\n\n    // Se não houver data de agendamento, enviar imediatamente\n    if (!createNotificationDto.data_agendamento) {\n      this.processarNotificacao(notificacaoSalva.id).catch((err) => {\n        this.logger.error(\n          `Erro ao processar notificação ${notificacaoSalva.id}: ${err.message}`,\n          err.stack,\n        );\n      });\n    } else {\n      // Agendar o envio\n      this.agendarNotificacao(notificacaoSalva);\n    }\n\n    return notificacaoSalva;\n  }\n\n  /**\n   * Busca um template de notificação por ID\n   *\n   * @param id ID do template\n   * @returns Template encontrado\n   */\n  async buscarTemplatePorId(id: string): Promise<NotificationTemplate> {\n    const template = await this.templateRepository.findOne({ where: { id } });\n\n    if (!template) {\n      throw new Error(`Template com ID ${id} não encontrado`);\n    }\n\n    return template;\n  }\n\n  /**\n   * Lista todos os templates de notificação\n   *\n   * @param options Opções de filtro e paginação\n   * @returns Lista paginada de templates\n   */\n  async listarTemplates(\n    options: {\n      page?: number;\n      limit?: number;\n      ativo?: boolean;\n    } = {},\n  ) {\n    const { page = 1, limit = 10, ativo } = options;\n\n    const queryBuilder = this.templateRepository.createQueryBuilder('template');\n\n    if (ativo !== undefined) {\n      queryBuilder.where('template.ativo = :ativo', { ativo });\n    }\n\n    // Calcular paginação\n    const skip = (page - 1) * limit;\n    queryBuilder.skip(skip).take(limit);\n\n    // Ordenação\n    queryBuilder.orderBy('template.nome', 'ASC');\n\n    const [items, total] = await queryBuilder.getManyAndCount();\n\n    return {\n      items,\n      meta: {\n        total,\n        page,\n        limit,\n        pages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Desativa um template de notificação\n   *\n   * @param id ID do template\n   * @returns Template atualizado\n   */\n  async desativarTemplate(id: string): Promise<NotificationTemplate> {\n    const template = await this.buscarTemplatePorId(id);\n\n    if (!template.ativo) {\n      return template; // Já está inativo\n    }\n\n    template.ativo = false;\n    return this.templateRepository.save(template);\n  }\n\n  /**\n   * Ativa um template de notificação\n   *\n   * @param id ID do template\n   * @returns Template atualizado\n   */\n  async ativarTemplate(id: string): Promise<NotificationTemplate> {\n    const template = await this.buscarTemplatePorId(id);\n\n    if (template.ativo) {\n      return template; // Já está ativo\n    }\n\n    template.ativo = true;\n    return this.templateRepository.save(template);\n  }\n\n  /**\n   * Processa uma notificação, enviando-a através dos canais adequados\n   *\n   * @param notificacaoId ID da notificação a processar\n   */\n  async processarNotificacao(notificacaoId: string): Promise<void> {\n    const notificacao = await this.notificacaoRepository.findOne({\n      where: { id: notificacaoId },\n      relations: ['template'],\n    });\n\n    if (!notificacao) {\n      throw new Error(`Notificação com ID ${notificacaoId} não encontrada`);\n    }\n\n    if (notificacao.status === StatusNotificacaoProcessamento.ENVIADA) {\n      this.logger.debug(`Notificação ${notificacaoId} já enviada, ignorando`);\n      return;\n    }\n\n    // Atualizar status para em processamento\n    notificacao.status = StatusNotificacaoProcessamento.EM_PROCESSAMENTO;\n    notificacao.ultima_tentativa = new Date();\n    notificacao.tentativas_envio += 1;\n    await this.notificacaoRepository.save(notificacao);\n\n    try {\n      // Iterar sobre os canais suportados pelo template\n      let sucessoEmAlgumCanal = false;\n\n      for (const canalId of notificacao.template.canais_suportados) {\n        const canal = this.canaisNotificacao.get(canalId);\n\n        if (!canal) {\n          this.logger.warn(\n            `Canal ${canalId} não encontrado para notificação ${notificacaoId}`,\n          );\n          continue;\n        }\n\n        // Verificar disponibilidade do canal\n        const disponivel = await canal.verificarDisponibilidade();\n        if (!disponivel) {\n          this.logger.warn(`Canal ${canalId} não está disponível no momento`);\n          continue;\n        }\n\n        // Enviar notificação por este canal\n        try {\n          const resultado = await canal.enviar(notificacao);\n\n          if (resultado.sucesso) {\n            sucessoEmAlgumCanal = true;\n\n            // Registrar sucesso deste canal\n            notificacao.dados_envio = notificacao.dados_envio || {};\n            notificacao.dados_envio[canalId] = {\n              sucesso: true,\n              data_envio: resultado.data_envio,\n              identificador_externo: resultado.identificador_externo,\n              mensagem: resultado.mensagem,\n            };\n          } else {\n            // Registrar falha deste canal\n            notificacao.dados_envio = notificacao.dados_envio || {};\n            notificacao.dados_envio[canalId] = {\n              sucesso: false,\n              data_tentativa: resultado.data_envio,\n              erro: resultado.mensagem,\n            };\n          }\n        } catch (canalError) {\n          this.logger.error(\n            `Erro no canal ${canalId} ao enviar notificação ${notificacaoId}: ${canalError.message}`,\n            canalError.stack,\n          );\n        }\n      }\n\n      // Atualizar status final da notificação\n      if (sucessoEmAlgumCanal) {\n        notificacao.status = StatusNotificacaoProcessamento.ENVIADA;\n        notificacao.data_envio = new Date();\n      } else if (notificacao.tentativas_envio >= 3) {\n        notificacao.status = StatusNotificacaoProcessamento.FALHA;\n      } else {\n        notificacao.status = StatusNotificacaoProcessamento.PENDENTE;\n        // Agendar nova tentativa em 5 minutos\n        setTimeout(\n          () => {\n            this.processarNotificacao(notificacaoId).catch((err) => {\n              this.logger.error(\n                `Erro ao reprocessar notificação ${notificacaoId}: ${err.message}`,\n              );\n            });\n          },\n          5 * 60 * 1000,\n        );\n      }\n    } catch (error) {\n      this.logger.error(\n        `Erro geral ao processar notificação ${notificacaoId}: ${error.message}`,\n        error.stack,\n      );\n\n      notificacao.status =\n        notificacao.tentativas_envio >= 3\n          ? StatusNotificacaoProcessamento.FALHA\n          : StatusNotificacaoProcessamento.PENDENTE;\n    }\n\n    // Salvar estado final da notificação\n    await this.notificacaoRepository.save(notificacao);\n  }\n\n  /**\n   * Agenda o envio de uma notificação para uma data futura\n   *\n   * @param notificacao Notificação a ser agendada\n   */\n  private agendarNotificacao(notificacao: NotificacaoSistema): void {\n    try {\n      if (!notificacao.data_agendamento) {\n        return;\n      }\n\n      const agora = new Date();\n      if (notificacao.data_agendamento <= agora) {\n        // Se a data de agendamento já passou, processar imediatamente\n        this.processarNotificacao(notificacao.id).catch((err) => {\n          this.logger.error(\n            `Erro ao processar notificação agendada ${notificacao.id}: ${err.message}`,\n          );\n        });\n        return;\n      }\n\n      // Calcular o tempo até o agendamento\n      const tempoAteAgendamento =\n        notificacao.data_agendamento.getTime() - agora.getTime();\n\n      // Criar um agendamento para processar a notificação no momento agendado\n      const timeoutName = `notificacao_${notificacao.id}`;\n\n      // Cancelar agendamento existente, se houver\n      this.scheduleAdapter.cancelTimeout(timeoutName);\n\n      // Criar novo agendamento\n      this.scheduleAdapter.scheduleOnce(\n        timeoutName,\n        notificacao.data_agendamento,\n        () =>\n          this.processarNotificacao(notificacao.id).catch((err) => {\n            this.logger.error(\n              `Erro ao processar notificação agendada ${notificacao.id}: ${err.message}`,\n            );\n          }),\n      );\n\n      this.logger.debug(\n        `Notificação ${notificacao.id} agendada para ${notificacao.data_agendamento.toISOString()}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao agendar notificação ${notificacao.id}: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Registra todos os canais de notificação disponíveis no sistema\n   */\n  private async registrarCanaisDisponiveis(): Promise<void> {\n    try {\n      // Buscar todos os serviços que implementam a interface CanalNotificacao\n      // Na prática, você registraria cada canal explicitamente no módulo\n      // Esta é uma abordagem mais dinâmica, mas na maioria dos casos você\n      // faria o registro explícito de cada canal no NotificacaoModule\n\n      // Verificar se o EmailChannelService está disponível\n      try {\n        // Registrar canal de email\n        const emailChannel = this.moduleRef.get('EmailChannelService', {\n          strict: false,\n        });\n\n        if (emailChannel && 'canal_id' in emailChannel) {\n          this.canaisNotificacao.set(emailChannel.canal_id, emailChannel);\n          this.logger.log(\n            `Canal de notificação registrado: ${emailChannel.canal_id}`,\n          );\n        }\n      } catch (e) {\n        // O EmailChannelService não está disponível, mas isso não deve impedir o funcionamento\n        this.logger.warn(\n          'EmailChannelService não está disponível. Notificações por email não serão enviadas.',\n        );\n      }\n\n      // Você registraria outros canais aqui da mesma forma\n      // Ex: SMS, Push, WhatsApp, etc.\n\n      this.logger.log(\n        `Total de ${this.canaisNotificacao.size} canais de notificação registrados`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao registrar canais de notificação: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Inicia o processamento da fila de notificações pendentes\n   */\n  private async iniciarProcessamentoFila(): Promise<void> {\n    try {\n      // Buscar todas as notificações pendentes antigas que não foram processadas\n      const notificacoesPendentes = await this.notificacaoRepository.find({\n        where: { status: StatusNotificacaoProcessamento.PENDENTE },\n        order: { created_at: 'ASC' },\n      });\n\n      this.logger.log(\n        `Iniciando processamento de ${notificacoesPendentes.length} notificações pendentes`,\n      );\n\n      // Processar cada notificação com um pequeno intervalo para não sobrecarregar\n      for (const [index, notificacao] of notificacoesPendentes.entries()) {\n        // Verificar se está agendada para o futuro\n        if (\n          notificacao.data_agendamento &&\n          notificacao.data_agendamento > new Date()\n        ) {\n          this.agendarNotificacao(notificacao);\n          continue;\n        }\n\n        // Atrasar o processamento proporcionalmente ao índice para não sobrecarregar\n        setTimeout(() => {\n          this.processarNotificacao(notificacao.id).catch((err) => {\n            this.logger.error(\n              `Erro ao processar notificação pendente ${notificacao.id}: ${err.message}`,\n            );\n          });\n        }, index * 500); // 500ms de intervalo entre cada processamento\n      }\n\n      // Configurar job para verificar notificações pendentes periodicamente\n      this.scheduleAdapter.scheduleInterval(\n        'verificar_notificacoes_pendentes',\n        5 * 60 * 1000, // 5 minutos em milissegundos\n        () => this.verificarNotificacoesPendentes(),\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao iniciar processamento da fila de notificações: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Verifica e processa notificações pendentes periodicamente\n   */\n  private async verificarNotificacoesPendentes(): Promise<void> {\n    try {\n      const agora = new Date();\n\n      // Buscar notificações pendentes que não estão agendadas para o futuro\n      const notificacoesPendentes = await this.notificacaoRepository.find({\n        where: [\n          {\n            status: StatusNotificacaoProcessamento.PENDENTE,\n            data_agendamento: IsNull(),\n          },\n          {\n            status: StatusNotificacaoProcessamento.PENDENTE,\n            data_agendamento: LessThanOrEqual(agora),\n          },\n        ],\n        order: { created_at: 'ASC' },\n        take: 50, // Limitar quantidade para não sobrecarregar\n      });\n\n      if (notificacoesPendentes.length > 0) {\n        this.logger.debug(\n          `Processando ${notificacoesPendentes.length} notificações pendentes`,\n        );\n\n        // Processar cada notificação com intervalo para não sobrecarregar\n        for (const [index, notificacao] of notificacoesPendentes.entries()) {\n          setTimeout(() => {\n            this.processarNotificacao(notificacao.id).catch((err) => {\n              this.logger.error(\n                `Erro ao processar notificação pendente ${notificacao.id}: ${err.message}`,\n              );\n            });\n          }, index * 200); // 200ms de intervalo entre cada processamento\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar notificações pendentes: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n}\n"],"version":3}