{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\composicao-familiar.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\composicao-familiar.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository, DataSource, QueryRunner } from 'typeorm';\nimport { ComposicaoFamiliarService } from './composicao-familiar.service';\nimport { ComposicaoFamiliar } from '../entities/composicao-familiar.entity';\nimport { Cidadao } from '../entities/cidadao.entity';\nimport { CreateComposicaoFamiliarDto } from '../dto/create-composicao-familiar.dto';\nimport { UpdateComposicaoFamiliarDto } from '../dto/update-composicao-familiar.dto';\nimport {\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { CacheService } from '../../../shared/cache';\nimport { EscolaridadeEnum } from '../enums/escolaridade.enum';\nimport { ParentescoEnum } from '../enums/parentesco.enum';\n\ndescribe('ComposicaoFamiliarService', () => {\n  let service: ComposicaoFamiliarService;\n  let composicaoFamiliarRepository: Repository<ComposicaoFamiliar>;\n  let cidadaoRepository: Repository<Cidadao>;\n  let cacheService: CacheService;\n  let dataSource: DataSource;\n  let queryRunner: QueryRunner;\n\n  const mockQueryRunner = {\n    connect: jest.fn(),\n    startTransaction: jest.fn(),\n    commitTransaction: jest.fn(),\n    rollbackTransaction: jest.fn(),\n    release: jest.fn(),\n    manager: {\n      save: jest.fn(),\n    },\n  };\n\n  const mockDataSource = {\n    createQueryRunner: jest.fn().mockReturnValue(mockQueryRunner),\n  };\n\n  const mockComposicaoFamiliarRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n  };\n\n  const mockCidadaoRepository = {\n    findOne: jest.fn(),\n  };\n\n  const mockCacheService = {\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n  };\n\n  const mockCidadao = {\n    id: '123e4567-e89b-12d3-a456-426614174001',\n    cpf: '98765432100',\n    nome: 'Maria Silva',\n  };\n\n  const mockComposicaoFamiliar = {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\n    nome: 'João Silva',\n    cpf: '12345678900',\n    nis: '12345678901',\n    idade: 25,\n    ocupacao: 'Estudante',\n    escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n    parentesco: ParentescoEnum.FILHO,\n    renda: 1500.0,\n    observacoes: 'Observações de teste',\n    created_at: new Date('2024-01-01T10:00:00Z'),\n    updated_at: new Date('2024-01-01T10:00:00Z'),\n    removed_at: null,\n    cidadao: mockCidadao,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        ComposicaoFamiliarService,\n        {\n          provide: getRepositoryToken(ComposicaoFamiliar),\n          useValue: mockComposicaoFamiliarRepository,\n        },\n        {\n          provide: getRepositoryToken(Cidadao),\n          useValue: mockCidadaoRepository,\n        },\n        {\n          provide: CacheService,\n          useValue: mockCacheService,\n        },\n        {\n          provide: DataSource,\n          useValue: mockDataSource,\n        },\n      ],\n    }).compile();\n\n    service = module.get<ComposicaoFamiliarService>(ComposicaoFamiliarService);\n    composicaoFamiliarRepository = module.get<Repository<ComposicaoFamiliar>>(\n      getRepositoryToken(ComposicaoFamiliar),\n    );\n    cidadaoRepository = module.get<Repository<Cidadao>>(\n      getRepositoryToken(Cidadao),\n    );\n    cacheService = module.get<CacheService>(CacheService);\n    dataSource = module.get<DataSource>(DataSource);\n    queryRunner = mockQueryRunner as any;\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('create', () => {\n    const createDto: CreateComposicaoFamiliarDto = {\n      cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\n      nome: 'João Silva',\n      cpf: '123.456.789-00',\n      nis: '12345678901',\n      idade: 25,\n      ocupacao: 'Estudante',\n      escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n      parentesco: ParentescoEnum.FILHO,\n      renda: 1500.0,\n      observacoes: 'Observações de teste',\n    };\n\n    const userId = 'user123';\n\n    beforeEach(() => {\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\n      mockComposicaoFamiliarRepository.create.mockReturnValue(\n        mockComposicaoFamiliar,\n      );\n      mockQueryRunner.manager.save.mockResolvedValue(mockComposicaoFamiliar);\n      mockCacheService.set.mockResolvedValue(undefined);\n      mockCacheService.del.mockResolvedValue(undefined);\n    });\n\n    it('should create a new composicao familiar member successfully', async () => {\n      const result = await service.create(createDto, userId);\n\n      expect(cidadaoRepository.findOne).toHaveBeenCalledWith({\n        where: { id: createDto.cidadao_id },\n      });\n      expect(composicaoFamiliarRepository.create).toHaveBeenCalledWith({\n        ...createDto,\n        cpf: '12345678900',\n      });\n      expect(queryRunner.manager.save).toHaveBeenCalled();\n      expect(queryRunner.commitTransaction).toHaveBeenCalled();\n      expect(result).toBeDefined();\n      expect(result.nome).toBe(createDto.nome);\n    });\n\n    it('should throw NotFoundException when cidadao does not exist', async () => {\n      mockCidadaoRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.create(createDto, userId)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should throw BadRequestException for invalid CPF', async () => {\n      const invalidCpfDto = { ...createDto, cpf: '123' };\n\n      await expect(service.create(invalidCpfDto, userId)).rejects.toThrow(\n        BadRequestException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should throw ConflictException when member with same CPF exists', async () => {\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(\n        mockComposicaoFamiliar,\n      );\n\n      await expect(service.create(createDto, userId)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should throw ConflictException when CPF is same as cidadao CPF', async () => {\n      const sameCpfDto = { ...createDto, cpf: '987.654.321-00' };\n\n      await expect(service.create(sameCpfDto, userId)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should throw ConflictException when member with same name exists', async () => {\n      mockComposicaoFamiliarRepository.findOne\n        .mockResolvedValueOnce(null) // CPF check\n        .mockResolvedValueOnce(mockComposicaoFamiliar); // Name check\n\n      await expect(service.create(createDto, userId)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should handle transaction rollback on error', async () => {\n      mockQueryRunner.manager.save.mockRejectedValue(\n        new Error('Database error'),\n      );\n\n      await expect(service.create(createDto, userId)).rejects.toThrow(\n        'Database error',\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n      expect(queryRunner.release).toHaveBeenCalled();\n    });\n  });\n\n  describe('findByCidadao', () => {\n    const cidadaoId = '123e4567-e89b-12d3-a456-426614174001';\n    const options = { page: 1, limit: 10 };\n\n    beforeEach(() => {\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\n      mockCacheService.get.mockResolvedValue(null);\n      mockComposicaoFamiliarRepository.findAndCount.mockResolvedValue([\n        [mockComposicaoFamiliar],\n        1,\n      ]);\n      mockComposicaoFamiliarRepository.find.mockResolvedValue([\n        mockComposicaoFamiliar,\n      ]);\n      mockCacheService.set.mockResolvedValue(undefined);\n    });\n\n    it('should return paginated composicao familiar members', async () => {\n      const result = await service.findByCidadao(cidadaoId, options);\n\n      expect(cidadaoRepository.findOne).toHaveBeenCalledWith({\n        where: { id: cidadaoId },\n      });\n      expect(composicaoFamiliarRepository.findAndCount).toHaveBeenCalledWith({\n        where: {\n          cidadao_id: cidadaoId,\n          removed_at: null,\n        },\n        order: {\n          created_at: 'DESC',\n        },\n        skip: 0,\n        take: 10,\n      });\n      expect(result.data).toHaveLength(1);\n      expect(result.meta.total).toBe(1);\n      expect(result.estatisticas).toBeDefined();\n    });\n\n    it('should return cached result when available', async () => {\n      const cachedResult = {\n        data: [mockComposicaoFamiliar],\n        meta: {\n          total: 1,\n          page: 1,\n          limit: 10,\n          totalPages: 1,\n          hasNext: false,\n          hasPrev: false,\n        },\n        estatisticas: {\n          totalMembros: 1,\n          rendaTotal: 1500,\n          rendaMedia: 1500,\n          idadeMedia: 25,\n          membrosComRenda: 1,\n        },\n      };\n      mockCacheService.get.mockResolvedValue(cachedResult);\n\n      const result = await service.findByCidadao(cidadaoId, options);\n\n      expect(result).toEqual(cachedResult);\n      expect(composicaoFamiliarRepository.findAndCount).not.toHaveBeenCalled();\n    });\n\n    it('should throw NotFoundException when cidadao does not exist', async () => {\n      mockCidadaoRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.findByCidadao(cidadaoId, options)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('should calculate correct pagination metadata', async () => {\n      mockComposicaoFamiliarRepository.findAndCount.mockResolvedValue([\n        [mockComposicaoFamiliar, mockComposicaoFamiliar],\n        25,\n      ]);\n\n      const result = await service.findByCidadao(cidadaoId, {\n        page: 2,\n        limit: 10,\n      });\n\n      expect(result.meta.total).toBe(25);\n      expect(result.meta.page).toBe(2);\n      expect(result.meta.totalPages).toBe(3);\n      expect(result.meta.hasNext).toBe(true);\n      expect(result.meta.hasPrev).toBe(true);\n    });\n  });\n\n  describe('findOne', () => {\n    const id = '123e4567-e89b-12d3-a456-426614174000';\n\n    beforeEach(() => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(\n        mockComposicaoFamiliar,\n      );\n      mockCacheService.set.mockResolvedValue(undefined);\n    });\n\n    it('should return a composicao familiar member', async () => {\n      const result = await service.findOne(id);\n\n      expect(composicaoFamiliarRepository.findOne).toHaveBeenCalledWith({\n        where: {\n          id,\n          removed_at: null,\n        },\n        relations: ['cidadao'],\n      });\n      expect(result).toBeDefined();\n      expect(result.id).toBe(id);\n    });\n\n    it('should return cached result when available', async () => {\n      const cachedResult = { id, nome: 'João Silva' };\n      mockCacheService.get.mockResolvedValue(cachedResult);\n\n      const result = await service.findOne(id);\n\n      expect(result).toEqual(cachedResult);\n      expect(composicaoFamiliarRepository.findOne).not.toHaveBeenCalled();\n    });\n\n    it('should throw NotFoundException when member does not exist', async () => {\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.findOne(id)).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('update', () => {\n    const id = '123e4567-e89b-12d3-a456-426614174000';\n    const updateDto: UpdateComposicaoFamiliarDto = {\n      nome: 'João Silva Atualizado',\n      renda: 2000.0,\n    };\n    const userId = 'user123';\n\n    beforeEach(() => {\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(\n        mockComposicaoFamiliar,\n      );\n      mockQueryRunner.manager.save.mockResolvedValue({\n        ...mockComposicaoFamiliar,\n        ...updateDto,\n      });\n      mockCacheService.set.mockResolvedValue(undefined);\n      mockCacheService.del.mockResolvedValue(undefined);\n    });\n\n    it('should update a composicao familiar member successfully', async () => {\n      const result = await service.update(id, updateDto, userId);\n\n      expect(composicaoFamiliarRepository.findOne).toHaveBeenCalledWith({\n        where: {\n          id,\n          removed_at: null,\n        },\n        relations: ['cidadao'],\n      });\n      expect(queryRunner.manager.save).toHaveBeenCalled();\n      expect(queryRunner.commitTransaction).toHaveBeenCalled();\n      expect(result.nome).toBe(updateDto.nome);\n    });\n\n    it('should throw NotFoundException when member does not exist', async () => {\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.update(id, updateDto, userId)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should validate CPF when updating', async () => {\n      const updateWithCpf = { ...updateDto, cpf: '123' };\n\n      await expect(service.update(id, updateWithCpf, userId)).rejects.toThrow(\n        BadRequestException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should check for duplicate CPF when updating', async () => {\n      const updateWithCpf = { ...updateDto, cpf: '111.111.111-11' };\n      mockComposicaoFamiliarRepository.findOne\n        .mockResolvedValueOnce(mockComposicaoFamiliar) // Initial find\n        .mockResolvedValueOnce({\n          ...mockComposicaoFamiliar,\n          id: 'different-id',\n        }); // Duplicate check\n\n      await expect(service.update(id, updateWithCpf, userId)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n\n    it('should check for duplicate name when updating', async () => {\n      const updateWithName = { ...updateDto, nome: 'Nome Duplicado' };\n      mockComposicaoFamiliarRepository.findOne\n        .mockResolvedValueOnce(mockComposicaoFamiliar) // Initial find\n        .mockResolvedValueOnce(null) // CPF check (not applicable)\n        .mockResolvedValueOnce({\n          ...mockComposicaoFamiliar,\n          id: 'different-id',\n        }); // Name check\n\n      await expect(service.update(id, updateWithName, userId)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(queryRunner.rollbackTransaction).toHaveBeenCalled();\n    });\n  });\n\n  describe('remove', () => {\n    const id = '123e4567-e89b-12d3-a456-426614174000';\n    const userId = 'user123';\n\n    beforeEach(() => {\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(\n        mockComposicaoFamiliar,\n      );\n      mockComposicaoFamiliarRepository.save.mockResolvedValue({\n        ...mockComposicaoFamiliar,\n        removed_at: new Date(),\n      });\n      mockCacheService.del.mockResolvedValue(undefined);\n    });\n\n    it('should remove a composicao familiar member (soft delete)', async () => {\n      await service.remove(id, userId);\n\n      expect(composicaoFamiliarRepository.findOne).toHaveBeenCalledWith({\n        where: {\n          id,\n          removed_at: null,\n        },\n      });\n      expect(composicaoFamiliarRepository.save).toHaveBeenCalledWith(\n        expect.objectContaining({\n          ...mockComposicaoFamiliar,\n          removed_at: expect.any(Date),\n        }),\n      );\n    });\n\n    it('should throw NotFoundException when member does not exist', async () => {\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\n\n      await expect(service.remove(id, userId)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('findByCpf', () => {\n    const cpf = '12345678900';\n\n    beforeEach(() => {\n      mockComposicaoFamiliarRepository.find.mockResolvedValue([\n        mockComposicaoFamiliar,\n      ]);\n    });\n\n    it('should return composicao familiar members by CPF', async () => {\n      const result = await service.findByCpf(cpf);\n\n      expect(composicaoFamiliarRepository.find).toHaveBeenCalledWith({\n        where: {\n          cpf,\n          removed_at: null,\n        },\n        relations: ['cidadao'],\n        order: {\n          created_at: 'DESC',\n        },\n      });\n      expect(result).toHaveLength(1);\n      expect(result[0].cpf).toBe('123.456.789-00');\n    });\n\n    it('should throw BadRequestException for invalid CPF length', async () => {\n      await expect(service.findByCpf('123')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('should return empty array when no members found', async () => {\n      mockComposicaoFamiliarRepository.find.mockResolvedValue([]);\n\n      const result = await service.findByCpf(cpf);\n\n      expect(result).toEqual([]);\n    });\n\n    it('should clean CPF format before search', async () => {\n      await service.findByCpf('123.456.789-00');\n\n      expect(composicaoFamiliarRepository.find).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            cpf: '12345678900',\n          }),\n        }),\n      );\n    });\n  });\n\n  describe('Cache management', () => {\n    it('should invalidate related cache when creating member', async () => {\n      const createDto: CreateComposicaoFamiliarDto = {\n        cidadao_id: '123e4567-e89b-12d3-a456-426614174001',\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        nis: '12345678901',\n        idade: 25,\n        ocupacao: 'Estudante',\n        escolaridade: EscolaridadeEnum.MEDIO_COMPLETO,\n        parentesco: ParentescoEnum.FILHO,\n      };\n\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(null);\n      mockComposicaoFamiliarRepository.create.mockReturnValue(\n        mockComposicaoFamiliar,\n      );\n      mockQueryRunner.manager.save.mockResolvedValue(mockComposicaoFamiliar);\n\n      await service.create(createDto, 'user123');\n\n      expect(cacheService.del).toHaveBeenCalledWith(\n        expect.stringContaining('composicao_familiar:cidadao:'),\n      );\n    });\n\n    it('should set cache after successful operations', async () => {\n      mockCacheService.get.mockResolvedValue(null);\n      mockComposicaoFamiliarRepository.findOne.mockResolvedValue(\n        mockComposicaoFamiliar,\n      );\n\n      await service.findOne('123e4567-e89b-12d3-a456-426614174000');\n\n      expect(cacheService.set).toHaveBeenCalledWith(\n        expect.stringContaining('composicao_familiar:id:'),\n        expect.any(Object),\n        3600,\n      );\n    });\n  });\n\n  describe('Statistics calculation', () => {\n    it('should calculate correct statistics', async () => {\n      const membrosComRenda = [\n        { ...mockComposicaoFamiliar, renda: 1000, idade: 20 },\n        { ...mockComposicaoFamiliar, renda: 2000, idade: 30 },\n        { ...mockComposicaoFamiliar, renda: null, idade: 25 },\n      ];\n\n      mockCidadaoRepository.findOne.mockResolvedValue(mockCidadao);\n      mockComposicaoFamiliarRepository.findAndCount.mockResolvedValue([\n        membrosComRenda,\n        3,\n      ]);\n      mockComposicaoFamiliarRepository.find.mockResolvedValue(membrosComRenda);\n\n      const result = await service.findByCidadao('cidadao-id', {\n        page: 1,\n        limit: 10,\n      });\n\n      expect(result.estatisticas.totalMembros).toBe(3);\n      expect(result.estatisticas.rendaTotal).toBe(3000);\n      expect(result.estatisticas.rendaMedia).toBe(1500);\n      expect(result.estatisticas.idadeMedia).toBe(25);\n      expect(result.estatisticas.membrosComRenda).toBe(2);\n    });\n  });\n});\n"],"version":3}