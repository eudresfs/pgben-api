{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\user-permission.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\user-permission.repository.ts"],"sourcesContent":["import { DataSource, Repository } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { UserPermission, ScopeType, TipoEscopo } from '../../entities/user-permission.entity';\n\n/**\n * Repositório para a entidade UserPermission.\n * \n * Fornece métodos para manipulação de permissões atribuídas diretamente a usuários no banco de dados,\n * incluindo busca por usuário, permissão, escopo e operações de CRUD.\n */\n@Injectable()\nexport class UserPermissionRepository extends Repository<UserPermission> {\n  constructor(private dataSource: DataSource) {\n    super(UserPermission, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca permissões por ID de usuário.\n   * \n   * @param userId ID do usuário\n   * @returns Lista de permissões encontradas\n   */\n  async findByUserId(userId: string): Promise<UserPermission[]> {\n    return this.find({ where: { usuario_id: userId } });\n  }\n\n  /**\n   * Busca permissões por ID de usuário com permissões relacionadas.\n   * \n   * @param userId ID do usuário\n   * @returns Lista de permissões encontradas com permissões relacionadas\n   */\n  async findByUserIdWithPermissions(userId: string): Promise<UserPermission[]> {\n    return this.createQueryBuilder('permissao_usuario')\n      .leftJoinAndSelect('permissao_usuario.permissao', 'permissao')\n      .where('permissao_usuario.usuario_id = :userId', { userId })\n      .getMany();\n  }\n\n  /**\n   * Busca permissões por ID de permissão.\n   * \n   * @param permissionId ID da permissão\n   * @returns Lista de permissões encontradas\n   */\n  async findByPermissionId(permissionId: string): Promise<UserPermission[]> {\n    return this.find({ where: { permissao_id: permissionId } });\n  }\n\n  /**\n   * Busca permissão por ID de usuário, ID de permissão, tipo de escopo e ID de escopo.\n   * \n   * @param userId ID do usuário\n   * @param permissionId ID da permissão\n   * @param scopeType Tipo de escopo\n   * @param scopeId ID do escopo (opcional)\n   * @returns A permissão encontrada ou null\n   */\n  async findByUserAndPermission(\n    userId: string,\n    permissionId: string,\n    scopeType: TipoEscopo,\n    scopeId?: string\n  ): Promise<UserPermission | null> {\n    return this.findOne({\n      where: {\n        usuario_id: userId,\n        permissao_id: permissionId,\n        tipo_escopo: scopeType,\n        ...(scopeId && { escopo_id: scopeId })\n      }\n    });\n  }\n\n  /**\n   * Busca permissões por ID de usuário e tipo de escopo.\n   * \n   * @param userId ID do usuário\n   * @param scopeType Tipo de escopo\n   * @returns Lista de permissões encontradas\n   */\n  async findByUserIdAndScopeType(userId: string, scopeType: TipoEscopo): Promise<UserPermission[]> {\n    return this.find({ where: { usuario_id: userId, tipo_escopo: scopeType } });\n  }\n\n  /**\n   * Busca permissões por ID de usuário, tipo de escopo e ID de escopo.\n   * \n   * @param userId ID do usuário\n   * @param scopeType Tipo de escopo\n   * @param scopeId ID do escopo\n   * @returns Lista de permissões encontradas\n   */\n  async findByUserIdAndScope(userId: string, scopeType: TipoEscopo, scopeId: string): Promise<UserPermission[]> {\n    return this.find({ where: { usuario_id: userId, tipo_escopo: scopeType, escopo_id: scopeId } });\n  }\n\n  /**\n   * Busca permissões válidas (não expiradas) por ID de usuário.\n   * \n   * @param userId ID do usuário\n   * @returns Lista de permissões válidas encontradas\n   */\n  async findValidByUserId(userId: string): Promise<UserPermission[]> {\n    const now = new Date();\n    return this.createQueryBuilder('permissao_usuario')\n      .leftJoinAndSelect('permissao_usuario.permissao', 'permissao')\n      .where('permissao_usuario.usuario_id = :userId', { userId })\n      .andWhere('(permissao_usuario.valido_ate IS NULL OR permissao_usuario.valido_ate > :now)', { now })\n      .getMany();\n  }\n\n  /**\n   * Cria uma nova permissão para um usuário.\n   * \n   * @param data Dados da permissão a ser criada\n   * @returns A permissão criada\n   */\n  async createUserPermission(data: Partial<UserPermission>): Promise<UserPermission> {\n    const userPermission = this.create(data);\n    return this.save(userPermission);\n  }\n\n  /**\n   * Atualiza uma permissão existente de um usuário.\n   * \n   * @param id ID da permissão a ser atualizada\n   * @param data Dados atualizados da permissão\n   * @returns A permissão atualizada\n   */\n  async updateUserPermission(id: string, data: Partial<UserPermission>): Promise<UserPermission | null> {\n    await this.update(id, data);\n    return this.findOneBy({ id });\n  }\n\n  /**\n   * Remove uma permissão de um usuário.\n   * \n   * @param id ID da permissão a ser removida\n   * @returns true se a permissão foi removida, false caso contrário\n   */\n  async removeUserPermission(id: string): Promise<boolean> {\n    const result = await this.delete(id);\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n\n  /**\n   * Remove todas as permissões de um usuário.\n   * \n   * @param userId ID do usuário\n   * @returns true se as permissões foram removidas, false caso contrário\n   */\n  async removeUserPermissionsByUserId(userId: string): Promise<boolean> {\n    const result = await this.delete({ usuario_id: userId });\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n\n  /**\n   * Remove todas as permissões de um tipo específico.\n   * \n   * @param permissionId ID da permissão\n   * @returns true se as permissões foram removidas, false caso contrário\n   */\n  async removeUserPermissionsByPermissionId(permissionId: string): Promise<boolean> {\n    const result = await this.delete({ permissao_id: permissionId });\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n\n  /**\n   * Remove todas as permissões de um escopo específico.\n   * \n   * @param scopeType Tipo de escopo\n   * @param scopeId ID do escopo\n   * @returns true se as permissões foram removidas, false caso contrário\n   */\n  async removeUserPermissionsByScope(scopeType: TipoEscopo, scopeId: string): Promise<boolean> {\n    const result = await this.delete({ tipo_escopo: scopeType, escopo_id: scopeId });\n    return result.affected !== null && result.affected !== undefined && result.affected > 0;\n  }\n}\n"],"version":3}