95ec2682ee55e7af54235c61d4ebca19
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const request = __importStar(require("supertest"));
const app_module_1 = require("../../src/app.module");
const jwt_1 = require("@nestjs/jwt");
const typeorm_1 = require("@nestjs/typeorm");
const documento_entity_1 = require("../../src/modules/documento/entities/documento.entity");
const minio_service_1 = require("../../src/shared/services/minio.service");
const criptografia_service_1 = require("../../src/shared/services/criptografia.service");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
describe('Documento API', () => {
    let app;
    let documentoRepository;
    let minioService;
    let criptografiaService;
    let jwtService;
    let authToken;
    let testFilePath;
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [app_module_1.AppModule],
        }).compile();
        app = moduleFixture.createNestApplication();
        app.useGlobalPipes(new common_1.ValidationPipe({ transform: true }));
        await app.init();
        documentoRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(documento_entity_1.Documento));
        minioService = moduleFixture.get(minio_service_1.MinioService);
        criptografiaService =
            moduleFixture.get(criptografia_service_1.CriptografiaService);
        jwtService = moduleFixture.get(jwt_1.JwtService);
        // Gerar token de autenticação para testes
        authToken = jwtService.sign({
            id: 'test-user-id',
            nome: 'Usuário de Teste',
            email: 'teste@exemplo.com',
            roles: ['admin'],
        });
        // Criar arquivo temporário para testes
        testFilePath = path.join(__dirname, '..', 'temp-test-file.txt');
        fs.writeFileSync(testFilePath, 'Conteúdo de teste para upload de arquivo');
    });
    beforeEach(async () => {
        // Limpar documentos antes de cada teste
        await documentoRepository.clear();
        // Espiar o MinioService para evitar chamadas reais ao MinIO durante os testes
        jest
            .spyOn(minioService, 'uploadArquivo')
            .mockImplementation(async (arquivo, nomeArquivo, metadados) => {
            return {
                etag: 'mock-etag',
                versionId: 'mock-version-id',
            };
        });
        jest
            .spyOn(minioService, 'downloadArquivo')
            .mockImplementation(async (nomeArquivo) => {
            return Buffer.from('Conteúdo mockado do arquivo');
        });
        jest
            .spyOn(minioService, 'removerArquivo')
            .mockImplementation(async (nomeArquivo) => {
            return true;
        });
    });
    afterAll(async () => {
        // Remover arquivo temporário
        if (fs.existsSync(testFilePath)) {
            fs.unlinkSync(testFilePath);
        }
        await app.close();
    });
    describe('POST /api/documentos/upload', () => {
        it('deve fazer upload de um documento não sensível', async () => {
            // Act
            const response = await request(app.getHttpServer())
                .post('/api/documentos/upload')
                .set('Authorization', `Bearer ${authToken}`)
                .attach('arquivo', testFilePath)
                .field('nome', 'Documento de Teste')
                .field('tipo', 'contrato')
                .field('sensivel', 'false')
                .expect(201);
            // Assert
            expect(response.body).toHaveProperty('id');
            expect(response.body.nome).toBe('Documento de Teste');
            expect(response.body.tipo).toBe('contrato');
            expect(response.body.sensivel).toBe(false);
            expect(response.body.hash).toBeDefined();
            expect(response.body.tamanho).toBeGreaterThan(0);
            expect(response.body.usuario_id).toBe('test-user-id');
            // Verificar se o documento foi salvo no repositório
            const savedDoc = await documentoRepository.findOne({
                where: { id: response.body.id },
            });
            expect(savedDoc).toBeDefined();
        });
        it('deve fazer upload de um documento sensível com criptografia', async () => {
            // Espiar o CriptografiaService para verificar se a criptografia é chamada
            const spyCriptografar = jest.spyOn(criptografiaService, 'cryptografarBuffer');
            // Act
            const response = await request(app.getHttpServer())
                .post('/api/documentos/upload')
                .set('Authorization', `Bearer ${authToken}`)
                .attach('arquivo', testFilePath)
                .field('nome', 'Documento Sensível')
                .field('tipo', 'pessoal')
                .field('sensivel', 'true')
                .expect(201);
            // Assert
            expect(response.body).toHaveProperty('id');
            expect(response.body.nome).toBe('Documento Sensível');
            expect(response.body.tipo).toBe('pessoal');
            expect(response.body.sensivel).toBe(true);
            expect(response.body.criptografado).toBe(true);
            expect(response.body.iv).toBeDefined();
            expect(response.body.auth_tag).toBeDefined();
            // Verificar se a criptografia foi chamada
            expect(spyCriptografar).toHaveBeenCalled();
        });
        it('deve validar os campos obrigatórios', async () => {
            // Act & Assert
            await request(app.getHttpServer())
                .post('/api/documentos/upload')
                .set('Authorization', `Bearer ${authToken}`)
                .attach('arquivo', testFilePath)
                // Faltando campo nome, que é obrigatório
                .field('tipo', 'contrato')
                .expect(400);
        });
        it('deve requerer autenticação', async () => {
            // Act & Assert
            await request(app.getHttpServer())
                .post('/api/documentos/upload')
                .attach('arquivo', testFilePath)
                .field('nome', 'Documento de Teste')
                .field('tipo', 'contrato')
                .expect(401);
        });
    });
    describe('GET /api/documentos', () => {
        it('deve listar documentos paginados', async () => {
            // Arrange
            const documentos = [];
            for (let i = 0; i < 5; i++) {
                documentos.push(documentoRepository.create({
                    nome: `Documento ${i}`,
                    tipo: 'contrato',
                    caminho: `documentos/doc-${i}.pdf`,
                    mime_type: 'application/pdf',
                    tamanho: 1024,
                    hash: crypto.randomBytes(32).toString('hex'),
                    sensivel: false,
                    criptografado: false,
                    usuario_id: 'test-user-id',
                }));
            }
            await documentoRepository.save(documentos);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/documentos')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ page: 1, limit: 3 })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(3);
            expect(response.body.total).toBe(5);
            expect(response.body.page).toBe(1);
            expect(response.body.limit).toBe(3);
            expect(response.body.totalPages).toBe(2);
        });
        it('deve filtrar documentos por tipo', async () => {
            // Arrange
            const documentos = [
                documentoRepository.create({
                    nome: 'Documento Contrato',
                    tipo: 'contrato',
                    caminho: 'documentos/contrato.pdf',
                    mime_type: 'application/pdf',
                    tamanho: 1024,
                    hash: crypto.randomBytes(32).toString('hex'),
                    sensivel: false,
                    criptografado: false,
                    usuario_id: 'test-user-id',
                }),
                documentoRepository.create({
                    nome: 'Documento Pessoal',
                    tipo: 'pessoal',
                    caminho: 'documentos/pessoal.pdf',
                    mime_type: 'application/pdf',
                    tamanho: 1024,
                    hash: crypto.randomBytes(32).toString('hex'),
                    sensivel: true,
                    criptografado: true,
                    iv: Buffer.from('iv-mock').toString('base64'),
                    auth_tag: Buffer.from('auth-tag-mock').toString('base64'),
                    usuario_id: 'test-user-id',
                }),
            ];
            await documentoRepository.save(documentos);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/documentos')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ tipo: 'pessoal' })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(1);
            expect(response.body.data[0].tipo).toBe('pessoal');
        });
        it('deve filtrar documentos por sensibilidade', async () => {
            // Arrange
            const documentos = [
                documentoRepository.create({
                    nome: 'Documento Não Sensível',
                    tipo: 'contrato',
                    caminho: 'documentos/contrato.pdf',
                    mime_type: 'application/pdf',
                    tamanho: 1024,
                    hash: crypto.randomBytes(32).toString('hex'),
                    sensivel: false,
                    criptografado: false,
                    usuario_id: 'test-user-id',
                }),
                documentoRepository.create({
                    nome: 'Documento Sensível',
                    tipo: 'pessoal',
                    caminho: 'documentos/pessoal.pdf',
                    mime_type: 'application/pdf',
                    tamanho: 1024,
                    hash: crypto.randomBytes(32).toString('hex'),
                    sensivel: true,
                    criptografado: true,
                    iv: Buffer.from('iv-mock').toString('base64'),
                    auth_tag: Buffer.from('auth-tag-mock').toString('base64'),
                    usuario_id: 'test-user-id',
                }),
            ];
            await documentoRepository.save(documentos);
            // Act
            const response = await request(app.getHttpServer())
                .get('/api/documentos')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ sensivel: 'true' })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(1);
            expect(response.body.data[0].sensivel).toBe(true);
        });
    });
    describe('GET /api/documentos/:id', () => {
        it('deve retornar um documento específico pelo ID', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome: 'Documento para Busca',
                tipo: 'contrato',
                caminho: 'documentos/busca.pdf',
                mime_type: 'application/pdf',
                tamanho: 1024,
                hash: crypto.randomBytes(32).toString('hex'),
                sensivel: false,
                criptografado: false,
                usuario_id: 'test-user-id',
            });
            await documentoRepository.save(documento);
            // Act
            const response = await request(app.getHttpServer())
                .get(`/api/documentos/${documento.id}`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            expect(response.body.id).toBe(documento.id);
            expect(response.body.nome).toBe('Documento para Busca');
        });
        it('deve retornar 404 para ID inexistente', async () => {
            // Act & Assert
            await request(app.getHttpServer())
                .get('/api/documentos/id-inexistente')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(404);
        });
    });
    describe('GET /api/documentos/:id/download', () => {
        it('deve baixar um documento não sensível', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome: 'Documento para Download',
                tipo: 'contrato',
                caminho: 'documentos/download.pdf',
                mime_type: 'application/pdf',
                tamanho: 1024,
                hash: crypto.randomBytes(32).toString('hex'),
                sensivel: false,
                criptografado: false,
                usuario_id: 'test-user-id',
            });
            await documentoRepository.save(documento);
            // Act
            const response = await request(app.getHttpServer())
                .get(`/api/documentos/${documento.id}/download`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            expect(response.header['content-type']).toBe('application/pdf');
            expect(response.header['content-disposition']).toContain('attachment');
            expect(response.header['content-disposition']).toContain('download.pdf');
            expect(response.body).toBeInstanceOf(Buffer);
        });
        it('deve baixar e descriptografar um documento sensível', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome: 'Documento Sensível para Download',
                tipo: 'pessoal',
                caminho: 'documentos/sensivel.pdf',
                mime_type: 'application/pdf',
                tamanho: 1024,
                hash: crypto.randomBytes(32).toString('hex'),
                sensivel: true,
                criptografado: true,
                iv: Buffer.from('iv-mock').toString('base64'),
                auth_tag: Buffer.from('auth-tag-mock').toString('base64'),
                usuario_id: 'test-user-id',
            });
            await documentoRepository.save(documento);
            // Espiar o CriptografiaService para verificar se a descriptografia é chamada
            const spyDescriptografar = jest
                .spyOn(criptografiaService, 'descriptografarBuffer')
                .mockImplementation((dados, iv, authTag) => {
                return Buffer.from('Conteúdo descriptografado mockado');
            });
            // Act
            const response = await request(app.getHttpServer())
                .get(`/api/documentos/${documento.id}/download`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            expect(response.header['content-type']).toBe('application/pdf');
            expect(response.body).toBeInstanceOf(Buffer);
            expect(spyDescriptografar).toHaveBeenCalled();
        });
        it('deve requerer autenticação para download', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome: 'Documento para Download',
                tipo: 'contrato',
                caminho: 'documentos/download.pdf',
                mime_type: 'application/pdf',
                tamanho: 1024,
                hash: crypto.randomBytes(32).toString('hex'),
                sensivel: false,
                criptografado: false,
                usuario_id: 'test-user-id',
            });
            await documentoRepository.save(documento);
            // Act & Assert
            await request(app.getHttpServer())
                .get(`/api/documentos/${documento.id}/download`)
                .expect(401);
        });
    });
    describe('DELETE /api/documentos/:id', () => {
        it('deve excluir um documento', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome: 'Documento para Exclusão',
                tipo: 'contrato',
                caminho: 'documentos/exclusao.pdf',
                mime_type: 'application/pdf',
                tamanho: 1024,
                hash: crypto.randomBytes(32).toString('hex'),
                sensivel: false,
                criptografado: false,
                usuario_id: 'test-user-id',
            });
            await documentoRepository.save(documento);
            // Act
            await request(app.getHttpServer())
                .delete(`/api/documentos/${documento.id}`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            const deletedDoc = await documentoRepository.findOne({
                where: { id: documento.id },
            });
            expect(deletedDoc).toBeNull();
            expect(minioService.removerArquivo).toHaveBeenCalledWith('documentos/exclusao.pdf');
        });
        it('deve retornar 404 ao tentar excluir documento inexistente', async () => {
            // Act & Assert
            await request(app.getHttpServer())
                .delete('/api/documentos/id-inexistente')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(404);
        });
        it('deve requerer autenticação para exclusão', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome: 'Documento para Exclusão',
                tipo: 'contrato',
                caminho: 'documentos/exclusao.pdf',
                mime_type: 'application/pdf',
                tamanho: 1024,
                hash: crypto.randomBytes(32).toString('hex'),
                sensivel: false,
                criptografado: false,
                usuario_id: 'test-user-id',
            });
            await documentoRepository.save(documento);
            // Act & Assert
            await request(app.getHttpServer())
                .delete(`/api/documentos/${documento.id}`)
                .expect(401);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,