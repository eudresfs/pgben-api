da79d4e87e662ac9ce50bde27e796800
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f, _g, _h;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosFuneral = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const solicitacao_entity_1 = require("./solicitacao.entity");
const enums_1 = require("../enums");
/**
 * Entidade para armazenar dados específicos do cidadão para Auxílio Funeral
 *
 * Armazena informações específicas necessárias para a solicitação do benefício
 * de Auxílio Funeral, como dados do falecido, tipo de urna, etc.
 */
let DadosFuneral = class DadosFuneral {
    id;
    solicitacao_id;
    solicitacao;
    nome_completo_falecido;
    data_obito;
    local_obito;
    data_autorizacao;
    grau_parentesco_requerente;
    tipo_urna_necessaria;
    observacoes_especiais;
    numero_certidao_obito;
    cartorio_emissor;
    created_at;
    updated_at;
    removed_at;
    // Getters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se é parente de primeiro grau
     */
    isParentePrimeiroGrau() {
        const primeiroGrau = [
            enums_1.ParentescoEnum.CONJUGE,
            enums_1.ParentescoEnum.FILHO,
            enums_1.ParentescoEnum.PAI,
            enums_1.ParentescoEnum.MAE,
        ];
        return primeiroGrau.includes(this.grau_parentesco_requerente);
    }
    /**
     * Verifica se é parente de segundo grau
     */
    isParenteSegundoGrau() {
        const segundoGrau = [
            enums_1.ParentescoEnum.IRMAO,
            enums_1.ParentescoEnum.AVO,
            enums_1.ParentescoEnum.NETO
        ];
        return segundoGrau.includes(this.grau_parentesco_requerente);
    }
    /**
     * Calcula dias entre óbito e solicitação
     */
    calcularDiasAposObito() {
        const hoje = new Date();
        const dataObito = new Date(this.data_obito);
        const diffTime = Math.abs(hoje.getTime() - dataObito.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se está no prazo para solicitação
     */
    estaNoPrazoSolicitacao(prazoMaximoDias) {
        return this.calcularDiasAposObito() <= prazoMaximoDias;
    }
    /**
     * Verifica se é caso de urgência (óbito recente)
     */
    isCasoUrgencia() {
        return this.calcularDiasAposObito() <= 3;
    }
    /**
     * Determina prioridade baseada no grau de parentesco
     */
    calcularPrioridadeParentesco() {
        if (this.isParentePrimeiroGrau())
            return 100;
        if (this.isParenteSegundoGrau())
            return 80;
        return 60;
    }
    /**
     * Verifica se precisa de urna especial
     */
    precisaUrnaEspecial() {
        return [
            enums_1.TipoUrnaEnum.INFANTIL,
            enums_1.TipoUrnaEnum.ESPECIAL,
            enums_1.TipoUrnaEnum.OBESO,
        ].includes(this.tipo_urna_necessaria);
    }
    /**
     * Valida se os dados estão completos para submissão
     */
    validarDadosCompletos() {
        const erros = [];
        if (!this.nome_completo_falecido || this.nome_completo_falecido.trim().length === 0) {
            erros.push('Nome completo do falecido é obrigatório');
        }
        if (!this.data_obito) {
            erros.push('Data do óbito é obrigatória');
        }
        if (!this.local_obito || this.local_obito.trim().length === 0) {
            erros.push('Local do óbito é obrigatório');
        }
        if (!this.data_autorizacao) {
            erros.push('Data da autorização é obrigatória');
        }
        if (!this.grau_parentesco_requerente) {
            erros.push('Grau de parentesco do requerente é obrigatório');
        }
        if (!this.tipo_urna_necessaria) {
            erros.push('Tipo de urna necessária é obrigatório');
        }
        // Validação de datas
        if (this.data_obito && this.data_autorizacao) {
            const dataObito = new Date(this.data_obito);
            const dataAutorizacao = new Date(this.data_autorizacao);
            if (dataObito > dataAutorizacao) {
                erros.push('Data da autorização não pode ser anterior à data do óbito');
            }
        }
        return {
            valido: erros.length === 0,
            erros
        };
    }
};
exports.DadosFuneral = DadosFuneral;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], DadosFuneral.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da solicitação é obrigatório' }),
    __metadata("design:type", String)
], DadosFuneral.prototype, "solicitacao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => solicitacao_entity_1.Solicitacao, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'solicitacao_id' }),
    __metadata("design:type", typeof (_a = typeof solicitacao_entity_1.Solicitacao !== "undefined" && solicitacao_entity_1.Solicitacao) === "function" ? _a : Object)
], DadosFuneral.prototype, "solicitacao", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome completo do falecido é obrigatório' }),
    __metadata("design:type", String)
], DadosFuneral.prototype, "nome_completo_falecido", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'date' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Data do óbito é obrigatória' }),
    (0, class_validator_1.IsDateString)({}, { message: 'Data do óbito deve ser uma data válida' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], DadosFuneral.prototype, "data_obito", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Local do óbito é obrigatório' }),
    __metadata("design:type", String)
], DadosFuneral.prototype, "local_obito", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'date' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Data da autorização é obrigatória' }),
    (0, class_validator_1.IsDateString)({}, { message: 'Data da autorização deve ser uma data válida' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], DadosFuneral.prototype, "data_autorizacao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.ParentescoEnum,
        enumName: 'grau_parentesco',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Grau de parentesco é obrigatório' }),
    (0, class_validator_1.IsEnum)(enums_1.ParentescoEnum, { message: 'Grau de parentesco inválido' }),
    __metadata("design:type", typeof (_d = typeof enums_1.ParentescoEnum !== "undefined" && enums_1.ParentescoEnum) === "function" ? _d : Object)
], DadosFuneral.prototype, "grau_parentesco_requerente", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.TipoUrnaEnum,
        enumName: 'tipo_urna',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de urna é obrigatório' }),
    (0, class_validator_1.IsEnum)(enums_1.TipoUrnaEnum, { message: 'Tipo de urna inválido' }),
    __metadata("design:type", typeof (_e = typeof enums_1.TipoUrnaEnum !== "undefined" && enums_1.TipoUrnaEnum) === "function" ? _e : Object)
], DadosFuneral.prototype, "tipo_urna_necessaria", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosFuneral.prototype, "observacoes_especiais", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosFuneral.prototype, "numero_certidao_obito", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], DadosFuneral.prototype, "cartorio_emissor", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], DadosFuneral.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object)
], DadosFuneral.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_h = typeof Date !== "undefined" && Date) === "function" ? _h : Object)
], DadosFuneral.prototype, "removed_at", void 0);
exports.DadosFuneral = DadosFuneral = __decorate([
    (0, typeorm_1.Entity)('dados_funeral'),
    (0, typeorm_1.Index)(['solicitacao_id'], { unique: true })
], DadosFuneral);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,