{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logger\\logger.service.ts","mappings":";;;;;;;;;;;;AAAA,2CAAmD;AACnD,qCAA2D;AAKpD,IAAM,SAAS,GAAf,MAAM,SAAS;IACZ,OAAO,CAAU;IACjB,MAAM,CAAS;IAEhB,UAAU,CAAC,OAAe;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED;QACE,IAAI,CAAC,MAAM,GAAG,IAAA,sBAAY,EAAC;YACzB,UAAU,EAAE,CAAC,IAAI,oBAAU,CAAC,OAAO,EAAE,CAAC;SACvC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CACH,GAAmB,EACnB,OAAe,EACf,IAA0B;QAE1B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACvB,OAAO;YACP,WAAW,EAAE,IAAI,CAAC,OAAO;YACzB,GAAG;YACH,SAAS;YACT,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;IAED,IAAI,CACF,GAAmB,EACnB,OAAe,EACf,IAA0B;QAE1B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACtB,OAAO;YACP,WAAW,EAAE,IAAI,CAAC,OAAO;YACzB,GAAG;YACH,SAAS;YACT,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CACH,GAAmB,EACnB,OAAe,EACf,IAA0B;QAE1B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACvB,OAAO;YACP,WAAW,EAAE,IAAI,CAAC,OAAO;YACzB,GAAG;YACH,SAAS;YACT,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CACL,GAAmB,EACnB,OAAe,EACf,IAA0B;QAE1B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YACzB,OAAO;YACP,WAAW,EAAE,IAAI,CAAC,OAAO;YACzB,GAAG;YACH,SAAS;YACT,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;IAED,GAAG,CACD,GAAmB,EACnB,OAAe,EACf,IAA0B;QAE1B,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAE3C,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACtB,OAAO;YACP,WAAW,EAAE,IAAI,CAAC,OAAO;YACzB,GAAG;YACH,SAAS;YACT,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AA7FY,8BAAS;oBAAT,SAAS;IADrB,IAAA,mBAAU,EAAC,EAAE,KAAK,EAAE,cAAK,CAAC,SAAS,EAAE,CAAC;;GAC1B,SAAS,CA6FrB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logger\\logger.service.ts"],"sourcesContent":["import { Injectable, Scope } from '@nestjs/common';\nimport { createLogger, Logger, transports } from 'winston';\n\nimport { RequestContext } from '../request-context/request-context.dto';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class AppLogger {\n  private context?: string;\n  private logger: Logger;\n\n  public setContext(context: string): void {\n    this.context = context;\n  }\n\n  constructor() {\n    this.logger = createLogger({\n      transports: [new transports.Console()],\n    });\n  }\n\n  error(\n    ctx: RequestContext,\n    message: string,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    return this.logger.error({\n      message,\n      contextName: this.context,\n      ctx,\n      timestamp,\n      ...meta,\n    });\n  }\n\n  warn(\n    ctx: RequestContext,\n    message: string,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    return this.logger.warn({\n      message,\n      contextName: this.context,\n      ctx,\n      timestamp,\n      ...meta,\n    });\n  }\n\n  debug(\n    ctx: RequestContext,\n    message: string,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    return this.logger.debug({\n      message,\n      contextName: this.context,\n      ctx,\n      timestamp,\n      ...meta,\n    });\n  }\n\n  verbose(\n    ctx: RequestContext,\n    message: string,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    return this.logger.verbose({\n      message,\n      contextName: this.context,\n      ctx,\n      timestamp,\n      ...meta,\n    });\n  }\n\n  log(\n    ctx: RequestContext,\n    message: string,\n    meta?: Record<string, any>,\n  ): Logger {\n    const timestamp = new Date().toISOString();\n\n    return this.logger.info({\n      message,\n      contextName: this.context,\n      ctx,\n      timestamp,\n      ...meta,\n    });\n  }\n}\n"],"version":3}