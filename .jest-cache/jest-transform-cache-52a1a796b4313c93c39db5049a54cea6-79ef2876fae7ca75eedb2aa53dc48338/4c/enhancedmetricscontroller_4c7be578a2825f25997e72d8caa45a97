542edbc3fa9ab5154297d24c00623da9
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancedMetricsController = void 0;
const common_1 = require("@nestjs/common");
const express_1 = require("express");
const enhanced_metrics_service_1 = require("./enhanced-metrics.service");
const public_decorator_1 = require("../../auth/decorators/public.decorator");
const swagger_1 = require("@nestjs/swagger");
/**
 * Controlador de Métricas Aprimorado
 *
 * Expõe endpoints para acesso às métricas avançadas da aplicação
 * no formato do Prometheus, com foco em segurança e compliance LGPD
 */
let EnhancedMetricsController = class EnhancedMetricsController {
    metricsService;
    constructor(metricsService) {
        this.metricsService = metricsService;
    }
    /**
     * Retorna todas as métricas no formato do Prometheus
     */
    async getMetrics(response) {
        const metrics = await this.metricsService.getMetrics();
        response.setHeader('Content-Type', 'text/plain');
        return response.send(metrics);
    }
    /**
     * Retorna métricas específicas de segurança e compliance LGPD
     */
    async getSecurityMetrics(response) {
        const metrics = await this.metricsService.getMetrics();
        // Filtrar apenas métricas de segurança
        const securityMetrics = metrics
            .split('\n')
            .filter((line) => line.includes('security_') ||
            line.includes('lgpd_') ||
            line.includes('authentication_') ||
            line.includes('authorization_'))
            .join('\n');
        response.setHeader('Content-Type', 'text/plain');
        return response.send(securityMetrics);
    }
    /**
     * Retorna métricas específicas de documentos
     */
    async getDocumentMetrics(response) {
        const metrics = await this.metricsService.getMetrics();
        // Filtrar apenas métricas de documentos
        const documentMetrics = metrics
            .split('\n')
            .filter((line) => line.includes('document_'))
            .join('\n');
        response.setHeader('Content-Type', 'text/plain');
        return response.send(documentMetrics);
    }
    /**
     * Retorna métricas específicas de sistema
     */
    async getSystemMetrics(response) {
        // Atualizar métricas de sistema antes de retornar
        this.metricsService.updateMemoryUsage();
        const metrics = await this.metricsService.getMetrics();
        // Filtrar apenas métricas de sistema
        const systemMetrics = metrics
            .split('\n')
            .filter((line) => line.includes('system_') ||
            line.includes('process_') ||
            line.includes('nodejs_'))
            .join('\n');
        response.setHeader('Content-Type', 'text/plain');
        return response.send(systemMetrics);
    }
    /**
     * Retorna métricas específicas de cache
     */
    async getCacheMetrics(response) {
        const metrics = await this.metricsService.getMetrics();
        // Filtrar apenas métricas de cache
        const cacheMetrics = metrics
            .split('\n')
            .filter((line) => line.includes('cache_'))
            .join('\n');
        response.setHeader('Content-Type', 'text/plain');
        return response.send(cacheMetrics);
    }
};
exports.EnhancedMetricsController = EnhancedMetricsController;
__decorate([
    (0, common_1.Get)(),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Obter métricas da aplicação',
        description: 'Retorna todas as métricas da aplicação no formato do Prometheus',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas retornadas com sucesso no formato do Prometheus',
    }),
    __param(0, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], EnhancedMetricsController.prototype, "getMetrics", null);
__decorate([
    (0, common_1.Get)('security'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Obter métricas de segurança',
        description: 'Retorna métricas relacionadas à segurança e compliance LGPD',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas de segurança retornadas com sucesso',
    }),
    __param(0, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], EnhancedMetricsController.prototype, "getSecurityMetrics", null);
__decorate([
    (0, common_1.Get)('documents'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Obter métricas de documentos',
        description: 'Retorna métricas relacionadas a operações com documentos',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas de documentos retornadas com sucesso',
    }),
    __param(0, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_d = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], EnhancedMetricsController.prototype, "getDocumentMetrics", null);
__decorate([
    (0, common_1.Get)('system'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Obter métricas de sistema',
        description: 'Retorna métricas relacionadas ao sistema (memória, CPU)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas de sistema retornadas com sucesso',
    }),
    __param(0, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], EnhancedMetricsController.prototype, "getSystemMetrics", null);
__decorate([
    (0, common_1.Get)('cache'),
    (0, public_decorator_1.Public)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Obter métricas de cache',
        description: 'Retorna métricas relacionadas ao cache (Redis ou em memória)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Métricas de cache retornadas com sucesso',
    }),
    __param(0, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_f = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _f : Object]),
    __metadata("design:returntype", Promise)
], EnhancedMetricsController.prototype, "getCacheMetrics", null);
exports.EnhancedMetricsController = EnhancedMetricsController = __decorate([
    (0, swagger_1.ApiTags)('Métricas e Dashboard'),
    (0, common_1.Controller)('monitoramento/metricas'),
    __metadata("design:paramtypes", [typeof (_a = typeof enhanced_metrics_service_1.EnhancedMetricsService !== "undefined" && enhanced_metrics_service_1.EnhancedMetricsService) === "function" ? _a : Object])
], EnhancedMetricsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,