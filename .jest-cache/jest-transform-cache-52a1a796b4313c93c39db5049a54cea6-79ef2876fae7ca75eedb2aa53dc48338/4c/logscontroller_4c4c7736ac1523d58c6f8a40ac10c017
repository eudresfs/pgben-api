3e59a288abf8b454529742c27391cda4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsController = void 0;
const common_1 = require("@nestjs/common");
const express_1 = require("express");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const logs_service_1 = require("../services/logs.service");
const logs_filter_dto_1 = require("../dto/logs-filter.dto");
const log_response_dto_1 = require("../dto/log-response.dto");
/**
 * Controlador para gerenciamento de logs de auditoria
 */
let LogsController = class LogsController {
    logsService;
    constructor(logsService) {
        this.logsService = logsService;
    }
    /**
     * Lista logs com filtros e paginação
     */
    async findAll(filter) {
        return this.logsService.findAll(filter);
    }
    /**
     * Obtém detalhes de um log específico
     */
    async findOne(id) {
        return this.logsService.findById(id);
    }
    /**
     * Lista entidades disponíveis para filtro
     */
    async listarEntidades() {
        return this.logsService.listarEntidades();
    }
    /**
     * Lista módulos disponíveis para filtro
     */
    async listarModulos() {
        return this.logsService.listarModulos();
    }
    /**
     * Lista ações disponíveis para filtro
     */
    async listarAcoes() {
        return this.logsService.listarAcoes();
    }
    /**
     * Lista criticidades disponíveis para filtro
     */
    async listarCriticidades() {
        return this.logsService.listarCriticidades();
    }
    /**
     * Exporta logs para CSV
     */
    async exportarCsv(filter, res) {
        const buffer = await this.logsService.exportarCsv(filter);
        res.send(buffer);
    }
};
exports.LogsController = LogsController;
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: '*.*' }, {
        permissionName: 'log.ler',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar logs de auditoria' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Logs listados com sucesso',
        type: log_response_dto_1.LogResponseDto,
        isArray: true,
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        type: Number,
        description: 'Página atual',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        description: 'Itens por página',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'entidade',
        required: false,
        type: String,
        description: 'Filtro por entidade',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'entidade_id',
        required: false,
        type: String,
        description: 'Filtro por ID da entidade',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'usuario_id',
        required: false,
        type: String,
        description: 'Filtro por usuário',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'acao',
        required: false,
        type: String,
        description: 'Filtro por ação',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'modulo',
        required: false,
        type: String,
        description: 'Filtro por módulo',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'criticidade',
        required: false,
        enum: logs_filter_dto_1.CriticidadeLog,
        description: 'Filtro por criticidade',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'data_inicio',
        required: false,
        type: String,
        description: 'Data inicial (formato: YYYY-MM-DD)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'data_fim',
        required: false,
        type: String,
        description: 'Data final (formato: YYYY-MM-DD)',
    }),
    __param(0, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof logs_filter_dto_1.LogsFilterDto !== "undefined" && logs_filter_dto_1.LogsFilterDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], LogsController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: '*.*' }, {
        permissionName: 'log.ler',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Obter detalhes de um log' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Log encontrado com sucesso',
        type: log_response_dto_1.LogResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Log não encontrado' }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], LogsController.prototype, "findOne", null);
__decorate([
    (0, common_1.Get)('entidades/listar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'log.ler',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar entidades disponíveis para filtro' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Entidades listadas com sucesso',
        type: String,
        isArray: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LogsController.prototype, "listarEntidades", null);
__decorate([
    (0, common_1.Get)('modulos/listar'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: '*.*' }, {
        permissionName: 'log.ler',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar módulos disponíveis para filtro' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Módulos listados com sucesso',
        type: String,
        isArray: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LogsController.prototype, "listarModulos", null);
__decorate([
    (0, common_1.Get)('acoes/listar'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: '*.*' }, {
        permissionName: 'log.ler',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar ações disponíveis para filtro' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Ações listadas com sucesso',
        type: String,
        isArray: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LogsController.prototype, "listarAcoes", null);
__decorate([
    (0, common_1.Get)('criticidades/listar'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: '*.*' }, {
        permissionName: 'log.ler',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar criticidades disponíveis para filtro' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Criticidades listadas com sucesso',
        type: String,
        isArray: true,
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LogsController.prototype, "listarCriticidades", null);
__decorate([
    (0, common_1.Get)('exportar/csv'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: '*.*' }, {
        permissionName: 'log.exportar',
        scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Exportar logs para CSV' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Logs exportados com sucesso',
    }),
    (0, common_1.Header)('Content-Type', 'text/csv'),
    (0, common_1.Header)('Content-Disposition', 'attachment; filename=logs.csv'),
    __param(0, (0, common_1.Query)()),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof logs_filter_dto_1.LogsFilterDto !== "undefined" && logs_filter_dto_1.LogsFilterDto) === "function" ? _c : Object, typeof (_d = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], LogsController.prototype, "exportarCsv", null);
exports.LogsController = LogsController = __decorate([
    (0, swagger_1.ApiTags)('Logs'),
    (0, common_1.Controller)('logs'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof logs_service_1.LogsService !== "undefined" && logs_service_1.LogsService) === "function" ? _a : Object])
], LogsController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,