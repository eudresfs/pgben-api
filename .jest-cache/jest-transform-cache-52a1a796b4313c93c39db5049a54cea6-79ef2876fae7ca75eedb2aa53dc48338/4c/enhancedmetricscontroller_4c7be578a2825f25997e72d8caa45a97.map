{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\enhanced-metrics.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\enhanced-metrics.controller.ts"],"sourcesContent":["import { Controller, Get, Res } from '@nestjs/common';\nimport { Response } from 'express';\nimport { EnhancedMetricsService } from './enhanced-metrics.service';\nimport { Public } from '../../auth/decorators/public.decorator';\nimport { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';\n\n/**\n * Controlador de Métricas Aprimorado\n *\n * Expõe endpoints para acesso às métricas avançadas da aplicação\n * no formato do Prometheus, com foco em segurança e compliance LGPD\n */\n@ApiTags('Métricas e Dashboard')\n@Controller('monitoramento/metricas')\nexport class EnhancedMetricsController {\n  constructor(private readonly metricsService: EnhancedMetricsService) {}\n\n  /**\n   * Retorna todas as métricas no formato do Prometheus\n   */\n  @Get()\n  @Public()\n  @ApiOperation({\n    summary: 'Obter métricas da aplicação',\n    description:\n      'Retorna todas as métricas da aplicação no formato do Prometheus',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Métricas retornadas com sucesso no formato do Prometheus',\n  })\n  async getMetrics(@Res() response: Response) {\n    const metrics = await this.metricsService.getMetrics();\n    response.setHeader('Content-Type', 'text/plain');\n    return response.send(metrics);\n  }\n\n  /**\n   * Retorna métricas específicas de segurança e compliance LGPD\n   */\n  @Get('security')\n  @Public()\n  @ApiOperation({\n    summary: 'Obter métricas de segurança',\n    description: 'Retorna métricas relacionadas à segurança e compliance LGPD',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Métricas de segurança retornadas com sucesso',\n  })\n  async getSecurityMetrics(@Res() response: Response) {\n    const metrics = await this.metricsService.getMetrics();\n\n    // Filtrar apenas métricas de segurança\n    const securityMetrics = metrics\n      .split('\\n')\n      .filter(\n        (line) =>\n          line.includes('security_') ||\n          line.includes('lgpd_') ||\n          line.includes('authentication_') ||\n          line.includes('authorization_'),\n      )\n      .join('\\n');\n\n    response.setHeader('Content-Type', 'text/plain');\n    return response.send(securityMetrics);\n  }\n\n  /**\n   * Retorna métricas específicas de documentos\n   */\n  @Get('documents')\n  @Public()\n  @ApiOperation({\n    summary: 'Obter métricas de documentos',\n    description: 'Retorna métricas relacionadas a operações com documentos',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Métricas de documentos retornadas com sucesso',\n  })\n  async getDocumentMetrics(@Res() response: Response) {\n    const metrics = await this.metricsService.getMetrics();\n\n    // Filtrar apenas métricas de documentos\n    const documentMetrics = metrics\n      .split('\\n')\n      .filter((line) => line.includes('document_'))\n      .join('\\n');\n\n    response.setHeader('Content-Type', 'text/plain');\n    return response.send(documentMetrics);\n  }\n\n  /**\n   * Retorna métricas específicas de sistema\n   */\n  @Get('system')\n  @Public()\n  @ApiOperation({\n    summary: 'Obter métricas de sistema',\n    description: 'Retorna métricas relacionadas ao sistema (memória, CPU)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Métricas de sistema retornadas com sucesso',\n  })\n  async getSystemMetrics(@Res() response: Response) {\n    // Atualizar métricas de sistema antes de retornar\n    this.metricsService.updateMemoryUsage();\n\n    const metrics = await this.metricsService.getMetrics();\n\n    // Filtrar apenas métricas de sistema\n    const systemMetrics = metrics\n      .split('\\n')\n      .filter(\n        (line) =>\n          line.includes('system_') ||\n          line.includes('process_') ||\n          line.includes('nodejs_'),\n      )\n      .join('\\n');\n\n    response.setHeader('Content-Type', 'text/plain');\n    return response.send(systemMetrics);\n  }\n\n  /**\n   * Retorna métricas específicas de cache\n   */\n  @Get('cache')\n  @Public()\n  @ApiOperation({\n    summary: 'Obter métricas de cache',\n    description: 'Retorna métricas relacionadas ao cache (Redis ou em memória)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Métricas de cache retornadas com sucesso',\n  })\n  async getCacheMetrics(@Res() response: Response) {\n    const metrics = await this.metricsService.getMetrics();\n\n    // Filtrar apenas métricas de cache\n    const cacheMetrics = metrics\n      .split('\\n')\n      .filter((line) => line.includes('cache_'))\n      .join('\\n');\n\n    response.setHeader('Content-Type', 'text/plain');\n    return response.send(cacheMetrics);\n  }\n}\n"],"version":3}