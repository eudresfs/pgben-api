{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\tests\\configuracao.e2e.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAsD;AACtD,2CAAkE;AAClE,mDAAqC;AACrC,6CAAgD;AAChD,2CAA6D;AAC7D,gEAA4D;AAC5D,qCAAwC;AACxC,sEAAiE;AACjE,oEAA+D;AAC/D,wEAAmE;AAEnE;;;;;;GAMG;AACH,QAAQ,CAAC,qCAAqC,EAAE,GAAG,EAAE;IACnD,IAAI,GAAqB,CAAC;IAC1B,IAAI,SAAiB,CAAC;IAEtB,8CAA8C;IAC9C,MAAM,cAAc,GAAG;QACrB,KAAK,EAAE,iBAAiB;QACxB,KAAK,EAAE,gBAAgB;QACvB,IAAI,EAAE,uCAAiB,CAAC,MAAM;QAC9B,SAAS,EAAE,uBAAuB;QAClC,SAAS,EAAE,QAAQ;KACpB,CAAC;IAEF,6CAA6C;IAC7C,MAAM,aAAa,GAAG;QACpB,MAAM,EAAE,gBAAgB;QACxB,IAAI,EAAE,mBAAmB;QACzB,SAAS,EAAE,sBAAsB;QACjC,IAAI,EAAE,qCAAgB,CAAC,KAAK;QAC5B,QAAQ,EAAE,0CAA0C;KACrD,CAAC;IAEF,gEAAgE;IAChE,MAAM,eAAe,GAAG;QACtB,MAAM,EAAE,kBAAkB;QAC1B,IAAI,EAAE,qBAAqB;QAC3B,SAAS,EAAE,0BAA0B;QACrC,IAAI,EAAE,yCAAkB,CAAC,KAAK;QAC9B,YAAY,EAAE;YACZ,IAAI,EAAE,gBAAgB;YACtB,IAAI,EAAE,GAAG;YACT,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,mBAAmB;SAC1B;QACD,WAAW,EAAE;YACX,IAAI,EAAE,eAAe;YACrB,QAAQ,EAAE,aAAa;SACxB;KACF,CAAC;IAEF,wCAAwC;IACxC,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,gEAAgE;QAChE,MAAM,aAAa,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAClE,OAAO,EAAE;gBACP,2BAA2B;gBAC3B,qBAAY,CAAC,OAAO,CAAC;oBACnB,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,WAAW;iBACzB,CAAC;gBAEF,wCAAwC;gBACxC,uBAAa,CAAC,YAAY,CAAC;oBACzB,OAAO,EAAE,CAAC,qBAAY,CAAC;oBACvB,UAAU,EAAE,CAAC,aAA4B,EAAE,EAAE,CAAC,CAAC;wBAC7C,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC;wBAC/C,IAAI,EAAE,aAAa,CAAC,GAAG,CAAS,SAAS,EAAE,IAAI,CAAC;wBAChD,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,CAAC;wBACtD,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,CAAC;wBACtD,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC;wBACxD,QAAQ,EAAE,CAAC,2BAA2B,CAAC;wBACvC,WAAW,EAAE,IAAI,EAAE,gCAAgC;qBACpD,CAAC;oBACF,MAAM,EAAE,CAAC,sBAAa,CAAC;iBACxB,CAAC;gBAEF,4CAA4C;gBAC5C,eAAS,CAAC,aAAa,CAAC;oBACtB,OAAO,EAAE,CAAC,qBAAY,CAAC;oBACvB,UAAU,EAAE,CAAC,aAA4B,EAAE,EAAE,CAAC,CAAC;wBAC7C,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC;wBACtD,WAAW,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;qBACjC,CAAC;oBACF,MAAM,EAAE,CAAC,sBAAa,CAAC;iBACxB,CAAC;gBAEF,uCAAuC;gBACvC,wCAAkB;aACnB;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,oBAAoB;QACpB,GAAG,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;QAE5C,0CAA0C;QAC1C,GAAG,CAAC,cAAc,CAChB,IAAI,uBAAc,CAAC;YACjB,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;YACf,oBAAoB,EAAE,IAAI;SAC3B,CAAC,CACH,CAAC;QAEF,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAEjB,uEAAuE;QACvE,MAAM,UAAU,GAAG,aAAa,CAAC,GAAG,CAAY,eAAS,CAAC,CAAC;QAC3D,SAAS,GAAG,UAAU,UAAU,CAAC,IAAI,CAAC;YACpC,GAAG,EAAE,sCAAsC;YAC3C,QAAQ,EAAE,OAAO;YACjB,KAAK,EAAE,CAAC,OAAO,CAAC;SACjB,CAAC,EAAE,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,iCAAiC;IACjC,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,mCAAmC;IACnC,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,oCAAoC;QACpC,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;aAC/B,MAAM,CAAC,4BAA4B,cAAc,CAAC,KAAK,EAAE,CAAC;aAC1D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;aAC/B,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAEnB,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;aAC/B,MAAM,CAAC,2BAA2B,aAAa,CAAC,MAAM,EAAE,CAAC;aACzD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;aAC/B,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAEnB,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;aAC/B,MAAM,CAAC,6BAA6B,eAAe,CAAC,MAAM,EAAE,CAAC;aAC7D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;aAC/B,KAAK,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,wDAAwD;IACxD,sCAAsC;IACtC,wDAAwD;IACxD,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,wBAAwB;YACxB,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACrD,IAAI,CAAC,0BAA0B,CAAC;iBAChC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,cAAc,CAAC;iBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAE5D,+BAA+B;YAC/B,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,4BAA4B,cAAc,CAAC,KAAK,EAAE,CAAC;iBACvD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAE7D,2BAA2B;YAC3B,MAAM,gBAAgB,GAAG;gBACvB,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,sBAAsB;aAClC,CAAC;YAEF,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACzD,GAAG,CAAC,4BAA4B,cAAc,CAAC,KAAK,EAAE,CAAC;iBACvD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;YAClE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAE1E,yBAAyB;YACzB,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,MAAM,CAAC,4BAA4B,cAAc,CAAC,KAAK,EAAE,CAAC;iBAC1D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,4CAA4C;YAC5C,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,4BAA4B,cAAc,CAAC,KAAK,EAAE,CAAC;iBACvD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,wBAAwB;YACxB,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,0BAA0B,CAAC;iBAChC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,cAAc,CAAC;iBACpB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,0BAA0B;YAC1B,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,sCAAsC,cAAc,CAAC,SAAS,EAAE,CAAC;iBACrE,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,wDAAwD;IACxD,qCAAqC;IACrC,wDAAwD;IACxD,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACnE,uBAAuB;YACvB,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACrD,IAAI,CAAC,yBAAyB,CAAC;iBAC/B,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,aAAa,CAAC;iBACnB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAE7D,8BAA8B;YAC9B,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,2BAA2B,aAAa,CAAC,MAAM,EAAE,CAAC;iBACtD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC9D,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAE1D,0BAA0B;YAC1B,MAAM,gBAAgB,GAAG;gBACvB,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,sBAAsB;gBACjC,QAAQ,EAAE,0DAA0D;aACrE,CAAC;YAEF,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACzD,GAAG,CAAC,2BAA2B,aAAa,CAAC,MAAM,EAAE,CAAC;iBACtD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAChE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAC1E,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAExE,qCAAqC;YACrC,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,IAAI,CAAC,gCAAgC,CAAC;iBACtC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC;gBACJ,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;gBACnC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;aACxB,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;YAElG,gCAAgC;YAChC,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,2BAA2B,aAAa,CAAC,MAAM,SAAS,CAAC;iBAC7D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE9C,wBAAwB;YACxB,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,MAAM,CAAC,2BAA2B,aAAa,CAAC,MAAM,EAAE,CAAC;iBACzD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,2CAA2C;YAC3C,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,2BAA2B,aAAa,CAAC,MAAM,EAAE,CAAC;iBACtD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,uBAAuB;YACvB,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,yBAAyB,CAAC;iBAC/B,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,aAAa,CAAC;iBACnB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,qBAAqB;YACrB,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,gCAAgC,aAAa,CAAC,IAAI,EAAE,CAAC;iBACzD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,wDAAwD;IACxD,uCAAuC;IACvC,wDAAwD;IACxD,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;YACtF,0CAA0C;YAC1C,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACrD,GAAG,CAAC,6BAA6B,eAAe,CAAC,MAAM,EAAE,CAAC;iBAC1D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,eAAe,CAAC;iBACrB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAE/D,kCAAkC;YAClC,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,6BAA6B,eAAe,CAAC,MAAM,EAAE,CAAC;iBAC1D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YAChE,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC5D,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;YAC/E,sDAAsD;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,aAAa,EAAE,CAAC;YAExD,8BAA8B;YAC9B,MAAM,gBAAgB,GAAG;gBACvB,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,sBAAsB;gBACjC,YAAY,EAAE;oBACZ,GAAG,eAAe,CAAC,YAAY;oBAC/B,IAAI,EAAE,GAAG;oBACT,MAAM,EAAE,IAAI;iBACb;aACF,CAAC;YAEF,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACzD,GAAG,CAAC,6BAA6B,eAAe,CAAC,MAAM,EAAE,CAAC;iBAC1D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,gBAAgB,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAChE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAC1E,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAEnF,oCAAoC;YACpC,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,6BAA6B,eAAe,CAAC,MAAM,SAAS,CAAC;iBACjE,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAE9C,4BAA4B;YAC5B,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,MAAM,CAAC,6BAA6B,eAAe,CAAC,MAAM,EAAE,CAAC;iBAC7D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,+CAA+C;YAC/C,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,6BAA6B,eAAe,CAAC,MAAM,EAAE,CAAC;iBAC1D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,0CAA0C;YAC1C,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,6BAA6B,eAAe,CAAC,MAAM,EAAE,CAAC;iBAC1D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,eAAe,CAAC;iBACrB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,qBAAqB;YACrB,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,GAAG,CAAC,kCAAkC,eAAe,CAAC,IAAI,EAAE,CAAC;iBAC7D,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,6BAA6B;YAC7B,+EAA+E;YAC/E,uDAAuD;YACvD,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACtD,IAAI,CAAC,kCAAkC,CAAC;iBACxC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC;gBACJ,IAAI,EAAE,yCAAkB,CAAC,KAAK;gBAC9B,YAAY,EAAE,eAAe,CAAC,YAAY;gBAC1C,WAAW,EAAE,eAAe,CAAC,WAAW;gBACxC,UAAU,EAAE;oBACV,IAAI,EAAE,mBAAmB;oBACzB,OAAO,EAAE,qBAAqB;oBAC9B,QAAQ,EAAE,+BAA+B;iBAC1C;aACF,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,gGAAgG;YAChG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,wDAAwD;IACxD,mCAAmC;IACnC,wDAAwD;IACxD,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,2BAA2B;YAC3B,MAAM,qBAAqB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC7D,GAAG,CAAC,8BAA8B,CAAC;iBACnC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,uBAAuB;YACvB,MAAM,kBAAkB,GAAG;gBACzB,oBAAoB,EAAE,QAAQ,EAAE,OAAO;gBACvC,oBAAoB,EAAE,EAAE;gBACxB,mBAAmB,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC;gBAClE,mBAAmB,EAAE,EAAE;aACxB,CAAC;YAEF,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACzD,GAAG,CAAC,8BAA8B,CAAC;iBACnC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,kBAAkB,CAAC;iBACxB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;YAClG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;YAClG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC3H,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,CAAC;YAEhG,gDAAgD;YAChD,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACzD,GAAG,CAAC,8BAA8B,CAAC;iBACnC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,mCAAmC;YACnC,MAAM,mBAAmB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC3D,GAAG,CAAC,sCAAsC,CAAC;iBAC3C,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACnE,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAExD,qBAAqB;YACrB,MAAM,eAAe,GAAG;gBACtB,IAAI,EAAE,EAAE;aACT,CAAC;YAEF,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACzD,GAAG,CAAC,sCAAsC,CAAC;iBAC3C,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,IAAI,CAAC,eAAe,CAAC;iBACrB,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YACjE,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;YAE5E,0CAA0C;YAC1C,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBACzD,GAAG,CAAC,sCAAsC,CAAC;iBAC3C,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,yCAAyC;YACzC,MAAM,kBAAkB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC1D,GAAG,CAAC,kDAAkD,CAAC;iBACvD,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC;iBAC/B,MAAM,CAAC,GAAG,CAAC,CAAC;YAEf,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;YAClE,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC;YAC7E,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YAE7D,yCAAyC;YACzC,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChE,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACxB,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\tests\\configuracao.e2e.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ConfiguracaoModule } from '../configuracao.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ParametroTipoEnum } from '../enums/parametro-tipo.enum';\nimport { TemplateTipoEnum } from '../enums/template-tipo.enum';\nimport { IntegracaoTipoEnum } from '../enums/integracao-tipo.enum';\n\n/**\n * Teste de integração do Módulo de Configuração\n * \n * Este teste realiza a verificação completa do fluxo de operações\n * CRUD para os diversos serviços do módulo, garantindo que todas\n * as funcionalidades estão operando corretamente.\n */\ndescribe('Configuração - Testes de Integração', () => {\n  let app: INestApplication;\n  let authToken: string;\n\n  // Dados de teste para criação de um parâmetro\n  const parametroTeste = {\n    chave: 'teste.parametro',\n    valor: 'Valor de teste',\n    tipo: ParametroTipoEnum.STRING,\n    descricao: 'Parâmetro para testes',\n    categoria: 'testes',\n  };\n\n  // Dados de teste para criação de um template\n  const templateTeste = {\n    codigo: 'teste-template',\n    nome: 'Template de Teste',\n    descricao: 'Template para testes',\n    tipo: TemplateTipoEnum.EMAIL,\n    conteudo: '<html><body>Olá, {{nome}}!</body></html>',\n  };\n\n  // Dados de teste para criação de uma configuração de integração\n  const integracaoTeste = {\n    codigo: 'teste-integracao',\n    nome: 'Integração de Teste',\n    descricao: 'Configuração para testes',\n    tipo: IntegracaoTipoEnum.EMAIL,\n    configuracao: {\n      host: 'smtp.teste.com',\n      port: 587,\n      secure: false,\n      from: 'teste@example.com',\n    },\n    credenciais: {\n      user: 'usuario_teste',\n      password: 'senha_teste',\n    },\n  };\n\n  // Configurar a aplicação para os testes\n  beforeAll(async () => {\n    // Criar o módulo de teste que inclui os componentes necessários\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        // Configuração do ambiente\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        \n        // Conexão com o banco de dados de teste\n        TypeOrmModule.forRootAsync({\n          imports: [ConfigModule],\n          useFactory: (configService: ConfigService) => ({\n            type: 'postgres',\n            host: configService.get('DB_HOST', 'localhost'),\n            port: configService.get<number>('DB_PORT', 5432),\n            username: configService.get('DB_USERNAME', 'postgres'),\n            password: configService.get('DB_PASSWORD', 'postgres'),\n            database: configService.get('DB_DATABASE', 'pgben_test'),\n            entities: ['dist/**/*.entity{.ts,.js}'],\n            synchronize: true, // Apenas para ambiente de teste\n          }),\n          inject: [ConfigService],\n        }),\n        \n        // Módulo JWT para simulação de autenticação\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: (configService: ConfigService) => ({\n            secret: configService.get('JWT_SECRET', 'test-secret'),\n            signOptions: { expiresIn: '1h' },\n          }),\n          inject: [ConfigService],\n        }),\n        \n        // Módulo de configuração a ser testado\n        ConfiguracaoModule,\n      ],\n    }).compile();\n\n    // Criar a aplicação\n    app = moduleFixture.createNestApplication();\n    \n    // Configurar pipes globais para validação\n    app.useGlobalPipes(\n      new ValidationPipe({\n        transform: true,\n        whitelist: true,\n        forbidNonWhitelisted: true,\n      }),\n    );\n    \n    await app.init();\n\n    // Criar um token JWT para os testes (simulando um usuário autenticado)\n    const jwtService = moduleFixture.get<JwtModule>(JwtModule);\n    authToken = `Bearer ${jwtService.sign({\n      sub: '00000000-0000-0000-0000-000000000001',\n      username: 'admin',\n      roles: ['admin'],\n    })}`;\n  });\n\n  // Limpar recursos após os testes\n  afterAll(async () => {\n    await app.close();\n  });\n\n  // Verificar a limpeza entre testes\n  afterEach(async () => {\n    // Remover os dados de teste criados\n    await request(app.getHttpServer())\n      .delete(`/configuracao/parametros/${parametroTeste.chave}`)\n      .set('Authorization', authToken)\n      .catch(() => {});\n\n    await request(app.getHttpServer())\n      .delete(`/configuracao/templates/${templateTeste.codigo}`)\n      .set('Authorization', authToken)\n      .catch(() => {});\n\n    await request(app.getHttpServer())\n      .delete(`/configuracao/integracoes/${integracaoTeste.codigo}`)\n      .set('Authorization', authToken)\n      .catch(() => {});\n  });\n\n  //------------------------------------------------------\n  // Testes para o serviço de Parâmetros\n  //------------------------------------------------------\n  describe('Serviço de Parâmetros', () => {\n    it('Deve criar, buscar, atualizar e remover um parâmetro', async () => {\n      // 1. Criar um parâmetro\n      const criarResponse = await request(app.getHttpServer())\n        .post('/configuracao/parametros')\n        .set('Authorization', authToken)\n        .send(parametroTeste)\n        .expect(201);\n\n      expect(criarResponse.body).toHaveProperty('id');\n      expect(criarResponse.body.chave).toBe(parametroTeste.chave);\n\n      // 2. Buscar o parâmetro criado\n      const buscarResponse = await request(app.getHttpServer())\n        .get(`/configuracao/parametros/${parametroTeste.chave}`)\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(buscarResponse.body.chave).toBe(parametroTeste.chave);\n      expect(buscarResponse.body.valor).toBe(parametroTeste.valor);\n\n      // 3. Atualizar o parâmetro\n      const dadosAtualizacao = {\n        valor: 'Valor atualizado',\n        descricao: 'Descrição atualizada',\n      };\n\n      const atualizarResponse = await request(app.getHttpServer())\n        .put(`/configuracao/parametros/${parametroTeste.chave}`)\n        .set('Authorization', authToken)\n        .send(dadosAtualizacao)\n        .expect(200);\n\n      expect(atualizarResponse.body.valor).toBe(dadosAtualizacao.valor);\n      expect(atualizarResponse.body.descricao).toBe(dadosAtualizacao.descricao);\n\n      // 4. Remover o parâmetro\n      await request(app.getHttpServer())\n        .delete(`/configuracao/parametros/${parametroTeste.chave}`)\n        .set('Authorization', authToken)\n        .expect(204);\n\n      // 5. Verificar que o parâmetro foi removido\n      await request(app.getHttpServer())\n        .get(`/configuracao/parametros/${parametroTeste.chave}`)\n        .set('Authorization', authToken)\n        .expect(404);\n    });\n\n    it('Deve buscar parâmetros por categoria', async () => {\n      // 1. Criar um parâmetro\n      await request(app.getHttpServer())\n        .post('/configuracao/parametros')\n        .set('Authorization', authToken)\n        .send(parametroTeste)\n        .expect(201);\n\n      // 2. Buscar por categoria\n      const buscarResponse = await request(app.getHttpServer())\n        .get(`/configuracao/parametros/categoria/${parametroTeste.categoria}`)\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(Array.isArray(buscarResponse.body)).toBe(true);\n      expect(buscarResponse.body.length).toBeGreaterThan(0);\n      expect(buscarResponse.body[0].categoria).toBe(parametroTeste.categoria);\n    });\n  });\n\n  //------------------------------------------------------\n  // Testes para o serviço de Templates\n  //------------------------------------------------------\n  describe('Serviço de Templates', () => {\n    it('Deve criar, buscar, atualizar e remover um template', async () => {\n      // 1. Criar um template\n      const criarResponse = await request(app.getHttpServer())\n        .post('/configuracao/templates')\n        .set('Authorization', authToken)\n        .send(templateTeste)\n        .expect(201);\n\n      expect(criarResponse.body).toHaveProperty('id');\n      expect(criarResponse.body.codigo).toBe(templateTeste.codigo);\n\n      // 2. Buscar o template criado\n      const buscarResponse = await request(app.getHttpServer())\n        .get(`/configuracao/templates/${templateTeste.codigo}`)\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(buscarResponse.body.codigo).toBe(templateTeste.codigo);\n      expect(buscarResponse.body.nome).toBe(templateTeste.nome);\n\n      // 3. Atualizar o template\n      const dadosAtualizacao = {\n        nome: 'Nome Atualizado',\n        descricao: 'Descrição atualizada',\n        conteudo: '<html><body>Conteúdo atualizado, {{nome}}!</body></html>',\n      };\n\n      const atualizarResponse = await request(app.getHttpServer())\n        .put(`/configuracao/templates/${templateTeste.codigo}`)\n        .set('Authorization', authToken)\n        .send(dadosAtualizacao)\n        .expect(200);\n\n      expect(atualizarResponse.body.nome).toBe(dadosAtualizacao.nome);\n      expect(atualizarResponse.body.descricao).toBe(dadosAtualizacao.descricao);\n      expect(atualizarResponse.body.conteudo).toBe(dadosAtualizacao.conteudo);\n\n      // 4. Testar renderização do template\n      const testarResponse = await request(app.getHttpServer())\n        .post('/configuracao/templates/testar')\n        .set('Authorization', authToken)\n        .send({\n          conteudo: dadosAtualizacao.conteudo,\n          dados: { nome: 'João' },\n        })\n        .expect(200);\n\n      expect(testarResponse.body.conteudo).toBe('<html><body>Conteúdo atualizado, João!</body></html>');\n\n      // 5. Alterar status do template\n      const statusResponse = await request(app.getHttpServer())\n        .put(`/configuracao/templates/${templateTeste.codigo}/status`)\n        .set('Authorization', authToken)\n        .send({ ativo: false })\n        .expect(200);\n\n      expect(statusResponse.body.ativo).toBe(false);\n\n      // 6. Remover o template\n      await request(app.getHttpServer())\n        .delete(`/configuracao/templates/${templateTeste.codigo}`)\n        .set('Authorization', authToken)\n        .expect(204);\n\n      // 7. Verificar que o template foi removido\n      await request(app.getHttpServer())\n        .get(`/configuracao/templates/${templateTeste.codigo}`)\n        .set('Authorization', authToken)\n        .expect(404);\n    });\n\n    it('Deve buscar templates por tipo', async () => {\n      // 1. Criar um template\n      await request(app.getHttpServer())\n        .post('/configuracao/templates')\n        .set('Authorization', authToken)\n        .send(templateTeste)\n        .expect(201);\n\n      // 2. Buscar por tipo\n      const buscarResponse = await request(app.getHttpServer())\n        .get(`/configuracao/templates/tipo/${templateTeste.tipo}`)\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(Array.isArray(buscarResponse.body)).toBe(true);\n      expect(buscarResponse.body.length).toBeGreaterThan(0);\n      expect(buscarResponse.body[0].tipo).toBe(templateTeste.tipo);\n    });\n  });\n\n  //------------------------------------------------------\n  // Testes para o serviço de Integrações\n  //------------------------------------------------------\n  describe('Serviço de Integrações', () => {\n    it('Deve criar, buscar, atualizar e remover uma configuração de integração', async () => {\n      // 1. Criar uma configuração de integração\n      const criarResponse = await request(app.getHttpServer())\n        .put(`/configuracao/integracoes/${integracaoTeste.codigo}`)\n        .set('Authorization', authToken)\n        .send(integracaoTeste)\n        .expect(200);\n\n      expect(criarResponse.body).toHaveProperty('id');\n      expect(criarResponse.body.codigo).toBe(integracaoTeste.codigo);\n\n      // 2. Buscar a configuração criada\n      const buscarResponse = await request(app.getHttpServer())\n        .get(`/configuracao/integracoes/${integracaoTeste.codigo}`)\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(buscarResponse.body.codigo).toBe(integracaoTeste.codigo);\n      expect(buscarResponse.body.nome).toBe(integracaoTeste.nome);\n      expect(buscarResponse.body.configuracao).toEqual(integracaoTeste.configuracao);\n      // As credenciais não devem ser retornadas na resposta\n      expect(buscarResponse.body.credenciais).toBeUndefined();\n\n      // 3. Atualizar a configuração\n      const dadosAtualizacao = {\n        nome: 'Nome Atualizado',\n        descricao: 'Descrição atualizada',\n        configuracao: {\n          ...integracaoTeste.configuracao,\n          port: 465,\n          secure: true,\n        },\n      };\n\n      const atualizarResponse = await request(app.getHttpServer())\n        .put(`/configuracao/integracoes/${integracaoTeste.codigo}`)\n        .set('Authorization', authToken)\n        .send(dadosAtualizacao)\n        .expect(200);\n\n      expect(atualizarResponse.body.nome).toBe(dadosAtualizacao.nome);\n      expect(atualizarResponse.body.descricao).toBe(dadosAtualizacao.descricao);\n      expect(atualizarResponse.body.configuracao).toEqual(dadosAtualizacao.configuracao);\n\n      // 4. Alterar status da configuração\n      const statusResponse = await request(app.getHttpServer())\n        .put(`/configuracao/integracoes/${integracaoTeste.codigo}/status`)\n        .set('Authorization', authToken)\n        .send({ ativo: false })\n        .expect(200);\n\n      expect(statusResponse.body.ativo).toBe(false);\n\n      // 5. Remover a configuração\n      await request(app.getHttpServer())\n        .delete(`/configuracao/integracoes/${integracaoTeste.codigo}`)\n        .set('Authorization', authToken)\n        .expect(204);\n\n      // 6. Verificar que a configuração foi removida\n      await request(app.getHttpServer())\n        .get(`/configuracao/integracoes/${integracaoTeste.codigo}`)\n        .set('Authorization', authToken)\n        .expect(404);\n    });\n\n    it('Deve buscar configurações de integração por tipo', async () => {\n      // 1. Criar uma configuração de integração\n      await request(app.getHttpServer())\n        .put(`/configuracao/integracoes/${integracaoTeste.codigo}`)\n        .set('Authorization', authToken)\n        .send(integracaoTeste)\n        .expect(200);\n\n      // 2. Buscar por tipo\n      const buscarResponse = await request(app.getHttpServer())\n        .get(`/configuracao/integracoes?tipo=${integracaoTeste.tipo}`)\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(Array.isArray(buscarResponse.body)).toBe(true);\n      expect(buscarResponse.body.length).toBeGreaterThan(0);\n      expect(buscarResponse.body[0].tipo).toBe(integracaoTeste.tipo);\n    });\n\n    it('Deve testar uma configuração de integração', async () => {\n      // 1. Testar uma configuração\n      // Note: Em um ambiente de teste real, você provavelmente usaria um mock para o\n      // serviço externo que é testado, como um servidor SMTP\n      const testarResponse = await request(app.getHttpServer())\n        .post('/configuracao/integracoes/testar')\n        .set('Authorization', authToken)\n        .send({\n          tipo: IntegracaoTipoEnum.EMAIL,\n          configuracao: integracaoTeste.configuracao,\n          credenciais: integracaoTeste.credenciais,\n          dadosTeste: {\n            para: 'teste@example.com',\n            assunto: 'Teste de Integração',\n            mensagem: 'Esta é uma mensagem de teste.',\n          },\n        })\n        .expect(200);\n\n      // Em um teste real, você verificaria o sucesso ou falha com base na resposta do serviço externo\n      expect(testarResponse.body).toHaveProperty('sucesso');\n      expect(testarResponse.body).toHaveProperty('mensagem');\n    });\n  });\n\n  //------------------------------------------------------\n  // Testes para o serviço de Limites\n  //------------------------------------------------------\n  describe('Serviço de Limites', () => {\n    it('Deve atualizar e buscar limites de upload', async () => {\n      // 1. Buscar limites atuais\n      const buscarLimitesResponse = await request(app.getHttpServer())\n        .get('/configuracao/limites/upload')\n        .set('Authorization', authToken)\n        .expect(200);\n\n      // 2. Atualizar limites\n      const limitesAtualizados = {\n        tamanhoMaximoArquivo: 20971520, // 20MB\n        numeroMaximoArquivos: 30,\n        extensoesPermitidas: ['jpg', 'jpeg', 'png', 'pdf', 'docx', 'xlsx'],\n        maximoPorRequisicao: 10,\n      };\n\n      const atualizarResponse = await request(app.getHttpServer())\n        .put('/configuracao/limites/upload')\n        .set('Authorization', authToken)\n        .send(limitesAtualizados)\n        .expect(200);\n\n      expect(atualizarResponse.body.tamanhoMaximoArquivo).toBe(limitesAtualizados.tamanhoMaximoArquivo);\n      expect(atualizarResponse.body.numeroMaximoArquivos).toBe(limitesAtualizados.numeroMaximoArquivos);\n      expect(atualizarResponse.body.extensoesPermitidas).toEqual(expect.arrayContaining(limitesAtualizados.extensoesPermitidas));\n      expect(atualizarResponse.body.maximoPorRequisicao).toBe(limitesAtualizados.maximoPorRequisicao);\n\n      // 3. Verificar que os limites foram atualizados\n      const verificarResponse = await request(app.getHttpServer())\n        .get('/configuracao/limites/upload')\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(verificarResponse.body).toEqual(atualizarResponse.body);\n    });\n\n    it('Deve atualizar e buscar prazos', async () => {\n      // 1. Buscar prazo atual de análise\n      const buscarPrazoResponse = await request(app.getHttpServer())\n        .get('/configuracao/limites/prazos/analise')\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(buscarPrazoResponse.body).toHaveProperty('tipo', 'analise');\n      expect(buscarPrazoResponse.body).toHaveProperty('dias');\n\n      // 2. Atualizar prazo\n      const prazoAtualizado = {\n        dias: 20,\n      };\n\n      const atualizarResponse = await request(app.getHttpServer())\n        .put('/configuracao/limites/prazos/analise')\n        .set('Authorization', authToken)\n        .send(prazoAtualizado)\n        .expect(200);\n\n      expect(atualizarResponse.body).toHaveProperty('tipo', 'analise');\n      expect(atualizarResponse.body).toHaveProperty('dias', prazoAtualizado.dias);\n\n      // 3. Verificar que o prazo foi atualizado\n      const verificarResponse = await request(app.getHttpServer())\n        .get('/configuracao/limites/prazos/analise')\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(verificarResponse.body).toEqual(atualizarResponse.body);\n\n      // 4. Buscar data limite baseada no prazo\n      const dataLimiteResponse = await request(app.getHttpServer())\n        .get('/configuracao/limites/prazos/analise/data-limite')\n        .set('Authorization', authToken)\n        .expect(200);\n\n      expect(dataLimiteResponse.body).toHaveProperty('tipo', 'analise');\n      expect(dataLimiteResponse.body).toHaveProperty('dias', prazoAtualizado.dias);\n      expect(dataLimiteResponse.body).toHaveProperty('dataLimite');\n      \n      // A data limite deve ser uma data futura\n      const dataLimite = new Date(dataLimiteResponse.body.dataLimite);\n      const hoje = new Date();\n      expect(dataLimite > hoje).toBe(true);\n    });\n  });\n});\n"],"version":3}