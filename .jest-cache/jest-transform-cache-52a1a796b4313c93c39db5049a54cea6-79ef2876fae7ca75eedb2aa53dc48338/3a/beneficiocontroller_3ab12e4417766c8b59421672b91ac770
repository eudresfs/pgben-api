010a3422801100318655a39d5340f83a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BeneficioController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const beneficio_service_1 = require("../services/beneficio.service");
const create_tipo_beneficio_dto_1 = require("../dto/create-tipo-beneficio.dto");
const update_tipo_beneficio_dto_1 = require("../dto/update-tipo-beneficio.dto");
const create_requisito_documento_dto_1 = require("../dto/create-requisito-documento.dto");
const configurar_fluxo_dto_1 = require("../dto/configurar-fluxo.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const entities_1 = require("../../../entities");
/**
 * Controlador de benefícios
 *
 * Responsável por gerenciar as rotas relacionadas a tipos de benefícios
 */
let BeneficioController = class BeneficioController {
    beneficioService;
    constructor(beneficioService) {
        this.beneficioService = beneficioService;
    }
    /**
     * Lista todos os tipos de benefícios
     */
    async findAll(page, limit, search, ativo) {
        return this.beneficioService.findAll({
            page: page ? +page : undefined,
            limit: limit ? +limit : undefined,
            search,
            ativo: ativo !== undefined ? ativo : undefined,
        });
    }
    /**
     * Obtém detalhes de um tipo de benefício específico
     */
    async findOne(id) {
        return this.beneficioService.findById(id);
    }
    /**
     * Cria um novo tipo de benefício
     */
    async create(createTipoBeneficioDto) {
        return this.beneficioService.create(createTipoBeneficioDto);
    }
    /**
     * Atualiza um tipo de benefício existente
     */
    async update(id, updateTipoBeneficioDto) {
        return this.beneficioService.update(id, updateTipoBeneficioDto);
    }
    /**
     * Lista requisitos documentais de um benefício
     */
    async findRequisitos(id) {
        return this.beneficioService.findRequisitosByBeneficioId(id);
    }
    /**
     * Adiciona requisito documental a um benefício
     */
    async addRequisito(id, createRequisitoDocumentoDto) {
        return this.beneficioService.addRequisito(id, createRequisitoDocumentoDto);
    }
    /**
     * Configura fluxo de aprovação de um benefício
     */
    async configurarFluxo(id, configurarFluxoDto) {
        return this.beneficioService.configurarFluxo(id, configurarFluxoDto);
    }
};
exports.BeneficioController = BeneficioController;
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'beneficio.listar',
        scopeType: entities_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Listar tipos de benefícios',
        description: 'Retorna uma lista paginada de todos os tipos de benefícios cadastrados no sistema.'
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de benefícios retornada com sucesso',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    (0, swagger_1.ApiQuery)({
        name: 'page',
        required: false,
        type: Number,
        description: 'Página atual',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limit',
        required: false,
        type: Number,
        description: 'Itens por página',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'search',
        required: false,
        type: String,
        description: 'Termo de busca (nome)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'ativo',
        required: false,
        type: Boolean,
        description: 'Filtro por status',
    }),
    __param(0, (0, common_1.Query)('page')),
    __param(1, (0, common_1.Query)('limit')),
    __param(2, (0, common_1.Query)('search')),
    __param(3, (0, common_1.Query)('ativo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number, String, Boolean]),
    __metadata("design:returntype", Promise)
], BeneficioController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.visualizar', scopeType: entities_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Obter detalhes de um benefício',
        description: 'Retorna os detalhes completos de um tipo de benefício específico.'
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Benefício encontrado com sucesso',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Benefício não encontrado',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], BeneficioController.prototype, "findOne", null);
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'beneficio.criar',
        scopeType: entities_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Criar novo tipo de benefício',
        description: 'Cria um novo tipo de benefício no sistema.'
    }),
    (0, swagger_1.ApiBody)({
        type: create_tipo_beneficio_dto_1.CreateTipoBeneficioDto,
        examples: {
            'Auxílio Emergencial': {
                value: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Benefício criado com sucesso',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Nome já em uso',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_tipo_beneficio_dto_1.CreateTipoBeneficioDto !== "undefined" && create_tipo_beneficio_dto_1.CreateTipoBeneficioDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], BeneficioController.prototype, "create", null);
__decorate([
    (0, common_1.Put)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'beneficio.editar',
        scopeType: entities_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualizar tipo de benefício existente',
        description: 'Atualiza os dados de um tipo de benefício existente.'
    }),
    (0, swagger_1.ApiBody)({
        type: update_tipo_beneficio_dto_1.UpdateTipoBeneficioDto,
        examples: {
            'Atualização de Benefício': {
                value: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Benefício atualizado com sucesso',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Benefício não encontrado',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    (0, swagger_1.ApiResponse)({
        status: 409,
        description: 'Nome já em uso',
        content: {
            'application/json': {
                example: ""
            }
        }
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof update_tipo_beneficio_dto_1.UpdateTipoBeneficioDto !== "undefined" && update_tipo_beneficio_dto_1.UpdateTipoBeneficioDto) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], BeneficioController.prototype, "update", null);
__decorate([
    (0, common_1.Get)(':id/requisitos'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'beneficio.requisito.listar',
        scopeType: entities_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar requisitos documentais' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de requisitos retornada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Benefício não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], BeneficioController.prototype, "findRequisitos", null);
__decorate([
    (0, common_1.Post)(':id/requisitos'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'beneficio.requisito.adicionar',
        scopeType: entities_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Adicionar requisito documental' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Requisito adicionado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Benefício não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_d = typeof create_requisito_documento_dto_1.CreateRequisitoDocumentoDto !== "undefined" && create_requisito_documento_dto_1.CreateRequisitoDocumentoDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], BeneficioController.prototype, "addRequisito", null);
__decorate([
    (0, common_1.Put)(':id/fluxo'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'beneficio.fluxo.configurar',
        scopeType: entities_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Configurar fluxo de aprovação' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Fluxo configurado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Benefício não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof configurar_fluxo_dto_1.ConfigurarFluxoDto !== "undefined" && configurar_fluxo_dto_1.ConfigurarFluxoDto) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], BeneficioController.prototype, "configurarFluxo", null);
exports.BeneficioController = BeneficioController = __decorate([
    (0, swagger_1.ApiTags)('Benefícios'),
    (0, common_1.Controller)('beneficio'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof beneficio_service_1.BeneficioService !== "undefined" && beneficio_service_1.BeneficioService) === "function" ? _a : Object])
], BeneficioController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,