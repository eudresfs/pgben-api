002a3e1e62228ae55e7cb9b3e330eba5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const status_transition_validator_1 = require("../../validators/status-transition-validator");
const status_pagamento_enum_1 = require("../../enums/status-pagamento.enum");
/**
 * Testes unitários para o validador de transições de status
 *
 * Verifica o funcionamento correto das validações de transições entre
 * os diferentes estados de um pagamento, garantindo que apenas transições
 * válidas sejam permitidas.
 *
 * @author Equipe PGBen
 */
describe('StatusTransitionValidator', () => {
    let validator;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [status_transition_validator_1.StatusTransitionValidator],
        }).compile();
        validator = module.get(status_transition_validator_1.StatusTransitionValidator);
    });
    describe('validarTransicao', () => {
        it('deve permitir transição de AGENDADO para LIBERADO', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO)).toBe(true);
        });
        it('deve permitir transição de AGENDADO para CANCELADO', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO)).toBe(true);
        });
        it('deve permitir transição de LIBERADO para CONFIRMADO', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO)).toBe(true);
        });
        it('deve permitir transição de LIBERADO para CANCELADO', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO)).toBe(true);
        });
        it('não deve permitir transição de CANCELADO para qualquer outro status', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO)).toBe(false);
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO)).toBe(false);
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO)).toBe(false);
        });
        it('não deve permitir transição de CONFIRMADO para qualquer outro status', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO, status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO)).toBe(false);
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO)).toBe(false);
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO)).toBe(false);
        });
        it('não deve permitir transição de AGENDADO para CONFIRMADO (pula etapa)', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO)).toBe(false);
        });
        it('deve retornar false para status inválidos', () => {
            expect(validator.validarTransicao('STATUS_INVALIDO', status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO)).toBe(false);
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, 'STATUS_INVALIDO')).toBe(false);
        });
        it('deve permitir manter o mesmo status', () => {
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO, status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO)).toBe(true);
            expect(validator.validarTransicao(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO)).toBe(true);
        });
    });
    describe('getProximosStatusPossiveis', () => {
        it('deve retornar os próximos status possíveis para AGENDADO', () => {
            const proximos = validator.getProximosStatusPossiveis(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            expect(proximos).toContain(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(proximos).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(proximos).not.toContain(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
        });
        it('deve retornar os próximos status possíveis para LIBERADO', () => {
            const proximos = validator.getProximosStatusPossiveis(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            expect(proximos).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(proximos).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(proximos).not.toContain(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
        });
        it('deve retornar array vazio para CONFIRMADO', () => {
            const proximos = validator.getProximosStatusPossiveis(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(proximos.length).toBe(0);
        });
        it('deve retornar array vazio para CANCELADO', () => {
            const proximos = validator.getProximosStatusPossiveis(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(proximos.length).toBe(0);
        });
        it('deve retornar array vazio para status inválido', () => {
            const proximos = validator.getProximosStatusPossiveis('STATUS_INVALIDO');
            expect(proximos.length).toBe(0);
        });
    });
    describe('getStatusInicial', () => {
        it('deve retornar AGENDADO como status inicial', () => {
            expect(validator.getStatusInicial()).toBe(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
        });
    });
    describe('getStatusFinais', () => {
        it('deve retornar CONFIRMADO e CANCELADO como status finais', () => {
            const statusFinais = validator.getStatusFinais();
            expect(statusFinais).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(statusFinais).toContain(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(statusFinais).not.toContain(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            expect(statusFinais).not.toContain(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
        });
    });
    describe('isStatusFinal', () => {
        it('deve identificar corretamente status finais', () => {
            expect(validator.isStatusFinal(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO)).toBe(true);
            expect(validator.isStatusFinal(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO)).toBe(true);
        });
        it('deve identificar corretamente status não finais', () => {
            expect(validator.isStatusFinal(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO)).toBe(false);
            expect(validator.isStatusFinal(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO)).toBe(false);
        });
        it('deve retornar false para status inválido', () => {
            expect(validator.isStatusFinal('STATUS_INVALIDO')).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,