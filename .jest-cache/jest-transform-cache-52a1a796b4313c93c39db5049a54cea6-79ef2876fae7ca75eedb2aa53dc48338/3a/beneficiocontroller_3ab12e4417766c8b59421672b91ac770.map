{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\controllers\\beneficio.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\controllers\\beneficio.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Put,\n  Param,\n  ParseUUIDPipe,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiQuery,\n  ApiBody,\n} from '@nestjs/swagger';\nimport { BeneficioService } from '../services/beneficio.service';\nimport { CreateTipoBeneficioDto } from '../dto/create-tipo-beneficio.dto';\nimport { UpdateTipoBeneficioDto } from '../dto/update-tipo-beneficio.dto';\nimport { CreateRequisitoDocumentoDto } from '../dto/create-requisito-documento.dto';\nimport { ConfigurarFluxoDto } from '../dto/configurar-fluxo.dto';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { ScopeType } from '../../../entities';\n\n/**\n * Controlador de benefícios\n *\n * Responsável por gerenciar as rotas relacionadas a tipos de benefícios\n */\n@ApiTags('Benefícios')\n@Controller('beneficio')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class BeneficioController {\n  constructor(private readonly beneficioService: BeneficioService) {}\n\n  /**\n   * Lista todos os tipos de benefícios\n   */\n  @Get()\n  @RequiresPermission({ \n    permissionName: 'beneficio.listar',  \n    scopeType: ScopeType.GLOBAL \n  })\n  @ApiOperation({ \n    summary: 'Listar tipos de benefícios',\n    description: 'Retorna uma lista paginada de todos os tipos de benefícios cadastrados no sistema.'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de benefícios retornada com sucesso',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description: 'Página atual',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'Itens por página',\n  })\n  @ApiQuery({\n    name: 'search',\n    required: false,\n    type: String,\n    description: 'Termo de busca (nome)',\n  })\n  @ApiQuery({\n    name: 'ativo',\n    required: false,\n    type: Boolean,\n    description: 'Filtro por status',\n  })\n  async findAll(\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n    @Query('search') search?: string,\n    @Query('ativo') ativo?: boolean,\n  ) {\n    return this.beneficioService.findAll({\n      page: page ? +page : undefined,\n      limit: limit ? +limit : undefined,\n      search,\n      ativo: ativo !== undefined ? ativo : undefined,\n    });\n  }\n\n  /**\n   * Obtém detalhes de um tipo de benefício específico\n   */\n  @Get(':id')\n  @RequiresPermission(\n  \n  { permissionName: 'beneficio.visualizar', scopeType: ScopeType.GLOBAL\n  })\n  @ApiOperation({ \n    summary: 'Obter detalhes de um benefício',\n    description: 'Retorna os detalhes completos de um tipo de benefício específico.'\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Benefício encontrado com sucesso',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 404, \n    description: 'Benefício não encontrado',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.beneficioService.findById(id);\n  }\n\n  /**\n   * Cria um novo tipo de benefício\n   */\n  @Post()\n  @RequiresPermission(\n    \n    {\n      permissionName: 'beneficio.criar',\n      scopeType: ScopeType.GLOBAL\n    }\n  )\n  @ApiOperation({ \n    summary: 'Criar novo tipo de benefício',\n    description: 'Cria um novo tipo de benefício no sistema.'\n  })\n  @ApiBody({\n    type: CreateTipoBeneficioDto,\n    examples: {\n      'Auxílio Emergencial': {\n        value: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 201, \n    description: 'Benefício criado com sucesso',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 400, \n    description: 'Dados inválidos',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 409, \n    description: 'Nome já em uso',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  async create(@Body() createTipoBeneficioDto: CreateTipoBeneficioDto) {\n    return this.beneficioService.create(createTipoBeneficioDto);\n  }\n\n  /**\n   * Atualiza um tipo de benefício existente\n   */\n  @Put(':id')\n  @RequiresPermission(\n    \n    {\n      permissionName: 'beneficio.editar',\n      scopeType: ScopeType.GLOBAL\n    }\n  )\n  @ApiOperation({ \n    summary: 'Atualizar tipo de benefício existente',\n    description: 'Atualiza os dados de um tipo de benefício existente.'\n  })\n  @ApiBody({\n    type: UpdateTipoBeneficioDto,\n    examples: {\n      'Atualização de Benefício': {\n        value: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 200, \n    description: 'Benefício atualizado com sucesso',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 400, \n    description: 'Dados inválidos',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 404, \n    description: 'Benefício não encontrado',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  @ApiResponse({ \n    status: 409, \n    description: 'Nome já em uso',\n    content: {\n      'application/json': {\n        example: \"\"\n      }\n    }\n  })\n  async update(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() updateTipoBeneficioDto: UpdateTipoBeneficioDto,\n  ) {\n    return this.beneficioService.update(id, updateTipoBeneficioDto);\n  }\n\n  /**\n   * Lista requisitos documentais de um benefício\n   */\n  @Get(':id/requisitos')\n  @RequiresPermission(\n    \n    {\n      permissionName: 'beneficio.requisito.listar',\n      scopeType: ScopeType.GLOBAL\n    }\n  )\n  @ApiOperation({ summary: 'Listar requisitos documentais' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de requisitos retornada com sucesso',\n  })\n  @ApiResponse({ status: 404, description: 'Benefício não encontrado' })\n  async findRequisitos(@Param('id', ParseUUIDPipe) id: string) {\n    return this.beneficioService.findRequisitosByBeneficioId(id);\n  }\n\n  /**\n   * Adiciona requisito documental a um benefício\n   */\n  @Post(':id/requisitos')\n  @RequiresPermission(\n    \n    {\n      permissionName: 'beneficio.requisito.adicionar',\n      scopeType: ScopeType.GLOBAL\n    }\n  )\n  @ApiOperation({ summary: 'Adicionar requisito documental' })\n  @ApiResponse({ status: 201, description: 'Requisito adicionado com sucesso' })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  @ApiResponse({ status: 404, description: 'Benefício não encontrado' })\n  async addRequisito(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() createRequisitoDocumentoDto: CreateRequisitoDocumentoDto,\n  ) {\n    return this.beneficioService.addRequisito(id, createRequisitoDocumentoDto);\n  }\n\n  /**\n   * Configura fluxo de aprovação de um benefício\n   */\n  @Put(':id/fluxo')\n  @RequiresPermission(\n    \n    {\n      permissionName: 'beneficio.fluxo.configurar',\n      scopeType: ScopeType.GLOBAL\n    }\n  )\n  @ApiOperation({ summary: 'Configurar fluxo de aprovação' })\n  @ApiResponse({ status: 200, description: 'Fluxo configurado com sucesso' })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  @ApiResponse({ status: 404, description: 'Benefício não encontrado' })\n  async configurarFluxo(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() configurarFluxoDto: ConfigurarFluxoDto,\n  ) {\n    return this.beneficioService.configurarFluxo(id, configurarFluxoDto);\n  }\n}\n"],"version":3}