{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\validators\\status-transition-validator.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,8FAAyF;AACzF,6EAAwE;AAExE;;;;;;;;GAQG;AACH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,SAAoC,CAAC;IAEzC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE,CAAC,uDAAyB,CAAC;SACvC,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,SAAS,GAAG,MAAM,CAAC,GAAG,CAA4B,uDAAyB,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,2CAAmB,CAAC,SAAS,CAC9B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;YAC7D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,2CAAmB,CAAC,UAAU,CAC/B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;YAC5D,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,2CAAmB,CAAC,SAAS,CAC9B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;YAC7E,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,SAAS,EAC7B,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEf,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,SAAS,EAC7B,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEf,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,SAAS,EAC7B,2CAAmB,CAAC,UAAU,CAC/B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;YAC9E,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,UAAU,EAC9B,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEf,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,UAAU,EAC9B,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEf,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,UAAU,EAC9B,2CAAmB,CAAC,SAAS,CAC9B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;YAC9E,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,2CAAmB,CAAC,UAAU,CAC/B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,iBAAwC,EACxC,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAEf,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,iBAAwC,CACzC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEd,MAAM,CAAC,SAAS,CAAC,gBAAgB,CAC/B,2CAAmB,CAAC,QAAQ,EAC5B,2CAAmB,CAAC,QAAQ,CAC7B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,QAAQ,GAAG,SAAS,CAAC,0BAA0B,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;YACpF,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;YACzD,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,2CAAmB,CAAC,SAAS,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,2CAAmB,CAAC,UAAU,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0DAA0D,EAAE,GAAG,EAAE;YAClE,MAAM,QAAQ,GAAG,SAAS,CAAC,0BAA0B,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;YACpF,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,2CAAmB,CAAC,UAAU,CAAC,CAAC;YAC3D,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,2CAAmB,CAAC,SAAS,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,QAAQ,GAAG,SAAS,CAAC,0BAA0B,CAAC,2CAAmB,CAAC,UAAU,CAAC,CAAC;YACtF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,QAAQ,GAAG,SAAS,CAAC,0BAA0B,CAAC,2CAAmB,CAAC,SAAS,CAAC,CAAC;YACrF,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,QAAQ,GAAG,SAAS,CAAC,0BAA0B,CAAC,iBAAwC,CAAC,CAAC;YAChG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC,CAAC,IAAI,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,yDAAyD,EAAE,GAAG,EAAE;YACjE,MAAM,YAAY,GAAG,SAAS,CAAC,eAAe,EAAE,CAAC;YACjD,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,2CAAmB,CAAC,UAAU,CAAC,CAAC;YAC/D,MAAM,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,2CAAmB,CAAC,SAAS,CAAC,CAAC;YAC9D,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;YACjE,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,2CAAmB,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3E,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,2CAAmB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1E,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,GAAG,EAAE;YAClD,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,iBAAwC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\validators\\status-transition-validator.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { StatusTransitionValidator } from '../../validators/status-transition-validator';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\n\n/**\n * Testes unitários para o validador de transições de status\n * \n * Verifica o funcionamento correto das validações de transições entre\n * os diferentes estados de um pagamento, garantindo que apenas transições\n * válidas sejam permitidas.\n * \n * @author Equipe PGBen\n */\ndescribe('StatusTransitionValidator', () => {\n  let validator: StatusTransitionValidator;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [StatusTransitionValidator],\n    }).compile();\n\n    validator = module.get<StatusTransitionValidator>(StatusTransitionValidator);\n  });\n\n  describe('validarTransicao', () => {\n    it('deve permitir transição de AGENDADO para LIBERADO', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.AGENDADO,\n        StatusPagamentoEnum.LIBERADO\n      )).toBe(true);\n    });\n\n    it('deve permitir transição de AGENDADO para CANCELADO', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.AGENDADO,\n        StatusPagamentoEnum.CANCELADO\n      )).toBe(true);\n    });\n\n    it('deve permitir transição de LIBERADO para CONFIRMADO', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.LIBERADO,\n        StatusPagamentoEnum.CONFIRMADO\n      )).toBe(true);\n    });\n\n    it('deve permitir transição de LIBERADO para CANCELADO', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.LIBERADO,\n        StatusPagamentoEnum.CANCELADO\n      )).toBe(true);\n    });\n\n    it('não deve permitir transição de CANCELADO para qualquer outro status', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.CANCELADO,\n        StatusPagamentoEnum.AGENDADO\n      )).toBe(false);\n      \n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.CANCELADO,\n        StatusPagamentoEnum.LIBERADO\n      )).toBe(false);\n      \n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.CANCELADO,\n        StatusPagamentoEnum.CONFIRMADO\n      )).toBe(false);\n    });\n\n    it('não deve permitir transição de CONFIRMADO para qualquer outro status', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.CONFIRMADO,\n        StatusPagamentoEnum.AGENDADO\n      )).toBe(false);\n      \n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.CONFIRMADO,\n        StatusPagamentoEnum.LIBERADO\n      )).toBe(false);\n      \n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.CONFIRMADO,\n        StatusPagamentoEnum.CANCELADO\n      )).toBe(false);\n    });\n\n    it('não deve permitir transição de AGENDADO para CONFIRMADO (pula etapa)', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.AGENDADO,\n        StatusPagamentoEnum.CONFIRMADO\n      )).toBe(false);\n    });\n\n    it('deve retornar false para status inválidos', () => {\n      expect(validator.validarTransicao(\n        'STATUS_INVALIDO' as StatusPagamentoEnum,\n        StatusPagamentoEnum.LIBERADO\n      )).toBe(false);\n      \n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.AGENDADO,\n        'STATUS_INVALIDO' as StatusPagamentoEnum\n      )).toBe(false);\n    });\n\n    it('deve permitir manter o mesmo status', () => {\n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.AGENDADO,\n        StatusPagamentoEnum.AGENDADO\n      )).toBe(true);\n      \n      expect(validator.validarTransicao(\n        StatusPagamentoEnum.LIBERADO,\n        StatusPagamentoEnum.LIBERADO\n      )).toBe(true);\n    });\n  });\n\n  describe('getProximosStatusPossiveis', () => {\n    it('deve retornar os próximos status possíveis para AGENDADO', () => {\n      const proximos = validator.getProximosStatusPossiveis(StatusPagamentoEnum.AGENDADO);\n      expect(proximos).toContain(StatusPagamentoEnum.LIBERADO);\n      expect(proximos).toContain(StatusPagamentoEnum.CANCELADO);\n      expect(proximos).not.toContain(StatusPagamentoEnum.CONFIRMADO);\n    });\n\n    it('deve retornar os próximos status possíveis para LIBERADO', () => {\n      const proximos = validator.getProximosStatusPossiveis(StatusPagamentoEnum.LIBERADO);\n      expect(proximos).toContain(StatusPagamentoEnum.CONFIRMADO);\n      expect(proximos).toContain(StatusPagamentoEnum.CANCELADO);\n      expect(proximos).not.toContain(StatusPagamentoEnum.AGENDADO);\n    });\n\n    it('deve retornar array vazio para CONFIRMADO', () => {\n      const proximos = validator.getProximosStatusPossiveis(StatusPagamentoEnum.CONFIRMADO);\n      expect(proximos.length).toBe(0);\n    });\n\n    it('deve retornar array vazio para CANCELADO', () => {\n      const proximos = validator.getProximosStatusPossiveis(StatusPagamentoEnum.CANCELADO);\n      expect(proximos.length).toBe(0);\n    });\n\n    it('deve retornar array vazio para status inválido', () => {\n      const proximos = validator.getProximosStatusPossiveis('STATUS_INVALIDO' as StatusPagamentoEnum);\n      expect(proximos.length).toBe(0);\n    });\n  });\n\n  describe('getStatusInicial', () => {\n    it('deve retornar AGENDADO como status inicial', () => {\n      expect(validator.getStatusInicial()).toBe(StatusPagamentoEnum.AGENDADO);\n    });\n  });\n\n  describe('getStatusFinais', () => {\n    it('deve retornar CONFIRMADO e CANCELADO como status finais', () => {\n      const statusFinais = validator.getStatusFinais();\n      expect(statusFinais).toContain(StatusPagamentoEnum.CONFIRMADO);\n      expect(statusFinais).toContain(StatusPagamentoEnum.CANCELADO);\n      expect(statusFinais).not.toContain(StatusPagamentoEnum.AGENDADO);\n      expect(statusFinais).not.toContain(StatusPagamentoEnum.LIBERADO);\n    });\n  });\n\n  describe('isStatusFinal', () => {\n    it('deve identificar corretamente status finais', () => {\n      expect(validator.isStatusFinal(StatusPagamentoEnum.CONFIRMADO)).toBe(true);\n      expect(validator.isStatusFinal(StatusPagamentoEnum.CANCELADO)).toBe(true);\n    });\n\n    it('deve identificar corretamente status não finais', () => {\n      expect(validator.isStatusFinal(StatusPagamentoEnum.AGENDADO)).toBe(false);\n      expect(validator.isStatusFinal(StatusPagamentoEnum.LIBERADO)).toBe(false);\n    });\n\n    it('deve retornar false para status inválido', () => {\n      expect(validator.isStatusFinal('STATUS_INVALIDO' as StatusPagamentoEnum)).toBe(false);\n    });\n  });\n});\n"],"version":3}