d73f08c4873775c81f288c082671b888
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EventosService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventosService = void 0;
const common_1 = require("@nestjs/common");
const event_emitter_1 = require("@nestjs/event-emitter");
const solicitacao_events_1 = require("../events/solicitacao-events");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
/**
 * Serviço responsável pelo gerenciamento de eventos do módulo de solicitação
 *
 * Este serviço centraliza a emissão de eventos relacionados ao ciclo de vida das solicitações,
 * facilitando a comunicação assíncrona entre os diferentes componentes do sistema.
 */
let EventosService = EventosService_1 = class EventosService {
    eventEmitter;
    logger = new common_1.Logger(EventosService_1.name);
    constructor(eventEmitter) {
        this.eventEmitter = eventEmitter;
    }
    /**
     * Emite um evento relacionado a uma solicitação
     * @param evento Evento a ser emitido
     */
    emitirEvento(evento) {
        try {
            this.logger.debug(`Emitindo evento: ${evento.type} - Solicitação ID: ${evento.solicitacaoId}`);
            // Define timestamp caso não tenha sido definido
            if (!evento.timestamp) {
                evento.timestamp = new Date();
            }
            // Emite o evento
            this.eventEmitter.emit(evento.type, evento);
            this.logger.debug(`Evento emitido com sucesso: ${evento.type}`);
        }
        catch (error) {
            this.logger.error(`Erro ao emitir evento ${evento.type}: ${error.message}`, error.stack);
        }
    }
    /**
     * Emite evento de criação de solicitação
     * @param solicitacao Solicitação criada
     */
    emitirEventoCriacao(solicitacao) {
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.CREATED,
            solicitacaoId: solicitacao.id,
            timestamp: new Date(),
            data: {
                protocolo: solicitacao.protocolo,
                tipoBeneficioId: solicitacao.tipo_beneficio_id || '',
                cidadaoId: solicitacao.beneficiario?.id || '',
                tecnicoId: solicitacao.tecnico_id || '',
                unidadeId: solicitacao.unidade_id || '',
            },
        });
    }
    /**
     * Emite evento de alteração de status
     * @param solicitacao Solicitação alterada
     * @param statusAnterior Status anterior
     * @param usuarioId ID do usuário que realizou a alteração
     * @param observacao Observação sobre a alteração
     */
    emitirEventoAlteracaoStatus(solicitacao, statusAnterior, usuarioId, observacao) {
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.STATUS_CHANGED,
            solicitacaoId: solicitacao.id,
            timestamp: new Date(),
            data: {
                statusAnterior,
                statusAtual: solicitacao.status,
                usuarioId,
                observacao,
            },
        });
        // Emitir eventos específicos com base no novo status
        switch (solicitacao.status) {
            case solicitacao_entity_1.StatusSolicitacao.APROVADA:
                this.emitirEvento({
                    type: solicitacao_events_1.SolicitacaoEventType.APPROVED,
                    solicitacaoId: solicitacao.id,
                    timestamp: new Date(),
                    data: {
                        aprovadorId: usuarioId,
                        observacao,
                        dataAprovacao: solicitacao.data_aprovacao || new Date(),
                    },
                });
                break;
            case solicitacao_entity_1.StatusSolicitacao.INDEFERIDA:
                this.emitirEvento({
                    type: solicitacao_events_1.SolicitacaoEventType.REJECTED,
                    solicitacaoId: solicitacao.id,
                    timestamp: new Date(),
                    data: {
                        reprovadorId: usuarioId,
                        motivoReprovacao: observacao || 'Não especificado',
                        dataReprovacao: new Date(),
                    },
                });
                break;
            case solicitacao_entity_1.StatusSolicitacao.LIBERADA:
                this.emitirEvento({
                    type: solicitacao_events_1.SolicitacaoEventType.RELEASED,
                    solicitacaoId: solicitacao.id,
                    timestamp: new Date(),
                    data: {
                        liberadorId: usuarioId,
                        dataLiberacao: solicitacao.data_liberacao || new Date(),
                        observacao,
                    },
                });
                break;
            case solicitacao_entity_1.StatusSolicitacao.CONCLUIDA:
                this.logger.log(`Solicitação ${solicitacao.id} concluída`);
                break;
            case solicitacao_entity_1.StatusSolicitacao.CANCELADA:
                this.logger.log(`Solicitação ${solicitacao.id} cancelada: ${observacao || 'Não especificado'}`);
                break;
            case solicitacao_entity_1.StatusSolicitacao.ARQUIVADA:
                this.logger.log(`Solicitação ${solicitacao.id} arquivada`);
                break;
        }
    }
    /**
     * Emite evento de prazo próximo do vencimento
     * @param solicitacao Solicitação com prazo próximo
     * @param tipoPrazo Tipo de prazo
     * @param diasRestantes Dias restantes até o vencimento
     */
    emitirEventoPrazoProximo(solicitacao, tipoPrazo, diasRestantes) {
        const dataPrazo = solicitacao[`prazo_${tipoPrazo}`];
        if (!dataPrazo) {
            return;
        }
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.DEADLINE_APPROACHING,
            solicitacaoId: solicitacao.id,
            timestamp: new Date(),
            data: {
                tipoPrazo,
                dataPrazo,
                diasRestantes,
                determinacaoJudicial: solicitacao.determinacao_judicial_flag || false,
            },
        });
    }
    /**
     * Emite evento de prazo expirado
     * @param solicitacao Solicitação com prazo expirado
     * @param tipoPrazo Tipo de prazo
     * @param diasAtraso Dias de atraso desde o vencimento
     */
    emitirEventoPrazoExpirado(solicitacao, tipoPrazo, diasAtraso) {
        const dataPrazo = solicitacao[`prazo_${tipoPrazo}`];
        if (!dataPrazo) {
            return;
        }
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.DEADLINE_EXPIRED,
            solicitacaoId: solicitacao.id,
            timestamp: new Date(),
            data: {
                tipoPrazo,
                dataPrazo,
                diasAtraso,
                determinacaoJudicial: solicitacao.determinacao_judicial_flag || false,
            },
        });
    }
    /**
     * Emite evento de anexação de determinação judicial
     * @param solicitacao Solicitação à qual a determinação foi anexada
     * @param determinacaoJudicialId ID da determinação judicial
     * @param usuarioId ID do usuário que realizou a anexação
     * @param observacao Observação sobre a anexação
     */
    emitirEventoDeterminacaoJudicialAnexada(solicitacao, determinacaoJudicialId, usuarioId, observacao) {
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.JUDICIAL_DETERMINATION_ATTACHED,
            solicitacaoId: solicitacao.id,
            timestamp: new Date(),
            data: {
                determinacaoJudicialId,
                usuarioId,
                observacao,
            },
        });
    }
    /**
     * Emite evento de criação de pendência
     * @param solicitacaoId ID da solicitação
     * @param pendenciaId ID da pendência criada
     * @param descricao Descrição da pendência
     * @param usuarioId ID do usuário que criou a pendência
     * @param prazo Data limite para resolução da pendência
     */
    emitirEventoPendenciaCriada(solicitacaoId, pendenciaId, descricao, usuarioId, prazo) {
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.PENDENCY_CREATED,
            solicitacaoId,
            timestamp: new Date(),
            data: {
                pendenciaId,
                descricao,
                prazo,
                usuarioId,
            },
        });
    }
    /**
     * Emite evento de resolução de pendência
     * @param solicitacaoId ID da solicitação
     * @param pendenciaId ID da pendência resolvida
     * @param resolucao Descrição da resolução
     * @param usuarioId ID do usuário que resolveu a pendência
     */
    emitirEventoPendenciaResolvida(solicitacaoId, pendenciaId, resolucao, usuarioId) {
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.PENDENCY_RESOLVED,
            solicitacaoId,
            timestamp: new Date(),
            data: {
                pendenciaId,
                resolucao,
                usuarioId,
                dataResolucao: new Date(),
            },
        });
    }
    /**
     * Emite evento de atribuição de solicitação a um técnico
     * @param solicitacao Solicitação atribuída
     * @param tecnicoAnteriorId ID do técnico anterior (opcional)
     * @param tecnicoAtualId ID do novo técnico
     * @param usuarioAtribuicaoId ID do usuário que realizou a atribuição
     * @param motivoAtribuicao Motivo da atribuição
     */
    emitirEventoAtribuicao(solicitacao, tecnicoAtualId, usuarioAtribuicaoId, tecnicoAnteriorId, motivoAtribuicao) {
        this.emitirEvento({
            type: solicitacao_events_1.SolicitacaoEventType.ASSIGNED,
            solicitacaoId: solicitacao.id,
            timestamp: new Date(),
            data: {
                tecnicoAnteriorId,
                tecnicoAtualId,
                usuarioAtribuicaoId,
                motivoAtribuicao,
            },
        });
    }
};
exports.EventosService = EventosService;
exports.EventosService = EventosService = EventosService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof event_emitter_1.EventEmitter2 !== "undefined" && event_emitter_1.EventEmitter2) === "function" ? _a : Object])
], EventosService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,