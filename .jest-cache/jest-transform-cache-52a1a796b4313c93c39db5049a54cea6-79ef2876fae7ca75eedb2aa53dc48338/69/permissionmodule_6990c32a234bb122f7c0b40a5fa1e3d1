db6da194576fa1e43ce23350fcb7cd01
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var PermissionModule_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionModule = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const cache_manager_1 = require("@nestjs/cache-manager");
const config_1 = require("@nestjs/config");
// Entities
const permission_entity_1 = require("../entities/permission.entity");
const permission_group_entity_1 = require("../entities/permission-group.entity");
const permission_group_mapping_entity_1 = require("../entities/permission-group-mapping.entity");
const role_permission_entity_1 = require("../entities/role-permission.entity");
const user_permission_entity_1 = require("../entities/user-permission.entity");
const permission_scope_entity_1 = require("../entities/permission-scope.entity");
// Repositories
const permission_repository_1 = require("./repositories/permission.repository");
const permission_group_repository_1 = require("./repositories/permission-group.repository");
const permission_group_mapping_repository_1 = require("./repositories/permission-group-mapping.repository");
const role_permission_repository_1 = require("./repositories/role-permission.repository");
const user_permission_repository_1 = require("./repositories/user-permission.repository");
const permission_scope_repository_1 = require("./repositories/permission-scope.repository");
// Services
const permission_service_1 = require("./services/permission.service");
// Guards
const permission_guard_1 = require("./guards/permission.guard");
// Constants
const PERMISSION_CACHE_CONFIG = {
    TTL_SECONDS: 300, // 5 minutos
    MAX_ITEMS: 1000,
    STORE: 'memory',
};
/**
 * M√≥dulo de Permiss√µes Granulares
 *
 * Respons√°vel por:
 * - Gerenciamento de permiss√µes granulares por usu√°rio e role
 * - Sistema de cache para otimiza√ß√£o de performance
 * - Guards para controle de acesso baseado em permiss√µes
 * - Reposit√≥rios especializados para queries de permiss√µes
 * - Integra√ß√£o com sistema de escopos (unidade, regional, etc.)
 *
 * @example
 * ```typescript
 * // Uso do guard em controllers
 * @UseGuards(PermissionGuard)
 * @RequiresPermission({
 *   permissionName: 'user.create',
 *   scopeType: TipoEscopo.UNIDADE,
 *   scopeIdExpression: 'params.unidadeId'
 * })
 * async createUser() { ... }
 * ```
 */
let PermissionModule = PermissionModule_1 = class PermissionModule {
    permissionService;
    logger = new common_1.Logger(PermissionModule_1.name);
    constructor(permissionService) {
        this.permissionService = permissionService;
    }
    /**
     * Inicializa√ß√£o do m√≥dulo com valida√ß√µes de integridade
     */
    async onModuleInit() {
        this.logger.log('üîê Inicializando PermissionModule...');
        try {
            await this.validateModuleIntegrity();
            await this.performStartupTasks();
            this.logger.log('‚úÖ PermissionModule inicializado com sucesso');
        }
        catch (error) {
            this.logger.error(`‚ùå Erro cr√≠tico durante inicializa√ß√£o do PermissionModule: ${error.message}`, error.stack);
            // Em caso de erro cr√≠tico, n√£o permitir que a aplica√ß√£o continue
            // pois permiss√µes s√£o fundamentais para seguran√ßa
            throw new Error(`PermissionModule falhou na inicializa√ß√£o: ${error.message}`);
        }
    }
    /**
     * Valida a integridade do m√≥dulo e suas depend√™ncias
     * @private
     */
    async validateModuleIntegrity() {
        this.logger.debug('Validando integridade do m√≥dulo...');
        // Verifica se o PermissionService foi injetado corretamente
        if (!this.permissionService) {
            throw new Error('PermissionService n√£o foi injetado corretamente. Verifique as depend√™ncias.');
        }
        // Testa conectividade b√°sica com o banco de dados
        try {
            // Chama getAllPermissions sem argumentos (conforme assinatura correta)
            await this.permissionService.getAllPermissions();
            this.logger.debug('‚úì Conectividade com PermissionService validada');
        }
        catch (error) {
            this.logger.warn(`Aviso na valida√ß√£o de conectividade: ${error.message}. Continuando inicializa√ß√£o...`);
            // N√£o falha a inicializa√ß√£o por problemas de valida√ß√£o b√°sica
            // A valida√ß√£o mais rigorosa ser√° feita quando o servi√ßo for efetivamente usado
        }
    }
    /**
     * Executa tarefas de inicializa√ß√£o necess√°rias
     * @private
     */
    async performStartupTasks() {
        this.logger.debug('Executando tarefas de inicializa√ß√£o...');
        try {
            // Como clearPermissionCache requer um permissionName espec√≠fico,
            // n√£o executamos limpeza geral de cache na inicializa√ß√£o para evitar
            // problemas. O cache ser√° gerenciado naturalmente pelo TTL configurado.
            this.logger.debug('‚úì Cache ser√° gerenciado pelo TTL configurado');
            // Pode incluir outras tarefas como:
            // - Sincroniza√ß√£o de permiss√µes padr√£o
            // - Verifica√ß√£o de integridade de dados
            // - Valida√ß√£o de permiss√µes cr√≠ticas do sistema
        }
        catch (error) {
            this.logger.warn(`Aviso durante tarefas de inicializa√ß√£o: ${error.message}`);
            // Tarefas de inicializa√ß√£o podem falhar sem comprometer o m√≥dulo
        }
    }
};
exports.PermissionModule = PermissionModule;
exports.PermissionModule = PermissionModule = PermissionModule_1 = __decorate([
    (0, common_1.Module)({
        imports: [
            // Configura√ß√£o das entidades
            typeorm_1.TypeOrmModule.forFeature([
                permission_entity_1.Permission,
                permission_group_entity_1.PermissionGroup,
                permission_group_mapping_entity_1.PermissionGroupMapping,
                role_permission_entity_1.RolePermission,
                user_permission_entity_1.UserPermission,
                permission_scope_entity_1.PermissionScope,
            ]),
            // Cache configur√°vel para permiss√µes
            cache_manager_1.CacheModule.registerAsync({
                imports: [config_1.ConfigModule],
                inject: [config_1.ConfigService],
                useFactory: (configService) => ({
                    ttl: configService.get('PERMISSION_CACHE_TTL', PERMISSION_CACHE_CONFIG.TTL_SECONDS * 1000),
                    max: configService.get('PERMISSION_CACHE_MAX_ITEMS', PERMISSION_CACHE_CONFIG.MAX_ITEMS),
                    store: PERMISSION_CACHE_CONFIG.STORE,
                    isGlobal: false, // Scoped para evitar conflitos
                }),
            }),
            config_1.ConfigModule,
        ],
        providers: [
            // Reposit√≥rios customizados
            permission_repository_1.PermissionRepository,
            permission_group_repository_1.PermissionGroupRepository,
            permission_group_mapping_repository_1.PermissionGroupMappingRepository,
            role_permission_repository_1.RolePermissionRepository,
            user_permission_repository_1.UserPermissionRepository,
            permission_scope_repository_1.PermissionScopeRepository,
            // Servi√ßo principal
            permission_service_1.PermissionService,
            // Guards
            permission_guard_1.PermissionGuard,
        ],
        exports: [
            // Servi√ßo para uso em outros m√≥dulos
            permission_service_1.PermissionService,
            // Guard para controle de acesso
            permission_guard_1.PermissionGuard,
            // Reposit√≥rios para uso avan√ßado
            permission_repository_1.PermissionRepository,
            role_permission_repository_1.RolePermissionRepository,
            user_permission_repository_1.UserPermissionRepository,
            permission_scope_repository_1.PermissionScopeRepository,
        ],
    }),
    __metadata("design:paramtypes", [typeof (_a = typeof permission_service_1.PermissionService !== "undefined" && permission_service_1.PermissionService) === "function" ? _a : Object])
], PermissionModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,