{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\controllers\\resilience-monitoring.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\controllers\\resilience-monitoring.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ResilienceMonitoringController } from './resilience-monitoring.controller';\nimport { HybridCacheService } from '../services/hybrid-cache.service';\nimport { ResilientAuditoriaService } from '../services/resilient-auditoria.service';\nimport { HealthCheckService } from '../services/health-check.service';\nimport { JwtAuthGuard } from '../../auth/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../auth/guards/roles.guard';\nimport { ExecutionContext } from '@nestjs/common';\n\ndescribe('ResilienceMonitoringController', () => {\n  let controller: ResilienceMonitoringController;\n  let hybridCacheService: jest.Mocked<HybridCacheService>;\n  let auditoriaService: jest.Mocked<ResilientAuditoriaService>;\n  let healthCheckService: jest.Mocked<HealthCheckService>;\n\n  const mockUser = {\n    id: 1,\n    email: 'admin@test.com',\n    perfil: 'ADMINISTRADOR',\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [ResilienceMonitoringController],\n      providers: [\n        {\n          provide: HybridCacheService,\n          useValue: {\n            getMetrics: jest.fn(),\n            getStatus: jest.fn(),\n            performCacheWarming: jest.fn(),\n            resetMetrics: jest.fn(),\n            clear: jest.fn(),\n          },\n        },\n        {\n          provide: ResilientAuditoriaService,\n          useValue: {\n            getMetrics: jest.fn(),\n            getStatus: jest.fn(),\n            processBackupLogs: jest.fn(),\n            resetMetrics: jest.fn(),\n          },\n        },\n        {\n          provide: HealthCheckService,\n          useValue: {\n            getServicesStatus: jest.fn(),\n            checkRedisConnection: jest.fn(),\n            checkDatabaseConnection: jest.fn(),\n          },\n        },\n      ],\n    })\n      .overrideGuard(JwtAuthGuard)\n      .useValue({\n        canActivate: (context: ExecutionContext) => {\n          const req = context.switchToHttp().getRequest();\n          req.user = mockUser;\n          return true;\n        },\n      })\n      .overrideGuard(RolesGuard)\n      .useValue({\n        canActivate: () => true,\n      })\n      .compile();\n\n    controller = module.get<ResilienceMonitoringController>(\n      ResilienceMonitoringController,\n    );\n    hybridCacheService = module.get(HybridCacheService);\n    auditoriaService = module.get(ResilientAuditoriaService);\n    healthCheckService = module.get(HealthCheckService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('getSystemStatus', () => {\n    it('deve retornar status geral do sistema', async () => {\n      // Arrange\n      const mockServicesStatus = {\n        redis: { status: 'up', responseTime: 10 },\n        database: { status: 'up', responseTime: 5 },\n        queue: { status: 'up', responseTime: 15 },\n      };\n\n      const mockCacheStatus = {\n        l1Available: true,\n        l2Available: true,\n        circuitBreakerState: 'CLOSED',\n      };\n\n      const mockAuditoriaStatus = {\n        queueEnabled: true,\n        syncFallbackEnabled: true,\n        fileFallbackEnabled: true,\n        backupLogsCount: 0,\n      };\n\n      healthCheckService.getServicesStatus.mockReturnValue(mockServicesStatus);\n      hybridCacheService.getStatus.mockReturnValue(mockCacheStatus);\n      auditoriaService.getStatus.mockReturnValue(mockAuditoriaStatus);\n\n      // Act\n      const result = await controller.getSystemStatus();\n\n      // Assert\n      expect(result).toEqual({\n        timestamp: expect.any(String),\n        overallStatus: 'healthy',\n        services: mockServicesStatus,\n        cache: mockCacheStatus,\n        auditoria: mockAuditoriaStatus,\n      });\n    });\n\n    it('deve retornar status degraded quando há problemas', async () => {\n      // Arrange\n      const mockServicesStatus = {\n        redis: { status: 'down', responseTime: null },\n        database: { status: 'up', responseTime: 5 },\n        queue: { status: 'down', responseTime: null },\n      };\n\n      const mockCacheStatus = {\n        l1Available: true,\n        l2Available: false,\n        circuitBreakerState: 'OPEN',\n      };\n\n      const mockAuditoriaStatus = {\n        queueEnabled: false,\n        syncFallbackEnabled: true,\n        fileFallbackEnabled: true,\n        backupLogsCount: 5,\n      };\n\n      healthCheckService.getServicesStatus.mockReturnValue(mockServicesStatus);\n      hybridCacheService.getStatus.mockReturnValue(mockCacheStatus);\n      auditoriaService.getStatus.mockReturnValue(mockAuditoriaStatus);\n\n      // Act\n      const result = await controller.getSystemStatus();\n\n      // Assert\n      expect(result.overallStatus).toBe('degraded');\n      expect(result.services).toEqual(mockServicesStatus);\n      expect(result.cache).toEqual(mockCacheStatus);\n      expect(result.auditoria).toEqual(mockAuditoriaStatus);\n    });\n\n    it('deve retornar status critical quando sistema principal está down', async () => {\n      // Arrange\n      const mockServicesStatus = {\n        redis: { status: 'down', responseTime: null },\n        database: { status: 'down', responseTime: null },\n        queue: { status: 'down', responseTime: null },\n      };\n\n      const mockCacheStatus = {\n        l1Available: false,\n        l2Available: false,\n        circuitBreakerState: 'OPEN',\n      };\n\n      const mockAuditoriaStatus = {\n        queueEnabled: false,\n        syncFallbackEnabled: false,\n        fileFallbackEnabled: true,\n        backupLogsCount: 10,\n      };\n\n      healthCheckService.getServicesStatus.mockReturnValue(mockServicesStatus);\n      hybridCacheService.getStatus.mockReturnValue(mockCacheStatus);\n      auditoriaService.getStatus.mockReturnValue(mockAuditoriaStatus);\n\n      // Act\n      const result = await controller.getSystemStatus();\n\n      // Assert\n      expect(result.overallStatus).toBe('critical');\n    });\n  });\n\n  describe('getCacheMetrics', () => {\n    it('deve retornar métricas detalhadas do cache', async () => {\n      // Arrange\n      const mockMetrics = {\n        l1Hits: 100,\n        l1Misses: 20,\n        l2Hits: 15,\n        l2Misses: 5,\n        l1HitRate: 83.33,\n        l2HitRate: 75.0,\n        overallHitRate: 80.0,\n        l1Size: 50,\n        evictions: 3,\n        warmingOperations: 2,\n        failovers: 1,\n        criticalKeysCount: 5,\n      };\n\n      hybridCacheService.getMetrics.mockReturnValue(mockMetrics);\n\n      // Act\n      const result = await controller.getCacheMetrics();\n\n      // Assert\n      expect(result).toEqual({\n        timestamp: expect.any(String),\n        metrics: mockMetrics,\n      });\n      expect(hybridCacheService.getMetrics).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('getAuditoriaMetrics', () => {\n    it('deve retornar métricas detalhadas da auditoria', async () => {\n      // Arrange\n      const mockMetrics = {\n        totalLogs: 1000,\n        queuedLogs: 50,\n        processedLogs: 950,\n        failedLogs: 5,\n        syncFallbacks: 10,\n        fileFallbacks: 2,\n        backupLogsCount: 3,\n        averageProcessingTime: 150,\n        queueSuccessRate: 95.0,\n        overallSuccessRate: 99.5,\n      };\n\n      auditoriaService.getMetrics.mockReturnValue(mockMetrics);\n\n      // Act\n      const result = await controller.getAuditoriaMetrics();\n\n      // Assert\n      expect(result).toEqual({\n        timestamp: expect.any(String),\n        metrics: mockMetrics,\n      });\n      expect(auditoriaService.getMetrics).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('forceCacheWarming', () => {\n    it('deve executar cache warming com sucesso', async () => {\n      // Arrange\n      hybridCacheService.performCacheWarming.mockResolvedValue(undefined);\n\n      // Act\n      const result = await controller.forceCacheWarming();\n\n      // Assert\n      expect(result).toEqual({\n        success: true,\n        message: 'Cache warming iniciado com sucesso',\n        timestamp: expect.any(String),\n      });\n      expect(hybridCacheService.performCacheWarming).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve lidar com erro no cache warming', async () => {\n      // Arrange\n      const error = new Error('Cache warming failed');\n      hybridCacheService.performCacheWarming.mockRejectedValue(error);\n\n      // Act\n      const result = await controller.forceCacheWarming();\n\n      // Assert\n      expect(result).toEqual({\n        success: false,\n        message: 'Erro ao executar cache warming: Cache warming failed',\n        timestamp: expect.any(String),\n      });\n    });\n  });\n\n  describe('processBackupLogs', () => {\n    it('deve processar logs de backup com sucesso', async () => {\n      // Arrange\n      const processedCount = 15;\n      auditoriaService.processBackupLogs.mockResolvedValue(processedCount);\n\n      // Act\n      const result = await controller.processBackupLogs();\n\n      // Assert\n      expect(result).toEqual({\n        success: true,\n        message: `${processedCount} logs de backup processados com sucesso`,\n        processedCount,\n        timestamp: expect.any(String),\n      });\n      expect(auditoriaService.processBackupLogs).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve lidar com erro no processamento de logs', async () => {\n      // Arrange\n      const error = new Error('Backup processing failed');\n      auditoriaService.processBackupLogs.mockRejectedValue(error);\n\n      // Act\n      const result = await controller.processBackupLogs();\n\n      // Assert\n      expect(result).toEqual({\n        success: false,\n        message: 'Erro ao processar logs de backup: Backup processing failed',\n        processedCount: 0,\n        timestamp: expect.any(String),\n      });\n    });\n  });\n\n  describe('resetCacheMetrics', () => {\n    it('deve resetar métricas do cache com sucesso', async () => {\n      // Arrange\n      hybridCacheService.resetMetrics.mockReturnValue(undefined);\n\n      // Act\n      const result = await controller.resetCacheMetrics();\n\n      // Assert\n      expect(result).toEqual({\n        success: true,\n        message: 'Métricas do cache resetadas com sucesso',\n        timestamp: expect.any(String),\n      });\n      expect(hybridCacheService.resetMetrics).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve lidar com erro ao resetar métricas', async () => {\n      // Arrange\n      const error = new Error('Reset failed');\n      hybridCacheService.resetMetrics.mockImplementation(() => {\n        throw error;\n      });\n\n      // Act\n      const result = await controller.resetCacheMetrics();\n\n      // Assert\n      expect(result).toEqual({\n        success: false,\n        message: 'Erro ao resetar métricas do cache: Reset failed',\n        timestamp: expect.any(String),\n      });\n    });\n  });\n\n  describe('resetAuditoriaMetrics', () => {\n    it('deve resetar métricas da auditoria com sucesso', async () => {\n      // Arrange\n      auditoriaService.resetMetrics.mockReturnValue(undefined);\n\n      // Act\n      const result = await controller.resetAuditoriaMetrics();\n\n      // Assert\n      expect(result).toEqual({\n        success: true,\n        message: 'Métricas da auditoria resetadas com sucesso',\n        timestamp: expect.any(String),\n      });\n      expect(auditoriaService.resetMetrics).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve lidar com erro ao resetar métricas da auditoria', async () => {\n      // Arrange\n      const error = new Error('Auditoria reset failed');\n      auditoriaService.resetMetrics.mockImplementation(() => {\n        throw error;\n      });\n\n      // Act\n      const result = await controller.resetAuditoriaMetrics();\n\n      // Assert\n      expect(result).toEqual({\n        success: false,\n        message:\n          'Erro ao resetar métricas da auditoria: Auditoria reset failed',\n        timestamp: expect.any(String),\n      });\n    });\n  });\n\n  describe('clearCache', () => {\n    it('deve limpar cache com sucesso', async () => {\n      // Arrange\n      hybridCacheService.clear.mockResolvedValue(undefined);\n\n      // Act\n      const result = await controller.clearCache();\n\n      // Assert\n      expect(result).toEqual({\n        success: true,\n        message: 'Cache limpo com sucesso',\n        timestamp: expect.any(String),\n      });\n      expect(hybridCacheService.clear).toHaveBeenCalledTimes(1);\n    });\n\n    it('deve lidar com erro ao limpar cache', async () => {\n      // Arrange\n      const error = new Error('Clear cache failed');\n      hybridCacheService.clear.mockRejectedValue(error);\n\n      // Act\n      const result = await controller.clearCache();\n\n      // Assert\n      expect(result).toEqual({\n        success: false,\n        message: 'Erro ao limpar cache: Clear cache failed',\n        timestamp: expect.any(String),\n      });\n    });\n  });\n\n  describe('guards e decorators', () => {\n    it('deve ter guards de autenticação e autorização configurados', () => {\n      // Verificar se os guards estão aplicados através dos metadados\n      const guards = Reflect.getMetadata(\n        '__guards__',\n        ResilienceMonitoringController,\n      );\n      expect(guards).toBeDefined();\n    });\n\n    it('deve ter role de ADMINISTRADOR configurada', () => {\n      // Verificar se a role está aplicada através dos metadados\n      const roles = Reflect.getMetadata(\n        'roles',\n        ResilienceMonitoringController,\n      );\n      expect(roles).toContain('ADMINISTRADOR');\n    });\n  });\n\n  describe('tratamento de erros', () => {\n    it('deve capturar e tratar erros inesperados', async () => {\n      // Arrange\n      hybridCacheService.getMetrics.mockImplementation(() => {\n        throw new Error('Unexpected error');\n      });\n\n      // Act & Assert\n      await expect(controller.getCacheMetrics()).rejects.toThrow(\n        'Unexpected error',\n      );\n    });\n\n    it('deve manter consistência nos formatos de resposta', async () => {\n      // Arrange\n      const mockMetrics = {\n        l1Hits: 0,\n        l1Misses: 0,\n        l2Hits: 0,\n        l2Misses: 0,\n        l1HitRate: 0,\n        l2HitRate: 0,\n        overallHitRate: 0,\n        l1Size: 0,\n        evictions: 0,\n        warmingOperations: 0,\n        failovers: 0,\n        criticalKeysCount: 0,\n      };\n\n      hybridCacheService.getMetrics.mockReturnValue(mockMetrics);\n\n      // Act\n      const result = await controller.getCacheMetrics();\n\n      // Assert\n      expect(result).toHaveProperty('timestamp');\n      expect(result).toHaveProperty('metrics');\n      expect(typeof result.timestamp).toBe('string');\n      expect(typeof result.metrics).toBe('object');\n    });\n  });\n\n  describe('validação de entrada', () => {\n    it('deve aceitar requisições válidas', async () => {\n      // Arrange\n      hybridCacheService.performCacheWarming.mockResolvedValue(undefined);\n\n      // Act\n      const result = await controller.forceCacheWarming();\n\n      // Assert\n      expect(result.success).toBe(true);\n    });\n\n    it('deve manter estado consistente após operações', async () => {\n      // Arrange\n      hybridCacheService.resetMetrics.mockReturnValue(undefined);\n      auditoriaService.resetMetrics.mockReturnValue(undefined);\n\n      // Act\n      await controller.resetCacheMetrics();\n      await controller.resetAuditoriaMetrics();\n\n      // Assert\n      expect(hybridCacheService.resetMetrics).toHaveBeenCalledTimes(1);\n      expect(auditoriaService.resetMetrics).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('performance e timeout', () => {\n    it('deve completar operações em tempo hábil', async () => {\n      // Arrange\n      const startTime = Date.now();\n      hybridCacheService.getMetrics.mockReturnValue({\n        l1Hits: 100,\n        l1Misses: 20,\n        l2Hits: 15,\n        l2Misses: 5,\n        l1HitRate: 83.33,\n        l2HitRate: 75.0,\n        overallHitRate: 80.0,\n        l1Size: 50,\n        evictions: 3,\n        warmingOperations: 2,\n        failovers: 1,\n        criticalKeysCount: 5,\n      });\n\n      // Act\n      await controller.getCacheMetrics();\n      const endTime = Date.now();\n\n      // Assert\n      expect(endTime - startTime).toBeLessThan(1000); // Menos de 1 segundo\n    });\n\n    it('deve lidar com operações assíncronas longas', async () => {\n      // Arrange\n      hybridCacheService.performCacheWarming.mockImplementation(async () => {\n        await new Promise((resolve) => setTimeout(resolve, 100)); // Simular operação lenta\n      });\n\n      // Act\n      const result = await controller.forceCacheWarming();\n\n      // Assert\n      expect(result.success).toBe(true);\n    });\n  });\n});\n"],"version":3}