dedde3ab1b79da5a2e78756d11926115
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const template_entity_1 = require("../../../entities/template.entity");
/**
 * Repositório para gerenciamento de templates do sistema
 *
 * Fornece operações de acesso a dados para entidade Template
 */
let TemplateRepository = class TemplateRepository {
    repository;
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Encontra um template por seu código
     * @param codigo Código do template
     * @returns Template encontrado ou null
     */
    async findByCodigo(codigo) {
        return this.repository.findOne({ where: { codigo } });
    }
    /**
     * Busca todos os templates do sistema
     * @param tipo Tipo opcional para filtrar templates
     * @returns Lista de templates
     */
    async findAll(tipo) {
        const whereClause = tipo ? { tipo } : {};
        return this.repository.find({
            where: whereClause,
            order: { tipo: 'ASC', codigo: 'ASC' },
        });
    }
    /**
     * Salva um template no banco de dados
     * @param template Template a ser salvo
     * @returns Template salvo
     */
    async save(template) {
        return this.repository.save(template);
    }
    /**
     * Remove um template do banco de dados
     * @param id ID do template a ser removido
     */
    async remove(id) {
        await this.repository.delete(id);
    }
    /**
     * Busca templates por tipo
     * @param tipo Tipo dos templates
     * @returns Lista de templates do tipo
     */
    async findByTipo(tipo) {
        return this.repository.find({
            where: { tipo },
            order: { codigo: 'ASC' },
        });
    }
    /**
     * Verifica se existe um template com o código especificado
     * @param codigo Código do template
     * @returns true se existir, false caso contrário
     */
    async existsByCodigo(codigo) {
        const count = await this.repository.count({ where: { codigo } });
        return count > 0;
    }
};
exports.TemplateRepository = TemplateRepository;
exports.TemplateRepository = TemplateRepository = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(template_entity_1.Template)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], TemplateRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNvbmZpZ3VyYWNhb1xccmVwb3NpdG9yaWVzXFx0ZW1wbGF0ZS5yZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBNEM7QUFDNUMsNkNBQW1EO0FBQ25ELHFDQUFxQztBQUNyQyx1RUFBNkQ7QUFHN0Q7Ozs7R0FJRztBQUVJLElBQU0sa0JBQWtCLEdBQXhCLE1BQU0sa0JBQWtCO0lBR1Y7SUFGbkIsWUFFbUIsVUFBZ0M7UUFBaEMsZUFBVSxHQUFWLFVBQVUsQ0FBc0I7SUFDaEQsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQWM7UUFDL0IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBdUI7UUFDbkMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUMxQixLQUFLLEVBQUUsV0FBVztZQUNsQixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7U0FDdEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQWtCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBVTtRQUNyQixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFzQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQzFCLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRTtZQUNmLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQWM7UUFDakMsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRSxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDbkIsQ0FBQztDQUNGLENBQUE7QUFsRVksZ0RBQWtCOzZCQUFsQixrQkFBa0I7SUFEOUIsSUFBQSxtQkFBVSxHQUFFO0lBR1IsV0FBQSxJQUFBLDBCQUFnQixFQUFDLDBCQUFRLENBQUMsQ0FBQTt5REFDRSxvQkFBVSxvQkFBVixvQkFBVTtHQUg5QixrQkFBa0IsQ0FrRTlCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxjb25maWd1cmFjYW9cXHJlcG9zaXRvcmllc1xcdGVtcGxhdGUucmVwb3NpdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gJy4uLy4uLy4uL2VudGl0aWVzL3RlbXBsYXRlLmVudGl0eSc7XG5pbXBvcnQgeyBUZW1wbGF0ZVRpcG9FbnVtIH0gZnJvbSAnLi4vLi4vLi4vZW51bXMvdGVtcGxhdGUtdGlwby5lbnVtJztcblxuLyoqXG4gKiBSZXBvc2l0w7NyaW8gcGFyYSBnZXJlbmNpYW1lbnRvIGRlIHRlbXBsYXRlcyBkbyBzaXN0ZW1hXG4gKlxuICogRm9ybmVjZSBvcGVyYcOnw7VlcyBkZSBhY2Vzc28gYSBkYWRvcyBwYXJhIGVudGlkYWRlIFRlbXBsYXRlXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVJlcG9zaXRvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0UmVwb3NpdG9yeShUZW1wbGF0ZSlcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8VGVtcGxhdGU+LFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEVuY29udHJhIHVtIHRlbXBsYXRlIHBvciBzZXUgY8OzZGlnb1xuICAgKiBAcGFyYW0gY29kaWdvIEPDs2RpZ28gZG8gdGVtcGxhdGVcbiAgICogQHJldHVybnMgVGVtcGxhdGUgZW5jb250cmFkbyBvdSBudWxsXG4gICAqL1xuICBhc3luYyBmaW5kQnlDb2RpZ28oY29kaWdvOiBzdHJpbmcpOiBQcm9taXNlPFRlbXBsYXRlIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZE9uZSh7IHdoZXJlOiB7IGNvZGlnbyB9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIHRvZG9zIG9zIHRlbXBsYXRlcyBkbyBzaXN0ZW1hXG4gICAqIEBwYXJhbSB0aXBvIFRpcG8gb3BjaW9uYWwgcGFyYSBmaWx0cmFyIHRlbXBsYXRlc1xuICAgKiBAcmV0dXJucyBMaXN0YSBkZSB0ZW1wbGF0ZXNcbiAgICovXG4gIGFzeW5jIGZpbmRBbGwodGlwbz86IFRlbXBsYXRlVGlwb0VudW0pOiBQcm9taXNlPFRlbXBsYXRlW10+IHtcbiAgICBjb25zdCB3aGVyZUNsYXVzZSA9IHRpcG8gPyB7IHRpcG8gfSA6IHt9O1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZCh7XG4gICAgICB3aGVyZTogd2hlcmVDbGF1c2UsXG4gICAgICBvcmRlcjogeyB0aXBvOiAnQVNDJywgY29kaWdvOiAnQVNDJyB9LFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbHZhIHVtIHRlbXBsYXRlIG5vIGJhbmNvIGRlIGRhZG9zXG4gICAqIEBwYXJhbSB0ZW1wbGF0ZSBUZW1wbGF0ZSBhIHNlciBzYWx2b1xuICAgKiBAcmV0dXJucyBUZW1wbGF0ZSBzYWx2b1xuICAgKi9cbiAgYXN5bmMgc2F2ZSh0ZW1wbGF0ZTogVGVtcGxhdGUpOiBQcm9taXNlPFRlbXBsYXRlPiB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5zYXZlKHRlbXBsYXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdW0gdGVtcGxhdGUgZG8gYmFuY28gZGUgZGFkb3NcbiAgICogQHBhcmFtIGlkIElEIGRvIHRlbXBsYXRlIGEgc2VyIHJlbW92aWRvXG4gICAqL1xuICBhc3luYyByZW1vdmUoaWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMucmVwb3NpdG9yeS5kZWxldGUoaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIHRlbXBsYXRlcyBwb3IgdGlwb1xuICAgKiBAcGFyYW0gdGlwbyBUaXBvIGRvcyB0ZW1wbGF0ZXNcbiAgICogQHJldHVybnMgTGlzdGEgZGUgdGVtcGxhdGVzIGRvIHRpcG9cbiAgICovXG4gIGFzeW5jIGZpbmRCeVRpcG8odGlwbzogVGVtcGxhdGVUaXBvRW51bSk6IFByb21pc2U8VGVtcGxhdGVbXT4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZCh7XG4gICAgICB3aGVyZTogeyB0aXBvIH0sXG4gICAgICBvcmRlcjogeyBjb2RpZ286ICdBU0MnIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgZXhpc3RlIHVtIHRlbXBsYXRlIGNvbSBvIGPDs2RpZ28gZXNwZWNpZmljYWRvXG4gICAqIEBwYXJhbSBjb2RpZ28gQ8OzZGlnbyBkbyB0ZW1wbGF0ZVxuICAgKiBAcmV0dXJucyB0cnVlIHNlIGV4aXN0aXIsIGZhbHNlIGNhc28gY29udHLDoXJpb1xuICAgKi9cbiAgYXN5bmMgZXhpc3RzQnlDb2RpZ28oY29kaWdvOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHRoaXMucmVwb3NpdG9yeS5jb3VudCh7IHdoZXJlOiB7IGNvZGlnbyB9IH0pO1xuICAgIHJldHVybiBjb3VudCA+IDA7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==