d5259848477902c14387e4da6c73afaf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const resilience_monitoring_controller_1 = require("./resilience-monitoring.controller");
const hybrid_cache_service_1 = require("../services/hybrid-cache.service");
const resilient_auditoria_service_1 = require("../services/resilient-auditoria.service");
const health_check_service_1 = require("../services/health-check.service");
const jwt_auth_guard_1 = require("../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../auth/guards/roles.guard");
describe('ResilienceMonitoringController', () => {
    let controller;
    let hybridCacheService;
    let auditoriaService;
    let healthCheckService;
    const mockUser = {
        id: 1,
        email: 'admin@test.com',
        perfil: 'ADMINISTRADOR',
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [resilience_monitoring_controller_1.ResilienceMonitoringController],
            providers: [
                {
                    provide: hybrid_cache_service_1.HybridCacheService,
                    useValue: {
                        getMetrics: jest.fn(),
                        getStatus: jest.fn(),
                        performCacheWarming: jest.fn(),
                        resetMetrics: jest.fn(),
                        clear: jest.fn(),
                    },
                },
                {
                    provide: resilient_auditoria_service_1.ResilientAuditoriaService,
                    useValue: {
                        getMetrics: jest.fn(),
                        getStatus: jest.fn(),
                        processBackupLogs: jest.fn(),
                        resetMetrics: jest.fn(),
                    },
                },
                {
                    provide: health_check_service_1.HealthCheckService,
                    useValue: {
                        getServicesStatus: jest.fn(),
                        checkRedisConnection: jest.fn(),
                        checkDatabaseConnection: jest.fn(),
                    },
                },
            ],
        })
            .overrideGuard(jwt_auth_guard_1.JwtAuthGuard)
            .useValue({
            canActivate: (context) => {
                const req = context.switchToHttp().getRequest();
                req.user = mockUser;
                return true;
            },
        })
            .overrideGuard(roles_guard_1.RolesGuard)
            .useValue({
            canActivate: () => true,
        })
            .compile();
        controller = module.get(resilience_monitoring_controller_1.ResilienceMonitoringController);
        hybridCacheService = module.get(hybrid_cache_service_1.HybridCacheService);
        auditoriaService = module.get(resilient_auditoria_service_1.ResilientAuditoriaService);
        healthCheckService = module.get(health_check_service_1.HealthCheckService);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('getSystemStatus', () => {
        it('deve retornar status geral do sistema', async () => {
            // Arrange
            const mockServicesStatus = {
                redis: { status: 'up', responseTime: 10 },
                database: { status: 'up', responseTime: 5 },
                queue: { status: 'up', responseTime: 15 },
            };
            const mockCacheStatus = {
                l1Available: true,
                l2Available: true,
                circuitBreakerState: 'CLOSED',
            };
            const mockAuditoriaStatus = {
                queueEnabled: true,
                syncFallbackEnabled: true,
                fileFallbackEnabled: true,
                backupLogsCount: 0,
            };
            healthCheckService.getServicesStatus.mockReturnValue(mockServicesStatus);
            hybridCacheService.getStatus.mockReturnValue(mockCacheStatus);
            auditoriaService.getStatus.mockReturnValue(mockAuditoriaStatus);
            // Act
            const result = await controller.getSystemStatus();
            // Assert
            expect(result).toEqual({
                timestamp: expect.any(String),
                overallStatus: 'healthy',
                services: mockServicesStatus,
                cache: mockCacheStatus,
                auditoria: mockAuditoriaStatus,
            });
        });
        it('deve retornar status degraded quando há problemas', async () => {
            // Arrange
            const mockServicesStatus = {
                redis: { status: 'down', responseTime: null },
                database: { status: 'up', responseTime: 5 },
                queue: { status: 'down', responseTime: null },
            };
            const mockCacheStatus = {
                l1Available: true,
                l2Available: false,
                circuitBreakerState: 'OPEN',
            };
            const mockAuditoriaStatus = {
                queueEnabled: false,
                syncFallbackEnabled: true,
                fileFallbackEnabled: true,
                backupLogsCount: 5,
            };
            healthCheckService.getServicesStatus.mockReturnValue(mockServicesStatus);
            hybridCacheService.getStatus.mockReturnValue(mockCacheStatus);
            auditoriaService.getStatus.mockReturnValue(mockAuditoriaStatus);
            // Act
            const result = await controller.getSystemStatus();
            // Assert
            expect(result.overallStatus).toBe('degraded');
            expect(result.services).toEqual(mockServicesStatus);
            expect(result.cache).toEqual(mockCacheStatus);
            expect(result.auditoria).toEqual(mockAuditoriaStatus);
        });
        it('deve retornar status critical quando sistema principal está down', async () => {
            // Arrange
            const mockServicesStatus = {
                redis: { status: 'down', responseTime: null },
                database: { status: 'down', responseTime: null },
                queue: { status: 'down', responseTime: null },
            };
            const mockCacheStatus = {
                l1Available: false,
                l2Available: false,
                circuitBreakerState: 'OPEN',
            };
            const mockAuditoriaStatus = {
                queueEnabled: false,
                syncFallbackEnabled: false,
                fileFallbackEnabled: true,
                backupLogsCount: 10,
            };
            healthCheckService.getServicesStatus.mockReturnValue(mockServicesStatus);
            hybridCacheService.getStatus.mockReturnValue(mockCacheStatus);
            auditoriaService.getStatus.mockReturnValue(mockAuditoriaStatus);
            // Act
            const result = await controller.getSystemStatus();
            // Assert
            expect(result.overallStatus).toBe('critical');
        });
    });
    describe('getCacheMetrics', () => {
        it('deve retornar métricas detalhadas do cache', async () => {
            // Arrange
            const mockMetrics = {
                l1Hits: 100,
                l1Misses: 20,
                l2Hits: 15,
                l2Misses: 5,
                l1HitRate: 83.33,
                l2HitRate: 75.0,
                overallHitRate: 80.0,
                l1Size: 50,
                evictions: 3,
                warmingOperations: 2,
                failovers: 1,
                criticalKeysCount: 5,
            };
            hybridCacheService.getMetrics.mockReturnValue(mockMetrics);
            // Act
            const result = await controller.getCacheMetrics();
            // Assert
            expect(result).toEqual({
                timestamp: expect.any(String),
                metrics: mockMetrics,
            });
            expect(hybridCacheService.getMetrics).toHaveBeenCalledTimes(1);
        });
    });
    describe('getAuditoriaMetrics', () => {
        it('deve retornar métricas detalhadas da auditoria', async () => {
            // Arrange
            const mockMetrics = {
                totalLogs: 1000,
                queuedLogs: 50,
                processedLogs: 950,
                failedLogs: 5,
                syncFallbacks: 10,
                fileFallbacks: 2,
                backupLogsCount: 3,
                averageProcessingTime: 150,
                queueSuccessRate: 95.0,
                overallSuccessRate: 99.5,
            };
            auditoriaService.getMetrics.mockReturnValue(mockMetrics);
            // Act
            const result = await controller.getAuditoriaMetrics();
            // Assert
            expect(result).toEqual({
                timestamp: expect.any(String),
                metrics: mockMetrics,
            });
            expect(auditoriaService.getMetrics).toHaveBeenCalledTimes(1);
        });
    });
    describe('forceCacheWarming', () => {
        it('deve executar cache warming com sucesso', async () => {
            // Arrange
            hybridCacheService.performCacheWarming.mockResolvedValue(undefined);
            // Act
            const result = await controller.forceCacheWarming();
            // Assert
            expect(result).toEqual({
                success: true,
                message: 'Cache warming iniciado com sucesso',
                timestamp: expect.any(String),
            });
            expect(hybridCacheService.performCacheWarming).toHaveBeenCalledTimes(1);
        });
        it('deve lidar com erro no cache warming', async () => {
            // Arrange
            const error = new Error('Cache warming failed');
            hybridCacheService.performCacheWarming.mockRejectedValue(error);
            // Act
            const result = await controller.forceCacheWarming();
            // Assert
            expect(result).toEqual({
                success: false,
                message: 'Erro ao executar cache warming: Cache warming failed',
                timestamp: expect.any(String),
            });
        });
    });
    describe('processBackupLogs', () => {
        it('deve processar logs de backup com sucesso', async () => {
            // Arrange
            const processedCount = 15;
            auditoriaService.processBackupLogs.mockResolvedValue(processedCount);
            // Act
            const result = await controller.processBackupLogs();
            // Assert
            expect(result).toEqual({
                success: true,
                message: `${processedCount} logs de backup processados com sucesso`,
                processedCount,
                timestamp: expect.any(String),
            });
            expect(auditoriaService.processBackupLogs).toHaveBeenCalledTimes(1);
        });
        it('deve lidar com erro no processamento de logs', async () => {
            // Arrange
            const error = new Error('Backup processing failed');
            auditoriaService.processBackupLogs.mockRejectedValue(error);
            // Act
            const result = await controller.processBackupLogs();
            // Assert
            expect(result).toEqual({
                success: false,
                message: 'Erro ao processar logs de backup: Backup processing failed',
                processedCount: 0,
                timestamp: expect.any(String),
            });
        });
    });
    describe('resetCacheMetrics', () => {
        it('deve resetar métricas do cache com sucesso', async () => {
            // Arrange
            hybridCacheService.resetMetrics.mockReturnValue(undefined);
            // Act
            const result = await controller.resetCacheMetrics();
            // Assert
            expect(result).toEqual({
                success: true,
                message: 'Métricas do cache resetadas com sucesso',
                timestamp: expect.any(String),
            });
            expect(hybridCacheService.resetMetrics).toHaveBeenCalledTimes(1);
        });
        it('deve lidar com erro ao resetar métricas', async () => {
            // Arrange
            const error = new Error('Reset failed');
            hybridCacheService.resetMetrics.mockImplementation(() => {
                throw error;
            });
            // Act
            const result = await controller.resetCacheMetrics();
            // Assert
            expect(result).toEqual({
                success: false,
                message: 'Erro ao resetar métricas do cache: Reset failed',
                timestamp: expect.any(String),
            });
        });
    });
    describe('resetAuditoriaMetrics', () => {
        it('deve resetar métricas da auditoria com sucesso', async () => {
            // Arrange
            auditoriaService.resetMetrics.mockReturnValue(undefined);
            // Act
            const result = await controller.resetAuditoriaMetrics();
            // Assert
            expect(result).toEqual({
                success: true,
                message: 'Métricas da auditoria resetadas com sucesso',
                timestamp: expect.any(String),
            });
            expect(auditoriaService.resetMetrics).toHaveBeenCalledTimes(1);
        });
        it('deve lidar com erro ao resetar métricas da auditoria', async () => {
            // Arrange
            const error = new Error('Auditoria reset failed');
            auditoriaService.resetMetrics.mockImplementation(() => {
                throw error;
            });
            // Act
            const result = await controller.resetAuditoriaMetrics();
            // Assert
            expect(result).toEqual({
                success: false,
                message: 'Erro ao resetar métricas da auditoria: Auditoria reset failed',
                timestamp: expect.any(String),
            });
        });
    });
    describe('clearCache', () => {
        it('deve limpar cache com sucesso', async () => {
            // Arrange
            hybridCacheService.clear.mockResolvedValue(undefined);
            // Act
            const result = await controller.clearCache();
            // Assert
            expect(result).toEqual({
                success: true,
                message: 'Cache limpo com sucesso',
                timestamp: expect.any(String),
            });
            expect(hybridCacheService.clear).toHaveBeenCalledTimes(1);
        });
        it('deve lidar com erro ao limpar cache', async () => {
            // Arrange
            const error = new Error('Clear cache failed');
            hybridCacheService.clear.mockRejectedValue(error);
            // Act
            const result = await controller.clearCache();
            // Assert
            expect(result).toEqual({
                success: false,
                message: 'Erro ao limpar cache: Clear cache failed',
                timestamp: expect.any(String),
            });
        });
    });
    describe('guards e decorators', () => {
        it('deve ter guards de autenticação e autorização configurados', () => {
            // Verificar se os guards estão aplicados através dos metadados
            const guards = Reflect.getMetadata('__guards__', resilience_monitoring_controller_1.ResilienceMonitoringController);
            expect(guards).toBeDefined();
        });
        it('deve ter role de ADMINISTRADOR configurada', () => {
            // Verificar se a role está aplicada através dos metadados
            const roles = Reflect.getMetadata('roles', resilience_monitoring_controller_1.ResilienceMonitoringController);
            expect(roles).toContain('ADMINISTRADOR');
        });
    });
    describe('tratamento de erros', () => {
        it('deve capturar e tratar erros inesperados', async () => {
            // Arrange
            hybridCacheService.getMetrics.mockImplementation(() => {
                throw new Error('Unexpected error');
            });
            // Act & Assert
            await expect(controller.getCacheMetrics()).rejects.toThrow('Unexpected error');
        });
        it('deve manter consistência nos formatos de resposta', async () => {
            // Arrange
            const mockMetrics = {
                l1Hits: 0,
                l1Misses: 0,
                l2Hits: 0,
                l2Misses: 0,
                l1HitRate: 0,
                l2HitRate: 0,
                overallHitRate: 0,
                l1Size: 0,
                evictions: 0,
                warmingOperations: 0,
                failovers: 0,
                criticalKeysCount: 0,
            };
            hybridCacheService.getMetrics.mockReturnValue(mockMetrics);
            // Act
            const result = await controller.getCacheMetrics();
            // Assert
            expect(result).toHaveProperty('timestamp');
            expect(result).toHaveProperty('metrics');
            expect(typeof result.timestamp).toBe('string');
            expect(typeof result.metrics).toBe('object');
        });
    });
    describe('validação de entrada', () => {
        it('deve aceitar requisições válidas', async () => {
            // Arrange
            hybridCacheService.performCacheWarming.mockResolvedValue(undefined);
            // Act
            const result = await controller.forceCacheWarming();
            // Assert
            expect(result.success).toBe(true);
        });
        it('deve manter estado consistente após operações', async () => {
            // Arrange
            hybridCacheService.resetMetrics.mockReturnValue(undefined);
            auditoriaService.resetMetrics.mockReturnValue(undefined);
            // Act
            await controller.resetCacheMetrics();
            await controller.resetAuditoriaMetrics();
            // Assert
            expect(hybridCacheService.resetMetrics).toHaveBeenCalledTimes(1);
            expect(auditoriaService.resetMetrics).toHaveBeenCalledTimes(1);
        });
    });
    describe('performance e timeout', () => {
        it('deve completar operações em tempo hábil', async () => {
            // Arrange
            const startTime = Date.now();
            hybridCacheService.getMetrics.mockReturnValue({
                l1Hits: 100,
                l1Misses: 20,
                l2Hits: 15,
                l2Misses: 5,
                l1HitRate: 83.33,
                l2HitRate: 75.0,
                overallHitRate: 80.0,
                l1Size: 50,
                evictions: 3,
                warmingOperations: 2,
                failovers: 1,
                criticalKeysCount: 5,
            });
            // Act
            await controller.getCacheMetrics();
            const endTime = Date.now();
            // Assert
            expect(endTime - startTime).toBeLessThan(1000); // Menos de 1 segundo
        });
        it('deve lidar com operações assíncronas longas', async () => {
            // Arrange
            hybridCacheService.performCacheWarming.mockImplementation(async () => {
                await new Promise((resolve) => setTimeout(resolve, 100)); // Simular operação lenta
            });
            // Act
            const result = await controller.forceCacheWarming();
            // Assert
            expect(result.success).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcY29udHJvbGxlcnNcXHJlc2lsaWVuY2UtbW9uaXRvcmluZy5jb250cm9sbGVyLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBc0Q7QUFDdEQseUZBQW9GO0FBQ3BGLDJFQUFzRTtBQUN0RSx5RkFBb0Y7QUFDcEYsMkVBQXNFO0FBQ3RFLHFFQUFnRTtBQUNoRSwrREFBMkQ7QUFHM0QsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtJQUM5QyxJQUFJLFVBQTBDLENBQUM7SUFDL0MsSUFBSSxrQkFBbUQsQ0FBQztJQUN4RCxJQUFJLGdCQUF3RCxDQUFDO0lBQzdELElBQUksa0JBQW1ELENBQUM7SUFFeEQsTUFBTSxRQUFRLEdBQUc7UUFDZixFQUFFLEVBQUUsQ0FBQztRQUNMLEtBQUssRUFBRSxnQkFBZ0I7UUFDdkIsTUFBTSxFQUFFLGVBQWU7S0FDeEIsQ0FBQztJQUVGLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBa0IsTUFBTSxjQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0QsV0FBVyxFQUFFLENBQUMsaUVBQThCLENBQUM7WUFDN0MsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSx5Q0FBa0I7b0JBQzNCLFFBQVEsRUFBRTt3QkFDUixVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTt3QkFDckIsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7d0JBQ3BCLG1CQUFtQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7d0JBQzlCLFlBQVksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO3dCQUN2QixLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtxQkFDakI7aUJBQ0Y7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLHVEQUF5QjtvQkFDbEMsUUFBUSxFQUFFO3dCQUNSLFVB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SUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRTNCLFNBQVM7WUFDVCxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHFCQUFxQjtRQUN2RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRCxVQUFVO1lBQ1Ysa0JBQWtCLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsS0FBSyxJQUFJLEVBQUU7Z0JBQ25FLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLHlCQUF5QjtZQUNyRixDQUFDLENBQUMsQ0FBQztZQUVILE1BQU07WUFDTixNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBRXBELFNBQVM7WUFDVCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcY29udHJvbGxlcnNcXHJlc2lsaWVuY2UtbW9uaXRvcmluZy5jb250cm9sbGVyLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBSZXNpbGllbmNlTW9uaXRvcmluZ0NvbnRyb2xsZXIgfSBmcm9tICcuL3Jlc2lsaWVuY2UtbW9uaXRvcmluZy5jb250cm9sbGVyJztcbmltcG9ydCB7IEh5YnJpZENhY2hlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2h5YnJpZC1jYWNoZS5zZXJ2aWNlJztcbmltcG9ydCB7IFJlc2lsaWVudEF1ZGl0b3JpYVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9yZXNpbGllbnQtYXVkaXRvcmlhLnNlcnZpY2UnO1xuaW1wb3J0IHsgSGVhbHRoQ2hlY2tTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaGVhbHRoLWNoZWNrLnNlcnZpY2UnO1xuaW1wb3J0IHsgSnd0QXV0aEd1YXJkIH0gZnJvbSAnLi4vLi4vYXV0aC9ndWFyZHMvand0LWF1dGguZ3VhcmQnO1xuaW1wb3J0IHsgUm9sZXNHdWFyZCB9IGZyb20gJy4uLy4uL2F1dGgvZ3VhcmRzL3JvbGVzLmd1YXJkJztcbmltcG9ydCB7IEV4ZWN1dGlvbkNvbnRleHQgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5cbmRlc2NyaWJlKCdSZXNpbGllbmNlTW9uaXRvcmluZ0NvbnRyb2xsZXInLCAoKSA9PiB7XG4gIGxldCBjb250cm9sbGVyOiBSZXNpbGllbmNlTW9uaXRvcmluZ0NvbnRyb2xsZXI7XG4gIGxldCBoeWJyaWRDYWNoZVNlcnZpY2U6IGplc3QuTW9ja2VkPEh5YnJpZENhY2hlU2VydmljZT47XG4gIGxldCBhdWRpdG9yaWFTZXJ2aWNlOiBqZXN0Lk1vY2tlZDxSZXNpbGllbnRBdWRpdG9yaWFTZXJ2aWNlPjtcbiAgbGV0IGhlYWx0aENoZWNrU2VydmljZTogamVzdC5Nb2NrZWQ8SGVhbHRoQ2hlY2tTZXJ2aWNlPjtcblxuICBjb25zdCBtb2NrVXNlciA9IHtcbiAgICBpZDogMSxcbiAgICBlbWFpbDogJ2FkbWluQHRlc3QuY29tJyxcbiAgICBwZXJmaWw6ICdBRE1JTklTVFJBRE9SJyxcbiAgfTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgY29udHJvbGxlcnM6IFtSZXNpbGllbmNlTW9uaXRvcmluZ0NvbnRyb2xsZXJdLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBIeWJyaWRDYWNoZVNlcnZpY2UsXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIGdldE1ldHJpY3M6IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGdldFN0YXR1czogamVzdC5mbigpLFxuICAgICAgICAgICAgcGVyZm9ybUNhY2hlV2FybWluZzogamVzdC5mbigpLFxuICAgICAgICAgICAgcmVzZXRNZXRyaWNzOiBqZXN0LmZuKCksXG4gICAgICAgICAgICBjbGVhcjogamVzdC5mbigpLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBSZXNpbGllbnRBdWRpdG9yaWFTZXJ2aWNlLFxuICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICBnZXRNZXRyaWNzOiBqZXN0LmZuKCksXG4gICAgICAgICAgICBnZXRTdGF0dXM6IGplc3QuZm4oKSxcbiAgICAgICAgICAgIHByb2Nlc3NCYWNrdXBMb2dzOiBqZXN0LmZuKCksXG4gICAgICAgICAgICByZXNldE1ldHJpY3M6IGplc3QuZm4oKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogSGVhbHRoQ2hlY2tTZXJ2aWNlLFxuICAgICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgICBnZXRTZXJ2aWNlc1N0YXR1czogamVzdC5mbigpLFxuICAgICAgICAgICAgY2hlY2tSZWRpc0Nvbm5lY3Rpb246IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGNoZWNrRGF0YWJhc2VDb25uZWN0aW9uOiBqZXN0LmZuKCksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSlcbiAgICAgIC5vdmVycmlkZUd1YXJkKEp3dEF1dGhHdWFyZClcbiAgICAgIC51c2VWYWx1ZSh7XG4gICAgICAgIGNhbkFjdGl2YXRlOiAoY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlcSA9IGNvbnRleHQuc3dpdGNoVG9IdHRwKCkuZ2V0UmVxdWVzdCgpO1xuICAgICAgICAgIHJlcS51c2VyID0gbW9ja1VzZXI7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgLm92ZXJyaWRlR3VhcmQoUm9sZXNHdWFyZClcbiAgICAgIC51c2VWYWx1ZSh7XG4gICAgICAgIGNhbkFjdGl2YXRlOiAoKSA9PiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5jb21waWxlKCk7XG5cbiAgICBjb250cm9sbGVyID0gbW9kdWxlLmdldDxSZXNpbGllbmNlTW9uaXRvcmluZ0NvbnRyb2xsZXI+KFxuICAgICAgUmVzaWxpZW5jZU1vbml0b3JpbmdDb250cm9sbGVyLFxuICAgICk7XG4gICAgaHlicmlkQ2FjaGVTZXJ2aWNlID0gbW9kdWxlLmdldChIeWJyaWRDYWNoZVNlcnZpY2UpO1xuICAgIGF1ZGl0b3JpYVNlcnZpY2UgPSBtb2R1bGUuZ2V0KFJlc2lsaWVudEF1ZGl0b3JpYVNlcnZpY2UpO1xuICAgIGhlYWx0aENoZWNrU2VydmljZSA9IG1vZHVsZS5nZXQoSGVhbHRoQ2hlY2tTZXJ2aWNlKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFN5c3RlbVN0YXR1cycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSByZXRvcm5hciBzdGF0dXMgZ2VyYWwgZG8gc2lzdGVtYScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IG1vY2tTZXJ2aWNlc1N0YXR1cyA9IHtcbiAgICAgICAgcmVkaXM6IHsgc3RhdHVzOiAndXAnLCByZXNwb25zZVRpbWU6IDEwIH0sXG4gICAgICAgIGRhdGFiYXNlOiB7IHN0YXR1czogJ3VwJywgcmVzcG9uc2VUaW1lOiA1IH0sXG4gICAgICAgIHF1ZXVlOiB7IHN0YXR1czogJ3VwJywgcmVzcG9uc2VUaW1lOiAxNSB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja0NhY2hlU3RhdHVzID0ge1xuICAgICAgICBsMUF2YWlsYWJsZTogdHJ1ZSxcbiAgICAgICAgbDJBdmFpbGFibGU6IHRydWUsXG4gICAgICAgIGNpcmN1aXRCcmVha2VyU3RhdGU6ICdDTE9TRUQnLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja0F1ZGl0b3JpYVN0YXR1cyA9IHtcbiAgICAgICAgcXVldWVFbmFibGVkOiB0cnVlLFxuICAgICAgICBzeW5jRmFsbGJhY2tFbmFibGVkOiB0cnVlLFxuICAgICAgICBmaWxlRmFsbGJhY2tFbmFibGVkOiB0cnVlLFxuICAgICAgICBiYWNrdXBMb2dzQ291bnQ6IDAsXG4gICAgICB9O1xuXG4gICAgICBoZWFsdGhDaGVja1NlcnZpY2UuZ2V0U2VydmljZXNTdGF0dXMubW9ja1JldHVyblZhbHVlKG1vY2tTZXJ2aWNlc1N0YXR1cyk7XG4gICAgICBoeWJyaWRDYWNoZVNlcnZpY2UuZ2V0U3RhdHVzLm1vY2tSZXR1cm5WYWx1ZShtb2NrQ2FjaGVTdGF0dXMpO1xuICAgICAgYXVkaXRvcmlhU2VydmljZS5nZXRTdGF0dXMubW9ja1JldHVyblZhbHVlKG1vY2tBdWRpdG9yaWFTdGF0dXMpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZ2V0U3lzdGVtU3RhdHVzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICBvdmVyYWxsU3RhdHVzOiAnaGVhbHRoeScsXG4gICAgICAgIHNlcnZpY2VzOiBtb2NrU2VydmljZXNTdGF0dXMsXG4gICAgICAgIGNhY2hlOiBtb2NrQ2FjaGVTdGF0dXMsXG4gICAgICAgIGF1ZGl0b3JpYTogbW9ja0F1ZGl0b3JpYVN0YXR1cyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgcmV0b3JuYXIgc3RhdHVzIGRlZ3JhZGVkIHF1YW5kbyBow6EgcHJvYmxlbWFzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbW9ja1NlcnZpY2VzU3RhdHVzID0ge1xuICAgICAgICByZWRpczogeyBzdGF0dXM6ICdkb3duJywgcmVzcG9uc2VUaW1lOiBudWxsIH0sXG4gICAgICAgIGRhdGFiYXNlOiB7IHN0YXR1czogJ3VwJywgcmVzcG9uc2VUaW1lOiA1IH0sXG4gICAgICAgIHF1ZXVlOiB7IHN0YXR1czogJ2Rvd24nLCByZXNwb25zZVRpbWU6IG51bGwgfSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG1vY2tDYWNoZVN0YXR1cyA9IHtcbiAgICAgICAgbDFBdmFpbGFibGU6IHRydWUsXG4gICAgICAgIGwyQXZhaWxhYmxlOiBmYWxzZSxcbiAgICAgICAgY2lyY3VpdEJyZWFrZXJTdGF0ZTogJ09QRU4nLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja0F1ZGl0b3JpYVN0YXR1cyA9IHtcbiAgICAgICAgcXVldWVFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgc3luY0ZhbGxiYWNrRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZmlsZUZhbGxiYWNrRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgYmFja3VwTG9nc0NvdW50OiA1LFxuICAgICAgfTtcblxuICAgICAgaGVhbHRoQ2hlY2tTZXJ2aWNlLmdldFNlcnZpY2VzU3RhdHVzLm1vY2tSZXR1cm5WYWx1ZShtb2NrU2VydmljZXNTdGF0dXMpO1xuICAgICAgaHlicmlkQ2FjaGVTZXJ2aWNlLmdldFN0YXR1cy5tb2NrUmV0dXJuVmFsdWUobW9ja0NhY2hlU3RhdHVzKTtcbiAgICAgIGF1ZGl0b3JpYVNlcnZpY2UuZ2V0U3RhdHVzLm1vY2tSZXR1cm5WYWx1ZShtb2NrQXVkaXRvcmlhU3RhdHVzKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmdldFN5c3RlbVN0YXR1cygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQub3ZlcmFsbFN0YXR1cykudG9CZSgnZGVncmFkZWQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuc2VydmljZXMpLnRvRXF1YWwobW9ja1NlcnZpY2VzU3RhdHVzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY2FjaGUpLnRvRXF1YWwobW9ja0NhY2hlU3RhdHVzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYXVkaXRvcmlhKS50b0VxdWFsKG1vY2tBdWRpdG9yaWFTdGF0dXMpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgcmV0b3JuYXIgc3RhdHVzIGNyaXRpY2FsIHF1YW5kbyBzaXN0ZW1hIHByaW5jaXBhbCBlc3TDoSBkb3duJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbW9ja1NlcnZpY2VzU3RhdHVzID0ge1xuICAgICAgICByZWRpczogeyBzdGF0dXM6ICdkb3duJywgcmVzcG9uc2VUaW1lOiBudWxsIH0sXG4gICAgICAgIGRhdGFiYXNlOiB7IHN0YXR1czogJ2Rvd24nLCByZXNwb25zZVRpbWU6IG51bGwgfSxcbiAgICAgICAgcXVldWU6IHsgc3RhdHVzOiAnZG93bicsIHJlc3BvbnNlVGltZTogbnVsbCB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja0NhY2hlU3RhdHVzID0ge1xuICAgICAgICBsMUF2YWlsYWJsZTogZmFsc2UsXG4gICAgICAgIGwyQXZhaWxhYmxlOiBmYWxzZSxcbiAgICAgICAgY2lyY3VpdEJyZWFrZXJTdGF0ZTogJ09QRU4nLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja0F1ZGl0b3JpYVN0YXR1cyA9IHtcbiAgICAgICAgcXVldWVFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgc3luY0ZhbGxiYWNrRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGZpbGVGYWxsYmFja0VuYWJsZWQ6IHRydWUsXG4gICAgICAgIGJhY2t1cExvZ3NDb3VudDogMTAsXG4gICAgICB9O1xuXG4gICAgICBoZWFsdGhDaGVja1NlcnZpY2UuZ2V0U2VydmljZXNTdGF0dXMubW9ja1JldHVyblZhbHVlKG1vY2tTZXJ2aWNlc1N0YXR1cyk7XG4gICAgICBoeWJyaWRDYWNoZVNlcnZpY2UuZ2V0U3RhdHVzLm1vY2tSZXR1cm5WYWx1ZShtb2NrQ2FjaGVTdGF0dXMpO1xuICAgICAgYXVkaXRvcmlhU2VydmljZS5nZXRTdGF0dXMubW9ja1JldHVyblZhbHVlKG1vY2tBdWRpdG9yaWFTdGF0dXMpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZ2V0U3lzdGVtU3RhdHVzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdC5vdmVyYWxsU3RhdHVzKS50b0JlKCdjcml0aWNhbCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0Q2FjaGVNZXRyaWNzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHJldG9ybmFyIG3DqXRyaWNhcyBkZXRhbGhhZGFzIGRvIGNhY2hlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgbW9ja01ldHJpY3MgPSB7XG4gICAgICAgIGwxSGl0czogMTAwLFxuICAgICAgICBsMU1pc3NlczogMjAsXG4gICAgICAgIGwySGl0czogMTUsXG4gICAgICAgIGwyTWlzc2VzOiA1LFxuICAgICAgICBsMUhpdFJhdGU6IDgzLjMzLFxuICAgICAgICBsMkhpdFJhdGU6IDc1LjAsXG4gICAgICAgIG92ZXJhbGxIaXRSYXRlOiA4MC4wLFxuICAgICAgICBsMVNpemU6IDUwLFxuICAgICAgICBldmljdGlvbnM6IDMsXG4gICAgICAgIHdhcm1pbmdPcGVyYXRpb25zOiAyLFxuICAgICAgICBmYWlsb3ZlcnM6IDEsXG4gICAgICAgIGNyaXRpY2FsS2V5c0NvdW50OiA1LFxuICAgICAgfTtcblxuICAgICAgaHlicmlkQ2FjaGVTZXJ2aWNlLmdldE1ldHJpY3MubW9ja1JldHVyblZhbHVlKG1vY2tNZXRyaWNzKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmdldENhY2hlTWV0cmljcygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgICAgbWV0cmljczogbW9ja01ldHJpY3MsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChoeWJyaWRDYWNoZVNlcnZpY2UuZ2V0TWV0cmljcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0QXVkaXRvcmlhTWV0cmljcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSByZXRvcm5hciBtw6l0cmljYXMgZGV0YWxoYWRhcyBkYSBhdWRpdG9yaWEnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBtb2NrTWV0cmljcyA9IHtcbiAgICAgICAgdG90YWxMb2dzOiAxMDAwLFxuICAgICAgICBxdWV1ZWRMb2dzOiA1MCxcbiAgICAgICAgcHJvY2Vzc2VkTG9nczogOTUwLFxuICAgICAgICBmYWlsZWRMb2dzOiA1LFxuICAgICAgICBzeW5jRmFsbGJhY2tzOiAxMCxcbiAgICAgICAgZmlsZUZhbGxiYWNrczogMixcbiAgICAgICAgYmFja3VwTG9nc0NvdW50OiAzLFxuICAgICAgICBhdmVyYWdlUHJvY2Vzc2luZ1RpbWU6IDE1MCxcbiAgICAgICAgcXVldWVTdWNjZXNzUmF0ZTogOTUuMCxcbiAgICAgICAgb3ZlcmFsbFN1Y2Nlc3NSYXRlOiA5OS41LFxuICAgICAgfTtcblxuICAgICAgYXVkaXRvcmlhU2VydmljZS5nZXRNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZShtb2NrTWV0cmljcyk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5nZXRBdWRpdG9yaWFNZXRyaWNzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgICBtZXRyaWNzOiBtb2NrTWV0cmljcyxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGF1ZGl0b3JpYVNlcnZpY2UuZ2V0TWV0cmljcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZm9yY2VDYWNoZVdhcm1pbmcnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgZXhlY3V0YXIgY2FjaGUgd2FybWluZyBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGh5YnJpZENhY2hlU2VydmljZS5wZXJmb3JtQ2FjaGVXYXJtaW5nLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5mb3JjZUNhY2hlV2FybWluZygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnQ2FjaGUgd2FybWluZyBpbmljaWFkbyBjb20gc3VjZXNzbycsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QoaHlicmlkQ2FjaGVTZXJ2aWNlLnBlcmZvcm1DYWNoZVdhcm1pbmcpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGxpZGFyIGNvbSBlcnJvIG5vIGNhY2hlIHdhcm1pbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignQ2FjaGUgd2FybWluZyBmYWlsZWQnKTtcbiAgICAgIGh5YnJpZENhY2hlU2VydmljZS5wZXJmb3JtQ2FjaGVXYXJtaW5nLm1vY2tSZWplY3RlZFZhbHVlKGVycm9yKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmZvcmNlQ2FjaGVXYXJtaW5nKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAnRXJybyBhbyBleGVjdXRhciBjYWNoZSB3YXJtaW5nOiBDYWNoZSB3YXJtaW5nIGZhaWxlZCcsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwcm9jZXNzQmFja3VwTG9ncycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBwcm9jZXNzYXIgbG9ncyBkZSBiYWNrdXAgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBwcm9jZXNzZWRDb3VudCA9IDE1O1xuICAgICAgYXVkaXRvcmlhU2VydmljZS5wcm9jZXNzQmFja3VwTG9ncy5tb2NrUmVzb2x2ZWRWYWx1ZShwcm9jZXNzZWRDb3VudCk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5wcm9jZXNzQmFja3VwTG9ncygpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiBgJHtwcm9jZXNzZWRDb3VudH0gbG9ncyBkZSBiYWNrdXAgcHJvY2Vzc2Fkb3MgY29tIHN1Y2Vzc29gLFxuICAgICAgICBwcm9jZXNzZWRDb3VudCxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChhdWRpdG9yaWFTZXJ2aWNlLnByb2Nlc3NCYWNrdXBMb2dzKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBsaWRhciBjb20gZXJybyBubyBwcm9jZXNzYW1lbnRvIGRlIGxvZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignQmFja3VwIHByb2Nlc3NpbmcgZmFpbGVkJyk7XG4gICAgICBhdWRpdG9yaWFTZXJ2aWNlLnByb2Nlc3NCYWNrdXBMb2dzLm1vY2tSZWplY3RlZFZhbHVlKGVycm9yKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLnByb2Nlc3NCYWNrdXBMb2dzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAnRXJybyBhbyBwcm9jZXNzYXIgbG9ncyBkZSBiYWNrdXA6IEJhY2t1cCBwcm9jZXNzaW5nIGZhaWxlZCcsXG4gICAgICAgIHByb2Nlc3NlZENvdW50OiAwLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVzZXRDYWNoZU1ldHJpY3MnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcmVzZXRhciBtw6l0cmljYXMgZG8gY2FjaGUgY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBoeWJyaWRDYWNoZVNlcnZpY2UucmVzZXRNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIucmVzZXRDYWNoZU1ldHJpY3MoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ03DqXRyaWNhcyBkbyBjYWNoZSByZXNldGFkYXMgY29tIHN1Y2Vzc28nLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGh5YnJpZENhY2hlU2VydmljZS5yZXNldE1ldHJpY3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGxpZGFyIGNvbSBlcnJvIGFvIHJlc2V0YXIgbcOpdHJpY2FzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1Jlc2V0IGZhaWxlZCcpO1xuICAgICAgaHlicmlkQ2FjaGVTZXJ2aWNlLnJlc2V0TWV0cmljcy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIucmVzZXRDYWNoZU1ldHJpY3MoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvIGFvIHJlc2V0YXIgbcOpdHJpY2FzIGRvIGNhY2hlOiBSZXNldCBmYWlsZWQnLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVzZXRBdWRpdG9yaWFNZXRyaWNzJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIHJlc2V0YXIgbcOpdHJpY2FzIGRhIGF1ZGl0b3JpYSBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGF1ZGl0b3JpYVNlcnZpY2UucmVzZXRNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIucmVzZXRBdWRpdG9yaWFNZXRyaWNzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2U6ICdNw6l0cmljYXMgZGEgYXVkaXRvcmlhIHJlc2V0YWRhcyBjb20gc3VjZXNzbycsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QoYXVkaXRvcmlhU2VydmljZS5yZXNldE1ldHJpY3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGxpZGFyIGNvbSBlcnJvIGFvIHJlc2V0YXIgbcOpdHJpY2FzIGRhIGF1ZGl0b3JpYScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdBdWRpdG9yaWEgcmVzZXQgZmFpbGVkJyk7XG4gICAgICBhdWRpdG9yaWFTZXJ2aWNlLnJlc2V0TWV0cmljcy5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIucmVzZXRBdWRpdG9yaWFNZXRyaWNzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICdFcnJvIGFvIHJlc2V0YXIgbcOpdHJpY2FzIGRhIGF1ZGl0b3JpYTogQXVkaXRvcmlhIHJlc2V0IGZhaWxlZCcsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjbGVhckNhY2hlJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGxpbXBhciBjYWNoZSBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGh5YnJpZENhY2hlU2VydmljZS5jbGVhci5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuY2xlYXJDYWNoZSgpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlOiAnQ2FjaGUgbGltcG8gY29tIHN1Y2Vzc28nLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGh5YnJpZENhY2hlU2VydmljZS5jbGVhcikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGVycm8gYW8gbGltcGFyIGNhY2hlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0NsZWFyIGNhY2hlIGZhaWxlZCcpO1xuICAgICAgaHlicmlkQ2FjaGVTZXJ2aWNlLmNsZWFyLm1vY2tSZWplY3RlZFZhbHVlKGVycm9yKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmNsZWFyQ2FjaGUoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvIGFvIGxpbXBhciBjYWNoZTogQ2xlYXIgY2FjaGUgZmFpbGVkJyxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2d1YXJkcyBlIGRlY29yYXRvcnMnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgdGVyIGd1YXJkcyBkZSBhdXRlbnRpY2HDp8OjbyBlIGF1dG9yaXphw6fDo28gY29uZmlndXJhZG9zJywgKCkgPT4ge1xuICAgICAgLy8gVmVyaWZpY2FyIHNlIG9zIGd1YXJkcyBlc3TDo28gYXBsaWNhZG9zIGF0cmF2w6lzIGRvcyBtZXRhZGFkb3NcbiAgICAgIGNvbnN0IGd1YXJkcyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXG4gICAgICAgICdfX2d1YXJkc19fJyxcbiAgICAgICAgUmVzaWxpZW5jZU1vbml0b3JpbmdDb250cm9sbGVyLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChndWFyZHMpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSB0ZXIgcm9sZSBkZSBBRE1JTklTVFJBRE9SIGNvbmZpZ3VyYWRhJywgKCkgPT4ge1xuICAgICAgLy8gVmVyaWZpY2FyIHNlIGEgcm9sZSBlc3TDoSBhcGxpY2FkYSBhdHJhdsOpcyBkb3MgbWV0YWRhZG9zXG4gICAgICBjb25zdCByb2xlcyA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXG4gICAgICAgICdyb2xlcycsXG4gICAgICAgIFJlc2lsaWVuY2VNb25pdG9yaW5nQ29udHJvbGxlcixcbiAgICAgICk7XG4gICAgICBleHBlY3Qocm9sZXMpLnRvQ29udGFpbignQURNSU5JU1RSQURPUicpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndHJhdGFtZW50byBkZSBlcnJvcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBjYXB0dXJhciBlIHRyYXRhciBlcnJvcyBpbmVzcGVyYWRvcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGh5YnJpZENhY2hlU2VydmljZS5nZXRNZXRyaWNzLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBlcnJvcicpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIEFjdCAmIEFzc2VydFxuICAgICAgYXdhaXQgZXhwZWN0KGNvbnRyb2xsZXIuZ2V0Q2FjaGVNZXRyaWNzKCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ1VuZXhwZWN0ZWQgZXJyb3InLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIG1hbnRlciBjb25zaXN0w6puY2lhIG5vcyBmb3JtYXRvcyBkZSByZXNwb3N0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IG1vY2tNZXRyaWNzID0ge1xuICAgICAgICBsMUhpdHM6IDAsXG4gICAgICAgIGwxTWlzc2VzOiAwLFxuICAgICAgICBsMkhpdHM6IDAsXG4gICAgICAgIGwyTWlzc2VzOiAwLFxuICAgICAgICBsMUhpdFJhdGU6IDAsXG4gICAgICAgIGwySGl0UmF0ZTogMCxcbiAgICAgICAgb3ZlcmFsbEhpdFJhdGU6IDAsXG4gICAgICAgIGwxU2l6ZTogMCxcbiAgICAgICAgZXZpY3Rpb25zOiAwLFxuICAgICAgICB3YXJtaW5nT3BlcmF0aW9uczogMCxcbiAgICAgICAgZmFpbG92ZXJzOiAwLFxuICAgICAgICBjcml0aWNhbEtleXNDb3VudDogMCxcbiAgICAgIH07XG5cbiAgICAgIGh5YnJpZENhY2hlU2VydmljZS5nZXRNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZShtb2NrTWV0cmljcyk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5nZXRDYWNoZU1ldHJpY3MoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgndGltZXN0YW1wJyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0hhdmVQcm9wZXJ0eSgnbWV0cmljcycpO1xuICAgICAgZXhwZWN0KHR5cGVvZiByZXN1bHQudGltZXN0YW1wKS50b0JlKCdzdHJpbmcnKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgcmVzdWx0Lm1ldHJpY3MpLnRvQmUoJ29iamVjdCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndmFsaWRhw6fDo28gZGUgZW50cmFkYScsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBhY2VpdGFyIHJlcXVpc2nDp8O1ZXMgdsOhbGlkYXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBoeWJyaWRDYWNoZVNlcnZpY2UucGVyZm9ybUNhY2hlV2FybWluZy5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZm9yY2VDYWNoZVdhcm1pbmcoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBtYW50ZXIgZXN0YWRvIGNvbnNpc3RlbnRlIGFww7NzIG9wZXJhw6fDtWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgaHlicmlkQ2FjaGVTZXJ2aWNlLnJlc2V0TWV0cmljcy5tb2NrUmV0dXJuVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgIGF1ZGl0b3JpYVNlcnZpY2UucmVzZXRNZXRyaWNzLm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGF3YWl0IGNvbnRyb2xsZXIucmVzZXRDYWNoZU1ldHJpY3MoKTtcbiAgICAgIGF3YWl0IGNvbnRyb2xsZXIucmVzZXRBdWRpdG9yaWFNZXRyaWNzKCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KGh5YnJpZENhY2hlU2VydmljZS5yZXNldE1ldHJpY3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgIGV4cGVjdChhdWRpdG9yaWFTZXJ2aWNlLnJlc2V0TWV0cmljcykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGVyZm9ybWFuY2UgZSB0aW1lb3V0JywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGNvbXBsZXRhciBvcGVyYcOnw7VlcyBlbSB0ZW1wbyBow6FiaWwnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgaHlicmlkQ2FjaGVTZXJ2aWNlLmdldE1ldHJpY3MubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgbDFIaXRzOiAxMDAsXG4gICAgICAgIGwxTWlzc2VzOiAyMCxcbiAgICAgICAgbDJIaXRzOiAxNSxcbiAgICAgICAgbDJNaXNzZXM6IDUsXG4gICAgICAgIGwxSGl0UmF0ZTogODMuMzMsXG4gICAgICAgIGwySGl0UmF0ZTogNzUuMCxcbiAgICAgICAgb3ZlcmFsbEhpdFJhdGU6IDgwLjAsXG4gICAgICAgIGwxU2l6ZTogNTAsXG4gICAgICAgIGV2aWN0aW9uczogMyxcbiAgICAgICAgd2FybWluZ09wZXJhdGlvbnM6IDIsXG4gICAgICAgIGZhaWxvdmVyczogMSxcbiAgICAgICAgY3JpdGljYWxLZXlzQ291bnQ6IDUsXG4gICAgICB9KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCBjb250cm9sbGVyLmdldENhY2hlTWV0cmljcygpO1xuICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KGVuZFRpbWUgLSBzdGFydFRpbWUpLnRvQmVMZXNzVGhhbigxMDAwKTsgLy8gTWVub3MgZGUgMSBzZWd1bmRvXG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBsaWRhciBjb20gb3BlcmHDp8O1ZXMgYXNzw61uY3JvbmFzIGxvbmdhcycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGh5YnJpZENhY2hlU2VydmljZS5wZXJmb3JtQ2FjaGVXYXJtaW5nLm1vY2tJbXBsZW1lbnRhdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMCkpOyAvLyBTaW11bGFyIG9wZXJhw6fDo28gbGVudGFcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZm9yY2VDYWNoZVdhcm1pbmcoKTtcblxuICAgICAgLy8gQXNzZXJ0XG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=