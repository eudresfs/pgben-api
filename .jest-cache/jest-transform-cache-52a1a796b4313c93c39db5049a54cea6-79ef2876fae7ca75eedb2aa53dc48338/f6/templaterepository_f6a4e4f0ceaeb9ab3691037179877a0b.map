{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\template.repository.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAqC;AACrC,uEAA6D;AAG7D;;;;GAIG;AAEI,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAGV;IAFnB,YAEmB,UAAgC;QAAhC,eAAU,GAAV,UAAU,CAAsB;IAChD,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,IAAuB;QACnC,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,WAAW;YAClB,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;SACtC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,QAAkB;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU,CAAC,IAAsB;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,EAAE,IAAI,EAAE;YACf,KAAK,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;SACzB,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QACjE,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;CACF,CAAA;AAlEY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,0BAAQ,CAAC,CAAA;yDACE,oBAAU,oBAAV,oBAAU;GAH9B,kBAAkB,CAkE9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\template.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Template } from '../../../entities/template.entity';\nimport { TemplateTipoEnum } from '../../../enums/template-tipo.enum';\n\n/**\n * Repositório para gerenciamento de templates do sistema\n *\n * Fornece operações de acesso a dados para entidade Template\n */\n@Injectable()\nexport class TemplateRepository {\n  constructor(\n    @InjectRepository(Template)\n    private readonly repository: Repository<Template>,\n  ) {}\n\n  /**\n   * Encontra um template por seu código\n   * @param codigo Código do template\n   * @returns Template encontrado ou null\n   */\n  async findByCodigo(codigo: string): Promise<Template | null> {\n    return this.repository.findOne({ where: { codigo } });\n  }\n\n  /**\n   * Busca todos os templates do sistema\n   * @param tipo Tipo opcional para filtrar templates\n   * @returns Lista de templates\n   */\n  async findAll(tipo?: TemplateTipoEnum): Promise<Template[]> {\n    const whereClause = tipo ? { tipo } : {};\n    return this.repository.find({\n      where: whereClause,\n      order: { tipo: 'ASC', codigo: 'ASC' },\n    });\n  }\n\n  /**\n   * Salva um template no banco de dados\n   * @param template Template a ser salvo\n   * @returns Template salvo\n   */\n  async save(template: Template): Promise<Template> {\n    return this.repository.save(template);\n  }\n\n  /**\n   * Remove um template do banco de dados\n   * @param id ID do template a ser removido\n   */\n  async remove(id: number): Promise<void> {\n    await this.repository.delete(id);\n  }\n\n  /**\n   * Busca templates por tipo\n   * @param tipo Tipo dos templates\n   * @returns Lista de templates do tipo\n   */\n  async findByTipo(tipo: TemplateTipoEnum): Promise<Template[]> {\n    return this.repository.find({\n      where: { tipo },\n      order: { codigo: 'ASC' },\n    });\n  }\n\n  /**\n   * Verifica se existe um template com o código especificado\n   * @param codigo Código do template\n   * @returns true se existir, false caso contrário\n   */\n  async existsByCodigo(codigo: string): Promise<boolean> {\n    const count = await this.repository.count({ where: { codigo } });\n    return count > 0;\n  }\n}\n"],"version":3}