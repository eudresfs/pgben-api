4553596f3b3f09c8cc87276f95f16f25
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecursoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const recurso_entity_1 = require("../../../entities/recurso.entity");
const recurso_historico_entity_1 = require("../../../entities/recurso-historico.entity");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const recurso_response_dto_1 = require("../dto/recurso-response.dto");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
/**
 * Serviço de Recursos de Primeira Instância
 *
 * Responsável pela lógica de negócio relacionada aos recursos de primeira instância
 * para solicitações de benefícios indeferidas
 */
let RecursoService = class RecursoService {
    recursoRepository;
    historicoRepository;
    solicitacaoRepository;
    connection;
    constructor(recursoRepository, historicoRepository, solicitacaoRepository, connection) {
        this.recursoRepository = recursoRepository;
        this.historicoRepository = historicoRepository;
        this.solicitacaoRepository = solicitacaoRepository;
        this.connection = connection;
    }
    /**
     * Lista todos os recursos com paginação e filtros
     */
    async findAll(options) {
        const { page = 1, limit = 10, status, solicitacao_id, setor_id, data_inicio, data_fim, user, } = options;
        const queryBuilder = this.recursoRepository.createQueryBuilder('recurso');
        // Joins necessários
        queryBuilder
            .leftJoinAndSelect('recurso.solicitacao', 'solicitacao')
            .leftJoinAndSelect('solicitacao.beneficiario', 'beneficiario')
            .leftJoinAndSelect('recurso.analista', 'analista')
            .leftJoinAndSelect('recurso.setor_responsavel', 'setor');
        // Aplicar filtros
        if (status) {
            queryBuilder.andWhere('recurso.status = :status', { status });
        }
        if (solicitacao_id) {
            queryBuilder.andWhere('recurso.solicitacao_id = :solicitacao_id', {
                solicitacao_id,
            });
        }
        if (setor_id) {
            queryBuilder.andWhere('recurso.setor_responsavel_id = :setor_id', {
                setor_id,
            });
        }
        // Filtro por período
        if (data_inicio && data_fim) {
            const inicio = new Date(data_inicio);
            const fim = new Date(data_fim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            queryBuilder.andWhere('recurso.created_at BETWEEN :inicio AND :fim', {
                inicio,
                fim,
            });
        }
        else if (data_inicio) {
            const inicio = new Date(data_inicio);
            queryBuilder.andWhere('recurso.created_at >= :inicio', { inicio });
        }
        else if (data_fim) {
            const fim = new Date(data_fim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            queryBuilder.andWhere('recurso.created_at <= :fim', { fim });
        }
        // Restrições de acesso baseadas no papel do usuário
        if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR].includes(user.role)) {
            // Técnicos só podem ver recursos de solicitações da sua unidade
            queryBuilder.andWhere('solicitacao.unidade_id = :unidade_id', {
                unidade_id: user.unidade_id,
            });
        }
        // Calcular paginação
        const skip = (page - 1) * limit;
        queryBuilder.skip(skip).take(limit);
        // Ordenação padrão
        queryBuilder.orderBy('recurso.created_at', 'DESC');
        // Executar consulta
        const [items, total] = await queryBuilder.getManyAndCount();
        // Mapear resultados para DTOs
        const recursos = items.map((recurso) => this.mapToDto(recurso));
        return {
            items: recursos,
            meta: {
                total,
                page,
                limit,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca um recurso pelo ID
     */
    async findById(id) {
        const recurso = await this.recursoRepository.findOne({
            where: { id },
            relations: [
                'solicitacao',
                'solicitacao.beneficiario',
                'analista',
                'setor_responsavel',
            ],
        });
        if (!recurso) {
            throw new common_1.NotFoundException(`Recurso com ID ${id} não encontrado`);
        }
        return recurso;
    }
    /**
     * Cria um novo recurso
     */
    async create(createRecursoDto, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar a solicitação
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: createRecursoDto.solicitacao_id },
            });
            if (!solicitacao) {
                throw new common_1.NotFoundException(`Solicitação com ID ${createRecursoDto.solicitacao_id} não encontrada`);
            }
            // Verificar se a solicitação está reprovada
            if (solicitacao.status !== solicitacao_entity_1.StatusSolicitacao.INDEFERIDA) {
                throw new common_1.BadRequestException('Só é possível criar recursos para solicitações reprovadas');
            }
            // Verificar se já existe um recurso para esta solicitação
            const recursoExistente = await this.recursoRepository.findOne({
                where: { solicitacao_id: createRecursoDto.solicitacao_id },
            });
            if (recursoExistente) {
                throw new common_1.BadRequestException('Já existe um recurso para esta solicitação');
            }
            // Criar o recurso
            const recurso = new recurso_entity_1.Recurso();
            recurso.solicitacao_id = createRecursoDto.solicitacao_id;
            recurso.justificativa = createRecursoDto.justificativa;
            recurso.status = recurso_entity_1.StatusRecurso.PENDENTE;
            recurso.created_at = new Date();
            // Dados adicionais
            if (createRecursoDto.documentos) {
                recurso.documentos_adicionais = {
                    documentos: createRecursoDto.documentos,
                };
            }
            if (createRecursoDto.motivo_indeferimento) {
                recurso.motivo_indeferimento = createRecursoDto.motivo_indeferimento;
            }
            else {
                // Se não foi informado, usar o parecer da solicitação
                recurso.motivo_indeferimento =
                    solicitacao.parecer_semtas || 'Não especificado';
            }
            // Definir setor responsável
            if (createRecursoDto.setor_responsavel_id) {
                recurso.setor_responsavel_id = createRecursoDto.setor_responsavel_id;
            }
            else {
                // Por padrão, usar o mesmo setor da unidade da solicitação
                recurso.setor_responsavel_id = solicitacao.unidade_id;
            }
            // Salvar o recurso
            const savedRecurso = await manager.save(recurso);
            // Criar histórico
            const historico = new recurso_historico_entity_1.RecursoHistorico();
            historico.recurso_id = savedRecurso.id;
            historico.status_anterior = ''; // Usando string vazia em vez de null
            historico.status_novo = recurso_entity_1.StatusRecurso.PENDENTE;
            historico.usuario_id = user.id;
            historico.observacao = 'Recurso criado';
            await manager.save(historico);
            // Retornar o recurso salvo
            const result = await this.findById(savedRecurso.id);
            return this.mapToDto(result);
        });
    }
    /**
     * Inicia a análise de um recurso
     */
    async iniciarAnalise(id, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar o recurso
            const recurso = await this.findById(id);
            // Verificar se o usuário tem permissão
            if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO].includes(user.role)) {
                throw new common_1.UnauthorizedException('Você não tem permissão para analisar recursos');
            }
            // Verificar se o recurso está pendente
            if (recurso.status !== recurso_entity_1.StatusRecurso.PENDENTE) {
                throw new common_1.BadRequestException('Só é possível iniciar análise de recursos pendentes');
            }
            // Atualizar o status
            recurso.prepararAlteracaoStatus(recurso_entity_1.StatusRecurso.EM_ANALISE, user.id, 'Análise iniciada', user.ip || '0.0.0.0');
            recurso.analista_id = user.id;
            // Salvar o recurso
            await manager.save(recurso);
            // Retornar o recurso atualizado
            const result = await this.findById(id);
            return this.mapToDto(result);
        });
    }
    /**
     * Analisa um recurso (deferir/indeferir)
     */
    async analisarRecurso(id, analisarRecursoDto, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar o recurso
            const recurso = await this.findById(id);
            // Verificar se o usuário tem permissão
            if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO].includes(user.role)) {
                throw new common_1.UnauthorizedException('Você não tem permissão para analisar recursos');
            }
            // Verificar se o recurso está em análise
            if (recurso.status !== recurso_entity_1.StatusRecurso.EM_ANALISE) {
                throw new common_1.BadRequestException('Só é possível concluir análise de recursos em análise');
            }
            // Atualizar o recurso
            recurso.prepararAlteracaoStatus(analisarRecursoDto.status, user.id, analisarRecursoDto.observacao || 'Análise concluída', user.ip || '0.0.0.0');
            recurso.parecer = analisarRecursoDto.parecer;
            recurso.data_analise = new Date();
            // Se o recurso foi deferido, reabrir a solicitação
            if (analisarRecursoDto.status === recurso_entity_1.StatusRecurso.DEFERIDO) {
                const solicitacao = await this.solicitacaoRepository.findOne({
                    where: { id: recurso.solicitacao_id },
                });
                if (solicitacao) {
                    solicitacao.prepararAlteracaoStatus(solicitacao_entity_1.StatusSolicitacao.APROVADA, user.id, 'Solicitação aprovada via recurso', user.ip || '0.0.0.0');
                    solicitacao.aprovador_id = user.id;
                    solicitacao.data_aprovacao = new Date();
                    await manager.save(solicitacao);
                }
            }
            // Salvar o recurso
            await manager.save(recurso);
            // Retornar o recurso atualizado
            const result = await this.findById(id);
            return this.mapToDto(result);
        });
    }
    /**
     * Cancela um recurso
     */
    async cancelarRecurso(id, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar o recurso
            const recurso = await this.findById(id);
            // Verificar se o usuário tem permissão
            if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR].includes(user.role)) {
                throw new common_1.UnauthorizedException('Você não tem permissão para cancelar recursos');
            }
            // Verificar se o recurso pode ser cancelado
            if ([recurso_entity_1.StatusRecurso.DEFERIDO, recurso_entity_1.StatusRecurso.INDEFERIDO].includes(recurso.status)) {
                throw new common_1.BadRequestException('Não é possível cancelar um recurso já analisado');
            }
            // Atualizar o status
            recurso.prepararAlteracaoStatus(recurso_entity_1.StatusRecurso.CANCELADO, user.id, 'Recurso cancelado pelo usuário', user.ip || '0.0.0.0');
            // Salvar o recurso
            await manager.save(recurso);
            // Retornar o recurso atualizado
            const result = await this.findById(id);
            return this.mapToDto(result);
        });
    }
    /**
     * Lista o histórico de um recurso
     */
    async getHistorico(recursoId) {
        // Verificar se o recurso existe
        await this.findById(recursoId);
        // Buscar o histórico
        return this.historicoRepository.find({
            where: { recurso_id: recursoId },
            order: { created_at: 'DESC' },
            relations: ['usuario'],
        });
    }
    /**
     * Mapeia uma entidade Recurso para um DTO de resposta
     */
    mapToDto(recurso) {
        const dto = new recurso_response_dto_1.RecursoResponseDto();
        dto.id = recurso.id;
        dto.solicitacao_id = recurso.solicitacao_id;
        if (recurso.solicitacao) {
            dto.protocolo_solicitacao = recurso.solicitacao.protocolo;
            if (recurso.solicitacao.beneficiario) {
                dto.nome_beneficiario = recurso.solicitacao.beneficiario.nome;
            }
        }
        dto.justificativa = recurso.justificativa;
        dto.status = recurso.status;
        dto.created_at = recurso.created_at;
        dto.data_analise = recurso.data_analise;
        dto.analista_id = recurso.analista_id;
        if (recurso.analista) {
            dto.nome_analista = recurso.analista.nome;
        }
        dto.parecer = recurso.parecer;
        dto.documentos_adicionais = recurso.documentos_adicionais;
        dto.motivo_indeferimento = recurso.motivo_indeferimento;
        dto.prazo_analise = recurso.prazo_analise;
        dto.setor_responsavel_id = recurso.setor_responsavel_id;
        if (recurso.setor_responsavel) {
            dto.nome_setor_responsavel = recurso.setor_responsavel.nome;
        }
        dto.created_at = recurso.created_at;
        dto.updated_at = recurso.updated_at;
        return dto;
    }
};
exports.RecursoService = RecursoService;
exports.RecursoService = RecursoService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(recurso_entity_1.Recurso)),
    __param(1, (0, typeorm_1.InjectRepository)(recurso_historico_entity_1.RecursoHistorico)),
    __param(2, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Connection !== "undefined" && typeorm_2.Connection) === "function" ? _d : Object])
], RecursoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,