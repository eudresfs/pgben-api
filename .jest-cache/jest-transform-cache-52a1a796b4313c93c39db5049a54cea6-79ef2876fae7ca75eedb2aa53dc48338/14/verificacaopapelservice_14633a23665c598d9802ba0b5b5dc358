f36b71da93f7cdbe1f1c7a5b950e77d0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var VerificacaoPapelService_1;
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificacaoPapelService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const cidadao_entity_1 = require("../../../entities/cidadao.entity");
const papel_cidadao_entity_1 = require("../../../entities/papel-cidadao.entity");
const tipo_papel_enum_1 = require("../../../enums/tipo-papel.enum");
const composicao_familiar_entity_1 = require("../../../entities/composicao-familiar.entity");
const historico_conversao_papel_service_1 = require("./historico-conversao-papel.service");
const papel_cidadao_service_1 = require("./papel-cidadao.service");
/**
 * Serviço de Verificação de Papel
 *
 * Responsável por verificar conflitos de papéis e realizar conversões
 * de papéis de cidadãos no sistema.
 */
let VerificacaoPapelService = VerificacaoPapelService_1 = class VerificacaoPapelService {
    cidadaoRepository;
    papelCidadaoRepository;
    composicaoFamiliarRepository;
    historicoService;
    papelCidadaoService;
    dataSource;
    logger = new common_1.Logger(VerificacaoPapelService_1.name);
    constructor(cidadaoRepository, papelCidadaoRepository, composicaoFamiliarRepository, historicoService, papelCidadaoService, dataSource) {
        this.cidadaoRepository = cidadaoRepository;
        this.papelCidadaoRepository = papelCidadaoRepository;
        this.composicaoFamiliarRepository = composicaoFamiliarRepository;
        this.historicoService = historicoService;
        this.papelCidadaoService = papelCidadaoService;
        this.dataSource = dataSource;
    }
    /**
     * Converte um cidadão para beneficiário
     * @param cidadaoId ID do cidadão
     * @param motivoConversao Motivo da conversão
     * @returns Resultado da conversão
     */
    async converterParaBeneficiario(cidadaoId, motivoConversao) {
        this.logger.log(`Iniciando conversão para beneficiário: ${cidadaoId}`);
        return this.dataSource.transaction(async (manager) => {
            // Verificar se o cidadão existe
            const cidadao = await manager.findOne(cidadao_entity_1.Cidadao, {
                where: { id: cidadaoId },
                relations: ['papeis'],
            });
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Verificar se já é beneficiário
            const jaBeneficiario = cidadao.papeis?.some((papel) => papel.tipo_papel === 'beneficiario' && papel.ativo);
            if (jaBeneficiario) {
                throw new common_1.ConflictException('Cidadão já é beneficiário');
            }
            // Verificar conflitos
            const conflitos = await this.verificarConflitoPapeis(cidadao.cpf);
            if (conflitos.temConflito) {
                // Registrar histórico de tentativa de conversão
                await this.historicoService.criarHistorico({
                    cidadao_id: cidadaoId,
                    papel_anterior: conflitos.tipoPapelAtual || 'membro_composicao',
                    papel_novo: 'beneficiario',
                    justificativa: `Conversão bloqueada: ${conflitos.detalhes}`,
                }, 'sistema');
                return {
                    sucesso: false,
                    mensagem: conflitos.detalhes || 'Conflito de papel detectado',
                };
            }
            // Desativar papéis conflitantes se necessário
            const papeisAtivos = cidadao.papeis?.filter((papel) => papel.ativo) || [];
            for (const papel of papeisAtivos) {
                if (papel.tipo_papel === 'membro_composicao') {
                    papel.ativo = false;
                    await manager.save(papel);
                }
            }
            // Criar papel de beneficiário
            const novoPapel = manager.create(papel_cidadao_entity_1.PapelCidadao, {
                cidadao_id: cidadaoId,
                tipo_papel: 'beneficiario',
                ativo: true,
                metadados: {},
            });
            await manager.save(novoPapel);
            // Registrar no histórico
            const historico = await this.historicoService.criarHistorico({
                cidadao_id: cidadaoId,
                papel_anterior: conflitos.tipoPapelAtual || 'membro_composicao',
                papel_novo: 'beneficiario',
                justificativa: motivoConversao,
            }, 'sistema');
            return {
                sucesso: true,
                mensagem: 'Conversão para beneficiário realizada com sucesso',
                historicoId: historico.id,
            };
        });
    }
    /**
     * Converte um membro de composição familiar para cidadão beneficiário
     * @param cpf CPF do membro de composição familiar
     * @param dadosCidadao Dados para criação do novo cidadão
     * @param justificativa Justificativa para a conversão
     * @param usuarioId ID do usuário que está realizando a conversão
     * @returns Resultado da conversão
     * @throws BadRequestException se os dados do cidadão forem inválidos
     * @throws ConflictException se o cidadão já for beneficiário
     * @throws NotFoundException se o membro não for encontrado
     * @throws InternalServerErrorException se ocorrer um erro durante a conversão
     */
    async converterMembroParaBeneficiario(cpf, dadosCidadao, justificativa, usuarioId) {
        this.logger.log(`Iniciando conversão para beneficiário: CPF ${cpf}`);
        // Validar dados do cidadão
        if (!dadosCidadao.nome) {
            this.logger.warn(`Tentativa de conversão com dados inválidos: CPF ${cpf}`);
            throw new common_1.BadRequestException('Nome do cidadão é obrigatório');
        }
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        this.logger.debug(`Transação iniciada para conversão: CPF ${cpf}`);
        try {
            // Remover formatação do CPF
            const cpfLimpo = cpf.replace(/\D/g, '');
            // Verificar se já existe um cidadão com este CPF
            const cidadaoExistente = await this.cidadaoRepository.findOne({
                where: { cpf: cpfLimpo },
            });
            // Se já existir um cidadão com este CPF, verificar se já é beneficiário
            if (cidadaoExistente) {
                this.logger.debug(`Cidadão existente encontrado: ID ${cidadaoExistente.id}`);
                const papelBeneficiario = await this.papelCidadaoRepository.findOne({
                    where: {
                        cidadao_id: cidadaoExistente.id,
                        tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                        ativo: true,
                    },
                });
                if (papelBeneficiario) {
                    this.logger.warn(`Cidadão já é beneficiário: ID ${cidadaoExistente.id}`);
                    throw new common_1.ConflictException('Cidadão já é beneficiário');
                }
            }
            // Verificar se o membro está em alguma composição familiar
            const composicaoFamiliar = await this.composicaoFamiliarRepository.findOne({
                where: { cpf: cpfLimpo },
                relations: ['cidadao'],
            });
            if (!composicaoFamiliar) {
                this.logger.warn(`Membro não encontrado em composição familiar: CPF ${cpfLimpo}`);
                throw new common_1.BadRequestException('Membro não encontrado em nenhuma composição familiar');
            }
            this.logger.debug(`Composição familiar encontrada: ID ${composicaoFamiliar.id}`);
            let cidadao;
            let novoPapel;
            // Se o cidadão já existe, apenas adicionar o papel de beneficiário
            if (cidadaoExistente) {
                this.logger.debug(`Usando cidadão existente: ID ${cidadaoExistente.id}`);
                cidadao = cidadaoExistente;
                // Adicionar papel de beneficiário
                novoPapel = await this.papelCidadaoService.criarPapel(cidadao.id, tipo_papel_enum_1.TipoPapel.BENEFICIARIO, {});
            }
            else {
                // Criar um novo cidadão com os dados fornecidos
                this.logger.debug(`Criando novo cidadão para CPF: ${cpfLimpo}`);
                const dadosCidadaoCompletos = {
                    ...dadosCidadao,
                    cpf: cpfLimpo,
                    nome: dadosCidadao.nome || composicaoFamiliar.nome, // Usar o nome da composição se não for fornecido
                    papeis: [
                        {
                            tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                            metadados: {},
                        },
                    ],
                };
                // Criar o cidadão usando o serviço de cidadão
                const cidadaoCriado = await queryRunner.manager.save(this.cidadaoRepository.create(dadosCidadaoCompletos));
                cidadao = cidadaoCriado;
                // Criar papel de beneficiário para o novo cidadão
                novoPapel = await queryRunner.manager.save(this.papelCidadaoRepository.create({
                    cidadao_id: cidadao.id,
                    tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                    ativo: true,
                }));
            }
            // Soft delete da composição familiar (marcar como removido)
            this.logger.debug(`Realizando soft delete da composição familiar: ID ${composicaoFamiliar.id}`);
            await queryRunner.manager.softRemove(composicaoFamiliar);
            // Registrar histórico de conversão
            const historico = await this.historicoService.criarHistorico({
                cidadao_id: cidadao.id,
                papel_anterior: tipo_papel_enum_1.TipoPapel.MEMBRO_COMPOSICAO,
                papel_novo: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                justificativa,
            }, usuarioId);
            await queryRunner.commitTransaction();
            return {
                sucesso: true,
                mensagem: 'Membro convertido para cidadão beneficiário com sucesso',
                historicoId: historico.id,
            };
        }
        catch (error) {
            this.logger.warn(`Erro durante a conversão para beneficiário: ${error.message}`);
            await queryRunner.rollbackTransaction();
            this.logger.debug('Transação revertida após erro');
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.ConflictException ||
                error instanceof common_1.BadRequestException) {
                throw error;
            }
            // Registrar detalhes do erro para facilitar a depuração
            const errorDetails = {
                message: error.message,
                stack: error.stack,
                cpf,
                nome: dadosCidadao?.nome,
                timestamp: new Date().toISOString(),
            };
            this.logger.error(`Erro ao converter para beneficiário: ${JSON.stringify(errorDetails)}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao converter membro para cidadão beneficiário');
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Converte um cidadão beneficiário para membro de composição familiar
     * @param cpf CPF do cidadão beneficiário
     * @param cidadaoAlvoId ID do cidadão que terá o membro adicionado à sua composição familiar
     * @param dadosComposicao Dados da composição familiar
     * @param justificativa Justificativa para a conversão
     * @param usuarioId ID do usuário que está realizando a conversão
     * @returns Resultado da conversão
     * @throws BadRequestException se o cidadão não for beneficiário
     * @throws ConflictException se o cidadão já estiver em uma composição familiar
     * @throws NotFoundException se o cidadão ou o cidadão alvo não forem encontrados
     * @throws InternalServerErrorException se ocorrer um erro durante a conversão
     */
    async converterParaComposicaoFamiliar(cpf, cidadaoAlvoId, dadosComposicao, justificativa, usuarioId) {
        this.logger.log(`Iniciando conversão para composição familiar: CPF ${cpf}`);
        // Validar dados da composição familiar
        if (!dadosComposicao || !cidadaoAlvoId) {
            this.logger.warn(`Tentativa de conversão com dados inválidos: CPF ${cpf}`);
            throw new common_1.BadRequestException('Dados da composição familiar e ID do cidadão alvo são obrigatórios');
        }
        const queryRunner = this.dataSource.createQueryRunner();
        await queryRunner.connect();
        await queryRunner.startTransaction();
        this.logger.debug(`Transação iniciada para conversão: CPF ${cpf}`);
        try {
            // Remover formatação do CPF
            const cpfLimpo = cpf.replace(/\D/g, '');
            // Verificar se o cidadão existe
            const cidadao = await this.cidadaoRepository.findOne({
                where: { cpf: cpfLimpo },
            });
            if (!cidadao) {
                this.logger.warn(`Cidadão não encontrado: CPF ${cpfLimpo}`);
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            this.logger.debug(`Cidadão encontrado: ID ${cidadao.id}`);
            // Verificar se o cidadão alvo existe
            const cidadaoAlvo = await this.cidadaoRepository.findOne({
                where: { id: cidadaoAlvoId },
            });
            if (!cidadaoAlvo) {
                this.logger.warn(`Cidadão alvo não encontrado: ID ${cidadaoAlvoId}`);
                throw new common_1.NotFoundException('Cidadão alvo não encontrado');
            }
            this.logger.debug(`Cidadão alvo encontrado: ID ${cidadaoAlvo.id}`);
            // Verificar se o cidadão é beneficiário
            const papelBeneficiario = await this.papelCidadaoRepository.findOne({
                where: {
                    cidadao_id: cidadao.id,
                    tipo_papel: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                    ativo: true,
                },
            });
            if (!papelBeneficiario) {
                this.logger.warn(`Cidadão não é beneficiário: ID ${cidadao.id}`);
                throw new common_1.BadRequestException('Cidadão não é beneficiário');
            }
            this.logger.debug(`Papel beneficiário encontrado: ID ${papelBeneficiario.id}`);
            // Verificar se o cidadão já está em alguma composição familiar
            const composicaoExistente = await this.composicaoFamiliarRepository.findOne({
                where: { cpf: cpfLimpo },
            });
            if (composicaoExistente) {
                this.logger.warn(`Cidadão já está em uma composição familiar: ID ${composicaoExistente.id}`);
                throw new common_1.ConflictException('Cidadão já está em uma composição familiar');
            }
            this.logger.debug('Cidadão não está em nenhuma composição familiar');
            // Criar composição familiar
            this.logger.debug(`Criando nova composição familiar para o cidadão: ID ${cidadao.id}`);
            const novaComposicao = this.composicaoFamiliarRepository.create({
                ...dadosComposicao,
                cpf: cpfLimpo,
                cidadao_id: cidadaoAlvoId,
                nome: cidadao.nome, // Usar o nome do cidadão
            });
            await queryRunner.manager.save(novaComposicao);
            this.logger.debug(`Nova composição familiar criada: ID ${novaComposicao.id}`);
            // Soft delete do cidadão (marcar como removido)
            this.logger.debug(`Realizando soft delete do cidadão: ID ${cidadao.id}`);
            await queryRunner.manager.softRemove(cidadao);
            // Registrar histórico de conversão
            const historico = await this.historicoService.criarHistorico({
                cidadao_id: cidadao.id,
                papel_anterior: tipo_papel_enum_1.TipoPapel.BENEFICIARIO,
                papel_novo: tipo_papel_enum_1.TipoPapel.MEMBRO_COMPOSICAO,
                justificativa,
                composicao_familiar_id: novaComposicao.id,
            }, usuarioId);
            await queryRunner.commitTransaction();
            return {
                sucesso: true,
                mensagem: 'Cidadão convertido para membro de composição familiar com sucesso',
                historicoId: historico.id,
            };
        }
        catch (error) {
            this.logger.warn(`Erro durante a conversão para composição familiar: ${error.message}`);
            await queryRunner.rollbackTransaction();
            this.logger.debug('Transação revertida após erro');
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.ConflictException ||
                error instanceof common_1.BadRequestException) {
                throw error;
            }
            // Registrar detalhes do erro para facilitar a depuração
            const errorDetails = {
                message: error.message,
                stack: error.stack,
                cpf,
                cidadaoAlvoId,
                timestamp: new Date().toISOString(),
            };
            this.logger.error(`Erro ao converter para composição familiar: ${JSON.stringify(errorDetails)}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao converter cidadão para membro de composição familiar');
        }
        finally {
            await queryRunner.release();
        }
    }
    /**
     * Verifica se existem conflitos entre papéis para um cidadão
     * @param cidadaoId ID do cidadão
     * @param papelIds Lista de IDs de papéis a serem verificados
     * @returns Resultado da verificação
     */
    async verificarPapeisConflitantes(cidadaoId, papelIds) {
        try {
            // Verificar se o cidadão existe
            const cidadao = await this.cidadaoRepository.findOne({
                where: { id: cidadaoId },
            });
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Buscar papéis atuais do cidadão
            const papeisCidadao = await this.papelCidadaoRepository.find({
                where: { cidadao_id: cidadaoId, ativo: true },
            });
            // Simular a lista de papéis que o cidadão teria
            const todosPapeis = [...papeisCidadao.map((p) => p.id), ...papelIds];
            // Verificar conflitos com base nas regras de negócio
            const regrasConflito = await this.listarRegrasConflito();
            const conflitos = [];
            // Verificar cada regra de conflito
            for (const regra of regrasConflito) {
                if (!regra.ativo) {
                    continue;
                }
                // Verificar se a regra se aplica aos papéis do cidadão
                const temPapelOrigem = todosPapeis.includes(regra.papel_origem_id);
                const temPapelDestino = todosPapeis.includes(regra.papel_destino_id);
                if (temPapelOrigem && temPapelDestino) {
                    conflitos.push({
                        papel_id: papelIds.includes(regra.papel_origem_id)
                            ? regra.papel_origem_id
                            : regra.papel_destino_id,
                        nome_papel: papelIds.includes(regra.papel_origem_id)
                            ? regra.papel_origem_nome
                            : regra.papel_destino_nome,
                        regra_conflito: regra.descricao,
                    });
                }
            }
            return {
                possui_conflito: conflitos.length > 0,
                papeis_conflitantes: conflitos,
            };
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao verificar papéis conflitantes: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao verificar papéis conflitantes');
        }
    }
    /**
     * Verifica papéis conflitantes para um cidadão específico
     * @param cidadaoId ID do cidadão
     * @returns Resultado da verificação
     */
    async verificarPapeisConflitantesCidadao(cidadaoId) {
        try {
            // Verificar se o cidadão existe
            const cidadao = await this.cidadaoRepository.findOne({
                where: { id: cidadaoId },
            });
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Buscar papéis atuais do cidadão
            const papeisCidadao = await this.papelCidadaoRepository.find({
                where: { cidadao_id: cidadaoId, ativo: true },
            });
            // Verificar conflitos com base nas regras de negócio
            const regrasConflito = await this.listarRegrasConflito();
            const conflitos = [];
            // Verificar cada regra de conflito
            for (const regra of regrasConflito) {
                if (!regra.ativo) {
                    continue;
                }
                // Verificar se a regra se aplica aos papéis do cidadão
                const temPapelOrigem = papeisCidadao.some((p) => p.id === regra.papel_origem_id);
                const temPapelDestino = papeisCidadao.some((p) => p.id === regra.papel_destino_id);
                if (temPapelOrigem && temPapelDestino) {
                    conflitos.push({
                        papel_id: regra.papel_destino_id,
                        nome_papel: regra.papel_destino_nome,
                        regra_conflito: regra.descricao,
                    });
                }
            }
            return {
                possui_conflito: conflitos.length > 0,
                papeis_conflitantes: conflitos,
            };
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao verificar papéis conflitantes do cidadão: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao verificar papéis conflitantes do cidadão');
        }
    }
    /**
     * Lista as regras de conflito entre papéis
     * @returns Lista de regras de conflito
     */
    async listarRegrasConflito() {
        try {
            // Simulação de regras de conflito - em um ambiente real, estas viriam do banco de dados
            return [
                {
                    id: '1',
                    papel_origem_id: '1',
                    papel_origem_nome: 'Beneficiário',
                    papel_destino_id: '2',
                    papel_destino_nome: 'Membro de Composição Familiar',
                    descricao: 'Um cidadão não pode ser beneficiário e membro de composição familiar ao mesmo tempo',
                    ativo: true,
                },
                {
                    id: '2',
                    papel_origem_id: '3',
                    papel_origem_nome: 'Responsável Familiar',
                    papel_destino_id: '4',
                    papel_destino_nome: 'Dependente',
                    descricao: 'Um cidadão não pode ser responsável familiar e dependente ao mesmo tempo',
                    ativo: true,
                },
                {
                    id: '3',
                    papel_origem_id: '5',
                    papel_origem_nome: 'Servidor Público',
                    papel_destino_id: '1',
                    papel_destino_nome: 'Beneficiário',
                    descricao: 'Um servidor público não pode ser beneficiário de programas sociais',
                    ativo: true,
                },
            ];
        }
        catch (error) {
            this.logger.error(`Erro ao listar regras de conflito: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao listar regras de conflito');
        }
    }
    /**
     * Verifica se há conflito entre papéis de um cidadão
     * @param cpf CPF do cidadão
     * @returns Resultado da verificação
     */
    async verificarConflitoPapeis(cpf) {
        try {
            // Buscar cidadão pelo CPF
            const cidadao = await this.cidadaoRepository.findOne({
                where: { cpf },
                relations: ['papeis'],
            });
            if (!cidadao) {
                return {
                    temConflito: false,
                    detalhes: 'Cidadão não encontrado',
                };
            }
            // Verificar papéis ativos
            const papeisAtivos = cidadao.papeis?.filter((papel) => papel.ativo) || [];
            if (papeisAtivos.length === 0) {
                return {
                    temConflito: false,
                    detalhes: 'Nenhum papel ativo encontrado',
                };
            }
            // Verificar se há conflito (exemplo: beneficiário não pode ser requerente)
            const temBeneficiario = papeisAtivos.some((papel) => papel.tipo_papel === 'beneficiario');
            const temRequerente = papeisAtivos.some((papel) => papel.tipo_papel === 'requerente');
            if (temBeneficiario && temRequerente) {
                return {
                    temConflito: true,
                    tipoPapelAtual: 'beneficiario',
                    cidadaoId: cidadao.id,
                    detalhes: 'Cidadão não pode ser beneficiário e requerente simultaneamente',
                };
            }
            return {
                temConflito: false,
                tipoPapelAtual: papeisAtivos[0]?.tipo_papel,
                cidadaoId: cidadao.id,
                detalhes: 'Nenhum conflito detectado',
            };
        }
        catch (error) {
            this.logger.error(`Erro ao verificar conflito de papéis: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao verificar conflito de papéis');
        }
    }
};
exports.VerificacaoPapelService = VerificacaoPapelService;
exports.VerificacaoPapelService = VerificacaoPapelService = VerificacaoPapelService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(cidadao_entity_1.Cidadao)),
    __param(1, (0, typeorm_1.InjectRepository)(papel_cidadao_entity_1.PapelCidadao)),
    __param(2, (0, typeorm_1.InjectRepository)(composicao_familiar_entity_1.ComposicaoFamiliar)),
    __param(4, (0, common_1.Inject)((0, common_1.forwardRef)(() => papel_cidadao_service_1.PapelCidadaoService))),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof historico_conversao_papel_service_1.HistoricoConversaoPapelService !== "undefined" && historico_conversao_papel_service_1.HistoricoConversaoPapelService) === "function" ? _d : Object, typeof (_e = typeof papel_cidadao_service_1.PapelCidadaoService !== "undefined" && papel_cidadao_service_1.PapelCidadaoService) === "function" ? _e : Object, typeof (_f = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _f : Object])
], VerificacaoPapelService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,