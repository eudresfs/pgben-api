3146e4dc1885656b698fb1e319410fde
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancedMetricsInterceptor = void 0;
const common_1 = require("@nestjs/common");
const operators_1 = require("rxjs/operators");
const enhanced_metrics_service_1 = require("./enhanced-metrics.service");
/**
 * Interceptor de M√©tricas Aprimorado
 *
 * Intercepta todas as requisi√ß√µes HTTP e registra m√©tricas avan√ßadas como:
 * - Contador de requisi√ß√µes com informa√ß√µes de perfil de usu√°rio
 * - Dura√ß√£o das requisi√ß√µes
 * - Requisi√ß√µes em andamento
 * - Eventos de seguran√ßa e compliance LGPD
 */
let EnhancedMetricsInterceptor = class EnhancedMetricsInterceptor {
    metricsService;
    logger = new common_1.Logger('EnhancedMetricsInterceptor');
    constructor(metricsService) {
        this.metricsService = metricsService;
    }
    intercept(context, next) {
        // CORRIGIDO: Redu√ß√£o de logs e simplifica√ß√£o do interceptor
        this.logger.debug(`üî• EnhancedMetricsInterceptor: Iniciando para ${context.getType()}`);
        // Verificar se √© uma requisi√ß√£o HTTP
        if (context.getType() !== 'http') {
            // N√£o √© HTTP, apenas passar adiante
            this.logger.debug(`üî• EnhancedMetricsInterceptor: N√£o √© HTTP, ignorando`);
            return next.handle();
        }
        // Obter informa√ß√µes da requisi√ß√£o
        const ctx = context.switchToHttp();
        const request = ctx.getRequest();
        const { method, url, ip } = request;
        // Log simplificado para debugging
        this.logger.debug(`üî• M√©tricas: ${method} ${url}`);
        // Extrair a rota normalizada e informa√ß√µes do usu√°rio
        const route = this.normalizeRoute(url);
        const userRole = this.getUserRole(request);
        // Incrementar contador de requisi√ß√µes em andamento
        try {
            this.metricsService.incrementHttpRequestsInProgress(method, route, userRole);
        }
        catch (err) {
            this.logger.error(`Erro ao registrar m√©trica inicial: ${err.message}`);
            // N√£o deixar o erro interromper o fluxo
        }
        const startTime = process.hrtime();
        // IMPORTANTE: Primeiro, garantir que o request continue seu fluxo
        // Usar finalize para garantir que as m√©tricas sejam sempre processadas
        return next.handle().pipe((0, operators_1.tap)({
            next: (data) => {
                try {
                    const response = ctx.getResponse();
                    const statusCode = response.statusCode;
                    // Calcular dura√ß√£o da requisi√ß√£o
                    const [seconds, nanoseconds] = process.hrtime(startTime);
                    const durationSeconds = seconds + nanoseconds / 1e9;
                    // Registrar m√©tricas HTTP
                    this.metricsService.recordHttpRequest(method, route, statusCode, userRole);
                    this.metricsService.recordHttpRequestDuration(method, route, statusCode, durationSeconds, userRole);
                    // Verificar LGPD somente se necess√°rio
                    if (route.includes('cidadao') ||
                        route.includes('beneficiario') ||
                        route.includes('documento')) {
                        this.checkAndRecordLgpdDataAccess(request, data, route);
                    }
                    this.logger.debug(`üî• M√©tricas finalizadas: ${method} ${url} - ${statusCode}`);
                }
                catch (err) {
                    this.logger.error(`Erro no processamento de m√©tricas: ${err.message}`);
                    // N√£o deixar o erro interromper o fluxo
                }
                finally {
                    // Garantir que o contador seja decrementado mesmo em caso de erro
                    try {
                        this.metricsService.decrementHttpRequestsInProgress(method, route, userRole);
                    }
                    catch (err) {
                        this.logger.error(`Erro ao decrementar contador: ${err.message}`);
                    }
                }
            },
            error: (error) => {
                try {
                    const statusCode = error.status || 500;
                    // Calcular dura√ß√£o da requisi√ß√£o
                    const [seconds, nanoseconds] = process.hrtime(startTime);
                    const durationSeconds = seconds + nanoseconds / 1e9;
                    // Registrar m√©tricas HTTP
                    this.metricsService.recordHttpRequest(method, route, statusCode, userRole);
                    this.metricsService.recordHttpRequestDuration(method, route, statusCode, durationSeconds, userRole);
                    // Registrar eventos de seguran√ßa apenas para erros relevantes
                    if (statusCode === 401 || statusCode === 403) {
                        this.metricsService.recordSecurityEvent('authorization_failure', 'warning', 'api');
                    }
                    else if (statusCode >= 500) {
                        this.metricsService.recordSecurityEvent('server_error', 'error', 'api');
                    }
                    this.logger.debug(`üî• M√©tricas de erro: ${method} ${url} - ${statusCode}`);
                }
                catch (err) {
                    this.logger.error(`Erro no processamento de m√©tricas de erro: ${err.message}`);
                    // N√£o deixar o erro interromper o fluxo
                }
                finally {
                    // Garantir que o contador seja decrementado mesmo em caso de erro
                    try {
                        this.metricsService.decrementHttpRequestsInProgress(method, route, userRole);
                    }
                    catch (err) {
                        this.logger.error(`Erro ao decrementar contador: ${err.message}`);
                    }
                }
            },
        }));
    }
    /**
     * Normaliza a rota para evitar cardinalidade alta nas m√©tricas
     * Exemplo: /users/123 -> /users/:id
     */
    normalizeRoute(url) {
        // Remover query string
        const path = url.split('?')[0];
        // Substituir IDs num√©ricos, UUIDs e outros identificadores por placeholders
        return path
            .replace(/\/\d+/g, '/:id')
            .replace(/\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/gi, '/:uuid')
            .replace(/\/[^\/]+\.(pdf|doc|docx|jpg|png|xlsx)$/i, '/:.file');
    }
    /**
     * Obt√©m o papel do usu√°rio a partir da requisi√ß√£o
     */
    getUserRole(request) {
        if (!request.user) {
            return 'anonymous';
        }
        if (Array.isArray(request.user.roles) && request.user.roles.length > 0) {
            return request.user.roles[0]; // Usar o primeiro papel como identificador
        }
        if (request.user.role) {
            return request.user.role;
        }
        return 'authenticated';
    }
    /**
     * Verifica e registra acesso a dados protegidos pela LGPD
     */
    checkAndRecordLgpdDataAccess(request, data, route) {
        // Verificar se a rota est√° relacionada a dados pessoais
        const lgpdRoutes = [
            '/api/cidadaos',
            '/api/beneficiarios',
            '/api/documentos',
        ];
        const isLgpdRoute = lgpdRoutes.some((lgpdRoute) => route.startsWith(lgpdRoute));
        if (!isLgpdRoute) {
            return;
        }
        // Determinar o tipo de dados LGPD
        let dataType = 'unknown';
        if (route.includes('cidadaos')) {
            dataType = 'dados_pessoais';
        }
        else if (route.includes('beneficiarios')) {
            dataType = 'dados_beneficio';
        }
        else if (route.includes('documentos')) {
            dataType = 'documentos';
        }
        // Determinar a opera√ß√£o
        let operation = 'unknown';
        if (request.method === 'GET') {
            operation = 'leitura';
        }
        else if (request.method === 'POST') {
            operation = 'criacao';
        }
        else if (request.method === 'PUT' || request.method === 'PATCH') {
            operation = 'atualizacao';
        }
        else if (request.method === 'DELETE') {
            operation = 'exclusao';
        }
        // Verificar se o acesso foi autorizado (assumimos que sim, j√° que chegamos aqui)
        const authorized = true;
        // Registrar o acesso
        this.metricsService.recordLgpdDataAccess(dataType, operation, authorized, this.getUserRole(request));
    }
};
exports.EnhancedMetricsInterceptor = EnhancedMetricsInterceptor;
exports.EnhancedMetricsInterceptor = EnhancedMetricsInterceptor = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof enhanced_metrics_service_1.EnhancedMetricsService !== "undefined" && enhanced_metrics_service_1.EnhancedMetricsService) === "function" ? _a : Object])
], EnhancedMetricsInterceptor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,