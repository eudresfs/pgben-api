e5e48bd74912209e6f4fd8594f5ef690
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var SolicitacaoService_1;
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolicitacaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const entities_1 = require("../../../entities");
const update_solicitacao_dto_1 = require("../dto/update-solicitacao.dto");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
const processo_judicial_repository_1 = require("../../judicial/repositories/processo-judicial.repository");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
const validacao_exclusividade_service_1 = require("./validacao-exclusividade.service");
/**
 * Serviço de Solicitações
 *
 * Responsável pela lógica de negócio relacionada às solicitações de benefícios
 */
let SolicitacaoService = SolicitacaoService_1 = class SolicitacaoService {
    solicitacaoRepository;
    historicoRepository;
    pendenciaRepository;
    processoJudicialRepository;
    determinacaoJudicialRepository;
    connection;
    validacaoExclusividadeService;
    logger = new common_1.Logger(SolicitacaoService_1.name);
    constructor(solicitacaoRepository, historicoRepository, pendenciaRepository, processoJudicialRepository, determinacaoJudicialRepository, connection, validacaoExclusividadeService) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.historicoRepository = historicoRepository;
        this.pendenciaRepository = pendenciaRepository;
        this.processoJudicialRepository = processoJudicialRepository;
        this.determinacaoJudicialRepository = determinacaoJudicialRepository;
        this.connection = connection;
        this.validacaoExclusividadeService = validacaoExclusividadeService;
    }
    /**
     * Lista todas as solicitações com paginação e filtros
     */
    async findAll(options) {
        const { page = 1, limit = 10, status, unidade_id, beneficio_id, protocolo, data_inicio, data_fim, user, } = options;
        const queryBuilder = this.solicitacaoRepository.createQueryBuilder('solicitacao');
        // Joins necessários
        queryBuilder
            .leftJoinAndSelect('solicitacao.beneficiario', 'beneficiario')
            .leftJoinAndSelect('solicitacao.tipo_beneficio', 'tipo_beneficio')
            .leftJoinAndSelect('solicitacao.unidade', 'unidade')
            .leftJoinAndSelect('solicitacao.tecnico', 'tecnico');
        // Aplicar filtros
        if (status) {
            queryBuilder.andWhere('solicitacao.status = :status', { status });
        }
        // Filtro por unidade com verificação de permissão
        if (unidade_id) {
            queryBuilder.andWhere('solicitacao.unidade_id = :unidade_id', {
                unidade_id,
            });
        }
        else if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR].includes(user.role)) {
            // Usuários que não são admin ou gestor SEMTAS só podem ver solicitações da sua unidade
            queryBuilder.andWhere('solicitacao.unidade_id = :unidade_id', {
                unidade_id: user.unidade_id,
            });
        }
        if (beneficio_id) {
            queryBuilder.andWhere('solicitacao.tipo_beneficio_id = :beneficio_id', {
                beneficio_id,
            });
        }
        if (protocolo) {
            queryBuilder.andWhere('solicitacao.protocolo ILIKE :protocolo', {
                protocolo: `%${protocolo}%`,
            });
        }
        // Filtro por período
        if (data_inicio && data_fim) {
            const inicio = new Date(data_inicio);
            const fim = new Date(data_fim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            queryBuilder.andWhere('solicitacao.data_abertura BETWEEN :inicio AND :fim', {
                inicio,
                fim,
            });
        }
        else if (data_inicio) {
            const inicio = new Date(data_inicio);
            queryBuilder.andWhere('solicitacao.data_abertura >= :inicio', { inicio });
        }
        else if (data_fim) {
            const fim = new Date(data_fim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            queryBuilder.andWhere('solicitacao.data_abertura <= :fim', { fim });
        }
        // Calcular paginação
        const skip = (page - 1) * limit;
        queryBuilder.skip(skip).take(limit);
        // Ordenação padrão
        queryBuilder.orderBy('solicitacao.data_abertura', 'DESC');
        // Executar consulta
        const [items, total] = await queryBuilder.getManyAndCount();
        return {
            items,
            meta: {
                currentPage: page,
                itemsPerPage: limit,
                totalItems: total,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca uma solicitação pelo ID
     */
    async findById(id) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id },
            relations: ['beneficiario', 'tipo_beneficio', 'unidade', 'tecnico'],
        });
        if (!solicitacao) {
            throw new common_1.NotFoundException(`Solicitação com ID ${id} não encontrada`);
        }
        return solicitacao;
    }
    /**
     * Cria uma nova solicitação
     */
    async create(createSolicitacaoDto, user) {
        // Validar exclusividade de papel para o beneficiário
        await this.validacaoExclusividadeService.validarExclusividadeBeneficiario(createSolicitacaoDto.beneficiario_id);
        // Se tiver composição familiar, validar para cada membro
        if (createSolicitacaoDto.dados_complementares &&
            createSolicitacaoDto.dados_complementares.composicao_familiar &&
            Array.isArray(createSolicitacaoDto.dados_complementares.composicao_familiar) &&
            createSolicitacaoDto.dados_complementares.composicao_familiar.length > 0) {
            const composicaoFamiliar = createSolicitacaoDto.dados_complementares.composicao_familiar.map((membro) => membro.cidadao_id);
            await this.validacaoExclusividadeService.validarComposicaoFamiliarCompleta(composicaoFamiliar);
        }
        return this.connection.transaction(async (manager) => {
            // Criar uma nova instância de Solicitacao
            const solicitacao = new entities_1.Solicitacao();
            // Determinar a unidade: se usuário não tem unidade, usar do DTO (obrigatório)
            let unidadeId;
            if (!user.unidade_id) {
                if (!createSolicitacaoDto.unidade_id) {
                    throw new common_1.BadRequestException('Usuário não possui unidade vinculada. O campo unidade_id é obrigatório.');
                }
                unidadeId = createSolicitacaoDto.unidade_id;
            }
            else {
                unidadeId = user.unidade_id;
            }
            // Preencher os dados básicos
            solicitacao.beneficiario_id = createSolicitacaoDto.beneficiario_id;
            solicitacao.tipo_beneficio_id = createSolicitacaoDto.tipo_beneficio_id;
            solicitacao.unidade_id = unidadeId;
            solicitacao.tecnico_id = user.id;
            solicitacao.status = entities_1.StatusSolicitacao.RASCUNHO;
            solicitacao.data_abertura = new Date();
            // Normalizar enums nos dados complementares antes de salvar
            const dadosComplementares = createSolicitacaoDto.dados_complementares || {};
            solicitacao.dados_complementares =
                (0, enum_normalizer_util_1.normalizeEnumFields)(dadosComplementares);
            // Salvar a solicitação
            const savedSolicitacao = await manager.save(solicitacao);
            // Registrar no histórico
            const historico = new entities_1.HistoricoSolicitacao();
            historico.solicitacao_id = savedSolicitacao.id;
            historico.usuario_id = user.id;
            historico.status_anterior = entities_1.StatusSolicitacao.ABERTA;
            historico.status_atual = entities_1.StatusSolicitacao.ABERTA;
            historico.observacao = 'Solicitação criada';
            historico.dados_alterados = { acao: 'criacao' };
            historico.ip_usuario = user.ip || '0.0.0.0';
            await manager.save(historico);
            // Buscar a solicitação criada dentro da transação com relações essenciais
            const solicitacaoCompleta = await manager.findOne(entities_1.Solicitacao, {
                where: { id: savedSolicitacao.id },
                relations: [
                    'beneficiario',
                    'tipo_beneficio',
                    'unidade',
                    'tecnico',
                    'historico',
                ],
            });
            if (!solicitacaoCompleta) {
                throw new common_1.NotFoundException(`Solicitação com ID ${savedSolicitacao.id} não encontrada após criação`);
            }
            return solicitacaoCompleta;
        });
    }
    /**
     * Atualiza uma solicitação existente
     */
    async update(id, updateSolicitacaoDto, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar a solicitação
            const solicitacao = await this.findById(id);
            // Check if request status allows editing based on business rules
            const EDITABLE_STATUSES = [
                entities_1.StatusSolicitacao.ABERTA,
                entities_1.StatusSolicitacao.PENDENTE,
            ];
            if (!EDITABLE_STATUSES.includes(solicitacao.status)) {
                const statusMessage = `Status atual: ${solicitacao.status}`;
                const allowedMessage = `Status disponíveis: ${EDITABLE_STATUSES.join(', ')}`;
                throw new common_1.BadRequestException({
                    message: 'A solicitação não pode ser editado neste status.',
                    detalhes: {
                        statusAtual: solicitacao.status,
                        statusPossiveis: EDITABLE_STATUSES,
                    },
                    contexto: `${statusMessage}. ${allowedMessage}`,
                });
            }
            // Atualizar os dados
            // Nota: beneficiario_id não pode ser atualizado conforme definido no DTO
            if (updateSolicitacaoDto.tipo_beneficio_id) {
                solicitacao.tipo_beneficio_id = updateSolicitacaoDto.tipo_beneficio_id;
            }
            if (updateSolicitacaoDto.dados_complementares) {
                // Normalizar enums nos dados complementares antes de salvar
                solicitacao.dados_complementares = (0, enum_normalizer_util_1.normalizeEnumFields)(updateSolicitacaoDto.dados_complementares);
            }
            // Salvar a solicitação
            await manager.save(solicitacao);
            // Registrar no histórico
            const historico = new entities_1.HistoricoSolicitacao();
            historico.solicitacao_id = id;
            historico.usuario_id = user.id;
            historico.status_anterior = solicitacao.status;
            historico.status_atual = solicitacao.status;
            historico.observacao = 'Solicitação atualizada';
            historico.dados_alterados = {
                campos_alterados: Object.keys(updateSolicitacaoDto),
            };
            historico.ip_usuario = user.ip || '0.0.0.0';
            await manager.save(historico);
            return this.findById(id);
        });
    }
    /**
     * Submete uma solicitação para análise
     */
    async submeterSolicitacao(id, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar a solicitação
            const solicitacao = await this.findById(id);
            // Verificar se a solicitação está em estado que permite submissão
            if (solicitacao.status !== entities_1.StatusSolicitacao.RASCUNHO) {
                throw new common_1.BadRequestException(`Não é possível submeter uma solicitação com status ${solicitacao.status}`);
            }
            // Atualizar o status usando o método preparar
            solicitacao.prepararAlteracaoStatus(entities_1.StatusSolicitacao.EM_ANALISE, user.id, 'Solicitação submetida para análise', user.ip || '0.0.0.0');
            await manager.save(solicitacao);
            // Register in history
            const historico = new entities_1.HistoricoSolicitacao();
            historico.solicitacao_id = id;
            historico.usuario_id = user.id;
            historico.status_anterior = entities_1.StatusSolicitacao.RASCUNHO;
            historico.status_atual = solicitacao.status;
            historico.observacao = 'Solicitação submetida para análise';
            historico.dados_alterados = {
                campos_alterados: Object.keys(update_solicitacao_dto_1.UpdateSolicitacaoDto),
            };
            historico.ip_usuario = user.ip || '0.0.0.0';
            await manager.save(historico);
            return this.findById(id);
        });
    }
    /**
     * Avalia uma solicitação (aprovar/pendenciar)
     */
    async avaliarSolicitacao(id, avaliarSolicitacaoDto, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar a solicitação
            const solicitacao = await this.findById(id);
            // Verificar se a solicitação está em estado que permite avaliação
            if (solicitacao.status !== entities_1.StatusSolicitacao.PENDENTE &&
                solicitacao.status !== entities_1.StatusSolicitacao.EM_ANALISE) {
                throw new common_1.BadRequestException(`Não é possível avaliar uma solicitação com status ${solicitacao.status}`);
            }
            // Determinar o novo status
            const novoStatus = avaliarSolicitacaoDto.aprovado
                ? entities_1.StatusSolicitacao.APROVADA
                : entities_1.StatusSolicitacao.AGUARDANDO_DOCUMENTOS;
            // Atualizar o status usando o método preparar
            solicitacao.prepararAlteracaoStatus(novoStatus, user.id, avaliarSolicitacaoDto.parecer, user.ip || '0.0.0.0');
            if (avaliarSolicitacaoDto.aprovado) {
                solicitacao.aprovador_id = user.id;
                solicitacao.data_aprovacao = new Date();
                solicitacao.parecer_semtas = avaliarSolicitacaoDto.parecer;
            }
            else {
                // Registrar pendências
                if (avaliarSolicitacaoDto.pendencias &&
                    avaliarSolicitacaoDto.pendencias.length > 0) {
                    for (const descricaoTexto of avaliarSolicitacaoDto.pendencias) {
                        // Criar uma nova instância de Pendencia diretamente para evitar problemas de tipagem
                        const pendencia = new entities_1.Pendencia();
                        pendencia.solicitacao_id = id;
                        pendencia.descricao = descricaoTexto;
                        pendencia.status = entities_1.StatusPendencia.ABERTA;
                        pendencia.registrado_por_id = user.id; // Usando registrado_por_id conforme definido na entidade
                        await manager.save(pendencia);
                    }
                }
            }
            // Salvar a solicitação com o manager da transação
            await manager.save(solicitacao);
            // Não é mais necessário registrar manualmente no histórico
            // O método logStatusChange fará isso automaticamente através do listener @AfterUpdate
            return this.findById(id);
        });
    }
    /**
     * Libera um benefício aprovado
     */
    async liberarBeneficio(id, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar a solicitação
            const solicitacao = await this.findById(id);
            // Verificar se o usuário tem permissão
            if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR].includes(user.role)) {
                throw new common_1.UnauthorizedException('Você não tem permissão para liberar benefícios');
            }
            // Verificar se a solicitação está aprovada
            if (solicitacao.status !== entities_1.StatusSolicitacao.APROVADA) {
                throw new common_1.BadRequestException('Apenas solicitações aprovadas podem ser liberadas');
            }
            // Atualizar o status usando o método preparar
            solicitacao.prepararAlteracaoStatus(entities_1.StatusSolicitacao.LIBERADA, user.id, 'Benefício liberado para pagamento/entrega', user.ip || '0.0.0.0');
            solicitacao.liberador_id = user.id;
            solicitacao.data_liberacao = new Date();
            // Salvar a solicitação com o manager da transação
            await manager.save(solicitacao);
            // Não é mais necessário registrar manualmente no histórico
            // O método logStatusChange fará isso automaticamente através do listener @AfterUpdate
            return this.findById(id);
        });
    }
    /**
     * Cancela uma solicitação
     */
    async cancelarSolicitacao(id, user) {
        return this.connection.transaction(async (manager) => {
            // Buscar a solicitação
            const solicitacao = await this.findById(id);
            // Verificar se o usuário tem permissão
            if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO].includes(user.role)) {
                throw new common_1.UnauthorizedException('Você não tem permissão para cancelar solicitações');
            }
            // Verificar se a solicitação pode ser cancelada
            if (solicitacao.status === entities_1.StatusSolicitacao.LIBERADA) {
                throw new common_1.BadRequestException('Não é possível cancelar uma solicitação já liberada');
            }
            // Atualizar o status usando o método preparar
            solicitacao.prepararAlteracaoStatus(entities_1.StatusSolicitacao.CANCELADA, user.id, 'Solicitação cancelada pelo usuário', user.ip || '0.0.0.0');
            // Salvar a solicitação com o manager da transação
            await manager.save(solicitacao);
            // Não é mais necessário registrar manualmente no histórico
            // O método logStatusChange fará isso automaticamente através do listener @AfterUpdate
            return this.findById(id);
        });
    }
    /**
     * Lista o histórico de uma solicitação
     */
    async getHistorico(solicitacaoId) {
        // Verificar se a solicitação existe
        await this.findById(solicitacaoId);
        // Buscar o histórico
        return this.historicoRepository.find({
            where: { solicitacao_id: solicitacaoId },
            order: { created_at: 'DESC' },
            relations: ['usuario'],
        });
    }
    /**
     * Lista as pendências de uma solicitação
     */
    async getPendencias(solicitacaoId) {
        // Verificar se a solicitação existe
        await this.findById(solicitacaoId);
        // Buscar as pendências
        return this.pendenciaRepository.find({
            where: { solicitacao_id: solicitacaoId },
            order: { created_at: 'DESC' },
        });
    }
    /**
     * Vincula um processo judicial a uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param vincularDto Dados do vínculo
     * @param user Usuário que está realizando a operação
     * @returns Solicitação atualizada
     */
    async vincularProcessoJudicial(solicitacaoId, vincularDto, user) {
        return this.connection.transaction(async (manager) => {
            try {
                // Verificar se a solicitação existe
                const solicitacao = await this.findById(solicitacaoId);
                // Verificar se o usuário tem permissão
                if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO].includes(user.role)) {
                    throw new common_1.UnauthorizedException('Você não tem permissão para vincular processos judiciais');
                }
                // Verificar se o processo judicial existe
                const processoJudicial = await this.processoJudicialRepository.findOne({
                    where: { id: vincularDto.processo_judicial_id },
                });
                if (!processoJudicial) {
                    throw new common_1.NotFoundException('Processo judicial não encontrado');
                }
                // Verificar se a solicitação já tem este processo vinculado
                if (solicitacao.processo_judicial_id === vincularDto.processo_judicial_id) {
                    throw new common_1.ConflictException('Este processo judicial já está vinculado à solicitação');
                }
                // Atualizar a solicitação
                solicitacao.processo_judicial_id = vincularDto.processo_judicial_id;
                // Registrar no histórico
                const historicoEntry = this.historicoRepository.create((0, enum_normalizer_util_1.normalizeEnumFields)({
                    solicitacao_id: solicitacaoId,
                    status_anterior: solicitacao.status,
                    status_atual: solicitacao.status,
                    usuario_id: user.id,
                    observacao: vincularDto.observacao || 'Processo judicial vinculado',
                    dados_alterados: {
                        processo_judicial: {
                            id: vincularDto.processo_judicial_id,
                            numero: processoJudicial.numero_processo,
                        },
                    },
                    ip_usuario: user.ip || '0.0.0.0',
                }));
                // Salvar as alterações
                await manager.save(solicitacao);
                await manager.save(historicoEntry);
                return this.findById(solicitacaoId);
            }
            catch (error) {
                if (error instanceof common_1.NotFoundException ||
                    error instanceof common_1.UnauthorizedException ||
                    error instanceof common_1.ConflictException) {
                    throw error;
                }
                this.logger.error(`Erro ao vincular processo judicial: ${error.message}`, error.stack);
                throw new common_1.InternalServerErrorException('Erro ao vincular processo judicial à solicitação');
            }
        });
    }
    /**
     * Desvincula um processo judicial de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param user Usuário que está realizando a operação
     * @returns Solicitação atualizada
     */
    async desvincularProcessoJudicial(solicitacaoId, user) {
        return this.connection.transaction(async (manager) => {
            try {
                // Verificar se a solicitação existe
                const solicitacao = await this.findById(solicitacaoId);
                // Verificar se o usuário tem permissão
                if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR].includes(user.role)) {
                    throw new common_1.UnauthorizedException('Você não tem permissão para desvincular processos judiciais');
                }
                // Verificar se a solicitação tem processo vinculado
                if (!solicitacao.processo_judicial_id) {
                    throw new common_1.BadRequestException('Esta solicitação não possui processo judicial vinculado');
                }
                // Guardar informação do processo para o histórico
                const processoJudicialId = solicitacao.processo_judicial_id;
                const processoJudicial = await this.processoJudicialRepository.findOne({
                    where: { id: processoJudicialId },
                });
                // Atualizar a solicitação
                solicitacao.processo_judicial_id = null;
                // Registrar no histórico
                const historicoEntry = this.historicoRepository.create((0, enum_normalizer_util_1.normalizeEnumFields)({
                    solicitacao_id: solicitacaoId,
                    status_anterior: solicitacao.status,
                    status_atual: solicitacao.status,
                    usuario_id: user.id,
                    observacao: 'Processo judicial desvinculado',
                    dados_alterados: {
                        processo_judicial: {
                            id: processoJudicialId,
                            numero: processoJudicial
                                ? processoJudicial.numero_processo
                                : 'Desconhecido',
                            acao: 'removido',
                        },
                    },
                    ip_usuario: user.ip || '0.0.0.0',
                }));
                // Salvar as alterações
                await manager.save(solicitacao);
                await manager.save(historicoEntry);
                return this.findById(solicitacaoId);
            }
            catch (error) {
                if (error instanceof common_1.NotFoundException ||
                    error instanceof common_1.UnauthorizedException ||
                    error instanceof common_1.BadRequestException) {
                    throw error;
                }
                this.logger.error(`Erro ao desvincular processo judicial: ${error.message}`, error.stack);
                throw new common_1.InternalServerErrorException('Erro ao desvincular processo judicial da solicitação');
            }
        });
    }
    /**
     * Vincula uma determinação judicial a uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param vincularDto Dados do vínculo
     * @param user Usuário que está realizando a operação
     * @returns Solicitação atualizada
     */
    async vincularDeterminacaoJudicial(solicitacaoId, vincularDto, user) {
        return this.connection.transaction(async (manager) => {
            try {
                // Verificar se a solicitação existe
                const solicitacao = await this.findById(solicitacaoId);
                // Verificar se o usuário tem permissão
                if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO].includes(user.role)) {
                    throw new common_1.UnauthorizedException('Você não tem permissão para vincular determinações judiciais');
                }
                // Verificar se a determinação judicial existe
                const determinacaoJudicial = await this.determinacaoJudicialRepository.findOne({
                    where: { id: vincularDto.determinacao_judicial_id },
                });
                if (!determinacaoJudicial) {
                    throw new common_1.NotFoundException('Determinação judicial não encontrada');
                }
                // Verificar se a solicitação já tem esta determinação vinculada
                if (solicitacao.determinacao_judicial_id ===
                    vincularDto.determinacao_judicial_id) {
                    throw new common_1.ConflictException('Esta determinação judicial já está vinculada à solicitação');
                }
                // Atualizar a solicitação
                solicitacao.determinacao_judicial_id =
                    vincularDto.determinacao_judicial_id;
                // Registrar no histórico
                const historicoEntry = this.historicoRepository.create((0, enum_normalizer_util_1.normalizeEnumFields)({
                    solicitacao_id: solicitacaoId,
                    status_anterior: solicitacao.status,
                    status_atual: solicitacao.status,
                    usuario_id: user.id,
                    observacao: vincularDto.observacao || 'Determinação judicial vinculada',
                    dados_alterados: {
                        determinacao_judicial: {
                            id: vincularDto.determinacao_judicial_id,
                            numero: determinacaoJudicial.numero_determinacao,
                        },
                    },
                    ip_usuario: user.ip || '0.0.0.0',
                }));
                // Salvar as alterações
                await manager.save(solicitacao);
                await manager.save(historicoEntry);
                return this.findById(solicitacaoId);
            }
            catch (error) {
                if (error instanceof common_1.NotFoundException ||
                    error instanceof common_1.UnauthorizedException ||
                    error instanceof common_1.ConflictException) {
                    throw error;
                }
                this.logger.error(`Erro ao vincular determinação judicial: ${error.message}`, error.stack);
                throw new common_1.InternalServerErrorException('Erro ao vincular determinação judicial à solicitação');
            }
        });
    }
    /**
     * Desvincula uma determinação judicial de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param user Usuário que está realizando a operação
     * @returns Solicitação atualizada
     */
    /**
     * Converte um cidadão da composição familiar para beneficiário principal de uma nova solicitação
     * @param converterPapelDto Dados para conversão de papel
     * @param user Usuário que está realizando a operação
     * @returns Nova solicitação criada
     */
    async converterPapel(converterPapelDto, user) {
        this.logger.log(`Iniciando conversão de papel para cidadão ${converterPapelDto.cidadao_id}`);
        return this.connection.transaction(async (manager) => {
            try {
                // Buscar a solicitação de origem
                const solicitacaoOrigem = await this.findById(converterPapelDto.solicitacao_origem_id);
                if (!solicitacaoOrigem) {
                    throw new common_1.NotFoundException('Solicitação de origem não encontrada');
                }
                // Verificar se o cidadão está na composição familiar da solicitação
                const composicaoFamiliar = solicitacaoOrigem.dados_complementares?.composicao_familiar || [];
                const membroIndex = composicaoFamiliar.findIndex((membro) => membro.cidadao_id === converterPapelDto.cidadao_id);
                if (membroIndex === -1) {
                    throw new common_1.BadRequestException('Cidadão não encontrado na composição familiar da solicitação de origem');
                }
                // Obter o membro e remover da composição familiar
                const membro = { ...composicaoFamiliar[membroIndex] };
                composicaoFamiliar.splice(membroIndex, 1);
                // Atualizar a solicitação de origem com a nova composição familiar
                solicitacaoOrigem.dados_complementares = {
                    ...solicitacaoOrigem.dados_complementares,
                    composicao_familiar: composicaoFamiliar,
                };
                await manager.save(solicitacaoOrigem);
                // Criar uma nova solicitação com o cidadão como beneficiário principal
                const novaSolicitacao = new entities_1.Solicitacao();
                novaSolicitacao.beneficiario_id = converterPapelDto.cidadao_id;
                novaSolicitacao.tipo_beneficio_id = converterPapelDto.tipo_beneficio_id;
                novaSolicitacao.unidade_id = converterPapelDto.unidade_id;
                novaSolicitacao.tecnico_id = user.id;
                novaSolicitacao.status = entities_1.StatusSolicitacao.RASCUNHO;
                novaSolicitacao.data_abertura = new Date();
                novaSolicitacao.solicitacao_original_id =
                    converterPapelDto.solicitacao_origem_id;
                novaSolicitacao.dados_complementares =
                    converterPapelDto.dados_complementares || {};
                // Adicionar observação sobre a conversão de papel
                novaSolicitacao.observacoes = `Solicitação criada a partir da conversão de papel. Justificativa: ${converterPapelDto.justificativa}`;
                await manager.save(novaSolicitacao);
                // Registrar no histórico da solicitação de origem
                const historicoOrigem = this.historicoRepository.create((0, enum_normalizer_util_1.normalizeEnumFields)({
                    solicitacao_id: solicitacaoOrigem.id,
                    status_anterior: solicitacaoOrigem.status,
                    status_atual: solicitacaoOrigem.status,
                    usuario_id: user.id,
                    observacao: `Cidadão removido da composição familiar para se tornar beneficiário principal em nova solicitação (${novaSolicitacao.protocolo})`,
                    dados_alterados: {
                        composicao_familiar: {
                            acao: 'remocao_membro',
                            cidadao_id: converterPapelDto.cidadao_id,
                            nova_solicitacao_id: novaSolicitacao.id,
                            nova_solicitacao_protocolo: novaSolicitacao.protocolo,
                        },
                    },
                    ip_usuario: user.ip || '0.0.0.0',
                }));
                await manager.save(historicoOrigem);
                // Registrar no histórico da nova solicitação
                const historicoNova = this.historicoRepository.create((0, enum_normalizer_util_1.normalizeEnumFields)({
                    solicitacao_id: novaSolicitacao.id,
                    status_anterior: entities_1.StatusSolicitacao.RASCUNHO,
                    status_atual: entities_1.StatusSolicitacao.RASCUNHO,
                    usuario_id: user.id,
                    observacao: `Solicitação criada a partir da conversão de papel do cidadão que estava na composição familiar da solicitação ${solicitacaoOrigem.protocolo}`,
                    dados_alterados: {
                        conversao_papel: {
                            solicitacao_origem_id: solicitacaoOrigem.id,
                            solicitacao_origem_protocolo: solicitacaoOrigem.protocolo,
                            justificativa: converterPapelDto.justificativa,
                        },
                    },
                    ip_usuario: user.ip || '0.0.0.0',
                }));
                await manager.save(historicoNova);
                this.logger.log(`Conversão de papel concluída com sucesso. Nova solicitação: ${novaSolicitacao.id}`);
                return this.findById(novaSolicitacao.id);
            }
            catch (error) {
                if (error instanceof common_1.NotFoundException ||
                    error instanceof common_1.UnauthorizedException ||
                    error instanceof common_1.BadRequestException) {
                    throw error;
                }
                this.logger.error(`Erro ao converter papel do cidadão: ${error.message}`, error.stack);
                throw new common_1.InternalServerErrorException('Erro ao converter papel do cidadão para beneficiário principal');
            }
        });
    }
    async desvincularDeterminacaoJudicial(solicitacaoId, user) {
        return this.connection.transaction(async (manager) => {
            try {
                // Verificar se a solicitação existe
                const solicitacao = await this.findById(solicitacaoId);
                // Verificar se o usuário tem permissão
                if (![roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR].includes(user.role)) {
                    throw new common_1.UnauthorizedException('Você não tem permissão para desvincular determinações judiciais');
                }
                // Verificar se a solicitação tem determinação vinculada
                if (!solicitacao.determinacao_judicial_id) {
                    throw new common_1.BadRequestException('Esta solicitação não possui determinação judicial vinculada');
                }
                // Guardar informação da determinação para o histórico
                const determinacaoJudicialId = solicitacao.determinacao_judicial_id;
                const determinacaoJudicial = await this.determinacaoJudicialRepository.findOne({
                    where: { id: determinacaoJudicialId },
                });
                // Atualizar a solicitação
                solicitacao.determinacao_judicial_id = null;
                // Registrar no histórico
                const historicoEntry = this.historicoRepository.create((0, enum_normalizer_util_1.normalizeEnumFields)({
                    solicitacao_id: solicitacaoId,
                    status_anterior: solicitacao.status,
                    status_atual: solicitacao.status,
                    usuario_id: user.id,
                    observacao: 'Determinação judicial desvinculada',
                    dados_alterados: {
                        determinacao_judicial: {
                            id: determinacaoJudicialId,
                            numero: determinacaoJudicial
                                ? determinacaoJudicial.numero_determinacao
                                : 'Desconhecida',
                            acao: 'removida',
                        },
                    },
                    ip_usuario: user.ip || '0.0.0.0',
                }));
                // Salvar as alterações
                await manager.save(solicitacao);
                await manager.save(historicoEntry);
                return this.findById(solicitacaoId);
            }
            catch (error) {
                if (error instanceof common_1.NotFoundException ||
                    error instanceof common_1.UnauthorizedException ||
                    error instanceof common_1.BadRequestException) {
                    throw error;
                }
                this.logger.error(`Erro ao desvincular determinação judicial: ${error.message}`, error.stack);
                throw new common_1.InternalServerErrorException('Erro ao desvincular determinação judicial da solicitação');
            }
        });
    }
};
exports.SolicitacaoService = SolicitacaoService;
exports.SolicitacaoService = SolicitacaoService = SolicitacaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(entities_1.Solicitacao)),
    __param(1, (0, typeorm_1.InjectRepository)(entities_1.HistoricoSolicitacao)),
    __param(2, (0, typeorm_1.InjectRepository)(entities_1.Pendencia)),
    __param(4, (0, typeorm_1.InjectRepository)(entities_1.DeterminacaoJudicial)),
    __param(6, (0, common_1.Inject)((0, common_1.forwardRef)(() => validacao_exclusividade_service_1.ValidacaoExclusividadeService))),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof processo_judicial_repository_1.ProcessoJudicialRepository !== "undefined" && processo_judicial_repository_1.ProcessoJudicialRepository) === "function" ? _d : Object, typeof (_e = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _e : Object, typeof (_f = typeof typeorm_2.Connection !== "undefined" && typeorm_2.Connection) === "function" ? _f : Object, typeof (_g = typeof validacao_exclusividade_service_1.ValidacaoExclusividadeService !== "undefined" && validacao_exclusividade_service_1.ValidacaoExclusividadeService) === "function" ? _g : Object])
], SolicitacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,