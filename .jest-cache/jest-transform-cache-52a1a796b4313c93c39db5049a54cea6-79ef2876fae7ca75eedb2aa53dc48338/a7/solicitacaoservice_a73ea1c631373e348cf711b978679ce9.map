{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\solicitacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\solicitacao.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n  UnauthorizedException,\n  ConflictException,\n  InternalServerErrorException,\n  Logger,\n  forwardRef,\n  Inject,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, ILike, Connection } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n  HistoricoSolicitacao,\n  ProcessoJudicial,\n  DeterminacaoJudicial,\n  StatusPendencia,\n  Pendencia,\n} from '../../../entities';\nimport { CreateSolicitacaoDto } from '../dto/create-solicitacao.dto';\nimport { UpdateSolicitacaoDto } from '../dto/update-solicitacao.dto';\nimport { AvaliarSolicitacaoDto } from '../dto/avaliar-solicitacao.dto';\nimport { VincularProcessoJudicialDto } from '../dto/vincular-processo-judicial.dto';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\nimport { VincularDeterminacaoJudicialDto } from '../dto/vincular-determinacao-judicial.dto';\nimport { ConverterPapelDto } from '../dto/converter-papel.dto';\nimport { ProcessoJudicialRepository } from '../../judicial/repositories/processo-judicial.repository';\nimport { ROLES } from '../../../shared/constants/roles.constants';\nimport { ValidacaoExclusividadeService } from './validacao-exclusividade.service';\n\n/**\n * Serviço de Solicitações\n *\n * Responsável pela lógica de negócio relacionada às solicitações de benefícios\n */\n@Injectable()\nexport class SolicitacaoService {\n  private readonly logger = new Logger(SolicitacaoService.name);\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private solicitacaoRepository: Repository<Solicitacao>,\n\n    @InjectRepository(HistoricoSolicitacao)\n    private historicoRepository: Repository<HistoricoSolicitacao>,\n\n    @InjectRepository(Pendencia)\n    private pendenciaRepository: Repository<Pendencia>,\n\n    private processoJudicialRepository: ProcessoJudicialRepository,\n\n    @InjectRepository(DeterminacaoJudicial)\n    private determinacaoJudicialRepository: Repository<DeterminacaoJudicial>,\n\n    private connection: Connection,\n\n    @Inject(forwardRef(() => ValidacaoExclusividadeService))\n    private validacaoExclusividadeService: ValidacaoExclusividadeService,\n  ) {}\n\n  /**\n   * Lista todas as solicitações com paginação e filtros\n   */\n  async findAll(options: {\n    page?: number;\n    limit?: number;\n    status?: StatusSolicitacao;\n    unidade_id?: string;\n    beneficio_id?: string;\n    protocolo?: string;\n    data_inicio?: string;\n    data_fim?: string;\n    user: any;\n  }) {\n    const {\n      page = 1,\n      limit = 10,\n      status,\n      unidade_id,\n      beneficio_id,\n      protocolo,\n      data_inicio,\n      data_fim,\n      user,\n    } = options;\n\n    const queryBuilder =\n      this.solicitacaoRepository.createQueryBuilder('solicitacao');\n\n    // Joins necessários\n    queryBuilder\n      .leftJoinAndSelect('solicitacao.beneficiario', 'beneficiario')\n      .leftJoinAndSelect('solicitacao.tipo_beneficio', 'tipo_beneficio')\n      .leftJoinAndSelect('solicitacao.unidade', 'unidade')\n      .leftJoinAndSelect('solicitacao.tecnico', 'tecnico');\n\n    // Aplicar filtros\n    if (status) {\n      queryBuilder.andWhere('solicitacao.status = :status', { status });\n    }\n\n    // Filtro por unidade com verificação de permissão\n    if (unidade_id) {\n      queryBuilder.andWhere('solicitacao.unidade_id = :unidade_id', {\n        unidade_id,\n      });\n    } else if (![ROLES.ADMIN, ROLES.GESTOR].includes(user.role)) {\n      // Usuários que não são admin ou gestor SEMTAS só podem ver solicitações da sua unidade\n      queryBuilder.andWhere('solicitacao.unidade_id = :unidade_id', {\n        unidade_id: user.unidade_id,\n      });\n    }\n\n    if (beneficio_id) {\n      queryBuilder.andWhere('solicitacao.tipo_beneficio_id = :beneficio_id', {\n        beneficio_id,\n      });\n    }\n\n    if (protocolo) {\n      queryBuilder.andWhere('solicitacao.protocolo ILIKE :protocolo', {\n        protocolo: `%${protocolo}%`,\n      });\n    }\n\n    // Filtro por período\n    if (data_inicio && data_fim) {\n      const inicio = new Date(data_inicio);\n      const fim = new Date(data_fim);\n      fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia\n\n      queryBuilder.andWhere(\n        'solicitacao.data_abertura BETWEEN :inicio AND :fim',\n        {\n          inicio,\n          fim,\n        },\n      );\n    } else if (data_inicio) {\n      const inicio = new Date(data_inicio);\n      queryBuilder.andWhere('solicitacao.data_abertura >= :inicio', { inicio });\n    } else if (data_fim) {\n      const fim = new Date(data_fim);\n      fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia\n      queryBuilder.andWhere('solicitacao.data_abertura <= :fim', { fim });\n    }\n\n    // Calcular paginação\n    const skip = (page - 1) * limit;\n    queryBuilder.skip(skip).take(limit);\n\n    // Ordenação padrão\n    queryBuilder.orderBy('solicitacao.data_abertura', 'DESC');\n\n    // Executar consulta\n    const [items, total] = await queryBuilder.getManyAndCount();\n\n    return {\n      items,\n      meta: {\n        currentPage: page,\n        itemsPerPage: limit,\n        totalItems: total,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Busca uma solicitação pelo ID\n   */\n  async findById(id: string): Promise<Solicitacao> {\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id },\n      relations: ['beneficiario', 'tipo_beneficio', 'unidade', 'tecnico'],\n    });\n\n    if (!solicitacao) {\n      throw new NotFoundException(`Solicitação com ID ${id} não encontrada`);\n    }\n\n    return solicitacao;\n  }\n\n  /**\n   * Cria uma nova solicitação\n   */\n  async create(\n    createSolicitacaoDto: CreateSolicitacaoDto,\n    user: any,\n  ): Promise<Solicitacao> {\n    // Validar exclusividade de papel para o beneficiário\n    await this.validacaoExclusividadeService.validarExclusividadeBeneficiario(\n      createSolicitacaoDto.beneficiario_id,\n    );\n\n    // Se tiver composição familiar, validar para cada membro\n    if (\n      createSolicitacaoDto.dados_complementares &&\n      createSolicitacaoDto.dados_complementares.composicao_familiar &&\n      Array.isArray(\n        createSolicitacaoDto.dados_complementares.composicao_familiar,\n      ) &&\n      createSolicitacaoDto.dados_complementares.composicao_familiar.length > 0\n    ) {\n      const composicaoFamiliar =\n        createSolicitacaoDto.dados_complementares.composicao_familiar.map(\n          (membro) => membro.cidadao_id,\n        );\n      await this.validacaoExclusividadeService.validarComposicaoFamiliarCompleta(\n        composicaoFamiliar,\n      );\n    }\n    return this.connection.transaction(async (manager) => {\n      // Criar uma nova instância de Solicitacao\n      const solicitacao = new Solicitacao();\n\n      // Determinar a unidade: se usuário não tem unidade, usar do DTO (obrigatório)\n      let unidadeId: string;\n      if (!user.unidade_id) {\n        if (!createSolicitacaoDto.unidade_id) {\n          throw new BadRequestException(\n            'Usuário não possui unidade vinculada. O campo unidade_id é obrigatório.',\n          );\n        }\n        unidadeId = createSolicitacaoDto.unidade_id;\n      } else {\n        unidadeId = user.unidade_id;\n      }\n\n      // Preencher os dados básicos\n      solicitacao.beneficiario_id = createSolicitacaoDto.beneficiario_id;\n      solicitacao.tipo_beneficio_id = createSolicitacaoDto.tipo_beneficio_id;\n      solicitacao.unidade_id = unidadeId;\n      solicitacao.tecnico_id = user.id;\n      solicitacao.status = StatusSolicitacao.RASCUNHO;\n      solicitacao.data_abertura = new Date();\n\n      // Normalizar enums nos dados complementares antes de salvar\n      const dadosComplementares =\n        createSolicitacaoDto.dados_complementares || {};\n      solicitacao.dados_complementares =\n        normalizeEnumFields(dadosComplementares);\n\n      // Salvar a solicitação\n      const savedSolicitacao = await manager.save(solicitacao);\n\n      // Registrar no histórico\n      const historico = new HistoricoSolicitacao();\n      historico.solicitacao_id = savedSolicitacao.id;\n      historico.usuario_id = user.id;\n      historico.status_anterior = StatusSolicitacao.ABERTA;\n      historico.status_atual = StatusSolicitacao.ABERTA;\n      historico.observacao = 'Solicitação criada';\n      historico.dados_alterados = { acao: 'criacao' };\n      historico.ip_usuario = user.ip || '0.0.0.0';\n\n      await manager.save(historico);\n\n      // Buscar a solicitação criada dentro da transação com relações essenciais\n      const solicitacaoCompleta = await manager.findOne(Solicitacao, {\n        where: { id: savedSolicitacao.id },\n        relations: [\n          'beneficiario',\n          'tipo_beneficio',\n          'unidade',\n          'tecnico',\n          'historico',\n        ],\n      });\n\n      if (!solicitacaoCompleta) {\n        throw new NotFoundException(\n          `Solicitação com ID ${savedSolicitacao.id} não encontrada após criação`,\n        );\n      }\n\n      return solicitacaoCompleta;\n    });\n  }\n\n  /**\n   * Atualiza uma solicitação existente\n   */\n  async update(\n    id: string,\n    updateSolicitacaoDto: UpdateSolicitacaoDto,\n    user: any,\n  ): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      // Buscar a solicitação\n      const solicitacao = await this.findById(id);\n\n      // Check if request status allows editing based on business rules\n      const EDITABLE_STATUSES = [\n        StatusSolicitacao.ABERTA,\n        StatusSolicitacao.PENDENTE,\n      ];\n\n      if (!EDITABLE_STATUSES.includes(solicitacao.status)) {\n        const statusMessage = `Status atual: ${solicitacao.status}`;\n        const allowedMessage = `Status disponíveis: ${EDITABLE_STATUSES.join(', ')}`;\n\n        throw new BadRequestException({\n          message: 'A solicitação não pode ser editado neste status.',\n          detalhes: {\n            statusAtual: solicitacao.status,\n            statusPossiveis: EDITABLE_STATUSES,\n          },\n          contexto: `${statusMessage}. ${allowedMessage}`,\n        });\n      }\n\n      // Atualizar os dados\n      // Nota: beneficiario_id não pode ser atualizado conforme definido no DTO\n\n      if (updateSolicitacaoDto.tipo_beneficio_id) {\n        solicitacao.tipo_beneficio_id = updateSolicitacaoDto.tipo_beneficio_id;\n      }\n\n      if (updateSolicitacaoDto.dados_complementares) {\n        // Normalizar enums nos dados complementares antes de salvar\n        solicitacao.dados_complementares = normalizeEnumFields(\n          updateSolicitacaoDto.dados_complementares,\n        );\n      }\n\n      // Salvar a solicitação\n      await manager.save(solicitacao);\n\n      // Registrar no histórico\n      const historico = new HistoricoSolicitacao();\n      historico.solicitacao_id = id;\n      historico.usuario_id = user.id;\n      historico.status_anterior = solicitacao.status;\n      historico.status_atual = solicitacao.status;\n      historico.observacao = 'Solicitação atualizada';\n      historico.dados_alterados = {\n        campos_alterados: Object.keys(updateSolicitacaoDto),\n      };\n      historico.ip_usuario = user.ip || '0.0.0.0';\n\n      await manager.save(historico);\n\n      return this.findById(id);\n    });\n  }\n\n  /**\n   * Submete uma solicitação para análise\n   */\n  async submeterSolicitacao(id: string, user: any): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      // Buscar a solicitação\n      const solicitacao = await this.findById(id);\n\n      // Verificar se a solicitação está em estado que permite submissão\n      if (solicitacao.status !== StatusSolicitacao.RASCUNHO) {\n        throw new BadRequestException(\n          `Não é possível submeter uma solicitação com status ${solicitacao.status}`,\n        );\n      }\n\n      // Atualizar o status usando o método preparar\n      solicitacao.prepararAlteracaoStatus(\n        StatusSolicitacao.EM_ANALISE,\n        user.id,\n        'Solicitação submetida para análise',\n        user.ip || '0.0.0.0',\n      );\n\n      await manager.save(solicitacao);\n\n      // Register in history\n      const historico = new HistoricoSolicitacao();\n      historico.solicitacao_id = id;\n      historico.usuario_id = user.id;\n      historico.status_anterior = StatusSolicitacao.RASCUNHO;\n      historico.status_atual = solicitacao.status;\n      historico.observacao = 'Solicitação submetida para análise';\n      historico.dados_alterados = {\n        campos_alterados: Object.keys(UpdateSolicitacaoDto),\n      };\n      historico.ip_usuario = user.ip || '0.0.0.0';\n\n      await manager.save(historico);\n\n      return this.findById(id);\n    });\n  }\n\n  /**\n   * Avalia uma solicitação (aprovar/pendenciar)\n   */\n  async avaliarSolicitacao(\n    id: string,\n    avaliarSolicitacaoDto: AvaliarSolicitacaoDto,\n    user: any,\n  ): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      // Buscar a solicitação\n      const solicitacao = await this.findById(id);\n\n      // Verificar se a solicitação está em estado que permite avaliação\n      if (\n        solicitacao.status !== StatusSolicitacao.PENDENTE &&\n        solicitacao.status !== StatusSolicitacao.EM_ANALISE\n      ) {\n        throw new BadRequestException(\n          `Não é possível avaliar uma solicitação com status ${solicitacao.status}`,\n        );\n      }\n\n      // Determinar o novo status\n      const novoStatus = avaliarSolicitacaoDto.aprovado\n        ? StatusSolicitacao.APROVADA\n        : StatusSolicitacao.AGUARDANDO_DOCUMENTOS;\n\n      // Atualizar o status usando o método preparar\n      solicitacao.prepararAlteracaoStatus(\n        novoStatus,\n        user.id,\n        avaliarSolicitacaoDto.parecer,\n        user.ip || '0.0.0.0',\n      );\n\n      if (avaliarSolicitacaoDto.aprovado) {\n        solicitacao.aprovador_id = user.id;\n        solicitacao.data_aprovacao = new Date();\n        solicitacao.parecer_semtas = avaliarSolicitacaoDto.parecer;\n      } else {\n        // Registrar pendências\n        if (\n          avaliarSolicitacaoDto.pendencias &&\n          avaliarSolicitacaoDto.pendencias.length > 0\n        ) {\n          for (const descricaoTexto of avaliarSolicitacaoDto.pendencias) {\n            // Criar uma nova instância de Pendencia diretamente para evitar problemas de tipagem\n            const pendencia = new Pendencia();\n            pendencia.solicitacao_id = id;\n            pendencia.descricao = descricaoTexto;\n            pendencia.status = StatusPendencia.ABERTA;\n            pendencia.registrado_por_id = user.id; // Usando registrado_por_id conforme definido na entidade\n\n            await manager.save(pendencia);\n          }\n        }\n      }\n\n      // Salvar a solicitação com o manager da transação\n      await manager.save(solicitacao);\n\n      // Não é mais necessário registrar manualmente no histórico\n      // O método logStatusChange fará isso automaticamente através do listener @AfterUpdate\n\n      return this.findById(id);\n    });\n  }\n\n  /**\n   * Libera um benefício aprovado\n   */\n  async liberarBeneficio(id: string, user: any): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      // Buscar a solicitação\n      const solicitacao = await this.findById(id);\n\n      // Verificar se o usuário tem permissão\n      if (![ROLES.ADMIN, ROLES.GESTOR].includes(user.role)) {\n        throw new UnauthorizedException(\n          'Você não tem permissão para liberar benefícios',\n        );\n      }\n\n      // Verificar se a solicitação está aprovada\n      if (solicitacao.status !== StatusSolicitacao.APROVADA) {\n        throw new BadRequestException(\n          'Apenas solicitações aprovadas podem ser liberadas',\n        );\n      }\n\n      // Atualizar o status usando o método preparar\n      solicitacao.prepararAlteracaoStatus(\n        StatusSolicitacao.LIBERADA,\n        user.id,\n        'Benefício liberado para pagamento/entrega',\n        user.ip || '0.0.0.0',\n      );\n      solicitacao.liberador_id = user.id;\n      solicitacao.data_liberacao = new Date();\n\n      // Salvar a solicitação com o manager da transação\n      await manager.save(solicitacao);\n\n      // Não é mais necessário registrar manualmente no histórico\n      // O método logStatusChange fará isso automaticamente através do listener @AfterUpdate\n\n      return this.findById(id);\n    });\n  }\n\n  /**\n   * Cancela uma solicitação\n   */\n  async cancelarSolicitacao(id: string, user: any): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      // Buscar a solicitação\n      const solicitacao = await this.findById(id);\n\n      // Verificar se o usuário tem permissão\n      if (![ROLES.ADMIN, ROLES.GESTOR, ROLES.TECNICO].includes(user.role)) {\n        throw new UnauthorizedException(\n          'Você não tem permissão para cancelar solicitações',\n        );\n      }\n\n      // Verificar se a solicitação pode ser cancelada\n      if (solicitacao.status === StatusSolicitacao.LIBERADA) {\n        throw new BadRequestException(\n          'Não é possível cancelar uma solicitação já liberada',\n        );\n      }\n\n      // Atualizar o status usando o método preparar\n      solicitacao.prepararAlteracaoStatus(\n        StatusSolicitacao.CANCELADA,\n        user.id,\n        'Solicitação cancelada pelo usuário',\n        user.ip || '0.0.0.0',\n      );\n\n      // Salvar a solicitação com o manager da transação\n      await manager.save(solicitacao);\n\n      // Não é mais necessário registrar manualmente no histórico\n      // O método logStatusChange fará isso automaticamente através do listener @AfterUpdate\n\n      return this.findById(id);\n    });\n  }\n\n  /**\n   * Lista o histórico de uma solicitação\n   */\n  async getHistorico(solicitacaoId: string) {\n    // Verificar se a solicitação existe\n    await this.findById(solicitacaoId);\n\n    // Buscar o histórico\n    return this.historicoRepository.find({\n      where: { solicitacao_id: solicitacaoId },\n      order: { created_at: 'DESC' },\n      relations: ['usuario'],\n    });\n  }\n\n  /**\n   * Lista as pendências de uma solicitação\n   */\n  async getPendencias(solicitacaoId: string) {\n    // Verificar se a solicitação existe\n    await this.findById(solicitacaoId);\n\n    // Buscar as pendências\n    return this.pendenciaRepository.find({\n      where: { solicitacao_id: solicitacaoId },\n      order: { created_at: 'DESC' },\n    });\n  }\n\n  /**\n   * Vincula um processo judicial a uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param vincularDto Dados do vínculo\n   * @param user Usuário que está realizando a operação\n   * @returns Solicitação atualizada\n   */\n  async vincularProcessoJudicial(\n    solicitacaoId: string,\n    vincularDto: VincularProcessoJudicialDto,\n    user: any,\n  ): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      try {\n        // Verificar se a solicitação existe\n        const solicitacao = await this.findById(solicitacaoId);\n\n        // Verificar se o usuário tem permissão\n        if (![ROLES.ADMIN, ROLES.GESTOR, ROLES.TECNICO].includes(user.role)) {\n          throw new UnauthorizedException(\n            'Você não tem permissão para vincular processos judiciais',\n          );\n        }\n\n        // Verificar se o processo judicial existe\n        const processoJudicial = await this.processoJudicialRepository.findOne({\n          where: { id: vincularDto.processo_judicial_id },\n        });\n\n        if (!processoJudicial) {\n          throw new NotFoundException('Processo judicial não encontrado');\n        }\n\n        // Verificar se a solicitação já tem este processo vinculado\n        if (\n          solicitacao.processo_judicial_id === vincularDto.processo_judicial_id\n        ) {\n          throw new ConflictException(\n            'Este processo judicial já está vinculado à solicitação',\n          );\n        }\n\n        // Atualizar a solicitação\n        solicitacao.processo_judicial_id = vincularDto.processo_judicial_id;\n\n        // Registrar no histórico\n        const historicoEntry = this.historicoRepository.create(\n          normalizeEnumFields({\n            solicitacao_id: solicitacaoId,\n            status_anterior: solicitacao.status,\n            status_atual: solicitacao.status,\n            usuario_id: user.id,\n            observacao: vincularDto.observacao || 'Processo judicial vinculado',\n            dados_alterados: {\n              processo_judicial: {\n                id: vincularDto.processo_judicial_id,\n                numero: processoJudicial.numero_processo,\n              },\n            },\n            ip_usuario: user.ip || '0.0.0.0',\n          }),\n        );\n\n        // Salvar as alterações\n        await manager.save(solicitacao);\n        await manager.save(historicoEntry);\n\n        return this.findById(solicitacaoId);\n      } catch (error) {\n        if (\n          error instanceof NotFoundException ||\n          error instanceof UnauthorizedException ||\n          error instanceof ConflictException\n        ) {\n          throw error;\n        }\n\n        this.logger.error(\n          `Erro ao vincular processo judicial: ${error.message}`,\n          error.stack,\n        );\n        throw new InternalServerErrorException(\n          'Erro ao vincular processo judicial à solicitação',\n        );\n      }\n    });\n  }\n\n  /**\n   * Desvincula um processo judicial de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param user Usuário que está realizando a operação\n   * @returns Solicitação atualizada\n   */\n  async desvincularProcessoJudicial(\n    solicitacaoId: string,\n    user: any,\n  ): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      try {\n        // Verificar se a solicitação existe\n        const solicitacao = await this.findById(solicitacaoId);\n\n        // Verificar se o usuário tem permissão\n        if (![ROLES.ADMIN, ROLES.GESTOR].includes(user.role)) {\n          throw new UnauthorizedException(\n            'Você não tem permissão para desvincular processos judiciais',\n          );\n        }\n\n        // Verificar se a solicitação tem processo vinculado\n        if (!solicitacao.processo_judicial_id) {\n          throw new BadRequestException(\n            'Esta solicitação não possui processo judicial vinculado',\n          );\n        }\n\n        // Guardar informação do processo para o histórico\n        const processoJudicialId = solicitacao.processo_judicial_id;\n        const processoJudicial = await this.processoJudicialRepository.findOne({\n          where: { id: processoJudicialId },\n        });\n\n        // Atualizar a solicitação\n        solicitacao.processo_judicial_id = null as unknown as string;\n\n        // Registrar no histórico\n        const historicoEntry = this.historicoRepository.create(\n          normalizeEnumFields({\n            solicitacao_id: solicitacaoId,\n            status_anterior: solicitacao.status,\n            status_atual: solicitacao.status,\n            usuario_id: user.id,\n            observacao: 'Processo judicial desvinculado',\n            dados_alterados: {\n              processo_judicial: {\n                id: processoJudicialId,\n                numero: processoJudicial\n                  ? processoJudicial.numero_processo\n                  : 'Desconhecido',\n                acao: 'removido',\n              },\n            },\n            ip_usuario: user.ip || '0.0.0.0',\n          }),\n        );\n\n        // Salvar as alterações\n        await manager.save(solicitacao);\n        await manager.save(historicoEntry);\n\n        return this.findById(solicitacaoId);\n      } catch (error) {\n        if (\n          error instanceof NotFoundException ||\n          error instanceof UnauthorizedException ||\n          error instanceof BadRequestException\n        ) {\n          throw error;\n        }\n\n        this.logger.error(\n          `Erro ao desvincular processo judicial: ${error.message}`,\n          error.stack,\n        );\n        throw new InternalServerErrorException(\n          'Erro ao desvincular processo judicial da solicitação',\n        );\n      }\n    });\n  }\n\n  /**\n   * Vincula uma determinação judicial a uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param vincularDto Dados do vínculo\n   * @param user Usuário que está realizando a operação\n   * @returns Solicitação atualizada\n   */\n  async vincularDeterminacaoJudicial(\n    solicitacaoId: string,\n    vincularDto: VincularDeterminacaoJudicialDto,\n    user: any,\n  ): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      try {\n        // Verificar se a solicitação existe\n        const solicitacao = await this.findById(solicitacaoId);\n\n        // Verificar se o usuário tem permissão\n        if (![ROLES.ADMIN, ROLES.GESTOR, ROLES.TECNICO].includes(user.role)) {\n          throw new UnauthorizedException(\n            'Você não tem permissão para vincular determinações judiciais',\n          );\n        }\n\n        // Verificar se a determinação judicial existe\n        const determinacaoJudicial =\n          await this.determinacaoJudicialRepository.findOne({\n            where: { id: vincularDto.determinacao_judicial_id },\n          });\n\n        if (!determinacaoJudicial) {\n          throw new NotFoundException('Determinação judicial não encontrada');\n        }\n\n        // Verificar se a solicitação já tem esta determinação vinculada\n        if (\n          solicitacao.determinacao_judicial_id ===\n          vincularDto.determinacao_judicial_id\n        ) {\n          throw new ConflictException(\n            'Esta determinação judicial já está vinculada à solicitação',\n          );\n        }\n\n        // Atualizar a solicitação\n        solicitacao.determinacao_judicial_id =\n          vincularDto.determinacao_judicial_id;\n\n        // Registrar no histórico\n        const historicoEntry = this.historicoRepository.create(\n          normalizeEnumFields({\n            solicitacao_id: solicitacaoId,\n            status_anterior: solicitacao.status,\n            status_atual: solicitacao.status,\n            usuario_id: user.id,\n            observacao:\n              vincularDto.observacao || 'Determinação judicial vinculada',\n            dados_alterados: {\n              determinacao_judicial: {\n                id: vincularDto.determinacao_judicial_id,\n                numero: determinacaoJudicial.numero_determinacao,\n              },\n            },\n            ip_usuario: user.ip || '0.0.0.0',\n          }),\n        );\n\n        // Salvar as alterações\n        await manager.save(solicitacao);\n        await manager.save(historicoEntry);\n\n        return this.findById(solicitacaoId);\n      } catch (error) {\n        if (\n          error instanceof NotFoundException ||\n          error instanceof UnauthorizedException ||\n          error instanceof ConflictException\n        ) {\n          throw error;\n        }\n\n        this.logger.error(\n          `Erro ao vincular determinação judicial: ${error.message}`,\n          error.stack,\n        );\n        throw new InternalServerErrorException(\n          'Erro ao vincular determinação judicial à solicitação',\n        );\n      }\n    });\n  }\n\n  /**\n   * Desvincula uma determinação judicial de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param user Usuário que está realizando a operação\n   * @returns Solicitação atualizada\n   */\n  /**\n   * Converte um cidadão da composição familiar para beneficiário principal de uma nova solicitação\n   * @param converterPapelDto Dados para conversão de papel\n   * @param user Usuário que está realizando a operação\n   * @returns Nova solicitação criada\n   */\n  async converterPapel(\n    converterPapelDto: ConverterPapelDto,\n    user: any,\n  ): Promise<Solicitacao> {\n    this.logger.log(\n      `Iniciando conversão de papel para cidadão ${converterPapelDto.cidadao_id}`,\n    );\n\n    return this.connection.transaction(async (manager) => {\n      try {\n        // Buscar a solicitação de origem\n        const solicitacaoOrigem = await this.findById(\n          converterPapelDto.solicitacao_origem_id,\n        );\n\n        if (!solicitacaoOrigem) {\n          throw new NotFoundException('Solicitação de origem não encontrada');\n        }\n\n        // Verificar se o cidadão está na composição familiar da solicitação\n        const composicaoFamiliar =\n          solicitacaoOrigem.dados_complementares?.composicao_familiar || [];\n        const membroIndex = composicaoFamiliar.findIndex(\n          (membro) => membro.cidadao_id === converterPapelDto.cidadao_id,\n        );\n\n        if (membroIndex === -1) {\n          throw new BadRequestException(\n            'Cidadão não encontrado na composição familiar da solicitação de origem',\n          );\n        }\n\n        // Obter o membro e remover da composição familiar\n        const membro = { ...composicaoFamiliar[membroIndex] };\n        composicaoFamiliar.splice(membroIndex, 1);\n\n        // Atualizar a solicitação de origem com a nova composição familiar\n        solicitacaoOrigem.dados_complementares = {\n          ...solicitacaoOrigem.dados_complementares,\n          composicao_familiar: composicaoFamiliar,\n        };\n\n        await manager.save(solicitacaoOrigem);\n\n        // Criar uma nova solicitação com o cidadão como beneficiário principal\n        const novaSolicitacao = new Solicitacao();\n        novaSolicitacao.beneficiario_id = converterPapelDto.cidadao_id;\n        novaSolicitacao.tipo_beneficio_id = converterPapelDto.tipo_beneficio_id;\n        novaSolicitacao.unidade_id = converterPapelDto.unidade_id;\n        novaSolicitacao.tecnico_id = user.id;\n        novaSolicitacao.status = StatusSolicitacao.RASCUNHO;\n        novaSolicitacao.data_abertura = new Date();\n        novaSolicitacao.solicitacao_original_id =\n          converterPapelDto.solicitacao_origem_id;\n        novaSolicitacao.dados_complementares =\n          converterPapelDto.dados_complementares || {};\n\n        // Adicionar observação sobre a conversão de papel\n        novaSolicitacao.observacoes = `Solicitação criada a partir da conversão de papel. Justificativa: ${converterPapelDto.justificativa}`;\n\n        await manager.save(novaSolicitacao);\n\n        // Registrar no histórico da solicitação de origem\n        const historicoOrigem = this.historicoRepository.create(\n          normalizeEnumFields({\n            solicitacao_id: solicitacaoOrigem.id,\n            status_anterior: solicitacaoOrigem.status,\n            status_atual: solicitacaoOrigem.status,\n            usuario_id: user.id,\n            observacao: `Cidadão removido da composição familiar para se tornar beneficiário principal em nova solicitação (${novaSolicitacao.protocolo})`,\n            dados_alterados: {\n              composicao_familiar: {\n                acao: 'remocao_membro',\n                cidadao_id: converterPapelDto.cidadao_id,\n                nova_solicitacao_id: novaSolicitacao.id,\n                nova_solicitacao_protocolo: novaSolicitacao.protocolo,\n              },\n            },\n            ip_usuario: user.ip || '0.0.0.0',\n          }),\n        );\n\n        await manager.save(historicoOrigem);\n\n        // Registrar no histórico da nova solicitação\n        const historicoNova = this.historicoRepository.create(\n          normalizeEnumFields({\n            solicitacao_id: novaSolicitacao.id,\n            status_anterior: StatusSolicitacao.RASCUNHO,\n            status_atual: StatusSolicitacao.RASCUNHO,\n            usuario_id: user.id,\n            observacao: `Solicitação criada a partir da conversão de papel do cidadão que estava na composição familiar da solicitação ${solicitacaoOrigem.protocolo}`,\n            dados_alterados: {\n              conversao_papel: {\n                solicitacao_origem_id: solicitacaoOrigem.id,\n                solicitacao_origem_protocolo: solicitacaoOrigem.protocolo,\n                justificativa: converterPapelDto.justificativa,\n              },\n            },\n            ip_usuario: user.ip || '0.0.0.0',\n          }),\n        );\n\n        await manager.save(historicoNova);\n\n        this.logger.log(\n          `Conversão de papel concluída com sucesso. Nova solicitação: ${novaSolicitacao.id}`,\n        );\n\n        return this.findById(novaSolicitacao.id);\n      } catch (error) {\n        if (\n          error instanceof NotFoundException ||\n          error instanceof UnauthorizedException ||\n          error instanceof BadRequestException\n        ) {\n          throw error;\n        }\n\n        this.logger.error(\n          `Erro ao converter papel do cidadão: ${error.message}`,\n          error.stack,\n        );\n        throw new InternalServerErrorException(\n          'Erro ao converter papel do cidadão para beneficiário principal',\n        );\n      }\n    });\n  }\n\n  async desvincularDeterminacaoJudicial(\n    solicitacaoId: string,\n    user: any,\n  ): Promise<Solicitacao> {\n    return this.connection.transaction(async (manager) => {\n      try {\n        // Verificar se a solicitação existe\n        const solicitacao = await this.findById(solicitacaoId);\n\n        // Verificar se o usuário tem permissão\n        if (![ROLES.ADMIN, ROLES.GESTOR].includes(user.role)) {\n          throw new UnauthorizedException(\n            'Você não tem permissão para desvincular determinações judiciais',\n          );\n        }\n\n        // Verificar se a solicitação tem determinação vinculada\n        if (!solicitacao.determinacao_judicial_id) {\n          throw new BadRequestException(\n            'Esta solicitação não possui determinação judicial vinculada',\n          );\n        }\n\n        // Guardar informação da determinação para o histórico\n        const determinacaoJudicialId = solicitacao.determinacao_judicial_id;\n        const determinacaoJudicial =\n          await this.determinacaoJudicialRepository.findOne({\n            where: { id: determinacaoJudicialId },\n          });\n\n        // Atualizar a solicitação\n        solicitacao.determinacao_judicial_id = null as unknown as string;\n\n        // Registrar no histórico\n        const historicoEntry = this.historicoRepository.create(\n          normalizeEnumFields({\n            solicitacao_id: solicitacaoId,\n            status_anterior: solicitacao.status,\n            status_atual: solicitacao.status,\n            usuario_id: user.id,\n            observacao: 'Determinação judicial desvinculada',\n            dados_alterados: {\n              determinacao_judicial: {\n                id: determinacaoJudicialId,\n                numero: determinacaoJudicial\n                  ? determinacaoJudicial.numero_determinacao\n                  : 'Desconhecida',\n                acao: 'removida',\n              },\n            },\n            ip_usuario: user.ip || '0.0.0.0',\n          }),\n        );\n\n        // Salvar as alterações\n        await manager.save(solicitacao);\n        await manager.save(historicoEntry);\n\n        return this.findById(solicitacaoId);\n      } catch (error) {\n        if (\n          error instanceof NotFoundException ||\n          error instanceof UnauthorizedException ||\n          error instanceof BadRequestException\n        ) {\n          throw error;\n        }\n\n        this.logger.error(\n          `Erro ao desvincular determinação judicial: ${error.message}`,\n          error.stack,\n        );\n        throw new InternalServerErrorException(\n          'Erro ao desvincular determinação judicial da solicitação',\n        );\n      }\n    });\n  }\n}\n"],"version":3}