645f29fe92e40deef6f7b8594c623120
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateDadosSociaisDto = void 0;
const swagger_1 = require("@nestjs/swagger");
const create_dados_sociais_dto_1 = require("./create-dados-sociais.dto");
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
const escolaridade_enum_1 = require("../../../enums/escolaridade.enum");
const situacao_trabalho_enum_1 = require("../../../enums/situacao-trabalho.enum");
const enum_validator_1 = require("../../../shared/validators/enum-validator");
/**
 * DTO para atualização de dados sociais de um cidadão
 *
 * Permite atualização parcial dos dados sociais, mantendo as mesmas
 * validações do DTO de criação mas com todos os campos opcionais.
 */
class UpdateDadosSociaisDto extends (0, swagger_1.PartialType)(create_dados_sociais_dto_1.CreateDadosSociaisDto) {
    escolaridade;
    publico_prioritario;
    renda;
    ocupacao;
    recebe_pbf;
    valor_pbf;
    recebe_bpc;
    tipo_bpc;
    valor_bpc;
    curso_profissionalizante;
    interesse_curso_profissionalizante;
    situacao_trabalho;
    area_trabalho;
    familiar_apto_trabalho;
    area_interesse_familiar;
    observacoes;
}
exports.UpdateDadosSociaisDto = UpdateDadosSociaisDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Nível de escolaridade do cidadão',
        enum: escolaridade_enum_1.EscolaridadeEnum,
        example: escolaridade_enum_1.EscolaridadeEnum.MEDIO_COMPLETO,
        required: false,
        enumName: 'EscolaridadeEnum'
    }),
    (0, class_validator_1.IsOptional)(),
    (0, enum_validator_1.IsEnumValue)(escolaridade_enum_1.EscolaridadeEnum, {
        enumName: 'Escolaridade',
        caseSensitive: false,
    }),
    __metadata("design:type", typeof (_a = typeof escolaridade_enum_1.EscolaridadeEnum !== "undefined" && escolaridade_enum_1.EscolaridadeEnum) === "function" ? _a : Object)
], UpdateDadosSociaisDto.prototype, "escolaridade", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão faz parte de público prioritário',
        example: true,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo publico_prioritario deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], UpdateDadosSociaisDto.prototype, "publico_prioritario", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Renda mensal do cidadão em reais',
        example: 1500.50,
        minimum: 0,
        maximum: 50000,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({ maxDecimalPlaces: 2 }, { message: 'Renda deve ser um número válido com no máximo 2 casas decimais' }),
    (0, class_validator_1.Min)(0, { message: 'Renda não pode ser negativa' }),
    (0, class_validator_1.Max)(50000, { message: 'Renda não pode exceder R$ 50.000,00' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            // Remove vírgulas e converte para número
            const cleanValue = value.replace(/,/g, '.');
            return parseFloat(cleanValue);
        }
        return value;
    }),
    __metadata("design:type", Number)
], UpdateDadosSociaisDto.prototype, "renda", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Ocupação ou profissão do cidadão',
        example: 'Auxiliar de limpeza',
        maxLength: 255,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Ocupação deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Ocupação deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], UpdateDadosSociaisDto.prototype, "ocupacao", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão recebe Programa Bolsa Família',
        example: false,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo recebe_pbf deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], UpdateDadosSociaisDto.prototype, "recebe_pbf", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Valor mensal recebido do Programa Bolsa Família',
        example: 400.00,
        minimum: 50,
        maximum: 10000,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.ValidateIf)((o) => o.recebe_pbf === true),
    (0, class_validator_1.IsNumber)({ maxDecimalPlaces: 2 }, { message: 'Valor do PBF deve ser um número válido com no máximo 2 casas decimais' }),
    (0, class_validator_1.Min)(50, { message: 'Valor do PBF deve ser no mínimo R$ 50,00' }),
    (0, class_validator_1.Max)(10000, { message: 'Valor do PBF não pode exceder R$ 10.000,00' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            // Remove vírgulas e espaços, converte para número
            const cleanValue = value.replace(/[,\s]/g, '.').replace(/\.{2,}/g, '.');
            return parseFloat(cleanValue) || 0;
        }
        return value;
    }),
    __metadata("design:type", Number)
], UpdateDadosSociaisDto.prototype, "valor_pbf", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão recebe Benefício de Prestação Continuada',
        example: false,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo recebe_bpc deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], UpdateDadosSociaisDto.prototype, "recebe_bpc", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tipo do BPC recebido (idoso, deficiente, etc.)',
        example: 'Pessoa com deficiência',
        maxLength: 100,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.ValidateIf)((o) => o.recebe_bpc === true),
    (0, class_validator_1.IsString)({ message: 'Tipo do BPC deve ser um texto' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Tipo do BPC deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], UpdateDadosSociaisDto.prototype, "tipo_bpc", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Valor mensal recebido do BPC',
        example: 1320.00,
        minimum: 100,
        maximum: 10000,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.ValidateIf)((o) => o.recebe_bpc === true),
    (0, class_validator_1.IsNumber)({ maxDecimalPlaces: 2 }, { message: 'Valor do BPC deve ser um número válido com no máximo 2 casas decimais' }),
    (0, class_validator_1.Min)(100, { message: 'Valor do BPC deve ser no mínimo R$ 100,00' }),
    (0, class_validator_1.Max)(10000, { message: 'Valor do BPC não pode exceder R$ 10.000,00' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            // Remove vírgulas e espaços, converte para número
            const cleanValue = value.replace(/[,\s]/g, '.').replace(/\.{2,}/g, '.');
            return parseFloat(cleanValue) || 0;
        }
        return value;
    }),
    __metadata("design:type", Number)
], UpdateDadosSociaisDto.prototype, "valor_bpc", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Curso profissionalizante que o cidadão possui ou está cursando',
        example: 'Técnico em Informática',
        maxLength: 255,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Curso profissionalizante deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Curso profissionalizante deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], UpdateDadosSociaisDto.prototype, "curso_profissionalizante", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o cidadão tem interesse em fazer curso profissionalizante',
        example: true,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo interesse_curso_profissionalizante deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], UpdateDadosSociaisDto.prototype, "interesse_curso_profissionalizante", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Situação atual de trabalho do cidadão',
        enum: situacao_trabalho_enum_1.SituacaoTrabalhoEnum,
        example: situacao_trabalho_enum_1.SituacaoTrabalhoEnum.DESEMPREGADO,
        required: false,
        enumName: 'SituacaoTrabalhoEnum'
    }),
    (0, class_validator_1.IsOptional)(),
    (0, enum_validator_1.IsEnumValue)(situacao_trabalho_enum_1.SituacaoTrabalhoEnum, {
        enumName: 'Situação de Trabalho',
        caseSensitive: false,
    }),
    __metadata("design:type", typeof (_b = typeof situacao_trabalho_enum_1.SituacaoTrabalhoEnum !== "undefined" && situacao_trabalho_enum_1.SituacaoTrabalhoEnum) === "function" ? _b : Object)
], UpdateDadosSociaisDto.prototype, "situacao_trabalho", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Área de trabalho ou interesse profissional',
        example: 'Serviços gerais',
        maxLength: 255,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Área de trabalho deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Área de trabalho deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], UpdateDadosSociaisDto.prototype, "area_trabalho", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se há familiar apto para trabalhar na composição familiar',
        example: true,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsBoolean)({ message: 'O campo familiar_apto_trabalho deve ser verdadeiro ou falso' }),
    (0, class_transformer_1.Transform)(({ value }) => {
        if (typeof value === 'string') {
            return value.toLowerCase() === 'true';
        }
        return value;
    }),
    __metadata("design:type", Boolean)
], UpdateDadosSociaisDto.prototype, "familiar_apto_trabalho", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Área de interesse profissional de familiares',
        example: 'Construção civil',
        maxLength: 255,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Área de interesse familiar deve ser um texto' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Área de interesse familiar deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], UpdateDadosSociaisDto.prototype, "area_interesse_familiar", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Observações adicionais sobre a situação social',
        example: 'Família em situação de vulnerabilidade social',
        maxLength: 1000,
        required: false,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Observações devem ser um texto' }),
    (0, class_validator_1.MaxLength)(1000, { message: 'Observações devem ter no máximo 1000 caracteres' }),
    __metadata("design:type", String)
], UpdateDadosSociaisDto.prototype, "observacoes", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,