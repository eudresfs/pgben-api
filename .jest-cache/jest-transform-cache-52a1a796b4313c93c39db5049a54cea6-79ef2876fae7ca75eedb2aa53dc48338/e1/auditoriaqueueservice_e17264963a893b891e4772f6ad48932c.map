{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-queue.service.ts","mappings":";;;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,uCAA2C;AAC3C,+BAA6B;AAC7B,2CAAwC;AACxC,8EAAwE;AACxE,0EAAiE;AAEjE;;;;;GAKG;AAEI,IAAM,qBAAqB,6BAA3B,MAAM,qBAAqB;IAIa;IAH5B,MAAM,GAAG,IAAI,eAAM,CAAC,uBAAqB,CAAC,IAAI,CAAC,CAAC;IAEjE,YAC6C,cAAqB;QAArB,mBAAc,GAAd,cAAc,CAAO;IAC/D,CAAC;IAEJ;;;;;OAKG;IACH,KAAK,CAAC,YAAY,CAAC,eAAsC;QACvD,IAAI,CAAC;YACH,iEAAiE;YACjE,0BAA0B;YAC1B,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,eAAe,EAAE,eAAe,EAAE;gBAC9D,QAAQ,EAAE,CAAC;gBACX,gBAAgB,EAAE,IAAI;aACvB,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,gCAAgC,eAAe,CAAC,gBAAgB,MAAM,eAAe,CAAC,aAAa,EAAE,CACtG,CAAC;QACJ,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,MAAM,YAAY,GAChB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,CAAC;YAE/D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,YAAY,EAAE,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,sBAAsB,CAC1B,eAAsC;QAEtC,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IAC5C,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,KAAK,CAAC,8BAA8B,CAClC,SAAiB,EACjB,QAAgB,EAChB,UAAkB,EAClB,eAAyB,EACzB,EAAU,EACV,SAAiB,EACjB,GAAW,EACX,MAAc;QAEd,IAAI,CAAC;YACH,8DAA8D;YAC9D,MAAM,eAAe,GAAG,IAAI,gDAAqB,EAAE,CAAC;YACpD,eAAe,CAAC,aAAa,GAAG,iCAAY,CAAC,MAAM,CAAC;YACpD,eAAe,CAAC,gBAAgB,GAAG,QAAQ,CAAC;YAC5C,eAAe,CAAC,WAAW,GAAG,UAAU,CAAC;YACzC,eAAe,CAAC,UAAU,GAAG,SAAS,CAAC;YACvC,eAAe,CAAC,SAAS,GAAG,EAAE,CAAC;YAC/B,eAAe,CAAC,UAAU,GAAG,SAAS,CAAC;YACvC,eAAe,CAAC,QAAQ,GAAG,GAAG,CAAC;YAC/B,eAAe,CAAC,WAAW,GAAG,MAAM,CAAC;YACrC,eAAe,CAAC,yBAAyB,GAAG,eAAe,CAAC;YAC5D,eAAe,CAAC,SAAS,GAAG,6BAA6B,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAEtF,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QAC5C,CAAC;QAAC,OAAO,KAAc,EAAE,CAAC;YACxB,MAAM,YAAY,GAChB,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,mBAAmB,CAAC;YAE/D,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,gDAAgD,YAAY,EAAE,CAC/D,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAA;AA5FY,sDAAqB;gCAArB,qBAAqB;IADjC,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,kBAAW,EAAC,WAAW,CAAC,CAAA;yDAAkC,YAAK,oBAAL,YAAK;GAJvD,qBAAqB,CA4FjC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\services\\auditoria-queue.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectQueue } from '@nestjs/bull';\nimport { Queue } from 'bull';\nimport { Logger } from '@nestjs/common';\nimport { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';\nimport { TipoOperacao } from '../../../enums/tipo-operacao.enum';\n\n/**\n * Serviço de Fila de Auditoria - Versão MVP\n *\n * Responsável por processar logs de auditoria.\n * Implementação simplificada para o MVP com foco nas operações essenciais.\n */\n@Injectable()\nexport class AuditoriaQueueService {\n  private readonly logger = new Logger(AuditoriaQueueService.name);\n\n  constructor(\n    @InjectQueue('auditoria') private readonly auditoriaQueue: Queue,\n  ) {}\n\n  /**\n   * Processa um log de auditoria (implementação simplificada para o MVP)\n   *\n   * @param logAuditoriaDto Dados do log de auditoria a ser registrado\n   * @returns Promise com o resultado da operação\n   */\n  async processarLog(logAuditoriaDto: CreateLogAuditoriaDto): Promise<void> {\n    try {\n      // No MVP, simplificamos o processamento enfileirando diretamente\n      // com configuração básica\n      await this.auditoriaQueue.add('registrar-log', logAuditoriaDto, {\n        attempts: 2,\n        removeOnComplete: true,\n      });\n\n      this.logger.debug(\n        `Log de auditoria processado: ${logAuditoriaDto.entidade_afetada} - ${logAuditoriaDto.tipo_operacao}`,\n      );\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n\n      this.logger.error(`Erro ao processar log de auditoria: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * Enfileira um log de auditoria para processamento assíncrono\n   *\n   * @param logAuditoriaDto Dados do log de auditoria a ser registrado\n   * @returns Promise com o resultado da operação\n   */\n  async enfileirarLogAuditoria(\n    logAuditoriaDto: CreateLogAuditoriaDto,\n  ): Promise<void> {\n    return this.processarLog(logAuditoriaDto);\n  }\n\n  /**\n   * Enfileira um registro de acesso a dados sensíveis para processamento assíncrono\n   *\n   * @param usuarioId ID do usuário que acessou os dados\n   * @param entidade Nome da entidade acessada\n   * @param entidadeId ID da entidade acessada\n   * @param camposSensiveis Lista de campos sensíveis acessados\n   * @param ip Endereço IP de origem do acesso\n   * @param userAgent User agent do navegador\n   * @param url URL acessada\n   * @param metodo Método HTTP utilizado\n   * @returns Promise com o resultado da operação\n   */\n  async enfileirarAcessoDadosSensiveis(\n    usuarioId: string,\n    entidade: string,\n    entidadeId: string,\n    camposSensiveis: string[],\n    ip: string,\n    userAgent: string,\n    url: string,\n    metodo: string,\n  ): Promise<void> {\n    try {\n      // Cria um DTO de log específico para acesso a dados sensíveis\n      const logAuditoriaDto = new CreateLogAuditoriaDto();\n      logAuditoriaDto.tipo_operacao = TipoOperacao.ACCESS;\n      logAuditoriaDto.entidade_afetada = entidade;\n      logAuditoriaDto.entidade_id = entidadeId;\n      logAuditoriaDto.usuario_id = usuarioId;\n      logAuditoriaDto.ip_origem = ip;\n      logAuditoriaDto.user_agent = userAgent;\n      logAuditoriaDto.endpoint = url;\n      logAuditoriaDto.metodo_http = metodo;\n      logAuditoriaDto.dados_sensiveis_acessados = camposSensiveis;\n      logAuditoriaDto.descricao = `Acesso a dados sensíveis: ${camposSensiveis.join(', ')}`;\n\n      return this.processarLog(logAuditoriaDto);\n    } catch (error: unknown) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n\n      this.logger.error(\n        `Erro ao enfileirar acesso a dados sensíveis: ${errorMessage}`,\n      );\n    }\n  }\n}\n"],"version":3}