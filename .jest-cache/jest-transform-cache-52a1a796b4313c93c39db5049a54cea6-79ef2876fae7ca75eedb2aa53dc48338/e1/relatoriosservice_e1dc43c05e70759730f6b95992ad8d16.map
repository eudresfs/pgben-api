{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\services\\relatorios.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\services\\relatorios.service.ts"],"sourcesContent":["import {\n  Injectable,\n  Logger,\n  BadRequestException,\n  UnauthorizedException,\n  InternalServerErrorException,\n  Inject,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../../entities/solicitacao.entity';\nimport { StatusUnidade, Unidade } from '../../../entities/unidade.entity';\nimport { TipoBeneficio } from '../../../entities/tipo-beneficio.entity';\nimport { Role } from '../../../enums/role.enum';\nimport { RelatorioStrategy } from '../interfaces/relatorio-strategy.interface';\nimport { PdfStrategy } from '../strategies/pdf.strategy';\nimport { ExcelStrategy } from '../strategies/excel.strategy';\nimport { CsvStrategy } from '../strategies/csv.strategy';\nimport { TempFilesService } from './temp-files.service';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\n\n/**\n * Serviço de Relatórios\n *\n * Responsável pela lógica de negócio relacionada à geração de relatórios\n * gerenciais e operacionais do sistema. Implementa o padrão Strategy para\n * permitir diferentes formatos de saída.\n */\n@Injectable()\nexport class RelatoriosService {\n  private readonly logger = new Logger(RelatoriosService.name);\n  private readonly strategies: Map<string, RelatorioStrategy> = new Map();\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private solicitacaoRepository: Repository<Solicitacao>,\n\n    @InjectRepository(Unidade)\n    private unidadeRepository: Repository<Unidade>,\n\n    @InjectRepository(TipoBeneficio)\n    private tipoBeneficioRepository: Repository<TipoBeneficio>,\n\n    private readonly tempFilesService: TempFilesService,\n\n    @Inject(CACHE_MANAGER)\n    private cacheManager: Cache,\n  ) {\n    // Inicializar as estratégias de geração de relatórios\n    this.strategies.set('pdf', new PdfStrategy(tempFilesService));\n    this.strategies.set('excel', new ExcelStrategy(tempFilesService));\n    this.strategies.set('csv', new CsvStrategy(tempFilesService));\n\n    this.logger.log(\n      'Serviço de Relatórios inicializado com as estratégias: PDF, Excel, CSV',\n    );\n  }\n\n  /**\n   * Gera relatório de benefícios concedidos por período\n   * @param options Opções para geração do relatório\n   * @returns Buffer contendo o relatório no formato solicitado\n   */\n  async gerarRelatorioBeneficiosConcedidos(options: {\n    dataInicio: string;\n    dataFim: string;\n    unidadeId?: string;\n    tipoBeneficioId?: string;\n    formato: 'pdf' | 'excel' | 'csv';\n    user: any;\n  }): Promise<Buffer> {\n    const { dataInicio, dataFim, unidadeId, tipoBeneficioId, formato, user } =\n      options;\n\n    // Verificar permissões do usuário\n    if (![Role.ADMIN, Role.GESTOR, Role.TECNICO].includes(user.role)) {\n      throw new UnauthorizedException(\n        'Você não tem permissão para gerar este relatório',\n      );\n    }\n\n    // Verificar formato solicitado\n    if (!this.strategies.has(formato)) {\n      throw new BadRequestException(\n        `Formato de relatório não suportado: ${formato}`,\n      );\n    }\n\n    // Gerar chave de cache\n    const cacheKey = `relatorio_beneficios_${dataInicio}_${dataFim}_${unidadeId || 'all'}_${tipoBeneficioId || 'all'}_${formato}`;\n\n    // Verificar cache\n    const cachedReport = await this.cacheManager.get<Buffer>(cacheKey);\n    if (cachedReport) {\n      this.logger.log(`Relatório recuperado do cache: ${cacheKey}`);\n      return cachedReport;\n    }\n\n    try {\n      // Converter datas\n      const inicio = new Date(dataInicio);\n      const fim = new Date(dataFim);\n      fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia\n\n      if (isNaN(inicio.getTime()) || isNaN(fim.getTime())) {\n        throw new BadRequestException('Datas inválidas');\n      }\n\n      // Construir consulta otimizada\n      const queryBuilder = this.solicitacaoRepository\n        .createQueryBuilder('solicitacao')\n        .select([\n          'solicitacao.id',\n          'solicitacao.protocolo',\n          'solicitacao.data_abertura',\n          'solicitacao.data_liberacao',\n          'solicitacao.status',\n          'beneficiario.id',\n          'beneficiario.nome',\n          'beneficiario.cpf',\n          'tipo_beneficio.id',\n          'tipo_beneficio.nome',\n          'tipo_beneficio.valor',\n          'unidade.id',\n          'unidade.nome',\n        ])\n        .leftJoin('solicitacao.beneficiario', 'beneficiario')\n        .leftJoin('solicitacao.tipo_beneficio', 'tipo_beneficio')\n        .leftJoin('solicitacao.unidade', 'unidade')\n        .where('solicitacao.status = :status', {\n          status: StatusSolicitacao.LIBERADA,\n        })\n        .andWhere('solicitacao.data_liberacao BETWEEN :inicio AND :fim', {\n          inicio,\n          fim,\n        });\n\n      if (unidadeId) {\n        queryBuilder.andWhere('solicitacao.unidade_id = :unidadeId', {\n          unidadeId,\n        });\n      }\n\n      if (tipoBeneficioId) {\n        queryBuilder.andWhere(\n          'solicitacao.tipo_beneficio_id = :tipoBeneficioId',\n          { tipoBeneficioId },\n        );\n      }\n\n      // Executar consulta\n      const solicitacoes = await queryBuilder.getMany();\n      this.logger.log(\n        `Encontradas ${solicitacoes.length} solicitações com benefícios concedidos no período`,\n      );\n\n      // Obter estratégia de geração para o formato solicitado\n      const strategy = this.strategies.get(formato);\n      if (!strategy) {\n        throw new BadRequestException(\n          `Formato de relatório não suportado: ${formato}`,\n        );\n      }\n\n      // Gerar relatório\n      const opcoes = { dataInicio: inicio, dataFim: fim };\n      const relatorio = (await strategy.gerar(\n        'beneficios-concedidos',\n        solicitacoes,\n        opcoes,\n      )) as Buffer;\n\n      // Armazenar em cache\n      await this.cacheManager.set(cacheKey, relatorio, 3600000); // 1 hora\n\n      return relatorio;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao gerar relatório de benefícios concedidos: ${error.message}`,\n      );\n      if (\n        error instanceof BadRequestException ||\n        error instanceof UnauthorizedException\n      ) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro ao gerar relatório. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Gera relatório de solicitações por status\n   * @param options Opções para geração do relatório\n   * @returns Buffer contendo o relatório no formato solicitado\n   */\n  async gerarRelatorioSolicitacoesPorStatus(options: {\n    dataInicio: string;\n    dataFim: string;\n    unidadeId?: string;\n    formato: 'pdf' | 'excel' | 'csv';\n    user: any;\n  }): Promise<Buffer> {\n    const { dataInicio, dataFim, unidadeId, formato, user } = options;\n\n    // Verificar permissões do usuário\n    if (\n      ![Role.ADMIN, Role.GESTOR, Role.TECNICO, Role.COORDENADOR].includes(\n        user.role,\n      )\n    ) {\n      throw new UnauthorizedException(\n        'Você não tem permissão para gerar este relatório',\n      );\n    }\n\n    // Verificar permissão por unidade\n    if (\n      user.role === Role.COORDENADOR &&\n      (!unidadeId || unidadeId !== user.unidade_id)\n    ) {\n      throw new UnauthorizedException(\n        'Coordenadores só podem acessar dados de sua unidade',\n      );\n    }\n\n    // Verificar formato solicitado\n    if (!this.strategies.has(formato)) {\n      throw new BadRequestException(\n        `Formato de relatório não suportado: ${formato}`,\n      );\n    }\n\n    // Gerar chave de cache\n    const cacheKey = `relatorio_solicitacoes_${dataInicio}_${dataFim}_${unidadeId || 'all'}_${formato}`;\n\n    // Verificar cache\n    const cachedReport = await this.cacheManager.get<Buffer>(cacheKey);\n    if (cachedReport) {\n      this.logger.log(`Relatório recuperado do cache: ${cacheKey}`);\n      return cachedReport;\n    }\n\n    try {\n      // Converter datas\n      const inicio = new Date(dataInicio);\n      const fim = new Date(dataFim);\n      fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia\n\n      if (isNaN(inicio.getTime()) || isNaN(fim.getTime())) {\n        throw new BadRequestException('Datas inválidas');\n      }\n\n      // Construir consulta otimizada\n      const queryBuilder = this.solicitacaoRepository\n        .createQueryBuilder('solicitacao')\n        .select([\n          'solicitacao.id',\n          'solicitacao.protocolo',\n          'solicitacao.data_abertura',\n          'solicitacao.status',\n          'beneficiario.id',\n          'beneficiario.nome',\n          'tipo_beneficio.id',\n          'tipo_beneficio.nome',\n          'unidade.id',\n          'unidade.nome',\n        ])\n        .leftJoin('solicitacao.beneficiario', 'beneficiario')\n        .leftJoin('solicitacao.tipo_beneficio', 'tipo_beneficio')\n        .leftJoin('solicitacao.unidade', 'unidade')\n        .where('solicitacao.data_abertura BETWEEN :inicio AND :fim', {\n          inicio,\n          fim,\n        });\n\n      if (unidadeId) {\n        queryBuilder.andWhere('solicitacao.unidade_id = :unidadeId', {\n          unidadeId,\n        });\n      }\n\n      // Executar consulta\n      const solicitacoes = await queryBuilder.getMany();\n      this.logger.log(\n        `Encontradas ${solicitacoes.length} solicitações no período`,\n      );\n\n      // Agrupar por status\n      const agrupadas = solicitacoes.reduce((acc, solicitacao) => {\n        const status = solicitacao.status;\n        if (!acc[status]) {\n          acc[status] = [];\n        }\n        acc[status].push(solicitacao);\n        return acc;\n      }, {});\n\n      // Obter estratégia de geração para o formato solicitado\n      const strategy = this.strategies.get(formato);\n      if (!strategy) {\n        throw new BadRequestException(\n          `Formato de relatório não suportado: ${formato}`,\n        );\n      }\n\n      // Gerar relatório\n      const opcoes = { dataInicio: inicio, dataFim: fim };\n      const relatorio = (await strategy.gerar(\n        'solicitacoes-por-status',\n        agrupadas,\n        opcoes,\n      )) as Buffer;\n\n      // Armazenar em cache\n      await this.cacheManager.set(cacheKey, relatorio, 3600000); // 1 hora\n\n      return relatorio;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao gerar relatório de solicitações por status: ${error.message}`,\n      );\n      if (\n        error instanceof BadRequestException ||\n        error instanceof UnauthorizedException\n      ) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro ao gerar relatório. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Gera relatório de atendimentos por unidade\n   * @param options Opções para geração do relatório\n   * @returns Buffer contendo o relatório no formato solicitado\n   */\n  async gerarRelatorioAtendimentosPorUnidade(options: {\n    dataInicio: string;\n    dataFim: string;\n    formato: 'pdf' | 'excel' | 'csv';\n    user: any;\n  }): Promise<Buffer> {\n    const { dataInicio, dataFim, formato, user } = options;\n\n    // Verificar permissões do usuário\n    if (![Role.ADMIN, Role.GESTOR].includes(user.role)) {\n      throw new UnauthorizedException(\n        'Você não tem permissão para gerar este relatório',\n      );\n    }\n\n    // Verificar formato solicitado\n    if (!this.strategies.has(formato)) {\n      throw new BadRequestException(\n        `Formato de relatório não suportado: ${formato}`,\n      );\n    }\n\n    // Gerar chave de cache\n    const cacheKey = `relatorio_atendimentos_${dataInicio}_${dataFim}_${formato}`;\n\n    // Verificar cache\n    const cachedReport = await this.cacheManager.get<Buffer>(cacheKey);\n    if (cachedReport) {\n      this.logger.log(`Relatório recuperado do cache: ${cacheKey}`);\n      return cachedReport;\n    }\n\n    try {\n      // Converter datas\n      const inicio = new Date(dataInicio);\n      const fim = new Date(dataFim);\n      fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia\n\n      if (isNaN(inicio.getTime()) || isNaN(fim.getTime())) {\n        throw new BadRequestException('Datas inválidas');\n      }\n\n      // Buscar unidades ativas\n      const unidades = await this.unidadeRepository.find({\n        where: { status: StatusUnidade.ATIVO },\n      });\n\n      // Definir a interface para o resultado\n      interface RelatorioUnidade {\n        unidade: Unidade;\n        totalSolicitacoes: number;\n        solicitacoesLiberadas: number;\n        solicitacoesPendentes: number;\n      }\n\n      // Resultados por unidade\n      const resultado: RelatorioUnidade[] = [];\n\n      // Processar cada unidade\n      for (const unidade of unidades) {\n        // Contar total de solicitações\n        const totalSolicitacoes = await this.solicitacaoRepository.count({\n          where: {\n            unidade_id: unidade.id,\n            data_abertura: Between(inicio, fim),\n          },\n        });\n\n        // Contar solicitações liberadas\n        const solicitacoesLiberadas = await this.solicitacaoRepository.count({\n          where: {\n            unidade_id: unidade.id,\n            status: StatusSolicitacao.LIBERADA,\n            data_abertura: Between(inicio, fim),\n          },\n        });\n\n        // Contar solicitações pendentes (não liberadas)\n        const solicitacoesPendentes = totalSolicitacoes - solicitacoesLiberadas;\n\n        // Adicionar ao resultado\n        resultado.push({\n          unidade,\n          totalSolicitacoes,\n          solicitacoesLiberadas,\n          solicitacoesPendentes,\n        });\n      }\n\n      // Ordenar por total de solicitações (decrescente)\n      resultado.sort((a, b) => b.totalSolicitacoes - a.totalSolicitacoes);\n\n      // Obter estratégia de geração para o formato solicitado\n      const strategy = this.strategies.get(formato);\n      if (!strategy) {\n        throw new BadRequestException(\n          `Formato de relatório não suportado: ${formato}`,\n        );\n      }\n\n      // Gerar relatório\n      const opcoes = { dataInicio: inicio, dataFim: fim };\n      const relatorio = (await strategy.gerar(\n        'atendimentos-por-unidade',\n        resultado,\n        opcoes,\n      )) as Buffer;\n\n      // Armazenar em cache\n      await this.cacheManager.set(cacheKey, relatorio, 3600000); // 1 hora\n\n      return relatorio;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao gerar relatório de atendimentos por unidade: ${error.message}`,\n      );\n      if (\n        error instanceof BadRequestException ||\n        error instanceof UnauthorizedException\n      ) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Erro ao gerar relatório. Por favor, tente novamente.',\n      );\n    }\n  }\n}\n"],"version":3}