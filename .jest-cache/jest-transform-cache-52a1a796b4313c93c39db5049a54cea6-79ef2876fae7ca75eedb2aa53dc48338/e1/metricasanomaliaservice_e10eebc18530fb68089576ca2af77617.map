{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\metricas-anomalia.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\metricas-anomalia.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, LessThan, MoreThan, Not } from 'typeorm';\nimport { EventEmitter2 } from '@nestjs/event-emitter';\n\nimport { MetricaDefinicao } from '../../../entities/metrica-definicao.entity';\nimport { MetricaSnapshot } from '../../../entities/metrica-snapshot.entity';\n\nimport {\n  NivelConfiancaAnomalia,\n  ResultadoDeteccaoAnomalia,\n  ResultadoDeteccaoAnomaliaPorCodigo,\n  AnomaliaDetectada,\n} from '../interfaces/anomalias.interface';\nimport {\n  ResultadoPrevisao,\n  PontoPrevisao,\n  PrevisaoMetrica,\n} from '../interfaces/previsoes.interface';\nimport { ResultadoAnaliseTendencia } from '../interfaces/tendencias.interface';\nimport { EstatisticaUtils } from '../utils/estatistica.utils';\n\n/**\n * Serviço responsável pela detecção de anomalias e análise de tendências\n *\n * Este serviço implementa algoritmos estatísticos para identificar valores\n * anômalos e tendências nas séries temporais de métricas.\n */\n@Injectable()\nexport class MetricasAnomaliasService {\n  private readonly logger = new Logger(MetricasAnomaliasService.name);\n\n  // Limites de Z-score para diferentes níveis de confiança\n  private readonly Z_SCORE_LIMITES = {\n    [NivelConfiancaAnomalia.BAIXO]: 2.0, // 95.5% dos dados dentro deste limite\n    [NivelConfiancaAnomalia.MEDIO]: 2.5, // 98.8% dos dados dentro deste limite\n    [NivelConfiancaAnomalia.ALTO]: 3.0, // 99.7% dos dados dentro deste limite\n  };\n\n  // Número mínimo de pontos para análise estatística confiável\n  private readonly MIN_PONTOS_ANALISE = 5;\n\n  constructor(\n    @InjectRepository(MetricaDefinicao)\n    private readonly metricaDefinicaoRepository: Repository<MetricaDefinicao>,\n\n    @InjectRepository(MetricaSnapshot)\n    private readonly metricaSnapshotRepository: Repository<MetricaSnapshot>,\n\n    private readonly eventEmitter: EventEmitter2,\n  ) {}\n\n  /**\n   * Detecta anomalias para um snapshot específico\n   *\n   * @param snapshotId ID do snapshot a ser analisado\n   * @param nivelConfianca Nível de confiança para detecção\n   * @param janelaTemporal Número de dias a considerar para o histórico\n   * @returns Resultado da detecção de anomalias\n   */\n  async detectarAnomaliasPorSnapshot(\n    snapshotId: string,\n    nivelConfianca: NivelConfiancaAnomalia = NivelConfiancaAnomalia.MEDIO,\n    janelaTemporal: number = 30,\n  ): Promise<ResultadoDeteccaoAnomalia> {\n    this.logger.debug(`Analisando anomalias para snapshot: ${snapshotId}`);\n\n    // Buscar snapshot a ser analisado\n    const snapshot = await this.metricaSnapshotRepository.findOne({\n      where: { id: snapshotId },\n      relations: ['definicao'],\n    });\n\n    if (!snapshot) {\n      throw new Error(`Snapshot não encontrado: ${snapshotId}`);\n    }\n\n    // Calcular limite de data para o histórico\n    const dataLimite = new Date();\n    dataLimite.setDate(dataLimite.getDate() - janelaTemporal);\n\n    // Buscar snapshots históricos para comparação\n    const snapshotsHistoricos = await this.metricaSnapshotRepository.find({\n      where: {\n        definicao_id: snapshot.definicao_id,\n        dimensoes_hash: snapshot.dimensoes_hash,\n        periodo_fim: Between(dataLimite, snapshot.periodo_inicio),\n        id: Not(snapshot.id), // Excluir o próprio snapshot da análise\n      },\n      order: {\n        periodo_fim: 'DESC',\n      },\n    });\n\n    // Verificar se há pontos suficientes para análise\n    if (snapshotsHistoricos.length < this.MIN_PONTOS_ANALISE) {\n      this.logger.debug(\n        `Pontos insuficientes para análise estatística confiável: ${snapshotsHistoricos.length} < ${this.MIN_PONTOS_ANALISE}`,\n      );\n\n      // Carregar dados da definição para acesso às propriedades\n      const definicao = await snapshot.definicao;\n\n      return {\n        metrica_id: snapshot.definicao_id,\n        metrica_codigo: definicao.codigo,\n        metrica_nome: definicao.nome,\n        snapshot_id: snapshot.id,\n        valor: snapshot.valor,\n        valor_medio_historico: 0,\n        desvio_padrao_historico: 0,\n        z_score: 0,\n        e_anomalia: false,\n        gravidade: 0,\n        dimensoes: snapshot.dimensoes,\n        periodo: {\n          inicio: snapshot.periodo_inicio,\n          fim: snapshot.periodo_fim,\n        },\n        timestamp: new Date(),\n      };\n    }\n\n    // Calcular média e desvio padrão dos valores históricos\n    const valoresHistoricos = snapshotsHistoricos.map((s) => s.valor);\n    const media = EstatisticaUtils.calcularMedia(valoresHistoricos);\n    const desvioPadrao = EstatisticaUtils.calcularDesvioPadrao(\n      valoresHistoricos,\n      media,\n    );\n\n    // Calcular Z-score (número de desvios padrão em relação à média)\n    const zScore =\n      desvioPadrao === 0\n        ? 0\n        : Math.abs((snapshot.valor - media) / desvioPadrao);\n\n    // Determinar se o valor é uma anomalia\n    const limiteZScore = this.Z_SCORE_LIMITES[nivelConfianca];\n    const eAnomalia = zScore > limiteZScore;\n\n    // Carregar dados da definição para acesso às propriedades\n    const definicao = await snapshot.definicao;\n\n    const resultado: ResultadoDeteccaoAnomalia = {\n      metrica_id: snapshot.definicao_id,\n      metrica_codigo: definicao.codigo,\n      metrica_nome: definicao.nome,\n      snapshot_id: snapshot.id,\n      valor: snapshot.valor,\n      valor_medio_historico: media,\n      desvio_padrao_historico: desvioPadrao,\n      z_score: zScore,\n      e_anomalia: eAnomalia,\n      gravidade: zScore,\n      dimensoes: snapshot.dimensoes,\n      periodo: {\n        inicio: snapshot.periodo_inicio,\n        fim: snapshot.periodo_fim,\n      },\n      timestamp: new Date(),\n    };\n\n    // Emitir evento se for detectada uma anomalia\n    if (eAnomalia) {\n      this.logger.warn(\n        `Anomalia detectada para métrica ${definicao.codigo}: valor=${snapshot.valor}, z-score=${zScore.toFixed(2)}`,\n      );\n\n      this.eventEmitter.emit('metrica.anomalia.detectada', resultado);\n    }\n\n    return resultado;\n  }\n\n  /**\n   * Detecta anomalias para uma métrica específica por código\n   *\n   * @param codigo Código da métrica a ser analisada\n   * @param dataInicio Data de início do período de análise\n   * @param dataFim Data de fim do período de análise\n   * @returns Lista de anomalias detectadas no período\n   */\n  async detectarAnomaliasPorCodigo(\n    codigo: string,\n    dataInicio?: Date,\n    dataFim?: Date,\n  ): Promise<ResultadoDeteccaoAnomaliaPorCodigo> {\n    this.logger.debug(`Analisando anomalias para métrica: ${codigo}`);\n\n    // Buscar métrica pelo código\n    const metrica = await this.metricaDefinicaoRepository.findOne({\n      where: { codigo },\n    });\n\n    if (!metrica) {\n      throw new Error(`Métrica não encontrada: ${codigo}`);\n    }\n\n    // Definir período de análise se não informado\n    const dataFimEfetiva = dataFim || new Date();\n\n    // Se data início não informada, usar 30 dias antes da data fim\n    let dataInicioEfetiva = dataInicio;\n    if (!dataInicioEfetiva) {\n      dataInicioEfetiva = new Date(dataFimEfetiva);\n      dataInicioEfetiva.setDate(dataInicioEfetiva.getDate() - 30);\n    }\n\n    // Buscar snapshots no período\n    const snapshots = await this.metricaSnapshotRepository.find({\n      where: {\n        definicao_id: metrica.id,\n        periodo_fim: Between(dataInicioEfetiva, dataFimEfetiva),\n      },\n      order: {\n        periodo_fim: 'ASC',\n      },\n    });\n\n    if (snapshots.length < this.MIN_PONTOS_ANALISE) {\n      return {\n        codigo: metrica.codigo,\n        nome: metrica.nome,\n        periodo: {\n          inicio: dataInicioEfetiva,\n          fim: dataFimEfetiva,\n        },\n        total_snapshots: snapshots.length,\n        anomalias: [],\n        estatisticas: {\n          media: 0,\n          desvio_padrao: 0,\n          mediana: 0,\n          min: 0,\n          max: 0,\n        },\n        mensagem: `Pontos insuficientes para análise (mínimo: ${this.MIN_PONTOS_ANALISE})`,\n      };\n    }\n\n    // Calcular estatísticas básicas\n    const valores = snapshots.map((s) => s.valor);\n    const media = EstatisticaUtils.calcularMedia(valores);\n    const desvioPadrao = EstatisticaUtils.calcularDesvioPadrao(valores, media);\n    const valoresOrdenados = [...valores].sort((a, b) => a - b);\n    const min = valoresOrdenados[0];\n    const max = valoresOrdenados[valoresOrdenados.length - 1];\n    const mediana = EstatisticaUtils.calcularMediana(valoresOrdenados);\n\n    // Detectar anomalias usando Z-score\n    const anomalias: AnomaliaDetectada[] = [];\n    const limiteZScore = this.Z_SCORE_LIMITES[NivelConfiancaAnomalia.MEDIO];\n\n    for (let i = 0; i < snapshots.length; i++) {\n      const snapshot = snapshots[i];\n      const zScore =\n        desvioPadrao === 0\n          ? 0\n          : Math.abs((snapshot.valor - media) / desvioPadrao);\n\n      if (zScore > limiteZScore) {\n        let severidade: 'baixa' | 'media' | 'alta';\n\n        if (zScore > this.Z_SCORE_LIMITES[NivelConfiancaAnomalia.ALTO]) {\n          severidade = 'alta';\n        } else if (\n          zScore > this.Z_SCORE_LIMITES[NivelConfiancaAnomalia.MEDIO]\n        ) {\n          severidade = 'media';\n        } else {\n          severidade = 'baixa';\n        }\n\n        anomalias.push({\n          data: snapshot.periodo_fim,\n          valor: snapshot.valor,\n          desvio_padrao: zScore,\n          severidade,\n          dimensoes: snapshot.dimensoes,\n        });\n      }\n    }\n\n    return {\n      codigo: metrica.codigo,\n      nome: metrica.nome,\n      periodo: {\n        inicio: dataInicioEfetiva,\n        fim: dataFimEfetiva,\n      },\n      total_snapshots: snapshots.length,\n      estatisticas: {\n        media,\n        desvio_padrao: desvioPadrao,\n        mediana,\n        min,\n        max,\n      },\n      anomalias,\n      total_anomalias: anomalias.length,\n    };\n  }\n\n  /**\n   * Analisa anomalias em lote para todas as métricas\n   *\n   * @param janelaTemporal Número de dias a considerar\n   * @param nivelConfianca Nível de confiança para detecção\n   * @returns Lista de anomalias detectadas\n   */\n  async detectarAnomaliasBatch(\n    janelaTemporal = 7,\n    nivelConfianca = NivelConfiancaAnomalia.MEDIO,\n  ): Promise<ResultadoDeteccaoAnomalia[]> {\n    this.logger.log(\n      `Iniciando detecção de anomalias em lote (janela: ${janelaTemporal} dias)`,\n    );\n\n    const anomalias: ResultadoDeteccaoAnomalia[] = [];\n\n    try {\n      // Calcular data limite para análise\n      const dataLimite = new Date();\n      dataLimite.setDate(dataLimite.getDate() - janelaTemporal);\n\n      // Buscar métricas ativas\n      const metricas = await this.metricaDefinicaoRepository.find({\n        where: { ativa: true },\n      });\n\n      this.logger.debug(`Analisando ${metricas.length} métricas ativas`);\n\n      // Para cada métrica, analisar os snapshots mais recentes\n      for (const metrica of metricas) {\n        // Buscar snapshots recentes agrupados por dimensão\n        const snapshots = await this.metricaSnapshotRepository.find({\n          where: {\n            definicao_id: metrica.id,\n            periodo_fim: MoreThan(dataLimite),\n          },\n          order: {\n            periodo_fim: 'DESC',\n          },\n        });\n\n        // Agrupar por dimensão e analisar apenas o snapshot mais recente de cada grupo\n        const grupoPorDimensao: Record<string, MetricaSnapshot[]> = {};\n\n        for (const snapshot of snapshots) {\n          if (!grupoPorDimensao[snapshot.dimensoes_hash]) {\n            grupoPorDimensao[snapshot.dimensoes_hash] = [];\n          }\n\n          grupoPorDimensao[snapshot.dimensoes_hash].push(snapshot);\n        }\n\n        // Analisar o snapshot mais recente de cada grupo\n        for (const grupo of Object.values(grupoPorDimensao)) {\n          if (grupo.length > 0) {\n            const snapshotRecente = grupo[0];\n\n            try {\n              const resultado = await this.detectarAnomaliasPorSnapshot(\n                snapshotRecente.id,\n                nivelConfianca,\n                janelaTemporal,\n              );\n\n              if (resultado.e_anomalia) {\n                anomalias.push(resultado);\n              }\n            } catch (error) {\n              this.logger.error(\n                `Erro ao analisar anomalias para métrica ${metrica.codigo} (snapshot ${snapshotRecente.id}): ${error.message}`,\n                error.stack,\n              );\n            }\n          }\n        }\n      }\n\n      this.logger.log(\n        `Detecção de anomalias concluída: ${anomalias.length} anomalias encontradas`,\n      );\n\n      return anomalias;\n    } catch (error) {\n      this.logger.error(\n        `Erro na detecção de anomalias em lote: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Analisa tendências para uma métrica em um período específico\n   *\n   * @param metricaId ID da métrica a ser analisada\n   * @param inicio Data de início do período\n   * @param fim Data de fim do período\n   * @param dimensoes Dimensões para filtrar os snapshots\n   * @returns Resultado da análise de tendências\n   */\n  async analisarTendencias(\n    metricaId: string,\n    inicio: Date,\n    fim: Date,\n    dimensoes: Record<string, any> = {},\n  ): Promise<ResultadoAnaliseTendencia> {\n    this.logger.debug(`Analisando tendências para métrica: ${metricaId}`);\n\n    // Buscar métrica\n    const metrica = await this.metricaDefinicaoRepository.findOne({\n      where: { id: metricaId },\n    });\n\n    if (!metrica) {\n      throw new Error(`Métrica não encontrada: ${metricaId}`);\n    }\n\n    // Gerar hash das dimensões\n    const dimensoesHash = EstatisticaUtils.gerarHashDimensoes(dimensoes);\n\n    // Buscar snapshots no período\n    const snapshots = await this.metricaSnapshotRepository.find({\n      where: {\n        definicao_id: metricaId,\n        dimensoes_hash: dimensoesHash,\n        periodo_fim: Between(inicio, fim),\n      },\n      order: {\n        periodo_fim: 'ASC',\n      },\n    });\n\n    // Verificar se há pontos suficientes para análise\n    if (snapshots.length < this.MIN_PONTOS_ANALISE) {\n      this.logger.debug(\n        `Pontos insuficientes para análise de tendências: ${snapshots.length} < ${this.MIN_PONTOS_ANALISE}`,\n      );\n\n      return {\n        metrica_id: metricaId,\n        metrica_codigo: metrica.codigo,\n        metrica_nome: metrica.nome,\n        direcao: 'estavel',\n        intensidade: 0,\n        confianca: 0,\n        previsao: {\n          valor: 0,\n          intervalo_confianca: {\n            minimo: 0,\n            maximo: 0,\n          },\n        },\n        valores_analisados: snapshots.map((s) => ({\n          valor: s.valor,\n          periodo_inicio: s.periodo_inicio,\n          periodo_fim: s.periodo_fim,\n        })),\n        dimensoes,\n        periodo: { inicio, fim },\n        timestamp: new Date(),\n      };\n    }\n\n    // Extrair valores para análise\n    const valores = snapshots.map((s) => s.valor);\n\n    // Calcular tendência usando regressão linear simples\n    const { coeficienteAngular, intercepto, r2 } =\n      EstatisticaUtils.calcularRegressaoLinear(valores);\n\n    // Determinar direção da tendência\n    let direcao: 'crescente' | 'decrescente' | 'estavel';\n\n    if (Math.abs(coeficienteAngular) < 0.01) {\n      direcao = 'estavel';\n    } else if (coeficienteAngular > 0) {\n      direcao = 'crescente';\n    } else {\n      direcao = 'decrescente';\n    }\n\n    // Calcular intensidade (variação percentual média por período)\n    const valorMedio = EstatisticaUtils.calcularMedia(valores);\n    const intensidade = (coeficienteAngular / valorMedio) * 100;\n\n    // Calcular previsão para o próximo período\n    const proximoPeriodo = valores.length + 1;\n    const valorPrevisto = intercepto + coeficienteAngular * proximoPeriodo;\n\n    // Calcular intervalo de confiança (simplificado)\n    const errosPreditos = valores.map(\n      (valor, i) => valor - (intercepto + coeficienteAngular * (i + 1)),\n    );\n    const erroPadrao = Math.sqrt(\n      errosPreditos.reduce((sum, e) => sum + e * e, 0) / (valores.length - 2),\n    );\n    const intervaloConfianca = 1.96 * erroPadrao; // 95% de confiança\n\n    const resultado: ResultadoAnaliseTendencia = {\n      metrica_id: metricaId,\n      metrica_codigo: metrica.codigo,\n      metrica_nome: metrica.nome,\n      direcao,\n      intensidade: Number(intensidade.toFixed(2)),\n      confianca: Number(r2.toFixed(4)),\n      previsao: {\n        valor: Number(valorPrevisto.toFixed(2)),\n        intervalo_confianca: {\n          minimo: Number((valorPrevisto - intervaloConfianca).toFixed(2)),\n          maximo: Number((valorPrevisto + intervaloConfianca).toFixed(2)),\n        },\n      },\n      valores_analisados: snapshots.map((s) => ({\n        valor: s.valor,\n        periodo_inicio: s.periodo_inicio,\n        periodo_fim: s.periodo_fim,\n      })),\n      dimensoes,\n      periodo: { inicio, fim },\n      timestamp: new Date(),\n    };\n\n    // Emitir evento com resultado da análise\n    this.eventEmitter.emit('metrica.tendencia.analisada', resultado);\n\n    return resultado;\n  }\n\n  /**\n   * Gera previsões para uma métrica específica\n   *\n   * @param metricaId ID da métrica\n   * @param horizonte Número de períodos para prever\n   * @param intervaloConfianca Nível de confiança para o intervalo de previsão\n   * @param modeloNome Nome do modelo de previsão a ser utilizado\n   * @returns Previsão com valores e intervalos de confiança\n   */\n  async gerarPrevisaoMetrica(\n    metricaId: string,\n    horizonte: number = 3,\n    intervaloConfianca: number = 0.95,\n    modeloNome: string = 'auto',\n  ): Promise<PrevisaoMetrica> {\n    this.logger.debug(`Gerando previsão para métrica ID: ${metricaId}`);\n\n    // Buscar métrica\n    const metrica = await this.metricaDefinicaoRepository.findOne({\n      where: { id: metricaId },\n    });\n\n    if (!metrica) {\n      throw new Error(`Métrica não encontrada: ${metricaId}`);\n    }\n\n    return this.gerarPrevisaoImpl(\n      metrica,\n      horizonte,\n      intervaloConfianca,\n      modeloNome,\n    );\n  }\n\n  /**\n   * Gera previsões para uma métrica específica pelo código\n   *\n   * @param codigo Código da métrica\n   * @param horizonte Número de períodos para prever\n   * @param intervaloConfianca Nível de confiança para o intervalo de previsão\n   * @param modeloNome Nome do modelo de previsão a ser utilizado\n   * @returns Previsão com valores e intervalos de confiança\n   */\n  async gerarPrevisaoPorCodigo(\n    codigo: string,\n    horizonte: number = 3,\n    intervaloConfianca: number = 0.95,\n    modeloNome: string = 'auto',\n  ): Promise<PrevisaoMetrica> {\n    this.logger.debug(`Gerando previsão para métrica código: ${codigo}`);\n\n    // Buscar métrica pelo código\n    const metrica = await this.metricaDefinicaoRepository.findOne({\n      where: { codigo },\n    });\n\n    if (!metrica) {\n      throw new Error(`Métrica não encontrada: ${codigo}`);\n    }\n\n    return this.gerarPrevisaoImpl(\n      metrica,\n      horizonte,\n      intervaloConfianca,\n      modeloNome,\n    );\n  }\n\n  /**\n   * Implementação da geração de previsão\n   * @private\n   */\n  private async gerarPrevisaoImpl(\n    metrica: MetricaDefinicao,\n    horizonte: number,\n    intervaloConfianca: number,\n    modeloNome: string,\n  ): Promise<PrevisaoMetrica> {\n    // Buscar dados históricos (90 dias)\n    const dataFim = new Date();\n    const dataInicio = new Date(dataFim);\n    dataInicio.setDate(dataInicio.getDate() - 90);\n\n    // Buscar snapshots no período\n    const snapshots = await this.metricaSnapshotRepository.find({\n      where: {\n        definicao_id: metrica.id,\n        periodo_fim: Between(dataInicio, dataFim),\n      },\n      order: {\n        periodo_fim: 'ASC',\n      },\n    });\n\n    // Verificar se há pontos suficientes para previsão\n    if (snapshots.length < this.MIN_PONTOS_ANALISE) {\n      throw new Error(\n        `Pontos insuficientes para previsão (mínimo: ${this.MIN_PONTOS_ANALISE})`,\n      );\n    }\n\n    // Extrair valores e datas para análise\n    const valores = snapshots.map((s) => s.valor);\n    const datas = snapshots.map((s) => s.periodo_fim);\n\n    // Determinar o melhor modelo de previsão\n    let modeloEfetivo = modeloNome;\n    if (modeloNome === 'auto') {\n      // Para automático, escolhemos com base na análise dos dados\n      if (snapshots.length >= 20) {\n        // Com mais dados, podemos usar modelos mais sofisticados\n        modeloEfetivo = 'suavizacao_exponencial';\n      } else if (snapshots.length >= 10) {\n        // Com quantidade média de dados\n        modeloEfetivo = 'media_movel';\n      } else {\n        // Com poucos dados\n        modeloEfetivo = 'regressao_linear';\n      }\n    }\n\n    // Gerar previsão com base no modelo selecionado\n    let resultado: ResultadoPrevisao;\n\n    switch (modeloEfetivo) {\n      case 'regressao_linear':\n        resultado = this.previsaoRegressaoLinear(\n          valores,\n          datas,\n          horizonte,\n          intervaloConfianca,\n        );\n        break;\n      case 'media_movel':\n        resultado = this.previsaoMediaMovel(\n          valores,\n          datas,\n          horizonte,\n          intervaloConfianca,\n        );\n        break;\n      case 'suavizacao_exponencial':\n        resultado = this.previsaoSuavizacaoExponencial(\n          valores,\n          datas,\n          horizonte,\n          intervaloConfianca,\n        );\n        break;\n      default:\n        resultado = this.previsaoRegressaoLinear(\n          valores,\n          datas,\n          horizonte,\n          intervaloConfianca,\n        );\n    }\n\n    return {\n      metrica_id: metrica.id,\n      metrica_codigo: metrica.codigo,\n      metrica_nome: metrica.nome,\n      resultado,\n      dimensoes: {},\n      periodo_historico: {\n        inicio: dataInicio,\n        fim: dataFim,\n      },\n      timestamp: new Date(),\n    };\n  }\n\n  /**\n   * Gera previsão usando regressão linear\n   * @private\n   */\n  private previsaoRegressaoLinear(\n    valores: number[],\n    datas: Date[],\n    horizonte: number,\n    intervaloConfianca: number,\n  ): ResultadoPrevisao {\n    // Converter datas para índices numéricos (dias desde a primeira data)\n    const primeiraData = new Date(datas[0]);\n    const indicesDias = datas.map((d) =>\n      Math.floor(\n        (d.getTime() - primeiraData.getTime()) / (1000 * 60 * 60 * 24),\n      ),\n    );\n\n    // Calcular regressão linear\n    const { coeficienteAngular, intercepto, r2 } =\n      EstatisticaUtils.calcularRegressaoLinear(\n        indicesDias.map((x, i) => [x, valores[i]] as [number, number]),\n      );\n\n    // Calcular erro padrão da estimação\n    const valoresPreditos = indicesDias.map(\n      (x) => intercepto + coeficienteAngular * x,\n    );\n    const erros = valores.map((v, i) => v - valoresPreditos[i]);\n    const somaQuadradosErros = erros.reduce((sum, e) => sum + e * e, 0);\n    const erroMedio = Math.sqrt(somaQuadradosErros / (valores.length - 2));\n\n    // Calcular fator para intervalo de confiança (aproximação normal)\n    const z =\n      intervaloConfianca >= 0.99\n        ? 2.576\n        : intervaloConfianca >= 0.95\n          ? 1.96\n          : intervaloConfianca >= 0.9\n            ? 1.645\n            : 1.28;\n\n    // Gerar previsões para o horizonte\n    const previsao: PontoPrevisao[] = [];\n\n    const ultimoIndice = indicesDias[indicesDias.length - 1];\n    const intervaloEntreDatas = Math.max(\n      1,\n      Math.floor(ultimoIndice / indicesDias.length),\n    );\n\n    for (let i = 1; i <= horizonte; i++) {\n      const indicePrevisao = ultimoIndice + i * intervaloEntreDatas;\n      const valorPrevisto = intercepto + coeficienteAngular * indicePrevisao;\n      const margemErro =\n        z *\n        erroMedio *\n        Math.sqrt(\n          1 +\n            1 / valores.length +\n            Math.pow(\n              indicePrevisao - EstatisticaUtils.calcularMedia(indicesDias),\n              2,\n            ) /\n              indicesDias.reduce(\n                (sum, x) =>\n                  sum +\n                  Math.pow(x - EstatisticaUtils.calcularMedia(indicesDias), 2),\n                0,\n              ),\n        );\n\n      const dataPrevisao = new Date(primeiraData);\n      dataPrevisao.setDate(primeiraData.getDate() + indicePrevisao);\n\n      previsao.push({\n        data: dataPrevisao,\n        valor: Number(valorPrevisto.toFixed(2)),\n        intervalo_confianca: {\n          minimo: Number((valorPrevisto - margemErro).toFixed(2)),\n          maximo: Number((valorPrevisto + margemErro).toFixed(2)),\n        },\n      });\n    }\n\n    return {\n      previsao,\n      r2,\n      erro_medio: erroMedio,\n      modelo: 'regressao_linear',\n    };\n  }\n\n  /**\n   * Gera previsão usando média móvel\n   * @private\n   */\n  private previsaoMediaMovel(\n    valores: number[],\n    datas: Date[],\n    horizonte: number,\n    intervaloConfianca: number,\n  ): ResultadoPrevisao {\n    // Tamanho da janela para média móvel (1/4 dos dados ou mínimo 3)\n    const tamanhoJanela = Math.max(3, Math.floor(valores.length / 4));\n\n    // Calcular médias móveis históricas\n    const mediasMoveis: number[] = [];\n    const erros: number[] = [];\n\n    for (let i = tamanhoJanela; i < valores.length; i++) {\n      const janela = valores.slice(i - tamanhoJanela, i);\n      const mediaMovel = EstatisticaUtils.calcularMedia(janela);\n      mediasMoveis.push(mediaMovel);\n      erros.push(valores[i] - mediaMovel);\n    }\n\n    // Calcular erro médio e desvio padrão dos erros\n    const erroMedio = EstatisticaUtils.calcularMedia(\n      erros.map((e) => Math.abs(e)),\n    );\n    const desvioPadraoErros = EstatisticaUtils.calcularDesvioPadrao(erros);\n\n    // Calcular fator para intervalo de confiança\n    const z =\n      intervaloConfianca >= 0.99\n        ? 2.576\n        : intervaloConfianca >= 0.95\n          ? 1.96\n          : intervaloConfianca >= 0.9\n            ? 1.645\n            : 1.28;\n\n    // Gerar previsões\n    const previsao: PontoPrevisao[] = [];\n\n    const valoresPrevistos = [...valores];\n\n    for (let i = 1; i <= horizonte; i++) {\n      // Usar os últimos 'tamanhoJanela' valores para prever o próximo\n      const ultimosValores = valoresPrevistos.slice(-tamanhoJanela);\n      const proximoValor = EstatisticaUtils.calcularMedia(ultimosValores);\n\n      // Adicionar à lista de valores para usar nas próximas previsões\n      valoresPrevistos.push(proximoValor);\n\n      // Calcular data da previsão\n      const ultimaData = new Date(datas[datas.length - 1]);\n      const dataPrevisao = new Date(ultimaData);\n      const intervaloMedioDias = Math.floor(\n        (datas[datas.length - 1].getTime() - datas[0].getTime()) /\n          (1000 * 60 * 60 * 24 * (datas.length - 1)),\n      );\n\n      dataPrevisao.setDate(ultimaData.getDate() + i * intervaloMedioDias);\n\n      previsao.push({\n        data: dataPrevisao,\n        valor: Number(proximoValor.toFixed(2)),\n        intervalo_confianca: {\n          minimo: Number((proximoValor - z * desvioPadraoErros).toFixed(2)),\n          maximo: Number((proximoValor + z * desvioPadraoErros).toFixed(2)),\n        },\n      });\n    }\n\n    // Calcular pseudo-R² (1 - SSE/SST)\n    const media = EstatisticaUtils.calcularMedia(valores);\n    const sst = valores.reduce((sum, v) => sum + Math.pow(v - media, 2), 0);\n    const sse = erros.reduce((sum, e) => sum + Math.pow(e, 2), 0);\n    const r2 = sst === 0 ? 0 : 1 - sse / sst;\n\n    return {\n      previsao,\n      r2,\n      erro_medio: erroMedio,\n      modelo: 'media_movel',\n    };\n  }\n\n  /**\n   * Gera previsão usando suavização exponencial simples\n   * @private\n   */\n  private previsaoSuavizacaoExponencial(\n    valores: number[],\n    datas: Date[],\n    horizonte: number,\n    intervaloConfianca: number,\n  ): ResultadoPrevisao {\n    // Fator de suavização (alpha)\n    const alpha = 0.3;\n\n    // Calcular valores suavizados\n    const valoresSuavizados: number[] = [valores[0]];\n    const erros: number[] = [0];\n\n    for (let i = 1; i < valores.length; i++) {\n      const valorSuavizado =\n        alpha * valores[i] + (1 - alpha) * valoresSuavizados[i - 1];\n      valoresSuavizados.push(valorSuavizado);\n      erros.push(valores[i] - valorSuavizado);\n    }\n\n    // Calcular erro médio e desvio padrão dos erros\n    const erroMedio = EstatisticaUtils.calcularMedia(\n      erros.slice(1).map((e) => Math.abs(e)),\n    );\n    const desvioPadraoErros = EstatisticaUtils.calcularDesvioPadrao(\n      erros.slice(1),\n    );\n\n    // Calcular fator para intervalo de confiança\n    const z =\n      intervaloConfianca >= 0.99\n        ? 2.576\n        : intervaloConfianca >= 0.95\n          ? 1.96\n          : intervaloConfianca >= 0.9\n            ? 1.645\n            : 1.28;\n\n    // Último valor suavizado para iniciar a previsão\n    const ultimoValorSuavizado =\n      valoresSuavizados[valoresSuavizados.length - 1];\n\n    // Gerar previsões\n    const previsao: PontoPrevisao[] = [];\n\n    for (let i = 1; i <= horizonte; i++) {\n      // Na suavização exponencial simples, a previsão é o último valor suavizado\n      // (constante para todos os horizontes futuros)\n\n      // Calcular data da previsão\n      const ultimaData = new Date(datas[datas.length - 1]);\n      const dataPrevisao = new Date(ultimaData);\n      const intervaloMedioDias = Math.floor(\n        (datas[datas.length - 1].getTime() - datas[0].getTime()) /\n          (1000 * 60 * 60 * 24 * (datas.length - 1)),\n      );\n\n      dataPrevisao.setDate(ultimaData.getDate() + i * intervaloMedioDias);\n\n      // Aumentar a incerteza com o horizonte\n      const fatorIncerteza = Math.sqrt(i);\n\n      previsao.push({\n        data: dataPrevisao,\n        valor: Number(ultimoValorSuavizado.toFixed(2)),\n        intervalo_confianca: {\n          minimo: Number(\n            (\n              ultimoValorSuavizado -\n              z * desvioPadraoErros * fatorIncerteza\n            ).toFixed(2),\n          ),\n          maximo: Number(\n            (\n              ultimoValorSuavizado +\n              z * desvioPadraoErros * fatorIncerteza\n            ).toFixed(2),\n          ),\n        },\n      });\n    }\n\n    // Calcular pseudo-R² (1 - SSE/SST)\n    const media = EstatisticaUtils.calcularMedia(valores);\n    const sst = valores.reduce((sum, v) => sum + Math.pow(v - media, 2), 0);\n    const sse = erros.slice(1).reduce((sum, e) => sum + Math.pow(e, 2), 0);\n    const r2 = sst === 0 ? 0 : 1 - sse / sst;\n\n    return {\n      previsao,\n      r2,\n      erro_medio: erroMedio,\n      modelo: 'suavizacao_exponencial',\n    };\n  }\n}\n"],"version":3}