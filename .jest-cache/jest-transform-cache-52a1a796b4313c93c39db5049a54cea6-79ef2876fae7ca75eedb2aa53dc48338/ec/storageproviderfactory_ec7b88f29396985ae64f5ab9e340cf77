b2da0ec7ebeaa90d20287bdc8263086c
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var StorageProviderFactory_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageProviderFactory = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const storage_provider_interface_1 = require("../interfaces/storage-provider.interface");
const s3_storage_adapter_1 = require("../adapters/s3-storage.adapter");
const local_storage_adapter_1 = require("../adapters/local-storage.adapter");
const minio_service_1 = require("../../../shared/services/minio.service");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * Factory para criação de provedores de armazenamento
 *
 * Permite selecionar o provedor de armazenamento adequado
 * com base na configuração do sistema
 */
let StorageProviderFactory = StorageProviderFactory_1 = class StorageProviderFactory {
    configService;
    s3StorageAdapter;
    localStorageAdapter;
    minioService;
    logger = new common_1.Logger(StorageProviderFactory_1.name);
    defaultProvider;
    constructor(configService, s3StorageAdapter, localStorageAdapter, minioService) {
        this.configService = configService;
        this.s3StorageAdapter = s3StorageAdapter;
        this.localStorageAdapter = localStorageAdapter;
        this.minioService = minioService;
        this.defaultProvider = this.configService.get('STORAGE_PROVIDER', storage_provider_interface_1.TipoStorageProvider.MINIO);
        this.logger.log(`Provedor de armazenamento padrão: ${this.defaultProvider}`);
        // Inicializar o diretório de uploads local se necessário
        if (this.defaultProvider === storage_provider_interface_1.TipoStorageProvider.LOCAL) {
            const uploadsDir = this.configService.get('UPLOADS_DIR', path.join(process.cwd(), 'uploads'));
            if (!fs.existsSync(uploadsDir)) {
                fs.mkdirSync(uploadsDir, { recursive: true });
                this.logger.log(`Diretório de uploads criado: ${uploadsDir}`);
            }
        }
    }
    /**
     * Obtém o provedor de armazenamento padrão
     * @returns Provedor de armazenamento
     */
    getProvider() {
        return this.createProvider(this.defaultProvider);
    }
    /**
     * Cria um provedor de armazenamento com base no tipo especificado
     * @param type Tipo de provedor de armazenamento (opcional, usa o padrão se não especificado)
     * @returns Provedor de armazenamento
     */
    createProvider(type) {
        const providerType = type || this.defaultProvider;
        this.logger.debug(`Criando provedor de armazenamento: ${providerType}`);
        switch (providerType) {
            case storage_provider_interface_1.TipoStorageProvider.S3:
                if (!this.s3StorageAdapter) {
                    this.logger.warn('S3 não está configurado. Usando armazenamento local como fallback.');
                    return this.localStorageAdapter;
                }
                return this.s3StorageAdapter;
            case storage_provider_interface_1.TipoStorageProvider.MINIO:
                return this.createMinioAdapter();
            case storage_provider_interface_1.TipoStorageProvider.LOCAL:
                return this.localStorageAdapter;
            default:
                this.logger.warn(`Tipo de provedor desconhecido: ${providerType}. Usando provedor padrão: ${this.defaultProvider}`);
                // Evitar recursão infinita usando diretamente o provedor padrão
                if (this.defaultProvider === storage_provider_interface_1.TipoStorageProvider.S3) {
                    if (!this.s3StorageAdapter) {
                        this.logger.warn('S3 não está configurado. Usando armazenamento local como fallback.');
                        return this.localStorageAdapter;
                    }
                    return this.s3StorageAdapter;
                }
                else if (this.defaultProvider === storage_provider_interface_1.TipoStorageProvider.MINIO) {
                    return this.createMinioAdapter();
                }
                else {
                    return this.localStorageAdapter;
                }
        }
    }
    /**
     * Cria um adaptador para o MinIO que implementa a interface StorageProvider
     * @returns Adaptador para o MinIO
     */
    createMinioAdapter() {
        // Adaptar o MinioService para a interface StorageProvider
        return {
            nome: 'MinIO',
            salvarArquivo: async (buffer, nomeArquivo, mimetype, metadados) => {
                // Extrair solicitação ID e tipo de documento dos metadados, se disponíveis
                const solicitacaoId = metadados?.solicitacaoId || 'default';
                const tipoDocumento = metadados?.tipoDocumento || 'OUTRO';
                // Fazer upload usando o MinioService
                const resultado = await this.minioService.uploadArquivo(buffer, nomeArquivo, solicitacaoId, tipoDocumento);
                return resultado.nomeArquivo;
            },
            obterArquivo: async (caminho) => {
                // Fazer download usando o MinioService
                const resultado = await this.minioService.downloadArquivo(caminho);
                return resultado.arquivo;
            },
            removerArquivo: async (caminho) => {
                await this.minioService.removerArquivo(caminho);
            },
            upload: async (buffer, key, mimetype, metadata) => {
                // Usar o método salvarArquivo para manter consistência
                return this.minioService
                    .uploadArquivo(buffer, key, 'default', 'OUTRO')
                    .then((result) => result.nomeArquivo);
            },
            download: async (key) => {
                // Usar o método obterArquivo para manter consistência
                return this.minioService
                    .downloadArquivo(key)
                    .then((result) => result.arquivo);
            },
            delete: async (key) => {
                // Usar o método removerArquivo para manter consistência
                return this.minioService.removerArquivo(key);
            },
            getUrl: async (key, expiresIn) => {
                return this.minioService.gerarUrlPreAssinada(key, expiresIn || 3600);
            },
            exists: async (key) => {
                try {
                    // Tentar fazer download para verificar se existe
                    await this.minioService.downloadArquivo(key);
                    return true;
                }
                catch (error) {
                    if (error.message && error.message.includes('not found')) {
                        return false;
                    }
                    throw error; // Propagar outros erros
                }
            },
            copy: async (sourceKey, destinationKey) => {
                // Implementar cópia baixando e fazendo upload novamente
                const resultado = await this.minioService.downloadArquivo(sourceKey);
                // Extrair partes da chave de destino
                const parts = destinationKey.split('/');
                const solicitacaoId = parts[0] || 'default';
                const tipoDocumento = parts[1] || 'OUTRO';
                const nomeOriginal = parts.length > 2 ? parts[2] : destinationKey;
                // Fazer upload com a nova chave
                const resultadoUpload = await this.minioService.uploadArquivo(resultado.arquivo, nomeOriginal, solicitacaoId, tipoDocumento);
                return resultadoUpload.nomeArquivo;
            },
            list: async (prefix, maxKeys) => {
                try {
                    // Implementação básica usando cliente Minio diretamente
                    const client = minio_service_1.MinioService.client;
                    if (client && typeof client.listObjects === 'function') {
                        const objects = [];
                        const stream = client.listObjects(process.env.MINIO_BUCKET_NAME || 'documents', prefix, true);
                        return new Promise((resolve, reject) => {
                            stream.on('data', (obj) => {
                                if (obj.name && (!maxKeys || objects.length < maxKeys)) {
                                    objects.push(obj.name);
                                }
                            });
                            stream.on('end', () => resolve(objects));
                            stream.on('error', reject);
                        });
                    }
                    this.logger.warn('Cliente MinIO não disponível para listagem');
                    return [];
                }
                catch (error) {
                    this.logger.error('Erro ao listar arquivos no MinIO:', error);
                    return [];
                }
            },
        };
    }
};
exports.StorageProviderFactory = StorageProviderFactory;
exports.StorageProviderFactory = StorageProviderFactory = StorageProviderFactory_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof s3_storage_adapter_1.S3StorageAdapter !== "undefined" && s3_storage_adapter_1.S3StorageAdapter) === "function" ? _b : Object, typeof (_c = typeof local_storage_adapter_1.LocalStorageAdapter !== "undefined" && local_storage_adapter_1.LocalStorageAdapter) === "function" ? _c : Object, typeof (_d = typeof minio_service_1.MinioService !== "undefined" && minio_service_1.MinioService) === "function" ? _d : Object])
], StorageProviderFactory);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,