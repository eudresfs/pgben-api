{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConflictException, NotFoundException } from '@nestjs/common';\nimport { Integrador } from '../entities/integrador.entity';\nimport { IntegradorService } from '../services/integrador.service';\nimport { CreateIntegradorDto } from '../dto/create-integrador.dto';\nimport { UpdateIntegradorDto } from '../dto/update-integrador.dto';\n\n/**\n * Testes unitários para o serviço de integradores.\n * Valida as operações CRUD e regras de negócio específicas.\n */\ndescribe('IntegradorService', () => {\n  let service: IntegradorService;\n  let repository: Repository<Integrador>;\n\n  // Mock do repositório TypeORM\n  const mockRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    update: jest.fn(),\n    remove: jest.fn(),\n  };\n\n  // Configuração do módulo de teste\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        IntegradorService,\n        {\n          provide: getRepositoryToken(Integrador),\n          useValue: mockRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<IntegradorService>(IntegradorService);\n    repository = module.get<Repository<Integrador>>(getRepositoryToken(Integrador));\n  });\n\n  // Limpar mocks após cada teste\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // Testes para verificar se o serviço foi definido corretamente\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('create', () => {\n    it('deve criar um novo integrador com sucesso', async () => {\n      // Arrange\n      const createDto: CreateIntegradorDto = {\n        nome: 'Integrador Teste',\n        descricao: 'Descrição do integrador de teste',\n        responsavel: 'João da Silva',\n        emailContato: 'joao@teste.com',\n        telefoneContato: '84999999999',\n        permissoesEscopo: ['read:dados_basicos'],\n        ipPermitidos: ['192.168.1.1'],\n        ativo: true\n      };\n\n      const integrador = {\n        id: 'uuid-teste',\n        ...createDto,\n        dataCriacao: new Date(),\n        dataAtualizacao: new Date(),\n        ultimoAcesso: null,\n        tokens: []\n      };\n\n      // Configurar mock para retornar null (integrador não existe)\n      mockRepository.findOne.mockResolvedValue(null);\n      // Configurar mocks para criar e salvar integrador\n      mockRepository.create.mockReturnValue(integrador);\n      mockRepository.save.mockResolvedValue(integrador);\n\n      // Act\n      const result = await service.create(createDto);\n\n      // Assert\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { nome: createDto.nome }\n      });\n      expect(mockRepository.create).toHaveBeenCalledWith(createDto);\n      expect(mockRepository.save).toHaveBeenCalledWith(integrador);\n      expect(result).toBeDefined();\n      expect(result.id).toEqual(integrador.id);\n      expect(result.nome).toEqual(integrador.nome);\n    });\n\n    it('deve lançar ConflictException quando tentar criar integrador com nome duplicado', async () => {\n      // Arrange\n      const createDto: CreateIntegradorDto = {\n        nome: 'Integrador Duplicado',\n        ativo: true\n      };\n\n      // Configurar mock para retornar um integrador existente\n      mockRepository.findOne.mockResolvedValue({\n        id: 'uuid-existente',\n        nome: 'Integrador Duplicado'\n      });\n\n      // Act & Assert\n      await expect(service.create(createDto)).rejects.toThrow(ConflictException);\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { nome: createDto.nome }\n      });\n      expect(mockRepository.create).not.toHaveBeenCalled();\n      expect(mockRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista de integradores', async () => {\n      // Arrange\n      const integradores = [\n        {\n          id: 'uuid-1',\n          nome: 'Integrador 1',\n          dataCriacao: new Date(),\n          dataAtualizacao: new Date()\n        },\n        {\n          id: 'uuid-2',\n          nome: 'Integrador 2',\n          dataCriacao: new Date(),\n          dataAtualizacao: new Date()\n        }\n      ];\n\n      mockRepository.find.mockResolvedValue(integradores);\n\n      // Act\n      const result = await service.findAll();\n\n      // Assert\n      expect(mockRepository.find).toHaveBeenCalled();\n      expect(result).toHaveLength(2);\n      expect(result[0].id).toEqual(integradores[0].id);\n      expect(result[1].id).toEqual(integradores[1].id);\n    });\n  });\n\n  describe('findById', () => {\n    it('deve encontrar um integrador pelo ID', async () => {\n      // Arrange\n      const integrador = {\n        id: 'uuid-teste',\n        nome: 'Integrador Teste',\n        dataCriacao: new Date(),\n        dataAtualizacao: new Date()\n      };\n\n      mockRepository.findOne.mockResolvedValue(integrador);\n\n      // Act\n      const result = await service.findById('uuid-teste');\n\n      // Assert\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'uuid-teste' }\n      });\n      expect(result).toEqual(integrador);\n    });\n\n    it('deve lançar NotFoundException quando integrador não for encontrado', async () => {\n      // Arrange\n      mockRepository.findOne.mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(service.findById('uuid-inexistente')).rejects.toThrow(NotFoundException);\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'uuid-inexistente' }\n      });\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar um integrador com sucesso', async () => {\n      // Arrange\n      const integrador = {\n        id: 'uuid-teste',\n        nome: 'Integrador Antigo',\n        dataCriacao: new Date(),\n        dataAtualizacao: new Date()\n      };\n\n      const updateDto: UpdateIntegradorDto = {\n        nome: 'Integrador Atualizado',\n        descricao: 'Nova descrição'\n      };\n\n      const integradorAtualizado = {\n        ...integrador,\n        ...updateDto,\n        dataAtualizacao: new Date()\n      };\n\n      // Mock para findById\n      mockRepository.findOne.mockResolvedValueOnce(integrador);\n      // Mock para verificar nome duplicado\n      mockRepository.findOne.mockResolvedValueOnce(null);\n      // Mock para salvar\n      mockRepository.save.mockResolvedValue(integradorAtualizado);\n\n      // Act\n      const result = await service.update('uuid-teste', updateDto);\n\n      // Assert\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'uuid-teste' }\n      });\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { nome: updateDto.nome }\n      });\n      expect(mockRepository.save).toHaveBeenCalled();\n      expect(result.nome).toEqual(updateDto.nome);\n      expect(result.descricao).toEqual(updateDto.descricao);\n    });\n\n    it('deve lançar ConflictException ao tentar atualizar para um nome duplicado', async () => {\n      // Arrange\n      const integrador = {\n        id: 'uuid-teste',\n        nome: 'Integrador Antigo',\n        dataCriacao: new Date(),\n        dataAtualizacao: new Date()\n      };\n\n      const updateDto: UpdateIntegradorDto = {\n        nome: 'Integrador Duplicado'\n      };\n\n      const integradorExistente = {\n        id: 'outro-uuid',\n        nome: 'Integrador Duplicado'\n      };\n\n      // Mock para findById\n      mockRepository.findOne.mockResolvedValueOnce(integrador);\n      // Mock para verificar nome duplicado - retorna outro integrador\n      mockRepository.findOne.mockResolvedValueOnce(integradorExistente);\n\n      // Act & Assert\n      await expect(service.update('uuid-teste', updateDto)).rejects.toThrow(ConflictException);\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'uuid-teste' }\n      });\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { nome: updateDto.nome }\n      });\n      expect(mockRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('remove', () => {\n    it('deve remover um integrador com sucesso', async () => {\n      // Arrange\n      const integrador = {\n        id: 'uuid-teste',\n        nome: 'Integrador para Remover'\n      };\n\n      mockRepository.findOne.mockResolvedValue(integrador);\n      mockRepository.remove.mockResolvedValue(undefined);\n\n      // Act\n      await service.remove('uuid-teste');\n\n      // Assert\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'uuid-teste' }\n      });\n      expect(mockRepository.remove).toHaveBeenCalledWith(integrador);\n    });\n  });\n\n  describe('toggleAtivo', () => {\n    it('deve ativar um integrador inativo', async () => {\n      // Arrange\n      const integrador = {\n        id: 'uuid-teste',\n        nome: 'Integrador Test',\n        ativo: false,\n        dataCriacao: new Date(),\n        dataAtualizacao: new Date()\n      };\n\n      const integradorAtivado = {\n        ...integrador,\n        ativo: true\n      };\n\n      mockRepository.findOne.mockResolvedValue(integrador);\n      mockRepository.save.mockResolvedValue(integradorAtivado);\n\n      // Act\n      const result = await service.toggleAtivo('uuid-teste', true);\n\n      // Assert\n      expect(mockRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'uuid-teste' }\n      });\n      expect(mockRepository.save).toHaveBeenCalledWith({\n        ...integrador,\n        ativo: true\n      });\n      expect(result.ativo).toBe(true);\n    });\n  });\n\n  describe('registrarAcesso', () => {\n    it('deve atualizar o timestamp de último acesso', async () => {\n      // Arrange\n      mockRepository.update.mockResolvedValue({ affected: 1 });\n\n      // Act\n      await service.registrarAcesso('uuid-teste');\n\n      // Assert\n      expect(mockRepository.update).toHaveBeenCalledWith(\n        { id: 'uuid-teste' },\n        { ultimoAcesso: expect.any(Date) }\n      );\n    });\n  });\n});\n"],"version":3}