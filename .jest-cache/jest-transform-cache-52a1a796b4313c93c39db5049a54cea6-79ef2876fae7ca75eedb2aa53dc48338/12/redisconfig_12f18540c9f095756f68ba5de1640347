03de550d9b14f458be00590a4e7be7db
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRedisConfig = getRedisConfig;
/**
 * Configurações otimizadas para o Redis
 *
 * Estas configurações são projetadas para melhorar a resiliência e performance
 * da conexão com o Redis, incluindo:
 * - Reconexão automática com backoff exponencial
 * - Timeout de comandos para evitar bloqueios
 * - Número máximo de tentativas de reconexão
 * - Monitoramento de saúde da conexão
 */
function getRedisConfig(configService) {
    return {
        host: configService.get('REDIS_HOST', 'localhost'),
        port: configService.get('REDIS_PORT', 6379),
        password: configService.get('REDIS_PASSWORD', ''),
        db: configService.get('REDIS_DB', 0),
        // Configurações de timeout e reconexão
        connectTimeout: configService.get('REDIS_CONNECT_TIMEOUT', 5000),
        commandTimeout: configService.get('REDIS_COMMAND_TIMEOUT', 2000),
        maxRetriesPerRequest: configService.get('REDIS_MAX_RETRIES', 3),
        // Configurações de reconexão
        retryStrategy(times) {
            // Backoff exponencial com limite máximo
            const delay = Math.min(times * 100, 3000);
            return delay;
        },
        // Configurações de saúde da conexão
        enableReadyCheck: true,
        enableOfflineQueue: true,
        // Configurações de desempenho
        keepAlive: 10000,
        noDelay: true,
        // Tratamento de erros
        showFriendlyErrorStack: process.env.NODE_ENV !== 'production',
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcY2FjaGVcXHJlZGlzLmNvbmZpZy50cyIsIm1hcHBpbmdzIjoiOztBQWFBLHdDQThCQztBQXhDRDs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixjQUFjLENBQUMsYUFBNEI7SUFDekQsT0FBTztRQUNMLElBQUksRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFTLFlBQVksRUFBRSxXQUFXLENBQUM7UUFDMUQsSUFBSSxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQVMsWUFBWSxFQUFFLElBQUksQ0FBQztRQUNuRCxRQUFRLEVBQUUsYUFBYSxDQUFDLEdBQUcsQ0FBUyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7UUFDekQsRUFBRSxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQVMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUU1Qyx1Q0FBdUM7UUFDdkMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQVMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDO1FBQ3hFLGNBQWMsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFTLHVCQUF1QixFQUFFLElBQUksQ0FBQztRQUN4RSxvQkFBb0IsRUFBRSxhQUFhLENBQUMsR0FBRyxDQUFTLG1CQUFtQixFQUFFLENBQUMsQ0FBQztRQUV2RSw2QkFBNkI7UUFDN0IsYUFBYSxDQUFDLEtBQUs7WUFDakIsd0NBQXdDO1lBQ3hDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMxQyxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxvQ0FBb0M7UUFDcEMsZ0JBQWdCLEVBQUUsSUFBSTtRQUN0QixrQkFBa0IsRUFBRSxJQUFJO1FBRXhCLDhCQUE4QjtRQUM5QixTQUFTLEVBQUUsS0FBSztRQUNoQixPQUFPLEVBQUUsSUFBSTtRQUViLHNCQUFzQjtRQUN0QixzQkFBc0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZO0tBQzlELENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXGNhY2hlXFxyZWRpcy5jb25maWcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnU2VydmljZSB9IGZyb20gJ0BuZXN0anMvY29uZmlnJztcbmltcG9ydCB7IFJlZGlzT3B0aW9ucyB9IGZyb20gJ2lvcmVkaXMnO1xuXG4vKipcbiAqIENvbmZpZ3VyYcOnw7VlcyBvdGltaXphZGFzIHBhcmEgbyBSZWRpc1xuICpcbiAqIEVzdGFzIGNvbmZpZ3VyYcOnw7VlcyBzw6NvIHByb2pldGFkYXMgcGFyYSBtZWxob3JhciBhIHJlc2lsacOqbmNpYSBlIHBlcmZvcm1hbmNlXG4gKiBkYSBjb25leMOjbyBjb20gbyBSZWRpcywgaW5jbHVpbmRvOlxuICogLSBSZWNvbmV4w6NvIGF1dG9tw6F0aWNhIGNvbSBiYWNrb2ZmIGV4cG9uZW5jaWFsXG4gKiAtIFRpbWVvdXQgZGUgY29tYW5kb3MgcGFyYSBldml0YXIgYmxvcXVlaW9zXG4gKiAtIE7Dum1lcm8gbcOheGltbyBkZSB0ZW50YXRpdmFzIGRlIHJlY29uZXjDo29cbiAqIC0gTW9uaXRvcmFtZW50byBkZSBzYcO6ZGUgZGEgY29uZXjDo29cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFJlZGlzQ29uZmlnKGNvbmZpZ1NlcnZpY2U6IENvbmZpZ1NlcnZpY2UpOiBSZWRpc09wdGlvbnMge1xuICByZXR1cm4ge1xuICAgIGhvc3Q6IGNvbmZpZ1NlcnZpY2UuZ2V0PHN0cmluZz4oJ1JFRElTX0hPU1QnLCAnbG9jYWxob3N0JyksXG4gICAgcG9ydDogY29uZmlnU2VydmljZS5nZXQ8bnVtYmVyPignUkVESVNfUE9SVCcsIDYzNzkpLFxuICAgIHBhc3N3b3JkOiBjb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdSRURJU19QQVNTV09SRCcsICcnKSxcbiAgICBkYjogY29uZmlnU2VydmljZS5nZXQ8bnVtYmVyPignUkVESVNfREInLCAwKSxcblxuICAgIC8vIENvbmZpZ3VyYcOnw7VlcyBkZSB0aW1lb3V0IGUgcmVjb25leMOjb1xuICAgIGNvbm5lY3RUaW1lb3V0OiBjb25maWdTZXJ2aWNlLmdldDxudW1iZXI+KCdSRURJU19DT05ORUNUX1RJTUVPVVQnLCA1MDAwKSxcbiAgICBjb21tYW5kVGltZW91dDogY29uZmlnU2VydmljZS5nZXQ8bnVtYmVyPignUkVESVNfQ09NTUFORF9USU1FT1VUJywgMjAwMCksXG4gICAgbWF4UmV0cmllc1BlclJlcXVlc3Q6IGNvbmZpZ1NlcnZpY2UuZ2V0PG51bWJlcj4oJ1JFRElTX01BWF9SRVRSSUVTJywgMyksXG5cbiAgICAvLyBDb25maWd1cmHDp8O1ZXMgZGUgcmVjb25leMOjb1xuICAgIHJldHJ5U3RyYXRlZ3kodGltZXMpIHtcbiAgICAgIC8vIEJhY2tvZmYgZXhwb25lbmNpYWwgY29tIGxpbWl0ZSBtw6F4aW1vXG4gICAgICBjb25zdCBkZWxheSA9IE1hdGgubWluKHRpbWVzICogMTAwLCAzMDAwKTtcbiAgICAgIHJldHVybiBkZWxheTtcbiAgICB9LFxuXG4gICAgLy8gQ29uZmlndXJhw6fDtWVzIGRlIHNhw7pkZSBkYSBjb25leMOjb1xuICAgIGVuYWJsZVJlYWR5Q2hlY2s6IHRydWUsXG4gICAgZW5hYmxlT2ZmbGluZVF1ZXVlOiB0cnVlLFxuXG4gICAgLy8gQ29uZmlndXJhw6fDtWVzIGRlIGRlc2VtcGVuaG9cbiAgICBrZWVwQWxpdmU6IDEwMDAwLFxuICAgIG5vRGVsYXk6IHRydWUsXG5cbiAgICAvLyBUcmF0YW1lbnRvIGRlIGVycm9zXG4gICAgc2hvd0ZyaWVuZGx5RXJyb3JTdGFjazogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcbiAgfTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==