{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\monitoramento-aluguel-social.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\monitoramento-aluguel-social.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../../entities/solicitacao.entity';\nimport { TipoBeneficio } from '../../../enums/tipo-beneficio.enum';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport { NotificacaoService } from './notificacao.service';\n\n/**\n * Serviço responsável pelo monitoramento obrigatório de solicitações de Aluguel Social\n *\n * Este serviço garante que as solicitações de Aluguel Social sejam monitoradas regularmente\n * de acordo com as regras de negócio estabelecidas.\n */\n@Injectable()\nexport class MonitoramentoAluguelSocialService {\n  private readonly logger = new Logger(MonitoramentoAluguelSocialService.name);\n\n  // Período padrão de monitoramento em dias\n  private readonly PERIODO_MONITORAMENTO_DIAS = 90;\n\n  // Dias de antecedência para alerta de monitoramento\n  private readonly DIAS_ALERTA_ANTECEDENCIA = 15;\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    private readonly notificacaoService: NotificacaoService,\n  ) {}\n\n  /**\n   * Verifica se uma solicitação é do tipo Aluguel Social\n   * @param solicitacao Solicitação a ser verificada\n   * @returns Verdadeiro se for Aluguel Social, falso caso contrário\n   */\n  isAluguelSocial(solicitacao: Solicitacao): boolean {\n    // Verificar pelo tipo_beneficio direto\n    if (\n      solicitacao.tipo_beneficio &&\n      solicitacao.tipo_beneficio.nome === TipoBeneficio.ALUGUEL_SOCIAL\n    ) {\n      return true;\n    }\n\n    // Verificar pelo tipo_beneficio_id através dos dados complementares\n    if (\n      solicitacao.dados_complementares &&\n      solicitacao.dados_complementares.tipo_beneficio ===\n        TipoBeneficio.ALUGUEL_SOCIAL\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Verifica se a solicitação está em um estado que requer monitoramento\n   * @param solicitacao Solicitação a ser verificada\n   * @returns Verdadeiro se estiver em estado que requer monitoramento\n   */\n  requiresMonitoring(solicitacao: Solicitacao): boolean {\n    // Solicitações aprovadas e em concessão requerem monitoramento\n    const statusMonitorados = [\n      StatusSolicitacao.APROVADA,\n      StatusSolicitacao.EM_PROCESSAMENTO,\n      StatusSolicitacao.LIBERADA,\n    ];\n\n    return statusMonitorados.includes(solicitacao.status);\n  }\n\n  /**\n   * Calcula a data da próxima visita de monitoramento\n   * @param ultimaVisita Data da última visita ou null se não houver\n   * @returns Data da próxima visita agendada\n   */\n  calcularProximaVisita(ultimaVisita?: Date): Date {\n    const hoje = new Date();\n\n    if (!ultimaVisita) {\n      // Se não houver última visita, a próxima deve ser em 30 dias\n      const proximaVisita = new Date(hoje);\n      proximaVisita.setDate(proximaVisita.getDate() + 30);\n      return proximaVisita;\n    }\n\n    // Caso contrário, próxima visita deve ser em PERIODO_MONITORAMENTO_DIAS\n    const proximaVisita = new Date(ultimaVisita);\n    proximaVisita.setDate(\n      proximaVisita.getDate() + this.PERIODO_MONITORAMENTO_DIAS,\n    );\n    return proximaVisita;\n  }\n\n  /**\n   * Registra uma nova visita para uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param dataVisita Data da visita\n   * @param observacoes Observações da visita\n   * @param usuario Usuário que realizou a visita\n   */\n  async registrarVisita(\n    solicitacaoId: string,\n    dataVisita: Date,\n    observacoes: string,\n    usuario: any,\n  ): Promise<void> {\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      this.logger.error(`Solicitação não encontrada: ${solicitacaoId}`);\n      throw new Error('Solicitação não encontrada');\n    }\n\n    // Verifica se é aluguel social\n    if (!this.isAluguelSocial(solicitacao)) {\n      this.logger.error(\n        `Tentativa de registrar visita para solicitação que não é de Aluguel Social: ${solicitacaoId}`,\n      );\n      throw new Error('Solicitação não é de Aluguel Social');\n    }\n\n    // Inicializa o histórico de visitas se não existir\n    if (!solicitacao.dados_complementares) {\n      solicitacao.dados_complementares = {};\n    }\n\n    if (!solicitacao.dados_complementares.visitas_monitoramento) {\n      solicitacao.dados_complementares.visitas_monitoramento = [];\n    }\n\n    // Calcula a data da próxima visita\n    const proximaVisita = this.calcularProximaVisita(dataVisita);\n\n    // Adiciona a nova visita ao histórico\n    solicitacao.dados_complementares.visitas_monitoramento.push({\n      data: dataVisita,\n      observacoes,\n      usuario_id: usuario.id,\n      nome_usuario: usuario.nome || 'Sistema',\n      proxima_visita: proximaVisita,\n    });\n\n    // Atualiza a data da próxima visita\n    solicitacao.dados_complementares.proxima_visita_monitoramento =\n      proximaVisita;\n\n    // Salva as alterações\n    await this.solicitacaoRepository.save(solicitacao);\n\n    // Envia notificação sobre o registro da visita\n    this.notificacaoService.notificarVisitaMonitoramentoRegistrada(\n      solicitacao,\n      dataVisita,\n      proximaVisita,\n    );\n\n    this.logger.log(`Visita registrada para solicitação ${solicitacaoId}`);\n  }\n\n  /**\n   * Obtém as solicitações de Aluguel Social que precisam de monitoramento\n   * @returns Lista de solicitações que precisam de monitoramento\n   */\n  async getSolicitacoesParaMonitoramento(): Promise<Solicitacao[]> {\n    const hoje = new Date();\n\n    const queryBuilder = this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .leftJoinAndSelect('solicitacao.tipo_beneficio', 'tipo_beneficio')\n      .where('solicitacao.status IN (:...statusMonitorados)', {\n        statusMonitorados: [\n          StatusSolicitacao.APROVADA,\n          StatusSolicitacao.EM_PROCESSAMENTO,\n          StatusSolicitacao.LIBERADA,\n        ],\n      })\n      .andWhere(\n        \"(tipo_beneficio.nome = :tipoBeneficio OR solicitacao.dados_complementares->>'tipo_beneficio' = :tipoBeneficioStr)\",\n        {\n          tipoBeneficio: TipoBeneficio.ALUGUEL_SOCIAL,\n          tipoBeneficioStr: TipoBeneficio.ALUGUEL_SOCIAL,\n        },\n      )\n      .andWhere(\n        \"(solicitacao.dados_complementares->'proxima_visita_monitoramento' IS NULL OR \" +\n          \"CAST(solicitacao.dados_complementares->>'proxima_visita_monitoramento' AS TIMESTAMP) <= :dataLimite)\",\n        {\n          dataLimite: hoje,\n        },\n      )\n      .orderBy('solicitacao.updated_at', 'ASC');\n\n    return queryBuilder.getMany();\n  }\n\n  /**\n   * Obtém as solicitações que estão próximas da data de monitoramento\n   * @returns Lista de solicitações com alerta de monitoramento\n   */\n  async getSolicitacoesComAlertaMonitoramento(): Promise<Solicitacao[]> {\n    const hoje = new Date();\n    const dataLimiteAlerta = new Date(hoje);\n    dataLimiteAlerta.setDate(hoje.getDate() + this.DIAS_ALERTA_ANTECEDENCIA);\n\n    const queryBuilder = this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .leftJoinAndSelect('solicitacao.tipo_beneficio', 'tipo_beneficio')\n      .where('solicitacao.status IN (:...statusMonitorados)', {\n        statusMonitorados: [\n          StatusSolicitacao.APROVADA,\n          StatusSolicitacao.EM_PROCESSAMENTO,\n          StatusSolicitacao.LIBERADA,\n        ],\n      })\n      .andWhere(\n        \"(tipo_beneficio.nome = :tipoBeneficio OR solicitacao.dados_complementares->>'tipo_beneficio' = :tipoBeneficioStr)\",\n        {\n          tipoBeneficio: TipoBeneficio.ALUGUEL_SOCIAL,\n          tipoBeneficioStr: TipoBeneficio.ALUGUEL_SOCIAL,\n        },\n      )\n      .andWhere(\n        \"(solicitacao.dados_complementares->'proxima_visita_monitoramento' IS NOT NULL AND \" +\n          \"CAST(solicitacao.dados_complementares->>'proxima_visita_monitoramento' AS TIMESTAMP) > :hoje AND \" +\n          \"CAST(solicitacao.dados_complementares->>'proxima_visita_monitoramento' AS TIMESTAMP) <= :dataLimite)\",\n        {\n          hoje: hoje,\n          dataLimite: dataLimiteAlerta,\n        },\n      )\n      .orderBy(\n        \"solicitacao.dados_complementares->>'proxima_visita_monitoramento'\",\n        'ASC',\n      );\n\n    return queryBuilder.getMany();\n  }\n\n  /**\n   * Obtém uma solicitação pelo ID\n   * @param id ID da solicitação\n   * @returns Solicitação encontrada ou null\n   */\n  async getSolicitacaoById(id: string): Promise<Solicitacao | null> {\n    try {\n      return await this.solicitacaoRepository.findOne({\n        where: { id },\n        relations: ['tipo_beneficio'],\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar solicitação: ${error.message}`,\n        error.stack,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Atualiza uma visita de monitoramento existente\n   * @param solicitacaoId ID da solicitação\n   * @param indiceVisita Índice da visita no array de visitas\n   * @param dadosAtualizacao Dados para atualização parcial da visita\n   * @param usuario Usuário que está realizando a atualização\n   * @returns A visita atualizada\n   */\n  async atualizarVisitaMonitoramento(\n    solicitacaoId: string,\n    indiceVisita: number,\n    dadosAtualizacao: {\n      data_visita?: Date;\n      observacoes?: string;\n      dados_adicionais?: Record<string, any>;\n    },\n    usuario: any,\n  ): Promise<any> {\n    // Buscar a solicitação\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      this.logger.error(`Solicitação não encontrada: ${solicitacaoId}`);\n      throw new Error('Solicitação não encontrada');\n    }\n\n    // Verificar se é aluguel social\n    if (!this.isAluguelSocial(solicitacao)) {\n      this.logger.error(\n        `Tentativa de atualizar visita para solicitação que não é de Aluguel Social: ${solicitacaoId}`,\n      );\n      throw new Error('Solicitação não é de Aluguel Social');\n    }\n\n    // Verificar se existem visitas registradas\n    if (\n      !solicitacao.dados_complementares?.visitas_monitoramento ||\n      !Array.isArray(solicitacao.dados_complementares.visitas_monitoramento) ||\n      solicitacao.dados_complementares.visitas_monitoramento.length === 0\n    ) {\n      throw new Error(\n        'Solicitação não possui visitas de monitoramento registradas',\n      );\n    }\n\n    // Verificar se o índice é válido\n    if (\n      indiceVisita < 0 ||\n      indiceVisita >=\n        solicitacao.dados_complementares.visitas_monitoramento.length\n    ) {\n      throw new Error('Visita não encontrada com o índice fornecido');\n    }\n\n    // Obter a visita a ser atualizada\n    const visita =\n      solicitacao.dados_complementares.visitas_monitoramento[indiceVisita];\n\n    // Registrar dados da atualização\n    const dataAtualizacao = new Date();\n    const dadosAtualizador = {\n      usuario_id: usuario.id,\n      nome_usuario: usuario.nome || 'Sistema',\n      data_atualizacao: dataAtualizacao,\n    };\n\n    // Atualizar dados da visita\n    if (dadosAtualizacao.data_visita) {\n      visita.data = dadosAtualizacao.data_visita;\n    }\n\n    if (dadosAtualizacao.observacoes) {\n      visita.observacoes = dadosAtualizacao.observacoes;\n    }\n\n    if (dadosAtualizacao.dados_adicionais) {\n      visita.dados_adicionais = {\n        ...(visita.dados_adicionais || {}),\n        ...dadosAtualizacao.dados_adicionais,\n      };\n    }\n\n    // Adicionar informações sobre a atualização\n    if (!visita.historico_atualizacoes) {\n      visita.historico_atualizacoes = [];\n    }\n\n    visita.historico_atualizacoes.push({\n      ...dadosAtualizador,\n      dados_anteriores: {\n        data: visita.data,\n        observacoes: visita.observacoes,\n        dados_adicionais: visita.dados_adicionais,\n      },\n      campos_atualizados: Object.keys(dadosAtualizacao),\n    });\n\n    visita.ultima_atualizacao = dadosAtualizador;\n\n    // Recalcular próxima visita apenas se a data for alterada\n    if (dadosAtualizacao.data_visita) {\n      const proximaVisita = this.calcularProximaVisita(\n        dadosAtualizacao.data_visita,\n      );\n      visita.proxima_visita = proximaVisita;\n\n      // Atualizar a data da próxima visita na solicitação apenas se esta for a última visita\n      if (\n        indiceVisita ===\n        solicitacao.dados_complementares.visitas_monitoramento.length - 1\n      ) {\n        solicitacao.dados_complementares.proxima_visita_monitoramento =\n          proximaVisita;\n      }\n    }\n\n    // Salvar as alterações\n    await this.solicitacaoRepository.save(solicitacao);\n\n    // Notificar sobre a atualização se a data foi alterada\n    if (dadosAtualizacao.data_visita) {\n      this.notificacaoService.notificarVisitaMonitoramentoRegistrada(\n        solicitacao,\n        visita.data,\n        visita.proxima_visita,\n      );\n    }\n\n    this.logger.log(\n      `Visita de monitoramento atualizada para solicitação ${solicitacaoId}, índice ${indiceVisita}`,\n    );\n\n    return visita;\n  }\n\n  /**\n   * Remove uma visita de monitoramento existente\n   * @param solicitacaoId ID da solicitação\n   * @param indiceVisita Índice da visita no array de visitas\n   * @param usuario Usuário que está realizando a exclusão\n   * @returns Informações sobre a operação\n   */\n  async removerVisitaMonitoramento(\n    solicitacaoId: string,\n    indiceVisita: number,\n    usuario: any,\n  ): Promise<{ success: boolean; proximaVisitaAtualizada?: Date }> {\n    // Buscar a solicitação\n    const solicitacao = await this.solicitacaoRepository.findOne({\n      where: { id: solicitacaoId },\n    });\n\n    if (!solicitacao) {\n      this.logger.error(`Solicitação não encontrada: ${solicitacaoId}`);\n      throw new Error('Solicitação não encontrada');\n    }\n\n    // Verificar se é aluguel social\n    if (!this.isAluguelSocial(solicitacao)) {\n      this.logger.error(\n        `Tentativa de remover visita para solicitação que não é de Aluguel Social: ${solicitacaoId}`,\n      );\n      throw new Error('Solicitação não é de Aluguel Social');\n    }\n\n    // Verificar se existem visitas registradas\n    if (\n      !solicitacao.dados_complementares?.visitas_monitoramento ||\n      !Array.isArray(solicitacao.dados_complementares.visitas_monitoramento) ||\n      solicitacao.dados_complementares.visitas_monitoramento.length === 0\n    ) {\n      throw new Error(\n        'Solicitação não possui visitas de monitoramento registradas',\n      );\n    }\n\n    // Verificar se o índice é válido\n    if (\n      indiceVisita < 0 ||\n      indiceVisita >=\n        solicitacao.dados_complementares.visitas_monitoramento.length\n    ) {\n      throw new Error('Visita não encontrada com o índice fornecido');\n    }\n\n    // Armazenar informações da visita a ser removida para o log\n    const visitaRemovida =\n      solicitacao.dados_complementares.visitas_monitoramento[indiceVisita];\n\n    // Inicializar o histórico de exclusões se não existir\n    if (!solicitacao.dados_complementares.historico_exclusoes_visitas) {\n      solicitacao.dados_complementares.historico_exclusoes_visitas = [];\n    }\n\n    // Registrar a exclusão no histórico\n    solicitacao.dados_complementares.historico_exclusoes_visitas.push({\n      visita: visitaRemovida,\n      data_exclusao: new Date(),\n      usuario_id: usuario.id,\n      nome_usuario: usuario.nome || 'Sistema',\n      motivo: 'Exclusão manual via API',\n    });\n\n    // Remover a visita do array\n    solicitacao.dados_complementares.visitas_monitoramento.splice(\n      indiceVisita,\n      1,\n    );\n\n    const resultado: { success: boolean; proximaVisitaAtualizada?: Date } = {\n      success: true,\n    };\n\n    // Se for a última visita ou se não houver mais visitas, recalcular a próxima visita\n    if (solicitacao.dados_complementares.visitas_monitoramento.length === 0) {\n      // Se não houver mais visitas, a próxima visita deve ser calculada a partir da data atual\n      const proximaVisita = this.calcularProximaVisita();\n      solicitacao.dados_complementares.proxima_visita_monitoramento =\n        proximaVisita;\n      resultado.proximaVisitaAtualizada = proximaVisita;\n    } else if (\n      indiceVisita ===\n      solicitacao.dados_complementares.visitas_monitoramento.length\n    ) {\n      // Se a visita removida era a última, a próxima visita deve ser baseada na nova última visita\n      const ultimaVisita =\n        solicitacao.dados_complementares.visitas_monitoramento[\n          solicitacao.dados_complementares.visitas_monitoramento.length - 1\n        ];\n      const proximaVisita = this.calcularProximaVisita(\n        new Date(ultimaVisita.data),\n      );\n      solicitacao.dados_complementares.proxima_visita_monitoramento =\n        proximaVisita;\n      resultado.proximaVisitaAtualizada = proximaVisita;\n    }\n\n    // Salvar as alterações\n    await this.solicitacaoRepository.save(solicitacao);\n\n    this.logger.log(\n      `Visita de monitoramento removida para solicitação ${solicitacaoId}, índice ${indiceVisita}`,\n    );\n\n    return resultado;\n  }\n\n  /**\n   * Tarefa agendada para executar diariamente e verificar solicitações que precisam de monitoramento\n   */\n  @Cron(CronExpression.EVERY_DAY_AT_MIDNIGHT)\n  async verificarMonitoramentoObrigatorio() {\n    this.logger.log(\n      'Iniciando verificação diária de monitoramento para Aluguel Social',\n    );\n\n    try {\n      // Obter solicitações que já ultrapassaram a data de monitoramento\n      const solicitacoesParaMonitoramento =\n        await this.getSolicitacoesParaMonitoramento();\n\n      this.logger.log(\n        `Encontradas ${solicitacoesParaMonitoramento.length} solicitações que precisam de monitoramento`,\n      );\n\n      // Enviar notificações para solicitações com visitas pendentes\n      for (const solicitacao of solicitacoesParaMonitoramento) {\n        const dataLimite = new Date();\n        this.notificacaoService.notificarMonitoramentoPendente(\n          solicitacao,\n          dataLimite,\n        );\n      }\n\n      // Obter solicitações com alertas de monitoramento próximo\n      const solicitacoesComAlerta =\n        await this.getSolicitacoesComAlertaMonitoramento();\n\n      this.logger.log(\n        `Encontradas ${solicitacoesComAlerta.length} solicitações com alerta de monitoramento próximo`,\n      );\n\n      // Enviar notificações para solicitações com visitas programadas em breve\n      for (const solicitacao of solicitacoesComAlerta) {\n        if (solicitacao.dados_complementares?.proxima_visita_monitoramento) {\n          const dataProximaVisita = new Date(\n            solicitacao.dados_complementares.proxima_visita_monitoramento,\n          );\n          const hoje = new Date();\n          const diasRestantes = Math.ceil(\n            (dataProximaVisita.getTime() - hoje.getTime()) /\n              (1000 * 60 * 60 * 24),\n          );\n\n          this.notificacaoService.notificarMonitoramentoProximo(\n            solicitacao,\n            dataProximaVisita,\n            diasRestantes,\n          );\n        }\n      }\n\n      this.logger.log('Verificação de monitoramento concluída com sucesso');\n    } catch (error) {\n      this.logger.error(\n        'Erro ao verificar monitoramento obrigatório',\n        error.stack,\n      );\n    }\n  }\n}\n"],"version":3}