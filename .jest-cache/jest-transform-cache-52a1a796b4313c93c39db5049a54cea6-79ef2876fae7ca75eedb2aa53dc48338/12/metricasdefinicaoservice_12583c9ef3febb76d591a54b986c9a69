17b5725f5b5df4da609aad59d1876cc8
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MetricasService_1;
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const event_emitter_1 = require("@nestjs/event-emitter");
const metrica_definicao_entity_1 = require("../../../entities/metrica-definicao.entity");
const metrica_configuracao_entity_1 = require("../../../entities/metrica-configuracao.entity");
const metrica_snapshot_entity_1 = require("../../../entities/metrica-snapshot.entity");
const metricas_cache_service_1 = require("./metricas-cache.service");
/**
 * Serviço responsável pelo gerenciamento de definições de métricas
 *
 * Este serviço gerencia o ciclo de vida das definições de métricas,
 * incluindo criação, atualização, consulta e remoção.
 */
let MetricasService = MetricasService_1 = class MetricasService {
    metricaDefinicaoRepository;
    metricaConfiguracaoRepository;
    metricaSnapshotRepository;
    cacheService;
    eventEmitter;
    logger = new common_1.Logger(MetricasService_1.name);
    constructor(metricaDefinicaoRepository, metricaConfiguracaoRepository, metricaSnapshotRepository, cacheService, eventEmitter) {
        this.metricaDefinicaoRepository = metricaDefinicaoRepository;
        this.metricaConfiguracaoRepository = metricaConfiguracaoRepository;
        this.metricaSnapshotRepository = metricaSnapshotRepository;
        this.cacheService = cacheService;
        this.eventEmitter = eventEmitter;
    }
    /**
     * Cria uma nova definição de métrica
     *
     * @param dto Dados da métrica a ser criada
     * @param usuarioId ID do usuário que está criando a métrica
     * @param usuarioNome Nome do usuário que está criando a métrica
     * @returns Métrica criada
     */
    async criarMetrica(dto, usuarioId, usuarioNome) {
        this.logger.log(`Criando métrica: ${dto.codigo}`);
        // Verificar se já existe métrica com o mesmo código
        const metricaExistente = await this.metricaDefinicaoRepository.findOne({
            where: { codigo: dto.codigo },
        });
        if (metricaExistente) {
            throw new common_1.BadRequestException(`Já existe uma métrica com o código '${dto.codigo}'`);
        }
        // Validar configurações específicas para cada tipo de métrica
        await this.validarDadosMetrica(dto);
        // Criar nova métrica
        const metrica = this.metricaDefinicaoRepository.create({
            ...dto,
            versao: 1,
            criado_por: `${usuarioNome} (${usuarioId})`,
            atualizado_por: `${usuarioNome} (${usuarioId})`,
        });
        // Salvar métrica
        const metricaSalva = await this.metricaDefinicaoRepository.save(metrica);
        // Emitir evento para notificar criação da métrica
        this.eventEmitter.emit('metrica.criada', {
            metrica_id: metricaSalva.id,
            metrica_codigo: metricaSalva.codigo,
            usuario_id: usuarioId,
        });
        this.logger.log(`Métrica criada com sucesso: ${metricaSalva.codigo} (ID: ${metricaSalva.id})`);
        return metricaSalva;
    }
    /**
     * Atualiza uma definição de métrica existente
     *
     * @param id ID da métrica a ser atualizada
     * @param dto Dados para atualização
     * @param usuarioId ID do usuário que está atualizando a métrica
     * @param usuarioNome Nome do usuário que está atualizando a métrica
     * @returns Métrica atualizada
     */
    async atualizarMetrica(id, dto, usuarioId, usuarioNome) {
        this.logger.log(`Atualizando métrica com ID: ${id}`);
        // Buscar métrica existente
        const metrica = await this.metricaDefinicaoRepository.findOne({
            where: { id },
        });
        if (!metrica) {
            throw new common_1.NotFoundException(`Métrica com ID ${id} não encontrada`);
        }
        // Verificar se está tentando alterar o tipo da métrica
        if (dto.tipo && dto.tipo !== metrica.tipo) {
            // Verificar se já existem snapshots para esta métrica
            const countSnapshots = await this.metricaSnapshotRepository.count({
                where: { definicao_id: id },
            });
            if (countSnapshots > 0) {
                throw new common_1.BadRequestException('Não é possível alterar o tipo de uma métrica que já possui valores coletados');
            }
        }
        // Combinar dados atuais com atualizações
        const metricaAtualizada = {
            ...metrica,
            ...dto,
            versao: metrica.versao + 1,
            atualizado_por: `${usuarioNome} (${usuarioId})`,
        };
        // Validar configurações específicas para cada tipo de métrica
        await this.validarDadosMetrica(metricaAtualizada);
        // Salvar métrica atualizada
        const resultado = await this.metricaDefinicaoRepository.save(metricaAtualizada);
        // Invalidar cache da métrica
        this.cacheService.invalidarCacheMetrica(id);
        // Emitir evento para notificar atualização da métrica
        this.eventEmitter.emit('metrica.atualizada', {
            metrica_id: resultado.id,
            metrica_codigo: resultado.codigo,
            usuario_id: usuarioId,
        });
        this.logger.log(`Métrica atualizada com sucesso: ${resultado.codigo} (ID: ${resultado.id})`);
        return resultado;
    }
    /**
     * Busca uma métrica pelo ID
     *
     * @param id ID da métrica
     * @returns Métrica encontrada ou null
     */
    async buscarMetricaPorId(id) {
        const metrica = await this.metricaDefinicaoRepository.findOne({
            where: { id },
            relations: ['configuracoes'],
        });
        if (!metrica) {
            throw new common_1.NotFoundException(`Métrica com ID ${id} não encontrada`);
        }
        return metrica;
    }
    /**
     * Busca uma métrica pelo código
     *
     * @param codigo Código da métrica
     * @returns Métrica encontrada ou null
     */
    async buscarMetricaPorCodigo(codigo) {
        return this.cacheService.obterMetrica(codigo);
    }
    /**
     * Lista métricas com filtros e paginação
     *
     * @param filtros Filtros para busca
     * @returns Lista paginada de métricas
     */
    async listarMetricas(filtros) {
        const pagina = filtros.pagina || 1;
        const limite = filtros.limite || 10;
        const skip = (pagina - 1) * limite;
        // Construir condições de busca
        const where = {};
        if (filtros.codigo) {
            where.codigo = (0, typeorm_2.Like)(`%${filtros.codigo}%`);
        }
        if (filtros.nome) {
            where.nome = (0, typeorm_2.Like)(`%${filtros.nome}%`);
        }
        if (filtros.categoria) {
            where.categoria = filtros.categoria;
        }
        if (filtros.tipo) {
            where.tipo = filtros.tipo;
        }
        if (filtros.ativa !== undefined) {
            where.ativa = filtros.ativa;
        }
        if (filtros.tag) {
            // Filtrar por tag (equivalente a "tags LIKE '%tag%'")
            // Implementação simplificada, em um cenário real seria melhor usar uma abordagem específica do banco de dados
            where.tags = (0, typeorm_2.Like)(`%${filtros.tag}%`);
        }
        // Buscar total de registros
        const total = await this.metricaDefinicaoRepository.count({ where });
        // Buscar métricas
        const items = await this.metricaDefinicaoRepository.find({
            where,
            order: {
                codigo: 'ASC',
            },
            skip,
            take: limite,
        });
        return { items, total };
    }
    /**
     * Remove uma métrica (exclusão lógica)
     *
     * @param id ID da métrica a ser removida
     */
    async removerMetrica(id) {
        this.logger.log(`Removendo métrica com ID: ${id}`);
        // Buscar métrica existente
        const metrica = await this.metricaDefinicaoRepository.findOne({
            where: { id },
        });
        if (!metrica) {
            throw new common_1.NotFoundException(`Métrica com ID ${id} não encontrada`);
        }
        // Inativar métrica (exclusão lógica)
        await this.metricaDefinicaoRepository.update(id, {
            ativa: false,
        });
        // Invalidar cache da métrica
        this.cacheService.invalidarCacheMetrica(id);
        // Emitir evento para notificar remoção da métrica
        this.eventEmitter.emit('metrica.removida', {
            metrica_id: id,
            metrica_codigo: metrica.codigo,
        });
        this.logger.log(`Métrica removida com sucesso: ${metrica.codigo} (ID: ${id})`);
    }
    /**
     * Cria configuração para uma métrica
     *
     * @param dto Dados da configuração
     * @param usuarioId ID do usuário que está criando a configuração
     * @param usuarioNome Nome do usuário que está criando a configuração
     * @returns Configuração criada
     */
    async criarConfiguracao(dto, usuarioId, usuarioNome) {
        this.logger.log(`Criando configuração para métrica: ${dto.metrica_id}`);
        // Verificar se a métrica existe
        const metrica = await this.metricaDefinicaoRepository.findOne({
            where: { id: dto.metrica_id },
        });
        if (!metrica) {
            throw new common_1.NotFoundException(`Métrica com ID ${dto.metrica_id} não encontrada`);
        }
        // Verificar se já existe configuração para esta métrica
        const configExistente = await this.metricaConfiguracaoRepository.findOne({
            where: { metrica_id: dto.metrica_id },
        });
        if (configExistente) {
            throw new common_1.BadRequestException(`Já existe uma configuração para a métrica ${metrica.codigo}. Use a atualização.`);
        }
        // Validar configurações específicas para cada tipo de agendamento
        await this.validarDadosConfiguracao(dto);
        // Criar nova configuração
        const config = this.metricaConfiguracaoRepository.create({
            ...dto,
            criado_por: `${usuarioNome} (${usuarioId})`,
            atualizado_por: `${usuarioNome} (${usuarioId})`,
        });
        // Salvar configuração
        const configSalva = await this.metricaConfiguracaoRepository.save(config);
        // Emitir evento para notificar criação da configuração
        this.eventEmitter.emit('metrica.configuracao.criada', {
            metrica_id: dto.metrica_id,
            configuracao_id: configSalva.id,
            usuario_id: usuarioId,
        });
        this.logger.log(`Configuração criada com sucesso para métrica: ${metrica.codigo}`);
        return configSalva;
    }
    /**
     * Atualiza configuração de uma métrica
     *
     * @param id ID da configuração a ser atualizada
     * @param dto Dados para atualização
     * @param usuarioId ID do usuário que está atualizando a configuração
     * @param usuarioNome Nome do usuário que está atualizando a configuração
     * @returns Configuração atualizada
     */
    async atualizarConfiguracao(id, dto, usuarioId, usuarioNome) {
        this.logger.log(`Atualizando configuração com ID: ${id}`);
        // Buscar configuração existente
        const config = await this.metricaConfiguracaoRepository.findOne({
            where: { id },
            relations: ['metrica'],
        });
        if (!config) {
            throw new common_1.NotFoundException(`Configuração com ID ${id} não encontrada`);
        }
        // Combinar dados atuais com atualizações
        const configAtualizada = {
            ...config,
            ...dto,
            atualizado_por: `${usuarioNome} (${usuarioId})`,
        };
        // Validar configurações específicas para cada tipo de agendamento
        await this.validarDadosConfiguracao(configAtualizada);
        // Salvar configuração atualizada
        const resultado = await this.metricaConfiguracaoRepository.save(configAtualizada);
        // Invalidar cache da métrica
        this.cacheService.invalidarCacheMetrica(config.metrica_id);
        // Emitir evento para notificar atualização da configuração
        this.eventEmitter.emit('metrica.configuracao.atualizada', {
            metrica_id: config.metrica_id,
            configuracao_id: resultado.id,
            usuario_id: usuarioId,
        });
        // Carregar a entidade metrica para acessar suas propriedades, se disponível
        let codigoMetrica = config.metrica_id;
        if (config.metrica) {
            const metrica = await config.metrica;
            codigoMetrica = metrica.codigo || config.metrica_id;
        }
        this.logger.log(`Configuração atualizada com sucesso para métrica: ${codigoMetrica}`);
        return resultado;
    }
    /**
     * Busca configuração de uma métrica
     *
     * @param metricaId ID da métrica
     * @returns Configuração encontrada ou null
     */
    async buscarConfiguracaoPorMetrica(metricaId) {
        const config = await this.metricaConfiguracaoRepository.findOne({
            where: { metrica_id: metricaId },
            relations: ['metrica'],
        });
        if (!config) {
            throw new common_1.NotFoundException(`Configuração para métrica ${metricaId} não encontrada`);
        }
        return config;
    }
    /**
     * Valida dados específicos para cada tipo de métrica
     *
     * @param metrica Dados da métrica a ser validada
     */
    async validarDadosMetrica(metrica) {
        // Validar formato do código (snake_case)
        const codigoRegex = /^[a-z][a-z0-9_]*$/;
        if (!codigoRegex.test(metrica.codigo)) {
            throw new common_1.BadRequestException('Código da métrica deve estar em formato snake_case (apenas letras minúsculas, números e underscore)');
        }
        switch (metrica.tipo) {
            case metrica_definicao_entity_1.TipoMetrica.CONTAGEM:
            case metrica_definicao_entity_1.TipoMetrica.SOMA:
            case metrica_definicao_entity_1.TipoMetrica.MEDIA:
            case metrica_definicao_entity_1.TipoMetrica.MINIMO:
            case metrica_definicao_entity_1.TipoMetrica.MAXIMO:
            case metrica_definicao_entity_1.TipoMetrica.CARDINALIDADE:
                // Validar consulta SQL
                if (!metrica.sql_consulta) {
                    throw new common_1.BadRequestException(`Métricas do tipo ${metrica.tipo} requerem uma consulta SQL`);
                }
                break;
            case metrica_definicao_entity_1.TipoMetrica.PERCENTIL:
                // Validar consulta SQL e parâmetro de percentil
                if (!metrica.sql_consulta) {
                    throw new common_1.BadRequestException('Métricas do tipo PERCENTIL requerem uma consulta SQL');
                }
                if (!metrica.parametros_especificos?.percentil) {
                    throw new common_1.BadRequestException('Métricas do tipo PERCENTIL requerem o parâmetro "percentil" (ex: 95)');
                }
                const percentil = Number(metrica.parametros_especificos.percentil);
                if (isNaN(percentil) || percentil < 0 || percentil > 100) {
                    throw new common_1.BadRequestException('O valor do percentil deve ser um número entre 0 e 100');
                }
                break;
            case metrica_definicao_entity_1.TipoMetrica.COMPOSTA:
                // Validar fórmula e métricas dependentes
                if (!metrica.formula_calculo) {
                    throw new common_1.BadRequestException('Métricas do tipo COMPOSTA requerem uma fórmula de cálculo');
                }
                if (!metrica.metricas_dependentes ||
                    metrica.metricas_dependentes.length === 0) {
                    throw new common_1.BadRequestException('Métricas do tipo COMPOSTA requerem a definição de métricas dependentes');
                }
                // Verificar se as métricas dependentes existem
                for (const codigoDependente of metrica.metricas_dependentes) {
                    // Ignorar a própria métrica sendo editada
                    if (codigoDependente === metrica.codigo) {
                        continue;
                    }
                    const dependente = await this.metricaDefinicaoRepository.findOne({
                        where: { codigo: codigoDependente },
                    });
                    if (!dependente) {
                        throw new common_1.BadRequestException(`Métrica dependente '${codigoDependente}' não encontrada`);
                    }
                }
                break;
            case metrica_definicao_entity_1.TipoMetrica.TAXA_VARIACAO:
                // Validar consulta SQL
                if (!metrica.sql_consulta) {
                    throw new common_1.BadRequestException('Métricas do tipo TAXA_VARIACAO requerem uma consulta SQL');
                }
                break;
            default:
                throw new common_1.BadRequestException(`Tipo de métrica não suportado: ${metrica.tipo}`);
        }
    }
    /**
     * Valida dados específicos para cada tipo de agendamento
     *
     * @param config Dados da configuração a ser validada
     */
    async validarDadosConfiguracao(config) {
        if (config.tipo_agendamento === 'cron' && !config.expressao_cron) {
            throw new common_1.BadRequestException('Agendamento do tipo CRON requer a definição de uma expressão cron');
        }
        if (config.tipo_agendamento === 'evento' && !config.nome_evento) {
            throw new common_1.BadRequestException('Agendamento do tipo EVENTO requer a definição do nome do evento');
        }
        if (config.estrategia_amostragem !== 'completa' &&
            !config.tamanho_amostra) {
            throw new common_1.BadRequestException(`Estratégia de amostragem '${config.estrategia_amostragem}' requer a definição do tamanho da amostra`);
        }
        // Validar alertas
        if (config.alertas && config.alertas.length > 0) {
            for (const alerta of config.alertas) {
                if (!alerta.tipo) {
                    throw new common_1.BadRequestException('Cada alerta deve ter um tipo definido');
                }
                if (alerta.valor === undefined || alerta.valor === null) {
                    throw new common_1.BadRequestException(`Alerta do tipo '${alerta.tipo}' requer um valor de referência`);
                }
                if (!alerta.severidade) {
                    throw new common_1.BadRequestException(`Alerta do tipo '${alerta.tipo}' requer uma severidade definida`);
                }
            }
        }
    }
};
exports.MetricasService = MetricasService;
exports.MetricasService = MetricasService = MetricasService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(metrica_definicao_entity_1.MetricaDefinicao)),
    __param(1, (0, typeorm_1.InjectRepository)(metrica_configuracao_entity_1.MetricaConfiguracao)),
    __param(2, (0, typeorm_1.InjectRepository)(metrica_snapshot_entity_1.MetricaSnapshot)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof metricas_cache_service_1.MetricasCacheService !== "undefined" && metricas_cache_service_1.MetricasCacheService) === "function" ? _d : Object, typeof (_e = typeof event_emitter_1.EventEmitter2 !== "undefined" && event_emitter_1.EventEmitter2) === "function" ? _e : Object])
], MetricasService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,