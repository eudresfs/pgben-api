{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\dtos\\base.dto.ts","mappings":";;;AAAA;;;;;GAKG;AACH,MAAsB,OAAO;IAC3B;;;;;;OAMG;IACH,MAAM,CAAC,eAAe,CAAI,IAAY,EAAE,GAAgB;QACtD,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;QAE3B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACvB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC;gBACpD,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,eAAe,CAAI,QAAW;QACnC,MAAM,WAAW,GAAwB,EAAE,CAAC;QAE5C,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;YAC3B,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC;gBACxD,WAAW,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CAAC,eAAwB;QAC9B,0EAA0E;QAC1E,6DAA6D;IAC/D,CAAC;CACF;AAjDD,0BAiDC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\dtos\\base.dto.ts"],"sourcesContent":["/**\n * DTO Base\n *\n * Classe base para todos os DTOs da aplicação, fornecendo métodos utilitários\n * para transformação e validação de dados.\n */\nexport abstract class BaseDto {\n  /**\n   * Transforma um objeto plano em uma instância da classe DTO\n   *\n   * @param data Objeto plano com os dados\n   * @param dto Classe DTO para transformação\n   * @returns Instância da classe DTO\n   */\n  static plainToInstance<T>(data: object, dto: new () => T): T {\n    const instance = new dto();\n\n    for (const key in data) {\n      if (Object.prototype.hasOwnProperty.call(data, key)) {\n        instance[key] = data[key];\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   * Transforma uma instância da classe DTO em um objeto plano\n   *\n   * @param instance Instância da classe DTO\n   * @returns Objeto plano com os dados\n   */\n  static instanceToPlain<T>(instance: T): Record<string, any> {\n    const plainObject: Record<string, any> = {};\n\n    for (const key in instance) {\n      if (Object.prototype.hasOwnProperty.call(instance, key)) {\n        plainObject[key] = instance[key];\n      }\n    }\n\n    return plainObject;\n  }\n\n  /**\n   * Valida os dados do DTO de acordo com as regras definidas pelos decorators\n   * Este método pode ser sobrescrito pelas classes filhas para adicionar validações específicas\n   *\n   * @param validationGroup Grupo de validação opcional\n   * @returns Void se a validação for bem-sucedida, ou lança uma exceção em caso de erro\n   */\n  validar(validationGroup?: string): void {\n    // Este método será implementado pelas classes filhas ou mockado em testes\n    // Por padrão, não faz nada, mas serve como ponto de extensão\n  }\n}\n"],"version":3}