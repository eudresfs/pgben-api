448703c310c0ac201058ee900e731f27
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefreshToken = void 0;
// src/auth/entities/refresh-token.entity.ts
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const usuario_entity_1 = require("./usuario.entity");
let RefreshToken = class RefreshToken {
    id;
    usuario_id;
    token;
    expires_at;
    revoked;
    revoked_at;
    revokedByIp;
    replacedByToken;
    created_at;
    updated_at;
    usuario;
    // Métodos utilitários
    /**
     * Verifica se o token está expirado
     */
    isExpired() {
        return new Date() > this.expires_at;
    }
    /**
     * Verifica se o token está ativo (não revogado e não expirado)
     */
    isActive() {
        return !this.revoked && !this.isExpired();
    }
    /**
     * Revoga o token
     */
    revoke(ip, replacedByToken) {
        this.revoked = true;
        this.revoked_at = new Date();
        if (ip) {
            this.revokedByIp = ip;
        }
        if (replacedByToken) {
            this.replacedByToken = replacedByToken;
        }
    }
    /**
     * Verifica se o token foi revogado
     */
    isRevoked() {
        return this.revoked;
    }
    /**
     * Calcula o tempo restante até a expiração em milissegundos
     */
    getTimeToExpiration() {
        const now = new Date().getTime();
        const expiration = this.expires_at.getTime();
        return Math.max(0, expiration - now);
    }
    /**
     * Verifica se o token expira em breve (próximos X minutos)
     */
    isExpiringWithin(minutes) {
        const timeToExpiration = this.getTimeToExpiration();
        const minutesInMs = minutes * 60 * 1000;
        return timeToExpiration <= minutesInMs && timeToExpiration > 0;
    }
    /**
     * Obtém informações de status do token
     */
    getStatus() {
        return {
            isActive: this.isActive(),
            isExpired: this.isExpired(),
            isRevoked: this.isRevoked(),
            timeToExpiration: this.getTimeToExpiration(),
        };
    }
    /**
     * Verifica se o token pertence a um usuário específico
     */
    belongsToUser(userId) {
        return this.usuario_id === userId;
    }
    /**
     * Gera uma chave única para o token
     */
    getUniqueKey() {
        return `refresh_token_${this.usuario_id}_${this.id}`;
    }
    /**
     * Verifica se o token foi criado recentemente (últimas X horas)
     */
    isCriadoRecentemente(horas = 1) {
        if (!this.created_at)
            return false;
        const agora = new Date();
        const horasAtras = new Date(agora.getTime() - horas * 60 * 60 * 1000);
        return this.created_at > horasAtras;
    }
    /**
     * Calcula a idade do token em horas
     */
    getIdadeEmHoras() {
        if (!this.created_at)
            return 0;
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        const diffHours = Math.floor(diffTime / (1000 * 60 * 60));
        return diffHours;
    }
    /**
     * Calcula quantos minutos restam até a expiração
     */
    getMinutosAteExpiracao() {
        const timeToExpiration = this.getTimeToExpiration();
        return Math.floor(timeToExpiration / (1000 * 60));
    }
    /**
     * Verifica se o token foi substituído por outro
     */
    foiSubstituido() {
        return !!this.replacedByToken;
    }
    /**
     * Verifica se o token foi revogado por IP específico
     */
    foiRevogadoPorIp(ip) {
        return this.isRevoked() && this.revokedByIp === ip;
    }
    /**
     * Obtém informações detalhadas do token
     */
    getDetalhes() {
        return {
            id: this.id,
            usuario_id: this.usuario_id,
            ativo: this.isActive(),
            expirado: this.isExpired(),
            revogado: this.isRevoked(),
            criadoEm: this.created_at,
            expiraEm: this.expires_at,
            minutosRestantes: this.getMinutosAteExpiracao(),
            idadeEmHoras: this.getIdadeEmHoras(),
            foiSubstituido: this.foiSubstituido()
        };
    }
    /**
     * Verifica se o token está em estado válido
     */
    isValido() {
        return (!!this.token &&
            !!this.usuario_id &&
            !!this.expires_at &&
            this.expires_at > new Date());
    }
    /**
     * Verifica se o token pode ser renovado
     */
    podeSerRenovado() {
        return this.isActive() && !this.isExpiringWithin(5); // Não renova se expira em menos de 5 minutos
    }
    /**
     * Obtém o tempo de vida útil do token em horas
     */
    getTempoVidaUtil() {
        if (!this.created_at || !this.expires_at)
            return 0;
        const diffTime = this.expires_at.getTime() - this.created_at.getTime();
        return Math.floor(diffTime / (1000 * 60 * 60));
    }
    /**
     * Verifica se o token está próximo da expiração (últimos 10% do tempo de vida)
     */
    isProximoExpiracao() {
        const tempoVidaUtil = this.getTempoVidaUtil();
        const tempoRestante = this.getMinutosAteExpiracao() / 60; // Converter para horas
        return tempoRestante <= (tempoVidaUtil * 0.1);
    }
    /**
     * Formata a data de expiração para exibição
     */
    getExpiracaoFormatada() {
        return this.expires_at.toLocaleString('pt-BR', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }
    /**
     * Obtém um resumo do status do token
     */
    getStatusResumo() {
        if (this.isRevoked()) {
            return `Revogado em ${this.revoked_at?.toLocaleString('pt-BR')}`;
        }
        if (this.isExpired()) {
            return `Expirado em ${this.getExpiracaoFormatada()}`;
        }
        if (this.isProximoExpiracao()) {
            return `Expira em ${this.getMinutosAteExpiracao()} minutos`;
        }
        return 'Ativo';
    }
};
exports.RefreshToken = RefreshToken;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], RefreshToken.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'usuario_id', type: 'uuid', nullable: false }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do usuário é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário inválido' }),
    __metadata("design:type", String)
], RefreshToken.prototype, "usuario_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 500, unique: true }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Token é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Token deve ser uma string' }),
    (0, class_validator_1.Length)(10, 500, { message: 'Token deve ter entre 10 e 500 caracteres' }),
    __metadata("design:type", String)
], RefreshToken.prototype, "token", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'expires_at', type: 'timestamp with time zone' }),
    __metadata("design:type", typeof (_a = typeof Date !== "undefined" && Date) === "function" ? _a : Object)
], RefreshToken.prototype, "expires_at", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'boolean', default: false }),
    (0, class_validator_1.IsBoolean)({ message: 'Revoked deve ser um boolean' }),
    __metadata("design:type", Boolean)
], RefreshToken.prototype, "revoked", void 0);
__decorate([
    (0, typeorm_1.Column)({
        name: 'revoked_at',
        type: 'timestamp with time zone',
        nullable: true,
    }),
    __metadata("design:type", Object)
], RefreshToken.prototype, "revoked_at", void 0);
__decorate([
    (0, typeorm_1.Column)({
        name: 'revoked_by_ip',
        type: 'varchar',
        length: 45,
        nullable: true,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'IP deve ser uma string' }),
    (0, class_validator_1.Length)(7, 45, { message: 'IP deve ter entre 7 e 45 caracteres' }),
    __metadata("design:type", Object)
], RefreshToken.prototype, "revokedByIp", void 0);
__decorate([
    (0, typeorm_1.Column)({
        name: 'replaced_by_token',
        type: 'varchar',
        length: 500,
        nullable: true,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Token de substituição deve ser uma string' }),
    (0, class_validator_1.Length)(10, 500, { message: 'Token de substituição deve ter entre 10 e 500 caracteres' }),
    __metadata("design:type", Object)
], RefreshToken.prototype, "replacedByToken", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at', type: 'timestamp with time zone' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], RefreshToken.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at', type: 'timestamp with time zone' }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], RefreshToken.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, (usuario) => usuario.refreshTokens, {
        onDelete: 'CASCADE',
    }),
    (0, typeorm_1.JoinColumn)({ name: 'usuario_id', referencedColumnName: 'id' }),
    __metadata("design:type", typeof (_e = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _e : Object)
], RefreshToken.prototype, "usuario", void 0);
exports.RefreshToken = RefreshToken = __decorate([
    (0, typeorm_1.Entity)('refresh_tokens'),
    (0, typeorm_1.Index)(['usuario_id']),
    (0, typeorm_1.Index)(['token'], { unique: true }),
    (0, typeorm_1.Index)(['expires_at']),
    (0, typeorm_1.Index)(['revoked']),
    (0, typeorm_1.Index)(['usuario_id', 'revoked'])
], RefreshToken);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,