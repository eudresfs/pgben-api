59f8c4d97a1920b959f6304c8434bfed
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const supertest_1 = __importDefault(require("supertest"));
const app_module_1 = require("../../src/app.module");
const typeorm_1 = require("@nestjs/typeorm");
const documento_entity_1 = require("../../src/modules/documento/entities/documento.entity");
const requisito_documento_entity_1 = require("../../src/modules/beneficio/entities/requisito-documento.entity");
const jwt_1 = require("@nestjs/jwt");
const minio_service_1 = require("../../src/shared/services/minio.service");
const solicitacao_entity_1 = require("../../src/modules/solicitacao/entities/solicitacao.entity");
describe('Documento (Integração)', () => {
    let app;
    let documentoRepository;
    let solicitacaoRepository;
    let jwtService;
    let minioService;
    let authToken;
    // Mock do MinioService para evitar chamadas reais ao MinIO
    const mockMinioService = {
        uploadArquivo: jest.fn(),
        downloadArquivo: jest.fn(),
        removerArquivo: jest.fn(),
        gerarUrlPresigned: jest.fn(),
    };
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [app_module_1.AppModule],
        })
            .overrideProvider(minio_service_1.MinioService)
            .useValue(mockMinioService)
            .compile();
        app = moduleFixture.createNestApplication();
        await app.init();
        documentoRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(documento_entity_1.Documento));
        solicitacaoRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(solicitacao_entity_1.Solicitacao));
        jwtService = moduleFixture.get(jwt_1.JwtService);
        // Gerar token de autenticação para testes
        authToken = jwtService.sign({
            id: 'test-user-id',
            nome: 'Usuário de Teste',
            email: 'teste@exemplo.com',
            roles: ['admin'],
        });
    });
    beforeEach(async () => {
        // Limpar documentos antes de cada teste
        const documentos = await documentoRepository.find();
        if (documentos.length > 0) {
            await documentoRepository.remove(documentos);
        }
        // Criar solicitações de teste usando o método create para evitar problemas com campos especiais
        const solicitacao1 = solicitacaoRepository.create({
            id: '550e8400-e29b-41d4-a716-446655440000',
            protocolo: 'SOL202400001',
            status: solicitacao_entity_1.StatusSolicitacao.PENDENTE,
            beneficiario_id: '550e8400-e29b-41d4-a716-446655440002',
            tipo_beneficio_id: '550e8400-e29b-41d4-a716-446655440003',
            unidade_id: '550e8400-e29b-41d4-a716-446655440004',
            tecnico_id: '550e8400-e29b-41d4-a716-446655440005',
            data_abertura: new Date(),
            observacoes: 'Teste 1',
        });
        await solicitacaoRepository.save(solicitacao1);
        const solicitacao2 = solicitacaoRepository.create({
            id: '550e8400-e29b-41d4-a716-446655440001',
            protocolo: 'SOL202400002',
            status: solicitacao_entity_1.StatusSolicitacao.EM_ANALISE,
            beneficiario_id: '550e8400-e29b-41d4-a716-446655440002',
            tipo_beneficio_id: '550e8400-e29b-41d4-a716-446655440003',
            unidade_id: '550e8400-e29b-41d4-a716-446655440004',
            tecnico_id: '550e8400-e29b-41d4-a716-446655440005',
            data_abertura: new Date(),
            observacoes: 'Teste 2',
        });
        await solicitacaoRepository.save(solicitacao2);
        jest.clearAllMocks();
    });
    afterAll(async () => {
        await app.close();
    });
    describe('Upload de documentos', () => {
        it('deve permitir upload de documento não sensível', async () => {
            // Arrange
            const mockFile = Buffer.from('conteúdo do arquivo de teste');
            const mockUploadResult = {
                nomeArquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-123.pdf',
                tamanho: mockFile.length,
                hash: 'hash-do-arquivo',
                metadados: {
                    criptografado: false,
                },
                etag: 'etag-do-arquivo',
            };
            mockMinioService.uploadArquivo.mockResolvedValue(mockUploadResult);
            // Act
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/documentos/upload')
                .set('Authorization', `Bearer ${authToken}`)
                .field('solicitacao_id', '550e8400-e29b-41d4-a716-446655440000')
                .field('tipo_documento', 'comprovante')
                .field('descricao', 'Comprovante de residência')
                .field('sensivel', 'false')
                .attach('arquivo', mockFile, 'documento.pdf')
                .expect(201);
            // Assert
            expect(mockMinioService.uploadArquivo).toHaveBeenCalledWith(expect.any(Buffer), 'documento.pdf', '550e8400-e29b-41d4-a716-446655440000', 'comprovante', false);
            expect(response.body).toEqual(expect.objectContaining({
                nome_arquivo: mockUploadResult.nomeArquivo,
                tamanho: mockUploadResult.tamanho,
                hash: mockUploadResult.hash,
                metadados: {
                    criptografado: false,
                },
            }));
            const savedDocumento = await documentoRepository.findOne({
                where: { nome_arquivo: mockUploadResult.nomeArquivo },
            });
            expect(savedDocumento).toBeDefined();
            expect(savedDocumento.metadados.criptografado).toBe(false);
        });
        it('deve permitir upload de documento sensível com criptografia', async () => {
            // Arrange
            const mockFile = Buffer.from('conteúdo do arquivo sensível');
            const mockUploadResult = {
                nomeArquivo: '550e8400-e29b-41d4-a716-446655440000/laudo/documento-123.pdf',
                tamanho: mockFile.length,
                etag: 'etag-do-arquivo-sensivel',
                metadados: {
                    hash: 'hash-do-arquivo-sensivel',
                    criptografado: true,
                    criptografia: {
                        iv: 'iv-base64',
                        authTag: 'auth-tag-base64',
                        algoritmo: 'aes-256-gcm',
                    },
                },
            };
            mockMinioService.uploadArquivo.mockResolvedValue(mockUploadResult);
            // Act
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .post('/api/documentos/upload')
                .set('Authorization', `Bearer ${authToken}`)
                .field('solicitacao_id', '550e8400-e29b-41d4-a716-446655440000')
                .field('tipo_documento', 'laudo')
                .field('descricao', 'Laudo médico')
                .field('sensivel', 'true')
                .attach('arquivo', mockFile, 'laudo.pdf')
                .expect(201);
            // Assert
            expect(mockMinioService.uploadArquivo).toHaveBeenCalledWith(expect.any(Buffer), 'laudo.pdf', '550e8400-e29b-41d4-a716-446655440000', 'laudo', true);
            expect(response.body).toEqual(expect.objectContaining({
                nome_arquivo: mockUploadResult.nomeArquivo,
                tamanho: mockUploadResult.tamanho,
                metadados: expect.objectContaining({
                    hash: mockUploadResult.metadados.hash,
                    criptografado: true,
                    criptografia: expect.objectContaining({
                        iv: mockUploadResult.metadados.criptografia.iv,
                        authTag: mockUploadResult.metadados.criptografia.authTag,
                    }),
                }),
            }));
            const savedDocumento = await documentoRepository.findOne({
                where: { nome_arquivo: mockUploadResult.nomeArquivo },
            });
            expect(savedDocumento).toBeDefined();
            expect(savedDocumento.metadados.criptografado).toBe(true);
            expect(savedDocumento.metadados.criptografia?.iv).toBe(mockUploadResult.metadados.criptografia.iv);
            expect(savedDocumento.metadados.criptografia?.authTag).toBe(mockUploadResult.metadados.criptografia.authTag);
        });
    });
    describe('Download de documentos', () => {
        it('deve permitir download de documento não sensível', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-123.pdf',
                nome_original: 'comprovante.pdf',
                caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-123.pdf',
                tipo: requisito_documento_entity_1.TipoDocumento.COMPROVANTE_RESIDENCIA,
                descricao: 'Comprovante de residência',
                solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',
                tamanho: 1024,
                mimetype: 'application/pdf',
                data_upload: new Date(),
                metadados: {
                    hash: 'hash-do-arquivo',
                    criptografado: false,
                },
                usuario_upload: 'test-user-id',
            });
            await documentoRepository.save(documento);
            const mockDownloadResult = {
                buffer: Buffer.from('conteúdo do arquivo de teste'),
                nomeOriginal: 'comprovante.pdf',
                tamanho: 1024,
                metadados: {
                    criptografado: false,
                },
            };
            mockMinioService.downloadArquivo.mockResolvedValue(mockDownloadResult);
            // Act
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .get(`/api/documentos/download/${documento.id}`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            expect(mockMinioService.downloadArquivo).toHaveBeenCalledWith(documento.nome_arquivo);
            expect(response.headers['content-disposition']).toContain('attachment; filename="comprovante.pdf"');
            expect(response.headers['content-type']).toContain('application/pdf');
            expect(response.body).toEqual(expect.any(Buffer));
        });
        it('deve permitir download de documento sensível criptografado', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/laudo/documento-123.pdf',
                nome_original: 'laudo.pdf',
                caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/laudo/documento-123.pdf',
                tipo: requisito_documento_entity_1.TipoDocumento.DECLARACAO_MEDICA,
                descricao: 'Laudo médico',
                solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',
                tamanho: 1024,
                mimetype: 'application/pdf',
                data_upload: new Date(),
                metadados: {
                    hash: 'hash-do-arquivo-sensivel',
                    criptografado: true,
                    criptografia: {
                        iv: 'iv-base64',
                        authTag: 'auth-tag-base64',
                        algoritmo: 'aes-256-gcm',
                    },
                },
                usuario_upload: 'test-user-id',
            });
            await documentoRepository.save(documento);
            const mockDownloadResult = {
                buffer: Buffer.from('conteúdo descriptografado do arquivo sensível'),
                nomeOriginal: 'laudo.pdf',
                tamanho: 1024,
                metadados: {
                    criptografado: true,
                },
            };
            mockMinioService.downloadArquivo.mockResolvedValue(mockDownloadResult);
            // Act
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .get(`/api/documentos/download/${documento.id}`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            expect(mockMinioService.downloadArquivo).toHaveBeenCalledWith(documento.nome_arquivo);
            expect(response.headers['content-disposition']).toContain('attachment; filename="laudo.pdf"');
            expect(response.headers['content-type']).toContain('application/pdf');
            expect(response.body).toEqual(expect.any(Buffer));
        });
    });
    describe('Listagem de documentos', () => {
        it('deve listar documentos por solicitação', async () => {
            // Arrange
            const documentos = [
                documentoRepository.create({
                    nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',
                    nome_original: 'comprovante.pdf',
                    caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',
                    tipo: requisito_documento_entity_1.TipoDocumento.COMPROVANTE_RESIDENCIA,
                    descricao: 'Comprovante de residência',
                    solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',
                    tamanho: 1024,
                    mimetype: 'application/pdf',
                    data_upload: new Date(),
                    metadados: {
                        hash: 'hash-1',
                        criptografado: false,
                    },
                    usuario_upload: 'test-user-id',
                }),
                documentoRepository.create({
                    nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/laudo/documento-2.pdf',
                    nome_original: 'laudo.pdf',
                    caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/laudo/documento-2.pdf',
                    tipo: requisito_documento_entity_1.TipoDocumento.DECLARACAO_MEDICA,
                    descricao: 'Laudo médico',
                    solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',
                    tamanho: 2048,
                    mimetype: 'application/pdf',
                    data_upload: new Date(),
                    metadados: {
                        hash: 'hash-2',
                        criptografado: true,
                        criptografia: {
                            iv: 'iv-base64',
                            authTag: 'auth-tag-base64',
                            algoritmo: 'aes-256-gcm',
                        },
                    },
                    usuario_upload: 'test-user-id',
                }),
            ];
            await documentoRepository.save(documentos);
            // Act
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .get('/api/documentos')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ solicitacao_id: '550e8400-e29b-41d4-a716-446655440000' })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(2);
            expect(response.body.data[0].solicitacao_id).toBe('550e8400-e29b-41d4-a716-446655440000');
            expect(response.body.data[1].solicitacao_id).toBe('550e8400-e29b-41d4-a716-446655440000');
        });
        it('deve listar documentos por tipo', async () => {
            // Arrange
            const documentos = [
                documentoRepository.create({
                    nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',
                    nome_original: 'comprovante.pdf',
                    caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',
                    tipo: requisito_documento_entity_1.TipoDocumento.COMPROVANTE_RESIDENCIA,
                    descricao: 'Comprovante de residência',
                    solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',
                    tamanho: 1024,
                    mimetype: 'application/pdf',
                    data_upload: new Date(),
                    metadados: {
                        hash: 'hash-1',
                        criptografado: false,
                    },
                    usuario_upload: 'test-user-id',
                }),
                documentoRepository.create({
                    nome_arquivo: '550e8400-e29b-41d4-a716-446655440001/comprovante/documento-3.pdf',
                    nome_original: 'comprovante2.pdf',
                    caminho: '/uploads/550e8400-e29b-41d4-a716-446655440001/comprovante/documento-3.pdf',
                    tipo: requisito_documento_entity_1.TipoDocumento.COMPROVANTE_RENDA,
                    descricao: 'Comprovante de renda',
                    solicitacao_id: '550e8400-e29b-41d4-a716-446655440001',
                    tamanho: 1536,
                    mimetype: 'application/pdf',
                    data_upload: new Date(),
                    metadados: {
                        hash: 'hash-3',
                        criptografado: false,
                    },
                    usuario_upload: 'test-user-id',
                }),
            ];
            await documentoRepository.save(documentos);
            // Act
            const response = await (0, supertest_1.default)(app.getHttpServer())
                .get('/api/documentos')
                .set('Authorization', `Bearer ${authToken}`)
                .query({ tipo_documento: 'comprovante' })
                .expect(200);
            // Assert
            expect(response.body.data).toHaveLength(2);
            expect(response.body.data[0].tipo).toBe(requisito_documento_entity_1.TipoDocumento.COMPROVANTE_RESIDENCIA);
            expect(response.body.data[1].tipo).toBe(requisito_documento_entity_1.TipoDocumento.COMPROVANTE_RENDA);
        });
    });
    describe('Exclusão de documentos', () => {
        it('deve permitir excluir um documento', async () => {
            // Arrange
            const documento = documentoRepository.create({
                nome_arquivo: '550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',
                nome_original: 'comprovante.pdf',
                caminho: '/uploads/550e8400-e29b-41d4-a716-446655440000/comprovante/documento-1.pdf',
                tipo: requisito_documento_entity_1.TipoDocumento.COMPROVANTE_RESIDENCIA,
                descricao: 'Comprovante de residência',
                solicitacao_id: '550e8400-e29b-41d4-a716-446655440000',
                tamanho: 1024,
                mimetype: 'application/pdf',
                data_upload: new Date(),
                metadados: {
                    hash: 'hash-1',
                    criptografado: false,
                },
                usuario_upload: 'test-user-id',
            });
            await documentoRepository.save(documento);
            mockMinioService.removerArquivo.mockResolvedValue(undefined);
            // Act
            await (0, supertest_1.default)(app.getHttpServer())
                .delete(`/api/documentos/${documento.id}`)
                .set('Authorization', `Bearer ${authToken}`)
                .expect(200);
            // Assert
            expect(mockMinioService.removerArquivo).toHaveBeenCalledWith(documento.nome_arquivo);
            const documentoExcluido = await documentoRepository.findOne({
                where: { id: documento.id },
            });
            expect(documentoExcluido).toBeNull();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFx0ZXN0XFxpbnRlZ3JhdGlvblxcZG9jdW1lbnRvLmludGVncmF0aW9uLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw2Q0FBc0Q7QUFFdEQsMERBQWdDO0FBQ2hDLHFEQUFpRDtBQUNqRCw2Q0FBcUQ7QUFFckQsNEZBQWtGO0FBQ2xGLGdIQUFnRztBQUNoRyxxQ0FBeUM7QUFDekMsMkVBQXVFO0FBQ3ZFLGtHQUdtRTtBQUVuRSxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3RDLElBQUksR0FBcUIsQ0FBQztJQUMxQixJQUFJLG1CQUEwQyxDQUFDO0lBQy9DLElBQUkscUJBQThDLENBQUM7SUFDbkQsSUFBSSxVQUFzQixDQUFDO0lBQzNCLElBQUksWUFBMEIsQ0FBQztJQUMvQixJQUFJLFNBQWlCLENBQUM7SUFFdEIsMkRBQTJEO0lBQzNELE1BQU0sZ0JBQWdCLEdBQUc7UUFDdkIsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDeEIsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDMUIsY0FBYyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDekIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUM3QixDQUFDO0lBRUYsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ25CLE1BQU0sYUFBYSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUNsRSxPQUFPLEVBQUUsQ0FBQyxzQkFBUyxDQUFDO1NBQ3JCLENBQUM7YUFDQyxnQkFBZ0IsQ0FBQyw0QkFBWSxDQUFDO2FBQzlCLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQzthQUMxQixPQUFPLEVBQUUsQ0FBQztRQUViLEdBQUcsR0FBRyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM1QyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FB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LElBQUksRUFBRSxRQUFRO29CQUNkLGFBQWEsRUFBRSxLQUFLO2lCQUNyQjtnQkFDRCxjQUFjLEVBQUUsY0FBYzthQUMvQixDQUFDLENBQUM7WUFDSCxNQUFNLG1CQUFtQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUUxQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFN0QsTUFBTTtZQUNOLE1BQU0sSUFBQSxtQkFBTyxFQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztpQkFDL0IsTUFBTSxDQUFDLG1CQUFtQixTQUFTLENBQUMsRUFBRSxFQUFFLENBQUM7aUJBQ3pDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxTQUFTLEVBQUUsQ0FBQztpQkFDM0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRWYsU0FBUztZQUNULE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxvQkFBb0IsQ0FDMUQsU0FBUyxDQUFDLFlBQVksQ0FDdkIsQ0FBQztZQUVGLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxtQkFBbUIsQ0FBQyxPQUFPLENBQUM7Z0JBQzFELEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFO2FBQzVCLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHRlc3RcXGludGVncmF0aW9uXFxkb2N1bWVudG8uaW50ZWdyYXRpb24uc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0LCBUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcbmltcG9ydCB7IElOZXN0QXBwbGljYXRpb24gfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgcmVxdWVzdCBmcm9tICdzdXBlcnRlc3QnO1xuaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi4vLi4vc3JjL2FwcC5tb2R1bGUnO1xuaW1wb3J0IHsgZ2V0UmVwb3NpdG9yeVRva2VuIH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCB7IERvY3VtZW50byB9IGZyb20gJy4uLy4uL3NyYy9tb2R1bGVzL2RvY3VtZW50by9lbnRpdGllcy9kb2N1bWVudG8uZW50aXR5JztcbmltcG9ydCB7IFRpcG9Eb2N1bWVudG8gfSBmcm9tICcuLi8uLi9zcmMvbW9kdWxlcy9iZW5lZmljaW8vZW50aXRpZXMvcmVxdWlzaXRvLWRvY3VtZW50by5lbnRpdHknO1xuaW1wb3J0IHsgSnd0U2VydmljZSB9IGZyb20gJ0BuZXN0anMvand0JztcbmltcG9ydCB7IE1pbmlvU2VydmljZSB9IGZyb20gJy4uLy4uL3NyYy9zaGFyZWQvc2VydmljZXMvbWluaW8uc2VydmljZSc7XG5pbXBvcnQge1xuICBTb2xpY2l0YWNhbyxcbiAgU3RhdHVzU29saWNpdGFjYW8sXG59IGZyb20gJy4uLy4uL3NyYy9tb2R1bGVzL3NvbGljaXRhY2FvL2VudGl0aWVzL3NvbGljaXRhY2FvLmVudGl0eSc7XG5cbmRlc2NyaWJlKCdEb2N1bWVudG8gKEludGVncmHDp8OjbyknLCAoKSA9PiB7XG4gIGxldCBhcHA6IElOZXN0QXBwbGljYXRpb247XG4gIGxldCBkb2N1bWVudG9SZXBvc2l0b3J5OiBSZXBvc2l0b3J5PERvY3VtZW50bz47XG4gIGxldCBzb2xpY2l0YWNhb1JlcG9zaXRvcnk6IFJlcG9zaXRvcnk8U29saWNpdGFjYW8+O1xuICBsZXQgand0U2VydmljZTogSnd0U2VydmljZTtcbiAgbGV0IG1pbmlvU2VydmljZTogTWluaW9TZXJ2aWNlO1xuICBsZXQgYXV0aFRva2VuOiBzdHJpbmc7XG5cbiAgLy8gTW9jayBkbyBNaW5pb1NlcnZpY2UgcGFyYSBldml0YXIgY2hhbWFkYXMgcmVhaXMgYW8gTWluSU9cbiAgY29uc3QgbW9ja01pbmlvU2VydmljZSA9IHtcbiAgICB1cGxvYWRBcnF1aXZvOiBqZXN0LmZuKCksXG4gICAgZG93bmxvYWRBcnF1aXZvOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlckFycXVpdm86IGplc3QuZm4oKSxcbiAgICBnZXJhclVybFByZXNpZ25lZDogamVzdC5mbigpLFxuICB9O1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlRml4dHVyZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBpbXBvcnRzOiBbQXBwTW9kdWxlXSxcbiAgICB9KVxuICAgICAgLm92ZXJyaWRlUHJvdmlkZXIoTWluaW9TZXJ2aWNlKVxuICAgICAgLnVzZVZhbHVlKG1vY2tNaW5pb1NlcnZpY2UpXG4gICAgICAuY29tcGlsZSgpO1xuXG4gICAgYXBwID0gbW9kdWxlRml4dHVyZS5jcmVhdGVOZXN0QXBwbGljYXRpb24oKTtcbiAgICBhd2FpdCBhcHAuaW5pdCgpO1xuXG4gICAgZG9jdW1lbnRvUmVwb3NpdG9yeSA9IG1vZHVsZUZpeHR1cmUuZ2V0PFJlcG9zaXRvcnk8RG9jdW1lbnRvPj4oXG4gICAgICBnZXRSZXBvc2l0b3J5VG9rZW4oRG9jdW1lbnRvKSxcbiAgICApO1xuICAgIHNvbGljaXRhY2FvUmVwb3NpdG9yeSA9IG1vZHVsZUZpeHR1cmUuZ2V0PFJlcG9zaXRvcnk8U29saWNpdGFjYW8+PihcbiAgICAgIGdldFJlcG9zaXRvcnlUb2tlbihTb2xpY2l0YWNhbyksXG4gICAgKTtcbiAgICBqd3RTZXJ2aWNlID0gbW9kdWxlRml4dHVyZS5nZXQ8Snd0U2VydmljZT4oSnd0U2VydmljZSk7XG5cbiAgICAvLyBHZXJhciB0b2tlbiBkZSBhdXRlbnRpY2HDp8OjbyBwYXJhIHRlc3Rlc1xuICAgIGF1dGhUb2tlbiA9IGp3dFNlcnZpY2Uuc2lnbih7XG4gICAgICBpZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICBub21lOiAnVXN1w6FyaW8gZGUgVGVzdGUnLFxuICAgICAgZW1haWw6ICd0ZXN0ZUBleGVtcGxvLmNvbScsXG4gICAgICByb2xlczogWydhZG1pbiddLFxuICAgIH0pO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBMaW1wYXIgZG9jdW1lbnRvcyBhbnRlcyBkZSBjYWRhIHRlc3RlXG4gICAgY29uc3QgZG9jdW1lbnRvcyA9IGF3YWl0IGRvY3VtZW50b1JlcG9zaXRvcnkuZmluZCgpO1xuICAgIGlmIChkb2N1bWVudG9zLmxlbmd0aCA+IDApIHtcbiAgICAgIGF3YWl0IGRvY3VtZW50b1JlcG9zaXRvcnkucmVtb3ZlKGRvY3VtZW50b3MpO1xuICAgIH1cblxuICAgIC8vIENyaWFyIHNvbGljaXRhw6fDtWVzIGRlIHRlc3RlIHVzYW5kbyBvIG3DqXRvZG8gY3JlYXRlIHBhcmEgZXZpdGFyIHByb2JsZW1hcyBjb20gY2FtcG9zIGVzcGVjaWFpc1xuICAgIGNvbnN0IHNvbGljaXRhY2FvMSA9IHNvbGljaXRhY2FvUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgaWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAnLFxuICAgICAgcHJvdG9jb2xvOiAnU09MMjAyNDAwMDAxJyxcbiAgICAgIHN0YXR1czogU3RhdHVzU29saWNpdGFjYW8uUEVOREVOVEUsXG4gICAgICBiZW5lZmljaWFyaW9faWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDInLFxuICAgICAgdGlwb19iZW5lZmljaW9faWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDMnLFxuICAgICAgdW5pZGFkZV9pZDogJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwNCcsXG4gICAgICB0ZWNuaWNvX2lkOiAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDA1JyxcbiAgICAgIGRhdGFfYWJlcnR1cmE6IG5ldyBEYXRlKCksXG4gICAgICBvYnNlcnZhY29lczogJ1Rlc3RlIDEnLFxuICAgIH0pO1xuICAgIGF3YWl0IHNvbGljaXRhY2FvUmVwb3NpdG9yeS5zYXZlKHNvbGljaXRhY2FvMSk7XG5cbiAgICBjb25zdCBzb2xpY2l0YWNhbzIgPSBzb2xpY2l0YWNhb1JlcG9zaXRvcnkuY3JlYXRlKHtcbiAgICAgIGlkOiAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAxJyxcbiAgICAgIHByb3RvY29sbzogJ1NPTDIwMjQwMDAwMicsXG4gICAgICBzdGF0dXM6IFN0YXR1c1NvbGljaXRhY2FvLkVNX0FOQUxJU0UsXG4gICAgICBiZW5lZmljaWFyaW9faWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDInLFxuICAgICAgdGlwb19iZW5lZmljaW9faWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDMnLFxuICAgICAgdW5pZGFkZV9pZDogJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwNCcsXG4gICAgICB0ZWNuaWNvX2lkOiAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDA1JyxcbiAgICAgIGRhdGFfYWJlcnR1cmE6IG5ldyBEYXRlKCksXG4gICAgICBvYnNlcnZhY29lczogJ1Rlc3RlIDInLFxuICAgIH0pO1xuICAgIGF3YWl0IHNvbGljaXRhY2FvUmVwb3NpdG9yeS5zYXZlKHNvbGljaXRhY2FvMik7XG5cbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGFwcC5jbG9zZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnVXBsb2FkIGRlIGRvY3VtZW50b3MnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcGVybWl0aXIgdXBsb2FkIGRlIGRvY3VtZW50byBuw6NvIHNlbnPDrXZlbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gQnVmZmVyLmZyb20oJ2NvbnRlw7pkbyBkbyBhcnF1aXZvIGRlIHRlc3RlJyk7XG4gICAgICBjb25zdCBtb2NrVXBsb2FkUmVzdWx0ID0ge1xuICAgICAgICBub21lQXJxdWl2bzpcbiAgICAgICAgICAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwL2NvbXByb3ZhbnRlL2RvY3VtZW50by0xMjMucGRmJyxcbiAgICAgICAgdGFtYW5obzogbW9ja0ZpbGUubGVuZ3RoLFxuICAgICAgICBoYXNoOiAnaGFzaC1kby1hcnF1aXZvJyxcbiAgICAgICAgbWV0YWRhZG9zOiB7XG4gICAgICAgICAgY3JpcHRvZ3JhZmFkbzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIGV0YWc6ICdldGFnLWRvLWFycXVpdm8nLFxuICAgICAgfTtcblxuICAgICAgbW9ja01pbmlvU2VydmljZS51cGxvYWRBcnF1aXZvLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVcGxvYWRSZXN1bHQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAucG9zdCgnL2FwaS9kb2N1bWVudG9zL3VwbG9hZCcpXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7YXV0aFRva2VufWApXG4gICAgICAgIC5maWVsZCgnc29saWNpdGFjYW9faWQnLCAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwJylcbiAgICAgICAgLmZpZWxkKCd0aXBvX2RvY3VtZW50bycsICdjb21wcm92YW50ZScpXG4gICAgICAgIC5maWVsZCgnZGVzY3JpY2FvJywgJ0NvbXByb3ZhbnRlIGRlIHJlc2lkw6puY2lhJylcbiAgICAgICAgLmZpZWxkKCdzZW5zaXZlbCcsICdmYWxzZScpXG4gICAgICAgIC5hdHRhY2goJ2FycXVpdm8nLCBtb2NrRmlsZSwgJ2RvY3VtZW50by5wZGYnKVxuICAgICAgICAuZXhwZWN0KDIwMSk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1vY2tNaW5pb1NlcnZpY2UudXBsb2FkQXJxdWl2bykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5hbnkoQnVmZmVyKSxcbiAgICAgICAgJ2RvY3VtZW50by5wZGYnLFxuICAgICAgICAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwJyxcbiAgICAgICAgJ2NvbXByb3ZhbnRlJyxcbiAgICAgICAgZmFsc2UsXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9FcXVhbChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIG5vbWVfYXJxdWl2bzogbW9ja1VwbG9hZFJlc3VsdC5ub21lQXJxdWl2byxcbiAgICAgICAgICB0YW1hbmhvOiBtb2NrVXBsb2FkUmVzdWx0LnRhbWFuaG8sXG4gICAgICAgICAgaGFzaDogbW9ja1VwbG9hZFJlc3VsdC5oYXNoLFxuICAgICAgICAgIG1ldGFkYWRvczoge1xuICAgICAgICAgICAgY3JpcHRvZ3JhZmFkbzogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSksXG4gICAgICApO1xuXG4gICAgICBjb25zdCBzYXZlZERvY3VtZW50byA9IGF3YWl0IGRvY3VtZW50b1JlcG9zaXRvcnkuZmluZE9uZSh7XG4gICAgICAgIHdoZXJlOiB7IG5vbWVfYXJxdWl2bzogbW9ja1VwbG9hZFJlc3VsdC5ub21lQXJxdWl2byB9LFxuICAgICAgfSk7XG4gICAgICBleHBlY3Qoc2F2ZWREb2N1bWVudG8pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3Qoc2F2ZWREb2N1bWVudG8hLm1ldGFkYWRvcy5jcmlwdG9ncmFmYWRvKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIHBlcm1pdGlyIHVwbG9hZCBkZSBkb2N1bWVudG8gc2Vuc8OtdmVsIGNvbSBjcmlwdG9ncmFmaWEnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBtb2NrRmlsZSA9IEJ1ZmZlci5mcm9tKCdjb250ZcO6ZG8gZG8gYXJxdWl2byBzZW5zw612ZWwnKTtcbiAgICAgIGNvbnN0IG1vY2tVcGxvYWRSZXN1bHQgPSB7XG4gICAgICAgIG5vbWVBcnF1aXZvOlxuICAgICAgICAgICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAvbGF1ZG8vZG9jdW1lbnRvLTEyMy5wZGYnLFxuICAgICAgICB0YW1hbmhvOiBtb2NrRmlsZS5sZW5ndGgsXG4gICAgICAgIGV0YWc6ICdldGFnLWRvLWFycXVpdm8tc2Vuc2l2ZWwnLFxuICAgICAgICBtZXRhZGFkb3M6IHtcbiAgICAgICAgICBoYXNoOiAnaGFzaC1kby1hcnF1aXZvLXNlbnNpdmVsJyxcbiAgICAgICAgICBjcmlwdG9ncmFmYWRvOiB0cnVlLFxuICAgICAgICAgIGNyaXB0b2dyYWZpYToge1xuICAgICAgICAgICAgaXY6ICdpdi1iYXNlNjQnLFxuICAgICAgICAgICAgYXV0aFRhZzogJ2F1dGgtdGFnLWJhc2U2NCcsXG4gICAgICAgICAgICBhbGdvcml0bW86ICdhZXMtMjU2LWdjbScsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tNaW5pb1NlcnZpY2UudXBsb2FkQXJxdWl2by5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXBsb2FkUmVzdWx0KTtcblxuICAgICAgLy8gQWN0XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwLmdldEh0dHBTZXJ2ZXIoKSlcbiAgICAgICAgLnBvc3QoJy9hcGkvZG9jdW1lbnRvcy91cGxvYWQnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuZmllbGQoJ3NvbGljaXRhY2FvX2lkJywgJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCcpXG4gICAgICAgIC5maWVsZCgndGlwb19kb2N1bWVudG8nLCAnbGF1ZG8nKVxuICAgICAgICAuZmllbGQoJ2Rlc2NyaWNhbycsICdMYXVkbyBtw6lkaWNvJylcbiAgICAgICAgLmZpZWxkKCdzZW5zaXZlbCcsICd0cnVlJylcbiAgICAgICAgLmF0dGFjaCgnYXJxdWl2bycsIG1vY2tGaWxlLCAnbGF1ZG8ucGRmJylcbiAgICAgICAgLmV4cGVjdCgyMDEpO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChtb2NrTWluaW9TZXJ2aWNlLnVwbG9hZEFycXVpdm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3QuYW55KEJ1ZmZlciksXG4gICAgICAgICdsYXVkby5wZGYnLFxuICAgICAgICAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwJyxcbiAgICAgICAgJ2xhdWRvJyxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0VxdWFsKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgbm9tZV9hcnF1aXZvOiBtb2NrVXBsb2FkUmVzdWx0Lm5vbWVBcnF1aXZvLFxuICAgICAgICAgIHRhbWFuaG86IG1vY2tVcGxvYWRSZXN1bHQudGFtYW5obyxcbiAgICAgICAgICBtZXRhZGFkb3M6IGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICAgIGhhc2g6IG1vY2tVcGxvYWRSZXN1bHQubWV0YWRhZG9zLmhhc2gsXG4gICAgICAgICAgICBjcmlwdG9ncmFmYWRvOiB0cnVlLFxuICAgICAgICAgICAgY3JpcHRvZ3JhZmlhOiBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgICAgIGl2OiBtb2NrVXBsb2FkUmVzdWx0Lm1ldGFkYWRvcy5jcmlwdG9ncmFmaWEuaXYsXG4gICAgICAgICAgICAgIGF1dGhUYWc6IG1vY2tVcGxvYWRSZXN1bHQubWV0YWRhZG9zLmNyaXB0b2dyYWZpYS5hdXRoVGFnLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pLFxuICAgICAgKTtcblxuICAgICAgY29uc3Qgc2F2ZWREb2N1bWVudG8gPSBhd2FpdCBkb2N1bWVudG9SZXBvc2l0b3J5LmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBub21lX2FycXVpdm86IG1vY2tVcGxvYWRSZXN1bHQubm9tZUFycXVpdm8gfSxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KHNhdmVkRG9jdW1lbnRvKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHNhdmVkRG9jdW1lbnRvIS5tZXRhZGFkb3MuY3JpcHRvZ3JhZmFkbykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChzYXZlZERvY3VtZW50byEubWV0YWRhZG9zLmNyaXB0b2dyYWZpYT8uaXYpLnRvQmUoXG4gICAgICAgIG1vY2tVcGxvYWRSZXN1bHQubWV0YWRhZG9zLmNyaXB0b2dyYWZpYS5pdixcbiAgICAgICk7XG4gICAgICBleHBlY3Qoc2F2ZWREb2N1bWVudG8hLm1ldGFkYWRvcy5jcmlwdG9ncmFmaWE/LmF1dGhUYWcpLnRvQmUoXG4gICAgICAgIG1vY2tVcGxvYWRSZXN1bHQubWV0YWRhZG9zLmNyaXB0b2dyYWZpYS5hdXRoVGFnLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Rvd25sb2FkIGRlIGRvY3VtZW50b3MnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcGVybWl0aXIgZG93bmxvYWQgZGUgZG9jdW1lbnRvIG7Do28gc2Vuc8OtdmVsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgZG9jdW1lbnRvID0gZG9jdW1lbnRvUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgICBub21lX2FycXVpdm86XG4gICAgICAgICAgJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMC9jb21wcm92YW50ZS9kb2N1bWVudG8tMTIzLnBkZicsXG4gICAgICAgIG5vbWVfb3JpZ2luYWw6ICdjb21wcm92YW50ZS5wZGYnLFxuICAgICAgICBjYW1pbmhvOlxuICAgICAgICAgICcvdXBsb2Fkcy81NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAvY29tcHJvdmFudGUvZG9jdW1lbnRvLTEyMy5wZGYnLFxuICAgICAgICB0aXBvOiBUaXBvRG9jdW1lbnRvLkNPTVBST1ZBTlRFX1JFU0lERU5DSUEsXG4gICAgICAgIGRlc2NyaWNhbzogJ0NvbXByb3ZhbnRlIGRlIHJlc2lkw6puY2lhJyxcbiAgICAgICAgc29saWNpdGFjYW9faWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAnLFxuICAgICAgICB0YW1hbmhvOiAxMDI0LFxuICAgICAgICBtaW1ldHlwZTogJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgICAgIGRhdGFfdXBsb2FkOiBuZXcgRGF0ZSgpLFxuICAgICAgICBtZXRhZGFkb3M6IHtcbiAgICAgICAgICBoYXNoOiAnaGFzaC1kby1hcnF1aXZvJyxcbiAgICAgICAgICBjcmlwdG9ncmFmYWRvOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgdXN1YXJpb191cGxvYWQ6ICd0ZXN0LXVzZXItaWQnLFxuICAgICAgfSk7XG4gICAgICBhd2FpdCBkb2N1bWVudG9SZXBvc2l0b3J5LnNhdmUoZG9jdW1lbnRvKTtcblxuICAgICAgY29uc3QgbW9ja0Rvd25sb2FkUmVzdWx0ID0ge1xuICAgICAgICBidWZmZXI6IEJ1ZmZlci5mcm9tKCdjb250ZcO6ZG8gZG8gYXJxdWl2byBkZSB0ZXN0ZScpLFxuICAgICAgICBub21lT3JpZ2luYWw6ICdjb21wcm92YW50ZS5wZGYnLFxuICAgICAgICB0YW1hbmhvOiAxMDI0LFxuICAgICAgICBtZXRhZGFkb3M6IHtcbiAgICAgICAgICBjcmlwdG9ncmFmYWRvOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tNaW5pb1NlcnZpY2UuZG93bmxvYWRBcnF1aXZvLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tEb3dubG9hZFJlc3VsdCk7XG5cbiAgICAgIC8vIEFjdFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5nZXQoYC9hcGkvZG9jdW1lbnRvcy9kb3dubG9hZC8ke2RvY3VtZW50by5pZH1gKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1vY2tNaW5pb1NlcnZpY2UuZG93bmxvYWRBcnF1aXZvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZG9jdW1lbnRvLm5vbWVfYXJxdWl2byxcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LWRpc3Bvc2l0aW9uJ10pLnRvQ29udGFpbihcbiAgICAgICAgJ2F0dGFjaG1lbnQ7IGZpbGVuYW1lPVwiY29tcHJvdmFudGUucGRmXCInLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5oZWFkZXJzWydjb250ZW50LXR5cGUnXSkudG9Db250YWluKCdhcHBsaWNhdGlvbi9wZGYnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0VxdWFsKGV4cGVjdC5hbnkoQnVmZmVyKSk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGV2ZSBwZXJtaXRpciBkb3dubG9hZCBkZSBkb2N1bWVudG8gc2Vuc8OtdmVsIGNyaXB0b2dyYWZhZG8nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBkb2N1bWVudG8gPSBkb2N1bWVudG9SZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgIG5vbWVfYXJxdWl2bzpcbiAgICAgICAgICAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwL2xhdWRvL2RvY3VtZW50by0xMjMucGRmJyxcbiAgICAgICAgbm9tZV9vcmlnaW5hbDogJ2xhdWRvLnBkZicsXG4gICAgICAgIGNhbWluaG86XG4gICAgICAgICAgJy91cGxvYWRzLzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMC9sYXVkby9kb2N1bWVudG8tMTIzLnBkZicsXG4gICAgICAgIHRpcG86IFRpcG9Eb2N1bWVudG8uREVDTEFSQUNBT19NRURJQ0EsXG4gICAgICAgIGRlc2NyaWNhbzogJ0xhdWRvIG3DqWRpY28nLFxuICAgICAgICBzb2xpY2l0YWNhb19pZDogJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCcsXG4gICAgICAgIHRhbWFuaG86IDEwMjQsXG4gICAgICAgIG1pbWV0eXBlOiAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAgICAgZGF0YV91cGxvYWQ6IG5ldyBEYXRlKCksXG4gICAgICAgIG1ldGFkYWRvczoge1xuICAgICAgICAgIGhhc2g6ICdoYXNoLWRvLWFycXVpdm8tc2Vuc2l2ZWwnLFxuICAgICAgICAgIGNyaXB0b2dyYWZhZG86IHRydWUsXG4gICAgICAgICAgY3JpcHRvZ3JhZmlhOiB7XG4gICAgICAgICAgICBpdjogJ2l2LWJhc2U2NCcsXG4gICAgICAgICAgICBhdXRoVGFnOiAnYXV0aC10YWctYmFzZTY0JyxcbiAgICAgICAgICAgIGFsZ29yaXRtbzogJ2Flcy0yNTYtZ2NtJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB1c3VhcmlvX3VwbG9hZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICB9KTtcbiAgICAgIGF3YWl0IGRvY3VtZW50b1JlcG9zaXRvcnkuc2F2ZShkb2N1bWVudG8pO1xuXG4gICAgICBjb25zdCBtb2NrRG93bmxvYWRSZXN1bHQgPSB7XG4gICAgICAgIGJ1ZmZlcjogQnVmZmVyLmZyb20oJ2NvbnRlw7pkbyBkZXNjcmlwdG9ncmFmYWRvIGRvIGFycXVpdm8gc2Vuc8OtdmVsJyksXG4gICAgICAgIG5vbWVPcmlnaW5hbDogJ2xhdWRvLnBkZicsXG4gICAgICAgIHRhbWFuaG86IDEwMjQsXG4gICAgICAgIG1ldGFkYWRvczoge1xuICAgICAgICAgIGNyaXB0b2dyYWZhZG86IHRydWUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBtb2NrTWluaW9TZXJ2aWNlLmRvd25sb2FkQXJxdWl2by5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRG93bmxvYWRSZXN1bHQpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAuZ2V0KGAvYXBpL2RvY3VtZW50b3MvZG93bmxvYWQvJHtkb2N1bWVudG8uaWR9YClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthdXRoVG9rZW59YClcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChtb2NrTWluaW9TZXJ2aWNlLmRvd25sb2FkQXJxdWl2bykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGRvY3VtZW50by5ub21lX2FycXVpdm8sXG4gICAgICApO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVyc1snY29udGVudC1kaXNwb3NpdGlvbiddKS50b0NvbnRhaW4oXG4gICAgICAgICdhdHRhY2htZW50OyBmaWxlbmFtZT1cImxhdWRvLnBkZlwiJyxcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuaGVhZGVyc1snY29udGVudC10eXBlJ10pLnRvQ29udGFpbignYXBwbGljYXRpb24vcGRmJyk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9FcXVhbChleHBlY3QuYW55KEJ1ZmZlcikpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnTGlzdGFnZW0gZGUgZG9jdW1lbnRvcycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBsaXN0YXIgZG9jdW1lbnRvcyBwb3Igc29saWNpdGHDp8OjbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEFycmFuZ2VcbiAgICAgIGNvbnN0IGRvY3VtZW50b3MgPSBbXG4gICAgICAgIGRvY3VtZW50b1JlcG9zaXRvcnkuY3JlYXRlKHtcbiAgICAgICAgICBub21lX2FycXVpdm86XG4gICAgICAgICAgICAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwL2NvbXByb3ZhbnRlL2RvY3VtZW50by0xLnBkZicsXG4gICAgICAgICAgbm9tZV9vcmlnaW5hbDogJ2NvbXByb3ZhbnRlLnBkZicsXG4gICAgICAgICAgY2FtaW5obzpcbiAgICAgICAgICAgICcvdXBsb2Fkcy81NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAvY29tcHJvdmFudGUvZG9jdW1lbnRvLTEucGRmJyxcbiAgICAgICAgICB0aXBvOiBUaXBvRG9jdW1lbnRvLkNPTVBST1ZBTlRFX1JFU0lERU5DSUEsXG4gICAgICAgICAgZGVzY3JpY2FvOiAnQ29tcHJvdmFudGUgZGUgcmVzaWTDqm5jaWEnLFxuICAgICAgICAgIHNvbGljaXRhY2FvX2lkOiAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwJyxcbiAgICAgICAgICB0YW1hbmhvOiAxMDI0LFxuICAgICAgICAgIG1pbWV0eXBlOiAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAgICAgICBkYXRhX3VwbG9hZDogbmV3IERhdGUoKSxcbiAgICAgICAgICBtZXRhZGFkb3M6IHtcbiAgICAgICAgICAgIGhhc2g6ICdoYXNoLTEnLFxuICAgICAgICAgICAgY3JpcHRvZ3JhZmFkbzogZmFsc2UsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB1c3VhcmlvX3VwbG9hZDogJ3Rlc3QtdXNlci1pZCcsXG4gICAgICAgIH0pLFxuICAgICAgICBkb2N1bWVudG9SZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgICAgbm9tZV9hcnF1aXZvOlxuICAgICAgICAgICAgJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMC9sYXVkby9kb2N1bWVudG8tMi5wZGYnLFxuICAgICAgICAgIG5vbWVfb3JpZ2luYWw6ICdsYXVkby5wZGYnLFxuICAgICAgICAgIGNhbWluaG86XG4gICAgICAgICAgICAnL3VwbG9hZHMvNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwL2xhdWRvL2RvY3VtZW50by0yLnBkZicsXG4gICAgICAgICAgdGlwbzogVGlwb0RvY3VtZW50by5ERUNMQVJBQ0FPX01FRElDQSxcbiAgICAgICAgICBkZXNjcmljYW86ICdMYXVkbyBtw6lkaWNvJyxcbiAgICAgICAgICBzb2xpY2l0YWNhb19pZDogJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCcsXG4gICAgICAgICAgdGFtYW5obzogMjA0OCxcbiAgICAgICAgICBtaW1ldHlwZTogJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgICAgICAgZGF0YV91cGxvYWQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgbWV0YWRhZG9zOiB7XG4gICAgICAgICAgICBoYXNoOiAnaGFzaC0yJyxcbiAgICAgICAgICAgIGNyaXB0b2dyYWZhZG86IHRydWUsXG4gICAgICAgICAgICBjcmlwdG9ncmFmaWE6IHtcbiAgICAgICAgICAgICAgaXY6ICdpdi1iYXNlNjQnLFxuICAgICAgICAgICAgICBhdXRoVGFnOiAnYXV0aC10YWctYmFzZTY0JyxcbiAgICAgICAgICAgICAgYWxnb3JpdG1vOiAnYWVzLTI1Ni1nY20nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzdWFyaW9fdXBsb2FkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgfSksXG4gICAgICBdO1xuICAgICAgYXdhaXQgZG9jdW1lbnRvUmVwb3NpdG9yeS5zYXZlKGRvY3VtZW50b3MpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAuZ2V0KCcvYXBpL2RvY3VtZW50b3MnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAucXVlcnkoeyBzb2xpY2l0YWNhb19pZDogJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCcgfSlcbiAgICAgICAgLmV4cGVjdCgyMDApO1xuXG4gICAgICAvLyBBc3NlcnRcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGEpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGFbMF0uc29saWNpdGFjYW9faWQpLnRvQmUoXG4gICAgICAgICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAnLFxuICAgICAgKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LmRhdGFbMV0uc29saWNpdGFjYW9faWQpLnRvQmUoXG4gICAgICAgICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAnLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZXZlIGxpc3RhciBkb2N1bWVudG9zIHBvciB0aXBvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQXJyYW5nZVxuICAgICAgY29uc3QgZG9jdW1lbnRvcyA9IFtcbiAgICAgICAgZG9jdW1lbnRvUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgICAgIG5vbWVfYXJxdWl2bzpcbiAgICAgICAgICAgICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAvY29tcHJvdmFudGUvZG9jdW1lbnRvLTEucGRmJyxcbiAgICAgICAgICBub21lX29yaWdpbmFsOiAnY29tcHJvdmFudGUucGRmJyxcbiAgICAgICAgICBjYW1pbmhvOlxuICAgICAgICAgICAgJy91cGxvYWRzLzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMC9jb21wcm92YW50ZS9kb2N1bWVudG8tMS5wZGYnLFxuICAgICAgICAgIHRpcG86IFRpcG9Eb2N1bWVudG8uQ09NUFJPVkFOVEVfUkVTSURFTkNJQSxcbiAgICAgICAgICBkZXNjcmljYW86ICdDb21wcm92YW50ZSBkZSByZXNpZMOqbmNpYScsXG4gICAgICAgICAgc29saWNpdGFjYW9faWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAnLFxuICAgICAgICAgIHRhbWFuaG86IDEwMjQsXG4gICAgICAgICAgbWltZXR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgICAgIGRhdGFfdXBsb2FkOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIG1ldGFkYWRvczoge1xuICAgICAgICAgICAgaGFzaDogJ2hhc2gtMScsXG4gICAgICAgICAgICBjcmlwdG9ncmFmYWRvOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzdWFyaW9fdXBsb2FkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgfSksXG4gICAgICAgIGRvY3VtZW50b1JlcG9zaXRvcnkuY3JlYXRlKHtcbiAgICAgICAgICBub21lX2FycXVpdm86XG4gICAgICAgICAgICAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAxL2NvbXByb3ZhbnRlL2RvY3VtZW50by0zLnBkZicsXG4gICAgICAgICAgbm9tZV9vcmlnaW5hbDogJ2NvbXByb3ZhbnRlMi5wZGYnLFxuICAgICAgICAgIGNhbWluaG86XG4gICAgICAgICAgICAnL3VwbG9hZHMvNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAxL2NvbXByb3ZhbnRlL2RvY3VtZW50by0zLnBkZicsXG4gICAgICAgICAgdGlwbzogVGlwb0RvY3VtZW50by5DT01QUk9WQU5URV9SRU5EQSxcbiAgICAgICAgICBkZXNjcmljYW86ICdDb21wcm92YW50ZSBkZSByZW5kYScsXG4gICAgICAgICAgc29saWNpdGFjYW9faWQ6ICc1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDEnLFxuICAgICAgICAgIHRhbWFuaG86IDE1MzYsXG4gICAgICAgICAgbWltZXR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgICAgIGRhdGFfdXBsb2FkOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIG1ldGFkYWRvczoge1xuICAgICAgICAgICAgaGFzaDogJ2hhc2gtMycsXG4gICAgICAgICAgICBjcmlwdG9ncmFmYWRvOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVzdWFyaW9fdXBsb2FkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgICAgfSksXG4gICAgICBdO1xuICAgICAgYXdhaXQgZG9jdW1lbnRvUmVwb3NpdG9yeS5zYXZlKGRvY3VtZW50b3MpO1xuXG4gICAgICAvLyBBY3RcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAuZ2V0KCcvYXBpL2RvY3VtZW50b3MnKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAucXVlcnkoeyB0aXBvX2RvY3VtZW50bzogJ2NvbXByb3ZhbnRlJyB9KVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YSkudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YVswXS50aXBvKS50b0JlKFxuICAgICAgICBUaXBvRG9jdW1lbnRvLkNPTVBST1ZBTlRFX1JFU0lERU5DSUEsXG4gICAgICApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuZGF0YVsxXS50aXBvKS50b0JlKFRpcG9Eb2N1bWVudG8uQ09NUFJPVkFOVEVfUkVOREEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXhjbHVzw6NvIGRlIGRvY3VtZW50b3MnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgcGVybWl0aXIgZXhjbHVpciB1bSBkb2N1bWVudG8nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBBcnJhbmdlXG4gICAgICBjb25zdCBkb2N1bWVudG8gPSBkb2N1bWVudG9SZXBvc2l0b3J5LmNyZWF0ZSh7XG4gICAgICAgIG5vbWVfYXJxdWl2bzpcbiAgICAgICAgICAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwL2NvbXByb3ZhbnRlL2RvY3VtZW50by0xLnBkZicsXG4gICAgICAgIG5vbWVfb3JpZ2luYWw6ICdjb21wcm92YW50ZS5wZGYnLFxuICAgICAgICBjYW1pbmhvOlxuICAgICAgICAgICcvdXBsb2Fkcy81NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDAvY29tcHJvdmFudGUvZG9jdW1lbnRvLTEucGRmJyxcbiAgICAgICAgdGlwbzogVGlwb0RvY3VtZW50by5DT01QUk9WQU5URV9SRVNJREVOQ0lBLFxuICAgICAgICBkZXNjcmljYW86ICdDb21wcm92YW50ZSBkZSByZXNpZMOqbmNpYScsXG4gICAgICAgIHNvbGljaXRhY2FvX2lkOiAnNTUwZTg0MDAtZTI5Yi00MWQ0LWE3MTYtNDQ2NjU1NDQwMDAwJyxcbiAgICAgICAgdGFtYW5obzogMTAyNCxcbiAgICAgICAgbWltZXR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgICBkYXRhX3VwbG9hZDogbmV3IERhdGUoKSxcbiAgICAgICAgbWV0YWRhZG9zOiB7XG4gICAgICAgICAgaGFzaDogJ2hhc2gtMScsXG4gICAgICAgICAgY3JpcHRvZ3JhZmFkbzogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHVzdWFyaW9fdXBsb2FkOiAndGVzdC11c2VyLWlkJyxcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgZG9jdW1lbnRvUmVwb3NpdG9yeS5zYXZlKGRvY3VtZW50byk7XG5cbiAgICAgIG1vY2tNaW5pb1NlcnZpY2UucmVtb3ZlckFycXVpdm8ubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgLy8gQWN0XG4gICAgICBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5kZWxldGUoYC9hcGkvZG9jdW1lbnRvcy8ke2RvY3VtZW50by5pZH1gKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2F1dGhUb2tlbn1gKVxuICAgICAgICAuZXhwZWN0KDIwMCk7XG5cbiAgICAgIC8vIEFzc2VydFxuICAgICAgZXhwZWN0KG1vY2tNaW5pb1NlcnZpY2UucmVtb3ZlckFycXVpdm8pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBkb2N1bWVudG8ubm9tZV9hcnF1aXZvLFxuICAgICAgKTtcblxuICAgICAgY29uc3QgZG9jdW1lbnRvRXhjbHVpZG8gPSBhd2FpdCBkb2N1bWVudG9SZXBvc2l0b3J5LmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBpZDogZG9jdW1lbnRvLmlkIH0sXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChkb2N1bWVudG9FeGNsdWlkbykudG9CZU51bGwoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==