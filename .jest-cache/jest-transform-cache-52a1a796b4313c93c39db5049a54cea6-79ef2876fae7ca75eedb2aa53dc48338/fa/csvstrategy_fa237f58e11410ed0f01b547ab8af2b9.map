{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\strategies\\csv.strategy.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\strategies\\csv.strategy.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { RelatorioStrategy } from '../interfaces/relatorio-strategy.interface';\nimport { createObjectCsvWriter } from 'csv-writer';\nimport * as fs from 'fs';\nimport { TempFilesService } from '../services/temp-files.service';\n\n/**\n * Estratégia de geração de relatórios em formato CSV\n *\n * Implementa a geração de relatórios em formato CSV usando csv-writer\n */\n@Injectable()\nexport class CsvStrategy implements RelatorioStrategy {\n  private readonly logger = new Logger(CsvStrategy.name);\n\n  constructor(private readonly tempFilesService: TempFilesService) {}\n\n  /**\n   * Gera um relatório em formato CSV\n   * @param tipo Tipo de relatório\n   * @param dados Dados do relatório\n   * @param opcoes Opções de configuração\n   * @returns Buffer contendo o CSV gerado\n   */\n  async gerar(tipo: string, dados: any, opcoes: any): Promise<Buffer> {\n    this.logger.log(`Gerando relatório CSV do tipo: ${tipo}`);\n\n    // Criar arquivo temporário\n    const tempFilePath = this.tempFilesService.getTempFilePath(\n      'relatorio-csv',\n      'csv',\n    );\n\n    try {\n      // Adicionar conteúdo específico conforme o tipo de relatório\n      switch (tipo) {\n        case 'beneficios-concedidos':\n          return await this.gerarBeneficiosConcedidos(\n            tempFilePath,\n            dados,\n            opcoes,\n          );\n        case 'solicitacoes-por-status':\n          return await this.gerarSolicitacoesPorStatus(\n            tempFilePath,\n            dados,\n            opcoes,\n          );\n        case 'atendimentos-por-unidade':\n          return await this.gerarAtendimentosPorUnidade(\n            tempFilePath,\n            dados,\n            opcoes,\n          );\n        default:\n          throw new Error(`Tipo de relatório não implementado: ${tipo}`);\n      }\n    } catch (error) {\n      this.logger.error(`Erro ao gerar relatório CSV: ${error.message}`);\n\n      // Tentar limpar arquivo temporário em caso de erro\n      try {\n        if (fs.existsSync(tempFilePath)) {\n          fs.unlinkSync(tempFilePath);\n        }\n      } catch (cleanupError) {\n        this.logger.warn(\n          `Erro ao limpar arquivo temporário: ${cleanupError.message}`,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retorna o tipo MIME para arquivos CSV\n   */\n  getMimeType(): string {\n    return 'text/csv';\n  }\n\n  /**\n   * Retorna a extensão para arquivos CSV\n   */\n  getExtensao(): string {\n    return 'csv';\n  }\n\n  /**\n   * Gera conteúdo para relatório de benefícios concedidos\n   * @param tempFilePath Caminho do arquivo temporário\n   * @param dados Dados para o relatório\n   * @param opcoes Opções de configuração\n   * @returns Buffer com o conteúdo do arquivo CSV\n   */\n  private async gerarBeneficiosConcedidos(\n    tempFilePath: string,\n    solicitacoes: any[],\n    opcoes: any,\n  ): Promise<Buffer> {\n    const csvWriter = createObjectCsvWriter({\n      path: tempFilePath,\n      header: [\n        { id: 'protocolo', title: 'Protocolo' },\n        { id: 'beneficiario', title: 'Beneficiário' },\n        { id: 'beneficio', title: 'Benefício' },\n        { id: 'unidade', title: 'Unidade' },\n        { id: 'data_liberacao', title: 'Data Liberação' },\n        { id: 'valor', title: 'Valor' },\n      ],\n    });\n\n    const records = solicitacoes.map((solicitacao) => ({\n      protocolo: solicitacao.protocolo || '',\n      beneficiario: solicitacao.beneficiario?.nome || 'N/A',\n      beneficio: solicitacao.tipo_beneficio?.nome || 'N/A',\n      unidade: solicitacao.unidade?.nome || 'N/A',\n      data_liberacao: solicitacao.data_liberacao\n        ? new Date(solicitacao.data_liberacao).toLocaleDateString('pt-BR')\n        : 'N/A',\n      valor: solicitacao.tipo_beneficio?.valor || 0,\n    }));\n\n    await csvWriter.writeRecords(records);\n    return this.tempFilesService.readAndRemove(tempFilePath);\n  }\n\n  /**\n   * Gera conteúdo para relatório de solicitações por status\n   * @param tempFilePath Caminho do arquivo temporário\n   * @param dados Dados para o relatório\n   * @param opcoes Opções de configuração\n   * @returns Buffer com o conteúdo do arquivo CSV\n   */\n  private async gerarSolicitacoesPorStatus(\n    tempFilePath: string,\n    agrupadas: any,\n    opcoes: any,\n  ): Promise<Buffer> {\n    const csvWriter = createObjectCsvWriter({\n      path: tempFilePath,\n      header: [\n        { id: 'status', title: 'Status' },\n        { id: 'protocolo', title: 'Protocolo' },\n        { id: 'beneficiario', title: 'Beneficiário' },\n        { id: 'beneficio', title: 'Benefício' },\n        { id: 'unidade', title: 'Unidade' },\n        { id: 'data_abertura', title: 'Data de Abertura' },\n      ],\n    });\n\n    // Definir interface para os registros do CSV\n    interface RegistroCSV {\n      status: string;\n      protocolo: string;\n      beneficiario: string;\n      beneficio: string;\n      unidade: string;\n      data_abertura: string;\n    }\n\n    const records: RegistroCSV[] = [];\n    Object.keys(agrupadas).forEach((status) => {\n      agrupadas[status].forEach((solicitacao) => {\n        records.push({\n          status,\n          protocolo: solicitacao.protocolo || '',\n          beneficiario: solicitacao.beneficiario?.nome || 'N/A',\n          beneficio: solicitacao.tipo_beneficio?.nome || 'N/A',\n          unidade: solicitacao.unidade?.nome || 'N/A',\n          data_abertura: solicitacao.data_abertura\n            ? new Date(solicitacao.data_abertura).toLocaleDateString('pt-BR')\n            : 'N/A',\n        });\n      });\n    });\n\n    await csvWriter.writeRecords(records);\n    return this.tempFilesService.readAndRemove(tempFilePath);\n  }\n\n  /**\n   * Gera conteúdo para relatório de atendimentos por unidade\n   * @param tempFilePath Caminho do arquivo temporário\n   * @param dados Dados para o relatório\n   * @param opcoes Opções de configuração\n   * @returns Buffer com o conteúdo do arquivo CSV\n   */\n  private async gerarAtendimentosPorUnidade(\n    tempFilePath: string,\n    resultado: any[],\n    opcoes: any,\n  ): Promise<Buffer> {\n    const csvWriter = createObjectCsvWriter({\n      path: tempFilePath,\n      header: [\n        { id: 'unidade', title: 'Unidade' },\n        { id: 'total', title: 'Total de Solicitações' },\n        { id: 'liberadas', title: 'Solicitações Liberadas' },\n        { id: 'pendentes', title: 'Solicitações Pendentes' },\n        { id: 'taxa_aprovacao', title: 'Taxa de Aprovação (%)' },\n      ],\n    });\n\n    const records = resultado.map((item) => {\n      const taxaAprovacao =\n        item.totalSolicitacoes > 0\n          ? (\n              (item.solicitacoesLiberadas / item.totalSolicitacoes) *\n              100\n            ).toFixed(2)\n          : '0.00';\n\n      return {\n        unidade: item.unidade.nome || 'N/A',\n        total: item.totalSolicitacoes,\n        liberadas: item.solicitacoesLiberadas,\n        pendentes: item.solicitacoesPendentes,\n        taxa_aprovacao: taxaAprovacao,\n      };\n    });\n\n    await csvWriter.writeRecords(records);\n    return this.tempFilesService.readAndRemove(tempFilePath);\n  }\n}\n"],"version":3}