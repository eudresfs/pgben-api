b7a610811e598ac8930476f6c8486a75
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var IntegradorAuthService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegradorAuthService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const integrador_token_service_1 = require("./integrador-token.service");
const token_revogado_entity_1 = require("../../../entities/token-revogado.entity");
/**
 * Serviço responsável pela autenticação e autorização de integradores.
 * Valida tokens, verifica permissões e registra acessos.
 */
let IntegradorAuthService = IntegradorAuthService_1 = class IntegradorAuthService {
    tokenService;
    tokenRevogadoRepository;
    logger = new common_1.Logger(IntegradorAuthService_1.name);
    constructor(tokenService, tokenRevogadoRepository) {
        this.tokenService = tokenService;
        this.tokenRevogadoRepository = tokenRevogadoRepository;
    }
    /**
     * Extrai o token de autorização do cabeçalho da requisição.
     * @param request Objeto de requisição HTTP
     * @returns Token extraído ou null se não encontrado
     */
    extractTokenFromHeader(request) {
        const authHeader = request.headers.authorization;
        if (!authHeader) {
            return null;
        }
        const parts = authHeader.split(' ');
        if (parts.length !== 2 || parts[0] !== 'Bearer') {
            return null;
        }
        return parts[1];
    }
    /**
     * Obtém o endereço IP real da requisição.
     * @param request Objeto de requisição HTTP
     * @returns Endereço IP
     */
    getIpFromRequest(request) {
        // Considera cabeçalhos como X-Forwarded-For para ambientes com proxy
        const xForwardedFor = request.headers['x-forwarded-for'];
        if (xForwardedFor) {
            const ips = xForwardedFor.split(',');
            return ips[0].trim();
        }
        return request.ip || request.socket.remoteAddress || '0.0.0.0';
    }
    /**
     * Valida a autenticação de uma requisição.
     * @param request Objeto de requisição HTTP
     * @returns Payload do token validado
     * @throws UnauthorizedException se a autenticação falhar
     */
    async validateRequest(request) {
        const token = this.extractTokenFromHeader(request);
        if (!token) {
            throw new common_1.UnauthorizedException('Token de autorização não fornecido');
        }
        try {
            // Validar o token e obter o payload
            const payload = await this.tokenService.validateToken(token);
            // Verificar restrições de IP
            const ipAddress = this.getIpFromRequest(request);
            if (!this.tokenService.isIpAllowed(payload.integrador, ipAddress)) {
                this.logger.warn(`Tentativa de acesso de IP não autorizado: ${ipAddress} para integrador ${payload.integrador.id}`);
                throw new common_1.UnauthorizedException(`Acesso não permitido do IP ${ipAddress}`);
            }
            // Adicionar informações à requisição para uso posterior
            request['integrador'] = payload.integrador;
            request['integradorTokenPayload'] = payload;
            return payload;
        }
        catch (error) {
            // Registrar tentativa de acesso inválida
            this.logger.warn(`Falha na autenticação de integrador: ${error.message}`);
            // Propaga a exceção original
            throw error;
        }
    }
    /**
     * Verifica se a requisição tem as permissões necessárias.
     * @param request Objeto de requisição HTTP
     * @param requiredScopes Escopos necessários para a operação
     * @returns true se autorizado, false caso contrário
     */
    checkPermissions(request, requiredScopes) {
        const payload = request['integradorTokenPayload'];
        if (!payload) {
            return false;
        }
        return this.tokenService.hasRequiredScopes(payload, requiredScopes);
    }
    /**
     * Registra uma tentativa de acesso (sucesso ou falha).
     * Este método pode ser expandido para incluir mais informações de auditoria.
     * @param tokenId ID do token (se identificado)
     * @param integradorId ID do integrador (se identificado)
     * @param success Indica se o acesso foi bem-sucedido
     * @param ipAddress Endereço IP da requisição
     * @param resource Recurso que estava sendo acessado
     * @param message Mensagem adicional
     */
    async registrarTentativaAcesso(tokenId, integradorId, success, ipAddress, resource, message) {
        // Aqui poderia ser implementada a lógica para registrar em um banco ou
        // sistema de monitoramento. Por ora, apenas logamos.
        if (success) {
            this.logger.log(`Acesso autorizado: integrador=${integradorId}, token=${tokenId}, ip=${ipAddress}, recurso=${resource}`);
        }
        else {
            this.logger.warn(`Acesso negado: integrador=${integradorId}, ip=${ipAddress}, recurso=${resource}, motivo=${message}`);
        }
    }
    /**
     * Busca na cache local se um token está revogado.
     * Este método pode ser otimizado com Redis ou outro mecanismo de cache.
     * @param tokenHash Hash do token a ser verificado
     * @returns true se o token estiver revogado, false caso contrário
     */
    async isTokenRevogado(tokenHash) {
        const revogado = await this.tokenRevogadoRepository.findOne({
            where: { tokenHash },
        });
        return !!revogado;
    }
};
exports.IntegradorAuthService = IntegradorAuthService;
exports.IntegradorAuthService = IntegradorAuthService = IntegradorAuthService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, typeorm_1.InjectRepository)(token_revogado_entity_1.TokenRevogado)),
    __metadata("design:paramtypes", [typeof (_a = typeof integrador_token_service_1.IntegradorTokenService !== "undefined" && integrador_token_service_1.IntegradorTokenService) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], IntegradorAuthService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,