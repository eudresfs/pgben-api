0628ab518da4a5df23ce7f5289ae7e94
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var MonitoramentoAluguelSocialController_1;
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoramentoAluguelSocialController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const monitoramento_aluguel_social_service_1 = require("../services/monitoramento-aluguel-social.service");
const registrar_visita_monitoramento_dto_1 = require("../dto/registrar-visita-monitoramento.dto");
const atualizar_visita_monitoramento_dto_1 = require("../dto/atualizar-visita-monitoramento.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const express_1 = require("express");
const user_permission_entity_1 = require("@/entities/user-permission.entity");
/**
 * Controller para gerenciar o monitoramento de benefícios de Aluguel Social
 */
let MonitoramentoAluguelSocialController = MonitoramentoAluguelSocialController_1 = class MonitoramentoAluguelSocialController {
    monitoramentoService;
    logger = new common_1.Logger(MonitoramentoAluguelSocialController_1.name);
    constructor(monitoramentoService) {
        this.monitoramentoService = monitoramentoService;
    }
    /**
     * Registra uma nova visita de monitoramento para uma solicitação de Aluguel Social
     */
    async registrarVisita(registrarVisitaDto, req) {
        this.logger.log(`Registrando visita para solicitação ${registrarVisitaDto.solicitacao_id}`);
        try {
            await this.monitoramentoService.registrarVisita(registrarVisitaDto.solicitacao_id, registrarVisitaDto.data_visita, registrarVisitaDto.observacoes, req.user);
            return {
                message: 'Visita de monitoramento registrada com sucesso',
                success: true,
            };
        }
        catch (error) {
            if (error.message === 'Solicitação não encontrada') {
                throw new common_1.NotFoundException(error.message);
            }
            if (error.message === 'Solicitação não é de Aluguel Social') {
                throw new common_1.BadRequestException(error.message);
            }
            throw error;
        }
    }
    /**
     * Obtém as solicitações que precisam de monitoramento
     */
    async getSolicitacoesPendentes() {
        const solicitacoes = await this.monitoramentoService.getSolicitacoesParaMonitoramento();
        return {
            total: solicitacoes.length,
            data: solicitacoes,
        };
    }
    /**
     * Obtém as solicitações com alerta de monitoramento próximo
     */
    async getAlertasMonitoramento() {
        const solicitacoes = await this.monitoramentoService.getSolicitacoesComAlertaMonitoramento();
        return {
            total: solicitacoes.length,
            data: solicitacoes,
        };
    }
    /**
     * Verifica se uma solicitação é de Aluguel Social e requer monitoramento
     */
    async verificarStatusMonitoramento(id) {
        const solicitacao = await this.monitoramentoService.getSolicitacaoById(id);
        if (!solicitacao) {
            throw new common_1.NotFoundException('Solicitação não encontrada');
        }
        const isAluguelSocial = this.monitoramentoService.isAluguelSocial(solicitacao);
        const requiresMonitoring = this.monitoramentoService.requiresMonitoring(solicitacao);
        return {
            solicitacao_id: id,
            is_aluguel_social: isAluguelSocial,
            requires_monitoring: requiresMonitoring,
            proxima_visita: solicitacao.dados_complementares?.proxima_visita_monitoramento || null,
            total_visitas: solicitacao.dados_complementares?.visitas_monitoramento?.length || 0,
            ultima_visita: solicitacao.dados_complementares?.visitas_monitoramento?.length > 0
                ? solicitacao.dados_complementares.visitas_monitoramento[solicitacao.dados_complementares.visitas_monitoramento.length - 1]
                : null,
        };
    }
    /**
     * Obtém o histórico de visitas de monitoramento de uma solicitação
     */
    async getHistoricoVisitas(id) {
        const solicitacao = await this.monitoramentoService.getSolicitacaoById(id);
        if (!solicitacao) {
            throw new common_1.NotFoundException('Solicitação não encontrada');
        }
        if (!this.monitoramentoService.isAluguelSocial(solicitacao)) {
            throw new common_1.BadRequestException('Solicitação não é de Aluguel Social');
        }
        const visitas = solicitacao.dados_complementares?.visitas_monitoramento || [];
        return {
            solicitacao_id: id,
            protocolo: solicitacao.protocolo,
            total_visitas: visitas.length,
            proxima_visita: solicitacao.dados_complementares?.proxima_visita_monitoramento || null,
            visitas: visitas,
        };
    }
    /**
     * Atualiza parcialmente uma visita de monitoramento existente
     */
    async atualizarVisita(id, indice, atualizarVisitaDto, req) {
        this.logger.log(`Atualizando visita ${indice} para solicitação ${id}`);
        try {
            const visitaAtualizada = await this.monitoramentoService.atualizarVisitaMonitoramento(id, indice, {
                data_visita: atualizarVisitaDto.data_visita,
                observacoes: atualizarVisitaDto.observacoes,
                dados_adicionais: atualizarVisitaDto.dados_adicionais,
            }, req.user);
            return {
                message: 'Visita de monitoramento atualizada com sucesso',
                success: true,
                visita: visitaAtualizada,
            };
        }
        catch (error) {
            if (error.message === 'Solicitação não encontrada') {
                throw new common_1.NotFoundException(error.message);
            }
            if (error.message === 'Solicitação não é de Aluguel Social') {
                throw new common_1.BadRequestException(error.message);
            }
            if (error.message ===
                'Solicitação não possui visitas de monitoramento registradas') {
                throw new common_1.BadRequestException(error.message);
            }
            if (error.message === 'Visita não encontrada com o índice fornecido') {
                throw new common_1.NotFoundException(error.message);
            }
            throw error;
        }
    }
    /**
     * Remove uma visita de monitoramento existente
     */
    async removerVisita(id, indice, req) {
        this.logger.log(`Removendo visita ${indice} da solicitação ${id}`);
        try {
            const resultado = await this.monitoramentoService.removerVisitaMonitoramento(id, indice, req.user);
            return {
                message: 'Visita de monitoramento removida com sucesso',
                success: true,
                proximaVisitaAtualizada: resultado.proximaVisitaAtualizada,
            };
        }
        catch (error) {
            if (error.message === 'Solicitação não encontrada') {
                throw new common_1.NotFoundException(error.message);
            }
            if (error.message === 'Solicitação não é de Aluguel Social') {
                throw new common_1.BadRequestException(error.message);
            }
            if (error.message ===
                'Solicitação não possui visitas de monitoramento registradas') {
                throw new common_1.BadRequestException(error.message);
            }
            if (error.message === 'Visita não encontrada com o índice fornecido') {
                throw new common_1.NotFoundException(error.message);
            }
            throw error;
        }
    }
};
exports.MonitoramentoAluguelSocialController = MonitoramentoAluguelSocialController;
__decorate([
    (0, common_1.Post)('registrar-visita'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.registrar_visita_monitoramento',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Registra visita de monitoramento',
        description: 'Registra uma visita de monitoramento para uma solicitação de Aluguel Social',
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Visita registrada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Solicitação inválida ou não é de Aluguel Social',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Solicitação não encontrada',
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof registrar_visita_monitoramento_dto_1.RegistrarVisitaMonitoramentoDto !== "undefined" && registrar_visita_monitoramento_dto_1.RegistrarVisitaMonitoramentoDto) === "function" ? _b : Object, typeof (_c = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], MonitoramentoAluguelSocialController.prototype, "registrarVisita", null);
__decorate([
    (0, common_1.Get)('pendentes'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.listar_monitoramento_pendente',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Lista solicitações pendentes de monitoramento',
        description: 'Retorna a lista de solicitações de Aluguel Social que precisam de monitoramento',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de solicitações retornada com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MonitoramentoAluguelSocialController.prototype, "getSolicitacoesPendentes", null);
__decorate([
    (0, common_1.Get)('alertas'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.listar_monitoramento_alertas',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Lista solicitações com alerta de monitoramento',
        description: 'Retorna a lista de solicitações de Aluguel Social com monitoramento próximo',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de alertas retornada com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MonitoramentoAluguelSocialController.prototype, "getAlertasMonitoramento", null);
__decorate([
    (0, common_1.Get)(':id/status-monitoramento'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.verificar_status_monitoramento',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Verifica status de monitoramento',
        description: 'Verifica se uma solicitação é de Aluguel Social e requer monitoramento',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da solicitação a ser verificada',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status de monitoramento retornado com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Solicitação não encontrada',
    }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MonitoramentoAluguelSocialController.prototype, "verificarStatusMonitoramento", null);
__decorate([
    (0, common_1.Get)(':id/historico-visitas'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.consultar_historico_visitas',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Obtém histórico de visitas',
        description: 'Retorna o histórico completo de visitas de monitoramento de uma solicitação',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da solicitação',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Histórico de visitas retornado com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Solicitação não encontrada',
    }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], MonitoramentoAluguelSocialController.prototype, "getHistoricoVisitas", null);
__decorate([
    (0, common_1.Patch)(':id/visitas/:indice'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.atualizar_visita_monitoramento',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualiza uma visita de monitoramento',
        description: 'Permite atualizar parcialmente os dados de uma visita de monitoramento existente',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da solicitação',
    }),
    (0, swagger_1.ApiParam)({
        name: 'indice',
        description: 'Índice da visita no array de visitas',
        type: 'number',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Visita atualizada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Solicitação inválida ou dados incorretos',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Solicitação ou visita não encontrada',
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Param)('indice', common_1.ParseIntPipe)),
    __param(2, (0, common_1.Body)()),
    __param(3, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number, typeof (_d = typeof atualizar_visita_monitoramento_dto_1.AtualizarVisitaMonitoramentoDto !== "undefined" && atualizar_visita_monitoramento_dto_1.AtualizarVisitaMonitoramentoDto) === "function" ? _d : Object, typeof (_e = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], MonitoramentoAluguelSocialController.prototype, "atualizarVisita", null);
__decorate([
    (0, common_1.Delete)(':id/visitas/:indice'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.remover_visita_monitoramento',
        scopeType: user_permission_entity_1.TipoEscopo.UNIDADE,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Remove uma visita de monitoramento',
        description: 'Remove uma visita de monitoramento existente da solicitação',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID da solicitação',
    }),
    (0, swagger_1.ApiParam)({
        name: 'indice',
        description: 'Índice da visita no array de visitas',
        type: 'number',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Visita removida com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Solicitação inválida ou operação não permitida',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Solicitação ou visita não encontrada',
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Param)('indice', common_1.ParseIntPipe)),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number, typeof (_f = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _f : Object]),
    __metadata("design:returntype", Promise)
], MonitoramentoAluguelSocialController.prototype, "removerVisita", null);
exports.MonitoramentoAluguelSocialController = MonitoramentoAluguelSocialController = MonitoramentoAluguelSocialController_1 = __decorate([
    (0, swagger_1.ApiTags)('Monitoramento de Aluguel Social'),
    (0, common_1.Controller)('monitoramento-aluguel-social'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),
    __metadata("design:paramtypes", [typeof (_a = typeof monitoramento_aluguel_social_service_1.MonitoramentoAluguelSocialService !== "undefined" && monitoramento_aluguel_social_service_1.MonitoramentoAluguelSocialService) === "function" ? _a : Object])
], MonitoramentoAluguelSocialController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,