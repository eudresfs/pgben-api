c171bffda45f977afad1a249b6c70ca1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var HealthCheckService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthCheckService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
/**
 * Serviço para verificar a saúde de serviços externos como Redis,
 * permitindo que a aplicação inicialize mesmo com falhas em serviços não-críticos
 */
let HealthCheckService = HealthCheckService_1 = class HealthCheckService {
    configService;
    logger = new common_1.Logger(HealthCheckService_1.name);
    constructor(configService) {
        this.configService = configService;
    }
    /**
     * Verifica a disponibilidade do Redis
     * @returns true se o Redis estiver disponível, false caso contrário
     */
    async isRedisAvailable() {
        // TEMPORÁRIO: Desabilitando verificação do Redis para evitar travamento
        this.logger.warn('⚠️ Verificação do Redis desabilitada temporariamente para evitar travamento');
        return false;
        // TODO: Reabilitar após resolver problemas de conectividade
        /*
        // Verificar se o Redis está desabilitado por configuração
        const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';
        
        if (disableRedis) {
          this.logger.warn('Redis desabilitado por configuração. Algumas funcionalidades não estarão disponíveis.');
          return false;
        }
        
        const host = this.configService.get('REDIS_HOST', 'localhost');
        const port = parseInt(this.configService.get('REDIS_PORT', '6379'));
        const password = this.configService.get('REDIS_PASSWORD', '');
    
        const redis = new Redis({
          host,
          port,
          password,
          connectTimeout: 3000,
          maxRetriesPerRequest: 1,
          retryStrategy: () => null,
        });
    
        try {
          this.logger.log(`Verificando conexão com Redis em ${host}:${port}...`);
          await redis.ping();
          this.logger.log('Conexão com Redis estabelecida com sucesso');
          await redis.quit();
          return true;
        } catch (error) {
          this.logger.warn(`Redis não disponível: ${error.message}`);
          try {
            await redis.quit();
          } catch {}
          return false;
        }
        */
    }
    /**
     * Imprime informações sobre o status dos serviços externos
     * @param redisAvailable Status da disponibilidade do Redis
     */
    logServicesStatus(redisAvailable) {
        this.logger.log('========== Status dos Serviços Externos ==========');
        // Verificar se o Redis está desabilitado por configuração
        const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';
        if (disableRedis) {
            this.logger.log(`Redis: DESABILITADO POR CONFIGURAÇÃO ⚠️`);
            this.logger.warn('⚠️ Redis desabilitado intencionalmente. Funcionalidades que dependem de filas estão desativadas.');
        }
        else {
            this.logger.log(`Redis: ${redisAvailable ? 'DISPONÍVEL ✅' : 'INDISPONÍVEL ❌'}`);
            if (!redisAvailable) {
                this.logger.warn('⚠️ Redis indisponível: funcionalidades que dependem de filas não funcionarão corretamente');
                this.logger.warn('⚠️ Serviços afetados: Auditoria assíncrona, processamento em background');
            }
        }
        this.logger.log('==================================================');
    }
};
exports.HealthCheckService = HealthCheckService;
exports.HealthCheckService = HealthCheckService = HealthCheckService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], HealthCheckService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcc2VydmljZXNcXGhlYWx0aC1jaGVjay5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQW9EO0FBQ3BELDJDQUErQztBQUcvQzs7O0dBR0c7QUFFSSxJQUFNLGtCQUFrQiwwQkFBeEIsTUFBTSxrQkFBa0I7SUFHVDtJQUZILE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxvQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUU5RCxZQUFvQixhQUE0QjtRQUE1QixrQkFBYSxHQUFiLGFBQWEsQ0FBZTtJQUFHLENBQUM7SUFFcEQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQjtRQUNwQix3RUFBd0U7UUFDeEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsNkVBQTZFLENBQUMsQ0FBQztRQUNoRyxPQUFPLEtBQUssQ0FBQztRQUViLDREQUE0RDtRQUM1RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7VUFtQ0U7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssaUJBQWlCLENBQUMsY0FBdUI7UUFDL0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsb0RBQW9ELENBQUMsQ0FBQztRQUV0RSwwREFBMEQ7UUFDMUQsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEtBQUssTUFBTSxDQUFDO1FBRXhFLElBQUksWUFBWSxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMseUNBQXlDLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrR0FBa0csQ0FBQyxDQUFDO1FBQ3ZILENBQUM7YUFBTSxDQUFDO1lBQ04sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBQ2hGLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkZBQTJGLENBQUMsQ0FBQztnQkFDOUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMseUVBQXlFLENBQUMsQ0FBQztZQUM5RixDQUFDO1FBQ0gsQ0FBQztRQUVELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLG9EQUFvRCxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNGLENBQUE7QUE1RVksZ0RBQWtCOzZCQUFsQixrQkFBa0I7SUFEOUIsSUFBQSxtQkFBVSxHQUFFO3lEQUl3QixzQkFBYSxvQkFBYixzQkFBYTtHQUhyQyxrQkFBa0IsQ0E0RTlCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXHNlcnZpY2VzXFxoZWFsdGgtY2hlY2suc2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBMb2dnZXIgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBDb25maWdTZXJ2aWNlIH0gZnJvbSAnQG5lc3Rqcy9jb25maWcnO1xuaW1wb3J0IFJlZGlzIGZyb20gJ2lvcmVkaXMnO1xuXG4vKipcbiAqIFNlcnZpw6dvIHBhcmEgdmVyaWZpY2FyIGEgc2HDumRlIGRlIHNlcnZpw6dvcyBleHRlcm5vcyBjb21vIFJlZGlzLCBcbiAqIHBlcm1pdGluZG8gcXVlIGEgYXBsaWNhw6fDo28gaW5pY2lhbGl6ZSBtZXNtbyBjb20gZmFsaGFzIGVtIHNlcnZpw6dvcyBuw6NvLWNyw610aWNvc1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSGVhbHRoQ2hlY2tTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKEhlYWx0aENoZWNrU2VydmljZS5uYW1lKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZ1NlcnZpY2U6IENvbmZpZ1NlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIGEgZGlzcG9uaWJpbGlkYWRlIGRvIFJlZGlzXG4gICAqIEByZXR1cm5zIHRydWUgc2UgbyBSZWRpcyBlc3RpdmVyIGRpc3BvbsOtdmVsLCBmYWxzZSBjYXNvIGNvbnRyw6FyaW9cbiAgICovXG4gIGFzeW5jIGlzUmVkaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8gVEVNUE9Sw4FSSU86IERlc2FiaWxpdGFuZG8gdmVyaWZpY2HDp8OjbyBkbyBSZWRpcyBwYXJhIGV2aXRhciB0cmF2YW1lbnRvXG4gICAgdGhpcy5sb2dnZXIud2Fybign4pqg77iPIFZlcmlmaWNhw6fDo28gZG8gUmVkaXMgZGVzYWJpbGl0YWRhIHRlbXBvcmFyaWFtZW50ZSBwYXJhIGV2aXRhciB0cmF2YW1lbnRvJyk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgIC8vIFRPRE86IFJlYWJpbGl0YXIgYXDDs3MgcmVzb2x2ZXIgcHJvYmxlbWFzIGRlIGNvbmVjdGl2aWRhZGVcbiAgICAvKlxuICAgIC8vIFZlcmlmaWNhciBzZSBvIFJlZGlzIGVzdMOhIGRlc2FiaWxpdGFkbyBwb3IgY29uZmlndXJhw6fDo29cbiAgICBjb25zdCBkaXNhYmxlUmVkaXMgPSB0aGlzLmNvbmZpZ1NlcnZpY2UuZ2V0KCdESVNBQkxFX1JFRElTJykgPT09ICd0cnVlJztcbiAgICBcbiAgICBpZiAoZGlzYWJsZVJlZGlzKSB7XG4gICAgICB0aGlzLmxvZ2dlci53YXJuKCdSZWRpcyBkZXNhYmlsaXRhZG8gcG9yIGNvbmZpZ3VyYcOnw6NvLiBBbGd1bWFzIGZ1bmNpb25hbGlkYWRlcyBuw6NvIGVzdGFyw6NvIGRpc3BvbsOtdmVpcy4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgaG9zdCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQoJ1JFRElTX0hPU1QnLCAnbG9jYWxob3N0Jyk7XG4gICAgY29uc3QgcG9ydCA9IHBhcnNlSW50KHRoaXMuY29uZmlnU2VydmljZS5nZXQoJ1JFRElTX1BPUlQnLCAnNjM3OScpKTtcbiAgICBjb25zdCBwYXNzd29yZCA9IHRoaXMuY29uZmlnU2VydmljZS5nZXQoJ1JFRElTX1BBU1NXT1JEJywgJycpO1xuXG4gICAgY29uc3QgcmVkaXMgPSBuZXcgUmVkaXMoe1xuICAgICAgaG9zdCxcbiAgICAgIHBvcnQsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIGNvbm5lY3RUaW1lb3V0OiAzMDAwLFxuICAgICAgbWF4UmV0cmllc1BlclJlcXVlc3Q6IDEsXG4gICAgICByZXRyeVN0cmF0ZWd5OiAoKSA9PiBudWxsLFxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhgVmVyaWZpY2FuZG8gY29uZXjDo28gY29tIFJlZGlzIGVtICR7aG9zdH06JHtwb3J0fS4uLmApO1xuICAgICAgYXdhaXQgcmVkaXMucGluZygpO1xuICAgICAgdGhpcy5sb2dnZXIubG9nKCdDb25leMOjbyBjb20gUmVkaXMgZXN0YWJlbGVjaWRhIGNvbSBzdWNlc3NvJyk7XG4gICAgICBhd2FpdCByZWRpcy5xdWl0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIud2FybihgUmVkaXMgbsOjbyBkaXNwb27DrXZlbDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgcmVkaXMucXVpdCgpO1xuICAgICAgfSBjYXRjaCB7fVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAqL1xuICB9XG5cbiAgLyoqXG4gICAqIEltcHJpbWUgaW5mb3JtYcOnw7VlcyBzb2JyZSBvIHN0YXR1cyBkb3Mgc2VydmnDp29zIGV4dGVybm9zXG4gICAqIEBwYXJhbSByZWRpc0F2YWlsYWJsZSBTdGF0dXMgZGEgZGlzcG9uaWJpbGlkYWRlIGRvIFJlZGlzXG4gICAqL1xuICBwcml2YXRlIGxvZ1NlcnZpY2VzU3RhdHVzKHJlZGlzQXZhaWxhYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy5sb2dnZXIubG9nKCc9PT09PT09PT09IFN0YXR1cyBkb3MgU2VydmnDp29zIEV4dGVybm9zID09PT09PT09PT0nKTtcbiAgICBcbiAgICAvLyBWZXJpZmljYXIgc2UgbyBSZWRpcyBlc3TDoSBkZXNhYmlsaXRhZG8gcG9yIGNvbmZpZ3VyYcOnw6NvXG4gICAgY29uc3QgZGlzYWJsZVJlZGlzID0gdGhpcy5jb25maWdTZXJ2aWNlLmdldCgnRElTQUJMRV9SRURJUycpID09PSAndHJ1ZSc7XG4gICAgXG4gICAgaWYgKGRpc2FibGVSZWRpcykge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKGBSZWRpczogREVTQUJJTElUQURPIFBPUiBDT05GSUdVUkHDh8ODTyDimqDvuI9gKTtcbiAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ+KaoO+4jyBSZWRpcyBkZXNhYmlsaXRhZG8gaW50ZW5jaW9uYWxtZW50ZS4gRnVuY2lvbmFsaWRhZGVzIHF1ZSBkZXBlbmRlbSBkZSBmaWxhcyBlc3TDo28gZGVzYXRpdmFkYXMuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhgUmVkaXM6ICR7cmVkaXNBdmFpbGFibGUgPyAnRElTUE9Ow41WRUwg4pyFJyA6ICdJTkRJU1BPTsONVkVMIOKdjCd9YCk7XG4gICAgICBpZiAoIXJlZGlzQXZhaWxhYmxlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ+KaoO+4jyBSZWRpcyBpbmRpc3BvbsOtdmVsOiBmdW5jaW9uYWxpZGFkZXMgcXVlIGRlcGVuZGVtIGRlIGZpbGFzIG7Do28gZnVuY2lvbmFyw6NvIGNvcnJldGFtZW50ZScpO1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKCfimqDvuI8gU2VydmnDp29zIGFmZXRhZG9zOiBBdWRpdG9yaWEgYXNzw61uY3JvbmEsIHByb2Nlc3NhbWVudG8gZW0gYmFja2dyb3VuZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB0aGlzLmxvZ2dlci5sb2coJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Jyk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==