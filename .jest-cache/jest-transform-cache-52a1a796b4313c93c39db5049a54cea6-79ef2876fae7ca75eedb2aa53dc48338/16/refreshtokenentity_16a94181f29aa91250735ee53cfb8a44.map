{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\refresh-token.entity.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\refresh-token.entity.ts"],"sourcesContent":["// src/auth/entities/refresh-token.entity.ts\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport {\n  IsNotEmpty,\n  IsUUID,\n  IsBoolean,\n  IsOptional,\n  IsString,\n  IsDateString,\n  Length,\n} from 'class-validator';\nimport { Usuario } from './usuario.entity';\n\n@Entity('refresh_tokens')\n@Index(['usuario_id'])\n@Index(['token'], { unique: true })\n@Index(['expires_at'])\n@Index(['revoked'])\n@Index(['usuario_id', 'revoked'])\nexport class RefreshToken {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ name: 'usuario_id', type: 'uuid', nullable: false })\n  @IsNotEmpty({ message: 'ID do usuário é obrigatório' })\n  @IsUUID('4', { message: 'ID do usuário inválido' })\n  usuario_id: string;\n\n  @Column({ type: 'varchar', length: 500, unique: true })\n  @IsNotEmpty({ message: 'Token é obrigatório' })\n  @IsString({ message: 'Token deve ser uma string' })\n  @Length(10, 500, { message: 'Token deve ter entre 10 e 500 caracteres' })\n  token: string;\n\n  @Column({ name: 'expires_at', type: 'timestamp with time zone' })\n  expires_at: Date;\n\n  @Column({ type: 'boolean', default: false })\n  @IsBoolean({ message: 'Revoked deve ser um boolean' })\n  revoked: boolean;\n\n  @Column({\n    name: 'revoked_at',\n    type: 'timestamp with time zone',\n    nullable: true,\n  })\n  revoked_at: Date | null;\n\n  @Column({\n    name: 'revoked_by_ip',\n    type: 'varchar',\n    length: 45,\n    nullable: true,\n  })\n  @IsOptional()\n  @IsString({ message: 'IP deve ser uma string' })\n  @Length(7, 45, { message: 'IP deve ter entre 7 e 45 caracteres' })\n  revokedByIp: string | null;\n\n  @Column({\n    name: 'replaced_by_token',\n    type: 'varchar',\n    length: 500,\n    nullable: true,\n  })\n  @IsOptional()\n  @IsString({ message: 'Token de substituição deve ser uma string' })\n  @Length(10, 500, {\n    message: 'Token de substituição deve ter entre 10 e 500 caracteres',\n  })\n  replacedByToken: string | null;\n\n  @CreateDateColumn({ name: 'created_at', type: 'timestamp with time zone' })\n  created_at: Date;\n\n  @UpdateDateColumn({ name: 'updated_at', type: 'timestamp with time zone' })\n  updated_at: Date;\n\n  @ManyToOne(() => Usuario, (usuario) => usuario.refreshTokens, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn({ name: 'usuario_id', referencedColumnName: 'id' })\n  usuario: Usuario;\n\n  // Métodos utilitários\n  /**\n   * Verifica se o token está expirado\n   */\n  isExpired(): boolean {\n    return new Date() > this.expires_at;\n  }\n\n  /**\n   * Verifica se o token está ativo (não revogado e não expirado)\n   */\n  isActive(): boolean {\n    return !this.revoked && !this.isExpired();\n  }\n\n  /**\n   * Revoga o token\n   */\n  revoke(ip?: string, replacedByToken?: string): void {\n    this.revoked = true;\n    this.revoked_at = new Date();\n    if (ip) {\n      this.revokedByIp = ip;\n    }\n    if (replacedByToken) {\n      this.replacedByToken = replacedByToken;\n    }\n  }\n\n  /**\n   * Verifica se o token foi revogado\n   */\n  isRevoked(): boolean {\n    return this.revoked;\n  }\n\n  /**\n   * Calcula o tempo restante até a expiração em milissegundos\n   */\n  getTimeToExpiration(): number {\n    const now = new Date().getTime();\n    const expiration = this.expires_at.getTime();\n    return Math.max(0, expiration - now);\n  }\n\n  /**\n   * Verifica se o token expira em breve (próximos X minutos)\n   */\n  isExpiringWithin(minutes: number): boolean {\n    const timeToExpiration = this.getTimeToExpiration();\n    const minutesInMs = minutes * 60 * 1000;\n    return timeToExpiration <= minutesInMs && timeToExpiration > 0;\n  }\n\n  /**\n   * Obtém informações de status do token\n   */\n  getStatus(): {\n    isActive: boolean;\n    isExpired: boolean;\n    isRevoked: boolean;\n    timeToExpiration: number;\n  } {\n    return {\n      isActive: this.isActive(),\n      isExpired: this.isExpired(),\n      isRevoked: this.isRevoked(),\n      timeToExpiration: this.getTimeToExpiration(),\n    };\n  }\n\n  /**\n   * Verifica se o token pertence a um usuário específico\n   */\n  belongsToUser(userId: string): boolean {\n    return this.usuario_id === userId;\n  }\n\n  /**\n   * Gera uma chave única para o token\n   */\n  getUniqueKey(): string {\n    return `refresh_token_${this.usuario_id}_${this.id}`;\n  }\n\n  /**\n   * Verifica se o token foi criado recentemente (últimas X horas)\n   */\n  isCriadoRecentemente(horas: number = 1): boolean {\n    if (!this.created_at) return false;\n\n    const agora = new Date();\n    const horasAtras = new Date(agora.getTime() - horas * 60 * 60 * 1000);\n\n    return this.created_at > horasAtras;\n  }\n\n  /**\n   * Calcula a idade do token em horas\n   */\n  getIdadeEmHoras(): number {\n    if (!this.created_at) return 0;\n\n    const agora = new Date();\n    const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());\n    const diffHours = Math.floor(diffTime / (1000 * 60 * 60));\n\n    return diffHours;\n  }\n\n  /**\n   * Calcula quantos minutos restam até a expiração\n   */\n  getMinutosAteExpiracao(): number {\n    const timeToExpiration = this.getTimeToExpiration();\n    return Math.floor(timeToExpiration / (1000 * 60));\n  }\n\n  /**\n   * Verifica se o token foi substituído por outro\n   */\n  foiSubstituido(): boolean {\n    return !!this.replacedByToken;\n  }\n\n  /**\n   * Verifica se o token foi revogado por IP específico\n   */\n  foiRevogadoPorIp(ip: string): boolean {\n    return this.isRevoked() && this.revokedByIp === ip;\n  }\n\n  /**\n   * Obtém informações detalhadas do token\n   */\n  getDetalhes(): {\n    id: string;\n    usuario_id: string;\n    ativo: boolean;\n    expirado: boolean;\n    revogado: boolean;\n    criadoEm: Date;\n    expiraEm: Date;\n    minutosRestantes: number;\n    idadeEmHoras: number;\n    foiSubstituido: boolean;\n  } {\n    return {\n      id: this.id,\n      usuario_id: this.usuario_id,\n      ativo: this.isActive(),\n      expirado: this.isExpired(),\n      revogado: this.isRevoked(),\n      criadoEm: this.created_at,\n      expiraEm: this.expires_at,\n      minutosRestantes: this.getMinutosAteExpiracao(),\n      idadeEmHoras: this.getIdadeEmHoras(),\n      foiSubstituido: this.foiSubstituido(),\n    };\n  }\n\n  /**\n   * Verifica se o token está em estado válido\n   */\n  isValido(): boolean {\n    return (\n      !!this.token &&\n      !!this.usuario_id &&\n      !!this.expires_at &&\n      this.expires_at > new Date()\n    );\n  }\n\n  /**\n   * Verifica se o token pode ser renovado\n   */\n  podeSerRenovado(): boolean {\n    return this.isActive() && !this.isExpiringWithin(5); // Não renova se expira em menos de 5 minutos\n  }\n\n  /**\n   * Obtém o tempo de vida útil do token em horas\n   */\n  getTempoVidaUtil(): number {\n    if (!this.created_at || !this.expires_at) return 0;\n\n    const diffTime = this.expires_at.getTime() - this.created_at.getTime();\n    return Math.floor(diffTime / (1000 * 60 * 60));\n  }\n\n  /**\n   * Verifica se o token está próximo da expiração (últimos 10% do tempo de vida)\n   */\n  isProximoExpiracao(): boolean {\n    const tempoVidaUtil = this.getTempoVidaUtil();\n    const tempoRestante = this.getMinutosAteExpiracao() / 60; // Converter para horas\n\n    return tempoRestante <= tempoVidaUtil * 0.1;\n  }\n\n  /**\n   * Formata a data de expiração para exibição\n   */\n  getExpiracaoFormatada(): string {\n    return this.expires_at.toLocaleString('pt-BR', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n    });\n  }\n\n  /**\n   * Obtém um resumo do status do token\n   */\n  getStatusResumo(): string {\n    if (this.isRevoked()) {\n      return `Revogado em ${this.revoked_at?.toLocaleString('pt-BR')}`;\n    }\n\n    if (this.isExpired()) {\n      return `Expirado em ${this.getExpiracaoFormatada()}`;\n    }\n\n    if (this.isProximoExpiracao()) {\n      return `Expira em ${this.getMinutosAteExpiracao()} minutos`;\n    }\n\n    return 'Ativo';\n  }\n}\n"],"version":3}