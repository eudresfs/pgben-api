{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\health-check.service.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,2CAA+C;AAG/C;;;GAGG;AAEI,IAAM,kBAAkB,0BAAxB,MAAM,kBAAkB;IAGT;IAFH,MAAM,GAAG,IAAI,eAAM,CAAC,oBAAkB,CAAC,IAAI,CAAC,CAAC;IAE9D,YAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAAG,CAAC;IAEpD;;;OAGG;IACH,KAAK,CAAC,gBAAgB;QACpB,wEAAwE;QACxE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6EAA6E,CAAC,CAAC;QAChG,OAAO,KAAK,CAAC;QAEb,4DAA4D;QAC5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmCE;IACJ,CAAC;IAED;;;OAGG;IACK,iBAAiB,CAAC,cAAuB;QAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;QAEtE,0DAA0D;QAC1D,MAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,MAAM,CAAC;QAExE,IAAI,YAAY,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kGAAkG,CAAC,CAAC;QACvH,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,gBAAgB,EAAE,CAAC,CAAC;YAChF,IAAI,CAAC,cAAc,EAAE,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2FAA2F,CAAC,CAAC;gBAC9G,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAC;YAC9F,CAAC;QACH,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;CACF,CAAA;AA5EY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;yDAIwB,sBAAa,oBAAb,sBAAa;GAHrC,kBAAkB,CA4E9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\health-check.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Redis from 'ioredis';\n\n/**\n * Serviço para verificar a saúde de serviços externos como Redis, \n * permitindo que a aplicação inicialize mesmo com falhas em serviços não-críticos\n */\n@Injectable()\nexport class HealthCheckService {\n  private readonly logger = new Logger(HealthCheckService.name);\n\n  constructor(private configService: ConfigService) {}\n\n  /**\n   * Verifica a disponibilidade do Redis\n   * @returns true se o Redis estiver disponível, false caso contrário\n   */\n  async isRedisAvailable(): Promise<boolean> {\n    // TEMPORÁRIO: Desabilitando verificação do Redis para evitar travamento\n    this.logger.warn('⚠️ Verificação do Redis desabilitada temporariamente para evitar travamento');\n    return false;\n    \n    // TODO: Reabilitar após resolver problemas de conectividade\n    /*\n    // Verificar se o Redis está desabilitado por configuração\n    const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';\n    \n    if (disableRedis) {\n      this.logger.warn('Redis desabilitado por configuração. Algumas funcionalidades não estarão disponíveis.');\n      return false;\n    }\n    \n    const host = this.configService.get('REDIS_HOST', 'localhost');\n    const port = parseInt(this.configService.get('REDIS_PORT', '6379'));\n    const password = this.configService.get('REDIS_PASSWORD', '');\n\n    const redis = new Redis({\n      host,\n      port,\n      password,\n      connectTimeout: 3000,\n      maxRetriesPerRequest: 1,\n      retryStrategy: () => null,\n    });\n\n    try {\n      this.logger.log(`Verificando conexão com Redis em ${host}:${port}...`);\n      await redis.ping();\n      this.logger.log('Conexão com Redis estabelecida com sucesso');\n      await redis.quit();\n      return true;\n    } catch (error) {\n      this.logger.warn(`Redis não disponível: ${error.message}`);\n      try {\n        await redis.quit();\n      } catch {}\n      return false;\n    }\n    */\n  }\n\n  /**\n   * Imprime informações sobre o status dos serviços externos\n   * @param redisAvailable Status da disponibilidade do Redis\n   */\n  private logServicesStatus(redisAvailable: boolean): void {\n    this.logger.log('========== Status dos Serviços Externos ==========');\n    \n    // Verificar se o Redis está desabilitado por configuração\n    const disableRedis = this.configService.get('DISABLE_REDIS') === 'true';\n    \n    if (disableRedis) {\n      this.logger.log(`Redis: DESABILITADO POR CONFIGURAÇÃO ⚠️`);\n      this.logger.warn('⚠️ Redis desabilitado intencionalmente. Funcionalidades que dependem de filas estão desativadas.');\n    } else {\n      this.logger.log(`Redis: ${redisAvailable ? 'DISPONÍVEL ✅' : 'INDISPONÍVEL ❌'}`);\n      if (!redisAvailable) {\n        this.logger.warn('⚠️ Redis indisponível: funcionalidades que dependem de filas não funcionarão corretamente');\n        this.logger.warn('⚠️ Serviços afetados: Auditoria assíncrona, processamento em background');\n      }\n    }\n    \n    this.logger.log('==================================================');\n  }\n}\n"],"version":3}