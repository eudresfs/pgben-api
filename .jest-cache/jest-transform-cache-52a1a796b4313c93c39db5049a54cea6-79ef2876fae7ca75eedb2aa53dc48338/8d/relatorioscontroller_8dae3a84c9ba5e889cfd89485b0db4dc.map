{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\controllers\\relatorios.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\controllers\\relatorios.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Query,\n  UseGuards,\n  Req,\n  Res,\n  BadRequestException,\n  Post,\n  Body,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n  ApiBody,\n  ApiConsumes,\n  ApiProduces,\n} from '@nestjs/swagger';\nimport { RelatoriosService } from '../services/relatorios.service';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { ScopeType } from '../../../entities/user-permission.entity';\nimport { Request, Response } from 'express';\nimport {\n  RelatorioBeneficiosDto,\n  RelatorioSolicitacoesDto,\n  RelatorioAtendimentosDto,\n} from '../dto';\n\n/**\n * Controlador de Relatórios\n *\n * Responsável por gerenciar as rotas relacionadas aos relatórios\n * gerenciais e operacionais do sistema\n */\n@ApiTags('Relatórios')\n@Controller('relatorios')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class RelatoriosController {\n  [x: string]: any;\n  constructor(private readonly relatoriosService: RelatoriosService) {}\n\n  /**\n   * Gera relatório de benefícios concedidos por período\n   *\n   * @param req Request Express\n   * @param res Response Express\n   * @param dto Parâmetros do relatório\n   * @returns Stream do relatório no formato solicitado\n   */\n  @Get('beneficios-concedidos')\n  @RequiresPermission({\n    permissionName: 'relatorio.beneficios.concedidos',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'query.unidade_id',\n  })\n  @ApiOperation({\n    summary: 'Gera relatório de benefícios concedidos',\n    description:\n      'Gera um relatório detalhado de benefícios concedidos no período especificado, com opções de filtro por unidade e tipo de benefício. O relatório pode ser gerado em formato PDF, Excel ou CSV.',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)',\n    content: {\n      'application/pdf': {\n        schema: { type: 'string', format: 'binary' },\n      },\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {\n        schema: { type: 'string', format: 'binary' },\n      },\n      'text/csv': {\n        schema: { type: 'string', format: 'binary' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Parâmetros inválidos - Data inicial e final são obrigatórias',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado - Token JWT ausente ou inválido',\n  })\n  @ApiResponse({\n    status: 403,\n    description:\n      'Permissão negada - Usuário não possui permissão para acessar este relatório',\n  })\n  @ApiResponse({ status: 500, description: 'Erro interno do servidor' })\n  async beneficiosConcedidos(\n    @Req() req: Request,\n    @Res() res: Response,\n    @Query() dto: RelatorioBeneficiosDto,\n  ) {\n    if (!dto.data_inicio || !dto.data_fim) {\n      throw new BadRequestException('Data inicial e final são obrigatórias');\n    }\n\n    const relatorio =\n      await this.relatoriosService.gerarRelatorioBeneficiosConcedidos({\n        dataInicio: dto.data_inicio,\n        dataFim: dto.data_fim,\n        unidadeId: dto.unidade_id,\n        tipoBeneficioId: dto.tipo_beneficio_id,\n        formato: dto.formato,\n        user: req.user,\n      });\n\n    // Configurar cabeçalhos da resposta de acordo com o formato\n    if (dto.formato === 'pdf') {\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=beneficios-concedidos.pdf',\n      );\n    } else if (dto.formato === 'excel') {\n      res.setHeader(\n        'Content-Type',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      );\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=beneficios-concedidos.xlsx',\n      );\n    } else if (dto.formato === 'csv') {\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=beneficios-concedidos.csv',\n      );\n    }\n\n    return res.send(relatorio);\n  }\n\n  /**\n   * Gera relatório de solicitações por status\n   *\n   * @param req Request Express\n   * @param res Response Express\n   * @param dto Parâmetros do relatório\n   * @returns Stream do relatório no formato solicitado\n   */\n  @Get('solicitacoes-por-status')\n  @RequiresPermission({\n    permissionName: 'relatorio.solicitacoes.status',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'query.unidade_id',\n  })\n  @ApiOperation({\n    summary: 'Gera relatório de solicitações por status',\n    description:\n      'Gera um relatório detalhado de solicitações agrupadas por status no período especificado, com opção de filtro por unidade. O relatório pode ser gerado em formato PDF, Excel ou CSV.',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)',\n    content: {\n      'application/pdf': {\n        schema: { type: 'string', format: 'binary' },\n      },\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {\n        schema: { type: 'string', format: 'binary' },\n      },\n      'text/csv': {\n        schema: { type: 'string', format: 'binary' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Parâmetros inválidos - Data inicial e final são obrigatórias',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado - Token JWT ausente ou inválido',\n  })\n  @ApiResponse({\n    status: 403,\n    description:\n      'Permissão negada - Usuário não possui permissão para acessar este relatório',\n  })\n  @ApiResponse({ status: 500, description: 'Erro interno do servidor' })\n  async solicitacoesPorStatus(\n    @Req() req: Request,\n    @Res() res: Response,\n    @Query() dto: RelatorioSolicitacoesDto,\n  ) {\n    if (!dto.data_inicio || !dto.data_fim) {\n      throw new BadRequestException('Data inicial e final são obrigatórias');\n    }\n\n    const relatorio =\n      await this.relatoriosService.gerarRelatorioSolicitacoesPorStatus({\n        dataInicio: dto.data_inicio,\n        dataFim: dto.data_fim,\n        unidadeId: dto.unidade_id,\n        formato: dto.formato,\n        user: req.user,\n      });\n\n    // Configurar cabeçalhos da resposta de acordo com o formato\n    if (dto.formato === 'pdf') {\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=solicitacoes-por-status.pdf',\n      );\n    } else if (dto.formato === 'excel') {\n      res.setHeader(\n        'Content-Type',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      );\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=solicitacoes-por-status.xlsx',\n      );\n    } else if (dto.formato === 'csv') {\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=solicitacoes-por-status.csv',\n      );\n    }\n\n    return res.send(relatorio);\n  }\n\n  /**\n   * Gera relatório de atendimentos por unidade\n   *\n   * @param req Request Express\n   * @param res Response Express\n   * @param dto Parâmetros do relatório\n   * @returns Stream do relatório no formato solicitado\n   */\n  @Get('atendimentos-por-unidade')\n  @RequiresPermission({\n    permissionName: 'relatorio.atendimentos.unidade',\n    scopeType: ScopeType.GLOBAL,\n  })\n  @ApiOperation({\n    summary: 'Gera relatório de atendimentos por unidade',\n    description:\n      'Gera um relatório consolidado de atendimentos realizados por cada unidade no período especificado, incluindo contagem de solicitações por status. O relatório pode ser gerado em formato PDF, Excel ou CSV.',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)',\n    content: {\n      'application/pdf': {\n        schema: { type: 'string', format: 'binary' },\n      },\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {\n        schema: { type: 'string', format: 'binary' },\n      },\n      'text/csv': {\n        schema: { type: 'string', format: 'binary' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Parâmetros inválidos - Data inicial e final são obrigatórias',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Não autorizado - Token JWT ausente ou inválido',\n  })\n  @ApiResponse({\n    status: 403,\n    description:\n      'Permissão negada - Usuário não possui permissão para acessar este relatório',\n  })\n  @ApiResponse({ status: 500, description: 'Erro interno do servidor' })\n  async atendimentosPorUnidade(\n    @Req() req: Request,\n    @Res() res: Response,\n    @Query() dto: RelatorioAtendimentosDto,\n  ) {\n    if (!dto.data_inicio || !dto.data_fim) {\n      throw new BadRequestException('Data inicial e final são obrigatórias');\n    }\n\n    const relatorio =\n      await this.relatoriosService.gerarRelatorioAtendimentosPorUnidade({\n        dataInicio: dto.data_inicio,\n        dataFim: dto.data_fim,\n        formato: dto.formato,\n        user: req.user,\n      });\n\n    // Configurar cabeçalhos da resposta de acordo com o formato\n    if (dto.formato === 'pdf') {\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=atendimentos-por-unidade.pdf',\n      );\n    } else if (dto.formato === 'excel') {\n      res.setHeader(\n        'Content-Type',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      );\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=atendimentos-por-unidade.xlsx',\n      );\n    } else if (dto.formato === 'csv') {\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader(\n        'Content-Disposition',\n        'attachment; filename=atendimentos-por-unidade.csv',\n      );\n    }\n\n    return res.send(relatorio);\n  }\n}\n"],"version":3}