{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\campo-dinamico.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\campo-dinamico.repository.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CampoDinamicoBeneficio } from '../../../entities/campo-dinamico-beneficio.entity';\nimport { TipoBeneficio } from '../../../entities/tipo-beneficio.entity';\n\n/**\n * Repositório para gerenciamento de campos dinâmicos de benefícios\n */\n@Injectable()\nexport class CampoDinamicoRepository {\n  constructor(\n    @InjectRepository(CampoDinamicoBeneficio)\n    private readonly campoDinamicoRepository: Repository<CampoDinamicoBeneficio>,\n  ) {}\n\n  /**\n   * Encontra todos os campos dinâmicos\n   * @returns Lista de campos dinâmicos\n   */\n  async findAll(): Promise<CampoDinamicoBeneficio[]> {\n    return this.campoDinamicoRepository.find({\n      order: {\n        ordem: 'ASC',\n      },\n    });\n  }\n\n  /**\n   * Encontra um campo dinâmico pelo ID\n   * @param id ID do campo dinâmico\n   * @returns Campo dinâmico encontrado ou null\n   */\n  async findOne(id: string): Promise<CampoDinamicoBeneficio | null> {\n    return this.campoDinamicoRepository.findOne({\n      where: { id },\n    });\n  }\n\n  /**\n   * Encontra um campo dinâmico pelo ID (alias para findOne)\n   * @param id ID do campo dinâmico\n   * @returns Campo dinâmico encontrado ou null\n   */\n  async findById(id: string): Promise<CampoDinamicoBeneficio | null> {\n    return this.findOne(id);\n  }\n\n  /**\n   * Encontra campos dinâmicos por tipo de benefício\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns Lista de campos dinâmicos associados ao tipo de benefício\n   */\n  async findByTipoBeneficio(\n    tipoBeneficioId: string,\n  ): Promise<CampoDinamicoBeneficio[]> {\n    return this.campoDinamicoRepository.find({\n      where: {\n        tipo_beneficio: { id: tipoBeneficioId },\n      },\n      order: {\n        ordem: 'ASC',\n      },\n    });\n  }\n\n  /**\n   * Encontra campos dinâmicos por tipo de benefício\n   * @param tipoBeneficio Entidade do tipo de benefício\n   * @returns Lista de campos dinâmicos associados ao tipo de benefício\n   */\n  async findByTipoBeneficioEntity(\n    tipoBeneficio: TipoBeneficio,\n  ): Promise<CampoDinamicoBeneficio[]> {\n    return this.campoDinamicoRepository.find({\n      where: {\n        tipo_beneficio: { id: tipoBeneficio.id },\n      },\n      order: {\n        ordem: 'ASC',\n      },\n    });\n  }\n\n  /**\n   * Cria um novo campo dinâmico\n   * @param campoDinamico Dados do campo dinâmico a ser criado\n   * @returns Campo dinâmico criado\n   */\n  async create(\n    campoDinamico: Partial<CampoDinamicoBeneficio>,\n  ): Promise<CampoDinamicoBeneficio> {\n    const novoCampoDinamico =\n      this.campoDinamicoRepository.create(campoDinamico);\n    return this.campoDinamicoRepository.save(novoCampoDinamico);\n  }\n\n  /**\n   * Atualiza um campo dinâmico existente\n   * @param id ID do campo dinâmico a ser atualizado\n   * @param campoDinamico Dados atualizados do campo dinâmico\n   * @returns Campo dinâmico atualizado\n   * @throws NotFoundException se o campo dinâmico não for encontrado\n   */\n  async update(\n    id: string,\n    campoDinamico: Partial<CampoDinamicoBeneficio>,\n  ): Promise<CampoDinamicoBeneficio> {\n    const result = await this.campoDinamicoRepository.update(id, campoDinamico);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(`Campo dinâmico com ID ${id} não encontrado`);\n    }\n\n    const updated = await this.findOne(id);\n    if (!updated) {\n      throw new NotFoundException('Erro ao buscar o campo dinâmico atualizado');\n    }\n\n    return updated;\n  }\n\n  /**\n   * Remove um campo dinâmico\n   * @param id ID do campo dinâmico a ser removido\n   * @returns true se removido com sucesso\n   * @throws NotFoundException se o campo dinâmico não for encontrado\n   */\n  async remove(id: string): Promise<boolean> {\n    const result = await this.campoDinamicoRepository.softDelete(id);\n\n    if (result.affected === 0) {\n      throw new NotFoundException(`Campo dinâmico com ID ${id} não encontrado`);\n    }\n\n    return result.affected !== undefined && result.affected > 0;\n  }\n}\n"],"version":3}