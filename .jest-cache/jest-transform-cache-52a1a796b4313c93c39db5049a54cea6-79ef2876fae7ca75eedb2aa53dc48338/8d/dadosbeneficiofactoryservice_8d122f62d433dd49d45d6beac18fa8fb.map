{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-beneficio-factory.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-beneficio-factory.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { DadosAluguelSocialService } from './dados-aluguel-social.service';\nimport { DadosCestaBasicaService } from './dados-cesta-basica.service';\nimport { DadosFuneralService } from './dados-funeral.service';\nimport { DadosNatalidadeService } from './dados-natalidade.service';\nimport {\n  TipoDadosBeneficio,\n  IDadosBeneficio,\n  ICreateDadosBeneficioDto,\n  IUpdateDadosBeneficioDto,\n  IDadosBeneficioService,\n} from '../interfaces/dados-beneficio.interface';\nimport { DadosAluguelSocial } from '../../../entities/dados-aluguel-social.entity';\nimport { DadosCestaBasica } from '../../../entities/dados-cesta-basica.entity';\nimport { DadosFuneral } from '../../../entities/dados-funeral.entity';\nimport { DadosNatalidade } from '../../../entities/dados-natalidade.entity';\nimport {\n  CreateDadosAluguelSocialDto,\n  UpdateDadosAluguelSocialDto,\n} from '../dto/create-dados-aluguel-social.dto';\nimport {\n  CreateDadosCestaBasicaDto,\n  UpdateDadosCestaBasicaDto,\n} from '../dto/create-dados-cesta-basica.dto';\nimport {\n  CreateDadosFuneralDto,\n  UpdateDadosFuneralDto,\n} from '../dto/create-dados-funeral.dto';\nimport {\n  CreateDadosNatalidadeDto,\n  UpdateDadosNatalidadeDto,\n} from '../dto/create-dados-natalidade.dto';\n\n/**\n * Factory service para gerenciar todos os tipos de dados de benefícios\n * de forma centralizada e type-safe\n */\n@Injectable()\nexport class DadosBeneficioFactoryService {\n  private readonly serviceMap: Map<TipoDadosBeneficio, any>;\n\n  constructor(\n    private readonly dadosAluguelSocialService: DadosAluguelSocialService,\n    private readonly dadosCestaBasicaService: DadosCestaBasicaService,\n    private readonly dadosFuneralService: DadosFuneralService,\n    private readonly dadosNatalidadeService: DadosNatalidadeService,\n  ) {\n    this.serviceMap = new Map<TipoDadosBeneficio, any>([\n      [TipoDadosBeneficio.ALUGUEL_SOCIAL, this.dadosAluguelSocialService],\n      [TipoDadosBeneficio.CESTA_BASICA, this.dadosCestaBasicaService],\n      [TipoDadosBeneficio.FUNERAL, this.dadosFuneralService],\n      [TipoDadosBeneficio.NATALIDADE, this.dadosNatalidadeService],\n    ]);\n  }\n\n  /**\n   * Obter o serviço apropriado para o tipo de benefício\n   */\n  private getService(\n    tipo: TipoDadosBeneficio,\n  ): IDadosBeneficioService<any, any, any> {\n    const service = this.serviceMap.get(tipo);\n    if (!service) {\n      throw new BadRequestException(`Tipo de benefício não suportado: ${tipo}`);\n    }\n    return service;\n  }\n\n  /**\n   * Validar se o tipo de benefício é válido\n   */\n  private validateTipo(tipo: string): TipoDadosBeneficio {\n    if (\n      !Object.values(TipoDadosBeneficio).includes(tipo as TipoDadosBeneficio)\n    ) {\n      throw new BadRequestException(`Tipo de benefício inválido: ${tipo}`);\n    }\n    return tipo as TipoDadosBeneficio;\n  }\n\n  /**\n   * Criar dados de benefício\n   */\n  async create(\n    tipo: string,\n    createDto: ICreateDadosBeneficioDto,\n  ): Promise<IDadosBeneficio> {\n    const tipoBeneficio = this.validateTipo(tipo);\n    const service = this.getService(tipoBeneficio);\n    return service.create(createDto);\n  }\n\n  /**\n   * Buscar dados de benefício por ID\n   */\n  async findOne(tipo: string, id: string): Promise<IDadosBeneficio> {\n    const tipoBeneficio = this.validateTipo(tipo);\n    const service = this.getService(tipoBeneficio);\n    return service.findOne(id);\n  }\n\n  /**\n   * Buscar dados de benefício por solicitação\n   */\n  async findBySolicitacao(\n    tipo: string,\n    solicitacaoId: string,\n  ): Promise<IDadosBeneficio> {\n    const tipoBeneficio = this.validateTipo(tipo);\n    const service = this.getService(tipoBeneficio);\n    return service.findBySolicitacao(solicitacaoId);\n  }\n\n  /**\n   * Atualizar dados de benefício\n   */\n  async update(\n    tipo: string,\n    id: string,\n    updateDto: IUpdateDadosBeneficioDto,\n  ): Promise<IDadosBeneficio> {\n    const tipoBeneficio = this.validateTipo(tipo);\n    const service = this.getService(tipoBeneficio);\n    return service.update(id, updateDto);\n  }\n\n  /**\n   * Remover dados de benefício\n   */\n  async remove(tipo: string, id: string): Promise<void> {\n    const tipoBeneficio = this.validateTipo(tipo);\n    const service = this.getService(tipoBeneficio);\n    return service.remove(id);\n  }\n\n  /**\n   * Verificar se existem dados para uma solicitação\n   */\n  async existsBySolicitacao(\n    tipo: string,\n    solicitacaoId: string,\n  ): Promise<boolean> {\n    const tipoBeneficio = this.validateTipo(tipo);\n    const service = this.getService(tipoBeneficio);\n    return service.existsBySolicitacao(solicitacaoId);\n  }\n\n  /**\n   * Obter todos os tipos de benefícios suportados\n   */\n  getSupportedTypes(): TipoDadosBeneficio[] {\n    return Object.values(TipoDadosBeneficio);\n  }\n\n  /**\n   * Verificar se um tipo é suportado\n   */\n  isTypeSupported(tipo: string): boolean {\n    return Object.values(TipoDadosBeneficio).includes(\n      tipo as TipoDadosBeneficio,\n    );\n  }\n\n  /**\n   * Obter metadados do tipo de benefício\n   */\n  getTypeMetadata(tipo: string): { name: string; description: string } {\n    const tipoBeneficio = this.validateTipo(tipo);\n\n    const metadata = {\n      [TipoDadosBeneficio.ALUGUEL_SOCIAL]: {\n        name: 'Aluguel Social',\n        description: 'Dados específicos para solicitação de Aluguel Social',\n      },\n      [TipoDadosBeneficio.CESTA_BASICA]: {\n        name: 'Cesta Básica',\n        description: 'Dados específicos para solicitação de Cesta Básica',\n      },\n      [TipoDadosBeneficio.FUNERAL]: {\n        name: 'Auxílio Funeral',\n        description: 'Dados específicos para solicitação de Auxílio Funeral',\n      },\n      [TipoDadosBeneficio.NATALIDADE]: {\n        name: 'Auxílio Natalidade',\n        description: 'Dados específicos para solicitação de Auxílio Natalidade',\n      },\n    };\n\n    return metadata[tipoBeneficio];\n  }\n}\n"],"version":3}