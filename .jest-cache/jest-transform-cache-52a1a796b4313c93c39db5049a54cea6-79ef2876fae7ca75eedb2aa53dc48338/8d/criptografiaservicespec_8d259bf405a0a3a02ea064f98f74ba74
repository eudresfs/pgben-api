5585d5797e02c34c61266b691db3d5b1
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('crypto', () => {
    const originalCrypto = jest.requireActual('crypto');
    return {
        ...originalCrypto,
        randomBytes: jest.fn(),
        createCipheriv: jest.fn(),
        createDecipheriv: jest.fn(),
        createHash: jest.fn(),
    };
});
const testing_1 = require("@nestjs/testing");
const criptografia_service_1 = require("../criptografia.service");
const config_1 = require("@nestjs/config");
const crypto = __importStar(require("crypto"));
describe('CriptografiaService', () => {
    let service;
    const mockMasterKey = Buffer.from('chave-mestra-de-teste-com-32-bytes-12', 'utf-8');
    const mockIv = Buffer.from('iv-de-teste-16byt', 'utf-8');
    const mockAuthTag = Buffer.from('auth-tag-teste-16-bytes-teste', 'utf-8');
    const mockHash = 'hash-de-teste-para-verificacao-de-integridade';
    const mockCipher = {
        update: jest.fn(),
        final: jest.fn(),
        getAuthTag: jest.fn(),
    };
    const mockDecipher = {
        update: jest.fn(),
        final: jest.fn(),
        setAuthTag: jest.fn(),
    };
    const mockHashObject = {
        update: jest.fn(),
        digest: jest.fn(),
    };
    const mockConfigService = {
        get: jest.fn().mockImplementation((key) => {
            if (key === 'ENCRYPTION_KEY_PATH') {
                return './test-encryption.key';
            }
            return null;
        }),
    };
    beforeEach(async () => {
        jest.clearAllMocks();
        // Mock para crypto.randomBytes
        crypto.randomBytes.mockImplementation((size) => {
            if (size === 16) {
                return mockIv;
            }
            return Buffer.alloc(size);
        });
        // Mock para crypto.createCipheriv
        crypto.createCipheriv.mockReturnValue(mockCipher);
        // Mock para crypto.createDecipheriv
        crypto.createDecipheriv.mockReturnValue(mockDecipher);
        // Mock para crypto.createHash
        crypto.createHash.mockReturnValue(mockHashObject);
        const module = await testing_1.Test.createTestingModule({
            providers: [
                {
                    provide: criptografia_service_1.CriptografiaService,
                    useFactory: () => {
                        return new criptografia_service_1.CriptografiaService(mockConfigService);
                    },
                },
                {
                    provide: config_1.ConfigService,
                    useValue: mockConfigService,
                },
            ],
        }).compile();
        service = module.get(criptografia_service_1.CriptografiaService);
        // Sobrescrever a chave mestra para testes
        Object.defineProperty(service, 'masterKey', { value: mockMasterKey });
    });
    it('deve ser definido', () => {
        expect(service).toBeDefined();
    });
    describe('criptografarBuffer', () => {
        it('deve criptografar um buffer corretamente', () => {
            // Arrange
            const dadosOriginais = Buffer.from('dados de teste para criptografia', 'utf-8');
            const dadosCriptografados = Buffer.from('dados criptografados', 'utf-8');
            mockCipher.update.mockReturnValue(dadosCriptografados);
            mockCipher.final.mockReturnValue(Buffer.alloc(0));
            mockCipher.getAuthTag.mockReturnValue(mockAuthTag);
            // Act
            const resultado = service.criptografarBuffer(dadosOriginais);
            // Assert
            expect(crypto.createCipheriv).toHaveBeenCalledWith('aes-256-gcm', mockMasterKey, mockIv, { authTagLength: 16 });
            expect(mockCipher.update).toHaveBeenCalledWith(dadosOriginais);
            expect(mockCipher.final).toHaveBeenCalled();
            expect(mockCipher.getAuthTag).toHaveBeenCalled();
            expect(resultado).toEqual({
                dadosCriptografados: dadosCriptografados,
                iv: mockIv,
                authTag: mockAuthTag,
            });
        });
    });
    describe('descriptografarBuffer', () => {
        it('deve descriptografar um buffer corretamente', () => {
            // Arrange
            const dadosCriptografados = Buffer.from('dados criptografados', 'utf-8');
            const dadosDescriptografados = Buffer.from('dados originais descriptografados', 'utf-8');
            mockDecipher.update.mockReturnValue(dadosDescriptografados);
            mockDecipher.final.mockReturnValue(Buffer.alloc(0));
            // Act
            const resultado = service.descriptografarBuffer(dadosCriptografados, mockIv, mockAuthTag);
            // Assert
            expect(crypto.createDecipheriv).toHaveBeenCalledWith('aes-256-gcm', mockMasterKey, mockIv, { authTagLength: 16 });
            expect(mockDecipher.setAuthTag).toHaveBeenCalledWith(mockAuthTag);
            expect(mockDecipher.update).toHaveBeenCalledWith(dadosCriptografados);
            expect(mockDecipher.final).toHaveBeenCalled();
            expect(resultado).toEqual(dadosDescriptografados);
        });
        it('deve lançar erro quando a autenticação falha', () => {
            // Arrange
            const dadosCriptografados = Buffer.from('dados criptografados', 'utf-8');
            mockDecipher.update.mockImplementation(() => {
                throw new Error('Falha na autenticação');
            });
            // Act & Assert
            expect(() => {
                service.descriptografarBuffer(dadosCriptografados, mockIv, mockAuthTag);
            }).toThrow('Erro ao descriptografar dados: Falha na autenticação');
        });
    });
    describe('gerarHash', () => {
        it('deve gerar um hash SHA-256 para um buffer', () => {
            // Arrange
            const dados = Buffer.from('dados para hash', 'utf-8');
            mockHashObject.update.mockReturnThis();
            mockHashObject.digest.mockReturnValue(mockHash);
            // Act
            const resultado = service.gerarHash(dados);
            // Assert
            expect(crypto.createHash).toHaveBeenCalledWith('sha256');
            expect(mockHashObject.update).toHaveBeenCalledWith(dados);
            expect(mockHashObject.digest).toHaveBeenCalledWith('hex');
            expect(resultado).toEqual(mockHash);
        });
    });
    describe('verificarHash', () => {
        it('deve retornar true quando o hash corresponde aos dados', () => {
            // Arrange
            const dados = Buffer.from('dados para verificação', 'utf-8');
            const hashOriginal = 'hash-original';
            mockHashObject.update.mockReturnThis();
            mockHashObject.digest.mockReturnValue(hashOriginal);
            // Act
            const resultado = service.verificarHash(dados, hashOriginal);
            // Assert
            expect(crypto.createHash).toHaveBeenCalledWith('sha256');
            expect(mockHashObject.update).toHaveBeenCalledWith(dados);
            expect(mockHashObject.digest).toHaveBeenCalledWith('hex');
            expect(resultado).toBe(true);
        });
        it('deve retornar false quando o hash não corresponde aos dados', () => {
            // Arrange
            const dados = Buffer.from('dados para verificação', 'utf-8');
            const hashOriginal = 'hash-original';
            const hashCalculado = 'hash-diferente';
            mockHashObject.update.mockReturnThis();
            mockHashObject.digest.mockReturnValue(hashCalculado);
            // Act
            const resultado = service.verificarHash(dados, hashOriginal);
            // Assert
            expect(resultado).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,