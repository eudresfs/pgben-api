2a487202ddb0b87acfe98bc083650ffb
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CampoDinamicoRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const campo_dinamico_beneficio_entity_1 = require("../../../entities/campo-dinamico-beneficio.entity");
/**
 * Repositório para gerenciamento de campos dinâmicos de benefícios
 */
let CampoDinamicoRepository = class CampoDinamicoRepository {
    campoDinamicoRepository;
    constructor(campoDinamicoRepository) {
        this.campoDinamicoRepository = campoDinamicoRepository;
    }
    /**
     * Encontra todos os campos dinâmicos
     * @returns Lista de campos dinâmicos
     */
    async findAll() {
        return this.campoDinamicoRepository.find({
            order: {
                ordem: 'ASC',
            },
        });
    }
    /**
     * Encontra um campo dinâmico pelo ID
     * @param id ID do campo dinâmico
     * @returns Campo dinâmico encontrado ou null
     */
    async findOne(id) {
        return this.campoDinamicoRepository.findOne({
            where: { id },
        });
    }
    /**
     * Encontra um campo dinâmico pelo ID (alias para findOne)
     * @param id ID do campo dinâmico
     * @returns Campo dinâmico encontrado ou null
     */
    async findById(id) {
        return this.findOne(id);
    }
    /**
     * Encontra campos dinâmicos por tipo de benefício
     * @param tipoBeneficioId ID do tipo de benefício
     * @returns Lista de campos dinâmicos associados ao tipo de benefício
     */
    async findByTipoBeneficio(tipoBeneficioId) {
        return this.campoDinamicoRepository.find({
            where: {
                tipo_beneficio: { id: tipoBeneficioId },
            },
            order: {
                ordem: 'ASC',
            },
        });
    }
    /**
     * Encontra campos dinâmicos por tipo de benefício
     * @param tipoBeneficio Entidade do tipo de benefício
     * @returns Lista de campos dinâmicos associados ao tipo de benefício
     */
    async findByTipoBeneficioEntity(tipoBeneficio) {
        return this.campoDinamicoRepository.find({
            where: {
                tipo_beneficio: { id: tipoBeneficio.id },
            },
            order: {
                ordem: 'ASC',
            },
        });
    }
    /**
     * Cria um novo campo dinâmico
     * @param campoDinamico Dados do campo dinâmico a ser criado
     * @returns Campo dinâmico criado
     */
    async create(campoDinamico) {
        const novoCampoDinamico = this.campoDinamicoRepository.create(campoDinamico);
        return this.campoDinamicoRepository.save(novoCampoDinamico);
    }
    /**
     * Atualiza um campo dinâmico existente
     * @param id ID do campo dinâmico a ser atualizado
     * @param campoDinamico Dados atualizados do campo dinâmico
     * @returns Campo dinâmico atualizado
     * @throws NotFoundException se o campo dinâmico não for encontrado
     */
    async update(id, campoDinamico) {
        const result = await this.campoDinamicoRepository.update(id, campoDinamico);
        if (result.affected === 0) {
            throw new common_1.NotFoundException(`Campo dinâmico com ID ${id} não encontrado`);
        }
        const updated = await this.findOne(id);
        if (!updated) {
            throw new common_1.NotFoundException('Erro ao buscar o campo dinâmico atualizado');
        }
        return updated;
    }
    /**
     * Remove um campo dinâmico
     * @param id ID do campo dinâmico a ser removido
     * @returns true se removido com sucesso
     * @throws NotFoundException se o campo dinâmico não for encontrado
     */
    async remove(id) {
        const result = await this.campoDinamicoRepository.softDelete(id);
        if (result.affected === 0) {
            throw new common_1.NotFoundException(`Campo dinâmico com ID ${id} não encontrado`);
        }
        return result.affected !== undefined && result.affected > 0;
    }
};
exports.CampoDinamicoRepository = CampoDinamicoRepository;
exports.CampoDinamicoRepository = CampoDinamicoRepository = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(campo_dinamico_beneficio_entity_1.CampoDinamicoBeneficio)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], CampoDinamicoRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,