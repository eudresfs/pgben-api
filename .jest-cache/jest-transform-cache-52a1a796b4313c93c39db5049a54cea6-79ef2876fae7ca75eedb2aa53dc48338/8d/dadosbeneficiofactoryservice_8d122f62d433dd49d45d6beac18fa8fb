2490d573a229570f64f3ba615c488311
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosBeneficioFactoryService = void 0;
const common_1 = require("@nestjs/common");
const dados_aluguel_social_service_1 = require("./dados-aluguel-social.service");
const dados_cesta_basica_service_1 = require("./dados-cesta-basica.service");
const dados_funeral_service_1 = require("./dados-funeral.service");
const dados_natalidade_service_1 = require("./dados-natalidade.service");
const dados_beneficio_interface_1 = require("../interfaces/dados-beneficio.interface");
/**
 * Factory service para gerenciar todos os tipos de dados de benefícios
 * de forma centralizada e type-safe
 */
let DadosBeneficioFactoryService = class DadosBeneficioFactoryService {
    dadosAluguelSocialService;
    dadosCestaBasicaService;
    dadosFuneralService;
    dadosNatalidadeService;
    serviceMap;
    constructor(dadosAluguelSocialService, dadosCestaBasicaService, dadosFuneralService, dadosNatalidadeService) {
        this.dadosAluguelSocialService = dadosAluguelSocialService;
        this.dadosCestaBasicaService = dadosCestaBasicaService;
        this.dadosFuneralService = dadosFuneralService;
        this.dadosNatalidadeService = dadosNatalidadeService;
        this.serviceMap = new Map([
            [dados_beneficio_interface_1.TipoDadosBeneficio.ALUGUEL_SOCIAL, this.dadosAluguelSocialService],
            [dados_beneficio_interface_1.TipoDadosBeneficio.CESTA_BASICA, this.dadosCestaBasicaService],
            [dados_beneficio_interface_1.TipoDadosBeneficio.FUNERAL, this.dadosFuneralService],
            [dados_beneficio_interface_1.TipoDadosBeneficio.NATALIDADE, this.dadosNatalidadeService],
        ]);
    }
    /**
     * Obter o serviço apropriado para o tipo de benefício
     */
    getService(tipo) {
        const service = this.serviceMap.get(tipo);
        if (!service) {
            throw new common_1.BadRequestException(`Tipo de benefício não suportado: ${tipo}`);
        }
        return service;
    }
    /**
     * Validar se o tipo de benefício é válido
     */
    validateTipo(tipo) {
        if (!Object.values(dados_beneficio_interface_1.TipoDadosBeneficio).includes(tipo)) {
            throw new common_1.BadRequestException(`Tipo de benefício inválido: ${tipo}`);
        }
        return tipo;
    }
    /**
     * Criar dados de benefício
     */
    async create(tipo, createDto) {
        const tipoBeneficio = this.validateTipo(tipo);
        const service = this.getService(tipoBeneficio);
        return service.create(createDto);
    }
    /**
     * Buscar dados de benefício por ID
     */
    async findOne(tipo, id) {
        const tipoBeneficio = this.validateTipo(tipo);
        const service = this.getService(tipoBeneficio);
        return service.findOne(id);
    }
    /**
     * Buscar dados de benefício por solicitação
     */
    async findBySolicitacao(tipo, solicitacaoId) {
        const tipoBeneficio = this.validateTipo(tipo);
        const service = this.getService(tipoBeneficio);
        return service.findBySolicitacao(solicitacaoId);
    }
    /**
     * Atualizar dados de benefício
     */
    async update(tipo, id, updateDto) {
        const tipoBeneficio = this.validateTipo(tipo);
        const service = this.getService(tipoBeneficio);
        return service.update(id, updateDto);
    }
    /**
     * Remover dados de benefício
     */
    async remove(tipo, id) {
        const tipoBeneficio = this.validateTipo(tipo);
        const service = this.getService(tipoBeneficio);
        return service.remove(id);
    }
    /**
     * Verificar se existem dados para uma solicitação
     */
    async existsBySolicitacao(tipo, solicitacaoId) {
        const tipoBeneficio = this.validateTipo(tipo);
        const service = this.getService(tipoBeneficio);
        return service.existsBySolicitacao(solicitacaoId);
    }
    /**
     * Obter todos os tipos de benefícios suportados
     */
    getSupportedTypes() {
        return Object.values(dados_beneficio_interface_1.TipoDadosBeneficio);
    }
    /**
     * Verificar se um tipo é suportado
     */
    isTypeSupported(tipo) {
        return Object.values(dados_beneficio_interface_1.TipoDadosBeneficio).includes(tipo);
    }
    /**
     * Obter metadados do tipo de benefício
     */
    getTypeMetadata(tipo) {
        const tipoBeneficio = this.validateTipo(tipo);
        const metadata = {
            [dados_beneficio_interface_1.TipoDadosBeneficio.ALUGUEL_SOCIAL]: {
                name: 'Aluguel Social',
                description: 'Dados específicos para solicitação de Aluguel Social',
            },
            [dados_beneficio_interface_1.TipoDadosBeneficio.CESTA_BASICA]: {
                name: 'Cesta Básica',
                description: 'Dados específicos para solicitação de Cesta Básica',
            },
            [dados_beneficio_interface_1.TipoDadosBeneficio.FUNERAL]: {
                name: 'Auxílio Funeral',
                description: 'Dados específicos para solicitação de Auxílio Funeral',
            },
            [dados_beneficio_interface_1.TipoDadosBeneficio.NATALIDADE]: {
                name: 'Auxílio Natalidade',
                description: 'Dados específicos para solicitação de Auxílio Natalidade',
            },
        };
        return metadata[tipoBeneficio];
    }
};
exports.DadosBeneficioFactoryService = DadosBeneficioFactoryService;
exports.DadosBeneficioFactoryService = DadosBeneficioFactoryService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof dados_aluguel_social_service_1.DadosAluguelSocialService !== "undefined" && dados_aluguel_social_service_1.DadosAluguelSocialService) === "function" ? _a : Object, typeof (_b = typeof dados_cesta_basica_service_1.DadosCestaBasicaService !== "undefined" && dados_cesta_basica_service_1.DadosCestaBasicaService) === "function" ? _b : Object, typeof (_c = typeof dados_funeral_service_1.DadosFuneralService !== "undefined" && dados_funeral_service_1.DadosFuneralService) === "function" ? _c : Object, typeof (_d = typeof dados_natalidade_service_1.DadosNatalidadeService !== "undefined" && dados_natalidade_service_1.DadosNatalidadeService) === "function" ? _d : Object])
], DadosBeneficioFactoryService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,