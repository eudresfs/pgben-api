{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\minio.service.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAAkE;AAClE,2CAA+C;AAC/C,6CAA+B;AAC/B,iEAA6D;AAC7D,uCAAyB;AACzB,2CAA6B;AAC7B,uCAAyB;AACzB,+CAAiC;AAEjC;;;;;GAKG;AAEI,IAAM,YAAY,oBAAlB,MAAM,YAAY;IASb;IACA;IATO,MAAM,GAAG,IAAI,eAAM,CAAC,cAAY,CAAC,IAAI,CAAC,CAAC;IAChD,WAAW,CAAe;IACjB,UAAU,CAAS;IACnB,OAAO,CAAS;IAEjC,iGAAiG;IAEjG,YACU,aAA4B,EAC5B,mBAAwC;QADxC,kBAAa,GAAb,aAAa,CAAe;QAC5B,wBAAmB,GAAnB,mBAAmB,CAAqB;QAEhD,gCAAgC;QAChC,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,eAAe,CAAC,KAAK,MAAM,CAAC;QAClE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,+BAA+B,MAAM,EAAE,CAAC,CAAC;QAEzD,IAAI,CAAC,WAAW,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC;YAClC,QAAQ,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,gBAAgB,EAAE,WAAW,CAAC;YACvE,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,YAAY,EAAE,IAAI,CAAC;YACxD,MAAM,EAAE,MAAM;YACd,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAC/B,kBAAkB,EAClB,YAAY,CACb;YACD,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAC/B,kBAAkB,EAClB,YAAY,CACb;SACF,CAAC,CAAC;QAEH,kDAAkD;QAClD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CACtC,mBAAmB,EACnB,kBAAkB,CACnB,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,kBAAkB,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAErD,sDAAsD;QACtD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,YAAY,CAAC,CAAC;QACpD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;YACjC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY;QAChB,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC1E,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;gBAChE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,UAAU,sBAAsB,CAAC,CAAC;YACpE,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,IAAI,CAAC,UAAU,aAAa,CAAC,CAAC;YAC3D,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,2BAA2B,CAAC,aAAqB;QACvD,OAAO,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;IACtE,CAAC;IAED;;;;;;OAMG;IACK,gBAAgB,CACtB,YAAoB,EACpB,aAAqB,EACrB,aAAqB;QAErB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QAC5C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC3D,OAAO,GAAG,aAAa,IAAI,aAAa,IAAI,SAAS,IAAI,YAAY,GAAG,QAAQ,EAAE,CAAC;IACrF,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,aAAa,CACjB,OAAe,EACf,YAAoB,EACpB,aAAqB,EACrB,aAAqB;QAQrB,kCAAkC;QAClC,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CACvC,YAAY,EACZ,aAAa,EACb,aAAa,CACd,CAAC;QAEF,oEAAoE;QACpE,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QAEzD,kDAAkD;QAClD,MAAM,YAAY,GAAG,IAAI,CAAC,2BAA2B,CAAC,aAAa,CAAC,CAAC;QAErE,IAAI,YAAY,GAAG,OAAO,CAAC;QAC3B,MAAM,SAAS,GAAQ;YACrB,cAAc,EAAE,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;YACnD,0BAA0B,EAAE,YAAY;YACxC,iBAAiB,EAAE,IAAI;YACvB,sBAAsB,EAAE,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;SACxD,CAAC;QAEF,4CAA4C;QAC5C,IAAI,YAAY,EAAE,CAAC;YACjB,IAAI,CAAC;gBACH,yBAAyB;gBACzB,MAAM,EAAE,mBAAmB,EAAE,EAAE,EAAE,OAAO,EAAE,GACxC,IAAI,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;gBAEvD,+BAA+B;gBAC/B,YAAY,GAAG,mBAAmB,CAAC;gBAEnC,sCAAsC;gBACtC,SAAS,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBACnD,SAAS,CAAC,oBAAoB,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gBAE7D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,WAAW,4BAA4B,CAAC,CAAC;YACtE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;gBACpE,MAAM,IAAI,KAAK,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACvE,CAAC;QACH,CAAC;QAED,IAAI,CAAC;YACH,uCAAuC;YACvC,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAC9B,IAAI,CAAC,UAAU,EACf,WAAW,EACX,YAAY,EACZ,YAAY,CAAC,MAAM,EACnB,SAAS,CACV,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,WAAW,WAAW,mCAAmC,CAC1D,CAAC;YAEF,OAAO;gBACL,WAAW;gBACX,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,wCAAwC;gBACjE,IAAI;gBACJ,aAAa,EAAE,YAAY;gBAC3B,SAAS,EAAE;oBACT,aAAa;oBACb,aAAa;oBACb,YAAY;iBACb;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,wCAAwC,KAAK,CAAC,OAAO,EAAE,CACxD,CAAC;YACF,MAAM,IAAI,KAAK,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,WAAmB;QAIvC,IAAI,CAAC;YACH,6BAA6B;YAC7B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAC5C,IAAI,CAAC,UAAU,EACf,WAAW,CACZ,CAAC;YAEF,yCAAyC;YACzC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAC5B,IAAI,CAAC,OAAO,EACZ,YAAY,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CACvD,CAAC;YAEF,0BAA0B;YAC1B,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAC/B,IAAI,CAAC,UAAU,EACf,WAAW,EACX,YAAY,CACb,CAAC;YAEF,sBAAsB;YACtB,MAAM,oBAAoB,GAAG,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAE3D,4CAA4C;YAC5C,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,MAAM,CAAC;YAEvE,IAAI,YAAY,GAAG,oBAAoB,CAAC;YAExC,4CAA4C;YAC5C,IAAI,aAAa,EAAE,CAAC;gBAClB,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,QAAQ,CAAC,CAAC;gBACjE,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CACzB,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EACnC,QAAQ,CACT,CAAC;gBAEF,IAAI,CAAC;oBACH,YAAY,GAAG,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAC3D,oBAAoB,EACpB,EAAE,EACF,OAAO,CACR,CAAC;oBAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,WAAW,WAAW,+BAA+B,CACtD,CAAC;gBACJ,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,oCAAoC,KAAK,CAAC,OAAO,EAAE,CACpD,CAAC;oBACF,MAAM,IAAI,KAAK,CACb,uCAAuC,KAAK,CAAC,OAAO,EAAE,CACvD,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,mCAAmC;YACnC,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;YACtD,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YAEvE,IAAI,YAAY,KAAK,aAAa,EAAE,CAAC;gBACnC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,0BAA0B,WAAW,eAAe,CAAC,CAAC;gBACxE,MAAM,IAAI,KAAK,CACb,kFAAkF,CACnF,CAAC;YACJ,CAAC;YAED,6BAA6B;YAC7B,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YAE5B,OAAO;gBACL,OAAO,EAAE,YAAY;gBACrB,SAAS,EAAE;oBACT,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,0BAA0B,CAAC;oBACvD,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;oBAC1C,OAAO,EAAE,YAAY,CAAC,MAAM;oBAC5B,aAAa;iBACd;aACF,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oCAAoC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACvE,MAAM,IAAI,KAAK,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,cAAc,CAAC,WAAmB;QACtC,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;YAClE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,WAAW,gCAAgC,CAAC,CAAC;QAC1E,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACxE,MAAM,IAAI,KAAK,CAAC,+BAA+B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,gBAAgB,CAAC,WAAmB;QAC1C,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAEzD,MAAM,SAAS,GAAG;YAChB,MAAM,EAAE,iBAAiB;YACzB,MAAM,EAAE,YAAY;YACpB,OAAO,EAAE,YAAY;YACrB,MAAM,EAAE,WAAW;YACnB,MAAM,EAAE,WAAW;YACnB,OAAO,EAAE,YAAY;YACrB,MAAM,EAAE,YAAY;YACpB,MAAM,EAAE,oBAAoB;YAC5B,OAAO,EACL,yEAAyE;YAC3E,MAAM,EAAE,0BAA0B;YAClC,OAAO,EACL,mEAAmE;YACrE,MAAM,EAAE,+BAA+B;YACvC,OAAO,EACL,2EAA2E;YAC7E,MAAM,EAAE,YAAY;YACpB,MAAM,EAAE,iBAAiB;YACzB,MAAM,EAAE,8BAA8B;YACtC,KAAK,EAAE,6BAA6B;YACpC,MAAM,EAAE,mBAAmB;YAC3B,KAAK,EAAE,kBAAkB;SAC1B,CAAC;QAEF,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,0BAA0B,CAAC;IAC3D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,mBAAmB,CACvB,WAAmB,EACnB,iBAAiB,GAAG,IAAI;QAExB,IAAI,CAAC;YACH,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAC9C,IAAI,CAAC,UAAU,EACf,WAAW,EACX,iBAAiB,CAClB,CAAC;QACJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,mCAAmC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACtE,MAAM,IAAI,KAAK,CACb,gDAAgD,KAAK,CAAC,OAAO,EAAE,CAChE,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAA;AA/VY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;yDAUc,sBAAa,oBAAb,sBAAa,oDACP,0CAAmB,oBAAnB,0CAAmB;GAVvC,YAAY,CA+VxB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\services\\minio.service.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport * as Minio from 'minio';\nimport { CriptografiaService } from './criptografia.service';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as crypto from 'crypto';\n\n/**\n * Serviço de integração com MinIO\n *\n * Responsável por gerenciar o armazenamento de documentos no MinIO,\n * com suporte a criptografia para dados sensíveis.\n */\n@Injectable()\nexport class MinioService implements OnModuleInit {\n  private readonly logger = new Logger(MinioService.name);\n  private minioClient: Minio.Client;\n  private readonly bucketName: string;\n  private readonly tempDir: string;\n\n  // Removida lista de documentos sensíveis - agora usa a lista centralizada no CriptografiaService\n\n  constructor(\n    private configService: ConfigService,\n    private criptografiaService: CriptografiaService,\n  ) {\n    // Configuração do cliente MinIO\n    const useSSL = this.configService.get('MINIO_USE_SSL') === 'true';\n    this.logger.log(`Configurando MinIO com SSL: ${useSSL}`);\n\n    this.minioClient = new Minio.Client({\n      endPoint: this.configService.get<string>('MINIO_ENDPOINT', 'localhost'),\n      port: this.configService.get<number>('MINIO_PORT', 9000),\n      useSSL: useSSL,\n      accessKey: this.configService.get<string>(\n        'MINIO_ACCESS_KEY',\n        'minioadmin',\n      ),\n      secretKey: this.configService.get<string>(\n        'MINIO_SECRET_KEY',\n        'minioadmin',\n      ),\n    });\n\n    // Nome do bucket para armazenamento de documentos\n    this.bucketName = this.configService.get<string>(\n      'MINIO_BUCKET_NAME',\n      'pgben-documentos',\n    );\n    this.logger.log(`Usando bucket: ${this.bucketName}`);\n\n    // Diretório temporário para arquivos em processamento\n    this.tempDir = path.join(os.tmpdir(), 'pgben-temp');\n    if (!fs.existsSync(this.tempDir)) {\n      fs.mkdirSync(this.tempDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Inicialização do módulo\n   * Verifica se o bucket existe e cria se necessário\n   */\n  async onModuleInit() {\n    try {\n      const bucketExists = await this.minioClient.bucketExists(this.bucketName);\n      if (!bucketExists) {\n        await this.minioClient.makeBucket(this.bucketName, 'us-east-1');\n        this.logger.log(`Bucket '${this.bucketName}' criado com sucesso`);\n      } else {\n        this.logger.log(`Bucket '${this.bucketName}' já existe`);\n      }\n    } catch (error) {\n      this.logger.error(`Erro ao verificar/criar bucket: ${error.message}`);\n    }\n  }\n\n  /**\n   * Verifica se um tipo de documento deve ser criptografado\n   * @param tipoDocumento Tipo do documento\n   * @returns true se o documento deve ser criptografado, false caso contrário\n   */\n  private documentoRequerCriptografia(tipoDocumento: string): boolean {\n    return this.criptografiaService.deveSerCriptografado(tipoDocumento);\n  }\n\n  /**\n   * Gera um nome único para o arquivo no MinIO\n   * @param nomeOriginal Nome original do arquivo\n   * @param solicitacaoId ID da solicitação\n   * @param tipoDocumento Tipo do documento\n   * @returns Nome único para o arquivo\n   */\n  private gerarNomeArquivo(\n    nomeOriginal: string,\n    solicitacaoId: string,\n    tipoDocumento: string,\n  ): string {\n    const extensao = path.extname(nomeOriginal);\n    const timestamp = Date.now();\n    const randomString = crypto.randomBytes(8).toString('hex');\n    return `${solicitacaoId}/${tipoDocumento}/${timestamp}-${randomString}${extensao}`;\n  }\n\n  /**\n   * Faz upload de um arquivo para o MinIO\n   * @param arquivo Buffer do arquivo\n   * @param nomeOriginal Nome original do arquivo\n   * @param solicitacaoId ID da solicitação\n   * @param tipoDocumento Tipo do documento\n   * @returns Metadados do arquivo armazenado\n   */\n  async uploadArquivo(\n    arquivo: Buffer,\n    nomeOriginal: string,\n    solicitacaoId: string,\n    tipoDocumento: string,\n  ): Promise<{\n    nomeArquivo: string;\n    tamanho: number;\n    hash: string;\n    criptografado: boolean;\n    metadados: any;\n  }> {\n    // Gerar nome único para o arquivo\n    const nomeArquivo = this.gerarNomeArquivo(\n      nomeOriginal,\n      solicitacaoId,\n      tipoDocumento,\n    );\n\n    // Calcular hash do arquivo original para verificação de integridade\n    const hash = this.criptografiaService.gerarHash(arquivo);\n\n    // Verificar se o documento deve ser criptografado\n    const criptografar = this.documentoRequerCriptografia(tipoDocumento);\n\n    let arquivoFinal = arquivo;\n    const metadados: any = {\n      'Content-Type': this.detectarMimeType(nomeOriginal),\n      'X-Amz-Meta-Original-Name': nomeOriginal,\n      'X-Amz-Meta-Hash': hash,\n      'X-Amz-Meta-Encrypted': criptografar ? 'true' : 'false',\n    };\n\n    // Se o documento for sensível, criptografar\n    if (criptografar) {\n      try {\n        // Criptografar o arquivo\n        const { dadosCriptografados, iv, authTag } =\n          this.criptografiaService.criptografarBuffer(arquivo);\n\n        // Usar o arquivo criptografado\n        arquivoFinal = dadosCriptografados;\n\n        // Adicionar metadados de criptografia\n        metadados['X-Amz-Meta-IV'] = iv.toString('base64');\n        metadados['X-Amz-Meta-AuthTag'] = authTag.toString('base64');\n\n        this.logger.log(`Arquivo ${nomeArquivo} criptografado com sucesso`);\n      } catch (error) {\n        this.logger.error(`Erro ao criptografar arquivo: ${error.message}`);\n        throw new Error(`Falha ao criptografar documento: ${error.message}`);\n      }\n    }\n\n    try {\n      // Fazer upload do arquivo para o MinIO\n      await this.minioClient.putObject(\n        this.bucketName,\n        nomeArquivo,\n        arquivoFinal,\n        arquivoFinal.length,\n        metadados,\n      );\n\n      this.logger.log(\n        `Arquivo ${nomeArquivo} enviado para o MinIO com sucesso`,\n      );\n\n      return {\n        nomeArquivo,\n        tamanho: arquivo.length, // Tamanho original, não o criptografado\n        hash,\n        criptografado: criptografar,\n        metadados: {\n          tipoDocumento,\n          solicitacaoId,\n          nomeOriginal,\n        },\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao enviar arquivo para o MinIO: ${error.message}`,\n      );\n      throw new Error(`Falha ao armazenar documento: ${error.message}`);\n    }\n  }\n\n  /**\n   * Baixa um arquivo do MinIO\n   * @param nomeArquivo Nome do arquivo no MinIO\n   * @returns Buffer com o conteúdo original do arquivo (descriptografado se necessário)\n   */\n  async downloadArquivo(nomeArquivo: string): Promise<{\n    arquivo: Buffer;\n    metadados: any;\n  }> {\n    try {\n      // Obter metadados do arquivo\n      const stat = await this.minioClient.statObject(\n        this.bucketName,\n        nomeArquivo,\n      );\n\n      // Criar arquivo temporário para download\n      const tempFilePath = path.join(\n        this.tempDir,\n        `download-${Date.now()}-${path.basename(nomeArquivo)}`,\n      );\n\n      // Baixar arquivo do MinIO\n      await this.minioClient.fGetObject(\n        this.bucketName,\n        nomeArquivo,\n        tempFilePath,\n      );\n\n      // Ler arquivo baixado\n      const arquivoCriptografado = fs.readFileSync(tempFilePath);\n\n      // Verificar se o arquivo está criptografado\n      const criptografado = stat.metaData['x-amz-meta-encrypted'] === 'true';\n\n      let arquivoFinal = arquivoCriptografado;\n\n      // Se estiver criptografado, descriptografar\n      if (criptografado) {\n        const iv = Buffer.from(stat.metaData['x-amz-meta-iv'], 'base64');\n        const authTag = Buffer.from(\n          stat.metaData['x-amz-meta-authtag'],\n          'base64',\n        );\n\n        try {\n          arquivoFinal = this.criptografiaService.descriptografarBuffer(\n            arquivoCriptografado,\n            iv,\n            authTag,\n          );\n\n          this.logger.log(\n            `Arquivo ${nomeArquivo} descriptografado com sucesso`,\n          );\n        } catch (error) {\n          this.logger.error(\n            `Erro ao descriptografar arquivo: ${error.message}`,\n          );\n          throw new Error(\n            `Falha ao descriptografar documento: ${error.message}`,\n          );\n        }\n      }\n\n      // Verificar integridade do arquivo\n      const hashOriginal = stat.metaData['x-amz-meta-hash'];\n      const hashCalculado = this.criptografiaService.gerarHash(arquivoFinal);\n\n      if (hashOriginal !== hashCalculado) {\n        this.logger.error(`Integridade do arquivo ${nomeArquivo} comprometida`);\n        throw new Error(\n          'A integridade do documento foi comprometida. O hash não corresponde ao original.',\n        );\n      }\n\n      // Remover arquivo temporário\n      fs.unlinkSync(tempFilePath);\n\n      return {\n        arquivo: arquivoFinal,\n        metadados: {\n          nomeOriginal: stat.metaData['x-amz-meta-original-name'],\n          contentType: stat.metaData['content-type'],\n          tamanho: arquivoFinal.length,\n          criptografado,\n        },\n      };\n    } catch (error) {\n      this.logger.error(`Erro ao baixar arquivo do MinIO: ${error.message}`);\n      throw new Error(`Falha ao recuperar documento: ${error.message}`);\n    }\n  }\n\n  /**\n   * Remove um arquivo do MinIO\n   * @param nomeArquivo Nome do arquivo no MinIO\n   */\n  async removerArquivo(nomeArquivo: string): Promise<void> {\n    try {\n      await this.minioClient.removeObject(this.bucketName, nomeArquivo);\n      this.logger.log(`Arquivo ${nomeArquivo} removido do MinIO com sucesso`);\n    } catch (error) {\n      this.logger.error(`Erro ao remover arquivo do MinIO: ${error.message}`);\n      throw new Error(`Falha ao remover documento: ${error.message}`);\n    }\n  }\n\n  /**\n   * Detecta o tipo MIME de um arquivo com base na extensão\n   * @param nomeArquivo Nome do arquivo\n   * @returns Tipo MIME do arquivo\n   */\n  private detectarMimeType(nomeArquivo: string): string {\n    const extensao = path.extname(nomeArquivo).toLowerCase();\n\n    const mimeTypes = {\n      '.pdf': 'application/pdf',\n      '.jpg': 'image/jpeg',\n      '.jpeg': 'image/jpeg',\n      '.png': 'image/png',\n      '.gif': 'image/gif',\n      '.tiff': 'image/tiff',\n      '.tif': 'image/tiff',\n      '.doc': 'application/msword',\n      '.docx':\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      '.xls': 'application/vnd.ms-excel',\n      '.xlsx':\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      '.ppt': 'application/vnd.ms-powerpoint',\n      '.pptx':\n        'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      '.txt': 'text/plain',\n      '.zip': 'application/zip',\n      '.rar': 'application/x-rar-compressed',\n      '.7z': 'application/x-7z-compressed',\n      '.tar': 'application/x-tar',\n      '.gz': 'application/gzip',\n    };\n\n    return mimeTypes[extensao] || 'application/octet-stream';\n  }\n\n  /**\n   * Gera uma URL pré-assinada para acesso temporário a um arquivo\n   * @param nomeArquivo Nome do arquivo no MinIO\n   * @param expiracaoSegundos Tempo de expiração da URL em segundos\n   * @returns URL pré-assinada\n   */\n  async gerarUrlPreAssinada(\n    nomeArquivo: string,\n    expiracaoSegundos = 3600,\n  ): Promise<string> {\n    try {\n      return await this.minioClient.presignedGetObject(\n        this.bucketName,\n        nomeArquivo,\n        expiracaoSegundos,\n      );\n    } catch (error) {\n      this.logger.error(`Erro ao gerar URL pré-assinada: ${error.message}`);\n      throw new Error(\n        `Falha ao gerar URL para acesso ao documento: ${error.message}`,\n      );\n    }\n  }\n}\n"],"version":3}