ca5b6e7e3e0feb1415284be3c1fa40ea
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MetricasService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasService = void 0;
const common_1 = require("@nestjs/common");
const client = __importStar(require("prom-client"));
/**
 * Serviço responsável por gerenciar as métricas do sistema para monitoramento
 * com Prometheus e Grafana.
 */
let MetricasService = MetricasService_1 = class MetricasService {
    logger = new common_1.Logger(MetricasService_1.name);
    registry;
    // Métricas HTTP
    httpRequestsTotal;
    httpRequestDuration;
    httpRequestsSizeBytes;
    httpResponsesSizeBytes;
    // Métricas de negócio
    operacoesTotal;
    dadosSensiveisAcessosTotal;
    // Métricas de sistema
    memoryUsage;
    cpuUsage;
    constructor() {
        // Inicializa o registro de métricas
        this.registry = new client.Registry();
        // Registra o coletor padrão (métricas do Node.js)
        client.collectDefaultMetrics({
            register: this.registry,
            prefix: 'pgben_',
        });
        this.inicializarMetricas();
        this.logger.log('Serviço de métricas inicializado');
    }
    /**
     * Inicializa todas as métricas que serão coletadas pelo sistema
     */
    inicializarMetricas() {
        // Métricas HTTP
        this.httpRequestsTotal = new client.Counter({
            name: 'pgben_http_requests_total',
            help: 'Total de requisições HTTP',
            labelNames: ['method', 'path', 'status'],
            registers: [this.registry],
        });
        this.httpRequestDuration = new client.Histogram({
            name: 'pgben_http_request_duration_seconds',
            help: 'Duração das requisições HTTP em segundos',
            labelNames: ['method', 'path', 'status'],
            buckets: [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],
            registers: [this.registry],
        });
        this.httpRequestsSizeBytes = new client.Histogram({
            name: 'pgben_http_request_size_bytes',
            help: 'Tamanho das requisições HTTP em bytes',
            labelNames: ['method', 'path'],
            buckets: [100, 1000, 10000, 100000, 1000000],
            registers: [this.registry],
        });
        this.httpResponsesSizeBytes = new client.Histogram({
            name: 'pgben_http_response_size_bytes',
            help: 'Tamanho das respostas HTTP em bytes',
            labelNames: ['method', 'path', 'status'],
            buckets: [100, 1000, 10000, 100000, 1000000],
            registers: [this.registry],
        });
        // Métricas de negócio
        this.operacoesTotal = new client.Counter({
            name: 'pgben_operacoes_total',
            help: 'Total de operações por tipo',
            labelNames: ['tipo_operacao', 'entidade'],
            registers: [this.registry],
        });
        this.dadosSensiveisAcessosTotal = new client.Counter({
            name: 'pgben_dados_sensiveis_acessos_total',
            help: 'Total de acessos a dados sensíveis',
            labelNames: ['entidade', 'campo', 'usuario_id'],
            registers: [this.registry],
        });
        // Métricas de sistema
        this.memoryUsage = new client.Gauge({
            name: 'pgben_memory_usage_bytes',
            help: 'Uso de memória em bytes',
            registers: [this.registry],
        });
        this.cpuUsage = new client.Gauge({
            name: 'pgben_cpu_usage_percent',
            help: 'Uso de CPU em porcentagem',
            registers: [this.registry],
        });
    }
    /**
     * Registra uma requisição HTTP
     * @param method Método HTTP
     * @param path Caminho da requisição
     * @param status Código de status da resposta
     * @param duration Duração da requisição em segundos
     * @param requestSize Tamanho da requisição em bytes
     * @param responseSize Tamanho da resposta em bytes
     */
    registrarRequisicaoHttp(method, path, status, duration, requestSize, responseSize) {
        const statusCode = status.toString();
        // Normaliza o path para evitar cardinalidade alta
        const normalizedPath = this.normalizarPath(path);
        this.httpRequestsTotal.inc({
            method,
            path: normalizedPath,
            status: statusCode,
        });
        this.httpRequestDuration.observe({ method, path: normalizedPath, status: statusCode }, duration);
        this.httpRequestsSizeBytes.observe({ method, path: normalizedPath }, requestSize);
        this.httpResponsesSizeBytes.observe({ method, path: normalizedPath, status: statusCode }, responseSize);
    }
    /**
     * Registra uma operação de negócio
     * @param tipoOperacao Tipo de operação (CREATE, READ, UPDATE, DELETE)
     * @param entidade Entidade afetada
     */
    registrarOperacao(tipoOperacao, entidade) {
        this.operacoesTotal.inc({ tipo_operacao: tipoOperacao, entidade });
    }
    /**
     * Registra um acesso a dados sensíveis
     * @param entidade Entidade que contém os dados sensíveis
     * @param campo Campo sensível acessado
     * @param usuarioId ID do usuário que acessou os dados
     */
    registrarAcessoDadosSensiveis(entidade, campo, usuarioId) {
        this.dadosSensiveisAcessosTotal.inc({
            entidade,
            campo,
            usuario_id: usuarioId,
        });
    }
    /**
     * Atualiza as métricas de uso de recursos do sistema
     */
    atualizarMetricasSistema() {
        const memoryUsage = process.memoryUsage();
        this.memoryUsage.set(memoryUsage.rss);
        // Nota: Para obter métricas precisas de CPU, seria necessário
        // implementar uma solução mais robusta usando bibliotecas como os-utils
        // Esta é uma implementação simplificada
        this.cpuUsage.set(process.cpuUsage().user / 1000000);
    }
    /**
     * Obtém todas as métricas registradas
     * @returns Métricas no formato do Prometheus
     */
    async obterMetricas() {
        this.atualizarMetricasSistema();
        return this.registry.metrics();
    }
    /**
     * Normaliza o path da requisição para evitar cardinalidade alta nas métricas
     * @param path Caminho original da requisição
     * @returns Caminho normalizado
     */
    normalizarPath(path) {
        // Remove IDs e outros parâmetros variáveis do path
        // Exemplo: /api/v1/usuarios/123e4567-e89b-12d3-a456-426614174000 -> /api/v1/usuarios/:id
        return path
            .replace(/\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/g, '/:id')
            .replace(/\/[0-9]+/g, '/:id');
    }
};
exports.MetricasService = MetricasService;
exports.MetricasService = MetricasService = MetricasService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], MetricasService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,