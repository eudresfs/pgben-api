{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\pagamento\\pagamento-e2e.spec.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAAsD;AACtD,2CAAkE;AAClE,mDAAqC;AACrC,2CAA6D;AAC7D,6CAAgD;AAChD,qCAAoD;AAEpD,qDAAiD;AACjD,mGAA8F;AAC9F,mGAA8F;AAE9F;;;;;;;;;;GAUG;AACH,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,IAAI,GAAqB,CAAC;IAC1B,IAAI,UAAsB,CAAC;IAE3B,iBAAiB;IACjB,MAAM,SAAS,GAAG,mBAAmB,CAAC;IACtC,MAAM,QAAQ,GAAG,kBAAkB,CAAC;IACpC,MAAM,OAAO,GAAG,iBAAiB,CAAC;IAClC,MAAM,SAAS,GAAG,mBAAmB,CAAC;IACtC,MAAM,aAAa,GAAG,uBAAuB,CAAC;IAC9C,MAAM,cAAc,GAAG,wBAAwB,CAAC;IAChD,MAAM,cAAc,GAAG,yBAAyB,CAAC;IAEjD,gCAAgC;IAChC,IAAI,WAAmB,CAAC;IACxB,IAAI,aAAqB,CAAC;IAC1B,IAAI,aAAqB,CAAC;IAE1B,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,wDAAwD;QACxD,MAAM,aAAa,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAClE,OAAO,EAAE;gBACP,qBAAY,CAAC,OAAO,CAAC;oBACnB,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,WAAW;iBACzB,CAAC;gBACF,uBAAa,CAAC,YAAY,CAAC;oBACzB,OAAO,EAAE,CAAC,qBAAY,CAAC;oBACvB,MAAM,EAAE,CAAC,sBAAa,CAAC;oBACvB,UAAU,EAAE,CAAC,aAA4B,EAAE,EAAE,CAAC,CAAC;wBAC7C,IAAI,EAAE,QAAQ;wBACd,QAAQ,EAAE,UAAU;wBACpB,QAAQ,EAAE,CAAC,SAAS,GAAG,iCAAiC,CAAC;wBACzD,WAAW,EAAE,IAAI,EAAE,qBAAqB;wBACxC,OAAO,EAAE,KAAK;qBACf,CAAC;iBACH,CAAC;gBACF,eAAS,CAAC,aAAa,CAAC;oBACtB,OAAO,EAAE,CAAC,qBAAY,CAAC;oBACvB,MAAM,EAAE,CAAC,sBAAa,CAAC;oBACvB,UAAU,EAAE,CAAC,aAA4B,EAAE,EAAE,CAAC,CAAC;wBAC7C,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,cAAc;wBACzD,WAAW,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;qBACjC,CAAC;iBACH,CAAC;gBACF,sBAAS;aACV;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,GAAG,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC;QAC5C,GAAG,CAAC,cAAc,CAAC,IAAI,uBAAc,CAAC;YACpC,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,IAAI;YACf,oBAAoB,EAAE,IAAI;SAC3B,CAAC,CAAC,CAAC;QAEJ,UAAU,GAAG,aAAa,CAAC,GAAG,CAAa,gBAAU,CAAC,CAAC;QAEvD,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAEjB,4CAA4C;QAC5C,MAAM,uBAAuB,EAAE,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH;;;OAGG;IACH,KAAK,UAAU,uBAAuB;QACpC,iFAAiF;QACjF,mDAAmD;QACnD,kEAAkE;IACpE,CAAC;IAED;;OAEG;IACH,MAAM,UAAU,GAAG,CAAC,MAAc,EAAE,SAAmB,CAAC,SAAS,CAAC,EAAE,YAAoB,mBAAmB,EAAE,EAAE;QAC7G,OAAO,UAAU,CAAC,IAAI,CAAC;YACrB,GAAG,EAAE,MAAM;YACX,MAAM;YACN,OAAO,EAAE,SAAS;SACnB,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;YAExE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,2BAA2B,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,IAAI,CAAC;gBACJ,KAAK,EAAE,MAAM;gBACb,eAAe,EAAE,2CAAmB,CAAC,GAAG;gBACxC,cAAc;gBACd,cAAc,EAAE;oBACd,OAAO,EAAE,KAAK;oBACd,QAAQ,EAAE,aAAa;iBACxB;gBACD,aAAa,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACxC,CAAC,CAAC;YAEL,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;YAChE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,2CAAmB,CAAC,GAAG,CAAC,CAAC;YAEpE,kCAAkC;YAClC,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,mCAAmC;YACnC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;gBAC3D,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,eAAe,WAAW,EAAE,CAAC;iBACjC,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;YAE3C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YACxD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;YACrE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,aAAa,CAAC;iBAClB,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;iBAC7B,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;YAE3C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;YAC9C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEtD,kDAAkD;YAClD,IAAI,WAAW,EAAE,CAAC;gBAChB,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,WAAW,CAAC,CAAC;gBAC7E,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,qCAAqC;YACrC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;gBAC3D,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;YAExE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,KAAK,CAAC,eAAe,WAAW,SAAS,CAAC;iBAC1C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,IAAI,CAAC;gBACJ,MAAM,EAAE,2CAAmB,CAAC,QAAQ;gBACpC,WAAW,EAAE,uCAAuC;aACrD,CAAC,CAAC;YAEL,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,2CAAmB,CAAC,QAAQ,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,mCAAmC;YACnC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;gBAC3D,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;YAExE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,KAAK,CAAC,eAAe,WAAW,SAAS,CAAC;iBAC1C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,IAAI,CAAC;gBACJ,MAAM,EAAE,2CAAmB,CAAC,IAAI;gBAChC,WAAW,EAAE,6BAA6B;aAC3C,CAAC,CAAC;YAEL,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,2CAAmB,CAAC,IAAI,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,mCAAmC;YACnC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;gBAC3D,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;YAExE,wCAAwC;YACxC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;YAEnF,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,eAAe,WAAW,eAAe,CAAC;iBAC/C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;YAEhD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAEjE,kCAAkC;YAClC,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,yCAAyC;YACzC,IAAI,CAAC,WAAW,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;gBAC5E,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,eAAe,WAAW,eAAe,CAAC;iBAC9C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;YAE3C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;YACvD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,yCAAyC;YACzC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,OAAO,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;gBAC3D,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,CAAC;YAEjE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,IAAI,CAAC,eAAe,WAAW,YAAY,CAAC;iBAC5C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,IAAI,CAAC;gBACJ,WAAW,EAAE,2CAA2C;gBACxD,eAAe,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aAC1C,CAAC,CAAC;YAEL,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC3C,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YAEjE,kCAAkC;YAClC,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,yCAAyC;YACzC,IAAI,CAAC,WAAW,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;gBAC5E,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,eAAe,WAAW,cAAc,CAAC;iBAC7C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;YAE3C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;YAC1D,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;YACjE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YACxD,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,yCAAyC;YACzC,IAAI,CAAC,WAAW,IAAI,CAAC,aAAa,EAAE,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;gBAC5E,OAAO;YACT,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;YAExE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,KAAK,CAAC,eAAe,WAAW,SAAS,CAAC;iBAC1C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,IAAI,CAAC;gBACJ,MAAM,EAAE,2CAAmB,CAAC,UAAU;gBACtC,WAAW,EAAE,sDAAsD;aACpE,CAAC,CAAC;YAEL,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,2CAAmB,CAAC,UAAU,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACvC,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,aAAa,CAAC,CAAC;YAEtB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,aAAa,CAAC;iBAClB,GAAG,CAAC,eAAe,EAAE,uBAAuB,CAAC,CAAC;YAEjD,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACpE,MAAM,KAAK,GAAG,UAAU,CAAC,SAAS,EAAE,CAAC,gBAAgB,CAAC,EAAE,SAAS,CAAC,CAAC;YAEnE,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,KAAK,CAAC,eAAe,WAAW,IAAI,cAAc,SAAS,CAAC;iBAC5D,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,IAAI,CAAC;gBACJ,MAAM,EAAE,2CAAmB,CAAC,IAAI;aACjC,CAAC,CAAC;YAEL,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,EAAE,SAAS,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,GAAG,CAAC,mCAAmC,CAAC;iBACxC,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC,CAAC;YAE3C,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,qCAAqC;YACrC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACjB,gDAAgD;gBAChD,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;gBAExE,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;qBACtD,IAAI,CAAC,2BAA2B,aAAa,EAAE,CAAC;qBAChD,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;qBACvC,IAAI,CAAC;oBACJ,KAAK,EAAE,MAAM;oBACb,eAAe,EAAE,2CAAmB,CAAC,GAAG;oBACxC,cAAc;oBACd,cAAc,EAAE;wBACd,OAAO,EAAE,KAAK;wBACd,QAAQ,EAAE,aAAa;qBACxB;oBACD,aAAa,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACxC,CAAC,CAAC;gBAEL,IAAI,cAAc,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;oBAClC,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;gBACvC,CAAC;qBAAM,CAAC;oBACN,OAAO,CAAC,IAAI,CAAC,6CAA6C,CAAC,CAAC;oBAC5D,OAAO;gBACT,CAAC;YACH,CAAC;YAED,MAAM,KAAK,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;YAExE,8EAA8E;YAC9E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAChD,KAAK,CAAC,eAAe,WAAW,SAAS,CAAC;iBAC1C,GAAG,CAAC,eAAe,EAAE,UAAU,KAAK,EAAE,CAAC;iBACvC,IAAI,CAAC;gBACJ,MAAM,EAAE,2CAAmB,CAAC,UAAU;aACvC,CAAC,CAAC;YAEL,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\pagamento\\pagamento-e2e.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication, ValidationPipe } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\n\nimport { AppModule } from '../../src/app.module';\nimport { StatusPagamentoEnum } from '../../src/modules/pagamento/enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../src/modules/pagamento/enums/metodo-pagamento.enum';\n\n/**\n * Testes E2E para o fluxo completo de pagamento\n * \n * Este teste valida a integração completa do módulo de pagamento com outros\n * módulos do sistema em um ambiente próximo ao de produção. Testa-se o fluxo\n * completo desde a criação do pagamento até a confirmação de recebimento.\n * \n * Execução: npm run test:e2e -- pagamento-e2e\n * \n * @author Equipe PGBen\n */\ndescribe('PagamentoController (e2e)', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  \n  // Dados de teste\n  const usuarioId = 'e2e-usuario-teste';\n  const gestorId = 'e2e-gestor-teste';\n  const adminId = 'e2e-admin-teste';\n  const unidadeId = 'e2e-unidade-teste';\n  const solicitacaoId = 'e2e-solicitacao-teste';\n  const beneficiarioId = 'e2e-beneficiario-teste';\n  const infoBancariaId = 'e2e-info-bancaria-teste';\n  \n  // IDs gerados durante os testes\n  let pagamentoId: string;\n  let comprovanteId: string;\n  let confirmacaoId: string;\n\n  beforeAll(async () => {\n    // Usar banco de dados SQLite em memória para testes E2E\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        TypeOrmModule.forRootAsync({\n          imports: [ConfigModule],\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            type: 'sqlite',\n            database: ':memory:',\n            entities: [__dirname + '/../../src/**/*.entity{.ts,.js}'],\n            synchronize: true, // Apenas para testes\n            logging: false\n          }),\n        }),\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          inject: [ConfigService],\n          useFactory: (configService: ConfigService) => ({\n            secret: configService.get('JWT_SECRET') || 'teste-secret',\n            signOptions: { expiresIn: '1h' },\n          }),\n        }),\n        AppModule,\n      ],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    app.useGlobalPipes(new ValidationPipe({\n      transform: true,\n      whitelist: true,\n      forbidNonWhitelisted: true,\n    }));\n    \n    jwtService = moduleFixture.get<JwtService>(JwtService);\n    \n    await app.init();\n    \n    // Preparar dados necessários para os testes\n    await prepararDadosParaTestes();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n  \n  /**\n   * Função auxiliar para preparar dados necessários no banco de testes\n   * Como estamos usando SQLite em memória, precisamos criar os dados iniciais\n   */\n  async function prepararDadosParaTestes() {\n    // Esta função seria implementada para criar dados necessários no banco de testes\n    // Como usuários, solicitações, beneficiários, etc.\n    // Para fins deste teste, vamos usar mocks e stubs onde necessário\n  }\n\n  /**\n   * Função auxiliar para gerar tokens JWT com diferentes perfis\n   */\n  const gerarToken = (userId: string, perfis: string[] = ['usuario'], unidadeId: string = 'e2e-unidade-teste') => {\n    return jwtService.sign({\n      sub: userId,\n      perfis,\n      unidade: unidadeId\n    });\n  };\n\n  describe('Fluxo Completo de Pagamento', () => {\n    it('1. Deve criar um novo pagamento com sucesso', async () => {\n      const token = gerarToken(gestorId, ['gestor', 'financeiro'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/solicitacao/${solicitacaoId}`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          valor: 750.00,\n          metodoPagamento: MetodoPagamentoEnum.PIX,\n          infoBancariaId,\n          dadosBancarios: {\n            pixTipo: 'CPF',\n            pixChave: '12345678900'\n          },\n          dataLiberacao: new Date().toISOString()\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.status).toBe(StatusPagamentoEnum.AGENDADO);\n      expect(response.body.metodoPagamento).toBe(MetodoPagamentoEnum.PIX);\n      \n      // Guardar ID para próximos testes\n      pagamentoId = response.body.id;\n    });\n\n    it('2. Deve consultar um pagamento existente', async () => {\n      // Pular se o teste anterior falhou\n      if (!pagamentoId) {\n        console.warn('Pulando teste - pagamentoId não disponível');\n        return;\n      }\n\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('id', pagamentoId);\n      expect(response.body).toHaveProperty('solicitacaoId', solicitacaoId);\n      expect(response.body).toHaveProperty('valor', 750);\n    });\n\n    it('3. Deve listar pagamentos com paginação', async () => {\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .get('/pagamentos')\n        .query({ page: 1, limit: 10 })\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('items');\n      expect(response.body).toHaveProperty('meta');\n      expect(Array.isArray(response.body.items)).toBe(true);\n      \n      // Deve encontrar o pagamento criado anteriormente\n      if (pagamentoId) {\n        const encontrado = response.body.items.some(item => item.id === pagamentoId);\n        expect(encontrado).toBe(true);\n      }\n    });\n\n    it('4. Deve atualizar o status do pagamento para LIBERADO', async () => {\n      // Pular se o teste de criação falhou\n      if (!pagamentoId) {\n        console.warn('Pulando teste - pagamentoId não disponível');\n        return;\n      }\n\n      const token = gerarToken(gestorId, ['gestor', 'financeiro'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .patch(`/pagamentos/${pagamentoId}/status`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          status: StatusPagamentoEnum.LIBERADO,\n          observacoes: 'Pagamento liberado para transferência'\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.status).toBe(StatusPagamentoEnum.LIBERADO);\n    });\n\n    it('5. Deve atualizar o status do pagamento para PAGO', async () => {\n      // Pular se o teste anterior falhou\n      if (!pagamentoId) {\n        console.warn('Pulando teste - pagamentoId não disponível');\n        return;\n      }\n\n      const token = gerarToken(gestorId, ['gestor', 'financeiro'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .patch(`/pagamentos/${pagamentoId}/status`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          status: StatusPagamentoEnum.PAGO,\n          observacoes: 'Transferência PIX realizada'\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.status).toBe(StatusPagamentoEnum.PAGO);\n    });\n\n    it('6. Deve fazer upload de comprovante de pagamento', async () => {\n      // Pular se o teste anterior falhou\n      if (!pagamentoId) {\n        console.warn('Pulando teste - pagamentoId não disponível');\n        return;\n      }\n\n      const token = gerarToken(gestorId, ['gestor', 'financeiro'], unidadeId);\n      \n      // Criar buffer simulando um arquivo PDF\n      const buffer = Buffer.from('Conteúdo do comprovante de pagamento para testes e2e');\n      \n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`)\n        .attach('arquivo', buffer, 'comprovante.pdf');\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('pagamentoId', pagamentoId);\n      \n      // Guardar ID para próximos testes\n      comprovanteId = response.body.id;\n    });\n\n    it('7. Deve listar comprovantes de um pagamento', async () => {\n      // Pular se os testes anteriores falharam\n      if (!pagamentoId || !comprovanteId) {\n        console.warn('Pulando teste - pagamentoId ou comprovanteId não disponível');\n        return;\n      }\n\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThanOrEqual(1);\n      expect(response.body[0]).toHaveProperty('id', comprovanteId);\n    });\n\n    it('8. Deve registrar confirmação de recebimento', async () => {\n      // Pular se os testes anteriores falharam\n      if (!pagamentoId) {\n        console.warn('Pulando teste - pagamentoId não disponível');\n        return;\n      }\n\n      const token = gerarToken(beneficiarioId, ['usuario'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/confirmar`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          observacoes: 'Pagamento recebido via PIX em minha conta',\n          dataConfirmacao: new Date().toISOString()\n        });\n\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body).toHaveProperty('pagamentoId', pagamentoId);\n      \n      // Guardar ID para próximos testes\n      confirmacaoId = response.body.id;\n    });\n\n    it('9. Deve consultar confirmação de recebimento', async () => {\n      // Pular se os testes anteriores falharam\n      if (!pagamentoId || !confirmacaoId) {\n        console.warn('Pulando teste - pagamentoId ou confirmacaoId não disponível');\n        return;\n      }\n\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}/confirmacao`)\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('id', confirmacaoId);\n      expect(response.body).toHaveProperty('pagamentoId', pagamentoId);\n      expect(response.body).toHaveProperty('dataConfirmacao');\n      expect(response.body).toHaveProperty('observacoes');\n    });\n\n    it('10. Deve finalizar o pagamento após confirmação', async () => {\n      // Pular se os testes anteriores falharam\n      if (!pagamentoId || !confirmacaoId) {\n        console.warn('Pulando teste - pagamentoId ou confirmacaoId não disponível');\n        return;\n      }\n\n      const token = gerarToken(gestorId, ['gestor', 'financeiro'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .patch(`/pagamentos/${pagamentoId}/status`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          status: StatusPagamentoEnum.FINALIZADO,\n          observacoes: 'Pagamento finalizado após confirmação de recebimento'\n        });\n\n      expect(response.status).toBe(200);\n      expect(response.body.status).toBe(StatusPagamentoEnum.FINALIZADO);\n    });\n  });\n\n  describe('Testes de Segurança E2E', () => {\n    it('Deve rejeitar acesso sem autenticação', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/pagamentos');\n\n      expect(response.status).toBe(401);\n    });\n\n    it('Deve rejeitar token JWT inválido', async () => {\n      const response = await request(app.getHttpServer())\n        .get('/pagamentos')\n        .set('Authorization', 'Bearer token-invalido');\n\n      expect(response.status).toBe(401);\n    });\n\n    it('Deve rejeitar acesso a recursos restritos por perfil', async () => {\n      const token = gerarToken(usuarioId, ['usuario_basico'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .patch(`/pagamentos/${pagamentoId || 'pagamento-id'}/status`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          status: StatusPagamentoEnum.PAGO\n        });\n\n      expect(response.status).toBe(403);\n    });\n  });\n\n  describe('Casos de Erro', () => {\n    it('Deve retornar 404 para pagamento inexistente', async () => {\n      const token = gerarToken(gestorId, ['gestor'], unidadeId);\n      \n      const response = await request(app.getHttpServer())\n        .get('/pagamentos/pagamento-inexistente')\n        .set('Authorization', `Bearer ${token}`);\n\n      expect(response.status).toBe(404);\n      expect(response.body.message).toContain('não encontrado');\n    });\n\n    it('Deve rejeitar transição de status inválida', async () => {\n      // Pular se o teste de criação falhou\n      if (!pagamentoId) {\n        // Criar um pagamento específico para este teste\n        const token = gerarToken(gestorId, ['gestor', 'financeiro'], unidadeId);\n        \n        const createResponse = await request(app.getHttpServer())\n          .post(`/pagamentos/solicitacao/${solicitacaoId}`)\n          .set('Authorization', `Bearer ${token}`)\n          .send({\n            valor: 300.00,\n            metodoPagamento: MetodoPagamentoEnum.PIX,\n            infoBancariaId,\n            dadosBancarios: {\n              pixTipo: 'CPF',\n              pixChave: '12345678900'\n            },\n            dataLiberacao: new Date().toISOString()\n          });\n        \n        if (createResponse.status === 201) {\n          pagamentoId = createResponse.body.id;\n        } else {\n          console.warn('Não foi possível criar pagamento para teste');\n          return;\n        }\n      }\n\n      const token = gerarToken(gestorId, ['gestor', 'financeiro'], unidadeId);\n      \n      // Tentar uma transição inválida (de AGENDADO para FINALIZADO pulando estados)\n      const response = await request(app.getHttpServer())\n        .patch(`/pagamentos/${pagamentoId}/status`)\n        .set('Authorization', `Bearer ${token}`)\n        .send({\n          status: StatusPagamentoEnum.FINALIZADO\n        });\n\n      expect(response.status).toBe(400);\n      expect(response.body.message).toContain('Transição de status');\n    });\n  });\n});\n"],"version":3}