{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\metricas.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\metricas.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport * as client from 'prom-client';\n\n/**\n * Serviço responsável por gerenciar as métricas do sistema para monitoramento\n * com Prometheus e Grafana.\n */\n@Injectable()\nexport class MetricasService {\n  private readonly logger = new Logger(MetricasService.name);\n  private registry: client.Registry;\n\n  // Métricas HTTP\n  private httpRequestsTotal: client.Counter<string>;\n  private httpRequestDuration: client.Histogram<string>;\n  private httpRequestsSizeBytes: client.Histogram<string>;\n  private httpResponsesSizeBytes: client.Histogram<string>;\n\n  // Métricas de negócio\n  private operacoesTotal: client.Counter<string>;\n  private dadosSensiveisAcessosTotal: client.Counter<string>;\n\n  // Métricas de sistema\n  private memoryUsage: client.Gauge<string>;\n  private cpuUsage: client.Gauge<string>;\n\n  constructor() {\n    // Inicializa o registro de métricas\n    this.registry = new client.Registry();\n\n    // Registra o coletor padrão (métricas do Node.js)\n    client.collectDefaultMetrics({\n      register: this.registry,\n      prefix: 'pgben_',\n    });\n\n    this.inicializarMetricas();\n    this.logger.log('Serviço de métricas inicializado');\n  }\n\n  /**\n   * Inicializa todas as métricas que serão coletadas pelo sistema\n   */\n  private inicializarMetricas(): void {\n    // Métricas HTTP\n    this.httpRequestsTotal = new client.Counter({\n      name: 'pgben_http_requests_total',\n      help: 'Total de requisições HTTP',\n      labelNames: ['method', 'path', 'status'],\n      registers: [this.registry],\n    });\n\n    this.httpRequestDuration = new client.Histogram({\n      name: 'pgben_http_request_duration_seconds',\n      help: 'Duração das requisições HTTP em segundos',\n      labelNames: ['method', 'path', 'status'],\n      buckets: [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],\n      registers: [this.registry],\n    });\n\n    this.httpRequestsSizeBytes = new client.Histogram({\n      name: 'pgben_http_request_size_bytes',\n      help: 'Tamanho das requisições HTTP em bytes',\n      labelNames: ['method', 'path'],\n      buckets: [100, 1000, 10000, 100000, 1000000],\n      registers: [this.registry],\n    });\n\n    this.httpResponsesSizeBytes = new client.Histogram({\n      name: 'pgben_http_response_size_bytes',\n      help: 'Tamanho das respostas HTTP em bytes',\n      labelNames: ['method', 'path', 'status'],\n      buckets: [100, 1000, 10000, 100000, 1000000],\n      registers: [this.registry],\n    });\n\n    // Métricas de negócio\n    this.operacoesTotal = new client.Counter({\n      name: 'pgben_operacoes_total',\n      help: 'Total de operações por tipo',\n      labelNames: ['tipo_operacao', 'entidade'],\n      registers: [this.registry],\n    });\n\n    this.dadosSensiveisAcessosTotal = new client.Counter({\n      name: 'pgben_dados_sensiveis_acessos_total',\n      help: 'Total de acessos a dados sensíveis',\n      labelNames: ['entidade', 'campo', 'usuario_id'],\n      registers: [this.registry],\n    });\n\n    // Métricas de sistema\n    this.memoryUsage = new client.Gauge({\n      name: 'pgben_memory_usage_bytes',\n      help: 'Uso de memória em bytes',\n      registers: [this.registry],\n    });\n\n    this.cpuUsage = new client.Gauge({\n      name: 'pgben_cpu_usage_percent',\n      help: 'Uso de CPU em porcentagem',\n      registers: [this.registry],\n    });\n  }\n\n  /**\n   * Registra uma requisição HTTP\n   * @param method Método HTTP\n   * @param path Caminho da requisição\n   * @param status Código de status da resposta\n   * @param duration Duração da requisição em segundos\n   * @param requestSize Tamanho da requisição em bytes\n   * @param responseSize Tamanho da resposta em bytes\n   */\n  registrarRequisicaoHttp(\n    method: string,\n    path: string,\n    status: number,\n    duration: number,\n    requestSize: number,\n    responseSize: number,\n  ): void {\n    const statusCode = status.toString();\n\n    // Normaliza o path para evitar cardinalidade alta\n    const normalizedPath = this.normalizarPath(path);\n\n    this.httpRequestsTotal.inc({\n      method,\n      path: normalizedPath,\n      status: statusCode,\n    });\n    this.httpRequestDuration.observe(\n      { method, path: normalizedPath, status: statusCode },\n      duration,\n    );\n    this.httpRequestsSizeBytes.observe(\n      { method, path: normalizedPath },\n      requestSize,\n    );\n    this.httpResponsesSizeBytes.observe(\n      { method, path: normalizedPath, status: statusCode },\n      responseSize,\n    );\n  }\n\n  /**\n   * Registra uma operação de negócio\n   * @param tipoOperacao Tipo de operação (CREATE, READ, UPDATE, DELETE)\n   * @param entidade Entidade afetada\n   */\n  registrarOperacao(tipoOperacao: string, entidade: string): void {\n    this.operacoesTotal.inc({ tipo_operacao: tipoOperacao, entidade });\n  }\n\n  /**\n   * Registra um acesso a dados sensíveis\n   * @param entidade Entidade que contém os dados sensíveis\n   * @param campo Campo sensível acessado\n   * @param usuarioId ID do usuário que acessou os dados\n   */\n  registrarAcessoDadosSensiveis(\n    entidade: string,\n    campo: string,\n    usuarioId: string,\n  ): void {\n    this.dadosSensiveisAcessosTotal.inc({\n      entidade,\n      campo,\n      usuario_id: usuarioId,\n    });\n  }\n\n  /**\n   * Atualiza as métricas de uso de recursos do sistema\n   */\n  atualizarMetricasSistema(): void {\n    const memoryUsage = process.memoryUsage();\n    this.memoryUsage.set(memoryUsage.rss);\n\n    // Nota: Para obter métricas precisas de CPU, seria necessário\n    // implementar uma solução mais robusta usando bibliotecas como os-utils\n    // Esta é uma implementação simplificada\n    this.cpuUsage.set(process.cpuUsage().user / 1000000);\n  }\n\n  /**\n   * Obtém todas as métricas registradas\n   * @returns Métricas no formato do Prometheus\n   */\n  async obterMetricas(): Promise<string> {\n    this.atualizarMetricasSistema();\n    return this.registry.metrics();\n  }\n\n  /**\n   * Normaliza o path da requisição para evitar cardinalidade alta nas métricas\n   * @param path Caminho original da requisição\n   * @returns Caminho normalizado\n   */\n  private normalizarPath(path: string): string {\n    // Remove IDs e outros parâmetros variáveis do path\n    // Exemplo: /api/v1/usuarios/123e4567-e89b-12d3-a456-426614174000 -> /api/v1/usuarios/:id\n    return path\n      .replace(\n        /\\/[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}/g,\n        '/:id',\n      )\n      .replace(/\\/[0-9]+/g, '/:id');\n  }\n}\n"],"version":3}