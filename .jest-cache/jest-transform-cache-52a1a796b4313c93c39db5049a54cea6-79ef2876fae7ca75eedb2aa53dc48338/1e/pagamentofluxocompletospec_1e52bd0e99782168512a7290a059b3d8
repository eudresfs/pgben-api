27945a1ce795978dc0db9d18df1dcf66
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const request = __importStar(require("supertest"));
const typeorm_1 = require("@nestjs/typeorm");
const config_1 = require("@nestjs/config");
const jwt_1 = require("@nestjs/jwt");
const axios_1 = require("@nestjs/axios");
const pagamento_module_1 = require("../../pagamento.module");
const entities_1 = require("../../../entities");
const status_pagamento_enum_1 = require("../../enums/status-pagamento.enum");
const metodo_pagamento_enum_1 = require("../../enums/metodo-pagamento.enum");
const pagamento_service_1 = require("../../services/pagamento.service");
const integracao_solicitacao_service_1 = require("../../services/integracao-solicitacao.service");
const integracao_cidadao_service_1 = require("../../services/integracao-cidadao.service");
const integracao_documento_service_1 = require("../../services/integracao-documento.service");
const auditoria_pagamento_service_1 = require("../../services/auditoria-pagamento.service");
/**
 * Testes de integração para o fluxo completo de pagamento
 *
 * Verifica o funcionamento correto do fluxo completo de pagamento,
 * desde a criação até a confirmação de recebimento.
 *
 * @author Equipe PGBen
 */
describe('Fluxo Completo de Pagamento (Integration)', () => {
    let app;
    let pagamentoService;
    let integracaoSolicitacaoService;
    let integracaoCidadaoService;
    let integracaoDocumentoService;
    let auditoriaPagamentoService;
    let pagamentoRepository;
    let comprovanteRepository;
    let confirmacaoRepository;
    // Dados de teste
    const usuarioId = 'usuario-teste-id';
    const solicitacaoId = 'solicitacao-teste-id';
    const cidadaoId = 'cidadao-teste-id';
    const infoBancariaId = 'info-bancaria-teste-id';
    // Mock do token JWT para autenticação
    const mockJwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3VhcmlvLXRlc3RlLWlkIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';
    // Mock dos serviços externos
    const mockIntegracaoSolicitacaoService = {
        verificarStatusSolicitacao: jest.fn().mockResolvedValue('PAGAMENTO_PENDENTE'),
        verificarSolicitacaoElegivel: jest.fn().mockResolvedValue(true),
        atualizarStatusSolicitacao: jest.fn().mockResolvedValue(true),
        obterDetalhesSolicitacao: jest.fn().mockResolvedValue({
            id: solicitacaoId,
            cidadaoId: cidadaoId,
            valorAprovado: 500.00,
            status: 'PAGAMENTO_PENDENTE',
            beneficio: {
                id: 'beneficio-id',
                nome: 'Auxílio Moradia'
            },
            unidade: {
                id: 'unidade-id',
                nome: 'CRAS Centro'
            }
        })
    };
    const mockIntegracaoCidadaoService = {
        obterDadosCidadao: jest.fn().mockResolvedValue({
            id: cidadaoId,
            nome: 'João da Silva',
            cpf: '12345678900'
        }),
        obterDadosBancarios: jest.fn().mockResolvedValue([
            {
                id: infoBancariaId,
                tipo: 'PIX',
                pixTipo: 'CPF',
                pixChave: '12345678900',
                principal: true
            }
        ]),
        obterDadosBancariosPorId: jest.fn().mockResolvedValue({
            id: infoBancariaId,
            tipo: 'PIX',
            pixTipo: 'CPF',
            pixChave: '12345678900',
            principal: true
        }),
        validarDadosBancarios: jest.fn().mockResolvedValue(true)
    };
    const mockIntegracaoDocumentoService = {
        uploadComprovante: jest.fn().mockResolvedValue({
            id: 'documento-id',
            nome: 'comprovante.pdf',
            tamanho: 1024,
            tipo: 'application/pdf',
            url: 'http://localhost/documentos/documento-id'
        }),
        obterComprovante: jest.fn().mockResolvedValue({
            id: 'documento-id',
            nome: 'comprovante.pdf',
            tamanho: 1024,
            tipo: 'application/pdf',
            url: 'http://localhost/documentos/documento-id'
        }),
        listarComprovantes: jest.fn().mockResolvedValue([
            {
                id: 'documento-id',
                nome: 'comprovante.pdf',
                tamanho: 1024,
                tipo: 'application/pdf',
                url: 'http://localhost/documentos/documento-id'
            }
        ]),
        removerComprovante: jest.fn().mockResolvedValue(undefined)
    };
    const mockAuditoriaPagamentoService = {
        logCriacaoPagamento: jest.fn(),
        logMudancaStatus: jest.fn(),
        logCancelamentoPagamento: jest.fn(),
        logUploadComprovante: jest.fn(),
        logRemocaoComprovante: jest.fn(),
        logConfirmacaoRecebimento: jest.fn(),
        logErroProcessamento: jest.fn()
    };
    // Mock dos repositórios
    const mockPagamentoRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
        update: jest.fn(),
        delete: jest.fn()
    };
    const mockComprovanteRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
        delete: jest.fn()
    };
    const mockConfirmacaoRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn()
    };
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [
                pagamento_module_1.PagamentoModule,
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test'
                }),
                jwt_1.JwtModule.registerAsync({
                    imports: [config_1.ConfigModule],
                    useFactory: async (configService) => ({
                        secret: configService.get('JWT_SECRET') || 'test-secret',
                        signOptions: { expiresIn: '1h' }
                    }),
                    inject: [config_1.ConfigService]
                }),
                axios_1.HttpModule
            ],
            providers: [
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.Pagamento),
                    useValue: mockPagamentoRepository
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.ComprovantePagamento),
                    useValue: mockComprovanteRepository
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.ConfirmacaoRecebimento),
                    useValue: mockConfirmacaoRepository
                }
            ]
        })
            .overrideProvider(integracao_solicitacao_service_1.IntegracaoSolicitacaoService)
            .useValue(mockIntegracaoSolicitacaoService)
            .overrideProvider(integracao_cidadao_service_1.IntegracaoCidadaoService)
            .useValue(mockIntegracaoCidadaoService)
            .overrideProvider(integracao_documento_service_1.IntegracaoDocumentoService)
            .useValue(mockIntegracaoDocumentoService)
            .overrideProvider(auditoria_pagamento_service_1.AuditoriaPagamentoService)
            .useValue(mockAuditoriaPagamentoService)
            .compile();
        app = moduleFixture.createNestApplication();
        pagamentoService = moduleFixture.get(pagamento_service_1.PagamentoService);
        integracaoSolicitacaoService = moduleFixture.get(integracao_solicitacao_service_1.IntegracaoSolicitacaoService);
        integracaoCidadaoService = moduleFixture.get(integracao_cidadao_service_1.IntegracaoCidadaoService);
        integracaoDocumentoService = moduleFixture.get(integracao_documento_service_1.IntegracaoDocumentoService);
        auditoriaPagamentoService = moduleFixture.get(auditoria_pagamento_service_1.AuditoriaPagamentoService);
        pagamentoRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(entities_1.Pagamento));
        comprovanteRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(entities_1.ComprovantePagamento));
        confirmacaoRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(entities_1.ConfirmacaoRecebimento));
        await app.init();
    });
    afterAll(async () => {
        await app.close();
    });
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Fluxo Completo: Criar → Liberar → Enviar Comprovante → Confirmar', () => {
        let pagamentoId;
        let comprovanteId;
        let confirmacaoId;
        it('1. Deve criar um novo pagamento com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: 'pagamento-teste-id',
                solicitacaoId,
                valor: 500.00,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900'
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPagamentoRepository.create.mockReturnValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/solicitacao/${solicitacaoId}`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                valor: 500.00,
                dataLiberacao: new Date(),
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900'
                }
            });
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            // Guardar ID para próximos testes
            pagamentoId = response.body.id;
            // Verificar chamadas de serviços
            expect(integracaoSolicitacaoService.verificarSolicitacaoElegivel).toHaveBeenCalledWith(solicitacaoId);
            expect(integracaoCidadaoService.validarDadosBancarios).toHaveBeenCalled();
            expect(auditoriaPagamentoService.logCriacaoPagamento).toHaveBeenCalled();
        });
        it('2. Deve atualizar o status para LIBERADO com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                valor: 500.00,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900'
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            const pagamentoAtualizadoMock = {
                ...pagamentoMock,
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
                updatedAt: new Date()
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .patch(`/pagamentos/${pagamentoId}/status`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
                observacoes: 'Pagamento liberado após verificação'
            });
            // Verificar resposta
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            // Verificar chamadas de serviços
            expect(auditoriaPagamentoService.logMudancaStatus).toHaveBeenCalled();
            expect(integracaoSolicitacaoService.atualizarStatusSolicitacao).toHaveBeenCalledWith(solicitacaoId, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, usuarioId);
        });
        it('3. Deve enviar comprovante com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO
            };
            const comprovanteMock = {
                id: 'comprovante-teste-id',
                pagamentoId,
                documentoId: 'documento-id',
                nomeArquivo: 'comprovante.pdf',
                tipoArquivo: 'application/pdf',
                tamanhoArquivo: 1024,
                urlDownload: 'http://localhost/documentos/documento-id',
                uploadedBy: usuarioId,
                createdAt: new Date()
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockComprovanteRepository.create.mockReturnValue(comprovanteMock);
            mockComprovanteRepository.save.mockResolvedValue(comprovanteMock);
            // Criar arquivo de teste
            const buffer = Buffer.from('conteúdo de teste do arquivo');
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/comprovantes`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .attach('arquivo', buffer, 'comprovante.pdf')
                .field('descricao', 'Comprovante de pagamento');
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            expect(response.body.nomeArquivo).toBe('comprovante.pdf');
            // Guardar ID para próximos testes
            comprovanteId = response.body.id;
            // Verificar chamadas de serviços
            expect(integracaoDocumentoService.uploadComprovante).toHaveBeenCalled();
            expect(auditoriaPagamentoService.logUploadComprovante).toHaveBeenCalled();
        });
        it('4. Deve confirmar recebimento com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
                valor: 500.00,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                responsavelLiberacao: usuarioId
            };
            const pagamentoAtualizadoMock = {
                ...pagamentoMock,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
                responsavelConfirmacao: usuarioId,
                dataConfirmacao: new Date(),
                updatedAt: new Date()
            };
            const confirmacaoMock = {
                id: 'confirmacao-teste-id',
                pagamentoId,
                dataConfirmacao: new Date(),
                metodoConfirmacao: 'PRESENCIAL',
                registradoPor: usuarioId,
                observacoes: 'Confirmação realizada pelo beneficiário',
                createdAt: new Date()
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);
            mockConfirmacaoRepository.create.mockReturnValue(confirmacaoMock);
            mockConfirmacaoRepository.save.mockResolvedValue(confirmacaoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post('/pagamentos/confirmar-recebimento')
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                pagamentoId,
                dataConfirmacao: new Date(),
                metodoConfirmacao: 'PRESENCIAL',
                observacoes: 'Confirmação realizada pelo beneficiário'
            });
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            expect(response.body.metodoConfirmacao).toBe('PRESENCIAL');
            // Guardar ID para próximos testes
            confirmacaoId = response.body.id;
            // Verificar chamadas de serviços
            expect(auditoriaPagamentoService.logConfirmacaoRecebimento).toHaveBeenCalled();
        });
        it('5. Deve verificar que o pagamento está com status CONFIRMADO', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
                valor: 500.00,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                responsavelLiberacao: usuarioId,
                responsavelConfirmacao: usuarioId,
                dataConfirmacao: new Date()
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${mockJwtToken}`);
            // Verificar resposta
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(response.body).toHaveProperty('responsavelConfirmacao');
            expect(response.body).toHaveProperty('dataConfirmacao');
        });
    });
    describe('Fluxo de Cancelamento', () => {
        let pagamentoId;
        it('1. Deve criar um novo pagamento para cancelamento', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: 'pagamento-cancelamento-id',
                solicitacaoId,
                valor: 300.00,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900'
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            mockPagamentoRepository.create.mockReturnValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/solicitacao/${solicitacaoId}`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                valor: 300.00,
                dataLiberacao: new Date(),
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900'
                }
            });
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            // Guardar ID para próximos testes
            pagamentoId = response.body.id;
        });
        it('2. Deve cancelar o pagamento com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                valor: 300.00,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900'
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date()
            };
            const pagamentoAtualizadoMock = {
                ...pagamentoMock,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
                observacoes: 'CANCELADO: Dados bancários incorretos',
                updatedAt: new Date()
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/cancelar`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                motivo: 'Dados bancários incorretos'
            });
            // Verificar resposta
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(response.body.observacoes).toContain('CANCELADO');
            // Verificar chamadas de serviços
            expect(auditoriaPagamentoService.logCancelamentoPagamento).toHaveBeenCalled();
            expect(integracaoSolicitacaoService.atualizarStatusSolicitacao).toHaveBeenCalledWith(solicitacaoId, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, usuarioId);
        });
        it('3. Não deve permitir atualizar status de um pagamento cancelado', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
                observacoes: 'CANCELADO: Dados bancários incorretos'
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .patch(`/pagamentos/${pagamentoId}/status`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO
            });
            // Verificar resposta
            expect(response.status).toBe(409); // Conflict
            expect(response.body).toHaveProperty('message');
            expect(response.body.message).toContain('não é possível');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHBhZ2FtZW50b1xcdGVzdHNcXGludGVncmF0aW9uXFxwYWdhbWVudG8tZmx1eG8tY29tcGxldG8uc3BlYy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUFzRDtBQUV0RCxtREFBcUM7QUFDckMsNkNBQXFEO0FBRXJELDJDQUE2RDtBQUM3RCxxQ0FBd0M7QUFDeEMseUNBQTJDO0FBRTNDLDZEQUF5RDtBQUN6RCxnREFJMkI7QUFDM0IsNkVBQXdFO0FBQ3hFLDZFQUF3RTtBQUN4RSx3RUFBb0U7QUFDcEUsa0dBQTZGO0FBQzdGLDBGQUFxRjtBQUNyRiw4RkFBeUY7QUFDekYsNEZBQXVGO0FBRXZGOzs7Ozs7O0dBT0c7QUFDSCxRQUFRLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO0lBQ3pELElBQUksR0FBcUIsQ0FBQztJQUMxQixJQUFJLGdCQUFrQyxDQUFDO0lBQ3ZDLElBQUksNEJBQTBELENBQUM7SUFDL0QsSUFBSSx3QkFBa0QsQ0FBQztJQUN2RCxJQUFJLDBCQUFzRCxDQUFDO0lBQzNELElBQUkseUJBQW9ELENBQUM7SUFDekQsSUFBSSxtQkFBMEMsQ0FBQztJQUMvQyxJQUFJLHFCQUF1RCxDQUFDO0lBQzVELElBQUkscUJBQXlELENBQUM7SUFFOUQsaUJBQWlCO0lBQ2pCLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDO0lBQ3JDLE1BQU0sYUFBYSxHQUFHLHNCQUFzQixDQUFDO0lBQzdDLE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDO0lBQ3JDLE1BQU0sY0FBYyxHQUFHLHdCQUF3QixDQUFDO0lBRWhELHNDQUFzQztJQUN0QyxNQUFNLFlBQVksR0FBRyw2S0FBNkssQ0FBQztJQUVuTSw2QkFBNkI7SUFDN0IsTUFBTSxnQ0FBZ0MsR0FBRztRQUN2QywwQkFBMEIsRUFB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QixFQUFFLEVBQUUsV0FBVztnQkFDZixhQUFhO2dCQUNiLE1BQU0sRUFBRSwyQ0FBbUIsQ0FBQyxTQUFTO2dCQUNyQyxXQUFXLEVBQUUsdUNBQXVDO2FBQ3JELENBQUM7WUFFRix1QkFBdUIsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFakUsc0JBQXNCO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztpQkFDaEQsS0FBSyxDQUFDLGVBQWUsV0FBVyxTQUFTLENBQUM7aUJBQzFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBVSxZQUFZLEVBQUUsQ0FBQztpQkFDOUMsSUFBSSxDQUFDO2dCQUNKLE1BQU0sRUFBRSwyQ0FBbUIsQ0FBQyxRQUFRO2FBQ3JDLENBQUMsQ0FBQztZQUVMLHFCQUFxQjtZQUNyQixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVc7WUFDOUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDaEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxwYWdhbWVudG9cXHRlc3RzXFxpbnRlZ3JhdGlvblxccGFnYW1lbnRvLWZsdXhvLWNvbXBsZXRvLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBJTmVzdEFwcGxpY2F0aW9uIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0ICogYXMgcmVxdWVzdCBmcm9tICdzdXBlcnRlc3QnO1xuaW1wb3J0IHsgZ2V0UmVwb3NpdG9yeVRva2VuIH0gZnJvbSAnQG5lc3Rqcy90eXBlb3JtJztcbmltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tICd0eXBlb3JtJztcbmltcG9ydCB7IENvbmZpZ01vZHVsZSwgQ29uZmlnU2VydmljZSB9IGZyb20gJ0BuZXN0anMvY29uZmlnJztcbmltcG9ydCB7IEp3dE1vZHVsZSB9IGZyb20gJ0BuZXN0anMvand0JztcbmltcG9ydCB7IEh0dHBNb2R1bGUgfSBmcm9tICdAbmVzdGpzL2F4aW9zJztcblxuaW1wb3J0IHsgUGFnYW1lbnRvTW9kdWxlIH0gZnJvbSAnLi4vLi4vcGFnYW1lbnRvLm1vZHVsZSc7XG5pbXBvcnQgeyBcbiAgUGFnYW1lbnRvLCBcbiAgQ29tcHJvdmFudGVQYWdhbWVudG8sIFxuICBDb25maXJtYWNhb1JlY2ViaW1lbnRvIFxufSBmcm9tICcuLi8uLi8uLi9lbnRpdGllcyc7XG5pbXBvcnQgeyBTdGF0dXNQYWdhbWVudG9FbnVtIH0gZnJvbSAnLi4vLi4vZW51bXMvc3RhdHVzLXBhZ2FtZW50by5lbnVtJztcbmltcG9ydCB7IE1ldG9kb1BhZ2FtZW50b0VudW0gfSBmcm9tICcuLi8uLi9lbnVtcy9tZXRvZG8tcGFnYW1lbnRvLmVudW0nO1xuaW1wb3J0IHsgUGFnYW1lbnRvU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BhZ2FtZW50by5zZXJ2aWNlJztcbmltcG9ydCB7IEludGVncmFjYW9Tb2xpY2l0YWNhb1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9pbnRlZ3JhY2FvLXNvbGljaXRhY2FvLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW50ZWdyYWNhb0NpZGFkYW9TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvaW50ZWdyYWNhby1jaWRhZGFvLnNlcnZpY2UnO1xuaW1wb3J0IHsgSW50ZWdyYWNhb0RvY3VtZW50b1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9pbnRlZ3JhY2FvLWRvY3VtZW50by5zZXJ2aWNlJztcbmltcG9ydCB7IEF1ZGl0b3JpYVBhZ2FtZW50b1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9hdWRpdG9yaWEtcGFnYW1lbnRvLnNlcnZpY2UnO1xuXG4vKipcbiAqIFRlc3RlcyBkZSBpbnRlZ3Jhw6fDo28gcGFyYSBvIGZsdXhvIGNvbXBsZXRvIGRlIHBhZ2FtZW50b1xuICogXG4gKiBWZXJpZmljYSBvIGZ1bmNpb25hbWVudG8gY29ycmV0byBkbyBmbHV4byBjb21wbGV0byBkZSBwYWdhbWVudG8sXG4gKiBkZXNkZSBhIGNyaWHDp8OjbyBhdMOpIGEgY29uZmlybWHDp8OjbyBkZSByZWNlYmltZW50by5cbiAqIFxuICogQGF1dGhvciBFcXVpcGUgUEdCZW5cbiAqL1xuZGVzY3JpYmUoJ0ZsdXhvIENvbXBsZXRvIGRlIFBhZ2FtZW50byAoSW50ZWdyYXRpb24pJywgKCkgPT4ge1xuICBsZXQgYXBwOiBJTmVzdEFwcGxpY2F0aW9uO1xuICBsZXQgcGFnYW1lbnRvU2VydmljZTogUGFnYW1lbnRvU2VydmljZTtcbiAgbGV0IGludGVncmFjYW9Tb2xpY2l0YWNhb1NlcnZpY2U6IEludGVncmFjYW9Tb2xpY2l0YWNhb1NlcnZpY2U7XG4gIGxldCBpbnRlZ3JhY2FvQ2lkYWRhb1NlcnZpY2U6IEludGVncmFjYW9DaWRhZGFvU2VydmljZTtcbiAgbGV0IGludGVncmFjYW9Eb2N1bWVudG9TZXJ2aWNlOiBJbnRlZ3JhY2FvRG9jdW1lbnRvU2VydmljZTtcbiAgbGV0IGF1ZGl0b3JpYVBhZ2FtZW50b1NlcnZpY2U6IEF1ZGl0b3JpYVBhZ2FtZW50b1NlcnZpY2U7XG4gIGxldCBwYWdhbWVudG9SZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFBhZ2FtZW50bz47XG4gIGxldCBjb21wcm92YW50ZVJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8Q29tcHJvdmFudGVQYWdhbWVudG8+O1xuICBsZXQgY29uZmlybWFjYW9SZXBvc2l0b3J5OiBSZXBvc2l0b3J5PENvbmZpcm1hY2FvUmVjZWJpbWVudG8+O1xuXG4gIC8vIERhZG9zIGRlIHRlc3RlXG4gIGNvbnN0IHVzdWFyaW9JZCA9ICd1c3VhcmlvLXRlc3RlLWlkJztcbiAgY29uc3Qgc29saWNpdGFjYW9JZCA9ICdzb2xpY2l0YWNhby10ZXN0ZS1pZCc7XG4gIGNvbnN0IGNpZGFkYW9JZCA9ICdjaWRhZGFvLXRlc3RlLWlkJztcbiAgY29uc3QgaW5mb0JhbmNhcmlhSWQgPSAnaW5mby1iYW5jYXJpYS10ZXN0ZS1pZCc7XG4gIFxuICAvLyBNb2NrIGRvIHRva2VuIEpXVCBwYXJhIGF1dGVudGljYcOnw6NvXG4gIGNvbnN0IG1vY2tKd3RUb2tlbiA9ICdleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKemRXSWlPaUoxYzNWaGNtbHZMWFJsYzNSbExXbGtJaXdpYm1GdFpTSTZJbFZ6ZGNPaGNtbHZJRlJsYzNSbElpd2lhV0YwSWpveE5URTJNak01TURJeWZRLlNmbEt4d1JKU01lS0tGMlFUNGZ3cE1lSmYzNlBPazZ5SlZfYWRRc3N3NWMnO1xuXG4gIC8vIE1vY2sgZG9zIHNlcnZpw6dvcyBleHRlcm5vc1xuICBjb25zdCBtb2NrSW50ZWdyYWNhb1NvbGljaXRhY2FvU2VydmljZSA9IHtcbiAgICB2ZXJpZmljYXJTdGF0dXNTb2xpY2l0YWNhbzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKCdQQUdBTUVOVE9fUEVOREVOVEUnKSxcbiAgICB2ZXJpZmljYXJTb2xpY2l0YWNhb0VsZWdpdmVsOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodHJ1ZSksXG4gICAgYXR1YWxpemFyU3RhdHVzU29saWNpdGFjYW86IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKSxcbiAgICBvYnRlckRldGFsaGVzU29saWNpdGFjYW86IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBpZDogc29saWNpdGFjYW9JZCxcbiAgICAgIGNpZGFkYW9JZDogY2lkYWRhb0lkLFxuICAgICAgdmFsb3JBcHJvdmFkbzogNTAwLjAwLFxuICAgICAgc3RhdHVzOiAnUEFHQU1FTlRPX1BFTkRFTlRFJyxcbiAgICAgIGJlbmVmaWNpbzoge1xuICAgICAgICBpZDogJ2JlbmVmaWNpby1pZCcsXG4gICAgICAgIG5vbWU6ICdBdXjDrWxpbyBNb3JhZGlhJ1xuICAgICAgfSxcbiAgICAgIHVuaWRhZGU6IHtcbiAgICAgICAgaWQ6ICd1bmlkYWRlLWlkJyxcbiAgICAgICAgbm9tZTogJ0NSQVMgQ2VudHJvJ1xuICAgICAgfVxuICAgIH0pXG4gIH07XG5cbiAgY29uc3QgbW9ja0ludGVncmFjYW9DaWRhZGFvU2VydmljZSA9IHtcbiAgICBvYnRlckRhZG9zQ2lkYWRhbzogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGlkOiBjaWRhZGFvSWQsXG4gICAgICBub21lOiAnSm/Do28gZGEgU2lsdmEnLFxuICAgICAgY3BmOiAnMTIzNDU2Nzg5MDAnXG4gICAgfSksXG4gICAgb2J0ZXJEYWRvc0JhbmNhcmlvczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtcbiAgICAgIHtcbiAgICAgICAgaWQ6IGluZm9CYW5jYXJpYUlkLFxuICAgICAgICB0aXBvOiAnUElYJyxcbiAgICAgICAgcGl4VGlwbzogJ0NQRicsXG4gICAgICAgIHBpeENoYXZlOiAnMTIzNDU2Nzg5MDAnLFxuICAgICAgICBwcmluY2lwYWw6IHRydWVcbiAgICAgIH1cbiAgICBdKSxcbiAgICBvYnRlckRhZG9zQmFuY2FyaW9zUG9ySWQ6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBpZDogaW5mb0JhbmNhcmlhSWQsXG4gICAgICB0aXBvOiAnUElYJyxcbiAgICAgIHBpeFRpcG86ICdDUEYnLFxuICAgICAgcGl4Q2hhdmU6ICcxMjM0NTY3ODkwMCcsXG4gICAgICBwcmluY2lwYWw6IHRydWVcbiAgICB9KSxcbiAgICB2YWxpZGFyRGFkb3NCYW5jYXJpb3M6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh0cnVlKVxuICB9O1xuXG4gIGNvbnN0IG1vY2tJbnRlZ3JhY2FvRG9jdW1lbnRvU2VydmljZSA9IHtcbiAgICB1cGxvYWRDb21wcm92YW50ZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGlkOiAnZG9jdW1lbnRvLWlkJyxcbiAgICAgIG5vbWU6ICdjb21wcm92YW50ZS5wZGYnLFxuICAgICAgdGFtYW5obzogMTAyNCxcbiAgICAgIHRpcG86ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdC9kb2N1bWVudG9zL2RvY3VtZW50by1pZCdcbiAgICB9KSxcbiAgICBvYnRlckNvbXByb3ZhbnRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgaWQ6ICdkb2N1bWVudG8taWQnLFxuICAgICAgbm9tZTogJ2NvbXByb3ZhbnRlLnBkZicsXG4gICAgICB0YW1hbmhvOiAxMDI0LFxuICAgICAgdGlwbzogJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0L2RvY3VtZW50b3MvZG9jdW1lbnRvLWlkJ1xuICAgIH0pLFxuICAgIGxpc3RhckNvbXByb3ZhbnRlczogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdkb2N1bWVudG8taWQnLFxuICAgICAgICBub21lOiAnY29tcHJvdmFudGUucGRmJyxcbiAgICAgICAgdGFtYW5obzogMTAyNCxcbiAgICAgICAgdGlwbzogJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3QvZG9jdW1lbnRvcy9kb2N1bWVudG8taWQnXG4gICAgICB9XG4gICAgXSksXG4gICAgcmVtb3ZlckNvbXByb3ZhbnRlOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKVxuICB9O1xuXG4gIGNvbnN0IG1vY2tBdWRpdG9yaWFQYWdhbWVudG9TZXJ2aWNlID0ge1xuICAgIGxvZ0NyaWFjYW9QYWdhbWVudG86IGplc3QuZm4oKSxcbiAgICBsb2dNdWRhbmNhU3RhdHVzOiBqZXN0LmZuKCksXG4gICAgbG9nQ2FuY2VsYW1lbnRvUGFnYW1lbnRvOiBqZXN0LmZuKCksXG4gICAgbG9nVXBsb2FkQ29tcHJvdmFudGU6IGplc3QuZm4oKSxcbiAgICBsb2dSZW1vY2FvQ29tcHJvdmFudGU6IGplc3QuZm4oKSxcbiAgICBsb2dDb25maXJtYWNhb1JlY2ViaW1lbnRvOiBqZXN0LmZuKCksXG4gICAgbG9nRXJyb1Byb2Nlc3NhbWVudG86IGplc3QuZm4oKVxuICB9O1xuXG4gIC8vIE1vY2sgZG9zIHJlcG9zaXTDs3Jpb3NcbiAgY29uc3QgbW9ja1BhZ2FtZW50b1JlcG9zaXRvcnkgPSB7XG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgc2F2ZTogamVzdC5mbigpLFxuICAgIGZpbmRPbmU6IGplc3QuZm4oKSxcbiAgICBmaW5kOiBqZXN0LmZuKCksXG4gICAgZmluZEFuZENvdW50OiBqZXN0LmZuKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKClcbiAgfTtcblxuICBjb25zdCBtb2NrQ29tcHJvdmFudGVSZXBvc2l0b3J5ID0ge1xuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIHNhdmU6IGplc3QuZm4oKSxcbiAgICBmaW5kT25lOiBqZXN0LmZuKCksXG4gICAgZmluZDogamVzdC5mbigpLFxuICAgIGZpbmRBbmRDb3VudDogamVzdC5mbigpLFxuICAgIGRlbGV0ZTogamVzdC5mbigpXG4gIH07XG5cbiAgY29uc3QgbW9ja0NvbmZpcm1hY2FvUmVwb3NpdG9yeSA9IHtcbiAgICBjcmVhdGU6IGplc3QuZm4oKSxcbiAgICBzYXZlOiBqZXN0LmZuKCksXG4gICAgZmluZE9uZTogamVzdC5mbigpLFxuICAgIGZpbmQ6IGplc3QuZm4oKSxcbiAgICBmaW5kQW5kQ291bnQ6IGplc3QuZm4oKVxuICB9O1xuXG4gIGJlZm9yZUFsbChhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbW9kdWxlRml4dHVyZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBpbXBvcnRzOiBbXG4gICAgICAgIFBhZ2FtZW50b01vZHVsZSxcbiAgICAgICAgQ29uZmlnTW9kdWxlLmZvclJvb3Qoe1xuICAgICAgICAgIGlzR2xvYmFsOiB0cnVlLFxuICAgICAgICAgIGVudkZpbGVQYXRoOiAnLmVudi50ZXN0J1xuICAgICAgICB9KSxcbiAgICAgICAgSnd0TW9kdWxlLnJlZ2lzdGVyQXN5bmMoe1xuICAgICAgICAgIGltcG9ydHM6IFtDb25maWdNb2R1bGVdLFxuICAgICAgICAgIHVzZUZhY3Rvcnk6IGFzeW5jIChjb25maWdTZXJ2aWNlOiBDb25maWdTZXJ2aWNlKSA9PiAoe1xuICAgICAgICAgICAgc2VjcmV0OiBjb25maWdTZXJ2aWNlLmdldDxzdHJpbmc+KCdKV1RfU0VDUkVUJykgfHwgJ3Rlc3Qtc2VjcmV0JyxcbiAgICAgICAgICAgIHNpZ25PcHRpb25zOiB7IGV4cGlyZXNJbjogJzFoJyB9XG4gICAgICAgICAgfSksXG4gICAgICAgICAgaW5qZWN0OiBbQ29uZmlnU2VydmljZV1cbiAgICAgICAgfSksXG4gICAgICAgIEh0dHBNb2R1bGVcbiAgICAgIF0sXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IGdldFJlcG9zaXRvcnlUb2tlbihQYWdhbWVudG8pLFxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrUGFnYW1lbnRvUmVwb3NpdG9yeVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogZ2V0UmVwb3NpdG9yeVRva2VuKENvbXByb3ZhbnRlUGFnYW1lbnRvKSxcbiAgICAgICAgICB1c2VWYWx1ZTogbW9ja0NvbXByb3ZhbnRlUmVwb3NpdG9yeVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogZ2V0UmVwb3NpdG9yeVRva2VuKENvbmZpcm1hY2FvUmVjZWJpbWVudG8pLFxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrQ29uZmlybWFjYW9SZXBvc2l0b3J5XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9KVxuICAgICAgLm92ZXJyaWRlUHJvdmlkZXIoSW50ZWdyYWNhb1NvbGljaXRhY2FvU2VydmljZSlcbiAgICAgIC51c2VWYWx1ZShtb2NrSW50ZWdyYWNhb1NvbGljaXRhY2FvU2VydmljZSlcbiAgICAgIC5vdmVycmlkZVByb3ZpZGVyKEludGVncmFjYW9DaWRhZGFvU2VydmljZSlcbiAgICAgIC51c2VWYWx1ZShtb2NrSW50ZWdyYWNhb0NpZGFkYW9TZXJ2aWNlKVxuICAgICAgLm92ZXJyaWRlUHJvdmlkZXIoSW50ZWdyYWNhb0RvY3VtZW50b1NlcnZpY2UpXG4gICAgICAudXNlVmFsdWUobW9ja0ludGVncmFjYW9Eb2N1bWVudG9TZXJ2aWNlKVxuICAgICAgLm92ZXJyaWRlUHJvdmlkZXIoQXVkaXRvcmlhUGFnYW1lbnRvU2VydmljZSlcbiAgICAgIC51c2VWYWx1ZShtb2NrQXVkaXRvcmlhUGFnYW1lbnRvU2VydmljZSlcbiAgICAgIC5jb21waWxlKCk7XG5cbiAgICBhcHAgPSBtb2R1bGVGaXh0dXJlLmNyZWF0ZU5lc3RBcHBsaWNhdGlvbigpO1xuICAgIFxuICAgIHBhZ2FtZW50b1NlcnZpY2UgPSBtb2R1bGVGaXh0dXJlLmdldDxQYWdhbWVudG9TZXJ2aWNlPihQYWdhbWVudG9TZXJ2aWNlKTtcbiAgICBpbnRlZ3JhY2FvU29saWNpdGFjYW9TZXJ2aWNlID0gbW9kdWxlRml4dHVyZS5nZXQ8SW50ZWdyYWNhb1NvbGljaXRhY2FvU2VydmljZT4oSW50ZWdyYWNhb1NvbGljaXRhY2FvU2VydmljZSk7XG4gICAgaW50ZWdyYWNhb0NpZGFkYW9TZXJ2aWNlID0gbW9kdWxlRml4dHVyZS5nZXQ8SW50ZWdyYWNhb0NpZGFkYW9TZXJ2aWNlPihJbnRlZ3JhY2FvQ2lkYWRhb1NlcnZpY2UpO1xuICAgIGludGVncmFjYW9Eb2N1bWVudG9TZXJ2aWNlID0gbW9kdWxlRml4dHVyZS5nZXQ8SW50ZWdyYWNhb0RvY3VtZW50b1NlcnZpY2U+KEludGVncmFjYW9Eb2N1bWVudG9TZXJ2aWNlKTtcbiAgICBhdWRpdG9yaWFQYWdhbWVudG9TZXJ2aWNlID0gbW9kdWxlRml4dHVyZS5nZXQ8QXVkaXRvcmlhUGFnYW1lbnRvU2VydmljZT4oQXVkaXRvcmlhUGFnYW1lbnRvU2VydmljZSk7XG4gICAgXG4gICAgcGFnYW1lbnRvUmVwb3NpdG9yeSA9IG1vZHVsZUZpeHR1cmUuZ2V0PFJlcG9zaXRvcnk8UGFnYW1lbnRvPj4oZ2V0UmVwb3NpdG9yeVRva2VuKFBhZ2FtZW50bykpO1xuICAgIGNvbXByb3ZhbnRlUmVwb3NpdG9yeSA9IG1vZHVsZUZpeHR1cmUuZ2V0PFJlcG9zaXRvcnk8Q29tcHJvdmFudGVQYWdhbWVudG8+PihnZXRSZXBvc2l0b3J5VG9rZW4oQ29tcHJvdmFudGVQYWdhbWVudG8pKTtcbiAgICBjb25maXJtYWNhb1JlcG9zaXRvcnkgPSBtb2R1bGVGaXh0dXJlLmdldDxSZXBvc2l0b3J5PENvbmZpcm1hY2FvUmVjZWJpbWVudG8+PihnZXRSZXBvc2l0b3J5VG9rZW4oQ29uZmlybWFjYW9SZWNlYmltZW50bykpO1xuICAgIFxuICAgIGF3YWl0IGFwcC5pbml0KCk7XG4gIH0pO1xuXG4gIGFmdGVyQWxsKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBhcHAuY2xvc2UoKTtcbiAgfSk7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdGbHV4byBDb21wbGV0bzogQ3JpYXIg4oaSIExpYmVyYXIg4oaSIEVudmlhciBDb21wcm92YW50ZSDihpIgQ29uZmlybWFyJywgKCkgPT4ge1xuICAgIGxldCBwYWdhbWVudG9JZDogc3RyaW5nO1xuICAgIGxldCBjb21wcm92YW50ZUlkOiBzdHJpbmc7XG4gICAgbGV0IGNvbmZpcm1hY2FvSWQ6IHN0cmluZztcblxuICAgIGl0KCcxLiBEZXZlIGNyaWFyIHVtIG5vdm8gcGFnYW1lbnRvIGNvbSBzdWNlc3NvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ29uZmlndXJhciBtb2Nrc1xuICAgICAgY29uc3QgcGFnYW1lbnRvTW9jayA9IHtcbiAgICAgICAgaWQ6ICdwYWdhbWVudG8tdGVzdGUtaWQnLFxuICAgICAgICBzb2xpY2l0YWNhb0lkLFxuICAgICAgICB2YWxvcjogNTAwLjAwLFxuICAgICAgICBzdGF0dXM6IFN0YXR1c1BhZ2FtZW50b0VudW0uQUdFTkRBRE8sXG4gICAgICAgIG1ldG9kb1BhZ2FtZW50bzogTWV0b2RvUGFnYW1lbnRvRW51bS5QSVgsXG4gICAgICAgIGRhdGFMaWJlcmFjYW86IG5ldyBEYXRlKCksXG4gICAgICAgIGluZm9CYW5jYXJpYUlkLFxuICAgICAgICBkYWRvc0JhbmNhcmlvczoge1xuICAgICAgICAgIHBpeFRpcG86ICdDUEYnLFxuICAgICAgICAgIHBpeENoYXZlOiAnMTIzNDU2Nzg5MDAnXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNhdmVsTGliZXJhY2FvOiB1c3VhcmlvSWQsXG4gICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgICB9O1xuICAgICAgXG4gICAgICBtb2NrUGFnYW1lbnRvUmVwb3NpdG9yeS5jcmVhdGUubW9ja1JldHVyblZhbHVlKHBhZ2FtZW50b01vY2spO1xuICAgICAgbW9ja1BhZ2FtZW50b1JlcG9zaXRvcnkuc2F2ZS5tb2NrUmVzb2x2ZWRWYWx1ZShwYWdhbWVudG9Nb2NrKTtcblxuICAgICAgLy8gRXhlY3V0YXIgcmVxdWlzacOnw6NvXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwLmdldEh0dHBTZXJ2ZXIoKSlcbiAgICAgICAgLnBvc3QoYC9wYWdhbWVudG9zL3NvbGljaXRhY2FvLyR7c29saWNpdGFjYW9JZH1gKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke21vY2tKd3RUb2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgdmFsb3I6IDUwMC4wMCxcbiAgICAgICAgICBkYXRhTGliZXJhY2FvOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIG1ldG9kb1BhZ2FtZW50bzogTWV0b2RvUGFnYW1lbnRvRW51bS5QSVgsXG4gICAgICAgICAgaW5mb0JhbmNhcmlhSWQsXG4gICAgICAgICAgZGFkb3NCYW5jYXJpb3M6IHtcbiAgICAgICAgICAgIHBpeFRpcG86ICdDUEYnLFxuICAgICAgICAgICAgcGl4Q2hhdmU6ICcxMjM0NTY3ODkwMCdcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcmVzcG9zdGFcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnaWQnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5LnN0YXR1cykudG9CZShTdGF0dXNQYWdhbWVudG9FbnVtLkFHRU5EQURPKTtcbiAgICAgIFxuICAgICAgLy8gR3VhcmRhciBJRCBwYXJhIHByw7N4aW1vcyB0ZXN0ZXNcbiAgICAgIHBhZ2FtZW50b0lkID0gcmVzcG9uc2UuYm9keS5pZDtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZpY2FyIGNoYW1hZGFzIGRlIHNlcnZpw6dvc1xuICAgICAgZXhwZWN0KGludGVncmFjYW9Tb2xpY2l0YWNhb1NlcnZpY2UudmVyaWZpY2FyU29saWNpdGFjYW9FbGVnaXZlbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoc29saWNpdGFjYW9JZCk7XG4gICAgICBleHBlY3QoaW50ZWdyYWNhb0NpZGFkYW9TZXJ2aWNlLnZhbGlkYXJEYWRvc0JhbmNhcmlvcykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KGF1ZGl0b3JpYVBhZ2FtZW50b1NlcnZpY2UubG9nQ3JpYWNhb1BhZ2FtZW50bykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJzIuIERldmUgYXR1YWxpemFyIG8gc3RhdHVzIHBhcmEgTElCRVJBRE8gY29tIHN1Y2Vzc28nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDb25maWd1cmFyIG1vY2tzXG4gICAgICBjb25zdCBwYWdhbWVudG9Nb2NrID0ge1xuICAgICAgICBpZDogcGFnYW1lbnRvSWQsXG4gICAgICAgIHNvbGljaXRhY2FvSWQsXG4gICAgICAgIHZhbG9yOiA1MDAuMDAsXG4gICAgICAgIHN0YXR1czogU3RhdHVzUGFnYW1lbnRvRW51bS5BR0VOREFETyxcbiAgICAgICAgbWV0b2RvUGFnYW1lbnRvOiBNZXRvZG9QYWdhbWVudG9FbnVtLlBJWCxcbiAgICAgICAgZGF0YUxpYmVyYWNhbzogbmV3IERhdGUoKSxcbiAgICAgICAgaW5mb0JhbmNhcmlhSWQsXG4gICAgICAgIGRhZG9zQmFuY2FyaW9zOiB7XG4gICAgICAgICAgcGl4VGlwbzogJ0NQRicsXG4gICAgICAgICAgcGl4Q2hhdmU6ICcxMjM0NTY3ODkwMCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVzcG9uc2F2ZWxMaWJlcmFjYW86IHVzdWFyaW9JZCxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IHBhZ2FtZW50b0F0dWFsaXphZG9Nb2NrID0ge1xuICAgICAgICAuLi5wYWdhbWVudG9Nb2NrLFxuICAgICAgICBzdGF0dXM6IFN0YXR1c1BhZ2FtZW50b0VudW0uTElCRVJBRE8sXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgbW9ja1BhZ2FtZW50b1JlcG9zaXRvcnkuZmluZE9uZS5tb2NrUmVzb2x2ZWRWYWx1ZShwYWdhbWVudG9Nb2NrKTtcbiAgICAgIG1vY2tQYWdhbWVudG9SZXBvc2l0b3J5LnNhdmUubW9ja1Jlc29sdmVkVmFsdWUocGFnYW1lbnRvQXR1YWxpemFkb01vY2spO1xuXG4gICAgICAvLyBFeGVjdXRhciByZXF1aXNpw6fDo29cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHAuZ2V0SHR0cFNlcnZlcigpKVxuICAgICAgICAucGF0Y2goYC9wYWdhbWVudG9zLyR7cGFnYW1lbnRvSWR9L3N0YXR1c2ApXG4gICAgICAgIC5zZXQoJ0F1dGhvcml6YXRpb24nLCBgQmVhcmVyICR7bW9ja0p3dFRva2VufWApXG4gICAgICAgIC5zZW5kKHtcbiAgICAgICAgICBzdGF0dXM6IFN0YXR1c1BhZ2FtZW50b0VudW0uTElCRVJBRE8sXG4gICAgICAgICAgb2JzZXJ2YWNvZXM6ICdQYWdhbWVudG8gbGliZXJhZG8gYXDDs3MgdmVyaWZpY2HDp8OjbydcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciByZXNwb3N0YVxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3RhdHVzKS50b0JlKFN0YXR1c1BhZ2FtZW50b0VudW0uTElCRVJBRE8pO1xuICAgICAgXG4gICAgICAvLyBWZXJpZmljYXIgY2hhbWFkYXMgZGUgc2VydmnDp29zXG4gICAgICBleHBlY3QoYXVkaXRvcmlhUGFnYW1lbnRvU2VydmljZS5sb2dNdWRhbmNhU3RhdHVzKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QoaW50ZWdyYWNhb1NvbGljaXRhY2FvU2VydmljZS5hdHVhbGl6YXJTdGF0dXNTb2xpY2l0YWNhbykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIHNvbGljaXRhY2FvSWQsXG4gICAgICAgIFN0YXR1c1BhZ2FtZW50b0VudW0uTElCRVJBRE8sXG4gICAgICAgIHVzdWFyaW9JZFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCczLiBEZXZlIGVudmlhciBjb21wcm92YW50ZSBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENvbmZpZ3VyYXIgbW9ja3NcbiAgICAgIGNvbnN0IHBhZ2FtZW50b01vY2sgPSB7XG4gICAgICAgIGlkOiBwYWdhbWVudG9JZCxcbiAgICAgICAgc29saWNpdGFjYW9JZCxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXNQYWdhbWVudG9FbnVtLkxJQkVSQURPXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCBjb21wcm92YW50ZU1vY2sgPSB7XG4gICAgICAgIGlkOiAnY29tcHJvdmFudGUtdGVzdGUtaWQnLFxuICAgICAgICBwYWdhbWVudG9JZCxcbiAgICAgICAgZG9jdW1lbnRvSWQ6ICdkb2N1bWVudG8taWQnLFxuICAgICAgICBub21lQXJxdWl2bzogJ2NvbXByb3ZhbnRlLnBkZicsXG4gICAgICAgIHRpcG9BcnF1aXZvOiAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAgICAgdGFtYW5ob0FycXVpdm86IDEwMjQsXG4gICAgICAgIHVybERvd25sb2FkOiAnaHR0cDovL2xvY2FsaG9zdC9kb2N1bWVudG9zL2RvY3VtZW50by1pZCcsXG4gICAgICAgIHVwbG9hZGVkQnk6IHVzdWFyaW9JZCxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgICB9O1xuICAgICAgXG4gICAgICBtb2NrUGFnYW1lbnRvUmVwb3NpdG9yeS5maW5kT25lLm1vY2tSZXNvbHZlZFZhbHVlKHBhZ2FtZW50b01vY2spO1xuICAgICAgbW9ja0NvbXByb3ZhbnRlUmVwb3NpdG9yeS5jcmVhdGUubW9ja1JldHVyblZhbHVlKGNvbXByb3ZhbnRlTW9jayk7XG4gICAgICBtb2NrQ29tcHJvdmFudGVSZXBvc2l0b3J5LnNhdmUubW9ja1Jlc29sdmVkVmFsdWUoY29tcHJvdmFudGVNb2NrKTtcblxuICAgICAgLy8gQ3JpYXIgYXJxdWl2byBkZSB0ZXN0ZVxuICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oJ2NvbnRlw7pkbyBkZSB0ZXN0ZSBkbyBhcnF1aXZvJyk7XG4gICAgICBcbiAgICAgIC8vIEV4ZWN1dGFyIHJlcXVpc2nDp8Ojb1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5wb3N0KGAvcGFnYW1lbnRvcy8ke3BhZ2FtZW50b0lkfS9jb21wcm92YW50ZXNgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke21vY2tKd3RUb2tlbn1gKVxuICAgICAgICAuYXR0YWNoKCdhcnF1aXZvJywgYnVmZmVyLCAnY29tcHJvdmFudGUucGRmJylcbiAgICAgICAgLmZpZWxkKCdkZXNjcmljYW8nLCAnQ29tcHJvdmFudGUgZGUgcGFnYW1lbnRvJyk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciByZXNwb3N0YVxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDEpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdpZCcpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubm9tZUFycXVpdm8pLnRvQmUoJ2NvbXByb3ZhbnRlLnBkZicpO1xuICAgICAgXG4gICAgICAvLyBHdWFyZGFyIElEIHBhcmEgcHLDs3hpbW9zIHRlc3Rlc1xuICAgICAgY29tcHJvdmFudGVJZCA9IHJlc3BvbnNlLmJvZHkuaWQ7XG4gICAgICBcbiAgICAgIC8vIFZlcmlmaWNhciBjaGFtYWRhcyBkZSBzZXJ2acOnb3NcbiAgICAgIGV4cGVjdChpbnRlZ3JhY2FvRG9jdW1lbnRvU2VydmljZS51cGxvYWRDb21wcm92YW50ZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KGF1ZGl0b3JpYVBhZ2FtZW50b1NlcnZpY2UubG9nVXBsb2FkQ29tcHJvdmFudGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCc0LiBEZXZlIGNvbmZpcm1hciByZWNlYmltZW50byBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENvbmZpZ3VyYXIgbW9ja3NcbiAgICAgIGNvbnN0IHBhZ2FtZW50b01vY2sgPSB7XG4gICAgICAgIGlkOiBwYWdhbWVudG9JZCxcbiAgICAgICAgc29saWNpdGFjYW9JZCxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXNQYWdhbWVudG9FbnVtLkxJQkVSQURPLFxuICAgICAgICB2YWxvcjogNTAwLjAwLFxuICAgICAgICBtZXRvZG9QYWdhbWVudG86IE1ldG9kb1BhZ2FtZW50b0VudW0uUElYLFxuICAgICAgICBkYXRhTGliZXJhY2FvOiBuZXcgRGF0ZSgpLFxuICAgICAgICByZXNwb25zYXZlbExpYmVyYWNhbzogdXN1YXJpb0lkXG4gICAgICB9O1xuICAgICAgXG4gICAgICBjb25zdCBwYWdhbWVudG9BdHVhbGl6YWRvTW9jayA9IHtcbiAgICAgICAgLi4ucGFnYW1lbnRvTW9jayxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXNQYWdhbWVudG9FbnVtLkNPTkZJUk1BRE8sXG4gICAgICAgIHJlc3BvbnNhdmVsQ29uZmlybWFjYW86IHVzdWFyaW9JZCxcbiAgICAgICAgZGF0YUNvbmZpcm1hY2FvOiBuZXcgRGF0ZSgpLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IGNvbmZpcm1hY2FvTW9jayA9IHtcbiAgICAgICAgaWQ6ICdjb25maXJtYWNhby10ZXN0ZS1pZCcsXG4gICAgICAgIHBhZ2FtZW50b0lkLFxuICAgICAgICBkYXRhQ29uZmlybWFjYW86IG5ldyBEYXRlKCksXG4gICAgICAgIG1ldG9kb0NvbmZpcm1hY2FvOiAnUFJFU0VOQ0lBTCcsXG4gICAgICAgIHJlZ2lzdHJhZG9Qb3I6IHVzdWFyaW9JZCxcbiAgICAgICAgb2JzZXJ2YWNvZXM6ICdDb25maXJtYcOnw6NvIHJlYWxpemFkYSBwZWxvIGJlbmVmaWNpw6FyaW8nLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgIH07XG4gICAgICBcbiAgICAgIG1vY2tQYWdhbWVudG9SZXBvc2l0b3J5LmZpbmRPbmUubW9ja1Jlc29sdmVkVmFsdWUocGFnYW1lbnRvTW9jayk7XG4gICAgICBtb2NrUGFnYW1lbnRvUmVwb3NpdG9yeS5zYXZlLm1vY2tSZXNvbHZlZFZhbHVlKHBhZ2FtZW50b0F0dWFsaXphZG9Nb2NrKTtcbiAgICAgIG1vY2tDb25maXJtYWNhb1JlcG9zaXRvcnkuY3JlYXRlLm1vY2tSZXR1cm5WYWx1ZShjb25maXJtYWNhb01vY2spO1xuICAgICAgbW9ja0NvbmZpcm1hY2FvUmVwb3NpdG9yeS5zYXZlLm1vY2tSZXNvbHZlZFZhbHVlKGNvbmZpcm1hY2FvTW9jayk7XG5cbiAgICAgIC8vIEV4ZWN1dGFyIHJlcXVpc2nDp8Ojb1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5wb3N0KCcvcGFnYW1lbnRvcy9jb25maXJtYXItcmVjZWJpbWVudG8nKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke21vY2tKd3RUb2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgcGFnYW1lbnRvSWQsXG4gICAgICAgICAgZGF0YUNvbmZpcm1hY2FvOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgIG1ldG9kb0NvbmZpcm1hY2FvOiAnUFJFU0VOQ0lBTCcsXG4gICAgICAgICAgb2JzZXJ2YWNvZXM6ICdDb25maXJtYcOnw6NvIHJlYWxpemFkYSBwZWxvIGJlbmVmaWNpw6FyaW8nXG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcmVzcG9zdGFcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnaWQnKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm1ldG9kb0NvbmZpcm1hY2FvKS50b0JlKCdQUkVTRU5DSUFMJyk7XG4gICAgICBcbiAgICAgIC8vIEd1YXJkYXIgSUQgcGFyYSBwcsOzeGltb3MgdGVzdGVzXG4gICAgICBjb25maXJtYWNhb0lkID0gcmVzcG9uc2UuYm9keS5pZDtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZpY2FyIGNoYW1hZGFzIGRlIHNlcnZpw6dvc1xuICAgICAgZXhwZWN0KGF1ZGl0b3JpYVBhZ2FtZW50b1NlcnZpY2UubG9nQ29uZmlybWFjYW9SZWNlYmltZW50bykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJzUuIERldmUgdmVyaWZpY2FyIHF1ZSBvIHBhZ2FtZW50byBlc3TDoSBjb20gc3RhdHVzIENPTkZJUk1BRE8nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDb25maWd1cmFyIG1vY2tzXG4gICAgICBjb25zdCBwYWdhbWVudG9Nb2NrID0ge1xuICAgICAgICBpZDogcGFnYW1lbnRvSWQsXG4gICAgICAgIHNvbGljaXRhY2FvSWQsXG4gICAgICAgIHN0YXR1czogU3RhdHVzUGFnYW1lbnRvRW51bS5DT05GSVJNQURPLFxuICAgICAgICB2YWxvcjogNTAwLjAwLFxuICAgICAgICBtZXRvZG9QYWdhbWVudG86IE1ldG9kb1BhZ2FtZW50b0VudW0uUElYLFxuICAgICAgICBkYXRhTGliZXJhY2FvOiBuZXcgRGF0ZSgpLFxuICAgICAgICByZXNwb25zYXZlbExpYmVyYWNhbzogdXN1YXJpb0lkLFxuICAgICAgICByZXNwb25zYXZlbENvbmZpcm1hY2FvOiB1c3VhcmlvSWQsXG4gICAgICAgIGRhdGFDb25maXJtYWNhbzogbmV3IERhdGUoKVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgbW9ja1BhZ2FtZW50b1JlcG9zaXRvcnkuZmluZE9uZS5tb2NrUmVzb2x2ZWRWYWx1ZShwYWdhbWVudG9Nb2NrKTtcblxuICAgICAgLy8gRXhlY3V0YXIgcmVxdWlzacOnw6NvXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwLmdldEh0dHBTZXJ2ZXIoKSlcbiAgICAgICAgLmdldChgL3BhZ2FtZW50b3MvJHtwYWdhbWVudG9JZH1gKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke21vY2tKd3RUb2tlbn1gKTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHJlc3Bvc3RhXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keS5zdGF0dXMpLnRvQmUoU3RhdHVzUGFnYW1lbnRvRW51bS5DT05GSVJNQURPKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgncmVzcG9uc2F2ZWxDb25maXJtYWNhbycpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkpLnRvSGF2ZVByb3BlcnR5KCdkYXRhQ29uZmlybWFjYW8nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ZsdXhvIGRlIENhbmNlbGFtZW50bycsICgpID0+IHtcbiAgICBsZXQgcGFnYW1lbnRvSWQ6IHN0cmluZztcblxuICAgIGl0KCcxLiBEZXZlIGNyaWFyIHVtIG5vdm8gcGFnYW1lbnRvIHBhcmEgY2FuY2VsYW1lbnRvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ29uZmlndXJhciBtb2Nrc1xuICAgICAgY29uc3QgcGFnYW1lbnRvTW9jayA9IHtcbiAgICAgICAgaWQ6ICdwYWdhbWVudG8tY2FuY2VsYW1lbnRvLWlkJyxcbiAgICAgICAgc29saWNpdGFjYW9JZCxcbiAgICAgICAgdmFsb3I6IDMwMC4wMCxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXNQYWdhbWVudG9FbnVtLkFHRU5EQURPLFxuICAgICAgICBtZXRvZG9QYWdhbWVudG86IE1ldG9kb1BhZ2FtZW50b0VudW0uUElYLFxuICAgICAgICBkYXRhTGliZXJhY2FvOiBuZXcgRGF0ZSgpLFxuICAgICAgICBpbmZvQmFuY2FyaWFJZCxcbiAgICAgICAgZGFkb3NCYW5jYXJpb3M6IHtcbiAgICAgICAgICBwaXhUaXBvOiAnQ1BGJyxcbiAgICAgICAgICBwaXhDaGF2ZTogJzEyMzQ1Njc4OTAwJ1xuICAgICAgICB9LFxuICAgICAgICByZXNwb25zYXZlbExpYmVyYWNhbzogdXN1YXJpb0lkLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgbW9ja1BhZ2FtZW50b1JlcG9zaXRvcnkuY3JlYXRlLm1vY2tSZXR1cm5WYWx1ZShwYWdhbWVudG9Nb2NrKTtcbiAgICAgIG1vY2tQYWdhbWVudG9SZXBvc2l0b3J5LnNhdmUubW9ja1Jlc29sdmVkVmFsdWUocGFnYW1lbnRvTW9jayk7XG5cbiAgICAgIC8vIEV4ZWN1dGFyIHJlcXVpc2nDp8Ojb1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcC5nZXRIdHRwU2VydmVyKCkpXG4gICAgICAgIC5wb3N0KGAvcGFnYW1lbnRvcy9zb2xpY2l0YWNhby8ke3NvbGljaXRhY2FvSWR9YClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHttb2NrSnd0VG9rZW59YClcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIHZhbG9yOiAzMDAuMDAsXG4gICAgICAgICAgZGF0YUxpYmVyYWNhbzogbmV3IERhdGUoKSxcbiAgICAgICAgICBtZXRvZG9QYWdhbWVudG86IE1ldG9kb1BhZ2FtZW50b0VudW0uUElYLFxuICAgICAgICAgIGluZm9CYW5jYXJpYUlkLFxuICAgICAgICAgIGRhZG9zQmFuY2FyaW9zOiB7XG4gICAgICAgICAgICBwaXhUaXBvOiAnQ1BGJyxcbiAgICAgICAgICAgIHBpeENoYXZlOiAnMTIzNDU2Nzg5MDAnXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgLy8gVmVyaWZpY2FyIHJlc3Bvc3RhXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMSk7XG4gICAgICBleHBlY3QocmVzcG9uc2UuYm9keSkudG9IYXZlUHJvcGVydHkoJ2lkJyk7XG4gICAgICBcbiAgICAgIC8vIEd1YXJkYXIgSUQgcGFyYSBwcsOzeGltb3MgdGVzdGVzXG4gICAgICBwYWdhbWVudG9JZCA9IHJlc3BvbnNlLmJvZHkuaWQ7XG4gICAgfSk7XG5cbiAgICBpdCgnMi4gRGV2ZSBjYW5jZWxhciBvIHBhZ2FtZW50byBjb20gc3VjZXNzbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENvbmZpZ3VyYXIgbW9ja3NcbiAgICAgIGNvbnN0IHBhZ2FtZW50b01vY2sgPSB7XG4gICAgICAgIGlkOiBwYWdhbWVudG9JZCxcbiAgICAgICAgc29saWNpdGFjYW9JZCxcbiAgICAgICAgdmFsb3I6IDMwMC4wMCxcbiAgICAgICAgc3RhdHVzOiBTdGF0dXNQYWdhbWVudG9FbnVtLkFHRU5EQURPLFxuICAgICAgICBtZXRvZG9QYWdhbWVudG86IE1ldG9kb1BhZ2FtZW50b0VudW0uUElYLFxuICAgICAgICBkYXRhTGliZXJhY2FvOiBuZXcgRGF0ZSgpLFxuICAgICAgICBpbmZvQmFuY2FyaWFJZCxcbiAgICAgICAgZGFkb3NCYW5jYXJpb3M6IHtcbiAgICAgICAgICBwaXhUaXBvOiAnQ1BGJyxcbiAgICAgICAgICBwaXhDaGF2ZTogJzEyMzQ1Njc4OTAwJ1xuICAgICAgICB9LFxuICAgICAgICByZXNwb25zYXZlbExpYmVyYWNhbzogdXN1YXJpb0lkLFxuICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgcGFnYW1lbnRvQXR1YWxpemFkb01vY2sgPSB7XG4gICAgICAgIC4uLnBhZ2FtZW50b01vY2ssXG4gICAgICAgIHN0YXR1czogU3RhdHVzUGFnYW1lbnRvRW51bS5DQU5DRUxBRE8sXG4gICAgICAgIG9ic2VydmFjb2VzOiAnQ0FOQ0VMQURPOiBEYWRvcyBiYW5jw6FyaW9zIGluY29ycmV0b3MnLFxuICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgIH07XG4gICAgICBcbiAgICAgIG1vY2tQYWdhbWVudG9SZXBvc2l0b3J5LmZpbmRPbmUubW9ja1Jlc29sdmVkVmFsdWUocGFnYW1lbnRvTW9jayk7XG4gICAgICBtb2NrUGFnYW1lbnRvUmVwb3NpdG9yeS5zYXZlLm1vY2tSZXNvbHZlZFZhbHVlKHBhZ2FtZW50b0F0dWFsaXphZG9Nb2NrKTtcblxuICAgICAgLy8gRXhlY3V0YXIgcmVxdWlzacOnw6NvXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwLmdldEh0dHBTZXJ2ZXIoKSlcbiAgICAgICAgLnBvc3QoYC9wYWdhbWVudG9zLyR7cGFnYW1lbnRvSWR9L2NhbmNlbGFyYClcbiAgICAgICAgLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHttb2NrSnd0VG9rZW59YClcbiAgICAgICAgLnNlbmQoe1xuICAgICAgICAgIG1vdGl2bzogJ0RhZG9zIGJhbmPDoXJpb3MgaW5jb3JyZXRvcydcbiAgICAgICAgfSk7XG5cbiAgICAgIC8vIFZlcmlmaWNhciByZXNwb3N0YVxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSgyMDApO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkuc3RhdHVzKS50b0JlKFN0YXR1c1BhZ2FtZW50b0VudW0uQ0FOQ0VMQURPKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5Lm9ic2VydmFjb2VzKS50b0NvbnRhaW4oJ0NBTkNFTEFETycpO1xuICAgICAgXG4gICAgICAvLyBWZXJpZmljYXIgY2hhbWFkYXMgZGUgc2VydmnDp29zXG4gICAgICBleHBlY3QoYXVkaXRvcmlhUGFnYW1lbnRvU2VydmljZS5sb2dDYW5jZWxhbWVudG9QYWdhbWVudG8pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChpbnRlZ3JhY2FvU29saWNpdGFjYW9TZXJ2aWNlLmF0dWFsaXphclN0YXR1c1NvbGljaXRhY2FvKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgc29saWNpdGFjYW9JZCxcbiAgICAgICAgU3RhdHVzUGFnYW1lbnRvRW51bS5DQU5DRUxBRE8sXG4gICAgICAgIHVzdWFyaW9JZFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCczLiBOw6NvIGRldmUgcGVybWl0aXIgYXR1YWxpemFyIHN0YXR1cyBkZSB1bSBwYWdhbWVudG8gY2FuY2VsYWRvJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ29uZmlndXJhciBtb2Nrc1xuICAgICAgY29uc3QgcGFnYW1lbnRvTW9jayA9IHtcbiAgICAgICAgaWQ6IHBhZ2FtZW50b0lkLFxuICAgICAgICBzb2xpY2l0YWNhb0lkLFxuICAgICAgICBzdGF0dXM6IFN0YXR1c1BhZ2FtZW50b0VudW0uQ0FOQ0VMQURPLFxuICAgICAgICBvYnNlcnZhY29lczogJ0NBTkNFTEFETzogRGFkb3MgYmFuY8OhcmlvcyBpbmNvcnJldG9zJ1xuICAgICAgfTtcbiAgICAgIFxuICAgICAgbW9ja1BhZ2FtZW50b1JlcG9zaXRvcnkuZmluZE9uZS5tb2NrUmVzb2x2ZWRWYWx1ZShwYWdhbWVudG9Nb2NrKTtcblxuICAgICAgLy8gRXhlY3V0YXIgcmVxdWlzacOnw6NvXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwLmdldEh0dHBTZXJ2ZXIoKSlcbiAgICAgICAgLnBhdGNoKGAvcGFnYW1lbnRvcy8ke3BhZ2FtZW50b0lkfS9zdGF0dXNgKVxuICAgICAgICAuc2V0KCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke21vY2tKd3RUb2tlbn1gKVxuICAgICAgICAuc2VuZCh7XG4gICAgICAgICAgc3RhdHVzOiBTdGF0dXNQYWdhbWVudG9FbnVtLkxJQkVSQURPXG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBWZXJpZmljYXIgcmVzcG9zdGFcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNDA5KTsgLy8gQ29uZmxpY3RcbiAgICAgIGV4cGVjdChyZXNwb25zZS5ib2R5KS50b0hhdmVQcm9wZXJ0eSgnbWVzc2FnZScpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLmJvZHkubWVzc2FnZSkudG9Db250YWluKCduw6NvIMOpIHBvc3PDrXZlbCcpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9