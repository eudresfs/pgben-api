{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\controllers\\renovacao-automatica.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\controllers\\renovacao-automatica.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Delete,\n  UseGuards,\n  Req,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { ScopeType } from '../../../entities/user-permission.entity';\nimport { RenovacaoAutomaticaService } from '../services/renovacao-automatica.service';\nimport { ConfiguracaoRenovacao } from '../../../entities/configuracao-renovacao.entity';\nimport { CreateConfiguracaoRenovacaoDto } from '../dto/create-configuracao-renovacao.dto';\nimport { UpdateConfiguracaoRenovacaoDto } from '../dto/update-configuracao-renovacao.dto';\nimport { Solicitacao } from '../../../entities/solicitacao.entity';\nimport { VerificacaoRenovacaoResponseDto } from '../dto/verificacao-renovacao-response.dto';\nimport { VerificacaoRenovacoesPendentesResponseDto } from '../dto/verificacao-renovacoes-pendentes-response.dto';\nimport { ConfigurarRenovacaoSolicitacaoDto } from '../dto/configurar-renovacao-solicitacao.dto';\nimport { VerificacaoConfiguracaoRenovacaoResponseDto } from '../dto/verificacao-configuracao-renovacao-response.dto';\nimport { ConfiguracaoRenovacaoResponseDto } from '../dto/configuracao-renovacao-response.dto';\n\n// Usando o DTO importado ConfigurarRenovacaoSolicitacaoDto\n\n/**\n * Controller de Renovação Automática\n *\n * Responsável por expor os endpoints de gerenciamento das configurações de renovação\n * automática e do processo de renovação automática mensal.\n */\n@ApiTags('Benefícios')\n@Controller('beneficio/renovacao-automatica')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class RenovacaoAutomaticaController {\n  constructor(private readonly renovacaoService: RenovacaoAutomaticaService) {}\n\n  /**\n   * Cria uma nova configuração de renovação automática\n   * @param createConfiguracaoDto Dados da configuração\n   * @param req Requisição\n   * @returns Configuração criada\n   */\n  @Post('configuracao')\n  @RequiresPermission({ permissionName: 'beneficio.configuracao.criar' })\n  @ApiOperation({\n    summary: 'Cria uma nova configuração de renovação automática',\n    description:\n      'Cria uma configuração de renovação automática para um tipo de benefício.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Configuração criada com sucesso',\n    type: ConfiguracaoRenovacao,\n  })\n  async create(\n    @Body() createConfiguracaoDto: CreateConfiguracaoRenovacaoDto,\n    @Req() req: any,\n  ): Promise<ConfiguracaoRenovacao> {\n    return this.renovacaoService.create(createConfiguracaoDto, req.user.id);\n  }\n\n  /**\n   * Busca todas as configurações de renovação\n   * @returns Lista de configurações\n   */\n  @Get('configuracao')\n  @RequiresPermission({ permissionName: 'beneficio.configuracao.listar' })\n  @ApiOperation({\n    summary: 'Busca todas as configurações de renovação',\n    description:\n      'Retorna a lista de todas as configurações de renovação automática.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de configurações retornada com sucesso',\n    type: [ConfiguracaoRenovacao],\n  })\n  async findAll(): Promise<ConfiguracaoRenovacao[]> {\n    return this.renovacaoService.findAll();\n  }\n\n  /**\n   * Busca uma configuração de renovação pelo ID\n   * @param id ID da configuração\n   * @returns Configuração\n   */\n  @Get('configuracao/:id')\n  @RequiresPermission({ permissionName: 'beneficio.configuracao.visualizar' })\n  @ApiOperation({\n    summary: 'Busca uma configuração de renovação pelo ID',\n    description:\n      'Retorna os detalhes de uma configuração de renovação específica.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Configuração encontrada com sucesso',\n    type: ConfiguracaoRenovacao,\n  })\n  async findById(@Param('id') id: string): Promise<ConfiguracaoRenovacao> {\n    return this.renovacaoService.findById(id);\n  }\n\n  /**\n   * Busca uma configuração de renovação pelo tipo de benefício\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns Configuração\n   */\n  @Get('configuracao/tipo-beneficio/:tipoBeneficioId')\n  @RequiresPermission({ permissionName: 'beneficio.configuracao.visualizar' })\n  @ApiOperation({\n    summary: 'Busca uma configuração de renovação pelo tipo de benefício',\n    description:\n      'Retorna a configuração de renovação para um tipo de benefício específico.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Configuração encontrada com sucesso',\n    type: ConfiguracaoRenovacao,\n  })\n  async findByTipoBeneficio(\n    @Param('tipoBeneficioId') tipoBeneficioId: string,\n  ): Promise<ConfiguracaoRenovacao> {\n    return this.renovacaoService.findByTipoBeneficio(tipoBeneficioId);\n  }\n\n  /**\n   * Atualiza uma configuração de renovação\n   * @param id ID da configuração\n   * @param updateConfiguracaoDto Dados para atualização\n   * @returns Configuração atualizada\n   */\n  @Patch('configuracao/:id')\n  @RequiresPermission({ permissionName: 'beneficio.configuracao.atualizar' })\n  @ApiOperation({\n    summary: 'Atualiza uma configuração de renovação',\n    description:\n      'Atualiza os dados de uma configuração de renovação existente.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Configuração atualizada com sucesso',\n    type: ConfiguracaoRenovacao,\n  })\n  async update(\n    @Param('id') id: string,\n    @Body() updateConfiguracaoDto: UpdateConfiguracaoRenovacaoDto,\n  ): Promise<ConfiguracaoRenovacao> {\n    return this.renovacaoService.update(id, updateConfiguracaoDto);\n  }\n\n  /**\n   * Remove uma configuração de renovação\n   * @param id ID da configuração\n   * @returns void\n   */\n  @Delete('configuracao/:id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @RequiresPermission({ permissionName: 'beneficio.configuracao.remover' })\n  @ApiOperation({\n    summary: 'Remove uma configuração de renovação',\n    description: 'Remove permanentemente uma configuração de renovação.',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Configuração removida com sucesso',\n  })\n  async remove(@Param('id') id: string): Promise<void> {\n    return this.renovacaoService.remove(id);\n  }\n\n  /**\n   * Ativa ou desativa uma configuração de renovação\n   * @param id ID da configuração\n   * @param body Corpo da requisição\n   * @returns Configuração atualizada\n   */\n  @Patch('configuracao/:id/ativar')\n  @RequiresPermission({ permissionName: 'beneficio.configuracao.atualizar' })\n  @ApiOperation({\n    summary: 'Ativa ou desativa uma configuração de renovação',\n    description:\n      'Altera o status de ativação de uma configuração de renovação.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Status de ativação atualizado com sucesso',\n    type: ConfiguracaoRenovacao,\n  })\n  async toggleAtivo(\n    @Param('id') id: string,\n    @Body() body: { ativo: boolean },\n  ): Promise<ConfiguracaoRenovacao> {\n    return this.renovacaoService.toggleAtivo(id, body.ativo);\n  }\n\n  /**\n   * Verifica a configuração de renovação automática de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @returns Informações sobre a configuração de renovação da solicitação\n   */\n  @Get('solicitacao/:solicitacaoId/verificar')\n  @RequiresPermission({\n    permissionName: 'solicitacao.visualizar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary:\n      'Verifica a configuração de renovação automática de uma solicitação',\n    description:\n      'Retorna informações sobre a configuração de renovação automática de uma solicitação específica.',\n  })\n  @ApiResponse({\n    status: 200,\n    description:\n      'Informações sobre renovação automática retornadas com sucesso',\n    type: VerificacaoRenovacaoResponseDto,\n  })\n  async verificarRenovacaoSolicitacao(\n    @Param('solicitacaoId') solicitacaoId: string,\n  ): Promise<VerificacaoRenovacaoResponseDto> {\n    return this.renovacaoService.verificarRenovacaoSolicitacao(solicitacaoId);\n  }\n\n  /**\n   * Configura a renovação automática para uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param body Corpo da requisição\n   * @param req Requisição\n   * @returns Solicitação atualizada\n   */\n  @Patch('solicitacao/:solicitacaoId')\n  @RequiresPermission({\n    permissionName: 'solicitacao.configurar-renovacao',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Configura a renovação automática para uma solicitação',\n    description:\n      'Ativa ou desativa a renovação automática para uma solicitação específica.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Configuração de renovação atualizada com sucesso',\n    type: Solicitacao,\n  })\n  async configurarRenovacaoSolicitacao(\n    @Param('solicitacaoId') solicitacaoId: string,\n    @Body() body: ConfigurarRenovacaoSolicitacaoDto,\n    @Req() req: any,\n  ): Promise<Solicitacao> {\n    return this.renovacaoService.configurarRenovacaoSolicitacao(\n      solicitacaoId,\n      body.renovacao_automatica,\n      req.user.id,\n    );\n  }\n\n  /**\n   * Verifica e processa manualmente as renovações pendentes\n   * @param req Requisição\n   * @returns Número de solicitações renovadas\n   */\n  @Post('verificar-pendentes')\n  @RequiresPermission({ permissionName: 'beneficio.renovacao.verificar' })\n  @ApiOperation({\n    summary: 'Verifica e processa manualmente as renovações pendentes',\n    description:\n      'Executa manualmente o processo de verificação e renovação automática.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Verificação concluída com sucesso',\n    type: VerificacaoRenovacoesPendentesResponseDto,\n  })\n  async verificarRenovacoesPendentes(\n    @Req() req: any,\n  ): Promise<VerificacaoRenovacoesPendentesResponseDto> {\n    const renovacoesProcessadas =\n      await this.renovacaoService.verificarRenovacoesPendentes(req.user.id);\n    const response: VerificacaoRenovacoesPendentesResponseDto = {\n      renovacoes_processadas: renovacoesProcessadas,\n    };\n    return response;\n  }\n}\n"],"version":3}