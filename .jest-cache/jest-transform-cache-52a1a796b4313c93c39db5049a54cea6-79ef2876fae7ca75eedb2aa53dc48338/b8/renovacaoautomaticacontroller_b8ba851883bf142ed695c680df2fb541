fe4a604bce2efd6b40cb902663945f1f
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenovacaoAutomaticaController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const renovacao_automatica_service_1 = require("../services/renovacao-automatica.service");
const configuracao_renovacao_entity_1 = require("../../../entities/configuracao-renovacao.entity");
const create_configuracao_renovacao_dto_1 = require("../dto/create-configuracao-renovacao.dto");
const update_configuracao_renovacao_dto_1 = require("../dto/update-configuracao-renovacao.dto");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const verificacao_renovacao_response_dto_1 = require("../dto/verificacao-renovacao-response.dto");
const verificacao_renovacoes_pendentes_response_dto_1 = require("../dto/verificacao-renovacoes-pendentes-response.dto");
const configurar_renovacao_solicitacao_dto_1 = require("../dto/configurar-renovacao-solicitacao.dto");
// Usando o DTO importado ConfigurarRenovacaoSolicitacaoDto
/**
 * Controller de Renovação Automática
 *
 * Responsável por expor os endpoints de gerenciamento das configurações de renovação
 * automática e do processo de renovação automática mensal.
 */
let RenovacaoAutomaticaController = class RenovacaoAutomaticaController {
    renovacaoService;
    constructor(renovacaoService) {
        this.renovacaoService = renovacaoService;
    }
    /**
     * Cria uma nova configuração de renovação automática
     * @param createConfiguracaoDto Dados da configuração
     * @param req Requisição
     * @returns Configuração criada
     */
    async create(createConfiguracaoDto, req) {
        return this.renovacaoService.create(createConfiguracaoDto, req.user.id);
    }
    /**
     * Busca todas as configurações de renovação
     * @returns Lista de configurações
     */
    async findAll() {
        return this.renovacaoService.findAll();
    }
    /**
     * Busca uma configuração de renovação pelo ID
     * @param id ID da configuração
     * @returns Configuração
     */
    async findById(id) {
        return this.renovacaoService.findById(id);
    }
    /**
     * Busca uma configuração de renovação pelo tipo de benefício
     * @param tipoBeneficioId ID do tipo de benefício
     * @returns Configuração
     */
    async findByTipoBeneficio(tipoBeneficioId) {
        return this.renovacaoService.findByTipoBeneficio(tipoBeneficioId);
    }
    /**
     * Atualiza uma configuração de renovação
     * @param id ID da configuração
     * @param updateConfiguracaoDto Dados para atualização
     * @returns Configuração atualizada
     */
    async update(id, updateConfiguracaoDto) {
        return this.renovacaoService.update(id, updateConfiguracaoDto);
    }
    /**
     * Remove uma configuração de renovação
     * @param id ID da configuração
     * @returns void
     */
    async remove(id) {
        return this.renovacaoService.remove(id);
    }
    /**
     * Ativa ou desativa uma configuração de renovação
     * @param id ID da configuração
     * @param body Corpo da requisição
     * @returns Configuração atualizada
     */
    async toggleAtivo(id, body) {
        return this.renovacaoService.toggleAtivo(id, body.ativo);
    }
    /**
     * Verifica a configuração de renovação automática de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @returns Informações sobre a configuração de renovação da solicitação
     */
    async verificarRenovacaoSolicitacao(solicitacaoId) {
        return this.renovacaoService.verificarRenovacaoSolicitacao(solicitacaoId);
    }
    /**
     * Configura a renovação automática para uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param body Corpo da requisição
     * @param req Requisição
     * @returns Solicitação atualizada
     */
    async configurarRenovacaoSolicitacao(solicitacaoId, body, req) {
        return this.renovacaoService.configurarRenovacaoSolicitacao(solicitacaoId, body.renovacao_automatica, req.user.id);
    }
    /**
     * Verifica e processa manualmente as renovações pendentes
     * @param req Requisição
     * @returns Número de solicitações renovadas
     */
    async verificarRenovacoesPendentes(req) {
        const renovacoesProcessadas = await this.renovacaoService.verificarRenovacoesPendentes(req.user.id);
        const response = {
            renovacoes_processadas: renovacoesProcessadas,
        };
        return response;
    }
};
exports.RenovacaoAutomaticaController = RenovacaoAutomaticaController;
__decorate([
    (0, common_1.Post)('configuracao'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.configuracao.criar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Cria uma nova configuração de renovação automática',
        description: 'Cria uma configuração de renovação automática para um tipo de benefício.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Configuração criada com sucesso',
        type: configuracao_renovacao_entity_1.ConfiguracaoRenovacao,
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof create_configuracao_renovacao_dto_1.CreateConfiguracaoRenovacaoDto !== "undefined" && create_configuracao_renovacao_dto_1.CreateConfiguracaoRenovacaoDto) === "function" ? _b : Object, Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], RenovacaoAutomaticaController.prototype, "create", null);
__decorate([
    (0, common_1.Get)('configuracao'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.configuracao.listar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Busca todas as configurações de renovação',
        description: 'Retorna a lista de todas as configurações de renovação automática.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de configurações retornada com sucesso',
        type: [configuracao_renovacao_entity_1.ConfiguracaoRenovacao],
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], RenovacaoAutomaticaController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)('configuracao/:id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.configuracao.visualizar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Busca uma configuração de renovação pelo ID',
        description: 'Retorna os detalhes de uma configuração de renovação específica.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Configuração encontrada com sucesso',
        type: configuracao_renovacao_entity_1.ConfiguracaoRenovacao,
    }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], RenovacaoAutomaticaController.prototype, "findById", null);
__decorate([
    (0, common_1.Get)('configuracao/tipo-beneficio/:tipoBeneficioId'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.configuracao.visualizar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Busca uma configuração de renovação pelo tipo de benefício',
        description: 'Retorna a configuração de renovação para um tipo de benefício específico.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Configuração encontrada com sucesso',
        type: configuracao_renovacao_entity_1.ConfiguracaoRenovacao,
    }),
    __param(0, (0, common_1.Param)('tipoBeneficioId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], RenovacaoAutomaticaController.prototype, "findByTipoBeneficio", null);
__decorate([
    (0, common_1.Patch)('configuracao/:id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.configuracao.atualizar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualiza uma configuração de renovação',
        description: 'Atualiza os dados de uma configuração de renovação existente.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Configuração atualizada com sucesso',
        type: configuracao_renovacao_entity_1.ConfiguracaoRenovacao,
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_g = typeof update_configuracao_renovacao_dto_1.UpdateConfiguracaoRenovacaoDto !== "undefined" && update_configuracao_renovacao_dto_1.UpdateConfiguracaoRenovacaoDto) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], RenovacaoAutomaticaController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)('configuracao/:id'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.configuracao.remover' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Remove uma configuração de renovação',
        description: 'Remove permanentemente uma configuração de renovação.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Configuração removida com sucesso',
    }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], RenovacaoAutomaticaController.prototype, "remove", null);
__decorate([
    (0, common_1.Patch)('configuracao/:id/ativar'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.configuracao.atualizar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Ativa ou desativa uma configuração de renovação',
        description: 'Altera o status de ativação de uma configuração de renovação.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status de ativação atualizado com sucesso',
        type: configuracao_renovacao_entity_1.ConfiguracaoRenovacao,
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], RenovacaoAutomaticaController.prototype, "toggleAtivo", null);
__decorate([
    (0, common_1.Get)('solicitacao/:solicitacaoId/verificar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.visualizar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Verifica a configuração de renovação automática de uma solicitação',
        description: 'Retorna informações sobre a configuração de renovação automática de uma solicitação específica.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Informações sobre renovação automática retornadas com sucesso',
        type: verificacao_renovacao_response_dto_1.VerificacaoRenovacaoResponseDto,
    }),
    __param(0, (0, common_1.Param)('solicitacaoId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], RenovacaoAutomaticaController.prototype, "verificarRenovacaoSolicitacao", null);
__decorate([
    (0, common_1.Patch)('solicitacao/:solicitacaoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.configurar-renovacao',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Configura a renovação automática para uma solicitação',
        description: 'Ativa ou desativa a renovação automática para uma solicitação específica.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Configuração de renovação atualizada com sucesso',
        type: solicitacao_entity_1.Solicitacao,
    }),
    __param(0, (0, common_1.Param)('solicitacaoId')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_m = typeof configurar_renovacao_solicitacao_dto_1.ConfigurarRenovacaoSolicitacaoDto !== "undefined" && configurar_renovacao_solicitacao_dto_1.ConfigurarRenovacaoSolicitacaoDto) === "function" ? _m : Object, Object]),
    __metadata("design:returntype", typeof (_o = typeof Promise !== "undefined" && Promise) === "function" ? _o : Object)
], RenovacaoAutomaticaController.prototype, "configurarRenovacaoSolicitacao", null);
__decorate([
    (0, common_1.Post)('verificar-pendentes'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'beneficio.renovacao.verificar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Verifica e processa manualmente as renovações pendentes',
        description: 'Executa manualmente o processo de verificação e renovação automática.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Verificação concluída com sucesso',
        type: verificacao_renovacoes_pendentes_response_dto_1.VerificacaoRenovacoesPendentesResponseDto,
    }),
    __param(0, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_p = typeof Promise !== "undefined" && Promise) === "function" ? _p : Object)
], RenovacaoAutomaticaController.prototype, "verificarRenovacoesPendentes", null);
exports.RenovacaoAutomaticaController = RenovacaoAutomaticaController = __decorate([
    (0, swagger_1.ApiTags)('Benefícios'),
    (0, common_1.Controller)('beneficio/renovacao-automatica'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof renovacao_automatica_service_1.RenovacaoAutomaticaService !== "undefined" && renovacao_automatica_service_1.RenovacaoAutomaticaService) === "function" ? _a : Object])
], RenovacaoAutomaticaController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,