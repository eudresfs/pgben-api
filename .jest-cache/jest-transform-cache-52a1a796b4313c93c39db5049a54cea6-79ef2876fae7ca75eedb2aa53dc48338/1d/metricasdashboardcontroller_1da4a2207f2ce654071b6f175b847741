432d47601c8a810871b058e3bd3e4a10
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasDashboardController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const services_1 = require("../services");
const dashboard_service_1 = require("../services/dashboard.service");
/**
 * Controlador para endpoints específicos de dashboard
 *
 * Este controlador fornece endpoints otimizados para:
 * 1. Obter resumo das métricas principais
 * 2. Listar alertas ativos de anomalias
 * 3. Obter KPIs configurados para dashboard
 * 4. Obter dados para gráficos e visualizações
 * 5. Exportar dados para relatórios
 */
let MetricasDashboardController = class MetricasDashboardController {
    metricasService;
    metricasAnomaliasService;
    dashboardService;
    constructor(metricasService, metricasAnomaliasService, dashboardService) {
        this.metricasService = metricasService;
        this.metricasAnomaliasService = metricasAnomaliasService;
        this.dashboardService = dashboardService;
    }
    /**
     * Obtém resumo das métricas principais para dashboard
     */
    async obterResumo() {
        return this.dashboardService.obterResumo();
    }
    /**
     * Obtém KPIs para o dashboard
     */
    async obterKPIs() {
        return this.dashboardService.obterKPIs();
    }
    /**
     * Obtém dados para gráficos do dashboard
     */
    async obterGraficos(periodo) {
        return this.dashboardService.obterGraficos(periodo ? +periodo : 30);
    }
    /**
     * Lista alertas ativos de anomalias
     */
    async listarAlertas(prioridade, limite) {
        // Implementação temporária até que o método seja adicionado ao serviço
        return {
            total: 0,
            prioridade: prioridade || 'todas',
            alertas: [],
        };
    }
};
exports.MetricasDashboardController = MetricasDashboardController;
__decorate([
    (0, common_1.Get)('resumo'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'dashboard.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém resumo das métricas principais' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Resumo obtido com sucesso' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MetricasDashboardController.prototype, "obterResumo", null);
__decorate([
    (0, common_1.Get)('kpis'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'dashboard.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém KPIs para o dashboard' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'KPIs obtidos com sucesso' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MetricasDashboardController.prototype, "obterKPIs", null);
__decorate([
    (0, common_1.Get)('graficos'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'dashboard.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém dados para gráficos do dashboard' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Dados obtidos com sucesso' }),
    (0, swagger_1.ApiQuery)({
        name: 'periodo',
        required: false,
        type: Number,
        description: 'Período em dias para filtrar os dados',
    }),
    __param(0, (0, common_1.Query)('periodo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], MetricasDashboardController.prototype, "obterGraficos", null);
__decorate([
    (0, common_1.Get)('alertas'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'dashboard.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Lista alertas ativos de anomalias' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Alertas listados com sucesso' }),
    (0, swagger_1.ApiQuery)({
        name: 'prioridade',
        required: false,
        type: String,
        description: 'Filtro por prioridade (alta, media, baixa)',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'limite',
        required: false,
        type: Number,
        description: 'Limite de alertas a serem retornados',
    }),
    __param(0, (0, common_1.Query)('prioridade')),
    __param(1, (0, common_1.Query)('limite')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Number]),
    __metadata("design:returntype", Promise)
], MetricasDashboardController.prototype, "listarAlertas", null);
exports.MetricasDashboardController = MetricasDashboardController = __decorate([
    (0, swagger_1.ApiTags)('Métricas e Dashboard'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, common_1.Controller)('dashboard'),
    __metadata("design:paramtypes", [typeof (_a = typeof services_1.MetricasService !== "undefined" && services_1.MetricasService) === "function" ? _a : Object, typeof (_b = typeof services_1.MetricasAnomaliasService !== "undefined" && services_1.MetricasAnomaliasService) === "function" ? _b : Object, typeof (_c = typeof dashboard_service_1.DashboardService !== "undefined" && dashboard_service_1.DashboardService) === "function" ? _c : Object])
], MetricasDashboardController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,