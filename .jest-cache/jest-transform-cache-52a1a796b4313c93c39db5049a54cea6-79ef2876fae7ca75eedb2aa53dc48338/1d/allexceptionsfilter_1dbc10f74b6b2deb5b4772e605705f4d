a7ec28f5db459089ab68540e8067c423
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AllExceptionsFilter_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllExceptionsFilter = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const constants_1 = require("../constants");
const util_1 = require("../request-context/util");
const base_api_exception_1 = require("../exceptions/base-api.exception");
const unified_logger_service_1 = require("../logging/unified-logger.service");
/**
 * Filtro global para tratamento de exceções
 *
 * Padroniza todas as respostas de erro da aplicação,
 * garantindo consistência e logging adequado.
 *
 * Características:
 * - Tratamento específico para diferentes tipos de exceção
 * - Logging estruturado com contexto de requisição
 * - Respostas padronizadas conforme ApiErrorResponse
 * - Suporte a validação e localização de mensagens
 * - Proteção de dados sensíveis em produção
 */
let AllExceptionsFilter = AllExceptionsFilter_1 = class AllExceptionsFilter {
    config;
    logger;
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        this.logger.setContext(AllExceptionsFilter_1.name);
    }
    catch(exception, host) {
        const ctx = host.switchToHttp();
        const req = ctx.getRequest();
        const res = ctx.getResponse();
        const path = req.url;
        const timestamp = new Date().toISOString();
        const requestId = req.headers[constants_1.REQUEST_ID_TOKEN_HEADER];
        const requestContext = (0, util_1.createRequestContext)(req);
        // Extrair idioma do header para localização (padrão: pt-BR)
        const acceptedLanguage = req.headers['accept-language']?.split(',')[0] || 'pt-BR';
        let stack;
        let statusCode;
        let errorName;
        let message;
        let details;
        let localizedMessage;
        let validationErrors;
        // Tratamento estruturado por tipo de exceção
        switch (true) {
            case exception instanceof base_api_exception_1.BaseApiException:
                statusCode = exception.getStatus();
                errorName = exception.constructor.name;
                message = exception.message;
                localizedMessage = exception.localizedMessage?.[acceptedLanguage];
                details = exception.details || exception.getResponse();
                break;
            case exception instanceof common_1.BadRequestException:
                statusCode = exception.getStatus();
                errorName = exception.constructor.name;
                const response = exception.getResponse();
                // Tratar erros de validação do class-validator
                if (response?.message && Array.isArray(response.message)) {
                    validationErrors = this.processValidationErrors(response.message);
                    message = 'Erro de validação';
                    details = { validationErrors };
                }
                else {
                    message = response?.message || exception.message;
                    details = response;
                }
                break;
            case exception instanceof common_1.HttpException:
                statusCode = exception.getStatus();
                errorName = exception.constructor.name;
                message = exception.message;
                details = exception.getResponse();
                break;
            case exception instanceof Error:
                statusCode = common_1.HttpStatus.INTERNAL_SERVER_ERROR;
                errorName = exception.constructor.name;
                message = exception.message;
                stack = exception.stack;
                break;
            default:
                statusCode = common_1.HttpStatus.INTERNAL_SERVER_ERROR;
                errorName = 'UnknownException';
                message = 'Erro interno do servidor';
                break;
        }
        // Criar resposta de erro padronizada
        const errorResponse = {
            statusCode,
            message,
            code: errorName,
            details,
            errors: validationErrors,
            timestamp,
            path,
        };
        // Log estruturado do erro
        const logLevel = statusCode >= 500 ? 'error' : 'warn';
        const logMessage = `${errorName}: ${message}`;
        const logMeta = {
            statusCode,
            errorName,
            path,
            requestId,
            userAgent: req.headers['user-agent'],
            ip: req.ip,
            method: req.method,
            stack: stack && this.config.get('NODE_ENV') === 'development' ? stack : undefined,
        };
        if (logLevel === 'error') {
            this.logger.error(requestContext, logMessage, logMeta);
        }
        else {
            this.logger.warn(requestContext, logMessage, logMeta);
        }
        // Proteger dados sensíveis em produção
        const isProduction = this.config.get('NODE_ENV') === 'production';
        if (isProduction && statusCode === common_1.HttpStatus.INTERNAL_SERVER_ERROR) {
            errorResponse.message = 'Erro interno do servidor';
            errorResponse.details = undefined;
        }
        res.status(statusCode).json(errorResponse);
    }
    /**
     * Processa erros de validação do class-validator em formato estruturado
     */
    processValidationErrors(validationErrors) {
        const result = [];
        for (const error of validationErrors) {
            if (typeof error === 'string') {
                // Erro simples como string
                result.push({
                    field: 'unknown',
                    messages: [error],
                });
            }
            else if (error && typeof error === 'object' && 'property' in error) {
                // ValidationError do class-validator
                const validationError = error;
                const messages = validationError.constraints
                    ? Object.values(validationError.constraints)
                    : ['Erro de validação'];
                result.push({
                    field: validationError.property,
                    messages,
                });
                // Processar erros aninhados
                if (validationError.children && validationError.children.length > 0) {
                    const childErrors = this.processValidationErrors(validationError.children);
                    result.push(...childErrors.map(childError => ({
                        field: `${validationError.property}.${childError.field}`,
                        messages: childError.messages,
                    })));
                }
            }
        }
        return result;
    }
};
exports.AllExceptionsFilter = AllExceptionsFilter;
exports.AllExceptionsFilter = AllExceptionsFilter = AllExceptionsFilter_1 = __decorate([
    (0, common_1.Injectable)(),
    (0, common_1.Catch)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof unified_logger_service_1.UnifiedLoggerService !== "undefined" && unified_logger_service_1.UnifiedLoggerService) === "function" ? _b : Object])
], AllExceptionsFilter);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,