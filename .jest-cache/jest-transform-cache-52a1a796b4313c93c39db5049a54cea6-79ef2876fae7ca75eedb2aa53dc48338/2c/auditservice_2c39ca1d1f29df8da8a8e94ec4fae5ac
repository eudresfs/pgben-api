2a36b0b078fb566d76866938314c9668
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuditService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const audit_log_entity_1 = require("../../entities/audit-log.entity");
let AuditService = AuditService_1 = class AuditService {
    auditLogRepository;
    logger = new common_1.Logger(AuditService_1.name);
    constructor(auditLogRepository) {
        this.auditLogRepository = auditLogRepository;
    }
    /**
     * Cria um novo log de auditoria
     */
    async createLog(createAuditLogDto) {
        try {
            const auditLog = this.auditLogRepository.create({
                ...createAuditLogDto,
                severity: createAuditLogDto.severity || audit_log_entity_1.AuditSeverity.LOW,
            });
            const savedLog = await this.auditLogRepository.save(auditLog);
            // Log crítico ou de alta severidade deve ser registrado no console
            if (savedLog.isHighRisk()) {
                this.logger.warn(`[AUDIT ${savedLog.severity}] ${savedLog.getFormattedMessage()}`, {
                    id: savedLog.id,
                    action: savedLog.action,
                    resource: `${savedLog.resource_type}:${savedLog.resource_id}`,
                    user: savedLog.usuario_id,
                    ip: savedLog.client_ip,
                    metadata: savedLog.metadata,
                });
            }
            return savedLog;
        }
        catch (error) {
            this.logger.error('Erro ao criar log de auditoria', error.stack);
            throw error;
        }
    }
    /**
     * Busca logs de auditoria com filtros e paginação
     */
    async findLogs(queryDto) {
        const { usuario_id, action, resource_type, resource_id, severity, client_ip, start_date, end_date, page = 1, limit = 20, sort_by = 'created_at', sort_order = 'DESC', security_events_only, critical_only, } = queryDto;
        const where = {};
        // Aplicar filtros
        if (usuario_id) {
            where.usuario_id = usuario_id;
        }
        if (action) {
            where.action = action;
        }
        if (resource_type) {
            where.resource_type = resource_type;
        }
        if (resource_id) {
            where.resource_id = resource_id;
        }
        if (severity) {
            where.severity = severity;
        }
        if (client_ip) {
            where.client_ip = client_ip;
        }
        // Filtro de data
        if (start_date || end_date) {
            const startDate = start_date
                ? new Date(start_date)
                : new Date('1970-01-01');
            const endDate = end_date ? new Date(end_date) : new Date();
            where.created_at = (0, typeorm_2.Between)(startDate, endDate);
        }
        // Filtros especiais
        if (security_events_only) {
            where.action = (0, typeorm_2.In)([
                audit_log_entity_1.AuditAction.LOGIN,
                audit_log_entity_1.AuditAction.LOGOUT,
                audit_log_entity_1.AuditAction.LOGIN_FAILED,
                audit_log_entity_1.AuditAction.PASSWORD_RESET,
                audit_log_entity_1.AuditAction.PASSWORD_CHANGE,
                audit_log_entity_1.AuditAction.PERMISSION_DENIED,
                audit_log_entity_1.AuditAction.TOKEN_REFRESH,
                audit_log_entity_1.AuditAction.TOKEN_REVOKE,
            ]);
        }
        if (critical_only) {
            where.severity = (0, typeorm_2.In)([audit_log_entity_1.AuditSeverity.HIGH, audit_log_entity_1.AuditSeverity.CRITICAL]);
        }
        const [logs, total] = await this.auditLogRepository.findAndCount({
            where,
            relations: ['usuario'],
            order: { [sort_by]: sort_order },
            skip: (page - 1) * limit,
            take: limit,
        });
        const data = logs.map((log) => this.mapToResponseDto(log));
        return {
            data,
            total,
            page,
            limit,
            totalPages: Math.ceil(total / limit),
        };
    }
    /**
     * Busca um log específico por ID
     */
    async findLogById(id) {
        const log = await this.auditLogRepository.findOne({
            where: { id },
            relations: ['usuario'],
        });
        return log ? this.mapToResponseDto(log) : null;
    }
    /**
     * Gera estatísticas de auditoria
     */
    async getStats(startDate, endDate) {
        const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 dias atrás
        const end = endDate || new Date();
        const where = {
            created_at: (0, typeorm_2.Between)(start, end),
        };
        // Total de logs
        const totalLogs = await this.auditLogRepository.count({ where });
        // Logs por ação
        const logsByAction = await this.auditLogRepository
            .createQueryBuilder('log')
            .select('log.action', 'action')
            .addSelect('COUNT(*)', 'count')
            .where('log.created_at BETWEEN :start AND :end', { start, end })
            .groupBy('log.action')
            .getRawMany();
        // Logs por severidade
        const logsBySeverity = await this.auditLogRepository
            .createQueryBuilder('log')
            .select('log.severity', 'severity')
            .addSelect('COUNT(*)', 'count')
            .where('log.created_at BETWEEN :start AND :end', { start, end })
            .groupBy('log.severity')
            .getRawMany();
        // Top usuários
        const topUsers = await this.auditLogRepository
            .createQueryBuilder('log')
            .leftJoin('log.usuario', 'usuario')
            .select('log.usuario_id', 'usuario_id')
            .addSelect('usuario.nome', 'nome')
            .addSelect('COUNT(*)', 'count')
            .where('log.created_at BETWEEN :start AND :end', { start, end })
            .andWhere('log.usuario_id IS NOT NULL')
            .groupBy('log.usuario_id, usuario.nome')
            .orderBy('COUNT(*)', 'DESC')
            .limit(10)
            .getRawMany();
        // Eventos de segurança recentes (últimas 24h)
        const recentSecurityEvents = await this.auditLogRepository.count({
            where: {
                created_at: (0, typeorm_2.Between)(new Date(Date.now() - 24 * 60 * 60 * 1000), new Date()),
                action: (0, typeorm_2.In)([
                    audit_log_entity_1.AuditAction.LOGIN,
                    audit_log_entity_1.AuditAction.LOGOUT,
                    audit_log_entity_1.AuditAction.LOGIN_FAILED,
                    audit_log_entity_1.AuditAction.PASSWORD_RESET,
                    audit_log_entity_1.AuditAction.PASSWORD_CHANGE,
                    audit_log_entity_1.AuditAction.PERMISSION_DENIED,
                    audit_log_entity_1.AuditAction.TOKEN_REFRESH,
                    audit_log_entity_1.AuditAction.TOKEN_REVOKE,
                ]),
            },
        });
        // Eventos críticos recentes (últimas 24h)
        const recentCriticalEvents = await this.auditLogRepository.count({
            where: {
                created_at: (0, typeorm_2.Between)(new Date(Date.now() - 24 * 60 * 60 * 1000), new Date()),
                severity: (0, typeorm_2.In)([audit_log_entity_1.AuditSeverity.HIGH, audit_log_entity_1.AuditSeverity.CRITICAL]),
            },
        });
        return {
            total_logs: totalLogs,
            logs_by_action: logsByAction.reduce((acc, item) => ({ ...acc, [item.action]: parseInt(item.count) }), {}),
            logs_by_severity: logsBySeverity.reduce((acc, item) => ({ ...acc, [item.severity]: parseInt(item.count) }), {}),
            top_users: topUsers.map((user) => ({
                usuario_id: user.usuario_id,
                nome: user.nome || 'Usuário Desconhecido',
                count: parseInt(user.count),
            })),
            recent_security_events: recentSecurityEvents,
            recent_critical_events: recentCriticalEvents,
            period: {
                start_date: start.toISOString(),
                end_date: end.toISOString(),
            },
        };
    }
    /**
     * Remove logs antigos (executado automaticamente)
     * TEMPORARIAMENTE DESABILITADO - pode estar causando travamento na inicialização
     */
    // @Cron(CronExpression.EVERY_DAY_AT_2AM)
    async cleanupOldLogs() {
        try {
            // Remove logs com mais de 1 ano (exceto críticos)
            const oneYearAgo = new Date();
            oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);
            const result = await this.auditLogRepository
                .createQueryBuilder()
                .delete()
                .where('created_at < :date', { date: oneYearAgo })
                .andWhere('severity NOT IN (:...severities)', {
                severities: [audit_log_entity_1.AuditSeverity.HIGH, audit_log_entity_1.AuditSeverity.CRITICAL],
            })
                .execute();
            this.logger.log(`Limpeza automática: ${result.affected} logs antigos removidos`);
            // Remove logs críticos com mais de 2 anos
            const twoYearsAgo = new Date();
            twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);
            const criticalResult = await this.auditLogRepository
                .createQueryBuilder()
                .delete()
                .where('created_at < :date', { date: twoYearsAgo })
                .andWhere('severity IN (:...severities)', {
                severities: [audit_log_entity_1.AuditSeverity.HIGH, audit_log_entity_1.AuditSeverity.CRITICAL],
            })
                .execute();
            this.logger.log(`Limpeza automática: ${criticalResult.affected} logs críticos antigos removidos`);
        }
        catch (error) {
            this.logger.error('Erro na limpeza automática de logs', error.stack);
        }
    }
    /**
     * Métodos de conveniência para logging específico
     */
    async logUserAction(usuarioId, action, resourceType, resourceId, description, metadata, request) {
        await this.createLog({
            usuario_id: usuarioId,
            action,
            resource_type: resourceType,
            resource_id: resourceId,
            description,
            severity: this.getSeverityForAction(action),
            client_ip: request?.ip,
            user_agent: request?.userAgent,
            request_method: request?.method,
            request_url: request?.url,
            metadata,
        });
    }
    async logSecurityEvent(action, description, usuarioId, severity = audit_log_entity_1.AuditSeverity.HIGH, metadata, request) {
        await this.createLog({
            usuario_id: usuarioId,
            action,
            resource_type: 'Security',
            description,
            severity,
            client_ip: request?.ip,
            user_agent: request?.userAgent,
            metadata,
        });
    }
    async logSystemEvent(action, description, metadata) {
        await this.createLog({
            action,
            resource_type: 'System',
            description,
            severity: audit_log_entity_1.AuditSeverity.LOW,
            metadata,
        });
    }
    /**
     * Métodos privados
     */
    mapToResponseDto(log) {
        return {
            id: log.id,
            usuario_id: log.usuario_id,
            usuario: log.usuario
                ? {
                    id: log.usuario.id,
                    nome: log.usuario.nome,
                    email: log.usuario.email,
                }
                : undefined,
            action: log.action,
            resource_type: log.resource_type,
            resource_id: log.resource_id,
            description: log.description,
            severity: log.severity,
            client_ip: log.client_ip,
            user_agent: log.user_agent,
            created_at: log.created_at,
            metadata: log.metadata,
        };
    }
    getSeverityForAction(action) {
        const severityMap = {
            [audit_log_entity_1.AuditAction.CREATE]: audit_log_entity_1.AuditSeverity.LOW,
            [audit_log_entity_1.AuditAction.READ]: audit_log_entity_1.AuditSeverity.LOW,
            [audit_log_entity_1.AuditAction.UPDATE]: audit_log_entity_1.AuditSeverity.LOW,
            [audit_log_entity_1.AuditAction.DELETE]: audit_log_entity_1.AuditSeverity.MEDIUM,
            [audit_log_entity_1.AuditAction.LOGIN]: audit_log_entity_1.AuditSeverity.LOW,
            [audit_log_entity_1.AuditAction.LOGOUT]: audit_log_entity_1.AuditSeverity.LOW,
            [audit_log_entity_1.AuditAction.LOGIN_FAILED]: audit_log_entity_1.AuditSeverity.MEDIUM,
            [audit_log_entity_1.AuditAction.PASSWORD_RESET]: audit_log_entity_1.AuditSeverity.HIGH,
            [audit_log_entity_1.AuditAction.PASSWORD_CHANGE]: audit_log_entity_1.AuditSeverity.MEDIUM,
            [audit_log_entity_1.AuditAction.PERMISSION_DENIED]: audit_log_entity_1.AuditSeverity.HIGH,
            [audit_log_entity_1.AuditAction.TOKEN_REFRESH]: audit_log_entity_1.AuditSeverity.LOW,
            [audit_log_entity_1.AuditAction.TOKEN_REVOKE]: audit_log_entity_1.AuditSeverity.MEDIUM,
            [audit_log_entity_1.AuditAction.EXPORT_DATA]: audit_log_entity_1.AuditSeverity.MEDIUM,
            [audit_log_entity_1.AuditAction.IMPORT_DATA]: audit_log_entity_1.AuditSeverity.MEDIUM,
            [audit_log_entity_1.AuditAction.SYSTEM_CONFIG]: audit_log_entity_1.AuditSeverity.HIGH,
        };
        return severityMap[action] || audit_log_entity_1.AuditSeverity.LOW;
    }
};
exports.AuditService = AuditService;
exports.AuditService = AuditService = AuditService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(audit_log_entity_1.AuditLog)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], AuditService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,