{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\audit\\services\\audit.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\audit\\services\\audit.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, In, FindOptionsWhere } from 'typeorm';\nimport { Cron, CronExpression } from '@nestjs/schedule';\nimport {\n  AuditLog,\n  AuditAction,\n  AuditSeverity,\n} from '../../entities/audit-log.entity';\nimport {\n  CreateAuditLogDto,\n  AuditLogQueryDto,\n  AuditLogResponseDto,\n  AuditLogStatsDto,\n} from '../dto/audit-log.dto';\n\n@Injectable()\nexport class AuditService {\n  private readonly logger = new Logger(AuditService.name);\n\n  constructor(\n    @InjectRepository(AuditLog)\n    private readonly auditLogRepository: Repository<AuditLog>,\n  ) {}\n\n  /**\n   * Cria um novo log de auditoria\n   */\n  async createLog(createAuditLogDto: CreateAuditLogDto): Promise<AuditLog> {\n    try {\n      const auditLog = this.auditLogRepository.create({\n        ...createAuditLogDto,\n        severity: createAuditLogDto.severity || AuditSeverity.LOW,\n      });\n\n      const savedLog = await this.auditLogRepository.save(auditLog);\n\n      // Log crítico ou de alta severidade deve ser registrado no console\n      if (savedLog.isHighRisk()) {\n        this.logger.warn(\n          `[AUDIT ${savedLog.severity}] ${savedLog.getFormattedMessage()}`,\n          {\n            id: savedLog.id,\n            action: savedLog.action,\n            resource: `${savedLog.resource_type}:${savedLog.resource_id}`,\n            user: savedLog.usuario_id,\n            ip: savedLog.client_ip,\n            metadata: savedLog.metadata,\n          },\n        );\n      }\n\n      return savedLog;\n    } catch (error) {\n      this.logger.error('Erro ao criar log de auditoria', error.stack);\n      throw error;\n    }\n  }\n\n  /**\n   * Busca logs de auditoria com filtros e paginação\n   */\n  async findLogs(queryDto: AuditLogQueryDto): Promise<{\n    data: AuditLogResponseDto[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }> {\n    const {\n      usuario_id,\n      action,\n      resource_type,\n      resource_id,\n      severity,\n      client_ip,\n      start_date,\n      end_date,\n      page = 1,\n      limit = 20,\n      sort_by = 'created_at',\n      sort_order = 'DESC',\n      security_events_only,\n      critical_only,\n    } = queryDto;\n\n    const where: FindOptionsWhere<AuditLog> = {};\n\n    // Aplicar filtros\n    if (usuario_id) {\n      where.usuario_id = usuario_id;\n    }\n    if (action) {\n      where.action = action;\n    }\n    if (resource_type) {\n      where.resource_type = resource_type;\n    }\n    if (resource_id) {\n      where.resource_id = resource_id;\n    }\n    if (severity) {\n      where.severity = severity;\n    }\n    if (client_ip) {\n      where.client_ip = client_ip;\n    }\n\n    // Filtro de data\n    if (start_date || end_date) {\n      const startDate = start_date\n        ? new Date(start_date)\n        : new Date('1970-01-01');\n      const endDate = end_date ? new Date(end_date) : new Date();\n      where.created_at = Between(startDate, endDate);\n    }\n\n    // Filtros especiais\n    if (security_events_only) {\n      where.action = In([\n        AuditAction.LOGIN,\n        AuditAction.LOGOUT,\n        AuditAction.LOGIN_FAILED,\n        AuditAction.PASSWORD_RESET,\n        AuditAction.PASSWORD_CHANGE,\n        AuditAction.PERMISSION_DENIED,\n        AuditAction.TOKEN_REFRESH,\n        AuditAction.TOKEN_REVOKE,\n      ]);\n    }\n\n    if (critical_only) {\n      where.severity = In([AuditSeverity.HIGH, AuditSeverity.CRITICAL]);\n    }\n\n    const [logs, total] = await this.auditLogRepository.findAndCount({\n      where,\n      relations: ['usuario'],\n      order: { [sort_by]: sort_order },\n      skip: (page - 1) * limit,\n      take: limit,\n    });\n\n    const data = logs.map((log) => this.mapToResponseDto(log));\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n      totalPages: Math.ceil(total / limit),\n    };\n  }\n\n  /**\n   * Busca um log específico por ID\n   */\n  async findLogById(id: string): Promise<AuditLogResponseDto | null> {\n    const log = await this.auditLogRepository.findOne({\n      where: { id },\n      relations: ['usuario'],\n    });\n\n    return log ? this.mapToResponseDto(log) : null;\n  }\n\n  /**\n   * Gera estatísticas de auditoria\n   */\n  async getStats(startDate?: Date, endDate?: Date): Promise<AuditLogStatsDto> {\n    const start = startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // 30 dias atrás\n    const end = endDate || new Date();\n\n    const where: FindOptionsWhere<AuditLog> = {\n      created_at: Between(start, end),\n    };\n\n    // Total de logs\n    const totalLogs = await this.auditLogRepository.count({ where });\n\n    // Logs por ação\n    const logsByAction = await this.auditLogRepository\n      .createQueryBuilder('log')\n      .select('log.action', 'action')\n      .addSelect('COUNT(*)', 'count')\n      .where('log.created_at BETWEEN :start AND :end', { start, end })\n      .groupBy('log.action')\n      .getRawMany();\n\n    // Logs por severidade\n    const logsBySeverity = await this.auditLogRepository\n      .createQueryBuilder('log')\n      .select('log.severity', 'severity')\n      .addSelect('COUNT(*)', 'count')\n      .where('log.created_at BETWEEN :start AND :end', { start, end })\n      .groupBy('log.severity')\n      .getRawMany();\n\n    // Top usuários\n    const topUsers = await this.auditLogRepository\n      .createQueryBuilder('log')\n      .leftJoin('log.usuario', 'usuario')\n      .select('log.usuario_id', 'usuario_id')\n      .addSelect('usuario.nome', 'nome')\n      .addSelect('COUNT(*)', 'count')\n      .where('log.created_at BETWEEN :start AND :end', { start, end })\n      .andWhere('log.usuario_id IS NOT NULL')\n      .groupBy('log.usuario_id, usuario.nome')\n      .orderBy('COUNT(*)', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    // Eventos de segurança recentes (últimas 24h)\n    const recentSecurityEvents = await this.auditLogRepository.count({\n      where: {\n        created_at: Between(\n          new Date(Date.now() - 24 * 60 * 60 * 1000),\n          new Date(),\n        ),\n        action: In([\n          AuditAction.LOGIN,\n          AuditAction.LOGOUT,\n          AuditAction.LOGIN_FAILED,\n          AuditAction.PASSWORD_RESET,\n          AuditAction.PASSWORD_CHANGE,\n          AuditAction.PERMISSION_DENIED,\n          AuditAction.TOKEN_REFRESH,\n          AuditAction.TOKEN_REVOKE,\n        ]),\n      },\n    });\n\n    // Eventos críticos recentes (últimas 24h)\n    const recentCriticalEvents = await this.auditLogRepository.count({\n      where: {\n        created_at: Between(\n          new Date(Date.now() - 24 * 60 * 60 * 1000),\n          new Date(),\n        ),\n        severity: In([AuditSeverity.HIGH, AuditSeverity.CRITICAL]),\n      },\n    });\n\n    return {\n      total_logs: totalLogs,\n      logs_by_action: logsByAction.reduce(\n        (acc, item) => ({ ...acc, [item.action]: parseInt(item.count) }),\n        {},\n      ),\n      logs_by_severity: logsBySeverity.reduce(\n        (acc, item) => ({ ...acc, [item.severity]: parseInt(item.count) }),\n        {},\n      ),\n      top_users: topUsers.map((user) => ({\n        usuario_id: user.usuario_id,\n        nome: user.nome || 'Usuário Desconhecido',\n        count: parseInt(user.count),\n      })),\n      recent_security_events: recentSecurityEvents,\n      recent_critical_events: recentCriticalEvents,\n      period: {\n        start_date: start.toISOString(),\n        end_date: end.toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Remove logs antigos (executado automaticamente)\n   * TEMPORARIAMENTE DESABILITADO - pode estar causando travamento na inicialização\n   */\n  // @Cron(CronExpression.EVERY_DAY_AT_2AM)\n  async cleanupOldLogs(): Promise<void> {\n    try {\n      // Remove logs com mais de 1 ano (exceto críticos)\n      const oneYearAgo = new Date();\n      oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n\n      const result = await this.auditLogRepository\n        .createQueryBuilder()\n        .delete()\n        .where('created_at < :date', { date: oneYearAgo })\n        .andWhere('severity NOT IN (:...severities)', {\n          severities: [AuditSeverity.HIGH, AuditSeverity.CRITICAL],\n        })\n        .execute();\n\n      this.logger.log(\n        `Limpeza automática: ${result.affected} logs antigos removidos`,\n      );\n\n      // Remove logs críticos com mais de 2 anos\n      const twoYearsAgo = new Date();\n      twoYearsAgo.setFullYear(twoYearsAgo.getFullYear() - 2);\n\n      const criticalResult = await this.auditLogRepository\n        .createQueryBuilder()\n        .delete()\n        .where('created_at < :date', { date: twoYearsAgo })\n        .andWhere('severity IN (:...severities)', {\n          severities: [AuditSeverity.HIGH, AuditSeverity.CRITICAL],\n        })\n        .execute();\n\n      this.logger.log(\n        `Limpeza automática: ${criticalResult.affected} logs críticos antigos removidos`,\n      );\n    } catch (error) {\n      this.logger.error('Erro na limpeza automática de logs', error.stack);\n    }\n  }\n\n  /**\n   * Métodos de conveniência para logging específico\n   */\n  async logUserAction(\n    usuarioId: string,\n    action: AuditAction,\n    resourceType: string,\n    resourceId?: string,\n    description?: string,\n    metadata?: Record<string, any>,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n      method?: string;\n      url?: string;\n    },\n  ): Promise<void> {\n    await this.createLog({\n      usuario_id: usuarioId,\n      action,\n      resource_type: resourceType,\n      resource_id: resourceId,\n      description,\n      severity: this.getSeverityForAction(action),\n      client_ip: request?.ip,\n      user_agent: request?.userAgent,\n      request_method: request?.method,\n      request_url: request?.url,\n      metadata,\n    });\n  }\n\n  async logSecurityEvent(\n    action: AuditAction,\n    description: string,\n    usuarioId?: string,\n    severity: AuditSeverity = AuditSeverity.HIGH,\n    metadata?: Record<string, any>,\n    request?: {\n      ip?: string;\n      userAgent?: string;\n    },\n  ): Promise<void> {\n    await this.createLog({\n      usuario_id: usuarioId,\n      action,\n      resource_type: 'Security',\n      description,\n      severity,\n      client_ip: request?.ip,\n      user_agent: request?.userAgent,\n      metadata,\n    });\n  }\n\n  async logSystemEvent(\n    action: AuditAction,\n    description: string,\n    metadata?: Record<string, any>,\n  ): Promise<void> {\n    await this.createLog({\n      action,\n      resource_type: 'System',\n      description,\n      severity: AuditSeverity.LOW,\n      metadata,\n    });\n  }\n\n  /**\n   * Métodos privados\n   */\n  private mapToResponseDto(log: AuditLog): AuditLogResponseDto {\n    return {\n      id: log.id,\n      usuario_id: log.usuario_id,\n      usuario: log.usuario\n        ? {\n            id: log.usuario.id,\n            nome: log.usuario.nome,\n            email: log.usuario.email,\n          }\n        : undefined,\n      action: log.action,\n      resource_type: log.resource_type,\n      resource_id: log.resource_id,\n      description: log.description,\n      severity: log.severity,\n      client_ip: log.client_ip,\n      user_agent: log.user_agent,\n      created_at: log.created_at,\n      metadata: log.metadata,\n    };\n  }\n\n  private getSeverityForAction(action: AuditAction): AuditSeverity {\n    const severityMap: Record<AuditAction, AuditSeverity> = {\n      [AuditAction.CREATE]: AuditSeverity.LOW,\n      [AuditAction.READ]: AuditSeverity.LOW,\n      [AuditAction.UPDATE]: AuditSeverity.LOW,\n      [AuditAction.DELETE]: AuditSeverity.MEDIUM,\n      [AuditAction.LOGIN]: AuditSeverity.LOW,\n      [AuditAction.LOGOUT]: AuditSeverity.LOW,\n      [AuditAction.LOGIN_FAILED]: AuditSeverity.MEDIUM,\n      [AuditAction.PASSWORD_RESET]: AuditSeverity.HIGH,\n      [AuditAction.PASSWORD_CHANGE]: AuditSeverity.MEDIUM,\n      [AuditAction.PERMISSION_DENIED]: AuditSeverity.HIGH,\n      [AuditAction.TOKEN_REFRESH]: AuditSeverity.LOW,\n      [AuditAction.TOKEN_REVOKE]: AuditSeverity.MEDIUM,\n      [AuditAction.EXPORT_DATA]: AuditSeverity.MEDIUM,\n      [AuditAction.IMPORT_DATA]: AuditSeverity.MEDIUM,\n      [AuditAction.SYSTEM_CONFIG]: AuditSeverity.HIGH,\n    };\n\n    return severityMap[action] || AuditSeverity.LOW;\n  }\n}\n"],"version":3}