d8d0e5fb59649dbe9385b63e978e1d22
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const request = __importStar(require("supertest"));
const typeorm_1 = require("@nestjs/typeorm");
const config_1 = require("@nestjs/config");
const jwt_1 = require("@nestjs/jwt");
const axios_1 = require("@nestjs/axios");
const pagamento_module_1 = require("../../pagamento.module");
const entities_1 = require("../../../entities");
const status_pagamento_enum_1 = require("../../enums/status-pagamento.enum");
const metodo_pagamento_enum_1 = require("../../enums/metodo-pagamento.enum");
const pagamento_service_1 = require("../../services/pagamento.service");
const integracao_solicitacao_service_1 = require("../../services/integracao-solicitacao.service");
const integracao_cidadao_service_1 = require("../../services/integracao-cidadao.service");
const integracao_documento_service_1 = require("../../services/integracao-documento.service");
const auditoria_pagamento_service_1 = require("../../services/auditoria-pagamento.service");
/**
 * Testes de integração para o fluxo completo de pagamento
 *
 * Verifica o funcionamento correto do fluxo completo de pagamento,
 * desde a criação até a confirmação de recebimento.
 *
 * @author Equipe PGBen
 */
describe('Fluxo Completo de Pagamento (Integration)', () => {
    let app;
    let pagamentoService;
    let integracaoSolicitacaoService;
    let integracaoCidadaoService;
    let integracaoDocumentoService;
    let auditoriaPagamentoService;
    let pagamentoRepository;
    let comprovanteRepository;
    let confirmacaoRepository;
    // Dados de teste
    const usuarioId = 'usuario-teste-id';
    const solicitacaoId = 'solicitacao-teste-id';
    const cidadaoId = 'cidadao-teste-id';
    const infoBancariaId = 'info-bancaria-teste-id';
    // Mock do token JWT para autenticação
    const mockJwtToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3VhcmlvLXRlc3RlLWlkIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';
    // Mock dos serviços externos
    const mockIntegracaoSolicitacaoService = {
        verificarStatusSolicitacao: jest
            .fn()
            .mockResolvedValue('PAGAMENTO_PENDENTE'),
        verificarSolicitacaoElegivel: jest.fn().mockResolvedValue(true),
        atualizarStatusSolicitacao: jest.fn().mockResolvedValue(true),
        obterDetalhesSolicitacao: jest.fn().mockResolvedValue({
            id: solicitacaoId,
            cidadaoId: cidadaoId,
            valorAprovado: 500.0,
            status: 'PAGAMENTO_PENDENTE',
            beneficio: {
                id: 'beneficio-id',
                nome: 'Auxílio Moradia',
            },
            unidade: {
                id: 'unidade-id',
                nome: 'CRAS Centro',
            },
        }),
    };
    const mockIntegracaoCidadaoService = {
        obterDadosCidadao: jest.fn().mockResolvedValue({
            id: cidadaoId,
            nome: 'João da Silva',
            cpf: '12345678900',
        }),
        obterDadosBancarios: jest.fn().mockResolvedValue([
            {
                id: infoBancariaId,
                tipo: 'PIX',
                pixTipo: 'CPF',
                pixChave: '12345678900',
                principal: true,
            },
        ]),
        obterDadosBancariosPorId: jest.fn().mockResolvedValue({
            id: infoBancariaId,
            tipo: 'PIX',
            pixTipo: 'CPF',
            pixChave: '12345678900',
            principal: true,
        }),
        validarDadosBancarios: jest.fn().mockResolvedValue(true),
    };
    const mockIntegracaoDocumentoService = {
        uploadComprovante: jest.fn().mockResolvedValue({
            id: 'documento-id',
            nome: 'comprovante.pdf',
            tamanho: 1024,
            tipo: 'application/pdf',
            url: 'http://localhost/documentos/documento-id',
        }),
        obterComprovante: jest.fn().mockResolvedValue({
            id: 'documento-id',
            nome: 'comprovante.pdf',
            tamanho: 1024,
            tipo: 'application/pdf',
            url: 'http://localhost/documentos/documento-id',
        }),
        listarComprovantes: jest.fn().mockResolvedValue([
            {
                id: 'documento-id',
                nome: 'comprovante.pdf',
                tamanho: 1024,
                tipo: 'application/pdf',
                url: 'http://localhost/documentos/documento-id',
            },
        ]),
        removerComprovante: jest.fn().mockResolvedValue(undefined),
    };
    const mockAuditoriaPagamentoService = {
        logCriacaoPagamento: jest.fn(),
        logMudancaStatus: jest.fn(),
        logCancelamentoPagamento: jest.fn(),
        logUploadComprovante: jest.fn(),
        logRemocaoComprovante: jest.fn(),
        logConfirmacaoRecebimento: jest.fn(),
        logErroProcessamento: jest.fn(),
    };
    // Mock dos repositórios
    const mockPagamentoRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
        update: jest.fn(),
        delete: jest.fn(),
    };
    const mockComprovanteRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
        delete: jest.fn(),
    };
    const mockConfirmacaoRepository = {
        create: jest.fn(),
        save: jest.fn(),
        findOne: jest.fn(),
        find: jest.fn(),
        findAndCount: jest.fn(),
    };
    beforeAll(async () => {
        const moduleFixture = await testing_1.Test.createTestingModule({
            imports: [
                pagamento_module_1.PagamentoModule,
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
                jwt_1.JwtModule.registerAsync({
                    imports: [config_1.ConfigModule],
                    useFactory: async (configService) => ({
                        secret: configService.get('JWT_SECRET') || 'test-secret',
                        signOptions: { expiresIn: '1h' },
                    }),
                    inject: [config_1.ConfigService],
                }),
                axios_1.HttpModule,
            ],
            providers: [
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.Pagamento),
                    useValue: mockPagamentoRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.ComprovantePagamento),
                    useValue: mockComprovanteRepository,
                },
                {
                    provide: (0, typeorm_1.getRepositoryToken)(entities_1.ConfirmacaoRecebimento),
                    useValue: mockConfirmacaoRepository,
                },
            ],
        })
            .overrideProvider(integracao_solicitacao_service_1.IntegracaoSolicitacaoService)
            .useValue(mockIntegracaoSolicitacaoService)
            .overrideProvider(integracao_cidadao_service_1.IntegracaoCidadaoService)
            .useValue(mockIntegracaoCidadaoService)
            .overrideProvider(integracao_documento_service_1.IntegracaoDocumentoService)
            .useValue(mockIntegracaoDocumentoService)
            .overrideProvider(auditoria_pagamento_service_1.AuditoriaPagamentoService)
            .useValue(mockAuditoriaPagamentoService)
            .compile();
        app = moduleFixture.createNestApplication();
        pagamentoService = moduleFixture.get(pagamento_service_1.PagamentoService);
        integracaoSolicitacaoService =
            moduleFixture.get(integracao_solicitacao_service_1.IntegracaoSolicitacaoService);
        integracaoCidadaoService = moduleFixture.get(integracao_cidadao_service_1.IntegracaoCidadaoService);
        integracaoDocumentoService = moduleFixture.get(integracao_documento_service_1.IntegracaoDocumentoService);
        auditoriaPagamentoService = moduleFixture.get(auditoria_pagamento_service_1.AuditoriaPagamentoService);
        pagamentoRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(entities_1.Pagamento));
        comprovanteRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(entities_1.ComprovantePagamento));
        confirmacaoRepository = moduleFixture.get((0, typeorm_1.getRepositoryToken)(entities_1.ConfirmacaoRecebimento));
        await app.init();
    });
    afterAll(async () => {
        await app.close();
    });
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Fluxo Completo: Criar → Liberar → Enviar Comprovante → Confirmar', () => {
        let pagamentoId;
        let comprovanteId;
        let confirmacaoId;
        it('1. Deve criar um novo pagamento com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: 'pagamento-teste-id',
                solicitacaoId,
                valor: 500.0,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900',
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            mockPagamentoRepository.create.mockReturnValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/solicitacao/${solicitacaoId}`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                valor: 500.0,
                dataLiberacao: new Date(),
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900',
                },
            });
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO);
            // Guardar ID para próximos testes
            pagamentoId = response.body.id;
            // Verificar chamadas de serviços
            expect(integracaoSolicitacaoService.verificarSolicitacaoElegivel).toHaveBeenCalledWith(solicitacaoId);
            expect(integracaoCidadaoService.validarDadosBancarios).toHaveBeenCalled();
            expect(auditoriaPagamentoService.logCriacaoPagamento).toHaveBeenCalled();
        });
        it('2. Deve atualizar o status para LIBERADO com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                valor: 500.0,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900',
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            const pagamentoAtualizadoMock = {
                ...pagamentoMock,
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
                updatedAt: new Date(),
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .patch(`/pagamentos/${pagamentoId}/status`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
                observacoes: 'Pagamento liberado após verificação',
            });
            // Verificar resposta
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO);
            // Verificar chamadas de serviços
            expect(auditoriaPagamentoService.logMudancaStatus).toHaveBeenCalled();
            expect(integracaoSolicitacaoService.atualizarStatusSolicitacao).toHaveBeenCalledWith(solicitacaoId, status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO, usuarioId);
        });
        it('3. Deve enviar comprovante com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            };
            const comprovanteMock = {
                id: 'comprovante-teste-id',
                pagamentoId,
                documentoId: 'documento-id',
                nomeArquivo: 'comprovante.pdf',
                tipoArquivo: 'application/pdf',
                tamanhoArquivo: 1024,
                urlDownload: 'http://localhost/documentos/documento-id',
                uploadedBy: usuarioId,
                createdAt: new Date(),
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockComprovanteRepository.create.mockReturnValue(comprovanteMock);
            mockComprovanteRepository.save.mockResolvedValue(comprovanteMock);
            // Criar arquivo de teste
            const buffer = Buffer.from('conteúdo de teste do arquivo');
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/comprovantes`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .attach('arquivo', buffer, 'comprovante.pdf')
                .field('descricao', 'Comprovante de pagamento');
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            expect(response.body.nomeArquivo).toBe('comprovante.pdf');
            // Guardar ID para próximos testes
            comprovanteId = response.body.id;
            // Verificar chamadas de serviços
            expect(integracaoDocumentoService.uploadComprovante).toHaveBeenCalled();
            expect(auditoriaPagamentoService.logUploadComprovante).toHaveBeenCalled();
        });
        it('4. Deve confirmar recebimento com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
                valor: 500.0,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                responsavelLiberacao: usuarioId,
            };
            const pagamentoAtualizadoMock = {
                ...pagamentoMock,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
                responsavelConfirmacao: usuarioId,
                dataConfirmacao: new Date(),
                updatedAt: new Date(),
            };
            const confirmacaoMock = {
                id: 'confirmacao-teste-id',
                pagamentoId,
                dataConfirmacao: new Date(),
                metodoConfirmacao: 'PRESENCIAL',
                registradoPor: usuarioId,
                observacoes: 'Confirmação realizada pelo beneficiário',
                createdAt: new Date(),
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);
            mockConfirmacaoRepository.create.mockReturnValue(confirmacaoMock);
            mockConfirmacaoRepository.save.mockResolvedValue(confirmacaoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post('/pagamentos/confirmar-recebimento')
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                pagamentoId,
                dataConfirmacao: new Date(),
                metodoConfirmacao: 'PRESENCIAL',
                observacoes: 'Confirmação realizada pelo beneficiário',
            });
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            expect(response.body.metodoConfirmacao).toBe('PRESENCIAL');
            // Guardar ID para próximos testes
            confirmacaoId = response.body.id;
            // Verificar chamadas de serviços
            expect(auditoriaPagamentoService.logConfirmacaoRecebimento).toHaveBeenCalled();
        });
        it('5. Deve verificar que o pagamento está com status CONFIRMADO', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO,
                valor: 500.0,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                responsavelLiberacao: usuarioId,
                responsavelConfirmacao: usuarioId,
                dataConfirmacao: new Date(),
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .get(`/pagamentos/${pagamentoId}`)
                .set('Authorization', `Bearer ${mockJwtToken}`);
            // Verificar resposta
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.CONFIRMADO);
            expect(response.body).toHaveProperty('responsavelConfirmacao');
            expect(response.body).toHaveProperty('dataConfirmacao');
        });
    });
    describe('Fluxo de Cancelamento', () => {
        let pagamentoId;
        it('1. Deve criar um novo pagamento para cancelamento', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: 'pagamento-cancelamento-id',
                solicitacaoId,
                valor: 300.0,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900',
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            mockPagamentoRepository.create.mockReturnValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/solicitacao/${solicitacaoId}`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                valor: 300.0,
                dataLiberacao: new Date(),
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900',
                },
            });
            // Verificar resposta
            expect(response.status).toBe(201);
            expect(response.body).toHaveProperty('id');
            // Guardar ID para próximos testes
            pagamentoId = response.body.id;
        });
        it('2. Deve cancelar o pagamento com sucesso', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                valor: 300.0,
                status: status_pagamento_enum_1.StatusPagamentoEnum.AGENDADO,
                metodoPagamento: metodo_pagamento_enum_1.MetodoPagamentoEnum.PIX,
                dataLiberacao: new Date(),
                infoBancariaId,
                dadosBancarios: {
                    pixTipo: 'CPF',
                    pixChave: '12345678900',
                },
                responsavelLiberacao: usuarioId,
                createdAt: new Date(),
                updatedAt: new Date(),
            };
            const pagamentoAtualizadoMock = {
                ...pagamentoMock,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
                observacoes: 'CANCELADO: Dados bancários incorretos',
                updatedAt: new Date(),
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .post(`/pagamentos/${pagamentoId}/cancelar`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                motivo: 'Dados bancários incorretos',
            });
            // Verificar resposta
            expect(response.status).toBe(200);
            expect(response.body.status).toBe(status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO);
            expect(response.body.observacoes).toContain('CANCELADO');
            // Verificar chamadas de serviços
            expect(auditoriaPagamentoService.logCancelamentoPagamento).toHaveBeenCalled();
            expect(integracaoSolicitacaoService.atualizarStatusSolicitacao).toHaveBeenCalledWith(solicitacaoId, status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO, usuarioId);
        });
        it('3. Não deve permitir atualizar status de um pagamento cancelado', async () => {
            // Configurar mocks
            const pagamentoMock = {
                id: pagamentoId,
                solicitacaoId,
                status: status_pagamento_enum_1.StatusPagamentoEnum.CANCELADO,
                observacoes: 'CANCELADO: Dados bancários incorretos',
            };
            mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);
            // Executar requisição
            const response = await request(app.getHttpServer())
                .patch(`/pagamentos/${pagamentoId}/status`)
                .set('Authorization', `Bearer ${mockJwtToken}`)
                .send({
                status: status_pagamento_enum_1.StatusPagamentoEnum.LIBERADO,
            });
            // Verificar resposta
            expect(response.status).toBe(409); // Conflict
            expect(response.body).toHaveProperty('message');
            expect(response.body.message).toContain('não é possível');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,