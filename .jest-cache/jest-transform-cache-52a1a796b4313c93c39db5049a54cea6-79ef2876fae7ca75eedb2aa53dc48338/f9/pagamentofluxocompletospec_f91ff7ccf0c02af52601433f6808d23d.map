{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\pagamento-fluxo-completo.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\integration\\pagamento-fluxo-completo.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { HttpModule } from '@nestjs/axios';\n\nimport { PagamentoModule } from '../../pagamento.module';\nimport {\n  Pagamento,\n  ComprovantePagamento,\n  ConfirmacaoRecebimento,\n} from '../../../entities';\nimport { StatusPagamentoEnum } from '../../enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../enums/metodo-pagamento.enum';\nimport { PagamentoService } from '../../services/pagamento.service';\nimport { IntegracaoSolicitacaoService } from '../../services/integracao-solicitacao.service';\nimport { IntegracaoCidadaoService } from '../../services/integracao-cidadao.service';\nimport { IntegracaoDocumentoService } from '../../services/integracao-documento.service';\nimport { AuditoriaPagamentoService } from '../../services/auditoria-pagamento.service';\n\n/**\n * Testes de integração para o fluxo completo de pagamento\n *\n * Verifica o funcionamento correto do fluxo completo de pagamento,\n * desde a criação até a confirmação de recebimento.\n *\n * @author Equipe PGBen\n */\ndescribe('Fluxo Completo de Pagamento (Integration)', () => {\n  let app: INestApplication;\n  let pagamentoService: PagamentoService;\n  let integracaoSolicitacaoService: IntegracaoSolicitacaoService;\n  let integracaoCidadaoService: IntegracaoCidadaoService;\n  let integracaoDocumentoService: IntegracaoDocumentoService;\n  let auditoriaPagamentoService: AuditoriaPagamentoService;\n  let pagamentoRepository: Repository<Pagamento>;\n  let comprovanteRepository: Repository<ComprovantePagamento>;\n  let confirmacaoRepository: Repository<ConfirmacaoRecebimento>;\n\n  // Dados de teste\n  const usuarioId = 'usuario-teste-id';\n  const solicitacaoId = 'solicitacao-teste-id';\n  const cidadaoId = 'cidadao-teste-id';\n  const infoBancariaId = 'info-bancaria-teste-id';\n\n  // Mock do token JWT para autenticação\n  const mockJwtToken =\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3VhcmlvLXRlc3RlLWlkIiwibmFtZSI6IlVzdcOhcmlvIFRlc3RlIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c';\n\n  // Mock dos serviços externos\n  const mockIntegracaoSolicitacaoService = {\n    verificarStatusSolicitacao: jest\n      .fn()\n      .mockResolvedValue('PAGAMENTO_PENDENTE'),\n    verificarSolicitacaoElegivel: jest.fn().mockResolvedValue(true),\n    atualizarStatusSolicitacao: jest.fn().mockResolvedValue(true),\n    obterDetalhesSolicitacao: jest.fn().mockResolvedValue({\n      id: solicitacaoId,\n      cidadaoId: cidadaoId,\n      valorAprovado: 500.0,\n      status: 'PAGAMENTO_PENDENTE',\n      beneficio: {\n        id: 'beneficio-id',\n        nome: 'Auxílio Moradia',\n      },\n      unidade: {\n        id: 'unidade-id',\n        nome: 'CRAS Centro',\n      },\n    }),\n  };\n\n  const mockIntegracaoCidadaoService = {\n    obterDadosCidadao: jest.fn().mockResolvedValue({\n      id: cidadaoId,\n      nome: 'João da Silva',\n      cpf: '12345678900',\n    }),\n    obterDadosBancarios: jest.fn().mockResolvedValue([\n      {\n        id: infoBancariaId,\n        tipo: 'PIX',\n        pixTipo: 'CPF',\n        pixChave: '12345678900',\n        principal: true,\n      },\n    ]),\n    obterDadosBancariosPorId: jest.fn().mockResolvedValue({\n      id: infoBancariaId,\n      tipo: 'PIX',\n      pixTipo: 'CPF',\n      pixChave: '12345678900',\n      principal: true,\n    }),\n    validarDadosBancarios: jest.fn().mockResolvedValue(true),\n  };\n\n  const mockIntegracaoDocumentoService = {\n    uploadComprovante: jest.fn().mockResolvedValue({\n      id: 'documento-id',\n      nome: 'comprovante.pdf',\n      tamanho: 1024,\n      tipo: 'application/pdf',\n      url: 'http://localhost/documentos/documento-id',\n    }),\n    obterComprovante: jest.fn().mockResolvedValue({\n      id: 'documento-id',\n      nome: 'comprovante.pdf',\n      tamanho: 1024,\n      tipo: 'application/pdf',\n      url: 'http://localhost/documentos/documento-id',\n    }),\n    listarComprovantes: jest.fn().mockResolvedValue([\n      {\n        id: 'documento-id',\n        nome: 'comprovante.pdf',\n        tamanho: 1024,\n        tipo: 'application/pdf',\n        url: 'http://localhost/documentos/documento-id',\n      },\n    ]),\n    removerComprovante: jest.fn().mockResolvedValue(undefined),\n  };\n\n  const mockAuditoriaPagamentoService = {\n    logCriacaoPagamento: jest.fn(),\n    logMudancaStatus: jest.fn(),\n    logCancelamentoPagamento: jest.fn(),\n    logUploadComprovante: jest.fn(),\n    logRemocaoComprovante: jest.fn(),\n    logConfirmacaoRecebimento: jest.fn(),\n    logErroProcessamento: jest.fn(),\n  };\n\n  // Mock dos repositórios\n  const mockPagamentoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n  };\n\n  const mockComprovanteRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n    delete: jest.fn(),\n  };\n\n  const mockConfirmacaoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    find: jest.fn(),\n    findAndCount: jest.fn(),\n  };\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [\n        PagamentoModule,\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          useFactory: async (configService: ConfigService) => ({\n            secret: configService.get<string>('JWT_SECRET') || 'test-secret',\n            signOptions: { expiresIn: '1h' },\n          }),\n          inject: [ConfigService],\n        }),\n        HttpModule,\n      ],\n      providers: [\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: mockPagamentoRepository,\n        },\n        {\n          provide: getRepositoryToken(ComprovantePagamento),\n          useValue: mockComprovanteRepository,\n        },\n        {\n          provide: getRepositoryToken(ConfirmacaoRecebimento),\n          useValue: mockConfirmacaoRepository,\n        },\n      ],\n    })\n      .overrideProvider(IntegracaoSolicitacaoService)\n      .useValue(mockIntegracaoSolicitacaoService)\n      .overrideProvider(IntegracaoCidadaoService)\n      .useValue(mockIntegracaoCidadaoService)\n      .overrideProvider(IntegracaoDocumentoService)\n      .useValue(mockIntegracaoDocumentoService)\n      .overrideProvider(AuditoriaPagamentoService)\n      .useValue(mockAuditoriaPagamentoService)\n      .compile();\n\n    app = moduleFixture.createNestApplication();\n\n    pagamentoService = moduleFixture.get<PagamentoService>(PagamentoService);\n    integracaoSolicitacaoService =\n      moduleFixture.get<IntegracaoSolicitacaoService>(\n        IntegracaoSolicitacaoService,\n      );\n    integracaoCidadaoService = moduleFixture.get<IntegracaoCidadaoService>(\n      IntegracaoCidadaoService,\n    );\n    integracaoDocumentoService = moduleFixture.get<IntegracaoDocumentoService>(\n      IntegracaoDocumentoService,\n    );\n    auditoriaPagamentoService = moduleFixture.get<AuditoriaPagamentoService>(\n      AuditoriaPagamentoService,\n    );\n\n    pagamentoRepository = moduleFixture.get<Repository<Pagamento>>(\n      getRepositoryToken(Pagamento),\n    );\n    comprovanteRepository = moduleFixture.get<Repository<ComprovantePagamento>>(\n      getRepositoryToken(ComprovantePagamento),\n    );\n    confirmacaoRepository = moduleFixture.get<\n      Repository<ConfirmacaoRecebimento>\n    >(getRepositoryToken(ConfirmacaoRecebimento));\n\n    await app.init();\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Fluxo Completo: Criar → Liberar → Enviar Comprovante → Confirmar', () => {\n    let pagamentoId: string;\n    let comprovanteId: string;\n    let confirmacaoId: string;\n\n    it('1. Deve criar um novo pagamento com sucesso', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: 'pagamento-teste-id',\n        solicitacaoId,\n        valor: 500.0,\n        status: StatusPagamentoEnum.AGENDADO,\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        dataLiberacao: new Date(),\n        infoBancariaId,\n        dadosBancarios: {\n          pixTipo: 'CPF',\n          pixChave: '12345678900',\n        },\n        responsavelLiberacao: usuarioId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPagamentoRepository.create.mockReturnValue(pagamentoMock);\n      mockPagamentoRepository.save.mockResolvedValue(pagamentoMock);\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/solicitacao/${solicitacaoId}`)\n        .set('Authorization', `Bearer ${mockJwtToken}`)\n        .send({\n          valor: 500.0,\n          dataLiberacao: new Date(),\n          metodoPagamento: MetodoPagamentoEnum.PIX,\n          infoBancariaId,\n          dadosBancarios: {\n            pixTipo: 'CPF',\n            pixChave: '12345678900',\n          },\n        });\n\n      // Verificar resposta\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.status).toBe(StatusPagamentoEnum.AGENDADO);\n\n      // Guardar ID para próximos testes\n      pagamentoId = response.body.id;\n\n      // Verificar chamadas de serviços\n      expect(\n        integracaoSolicitacaoService.verificarSolicitacaoElegivel,\n      ).toHaveBeenCalledWith(solicitacaoId);\n      expect(integracaoCidadaoService.validarDadosBancarios).toHaveBeenCalled();\n      expect(auditoriaPagamentoService.logCriacaoPagamento).toHaveBeenCalled();\n    });\n\n    it('2. Deve atualizar o status para LIBERADO com sucesso', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        solicitacaoId,\n        valor: 500.0,\n        status: StatusPagamentoEnum.AGENDADO,\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        dataLiberacao: new Date(),\n        infoBancariaId,\n        dadosBancarios: {\n          pixTipo: 'CPF',\n          pixChave: '12345678900',\n        },\n        responsavelLiberacao: usuarioId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const pagamentoAtualizadoMock = {\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.LIBERADO,\n        updatedAt: new Date(),\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .patch(`/pagamentos/${pagamentoId}/status`)\n        .set('Authorization', `Bearer ${mockJwtToken}`)\n        .send({\n          status: StatusPagamentoEnum.LIBERADO,\n          observacoes: 'Pagamento liberado após verificação',\n        });\n\n      // Verificar resposta\n      expect(response.status).toBe(200);\n      expect(response.body.status).toBe(StatusPagamentoEnum.LIBERADO);\n\n      // Verificar chamadas de serviços\n      expect(auditoriaPagamentoService.logMudancaStatus).toHaveBeenCalled();\n      expect(\n        integracaoSolicitacaoService.atualizarStatusSolicitacao,\n      ).toHaveBeenCalledWith(\n        solicitacaoId,\n        StatusPagamentoEnum.LIBERADO,\n        usuarioId,\n      );\n    });\n\n    it('3. Deve enviar comprovante com sucesso', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.LIBERADO,\n      };\n\n      const comprovanteMock = {\n        id: 'comprovante-teste-id',\n        pagamentoId,\n        documentoId: 'documento-id',\n        nomeArquivo: 'comprovante.pdf',\n        tipoArquivo: 'application/pdf',\n        tamanhoArquivo: 1024,\n        urlDownload: 'http://localhost/documentos/documento-id',\n        uploadedBy: usuarioId,\n        createdAt: new Date(),\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockComprovanteRepository.create.mockReturnValue(comprovanteMock);\n      mockComprovanteRepository.save.mockResolvedValue(comprovanteMock);\n\n      // Criar arquivo de teste\n      const buffer = Buffer.from('conteúdo de teste do arquivo');\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/comprovantes`)\n        .set('Authorization', `Bearer ${mockJwtToken}`)\n        .attach('arquivo', buffer, 'comprovante.pdf')\n        .field('descricao', 'Comprovante de pagamento');\n\n      // Verificar resposta\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.nomeArquivo).toBe('comprovante.pdf');\n\n      // Guardar ID para próximos testes\n      comprovanteId = response.body.id;\n\n      // Verificar chamadas de serviços\n      expect(integracaoDocumentoService.uploadComprovante).toHaveBeenCalled();\n      expect(auditoriaPagamentoService.logUploadComprovante).toHaveBeenCalled();\n    });\n\n    it('4. Deve confirmar recebimento com sucesso', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.LIBERADO,\n        valor: 500.0,\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        dataLiberacao: new Date(),\n        responsavelLiberacao: usuarioId,\n      };\n\n      const pagamentoAtualizadoMock = {\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.CONFIRMADO,\n        responsavelConfirmacao: usuarioId,\n        dataConfirmacao: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const confirmacaoMock = {\n        id: 'confirmacao-teste-id',\n        pagamentoId,\n        dataConfirmacao: new Date(),\n        metodoConfirmacao: 'PRESENCIAL',\n        registradoPor: usuarioId,\n        observacoes: 'Confirmação realizada pelo beneficiário',\n        createdAt: new Date(),\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);\n      mockConfirmacaoRepository.create.mockReturnValue(confirmacaoMock);\n      mockConfirmacaoRepository.save.mockResolvedValue(confirmacaoMock);\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .post('/pagamentos/confirmar-recebimento')\n        .set('Authorization', `Bearer ${mockJwtToken}`)\n        .send({\n          pagamentoId,\n          dataConfirmacao: new Date(),\n          metodoConfirmacao: 'PRESENCIAL',\n          observacoes: 'Confirmação realizada pelo beneficiário',\n        });\n\n      // Verificar resposta\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n      expect(response.body.metodoConfirmacao).toBe('PRESENCIAL');\n\n      // Guardar ID para próximos testes\n      confirmacaoId = response.body.id;\n\n      // Verificar chamadas de serviços\n      expect(\n        auditoriaPagamentoService.logConfirmacaoRecebimento,\n      ).toHaveBeenCalled();\n    });\n\n    it('5. Deve verificar que o pagamento está com status CONFIRMADO', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.CONFIRMADO,\n        valor: 500.0,\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        dataLiberacao: new Date(),\n        responsavelLiberacao: usuarioId,\n        responsavelConfirmacao: usuarioId,\n        dataConfirmacao: new Date(),\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .get(`/pagamentos/${pagamentoId}`)\n        .set('Authorization', `Bearer ${mockJwtToken}`);\n\n      // Verificar resposta\n      expect(response.status).toBe(200);\n      expect(response.body.status).toBe(StatusPagamentoEnum.CONFIRMADO);\n      expect(response.body).toHaveProperty('responsavelConfirmacao');\n      expect(response.body).toHaveProperty('dataConfirmacao');\n    });\n  });\n\n  describe('Fluxo de Cancelamento', () => {\n    let pagamentoId: string;\n\n    it('1. Deve criar um novo pagamento para cancelamento', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: 'pagamento-cancelamento-id',\n        solicitacaoId,\n        valor: 300.0,\n        status: StatusPagamentoEnum.AGENDADO,\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        dataLiberacao: new Date(),\n        infoBancariaId,\n        dadosBancarios: {\n          pixTipo: 'CPF',\n          pixChave: '12345678900',\n        },\n        responsavelLiberacao: usuarioId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      mockPagamentoRepository.create.mockReturnValue(pagamentoMock);\n      mockPagamentoRepository.save.mockResolvedValue(pagamentoMock);\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/solicitacao/${solicitacaoId}`)\n        .set('Authorization', `Bearer ${mockJwtToken}`)\n        .send({\n          valor: 300.0,\n          dataLiberacao: new Date(),\n          metodoPagamento: MetodoPagamentoEnum.PIX,\n          infoBancariaId,\n          dadosBancarios: {\n            pixTipo: 'CPF',\n            pixChave: '12345678900',\n          },\n        });\n\n      // Verificar resposta\n      expect(response.status).toBe(201);\n      expect(response.body).toHaveProperty('id');\n\n      // Guardar ID para próximos testes\n      pagamentoId = response.body.id;\n    });\n\n    it('2. Deve cancelar o pagamento com sucesso', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        solicitacaoId,\n        valor: 300.0,\n        status: StatusPagamentoEnum.AGENDADO,\n        metodoPagamento: MetodoPagamentoEnum.PIX,\n        dataLiberacao: new Date(),\n        infoBancariaId,\n        dadosBancarios: {\n          pixTipo: 'CPF',\n          pixChave: '12345678900',\n        },\n        responsavelLiberacao: usuarioId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const pagamentoAtualizadoMock = {\n        ...pagamentoMock,\n        status: StatusPagamentoEnum.CANCELADO,\n        observacoes: 'CANCELADO: Dados bancários incorretos',\n        updatedAt: new Date(),\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n      mockPagamentoRepository.save.mockResolvedValue(pagamentoAtualizadoMock);\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .post(`/pagamentos/${pagamentoId}/cancelar`)\n        .set('Authorization', `Bearer ${mockJwtToken}`)\n        .send({\n          motivo: 'Dados bancários incorretos',\n        });\n\n      // Verificar resposta\n      expect(response.status).toBe(200);\n      expect(response.body.status).toBe(StatusPagamentoEnum.CANCELADO);\n      expect(response.body.observacoes).toContain('CANCELADO');\n\n      // Verificar chamadas de serviços\n      expect(\n        auditoriaPagamentoService.logCancelamentoPagamento,\n      ).toHaveBeenCalled();\n      expect(\n        integracaoSolicitacaoService.atualizarStatusSolicitacao,\n      ).toHaveBeenCalledWith(\n        solicitacaoId,\n        StatusPagamentoEnum.CANCELADO,\n        usuarioId,\n      );\n    });\n\n    it('3. Não deve permitir atualizar status de um pagamento cancelado', async () => {\n      // Configurar mocks\n      const pagamentoMock = {\n        id: pagamentoId,\n        solicitacaoId,\n        status: StatusPagamentoEnum.CANCELADO,\n        observacoes: 'CANCELADO: Dados bancários incorretos',\n      };\n\n      mockPagamentoRepository.findOne.mockResolvedValue(pagamentoMock);\n\n      // Executar requisição\n      const response = await request(app.getHttpServer())\n        .patch(`/pagamentos/${pagamentoId}/status`)\n        .set('Authorization', `Bearer ${mockJwtToken}`)\n        .send({\n          status: StatusPagamentoEnum.LIBERADO,\n        });\n\n      // Verificar resposta\n      expect(response.status).toBe(409); // Conflict\n      expect(response.body).toHaveProperty('message');\n      expect(response.body.message).toContain('não é possível');\n    });\n  });\n});\n"],"version":3}