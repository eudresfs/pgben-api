{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\repositories\\usuario.repository.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\repositories\\usuario.repository.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository, DeepPartial, DataSource } from 'typeorm';\nimport { UsuarioRepository } from './usuario.repository';\nimport { Usuario } from '../../../entities/usuario.entity';\nimport { CreateUsuarioDto } from '../dto/create-usuario.dto';\nimport { UpdateUsuarioDto } from '../dto/update-usuario.dto';\nimport { UsuarioError } from '../../../errors/usuario.errors';\n\n/**\n * Testes unitários para o UsuarioRepository\n *\n * Cobertura de testes:\n * - Criação de usuários\n * - Busca por ID, email, CPF\n * - Listagem com filtros e paginação\n * - Atualização de dados\n * - Atualização de status\n * - Atualização de senha\n * - Soft delete\n * - Contagem de registros\n */\ndescribe('UsuarioRepository', () => {\n  let repository: UsuarioRepository;\n  let typeormRepository: jest.Mocked<Repository<Usuario>>;\n\n  const mockRole = {\n    id: 'role-id',\n    nome: 'ASSISTENTE_SOCIAL',\n    descricao: 'Assistente Social',\n    ativo: true,\n    usuarios: [],\n    created_at: new Date(),\n    updated_at: new Date(),\n  };\n\n  const mockUnidade = {\n    id: 'unidade-123',\n    nome: 'Unidade Teste',\n    endereco: 'Endereço Teste',\n    telefone: '(84) 99999-9999',\n    email: 'unidade@test.com',\n    ativo: true,\n    setores: [],\n    usuarios: [],\n    created_at: new Date(),\n    updated_at: new Date(),\n  };\n\n  const mockSetor = {\n    id: 'setor-123',\n    nome: 'Setor Teste',\n    descricao: 'Descrição do Setor',\n    ativo: true,\n    unidade: mockUnidade,\n    unidadeId: 'unidade-123',\n    usuarios: [],\n    created_at: new Date(),\n    updated_at: new Date(),\n  };\n\n  const mockUsuario: Usuario = {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    nome: 'João da Silva',\n    email: 'joao.silva@semtas.natal.gov.br',\n    cpf: '123.456.789-00',\n    telefone: '(84) 99999-9999',\n    matricula: '12345',\n    senhaHash: '$2b$12$hashedpassword',\n    role: mockRole,\n    role_id: 'role-id',\n    status: 'ativo',\n    primeiro_acesso: false,\n    tentativas_login: 0,\n    ultimo_login: new Date(),\n    unidadeId: 'unidade-123',\n    setorId: 'setor-123',\n    created_at: new Date(),\n    updated_at: new Date(),\n    removed_at: null,\n    unidade: mockUnidade,\n    setor: mockSetor,\n    refreshTokens: [],\n    solicitacoes: [],\n    auditoriasCreated: [],\n    auditoriasUpdated: [],\n  } as any;\n\n  beforeEach(async () => {\n    const mockTypeormRepository = {\n      create: jest.fn(),\n      save: jest.fn(),\n      findOne: jest.fn(),\n      findAndCount: jest.fn(),\n      update: jest.fn(),\n      softDelete: jest.fn(),\n      createQueryBuilder: jest.fn(),\n      count: jest.fn(),\n    };\n\n    const mockDataSource = {\n      getRepository: jest.fn().mockReturnValue(mockTypeormRepository),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UsuarioRepository,\n        {\n          provide: getRepositoryToken(Usuario),\n          useValue: mockTypeormRepository,\n        },\n        {\n          provide: DataSource,\n          useValue: mockDataSource,\n        },\n      ],\n    }).compile();\n\n    repository = module.get<UsuarioRepository>(UsuarioRepository);\n    typeormRepository = module.get(getRepositoryToken(Usuario));\n  });\n\n  describe('create', () => {\n    it('deve criar um novo usuário', async () => {\n      const createDto: CreateUsuarioDto = {\n        nome: 'João da Silva',\n        email: 'joao.silva@semtas.natal.gov.br',\n        senha: 'Senha@123',\n        cpf: '123.456.789-00',\n        telefone: '(84) 99999-9999',\n        matricula: '12345',\n        role_id: 'role-id',\n        unidade_id: 'unidade-123',\n        setor_id: 'setor-123',\n      };\n\n      typeormRepository.create.mockReturnValue(mockUsuario as any);\n      typeormRepository.save.mockResolvedValue(mockUsuario);\n\n      const result = await repository.create(createDto);\n\n      expect(typeormRepository.create).toHaveBeenCalledWith(createDto);\n      expect(typeormRepository.save).toHaveBeenCalledWith(mockUsuario);\n      expect(result).toEqual(mockUsuario);\n    });\n  });\n\n  describe('findById', () => {\n    it('deve retornar usuário por ID', async () => {\n      typeormRepository.findOne.mockResolvedValue(mockUsuario);\n\n      const result = await repository.findById(\n        '123e4567-e89b-12d3-a456-426614174000',\n      );\n\n      expect(typeormRepository.findOne).toHaveBeenCalledWith({\n        where: { id: '123e4567-e89b-12d3-a456-426614174000' },\n        relations: ['unidade', 'setor'],\n      });\n      expect(result).toEqual(mockUsuario);\n    });\n\n    it('deve lançar UsuarioError quando usuário não encontrado', async () => {\n      typeormRepository.findOne.mockResolvedValue(null);\n\n      await expect(repository.findById('id-inexistente')).rejects.toThrow(\n        UsuarioError,\n      );\n    });\n  });\n\n  describe('findByEmail', () => {\n    it('deve retornar usuário por email', async () => {\n      typeormRepository.findOne.mockResolvedValue(mockUsuario);\n\n      const result = await repository.findByEmail(\n        'joao.silva@semtas.natal.gov.br',\n      );\n\n      expect(typeormRepository.findOne).toHaveBeenCalledWith({\n        where: { email: 'joao.silva@semtas.natal.gov.br' },\n      });\n      expect(result).toEqual(mockUsuario);\n    });\n\n    it('deve retornar null quando email não encontrado', async () => {\n      typeormRepository.findOne.mockResolvedValue(null);\n\n      const result = await repository.findByEmail('email@inexistente.com');\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('findByCpf', () => {\n    it('deve retornar usuário por CPF', async () => {\n      typeormRepository.findOne.mockResolvedValue(mockUsuario);\n\n      const result = await repository.findByCpf('123.456.789-00');\n\n      expect(typeormRepository.findOne).toHaveBeenCalledWith({\n        where: { cpf: '123.456.789-00' },\n      });\n      expect(result).toEqual(mockUsuario);\n    });\n  });\n\n  describe('findAll', () => {\n    it('deve retornar lista paginada de usuários', async () => {\n      typeormRepository.findAndCount.mockResolvedValue([[mockUsuario], 1]);\n\n      const options = {\n        skip: 0,\n        take: 10,\n        where: {\n          nome: 'João',\n          role_id: 'role-id',\n          status: 'ativo',\n          unidadeId: 'unidade-123',\n        },\n      };\n\n      const result = await repository.findAll(options);\n\n      expect(result).toEqual([[mockUsuario], 1]);\n      expect(typeormRepository.findAndCount).toHaveBeenCalledWith({\n        skip: 0,\n        take: 10,\n        where: {\n          nome: 'João',\n          role_id: 'role-id',\n          status: 'ativo',\n          unidadeId: 'unidade-123',\n        },\n        order: { created_at: 'DESC' },\n      });\n    });\n\n    it('deve aplicar filtros corretamente', async () => {\n      typeormRepository.findAndCount.mockResolvedValue([[mockUsuario], 1]);\n\n      const options = {\n        where: {\n          search: 'João',\n          role: 'ASSISTENTE_SOCIAL',\n          status: 'ativo',\n          unidadeId: 'unidade-123',\n        },\n      };\n\n      const result = await repository.findAll(options);\n\n      expect(typeormRepository.findAndCount).toHaveBeenCalledWith({\n        skip: 0,\n        take: 10,\n        where: {\n          search: 'João',\n          role: 'ASSISTENTE_SOCIAL',\n          status: 'ativo',\n          unidadeId: 'unidade-123',\n        },\n        order: { created_at: 'DESC' },\n      });\n      expect(result).toEqual([[mockUsuario], 1]);\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar usuário', async () => {\n      const updateDto: UpdateUsuarioDto = {\n        nome: 'João Silva Santos',\n        cpf: '123.456.789-00',\n        telefone: '(84) 88888-8888',\n      };\n      const usuarioAtualizado = { ...mockUsuario, ...updateDto };\n\n      typeormRepository.update.mockResolvedValue({ affected: 1 } as any);\n      typeormRepository.findOne.mockResolvedValue(usuarioAtualizado);\n\n      const result = await repository.update(\n        '123e4567-e89b-12d3-a456-426614174000',\n        updateDto,\n      );\n\n      expect(typeormRepository.update).toHaveBeenCalledWith(\n        '123e4567-e89b-12d3-a456-426614174000',\n        updateDto,\n      );\n      expect(result).toEqual(usuarioAtualizado);\n    });\n\n    it('deve lançar UsuarioError quando usuário não encontrado para atualização', async () => {\n      typeormRepository.update.mockResolvedValue({ affected: 0 } as any);\n\n      await expect(\n        repository.update('id-inexistente', { nome: 'Novo Nome' }),\n      ).rejects.toThrow(UsuarioError);\n    });\n  });\n\n  describe('updateStatus', () => {\n    it('deve atualizar status do usuário', async () => {\n      const updateData: DeepPartial<Usuario> = {\n        status: 'inativo',\n      };\n      const usuarioAtualizado = { ...mockUsuario, status: 'inativo' };\n\n      typeormRepository.update.mockResolvedValue({ affected: 1 } as any);\n      typeormRepository.findOne.mockResolvedValue(usuarioAtualizado);\n\n      const result = await repository.updateStatus(\n        '123e4567-e89b-12d3-a456-426614174000',\n        'inativo',\n      );\n\n      expect(typeormRepository.update).toHaveBeenCalledWith(\n        '123e4567-e89b-12d3-a456-426614174000',\n        updateData,\n      );\n      expect(result).toEqual(usuarioAtualizado);\n    });\n  });\n\n  describe('updateSenha', () => {\n    it('deve atualizar senha do usuário', async () => {\n      const updateData: DeepPartial<Usuario> = {\n        senhaHash: 'novaSenhaHash',\n        primeiro_acesso: false,\n      };\n      const usuarioAtualizado = { ...mockUsuario, senhaHash: 'novaSenhaHash' };\n\n      typeormRepository.update.mockResolvedValue({ affected: 1 } as any);\n      typeormRepository.findOne.mockResolvedValue(usuarioAtualizado);\n\n      const result = await repository.updateSenha(\n        '123e4567-e89b-12d3-a456-426614174000',\n        'novaSenhaHash',\n      );\n\n      expect(typeormRepository.update).toHaveBeenCalledWith(\n        '123e4567-e89b-12d3-a456-426614174000',\n        updateData,\n      );\n      expect(result).toEqual(usuarioAtualizado);\n    });\n  });\n\n  describe('remove', () => {\n    it('deve fazer soft delete do usuário', async () => {\n      typeormRepository.softDelete.mockResolvedValue({ affected: 1 } as any);\n\n      await repository.remove('123e4567-e89b-12d3-a456-426614174000');\n\n      expect(typeormRepository.softDelete).toHaveBeenCalledWith(\n        '123e4567-e89b-12d3-a456-426614174000',\n      );\n    });\n\n    it('deve lançar UsuarioError quando usuário não encontrado para remoção', async () => {\n      typeormRepository.softDelete.mockResolvedValue({ affected: 0 } as any);\n\n      await expect(repository.remove('id-inexistente')).rejects.toThrow(\n        UsuarioError,\n      );\n    });\n  });\n\n  describe('count', () => {\n    it('deve retornar contagem de usuários', async () => {\n      typeormRepository.count.mockResolvedValue(5);\n\n      const result = await repository.count();\n\n      expect(result).toBe(5);\n      expect(typeormRepository.count).toHaveBeenCalledWith({\n        where: undefined,\n      });\n    });\n\n    it('deve retornar contagem de usuários com filtro', async () => {\n      const whereCondition = { status: 'ativo' };\n      typeormRepository.count.mockResolvedValue(3);\n\n      const result = await repository.count(whereCondition);\n\n      expect(result).toBe(3);\n      expect(typeormRepository.count).toHaveBeenCalledWith({\n        where: whereCondition,\n      });\n    });\n  });\n\n  it('deve estar definido', () => {\n    expect(repository).toBeDefined();\n  });\n});\n"],"version":3}