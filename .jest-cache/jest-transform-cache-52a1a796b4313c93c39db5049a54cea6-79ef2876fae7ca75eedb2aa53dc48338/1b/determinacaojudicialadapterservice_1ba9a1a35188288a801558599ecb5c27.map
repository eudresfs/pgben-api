{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\determinacao-judicial-adapter.service.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,iIAA2H;AAK3H;;;;;;;;;;;;GAYG;AAEI,IAAM,kCAAkC,0CAAxC,MAAM,kCAAkC;IAI1B;IAHF,MAAM,GAAG,IAAI,eAAM,CAAC,oCAAkC,CAAC,IAAI,CAAC,CAAC;IAE9E,YACmB,8BAAsE;QAAtE,mCAA8B,GAA9B,8BAA8B,CAAwC;IACtF,CAAC;IAEJ;;;;;;OAMG;IACH,KAAK,CAAC,MAAM,CACV,qBAA+D,EAC/D,SAAiB;QAEjB,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,kDAAkD,qBAAqB,CAAC,cAAc,EAAE,CACzF,CAAC;QAEF,OAAO,IAAI,CAAC,8BAA8B,CAAC,oBAAoB,CAC7D,qBAAqB,EACrB,SAAS,CACV,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,mBAAmB,CACvB,aAAqB;QAErB,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,qDAAqD,aAAa,EAAE,CACrE,CAAC;QAEF,OAAO,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAC5D,aAAa,CACd,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,MAAM,CACV,EAAU,EACV,qBAA+D;QAE/D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,qCAAqC,EAAE,EAAE,CAAC,CAAC;QAE3D,OAAO,IAAI,CAAC,8BAA8B,CAAC,oBAAoB,CAC7D,EAAE,EACF,qBAAqB,CACtB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,oBAAoB,CACxB,EAAU,EACV,WAAoB;QAEpB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,oDAAoD,EAAE,EAAE,CAAC,CAAC;QAE1E,OAAO,IAAI,CAAC,8BAA8B,CAAC,oBAAoB,CAC7D,EAAE,EACF,WAAW,CACZ,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,mCAAmC,EAAE,EAAE,CAAC,CAAC;QAEzD,OAAO,IAAI,CAAC,8BAA8B,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,2CAA2C;IAC3C,6BAA6B;IAC7B,2CAA2C;IAE3C;;;;;;OAMG;IACH,KAAK,CAAC,iBAAiB,CACrB,aAAqB;QAErB,OAAO,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,kBAAkB,CACtB,EAAU,EACV,WAAoB;QAEpB,OAAO,IAAI,CAAC,oBAAoB,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;IACpD,CAAC;CACF,CAAA;AAzIY,gFAAkC;6CAAlC,kCAAkC;IAD9C,IAAA,mBAAU,GAAE;yDAKwC,kFAAsC,oBAAtC,kFAAsC;GAJ9E,kCAAkC,CAyI9C","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\determinacao-judicial-adapter.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { DeterminacaoJudicialConsolidadoService } from '../../judicial/services/determinacao-judicial-consolidado.service';\nimport { DeterminacaoJudicial } from '../../../entities/determinacao-judicial.entity';\nimport { SolicitacaoCreateDeterminacaoJudicialDto } from '../dto/create-determinacao-judicial.dto';\nimport { SolicitacaoUpdateDeterminacaoJudicialDto } from '../dto/update-determinacao-judicial.dto';\n\n/**\n * Adaptador para o serviço de determinação judicial no contexto de solicitações\n *\n * Este serviço atua como uma camada de adaptação entre o módulo de solicitação\n * e o serviço consolidado de determinação judicial, mantendo a interface\n * específica do contexto de solicitações.\n *\n * Responsabilidades:\n * - Adaptar chamadas do contexto de solicitação para o serviço consolidado\n * - Manter compatibilidade com a interface existente\n * - Fornecer métodos específicos para o contexto de solicitações\n * - Centralizar logs e tratamento de erros específicos do contexto\n */\n@Injectable()\nexport class DeterminacaoJudicialAdapterService {\n  private readonly logger = new Logger(DeterminacaoJudicialAdapterService.name);\n\n  constructor(\n    private readonly determinacaoConsolidadoService: DeterminacaoJudicialConsolidadoService,\n  ) {}\n\n  /**\n   * Cria uma nova determinação judicial para uma solicitação\n   *\n   * @param createDeterminacaoDto Dados da determinação judicial\n   * @param usuarioId ID do usuário que está criando a determinação\n   * @returns Determinação judicial criada\n   */\n  async create(\n    createDeterminacaoDto: SolicitacaoCreateDeterminacaoJudicialDto,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    this.logger.log(\n      `Criando determinação judicial para solicitação ${createDeterminacaoDto.solicitacao_id}`,\n    );\n\n    return this.determinacaoConsolidadoService.createForSolicitacao(\n      createDeterminacaoDto,\n      usuarioId,\n    );\n  }\n\n  /**\n   * Busca uma determinação judicial pelo ID\n   *\n   * @param id ID da determinação judicial\n   * @returns Determinação judicial encontrada\n   */\n  async findById(id: string): Promise<DeterminacaoJudicial> {\n    return this.determinacaoConsolidadoService.findById(id, ['solicitacao']);\n  }\n\n  /**\n   * Busca todas as determinações judiciais de uma solicitação\n   *\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de determinações judiciais\n   */\n  async findBySolicitacaoId(\n    solicitacaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    this.logger.log(\n      `Buscando determinações judiciais para solicitação ${solicitacaoId}`,\n    );\n\n    return this.determinacaoConsolidadoService.findBySolicitacaoId(\n      solicitacaoId,\n    );\n  }\n\n  /**\n   * Atualiza uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @param updateDeterminacaoDto Dados para atualização\n   * @returns Determinação judicial atualizada\n   */\n  async update(\n    id: string,\n    updateDeterminacaoDto: SolicitacaoUpdateDeterminacaoJudicialDto,\n  ): Promise<DeterminacaoJudicial> {\n    this.logger.log(`Atualizando determinação judicial ${id}`);\n\n    return this.determinacaoConsolidadoService.updateForSolicitacao(\n      id,\n      updateDeterminacaoDto,\n    );\n  }\n\n  /**\n   * Registra o cumprimento de uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @param observacoes Observações sobre o cumprimento\n   * @returns Determinação judicial atualizada\n   */\n  async registrarCumprimento(\n    id: string,\n    observacoes?: string,\n  ): Promise<DeterminacaoJudicial> {\n    this.logger.log(`Registrando cumprimento da determinação judicial ${id}`);\n\n    return this.determinacaoConsolidadoService.registrarCumprimento(\n      id,\n      observacoes,\n    );\n  }\n\n  /**\n   * Remove uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @returns Void\n   */\n  async remove(id: string): Promise<void> {\n    this.logger.log(`Removendo determinação judicial ${id}`);\n\n    return this.determinacaoConsolidadoService.removeFromSolicitacao(id);\n  }\n\n  // ========================================\n  // MÉTODOS DE COMPATIBILIDADE\n  // ========================================\n\n  /**\n   * Busca determinações por solicitação (alias para findBySolicitacaoId)\n   * Mantém compatibilidade com interface existente\n   *\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de determinações judiciais\n   */\n  async findBySolicitacao(\n    solicitacaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.findBySolicitacaoId(solicitacaoId);\n  }\n\n  /**\n   * Marca determinação como cumprida (alias para registrarCumprimento)\n   * Mantém compatibilidade com interface existente\n   *\n   * @param id ID da determinação judicial\n   * @param observacoes Observações sobre o cumprimento\n   * @returns Determinação judicial atualizada\n   */\n  async marcarComoCumprida(\n    id: string,\n    observacoes?: string,\n  ): Promise<DeterminacaoJudicial> {\n    return this.registrarCumprimento(id, observacoes);\n  }\n}\n"],"version":3}