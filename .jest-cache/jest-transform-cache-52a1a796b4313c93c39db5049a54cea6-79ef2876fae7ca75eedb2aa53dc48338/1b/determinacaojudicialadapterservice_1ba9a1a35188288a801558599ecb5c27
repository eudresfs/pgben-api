5664cd8d7b491d07c0380082eab87833
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DeterminacaoJudicialAdapterService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeterminacaoJudicialAdapterService = void 0;
const common_1 = require("@nestjs/common");
const determinacao_judicial_consolidado_service_1 = require("../../judicial/services/determinacao-judicial-consolidado.service");
/**
 * Adaptador para o serviço de determinação judicial no contexto de solicitações
 *
 * Este serviço atua como uma camada de adaptação entre o módulo de solicitação
 * e o serviço consolidado de determinação judicial, mantendo a interface
 * específica do contexto de solicitações.
 *
 * Responsabilidades:
 * - Adaptar chamadas do contexto de solicitação para o serviço consolidado
 * - Manter compatibilidade com a interface existente
 * - Fornecer métodos específicos para o contexto de solicitações
 * - Centralizar logs e tratamento de erros específicos do contexto
 */
let DeterminacaoJudicialAdapterService = DeterminacaoJudicialAdapterService_1 = class DeterminacaoJudicialAdapterService {
    determinacaoConsolidadoService;
    logger = new common_1.Logger(DeterminacaoJudicialAdapterService_1.name);
    constructor(determinacaoConsolidadoService) {
        this.determinacaoConsolidadoService = determinacaoConsolidadoService;
    }
    /**
     * Cria uma nova determinação judicial para uma solicitação
     *
     * @param createDeterminacaoDto Dados da determinação judicial
     * @param usuarioId ID do usuário que está criando a determinação
     * @returns Determinação judicial criada
     */
    async create(createDeterminacaoDto, usuarioId) {
        this.logger.log(`Criando determinação judicial para solicitação ${createDeterminacaoDto.solicitacao_id}`);
        return this.determinacaoConsolidadoService.createForSolicitacao(createDeterminacaoDto, usuarioId);
    }
    /**
     * Busca uma determinação judicial pelo ID
     *
     * @param id ID da determinação judicial
     * @returns Determinação judicial encontrada
     */
    async findById(id) {
        return this.determinacaoConsolidadoService.findById(id, ['solicitacao']);
    }
    /**
     * Busca todas as determinações judiciais de uma solicitação
     *
     * @param solicitacaoId ID da solicitação
     * @returns Lista de determinações judiciais
     */
    async findBySolicitacaoId(solicitacaoId) {
        this.logger.log(`Buscando determinações judiciais para solicitação ${solicitacaoId}`);
        return this.determinacaoConsolidadoService.findBySolicitacaoId(solicitacaoId);
    }
    /**
     * Atualiza uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @param updateDeterminacaoDto Dados para atualização
     * @returns Determinação judicial atualizada
     */
    async update(id, updateDeterminacaoDto) {
        this.logger.log(`Atualizando determinação judicial ${id}`);
        return this.determinacaoConsolidadoService.updateForSolicitacao(id, updateDeterminacaoDto);
    }
    /**
     * Registra o cumprimento de uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @param observacoes Observações sobre o cumprimento
     * @returns Determinação judicial atualizada
     */
    async registrarCumprimento(id, observacoes) {
        this.logger.log(`Registrando cumprimento da determinação judicial ${id}`);
        return this.determinacaoConsolidadoService.registrarCumprimento(id, observacoes);
    }
    /**
     * Remove uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @returns Void
     */
    async remove(id) {
        this.logger.log(`Removendo determinação judicial ${id}`);
        return this.determinacaoConsolidadoService.removeFromSolicitacao(id);
    }
    // ========================================
    // MÉTODOS DE COMPATIBILIDADE
    // ========================================
    /**
     * Busca determinações por solicitação (alias para findBySolicitacaoId)
     * Mantém compatibilidade com interface existente
     *
     * @param solicitacaoId ID da solicitação
     * @returns Lista de determinações judiciais
     */
    async findBySolicitacao(solicitacaoId) {
        return this.findBySolicitacaoId(solicitacaoId);
    }
    /**
     * Marca determinação como cumprida (alias para registrarCumprimento)
     * Mantém compatibilidade com interface existente
     *
     * @param id ID da determinação judicial
     * @param observacoes Observações sobre o cumprimento
     * @returns Determinação judicial atualizada
     */
    async marcarComoCumprida(id, observacoes) {
        return this.registrarCumprimento(id, observacoes);
    }
};
exports.DeterminacaoJudicialAdapterService = DeterminacaoJudicialAdapterService;
exports.DeterminacaoJudicialAdapterService = DeterminacaoJudicialAdapterService = DeterminacaoJudicialAdapterService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof determinacao_judicial_consolidado_service_1.DeterminacaoJudicialConsolidadoService !== "undefined" && determinacao_judicial_consolidado_service_1.DeterminacaoJudicialConsolidadoService) === "function" ? _a : Object])
], DeterminacaoJudicialAdapterService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,