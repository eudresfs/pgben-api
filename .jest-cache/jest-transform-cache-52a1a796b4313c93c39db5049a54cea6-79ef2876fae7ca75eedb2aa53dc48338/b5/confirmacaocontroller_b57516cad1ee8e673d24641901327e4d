df26a2da247f9b26d371259c6c0c396b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfirmacaoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const confirmacao_service_1 = require("../services/confirmacao.service");
const confirmacao_recebimento_dto_1 = require("../dtos/confirmacao-recebimento.dto");
const confirmacao_response_dto_1 = require("../dtos/confirmacao-response.dto");
const common_2 = require("@nestjs/common");
/**
 * Controller para gerenciamento de confirmações de recebimento
 *
 * Implementa endpoints para registrar e consultar as confirmações
 * de recebimento de pagamentos pelos beneficiários.
 *
 * @author Equipe PGBen
 */
let ConfirmacaoController = class ConfirmacaoController {
    confirmacaoService;
    constructor(confirmacaoService) {
        this.confirmacaoService = confirmacaoService;
    }
    /**
     * Lista confirmações para um determinado pagamento
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async findAll(pagamentoId) {
        const confirmacoes = await this.confirmacaoService.findByPagamento(pagamentoId);
        // Mapear para DTO de resposta
        return confirmacoes.map(confirmacao => ({
            id: confirmacao.id,
            pagamentoId: confirmacao.pagamento_id,
            dataConfirmacao: confirmacao.data_confirmacao,
            metodoConfirmacao: confirmacao.metodo_confirmacao,
            responsavel: {
                id: confirmacao.confirmado_por,
                nome: 'Responsável Confirmação' // seria obtido da entidade Usuario
            },
            destinatario: confirmacao.destinatario_id ? {
                id: confirmacao.destinatario_id,
                nome: 'Nome do Destinatário' // seria obtido da entidade Cidadao
            } : undefined,
            observacoes: confirmacao.observacoes
        }));
    }
    /**
     * Obtém uma confirmação específica por ID
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async findOne(id) {
        const confirmacao = await this.confirmacaoService.findOneWithRelations(id);
        if (!confirmacao) {
            throw new common_2.NotFoundException('Confirmação não encontrada');
        }
        // Mapear para DTO de resposta
        return {
            id: confirmacao.id,
            pagamentoId: confirmacao.pagamento_id,
            dataConfirmacao: confirmacao.data_confirmacao,
            metodoConfirmacao: confirmacao.metodo_confirmacao,
            responsavel: {
                id: confirmacao.confirmado_por,
                nome: 'Responsável Confirmação' // seria obtido da entidade Usuario
            },
            destinatario: confirmacao.destinatario_id ? {
                id: confirmacao.destinatario_id,
                nome: 'Nome do Destinatário' // seria obtido da entidade Cidadao
            } : undefined,
            pagamento: confirmacao.pagamento ? {
                id: confirmacao.pagamento.id,
                valor: confirmacao.pagamento.valor,
                dataLiberacao: confirmacao.pagamento.dataLiberacao,
                metodoPagamento: confirmacao.pagamento.metodoPagamento
            } : undefined,
            observacoes: confirmacao.observacoes
        };
    }
    /**
     * Registra uma nova confirmação de recebimento
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async create(pagamentoId, createDto) {
        // Usar o ID do usuário atual
        const usuarioId = 'placeholder'; // usuario.id;
        const confirmacao = await this.confirmacaoService.registrarConfirmacao(pagamentoId, createDto, usuarioId);
        // Mapear para DTO de resposta
        return {
            id: confirmacao.id,
            pagamentoId: confirmacao.pagamento_id,
            dataConfirmacao: confirmacao.data_confirmacao,
            metodoConfirmacao: confirmacao.metodo_confirmacao,
            responsavel: {
                id: usuarioId,
                nome: 'Responsável Confirmação' // seria obtido da entidade Usuario
            },
            destinatario: confirmacao.destinatario_id ? {
                id: confirmacao.destinatario_id,
                nome: 'Nome do Destinatário' // seria obtido da entidade Cidadao
            } : undefined,
            observacoes: confirmacao.observacoes
        };
    }
    /**
     * Verifica se um pagamento tem confirmação
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async verificaConfirmacao(pagamentoId) {
        const temConfirmacao = await this.confirmacaoService.temConfirmacao(pagamentoId);
        return {
            temConfirmacao,
            status: temConfirmacao ? 'CONFIRMADO' : 'PENDENTE_CONFIRMACAO'
        };
    }
};
exports.ConfirmacaoController = ConfirmacaoController;
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Lista confirmações de recebimento para um pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de confirmações',
        type: [confirmacao_response_dto_1.ConfirmacaoResponseDto]
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Pagamento não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('pagamentoId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConfirmacaoController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém detalhes de uma confirmação específica' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'ID da confirmação' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Detalhes da confirmação', type: confirmacao_response_dto_1.ConfirmacaoResponseDto }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Confirmação não encontrada' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConfirmacaoController.prototype, "findOne", null);
__decorate([
    (0, common_1.Post)(),
    (0, swagger_1.ApiOperation)({ summary: 'Registra uma confirmação de recebimento para um pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Confirmação registrada com sucesso', type: confirmacao_response_dto_1.ConfirmacaoResponseDto }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Pagamento não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 409, description: 'Pagamento já confirmado ou não pode ser confirmado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('pagamentoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_b = typeof confirmacao_recebimento_dto_1.ConfirmacaoRecebimentoDto !== "undefined" && confirmacao_recebimento_dto_1.ConfirmacaoRecebimentoDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], ConfirmacaoController.prototype, "create", null);
__decorate([
    (0, common_1.Get)('verificar'),
    (0, swagger_1.ApiOperation)({ summary: 'Verifica se um pagamento tem confirmação de recebimento' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status da confirmação',
        schema: {
            type: 'object',
            properties: {
                temConfirmacao: { type: 'boolean' },
                status: { type: 'string' }
            }
        }
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Pagamento não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('pagamentoId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ConfirmacaoController.prototype, "verificaConfirmacao", null);
exports.ConfirmacaoController = ConfirmacaoController = __decorate([
    (0, swagger_1.ApiTags)('Pagamentos'),
    (0, common_1.Controller)('pagamentos/:pagamentoId/confirmacao'),
    __metadata("design:paramtypes", [typeof (_a = typeof confirmacao_service_1.ConfirmacaoService !== "undefined" && confirmacao_service_1.ConfirmacaoService) === "function" ? _a : Object])
], ConfirmacaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,