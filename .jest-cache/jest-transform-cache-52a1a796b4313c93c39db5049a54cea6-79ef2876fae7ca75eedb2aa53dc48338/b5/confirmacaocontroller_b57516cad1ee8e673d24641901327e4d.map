{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\controllers\\confirmacao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\controllers\\confirmacao.controller.ts"],"sourcesContent":["import { Body, Controller, Get, Param, ParseUUIDPipe, Post, UseGuards } from '@nestjs/common';\nimport { ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ConfirmacaoService } from '../services/confirmacao.service';\nimport { ConfirmacaoRecebimentoDto } from '../dtos/confirmacao-recebimento.dto';\nimport { ConfirmacaoResponseDto } from '../dtos/confirmacao-response.dto';\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Controller para gerenciamento de confirmações de recebimento\n * \n * Implementa endpoints para registrar e consultar as confirmações\n * de recebimento de pagamentos pelos beneficiários.\n * \n * @author Equipe PGBen\n */\n@ApiTags('Pagamentos')\n@Controller('pagamentos/:pagamentoId/confirmacao')\nexport class ConfirmacaoController {\n  constructor(private readonly confirmacaoService: ConfirmacaoService) {}\n\n  /**\n   * Lista confirmações para um determinado pagamento\n   */\n  @Get()\n  @ApiOperation({ summary: 'Lista confirmações de recebimento para um pagamento' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Lista de confirmações', \n    type: [ConfirmacaoResponseDto] \n  })\n  @ApiResponse({ status: 404, description: 'Pagamento não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async findAll(@Param('pagamentoId', ParseUUIDPipe) pagamentoId: string) {\n    const confirmacoes = await this.confirmacaoService.findByPagamento(pagamentoId);\n    \n    // Mapear para DTO de resposta\n    return confirmacoes.map(confirmacao => ({\n      id: confirmacao.id,\n      pagamentoId: confirmacao.pagamento_id,\n      dataConfirmacao: confirmacao.data_confirmacao,\n      metodoConfirmacao: confirmacao.metodo_confirmacao,\n      responsavel: {\n        id: confirmacao.confirmado_por,\n        nome: 'Responsável Confirmação' // seria obtido da entidade Usuario\n      },\n      destinatario: confirmacao.destinatario_id ? {\n        id: confirmacao.destinatario_id,\n        nome: 'Nome do Destinatário' // seria obtido da entidade Cidadao\n      } : undefined,\n      observacoes: confirmacao.observacoes\n    }));\n  }\n\n  /**\n   * Obtém uma confirmação específica por ID\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Obtém detalhes de uma confirmação específica' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiParam({ name: 'id', type: 'string', description: 'ID da confirmação' })\n  @ApiResponse({ status: 200, description: 'Detalhes da confirmação', type: ConfirmacaoResponseDto })\n  @ApiResponse({ status: 404, description: 'Confirmação não encontrada' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    const confirmacao = await this.confirmacaoService.findOneWithRelations(id);\n    \n    if (!confirmacao) {\n      throw new NotFoundException('Confirmação não encontrada');\n    }\n\n    // Mapear para DTO de resposta\n    return {\n      id: confirmacao.id,\n      pagamentoId: confirmacao.pagamento_id,\n      dataConfirmacao: confirmacao.data_confirmacao,\n      metodoConfirmacao: confirmacao.metodo_confirmacao,\n      responsavel: {\n        id: confirmacao.confirmado_por,\n        nome: 'Responsável Confirmação' // seria obtido da entidade Usuario\n      },\n      destinatario: confirmacao.destinatario_id ? {\n        id: confirmacao.destinatario_id,\n        nome: 'Nome do Destinatário' // seria obtido da entidade Cidadao\n      } : undefined,\n      pagamento: confirmacao.pagamento ? {\n        id: confirmacao.pagamento.id,\n        valor: confirmacao.pagamento.valor,\n        dataLiberacao: confirmacao.pagamento.dataLiberacao,\n        metodoPagamento: confirmacao.pagamento.metodoPagamento\n      } : undefined,\n      observacoes: confirmacao.observacoes\n    };\n  }\n\n  /**\n   * Registra uma nova confirmação de recebimento\n   */\n  @Post()\n  @ApiOperation({ summary: 'Registra uma confirmação de recebimento para um pagamento' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiResponse({ status: 201, description: 'Confirmação registrada com sucesso', type: ConfirmacaoResponseDto })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  @ApiResponse({ status: 404, description: 'Pagamento não encontrado' })\n  @ApiResponse({ status: 409, description: 'Pagamento já confirmado ou não pode ser confirmado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async create(\n    @Param('pagamentoId', ParseUUIDPipe) pagamentoId: string,\n    @Body() createDto: ConfirmacaoRecebimentoDto,\n    // @CurrentUser() usuario: Usuario\n  ) {\n    // Usar o ID do usuário atual\n    const usuarioId = 'placeholder'; // usuario.id;\n    \n    const confirmacao = await this.confirmacaoService.registrarConfirmacao(\n      pagamentoId,\n      createDto,\n      usuarioId\n    );\n\n    // Mapear para DTO de resposta\n    return {\n      id: confirmacao.id,\n      pagamentoId: confirmacao.pagamento_id,\n      dataConfirmacao: confirmacao.data_confirmacao,\n      metodoConfirmacao: confirmacao.metodo_confirmacao,\n      responsavel: {\n        id: usuarioId,\n        nome: 'Responsável Confirmação' // seria obtido da entidade Usuario\n      },\n      destinatario: confirmacao.destinatario_id ? {\n        id: confirmacao.destinatario_id,\n        nome: 'Nome do Destinatário' // seria obtido da entidade Cidadao\n      } : undefined,\n      observacoes: confirmacao.observacoes\n    };\n  }\n\n  /**\n   * Verifica se um pagamento tem confirmação\n   */\n  @Get('verificar')\n  @ApiOperation({ summary: 'Verifica se um pagamento tem confirmação de recebimento' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Status da confirmação',\n    schema: {\n      type: 'object',\n      properties: {\n        temConfirmacao: { type: 'boolean' },\n        status: { type: 'string' }\n      }\n    }\n  })\n  @ApiResponse({ status: 404, description: 'Pagamento não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async verificaConfirmacao(@Param('pagamentoId', ParseUUIDPipe) pagamentoId: string) {\n    const temConfirmacao = await this.confirmacaoService.temConfirmacao(pagamentoId);\n    \n    return {\n      temConfirmacao,\n      status: temConfirmacao ? 'CONFIRMADO' : 'PENDENTE_CONFIRMACAO'\n    };\n  }\n}\n"],"version":3}