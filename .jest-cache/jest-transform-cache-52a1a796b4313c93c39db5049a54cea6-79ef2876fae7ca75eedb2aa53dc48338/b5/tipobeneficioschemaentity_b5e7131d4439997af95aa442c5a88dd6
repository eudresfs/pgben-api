2ffb01d353294d8496d10383e9436ead
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TipoBeneficioSchema = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const tipo_beneficio_entity_1 = require("./tipo-beneficio.entity");
const enums_1 = require("@/enums");
/**
 * Entidade para mapear tipos de benefícios com suas estruturas de dados específicas
 *
 * Esta entidade relaciona cada tipo de benefício com a estrutura tipada
 * da entidade de dados correspondente, eliminando a necessidade de
 * formulários dinâmicos separados.
 */
let TipoBeneficioSchema = class TipoBeneficioSchema {
    id;
    tipo_beneficio_id;
    tipo_beneficio;
    entidade_dados; // 'DadosNatalidade', 'DadosAluguelSocial', etc.
    schema_estrutura;
    versao;
    status;
    observacoes;
    created_at;
    updated_at;
    removed_at;
    /**
     * Verifica se o schema foi criado recentemente (últimas 24 horas)
     */
    isRecente() {
        const umDiaAtras = new Date();
        umDiaAtras.setDate(umDiaAtras.getDate() - 1);
        return this.created_at > umDiaAtras;
    }
    /**
     * Obtém os campos obrigatórios do schema
     */
    getCamposObrigatorios() {
        return this.schema_estrutura.campos.filter((campo) => campo.obrigatorio);
    }
    /**
     * Obtém os campos opcionais do schema
     */
    getCamposOpcionais() {
        return this.schema_estrutura.campos.filter((campo) => !campo.obrigatorio);
    }
    /**
     * Busca um campo específico por nome
     */
    getCampoPorNome(nome) {
        return this.schema_estrutura.campos.find((campo) => campo.nome === nome);
    }
    /**
     * Valida se a estrutura do schema está correta
     */
    validarEstrutura() {
        const erros = [];
        if (!this.schema_estrutura.campos ||
            this.schema_estrutura.campos.length === 0) {
            erros.push('Schema deve conter pelo menos um campo');
        }
        // Validar campos únicos
        const nomesCampos = this.schema_estrutura.campos.map((c) => c.nome);
        const nomesUnicos = new Set(nomesCampos);
        if (nomesCampos.length !== nomesUnicos.size) {
            erros.push('Nomes de campos devem ser únicos');
        }
        // Validar dependências
        this.schema_estrutura.campos.forEach((campo) => {
            if (campo.dependeDe) {
                const campoReferenciado = this.getCampoPorNome(campo.dependeDe.campo);
                if (!campoReferenciado) {
                    erros.push(`Campo '${campo.nome}' depende de campo inexistente '${campo.dependeDe.campo}'`);
                }
            }
        });
        return {
            valido: erros.length === 0,
            erros,
        };
    }
};
exports.TipoBeneficioSchema = TipoBeneficioSchema;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], TipoBeneficioSchema.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do tipo de benefício é obrigatório' }),
    __metadata("design:type", String)
], TipoBeneficioSchema.prototype, "tipo_beneficio_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => tipo_beneficio_entity_1.TipoBeneficio, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'tipo_beneficio_id' }),
    __metadata("design:type", typeof (_a = typeof tipo_beneficio_entity_1.TipoBeneficio !== "undefined" && tipo_beneficio_entity_1.TipoBeneficio) === "function" ? _a : Object)
], TipoBeneficioSchema.prototype, "tipo_beneficio", void 0);
__decorate([
    (0, typeorm_1.Column)('varchar', { length: 100 }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome da entidade de dados é obrigatório' }),
    __metadata("design:type", String)
], TipoBeneficioSchema.prototype, "entidade_dados", void 0);
__decorate([
    (0, typeorm_1.Column)('jsonb'),
    (0, class_validator_1.IsNotEmpty)({ message: 'Estrutura do schema é obrigatória' }),
    __metadata("design:type", Object)
], TipoBeneficioSchema.prototype, "schema_estrutura", void 0);
__decorate([
    (0, typeorm_1.Column)('varchar', { length: 20, default: '1.0.0' }),
    __metadata("design:type", String)
], TipoBeneficioSchema.prototype, "versao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.Status,
        enumName: 'status_enum',
        default: enums_1.Status.ATIVO,
    }),
    __metadata("design:type", typeof (_b = typeof enums_1.Status !== "undefined" && enums_1.Status) === "function" ? _b : Object)
], TipoBeneficioSchema.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], TipoBeneficioSchema.prototype, "observacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], TipoBeneficioSchema.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], TipoBeneficioSchema.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], TipoBeneficioSchema.prototype, "removed_at", void 0);
exports.TipoBeneficioSchema = TipoBeneficioSchema = __decorate([
    (0, typeorm_1.Entity)('tipo_beneficio_schema'),
    (0, typeorm_1.Index)(['tipo_beneficio_id'], { unique: true })
], TipoBeneficioSchema);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,