{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\tipo-beneficio-schema.entity.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\entities\\tipo-beneficio-schema.entity.ts"],"sourcesContent":["import {\n  Entity,\n  PrimaryGeneratedColumn,\n  Column,\n  CreateDateColumn,\n  UpdateDateColumn,\n  DeleteDateColumn,\n  ManyToOne,\n  JoinColumn,\n  Index,\n} from 'typeorm';\nimport { IsNotEmpty, IsBoolean, IsOptional } from 'class-validator';\nimport { TipoBeneficio } from './tipo-beneficio.entity';\nimport { Status } from '@/enums';\n\n/**\n * Interface para definir a estrutura de um campo da entidade\n */\nexport interface CampoEstrutura {\n  nome: string;\n  tipo: 'string' | 'number' | 'boolean' | 'date' | 'enum' | 'array';\n  obrigatorio: boolean;\n  label: string;\n  descricao?: string;\n  validacoes?: {\n    min?: number;\n    max?: number;\n    pattern?: string;\n    opcoes?: string[];\n  };\n  opcoes?: string[];\n  dependeDe?: {\n    campo: string;\n    valor: any;\n    condicao: 'igual' | 'diferente' | 'maior' | 'menor' | 'contem';\n  };\n}\n\n/**\n * Interface para metadados da estrutura\n */\nexport interface MetadadosEstrutura {\n  versao: string;\n  descricao: string;\n  categoria: string;\n  tags?: string[];\n  configuracoes?: Record<string, any>;\n}\n\n/**\n * Entidade para mapear tipos de benefícios com suas estruturas de dados específicas\n *\n * Esta entidade relaciona cada tipo de benefício com a estrutura tipada\n * da entidade de dados correspondente, eliminando a necessidade de\n * formulários dinâmicos separados.\n */\n@Entity('tipo_beneficio_schema')\n@Index(['tipo_beneficio_id'], { unique: true })\nexport class TipoBeneficioSchema {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  @IsNotEmpty({ message: 'ID do tipo de benefício é obrigatório' })\n  tipo_beneficio_id: string;\n\n  @ManyToOne(() => TipoBeneficio, { onDelete: 'CASCADE' })\n  @JoinColumn({ name: 'tipo_beneficio_id' })\n  tipo_beneficio: TipoBeneficio;\n\n  @Column('varchar', { length: 100 })\n  @IsNotEmpty({ message: 'Nome da entidade de dados é obrigatório' })\n  entidade_dados: string; // 'DadosNatalidade', 'DadosAluguelSocial', etc.\n\n  @Column('jsonb')\n  @IsNotEmpty({ message: 'Estrutura do schema é obrigatória' })\n  schema_estrutura: {\n    campos: CampoEstrutura[];\n    metadados: MetadadosEstrutura;\n  };\n\n  @Column('varchar', { length: 20, default: '1.0.0' })\n  versao: string;\n\n  @Column({\n    type: 'enum',\n    enum: Status,\n    enumName: 'status_enum',\n    default: Status.ATIVO,\n  })\n  status: Status;\n\n  @Column('text', { nullable: true })\n  @IsOptional()\n  observacoes?: string;\n\n  @CreateDateColumn()\n  created_at: Date;\n\n  @UpdateDateColumn()\n  updated_at: Date;\n\n  @DeleteDateColumn()\n  removed_at?: Date;\n\n  /**\n   * Verifica se o schema foi criado recentemente (últimas 24 horas)\n   */\n  isRecente(): boolean {\n    const umDiaAtras = new Date();\n    umDiaAtras.setDate(umDiaAtras.getDate() - 1);\n    return this.created_at > umDiaAtras;\n  }\n\n  /**\n   * Obtém os campos obrigatórios do schema\n   */\n  getCamposObrigatorios(): CampoEstrutura[] {\n    return this.schema_estrutura.campos.filter((campo) => campo.obrigatorio);\n  }\n\n  /**\n   * Obtém os campos opcionais do schema\n   */\n  getCamposOpcionais(): CampoEstrutura[] {\n    return this.schema_estrutura.campos.filter((campo) => !campo.obrigatorio);\n  }\n\n  /**\n   * Busca um campo específico por nome\n   */\n  getCampoPorNome(nome: string): CampoEstrutura | undefined {\n    return this.schema_estrutura.campos.find((campo) => campo.nome === nome);\n  }\n\n  /**\n   * Valida se a estrutura do schema está correta\n   */\n  validarEstrutura(): { valido: boolean; erros: string[] } {\n    const erros: string[] = [];\n\n    if (\n      !this.schema_estrutura.campos ||\n      this.schema_estrutura.campos.length === 0\n    ) {\n      erros.push('Schema deve conter pelo menos um campo');\n    }\n\n    // Validar campos únicos\n    const nomesCampos = this.schema_estrutura.campos.map((c) => c.nome);\n    const nomesUnicos = new Set(nomesCampos);\n    if (nomesCampos.length !== nomesUnicos.size) {\n      erros.push('Nomes de campos devem ser únicos');\n    }\n\n    // Validar dependências\n    this.schema_estrutura.campos.forEach((campo) => {\n      if (campo.dependeDe) {\n        const campoReferenciado = this.getCampoPorNome(campo.dependeDe.campo);\n        if (!campoReferenciado) {\n          erros.push(\n            `Campo '${campo.nome}' depende de campo inexistente '${campo.dependeDe.campo}'`,\n          );\n        }\n      }\n    });\n\n    return {\n      valido: erros.length === 0,\n      erros,\n    };\n  }\n}\n"],"version":3}