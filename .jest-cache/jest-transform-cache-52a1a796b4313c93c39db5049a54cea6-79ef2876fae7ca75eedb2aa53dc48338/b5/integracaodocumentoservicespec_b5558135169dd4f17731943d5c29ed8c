c59eaf38529bb780c328a028185d0e20
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const axios_1 = require("@nestjs/axios");
const config_1 = require("@nestjs/config");
const rxjs_1 = require("rxjs");
const integracao_documento_service_1 = require("../../services/integracao-documento.service");
const common_1 = require("@nestjs/common");
/**
 * Testes unitários para o serviço de integração com o módulo de documentos
 *
 * Verifica o funcionamento correto das operações de armazenamento e
 * recuperação de comprovantes de pagamento.
 *
 * @author Equipe PGBen
 */
describe('IntegracaoDocumentoService', () => {
    let service;
    let httpService;
    let configService;
    // Mock do HttpService
    const mockHttpService = {
        get: jest.fn(),
        post: jest.fn(),
        put: jest.fn(),
        delete: jest.fn(),
    };
    // Mock do ConfigService
    const mockConfigService = {
        get: jest.fn().mockImplementation((key) => {
            if (key === 'documento.apiUrl') {
                return 'http://api-documento.pgben.local';
            }
            if (key === 'documento.apiKey') {
                return 'api-key-mock';
            }
            if (key === 'documento.categoriaComprovante') {
                return 'COMPROVANTE_PAGAMENTO';
            }
            return null;
        }),
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                integracao_documento_service_1.IntegracaoDocumentoService,
                {
                    provide: axios_1.HttpService,
                    useValue: mockHttpService,
                },
                {
                    provide: config_1.ConfigService,
                    useValue: mockConfigService,
                },
            ],
        }).compile();
        service = module.get(integracao_documento_service_1.IntegracaoDocumentoService);
        httpService = module.get(axios_1.HttpService);
        configService = module.get(config_1.ConfigService);
        // Limpar mocks antes de cada teste
        jest.clearAllMocks();
    });
    describe('uploadComprovante', () => {
        const pagamentoId = 'pagamento-id';
        const usuarioId = 'usuario-id';
        const arquivo = {
            originalname: 'comprovante.pdf',
            mimetype: 'application/pdf',
            buffer: Buffer.from('conteúdo do arquivo'),
            size: 1024,
        };
        const mockResposta = {
            id: 'documento-id',
            nome: 'comprovante.pdf',
            tamanho: 1024,
            tipo: 'application/pdf',
            categoria: 'COMPROVANTE_PAGAMENTO',
            referencia: pagamentoId,
            url: 'http://api-documento.pgben.local/documentos/documento-id',
            createdAt: '2023-01-01T00:00:00Z',
        };
        it('deve fazer upload de comprovante com sucesso', async () => {
            // Configurar mock da resposta HTTP
            const axiosResponse = {
                data: mockResposta,
                status: 201,
                statusText: 'Created',
                headers: {},
                config: { headers: {} },
            };
            mockHttpService.post.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Executar método
            const result = await service.uploadComprovante(pagamentoId, arquivo, usuarioId);
            // Verificar resultado
            expect(result).toEqual(mockResposta);
            expect(mockHttpService.post).toHaveBeenCalledWith('http://api-documento.pgben.local/documentos', expect.any(FormData), expect.objectContaining({
                headers: expect.objectContaining({
                    'x-api-key': 'api-key-mock',
                    'Content-Type': expect.stringContaining('multipart/form-data'),
                }),
            }));
        });
        it('deve propagar erros HTTP durante o upload', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.post.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 500,
                    data: { message: 'Erro interno do servidor' },
                },
            })));
            // Executar e verificar exceção
            await expect(service.uploadComprovante(pagamentoId, arquivo, usuarioId)).rejects.toThrow();
        });
    });
    describe('obterComprovante', () => {
        const documentoId = 'documento-id';
        const mockDocumento = {
            id: documentoId,
            nome: 'comprovante.pdf',
            tamanho: 1024,
            tipo: 'application/pdf',
            categoria: 'COMPROVANTE_PAGAMENTO',
            referencia: 'pagamento-id',
            url: 'http://api-documento.pgben.local/documentos/documento-id',
            createdAt: '2023-01-01T00:00:00Z',
        };
        it('deve obter documento quando encontrado', async () => {
            // Configurar mock da resposta HTTP
            const axiosResponse = {
                data: mockDocumento,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} },
            };
            mockHttpService.get.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Executar método
            const result = await service.obterComprovante(documentoId);
            // Verificar resultado
            expect(result).toEqual(mockDocumento);
            expect(mockHttpService.get).toHaveBeenCalledWith(`http://api-documento.pgben.local/documentos/${documentoId}`, expect.objectContaining({
                headers: expect.objectContaining({
                    'x-api-key': 'api-key-mock',
                }),
            }));
        });
        it('deve lançar NotFoundException quando documento não encontrado', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.get.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 404,
                    data: { message: 'Documento não encontrado' },
                },
            })));
            // Executar e verificar exceção
            await expect(service.obterComprovante(documentoId)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('listarComprovantes', () => {
        const pagamentoId = 'pagamento-id';
        const mockComprovantes = [
            {
                id: 'documento-1',
                nome: 'comprovante1.pdf',
                tamanho: 1024,
                tipo: 'application/pdf',
                categoria: 'COMPROVANTE_PAGAMENTO',
                referencia: pagamentoId,
                url: 'http://api-documento.pgben.local/documentos/documento-1',
                createdAt: '2023-01-01T00:00:00Z',
            },
            {
                id: 'documento-2',
                nome: 'comprovante2.pdf',
                tamanho: 2048,
                tipo: 'application/pdf',
                categoria: 'COMPROVANTE_PAGAMENTO',
                referencia: pagamentoId,
                url: 'http://api-documento.pgben.local/documentos/documento-2',
                createdAt: '2023-01-02T00:00:00Z',
            },
        ];
        it('deve listar comprovantes quando encontrados', async () => {
            // Configurar mock da resposta HTTP
            const axiosResponse = {
                data: mockComprovantes,
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} },
            };
            mockHttpService.get.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Executar método
            const result = await service.listarComprovantes(pagamentoId);
            // Verificar resultado
            expect(result).toEqual(mockComprovantes);
            expect(mockHttpService.get).toHaveBeenCalledWith(expect.stringContaining(`referencia=${pagamentoId}`), expect.objectContaining({
                headers: expect.objectContaining({
                    'x-api-key': 'api-key-mock',
                }),
            }));
        });
        it('deve retornar array vazio quando não há comprovantes', async () => {
            // Configurar mock da resposta HTTP com array vazio
            const axiosResponse = {
                data: [],
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} },
            };
            mockHttpService.get.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Executar método
            const result = await service.listarComprovantes(pagamentoId);
            // Verificar resultado
            expect(result).toEqual([]);
        });
    });
    describe('removerComprovante', () => {
        const documentoId = 'documento-id';
        const usuarioId = 'usuario-id';
        it('deve remover comprovante com sucesso', async () => {
            // Configurar mock da resposta HTTP
            const axiosResponse = {
                data: { success: true },
                status: 200,
                statusText: 'OK',
                headers: {},
                config: { headers: {} },
            };
            mockHttpService.delete.mockReturnValue((0, rxjs_1.of)(axiosResponse));
            // Executar método
            await service.removerComprovante(documentoId, usuarioId);
            // Verificar resultado
            expect(mockHttpService.delete).toHaveBeenCalledWith(`http://api-documento.pgben.local/documentos/${documentoId}`, expect.objectContaining({
                headers: expect.objectContaining({
                    'x-api-key': 'api-key-mock',
                    'x-user-id': usuarioId,
                }),
            }));
        });
        it('deve lançar NotFoundException quando documento não encontrado', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.delete.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 404,
                    data: { message: 'Documento não encontrado' },
                },
            })));
            // Executar e verificar exceção
            await expect(service.removerComprovante(documentoId, usuarioId)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve propagar outros erros HTTP', async () => {
            // Configurar mock do erro HTTP
            mockHttpService.delete.mockReturnValue((0, rxjs_1.throwError)(() => ({
                response: {
                    status: 500,
                    data: { message: 'Erro interno do servidor' },
                },
            })));
            // Executar e verificar exceção
            await expect(service.removerComprovante(documentoId, usuarioId)).rejects.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,