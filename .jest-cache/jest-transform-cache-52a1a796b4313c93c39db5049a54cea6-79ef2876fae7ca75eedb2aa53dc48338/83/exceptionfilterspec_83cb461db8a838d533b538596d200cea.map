{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\tests\\exception.filter.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,0DAA4D;AAC5D,wDAAoD;AACpD,2CAKwB;AAGxB;;;;;GAKG;AACH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;IACrC,IAAI,MAA6B,CAAC;IAClC,IAAI,cAA8B,CAAC;IAEnC,6BAA6B;IAC7B,MAAM,kBAAkB,GAAG;QACzB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,wCAAqB;gBACrB;oBACE,OAAO,EAAE,gCAAc;oBACvB,QAAQ,EAAE,kBAAkB;iBAC7B;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,MAAM,GAAG,MAAM,CAAC,GAAG,CAAwB,wCAAqB,CAAC,CAAC;QAClE,cAAc,GAAG,MAAM,CAAC,GAAG,CAAiB,gCAAc,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,uBAAuB;YACvB,MAAM,SAAS,GAAG,IAAI,sBAAa,CACjC,kBAAkB,EAClB,mBAAU,CAAC,WAAW,CACvB,CAAC;YAEF,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;aACO,CAAC;YAEzB,qBAAqB;YACrB,MAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,WAAW;gBAChB,MAAM,EAAE,KAAK;gBACb,EAAE,EAAE,WAAW;gBACf,OAAO,EAAE;oBACP,YAAY,EAAE,YAAY;iBAC3B;gBACD,IAAI,EAAE;oBACJ,EAAE,EAAE,UAAU;iBACf;aACoB,CAAC;YAExB,6BAA6B;YAC7B,MAAM,iBAAiB,GAAG;gBACxB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACtC,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAC;oBACpD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC;iBACnD,CAAC;aACyB,CAAC;YAE9B,oBAAoB;YACpB,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;YAE3C,2EAA2E;YAC3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,mBAAU,CAAC,WAAW,CAAC,CAAC;YACzE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE7C,yCAAyC;YACzC,MAAM,OAAO,GAAI,YAAY,CAAC,IAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CACrB,MAAM,CAAC,gBAAgB,CAAC;gBACtB,UAAU,EAAE,mBAAU,CAAC,WAAW;gBAClC,OAAO,EAAE,kBAAkB;gBAC3B,IAAI,EAAE,WAAW;aAClB,CAAC,CACH,CAAC;YAEF,qCAAqC;YACrC,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACpD,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,8BAA8B;YAC9B,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;YAE5C,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;aACO,CAAC;YAEzB,qBAAqB;YACrB,MAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,WAAW;gBAChB,MAAM,EAAE,MAAM;gBACd,EAAE,EAAE,WAAW;gBACf,OAAO,EAAE,EAAE;aACU,CAAC;YAExB,6BAA6B;YAC7B,MAAM,iBAAiB,GAAG;gBACxB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACtC,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAC;oBACpD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC;iBACnD,CAAC;aACyB,CAAC;YAE9B,oBAAoB;YACpB,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;YAE3C,2EAA2E;YAC3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,mBAAU,CAAC,qBAAqB,CACjC,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE7C,yCAAyC;YACzC,MAAM,OAAO,GAAI,YAAY,CAAC,IAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CACrB,MAAM,CAAC,gBAAgB,CAAC;gBACtB,UAAU,EAAE,mBAAU,CAAC,qBAAqB;gBAC5C,OAAO,EAAE,0BAA0B;gBACnC,IAAI,EAAE,WAAW;aAClB,CAAC,CACH,CAAC;YAEF,qCAAqC;YACrC,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACpD,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACvC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8EAA8E,EAAE,GAAG,EAAE;YACtF,wCAAwC;YACxC,MAAM,SAAS,GAAG,IAAI,qCAA4B,CAChD,6BAA6B,CAC9B,CAAC;YAEF,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;aACO,CAAC;YAEzB,qBAAqB;YACrB,MAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,WAAW;gBAChB,MAAM,EAAE,KAAK;gBACb,EAAE,EAAE,WAAW;gBACf,OAAO,EAAE,EAAE;aACU,CAAC;YAExB,6BAA6B;YAC7B,MAAM,iBAAiB,GAAG;gBACxB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACtC,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAC;oBACpD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC;iBACnD,CAAC;aACyB,CAAC;YAE9B,oBAAoB;YACpB,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;YAE3C,2EAA2E;YAC3E,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,mBAAU,CAAC,qBAAqB,CACjC,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE7C,yCAAyC;YACzC,MAAM,OAAO,GAAI,YAAY,CAAC,IAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CACrB,MAAM,CAAC,gBAAgB,CAAC;gBACtB,UAAU,EAAE,mBAAU,CAAC,qBAAqB;gBAC5C,OAAO,EAAE,6BAA6B;gBACtC,IAAI,EAAE,WAAW;aAClB,CAAC,CACH,CAAC;YAEF,qCAAqC;YACrC,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACpD,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACtC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,6BAA6B;YAC7B,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;YAEzC,mCAAmC;YACnC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,YAAY,CAAC;YAEpC,8BAA8B;YAC9B,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAE1D,mBAAmB;YACnB,MAAM,YAAY,GAAG;gBACnB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;gBAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;aACO,CAAC;YAEzB,qBAAqB;YACrB,MAAM,WAAW,GAAG;gBAClB,GAAG,EAAE,WAAW;gBAChB,MAAM,EAAE,QAAQ;gBAChB,EAAE,EAAE,WAAW;gBACf,OAAO,EAAE,EAAE;aACU,CAAC;YAExB,6BAA6B;YAC7B,MAAM,iBAAiB,GAAG;gBACxB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACtC,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,YAAY,CAAC;oBACpD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,WAAW,CAAC;iBACnD,CAAC;aACyB,CAAC;YAE9B,oBAAoB;YACpB,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;YAE3C,2EAA2E;YAC3E,kDAAkD;YAClD,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAC9C,mBAAU,CAAC,qBAAqB,CACjC,CAAC;YACF,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAE7C,yCAAyC;YACzC,MAAM,OAAO,GAAI,YAAY,CAAC,IAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CACrB,MAAM,CAAC,gBAAgB,CAAC;gBACtB,UAAU,EAAE,mBAAU,CAAC,qBAAqB;gBAC5C,OAAO,EAAE,0BAA0B;gBACnC,IAAI,EAAE,WAAW;aAClB,CAAC,CACH,CAAC;YAEF,+DAA+D;YAC/D,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACpD,MAAM,SAAS,GAAG,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;YACpD,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACzC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAE7C,gCAAgC;YAChC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,WAAW,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\tests\\exception.filter.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { GlobalExceptionFilter } from '../exception.filter';\nimport { LoggingService } from '../logging.service';\nimport {\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n/**\n * Testes unitários para o filtro de exceções global\n *\n * Verifica o comportamento do filtro ao capturar diferentes tipos de exceções\n * e formatar as respostas de erro apropriadamente\n */\ndescribe('GlobalExceptionFilter', () => {\n  let filter: GlobalExceptionFilter;\n  let loggingService: LoggingService;\n\n  // Mock do serviço de logging\n  const mockLoggingService = {\n    error: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        GlobalExceptionFilter,\n        {\n          provide: LoggingService,\n          useValue: mockLoggingService,\n        },\n      ],\n    }).compile();\n\n    filter = module.get<GlobalExceptionFilter>(GlobalExceptionFilter);\n    loggingService = module.get<LoggingService>(LoggingService);\n  });\n\n  it('deve ser definido', () => {\n    expect(filter).toBeDefined();\n  });\n\n  describe('catch', () => {\n    it('deve lidar com HttpException', () => {\n      // Mock da exceção HTTP\n      const exception = new HttpException(\n        'Mensagem de erro',\n        HttpStatus.BAD_REQUEST,\n      );\n\n      // Mock da resposta\n      const mockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      } as unknown as Response;\n\n      // Mock da requisição\n      const mockRequest = {\n        url: '/api/test',\n        method: 'GET',\n        ip: '127.0.0.1',\n        headers: {\n          'user-agent': 'test-agent',\n        },\n        user: {\n          id: 'user-123',\n        },\n      } as unknown as Request;\n\n      // Mock do host de argumentos\n      const mockArgumentsHost = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n        }),\n      } as unknown as ArgumentsHost;\n\n      // Executar o filtro\n      filter.catch(exception, mockArgumentsHost);\n\n      // Verificar se o status e o corpo da resposta foram definidos corretamente\n      expect(mockResponse.status).toHaveBeenCalledWith(HttpStatus.BAD_REQUEST);\n      expect(mockResponse.json).toHaveBeenCalled();\n\n      // Capturar o argumento passado para json\n      const jsonArg = (mockResponse.json as jest.Mock).mock.calls[0][0];\n      expect(jsonArg).toEqual(\n        expect.objectContaining({\n          statusCode: HttpStatus.BAD_REQUEST,\n          message: 'Mensagem de erro',\n          path: '/api/test',\n        }),\n      );\n\n      // Verificar se o erro foi registrado\n      expect(mockLoggingService.error).toHaveBeenCalled();\n      const errorCall = mockLoggingService.error.mock.calls[0];\n      expect(errorCall[0]).toContain('Exceção capturada');\n      expect(errorCall[0]).toContain('GET');\n      expect(errorCall[0]).toContain('/api/test');\n      expect(errorCall[2]).toBe('ExceptionFilter');\n    });\n\n    it('deve lidar com exceções internas do servidor', () => {\n      // Mock de uma exceção interna\n      const exception = new Error('Erro interno');\n\n      // Mock da resposta\n      const mockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      } as unknown as Response;\n\n      // Mock da requisição\n      const mockRequest = {\n        url: '/api/test',\n        method: 'POST',\n        ip: '127.0.0.1',\n        headers: {},\n      } as unknown as Request;\n\n      // Mock do host de argumentos\n      const mockArgumentsHost = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n        }),\n      } as unknown as ArgumentsHost;\n\n      // Executar o filtro\n      filter.catch(exception, mockArgumentsHost);\n\n      // Verificar se o status e o corpo da resposta foram definidos corretamente\n      expect(mockResponse.status).toHaveBeenCalledWith(\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n      expect(mockResponse.json).toHaveBeenCalled();\n\n      // Capturar o argumento passado para json\n      const jsonArg = (mockResponse.json as jest.Mock).mock.calls[0][0];\n      expect(jsonArg).toEqual(\n        expect.objectContaining({\n          statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\n          message: 'Erro interno do servidor',\n          path: '/api/test',\n        }),\n      );\n\n      // Verificar se o erro foi registrado\n      expect(mockLoggingService.error).toHaveBeenCalled();\n      const errorCall = mockLoggingService.error.mock.calls[0];\n      expect(errorCall[0]).toContain('Exceção capturada');\n      expect(errorCall[0]).toContain('POST');\n      expect(errorCall[0]).toContain('/api/test');\n      expect(errorCall[2]).toBe('ExceptionFilter');\n    });\n\n    it('deve preservar a mensagem de erro original para InternalServerErrorException', () => {\n      // Mock de uma exceção interna do NestJS\n      const exception = new InternalServerErrorException(\n        'Erro específico do servidor',\n      );\n\n      // Mock da resposta\n      const mockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      } as unknown as Response;\n\n      // Mock da requisição\n      const mockRequest = {\n        url: '/api/test',\n        method: 'PUT',\n        ip: '127.0.0.1',\n        headers: {},\n      } as unknown as Request;\n\n      // Mock do host de argumentos\n      const mockArgumentsHost = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n        }),\n      } as unknown as ArgumentsHost;\n\n      // Executar o filtro\n      filter.catch(exception, mockArgumentsHost);\n\n      // Verificar se o status e o corpo da resposta foram definidos corretamente\n      expect(mockResponse.status).toHaveBeenCalledWith(\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n      expect(mockResponse.json).toHaveBeenCalled();\n\n      // Capturar o argumento passado para json\n      const jsonArg = (mockResponse.json as jest.Mock).mock.calls[0][0];\n      expect(jsonArg).toEqual(\n        expect.objectContaining({\n          statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\n          message: 'Erro específico do servidor',\n          path: '/api/test',\n        }),\n      );\n\n      // Verificar se o erro foi registrado\n      expect(mockLoggingService.error).toHaveBeenCalled();\n      const errorCall = mockLoggingService.error.mock.calls[0];\n      expect(errorCall[0]).toContain('Exceção capturada');\n      expect(errorCall[0]).toContain('PUT');\n      expect(errorCall[0]).toContain('/api/test');\n      expect(errorCall[2]).toBe('ExceptionFilter');\n    });\n\n    it('deve lidar com exceções em ambiente de produção', () => {\n      // Salvar o ambiente original\n      const originalEnv = process.env.NODE_ENV;\n\n      // Definir o ambiente como produção\n      process.env.NODE_ENV = 'production';\n\n      // Mock de uma exceção interna\n      const exception = new Error('Detalhes sensíveis do erro');\n\n      // Mock da resposta\n      const mockResponse = {\n        status: jest.fn().mockReturnThis(),\n        json: jest.fn(),\n      } as unknown as Response;\n\n      // Mock da requisição\n      const mockRequest = {\n        url: '/api/test',\n        method: 'DELETE',\n        ip: '127.0.0.1',\n        headers: {},\n      } as unknown as Request;\n\n      // Mock do host de argumentos\n      const mockArgumentsHost = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n        }),\n      } as unknown as ArgumentsHost;\n\n      // Executar o filtro\n      filter.catch(exception, mockArgumentsHost);\n\n      // Verificar se o status e o corpo da resposta foram definidos corretamente\n      // Em produção, não devemos expor detalhes do erro\n      expect(mockResponse.status).toHaveBeenCalledWith(\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n      expect(mockResponse.json).toHaveBeenCalled();\n\n      // Capturar o argumento passado para json\n      const jsonArg = (mockResponse.json as jest.Mock).mock.calls[0][0];\n      expect(jsonArg).toEqual(\n        expect.objectContaining({\n          statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\n          message: 'Erro interno do servidor',\n          path: '/api/test',\n        }),\n      );\n\n      // Verificar se o erro foi registrado com os detalhes completos\n      expect(mockLoggingService.error).toHaveBeenCalled();\n      const errorCall = mockLoggingService.error.mock.calls[0];\n      expect(errorCall[0]).toContain('Exceção capturada');\n      expect(errorCall[0]).toContain('DELETE');\n      expect(errorCall[0]).toContain('/api/test');\n      expect(errorCall[2]).toBe('ExceptionFilter');\n\n      // Restaurar o ambiente original\n      process.env.NODE_ENV = originalEnv;\n    });\n  });\n});\n"],"version":3}