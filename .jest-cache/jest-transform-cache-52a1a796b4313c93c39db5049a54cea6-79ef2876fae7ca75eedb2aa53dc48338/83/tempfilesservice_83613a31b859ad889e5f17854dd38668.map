{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\services\\temp-files.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\services\\temp-files.service.ts"],"sourcesContent":["import { Injectable, OnModuleInit, Logger } from '@nestjs/common';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\n\n/**\n * Serviço de Gerenciamento de Arquivos Temporários\n *\n * Responsável por criar, gerenciar e limpar arquivos temporários\n * utilizados durante a geração de relatórios.\n */\n@Injectable()\nexport class TempFilesService implements OnModuleInit {\n  [x: string]: any;\n  private readonly logger = new Logger(TempFilesService.name);\n  private readonly tempDir: string;\n  private readonly intervalMs = 3600000; // 1 hora\n\n  constructor() {\n    this.tempDir = path.join(os.tmpdir(), 'pgben-relatorios');\n    this.logger.log(`Diretório temporário configurado: ${this.tempDir}`);\n  }\n\n  /**\n   * Inicialização do serviço\n   */\n  onModuleInit() {\n    // Criar diretório se não existir\n    if (!fs.existsSync(this.tempDir)) {\n      fs.mkdirSync(this.tempDir, { recursive: true });\n      this.logger.log(`Diretório temporário criado: ${this.tempDir}`);\n    }\n\n    // Agendar limpeza periódica\n    setInterval(() => this.limparArquivosAntigos(), this.intervalMs);\n    this.logger.log(\n      `Limpeza periódica agendada a cada ${this.intervalMs / 1000 / 60} minutos`,\n    );\n\n    // Executar limpeza inicial\n    this.limparArquivosAntigos();\n  }\n\n  /**\n   * Obtém caminho para um arquivo temporário\n   * @param prefixo Prefixo para o nome do arquivo\n   * @param extensao Extensão do arquivo\n   * @returns Caminho completo para o arquivo temporário\n   */\n  getTempFilePath(prefixo: string, extensao: string): string {\n    const fileName = `${prefixo}-${Date.now()}.${extensao}`;\n    return path.join(this.tempDir, fileName);\n  }\n\n  /**\n   * Cria arquivo temporário e retorna o caminho\n   * @param prefixo Prefixo para o nome do arquivo\n   * @param extensao Extensão do arquivo\n   * @returns Caminho do arquivo temporário\n   */\n  createTempFile(prefixo: string, extensao: string): string {\n    const filePath = this.getTempFilePath(prefixo, extensao);\n    fs.writeFileSync(filePath, ''); // Cria o arquivo vazio\n    return filePath;\n  }\n\n  /**\n   * Limpa arquivos temporários antigos\n   * Remove arquivos com mais de 24 horas\n   */\n  limparArquivosAntigos(): void {\n    try {\n      if (!fs.existsSync(this.tempDir)) {\n        return;\n      }\n\n      const files = fs.readdirSync(this.tempDir);\n      const now = Date.now();\n      let removidos = 0;\n\n      for (const file of files) {\n        const filePath = path.join(this.tempDir, file);\n        const stats = fs.statSync(filePath);\n\n        // Remover arquivos com mais de 24 horas\n        if (now - stats.mtimeMs > 86400000) {\n          try {\n            fs.unlinkSync(filePath);\n            removidos++;\n          } catch (error) {\n            this.logger.warn(\n              `Erro ao remover arquivo temporário ${file}: ${error.message}`,\n            );\n          }\n        }\n      }\n\n      if (removidos > 0) {\n        this.logger.log(\n          `${removidos} arquivos temporários antigos foram removidos`,\n        );\n      }\n    } catch (error) {\n      this.logger.error(\n        `Erro ao limpar arquivos temporários: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Lê arquivo temporário para buffer e remove o arquivo\n   * @param filePath Caminho do arquivo temporário\n   * @returns Buffer com o conteúdo do arquivo\n   */\n  readAndRemove(filePath: string): Buffer {\n    try {\n      if (!fs.existsSync(filePath)) {\n        throw new Error(`Arquivo temporário não encontrado: ${filePath}`);\n      }\n\n      const buffer = fs.readFileSync(filePath);\n\n      try {\n        fs.unlinkSync(filePath);\n      } catch (error) {\n        this.logger.warn(\n          `Erro ao remover arquivo temporário ${filePath}: ${error.message}`,\n        );\n      }\n\n      return buffer;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao ler e remover arquivo temporário: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n}\n"],"version":3}