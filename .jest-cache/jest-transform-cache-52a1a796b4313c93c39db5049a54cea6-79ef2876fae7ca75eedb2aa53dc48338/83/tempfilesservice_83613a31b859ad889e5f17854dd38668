765638710b44bff836e6582e3fb8c561
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TempFilesService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TempFilesService = void 0;
const common_1 = require("@nestjs/common");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
/**
 * Serviço de Gerenciamento de Arquivos Temporários
 *
 * Responsável por criar, gerenciar e limpar arquivos temporários
 * utilizados durante a geração de relatórios.
 */
let TempFilesService = TempFilesService_1 = class TempFilesService {
    logger = new common_1.Logger(TempFilesService_1.name);
    tempDir;
    intervalMs = 3600000; // 1 hora
    constructor() {
        this.tempDir = path.join(os.tmpdir(), 'pgben-relatorios');
        this.logger.log(`Diretório temporário configurado: ${this.tempDir}`);
    }
    /**
     * Inicialização do serviço
     */
    onModuleInit() {
        // Criar diretório se não existir
        if (!fs.existsSync(this.tempDir)) {
            fs.mkdirSync(this.tempDir, { recursive: true });
            this.logger.log(`Diretório temporário criado: ${this.tempDir}`);
        }
        // Agendar limpeza periódica
        setInterval(() => this.limparArquivosAntigos(), this.intervalMs);
        this.logger.log(`Limpeza periódica agendada a cada ${this.intervalMs / 1000 / 60} minutos`);
        // Executar limpeza inicial
        this.limparArquivosAntigos();
    }
    /**
     * Obtém caminho para um arquivo temporário
     * @param prefixo Prefixo para o nome do arquivo
     * @param extensao Extensão do arquivo
     * @returns Caminho completo para o arquivo temporário
     */
    getTempFilePath(prefixo, extensao) {
        const fileName = `${prefixo}-${Date.now()}.${extensao}`;
        return path.join(this.tempDir, fileName);
    }
    /**
     * Cria arquivo temporário e retorna o caminho
     * @param prefixo Prefixo para o nome do arquivo
     * @param extensao Extensão do arquivo
     * @returns Caminho do arquivo temporário
     */
    createTempFile(prefixo, extensao) {
        const filePath = this.getTempFilePath(prefixo, extensao);
        fs.writeFileSync(filePath, ''); // Cria o arquivo vazio
        return filePath;
    }
    /**
     * Limpa arquivos temporários antigos
     * Remove arquivos com mais de 24 horas
     */
    limparArquivosAntigos() {
        try {
            if (!fs.existsSync(this.tempDir)) {
                return;
            }
            const files = fs.readdirSync(this.tempDir);
            const now = Date.now();
            let removidos = 0;
            for (const file of files) {
                const filePath = path.join(this.tempDir, file);
                const stats = fs.statSync(filePath);
                // Remover arquivos com mais de 24 horas
                if (now - stats.mtimeMs > 86400000) {
                    try {
                        fs.unlinkSync(filePath);
                        removidos++;
                    }
                    catch (error) {
                        this.logger.warn(`Erro ao remover arquivo temporário ${file}: ${error.message}`);
                    }
                }
            }
            if (removidos > 0) {
                this.logger.log(`${removidos} arquivos temporários antigos foram removidos`);
            }
        }
        catch (error) {
            this.logger.error(`Erro ao limpar arquivos temporários: ${error.message}`);
        }
    }
    /**
     * Lê arquivo temporário para buffer e remove o arquivo
     * @param filePath Caminho do arquivo temporário
     * @returns Buffer com o conteúdo do arquivo
     */
    readAndRemove(filePath) {
        try {
            if (!fs.existsSync(filePath)) {
                throw new Error(`Arquivo temporário não encontrado: ${filePath}`);
            }
            const buffer = fs.readFileSync(filePath);
            try {
                fs.unlinkSync(filePath);
            }
            catch (error) {
                this.logger.warn(`Erro ao remover arquivo temporário ${filePath}: ${error.message}`);
            }
            return buffer;
        }
        catch (error) {
            this.logger.error(`Erro ao ler e remover arquivo temporário: ${error.message}`);
            throw error;
        }
    }
};
exports.TempFilesService = TempFilesService;
exports.TempFilesService = TempFilesService = TempFilesService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], TempFilesService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,