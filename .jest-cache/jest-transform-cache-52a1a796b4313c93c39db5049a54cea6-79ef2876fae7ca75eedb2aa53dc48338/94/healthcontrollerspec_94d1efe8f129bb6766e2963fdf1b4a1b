dd8eb0d62e0576c728e30f3319ac26ad
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const health_controller_1 = require("../health.controller");
const terminus_1 = require("@nestjs/terminus");
const axios_1 = require("@nestjs/axios");
const terminus_2 = require("@nestjs/terminus");
/**
 * Testes unitários para o controlador de saúde
 *
 * Verifica o funcionamento dos endpoints de verificação de saúde
 * da aplicação, incluindo verificações de banco de dados, disco e memória
 */
describe('HealthController', () => {
    let controller;
    let healthCheckService;
    let diskHealthIndicator;
    let memoryHealthIndicator;
    // Mocks para os serviços de verificação de saúde
    const mockHealthCheckService = {
        check: jest.fn(),
    };
    const mockDiskHealthIndicator = {
        checkStorage: jest.fn(),
    };
    const mockMemoryHealthIndicator = {
        checkHeap: jest.fn(),
        checkRSS: jest.fn(),
    };
    // Mock para o TypeOrmHealthIndicator
    const mockTypeOrmHealthIndicator = {
        pingCheck: jest.fn(),
    };
    beforeEach(async () => {
        jest.clearAllMocks();
        const module = await testing_1.Test.createTestingModule({
            imports: [terminus_1.TerminusModule, axios_1.HttpModule],
            controllers: [health_controller_1.HealthController],
            providers: [
                {
                    provide: terminus_2.HealthCheckService,
                    useValue: mockHealthCheckService,
                },
                {
                    provide: terminus_2.DiskHealthIndicator,
                    useValue: mockDiskHealthIndicator,
                },
                {
                    provide: terminus_2.MemoryHealthIndicator,
                    useValue: mockMemoryHealthIndicator,
                },
                {
                    provide: 'TypeOrmHealthIndicator',
                    useValue: mockTypeOrmHealthIndicator,
                },
            ],
        }).compile();
        controller = module.get(health_controller_1.HealthController);
        healthCheckService = module.get(terminus_2.HealthCheckService);
        diskHealthIndicator = module.get(terminus_2.DiskHealthIndicator);
        memoryHealthIndicator = module.get(terminus_2.MemoryHealthIndicator);
    });
    it('deve ser definido', () => {
        expect(controller).toBeDefined();
    });
    describe('check', () => {
        it('deve verificar a saúde do banco de dados', async () => {
            const mockHealthCheckResult = {
                status: 'ok',
                info: {
                    database: {
                        status: 'up',
                    },
                },
            };
            mockHealthCheckService.check.mockResolvedValue(mockHealthCheckResult);
            const result = await controller.check();
            expect(result).toEqual(mockHealthCheckResult);
            expect(mockHealthCheckService.check).toHaveBeenCalled();
            expect(mockTypeOrmHealthIndicator.pingCheck).not.toHaveBeenCalled(); // Chamado dentro da função check
        });
    });
    describe('checkSystem', () => {
        it('deve verificar o espaço em disco e memória', async () => {
            const mockHealthCheckResult = {
                status: 'ok',
                info: {
                    disk: {
                        status: 'up',
                        details: {
                            free: 100000000,
                            total: 500000000,
                        },
                    },
                    memory_heap: {
                        status: 'up',
                    },
                    memory_rss: {
                        status: 'up',
                    },
                },
            };
            mockHealthCheckService.check.mockResolvedValue(mockHealthCheckResult);
            const result = await controller.checkSystem();
            expect(result).toEqual(mockHealthCheckResult);
            expect(mockHealthCheckService.check).toHaveBeenCalled();
            expect(mockDiskHealthIndicator.checkStorage).not.toHaveBeenCalled(); // Chamado dentro da função check
            expect(mockMemoryHealthIndicator.checkHeap).not.toHaveBeenCalled(); // Chamado dentro da função check
            expect(mockMemoryHealthIndicator.checkRSS).not.toHaveBeenCalled(); // Chamado dentro da função check
        });
    });
    describe('checkDatabase', () => {
        it('deve verificar a conexão com o banco de dados', async () => {
            const mockHealthCheckResult = {
                status: 'ok',
                info: {
                    database: {
                        status: 'up',
                    },
                },
            };
            mockHealthCheckService.check.mockResolvedValue(mockHealthCheckResult);
            const result = await controller.checkDatabase();
            expect(result).toEqual(mockHealthCheckResult);
            expect(mockHealthCheckService.check).toHaveBeenCalled();
            expect(mockTypeOrmHealthIndicator.pingCheck).not.toHaveBeenCalled(); // Chamado dentro da função check
        });
    });
    describe('ping', () => {
        it('deve retornar status ok e informações básicas', async () => {
            const result = controller.ping();
            expect(result).toHaveProperty('status', 'ok');
            expect(result).toHaveProperty('timestamp');
            expect(result).toHaveProperty('service', 'pgben-api');
            expect(result).toHaveProperty('version');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,