{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\middlewares\\auditoria.middleware.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\middlewares\\auditoria.middleware.ts"],"sourcesContent":["import { Injectable, NestMiddleware, Logger } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { AuditoriaService } from '../services/auditoria.service';\nimport { AuditoriaQueueService } from '../services/auditoria-queue.service';\nimport { TipoOperacao } from '../../../enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';\n\n/**\n * Middleware de Auditoria - VERSÃO CORRIGIDA\n *\n * Responsável por interceptar as requisições HTTP e registrar logs de auditoria\n * automaticamente, garantindo a rastreabilidade das operações realizadas no sistema.\n */\n@Injectable()\nexport class AuditoriaMiddleware implements NestMiddleware {\n  private readonly logger = new Logger(AuditoriaMiddleware.name);\n\n  // Lista de endpoints que não devem ser auditados\n  private readonly excludedEndpoints = [\n    '/api/health',\n    '/api/metrics',\n    '/api-docs',\n    '/api/v1/auth/login',\n    '/api/v1/auditoria/monitoramento', // Evitar recursão\n  ];\n\n  // Lista de campos sensíveis\n  private readonly camposSensiveis = [\n    'cpf',\n    'rg',\n    'data_nascimento',\n    'renda_familiar',\n    'telefone',\n    'endereco',\n    'email',\n    'senha',\n    'numero_nis',\n    'composicao_familiar',\n    'vulnerabilidades',\n    'documentos',\n  ];\n\n  constructor(\n    private readonly auditoriaService: AuditoriaService,\n    private readonly auditoriaQueueService: AuditoriaQueueService,\n  ) {}\n\n  /**\n   * Método principal do middleware - VERSÃO CORRIGIDA\n   */\n  use(req: Request, res: Response, next: NextFunction) {\n    // ← CORREÇÃO: Remover async/await da assinatura principal\n    \n    // Verifica se deve auditar ANTES de fazer qualquer coisa\n    if (!this.shouldAudit(req)) {\n      return next(); // ← CORREÇÃO: Return direto sem processamento\n    }\n\n    try {\n      // Captura dados da requisição\n      const { method, originalUrl, body, user } = req;\n      const ip = req.ip || req.connection.remoteAddress || 'desconhecido'; // ← CORREÇÃO: Garante string\n      const userAgent = req.headers['user-agent'] as string;\n      const tipoOperacao = this.mapHttpMethodToOperationType(method);\n      const { entidade, entidadeId } = this.extractEntityInfo(originalUrl);\n      const dadosSensiveis = this.detectarDadosSensiveis(body);\n\n      // ← CORREÇÃO: Usar uma abordagem não-intrusiva para capturar resposta\n      let responseBody: any = undefined;\n\n      // Intercepta res.json de forma mais segura\n      const originalJson = res.json;\n      res.json = function(body) {\n        responseBody = body;\n        return originalJson.call(this, body);\n      };\n\n      // ← CORREÇÃO: Configurar o listener ANTES de chamar next()\n      res.on('finish', () => {\n        // ← CORREÇÃO: Usar setImmediate para não bloquear o ciclo de evento\n        setImmediate(() => {\n          this.processarAuditoriaAsync(\n            method,\n            originalUrl,\n            body,\n            responseBody,\n            user,\n            ip,\n            userAgent,\n            tipoOperacao,\n            entidade,\n            entidadeId,\n            dadosSensiveis,\n            res.statusCode\n          ).catch(error => {\n            // ← CORREÇÃO: Capturar erros sem travar a aplicação\n            this.logger.error(\n              `Erro ao processar auditoria: ${error.message}`,\n              error.stack,\n            );\n          });\n        });\n      });\n\n      // ← CORREÇÃO: Chamar next() após configurar tudo\n      next();\n\n    } catch (error) {\n      // ← CORREÇÃO: Em caso de erro, apenas logar e continuar\n      this.logger.error(\n        `Erro no middleware de auditoria: ${error.message}`,\n        error.stack,\n      );\n      next(); // Continuar mesmo com erro\n    }\n  }\n\n  /**\n   * Processa a auditoria de forma assíncrona e isolada\n   */\n  private async processarAuditoriaAsync(\n    method: string,\n    originalUrl: string,\n    body: any,\n    responseBody: any,\n    user: any,\n    ip: string,\n    userAgent: string,\n    tipoOperacao: TipoOperacao,\n    entidade: string,\n    entidadeId: string | undefined,\n    dadosSensiveis: string[],\n    statusCode: number\n  ): Promise<void> {\n    try {\n      // Só registra operações bem-sucedidas\n      if (statusCode < 200 || statusCode >= 300) {\n        return;\n      }\n\n      // ← CORREÇÃO: Criar DTO de forma simples, sem plainToInstance\n      const logAuditoriaDto: CreateLogAuditoriaDto = {\n        tipo_operacao: tipoOperacao,\n        entidade_afetada: entidade,\n        entidade_id: entidadeId || '',\n        dados_anteriores: (method === 'PUT' || method === 'PATCH') ? body : undefined,\n        dados_novos: (method === 'POST' || method === 'PUT' || method === 'PATCH') ? responseBody : undefined,\n        usuario_id: user?.id,\n        ip_origem: ip, // ← Agora sempre será string\n        user_agent: userAgent,\n        endpoint: originalUrl,\n        metodo_http: method,\n        descricao: `${method} em ${entidade}${entidadeId ? ` (ID: ${entidadeId})` : ''}`,\n        dados_sensiveis_acessados: dadosSensiveis.length > 0 ? dadosSensiveis : undefined,\n        validar: function (validationGroup?: string): void {\n          throw new Error('Function not implemented.');\n        }\n      };\n\n      // ← CORREÇÃO: Usar Promise.allSettled para não travar se uma falhar\n      const promises = [\n        this.auditoriaQueueService.enfileirarLogAuditoria(logAuditoriaDto)\n      ];\n\n      // Se houver dados sensíveis, adiciona à fila\n      if (dadosSensiveis.length > 0 && user?.id) {\n        promises.push(\n          this.auditoriaQueueService.enfileirarAcessoDadosSensiveis(\n            user.id,\n            entidade,\n            entidadeId || '',\n            dadosSensiveis,\n            ip, // ← Agora sempre será string\n            userAgent,\n            originalUrl,\n            method,\n          )\n        );\n      }\n\n      // Executa todas as operações em paralelo\n      const results = await Promise.allSettled(promises);\n      \n      // Loga erros das operações que falharam\n      results.forEach((result, index) => {\n        if (result.status === 'rejected') {\n          this.logger.error(\n            `Erro na operação de auditoria ${index}: ${result.reason.message}`,\n            result.reason.stack,\n          );\n        }\n      });\n\n    } catch (error) {\n      this.logger.error(\n        `Erro crítico no processamento de auditoria: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Verifica se o endpoint deve ser auditado\n   */\n  private shouldAudit(req: Request): boolean {\n    const { originalUrl } = req;\n\n    // Não audita endpoints excluídos\n    for (const excluded of this.excludedEndpoints) {\n      if (originalUrl.startsWith(excluded)) {\n        return false;\n      }\n    }\n\n    // Não audita requisições OPTIONS (CORS)\n    if (req.method === 'OPTIONS') {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Mapeia o método HTTP para o tipo de operação de auditoria\n   */\n  private mapHttpMethodToOperationType(method: string): TipoOperacao {\n    switch (method.toUpperCase()) {\n      case 'POST':\n        return TipoOperacao.CREATE;\n      case 'GET':\n        return TipoOperacao.READ;\n      case 'PUT':\n      case 'PATCH':\n        return TipoOperacao.UPDATE;\n      case 'DELETE':\n        return TipoOperacao.DELETE;\n      default:\n        return TipoOperacao.READ;\n    }\n  }\n\n  /**\n   * Extrai informações da entidade com base na URL\n   */\n  private extractEntityInfo(url: string): {\n    entidade: string;\n    entidadeId: string | undefined;\n  } {\n    // Remove o prefixo da API\n    const path = url.replace(/^\\/api\\/v\\d+\\//, '');\n\n    // Divide o caminho em segmentos\n    const segments = path.split('/').filter(Boolean);\n\n    if (segments.length === 0) {\n      return { entidade: 'Desconhecido', entidadeId: undefined };\n    }\n\n    // O primeiro segmento geralmente é o nome da entidade\n    const entidade = this.normalizeEntityName(segments[0]);\n\n    // Se houver um segundo segmento e for um UUID, é o ID da entidade\n    let entidadeId: string | undefined = undefined;\n    if (segments.length > 1) {\n      const potentialId = segments[1];\n      // Verifica se parece um UUID ou ID numérico\n      if (\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(\n          potentialId,\n        ) ||\n        /^\\d+$/.test(potentialId)\n      ) {\n        entidadeId = potentialId;\n      }\n    }\n\n    return { entidade, entidadeId };\n  }\n\n  /**\n   * Normaliza o nome da entidade para um formato padronizado\n   */\n  private normalizeEntityName(name: string): string {\n    // Remove plural e converte para formato PascalCase\n    const singular = name.endsWith('s') ? name.slice(0, -1) : name;\n    return singular.charAt(0).toUpperCase() + singular.slice(1);\n  }\n\n  /**\n   * Detecta campos sensíveis no corpo da requisição\n   */\n  private detectarDadosSensiveis(body: any): string[] {\n    if (!body || typeof body !== 'object') {\n      return [];\n    }\n\n    const camposEncontrados = new Set<string>();\n\n    // Função recursiva para procurar campos sensíveis\n    const procurarCamposSensiveis = (obj: any, caminho = '') => {\n      if (!obj || typeof obj !== 'object') {\n        return;\n      }\n\n      for (const [chave, valor] of Object.entries(obj)) {\n        const caminhoCompleto = caminho ? `${caminho}.${chave}` : chave;\n\n        // Verifica se o campo atual é sensível\n        if (this.camposSensiveis.includes(chave) && valor) {\n          camposEncontrados.add(chave);\n        }\n\n        // Se for um objeto ou array, continua a busca recursivamente\n        if (valor && typeof valor === 'object') {\n          procurarCamposSensiveis(valor, caminhoCompleto);\n        }\n      }\n    };\n\n    procurarCamposSensiveis(body);\n\n    return Array.from(camposEncontrados);\n  }\n}"],"version":3}