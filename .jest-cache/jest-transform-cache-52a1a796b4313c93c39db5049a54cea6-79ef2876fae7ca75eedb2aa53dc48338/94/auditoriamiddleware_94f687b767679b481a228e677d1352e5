425f27af608350ff1051ed4405915b52
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AuditoriaMiddleware_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaMiddleware = void 0;
const common_1 = require("@nestjs/common");
const auditoria_service_1 = require("../services/auditoria.service");
const auditoria_queue_service_1 = require("../services/auditoria-queue.service");
const tipo_operacao_enum_1 = require("../../../enums/tipo-operacao.enum");
/**
 * Middleware de Auditoria - VERSÃO CORRIGIDA
 *
 * Responsável por interceptar as requisições HTTP e registrar logs de auditoria
 * automaticamente, garantindo a rastreabilidade das operações realizadas no sistema.
 */
let AuditoriaMiddleware = AuditoriaMiddleware_1 = class AuditoriaMiddleware {
    auditoriaService;
    auditoriaQueueService;
    logger = new common_1.Logger(AuditoriaMiddleware_1.name);
    // Lista de endpoints que não devem ser auditados
    excludedEndpoints = [
        '/api/health',
        '/api/metrics',
        '/api-docs',
        '/api/v1/auth/login',
        '/api/v1/auditoria/monitoramento', // Evitar recursão
    ];
    // Lista de campos sensíveis
    camposSensiveis = [
        'cpf',
        'rg',
        'data_nascimento',
        'renda_familiar',
        'telefone',
        'endereco',
        'email',
        'senha',
        'numero_nis',
        'composicao_familiar',
        'vulnerabilidades',
        'documentos',
    ];
    constructor(auditoriaService, auditoriaQueueService) {
        this.auditoriaService = auditoriaService;
        this.auditoriaQueueService = auditoriaQueueService;
    }
    /**
     * Método principal do middleware - VERSÃO CORRIGIDA
     */
    use(req, res, next) {
        // ← CORREÇÃO: Remover async/await da assinatura principal
        // Verifica se deve auditar ANTES de fazer qualquer coisa
        if (!this.shouldAudit(req)) {
            return next(); // ← CORREÇÃO: Return direto sem processamento
        }
        try {
            // Captura dados da requisição
            const { method, originalUrl, body, user } = req;
            const ip = req.ip || req.connection.remoteAddress || 'desconhecido'; // ← CORREÇÃO: Garante string
            const userAgent = req.headers['user-agent'];
            const tipoOperacao = this.mapHttpMethodToOperationType(method);
            const { entidade, entidadeId } = this.extractEntityInfo(originalUrl);
            const dadosSensiveis = this.detectarDadosSensiveis(body);
            // ← CORREÇÃO: Usar uma abordagem não-intrusiva para capturar resposta
            let responseBody = undefined;
            // Intercepta res.json de forma mais segura
            const originalJson = res.json;
            res.json = function (body) {
                responseBody = body;
                return originalJson.call(this, body);
            };
            // ← CORREÇÃO: Configurar o listener ANTES de chamar next()
            res.on('finish', () => {
                // ← CORREÇÃO: Usar setImmediate para não bloquear o ciclo de evento
                setImmediate(() => {
                    this.processarAuditoriaAsync(method, originalUrl, body, responseBody, user, ip, userAgent, tipoOperacao, entidade, entidadeId, dadosSensiveis, res.statusCode).catch(error => {
                        // ← CORREÇÃO: Capturar erros sem travar a aplicação
                        this.logger.error(`Erro ao processar auditoria: ${error.message}`, error.stack);
                    });
                });
            });
            // ← CORREÇÃO: Chamar next() após configurar tudo
            next();
        }
        catch (error) {
            // ← CORREÇÃO: Em caso de erro, apenas logar e continuar
            this.logger.error(`Erro no middleware de auditoria: ${error.message}`, error.stack);
            next(); // Continuar mesmo com erro
        }
    }
    /**
     * Processa a auditoria de forma assíncrona e isolada
     */
    async processarAuditoriaAsync(method, originalUrl, body, responseBody, user, ip, userAgent, tipoOperacao, entidade, entidadeId, dadosSensiveis, statusCode) {
        try {
            // Só registra operações bem-sucedidas
            if (statusCode < 200 || statusCode >= 300) {
                return;
            }
            // ← CORREÇÃO: Criar DTO de forma simples, sem plainToInstance
            const logAuditoriaDto = {
                tipo_operacao: tipoOperacao,
                entidade_afetada: entidade,
                entidade_id: entidadeId || '',
                dados_anteriores: (method === 'PUT' || method === 'PATCH') ? body : undefined,
                dados_novos: (method === 'POST' || method === 'PUT' || method === 'PATCH') ? responseBody : undefined,
                usuario_id: user?.id,
                ip_origem: ip, // ← Agora sempre será string
                user_agent: userAgent,
                endpoint: originalUrl,
                metodo_http: method,
                descricao: `${method} em ${entidade}${entidadeId ? ` (ID: ${entidadeId})` : ''}`,
                dados_sensiveis_acessados: dadosSensiveis.length > 0 ? dadosSensiveis : undefined,
                validar: function (validationGroup) {
                    throw new Error('Function not implemented.');
                }
            };
            // ← CORREÇÃO: Usar Promise.allSettled para não travar se uma falhar
            const promises = [
                this.auditoriaQueueService.enfileirarLogAuditoria(logAuditoriaDto)
            ];
            // Se houver dados sensíveis, adiciona à fila
            if (dadosSensiveis.length > 0 && user?.id) {
                promises.push(this.auditoriaQueueService.enfileirarAcessoDadosSensiveis(user.id, entidade, entidadeId || '', dadosSensiveis, ip, // ← Agora sempre será string
                userAgent, originalUrl, method));
            }
            // Executa todas as operações em paralelo
            const results = await Promise.allSettled(promises);
            // Loga erros das operações que falharam
            results.forEach((result, index) => {
                if (result.status === 'rejected') {
                    this.logger.error(`Erro na operação de auditoria ${index}: ${result.reason.message}`, result.reason.stack);
                }
            });
        }
        catch (error) {
            this.logger.error(`Erro crítico no processamento de auditoria: ${error.message}`, error.stack);
        }
    }
    /**
     * Verifica se o endpoint deve ser auditado
     */
    shouldAudit(req) {
        const { originalUrl } = req;
        // Não audita endpoints excluídos
        for (const excluded of this.excludedEndpoints) {
            if (originalUrl.startsWith(excluded)) {
                return false;
            }
        }
        // Não audita requisições OPTIONS (CORS)
        if (req.method === 'OPTIONS') {
            return false;
        }
        return true;
    }
    /**
     * Mapeia o método HTTP para o tipo de operação de auditoria
     */
    mapHttpMethodToOperationType(method) {
        switch (method.toUpperCase()) {
            case 'POST':
                return tipo_operacao_enum_1.TipoOperacao.CREATE;
            case 'GET':
                return tipo_operacao_enum_1.TipoOperacao.READ;
            case 'PUT':
            case 'PATCH':
                return tipo_operacao_enum_1.TipoOperacao.UPDATE;
            case 'DELETE':
                return tipo_operacao_enum_1.TipoOperacao.DELETE;
            default:
                return tipo_operacao_enum_1.TipoOperacao.READ;
        }
    }
    /**
     * Extrai informações da entidade com base na URL
     */
    extractEntityInfo(url) {
        // Remove o prefixo da API
        const path = url.replace(/^\/api\/v\d+\//, '');
        // Divide o caminho em segmentos
        const segments = path.split('/').filter(Boolean);
        if (segments.length === 0) {
            return { entidade: 'Desconhecido', entidadeId: undefined };
        }
        // O primeiro segmento geralmente é o nome da entidade
        const entidade = this.normalizeEntityName(segments[0]);
        // Se houver um segundo segmento e for um UUID, é o ID da entidade
        let entidadeId = undefined;
        if (segments.length > 1) {
            const potentialId = segments[1];
            // Verifica se parece um UUID ou ID numérico
            if (/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(potentialId) ||
                /^\d+$/.test(potentialId)) {
                entidadeId = potentialId;
            }
        }
        return { entidade, entidadeId };
    }
    /**
     * Normaliza o nome da entidade para um formato padronizado
     */
    normalizeEntityName(name) {
        // Remove plural e converte para formato PascalCase
        const singular = name.endsWith('s') ? name.slice(0, -1) : name;
        return singular.charAt(0).toUpperCase() + singular.slice(1);
    }
    /**
     * Detecta campos sensíveis no corpo da requisição
     */
    detectarDadosSensiveis(body) {
        if (!body || typeof body !== 'object') {
            return [];
        }
        const camposEncontrados = new Set();
        // Função recursiva para procurar campos sensíveis
        const procurarCamposSensiveis = (obj, caminho = '') => {
            if (!obj || typeof obj !== 'object') {
                return;
            }
            for (const [chave, valor] of Object.entries(obj)) {
                const caminhoCompleto = caminho ? `${caminho}.${chave}` : chave;
                // Verifica se o campo atual é sensível
                if (this.camposSensiveis.includes(chave) && valor) {
                    camposEncontrados.add(chave);
                }
                // Se for um objeto ou array, continua a busca recursivamente
                if (valor && typeof valor === 'object') {
                    procurarCamposSensiveis(valor, caminhoCompleto);
                }
            }
        };
        procurarCamposSensiveis(body);
        return Array.from(camposEncontrados);
    }
};
exports.AuditoriaMiddleware = AuditoriaMiddleware;
exports.AuditoriaMiddleware = AuditoriaMiddleware = AuditoriaMiddleware_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof auditoria_service_1.AuditoriaService !== "undefined" && auditoria_service_1.AuditoriaService) === "function" ? _a : Object, typeof (_b = typeof auditoria_queue_service_1.AuditoriaQueueService !== "undefined" && auditoria_queue_service_1.AuditoriaQueueService) === "function" ? _b : Object])
], AuditoriaMiddleware);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,