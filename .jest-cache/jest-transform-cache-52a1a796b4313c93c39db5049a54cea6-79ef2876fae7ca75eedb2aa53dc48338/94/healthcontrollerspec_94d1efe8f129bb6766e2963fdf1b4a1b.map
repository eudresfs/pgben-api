{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\health.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,4DAAwD;AACxD,+CAAkD;AAClD,yCAA2C;AAC3C,+CAI0B;AAE1B;;;;;GAKG;AACH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,UAA4B,CAAC;IACjC,IAAI,kBAAsC,CAAC;IAC3C,IAAI,mBAAwC,CAAC;IAC7C,IAAI,qBAA4C,CAAC;IAEjD,iDAAiD;IACjD,MAAM,sBAAsB,GAAG;QAC7B,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;KACjB,CAAC;IAEF,MAAM,uBAAuB,GAAG;QAC9B,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;KACxB,CAAC;IAEF,MAAM,yBAAyB,GAAG;QAChC,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;QACpB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;KACpB,CAAC;IAEF,qCAAqC;IACrC,MAAM,0BAA0B,GAAG;QACjC,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;KACrB,CAAC;IAEF,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,OAAO,EAAE,CAAC,yBAAc,EAAE,kBAAU,CAAC;YACrC,WAAW,EAAE,CAAC,oCAAgB,CAAC;YAC/B,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,6BAAkB;oBAC3B,QAAQ,EAAE,sBAAsB;iBACjC;gBACD;oBACE,OAAO,EAAE,8BAAmB;oBAC5B,QAAQ,EAAE,uBAAuB;iBAClC;gBACD;oBACE,OAAO,EAAE,gCAAqB;oBAC9B,QAAQ,EAAE,yBAAyB;iBACpC;gBACD;oBACE,OAAO,EAAE,wBAAwB;oBACjC,QAAQ,EAAE,0BAA0B;iBACrC;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAmB,oCAAgB,CAAC,CAAC;QAC5D,kBAAkB,GAAG,MAAM,CAAC,GAAG,CAAqB,6BAAkB,CAAC,CAAC;QACxE,mBAAmB,GAAG,MAAM,CAAC,GAAG,CAAsB,8BAAmB,CAAC,CAAC;QAC3E,qBAAqB,GAAG,MAAM,CAAC,GAAG,CAChC,gCAAqB,CACtB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,qBAAqB,GAAG;gBAC5B,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE;oBACJ,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI;qBACb;iBACF;aACF,CAAC;YAEF,sBAAsB,CAAC,KAAK,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;YAExC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;YAC9C,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACxD,MAAM,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,iCAAiC;QACxG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,qBAAqB,GAAG;gBAC5B,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE;oBACJ,IAAI,EAAE;wBACJ,MAAM,EAAE,IAAI;wBACZ,OAAO,EAAE;4BACP,IAAI,EAAE,SAAS;4BACf,KAAK,EAAE,SAAS;yBACjB;qBACF;oBACD,WAAW,EAAE;wBACX,MAAM,EAAE,IAAI;qBACb;oBACD,UAAU,EAAE;wBACV,MAAM,EAAE,IAAI;qBACb;iBACF;aACF,CAAC;YAEF,sBAAsB,CAAC,KAAK,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,EAAE,CAAC;YAE9C,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;YAC9C,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACxD,MAAM,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,iCAAiC;YACtG,MAAM,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,iCAAiC;YACrG,MAAM,CAAC,yBAAyB,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,iCAAiC;QACtG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,qBAAqB,GAAG;gBAC5B,MAAM,EAAE,IAAI;gBACZ,IAAI,EAAE;oBACJ,QAAQ,EAAE;wBACR,MAAM,EAAE,IAAI;qBACb;iBACF;aACF,CAAC;YAEF,sBAAsB,CAAC,KAAK,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,aAAa,EAAE,CAAC;YAEhD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;YAC9C,MAAM,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACxD,MAAM,CAAC,0BAA0B,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC,CAAC,iCAAiC;QACxG,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE;QACpB,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;YAEjC,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC3C,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;YACtD,MAAM,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\health.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HealthController } from '../health.controller';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HttpModule } from '@nestjs/axios';\nimport {\n  DiskHealthIndicator,\n  MemoryHealthIndicator,\n  HealthCheckService,\n} from '@nestjs/terminus';\n\n/**\n * Testes unitários para o controlador de saúde\n *\n * Verifica o funcionamento dos endpoints de verificação de saúde\n * da aplicação, incluindo verificações de banco de dados, disco e memória\n */\ndescribe('HealthController', () => {\n  let controller: HealthController;\n  let healthCheckService: HealthCheckService;\n  let diskHealthIndicator: DiskHealthIndicator;\n  let memoryHealthIndicator: MemoryHealthIndicator;\n\n  // Mocks para os serviços de verificação de saúde\n  const mockHealthCheckService = {\n    check: jest.fn(),\n  };\n\n  const mockDiskHealthIndicator = {\n    checkStorage: jest.fn(),\n  };\n\n  const mockMemoryHealthIndicator = {\n    checkHeap: jest.fn(),\n    checkRSS: jest.fn(),\n  };\n\n  // Mock para o TypeOrmHealthIndicator\n  const mockTypeOrmHealthIndicator = {\n    pingCheck: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [TerminusModule, HttpModule],\n      controllers: [HealthController],\n      providers: [\n        {\n          provide: HealthCheckService,\n          useValue: mockHealthCheckService,\n        },\n        {\n          provide: DiskHealthIndicator,\n          useValue: mockDiskHealthIndicator,\n        },\n        {\n          provide: MemoryHealthIndicator,\n          useValue: mockMemoryHealthIndicator,\n        },\n        {\n          provide: 'TypeOrmHealthIndicator',\n          useValue: mockTypeOrmHealthIndicator,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<HealthController>(HealthController);\n    healthCheckService = module.get<HealthCheckService>(HealthCheckService);\n    diskHealthIndicator = module.get<DiskHealthIndicator>(DiskHealthIndicator);\n    memoryHealthIndicator = module.get<MemoryHealthIndicator>(\n      MemoryHealthIndicator,\n    );\n  });\n\n  it('deve ser definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('check', () => {\n    it('deve verificar a saúde do banco de dados', async () => {\n      const mockHealthCheckResult = {\n        status: 'ok',\n        info: {\n          database: {\n            status: 'up',\n          },\n        },\n      };\n\n      mockHealthCheckService.check.mockResolvedValue(mockHealthCheckResult);\n\n      const result = await controller.check();\n\n      expect(result).toEqual(mockHealthCheckResult);\n      expect(mockHealthCheckService.check).toHaveBeenCalled();\n      expect(mockTypeOrmHealthIndicator.pingCheck).not.toHaveBeenCalled(); // Chamado dentro da função check\n    });\n  });\n\n  describe('checkSystem', () => {\n    it('deve verificar o espaço em disco e memória', async () => {\n      const mockHealthCheckResult = {\n        status: 'ok',\n        info: {\n          disk: {\n            status: 'up',\n            details: {\n              free: 100000000,\n              total: 500000000,\n            },\n          },\n          memory_heap: {\n            status: 'up',\n          },\n          memory_rss: {\n            status: 'up',\n          },\n        },\n      };\n\n      mockHealthCheckService.check.mockResolvedValue(mockHealthCheckResult);\n\n      const result = await controller.checkSystem();\n\n      expect(result).toEqual(mockHealthCheckResult);\n      expect(mockHealthCheckService.check).toHaveBeenCalled();\n      expect(mockDiskHealthIndicator.checkStorage).not.toHaveBeenCalled(); // Chamado dentro da função check\n      expect(mockMemoryHealthIndicator.checkHeap).not.toHaveBeenCalled(); // Chamado dentro da função check\n      expect(mockMemoryHealthIndicator.checkRSS).not.toHaveBeenCalled(); // Chamado dentro da função check\n    });\n  });\n\n  describe('checkDatabase', () => {\n    it('deve verificar a conexão com o banco de dados', async () => {\n      const mockHealthCheckResult = {\n        status: 'ok',\n        info: {\n          database: {\n            status: 'up',\n          },\n        },\n      };\n\n      mockHealthCheckService.check.mockResolvedValue(mockHealthCheckResult);\n\n      const result = await controller.checkDatabase();\n\n      expect(result).toEqual(mockHealthCheckResult);\n      expect(mockHealthCheckService.check).toHaveBeenCalled();\n      expect(mockTypeOrmHealthIndicator.pingCheck).not.toHaveBeenCalled(); // Chamado dentro da função check\n    });\n  });\n\n  describe('ping', () => {\n    it('deve retornar status ok e informações básicas', async () => {\n      const result = controller.ping();\n\n      expect(result).toHaveProperty('status', 'ok');\n      expect(result).toHaveProperty('timestamp');\n      expect(result).toHaveProperty('service', 'pgben-api');\n      expect(result).toHaveProperty('version');\n    });\n  });\n});\n"],"version":3}