{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\parametro.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\parametro.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ParametroRepository } from '../repositories/parametro.repository';\nimport { Parametro } from '../../../entities/parametro.entity';\nimport { ParametroCreateDto } from '../dtos/parametro/parametro-create.dto';\nimport { ParametroUpdateDto } from '../dtos/parametro/parametro-update.dto';\nimport { ParametroResponseDto } from '../dtos/parametro/parametro-response.dto';\nimport { ParametroNaoEncontradoException } from '../exceptions/parametro-nao-encontrado.exception';\nimport { ParametroTipoInvalidoException } from '../exceptions/parametro-tipo-invalido.exception';\nimport { ParametroTipoEnum } from '../../../enums/parametro-tipo.enum';\nimport { ParametroConverter } from '../util/converters';\nimport {\n  ValidationErrorException,\n  InvalidOperationException,\n} from '../../../shared/exceptions';\n\n/**\n * Serviço para gerenciamento de parâmetros do sistema\n *\n * Responsável por:\n * - Operações CRUD para parâmetros\n * - Sistema de cache para otimização\n * - Conversão de tipos dinâmica\n * - Validação de parâmetros\n */\n@Injectable()\nexport class ParametroService {\n  private readonly logger = new Logger(ParametroService.name);\n\n  // Cache em memória para parâmetros (chave -> valor)\n  private cache: Map<string, { valor: any; expiraEm: number }> = new Map();\n\n  // Tempo padrão de expiração do cache em milissegundos (5 minutos)\n  private readonly CACHE_TTL = 5 * 60 * 1000;\n\n  constructor(private readonly parametroRepository: ParametroRepository) {}\n\n  /**\n   * Limpa todo o cache de parâmetros\n   */\n  limparCache(): void {\n    this.cache.clear();\n    this.logger.log('Cache de parâmetros limpo');\n  }\n\n  /**\n   * Remove um item específico do cache\n   * @param chave Chave do parâmetro a ser removido do cache\n   */\n  invalidarCache(chave: string): void {\n    this.cache.delete(chave);\n    this.logger.debug(`Cache para parâmetro '${chave}' invalidado`);\n  }\n\n  /**\n   * Busca todos os parâmetros, convertendo-os para DTOs de resposta\n   * @param categoria Categoria opcional para filtrar\n   * @returns Lista de DTOs de resposta de parâmetros\n   */\n  async buscarTodos(categoria?: string): Promise<ParametroResponseDto[]> {\n    const parametros = await this.parametroRepository.findAll(categoria);\n    return parametros.map((p) => this.mapearParaDto(p));\n  }\n\n  /**\n   * Busca um parâmetro por sua chave\n   * @param chave Chave do parâmetro\n   * @returns DTO de resposta do parâmetro\n   * @throws ParametroNaoEncontradoException se o parâmetro não existir\n   */\n  async buscarPorChave(chave: string): Promise<ParametroResponseDto> {\n    const parametro = await this.parametroRepository.findByChave(chave);\n    if (!parametro) {\n      throw new ParametroNaoEncontradoException(chave);\n    }\n    return this.mapearParaDto(parametro);\n  }\n\n  /**\n   * Cria um novo parâmetro\n   * @param dto DTO com dados para criação\n   * @returns DTO de resposta do parâmetro criado\n   */\n  async criar(dto: ParametroCreateDto): Promise<ParametroResponseDto> {\n    // Verificar se já existe parâmetro com mesma chave\n    const existente = await this.parametroRepository.existsByChave(dto.chave);\n    if (existente) {\n      throw new ValidationErrorException(\n        'chave',\n        dto.chave,\n        'string',\n        `Parâmetro com chave '${dto.chave}' já existe`,\n      );\n    }\n\n    // Converter valor para string antes de salvar\n    const valorString = ParametroConverter.paraString(dto.valor, dto.tipo);\n\n    const parametro = new Parametro();\n    parametro.chave = dto.chave;\n    parametro.descricao = dto.descricao;\n    parametro.tipo = dto.tipo;\n    parametro.valor = valorString;\n    parametro.categoria = dto.categoria;\n    // Escopo e editável não estão presentes na entidade Parametro ainda\n\n    const salvo = await this.parametroRepository.save(parametro);\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Atualiza um parâmetro existente\n   * @param chave Chave do parâmetro\n   * @param dto DTO com dados para atualização\n   * @returns DTO de resposta do parâmetro atualizado\n   * @throws ParametroNaoEncontradoException se o parâmetro não existir\n   */\n  async atualizar(\n    chave: string,\n    dto: ParametroUpdateDto,\n  ): Promise<ParametroResponseDto> {\n    const parametro = await this.parametroRepository.findByChave(chave);\n    if (!parametro) {\n      throw new ParametroNaoEncontradoException(chave);\n    }\n\n    // Verificar se o parâmetro é editável (implementação futura)\n    const editavel = true; // Placeholder para implementação futura\n    if (!editavel) {\n      throw new InvalidOperationException(\n        'editar parâmetro',\n        `Parâmetro '${chave}' não é editável`,\n        'não editável',\n        'editável',\n      );\n    }\n\n    // Converter valor para string antes de salvar (se fornecido)\n    if (dto.valor !== undefined) {\n      parametro.valor = ParametroConverter.paraString(\n        dto.valor,\n        parametro.tipo,\n      );\n    }\n\n    if (dto.descricao !== undefined) {\n      parametro.descricao = dto.descricao;\n    }\n\n    if (dto.categoria !== undefined) {\n      parametro.categoria = dto.categoria;\n    }\n\n    // Escopo será implementado posteriormente\n    // if (dto.escopo !== undefined) {\n    //   parametro.escopo = dto.escopo;\n    // }\n\n    const salvo = await this.parametroRepository.save(parametro);\n\n    // Invalidar cache para este parâmetro\n    this.invalidarCache(chave);\n\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Remove um parâmetro\n   * @param chave Chave do parâmetro\n   * @throws ParametroNaoEncontradoException se o parâmetro não existir\n   */\n  async remover(chave: string): Promise<void> {\n    const parametro = await this.parametroRepository.findByChave(chave);\n    if (!parametro) {\n      throw new ParametroNaoEncontradoException(chave);\n    }\n\n    // Verificar se o parâmetro é editável (implementação futura)\n    const editavel = true; // Placeholder para implementação futura\n    if (!editavel) {\n      throw new InvalidOperationException(\n        'remover parâmetro',\n        `Parâmetro '${chave}' não pode ser removido pois não é editável`,\n        'não editável',\n        'editável',\n      );\n    }\n\n    await this.parametroRepository.remove(parametro.id as unknown as number);\n\n    // Invalidar cache para este parâmetro\n    this.invalidarCache(chave);\n\n    this.logger.log(`Parâmetro '${chave}' removido`);\n  }\n\n  /**\n   * Busca o valor tipado de um parâmetro\n   * @param chave Chave do parâmetro\n   * @param padrao Valor padrão opcional caso o parâmetro não exista\n   * @returns Valor do parâmetro com tipo correto\n   */\n  async obterValor<T>(chave: string, padrao?: T): Promise<T> {\n    try {\n      // Verificar se está no cache\n      const cacheItem = this.cache.get(chave);\n      if (cacheItem && cacheItem.expiraEm > Date.now()) {\n        return cacheItem.valor as T;\n      }\n\n      const parametro = await this.parametroRepository.findByChave(chave);\n      if (!parametro) {\n        if (padrao !== undefined) {\n          return padrao;\n        }\n        throw new ParametroNaoEncontradoException(chave);\n      }\n\n      // Converter para o tipo correto\n      const valorConvertido = ParametroConverter.paraValorTipado(\n        chave,\n        parametro.valor,\n        parametro.tipo,\n      );\n\n      // Armazenar no cache\n      this.cache.set(chave, {\n        valor: valorConvertido,\n        expiraEm: Date.now() + this.CACHE_TTL,\n      });\n\n      return valorConvertido as T;\n    } catch (error) {\n      if (\n        error instanceof ParametroNaoEncontradoException &&\n        padrao !== undefined\n      ) {\n        return padrao;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Busca um valor booleano\n   * @param chave Chave do parâmetro\n   * @param padrao Valor padrão opcional\n   * @returns Valor booleano\n   */\n  async obterBooleano(chave: string, padrao?: boolean): Promise<boolean> {\n    const valor = await this.obterValor<any>(chave, padrao);\n    if (typeof valor === 'boolean') {\n      return valor;\n    }\n    throw new ParametroTipoInvalidoException(\n      chave,\n      valor,\n      ParametroTipoEnum.BOOLEAN,\n    );\n  }\n\n  /**\n   * Busca um valor numérico\n   * @param chave Chave do parâmetro\n   * @param padrao Valor padrão opcional\n   * @returns Valor numérico\n   */\n  async obterNumero(chave: string, padrao?: number): Promise<number> {\n    const valor = await this.obterValor<any>(chave, padrao);\n    if (typeof valor === 'number') {\n      return valor;\n    }\n    throw new ParametroTipoInvalidoException(\n      chave,\n      valor,\n      ParametroTipoEnum.NUMBER,\n    );\n  }\n\n  /**\n   * Busca um valor string\n   * @param chave Chave do parâmetro\n   * @param padrao Valor padrão opcional\n   * @returns Valor string\n   */\n  async obterTexto(chave: string, padrao?: string): Promise<string> {\n    const valor = await this.obterValor<any>(chave, padrao);\n    if (typeof valor === 'string') {\n      return valor;\n    }\n    throw new ParametroTipoInvalidoException(\n      chave,\n      valor,\n      ParametroTipoEnum.STRING,\n    );\n  }\n\n  /**\n   * Busca um valor data\n   * @param chave Chave do parâmetro\n   * @param padrao Valor padrão opcional\n   * @returns Valor data\n   */\n  async obterData(chave: string, padrao?: Date): Promise<Date> {\n    const valor = await this.obterValor<any>(chave, padrao);\n    if (valor instanceof Date) {\n      return valor;\n    }\n    throw new ParametroTipoInvalidoException(\n      chave,\n      valor,\n      ParametroTipoEnum.DATE,\n    );\n  }\n\n  /**\n   * Busca um valor JSON\n   * @param chave Chave do parâmetro\n   * @param padrao Valor padrão opcional\n   * @returns Valor JSON (objeto ou array)\n   */\n  async obterJson<T = any>(chave: string, padrao?: T): Promise<T> {\n    const valor = await this.obterValor<any>(chave, padrao);\n    if (typeof valor === 'object') {\n      return valor as T;\n    }\n    throw new ParametroTipoInvalidoException(\n      chave,\n      valor,\n      ParametroTipoEnum.JSON,\n    );\n  }\n\n  /**\n   * Define um tempo personalizado para expiração do cache\n   * @param ttlMs Tempo de vida em milissegundos\n   */\n  definirTempoCacheMs(ttlMs: number): void {\n    if (ttlMs <= 0) {\n      throw new ValidationErrorException(\n        'ttlMs',\n        ttlMs,\n        'number',\n        'Tempo de cache deve ser maior que zero',\n      );\n    }\n    this.logger.log(`Tempo de cache alterado para ${ttlMs}ms`);\n  }\n\n  /**\n   * Converte uma entidade Parametro para um DTO de resposta\n   * @param parametro Entidade a ser convertida\n   * @returns DTO de resposta\n   */\n  private mapearParaDto(parametro: Parametro): ParametroResponseDto {\n    const dto = new ParametroResponseDto();\n    dto.chave = parametro.chave;\n    dto.descricao = parametro.descricao;\n    dto.tipo = parametro.tipo;\n    dto.valor = ParametroConverter.paraValorTipado(\n      parametro.chave,\n      parametro.valor,\n      parametro.tipo,\n    );\n    dto.valor_formatado = ParametroConverter.formatarParaExibicao(\n      dto.valor,\n      parametro.tipo,\n    );\n    dto.categoria = parametro.categoria;\n    // Escopo e editável serão implementados posteriormente\n    // dto.escopo = parametro.escopo;\n    // dto.editavel = parametro.editavel;\n    dto.created_at = parametro.created_at;\n    dto.updated_at = parametro.updated_at;\n    return dto;\n  }\n}\n"],"version":3}