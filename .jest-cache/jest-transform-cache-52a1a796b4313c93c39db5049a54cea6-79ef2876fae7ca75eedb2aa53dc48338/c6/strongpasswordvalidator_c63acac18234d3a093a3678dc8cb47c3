872fe8bd2ac9c54b5a0d25716c45227a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsStrongPassword = void 0;
const class_validator_1 = require("class-validator");
/**
 * Validador personalizado para senhas fortes
 *
 * Verifica se uma senha é forte o suficiente, considerando:
 * - Não contém informações pessoais (nome, email, etc)
 * - Não é uma senha comum ou facilmente adivinhável
 */
let IsStrongPassword = class IsStrongPassword {
    // Lista de senhas comuns que devem ser evitadas
    commonPasswords = [
        'senha123',
        'password',
        '123456',
        'admin',
        'qwerty',
        'abc123',
        'senha',
        '12345678',
        'admin123',
        'semtas',
        'pgben',
        'natal',
        'brasil',
        'sistema',
        'usuario',
    ];
    validate(password, args) {
        if (!password) {
            return false;
        }
        // Verifica se a senha está na lista de senhas comuns
        if (this.commonPasswords.includes(password.toLowerCase())) {
            return false;
        }
        // Obtém o objeto que está sendo validado (para verificar informações pessoais)
        const object = args.object;
        // Verifica se a senha contém o nome do usuário
        if (object.nome &&
            password.toLowerCase().includes(object.nome.toLowerCase().split(' ')[0])) {
            return false;
        }
        // Verifica se a senha contém o email do usuário
        if (object.email &&
            password.toLowerCase().includes(object.email.split('@')[0].toLowerCase())) {
            return false;
        }
        // Verifica se a senha contém a matrícula do usuário
        if (object.matricula && password.includes(object.matricula)) {
            return false;
        }
        // Verifica se a senha contém o CPF do usuário (apenas os números)
        if (object.cpf) {
            const cpfNumbers = object.cpf.replace(/[^\d]/g, '');
            // Verifica se a senha contém sequências de 4 ou mais dígitos do CPF
            for (let i = 0; i <= cpfNumbers.length - 4; i++) {
                const sequence = cpfNumbers.substring(i, i + 4);
                if (password.includes(sequence)) {
                    return false;
                }
            }
        }
        return true;
    }
    defaultMessage() {
        return 'A senha não pode conter informações pessoais ou ser uma senha comum';
    }
};
exports.IsStrongPassword = IsStrongPassword;
exports.IsStrongPassword = IsStrongPassword = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'isStrongPassword', async: false })
], IsStrongPassword);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcdmFsaWRhdG9yc1xcc3Ryb25nLXBhc3N3b3JkLnZhbGlkYXRvci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFJeUI7QUFFekI7Ozs7OztHQU1HO0FBRUksSUFBTSxnQkFBZ0IsR0FBdEIsTUFBTSxnQkFBZ0I7SUFDM0IsZ0RBQWdEO0lBQ3hDLGVBQWUsR0FBRztRQUN4QixVQUFVO1FBQ1YsVUFBVTtRQUNWLFFBQVE7UUFDUixPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixPQUFPO1FBQ1AsVUFBVTtRQUNWLFVBQVU7UUFDVixRQUFRO1FBQ1IsT0FBTztRQUNQLE9BQU87UUFDUCxRQUFRO1FBQ1IsU0FBUztRQUNULFNBQVM7S0FDVixDQUFDO0lBRUYsUUFBUSxDQUFDLFFBQWdCLEVBQUUsSUFBeUI7UUFDbEQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQUEsT0FBTyxLQUFLLENBQUM7UUFBQSxDQUFDO1FBRTlCLHFEQUFxRDtRQUNyRCxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDMUQsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsK0VBQStFO1FBQy9FLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFhLENBQUM7UUFFbEMsK0NBQStDO1FBQy9DLElBQ0UsTUFBTSxDQUFDLElBQUk7WUFDWCxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3hFLENBQUM7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxnREFBZ0Q7UUFDaEQsSUFDRSxNQUFNLENBQUMsS0FBSztZQUNaLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsRUFDekUsQ0FBQztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELG9EQUFvRDtRQUNwRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUM1RCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxrRUFBa0U7UUFDbEUsSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDcEQsb0VBQW9FO1lBQ3BFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNoRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO29CQUNoQyxPQUFPLEtBQUssQ0FBQztnQkFDZixDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxjQUFjO1FBQ1osT0FBTyxxRUFBcUUsQ0FBQztJQUMvRSxDQUFDO0NBQ0YsQ0FBQTtBQXRFWSw0Q0FBZ0I7MkJBQWhCLGdCQUFnQjtJQUQ1QixJQUFBLHFDQUFtQixFQUFDLEVBQUUsSUFBSSxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztHQUNuRCxnQkFBZ0IsQ0FzRTVCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXHZhbGlkYXRvcnNcXHN0cm9uZy1wYXNzd29yZC52YWxpZGF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVmFsaWRhdG9yQ29uc3RyYWludCxcbiAgVmFsaWRhdG9yQ29uc3RyYWludEludGVyZmFjZSxcbiAgVmFsaWRhdGlvbkFyZ3VtZW50cyxcbn0gZnJvbSAnY2xhc3MtdmFsaWRhdG9yJztcblxuLyoqXG4gKiBWYWxpZGFkb3IgcGVyc29uYWxpemFkbyBwYXJhIHNlbmhhcyBmb3J0ZXNcbiAqXG4gKiBWZXJpZmljYSBzZSB1bWEgc2VuaGEgw6kgZm9ydGUgbyBzdWZpY2llbnRlLCBjb25zaWRlcmFuZG86XG4gKiAtIE7Do28gY29udMOpbSBpbmZvcm1hw6fDtWVzIHBlc3NvYWlzIChub21lLCBlbWFpbCwgZXRjKVxuICogLSBOw6NvIMOpIHVtYSBzZW5oYSBjb211bSBvdSBmYWNpbG1lbnRlIGFkaXZpbmjDoXZlbFxuICovXG5AVmFsaWRhdG9yQ29uc3RyYWludCh7IG5hbWU6ICdpc1N0cm9uZ1Bhc3N3b3JkJywgYXN5bmM6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgSXNTdHJvbmdQYXNzd29yZCBpbXBsZW1lbnRzIFZhbGlkYXRvckNvbnN0cmFpbnRJbnRlcmZhY2Uge1xuICAvLyBMaXN0YSBkZSBzZW5oYXMgY29tdW5zIHF1ZSBkZXZlbSBzZXIgZXZpdGFkYXNcbiAgcHJpdmF0ZSBjb21tb25QYXNzd29yZHMgPSBbXG4gICAgJ3NlbmhhMTIzJyxcbiAgICAncGFzc3dvcmQnLFxuICAgICcxMjM0NTYnLFxuICAgICdhZG1pbicsXG4gICAgJ3F3ZXJ0eScsXG4gICAgJ2FiYzEyMycsXG4gICAgJ3NlbmhhJyxcbiAgICAnMTIzNDU2NzgnLFxuICAgICdhZG1pbjEyMycsXG4gICAgJ3NlbXRhcycsXG4gICAgJ3BnYmVuJyxcbiAgICAnbmF0YWwnLFxuICAgICdicmFzaWwnLFxuICAgICdzaXN0ZW1hJyxcbiAgICAndXN1YXJpbycsXG4gIF07XG5cbiAgdmFsaWRhdGUocGFzc3dvcmQ6IHN0cmluZywgYXJnczogVmFsaWRhdGlvbkFyZ3VtZW50cyk6IGJvb2xlYW4ge1xuICAgIGlmICghcGFzc3dvcmQpIHtyZXR1cm4gZmFsc2U7fVxuXG4gICAgLy8gVmVyaWZpY2Egc2UgYSBzZW5oYSBlc3TDoSBuYSBsaXN0YSBkZSBzZW5oYXMgY29tdW5zXG4gICAgaWYgKHRoaXMuY29tbW9uUGFzc3dvcmRzLmluY2x1ZGVzKHBhc3N3b3JkLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gT2J0w6ltIG8gb2JqZXRvIHF1ZSBlc3TDoSBzZW5kbyB2YWxpZGFkbyAocGFyYSB2ZXJpZmljYXIgaW5mb3JtYcOnw7VlcyBwZXNzb2FpcylcbiAgICBjb25zdCBvYmplY3QgPSBhcmdzLm9iamVjdCBhcyBhbnk7XG5cbiAgICAvLyBWZXJpZmljYSBzZSBhIHNlbmhhIGNvbnTDqW0gbyBub21lIGRvIHVzdcOhcmlvXG4gICAgaWYgKFxuICAgICAgb2JqZWN0Lm5vbWUgJiZcbiAgICAgIHBhc3N3b3JkLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMob2JqZWN0Lm5vbWUudG9Mb3dlckNhc2UoKS5zcGxpdCgnICcpWzBdKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZlcmlmaWNhIHNlIGEgc2VuaGEgY29udMOpbSBvIGVtYWlsIGRvIHVzdcOhcmlvXG4gICAgaWYgKFxuICAgICAgb2JqZWN0LmVtYWlsICYmXG4gICAgICBwYXNzd29yZC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG9iamVjdC5lbWFpbC5zcGxpdCgnQCcpWzBdLnRvTG93ZXJDYXNlKCkpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmVyaWZpY2Egc2UgYSBzZW5oYSBjb250w6ltIGEgbWF0csOtY3VsYSBkbyB1c3XDoXJpb1xuICAgIGlmIChvYmplY3QubWF0cmljdWxhICYmIHBhc3N3b3JkLmluY2x1ZGVzKG9iamVjdC5tYXRyaWN1bGEpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmVyaWZpY2Egc2UgYSBzZW5oYSBjb250w6ltIG8gQ1BGIGRvIHVzdcOhcmlvIChhcGVuYXMgb3MgbsO6bWVyb3MpXG4gICAgaWYgKG9iamVjdC5jcGYpIHtcbiAgICAgIGNvbnN0IGNwZk51bWJlcnMgPSBvYmplY3QuY3BmLnJlcGxhY2UoL1teXFxkXS9nLCAnJyk7XG4gICAgICAvLyBWZXJpZmljYSBzZSBhIHNlbmhhIGNvbnTDqW0gc2VxdcOqbmNpYXMgZGUgNCBvdSBtYWlzIGTDrWdpdG9zIGRvIENQRlxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gY3BmTnVtYmVycy5sZW5ndGggLSA0OyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2VxdWVuY2UgPSBjcGZOdW1iZXJzLnN1YnN0cmluZyhpLCBpICsgNCk7XG4gICAgICAgIGlmIChwYXNzd29yZC5pbmNsdWRlcyhzZXF1ZW5jZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGRlZmF1bHRNZXNzYWdlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdBIHNlbmhhIG7Do28gcG9kZSBjb250ZXIgaW5mb3JtYcOnw7VlcyBwZXNzb2FpcyBvdSBzZXIgdW1hIHNlbmhhIGNvbXVtJztcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9