7028068922108f92cc7362d85a08bd5e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PapelCidadao = void 0;
const typeorm_1 = require("typeorm");
const cidadao_entity_1 = require("./cidadao.entity");
const composicao_familiar_entity_1 = require("./composicao-familiar.entity");
const tipo_papel_enum_1 = require("../enums/tipo-papel.enum");
/**
 * Entidade de Papel do Cidadão
 *
 * Estabelece uma relação N:M entre cidadãos e os papéis que podem assumir no sistema.
 * Um mesmo cidadão pode ter múltiplos papéis em diferentes contextos.
 */
let PapelCidadao = class PapelCidadao {
    id;
    cidadao_id;
    cidadao;
    composicao_familiar_id;
    composicao_familiar;
    tipo_papel;
    metadados;
    ativo;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get cidadaoId() {
        return this.cidadao_id;
    }
    set cidadaoId(value) {
        this.cidadao_id = value;
    }
    get composicaoFamiliarId() {
        return this.composicao_familiar_id;
    }
    set composicaoFamiliarId(value) {
        this.composicao_familiar_id = value;
    }
    get tipoPapel() {
        return this.tipo_papel;
    }
    set tipoPapel(value) {
        this.tipo_papel = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se o papel foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do papel em dias
     */
    getIdadeEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se o papel está ativo
     */
    isAtivo() {
        return this.ativo && !this.removed_at;
    }
    /**
     * Verifica se o papel foi removido
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se é um papel de beneficiário
     */
    isBeneficiario() {
        return this.tipo_papel === tipo_papel_enum_1.TipoPapel.BENEFICIARIO;
    }
    /**
     * Verifica se é um papel de representante legal
     */
    isRepresentanteLegal() {
        return this.tipo_papel === tipo_papel_enum_1.TipoPapel.REPRESENTANTE_LEGAL;
    }
    /**
     * Verifica se é um papel de dependente
     */
    isDependente() {
        return this.tipo_papel === tipo_papel_enum_1.TipoPapel.DEPENDENTE;
    }
    /**
     * Verifica se tem grau de parentesco definido
     */
    temGrauParentesco() {
        return !!this.metadados?.grau_parentesco;
    }
    /**
     * Obtém o grau de parentesco
     */
    getGrauParentesco() {
        return this.metadados?.grau_parentesco || null;
    }
    /**
     * Verifica se tem documento de representação
     */
    temDocumentoRepresentacao() {
        return !!this.metadados?.documento_representacao;
    }
    /**
     * Verifica se a representação está válida (não expirou)
     */
    isRepresentacaoValida() {
        if (!this.metadados?.data_validade_representacao) {
            return true; // Se não tem data de validade, considera válida
        }
        return new Date(this.metadados.data_validade_representacao) > new Date();
    }
    /**
     * Verifica se pertence a uma composição familiar específica
     */
    pertenceAComposicaoFamiliar(composicaoId) {
        return this.composicao_familiar_id === composicaoId;
    }
    /**
     * Verifica se pertence a um cidadão específico
     */
    pertenceAoCidadao(cidadaoId) {
        return this.cidadao_id === cidadaoId;
    }
    /**
     * Obtém um resumo do papel
     */
    getSummary() {
        const status = this.isAtivo() ? 'Ativo' : 'Inativo';
        const grau = this.temGrauParentesco()
            ? ` (${this.getGrauParentesco()})`
            : '';
        return `${this.tipo_papel}${grau} - ${status}`;
    }
    /**
     * Gera uma chave única para o papel
     */
    getUniqueKey() {
        return `${this.cidadao_id}_${this.tipo_papel}_${this.composicao_familiar_id || 'null'}`;
    }
    /**
     * Verifica se o papel é consistente
     */
    isConsistente() {
        // Verifica se tem cidadão
        if (!this.cidadao_id)
            return false;
        // Verifica se tem tipo de papel
        if (!this.tipo_papel)
            return false;
        // Se é representante legal, deve ter documento
        if (this.isRepresentanteLegal() && !this.temDocumentoRepresentacao()) {
            return false;
        }
        // Se tem data de validade, deve estar válida
        if (this.metadados?.data_validade_representacao &&
            !this.isRepresentacaoValida()) {
            return false;
        }
        return true;
    }
    /**
     * Verifica se pode ser removido
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        // Responsável familiar só pode ser removido se houver outro responsável
        // Esta verificação seria feita no serviço
        return true;
    }
    /**
     * Clona o papel (sem ID)
     */
    clone() {
        return {
            cidadao_id: this.cidadao_id,
            composicao_familiar_id: this.composicao_familiar_id,
            tipo_papel: this.tipo_papel,
            metadados: this.metadados ? { ...this.metadados } : undefined,
            ativo: this.ativo,
        };
    }
    /**
     * Verifica se requer documentação especial
     */
    requerDocumentacaoEspecial() {
        return this.isRepresentanteLegal();
    }
    /**
     * Obtém a descrição do tipo de papel
     */
    getDescricaoTipoPapel() {
        const descricoes = {
            [tipo_papel_enum_1.TipoPapel.REQUERENTE]: 'Solicitante',
            [tipo_papel_enum_1.TipoPapel.BENEFICIARIO]: 'Beneficiário',
            [tipo_papel_enum_1.TipoPapel.REPRESENTANTE_LEGAL]: 'Representante Legal',
            [tipo_papel_enum_1.TipoPapel.DEPENDENTE]: 'Dependente',
        };
        return descricoes[this.tipo_papel] || this.tipo_papel;
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            tipo_papel: this.tipo_papel,
            ativo: this.ativo,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Verifica se o papel expira em breve (próximos 30 dias)
     */
    expiraEmBreve() {
        if (!this.metadados?.data_validade_representacao) {
            return false;
        }
        const dataValidade = new Date(this.metadados.data_validade_representacao);
        const trintaDiasFrente = new Date();
        trintaDiasFrente.setDate(trintaDiasFrente.getDate() + 30);
        return dataValidade <= trintaDiasFrente;
    }
    /**
     * Obtém sugestões de verificação para o papel
     */
    getSugestoesVerificacao() {
        const sugestoes = [];
        if (this.isRepresentanteLegal() && !this.temDocumentoRepresentacao()) {
            sugestoes.push('Adicionar documento de representação legal');
        }
        if (this.expiraEmBreve()) {
            sugestoes.push('Renovar documento de representação (expira em breve)');
        }
        if (!this.temGrauParentesco() && this.isDependente()) {
            sugestoes.push('Definir grau de parentesco para dependente');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar consistência dos dados do papel');
        }
        return sugestoes;
    }
};
exports.PapelCidadao = PapelCidadao;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], PapelCidadao.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'cidadao_id', type: 'uuid' }),
    __metadata("design:type", String)
], PapelCidadao.prototype, "cidadao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => cidadao_entity_1.Cidadao, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'cidadao_id' }),
    __metadata("design:type", typeof (_a = typeof cidadao_entity_1.Cidadao !== "undefined" && cidadao_entity_1.Cidadao) === "function" ? _a : Object)
], PapelCidadao.prototype, "cidadao", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'composicao_familiar_id', type: 'uuid', nullable: true }),
    __metadata("design:type", String)
], PapelCidadao.prototype, "composicao_familiar_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => composicao_familiar_entity_1.ComposicaoFamiliar, { onDelete: 'SET NULL' }),
    (0, typeorm_1.JoinColumn)({ name: 'composicao_familiar_id' }),
    __metadata("design:type", typeof (_b = typeof composicao_familiar_entity_1.ComposicaoFamiliar !== "undefined" && composicao_familiar_entity_1.ComposicaoFamiliar) === "function" ? _b : Object)
], PapelCidadao.prototype, "composicao_familiar", void 0);
__decorate([
    (0, typeorm_1.Column)({
        name: 'tipo_papel',
        type: 'enum',
        enum: tipo_papel_enum_1.TipoPapel,
        enumName: 'tipo_papel',
    }),
    __metadata("design:type", typeof (_c = typeof tipo_papel_enum_1.PaperType !== "undefined" && tipo_papel_enum_1.PaperType) === "function" ? _c : Object)
], PapelCidadao.prototype, "tipo_papel", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", Object)
], PapelCidadao.prototype, "metadados", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'boolean', default: true }),
    __metadata("design:type", Boolean)
], PapelCidadao.prototype, "ativo", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], PapelCidadao.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], PapelCidadao.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)({ name: 'removed_at' }),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], PapelCidadao.prototype, "removed_at", void 0);
exports.PapelCidadao = PapelCidadao = __decorate([
    (0, typeorm_1.Entity)('papel_cidadao'),
    (0, typeorm_1.Index)(['cidadao_id', 'tipo_papel'], { unique: true })
], PapelCidadao);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,