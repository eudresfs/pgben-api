98e8493f0481c76dbd6138342a6c8dc2
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiltroMetricasDto = exports.AtualizarMetricaDefinicaoDto = exports.CriarMetricaDefinicaoDto = void 0;
const swagger_1 = require("@nestjs/swagger");
const class_validator_1 = require("class-validator");
const metrica_definicao_entity_1 = require("../../../entities/metrica-definicao.entity");
/**
 * DTO para criar uma nova definição de métrica
 */
class CriarMetricaDefinicaoDto {
    codigo;
    nome;
    descricao;
    tipo;
    categoria;
    unidade;
    prefixo;
    sufixo;
    casas_decimais;
    sql_consulta;
    formula_calculo;
    fonte_dados;
    agregacao_temporal;
    granularidade;
    metricas_dependentes;
    parametros_especificos;
    tags;
}
exports.CriarMetricaDefinicaoDto = CriarMetricaDefinicaoDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Código único da métrica (snake_case)',
        example: 'tempo_medio_processamento_beneficio',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsNotEmpty)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "codigo", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Nome de exibição da métrica',
        example: 'Tempo Médio de Processamento de Benefício',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsNotEmpty)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "nome", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Descrição detalhada da métrica',
        example: 'Calcula o tempo médio de processamento de solicitações de benefício, desde a submissão até a aprovação ou rejeição.',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsNotEmpty)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "descricao", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tipo da métrica',
        enum: metrica_definicao_entity_1.TipoMetrica,
        example: metrica_definicao_entity_1.TipoMetrica.MEDIA,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.TipoMetrica),
    __metadata("design:type", typeof (_a = typeof metrica_definicao_entity_1.TipoMetrica !== "undefined" && metrica_definicao_entity_1.TipoMetrica) === "function" ? _a : Object)
], CriarMetricaDefinicaoDto.prototype, "tipo", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Categoria da métrica para organização',
        enum: metrica_definicao_entity_1.CategoriaMetrica,
        example: metrica_definicao_entity_1.CategoriaMetrica.PROCESSAMENTO,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.CategoriaMetrica),
    __metadata("design:type", typeof (_b = typeof metrica_definicao_entity_1.CategoriaMetrica !== "undefined" && metrica_definicao_entity_1.CategoriaMetrica) === "function" ? _b : Object)
], CriarMetricaDefinicaoDto.prototype, "categoria", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Unidade de medida da métrica',
        example: 'dias',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "unidade", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Prefixo a ser exibido antes do valor',
        example: 'R$',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "prefixo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Sufixo a ser exibido após o valor',
        example: '%',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "sufixo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Número de casas decimais a serem exibidas',
        example: 2,
        default: 2,
    }),
    (0, class_validator_1.IsNumber)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Number)
], CriarMetricaDefinicaoDto.prototype, "casas_decimais", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Consulta SQL para coletar dados (para métricas baseadas em banco de dados)',
        example: "SELECT AVG(EXTRACT(EPOCH FROM (data_conclusao - data_solicitacao))/86400) FROM solicitacao WHERE status = 'concluido' AND data_conclusao BETWEEN ${PERIODO_INICIO} AND ${PERIODO_FIM}",
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "sql_consulta", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Fórmula para cálculo (para métricas compostas)',
        example: 'beneficios_aprovados / total_solicitacoes * 100',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "formula_calculo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Fonte de dados da métrica',
        example: 'banco_dados',
        default: 'banco_dados',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "fonte_dados", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Especificação de como agregar os dados em diferentes períodos',
        example: 'media',
        default: 'soma',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], CriarMetricaDefinicaoDto.prototype, "agregacao_temporal", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Granularidade mínima de coleta/armazenamento',
        enum: metrica_definicao_entity_1.GranularidadeTemporal,
        example: metrica_definicao_entity_1.GranularidadeTemporal.DIA,
        default: metrica_definicao_entity_1.GranularidadeTemporal.DIA,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.GranularidadeTemporal),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_c = typeof metrica_definicao_entity_1.GranularidadeTemporal !== "undefined" && metrica_definicao_entity_1.GranularidadeTemporal) === "function" ? _c : Object)
], CriarMetricaDefinicaoDto.prototype, "granularidade", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Referência a outras métricas utilizadas no cálculo (caso seja composta)',
        example: ['beneficios_aprovados', 'total_solicitacoes'],
        type: [String],
    }),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.IsString)({ each: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Array)
], CriarMetricaDefinicaoDto.prototype, "metricas_dependentes", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Parâmetros específicos para o tipo de métrica',
        example: { percentil: 95 },
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_d = typeof Record !== "undefined" && Record) === "function" ? _d : Object)
], CriarMetricaDefinicaoDto.prototype, "parametros_especificos", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Tags para filtrar e categorizar métricas',
        example: ['financeiro', 'beneficio', 'prioritario'],
        type: [String],
    }),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.IsString)({ each: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Array)
], CriarMetricaDefinicaoDto.prototype, "tags", void 0);
/**
 * DTO para atualizar uma definição de métrica existente
 */
class AtualizarMetricaDefinicaoDto {
    nome;
    descricao;
    tipo;
    categoria;
    unidade;
    prefixo;
    sufixo;
    casas_decimais;
    sql_consulta;
    formula_calculo;
    fonte_dados;
    agregacao_temporal;
    granularidade;
    metricas_dependentes;
    ativa;
    parametros_especificos;
    tags;
    calculo_tempo_real;
}
exports.AtualizarMetricaDefinicaoDto = AtualizarMetricaDefinicaoDto;
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Nome de exibição da métrica',
        example: 'Tempo Médio de Processamento de Benefício',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "nome", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Descrição detalhada da métrica',
        example: 'Calcula o tempo médio de processamento de solicitações de benefício, desde a submissão até a aprovação ou rejeição.',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "descricao", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Tipo da métrica',
        enum: metrica_definicao_entity_1.TipoMetrica,
        example: metrica_definicao_entity_1.TipoMetrica.MEDIA,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.TipoMetrica),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_e = typeof metrica_definicao_entity_1.TipoMetrica !== "undefined" && metrica_definicao_entity_1.TipoMetrica) === "function" ? _e : Object)
], AtualizarMetricaDefinicaoDto.prototype, "tipo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Categoria da métrica para organização',
        enum: metrica_definicao_entity_1.CategoriaMetrica,
        example: metrica_definicao_entity_1.CategoriaMetrica.PROCESSAMENTO,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.CategoriaMetrica),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_f = typeof metrica_definicao_entity_1.CategoriaMetrica !== "undefined" && metrica_definicao_entity_1.CategoriaMetrica) === "function" ? _f : Object)
], AtualizarMetricaDefinicaoDto.prototype, "categoria", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Unidade de medida da métrica',
        example: 'dias',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "unidade", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Prefixo a ser exibido antes do valor',
        example: 'R$',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "prefixo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Sufixo a ser exibido após o valor',
        example: '%',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "sufixo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Número de casas decimais a serem exibidas',
        example: 2,
    }),
    (0, class_validator_1.IsNumber)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Number)
], AtualizarMetricaDefinicaoDto.prototype, "casas_decimais", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Consulta SQL para coletar dados (para métricas baseadas em banco de dados)',
        example: "SELECT AVG(EXTRACT(EPOCH FROM (data_conclusao - data_solicitacao))/86400) FROM solicitacao WHERE status = 'concluido' AND data_conclusao BETWEEN ${PERIODO_INICIO} AND ${PERIODO_FIM}",
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "sql_consulta", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Fórmula para cálculo (para métricas compostas)',
        example: 'beneficios_aprovados / total_solicitacoes * 100',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "formula_calculo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Fonte de dados da métrica',
        example: 'banco_dados',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "fonte_dados", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Especificação de como agregar os dados em diferentes períodos',
        example: 'media',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], AtualizarMetricaDefinicaoDto.prototype, "agregacao_temporal", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Granularidade mínima de coleta/armazenamento',
        enum: metrica_definicao_entity_1.GranularidadeTemporal,
        example: metrica_definicao_entity_1.GranularidadeTemporal.DIA,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.GranularidadeTemporal),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_g = typeof metrica_definicao_entity_1.GranularidadeTemporal !== "undefined" && metrica_definicao_entity_1.GranularidadeTemporal) === "function" ? _g : Object)
], AtualizarMetricaDefinicaoDto.prototype, "granularidade", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Referência a outras métricas utilizadas no cálculo (caso seja composta)',
        example: ['beneficios_aprovados', 'total_solicitacoes'],
        type: [String],
    }),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.IsString)({ each: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Array)
], AtualizarMetricaDefinicaoDto.prototype, "metricas_dependentes", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Flag que indica se a métrica está ativa para coleta',
        example: true,
    }),
    (0, class_validator_1.IsBoolean)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Boolean)
], AtualizarMetricaDefinicaoDto.prototype, "ativa", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Parâmetros específicos para o tipo de métrica',
        example: { percentil: 95 },
    }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_h = typeof Record !== "undefined" && Record) === "function" ? _h : Object)
], AtualizarMetricaDefinicaoDto.prototype, "parametros_especificos", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Tags para filtrar e categorizar métricas',
        example: ['financeiro', 'beneficio', 'prioritario'],
        type: [String],
    }),
    (0, class_validator_1.IsArray)(),
    (0, class_validator_1.IsString)({ each: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Array)
], AtualizarMetricaDefinicaoDto.prototype, "tags", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Flag que indica se a métrica é calculada em tempo real ou pré-calculada',
        example: false,
    }),
    (0, class_validator_1.IsBoolean)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Boolean)
], AtualizarMetricaDefinicaoDto.prototype, "calculo_tempo_real", void 0);
/**
 * DTO para filtrar métricas na consulta
 */
class FiltroMetricasDto {
    codigo;
    nome;
    categoria;
    tipo;
    ativa;
    tag;
    pagina;
    limite;
}
exports.FiltroMetricasDto = FiltroMetricasDto;
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Código da métrica para busca parcial',
        example: 'tempo',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], FiltroMetricasDto.prototype, "codigo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Nome da métrica para busca parcial',
        example: 'Processamento',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], FiltroMetricasDto.prototype, "nome", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Categoria da métrica',
        enum: metrica_definicao_entity_1.CategoriaMetrica,
        example: metrica_definicao_entity_1.CategoriaMetrica.PROCESSAMENTO,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.CategoriaMetrica),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_j = typeof metrica_definicao_entity_1.CategoriaMetrica !== "undefined" && metrica_definicao_entity_1.CategoriaMetrica) === "function" ? _j : Object)
], FiltroMetricasDto.prototype, "categoria", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Tipo da métrica',
        enum: metrica_definicao_entity_1.TipoMetrica,
        example: metrica_definicao_entity_1.TipoMetrica.MEDIA,
    }),
    (0, class_validator_1.IsEnum)(metrica_definicao_entity_1.TipoMetrica),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_k = typeof metrica_definicao_entity_1.TipoMetrica !== "undefined" && metrica_definicao_entity_1.TipoMetrica) === "function" ? _k : Object)
], FiltroMetricasDto.prototype, "tipo", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Status de ativação da métrica',
        example: true,
    }),
    (0, class_validator_1.IsBoolean)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Boolean)
], FiltroMetricasDto.prototype, "ativa", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Tag para filtrar métricas',
        example: 'financeiro',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], FiltroMetricasDto.prototype, "tag", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Página para paginação de resultados',
        example: 1,
        default: 1,
    }),
    (0, class_validator_1.IsNumber)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Number)
], FiltroMetricasDto.prototype, "pagina", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Quantidade de itens por página',
        example: 10,
        default: 10,
    }),
    (0, class_validator_1.IsNumber)(),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Number)
], FiltroMetricasDto.prototype, "limite", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,