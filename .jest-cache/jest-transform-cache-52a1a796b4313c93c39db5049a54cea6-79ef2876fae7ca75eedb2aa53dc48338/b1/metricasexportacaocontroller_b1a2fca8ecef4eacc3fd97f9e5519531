b663ef4a4c73fd27f8089db3fd5a15c1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasExportacaoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const express_1 = require("express");
const jwt_auth_guard_1 = require("../../../shared/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
const metricas_service_1 = require("../services/metricas.service");
/**
 * Controlador para exportação de dados de métricas
 *
 * Este controlador fornece endpoints para:
 * 1. Exportar dados de uma métrica específica em formato CSV ou JSON
 * 2. Gerar relatório completo de métricas para análise externa
 */
let MetricasExportacaoController = class MetricasExportacaoController {
    metricasService;
    constructor(metricasService) {
        this.metricasService = metricasService;
    }
    /**
     * Exporta dados de uma métrica específica em formato CSV ou JSON
     */
    async exportarDadosMetrica(codigo, dataInicio, dataFim, formato = 'csv', incluirMetadados = false, res) {
        // Implementação temporária até que o método seja adicionado ao serviço
        const dados = [
            {
                codigo,
                nome: `Métrica ${codigo}`,
                valor: 0,
                data_coleta: new Date(),
                unidade: 'un',
            },
        ];
        if (formato === 'json') {
            return res
                .setHeader('Content-Type', 'application/json')
                .setHeader('Content-Disposition', `attachment; filename=${codigo}_${new Date().toISOString().split('T')[0]}.json`)
                .send(JSON.stringify(dados, null, 2));
        }
        else {
            // Converter para CSV
            const csvData = this.converterParaCSV(dados);
            return res
                .setHeader('Content-Type', 'text/csv')
                .setHeader('Content-Disposition', `attachment; filename=${codigo}_${new Date().toISOString().split('T')[0]}.csv`)
                .send(csvData);
        }
    }
    /**
     * Gera relatório completo de métricas para análise externa
     */
    async gerarRelatorioCompleto(res, formato = 'pdf', categorias, periodo) {
        // Implementação temporária até que o método seja adicionado ao serviço
        const relatorio = {
            titulo: 'Relatório Completo de Métricas',
            periodo: {
                inicio: new Date(),
                fim: new Date(),
                descricao: periodo || 'último mês',
            },
            categorias: categorias || 'todas',
            total_metricas: 0,
            data_geracao: new Date(),
            metricas: [],
        };
        let contentType = 'application/pdf';
        let filename = `relatorio_metricas_${new Date().toISOString().split('T')[0]}.pdf`;
        if (formato === 'json') {
            contentType = 'application/json';
            filename = `relatorio_metricas_${new Date().toISOString().split('T')[0]}.json`;
            return res
                .setHeader('Content-Type', contentType)
                .setHeader('Content-Disposition', `attachment; filename=${filename}`)
                .send(JSON.stringify(relatorio, null, 2));
        }
        else if (formato === 'csv') {
            contentType = 'text/csv';
            filename = `relatorio_metricas_${new Date().toISOString().split('T')[0]}.csv`;
            // Converter o objeto para array para poder usar o método converterParaCSV
            const relatorioArray = [relatorio];
            const csvData = this.converterParaCSV(relatorioArray);
            return res
                .setHeader('Content-Type', contentType)
                .setHeader('Content-Disposition', `attachment; filename=${filename}`)
                .send(csvData);
        }
        else {
            // PDF
            return res
                .setHeader('Content-Type', contentType)
                .setHeader('Content-Disposition', `attachment; filename=${filename}`)
                .send(relatorio);
        }
    }
    /**
     * Converte dados para formato CSV
     * @private
     */
    converterParaCSV(dados) {
        if (!dados || !dados.length) {
            return '';
        }
        // Obter cabeçalhos
        const headers = Object.keys(dados[0]);
        // Criar linha de cabeçalho
        let csv = headers.join(',') + '\n';
        // Adicionar linhas de dados
        dados.forEach((item) => {
            const values = headers.map((header) => {
                const value = item[header];
                // Tratar valores especiais
                if (value === null || value === undefined) {
                    return '';
                }
                if (typeof value === 'string') {
                    // Escapar aspas e envolver em aspas se contiver vírgulas
                    const escaped = value.replace(/"/g, '""');
                    return escaped.includes(',') ? `"${escaped}"` : escaped;
                }
                if (value instanceof Date) {
                    return value.toISOString();
                }
                if (typeof value === 'object') {
                    // Converter objetos para JSON e envolver em aspas
                    return `"${JSON.stringify(value).replace(/"/g, '""')}"`;
                }
                return value;
            });
            csv += values.join(',') + '\n';
        });
        return csv;
    }
};
exports.MetricasExportacaoController = MetricasExportacaoController;
__decorate([
    (0, common_1.Get)(':codigo'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Exporta dados de uma métrica (CSV/JSON)' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Dados exportados com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Query)('dataInicio')),
    __param(2, (0, common_1.Query)('dataFim')),
    __param(3, (0, common_1.Query)('formato')),
    __param(4, (0, common_1.Query)('incluirMetadados')),
    __param(5, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object, typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object, String, Boolean, typeof (_d = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], MetricasExportacaoController.prototype, "exportarDadosMetrica", null);
__decorate([
    (0, common_1.Get)('relatorio'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Gera relatório completo de métricas' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Relatório gerado com sucesso' }),
    __param(0, (0, common_1.Res)()),
    __param(1, (0, common_1.Query)('formato')),
    __param(2, (0, common_1.Query)('categorias')),
    __param(3, (0, common_1.Query)('periodo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _e : Object, String, Array, String]),
    __metadata("design:returntype", Promise)
], MetricasExportacaoController.prototype, "gerarRelatorioCompleto", null);
exports.MetricasExportacaoController = MetricasExportacaoController = __decorate([
    (0, swagger_1.ApiTags)('Métricas e Dashboard'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, common_1.Controller)('metricas/exportacao'),
    __metadata("design:paramtypes", [typeof (_a = typeof metricas_service_1.MetricasService !== "undefined" && metricas_service_1.MetricasService) === "function" ? _a : Object])
], MetricasExportacaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,