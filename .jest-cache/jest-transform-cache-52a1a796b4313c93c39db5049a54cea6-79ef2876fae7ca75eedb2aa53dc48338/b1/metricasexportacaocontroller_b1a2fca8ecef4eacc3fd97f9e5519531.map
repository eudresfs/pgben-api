{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\controllers\\metricas-exportacao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\controllers\\metricas-exportacao.controller.ts"],"sourcesContent":["import { Controller, Get, Param, Query, Res, UseGuards } from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBearerAuth,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\nimport { JwtAuthGuard } from '../../../shared/guards/jwt-auth.guard';\nimport { RolesGuard } from '../../../auth/guards/roles.guard';\nimport { Roles } from '../../../auth/decorators/role.decorator';\nimport { ROLES } from '../../../shared/constants/roles.constants';\n\nimport { MetricasService } from '../services/metricas.service';\n\n/**\n * Controlador para exportação de dados de métricas\n *\n * Este controlador fornece endpoints para:\n * 1. Exportar dados de uma métrica específica em formato CSV ou JSON\n * 2. Gerar relatório completo de métricas para análise externa\n */\n@ApiTags('Métricas e Dashboard')\n@ApiBearerAuth()\n@UseGuards(JwtAuthGuard, RolesGuard)\n@Controller('metricas/exportacao')\nexport class MetricasExportacaoController {\n  constructor(private readonly metricasService: MetricasService) {}\n\n  /**\n   * Exporta dados de uma métrica específica em formato CSV ou JSON\n   */\n  @Get(':codigo')\n  @Roles(ROLES.ADMIN, ROLES.GESTOR, ROLES.TECNICO)\n  @ApiOperation({ summary: 'Exporta dados de uma métrica (CSV/JSON)' })\n  @ApiResponse({ status: 200, description: 'Dados exportados com sucesso' })\n  @ApiResponse({ status: 404, description: 'Métrica não encontrada' })\n  async exportarDadosMetrica(\n    @Param('codigo') codigo: string,\n    @Query('dataInicio') dataInicio: Date,\n    @Query('dataFim') dataFim: Date,\n    @Query('formato') formato: 'csv' | 'json' = 'csv',\n    @Query('incluirMetadados') incluirMetadados: boolean = false,\n    @Res() res: Response,\n  ) {\n    // Implementação temporária até que o método seja adicionado ao serviço\n    const dados = [\n      {\n        codigo,\n        nome: `Métrica ${codigo}`,\n        valor: 0,\n        data_coleta: new Date(),\n        unidade: 'un',\n      },\n    ];\n\n    if (formato === 'json') {\n      return res\n        .setHeader('Content-Type', 'application/json')\n        .setHeader(\n          'Content-Disposition',\n          `attachment; filename=${codigo}_${new Date().toISOString().split('T')[0]}.json`,\n        )\n        .send(JSON.stringify(dados, null, 2));\n    } else {\n      // Converter para CSV\n      const csvData = this.converterParaCSV(dados);\n      return res\n        .setHeader('Content-Type', 'text/csv')\n        .setHeader(\n          'Content-Disposition',\n          `attachment; filename=${codigo}_${new Date().toISOString().split('T')[0]}.csv`,\n        )\n        .send(csvData);\n    }\n  }\n\n  /**\n   * Gera relatório completo de métricas para análise externa\n   */\n  @Get('relatorio')\n  @Roles(ROLES.ADMIN, ROLES.GESTOR)\n  @ApiOperation({ summary: 'Gera relatório completo de métricas' })\n  @ApiResponse({ status: 200, description: 'Relatório gerado com sucesso' })\n  async gerarRelatorioCompleto(\n    @Res() res: Response,\n    @Query('formato') formato: 'csv' | 'json' | 'pdf' = 'pdf',\n    @Query('categorias') categorias?: string[],\n    @Query('periodo') periodo?: string,\n  ) {\n    // Implementação temporária até que o método seja adicionado ao serviço\n    const relatorio = {\n      titulo: 'Relatório Completo de Métricas',\n      periodo: {\n        inicio: new Date(),\n        fim: new Date(),\n        descricao: periodo || 'último mês',\n      },\n      categorias: categorias || 'todas',\n      total_metricas: 0,\n      data_geracao: new Date(),\n      metricas: [],\n    };\n\n    let contentType = 'application/pdf';\n    let filename = `relatorio_metricas_${new Date().toISOString().split('T')[0]}.pdf`;\n\n    if (formato === 'json') {\n      contentType = 'application/json';\n      filename = `relatorio_metricas_${new Date().toISOString().split('T')[0]}.json`;\n      return res\n        .setHeader('Content-Type', contentType)\n        .setHeader('Content-Disposition', `attachment; filename=${filename}`)\n        .send(JSON.stringify(relatorio, null, 2));\n    } else if (formato === 'csv') {\n      contentType = 'text/csv';\n      filename = `relatorio_metricas_${new Date().toISOString().split('T')[0]}.csv`;\n      // Converter o objeto para array para poder usar o método converterParaCSV\n      const relatorioArray = [relatorio];\n      const csvData = this.converterParaCSV(relatorioArray);\n      return res\n        .setHeader('Content-Type', contentType)\n        .setHeader('Content-Disposition', `attachment; filename=${filename}`)\n        .send(csvData);\n    } else {\n      // PDF\n      return res\n        .setHeader('Content-Type', contentType)\n        .setHeader('Content-Disposition', `attachment; filename=${filename}`)\n        .send(relatorio);\n    }\n  }\n\n  /**\n   * Converte dados para formato CSV\n   * @private\n   */\n  private converterParaCSV(dados: any[]): string {\n    if (!dados || !dados.length) {\n      return '';\n    }\n\n    // Obter cabeçalhos\n    const headers = Object.keys(dados[0]);\n\n    // Criar linha de cabeçalho\n    let csv = headers.join(',') + '\\n';\n\n    // Adicionar linhas de dados\n    dados.forEach((item) => {\n      const values = headers.map((header) => {\n        const value = item[header];\n        // Tratar valores especiais\n        if (value === null || value === undefined) {\n          return '';\n        }\n        if (typeof value === 'string') {\n          // Escapar aspas e envolver em aspas se contiver vírgulas\n          const escaped = value.replace(/\"/g, '\"\"');\n          return escaped.includes(',') ? `\"${escaped}\"` : escaped;\n        }\n        if (value instanceof Date) {\n          return value.toISOString();\n        }\n        if (typeof value === 'object') {\n          // Converter objetos para JSON e envolver em aspas\n          return `\"${JSON.stringify(value).replace(/\"/g, '\"\"')}\"`;\n        }\n        return value;\n      });\n\n      csv += values.join(',') + '\\n';\n    });\n\n    return csv;\n  }\n}\n"],"version":3}