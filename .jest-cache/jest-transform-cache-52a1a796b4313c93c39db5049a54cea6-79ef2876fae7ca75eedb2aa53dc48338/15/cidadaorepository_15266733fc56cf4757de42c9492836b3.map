{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\repositories\\cidadao.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\repositories\\cidadao.repository.ts"],"sourcesContent":["import { Injectable, BadRequestException, ConflictException, NotFoundException } from '@nestjs/common';\nimport { Repository, DataSource } from 'typeorm';\nimport { Cidadao } from '../../../entities/cidadao.entity';\nimport { ComposicaoFamiliar } from '../../../entities/composicao-familiar.entity';\nimport { EntityNotFoundException } from '../../../shared/exceptions';\n\n/**\n * Repositório de cidadãos\n *\n * Responsável por operações de acesso a dados relacionadas a cidadãos\n */\n@Injectable()\nexport class CidadaoRepository {\n  private repository: Repository<Cidadao>;\n\n  constructor(private dataSource: DataSource) {\n    this.repository = this.dataSource.getRepository(Cidadao);\n  }\n\n  /**\n   * Busca todos os cidadãos com filtros e paginação tradicional por offset\n   * @param options Opções de filtro e paginação\n   * @returns Lista de cidadãos paginada e contagem total\n   */\n  async findAll(options?: {\n    skip?: number;\n    take?: number;\n    where?: any;\n    order?: any;\n    includeRelations?: boolean;\n    specificFields?: string[];\n  }): Promise<[Cidadao[], number]> {\n    const {\n      skip = 0,\n      take = 10,\n      where = {},\n      order = { created_at: 'DESC' },\n      includeRelations = false,\n      specificFields = [],\n    } = options || {};\n\n    const queryBuilder = this.repository.createQueryBuilder('cidadao');\n\n    // Selecionar apenas campos necessários se especificados\n    if (specificFields.length > 0) {\n      const fields = specificFields.map(field => `cidadao.${field}`);\n      queryBuilder.select(fields);\n    }\n\n    // Aplicar filtros de busca otimizados\n    if (where.$or) {\n      const searchConditions = where.$or.map((condition: any, index: number) => {\n        const paramKey = `search_${index}`;\n        if (condition.nome) {\n          queryBuilder.setParameter(paramKey, condition.nome.$iLike.replace(/%/g, ''));\n          return `cidadao.nome ILIKE '%' || :${paramKey} || '%'`;\n        }\n        if (condition.cpf) {\n          queryBuilder.setParameter(paramKey, condition.cpf.$iLike.replace(/%/g, ''));\n          return `cidadao.cpf ILIKE '%' || :${paramKey} || '%'`;\n        }\n        if (condition.nis) {\n          queryBuilder.setParameter(paramKey, condition.nis.$iLike.replace(/%/g, ''));\n          return `cidadao.nis ILIKE '%' || :${paramKey} || '%'`;\n        }\n        return '1=0';\n      });\n      queryBuilder.andWhere(`(${searchConditions.join(' OR ')})`);\n      delete where.$or;\n    }\n\n    // Aplicar filtros de endereço\n    if (where['endereco.bairro']) {\n      queryBuilder.andWhere(\"cidadao.endereco->>'bairro' ILIKE :bairro\", {\n        bairro: `%${where['endereco.bairro'].$iLike.replace(/%/g, '')}%`\n      });\n      delete where['endereco.bairro'];\n    }\n\n    // Aplicar outros filtros\n    Object.keys(where).forEach(key => {\n      if (where[key] !== undefined) {\n        queryBuilder.andWhere(`cidadao.${key} = :${key}`, { [key]: where[key] });\n      }\n    });\n\n    // Incluir relacionamentos apenas se necessário\n    if (includeRelations) {\n      queryBuilder\n        .leftJoinAndSelect('cidadao.papeis', 'papeis', 'papeis.ativo = :papelAtivo', { papelAtivo: true })\n        .leftJoinAndSelect('cidadao.composicao_familiar', 'composicao_familiar')\n        .leftJoinAndSelect('cidadao.unidade', 'unidade');\n    }\n\n    // Aplicar ordenação\n    Object.keys(order).forEach(key => {\n      queryBuilder.addOrderBy(`cidadao.${key}`, order[key]);\n    });\n\n    // Aplicar paginação\n    queryBuilder.skip(skip).take(take);\n\n    // Gerar log da query em desenvolvimento para debug\n    if (process.env.NODE_ENV === 'development') {\n      const [query, parameters] = queryBuilder.getQueryAndParameters();\n      console.log('Query gerada:', query);\n      console.log('Parâmetros:', parameters);\n    }\n\n    return queryBuilder.getManyAndCount();\n  }\n\n  /**\n   * Busca um cidadão pelo ID com relacionamentos otimizados\n   * @param id ID do cidadão\n   * @param includeRelations Se deve incluir relacionamentos (papéis, composição familiar)\n   * @returns Cidadão encontrado ou null\n   */\n  async findById(id: string, includeRelations = false, specificFields?: string[]): Promise<Cidadao | null> {\n    const query = this.repository.createQueryBuilder('cidadao')\n      .where('cidadao.id = :id', { id });\n    \n    // Selecionar apenas campos específicos se solicitado\n    if (specificFields && specificFields.length > 0) {\n      const fields = specificFields.map(field => `cidadao.${field}`);\n      query.select(fields);\n    }\n    \n    if (includeRelations) {\n      query\n        .leftJoinAndSelect('cidadao.papeis', 'papeis', 'papeis.ativo = :papelAtivo', { papelAtivo: true })\n        .leftJoinAndSelect('cidadao.composicao_familiar', 'composicao_familiar')\n        .leftJoinAndSelect('cidadao.unidade', 'unidade');\n    }\n    \n    // Log em ambiente de desenvolvimento\n    if (process.env.NODE_ENV === 'development') {\n      const [queryStr, parameters] = query.getQueryAndParameters();\n      console.log('Query findById:', queryStr);\n      console.log('Parâmetros:', parameters);\n    }\n    \n    return query.getOne();\n  }\n\n  /**\n   * Busca um cidadão pelo CPF\n   * @param cpf CPF do cidadão\n   * @param includeRelations Se deve incluir relacionamentos (papéis, composição familiar)\n   * @returns Cidadão encontrado ou null\n   */\n  async findByCpf(cpf: string, includeRelations = false, specificFields?: string[]): Promise<Cidadao | null> {\n    // Normaliza o CPF removendo caracteres não numéricos\n    const cpfNormalizado = cpf.replace(/\\D/g, '');\n\n    const query = this.repository.createQueryBuilder('cidadao')\n      .where('cidadao.cpf = :cpf', { cpf: cpfNormalizado });\n    \n    // Selecionar apenas campos específicos se solicitado\n    if (specificFields && specificFields.length > 0) {\n      const fields = specificFields.map(field => `cidadao.${field}`);\n      query.select(fields);\n    }\n    \n    if (includeRelations) {\n      query\n        .leftJoinAndSelect('cidadao.papeis', 'papeis', 'papeis.ativo = :papelAtivo', { papelAtivo: true })\n        .leftJoinAndSelect('cidadao.composicao_familiar', 'composicao_familiar')\n        .leftJoinAndSelect('cidadao.unidade', 'unidade');\n    }\n    \n    // Usar cache para CPF (identificador único e frequentemente consultado)\n    query.cache(true);\n    \n    return query.getOne();\n  }\n\n  /**\n   * Busca cidadão por NIS\n   * @param nis NIS do cidadão\n   * @param includeRelations Se deve incluir relacionamentos\n   * @returns Cidadão encontrado ou null\n   */\n  async findByNis(nis: string, includeRelations = false, specificFields?: string[]): Promise<Cidadao | null> {\n    // Normaliza o NIS removendo caracteres não numéricos\n    const nisNormalizado = nis.replace(/\\D/g, '');\n    \n    const query = this.repository.createQueryBuilder('cidadao')\n      .where('cidadao.nis = :nis', { nis: nisNormalizado });\n\n    // Selecionar apenas campos específicos se solicitado\n    if (specificFields && specificFields.length > 0) {\n      const fields = specificFields.map(field => `cidadao.${field}`);\n      query.select(fields);\n    }\n\n    if (includeRelations) {\n      query\n        .leftJoinAndSelect('cidadao.papeis', 'papeis', 'papeis.ativo = :papelAtivo', { papelAtivo: true })\n        .leftJoinAndSelect('cidadao.composicao_familiar', 'composicao_familiar')\n        .leftJoinAndSelect('cidadao.unidade', 'unidade');\n    }\n    \n    // Usar cache para NIS (identificador único e frequentemente consultado)\n    query.cache(true);\n\n    return query.getOne();\n  }\n\n  /**\n   * Busca cidadão por telefone\n   * @param telefone Telefone do cidadão\n   * @param includeRelations Se deve incluir relacionamentos\n   * @returns Cidadão encontrado ou null\n   */\n  async findByTelefone(telefone: string, includeRelations = false, specificFields?: string[]): Promise<Cidadao | null> {\n    // Normaliza o telefone removendo caracteres não numéricos\n    const telefoneNormalizado = telefone.replace(/\\D/g, '');\n    \n    const query = this.repository.createQueryBuilder('cidadao')\n      .where('cidadao.telefone = :telefone', { telefone: telefoneNormalizado });\n\n    // Selecionar apenas campos específicos se solicitado\n    if (specificFields && specificFields.length > 0) {\n      const fields = specificFields.map(field => `cidadao.${field}`);\n      query.select(fields);\n    }\n\n    if (includeRelations) {\n      query\n        .leftJoinAndSelect('cidadao.papeis', 'papeis', 'papeis.ativo = :papelAtivo', { papelAtivo: true })\n        .leftJoinAndSelect('cidadao.composicao_familiar', 'composicao_familiar')\n        .leftJoinAndSelect('cidadao.unidade', 'unidade');\n    }\n\n    return query.getOne();\n  }\n\n  /**\n   * Busca cidadão por nome (busca parcial)\n   * @param nome Nome do cidadão\n   * @param includeRelations Se deve incluir relacionamentos\n   * @returns Lista de cidadãos encontrados\n   */\n  async findByNome(nome: string, includeRelations = false, specificFields?: string[]): Promise<Cidadao[]> {\n    const query = this.repository.createQueryBuilder('cidadao')\n      .where('LOWER(cidadao.nome) ILIKE LOWER(:nome)', { nome: `%${nome}%` })\n      .orderBy('cidadao.nome', 'ASC')\n      .limit(50); // Limitar resultados para performance\n\n    // Selecionar apenas campos específicos se solicitado\n    if (specificFields && specificFields.length > 0) {\n      const fields = specificFields.map(field => `cidadao.${field}`);\n      query.select(fields);\n    }\n\n    if (includeRelations) {\n      query\n        .leftJoinAndSelect('cidadao.papeis', 'papeis', 'papeis.ativo = :papelAtivo', { papelAtivo: true })\n        .leftJoinAndSelect('cidadao.composicao_familiar', 'composicao_familiar')\n        .leftJoinAndSelect('cidadao.unidade', 'unidade');\n    }\n\n    // Log em desenvolvimento\n    if (process.env.NODE_ENV === 'development') {\n      const [queryStr, parameters] = query.getQueryAndParameters();\n      console.log('Query findByNome:', queryStr);\n    }\n\n    return query.getMany();\n  }\n  \n  /**\n   * Busca cidadãos com paginação via cursor para melhor performance com grandes volumes de dados\n   * \n   * @param options Opções de paginação e filtro\n   * @returns Lista de cidadãos e informações de paginação via cursor\n   */\n  async findByCursor(options: {\n    cursor?: string;\n    limit?: number;\n    orderBy?: string;\n    orderDirection?: 'ASC' | 'DESC';\n    where?: any;\n    includeRelations?: boolean;\n    specificFields?: string[];\n  }): Promise<{ items: Cidadao[]; count: number; nextCursor?: string; hasNextPage: boolean }> {\n    const {\n      cursor,\n      limit = 10,\n      orderBy = 'created_at',\n      orderDirection = 'DESC',\n      where = {},\n      includeRelations = false,\n      specificFields = [],\n    } = options;\n\n    // Validar limite máximo para evitar sobrecarga do banco\n    const validLimit = Math.min(limit, 100);\n    \n    const queryBuilder = this.repository.createQueryBuilder('cidadao');\n\n    // Selecionar apenas campos específicos se definidos\n    if (specificFields.length > 0) {\n      const fields = specificFields.map(field => `cidadao.${field}`);\n      queryBuilder.select(fields);\n    }\n\n    // Aplicar filtros\n    Object.keys(where).forEach(key => {\n      if (where[key] !== undefined) {\n        if (key === 'nome' && typeof where[key] === 'string') {\n          queryBuilder.andWhere(`LOWER(cidadao.${key}) ILIKE LOWER(:${key})`, { [key]: `%${where[key]}%` });\n        } else if (key === 'endereco.bairro' && typeof where[key] === 'string') {\n          queryBuilder.andWhere(\"cidadao.endereco->>'bairro' ILIKE :bairro\", { bairro: `%${where[key]}%` });\n        } else if (key === 'endereco.cidade' && typeof where[key] === 'string') {\n          queryBuilder.andWhere(\"cidadao.endereco->>'cidade' ILIKE :cidade\", { cidade: `%${where[key]}%` });\n        } else {\n          queryBuilder.andWhere(`cidadao.${key} = :${key}`, { [key]: where[key] });\n        }\n      }\n    });\n\n    // Aplicar filtro de cursor para paginação\n    if (cursor) {\n      // Para ordenamento DESC, precisamos obter registros < cursor\n      // Para ordenamento ASC, precisamos obter registros > cursor\n      const operator = orderDirection === 'DESC' ? '<' : '>';\n      \n      // Para timestamps\n      if (orderBy === 'created_at' || orderBy === 'updated_at') {\n        queryBuilder.andWhere(`cidadao.${orderBy} ${operator} (SELECT ${orderBy} FROM cidadao WHERE id = :cursorId)`, { cursorId: cursor });\n      } \n      // Para campos string ou numéricos\n      else {\n        queryBuilder.andWhere(`cidadao.${orderBy} ${operator} (SELECT ${orderBy} FROM cidadao WHERE id = :cursorId)`, { cursorId: cursor });\n      }\n    }\n\n    // Incluir relacionamentos conforme solicitado\n    if (includeRelations) {\n      queryBuilder\n        .leftJoinAndSelect('cidadao.papeis', 'papeis', 'papeis.ativo = :papelAtivo', { papelAtivo: true })\n        .leftJoinAndSelect('cidadao.composicao_familiar', 'composicao_familiar')\n        .leftJoinAndSelect('cidadao.unidade', 'unidade');\n    }\n\n    // Ordenar resultados\n    queryBuilder.orderBy(`cidadao.${orderBy}`, orderDirection);\n    \n    // Adicionar ordenação secundária pelo ID para garantir determinismo quando há valores iguais\n    queryBuilder.addOrderBy('cidadao.id', orderDirection);\n\n    // Aplicar limite\n    queryBuilder.take(validLimit + 1); // +1 para verificar se há mais páginas\n\n    // Executar query\n    const items = await queryBuilder.getMany();\n\n    // Verificar se há mais páginas\n    const hasNextPage = items.length > validLimit;\n    if (hasNextPage) {\n      items.pop(); // Remover o item extra que foi usado para verificar se há mais páginas\n    }\n\n    // Definir cursor para a próxima página\n    const nextCursor = hasNextPage ? items[items.length - 1]?.id : undefined;\n\n    // Obter contagem aproximada para metadados\n    const countQuery = this.repository.createQueryBuilder('cidadao');\n    // Aplicar os mesmos filtros que a query principal\n    Object.keys(where).forEach(key => {\n      if (where[key] !== undefined) {\n        if (key === 'nome' && typeof where[key] === 'string') {\n          countQuery.andWhere(`LOWER(cidadao.${key}) ILIKE LOWER(:${key})`, { [key]: `%${where[key]}%` });\n        } else if (key === 'endereco.bairro' && typeof where[key] === 'string') {\n          countQuery.andWhere(\"cidadao.endereco->>'bairro' ILIKE :bairro\", { bairro: `%${where[key]}%` });\n        } else if (key === 'endereco.cidade' && typeof where[key] === 'string') {\n          countQuery.andWhere(\"cidadao.endereco->>'cidade' ILIKE :cidade\", { cidade: `%${where[key]}%` });\n        } else {\n          countQuery.andWhere(`cidadao.${key} = :${key}`, { [key]: where[key] });\n        }\n      }\n    });\n    \n    // Usar estimate quando possível para maior performance\n    const count = await countQuery.getCount();\n\n    return {\n      items,\n      count: items.length,\n      nextCursor,\n      hasNextPage,\n    };\n  }\n\n  /**\n   * Cria um novo cidadão\n   * @param data Dados do cidadão\n   * @returns Cidadão criado\n   */\n  async create(data: Partial<Cidadao>): Promise<Cidadao> {\n    // Normaliza o CPF removendo caracteres não numéricos\n    if (data.cpf) {\n      data.cpf = data.cpf.replace(/\\D/g, '');\n    }\n\n    // Normaliza o NIS removendo caracteres não numéricos\n    if (data.nis) {\n      data.nis = data.nis.replace(/\\D/g, '');\n    }\n\n    // Normaliza o enum sexo para minúsculo\n    if (data.sexo) {\n      data.sexo = data.sexo.toLowerCase() as any;\n    }\n\n    const cidadao = this.repository.create(data);\n    return this.repository.save(cidadao);\n  }\n\n  /**\n   * Atualiza um cidadão existente\n   * @param id ID do cidadão\n   * @param data Dados a serem atualizados\n   * @returns Cidadão atualizado\n   * @throws NotFoundException se o cidadão não for encontrado\n   */\n  async update(id: string, data: Partial<Cidadao>): Promise<Cidadao> {\n    // Normaliza o CPF removendo caracteres não numéricos\n    if (data.cpf) {\n      data.cpf = data.cpf.replace(/\\D/g, '');\n    }\n    \n    // Normaliza o NIS removendo caracteres não numéricos\n    if (data.nis) {\n      data.nis = data.nis.replace(/\\D/g, '');\n    }\n\n    // Normaliza o enum sexo para minúsculo\n    if (data.sexo) {\n      data.sexo = data.sexo.toLowerCase() as any;\n    }\n\n    const updateResult = await this.repository.update(id, data);\n    \n    if (updateResult.affected === 0) {\n      throw new NotFoundException('Cidadão não encontrado');\n    }\n    \n    const cidadao = await this.findById(id, true);\n    if (!cidadao) {\n      throw new NotFoundException('Cidadão não encontrado após atualização');\n    }\n    return cidadao;\n  }\n\n  /**\n   * Adiciona membro à composição familiar\n   * @param id ID do cidadão\n   * @param membro Dados do membro familiar\n   * @returns Cidadão atualizado\n   */\n  async addComposicaoFamiliar(id: string, membro: any): Promise<Cidadao> {\n    const cidadao = await this.findById(id, false); // Não precisa de relacionamentos para validação\n\n    if (!cidadao) {\n      throw new EntityNotFoundException('Cidadão', id);\n    }\n\n    // Verificar se já existe membro com o mesmo nome na composição familiar\n    const composicaoFamiliarRepository = this.dataSource.getRepository(ComposicaoFamiliar);\n    const membroExistente = await composicaoFamiliarRepository.findOne({\n      where: {\n        cidadao_id: id,\n        nome: membro.nome\n      }\n    });\n\n    if (membroExistente) {\n      throw new BadRequestException(`Já existe um membro com o nome '${membro.nome}' na composição familiar deste cidadão`);\n    }\n\n    // Verificar se já existe membro com o mesmo CPF na composição familiar\n    const cpfFormatado = membro.cpf?.replace(/\\D/g, '');\n    if (cpfFormatado) {\n      const membroComMesmoCpf = await composicaoFamiliarRepository.findOne({\n        where: {\n          cidadao_id: id,\n          cpf: cpfFormatado\n        }\n      });\n\n      if (membroComMesmoCpf) {\n        throw new BadRequestException(`Já existe um membro com o CPF '${cpfFormatado}' na composição familiar deste cidadão`);\n      }\n    }\n  \n    // Criar nova entrada na tabela composicao_familiar\n    // O cidadao_id vem do parâmetro da rota, não do body\n    const novoMembro = composicaoFamiliarRepository.create({\n      cidadao_id: id,\n      nome: membro.nome,\n      cpf: cpfFormatado,\n      nis: membro.nis?.replace(/\\D/g, ''),\n      idade: membro.idade,\n      ocupacao: membro.ocupacao,\n      escolaridade: membro.escolaridade,\n      parentesco: membro.parentesco,\n      renda: membro.renda || 0,\n      observacoes: membro.observacoes,\n    });\n\n    try {\n      await composicaoFamiliarRepository.save(novoMembro);\n    } catch (error) {\n      // Capturar erro específico da trigger de exclusividade de papel\n      if (error.message && error.message.includes('Cidadão não pode ser adicionado à composição familiar, pois já é beneficiário')) {\n        throw new ConflictException(\n          'Cidadão não pode ser adicionado à composição familiar pois já possui papel de beneficiário.'\n        );\n      }\n      \n      // Capturar erros de violação de restrição de unicidade\n      if (error.code === '23505') { // Código PostgreSQL para violação de restrição única\n        throw new BadRequestException(`Não foi possível adicionar o membro à composição familiar. Já existe um membro com o mesmo nome ou CPF.`);\n      }\n      \n      // Capturar erros de violação de chave estrangeira\n      if (error.code === '23503') {\n        throw new BadRequestException('Dados inválidos fornecidos para o membro da composição familiar.');\n      }\n      \n      throw error;\n    }\n\n    // Retornar cidadão atualizado com relacionamentos\n    const cidadaoAtualizado = await this.findById(id, true);\n    if (!cidadaoAtualizado) {\n      throw new EntityNotFoundException('Cidadão', id);\n    }\n    return cidadaoAtualizado;\n  }\n\n  /**\n   * Remove um cidadão (soft delete)\n   * @param id ID do cidadão\n   * @returns Resultado da operação\n   */\n  async remove(id: string): Promise<void> {\n    await this.repository.softDelete(id);\n  }\n}\n"],"version":3}