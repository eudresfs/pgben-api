{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\controllers\\auditoria.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\controllers\\auditoria.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuditoriaController } from '../../../../src/modules/auditoria/controllers/auditoria.controller';\nimport { AuditoriaService } from '../../../../src/modules/auditoria/services/auditoria.service';\nimport { TipoOperacao } from '../../../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../../../../src/modules/auditoria/dto/create-log-auditoria.dto';\nimport { LogAuditoria } from '../../../../src/modules/auditoria/entities/log-auditoria.entity';\nimport { NotFoundException } from '@nestjs/common';\n\ndescribe('AuditoriaController', () => {\n  let controller: AuditoriaController;\n  let service: AuditoriaService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [AuditoriaController],\n      providers: [\n        {\n          provide: AuditoriaService,\n          useValue: {\n            create: jest.fn(),\n            findAll: jest.fn(),\n            findOne: jest.fn(),\n            findByEntidade: jest.fn(),\n            update: jest.fn(),\n            remove: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    controller = module.get<AuditoriaController>(AuditoriaController);\n    service = module.get<AuditoriaService>(AuditoriaService);\n  });\n\n  it('deve ser definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('create', () => {\n    it('deve criar um novo log de auditoria', async () => {\n      const createDto = new CreateLogAuditoriaDto();\n      createDto.tipo_operacao = TipoOperacao.CREATE;\n      createDto.entidade_afetada = 'Usuario';\n      createDto.entidade_id = '123e4567-e89b-12d3-a456-426614174000';\n      createDto.descricao = 'Criação de novo usuário';\n      createDto.ip_origem = '192.168.1.1';\n      createDto.usuario_id = 'mock-user-id';\n\n      const mockResult = { id: 'mock-log-id', ...createDto };\n      jest\n        .spyOn(service, 'create')\n        .mockResolvedValue(mockResult as LogAuditoria);\n\n      const result = await controller.create(createDto);\n\n      expect(service.create).toHaveBeenCalledWith(createDto);\n      expect(result).toEqual(mockResult);\n    });\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista de logs de auditoria', async () => {\n      const mockLogs = [\n        {\n          id: 'log-1',\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Usuario',\n          created_at: new Date(),\n        },\n        {\n          id: 'log-2',\n          tipo_operacao: TipoOperacao.UPDATE,\n          entidade_afetada: 'Documento',\n          created_at: new Date(),\n        },\n      ];\n\n      jest\n        .spyOn(service, 'findAll')\n        .mockResolvedValue(mockLogs as LogAuditoria[]);\n\n      const result = await controller.findAll({});\n\n      expect(service.findAll).toHaveBeenCalled();\n      expect(result).toEqual(mockLogs);\n    });\n\n    it('deve aplicar filtros quando fornecidos', async () => {\n      const filtros = {\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        usuario_id: 'user-1',\n        data_inicio: '2023-01-01',\n        data_fim: '2023-01-31',\n      };\n\n      const mockLogs = [\n        {\n          id: 'log-1',\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Usuario',\n          usuario_id: 'user-1',\n          created_at: new Date('2023-01-15'),\n        },\n      ];\n\n      jest\n        .spyOn(service, 'findAll')\n        .mockResolvedValue(mockLogs as LogAuditoria[]);\n\n      const result = await controller.findAll(filtros);\n\n      expect(service.findAll).toHaveBeenCalledWith({\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        usuario_id: 'user-1',\n        data_inicio: new Date('2023-01-01'),\n        data_fim: new Date('2023-01-31'),\n      });\n      expect(result).toEqual(mockLogs);\n    });\n  });\n\n  describe('findOne', () => {\n    it('deve retornar um log de auditoria pelo ID', async () => {\n      const mockLog = {\n        id: 'log-1',\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        created_at: new Date(),\n      };\n\n      jest.spyOn(service, 'findOne').mockResolvedValue(mockLog as LogAuditoria);\n\n      const result = await controller.findOne('log-1');\n\n      expect(service.findOne).toHaveBeenCalledWith('log-1');\n      expect(result).toEqual(mockLog);\n    });\n\n    it('deve lançar NotFoundException quando o log não é encontrado', async () => {\n      jest.spyOn(service, 'findOne').mockRejectedValue(new NotFoundException());\n\n      await expect(controller.findOne('non-existent-id')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('findByEntidade', () => {\n    it('deve retornar logs de auditoria para uma entidade específica', async () => {\n      const mockLogs = [\n        {\n          id: 'log-1',\n          tipo_operacao: TipoOperacao.CREATE,\n          entidade_afetada: 'Usuario',\n          entidade_id: 'user-1',\n          created_at: new Date(),\n        },\n        {\n          id: 'log-2',\n          tipo_operacao: TipoOperacao.UPDATE,\n          entidade_afetada: 'Usuario',\n          entidade_id: 'user-1',\n          created_at: new Date(),\n        },\n      ];\n\n      jest\n        .spyOn(service, 'findByEntidade')\n        .mockResolvedValue(mockLogs as LogAuditoria[]);\n\n      const result = await controller.findByEntidade('Usuario', 'user-1');\n\n      expect(service.findByEntidade).toHaveBeenCalledWith('Usuario', 'user-1');\n      expect(result).toEqual(mockLogs);\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar um log de auditoria existente', async () => {\n      const updateDto = {\n        descricao: 'Descrição atualizada',\n      };\n\n      const mockLog = {\n        id: 'log-1',\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        descricao: 'Descrição atualizada',\n        created_at: new Date(),\n      };\n\n      jest.spyOn(service, 'update').mockResolvedValue(mockLog as LogAuditoria);\n\n      const result = await controller.update('log-1', updateDto);\n\n      expect(service.update).toHaveBeenCalledWith('log-1', updateDto);\n      expect(result).toEqual(mockLog);\n    });\n\n    it('deve lançar NotFoundException quando o log não é encontrado', async () => {\n      jest.spyOn(service, 'update').mockRejectedValue(new NotFoundException());\n\n      await expect(controller.update('non-existent-id', {})).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('remove', () => {\n    it('deve remover um log de auditoria existente', async () => {\n      const mockLog = {\n        id: 'log-1',\n        tipo_operacao: TipoOperacao.CREATE,\n        entidade_afetada: 'Usuario',\n        created_at: new Date(),\n      };\n\n      jest.spyOn(service, 'remove').mockResolvedValue(mockLog as LogAuditoria);\n\n      const result = await controller.remove('log-1');\n\n      expect(service.remove).toHaveBeenCalledWith('log-1');\n      expect(result).toEqual(mockLog);\n    });\n\n    it('deve lançar NotFoundException quando o log não é encontrado', async () => {\n      jest.spyOn(service, 'remove').mockRejectedValue(new NotFoundException());\n\n      await expect(controller.remove('non-existent-id')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n});\n"],"version":3}