{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\controllers\\documento.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\controllers\\documento.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Delete,\n  Param,\n  Query,\n  Body,\n  UploadedFile,\n  UseInterceptors,\n  UseGuards,\n  Res,\n  BadRequestException,\n  ParseUUIDPipe,\n  HttpCode,\n  HttpStatus,\n  Request,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { Response } from 'express';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiConsumes,\n  ApiBody,\n  ApiQuery,\n  ApiBearerAuth,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { DocumentoService } from '../services/documento.service';\nimport { UploadDocumentoDto } from '../dto/upload-documento.dto';\nimport { DocumentoResponseDto } from '../dto/documento-response.dto';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { plainToInstance } from 'class-transformer';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { GetUser } from '../../../auth/decorators/get-user.decorator';\nimport { Usuario } from '../../../entities/usuario.entity';\n\n/**\n * Controlador de Documentos\n *\n * Responsável por gerenciar as rotas relacionadas aos documentos\n * anexados aos cidadãos e solicitações de benefícios\n */\n@ApiTags('Documentos')\n@Controller('documento')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class DocumentoController {\n  constructor(private readonly documentoService: DocumentoService) {}\n\n  /**\n   * Lista documentos de um cidadão\n   */\n  @Get('cidadao/:cidadaoId')\n  @RequiresPermission({ permissionName: 'documento.listar' })\n  @ApiOperation({ summary: 'Listar documentos de um cidadão' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de documentos retornada com sucesso',\n  })\n  @ApiParam({\n    name: 'cidadaoId',\n    description: 'ID do cidadão',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiQuery({\n    name: 'tipo',\n    description: 'Filtrar por tipo de documento',\n    required: false,\n    enum: [\n      'RG',\n      'CPF',\n      'COMPROVANTE_RESIDENCIA',\n      'COMPROVANTE_RENDA',\n      'OUTROS',\n    ],\n  })\n  @ApiQuery({\n    name: 'reutilizavel',\n    description: 'Filtrar por documentos reutilizáveis',\n    required: false,\n    type: 'boolean',\n  })\n  async findByCidadao(\n    @Param('cidadaoId', ParseUUIDPipe) cidadaoId: string,\n    @Query('tipo') tipo?: string,\n    @Query('reutilizavel') reutilizavel?: boolean,\n  ) {\n    return this.documentoService.findByCidadao(cidadaoId, tipo, reutilizavel);\n  }\n\n  /**\n   * Lista documentos de uma solicitação\n   */\n  @Get('solicitacao/:solicitacaoId')\n  @RequiresPermission({ permissionName: 'documento.listar' })\n  @ApiOperation({ summary: 'Listar documentos de uma solicitação' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de documentos retornada com sucesso',\n  })\n  @ApiParam({\n    name: 'solicitacaoId',\n    description: 'ID da solicitação',\n    type: 'string',\n    format: 'uuid',\n  })\n  async findBySolicitacao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n  ) {\n    return this.documentoService.findBySolicitacao(solicitacaoId);\n  }\n\n  /**\n   * Busca documentos reutilizáveis por tipo\n   */\n  @Get('reutilizaveis')\n  @RequiresPermission({ permissionName: 'documento.listar' })\n  @ApiOperation({ summary: 'Buscar documentos reutilizáveis' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de documentos reutilizáveis retornada com sucesso',\n  })\n  @ApiQuery({\n    name: 'tipo',\n    description: 'Tipo de documento',\n    required: true,\n    enum: [\n      'RG',\n      'CPF',\n      'COMPROVANTE_RESIDENCIA',\n      'COMPROVANTE_RENDA',\n      'OUTROS',\n    ],\n  })\n  @ApiQuery({\n    name: 'cidadaoId',\n    description: 'ID do cidadão (opcional)',\n    required: false,\n    type: 'string',\n    format: 'uuid',\n  })\n  async findReutilizaveis(\n    @Query('tipo') tipo?: string,\n    @Query('cidadaoId') cidadaoId?: string,\n  ) {\n    return this.documentoService.findReutilizaveis(cidadaoId, tipo);\n  }\n\n  /**\n   * Obtém detalhes de um documento específico\n   */\n  @Get(':id')\n  @RequiresPermission({ permissionName: 'documento.visualizar' })\n  @ApiOperation({ summary: 'Obter detalhes de um documento' })\n  @ApiResponse({ status: 200, description: 'Documento encontrado com sucesso' })\n  @ApiResponse({ status: 404, description: 'Documento não encontrado' })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do documento',\n    type: 'string',\n    format: 'uuid',\n  })\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    return this.documentoService.findById(id);\n  }\n\n  /**\n   * Faz download de um documento\n   */\n  @Get(':id/download')\n  @RequiresPermission({ permissionName: 'documento.download' })\n  @ApiOperation({ summary: 'Fazer download de um documento' })\n  @ApiResponse({ status: 200, description: 'Documento baixado com sucesso' })\n  @ApiResponse({ status: 404, description: 'Documento não encontrado' })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do documento',\n    type: 'string',\n    format: 'uuid',\n  })\n  async download(@Param('id', ParseUUIDPipe) id: string, @Res() res: Response) {\n    const resultado = await this.documentoService.download(id);\n\n    res.set({\n      'Content-Type': resultado.mimetype,\n      'Content-Disposition': `attachment; filename=\"${resultado.nomeOriginal}\"`,\n      'Content-Length': resultado.buffer.length.toString(),\n    });\n\n    res.send(resultado.buffer);\n  }\n\n  /**\n   * Faz upload de um documento\n   */\n  @Post('upload')\n  @RequiresPermission({ permissionName: 'documento.criar' })\n  @UseInterceptors(FileInterceptor('arquivo'))\n  @ApiOperation({ summary: 'Fazer upload de um documento' })\n  @ApiConsumes('multipart/form-data')\n  @ApiBody({\n    description: 'Dados do documento para upload',\n    type: UploadDocumentoDto,\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Documento enviado com sucesso',\n    type: DocumentoResponseDto,\n  })\n  @ApiResponse({ status: 400, description: 'Dados inválidos' })\n  async upload(\n    @UploadedFile() arquivo: any,\n    @Body() uploadDto: UploadDocumentoDto,\n    @GetUser() usuario: Usuario,\n  ) {\n    if (!arquivo) {\n      throw new BadRequestException('Arquivo é obrigatório');\n    }\n\n    const resultado = await this.documentoService.upload(\n      arquivo,\n      uploadDto,\n      usuario.id,\n    );\n\n    // Transformar o resultado para excluir dados sensíveis\n    return {\n      data: plainToInstance(DocumentoResponseDto, resultado, {\n        excludeExtraneousValues: true,\n      }),\n      meta: null,\n      message: null,\n    };\n  }\n\n  /**\n   * Marca um documento como verificado\n   */\n  @Post(':id/verificar')\n  @RequiresPermission({ permissionName: 'documento.verificar' })\n  @ApiOperation({ summary: 'Marcar documento como verificado' })\n  @ApiResponse({\n    status: 200,\n    description: 'Documento verificado com sucesso',\n  })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do documento',\n    type: 'string',\n    format: 'uuid',\n  })\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        observacoes: {\n          type: 'string',\n          description: 'Observações da verificação',\n          maxLength: 500,\n        },\n      },\n    },\n  })\n  async verificar(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body('observacoes') observacoes: string,\n    @GetUser() usuario: Usuario,\n  ) {\n    return this.documentoService.verificar(id, usuario.id, observacoes);\n  }\n\n  /**\n   * Remove um documento (soft delete)\n   */\n  @Delete(':id')\n  @RequiresPermission({ permissionName: 'documento.excluir' })\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @ApiOperation({ summary: 'Remover um documento' })\n  @ApiResponse({ status: 204, description: 'Documento removido com sucesso' })\n  @ApiResponse({ status: 404, description: 'Documento não encontrado' })\n  @ApiParam({\n    name: 'id',\n    description: 'ID do documento',\n    type: 'string',\n    format: 'uuid',\n  })\n  async remover(@Param('id', ParseUUIDPipe) id: string, @Request() req: any) {\n    await this.documentoService.remover(id, req.user.id);\n  }\n\n  /**\n   * Obtém estatísticas de documentos\n   */\n  @Get('estatisticas/geral')\n  @RequiresPermission({ permissionName: 'documento.estatisticas' })\n  @ApiOperation({ summary: 'Obter estatísticas de documentos' })\n  @ApiResponse({\n    status: 200,\n    description: 'Estatísticas retornadas com sucesso',\n  })\n  @ApiQuery({\n    name: 'cidadaoId',\n    description: 'ID do cidadão (opcional)',\n    required: false,\n    type: 'string',\n    format: 'uuid',\n  })\n  async getEstatisticas(@Query('cidadaoId') cidadaoId?: string) {\n    return this.documentoService.getEstatisticas(cidadaoId);\n  }\n}\n"],"version":3}