fd8de58f95bd36f2ea88b53c061a4c18
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentoController = void 0;
const common_1 = require("@nestjs/common");
const platform_express_1 = require("@nestjs/platform-express");
const express_1 = require("express");
const swagger_1 = require("@nestjs/swagger");
const documento_service_1 = require("../services/documento.service");
const upload_documento_dto_1 = require("../dto/upload-documento.dto");
const documento_response_dto_1 = require("../dto/documento-response.dto");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const class_transformer_1 = require("class-transformer");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const get_user_decorator_1 = require("../../../auth/decorators/get-user.decorator");
const usuario_entity_1 = require("../../../entities/usuario.entity");
/**
 * Controlador de Documentos
 *
 * Responsável por gerenciar as rotas relacionadas aos documentos
 * anexados aos cidadãos e solicitações de benefícios
 */
let DocumentoController = class DocumentoController {
    documentoService;
    constructor(documentoService) {
        this.documentoService = documentoService;
    }
    /**
     * Lista documentos de um cidadão
     */
    async findByCidadao(cidadaoId, tipo, reutilizavel) {
        return this.documentoService.findByCidadao(cidadaoId, tipo, reutilizavel);
    }
    /**
     * Lista documentos de uma solicitação
     */
    async findBySolicitacao(solicitacaoId) {
        return this.documentoService.findBySolicitacao(solicitacaoId);
    }
    /**
     * Busca documentos reutilizáveis por tipo
     */
    async findReutilizaveis(tipo, cidadaoId) {
        return this.documentoService.findReutilizaveis(cidadaoId, tipo);
    }
    /**
     * Obtém detalhes de um documento específico
     */
    async findOne(id) {
        return this.documentoService.findById(id);
    }
    /**
     * Faz download de um documento
     */
    async download(id, res) {
        const resultado = await this.documentoService.download(id);
        res.set({
            'Content-Type': resultado.mimetype,
            'Content-Disposition': `attachment; filename="${resultado.nomeOriginal}"`,
            'Content-Length': resultado.buffer.length.toString(),
        });
        res.send(resultado.buffer);
    }
    /**
     * Faz upload de um documento
     */
    async upload(arquivo, uploadDto, usuario) {
        if (!arquivo) {
            throw new common_1.BadRequestException('Arquivo é obrigatório');
        }
        const resultado = await this.documentoService.upload(arquivo, uploadDto, usuario.id);
        // Transformar o resultado para excluir dados sensíveis
        return {
            data: (0, class_transformer_1.plainToInstance)(documento_response_dto_1.DocumentoResponseDto, resultado, {
                excludeExtraneousValues: true,
            }),
            meta: null,
            message: null,
        };
    }
    /**
     * Marca um documento como verificado
     */
    async verificar(id, observacoes, usuario) {
        return this.documentoService.verificar(id, usuario.id, observacoes);
    }
    /**
     * Remove um documento (soft delete)
     */
    async remover(id, req) {
        await this.documentoService.remover(id, req.user.id);
    }
    /**
     * Obtém estatísticas de documentos
     */
    async getEstatisticas(cidadaoId) {
        return this.documentoService.getEstatisticas(cidadaoId);
    }
};
exports.DocumentoController = DocumentoController;
__decorate([
    (0, common_1.Get)('cidadao/:cidadaoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.listar' }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar documentos de um cidadão' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de documentos retornada com sucesso',
    }),
    (0, swagger_1.ApiParam)({
        name: 'cidadaoId',
        description: 'ID do cidadão',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'tipo',
        description: 'Filtrar por tipo de documento',
        required: false,
        enum: [
            'RG',
            'CPF',
            'COMPROVANTE_RESIDENCIA',
            'COMPROVANTE_RENDA',
            'OUTROS',
        ],
    }),
    (0, swagger_1.ApiQuery)({
        name: 'reutilizavel',
        description: 'Filtrar por documentos reutilizáveis',
        required: false,
        type: 'boolean',
    }),
    __param(0, (0, common_1.Param)('cidadaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Query)('tipo')),
    __param(2, (0, common_1.Query)('reutilizavel')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Boolean]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "findByCidadao", null);
__decorate([
    (0, common_1.Get)('solicitacao/:solicitacaoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.listar' }),
    (0, swagger_1.ApiOperation)({ summary: 'Listar documentos de uma solicitação' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de documentos retornada com sucesso',
    }),
    (0, swagger_1.ApiParam)({
        name: 'solicitacaoId',
        description: 'ID da solicitação',
        type: 'string',
        format: 'uuid',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "findBySolicitacao", null);
__decorate([
    (0, common_1.Get)('reutilizaveis'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.listar' }),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar documentos reutilizáveis' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de documentos reutilizáveis retornada com sucesso',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'tipo',
        description: 'Tipo de documento',
        required: true,
        enum: [
            'RG',
            'CPF',
            'COMPROVANTE_RESIDENCIA',
            'COMPROVANTE_RENDA',
            'OUTROS',
        ],
    }),
    (0, swagger_1.ApiQuery)({
        name: 'cidadaoId',
        description: 'ID do cidadão (opcional)',
        required: false,
        type: 'string',
        format: 'uuid',
    }),
    __param(0, (0, common_1.Query)('tipo')),
    __param(1, (0, common_1.Query)('cidadaoId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "findReutilizaveis", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.visualizar' }),
    (0, swagger_1.ApiOperation)({ summary: 'Obter detalhes de um documento' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Documento encontrado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Documento não encontrado' }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do documento',
        type: 'string',
        format: 'uuid',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "findOne", null);
__decorate([
    (0, common_1.Get)(':id/download'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.download' }),
    (0, swagger_1.ApiOperation)({ summary: 'Fazer download de um documento' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Documento baixado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Documento não encontrado' }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do documento',
        type: 'string',
        format: 'uuid',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_b = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "download", null);
__decorate([
    (0, common_1.Post)('upload'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.criar' }),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('arquivo')),
    (0, swagger_1.ApiOperation)({ summary: 'Fazer upload de um documento' }),
    (0, swagger_1.ApiConsumes)('multipart/form-data'),
    (0, swagger_1.ApiBody)({
        description: 'Dados do documento para upload',
        type: upload_documento_dto_1.UploadDocumentoDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Documento enviado com sucesso',
        type: documento_response_dto_1.DocumentoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    __param(0, (0, common_1.UploadedFile)()),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, get_user_decorator_1.GetUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, typeof (_c = typeof upload_documento_dto_1.UploadDocumentoDto !== "undefined" && upload_documento_dto_1.UploadDocumentoDto) === "function" ? _c : Object, typeof (_d = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "upload", null);
__decorate([
    (0, common_1.Post)(':id/verificar'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.verificar' }),
    (0, swagger_1.ApiOperation)({ summary: 'Marcar documento como verificado' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Documento verificado com sucesso',
    }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do documento',
        type: 'string',
        format: 'uuid',
    }),
    (0, swagger_1.ApiBody)({
        schema: {
            type: 'object',
            properties: {
                observacoes: {
                    type: 'string',
                    description: 'Observações da verificação',
                    maxLength: 500,
                },
            },
        },
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)('observacoes')),
    __param(2, (0, get_user_decorator_1.GetUser)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, typeof (_e = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "verificar", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.excluir' }),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiOperation)({ summary: 'Remover um documento' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'Documento removido com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Documento não encontrado' }),
    (0, swagger_1.ApiParam)({
        name: 'id',
        description: 'ID do documento',
        type: 'string',
        format: 'uuid',
    }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Request)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "remover", null);
__decorate([
    (0, common_1.Get)('estatisticas/geral'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'documento.estatisticas' }),
    (0, swagger_1.ApiOperation)({ summary: 'Obter estatísticas de documentos' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Estatísticas retornadas com sucesso',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'cidadaoId',
        description: 'ID do cidadão (opcional)',
        required: false,
        type: 'string',
        format: 'uuid',
    }),
    __param(0, (0, common_1.Query)('cidadaoId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], DocumentoController.prototype, "getEstatisticas", null);
exports.DocumentoController = DocumentoController = __decorate([
    (0, swagger_1.ApiTags)('Documentos'),
    (0, common_1.Controller)('documento'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof documento_service_1.DocumentoService !== "undefined" && documento_service_1.DocumentoService) === "function" ? _a : Object])
], DocumentoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,