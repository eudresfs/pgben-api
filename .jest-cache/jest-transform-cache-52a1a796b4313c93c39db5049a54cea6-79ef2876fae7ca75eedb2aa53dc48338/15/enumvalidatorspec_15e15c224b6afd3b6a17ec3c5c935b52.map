{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\enum-validator.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\enum-validator.spec.ts"],"sourcesContent":["import { validate } from 'class-validator';\nimport { plainToClass } from 'class-transformer';\nimport { IsEnumValue, EnumValidationHelper } from './enum-validator';\n\n/**\n * Enum de teste para validação\n */\nenum TestEnum {\n  OPTION_A = 'OPTION_A',\n  OPTION_B = 'OPTION_B',\n  OPTION_C = 'OPTION_C',\n}\n\n/**\n * DTO de teste para validação de enum\n */\nclass TestDto {\n  @IsEnumValue(TestEnum, {\n    enumName: 'Opção de Teste',\n    caseSensitive: false,\n  })\n  testField: TestEnum;\n\n  @IsEnumValue(TestEnum, {\n    enumName: 'Opção Sensível',\n    caseSensitive: true,\n  })\n  sensitiveField: TestEnum;\n}\n\ndescribe('EnumValidator', () => {\n  describe('IsEnumValue', () => {\n    it('deve validar valores válidos do enum', async () => {\n      const dto = plainToClass(TestDto, {\n        testField: TestEnum.OPTION_A,\n        sensitiveField: TestEnum.OPTION_B,\n      });\n\n      const errors = await validate(dto);\n      expect(errors).toHaveLength(0);\n    });\n\n    it('deve rejeitar valores inválidos do enum', async () => {\n      const dto = plainToClass(TestDto, {\n        testField: 'INVALID_OPTION',\n        sensitiveField: 'ANOTHER_INVALID',\n      });\n\n      const errors = await validate(dto);\n      expect(errors).toHaveLength(2);\n\n      const testFieldError = errors.find(\n        (error) => error.property === 'testField',\n      );\n      const sensitiveFieldError = errors.find(\n        (error) => error.property === 'sensitiveField',\n      );\n\n      expect(testFieldError).toBeDefined();\n      expect(sensitiveFieldError).toBeDefined();\n\n      expect(testFieldError.constraints).toHaveProperty('isEnumValue');\n      expect(sensitiveFieldError.constraints).toHaveProperty('isEnumValue');\n    });\n\n    it('deve funcionar com case-insensitive quando configurado', async () => {\n      const dto = plainToClass(TestDto, {\n        testField: 'option_a', // case-insensitive habilitado\n        sensitiveField: TestEnum.OPTION_B,\n      });\n\n      const errors = await validate(dto);\n\n      // testField deve passar (case-insensitive)\n      // sensitiveField deve passar (valor correto)\n      const testFieldErrors = errors.filter(\n        (error) => error.property === 'testField',\n      );\n      expect(testFieldErrors).toHaveLength(0);\n    });\n\n    it('deve falhar com case-sensitive quando configurado', async () => {\n      const dto = plainToClass(TestDto, {\n        testField: TestEnum.OPTION_A,\n        sensitiveField: 'option_b', // case-sensitive habilitado, deve falhar\n      });\n\n      const errors = await validate(dto);\n\n      const sensitiveFieldErrors = errors.filter(\n        (error) => error.property === 'sensitiveField',\n      );\n      expect(sensitiveFieldErrors).toHaveLength(1);\n    });\n\n    it('deve fornecer mensagens de erro informativas', async () => {\n      const dto = plainToClass(TestDto, {\n        testField: 'WRONG_VALUE',\n        sensitiveField: 'ANOTHER_WRONG',\n      });\n\n      const errors = await validate(dto);\n\n      const testFieldError = errors.find(\n        (error) => error.property === 'testField',\n      );\n      expect(testFieldError).toBeDefined();\n      const message = testFieldError!.constraints?.isEnumValue;\n\n      expect(message).toContain('testField');\n      expect(message).toContain('Opção de Teste');\n      expect(message).toContain('OPTION_A, OPTION_B, OPTION_C');\n    });\n\n    it('deve sugerir valores similares', async () => {\n      const dto = plainToClass(TestDto, {\n        testField: 'OPTION_X', // Similar a OPTION_A\n        sensitiveField: TestEnum.OPTION_B,\n      });\n\n      const errors = await validate(dto);\n\n      const testFieldError = errors.find(\n        (error) => error.property === 'testField',\n      );\n      expect(testFieldError).toBeDefined();\n      const message = testFieldError!.constraints?.isEnumValue;\n\n      // Deve sugerir OPTION_A como valor similar\n      expect(message).toContain('Você quis dizer');\n    });\n\n    it('deve rejeitar valores null e undefined', async () => {\n      const dto1 = plainToClass(TestDto, {\n        testField: null,\n        sensitiveField: TestEnum.OPTION_B,\n      });\n\n      const dto2 = plainToClass(TestDto, {\n        testField: undefined,\n        sensitiveField: TestEnum.OPTION_B,\n      });\n\n      const errors1 = await validate(dto1);\n      const errors2 = await validate(dto2);\n\n      expect(errors1.length).toBeGreaterThan(0);\n      expect(errors2.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('EnumValidationHelper', () => {\n    describe('createEnumMessage', () => {\n      it('deve criar mensagem padronizada para enum', () => {\n        const message = EnumValidationHelper.createEnumMessage(\n          TestEnum,\n          'Opção de Teste',\n          'campo de teste',\n        );\n\n        expect(message).toContain('campo de teste');\n        expect(message).toContain('Opção de Teste');\n        expect(message).toContain('OPTION_A, OPTION_B, OPTION_C');\n      });\n\n      it('deve usar valores padrão quando não fornecidos', () => {\n        const message = EnumValidationHelper.createEnumMessage(TestEnum);\n\n        expect(message).toContain('campo');\n        expect(message).toContain('enum');\n        expect(message).toContain('OPTION_A, OPTION_B, OPTION_C');\n      });\n    });\n\n    describe('isValidEnumValue', () => {\n      it('deve validar corretamente valores do enum', () => {\n        expect(\n          EnumValidationHelper.isValidEnumValue(TestEnum.OPTION_A, TestEnum),\n        ).toBe(true);\n        expect(EnumValidationHelper.isValidEnumValue('INVALID', TestEnum)).toBe(\n          false,\n        );\n        expect(EnumValidationHelper.isValidEnumValue(null, TestEnum)).toBe(\n          false,\n        );\n        expect(EnumValidationHelper.isValidEnumValue(undefined, TestEnum)).toBe(\n          false,\n        );\n      });\n    });\n\n    describe('normalizeEnumValue', () => {\n      it('deve normalizar valores case-sensitive', () => {\n        const result = EnumValidationHelper.normalizeEnumValue(\n          TestEnum.OPTION_A,\n          TestEnum,\n          true,\n        );\n        expect(result).toBe(TestEnum.OPTION_A);\n\n        const invalidResult = EnumValidationHelper.normalizeEnumValue(\n          'option_a',\n          TestEnum,\n          true,\n        );\n        expect(invalidResult).toBeUndefined();\n      });\n\n      it('deve normalizar valores case-insensitive', () => {\n        const result = EnumValidationHelper.normalizeEnumValue(\n          'option_a',\n          TestEnum,\n          false,\n        );\n        expect(result).toBe(TestEnum.OPTION_A);\n\n        const result2 = EnumValidationHelper.normalizeEnumValue(\n          'OPTION_B',\n          TestEnum,\n          false,\n        );\n        expect(result2).toBe(TestEnum.OPTION_B);\n      });\n\n      it('deve retornar valor original se for null/undefined', () => {\n        expect(\n          EnumValidationHelper.normalizeEnumValue(null, TestEnum),\n        ).toBeNull();\n        expect(\n          EnumValidationHelper.normalizeEnumValue(undefined, TestEnum),\n        ).toBeUndefined();\n      });\n    });\n\n    describe('getEnumValues', () => {\n      it('deve retornar todos os valores do enum', () => {\n        const values = EnumValidationHelper.getEnumValues(TestEnum);\n        expect(values).toEqual(['OPTION_A', 'OPTION_B', 'OPTION_C']);\n      });\n    });\n\n    describe('getEnumKeys', () => {\n      it('deve retornar todas as chaves do enum', () => {\n        const keys = EnumValidationHelper.getEnumKeys(TestEnum);\n        expect(keys).toEqual(['OPTION_A', 'OPTION_B', 'OPTION_C']);\n      });\n    });\n  });\n\n  describe('Distância de Levenshtein', () => {\n    it('deve calcular distância corretamente', () => {\n      // Teste indireto através de sugestões\n      const dto = plainToClass(TestDto, {\n        testField: 'OPTION_X', // Distância 1 de OPTION_A\n        sensitiveField: TestEnum.OPTION_B,\n      });\n\n      return validate(dto).then((errors) => {\n        const testFieldError = errors.find(\n          (error) => error.property === 'testField',\n        );\n        expect(testFieldError).toBeDefined();\n        const message = testFieldError!.constraints?.isEnumValue;\n\n        // Deve sugerir OPTION_A pois tem distância pequena\n        expect(message).toContain('OPTION_A');\n      });\n    });\n\n    it('não deve sugerir valores com distância muito grande', () => {\n      const dto = plainToClass(TestDto, {\n        testField: 'COMPLETELY_DIFFERENT_VALUE',\n        sensitiveField: TestEnum.OPTION_B,\n      });\n\n      return validate(dto).then((errors) => {\n        const testFieldError = errors.find(\n          (error) => error.property === 'testField',\n        );\n        expect(testFieldError).toBeDefined();\n        const message = testFieldError!.constraints?.isEnumValue;\n\n        // Não deve conter sugestões para valores muito diferentes\n        expect(message).not.toContain('Você quis dizer');\n      });\n    });\n  });\n});\n"],"version":3}