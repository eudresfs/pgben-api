7d141fef8beefd5d5aca38579b9e6b26
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuditoriaExportacaoController_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditoriaExportacaoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const express_1 = require("express");
const auditoria_exportacao_service_1 = require("../services/auditoria-exportacao.service");
const query_log_auditoria_dto_1 = require("../dto/query-log-auditoria.dto");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
/**
 * DTO para solicitação de exportação
 */
class SolicitarExportacaoDto {
    /**
     * Formato de exportação
     */
    formato;
    /**
     * Indica se o arquivo deve ser comprimido
     */
    comprimido;
    /**
     * Campos a serem incluídos na exportação
     */
    campos;
}
/**
 * Controlador para exportação de logs de auditoria
 */
let AuditoriaExportacaoController = AuditoriaExportacaoController_1 = class AuditoriaExportacaoController {
    auditoriaExportacaoService;
    logger = new common_1.Logger(AuditoriaExportacaoController_1.name);
    constructor(auditoriaExportacaoService) {
        this.auditoriaExportacaoService = auditoriaExportacaoService;
    }
    /**
     * Exporta logs de auditoria para o formato especificado
     */
    async exportarLogs(filtros, opcoes, res) {
        try {
            this.logger.log(`Solicitação de exportação recebida: ${opcoes.formato}`);
            // Validar formato
            if (!Object.values(auditoria_exportacao_service_1.FormatoExportacao).includes(opcoes.formato)) {
                throw new common_1.HttpException(`Formato de exportação inválido. Formatos disponíveis: ${Object.values(auditoria_exportacao_service_1.FormatoExportacao).join(', ')}`, common_1.HttpStatus.BAD_REQUEST);
            }
            // Configurar opções de exportação
            const opcoesExportacao = {
                formato: opcoes.formato,
                comprimido: opcoes.comprimido || false,
                campos: opcoes.campos,
            };
            // Iniciar exportação assíncrona
            this.auditoriaExportacaoService
                .exportarLogs(filtros, opcoesExportacao)
                .then((resultado) => {
                this.logger.log(`Exportação concluída: ${resultado.caminhoArquivo}`);
            })
                .catch((error) => {
                this.logger.error(`Erro na exportação: ${error.message}`, error.stack);
            });
            // Retornar resposta imediata
            return res.status(common_1.HttpStatus.ACCEPTED).json({
                mensagem: 'Exportação iniciada com sucesso',
                formato: opcoes.formato,
                filtros,
            });
        }
        catch (error) {
            this.logger.error(`Erro ao iniciar exportação: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Baixa um arquivo de exportação pelo nome
     */
    async downloadArquivo(nomeArquivo, res) {
        try {
            const diretorioExportacao = process.env.AUDITORIA_EXPORT_DIR ||
                path.join(process.cwd(), 'exports', 'auditoria');
            const caminhoArquivo = path.join(diretorioExportacao, nomeArquivo);
            // Verificar se o arquivo existe
            if (!fs.existsSync(caminhoArquivo)) {
                throw new common_1.HttpException('Arquivo não encontrado', common_1.HttpStatus.NOT_FOUND);
            }
            // Determinar o tipo de conteúdo
            let contentType = 'application/octet-stream';
            if (nomeArquivo.endsWith('.json')) {
                contentType = 'application/json';
            }
            else if (nomeArquivo.endsWith('.csv')) {
                contentType = 'text/csv';
            }
            else if (nomeArquivo.endsWith('.xlsx')) {
                contentType =
                    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
            }
            else if (nomeArquivo.endsWith('.pdf')) {
                contentType = 'application/pdf';
            }
            else if (nomeArquivo.endsWith('.gz')) {
                contentType = 'application/gzip';
            }
            // Configurar cabeçalhos
            res.setHeader('Content-Type', contentType);
            res.setHeader('Content-Disposition', `attachment; filename="${nomeArquivo}"`);
            // Enviar arquivo
            const fileStream = fs.createReadStream(caminhoArquivo);
            fileStream.pipe(res);
        }
        catch (error) {
            this.logger.error(`Erro ao baixar arquivo: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Lista os arquivos de exportação disponíveis
     */
    async listarArquivos() {
        try {
            const diretorioExportacao = process.env.AUDITORIA_EXPORT_DIR ||
                path.join(process.cwd(), 'exports', 'auditoria');
            // Verificar se o diretório existe
            if (!fs.existsSync(diretorioExportacao)) {
                return { arquivos: [] };
            }
            // Listar arquivos
            const arquivos = fs
                .readdirSync(diretorioExportacao)
                .filter((arquivo) => {
                // Filtrar apenas arquivos de exportação
                return arquivo.startsWith('auditoria_export_');
            })
                .map((arquivo) => {
                const caminhoCompleto = path.join(diretorioExportacao, arquivo);
                const stats = fs.statSync(caminhoCompleto);
                return {
                    nome: arquivo,
                    tamanho: stats.size,
                    dataModificacao: stats.mtime,
                    formato: this.determinarFormato(arquivo),
                };
            })
                .sort((a, b) => b.dataModificacao.getTime() - a.dataModificacao.getTime());
            return { arquivos };
        }
        catch (error) {
            this.logger.error(`Erro ao listar arquivos: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Determina o formato de um arquivo com base no nome
     *
     * @param nomeArquivo Nome do arquivo
     * @returns Formato do arquivo
     */
    determinarFormato(nomeArquivo) {
        if (nomeArquivo.endsWith('.json.gz')) {
            return 'JSON (comprimido)';
        }
        else if (nomeArquivo.endsWith('.json')) {
            return 'JSON';
        }
        else if (nomeArquivo.endsWith('.csv.gz')) {
            return 'CSV (comprimido)';
        }
        else if (nomeArquivo.endsWith('.csv')) {
            return 'CSV';
        }
        else if (nomeArquivo.endsWith('.xlsx')) {
            return 'Excel';
        }
        else if (nomeArquivo.endsWith('.pdf')) {
            return 'PDF';
        }
        else {
            return 'Desconhecido';
        }
    }
};
exports.AuditoriaExportacaoController = AuditoriaExportacaoController;
__decorate([
    (0, common_1.Post)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Exporta logs de auditoria para o formato especificado',
    }),
    (0, swagger_1.ApiBody)({ type: SolicitarExportacaoDto }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Exportação iniciada com sucesso' }),
    __param(0, (0, common_1.Query)()),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof query_log_auditoria_dto_1.QueryLogAuditoriaDto !== "undefined" && query_log_auditoria_dto_1.QueryLogAuditoriaDto) === "function" ? _b : Object, SolicitarExportacaoDto, typeof (_c = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], AuditoriaExportacaoController.prototype, "exportarLogs", null);
__decorate([
    (0, common_1.Get)('download/:nomeArquivo'),
    (0, swagger_1.ApiOperation)({ summary: 'Baixa um arquivo de exportação pelo nome' }),
    (0, swagger_1.ApiParam)({
        name: 'nomeArquivo',
        description: 'Nome do arquivo de exportação',
    }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Arquivo encontrado e enviado' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Arquivo não encontrado' }),
    __param(0, (0, common_1.Query)('nomeArquivo')),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_d = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], AuditoriaExportacaoController.prototype, "downloadArquivo", null);
__decorate([
    (0, common_1.Get)('arquivos'),
    (0, swagger_1.ApiOperation)({ summary: 'Lista os arquivos de exportação disponíveis' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de arquivos retornada com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AuditoriaExportacaoController.prototype, "listarArquivos", null);
exports.AuditoriaExportacaoController = AuditoriaExportacaoController = AuditoriaExportacaoController_1 = __decorate([
    (0, swagger_1.ApiTags)('Auditoria'),
    (0, common_1.Controller)('auditoria/exportacao'),
    __metadata("design:paramtypes", [typeof (_a = typeof auditoria_exportacao_service_1.AuditoriaExportacaoService !== "undefined" && auditoria_exportacao_service_1.AuditoriaExportacaoService) === "function" ? _a : Object])
], AuditoriaExportacaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,