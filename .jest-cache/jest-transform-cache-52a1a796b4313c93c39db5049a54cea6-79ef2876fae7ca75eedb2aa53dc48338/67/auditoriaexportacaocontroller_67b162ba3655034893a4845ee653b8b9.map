{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\controllers\\auditoria-exportacao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\controllers\\auditoria-exportacao.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Query,\n  Body,\n  Res,\n  HttpStatus,\n  HttpException,\n  Logger,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiQuery,\n  ApiBody,\n  ApiResponse,\n  ApiParam,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\nimport {\n  AuditoriaExportacaoService,\n  FormatoExportacao,\n  OpcoesExportacao,\n} from '../services/auditoria-exportacao.service';\nimport { QueryLogAuditoriaDto } from '../dto/query-log-auditoria.dto';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * DTO para solicitação de exportação\n */\nclass SolicitarExportacaoDto {\n  /**\n   * Formato de exportação\n   */\n  formato: FormatoExportacao;\n\n  /**\n   * Indica se o arquivo deve ser comprimido\n   */\n  comprimido?: boolean;\n\n  /**\n   * Campos a serem incluídos na exportação\n   */\n  campos?: string[];\n}\n\n/**\n * Controlador para exportação de logs de auditoria\n */\n@ApiTags('Auditoria')\n@Controller('auditoria/exportacao')\nexport class AuditoriaExportacaoController {\n  private readonly logger = new Logger(AuditoriaExportacaoController.name);\n\n  constructor(\n    private readonly auditoriaExportacaoService: AuditoriaExportacaoService,\n  ) {}\n\n  /**\n   * Exporta logs de auditoria para o formato especificado\n   */\n  @Post()\n  @ApiOperation({\n    summary: 'Exporta logs de auditoria para o formato especificado',\n  })\n  @ApiBody({ type: SolicitarExportacaoDto })\n  @ApiResponse({ status: 201, description: 'Exportação iniciada com sucesso' })\n  async exportarLogs(\n    @Query() filtros: QueryLogAuditoriaDto,\n    @Body() opcoes: SolicitarExportacaoDto,\n    @Res() res: Response,\n  ) {\n    try {\n      this.logger.log(`Solicitação de exportação recebida: ${opcoes.formato}`);\n\n      // Validar formato\n      if (!Object.values(FormatoExportacao).includes(opcoes.formato)) {\n        throw new HttpException(\n          `Formato de exportação inválido. Formatos disponíveis: ${Object.values(FormatoExportacao).join(', ')}`,\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n\n      // Configurar opções de exportação\n      const opcoesExportacao: OpcoesExportacao = {\n        formato: opcoes.formato,\n        comprimido: opcoes.comprimido || false,\n        campos: opcoes.campos,\n      };\n\n      // Iniciar exportação assíncrona\n      this.auditoriaExportacaoService\n        .exportarLogs(filtros, opcoesExportacao)\n        .then((resultado) => {\n          this.logger.log(`Exportação concluída: ${resultado.caminhoArquivo}`);\n        })\n        .catch((error) => {\n          this.logger.error(\n            `Erro na exportação: ${error.message}`,\n            error.stack,\n          );\n        });\n\n      // Retornar resposta imediata\n      return res.status(HttpStatus.ACCEPTED).json({\n        mensagem: 'Exportação iniciada com sucesso',\n        formato: opcoes.formato,\n        filtros,\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao iniciar exportação: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Baixa um arquivo de exportação pelo nome\n   */\n  @Get('download/:nomeArquivo')\n  @ApiOperation({ summary: 'Baixa um arquivo de exportação pelo nome' })\n  @ApiParam({\n    name: 'nomeArquivo',\n    description: 'Nome do arquivo de exportação',\n  })\n  @ApiResponse({ status: 200, description: 'Arquivo encontrado e enviado' })\n  @ApiResponse({ status: 404, description: 'Arquivo não encontrado' })\n  async downloadArquivo(\n    @Query('nomeArquivo') nomeArquivo: string,\n    @Res() res: Response,\n  ) {\n    try {\n      const diretorioExportacao =\n        process.env.AUDITORIA_EXPORT_DIR ||\n        path.join(process.cwd(), 'exports', 'auditoria');\n\n      const caminhoArquivo = path.join(diretorioExportacao, nomeArquivo);\n\n      // Verificar se o arquivo existe\n      if (!fs.existsSync(caminhoArquivo)) {\n        throw new HttpException('Arquivo não encontrado', HttpStatus.NOT_FOUND);\n      }\n\n      // Determinar o tipo de conteúdo\n      let contentType = 'application/octet-stream';\n\n      if (nomeArquivo.endsWith('.json')) {\n        contentType = 'application/json';\n      } else if (nomeArquivo.endsWith('.csv')) {\n        contentType = 'text/csv';\n      } else if (nomeArquivo.endsWith('.xlsx')) {\n        contentType =\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';\n      } else if (nomeArquivo.endsWith('.pdf')) {\n        contentType = 'application/pdf';\n      } else if (nomeArquivo.endsWith('.gz')) {\n        contentType = 'application/gzip';\n      }\n\n      // Configurar cabeçalhos\n      res.setHeader('Content-Type', contentType);\n      res.setHeader(\n        'Content-Disposition',\n        `attachment; filename=\"${nomeArquivo}\"`,\n      );\n\n      // Enviar arquivo\n      const fileStream = fs.createReadStream(caminhoArquivo);\n      fileStream.pipe(res);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao baixar arquivo: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Lista os arquivos de exportação disponíveis\n   */\n  @Get('arquivos')\n  @ApiOperation({ summary: 'Lista os arquivos de exportação disponíveis' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de arquivos retornada com sucesso',\n  })\n  async listarArquivos() {\n    try {\n      const diretorioExportacao =\n        process.env.AUDITORIA_EXPORT_DIR ||\n        path.join(process.cwd(), 'exports', 'auditoria');\n\n      // Verificar se o diretório existe\n      if (!fs.existsSync(diretorioExportacao)) {\n        return { arquivos: [] };\n      }\n\n      // Listar arquivos\n      const arquivos = fs\n        .readdirSync(diretorioExportacao)\n        .filter((arquivo) => {\n          // Filtrar apenas arquivos de exportação\n          return arquivo.startsWith('auditoria_export_');\n        })\n        .map((arquivo) => {\n          const caminhoCompleto = path.join(diretorioExportacao, arquivo);\n          const stats = fs.statSync(caminhoCompleto);\n\n          return {\n            nome: arquivo,\n            tamanho: stats.size,\n            dataModificacao: stats.mtime,\n            formato: this.determinarFormato(arquivo),\n          };\n        })\n        .sort(\n          (a, b) => b.dataModificacao.getTime() - a.dataModificacao.getTime(),\n        );\n\n      return { arquivos };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao listar arquivos: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Determina o formato de um arquivo com base no nome\n   *\n   * @param nomeArquivo Nome do arquivo\n   * @returns Formato do arquivo\n   */\n  private determinarFormato(nomeArquivo: string): string {\n    if (nomeArquivo.endsWith('.json.gz')) {\n      return 'JSON (comprimido)';\n    } else if (nomeArquivo.endsWith('.json')) {\n      return 'JSON';\n    } else if (nomeArquivo.endsWith('.csv.gz')) {\n      return 'CSV (comprimido)';\n    } else if (nomeArquivo.endsWith('.csv')) {\n      return 'CSV';\n    } else if (nomeArquivo.endsWith('.xlsx')) {\n      return 'Excel';\n    } else if (nomeArquivo.endsWith('.pdf')) {\n      return 'PDF';\n    } else {\n      return 'Desconhecido';\n    }\n  }\n}\n"],"version":3}