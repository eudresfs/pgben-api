{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\services\\determinacao-judicial.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\judicial\\services\\determinacao-judicial.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  Logger,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  Repository,\n  FindOptionsWhere,\n  FindManyOptions,\n  Like,\n  LessThanOrEqual,\n  MoreThanOrEqual,\n  LessThan,\n} from 'typeorm';\nimport {\n  DeterminacaoJudicial,\n  TipoDeterminacaoJudicial,\n} from '../../../entities/determinacao-judicial.entity';\nimport { ProcessoJudicialService } from './processo-judicial.service';\nimport { PaginatedResult } from '../../../common/interfaces/paginated-result.interface';\n\n/**\n * Serviço para gerenciamento de determinações judiciais\n *\n * Este serviço implementa operações CRUD e consultas específicas\n * para determinações judiciais, incluindo busca por processo, solicitação e cidadão.\n */\n@Injectable()\nexport class DeterminacaoJudicialService {\n  private readonly logger = new Logger(DeterminacaoJudicialService.name);\n\n  constructor(\n    @InjectRepository(DeterminacaoJudicial)\n    private readonly determinacaoRepository: Repository<DeterminacaoJudicial>,\n    private readonly processoJudicialService: ProcessoJudicialService,\n  ) {}\n\n  /**\n   * Cria uma nova determinação judicial\n   *\n   * @param data Dados da determinação judicial a ser criada\n   * @param usuarioId ID do usuário que está criando a determinação\n   * @returns A determinação judicial criada\n   */\n  async create(\n    data: Partial<DeterminacaoJudicial>,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    this.logger.log(`Criando determinação judicial: ${JSON.stringify(data)}`);\n\n    // Verificar se o processo judicial existe e se o ID foi fornecido\n    if (!data.processo_judicial_id) {\n      throw new BadRequestException('ID do processo judicial é obrigatório');\n    }\n\n    await this.processoJudicialService.findById(data.processo_judicial_id);\n\n    // Criar a nova determinação\n    const novaDeterminacao = this.determinacaoRepository.create({\n      ...data,\n      usuario_id: usuarioId,\n      created_by: usuarioId,\n      updated_by: usuarioId,\n    });\n\n    return this.determinacaoRepository.save(novaDeterminacao);\n  }\n\n  /**\n   * Busca uma determinação judicial pelo ID\n   *\n   * @param id ID da determinação judicial\n   * @returns A determinação judicial encontrada\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async findById(id: string): Promise<DeterminacaoJudicial> {\n    const determinacao = await this.determinacaoRepository.findOne({\n      where: { id },\n      relations: ['processo_judicial'],\n    });\n\n    if (!determinacao) {\n      throw new NotFoundException(\n        `Determinação judicial com ID ${id} não encontrada`,\n      );\n    }\n\n    return determinacao;\n  }\n\n  /**\n   * Lista determinações judiciais com paginação e filtros\n   *\n   * @param options Opções de busca e paginação\n   * @returns Lista paginada de determinações judiciais\n   */\n  async findAll(options: {\n    page?: number;\n    limit?: number;\n    processoJudicialId?: string;\n    solicitacaoId?: string;\n    cidadaoId?: string;\n    tipo?: TipoDeterminacaoJudicial;\n    cumprida?: boolean;\n    termo?: string;\n  }): Promise<PaginatedResult<DeterminacaoJudicial>> {\n    const {\n      page = 1,\n      limit = 10,\n      processoJudicialId,\n      solicitacaoId,\n      cidadaoId,\n      tipo,\n      cumprida,\n      termo,\n    } = options;\n\n    const where: FindOptionsWhere<DeterminacaoJudicial> = { ativo: true };\n\n    // Aplicar filtros\n    if (processoJudicialId) {\n      where.processo_judicial_id = processoJudicialId;\n    }\n\n    if (solicitacaoId) {\n      where.solicitacao_id = solicitacaoId;\n    }\n\n    if (cidadaoId) {\n      where.cidadao_id = cidadaoId;\n    }\n\n    if (tipo) {\n      where.tipo = tipo;\n    }\n\n    if (cumprida !== undefined) {\n      where.cumprida = cumprida;\n    }\n\n    const findOptions: FindManyOptions<DeterminacaoJudicial> = {\n      where,\n      skip: (page - 1) * limit,\n      take: limit,\n      order: {\n        data_determinacao: 'DESC',\n      },\n      relations: ['processo_judicial'],\n    };\n\n    // Aplicar busca por texto, se fornecido\n    if (termo) {\n      findOptions.where = [\n        { ...where, numero_processo: Like(`%${termo}%`) },\n        { ...where, numero_determinacao: Like(`%${termo}%`) },\n        { ...where, descricao: Like(`%${termo}%`) },\n      ];\n    }\n\n    const [determinacoes, total] =\n      await this.determinacaoRepository.findAndCount(findOptions);\n\n    return {\n      data: determinacoes,\n      meta: {\n        page,\n        limit,\n        total,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Busca determinações judiciais por processo judicial\n   *\n   * @param processoJudicialId ID do processo judicial\n   * @returns Lista de determinações judiciais\n   */\n  async findByProcessoJudicial(\n    processoJudicialId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoRepository.find({\n      where: { processo_judicial_id: processoJudicialId, ativo: true },\n      order: { data_determinacao: 'DESC' },\n    });\n  }\n\n  /**\n   * Busca determinações judiciais por solicitação\n   *\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de determinações judiciais\n   */\n  async findBySolicitacao(\n    solicitacaoId: string,\n  ): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoRepository.find({\n      where: { solicitacao_id: solicitacaoId, ativo: true },\n      order: { data_determinacao: 'DESC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Busca determinações judiciais por cidadão\n   *\n   * @param cidadaoId ID do cidadão\n   * @returns Lista de determinações judiciais\n   */\n  async findByCidadao(cidadaoId: string): Promise<DeterminacaoJudicial[]> {\n    return this.determinacaoRepository.find({\n      where: { cidadao_id: cidadaoId, ativo: true },\n      order: { data_determinacao: 'DESC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Atualiza uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @param data Dados atualizados da determinação\n   * @param usuarioId ID do usuário que está atualizando a determinação\n   * @returns A determinação judicial atualizada\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async update(\n    id: string,\n    data: Partial<DeterminacaoJudicial>,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const determinacao = await this.findById(id);\n\n    this.logger.log(\n      `Atualizando determinação judicial ${id}: ${JSON.stringify(data)}`,\n    );\n\n    // Atualizar os dados da determinação\n    this.determinacaoRepository.merge(determinacao, {\n      ...data,\n      updated_by: usuarioId,\n    });\n\n    return this.determinacaoRepository.save(determinacao);\n  }\n\n  /**\n   * Marca uma determinação judicial como cumprida\n   *\n   * @param id ID da determinação judicial\n   * @param observacao Observação sobre o cumprimento\n   * @param usuarioId ID do usuário que está marcando a determinação como cumprida\n   * @returns A determinação judicial atualizada\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async marcarComoCumprida(\n    id: string,\n    observacao: string,\n    usuarioId: string,\n  ): Promise<DeterminacaoJudicial> {\n    const determinacao = await this.findById(id);\n\n    if (determinacao.cumprida) {\n      throw new BadRequestException(\n        'Esta determinação judicial já está marcada como cumprida',\n      );\n    }\n\n    this.logger.log(`Marcando determinação judicial ${id} como cumprida`);\n\n    // Atualizar o status da determinação\n    determinacao.cumprida = true;\n    determinacao.data_cumprimento = new Date();\n    determinacao.observacao_cumprimento = observacao;\n    determinacao.updated_by = usuarioId;\n\n    return this.determinacaoRepository.save(determinacao);\n  }\n\n  /**\n   * Desativa (soft delete) uma determinação judicial\n   *\n   * @param id ID da determinação judicial\n   * @param usuarioId ID do usuário que está desativando a determinação\n   * @returns Verdadeiro se a operação foi bem-sucedida\n   * @throws NotFoundException se a determinação não for encontrada\n   */\n  async desativar(id: string, usuarioId: string): Promise<boolean> {\n    const determinacao = await this.findById(id);\n\n    this.logger.log(`Desativando determinação judicial ${id}`);\n\n    // Desativar a determinação\n    determinacao.ativo = false;\n    determinacao.updated_by = usuarioId;\n\n    await this.determinacaoRepository.save(determinacao);\n    return true;\n  }\n\n  /**\n   * Retorna determinações judiciais com prazo próximo de expirar ou expirado\n   *\n   * @param diasAviso Número de dias para considerar como prazo próximo\n   * @returns Lista de determinações judiciais\n   */\n  async findDeterminacoesComPrazoProximo(\n    diasAviso: number = 7,\n  ): Promise<DeterminacaoJudicial[]> {\n    const hoje = new Date();\n    const limiteDias = new Date();\n    limiteDias.setDate(hoje.getDate() + diasAviso);\n\n    return this.determinacaoRepository.find({\n      where: {\n        ativo: true,\n        cumprida: false,\n        data_prazo: MoreThanOrEqual(hoje) && LessThanOrEqual(limiteDias),\n      },\n      order: { data_prazo: 'ASC' },\n      relations: ['processo_judicial'],\n    });\n  }\n\n  /**\n   * Retorna determinações judiciais com prazo expirado\n   *\n   * @returns Lista de determinações judiciais\n   */\n  async findDeterminacoesComPrazoExpirado(): Promise<DeterminacaoJudicial[]> {\n    const hoje = new Date();\n\n    return this.determinacaoRepository.find({\n      where: {\n        ativo: true,\n        cumprida: false,\n        data_prazo: LessThan(hoje),\n      },\n      order: { data_prazo: 'ASC' },\n      relations: ['processo_judicial'],\n    });\n  }\n}\n\n// Nenhuma função auxiliar é necessária, pois estamos usando os operadores integrados do TypeORM\n"],"version":3}