f4e6d9ca251282a6fcc7045c0df8fe71
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DeterminacaoJudicialService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeterminacaoJudicialService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const determinacao_judicial_entity_1 = require("../../../entities/determinacao-judicial.entity");
const processo_judicial_service_1 = require("./processo-judicial.service");
/**
 * Serviço para gerenciamento de determinações judiciais
 *
 * Este serviço implementa operações CRUD e consultas específicas
 * para determinações judiciais, incluindo busca por processo, solicitação e cidadão.
 */
let DeterminacaoJudicialService = DeterminacaoJudicialService_1 = class DeterminacaoJudicialService {
    determinacaoRepository;
    processoJudicialService;
    logger = new common_1.Logger(DeterminacaoJudicialService_1.name);
    constructor(determinacaoRepository, processoJudicialService) {
        this.determinacaoRepository = determinacaoRepository;
        this.processoJudicialService = processoJudicialService;
    }
    /**
     * Cria uma nova determinação judicial
     *
     * @param data Dados da determinação judicial a ser criada
     * @param usuarioId ID do usuário que está criando a determinação
     * @returns A determinação judicial criada
     */
    async create(data, usuarioId) {
        this.logger.log(`Criando determinação judicial: ${JSON.stringify(data)}`);
        // Verificar se o processo judicial existe e se o ID foi fornecido
        if (!data.processo_judicial_id) {
            throw new common_1.BadRequestException('ID do processo judicial é obrigatório');
        }
        await this.processoJudicialService.findById(data.processo_judicial_id);
        // Criar a nova determinação
        const novaDeterminacao = this.determinacaoRepository.create({
            ...data,
            usuario_id: usuarioId,
            created_by: usuarioId,
            updated_by: usuarioId,
        });
        return this.determinacaoRepository.save(novaDeterminacao);
    }
    /**
     * Busca uma determinação judicial pelo ID
     *
     * @param id ID da determinação judicial
     * @returns A determinação judicial encontrada
     * @throws NotFoundException se a determinação não for encontrada
     */
    async findById(id) {
        const determinacao = await this.determinacaoRepository.findOne({
            where: { id },
            relations: ['processo_judicial'],
        });
        if (!determinacao) {
            throw new common_1.NotFoundException(`Determinação judicial com ID ${id} não encontrada`);
        }
        return determinacao;
    }
    /**
     * Lista determinações judiciais com paginação e filtros
     *
     * @param options Opções de busca e paginação
     * @returns Lista paginada de determinações judiciais
     */
    async findAll(options) {
        const { page = 1, limit = 10, processoJudicialId, solicitacaoId, cidadaoId, tipo, cumprida, termo, } = options;
        const where = { ativo: true };
        // Aplicar filtros
        if (processoJudicialId) {
            where.processo_judicial_id = processoJudicialId;
        }
        if (solicitacaoId) {
            where.solicitacao_id = solicitacaoId;
        }
        if (cidadaoId) {
            where.cidadao_id = cidadaoId;
        }
        if (tipo) {
            where.tipo = tipo;
        }
        if (cumprida !== undefined) {
            where.cumprida = cumprida;
        }
        const findOptions = {
            where,
            skip: (page - 1) * limit,
            take: limit,
            order: {
                data_determinacao: 'DESC',
            },
            relations: ['processo_judicial'],
        };
        // Aplicar busca por texto, se fornecido
        if (termo) {
            findOptions.where = [
                { ...where, numero_processo: (0, typeorm_2.Like)(`%${termo}%`) },
                { ...where, numero_determinacao: (0, typeorm_2.Like)(`%${termo}%`) },
                { ...where, descricao: (0, typeorm_2.Like)(`%${termo}%`) },
            ];
        }
        const [determinacoes, total] = await this.determinacaoRepository.findAndCount(findOptions);
        return {
            data: determinacoes,
            meta: {
                page,
                limit,
                total,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca determinações judiciais por processo judicial
     *
     * @param processoJudicialId ID do processo judicial
     * @returns Lista de determinações judiciais
     */
    async findByProcessoJudicial(processoJudicialId) {
        return this.determinacaoRepository.find({
            where: { processo_judicial_id: processoJudicialId, ativo: true },
            order: { data_determinacao: 'DESC' },
        });
    }
    /**
     * Busca determinações judiciais por solicitação
     *
     * @param solicitacaoId ID da solicitação
     * @returns Lista de determinações judiciais
     */
    async findBySolicitacao(solicitacaoId) {
        return this.determinacaoRepository.find({
            where: { solicitacao_id: solicitacaoId, ativo: true },
            order: { data_determinacao: 'DESC' },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Busca determinações judiciais por cidadão
     *
     * @param cidadaoId ID do cidadão
     * @returns Lista de determinações judiciais
     */
    async findByCidadao(cidadaoId) {
        return this.determinacaoRepository.find({
            where: { cidadao_id: cidadaoId, ativo: true },
            order: { data_determinacao: 'DESC' },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Atualiza uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @param data Dados atualizados da determinação
     * @param usuarioId ID do usuário que está atualizando a determinação
     * @returns A determinação judicial atualizada
     * @throws NotFoundException se a determinação não for encontrada
     */
    async update(id, data, usuarioId) {
        const determinacao = await this.findById(id);
        this.logger.log(`Atualizando determinação judicial ${id}: ${JSON.stringify(data)}`);
        // Atualizar os dados da determinação
        this.determinacaoRepository.merge(determinacao, {
            ...data,
            updated_by: usuarioId,
        });
        return this.determinacaoRepository.save(determinacao);
    }
    /**
     * Marca uma determinação judicial como cumprida
     *
     * @param id ID da determinação judicial
     * @param observacao Observação sobre o cumprimento
     * @param usuarioId ID do usuário que está marcando a determinação como cumprida
     * @returns A determinação judicial atualizada
     * @throws NotFoundException se a determinação não for encontrada
     */
    async marcarComoCumprida(id, observacao, usuarioId) {
        const determinacao = await this.findById(id);
        if (determinacao.cumprida) {
            throw new common_1.BadRequestException('Esta determinação judicial já está marcada como cumprida');
        }
        this.logger.log(`Marcando determinação judicial ${id} como cumprida`);
        // Atualizar o status da determinação
        determinacao.cumprida = true;
        determinacao.data_cumprimento = new Date();
        determinacao.observacao_cumprimento = observacao;
        determinacao.updated_by = usuarioId;
        return this.determinacaoRepository.save(determinacao);
    }
    /**
     * Desativa (soft delete) uma determinação judicial
     *
     * @param id ID da determinação judicial
     * @param usuarioId ID do usuário que está desativando a determinação
     * @returns Verdadeiro se a operação foi bem-sucedida
     * @throws NotFoundException se a determinação não for encontrada
     */
    async desativar(id, usuarioId) {
        const determinacao = await this.findById(id);
        this.logger.log(`Desativando determinação judicial ${id}`);
        // Desativar a determinação
        determinacao.ativo = false;
        determinacao.updated_by = usuarioId;
        await this.determinacaoRepository.save(determinacao);
        return true;
    }
    /**
     * Retorna determinações judiciais com prazo próximo de expirar ou expirado
     *
     * @param diasAviso Número de dias para considerar como prazo próximo
     * @returns Lista de determinações judiciais
     */
    async findDeterminacoesComPrazoProximo(diasAviso = 7) {
        const hoje = new Date();
        const limiteDias = new Date();
        limiteDias.setDate(hoje.getDate() + diasAviso);
        return this.determinacaoRepository.find({
            where: {
                ativo: true,
                cumprida: false,
                data_prazo: (0, typeorm_2.MoreThanOrEqual)(hoje) && (0, typeorm_2.LessThanOrEqual)(limiteDias),
            },
            order: { data_prazo: 'ASC' },
            relations: ['processo_judicial'],
        });
    }
    /**
     * Retorna determinações judiciais com prazo expirado
     *
     * @returns Lista de determinações judiciais
     */
    async findDeterminacoesComPrazoExpirado() {
        const hoje = new Date();
        return this.determinacaoRepository.find({
            where: {
                ativo: true,
                cumprida: false,
                data_prazo: (0, typeorm_2.LessThan)(hoje),
            },
            order: { data_prazo: 'ASC' },
            relations: ['processo_judicial'],
        });
    }
};
exports.DeterminacaoJudicialService = DeterminacaoJudicialService;
exports.DeterminacaoJudicialService = DeterminacaoJudicialService = DeterminacaoJudicialService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(determinacao_judicial_entity_1.DeterminacaoJudicial)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof processo_judicial_service_1.ProcessoJudicialService !== "undefined" && processo_judicial_service_1.ProcessoJudicialService) === "function" ? _b : Object])
], DeterminacaoJudicialService);
// Nenhuma função auxiliar é necessária, pois estamos usando os operadores integrados do TypeORM
//# sourceMappingURL=data:application/json;charset=utf-8;base64,