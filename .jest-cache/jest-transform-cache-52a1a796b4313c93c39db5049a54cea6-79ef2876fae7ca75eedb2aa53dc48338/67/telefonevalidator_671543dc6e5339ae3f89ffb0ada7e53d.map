{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\validators\\telefone-validator.ts","mappings":";;;;;;;;;AAAA,qDAIyB;AAEzB;;;;;;;;GAQG;AAEI,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;IAC5B,QAAQ,CAAC,IAAY,EAAE,IAAyB;QAC9C,IAAI,CAAC,IAAI,EAAE,CAAC;YAAA,OAAO,IAAI,CAAC;QAAA,CAAC,CAAC,wEAAwE;QAElG,2CAA2C;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAE5C,6DAA6D;QAC7D,IAAI,WAAW,CAAC,MAAM,KAAK,EAAE,IAAI,WAAW,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YAC3D,OAAO,KAAK,CAAC;QACf,CAAC;QAED,6CAA6C;QAC7C,MAAM,GAAG,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAClD,IAAI,GAAG,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC;YACzB,OAAO,KAAK,CAAC;QACf,CAAC;QAED,sFAAsF;QACtF,IAAI,WAAW,CAAC,MAAM,KAAK,EAAE,IAAI,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YAC/D,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,IAAyB;QACtC,OAAO,iGAAiG,CAAC;IAC3G,CAAC;CACF,CAAA;AA7BY,8CAAiB;4BAAjB,iBAAiB;IAD7B,IAAA,qCAAmB,EAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;GACpD,iBAAiB,CA6B7B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\validators\\telefone-validator.ts"],"sourcesContent":["import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n/**\n * Validador personalizado para telefones brasileiros\n *\n * Aceita formatos:\n * - (00) 00000-0000 (celular)\n * - (00) 0000-0000 (fixo)\n * - 00000000000 (celular sem formatação)\n * - 0000000000 (fixo sem formatação)\n */\n@ValidatorConstraint({ name: 'telefoneValidator', async: false })\nexport class TelefoneValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    if (!text) {return true;} // Permite valores vazios (use @IsNotEmpty se quiser tornar obrigatório)\n\n    // Remove todos os caracteres não numéricos\n    const numeroLimpo = text.replace(/\\D/g, '');\n\n    // Verifica se o número tem 10 (fixo) ou 11 (celular) dígitos\n    if (numeroLimpo.length !== 10 && numeroLimpo.length !== 11) {\n      return false;\n    }\n\n    // Verifica se o DDD é válido (entre 11 e 99)\n    const ddd = parseInt(numeroLimpo.substring(0, 2));\n    if (ddd < 11 || ddd > 99) {\n      return false;\n    }\n\n    // Verifica se o primeiro dígito do número de celular é 9 (para números de 11 dígitos)\n    if (numeroLimpo.length === 11 && numeroLimpo.charAt(2) !== '9') {\n      return false;\n    }\n\n    return true;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'Telefone inválido. Formatos aceitos: (00) 00000-0000, (00) 0000-0000, 00000000000 ou 0000000000';\n  }\n}\n"],"version":3}