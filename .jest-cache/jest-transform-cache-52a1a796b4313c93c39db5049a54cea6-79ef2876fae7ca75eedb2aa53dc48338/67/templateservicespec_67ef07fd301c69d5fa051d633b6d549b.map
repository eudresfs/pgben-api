{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\tests\\template.service.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,mEAA+D;AAC/D,6EAAyE;AAIzE,oEAA+D;AAC/D,2CAAwE;AAExE,sBAAsB;AACtB,MAAM,sBAAsB,GAAG;IAC7B,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;IACvB,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;IAClB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;IACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;CAClB,CAAC;AAEF,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,IAAI,OAAwB,CAAC;IAC7B,IAAI,UAA8B,CAAC;IAEnC,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,SAAS,EAAE;gBACT,kCAAe;gBACf;oBACE,OAAO,EAAE,wCAAkB;oBAC3B,QAAQ,EAAE,sBAAsB;iBACjC;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,OAAO,GAAG,MAAM,CAAC,GAAG,CAAkB,kCAAe,CAAC,CAAC;QACvD,UAAU,GAAG,MAAM,CAAC,GAAG,CAAqB,wCAAkB,CAAC,CAAC;QAEhE,4CAA4C;QAC5C,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9B,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,UAAU;YACV,MAAM,YAAY,GAAG;gBACnB,EAAE,EAAE,GAAG;gBACP,MAAM,EAAE,iBAAiB;gBACzB,IAAI,EAAE,uBAAuB;gBAC7B,SAAS,EAAE,qCAAqC;gBAChD,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,gDAAgD;gBAC1D,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAEvE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;YAEnE,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACxC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,UAAU;YACV,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;iBAC1D,OAAO;iBACP,OAAO,CAAC,0BAAiB,CAAC,CAAC;YAE9B,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;QAC/E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YACpF,UAAU;YACV,MAAM,aAAa,GAAG;gBACpB;oBACE,EAAE,EAAE,GAAG;oBACP,MAAM,EAAE,iBAAiB;oBACzB,IAAI,EAAE,uBAAuB;oBAC7B,SAAS,EAAE,qCAAqC;oBAChD,IAAI,EAAE,qCAAgB,CAAC,KAAK;oBAC5B,QAAQ,EAAE,gDAAgD;oBAC1D,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,EAAE,EAAE,GAAG;oBACP,MAAM,EAAE,yBAAyB;oBACjC,IAAI,EAAE,4BAA4B;oBAClC,SAAS,EAAE,0CAA0C;oBACrD,IAAI,EAAE,qCAAgB,CAAC,WAAW;oBAClC,QAAQ,EAAE,4CAA4C;oBACtD,KAAK,EAAE,IAAI;iBACZ;aACF,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAEnE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,WAAW,EAAE,CAAC;YAE9C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC9C,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,UAAU;YACV,MAAM,IAAI,GAAG,qCAAgB,CAAC,KAAK,CAAC;YACpC,MAAM,aAAa,GAAG;gBACpB;oBACE,EAAE,EAAE,GAAG;oBACP,MAAM,EAAE,iBAAiB;oBACzB,IAAI,EAAE,uBAAuB;oBAC7B,SAAS,EAAE,qCAAqC;oBAChD,IAAI,EAAE,qCAAgB,CAAC,KAAK;oBAC5B,QAAQ,EAAE,gDAAgD;oBAC1D,KAAK,EAAE,IAAI;iBACZ;aACF,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAEtE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAElD,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YACzD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,UAAU;YACV,MAAM,IAAI,GAAG,qCAAgB,CAAC,KAAK,CAAC;YACpC,MAAM,aAAa,GAAG;gBACpB;oBACE,EAAE,EAAE,GAAG;oBACP,MAAM,EAAE,iBAAiB;oBACzB,IAAI,EAAE,uBAAuB;oBAC7B,SAAS,EAAE,qCAAqC;oBAChD,IAAI,EAAE,qCAAgB,CAAC,KAAK;oBAC5B,QAAQ,EAAE,gDAAgD;oBAC1D,KAAK,EAAE,IAAI;iBACZ;aACF,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;YAEtE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAEpD,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE;QACrB,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,UAAU;YACV,MAAM,GAAG,GAAsB;gBAC7B,MAAM,EAAE,eAAe;gBACvB,IAAI,EAAE,eAAe;gBACrB,SAAS,EAAE,4BAA4B;gBACvC,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,8DAA8D;aACzE,CAAC;YAEF,MAAM,YAAY,GAAG;gBACnB,EAAE,EAAE,GAAG;gBACP,GAAG,GAAG;gBACN,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC/D,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAE/D,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAE3C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YACxC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;YACtE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC;gBACnE,GAAG,GAAG;gBACN,KAAK,EAAE,IAAI;aACZ,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;YACnG,UAAU;YACV,MAAM,GAAG,GAAsB;gBAC7B,MAAM,EAAE,oBAAoB;gBAC5B,IAAI,EAAE,oBAAoB;gBAC1B,SAAS,EAAE,uBAAuB;gBAClC,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,oCAAoC;aAC/C,CAAC;YAEF,MAAM,iBAAiB,GAAG;gBACxB,EAAE,EAAE,GAAG;gBACP,GAAG,GAAG;gBACN,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;YAE5E,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC7B,OAAO;iBACP,OAAO,CAAC,4BAAmB,CAAC,CAAC;YAEhC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC;YAC3E,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;YAC1F,UAAU;YACV,MAAM,GAAG,GAAsB;gBAC7B,MAAM,EAAE,mBAAmB;gBAC3B,IAAI,EAAE,mBAAmB;gBACzB,SAAS,EAAE,uBAAuB;gBAClC,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,2CAA2C,EAAE,sCAAsC;aAC9F,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC7B,OAAO;iBACP,OAAO,CAAC,4BAAmB,CAAC,CAAC;YAEhC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;YAC1E,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,UAAU;YACV,MAAM,MAAM,GAAG,oBAAoB,CAAC;YACpC,MAAM,GAAG,GAAsB;gBAC7B,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,sBAAsB;gBACjC,QAAQ,EAAE,6DAA6D;aACxE,CAAC;YAEF,MAAM,iBAAiB,GAAG;gBACxB,EAAE,EAAE,GAAG;gBACP,MAAM;gBACN,IAAI,EAAE,aAAa;gBACnB,SAAS,EAAE,kBAAkB;gBAC7B,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,2CAA2C;gBACrD,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,MAAM,kBAAkB,GAAG;gBACzB,GAAG,iBAAiB;gBACpB,GAAG,GAAG;aACP,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;YAC5E,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;YAErE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAEvD,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YAC9C,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC;gBACnE,GAAG,iBAAiB;gBACpB,GAAG,GAAG;aACP,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;YACzF,UAAU;YACV,MAAM,MAAM,GAAG,sBAAsB,CAAC;YACtC,MAAM,GAAG,GAAsB;gBAC7B,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,sBAAsB;gBACjC,QAAQ,EAAE,+CAA+C;aAC1D,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;iBACzC,OAAO;iBACP,OAAO,CAAC,0BAAiB,CAAC,CAAC;YAE9B,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;YACzF,UAAU;YACV,MAAM,MAAM,GAAG,oBAAoB,CAAC;YACpC,MAAM,GAAG,GAAsB;gBAC7B,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,sBAAsB;gBACjC,QAAQ,EAAE,2CAA2C,EAAE,sCAAsC;aAC9F,CAAC;YAEF,MAAM,iBAAiB,GAAG;gBACxB,EAAE,EAAE,GAAG;gBACP,MAAM;gBACN,IAAI,EAAE,aAAa;gBACnB,SAAS,EAAE,kBAAkB;gBAC7B,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,2CAA2C;gBACrD,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;YAE5E,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;iBACzC,OAAO;iBACP,OAAO,CAAC,4BAAmB,CAAC,CAAC;YAEhC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YAC9D,UAAU;YACV,MAAM,MAAM,GAAG,oBAAoB,CAAC;YACpC,MAAM,iBAAiB,GAAG;gBACxB,EAAE,EAAE,GAAG;gBACP,MAAM;gBACN,IAAI,EAAE,oBAAoB;gBAC1B,SAAS,EAAE,uBAAuB;gBAClC,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,oCAAoC;gBAC9C,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;YAC5E,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAE9D,MAAM;YACN,MAAM,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAE9B,SAAS;YACT,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yEAAyE,EAAE,KAAK,IAAI,EAAE;YACvF,UAAU;YACV,MAAM,MAAM,GAAG,sBAAsB,CAAC;YAEtC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;iBAClC,OAAO;iBACP,OAAO,CAAC,0BAAiB,CAAC,CAAC;YAE9B,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;YAC5D,UAAU;YACV,MAAM,MAAM,GAAG,oBAAoB,CAAC;YACpC,MAAM,KAAK,GAAG,IAAI,CAAC;YAEnB,MAAM,iBAAiB,GAAG;gBACxB,EAAE,EAAE,GAAG;gBACP,MAAM;gBACN,IAAI,EAAE,oBAAoB;gBAC1B,SAAS,EAAE,uBAAuB;gBAClC,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,oCAAoC;gBAC9C,KAAK,EAAE,KAAK;aACb,CAAC;YAEF,MAAM,kBAAkB,GAAG;gBACzB,GAAG,iBAAiB;gBACpB,KAAK;aACN,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;YAC5E,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,CAAC;YAErE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAE7D,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YAC9C,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,gBAAgB,CAAC;gBACnE,GAAG,iBAAiB;gBACpB,KAAK;aACN,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qFAAqF,EAAE,KAAK,IAAI,EAAE;YACnG,UAAU;YACV,MAAM,MAAM,GAAG,sBAAsB,CAAC;YACtC,MAAM,KAAK,GAAG,IAAI,CAAC;YAEnB,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC/C,OAAO;iBACP,OAAO,CAAC,0BAAiB,CAAC,CAAC;YAE9B,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,UAAU;YACV,MAAM,GAAG,GAAoB;gBAC3B,QAAQ,EAAE,0CAA0C;gBACpD,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;aACxB,CAAC;YAEF,MAAM,gBAAgB,GAAG,sCAAsC,CAAC;YAEhE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAE5C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;YAC9E,UAAU;YACV,MAAM,GAAG,GAAoB;gBAC3B,QAAQ,EAAE,2CAA2C,EAAE,sCAAsC;gBAC7F,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE;aACrC,CAAC;YAEF,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAC9B,OAAO;iBACP,OAAO,CAAC,4BAAmB,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAC/D,UAAU;YACV,MAAM,GAAG,GAAoB;gBAC3B,QAAQ,EAAE;;;;;;;;;;;;SAYT;gBACD,KAAK,EAAE;oBACL,KAAK,EAAE;wBACL,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE;wBAC/B,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE;qBACjC;oBACD,KAAK,EAAE,KAAK;iBACb;aACF,CAAC;YAEF,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAE5C,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC7C,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC;YAClE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC;YACnE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;YACjE,UAAU;YACV,MAAM,MAAM,GAAG,iBAAiB,CAAC;YACjC,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,qBAAqB,EAAE,CAAC;YAE5D,MAAM,YAAY,GAAG;gBACnB,EAAE,EAAE,GAAG;gBACP,MAAM;gBACN,IAAI,EAAE,uBAAuB;gBAC7B,SAAS,EAAE,qCAAqC;gBAChD,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,mFAAmF;gBAC7F,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,MAAM,gBAAgB,GAAG,0FAA0F,CAAC;YAEpH,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAEvE,MAAM;YACN,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAE1D,SAAS;YACT,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4EAA4E,EAAE,KAAK,IAAI,EAAE;YAC1F,UAAU;YACV,MAAM,MAAM,GAAG,sBAAsB,CAAC;YACtC,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;YAE/B,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAE/D,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC5C,OAAO;iBACP,OAAO,CAAC,0BAAiB,CAAC,CAAC;YAE9B,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;YACnF,UAAU;YACV,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;YAE/B,MAAM,YAAY,GAAG;gBACnB,EAAE,EAAE,IAAI;gBACR,MAAM;gBACN,IAAI,EAAE,kBAAkB;gBACxB,SAAS,EAAE,6BAA6B;gBACxC,IAAI,EAAE,qCAAgB,CAAC,KAAK;gBAC5B,QAAQ,EAAE,oCAAoC;gBAC9C,KAAK,EAAE,KAAK;aACb,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAEvE,eAAe;YACf,MAAM,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC5C,OAAO;iBACP,OAAO,CAAC,4BAAmB,CAAC,CAAC;YAEhC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\tests\\template.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { TemplateService } from '../services/template.service';\nimport { TemplateRepository } from '../repositories/template.repository';\nimport { TemplateCreateDto } from '../dtos/template/template-create.dto';\nimport { TemplateUpdateDto } from '../dtos/template/template-update.dto';\nimport { TemplateTestDto } from '../dtos/template/template-test.dto';\nimport { TemplateTipoEnum } from '../enums/template-tipo.enum';\nimport { NotFoundException, BadRequestException } from '@nestjs/common';\n\n// Mock do Repositório\nconst mockTemplateRepository = {\n  findByCodigo: jest.fn(),\n  findAll: jest.fn(),\n  findByTipo: jest.fn(),\n  save: jest.fn(),\n  remove: jest.fn(),\n};\n\ndescribe('TemplateService', () => {\n  let service: TemplateService;\n  let repository: TemplateRepository;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        TemplateService,\n        {\n          provide: TemplateRepository,\n          useValue: mockTemplateRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<TemplateService>(TemplateService);\n    repository = module.get<TemplateRepository>(TemplateRepository);\n\n    // Limpar todos os mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n    expect(repository).toBeDefined();\n  });\n\n  describe('buscarPorCodigo', () => {\n    it('deve retornar um template quando encontrado', async () => {\n      // Arrange\n      const templateMock = {\n        id: '1',\n        codigo: 'email-bem-vindo',\n        nome: 'E-mail de Boas-vindas',\n        descricao: 'Template para e-mail de boas-vindas',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Bem-vindo, {{nome}}!</body></html>',\n        ativo: true,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateMock);\n      \n      // Act\n      const resultado = await service.buscarPorCodigo('email-bem-vindo');\n      \n      // Assert\n      expect(resultado).toEqual(templateMock);\n      expect(repository.findByCodigo).toHaveBeenCalledWith('email-bem-vindo');\n    });\n\n    it('deve lançar NotFoundException quando o template não for encontrado', async () => {\n      // Arrange\n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.buscarPorCodigo('template-inexistente'))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith('template-inexistente');\n    });\n  });\n\n  describe('buscarTodos', () => {\n    it('deve retornar todos os templates quando não for especificado um tipo', async () => {\n      // Arrange\n      const templatesMock = [\n        {\n          id: '1',\n          codigo: 'email-bem-vindo',\n          nome: 'E-mail de Boas-vindas',\n          descricao: 'Template para e-mail de boas-vindas',\n          tipo: TemplateTipoEnum.EMAIL,\n          conteudo: '<html><body>Bem-vindo, {{nome}}!</body></html>',\n          ativo: true,\n        },\n        {\n          id: '2',\n          codigo: 'notificacao-solicitacao',\n          nome: 'Notificação de Solicitação',\n          descricao: 'Template para notificação de solicitação',\n          tipo: TemplateTipoEnum.NOTIFICACAO,\n          conteudo: 'Sua solicitação {{protocolo}} foi recebida',\n          ativo: true,\n        },\n      ];\n      \n      jest.spyOn(repository, 'findAll').mockResolvedValue(templatesMock);\n      \n      // Act\n      const resultado = await service.buscarTodos();\n      \n      // Assert\n      expect(resultado).toEqual(templatesMock);\n      expect(repository.findAll).toHaveBeenCalled();\n      expect(repository.findByTipo).not.toHaveBeenCalled();\n    });\n\n    it('deve retornar templates filtrados por tipo quando especificado', async () => {\n      // Arrange\n      const tipo = TemplateTipoEnum.EMAIL;\n      const templatesMock = [\n        {\n          id: '1',\n          codigo: 'email-bem-vindo',\n          nome: 'E-mail de Boas-vindas',\n          descricao: 'Template para e-mail de boas-vindas',\n          tipo: TemplateTipoEnum.EMAIL,\n          conteudo: '<html><body>Bem-vindo, {{nome}}!</body></html>',\n          ativo: true,\n        },\n      ];\n      \n      jest.spyOn(repository, 'findByTipo').mockResolvedValue(templatesMock);\n      \n      // Act\n      const resultado = await service.buscarTodos(tipo);\n      \n      // Assert\n      expect(resultado).toEqual(templatesMock);\n      expect(repository.findByTipo).toHaveBeenCalledWith(tipo);\n      expect(repository.findAll).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('buscarPorTipo', () => {\n    it('deve retornar templates filtrados por tipo', async () => {\n      // Arrange\n      const tipo = TemplateTipoEnum.EMAIL;\n      const templatesMock = [\n        {\n          id: '1',\n          codigo: 'email-bem-vindo',\n          nome: 'E-mail de Boas-vindas',\n          descricao: 'Template para e-mail de boas-vindas',\n          tipo: TemplateTipoEnum.EMAIL,\n          conteudo: '<html><body>Bem-vindo, {{nome}}!</body></html>',\n          ativo: true,\n        },\n      ];\n      \n      jest.spyOn(repository, 'findByTipo').mockResolvedValue(templatesMock);\n      \n      // Act\n      const resultado = await service.buscarPorTipo(tipo);\n      \n      // Assert\n      expect(resultado).toEqual(templatesMock);\n      expect(repository.findByTipo).toHaveBeenCalledWith(tipo);\n    });\n  });\n\n  describe('criar', () => {\n    it('deve criar um novo template com sucesso', async () => {\n      // Arrange\n      const dto: TemplateCreateDto = {\n        codigo: 'novo-template',\n        nome: 'Novo Template',\n        descricao: 'Descrição do novo template',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Conteúdo do template: {{variavel}}</body></html>',\n      };\n      \n      const templateMock = {\n        id: '3',\n        ...dto,\n        ativo: true,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(null);\n      jest.spyOn(repository, 'save').mockResolvedValue(templateMock);\n      \n      // Act\n      const resultado = await service.criar(dto);\n      \n      // Assert\n      expect(resultado).toEqual(templateMock);\n      expect(repository.findByCodigo).toHaveBeenCalledWith('novo-template');\n      expect(repository.save).toHaveBeenCalledWith(expect.objectContaining({\n        ...dto,\n        ativo: true,\n      }));\n    });\n\n    it('deve lançar BadRequestException ao tentar criar um template com código já existente', async () => {\n      // Arrange\n      const dto: TemplateCreateDto = {\n        codigo: 'template-existente',\n        nome: 'Template Existente',\n        descricao: 'Descrição do template',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Conteúdo</body></html>',\n      };\n      \n      const templateExistente = {\n        id: '4',\n        ...dto,\n        ativo: true,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateExistente);\n      \n      // Act & Assert\n      await expect(service.criar(dto))\n        .rejects\n        .toThrow(BadRequestException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith('template-existente');\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar BadRequestException quando o conteúdo do template for inválido', async () => {\n      // Arrange\n      const dto: TemplateCreateDto = {\n        codigo: 'template-invalido',\n        nome: 'Template Inválido',\n        descricao: 'Descrição do template',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>{{#each items}}</body></html>', // Template inválido (tag não fechada)\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.criar(dto))\n        .rejects\n        .toThrow(BadRequestException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith('template-invalido');\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('atualizar', () => {\n    it('deve atualizar um template existente com sucesso', async () => {\n      // Arrange\n      const codigo = 'template-existente';\n      const dto: TemplateUpdateDto = {\n        nome: 'Nome Atualizado',\n        descricao: 'Descrição atualizada',\n        conteudo: '<html><body>Conteúdo atualizado: {{variavel}}</body></html>',\n      };\n      \n      const templateExistente = {\n        id: '5',\n        codigo,\n        nome: 'Nome Antigo',\n        descricao: 'Descrição antiga',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Conteúdo antigo</body></html>',\n        ativo: true,\n      };\n      \n      const templateAtualizado = {\n        ...templateExistente,\n        ...dto,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateExistente);\n      jest.spyOn(repository, 'save').mockResolvedValue(templateAtualizado);\n      \n      // Act\n      const resultado = await service.atualizar(codigo, dto);\n      \n      // Assert\n      expect(resultado).toEqual(templateAtualizado);\n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n      expect(repository.save).toHaveBeenCalledWith(expect.objectContaining({\n        ...templateExistente,\n        ...dto,\n      }));\n    });\n\n    it('deve lançar NotFoundException ao tentar atualizar um template inexistente', async () => {\n      // Arrange\n      const codigo = 'template-inexistente';\n      const dto: TemplateUpdateDto = {\n        nome: 'Nome Atualizado',\n        descricao: 'Descrição atualizada',\n        conteudo: '<html><body>Conteúdo atualizado</body></html>',\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.atualizar(codigo, dto))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar BadRequestException quando o conteúdo atualizado for inválido', async () => {\n      // Arrange\n      const codigo = 'template-existente';\n      const dto: TemplateUpdateDto = {\n        nome: 'Nome Atualizado',\n        descricao: 'Descrição atualizada',\n        conteudo: '<html><body>{{#if invalido}</body></html>', // Template inválido (tag não fechada)\n      };\n      \n      const templateExistente = {\n        id: '6',\n        codigo,\n        nome: 'Nome Antigo',\n        descricao: 'Descrição antiga',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Conteúdo antigo</body></html>',\n        ativo: true,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateExistente);\n      \n      // Act & Assert\n      await expect(service.atualizar(codigo, dto))\n        .rejects\n        .toThrow(BadRequestException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('remover', () => {\n    it('deve remover um template existente com sucesso', async () => {\n      // Arrange\n      const codigo = 'template-existente';\n      const templateExistente = {\n        id: '7',\n        codigo,\n        nome: 'Template Existente',\n        descricao: 'Descrição do template',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Conteúdo</body></html>',\n        ativo: true,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateExistente);\n      jest.spyOn(repository, 'remove').mockResolvedValue(undefined);\n      \n      // Act\n      await service.remover(codigo);\n      \n      // Assert\n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n      expect(repository.remove).toHaveBeenCalledWith(templateExistente);\n    });\n\n    it('deve lançar NotFoundException ao tentar remover um template inexistente', async () => {\n      // Arrange\n      const codigo = 'template-inexistente';\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.remover(codigo))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n      expect(repository.remove).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('alterarStatus', () => {\n    it('deve alterar o status do template para ativo', async () => {\n      // Arrange\n      const codigo = 'template-existente';\n      const ativo = true;\n      \n      const templateExistente = {\n        id: '8',\n        codigo,\n        nome: 'Template Existente',\n        descricao: 'Descrição do template',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Conteúdo</body></html>',\n        ativo: false,\n      };\n      \n      const templateAtualizado = {\n        ...templateExistente,\n        ativo,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateExistente);\n      jest.spyOn(repository, 'save').mockResolvedValue(templateAtualizado);\n      \n      // Act\n      const resultado = await service.alterarStatus(codigo, ativo);\n      \n      // Assert\n      expect(resultado).toEqual(templateAtualizado);\n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n      expect(repository.save).toHaveBeenCalledWith(expect.objectContaining({\n        ...templateExistente,\n        ativo,\n      }));\n    });\n\n    it('deve lançar NotFoundException ao tentar alterar o status de um template inexistente', async () => {\n      // Arrange\n      const codigo = 'template-inexistente';\n      const ativo = true;\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.alterarStatus(codigo, ativo))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n      expect(repository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('testar', () => {\n    it('deve renderizar um template com sucesso', async () => {\n      // Arrange\n      const dto: TemplateTestDto = {\n        conteudo: '<html><body>Olá, {{nome}}!</body></html>',\n        dados: { nome: 'João' },\n      };\n      \n      const conteudoEsperado = '<html><body>Olá, João!</body></html>';\n      \n      // Act\n      const resultado = await service.testar(dto);\n      \n      // Assert\n      expect(resultado).toEqual({ conteudo: conteudoEsperado });\n    });\n\n    it('deve lançar BadRequestException quando o template for inválido', async () => {\n      // Arrange\n      const dto: TemplateTestDto = {\n        conteudo: '<html><body>{{#each items}}</body></html>', // Template inválido (tag não fechada)\n        dados: { items: ['item1', 'item2'] },\n      };\n      \n      // Act & Assert\n      await expect(service.testar(dto))\n        .rejects\n        .toThrow(BadRequestException);\n    });\n\n    it('deve renderizar um template com dados complexos', async () => {\n      // Arrange\n      const dto: TemplateTestDto = {\n        conteudo: `\n          <html>\n            <body>\n              <h1>Lista de Itens</h1>\n              <ul>\n                {{#each items}}\n                  <li>{{nome}} - R$ {{preco}}</li>\n                {{/each}}\n              </ul>\n              <p>Total: R$ {{total}}</p>\n            </body>\n          </html>\n        `,\n        dados: {\n          items: [\n            { nome: 'Item 1', preco: 10.5 },\n            { nome: 'Item 2', preco: 20.75 },\n          ],\n          total: 31.25,\n        },\n      };\n      \n      // Act\n      const resultado = await service.testar(dto);\n      \n      // Assert\n      expect(resultado).toHaveProperty('conteudo');\n      expect(resultado.conteudo).toContain('<li>Item 1 - R$ 10.5</li>');\n      expect(resultado.conteudo).toContain('<li>Item 2 - R$ 20.75</li>');\n      expect(resultado.conteudo).toContain('<p>Total: R$ 31.25</p>');\n    });\n  });\n\n  describe('renderizar', () => {\n    it('deve renderizar um template existente com sucesso', async () => {\n      // Arrange\n      const codigo = 'email-bem-vindo';\n      const dados = { nome: 'João', link: 'https://exemplo.com' };\n      \n      const templateMock = {\n        id: '9',\n        codigo,\n        nome: 'E-mail de Boas-vindas',\n        descricao: 'Template para e-mail de boas-vindas',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Bem-vindo, {{nome}}! <a href=\"{{link}}\">Acesse aqui</a></body></html>',\n        ativo: true,\n      };\n      \n      const conteudoEsperado = '<html><body>Bem-vindo, João! <a href=\"https://exemplo.com\">Acesse aqui</a></body></html>';\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateMock);\n      \n      // Act\n      const resultado = await service.renderizar(codigo, dados);\n      \n      // Assert\n      expect(resultado).toBe(conteudoEsperado);\n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n    });\n\n    it('deve lançar NotFoundException ao tentar renderizar um template inexistente', async () => {\n      // Arrange\n      const codigo = 'template-inexistente';\n      const dados = { nome: 'João' };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(null);\n      \n      // Act & Assert\n      await expect(service.renderizar(codigo, dados))\n        .rejects\n        .toThrow(NotFoundException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n    });\n\n    it('deve lançar BadRequestException quando o template não estiver ativo', async () => {\n      // Arrange\n      const codigo = 'template-inativo';\n      const dados = { nome: 'João' };\n      \n      const templateMock = {\n        id: '10',\n        codigo,\n        nome: 'Template Inativo',\n        descricao: 'Template inativo para teste',\n        tipo: TemplateTipoEnum.EMAIL,\n        conteudo: '<html><body>Conteúdo</body></html>',\n        ativo: false,\n      };\n      \n      jest.spyOn(repository, 'findByCodigo').mockResolvedValue(templateMock);\n      \n      // Act & Assert\n      await expect(service.renderizar(codigo, dados))\n        .rejects\n        .toThrow(BadRequestException);\n      \n      expect(repository.findByCodigo).toHaveBeenCalledWith(codigo);\n    });\n  });\n});\n"],"version":3}