{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\repositories\\regra-conflito-papel.repository.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA+D;AAC/D,6CAAmD;AACnD,qCAAqC;AACrC,+FAAmF;AAEnF;;GAEG;AAEI,IAAM,4BAA4B,GAAlC,MAAM,4BAA4B;IAGpB;IAFnB,YAEmB,UAA0C;QAA1C,eAAU,GAAV,UAAU,CAAgC;IAC1D,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,MAAM,CAAC,IAAiC;QAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,eAAe,GAAG,KAAK;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU;aAC1B,kBAAkB,CAAC,OAAO,CAAC;aAC3B,iBAAiB,CAAC,oBAAoB,EAAE,cAAc,CAAC;aACvD,iBAAiB,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAAC;QAE7D,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,KAAK,CAAC,KAAK,CAAC,sBAAsB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAC7D,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,EAAE,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC;SAC7C,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,iBAAiB,CACrB,aAAqB,EACrB,eAAe,GAAG,KAAK;QAEvB,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU;aAC1B,kBAAkB,CAAC,OAAO,CAAC;aAC3B,iBAAiB,CAAC,oBAAoB,EAAE,cAAc,CAAC;aACvD,iBAAiB,CAAC,qBAAqB,EAAE,eAAe,CAAC;aACzD,KAAK,CAAC,wCAAwC,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;QAEtE,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,KAAK,CAAC,QAAQ,CAAC,sBAAsB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB,CACtB,cAAsB,EACtB,eAAe,GAAG,KAAK;QAEvB,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU;aAC1B,kBAAkB,CAAC,OAAO,CAAC;aAC3B,iBAAiB,CAAC,oBAAoB,EAAE,cAAc,CAAC;aACvD,iBAAiB,CAAC,qBAAqB,EAAE,eAAe,CAAC;aACzD,KAAK,CAAC,0CAA0C,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QAEzE,IAAI,CAAC,eAAe,EAAE,CAAC;YACrB,KAAK,CAAC,QAAQ,CAAC,sBAAsB,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,OAAO,KAAK,CAAC,OAAO,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,iBAAiB,CACrB,aAAqB,EACrB,cAAsB;QAEtB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE;gBACL;oBACE,eAAe,EAAE,aAAa;oBAC9B,gBAAgB,EAAE,cAAc;oBAChC,KAAK,EAAE,IAAI;iBACZ;gBACD;oBACE,eAAe,EAAE,cAAc;oBAC/B,gBAAgB,EAAE,aAAa;oBAC/B,KAAK,EAAE,IAAI;iBACZ;aACF;YACD,SAAS,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC;SAC7C,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CACV,EAAU,EACV,IAAiC;QAEjC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CACzB,4BAA4B,EAAE,iBAAiB,CAChD,CAAC;QACJ,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,EAAU,EAAE,KAAc;QAC1C,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,0BAAiB,CACzB,4BAA4B,EAAE,iBAAiB,CAChD,CAAC;QACJ,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;CACF,CAAA;AAnKY,oEAA4B;uCAA5B,4BAA4B;IADxC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,gDAAkB,CAAC,CAAA;yDACR,oBAAU,oBAAV,oBAAU;GAH9B,4BAA4B,CAmKxC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\repositories\\regra-conflito-papel.repository.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { RegraConflitoPapel } from '../../../entities/regra-conflito-papel.entity';\n\n/**\n * Repositório para operações relacionadas às regras de conflito de papéis\n */\n@Injectable()\nexport class RegraConflitoPapelRepository {\n  constructor(\n    @InjectRepository(RegraConflitoPapel)\n    private readonly repository: Repository<RegraConflitoPapel>,\n  ) {}\n\n  /**\n   * Cria uma nova regra de conflito\n   * @param data Dados da regra\n   * @returns Regra criada\n   */\n  async create(data: Partial<RegraConflitoPapel>): Promise<RegraConflitoPapel> {\n    const regra = this.repository.create(data);\n    return this.repository.save(regra);\n  }\n\n  /**\n   * Busca todas as regras de conflito\n   * @param includeInactive Se deve incluir regras inativas\n   * @returns Lista de regras\n   */\n  async findAll(includeInactive = false): Promise<RegraConflitoPapel[]> {\n    const query = this.repository\n      .createQueryBuilder('regra')\n      .leftJoinAndSelect('regra.papel_origem', 'papel_origem')\n      .leftJoinAndSelect('regra.papel_destino', 'papel_destino');\n\n    if (!includeInactive) {\n      query.where('regra.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('regra.created_at', 'DESC').getMany();\n  }\n\n  /**\n   * Busca uma regra pelo ID\n   * @param id ID da regra\n   * @returns Regra encontrada ou null\n   */\n  async findById(id: string): Promise<RegraConflitoPapel | null> {\n    return this.repository.findOne({\n      where: { id },\n      relations: ['papel_origem', 'papel_destino'],\n    });\n  }\n\n  /**\n   * Busca regras por papel de origem\n   * @param papelOrigemId ID do papel de origem\n   * @param includeInactive Se deve incluir regras inativas\n   * @returns Lista de regras\n   */\n  async findByPapelOrigem(\n    papelOrigemId: string,\n    includeInactive = false,\n  ): Promise<RegraConflitoPapel[]> {\n    const query = this.repository\n      .createQueryBuilder('regra')\n      .leftJoinAndSelect('regra.papel_origem', 'papel_origem')\n      .leftJoinAndSelect('regra.papel_destino', 'papel_destino')\n      .where('regra.papel_origem_id = :papelOrigemId', { papelOrigemId });\n\n    if (!includeInactive) {\n      query.andWhere('regra.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('regra.created_at', 'DESC').getMany();\n  }\n\n  /**\n   * Busca regras por papel de destino\n   * @param papelDestinoId ID do papel de destino\n   * @param includeInactive Se deve incluir regras inativas\n   * @returns Lista de regras\n   */\n  async findByPapelDestino(\n    papelDestinoId: string,\n    includeInactive = false,\n  ): Promise<RegraConflitoPapel[]> {\n    const query = this.repository\n      .createQueryBuilder('regra')\n      .leftJoinAndSelect('regra.papel_origem', 'papel_origem')\n      .leftJoinAndSelect('regra.papel_destino', 'papel_destino')\n      .where('regra.papel_destino_id = :papelDestinoId', { papelDestinoId });\n\n    if (!includeInactive) {\n      query.andWhere('regra.ativo = :ativo', { ativo: true });\n    }\n\n    return query.orderBy('regra.created_at', 'DESC').getMany();\n  }\n\n  /**\n   * Verifica se existe conflito entre dois papéis\n   * @param papelOrigemId ID do papel de origem\n   * @param papelDestinoId ID do papel de destino\n   * @returns Regra de conflito ou null\n   */\n  async verificarConflito(\n    papelOrigemId: string,\n    papelDestinoId: string,\n  ): Promise<RegraConflitoPapel | null> {\n    return this.repository.findOne({\n      where: [\n        {\n          papel_origem_id: papelOrigemId,\n          papel_destino_id: papelDestinoId,\n          ativo: true,\n        },\n        {\n          papel_origem_id: papelDestinoId,\n          papel_destino_id: papelOrigemId,\n          ativo: true,\n        },\n      ],\n      relations: ['papel_origem', 'papel_destino'],\n    });\n  }\n\n  /**\n   * Atualiza uma regra existente\n   * @param id ID da regra\n   * @param data Dados para atualização\n   * @returns Regra atualizada\n   */\n  async update(\n    id: string,\n    data: Partial<RegraConflitoPapel>,\n  ): Promise<RegraConflitoPapel> {\n    await this.repository.update(id, data);\n    const regra = await this.findById(id);\n    if (!regra) {\n      throw new NotFoundException(\n        `Regra de conflito com ID ${id} não encontrada`,\n      );\n    }\n    return regra;\n  }\n\n  /**\n   * Ativa ou desativa uma regra\n   * @param id ID da regra\n   * @param ativo Status de ativação\n   * @returns Regra atualizada\n   */\n  async toggleAtivo(id: string, ativo: boolean): Promise<RegraConflitoPapel> {\n    await this.repository.update(id, { ativo });\n    const regra = await this.findById(id);\n    if (!regra) {\n      throw new NotFoundException(\n        `Regra de conflito com ID ${id} não encontrada`,\n      );\n    }\n    return regra;\n  }\n\n  /**\n   * Remove uma regra\n   * @param id ID da regra\n   */\n  async remove(id: string): Promise<void> {\n    await this.repository.delete(id);\n  }\n}\n"],"version":3}