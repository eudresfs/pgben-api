d2e632549579b63af8e97fd46b8006bb
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegraConflitoPapelRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const regra_conflito_papel_entity_1 = require("../../../entities/regra-conflito-papel.entity");
/**
 * Repositório para operações relacionadas às regras de conflito de papéis
 */
let RegraConflitoPapelRepository = class RegraConflitoPapelRepository {
    repository;
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Cria uma nova regra de conflito
     * @param data Dados da regra
     * @returns Regra criada
     */
    async create(data) {
        const regra = this.repository.create(data);
        return this.repository.save(regra);
    }
    /**
     * Busca todas as regras de conflito
     * @param includeInactive Se deve incluir regras inativas
     * @returns Lista de regras
     */
    async findAll(includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('regra')
            .leftJoinAndSelect('regra.papel_origem', 'papel_origem')
            .leftJoinAndSelect('regra.papel_destino', 'papel_destino');
        if (!includeInactive) {
            query.where('regra.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('regra.created_at', 'DESC').getMany();
    }
    /**
     * Busca uma regra pelo ID
     * @param id ID da regra
     * @returns Regra encontrada ou null
     */
    async findById(id) {
        return this.repository.findOne({
            where: { id },
            relations: ['papel_origem', 'papel_destino'],
        });
    }
    /**
     * Busca regras por papel de origem
     * @param papelOrigemId ID do papel de origem
     * @param includeInactive Se deve incluir regras inativas
     * @returns Lista de regras
     */
    async findByPapelOrigem(papelOrigemId, includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('regra')
            .leftJoinAndSelect('regra.papel_origem', 'papel_origem')
            .leftJoinAndSelect('regra.papel_destino', 'papel_destino')
            .where('regra.papel_origem_id = :papelOrigemId', { papelOrigemId });
        if (!includeInactive) {
            query.andWhere('regra.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('regra.created_at', 'DESC').getMany();
    }
    /**
     * Busca regras por papel de destino
     * @param papelDestinoId ID do papel de destino
     * @param includeInactive Se deve incluir regras inativas
     * @returns Lista de regras
     */
    async findByPapelDestino(papelDestinoId, includeInactive = false) {
        const query = this.repository
            .createQueryBuilder('regra')
            .leftJoinAndSelect('regra.papel_origem', 'papel_origem')
            .leftJoinAndSelect('regra.papel_destino', 'papel_destino')
            .where('regra.papel_destino_id = :papelDestinoId', { papelDestinoId });
        if (!includeInactive) {
            query.andWhere('regra.ativo = :ativo', { ativo: true });
        }
        return query.orderBy('regra.created_at', 'DESC').getMany();
    }
    /**
     * Verifica se existe conflito entre dois papéis
     * @param papelOrigemId ID do papel de origem
     * @param papelDestinoId ID do papel de destino
     * @returns Regra de conflito ou null
     */
    async verificarConflito(papelOrigemId, papelDestinoId) {
        return this.repository.findOne({
            where: [
                {
                    papel_origem_id: papelOrigemId,
                    papel_destino_id: papelDestinoId,
                    ativo: true,
                },
                {
                    papel_origem_id: papelDestinoId,
                    papel_destino_id: papelOrigemId,
                    ativo: true,
                },
            ],
            relations: ['papel_origem', 'papel_destino'],
        });
    }
    /**
     * Atualiza uma regra existente
     * @param id ID da regra
     * @param data Dados para atualização
     * @returns Regra atualizada
     */
    async update(id, data) {
        await this.repository.update(id, data);
        const regra = await this.findById(id);
        if (!regra) {
            throw new common_1.NotFoundException(`Regra de conflito com ID ${id} não encontrada`);
        }
        return regra;
    }
    /**
     * Ativa ou desativa uma regra
     * @param id ID da regra
     * @param ativo Status de ativação
     * @returns Regra atualizada
     */
    async toggleAtivo(id, ativo) {
        await this.repository.update(id, { ativo });
        const regra = await this.findById(id);
        if (!regra) {
            throw new common_1.NotFoundException(`Regra de conflito com ID ${id} não encontrada`);
        }
        return regra;
    }
    /**
     * Remove uma regra
     * @param id ID da regra
     */
    async remove(id) {
        await this.repository.delete(id);
    }
};
exports.RegraConflitoPapelRepository = RegraConflitoPapelRepository;
exports.RegraConflitoPapelRepository = RegraConflitoPapelRepository = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(regra_conflito_papel_entity_1.RegraConflitoPapel)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], RegraConflitoPapelRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,