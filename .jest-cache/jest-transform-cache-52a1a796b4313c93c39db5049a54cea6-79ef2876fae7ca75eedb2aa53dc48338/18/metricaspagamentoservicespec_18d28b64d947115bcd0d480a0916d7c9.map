{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\services\\metricas-pagamento.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\services\\metricas-pagamento.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { MetricasPagamentoService } from '../../../services/metricas-pagamento.service';\nimport { Pagamento } from '../../../entities/pagamento.entity';\nimport { ComprovantePagamento } from '../../../entities/comprovante-pagamento.entity';\nimport { ConfirmacaoRecebimento } from '../../../entities/confirmacao-recebimento.entity';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\nimport { MetodoPagamentoEnum } from '../../../enums/metodo-pagamento.enum';\n\n/**\n * Testes unitários para MetricasPagamentoService\n *\n * Valida o funcionamento do serviço responsável por coletar\n * e disponibilizar métricas sobre as operações de pagamento.\n *\n * @author Equipe PGBen\n */\ndescribe('MetricasPagamentoService', () => {\n  let service: MetricasPagamentoService;\n  let pagamentoRepository: Repository<Pagamento>;\n  let comprovanteRepository: Repository<ComprovantePagamento>;\n  let confirmacaoRepository: Repository<ConfirmacaoRecebimento>;\n\n  // Mock do QueryBuilder para uso nos testes\n  const mockQueryBuilder = {\n    select: jest.fn().mockReturnThis(),\n    addSelect: jest.fn().mockReturnThis(),\n    from: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n    andWhere: jest.fn().mockReturnThis(),\n    leftJoin: jest.fn().mockReturnThis(),\n    innerJoin: jest.fn().mockReturnThis(),\n    groupBy: jest.fn().mockReturnThis(),\n    orderBy: jest.fn().mockReturnThis(),\n    getRawMany: jest.fn().mockResolvedValue([]),\n    getRawOne: jest.fn().mockResolvedValue({}),\n    execute: jest.fn().mockResolvedValue([]),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        MetricasPagamentoService,\n        {\n          provide: getRepositoryToken(Pagamento),\n          useValue: {\n            createQueryBuilder: jest.fn().mockReturnValue(mockQueryBuilder),\n            manager: {\n              query: jest.fn().mockResolvedValue([]),\n            },\n          },\n        },\n        {\n          provide: getRepositoryToken(ComprovantePagamento),\n          useValue: {\n            createQueryBuilder: jest.fn().mockReturnValue(mockQueryBuilder),\n            count: jest.fn().mockResolvedValue(0),\n          },\n        },\n        {\n          provide: getRepositoryToken(ConfirmacaoRecebimento),\n          useValue: {\n            createQueryBuilder: jest.fn().mockReturnValue(mockQueryBuilder),\n            count: jest.fn().mockResolvedValue(0),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<MetricasPagamentoService>(MetricasPagamentoService);\n    pagamentoRepository = module.get<Repository<Pagamento>>(\n      getRepositoryToken(Pagamento),\n    );\n    comprovanteRepository = module.get<Repository<ComprovantePagamento>>(\n      getRepositoryToken(ComprovantePagamento),\n    );\n    confirmacaoRepository = module.get<Repository<ConfirmacaoRecebimento>>(\n      getRepositoryToken(ConfirmacaoRecebimento),\n    );\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('obterMetricasVolume', () => {\n    it('deve retornar métricas de volume de pagamentos', async () => {\n      // Arrange\n      const mockMetricas = {\n        totalPagamentos: 100,\n        totalEmProcessamento: 20,\n        totalFinalizados: 70,\n        totalCancelados: 10,\n        totalValorPago: 50000,\n        mediaTempoProcessamento: 48, // horas\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalPagamentos: '100',\n        totalEmProcessamento: '20',\n        totalFinalizados: '70',\n        totalCancelados: '10',\n        totalValorPago: '50000.00',\n        mediaTempoProcessamento: '48.00',\n      });\n\n      // Act\n      const resultado = await service.obterMetricasVolume();\n\n      // Assert\n      expect(resultado).toEqual(mockMetricas);\n      expect(pagamentoRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por período quando especificado', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n\n      const mockMetricas = {\n        totalPagamentos: 50,\n        totalEmProcessamento: 10,\n        totalFinalizados: 35,\n        totalCancelados: 5,\n        totalValorPago: 25000,\n        mediaTempoProcessamento: 36, // horas\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalPagamentos: '50',\n        totalEmProcessamento: '10',\n        totalFinalizados: '35',\n        totalCancelados: '5',\n        totalValorPago: '25000.00',\n        mediaTempoProcessamento: '36.00',\n      });\n\n      // Act\n      const resultado = await service.obterMetricasVolume(dataInicio, dataFim);\n\n      // Assert\n      expect(resultado).toEqual(mockMetricas);\n      expect(mockQueryBuilder.where).toHaveBeenCalledWith(\n        'pagamento.dataCriacao >= :dataInicio',\n        { dataInicio },\n      );\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\n        'pagamento.dataCriacao <= :dataFim',\n        { dataFim },\n      );\n    });\n  });\n\n  describe('obterMetricasEficiencia', () => {\n    it('deve retornar métricas de eficiência do processamento de pagamentos', async () => {\n      // Arrange\n      const mockMetricas = {\n        tempoMedioPorStatus: [\n          { status: StatusPagamentoEnum.AGENDADO, tempoMedio: 24 }, // horas\n          { status: StatusPagamentoEnum.LIBERADO, tempoMedio: 48 }, // horas\n          { status: StatusPagamentoEnum.PAGO, tempoMedio: 72 }, // horas\n          { status: StatusPagamentoEnum.CONFIRMADO, tempoMedio: 96 }, // horas\n        ],\n        taxaConclusao: 0.7, // 70% dos pagamentos são concluídos\n        taxaCancelamento: 0.1, // 10% dos pagamentos são cancelados\n        tempoMedioTotal: 96, // horas do início ao fim do processo\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce([\n        { status: StatusPagamentoEnum.AGENDADO, tempoMedio: '24.00' },\n        { status: StatusPagamentoEnum.LIBERADO, tempoMedio: '48.00' },\n        { status: StatusPagamentoEnum.PAGO, tempoMedio: '72.00' },\n        { status: StatusPagamentoEnum.CONFIRMADO, tempoMedio: '96.00' },\n      ]);\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        taxaConclusao: '0.70',\n        taxaCancelamento: '0.10',\n        tempoMedioTotal: '96.00',\n      });\n\n      // Act\n      const resultado = await service.obterMetricasEficiencia();\n\n      // Assert\n      expect(resultado).toEqual(mockMetricas);\n      expect(pagamentoRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n      expect(mockQueryBuilder.groupBy).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por unidade quando especificado', async () => {\n      // Arrange\n      const unidadeId = 'unidade-id-1';\n\n      const mockTempoMedioPorStatus = [\n        { status: StatusPagamentoEnum.AGENDADO, tempoMedio: 24 },\n        { status: StatusPagamentoEnum.LIBERADO, tempoMedio: 48 },\n      ];\n\n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce(\n        mockTempoMedioPorStatus.map((item) => ({\n          status: item.status,\n          tempoMedio: item.tempoMedio.toString(),\n        })),\n      );\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        taxaConclusao: '0.75',\n        taxaCancelamento: '0.05',\n        tempoMedioTotal: '72.00',\n      });\n\n      // Act\n      const resultado = await service.obterMetricasEficiencia(\n        null,\n        null,\n        unidadeId,\n      );\n\n      // Assert\n      expect(resultado).toBeDefined();\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\n        'pagamento.unidadeId = :unidadeId',\n        { unidadeId },\n      );\n    });\n  });\n\n  describe('obterMetricasComprovantes', () => {\n    it('deve retornar métricas sobre os comprovantes de pagamento', async () => {\n      // Arrange\n      const mockMetricas = {\n        totalComprovantes: 80,\n        tempoMedioUpload: 36, // horas após pagamento\n        percentualPagamentosComComprovante: 0.8, // 80% dos pagamentos têm comprovante\n        tamanhoMedioArquivo: 1024, // KB\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalComprovantes: '80',\n        tempoMedioUpload: '36.00',\n        percentualPagamentosComComprovante: '0.80',\n        tamanhoMedioArquivo: '1024.00',\n      });\n\n      jest.spyOn(comprovanteRepository, 'count').mockResolvedValueOnce(80);\n\n      // Act\n      const resultado = await service.obterMetricasComprovantes();\n\n      // Assert\n      expect(resultado).toEqual(mockMetricas);\n      expect(comprovanteRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por método de pagamento quando especificado', async () => {\n      // Arrange\n      const metodoPagamento = MetodoPagamentoEnum.PIX;\n\n      const mockMetricas = {\n        totalComprovantes: 50,\n        tempoMedioUpload: 24, // horas após pagamento\n        percentualPagamentosComComprovante: 0.9, // 90% dos pagamentos PIX têm comprovante\n        tamanhoMedioArquivo: 800, // KB\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalComprovantes: '50',\n        tempoMedioUpload: '24.00',\n        percentualPagamentosComComprovante: '0.90',\n        tamanhoMedioArquivo: '800.00',\n      });\n\n      // Act\n      const resultado = await service.obterMetricasComprovantes(\n        null,\n        null,\n        metodoPagamento,\n      );\n\n      // Assert\n      expect(resultado).toEqual(mockMetricas);\n      expect(mockQueryBuilder.innerJoin).toHaveBeenCalled();\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\n        'p.metodoPagamento = :metodoPagamento',\n        { metodoPagamento },\n      );\n    });\n  });\n\n  describe('obterMetricasConfirmacoes', () => {\n    it('deve retornar métricas sobre as confirmações de recebimento', async () => {\n      // Arrange\n      const mockMetricas = {\n        totalConfirmacoes: 70,\n        tempoMedioConfirmacao: 72, // horas após pagamento\n        percentualPagamentosConfirmados: 0.7, // 70% dos pagamentos são confirmados pelo beneficiário\n        taxaConfirmacaoEspontanea: 0.6, // 60% das confirmações são espontâneas\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalConfirmacoes: '70',\n        tempoMedioConfirmacao: '72.00',\n        percentualPagamentosConfirmados: '0.70',\n        taxaConfirmacaoEspontanea: '0.60',\n      });\n\n      jest.spyOn(confirmacaoRepository, 'count').mockResolvedValueOnce(70);\n\n      // Act\n      const resultado = await service.obterMetricasConfirmacoes();\n\n      // Assert\n      expect(resultado).toEqual(mockMetricas);\n      expect(confirmacaoRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n    });\n\n    it('deve filtrar por unidade quando especificado', async () => {\n      // Arrange\n      const unidadeId = 'unidade-id-1';\n\n      const mockMetricas = {\n        totalConfirmacoes: 40,\n        tempoMedioConfirmacao: 48, // horas após pagamento\n        percentualPagamentosConfirmados: 0.8, // 80% dos pagamentos da unidade são confirmados\n        taxaConfirmacaoEspontanea: 0.7, // 70% das confirmações da unidade são espontâneas\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        totalConfirmacoes: '40',\n        tempoMedioConfirmacao: '48.00',\n        percentualPagamentosConfirmados: '0.80',\n        taxaConfirmacaoEspontanea: '0.70',\n      });\n\n      // Act\n      const resultado = await service.obterMetricasConfirmacoes(\n        null,\n        null,\n        unidadeId,\n      );\n\n      // Assert\n      expect(resultado).toEqual(mockMetricas);\n      expect(mockQueryBuilder.innerJoin).toHaveBeenCalled();\n      expect(mockQueryBuilder.andWhere).toHaveBeenCalledWith(\n        'p.unidadeId = :unidadeId',\n        { unidadeId },\n      );\n    });\n  });\n\n  describe('obterMetricasTempoReais', () => {\n    it('deve retornar métricas de tempo real sobre pagamentos', async () => {\n      // Arrange\n      const mockMetricas = {\n        pagamentosUltimas24h: 10,\n        confirmacoesPendentes: 20,\n        valorLiberadoHoje: 5000,\n        pagamentosMaisRecentes: [\n          {\n            id: 'pagamento-id-1',\n            valor: 500,\n            status: StatusPagamentoEnum.PAGO,\n            dataAtualizacao: new Date(),\n          },\n          {\n            id: 'pagamento-id-2',\n            valor: 300,\n            status: StatusPagamentoEnum.LIBERADO,\n            dataAtualizacao: new Date(),\n          },\n        ],\n        taxaConfirmacaoHoje: 0.8, // 80% dos pagamentos de hoje foram confirmados\n      };\n\n      jest.spyOn(mockQueryBuilder, 'getRawOne').mockResolvedValueOnce({\n        pagamentosUltimas24h: '10',\n        confirmacoesPendentes: '20',\n        valorLiberadoHoje: '5000.00',\n        taxaConfirmacaoHoje: '0.80',\n      });\n\n      jest.spyOn(mockQueryBuilder, 'getRawMany').mockResolvedValueOnce([\n        {\n          id: 'pagamento-id-1',\n          valor: '500.00',\n          status: StatusPagamentoEnum.PAGO,\n          dataAtualizacao: new Date().toISOString(),\n        },\n        {\n          id: 'pagamento-id-2',\n          valor: '300.00',\n          status: StatusPagamentoEnum.LIBERADO,\n          dataAtualizacao: new Date().toISOString(),\n        },\n      ]);\n\n      // Act\n      const resultado = await service.obterMetricasTempoReais();\n\n      // Assert\n      expect(resultado).toMatchObject({\n        pagamentosUltimas24h: 10,\n        confirmacoesPendentes: 20,\n        valorLiberadoHoje: 5000,\n        taxaConfirmacaoHoje: 0.8,\n      });\n      expect(resultado.pagamentosMaisRecentes).toHaveLength(2);\n      expect(pagamentoRepository.createQueryBuilder).toHaveBeenCalled();\n      expect(mockQueryBuilder.select).toHaveBeenCalled();\n      expect(mockQueryBuilder.orderBy).toHaveBeenCalled();\n    });\n  });\n\n  describe('obterDashboard', () => {\n    it('deve retornar dados consolidados para dashboard', async () => {\n      // Arrange\n      const mockVolume = {\n        totalPagamentos: 100,\n        totalEmProcessamento: 20,\n        totalFinalizados: 70,\n        totalCancelados: 10,\n        totalValorPago: 50000,\n        mediaTempoProcessamento: 48,\n      };\n\n      const mockEficiencia = {\n        tempoMedioPorStatus: [\n          { status: StatusPagamentoEnum.AGENDADO, tempoMedio: 24 },\n        ],\n        taxaConclusao: 0.7,\n        taxaCancelamento: 0.1,\n        tempoMedioTotal: 96,\n      };\n\n      const mockTempoReal = {\n        pagamentosUltimas24h: 10,\n        confirmacoesPendentes: 20,\n        valorLiberadoHoje: 5000,\n        pagamentosMaisRecentes: [\n          {\n            id: 'pagamento-id-1',\n            valor: 500,\n            status: StatusPagamentoEnum.PAGO,\n            dataAtualizacao: new Date(),\n          },\n        ],\n        taxaConfirmacaoHoje: 0.8,\n      };\n\n      // Mock dos métodos do serviço\n      jest\n        .spyOn(service, 'obterMetricasVolume')\n        .mockResolvedValueOnce(mockVolume);\n      jest\n        .spyOn(service, 'obterMetricasEficiencia')\n        .mockResolvedValueOnce(mockEficiencia);\n      jest\n        .spyOn(service, 'obterMetricasTempoReais')\n        .mockResolvedValueOnce(mockTempoReal);\n\n      // Act\n      const resultado = await service.obterDashboard();\n\n      // Assert\n      expect(resultado).toEqual({\n        volume: mockVolume,\n        eficiencia: mockEficiencia,\n        tempoReal: mockTempoReal,\n      });\n      expect(service.obterMetricasVolume).toHaveBeenCalled();\n      expect(service.obterMetricasEficiencia).toHaveBeenCalled();\n      expect(service.obterMetricasTempoReais).toHaveBeenCalled();\n    });\n\n    it('deve aplicar filtros a todos os métodos quando especificados', async () => {\n      // Arrange\n      const dataInicio = new Date('2025-01-01');\n      const dataFim = new Date('2025-03-31');\n      const unidadeId = 'unidade-id-1';\n\n      // Mock dos métodos do serviço\n      jest\n        .spyOn(service, 'obterMetricasVolume')\n        .mockResolvedValueOnce({} as any);\n      jest\n        .spyOn(service, 'obterMetricasEficiencia')\n        .mockResolvedValueOnce({} as any);\n      jest\n        .spyOn(service, 'obterMetricasTempoReais')\n        .mockResolvedValueOnce({} as any);\n\n      // Act\n      await service.obterDashboard(dataInicio, dataFim, unidadeId);\n\n      // Assert\n      expect(service.obterMetricasVolume).toHaveBeenCalledWith(\n        dataInicio,\n        dataFim,\n        unidadeId,\n      );\n      expect(service.obterMetricasEficiencia).toHaveBeenCalledWith(\n        dataInicio,\n        dataFim,\n        unidadeId,\n      );\n      expect(service.obterMetricasTempoReais).toHaveBeenCalledWith(unidadeId);\n    });\n  });\n});\n"],"version":3}