{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\controllers\\workflow-solicitacao.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\controllers\\workflow-solicitacao.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Param,\n  ParseUUIDPipe,\n  Body,\n  UseGuards,\n  Req,\n  Get,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { ScopeType } from '../../../entities/user-permission.entity';\nimport {\n  WorkflowSolicitacaoService,\n  ResultadoTransicaoEstado,\n} from '../services/workflow-solicitacao.service';\nimport { StatusSolicitacao } from '../../../entities';\nimport { UpdateStatusSolicitacaoDto } from '../dto/update-status-solicitacao.dto';\nimport {\n  ObservacaoTransicaoDto,\n  AprovacaoSolicitacaoDto,\n} from '../dto/observacao-transicao.dto';\n\n/**\n * Controller de Workflow de Solicitação\n *\n * Responsável por expor os endpoints de gerenciamento do workflow de solicitações,\n * permitindo a transição entre estados.\n */\n@ApiTags('Solicitação')\n@Controller('solicitacao/workflow')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class WorkflowSolicitacaoController {\n  constructor(private readonly workflowService: WorkflowSolicitacaoService) {}\n\n  /**\n   * Obtém os estados possíveis para uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @returns Lista de estados possíveis\n   */\n  @Get(':solicitacaoId/estados-possiveis')\n  @RequiresPermission({ permissionName: 'solicitacao.visualizar' })\n  @ApiOperation({\n    summary: 'Obtém os estados possíveis para uma solicitação',\n    description:\n      'Retorna a lista de estados para os quais a solicitação pode transicionar.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de estados possíveis retornada com sucesso',\n  })\n  async getEstadosPossiveis(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n  ): Promise<StatusSolicitacao[]> {\n    return this.workflowService.getEstadosPossiveis(solicitacaoId);\n  }\n\n  /**\n   * Submete um rascunho de solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/submeter')\n  @RequiresPermission({\n    permissionName: 'solicitacao.submeter',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Submete um rascunho de solicitação',\n    description: 'Altera o estado de uma solicitação de RASCUNHO para ABERTA.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Rascunho submetido com sucesso',\n  })\n  async submeterRascunho(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.submeterRascunho(solicitacaoId, req.user.id);\n  }\n\n  /**\n   * Envia uma solicitação para análise\n   * @param solicitacaoId ID da solicitação\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/enviar-para-analise')\n  @RequiresPermission({\n    permissionName: 'solicitacao.enviar-para-analise',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Envia uma solicitação para análise',\n    description:\n      'Altera o estado de uma solicitação de PENDENTE para EM_ANALISE.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação enviada para análise com sucesso',\n  })\n  async enviarParaAnalise(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.enviarParaAnalise(solicitacaoId, req.user.id);\n  }\n\n  /**\n   * Inicia a análise de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/iniciar-analise')\n  @RequiresPermission({\n    permissionName: 'solicitacao.analisar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Inicia a análise de uma solicitação',\n    description:\n      'Altera o estado de uma solicitação de PENDENTE para EM_ANALISE.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Análise iniciada com sucesso',\n  })\n  async iniciarAnalise(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.iniciarAnalise(solicitacaoId, req.user.id);\n  }\n\n  /**\n   * Aprova uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param body Corpo da requisição\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/aprovar')\n  @RequiresPermission({\n    permissionName: 'solicitacao.aprovar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Aprova uma solicitação',\n    description:\n      'Altera o estado de uma solicitação de EM_ANALISE para APROVADA.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação aprovada com sucesso',\n  })\n  async aprovarSolicitacao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Body() body: AprovacaoSolicitacaoDto,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.aprovarSolicitacao(\n      solicitacaoId,\n      req.user.id,\n      body.observacao ?? '',\n      body.parecer_semtas,\n    );\n  }\n\n  /**\n   * Libera uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/liberar')\n  @RequiresPermission({\n    permissionName: 'solicitacao.liberar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Libera uma solicitação',\n    description:\n      'Altera o estado de uma solicitação de APROVADA para LIBERADA.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação liberada com sucesso',\n  })\n  async liberarSolicitacao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.liberarSolicitacao(solicitacaoId, req.user.id);\n  }\n\n  /**\n   * Rejeita uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param body Corpo da requisição\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/rejeitar')\n  @RequiresPermission({\n    permissionName: 'solicitacao.rejeitar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Rejeita uma solicitação',\n    description:\n      'Altera o estado de uma solicitação de EM_ANALISE para INDEFERIDA.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação rejeitada com sucesso',\n  })\n  async rejeitarSolicitacao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Body() body: ObservacaoTransicaoDto,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.rejeitarSolicitacao(\n      solicitacaoId,\n      req.user.id,\n      body.observacao ?? '',\n    );\n  }\n\n  /**\n   * Cancela uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param body Corpo da requisição\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/cancelar')\n  @RequiresPermission({\n    permissionName: 'solicitacao.cancelar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Cancela uma solicitação',\n    description: 'Altera o estado de uma solicitação para CANCELADA.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação cancelada com sucesso',\n  })\n  async cancelarSolicitacao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Body() body: ObservacaoTransicaoDto,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.cancelarSolicitacao(\n      solicitacaoId,\n      req.user.id,\n      body.observacao ?? '',\n    );\n  }\n\n  /**\n   * Inicia o processamento de uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/iniciar-processamento')\n  @RequiresPermission({\n    permissionName: 'solicitacao.processar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Inicia o processamento de uma solicitação',\n    description:\n      'Altera o estado de uma solicitação de LIBERADA para EM_PROCESSAMENTO.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Processamento iniciado com sucesso',\n  })\n  async iniciarProcessamento(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.iniciarProcessamento(\n      solicitacaoId,\n      req.user.id,\n    );\n  }\n\n  /**\n   * Conclui uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/concluir')\n  @RequiresPermission({\n    permissionName: 'solicitacao.concluir',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Conclui uma solicitação',\n    description:\n      'Altera o estado de uma solicitação de EM_PROCESSAMENTO para CONCLUIDA.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação concluída com sucesso',\n  })\n  async concluirSolicitacao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.concluirSolicitacao(solicitacaoId, req.user.id);\n  }\n\n  /**\n   * Arquiva uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/arquivar')\n  @RequiresPermission({\n    permissionName: 'solicitacao.arquivar',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Arquiva uma solicitação',\n    description: 'Altera o estado de uma solicitação para ARQUIVADA.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação arquivada com sucesso',\n  })\n  async arquivarSolicitacao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.arquivarSolicitacao(solicitacaoId, req.user.id);\n  }\n\n  /**\n   * Realiza uma transição de estado genérica\n   * @param solicitacaoId ID da solicitação\n   * @param novoEstado Novo estado desejado\n   * @param body Corpo da requisição\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/transicao/:novoEstado')\n  @RequiresPermission({\n    permissionName: 'solicitacao.transicao-manual',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Realiza uma transição de estado genérica',\n    description:\n      'Permite a transição manual entre estados, desde que seja uma transição permitida.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Transição realizada com sucesso',\n  })\n  async realizarTransicao(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Param('novoEstado') novoEstado: StatusSolicitacao,\n    @Body() body: ObservacaoTransicaoDto,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.realizarTransicao(\n      solicitacaoId,\n      novoEstado,\n      req.user.id,\n      body.observacao,\n    );\n  }\n\n  /**\n   * Atualiza o status de uma solicitação com informações adicionais para conformidade\n   * @param solicitacaoId ID da solicitação\n   * @param updateStatusDto DTO com informações de atualização\n   * @param req Requisição\n   * @returns Resultado da transição\n   */\n  @Post(':solicitacaoId/atualizar-status')\n  @RequiresPermission({\n    permissionName: 'solicitacao.atualizar-status',\n    scopeType: ScopeType.UNIT,\n    scopeIdExpression: 'solicitacao.unidadeId',\n  })\n  @ApiOperation({\n    summary: 'Atualiza o status de uma solicitação',\n    description:\n      'Permite a atualização do status de uma solicitação com informações adicionais para conformidade com a API.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Status atualizado com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        sucesso: { type: 'boolean' },\n        mensagem: { type: 'string' },\n        status_anterior: {\n          type: 'string',\n          enum: Object.values(StatusSolicitacao),\n        },\n        status_atual: {\n          type: 'string',\n          enum: Object.values(StatusSolicitacao),\n        },\n      },\n    },\n  })\n  @HttpCode(HttpStatus.OK)\n  async atualizarStatus(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Body() updateStatusDto: UpdateStatusSolicitacaoDto,\n    @Req() req: any,\n  ): Promise<ResultadoTransicaoEstado> {\n    return this.workflowService.atualizarStatus(\n      solicitacaoId,\n      updateStatusDto.novo_status,\n      req.user.id,\n      {\n        observacao: updateStatusDto.observacao,\n        processo_judicial_id: updateStatusDto.processo_judicial_id,\n        determinacao_judicial_id: updateStatusDto.determinacao_judicial_id,\n        justificativa: updateStatusDto.justificativa,\n      },\n    );\n  }\n}\n"],"version":3}