{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\dtos\\auth-register-input.dto.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\dtos\\auth-register-input.dto.ts"],"sourcesContent":["import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  Matches,\n  Validate,\n  IsArray,\n  ArrayMinSize,\n  ArrayMaxSize,\n  IsBoolean,\n  IsOptional,\n} from 'class-validator';\nimport { IsCPF, IsTelefone } from '../../shared/validators/br-validators';\nimport { Role } from '../../enums/role.enum';\n\n/**\n * DTO para registro de novo usuário\n */\nexport class RegisterInput {\n  @ApiProperty({\n    description: 'Nome completo do usuário',\n    example: 'João da Silva',\n  })\n  @IsNotEmpty({ message: 'O nome é obrigatório' })\n  @MaxLength(100, { message: 'O nome deve ter no máximo 100 caracteres' })\n  @IsString({ message: 'O nome deve ser uma string' })\n  name: string;\n\n  @ApiProperty({\n    description: 'Nome de usuário único para login',\n    example: 'joao.silva',\n  })\n  @IsNotEmpty({ message: 'O nome de usuário é obrigatório' })\n  @MaxLength(200, {\n    message: 'O nome de usuário deve ter no máximo 200 caracteres',\n  })\n  @IsString({ message: 'O nome de usuário deve ser uma string' })\n  username: string;\n\n  @ApiProperty({\n    description: 'Senha do usuário (mínimo 6 caracteres)',\n    example: 'Senha@123',\n  })\n  @IsNotEmpty({ message: 'A senha é obrigatória' })\n  @Length(6, 100, {\n    message: 'A senha deve ter entre 6 e 100 caracteres',\n  })\n  @IsString({ message: 'A senha deve ser uma string' })\n  password: string;\n\n  @ApiProperty({\n    description: 'E-mail do usuário',\n    example: 'joao.silva@example.com',\n  })\n  @IsNotEmpty({ message: 'O e-mail é obrigatório' })\n  @IsEmail({}, { message: 'Informe um endereço de e-mail válido' })\n  @MaxLength(100, { message: 'O e-mail deve ter no máximo 100 caracteres' })\n  email: string;\n\n  @ApiProperty({\n    description: 'Lista de papéis (roles) do usuário',\n    example: [Role.TECNICO],\n    default: [Role.TECNICO],\n  })\n  @IsArray({ message: 'Os papéis devem ser fornecidos como um array' })\n  @ArrayMinSize(1, { message: 'Pelo menos um papel deve ser fornecido' })\n  @ArrayMaxSize(5, { message: 'Máximo de 5 papéis permitidos' })\n  roles: Role[] = [Role.TECNICO];\n\n  @ApiPropertyOptional({\n    description: 'Indica se a conta está desativada',\n    example: false,\n    default: false,\n  })\n  @IsBoolean({ message: 'O status da conta deve ser um valor booleano' })\n  @IsOptional()\n  isAccountDisabled: boolean = false;\n\n  @ApiProperty({\n    example: '123.456.789-00',\n    description: 'CPF do usuário (formato: 123.456.789-00)',\n  })\n  @IsNotEmpty({ message: 'O CPF é obrigatório' })\n  @IsString({ message: 'O CPF deve ser uma string' })\n  @Matches(/^\\d{3}\\.\\d{3}\\.\\d{3}\\-\\d{2}$/, {\n    message: 'Formato de CPF inválido. Use o formato: 123.456.789-00',\n  })\n  @Validate(IsCPF, {\n    message: 'CPF inválido ou não existe',\n  })\n  cpf: string;\n\n  @ApiProperty({\n    example: '(84) 98765-4321',\n    description: 'Telefone do usuário com DDD (formato: (XX) XXXXX-XXXX)',\n  })\n  @IsNotEmpty({ message: 'O telefone é obrigatório' })\n  @IsString({ message: 'O telefone deve ser uma string' })\n  @Matches(/\\(\\d{2}\\)\\s\\d{4,5}-\\d{4}$/, {\n    message:\n      'Formato de telefone inválido. Use: (XX) XXXX-XXXX para fixo ou (XX) XXXXX-XXXX para celular',\n  })\n  @Validate(IsTelefone, { message: '' })\n  telefone: string;\n\n  @ApiProperty({\n    example: '12345',\n    description: 'Número de matrícula do usuário (5 a 10 dígitos)',\n  })\n  @IsNotEmpty({ message: 'O número de matrícula é obrigatório' })\n  @IsString({ message: 'A matrícula deve ser uma string' })\n  @Matches(/^[0-9]{5,10}$/, {\n    message:\n      'A matrícula deve conter apenas números e ter entre 5 e 10 dígitos',\n  })\n  matricula: string;\n}\n"],"version":3}