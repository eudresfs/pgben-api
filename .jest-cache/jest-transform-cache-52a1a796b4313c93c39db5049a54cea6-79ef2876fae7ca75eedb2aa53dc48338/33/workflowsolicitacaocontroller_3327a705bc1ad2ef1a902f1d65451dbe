0136c7f9872fa9f510fac6d420fb0542
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowSolicitacaoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const workflow_solicitacao_service_1 = require("../services/workflow-solicitacao.service");
const entities_1 = require("../../../entities");
const update_status_solicitacao_dto_1 = require("../dto/update-status-solicitacao.dto");
const observacao_transicao_dto_1 = require("../dto/observacao-transicao.dto");
/**
 * Controller de Workflow de Solicitação
 *
 * Responsável por expor os endpoints de gerenciamento do workflow de solicitações,
 * permitindo a transição entre estados.
 */
let WorkflowSolicitacaoController = class WorkflowSolicitacaoController {
    workflowService;
    constructor(workflowService) {
        this.workflowService = workflowService;
    }
    /**
     * Obtém os estados possíveis para uma solicitação
     * @param solicitacaoId ID da solicitação
     * @returns Lista de estados possíveis
     */
    async getEstadosPossiveis(solicitacaoId) {
        return this.workflowService.getEstadosPossiveis(solicitacaoId);
    }
    /**
     * Submete um rascunho de solicitação
     * @param solicitacaoId ID da solicitação
     * @param req Requisição
     * @returns Resultado da transição
     */
    async submeterRascunho(solicitacaoId, req) {
        return this.workflowService.submeterRascunho(solicitacaoId, req.user.id);
    }
    /**
     * Envia uma solicitação para análise
     * @param solicitacaoId ID da solicitação
     * @param req Requisição
     * @returns Resultado da transição
     */
    async enviarParaAnalise(solicitacaoId, req) {
        return this.workflowService.enviarParaAnalise(solicitacaoId, req.user.id);
    }
    /**
     * Inicia a análise de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param req Requisição
     * @returns Resultado da transição
     */
    async iniciarAnalise(solicitacaoId, req) {
        return this.workflowService.iniciarAnalise(solicitacaoId, req.user.id);
    }
    /**
     * Aprova uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param body Corpo da requisição
     * @param req Requisição
     * @returns Resultado da transição
     */
    async aprovarSolicitacao(solicitacaoId, body, req) {
        return this.workflowService.aprovarSolicitacao(solicitacaoId, req.user.id, body.observacao ?? '', body.parecer_semtas);
    }
    /**
     * Libera uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param req Requisição
     * @returns Resultado da transição
     */
    async liberarSolicitacao(solicitacaoId, req) {
        return this.workflowService.liberarSolicitacao(solicitacaoId, req.user.id);
    }
    /**
     * Rejeita uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param body Corpo da requisição
     * @param req Requisição
     * @returns Resultado da transição
     */
    async rejeitarSolicitacao(solicitacaoId, body, req) {
        return this.workflowService.rejeitarSolicitacao(solicitacaoId, req.user.id, body.observacao ?? '');
    }
    /**
     * Cancela uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param body Corpo da requisição
     * @param req Requisição
     * @returns Resultado da transição
     */
    async cancelarSolicitacao(solicitacaoId, body, req) {
        return this.workflowService.cancelarSolicitacao(solicitacaoId, req.user.id, body.observacao ?? '');
    }
    /**
     * Inicia o processamento de uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param req Requisição
     * @returns Resultado da transição
     */
    async iniciarProcessamento(solicitacaoId, req) {
        return this.workflowService.iniciarProcessamento(solicitacaoId, req.user.id);
    }
    /**
     * Conclui uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param req Requisição
     * @returns Resultado da transição
     */
    async concluirSolicitacao(solicitacaoId, req) {
        return this.workflowService.concluirSolicitacao(solicitacaoId, req.user.id);
    }
    /**
     * Arquiva uma solicitação
     * @param solicitacaoId ID da solicitação
     * @param req Requisição
     * @returns Resultado da transição
     */
    async arquivarSolicitacao(solicitacaoId, req) {
        return this.workflowService.arquivarSolicitacao(solicitacaoId, req.user.id);
    }
    /**
     * Realiza uma transição de estado genérica
     * @param solicitacaoId ID da solicitação
     * @param novoEstado Novo estado desejado
     * @param body Corpo da requisição
     * @param req Requisição
     * @returns Resultado da transição
     */
    async realizarTransicao(solicitacaoId, novoEstado, body, req) {
        return this.workflowService.realizarTransicao(solicitacaoId, novoEstado, req.user.id, body.observacao);
    }
    /**
     * Atualiza o status de uma solicitação com informações adicionais para conformidade
     * @param solicitacaoId ID da solicitação
     * @param updateStatusDto DTO com informações de atualização
     * @param req Requisição
     * @returns Resultado da transição
     */
    async atualizarStatus(solicitacaoId, updateStatusDto, req) {
        return this.workflowService.atualizarStatus(solicitacaoId, updateStatusDto.novo_status, req.user.id, {
            observacao: updateStatusDto.observacao,
            processo_judicial_id: updateStatusDto.processo_judicial_id,
            determinacao_judicial_id: updateStatusDto.determinacao_judicial_id,
            justificativa: updateStatusDto.justificativa,
        });
    }
};
exports.WorkflowSolicitacaoController = WorkflowSolicitacaoController;
__decorate([
    (0, common_1.Get)(':solicitacaoId/estados-possiveis'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'solicitacao.visualizar' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Obtém os estados possíveis para uma solicitação',
        description: 'Retorna a lista de estados para os quais a solicitação pode transicionar.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de estados possíveis retornada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], WorkflowSolicitacaoController.prototype, "getEstadosPossiveis", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/submeter'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.submeter',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Submete um rascunho de solicitação',
        description: 'Altera o estado de uma solicitação de RASCUNHO para ABERTA.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Rascunho submetido com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], WorkflowSolicitacaoController.prototype, "submeterRascunho", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/enviar-para-analise'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.enviar-para-analise',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Envia uma solicitação para análise',
        description: 'Altera o estado de uma solicitação de PENDENTE para EM_ANALISE.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação enviada para análise com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], WorkflowSolicitacaoController.prototype, "enviarParaAnalise", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/iniciar-analise'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.analisar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Inicia a análise de uma solicitação',
        description: 'Altera o estado de uma solicitação de PENDENTE para EM_ANALISE.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Análise iniciada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], WorkflowSolicitacaoController.prototype, "iniciarAnalise", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/aprovar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.aprovar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Aprova uma solicitação',
        description: 'Altera o estado de uma solicitação de EM_ANALISE para APROVADA.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação aprovada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof observacao_transicao_dto_1.AprovacaoSolicitacaoDto !== "undefined" && observacao_transicao_dto_1.AprovacaoSolicitacaoDto) === "function" ? _f : Object, Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], WorkflowSolicitacaoController.prototype, "aprovarSolicitacao", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/liberar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.liberar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Libera uma solicitação',
        description: 'Altera o estado de uma solicitação de APROVADA para LIBERADA.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação liberada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], WorkflowSolicitacaoController.prototype, "liberarSolicitacao", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/rejeitar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.rejeitar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Rejeita uma solicitação',
        description: 'Altera o estado de uma solicitação de EM_ANALISE para INDEFERIDA.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação rejeitada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_j = typeof observacao_transicao_dto_1.ObservacaoTransicaoDto !== "undefined" && observacao_transicao_dto_1.ObservacaoTransicaoDto) === "function" ? _j : Object, Object]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], WorkflowSolicitacaoController.prototype, "rejeitarSolicitacao", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/cancelar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.cancelar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Cancela uma solicitação',
        description: 'Altera o estado de uma solicitação para CANCELADA.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação cancelada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_l = typeof observacao_transicao_dto_1.ObservacaoTransicaoDto !== "undefined" && observacao_transicao_dto_1.ObservacaoTransicaoDto) === "function" ? _l : Object, Object]),
    __metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], WorkflowSolicitacaoController.prototype, "cancelarSolicitacao", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/iniciar-processamento'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.processar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Inicia o processamento de uma solicitação',
        description: 'Altera o estado de uma solicitação de LIBERADA para EM_PROCESSAMENTO.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Processamento iniciado com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_o = typeof Promise !== "undefined" && Promise) === "function" ? _o : Object)
], WorkflowSolicitacaoController.prototype, "iniciarProcessamento", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/concluir'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.concluir',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Conclui uma solicitação',
        description: 'Altera o estado de uma solicitação de EM_PROCESSAMENTO para CONCLUIDA.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação concluída com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_p = typeof Promise !== "undefined" && Promise) === "function" ? _p : Object)
], WorkflowSolicitacaoController.prototype, "concluirSolicitacao", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/arquivar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.arquivar',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Arquiva uma solicitação',
        description: 'Altera o estado de uma solicitação para ARQUIVADA.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação arquivada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_q = typeof Promise !== "undefined" && Promise) === "function" ? _q : Object)
], WorkflowSolicitacaoController.prototype, "arquivarSolicitacao", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/transicao/:novoEstado'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.transicao-manual',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Realiza uma transição de estado genérica',
        description: 'Permite a transição manual entre estados, desde que seja uma transição permitida.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Transição realizada com sucesso',
    }),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Param)('novoEstado')),
    __param(2, (0, common_1.Body)()),
    __param(3, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_r = typeof entities_1.StatusSolicitacao !== "undefined" && entities_1.StatusSolicitacao) === "function" ? _r : Object, typeof (_s = typeof observacao_transicao_dto_1.ObservacaoTransicaoDto !== "undefined" && observacao_transicao_dto_1.ObservacaoTransicaoDto) === "function" ? _s : Object, Object]),
    __metadata("design:returntype", typeof (_t = typeof Promise !== "undefined" && Promise) === "function" ? _t : Object)
], WorkflowSolicitacaoController.prototype, "realizarTransicao", null);
__decorate([
    (0, common_1.Post)(':solicitacaoId/atualizar-status'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'solicitacao.atualizar-status',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'solicitacao.unidadeId',
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualiza o status de uma solicitação',
        description: 'Permite a atualização do status de uma solicitação com informações adicionais para conformidade com a API.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status atualizado com sucesso',
        schema: {
            type: 'object',
            properties: {
                sucesso: { type: 'boolean' },
                mensagem: { type: 'string' },
                status_anterior: {
                    type: 'string',
                    enum: Object.values(entities_1.StatusSolicitacao),
                },
                status_atual: {
                    type: 'string',
                    enum: Object.values(entities_1.StatusSolicitacao),
                },
            },
        },
    }),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_u = typeof update_status_solicitacao_dto_1.UpdateStatusSolicitacaoDto !== "undefined" && update_status_solicitacao_dto_1.UpdateStatusSolicitacaoDto) === "function" ? _u : Object, Object]),
    __metadata("design:returntype", typeof (_v = typeof Promise !== "undefined" && Promise) === "function" ? _v : Object)
], WorkflowSolicitacaoController.prototype, "atualizarStatus", null);
exports.WorkflowSolicitacaoController = WorkflowSolicitacaoController = __decorate([
    (0, swagger_1.ApiTags)('Solicitação'),
    (0, common_1.Controller)('solicitacao/workflow'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof workflow_solicitacao_service_1.WorkflowSolicitacaoService !== "undefined" && workflow_solicitacao_service_1.WorkflowSolicitacaoService) === "function" ? _a : Object])
], WorkflowSolicitacaoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,