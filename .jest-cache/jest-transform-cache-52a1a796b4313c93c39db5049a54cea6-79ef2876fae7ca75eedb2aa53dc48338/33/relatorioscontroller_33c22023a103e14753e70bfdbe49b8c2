e95bcd4d0e650e36c8411e5eee7d7a9b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelatoriosController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const relatorios_service_1 = require("../services/relatorios.service");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const express_1 = require("express");
const dto_1 = require("../dto");
/**
 * Controlador de Relatórios
 *
 * Responsável por gerenciar as rotas relacionadas aos relatórios
 * gerenciais e operacionais do sistema
 */
let RelatoriosController = class RelatoriosController {
    relatoriosService;
    constructor(relatoriosService) {
        this.relatoriosService = relatoriosService;
    }
    /**
     * Gera relatório de benefícios concedidos por período
     *
     * @param req Request Express
     * @param res Response Express
     * @param dto Parâmetros do relatório
     * @returns Stream do relatório no formato solicitado
     */
    async beneficiosConcedidos(req, res, dto) {
        if (!dto.data_inicio || !dto.data_fim) {
            throw new common_1.BadRequestException('Data inicial e final são obrigatórias');
        }
        const relatorio = await this.relatoriosService.gerarRelatorioBeneficiosConcedidos({
            dataInicio: dto.data_inicio,
            dataFim: dto.data_fim,
            unidadeId: dto.unidade_id,
            tipoBeneficioId: dto.tipo_beneficio_id,
            formato: dto.formato,
            user: req.user,
        });
        // Configurar cabeçalhos da resposta de acordo com o formato
        if (dto.formato === 'pdf') {
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', 'attachment; filename=beneficios-concedidos.pdf');
        }
        else if (dto.formato === 'excel') {
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', 'attachment; filename=beneficios-concedidos.xlsx');
        }
        else if (dto.formato === 'csv') {
            res.setHeader('Content-Type', 'text/csv');
            res.setHeader('Content-Disposition', 'attachment; filename=beneficios-concedidos.csv');
        }
        return res.send(relatorio);
    }
    /**
     * Gera relatório de solicitações por status
     *
     * @param req Request Express
     * @param res Response Express
     * @param dto Parâmetros do relatório
     * @returns Stream do relatório no formato solicitado
     */
    async solicitacoesPorStatus(req, res, dto) {
        if (!dto.data_inicio || !dto.data_fim) {
            throw new common_1.BadRequestException('Data inicial e final são obrigatórias');
        }
        const relatorio = await this.relatoriosService.gerarRelatorioSolicitacoesPorStatus({
            dataInicio: dto.data_inicio,
            dataFim: dto.data_fim,
            unidadeId: dto.unidade_id,
            formato: dto.formato,
            user: req.user,
        });
        // Configurar cabeçalhos da resposta de acordo com o formato
        if (dto.formato === 'pdf') {
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', 'attachment; filename=solicitacoes-por-status.pdf');
        }
        else if (dto.formato === 'excel') {
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', 'attachment; filename=solicitacoes-por-status.xlsx');
        }
        else if (dto.formato === 'csv') {
            res.setHeader('Content-Type', 'text/csv');
            res.setHeader('Content-Disposition', 'attachment; filename=solicitacoes-por-status.csv');
        }
        return res.send(relatorio);
    }
    /**
     * Gera relatório de atendimentos por unidade
     *
     * @param req Request Express
     * @param res Response Express
     * @param dto Parâmetros do relatório
     * @returns Stream do relatório no formato solicitado
     */
    async atendimentosPorUnidade(req, res, dto) {
        if (!dto.data_inicio || !dto.data_fim) {
            throw new common_1.BadRequestException('Data inicial e final são obrigatórias');
        }
        const relatorio = await this.relatoriosService.gerarRelatorioAtendimentosPorUnidade({
            dataInicio: dto.data_inicio,
            dataFim: dto.data_fim,
            formato: dto.formato,
            user: req.user,
        });
        // Configurar cabeçalhos da resposta de acordo com o formato
        if (dto.formato === 'pdf') {
            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', 'attachment; filename=atendimentos-por-unidade.pdf');
        }
        else if (dto.formato === 'excel') {
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            res.setHeader('Content-Disposition', 'attachment; filename=atendimentos-por-unidade.xlsx');
        }
        else if (dto.formato === 'csv') {
            res.setHeader('Content-Type', 'text/csv');
            res.setHeader('Content-Disposition', 'attachment; filename=atendimentos-por-unidade.csv');
        }
        return res.send(relatorio);
    }
};
exports.RelatoriosController = RelatoriosController;
__decorate([
    (0, common_1.Get)('beneficios-concedidos'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'relatorio.beneficios.concedidos',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'query.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Gera relatório de benefícios concedidos',
        description: 'Gera um relatório detalhado de benefícios concedidos no período especificado, com opções de filtro por unidade e tipo de benefício. O relatório pode ser gerado em formato PDF, Excel ou CSV.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)',
        content: {
            'application/pdf': {
                schema: { type: 'string', format: 'binary' },
            },
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
                schema: { type: 'string', format: 'binary' },
            },
            'text/csv': {
                schema: { type: 'string', format: 'binary' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Parâmetros inválidos - Data inicial e final são obrigatórias',
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado - Token JWT ausente ou inválido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Permissão negada - Usuário não possui permissão para acessar este relatório',
    }),
    (0, swagger_1.ApiResponse)({ status: 500, description: 'Erro interno do servidor' }),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __param(2, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _b : Object, typeof (_c = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _c : Object, typeof (_d = typeof dto_1.RelatorioBeneficiosDto !== "undefined" && dto_1.RelatorioBeneficiosDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], RelatoriosController.prototype, "beneficiosConcedidos", null);
__decorate([
    (0, common_1.Get)('solicitacoes-por-status'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'relatorio.solicitacoes.status',
        scopeType: user_permission_entity_1.ScopeType.UNIT,
        scopeIdExpression: 'query.unidade_id'
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Gera relatório de solicitações por status',
        description: 'Gera um relatório detalhado de solicitações agrupadas por status no período especificado, com opção de filtro por unidade. O relatório pode ser gerado em formato PDF, Excel ou CSV.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)',
        content: {
            'application/pdf': {
                schema: { type: 'string', format: 'binary' },
            },
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
                schema: { type: 'string', format: 'binary' },
            },
            'text/csv': {
                schema: { type: 'string', format: 'binary' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Parâmetros inválidos - Data inicial e final são obrigatórias',
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado - Token JWT ausente ou inválido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Permissão negada - Usuário não possui permissão para acessar este relatório',
    }),
    (0, swagger_1.ApiResponse)({ status: 500, description: 'Erro interno do servidor' }),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __param(2, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _e : Object, typeof (_f = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _f : Object, typeof (_g = typeof dto_1.RelatorioSolicitacoesDto !== "undefined" && dto_1.RelatorioSolicitacoesDto) === "function" ? _g : Object]),
    __metadata("design:returntype", Promise)
], RelatoriosController.prototype, "solicitacoesPorStatus", null);
__decorate([
    (0, common_1.Get)('atendimentos-por-unidade'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'relatorio.atendimentos.unidade',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL
    }),
    (0, swagger_1.ApiOperation)({
        summary: 'Gera relatório de atendimentos por unidade',
        description: 'Gera um relatório consolidado de atendimentos realizados por cada unidade no período especificado, incluindo contagem de solicitações por status. O relatório pode ser gerado em formato PDF, Excel ou CSV.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Relatório gerado com sucesso (PDF, Excel ou CSV, dependendo do formato solicitado)',
        content: {
            'application/pdf': {
                schema: { type: 'string', format: 'binary' },
            },
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': {
                schema: { type: 'string', format: 'binary' },
            },
            'text/csv': {
                schema: { type: 'string', format: 'binary' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Parâmetros inválidos - Data inicial e final são obrigatórias',
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Não autorizado - Token JWT ausente ou inválido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Permissão negada - Usuário não possui permissão para acessar este relatório',
    }),
    (0, swagger_1.ApiResponse)({ status: 500, description: 'Erro interno do servidor' }),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __param(2, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_h = typeof express_1.Request !== "undefined" && express_1.Request) === "function" ? _h : Object, typeof (_j = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _j : Object, typeof (_k = typeof dto_1.RelatorioAtendimentosDto !== "undefined" && dto_1.RelatorioAtendimentosDto) === "function" ? _k : Object]),
    __metadata("design:returntype", Promise)
], RelatoriosController.prototype, "atendimentosPorUnidade", null);
exports.RelatoriosController = RelatoriosController = __decorate([
    (0, swagger_1.ApiTags)('Relatórios'),
    (0, common_1.Controller)('relatorios'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof relatorios_service_1.RelatoriosService !== "undefined" && relatorios_service_1.RelatoriosService) === "function" ? _a : Object])
], RelatoriosController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,