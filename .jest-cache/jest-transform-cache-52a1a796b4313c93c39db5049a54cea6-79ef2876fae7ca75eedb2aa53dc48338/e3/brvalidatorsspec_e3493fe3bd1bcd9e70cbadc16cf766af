6a0f64c5c3603e304677b6a87b555a97
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const class_validator_1 = require("class-validator");
const class_transformer_1 = require("class-transformer");
const br_validators_1 = require("../../../src/shared/validators/br-validators");
// Classes de teste para cada validador
class TestCPF {
    cpf;
}
__decorate([
    (0, br_validators_1.IsCPF)(),
    __metadata("design:type", String)
], TestCPF.prototype, "cpf", void 0);
class TestNIS {
    nis;
}
__decorate([
    (0, br_validators_1.IsNIS)(),
    __metadata("design:type", String)
], TestNIS.prototype, "nis", void 0);
class TestCEP {
    cep;
}
__decorate([
    (0, br_validators_1.IsCEP)(),
    __metadata("design:type", String)
], TestCEP.prototype, "cep", void 0);
class TestTelefone {
    telefone;
}
__decorate([
    (0, br_validators_1.IsTelefone)(),
    __metadata("design:type", String)
], TestTelefone.prototype, "telefone", void 0);
describe('Validadores Brasileiros', () => {
    describe('CPF Validator', () => {
        it('deve validar CPFs corretos', async () => {
            const cpfsValidos = ['529.982.247-25', '52998224725', '111.444.777-35'];
            for (const cpf of cpfsValidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestCPF, { cpf });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBe(0);
            }
        });
        it('deve rejeitar CPFs inválidos', async () => {
            const cpfsInvalidos = [
                '111.111.111-11', // Dígitos repetidos
                '123.456.789-10', // Inválido
                '529.982.247-26', // Dígito verificador errado
                '123456', // Tamanho inválido
                'abc.def.ghi-jk', // Não numérico
                '', // Vazio
            ];
            for (const cpf of cpfsInvalidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestCPF, { cpf });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBeGreaterThan(0);
            }
        });
    });
    describe('NIS Validator', () => {
        it('deve validar NIS corretos', async () => {
            const nisValidos = ['170.82167.34-9', '1708216734-9', '17082167349'];
            for (const nis of nisValidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestNIS, { nis });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBe(0);
            }
        });
        it('deve rejeitar NIS inválidos', async () => {
            const nisInvalidos = [
                '111.11111.11-1', // Dígitos repetidos
                '123.45678.90-1', // Inválido
                '170.82167.34-8', // Dígito verificador errado
                '123456', // Tamanho inválido
                'abc.defgh.ij-k', // Não numérico
                '', // Vazio
            ];
            for (const nis of nisInvalidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestNIS, { nis });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBeGreaterThan(0);
            }
        });
    });
    describe('CEP Validator', () => {
        it('deve validar CEPs corretos', async () => {
            const cepsValidos = ['59000-000', '59000000', '01001-000'];
            for (const cep of cepsValidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestCEP, { cep });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBe(0);
            }
        });
        it('deve rejeitar CEPs inválidos', async () => {
            const cepsInvalidos = [
                '5900-000', // Tamanho inválido
                '590000000', // Tamanho inválido
                'abcde-fgh', // Não numérico
                '', // Vazio
            ];
            for (const cep of cepsInvalidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestCEP, { cep });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBeGreaterThan(0);
            }
        });
    });
    describe('Telefone Validator', () => {
        it('deve validar telefones corretos', async () => {
            const telefonesValidos = [
                '(84) 3222-5678', // Fixo com DDD
                '8432225678', // Fixo com DDD sem formatação
                '(84) 99999-8888', // Celular com DDD
                '84999998888', // Celular com DDD sem formatação
                '99999-8888', // Celular sem DDD (não recomendado, mas válido pelo validador)
                '999998888', // Celular sem DDD sem formatação
            ];
            for (const telefone of telefonesValidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestTelefone, { telefone });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBe(0);
            }
        });
        it('deve rejeitar telefones inválidos', async () => {
            const telefonesInvalidos = [
                '999-8888', // Tamanho inválido
                '999988', // Tamanho inválido
                '(84) 999-8888', // Formato inválido
                '(84) 9999-88888', // Tamanho inválido
                'abcde-fghij', // Não numérico
                '', // Vazio
            ];
            for (const telefone of telefonesInvalidos) {
                const testObj = (0, class_transformer_1.plainToInstance)(TestTelefone, { telefone });
                const errors = await (0, class_validator_1.validate)(testObj);
                expect(errors.length).toBeGreaterThan(0);
            }
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,