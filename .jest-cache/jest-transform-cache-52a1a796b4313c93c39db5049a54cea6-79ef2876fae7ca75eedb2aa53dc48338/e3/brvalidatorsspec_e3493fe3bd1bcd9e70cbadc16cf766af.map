{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\shared\\validators\\br-validators.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\shared\\validators\\br-validators.spec.ts"],"sourcesContent":["import { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\nimport {\n  IsCPF,\n  IsNIS,\n  IsCEP,\n  IsTelefone,\n} from '../../../src/shared/validators/br-validators';\n\n// Classes de teste para cada validador\nclass TestCPF {\n  @IsCPF()\n  cpf: string;\n}\n\nclass TestNIS {\n  @IsNIS()\n  nis: string;\n}\n\nclass TestCEP {\n  @IsCEP()\n  cep: string;\n}\n\nclass TestTelefone {\n  @IsTelefone()\n  telefone: string;\n}\n\ndescribe('Validadores Brasileiros', () => {\n  describe('CPF Validator', () => {\n    it('deve validar CPFs corretos', async () => {\n      const cpfsValidos = ['529.982.247-25', '52998224725', '111.444.777-35'];\n\n      for (const cpf of cpfsValidos) {\n        const testObj = plainToInstance(TestCPF, { cpf });\n        const errors = await validate(testObj);\n        expect(errors.length).toBe(0);\n      }\n    });\n\n    it('deve rejeitar CPFs inválidos', async () => {\n      const cpfsInvalidos = [\n        '111.111.111-11', // Dígitos repetidos\n        '123.456.789-10', // Inválido\n        '529.982.247-26', // Dígito verificador errado\n        '123456', // Tamanho inválido\n        'abc.def.ghi-jk', // Não numérico\n        '', // Vazio\n      ];\n\n      for (const cpf of cpfsInvalidos) {\n        const testObj = plainToInstance(TestCPF, { cpf });\n        const errors = await validate(testObj);\n        expect(errors.length).toBeGreaterThan(0);\n      }\n    });\n  });\n\n  describe('NIS Validator', () => {\n    it('deve validar NIS corretos', async () => {\n      const nisValidos = ['170.82167.34-9', '1708216734-9', '17082167349'];\n\n      for (const nis of nisValidos) {\n        const testObj = plainToInstance(TestNIS, { nis });\n        const errors = await validate(testObj);\n        expect(errors.length).toBe(0);\n      }\n    });\n\n    it('deve rejeitar NIS inválidos', async () => {\n      const nisInvalidos = [\n        '111.11111.11-1', // Dígitos repetidos\n        '123.45678.90-1', // Inválido\n        '170.82167.34-8', // Dígito verificador errado\n        '123456', // Tamanho inválido\n        'abc.defgh.ij-k', // Não numérico\n        '', // Vazio\n      ];\n\n      for (const nis of nisInvalidos) {\n        const testObj = plainToInstance(TestNIS, { nis });\n        const errors = await validate(testObj);\n        expect(errors.length).toBeGreaterThan(0);\n      }\n    });\n  });\n\n  describe('CEP Validator', () => {\n    it('deve validar CEPs corretos', async () => {\n      const cepsValidos = ['59000-000', '59000000', '01001-000'];\n\n      for (const cep of cepsValidos) {\n        const testObj = plainToInstance(TestCEP, { cep });\n        const errors = await validate(testObj);\n        expect(errors.length).toBe(0);\n      }\n    });\n\n    it('deve rejeitar CEPs inválidos', async () => {\n      const cepsInvalidos = [\n        '5900-000', // Tamanho inválido\n        '590000000', // Tamanho inválido\n        'abcde-fgh', // Não numérico\n        '', // Vazio\n      ];\n\n      for (const cep of cepsInvalidos) {\n        const testObj = plainToInstance(TestCEP, { cep });\n        const errors = await validate(testObj);\n        expect(errors.length).toBeGreaterThan(0);\n      }\n    });\n  });\n\n  describe('Telefone Validator', () => {\n    it('deve validar telefones corretos', async () => {\n      const telefonesValidos = [\n        '(84) 3222-5678', // Fixo com DDD\n        '8432225678', // Fixo com DDD sem formatação\n        '(84) 99999-8888', // Celular com DDD\n        '84999998888', // Celular com DDD sem formatação\n        '99999-8888', // Celular sem DDD (não recomendado, mas válido pelo validador)\n        '999998888', // Celular sem DDD sem formatação\n      ];\n\n      for (const telefone of telefonesValidos) {\n        const testObj = plainToInstance(TestTelefone, { telefone });\n        const errors = await validate(testObj);\n        expect(errors.length).toBe(0);\n      }\n    });\n\n    it('deve rejeitar telefones inválidos', async () => {\n      const telefonesInvalidos = [\n        '999-8888', // Tamanho inválido\n        '999988', // Tamanho inválido\n        '(84) 999-8888', // Formato inválido\n        '(84) 9999-88888', // Tamanho inválido\n        'abcde-fghij', // Não numérico\n        '', // Vazio\n      ];\n\n      for (const telefone of telefonesInvalidos) {\n        const testObj = plainToInstance(TestTelefone, { telefone });\n        const errors = await validate(testObj);\n        expect(errors.length).toBeGreaterThan(0);\n      }\n    });\n  });\n});\n"],"version":3}