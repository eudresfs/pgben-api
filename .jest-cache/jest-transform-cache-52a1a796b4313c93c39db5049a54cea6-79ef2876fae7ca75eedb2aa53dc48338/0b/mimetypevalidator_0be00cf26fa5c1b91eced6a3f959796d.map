{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\mime-type.validator.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\mime-type.validator.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport fileType from 'file-type';\nimport {\n  MIME_TYPE_CONFIGS,\n  BLOCKED_MIME_TYPES,\n  BLOCKED_EXTENSIONS,\n  SECURITY_CONFIG,\n  isMimeTypePermitido,\n  getMaxFileSize,\n  requiresEncryption,\n  allowsThumbnail,\n} from '../config/documento.config';\nimport * as crypto from 'crypto';\n\nexport interface MimeTypeValidationResult {\n  isValid: boolean;\n  detectedMimeType?: string;\n  declaredMimeType?: string;\n  fileExtension?: string;\n  fileSize?: number;\n  securityFlags?: SecurityFlags;\n  message?: string;\n}\n\nexport interface SecurityFlags {\n  isSuspicious: boolean;\n  hasEmbeddedContent: boolean;\n  exceedsMaxSize: boolean;\n  hasDangerousExtension: boolean;\n  isBlockedMimeType: boolean;\n  magicNumberMismatch: boolean;\n}\n\n@Injectable()\nexport class MimeTypeValidator {\n  /**\n   * Valida o tipo MIME de um arquivo com verificações de segurança avançadas\n   */\n  async validateMimeType(\n    buffer: Buffer,\n    declaredMimeType: string,\n    originalFilename: string,\n    fileSize: number,\n  ): Promise<MimeTypeValidationResult> {\n    try {\n      const fileExtension = this.extractFileExtension(originalFilename);\n      const securityFlags: SecurityFlags = {\n        isSuspicious: false,\n        hasEmbeddedContent: false,\n        exceedsMaxSize: false,\n        hasDangerousExtension: false,\n        isBlockedMimeType: false,\n        magicNumberMismatch: false,\n      };\n\n      // 1. Verificar extensão perigosa\n      if (BLOCKED_EXTENSIONS.includes(fileExtension)) {\n        securityFlags.hasDangerousExtension = true;\n        return {\n          isValid: false,\n          declaredMimeType,\n          fileExtension,\n          fileSize,\n          securityFlags,\n          message: `Extensão de arquivo não permitida: .${fileExtension}`,\n        };\n      }\n\n      // 2. Verificar tipo MIME bloqueado\n      if (BLOCKED_MIME_TYPES.includes(declaredMimeType)) {\n        securityFlags.isBlockedMimeType = true;\n        return {\n          isValid: false,\n          declaredMimeType,\n          fileExtension,\n          fileSize,\n          securityFlags,\n          message: `Tipo MIME bloqueado por motivos de segurança: ${declaredMimeType}`,\n        };\n      }\n\n      // 3. Detectar o tipo real do arquivo usando magic numbers\n      const fileTypeResult = await fileType.fromBuffer(buffer);\n\n      if (!fileTypeResult && SECURITY_CONFIG.VERIFY_MAGIC_NUMBERS) {\n        // Para alguns tipos como text/plain, file-type pode não detectar\n        if (declaredMimeType !== 'text/plain') {\n          return {\n            isValid: false,\n            declaredMimeType,\n            fileExtension,\n            fileSize,\n            securityFlags,\n            message: 'Não foi possível verificar a assinatura do arquivo',\n          };\n        }\n      }\n\n      const detectedMimeType = fileTypeResult?.mime || declaredMimeType;\n\n      // 4. Verificar se o tipo detectado está na lista de permitidos\n      if (!isMimeTypePermitido(detectedMimeType)) {\n        return {\n          isValid: false,\n          detectedMimeType,\n          declaredMimeType,\n          fileExtension,\n          fileSize,\n          securityFlags,\n          message: `Tipo de arquivo não permitido: ${detectedMimeType}`,\n        };\n      }\n\n      // 5. Verificar correspondência entre tipo declarado e detectado\n      if (fileTypeResult && declaredMimeType !== detectedMimeType) {\n        securityFlags.magicNumberMismatch = true;\n        return {\n          isValid: false,\n          detectedMimeType,\n          declaredMimeType,\n          fileExtension,\n          fileSize,\n          securityFlags,\n          message: `Tipo declarado (${declaredMimeType}) não corresponde ao tipo real (${detectedMimeType})`,\n        };\n      }\n\n      // 6. Verificar tamanho do arquivo\n      const maxSize = getMaxFileSize(detectedMimeType);\n      if (fileSize > maxSize) {\n        securityFlags.exceedsMaxSize = true;\n        return {\n          isValid: false,\n          detectedMimeType,\n          declaredMimeType,\n          fileExtension,\n          fileSize,\n          securityFlags,\n          message: `Arquivo excede o tamanho máximo permitido: ${fileSize} bytes > ${maxSize} bytes`,\n        };\n      }\n\n      // 7. Verificar tamanho global\n      if (fileSize > SECURITY_CONFIG.MAX_FILE_SIZE) {\n        securityFlags.exceedsMaxSize = true;\n        return {\n          isValid: false,\n          detectedMimeType,\n          declaredMimeType,\n          fileExtension,\n          fileSize,\n          securityFlags,\n          message: `Arquivo excede o tamanho máximo global: ${fileSize} bytes > ${SECURITY_CONFIG.MAX_FILE_SIZE} bytes`,\n        };\n      }\n\n      // 8. Verificações de conteúdo suspeito\n      if (SECURITY_CONFIG.SCAN_CONTENT) {\n        const contentAnalysis = this.analyzeFileContent(\n          buffer,\n          detectedMimeType,\n        );\n        if (contentAnalysis.isSuspicious) {\n          securityFlags.isSuspicious = true;\n          securityFlags.hasEmbeddedContent = contentAnalysis.hasEmbeddedContent;\n\n          if (SECURITY_CONFIG.QUARANTINE_SUSPICIOUS) {\n            return {\n              isValid: false,\n              detectedMimeType,\n              declaredMimeType,\n              fileExtension,\n              fileSize,\n              securityFlags,\n              message: `Arquivo contém conteúdo suspeito: ${contentAnalysis.reason}`,\n            };\n          }\n        }\n      }\n\n      return {\n        isValid: true,\n        detectedMimeType,\n        declaredMimeType,\n        fileExtension,\n        fileSize,\n        securityFlags,\n      };\n    } catch (error) {\n      return {\n        isValid: false,\n        declaredMimeType,\n        fileExtension: this.extractFileExtension(originalFilename),\n        fileSize,\n        message: `Erro na validação do tipo MIME: ${error.message}`,\n      };\n    }\n  }\n\n  /**\n   * Extrai a extensão do arquivo\n   */\n  private extractFileExtension(filename: string): string {\n    const parts = filename.toLowerCase().split('.');\n    return parts.length > 1 ? parts[parts.length - 1] : '';\n  }\n\n  /**\n   * Analisa o conteúdo do arquivo em busca de padrões suspeitos\n   */\n  private analyzeFileContent(\n    buffer: Buffer,\n    mimeType: string,\n  ): {\n    isSuspicious: boolean;\n    hasEmbeddedContent: boolean;\n    reason?: string;\n  } {\n    const content = buffer.toString('utf8', 0, Math.min(buffer.length, 1024)); // Primeiros 1KB\n\n    // Padrões suspeitos comuns\n    const suspiciousPatterns = [\n      /<script[^>]*>/i, // Tags de script\n      /javascript:/i, // URLs javascript\n      /vbscript:/i, // URLs vbscript\n      /on\\w+\\s*=/i, // Event handlers (onclick, onload, etc.)\n      /%3Cscript/i, // Script tags codificados\n      /\\x00/, // Null bytes\n      /\\\\x[0-9a-f]{2}/i, // Sequências de escape hexadecimal\n    ];\n\n    // Verificar padrões suspeitos\n    for (const pattern of suspiciousPatterns) {\n      if (pattern.test(content)) {\n        return {\n          isSuspicious: true,\n          hasEmbeddedContent: true,\n          reason: `Padrão suspeito detectado: ${pattern.source}`,\n        };\n      }\n    }\n\n    // Verificações específicas por tipo MIME\n    if (mimeType === 'application/pdf') {\n      // PDFs podem conter JavaScript\n      if (content.includes('/JavaScript') || content.includes('/JS')) {\n        return {\n          isSuspicious: true,\n          hasEmbeddedContent: true,\n          reason: 'PDF contém JavaScript incorporado',\n        };\n      }\n    }\n\n    // Verificar densidade de caracteres não-ASCII (possível ofuscação)\n    const nonAsciiCount = (content.match(/[\\x80-\\xFF]/g) || []).length;\n    const nonAsciiRatio = nonAsciiCount / content.length;\n\n    if (nonAsciiRatio > 0.3 && mimeType.startsWith('text/')) {\n      return {\n        isSuspicious: true,\n        hasEmbeddedContent: false,\n        reason: 'Alta densidade de caracteres não-ASCII em arquivo de texto',\n      };\n    }\n\n    return {\n      isSuspicious: false,\n      hasEmbeddedContent: false,\n    };\n  }\n\n  /**\n   * Gera hash do arquivo para detecção de duplicatas e verificação de integridade\n   */\n  generateFileHash(buffer: Buffer): string {\n    return crypto.createHash('sha256').update(buffer).digest('hex');\n  }\n\n  /**\n   * Verifica se o arquivo requer criptografia\n   */\n  requiresEncryption(mimeType: string): boolean {\n    return requiresEncryption(mimeType);\n  }\n\n  /**\n   * Verifica se é possível gerar thumbnail\n   */\n  allowsThumbnail(mimeType: string): boolean {\n    return allowsThumbnail(mimeType);\n  }\n}\n"],"version":3}