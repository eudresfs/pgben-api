d6de2a5196fe180dffb02b83da635da5
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequisitoDocumento = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const tipo_beneficio_entity_1 = require("./tipo-beneficio.entity");
const enums_1 = require("../enums");
let RequisitoDocumento = class RequisitoDocumento {
    id;
    tipo_beneficio_id;
    tipo_beneficio;
    tipo_documento;
    nome;
    obrigatorio;
    descricao;
    validacoes;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se o requisito foi criado recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se o requisito foi removido
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se o requisito está ativo
     */
    isAtivo() {
        return !this.removed_at;
    }
    /**
     * Verifica se é um documento obrigatório
     */
    isObrigatorio() {
        return this.obrigatorio;
    }
    /**
     * Verifica se é um documento opcional
     */
    isOpcional() {
        return !this.obrigatorio;
    }
    /**
     * Verifica se é documento de identificação
     */
    isDocumentoIdentificacao() {
        return this.tipo_documento === enums_1.TipoDocumentoEnum.RG ||
            this.tipo_documento === enums_1.TipoDocumentoEnum.CPF;
    }
    /**
     * Verifica se é documento de comprovação
     */
    isDocumentoComprovacao() {
        return this.tipo_documento === enums_1.TipoDocumentoEnum.COMPROVANTE_RESIDENCIA ||
            this.tipo_documento === enums_1.TipoDocumentoEnum.COMPROVANTE_RENDA;
    }
    /**
     * Verifica se é certidão
     */
    isCertidao() {
        return this.tipo_documento === enums_1.TipoDocumentoEnum.CERTIDAO_NASCIMENTO;
    }
    /**
     * Verifica se é documento médico
     */
    isDocumentoMedico() {
        return this.tipo_documento === enums_1.TipoDocumentoEnum.DECLARACAO_MEDICA;
    }
    /**
     * Verifica se é documento de moradia
     */
    isDocumentoMoradia() {
        return this.tipo_documento === enums_1.TipoDocumentoEnum.CONTRATO_ALUGUEL ||
            this.tipo_documento === enums_1.TipoDocumentoEnum.COMPROVANTE_RESIDENCIA;
    }
    /**
     * Obtém a descrição do tipo de documento
     */
    getDescricaoTipoDocumento() {
        const descricoes = {
            // Documentos de identificação
            [enums_1.TipoDocumentoEnum.CPF]: 'Cadastro de Pessoa Física (CPF)',
            [enums_1.TipoDocumentoEnum.RG]: 'Registro Geral (RG)',
            [enums_1.TipoDocumentoEnum.CNH]: 'Carteira Nacional de Habilitação (CNH)',
            [enums_1.TipoDocumentoEnum.PASSAPORTE]: 'Passaporte',
            // Certidões
            [enums_1.TipoDocumentoEnum.CERTIDAO_NASCIMENTO]: 'Certidão de Nascimento',
            [enums_1.TipoDocumentoEnum.CERTIDAO_CASAMENTO]: 'Certidão de Casamento',
            [enums_1.TipoDocumentoEnum.CERTIDAO_OBITO]: 'Certidão de Óbito',
            // Comprovantes básicos
            [enums_1.TipoDocumentoEnum.COMPROVANTE_RESIDENCIA]: 'Comprovante de Residência',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_RENDA]: 'Comprovante de Renda',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_ESCOLARIDADE]: 'Comprovante de Escolaridade',
            // Documentos médicos e de saúde
            [enums_1.TipoDocumentoEnum.DECLARACAO_MEDICA]: 'Declaração Médica',
            [enums_1.TipoDocumentoEnum.CARTAO_VACINA]: 'Cartão de Vacinação',
            [enums_1.TipoDocumentoEnum.CARTAO_SUS]: 'Cartão do SUS',
            [enums_1.TipoDocumentoEnum.LAUDO_MEDICO]: 'Laudo Médico',
            [enums_1.TipoDocumentoEnum.ATESTADO_MEDICO]: 'Atestado Médico',
            [enums_1.TipoDocumentoEnum.EXAME_PRE_NATAL]: 'Exame Pré-Natal',
            // Documentos habitacionais
            [enums_1.TipoDocumentoEnum.CONTRATO_ALUGUEL]: 'Contrato de Aluguel',
            [enums_1.TipoDocumentoEnum.ESCRITURA_IMOVEL]: 'Escritura do Imóvel',
            [enums_1.TipoDocumentoEnum.IPTU]: 'IPTU',
            [enums_1.TipoDocumentoEnum.CONTA_AGUA]: 'Conta de Água',
            [enums_1.TipoDocumentoEnum.CONTA_LUZ]: 'Conta de Luz',
            [enums_1.TipoDocumentoEnum.CONTA_TELEFONE]: 'Conta de Telefone',
            // Documentos trabalhistas e previdenciários
            [enums_1.TipoDocumentoEnum.CARTEIRA_TRABALHO]: 'Carteira de Trabalho',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_DESEMPREGO]: 'Comprovante de Desemprego',
            [enums_1.TipoDocumentoEnum.EXTRATO_FGTS]: 'Extrato do FGTS',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_APOSENTADORIA]: 'Comprovante de Aposentadoria',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_PENSAO]: 'Comprovante de Pensão',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_BENEFICIO_INSS]: 'Comprovante de Benefício INSS',
            // Documentos bancários
            [enums_1.TipoDocumentoEnum.EXTRATO_BANCARIO]: 'Extrato Bancário',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_PIX]: 'Comprovante PIX',
            [enums_1.TipoDocumentoEnum.DADOS_BANCARIOS]: 'Dados Bancários',
            // Documentos familiares e sociais
            [enums_1.TipoDocumentoEnum.DECLARACAO_COMPOSICAO_FAMILIAR]: 'Declaração de Composição Familiar',
            [enums_1.TipoDocumentoEnum.DECLARACAO_UNIAO_ESTAVEL]: 'Declaração de União Estável',
            [enums_1.TipoDocumentoEnum.GUARDA_MENOR]: 'Termo de Guarda de Menor',
            [enums_1.TipoDocumentoEnum.TUTELA]: 'Termo de Tutela',
            // Documentos específicos para benefícios
            [enums_1.TipoDocumentoEnum.BOLETIM_OCORRENCIA]: 'Boletim de Ocorrência',
            [enums_1.TipoDocumentoEnum.MEDIDA_PROTETIVA]: 'Medida Protetiva',
            [enums_1.TipoDocumentoEnum.TERMO_ACOLHIMENTO]: 'Termo de Acolhimento',
            [enums_1.TipoDocumentoEnum.RELATORIO_SOCIAL]: 'Relatório Social',
            [enums_1.TipoDocumentoEnum.PARECER_TECNICO]: 'Parecer Técnico',
            // Documentos de programas sociais
            [enums_1.TipoDocumentoEnum.CARTAO_CADUNICO]: 'Cartão CadÚnico',
            [enums_1.TipoDocumentoEnum.FOLHA_RESUMO_CADUNICO]: 'Folha Resumo CadÚnico',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_BOLSA_FAMILIA]: 'Comprovante Bolsa Família',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_BPC]: 'Comprovante BPC',
            // Documentos educacionais
            [enums_1.TipoDocumentoEnum.DECLARACAO_ESCOLAR]: 'Declaração Escolar',
            [enums_1.TipoDocumentoEnum.HISTORICO_ESCOLAR]: 'Histórico Escolar',
            [enums_1.TipoDocumentoEnum.MATRICULA_ESCOLAR]: 'Comprovante de Matrícula Escolar',
            // Documentos específicos para mortalidade
            [enums_1.TipoDocumentoEnum.DECLARACAO_OBITO]: 'Declaração de Óbito',
            [enums_1.TipoDocumentoEnum.AUTORIZACAO_SEPULTAMENTO]: 'Autorização de Sepultamento',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_PARENTESCO]: 'Comprovante de Parentesco',
            // Documentos específicos para natalidade
            [enums_1.TipoDocumentoEnum.CARTAO_PRE_NATAL]: 'Cartão Pré-Natal',
            [enums_1.TipoDocumentoEnum.DECLARACAO_NASCIDO_VIVO]: 'Declaração de Nascido Vivo',
            [enums_1.TipoDocumentoEnum.COMPROVANTE_GESTACAO]: 'Comprovante de Gestação',
            // Documentos específicos para passagens
            [enums_1.TipoDocumentoEnum.COMPROVANTE_VIAGEM]: 'Comprovante de Viagem',
            [enums_1.TipoDocumentoEnum.AUTORIZACAO_VIAGEM]: 'Autorização de Viagem',
            [enums_1.TipoDocumentoEnum.BILHETE_PASSAGEM]: 'Bilhete de Passagem',
            // Documentos diversos
            [enums_1.TipoDocumentoEnum.PROCURACAO]: 'Procuração',
            [enums_1.TipoDocumentoEnum.DECLARACAO_HIPOSSUFICIENCIA]: 'Declaração de Hipossuficiência',
            [enums_1.TipoDocumentoEnum.TERMO_RESPONSABILIDADE]: 'Termo de Responsabilidade',
            [enums_1.TipoDocumentoEnum.FOTO_3X4]: 'Foto 3x4',
            [enums_1.TipoDocumentoEnum.OUTRO]: 'Outro Documento',
        };
        return descricoes[this.tipo_documento] || 'Documento não identificado';
    }
    /**
     * Verifica se tem validações definidas
     */
    temValidacoes() {
        return !!this.validacoes && Object.keys(this.validacoes).length > 0;
    }
    /**
     * Verifica se tem validação de formato
     */
    temValidacaoFormato() {
        return this.temValidacoes() &&
            !!this.validacoes.formato &&
            this.validacoes.formato.length > 0;
    }
    /**
     * Verifica se tem validação de tamanho
     */
    temValidacaoTamanho() {
        return this.temValidacoes() &&
            this.validacoes.tamanho_maximo !== undefined &&
            this.validacoes.tamanho_maximo !== null;
    }
    /**
     * Verifica se tem validação de validade
     */
    temValidacaoValidade() {
        return this.temValidacoes() &&
            this.validacoes.validade_maxima !== undefined &&
            this.validacoes.validade_maxima !== null;
    }
    /**
     * Obtém os formatos aceitos
     */
    getFormatosAceitos() {
        if (!this.temValidacaoFormato())
            return [];
        return this.validacoes.formato || [];
    }
    /**
     * Obtém o tamanho máximo em MB
     */
    getTamanhoMaximo() {
        if (!this.temValidacaoTamanho())
            return null;
        return this.validacoes.tamanho_maximo ?? null;
    }
    /**
     * Obtém a validade máxima em dias
     */
    getValidadeMaxima() {
        if (!this.temValidacaoValidade())
            return null;
        return this.validacoes.validade_maxima ?? null;
    }
    /**
     * Obtém o tamanho máximo formatado
     */
    getTamanhoMaximoFormatado() {
        const tamanho = this.getTamanhoMaximo();
        if (!tamanho)
            return 'Sem limite de tamanho';
        if (tamanho < 1) {
            return `${(tamanho * 1024).toFixed(0)} KB`;
        }
        else {
            return `${tamanho} MB`;
        }
    }
    /**
     * Obtém a validade máxima formatada
     */
    getValidadeMaximaFormatada() {
        const validade = this.getValidadeMaxima();
        if (!validade)
            return 'Sem limite de validade';
        if (validade < 30) {
            return `${validade} dia(s)`;
        }
        else if (validade < 365) {
            const meses = Math.floor(validade / 30);
            return `${meses} mês(es)`;
        }
        else {
            const anos = Math.floor(validade / 365);
            return `${anos} ano(s)`;
        }
    }
    /**
     * Verifica se um formato é aceito
     */
    formatoEhAceito(formato) {
        if (!this.temValidacaoFormato())
            return true;
        return this.getFormatosAceitos().includes(formato.toLowerCase());
    }
    /**
     * Verifica se um tamanho é válido (em bytes)
     */
    tamanhoEhValido(tamanhoBytes) {
        const tamanhoMaximo = this.getTamanhoMaximo();
        if (!tamanhoMaximo)
            return true;
        const tamanhoMaximoBytes = tamanhoMaximo * 1024 * 1024; // Converte MB para bytes
        return tamanhoBytes <= tamanhoMaximoBytes;
    }
    /**
     * Verifica se uma data de emissão é válida
     */
    dataEmissaoEhValida(dataEmissao) {
        const validadeMaxima = this.getValidadeMaxima();
        if (!validadeMaxima)
            return true;
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - dataEmissao.getTime());
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays <= validadeMaxima;
    }
    /**
     * Verifica se pertence a um tipo de benefício
     */
    pertenceAoTipoBeneficio(tipoBeneficioId) {
        return this.tipo_beneficio_id === tipoBeneficioId;
    }
    /**
     * Obtém um resumo do requisito
     */
    getSummary() {
        const descricao = this.getDescricaoTipoDocumento();
        const obrigatoriedade = this.isObrigatorio() ? 'Obrigatório' : 'Opcional';
        return `${descricao} - ${obrigatoriedade}`;
    }
    /**
     * Gera uma chave única para o requisito
     */
    getUniqueKey() {
        return `requisito_${this.tipo_beneficio_id}_${this.tipo_documento}`;
    }
    /**
     * Verifica se o requisito é consistente
     */
    isConsistente() {
        // Verifica se tem tipo de benefício
        if (!this.tipo_beneficio_id)
            return false;
        // Verifica se tem tipo de documento válido
        if (!Object.values(enums_1.TipoDocumentoEnum).includes(this.tipo_documento))
            return false;
        // Verifica validações se existirem
        if (this.temValidacoes()) {
            if (this.temValidacaoTamanho() && this.validacoes.tamanho_maximo !== undefined && this.validacoes.tamanho_maximo <= 0) {
                return false;
            }
            if (this.temValidacaoValidade() && this.validacoes.validade_maxima !== undefined && this.validacoes.validade_maxima <= 0) {
                return false;
            }
        }
        return true;
    }
    /**
     * Verifica se pode ser removido
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        // Pode implementar lógica adicional aqui
        // Por exemplo, verificar se tem documentos associados
        return true;
    }
    /**
     * Clona o requisito (sem ID)
     */
    clone() {
        return {
            tipo_beneficio_id: this.tipo_beneficio_id,
            tipo_documento: this.tipo_documento,
            obrigatorio: this.obrigatorio,
            descricao: this.descricao,
            validacoes: this.validacoes ?
                JSON.parse(JSON.stringify(this.validacoes)) : null,
        };
    }
    /**
     * Verifica se é um requisito crítico
     */
    isCritico() {
        // Documentos de identificação são sempre críticos
        if (this.isDocumentoIdentificacao())
            return true;
        // Documentos obrigatórios são críticos
        if (this.isObrigatorio())
            return true;
        return false;
    }
    /**
     * Obtém a categoria do documento
     */
    getCategoria() {
        if (this.isDocumentoIdentificacao())
            return 'IDENTIFICACAO';
        if (this.isDocumentoComprovacao())
            return 'COMPROVACAO';
        if (this.isCertidao())
            return 'CERTIDAO';
        if (this.isDocumentoMedico())
            return 'MEDICO';
        if (this.isDocumentoMoradia())
            return 'MORADIA';
        return 'OUTRO';
    }
    /**
     * Obtém a prioridade do documento (1 = mais prioritário)
     */
    getPrioridade() {
        if (this.isDocumentoIdentificacao())
            return 1;
        if (this.isObrigatorio())
            return 2;
        return 3;
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            tipo_documento: this.tipo_documento,
            obrigatorio: this.obrigatorio,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para o requisito
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.descricao || this.descricao.trim().length === 0) {
            sugestoes.push('Adicionar descrição detalhada do documento');
        }
        if (!this.temValidacoes()) {
            sugestoes.push('Definir validações para o documento');
        }
        if (this.isDocumentoIdentificacao() && !this.isObrigatorio()) {
            sugestoes.push('Documentos de identificação devem ser obrigatórios');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências nos dados');
        }
        return sugestoes;
    }
    /**
     * Verifica se precisa de atualização (dados muito antigos)
     */
    precisaAtualizacao() {
        // Dados com mais de 6 meses podem precisar de revisão
        const seisMesesAtras = new Date();
        seisMesesAtras.setMonth(seisMesesAtras.getMonth() - 6);
        return this.updated_at < seisMesesAtras;
    }
    /**
     * Obtém estatísticas do requisito
     */
    getEstatisticas() {
        return {
            categoria: this.getCategoria(),
            prioridade: this.getPrioridade(),
            obrigatorio: this.isObrigatorio(),
            temValidacoes: this.temValidacoes(),
            formatosAceitos: this.getFormatosAceitos().length,
            tamanhoMaximo: this.getTamanhoMaximoFormatado(),
            validadeMaxima: this.getValidadeMaximaFormatada(),
        };
    }
};
exports.RequisitoDocumento = RequisitoDocumento;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], RequisitoDocumento.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de benefício é obrigatório' }),
    __metadata("design:type", String)
], RequisitoDocumento.prototype, "tipo_beneficio_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => tipo_beneficio_entity_1.TipoBeneficio, (tipoBeneficio) => tipoBeneficio.requisito_documento),
    (0, typeorm_1.JoinColumn)({ name: 'tipo_beneficio_id' }),
    __metadata("design:type", typeof (_a = typeof tipo_beneficio_entity_1.TipoBeneficio !== "undefined" && tipo_beneficio_entity_1.TipoBeneficio) === "function" ? _a : Object)
], RequisitoDocumento.prototype, "tipo_beneficio", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: enums_1.TipoDocumentoEnum,
        enumName: 'tipo_documento_enum',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo de documento é obrigatório' }),
    __metadata("design:type", typeof (_b = typeof enums_1.TipoDocumentoEnum !== "undefined" && enums_1.TipoDocumentoEnum) === "function" ? _b : Object)
], RequisitoDocumento.prototype, "tipo_documento", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 255 }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome do documento é obrigatório' }),
    __metadata("design:type", String)
], RequisitoDocumento.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    __metadata("design:type", Boolean)
], RequisitoDocumento.prototype, "obrigatorio", void 0);
__decorate([
    (0, typeorm_1.Column)('text', { nullable: true }),
    __metadata("design:type", String)
], RequisitoDocumento.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)('jsonb', { nullable: true }),
    __metadata("design:type", Object)
], RequisitoDocumento.prototype, "validacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], RequisitoDocumento.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], RequisitoDocumento.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], RequisitoDocumento.prototype, "removed_at", void 0);
exports.RequisitoDocumento = RequisitoDocumento = __decorate([
    (0, typeorm_1.Entity)('requisito_documento'),
    (0, typeorm_1.Index)(['tipo_beneficio_id', 'tipo_documento'], { unique: true })
], RequisitoDocumento);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,