{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\logging.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\logging.service.ts"],"sourcesContent":["import { Injectable, Inject } from '@nestjs/common';\nimport { Logger } from 'winston';\nimport { WINSTON_MODULE_PROVIDER } from 'nest-winston';\n\n/**\n * Serviço de Logging\n *\n * Fornece métodos para registrar logs em diferentes níveis\n * e com informações estruturadas\n */\n@Injectable()\nexport class LoggingService {\n  constructor(\n    @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger,\n  ) {}\n\n  /**\n   * Registra um log de nível \"info\"\n   */\n  info(message: string, context?: string, meta?: Record<string, any>): void {\n    this.logger.info(message, {\n      context,\n      ...meta,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Registra um log de nível \"error\"\n   */\n  error(\n    message: string,\n    trace?: string,\n    context?: string,\n    meta?: Record<string, any>,\n  ): void {\n    this.logger.error(message, {\n      trace,\n      context,\n      ...meta,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Registra um log de nível \"warn\"\n   */\n  warn(message: string, context?: string, meta?: Record<string, any>): void {\n    this.logger.warn(message, {\n      context,\n      ...meta,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Registra um log de nível \"debug\"\n   */\n  debug(message: string, context?: string, meta?: Record<string, any>): void {\n    this.logger.debug(message, {\n      context,\n      ...meta,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Registra um log de nível \"verbose\"\n   */\n  verbose(message: string, context?: string, meta?: Record<string, any>): void {\n    this.logger.verbose(message, {\n      context,\n      ...meta,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Registra uma operação de banco de dados\n   */\n  logDatabase(\n    operation: string,\n    entity: string,\n    duration: number,\n    query?: string,\n  ): void {\n    this.logger.debug(`DB: ${operation} ${entity} - ${duration}ms`, {\n      context: 'Database',\n      operation,\n      entity,\n      duration,\n      query,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Registra uma operação de autenticação\n   */\n  logAuth(\n    operation: string,\n    userId: string,\n    success: boolean,\n    ip?: string,\n    userAgent?: string,\n  ): void {\n    this.logger.info(\n      `Auth: ${operation} - Usuário: ${userId} - Sucesso: ${success}`,\n      {\n        context: 'Authentication',\n        operation,\n        userId,\n        success,\n        ip,\n        userAgent,\n        timestamp: new Date().toISOString(),\n      },\n    );\n  }\n\n  /**\n   * Registra uma operação de negócio\n   */\n  logBusiness(\n    operation: string,\n    entity: string,\n    entityId: string,\n    userId: string,\n    details?: Record<string, any>,\n  ): void {\n    this.logger.info(\n      `Business: ${operation} ${entity} ${entityId} - Usuário: ${userId}`,\n      {\n        context: 'Business',\n        operation,\n        entity,\n        entityId,\n        userId,\n        details,\n        timestamp: new Date().toISOString(),\n      },\n    );\n  }\n}\n"],"version":3}