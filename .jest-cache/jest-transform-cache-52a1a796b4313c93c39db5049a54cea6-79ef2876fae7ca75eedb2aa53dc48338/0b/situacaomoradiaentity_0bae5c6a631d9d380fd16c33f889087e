d1df1f50300dfb1d6912cf6d5f23c201
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SituacaoMoradia = exports.TipoMoradiaEnum = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const cidadao_entity_1 = require("./cidadao.entity");
var TipoMoradiaEnum;
(function (TipoMoradiaEnum) {
    TipoMoradiaEnum["PROPRIA"] = "propria";
    TipoMoradiaEnum["ALUGADA"] = "alugada";
    TipoMoradiaEnum["CEDIDA"] = "cedida";
    TipoMoradiaEnum["OCUPACAO"] = "ocupacao";
    TipoMoradiaEnum["SITUACAO_RUA"] = "situacao_rua";
    TipoMoradiaEnum["ABRIGO"] = "abrigo";
    TipoMoradiaEnum["OUTRO"] = "outro";
})(TipoMoradiaEnum || (exports.TipoMoradiaEnum = TipoMoradiaEnum = {}));
let SituacaoMoradia = class SituacaoMoradia {
    id;
    cidadao_id;
    cidadao;
    tipo_moradia;
    numero_comodos;
    valor_aluguel;
    tempo_moradia;
    possui_banheiro;
    possui_energia_eletrica;
    possui_agua_encanada;
    possui_coleta_lixo;
    observacoes;
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get cidadaoId() {
        return this.cidadao_id;
    }
    set cidadaoId(value) {
        this.cidadao_id = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se a situação foi criada recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se a situação foi removida
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se a situação está ativa
     */
    isAtivo() {
        return !this.removed_at;
    }
    /**
     * Verifica se é moradia própria
     */
    isMoradiaPropria() {
        return this.tipo_moradia === TipoMoradiaEnum.PROPRIA;
    }
    /**
     * Verifica se é moradia alugada
     */
    isMoradiaAlugada() {
        return this.tipo_moradia === TipoMoradiaEnum.ALUGADA;
    }
    /**
     * Verifica se é moradia cedida
     */
    isMoradiaCedida() {
        return this.tipo_moradia === TipoMoradiaEnum.CEDIDA;
    }
    /**
     * Verifica se é ocupação
     */
    isOcupacao() {
        return this.tipo_moradia === TipoMoradiaEnum.OCUPACAO;
    }
    /**
     * Verifica se está em situação de rua
     */
    isSituacaoRua() {
        return this.tipo_moradia === TipoMoradiaEnum.SITUACAO_RUA;
    }
    /**
     * Verifica se está em abrigo
     */
    isAbrigo() {
        return this.tipo_moradia === TipoMoradiaEnum.ABRIGO;
    }
    /**
     * Verifica se tem moradia estável (própria ou alugada)
     */
    temMoradiaEstavel() {
        return this.isMoradiaPropria() || this.isMoradiaAlugada();
    }
    /**
     * Verifica se tem moradia precária (ocupação, situação de rua, abrigo)
     */
    temMoradiaPrecaria() {
        return this.isOcupacao() || this.isSituacaoRua() || this.isAbrigo();
    }
    /**
     * Verifica se tem valor de aluguel definido
     */
    temValorAluguel() {
        return (this.valor_aluguel !== null &&
            this.valor_aluguel !== undefined &&
            this.valor_aluguel > 0);
    }
    /**
     * Obtém o valor do aluguel formatado
     */
    getValorAluguelFormatado() {
        if (!this.temValorAluguel())
            return 'Não informado';
        return new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL',
        }).format(this.valor_aluguel);
    }
    /**
     * Verifica se tem número de cômodos definido
     */
    temNumeroComodos() {
        return (this.numero_comodos !== null &&
            this.numero_comodos !== undefined &&
            this.numero_comodos > 0);
    }
    /**
     * Verifica se a moradia é adequada (tem infraestrutura básica)
     */
    isMoradiaAdequada() {
        return (this.possui_banheiro &&
            this.possui_energia_eletrica &&
            this.possui_agua_encanada &&
            this.possui_coleta_lixo);
    }
    /**
     * Conta quantos itens de infraestrutura possui
     */
    getItensInfraestrutura() {
        let count = 0;
        if (this.possui_banheiro)
            count++;
        if (this.possui_energia_eletrica)
            count++;
        if (this.possui_agua_encanada)
            count++;
        if (this.possui_coleta_lixo)
            count++;
        return count;
    }
    /**
     * Obtém a pontuação de adequação da moradia (0-100)
     */
    getPontuacaoAdequacao() {
        let pontos = 0;
        // Tipo de moradia (40 pontos)
        if (this.isMoradiaPropria())
            pontos += 40;
        else if (this.isMoradiaAlugada())
            pontos += 35;
        else if (this.isMoradiaCedida())
            pontos += 25;
        else if (this.isOcupacao())
            pontos += 15;
        else if (this.isAbrigo())
            pontos += 10;
        else if (this.isSituacaoRua())
            pontos += 0;
        // Infraestrutura (60 pontos - 15 cada)
        pontos += this.getItensInfraestrutura() * 15;
        return Math.min(pontos, 100);
    }
    /**
     * Verifica se tem tempo de moradia definido
     */
    temTempoMoradia() {
        return (this.tempo_moradia !== null &&
            this.tempo_moradia !== undefined &&
            this.tempo_moradia > 0);
    }
    /**
     * Verifica se mora há muito tempo no local (mais de 5 anos)
     */
    moraMuitoTempo() {
        return this.temTempoMoradia() && this.tempo_moradia >= 60; // 60 meses = 5 anos
    }
    /**
     * Verifica se mora há pouco tempo no local (menos de 1 ano)
     */
    moraPoucoTempo() {
        return this.temTempoMoradia() && this.tempo_moradia < 12; // menos de 12 meses
    }
    /**
     * Obtém a descrição do tipo de moradia
     */
    getDescricaoTipoMoradia() {
        const descricoes = {
            [TipoMoradiaEnum.PROPRIA]: 'Própria',
            [TipoMoradiaEnum.ALUGADA]: 'Alugada',
            [TipoMoradiaEnum.CEDIDA]: 'Cedida',
            [TipoMoradiaEnum.OCUPACAO]: 'Ocupação',
            [TipoMoradiaEnum.SITUACAO_RUA]: 'Situação de Rua',
            [TipoMoradiaEnum.ABRIGO]: 'Abrigo',
            [TipoMoradiaEnum.OUTRO]: 'Outro',
        };
        return descricoes[this.tipo_moradia] || 'Não informado';
    }
    /**
     * Obtém a descrição do tempo de moradia
     */
    getDescricaoTempoMoradia() {
        if (!this.temTempoMoradia())
            return 'Não informado';
        if (this.tempo_moradia < 12) {
            return `${this.tempo_moradia} mês(es)`;
        }
        else {
            const anos = Math.floor(this.tempo_moradia / 12);
            const meses = this.tempo_moradia % 12;
            if (meses === 0) {
                return `${anos} ano(s)`;
            }
            else {
                return `${anos} ano(s) e ${meses} mês(es)`;
            }
        }
    }
    /**
     * Obtém lista de itens de infraestrutura disponíveis
     */
    getItensInfraestruturaDisponiveis() {
        const itens = [];
        if (this.possui_banheiro)
            itens.push('Banheiro');
        if (this.possui_energia_eletrica)
            itens.push('Energia Elétrica');
        if (this.possui_agua_encanada)
            itens.push('Água Encanada');
        if (this.possui_coleta_lixo)
            itens.push('Coleta de Lixo');
        return itens;
    }
    /**
     * Obtém lista de itens de infraestrutura faltantes
     */
    getItensInfraestruturaFaltantes() {
        const itens = [];
        if (!this.possui_banheiro)
            itens.push('Banheiro');
        if (!this.possui_energia_eletrica)
            itens.push('Energia Elétrica');
        if (!this.possui_agua_encanada)
            itens.push('Água Encanada');
        if (!this.possui_coleta_lixo)
            itens.push('Coleta de Lixo');
        return itens;
    }
    /**
     * Verifica se pertence a um cidadão específico
     */
    pertenceAoCidadao(cidadaoId) {
        return this.cidadao_id === cidadaoId;
    }
    /**
     * Obtém um resumo da situação de moradia
     */
    getSummary() {
        const tipo = this.getDescricaoTipoMoradia();
        const adequacao = this.getPontuacaoAdequacao();
        const tempo = this.temTempoMoradia()
            ? ` - ${this.getDescricaoTempoMoradia()}`
            : '';
        return `${tipo} (${adequacao}% adequada)${tempo}`;
    }
    /**
     * Gera uma chave única para a situação
     */
    getUniqueKey() {
        return `situacao_moradia_${this.cidadao_id}`;
    }
    /**
     * Verifica se a situação é consistente
     */
    isConsistente() {
        // Verifica se tem cidadão
        if (!this.cidadao_id)
            return false;
        // Se é alugada, deve ter valor do aluguel
        if (this.isMoradiaAlugada() && !this.temValorAluguel()) {
            return false;
        }
        // Se tem valor de aluguel, deve ser moradia alugada
        if (this.temValorAluguel() && !this.isMoradiaAlugada()) {
            return false;
        }
        // Situação de rua não deveria ter infraestrutura
        if (this.isSituacaoRua() && this.getItensInfraestrutura() > 0) {
            return false;
        }
        return true;
    }
    /**
     * Verifica se pode ser removida
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        return true;
    }
    /**
     * Clona a situação de moradia (sem ID)
     */
    clone() {
        return {
            cidadao_id: this.cidadao_id,
            tipo_moradia: this.tipo_moradia,
            numero_comodos: this.numero_comodos,
            valor_aluguel: this.valor_aluguel,
            tempo_moradia: this.tempo_moradia,
            possui_banheiro: this.possui_banheiro,
            possui_energia_eletrica: this.possui_energia_eletrica,
            possui_agua_encanada: this.possui_agua_encanada,
            possui_coleta_lixo: this.possui_coleta_lixo,
            observacoes: this.observacoes,
        };
    }
    /**
     * Verifica se é elegível para auxílio moradia
     */
    isElegivelAuxilioMoradia() {
        // Situações que podem ser elegíveis para auxílio
        return (this.isMoradiaAlugada() ||
            this.temMoradiaPrecaria() ||
            !this.isMoradiaAdequada());
    }
    /**
     * Verifica se é prioritário para programas habitacionais
     */
    isPrioritarioHabitacao() {
        return (this.isSituacaoRua() ||
            this.isAbrigo() ||
            this.isOcupacao() ||
            this.getPontuacaoAdequacao() < 50);
    }
    /**
     * Obtém o nível de vulnerabilidade habitacional
     */
    getNivelVulnerabilidade() {
        if (this.isSituacaoRua())
            return 'CRITICO';
        if (this.isAbrigo() || this.isOcupacao())
            return 'ALTO';
        if (!this.isMoradiaAdequada() || this.getPontuacaoAdequacao() < 50)
            return 'MEDIO';
        return 'BAIXO';
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            tipo_moradia: this.tipo_moradia,
            numero_comodos: this.numero_comodos,
            tempo_moradia: this.tempo_moradia,
            possui_banheiro: this.possui_banheiro,
            possui_energia_eletrica: this.possui_energia_eletrica,
            possui_agua_encanada: this.possui_agua_encanada,
            possui_coleta_lixo: this.possui_coleta_lixo,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para a situação de moradia
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (this.temMoradiaPrecaria()) {
            sugestoes.push('Buscar programas habitacionais ou auxílio moradia');
        }
        if (!this.isMoradiaAdequada()) {
            const faltantes = this.getItensInfraestruturaFaltantes();
            sugestoes.push(`Melhorar infraestrutura: ${faltantes.join(', ')}`);
        }
        if (this.isMoradiaAlugada() && !this.temValorAluguel()) {
            sugestoes.push('Informar valor do aluguel para análise de benefícios');
        }
        if (!this.temTempoMoradia()) {
            sugestoes.push('Informar tempo de moradia no local atual');
        }
        if (!this.temNumeroComodos()) {
            sugestoes.push('Informar número de cômodos da moradia');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências nos dados');
        }
        return sugestoes;
    }
    /**
     * Verifica se precisa de atualização (dados muito antigos)
     */
    precisaAtualizacao() {
        // Dados com mais de 6 meses podem precisar de atualização
        const seiseMesesAtras = new Date();
        seiseMesesAtras.setMonth(seiseMesesAtras.getMonth() - 6);
        return this.updated_at < seiseMesesAtras;
    }
    /**
     * Obtém estatísticas da situação de moradia
     */
    getEstatisticas() {
        return {
            pontuacaoAdequacao: this.getPontuacaoAdequacao(),
            nivelVulnerabilidade: this.getNivelVulnerabilidade(),
            itensInfraestrutura: this.getItensInfraestrutura(),
            tempoMoradia: this.getDescricaoTempoMoradia(),
            elegibilidadeAuxilio: this.isElegivelAuxilioMoradia(),
        };
    }
};
exports.SituacaoMoradia = SituacaoMoradia;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], SituacaoMoradia.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)(),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do cidadão é obrigatório' }),
    __metadata("design:type", String)
], SituacaoMoradia.prototype, "cidadao_id", void 0);
__decorate([
    (0, typeorm_1.OneToOne)(() => cidadao_entity_1.Cidadao, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'cidadao_id' }),
    __metadata("design:type", typeof (_a = typeof cidadao_entity_1.Cidadao !== "undefined" && cidadao_entity_1.Cidadao) === "function" ? _a : Object)
], SituacaoMoradia.prototype, "cidadao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: TipoMoradiaEnum,
        enumName: 'tipo_moradia_enum',
        nullable: true,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEnum)(TipoMoradiaEnum, { message: 'Tipo de moradia inválido' }),
    __metadata("design:type", String)
], SituacaoMoradia.prototype, "tipo_moradia", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Number)
], SituacaoMoradia.prototype, "numero_comodos", void 0);
__decorate([
    (0, typeorm_1.Column)('decimal', { precision: 10, scale: 2, nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Valor do aluguel deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Valor do aluguel não pode ser negativo' }),
    __metadata("design:type", Number)
], SituacaoMoradia.prototype, "valor_aluguel", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Tempo de moradia deve ser um número' }),
    __metadata("design:type", Number)
], SituacaoMoradia.prototype, "tempo_moradia", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Boolean)
], SituacaoMoradia.prototype, "possui_banheiro", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Boolean)
], SituacaoMoradia.prototype, "possui_energia_eletrica", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Boolean)
], SituacaoMoradia.prototype, "possui_agua_encanada", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", Boolean)
], SituacaoMoradia.prototype, "possui_coleta_lixo", void 0);
__decorate([
    (0, typeorm_1.Column)({ nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], SituacaoMoradia.prototype, "observacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], SituacaoMoradia.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], SituacaoMoradia.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], SituacaoMoradia.prototype, "removed_at", void 0);
exports.SituacaoMoradia = SituacaoMoradia = __decorate([
    (0, typeorm_1.Entity)('situacao_moradia'),
    (0, typeorm_1.Index)(['cidadao_id'], { unique: true })
], SituacaoMoradia);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,