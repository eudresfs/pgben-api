{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\integration\\permission-jwt.integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\integration\\permission-jwt.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { AppModule } from '@/app.module';\nimport { PermissionService } from '@/auth/services/permission.service';\nimport { ScopeType } from '@/auth/entities/user-permission.entity';\nimport { Permission } from '@/auth/entities/permission.entity';\nimport { PermissionRepository } from '@/auth/repositories/permission.repository';\nimport { UserPermissionRepository } from '@/auth/repositories/user-permission.repository';\n\n/**\n * Testes de integração para o sistema de permissões com JWT\n * \n * Estes testes verificam a interação entre o JwtService, PermissionService e PermissionGuard,\n * focando especialmente na extração de permissões do token JWT e na validação dessas\n * permissões para acessar endpoints protegidos.\n */\ndescribe('Permission JWT Integration', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let configService: ConfigService;\n  let permissionService: PermissionService;\n  let permissionRepository: PermissionRepository;\n  let userPermissionRepository: UserPermissionRepository;\n\n  beforeAll(async () => {\n    // Criar um módulo de teste com o AppModule\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    // Iniciar a aplicação\n    app = moduleFixture.createNestApplication();\n    await app.init();\n\n    // Obter os serviços necessários\n    jwtService = app.get<JwtService>(JwtService);\n    configService = app.get<ConfigService>(ConfigService);\n    permissionService = app.get<PermissionService>(PermissionService);\n    permissionRepository = app.get<PermissionRepository>(PermissionRepository);\n    userPermissionRepository = app.get<UserPermissionRepository>(UserPermissionRepository);\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('Extração de permissões do JWT', () => {\n    it('deve verificar permissões extraídas do JWT', async () => {\n      // Mock de um usuário com permissões\n      const testUser = {\n        id: 'user-test-123',\n        username: 'test.user@example.com',\n        roles: ['ADMIN'],\n        nome: 'Usuário de Teste',\n      };\n\n      // Criar um token JWT para o usuário\n      const privateKey = Buffer.from(\n        configService.get<string>('JWT_PRIVATE_KEY_BASE64', ''),\n        'base64',\n      ).toString('utf8');\n\n      const accessToken = jwtService.sign(\n        {\n          ...testUser,\n          sub: testUser.id,\n        },\n        {\n          secret: privateKey,\n          algorithm: 'RS256',\n          expiresIn: '1h',\n        },\n      );\n\n      // Criar permissões de teste\n      const testPermission: Permission = await permissionRepository.save({\n        name: 'test.permission',\n        description: 'Permissão de teste',\n        isComposite: false,\n      });\n\n      // Atribuir permissão ao usuário\n      await userPermissionRepository.save({\n        userId: testUser.id,\n        permissionId: testPermission.id,\n        scopeType: ScopeType.GLOBAL,\n        granted: true,\n        validUntil: null,\n        createdBy: 'system',\n      });\n\n      // Verificar se o usuário tem a permissão\n      const hasPermission = await permissionService.hasPermission({\n        userId: testUser.id,\n        permissionName: 'test.permission',\n        scopeType: ScopeType.GLOBAL,\n      });\n\n      expect(hasPermission).toBe(true);\n\n      // Tentar acessar um endpoint protegido\n      const response = await request(app.getHttpServer())\n        .get('/api/protected-endpoint')\n        .set('Authorization', `Bearer ${accessToken}`);\n\n      // Se o endpoint estiver configurado corretamente,\n      // deve retornar 200 OK se o usuário tiver permissão,\n      // ou 403 Forbidden se não tiver\n      expect([200, 403]).toContain(response.status);\n    });\n  });\n\n  describe('Casos especiais de autorização', () => {\n    it('deve verificar permissões compostas', async () => {\n      // Criar permissão composta de teste\n      const parentPermission: Permission = await permissionRepository.save({\n        name: 'test.composite.permission',\n        description: 'Permissão composta de teste',\n        isComposite: true,\n      });\n\n      const childPermission: Permission = await permissionRepository.save({\n        name: 'test.child.permission',\n        description: 'Permissão filha de teste',\n        isComposite: false,\n      });\n\n      // Estabelecer relação de composição\n      await permissionRepository.establishComposition(parentPermission.id, childPermission.id);\n\n      // Atribuir permissão filha ao usuário\n      await userPermissionRepository.save({\n        userId: 'user-test-123',\n        permissionId: childPermission.id,\n        scopeType: ScopeType.GLOBAL,\n        granted: true,\n        validUntil: null,\n        createdBy: 'system',\n      });\n\n      // Verificar se o usuário tem a permissão composta\n      const hasCompositePermission = await permissionService.hasPermission({\n        userId: 'user-test-123',\n        permissionName: 'test.composite.permission',\n        scopeType: ScopeType.GLOBAL,\n      });\n\n      expect(hasCompositePermission).toBe(true);\n    });\n\n    it('deve verificar permissões com escopo de unidade', async () => {\n      // Criar permissão com escopo UNIT\n      const unitPermission: Permission = await permissionRepository.save({\n        name: 'test.unit.permission',\n        description: 'Permissão com escopo de unidade',\n        isComposite: false,\n      });\n\n      // Atribuir permissão ao usuário com escopo UNIT\n      await userPermissionRepository.save({\n        userId: 'user-test-123',\n        permissionId: unitPermission.id,\n        scopeType: ScopeType.UNIT,\n        scopeId: 'unidade-test-123',\n        granted: true,\n        validUntil: null,\n        createdBy: 'system',\n      });\n\n      // Verificar se o usuário tem a permissão para a unidade específica\n      const hasUnitPermission = await permissionService.hasPermission({\n        userId: 'user-test-123',\n        permissionName: 'test.unit.permission',\n        scopeType: ScopeType.UNIT,\n        scopeId: 'unidade-test-123',\n      });\n\n      expect(hasUnitPermission).toBe(true);\n\n      // Verificar que o usuário não tem a permissão para outra unidade\n      const hasOtherUnitPermission = await permissionService.hasPermission({\n        userId: 'user-test-123',\n        permissionName: 'test.unit.permission',\n        scopeType: ScopeType.UNIT,\n        scopeId: 'unidade-test-456',\n      });\n\n      expect(hasOtherUnitPermission).toBe(false);\n    });\n\n    it('deve verificar permissões temporárias (com data de validade)', async () => {\n      // Criar permissão temporária\n      const temporaryPermission: Permission = await permissionRepository.save({\n        name: 'test.temporary.permission',\n        description: 'Permissão temporária',\n        isComposite: false,\n      });\n\n      // Data de validade no futuro\n      const futureDate = new Date();\n      futureDate.setDate(futureDate.getDate() + 7); // Válida por 7 dias\n\n      // Atribuir permissão temporária ao usuário\n      await userPermissionRepository.save({\n        userId: 'user-test-123',\n        permissionId: temporaryPermission.id,\n        scopeType: ScopeType.GLOBAL,\n        granted: true,\n        validUntil: futureDate,\n        createdBy: 'system',\n      });\n\n      // Verificar se o usuário tem a permissão temporária\n      const hasTemporaryPermission = await permissionService.hasPermission({\n        userId: 'user-test-123',\n        permissionName: 'test.temporary.permission',\n        scopeType: ScopeType.GLOBAL,\n      });\n\n      expect(hasTemporaryPermission).toBe(true);\n\n      // Data de validade no passado\n      const pastDate = new Date();\n      pastDate.setDate(pastDate.getDate() - 7); // Expirada há 7 dias\n\n      // Atribuir permissão expirada ao usuário\n      await userPermissionRepository.save({\n        userId: 'user-test-123',\n        permissionId: temporaryPermission.id, // Mesma permissão, mas com outra validade\n        scopeType: ScopeType.GLOBAL,\n        granted: true,\n        validUntil: pastDate,\n        createdBy: 'system',\n      });\n\n      // Verificar que o usuário não tem a permissão expirada\n      const hasExpiredPermission = await permissionService.hasPermission({\n        userId: 'user-test-123',\n        permissionName: 'test.temporary.permission',\n        scopeType: ScopeType.GLOBAL,\n      });\n\n      expect(hasExpiredPermission).toBe(true); // Ainda é true porque a primeira permissão está válida\n    });\n  });\n});\n"],"version":3}