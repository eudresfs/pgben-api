{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\controllers\\confirmacao.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\controllers\\confirmacao.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfirmacaoController } from '../../../controllers/confirmacao.controller';\nimport { ConfirmacaoService } from '../../../services/confirmacao.service';\nimport { PagamentoService } from '../../../services/pagamento.service';\nimport { NotFoundException } from '@nestjs/common';\nimport { ConfirmacaoRecebimentoDto } from '../../../dtos/confirmacao-recebimento.dto';\n\n/**\n * Testes unitários para ConfirmacaoController\n * \n * Valida o comportamento dos endpoints de confirmação de recebimento,\n * garantindo que o processo de confirmação pelo beneficiário funcione corretamente.\n * \n * @author Equipe PGBen\n */\ndescribe('ConfirmacaoController', () => {\n  let controller: ConfirmacaoController;\n  let confirmacaoService: ConfirmacaoService;\n  let pagamentoService: PagamentoService;\n\n  // Mock de uma confirmação de recebimento para os testes\n  const confirmacaoMock = {\n    id: 'confirmacao-id-1',\n    pagamentoId: 'pagamento-id-1',\n    dataConfirmacao: new Date(),\n    metodoCaptacao: 'assinatura_digital',\n    recebedorNome: 'Maria Silva',\n    recebedorDocumento: '123.456.789-09',\n    recebedorVinculo: 'beneficiario',\n    observacoes: 'Confirmação realizada pelo próprio beneficiário',\n    confirmadoPor: 'usuario-id-1'\n  };\n\n  // Mock de um pagamento para os testes\n  const pagamentoMock = {\n    id: 'pagamento-id-1',\n    solicitacaoId: 'solicitacao-id-1',\n    status: 'LIBERADO',\n    valor: 500,\n    beneficiarioId: 'beneficiario-id-1'\n  };\n\n  // Mock do request com usuário autenticado\n  const mockRequest = {\n    user: {\n      id: 'usuario-id-1',\n      nome: 'Usuário Teste',\n      perfil: 'operador'\n    }\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [ConfirmacaoController],\n      providers: [\n        {\n          provide: ConfirmacaoService,\n          useValue: {\n            registrarConfirmacao: jest.fn().mockResolvedValue(confirmacaoMock),\n            getConfirmacao: jest.fn().mockResolvedValue(confirmacaoMock)\n          }\n        },\n        {\n          provide: PagamentoService,\n          useValue: {\n            findOne: jest.fn().mockResolvedValue(pagamentoMock),\n            findOneWithRelations: jest.fn().mockResolvedValue({\n              ...pagamentoMock,\n              confirmacao: null // Inicialmente sem confirmação\n            })\n          }\n        }\n      ],\n    }).compile();\n\n    controller = module.get<ConfirmacaoController>(ConfirmacaoController);\n    confirmacaoService = module.get<ConfirmacaoService>(ConfirmacaoService);\n    pagamentoService = module.get<PagamentoService>(PagamentoService);\n  });\n\n  it('deve estar definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('registrarConfirmacao', () => {\n    it('deve registrar confirmação de recebimento com sucesso', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const confirmacaoDto: ConfirmacaoRecebimentoDto = {\n        metodoCaptacao: 'assinatura_digital',\n        recebedorNome: 'Maria Silva',\n        recebedorDocumento: '123.456.789-09',\n        recebedorVinculo: 'beneficiario',\n        observacoes: 'Confirmação realizada pelo próprio beneficiário'\n      };\n\n      // Act\n      const resultado = await controller.registrarConfirmacao(\n        pagamentoId,\n        confirmacaoDto,\n        mockRequest as any\n      );\n\n      // Assert\n      expect(resultado).toEqual(confirmacaoMock);\n      expect(pagamentoService.findOneWithRelations).toHaveBeenCalledWith(pagamentoId);\n      expect(confirmacaoService.registrarConfirmacao).toHaveBeenCalledWith(\n        pagamentoId,\n        confirmacaoDto,\n        mockRequest.user.id\n      );\n    });\n\n    it('deve verificar se o pagamento existe', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n      const confirmacaoDto: ConfirmacaoRecebimentoDto = {\n        metodoCaptacao: 'assinatura_digital',\n        recebedorNome: 'Maria Silva',\n        recebedorDocumento: '123.456.789-09',\n        recebedorVinculo: 'beneficiario',\n        observacoes: 'Confirmação realizada pelo próprio beneficiário'\n      };\n      \n      jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        controller.registrarConfirmacao(pagamentoId, confirmacaoDto, mockRequest as any)\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve verificar se o pagamento já possui confirmação', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      const confirmacaoDto: ConfirmacaoRecebimentoDto = {\n        metodoCaptacao: 'assinatura_digital',\n        recebedorNome: 'Maria Silva',\n        recebedorDocumento: '123.456.789-09',\n        recebedorVinculo: 'beneficiario',\n        observacoes: 'Confirmação realizada pelo próprio beneficiário'\n      };\n      \n      // Simular pagamento que já possui confirmação\n      jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue({\n        ...pagamentoMock,\n        confirmacao: {\n          id: 'confirmacao-existente'\n        }\n      });\n\n      // Act & Assert\n      await expect(\n        controller.registrarConfirmacao(pagamentoId, confirmacaoDto, mockRequest as any)\n      ).rejects.toThrow();\n    });\n  });\n\n  describe('getConfirmacao', () => {\n    it('deve retornar confirmação pelo ID', async () => {\n      // Arrange\n      const confirmacaoId = 'confirmacao-id-1';\n\n      // Act\n      const resultado = await controller.getConfirmacao(confirmacaoId);\n\n      // Assert\n      expect(resultado).toEqual(confirmacaoMock);\n      expect(confirmacaoService.getConfirmacao).toHaveBeenCalledWith(confirmacaoId);\n    });\n\n    it('deve lançar erro quando confirmação não existe', async () => {\n      // Arrange\n      const confirmacaoId = 'confirmacao-inexistente';\n      \n      jest.spyOn(confirmacaoService, 'getConfirmacao').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        controller.getConfirmacao(confirmacaoId)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('getConfirmacaoPorPagamento', () => {\n    it('deve retornar confirmação de um pagamento', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      \n      // Simular pagamento com confirmação\n      jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue({\n        ...pagamentoMock,\n        confirmacao: confirmacaoMock\n      });\n\n      // Act\n      const resultado = await controller.getConfirmacaoPorPagamento(pagamentoId);\n\n      // Assert\n      expect(resultado).toEqual(confirmacaoMock);\n      expect(pagamentoService.findOneWithRelations).toHaveBeenCalledWith(pagamentoId);\n    });\n\n    it('deve verificar se o pagamento existe', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-inexistente';\n      \n      jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue(null);\n\n      // Act & Assert\n      await expect(\n        controller.getConfirmacaoPorPagamento(pagamentoId)\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve lançar erro quando pagamento não possui confirmação', async () => {\n      // Arrange\n      const pagamentoId = 'pagamento-id-1';\n      \n      // Simular pagamento sem confirmação\n      jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue({\n        ...pagamentoMock,\n        confirmacao: null\n      });\n\n      // Act & Assert\n      await expect(\n        controller.getConfirmacaoPorPagamento(pagamentoId)\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n});\n"],"version":3}