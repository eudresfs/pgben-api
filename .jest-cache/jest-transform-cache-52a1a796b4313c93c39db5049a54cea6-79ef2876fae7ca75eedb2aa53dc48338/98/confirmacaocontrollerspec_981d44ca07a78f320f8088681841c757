a73c14d12d20fc4e3fec0f404cf69337
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const confirmacao_controller_1 = require("../../../controllers/confirmacao.controller");
const confirmacao_service_1 = require("../../../services/confirmacao.service");
const pagamento_service_1 = require("../../../services/pagamento.service");
const common_1 = require("@nestjs/common");
/**
 * Testes unitários para ConfirmacaoController
 *
 * Valida o comportamento dos endpoints de confirmação de recebimento,
 * garantindo que o processo de confirmação pelo beneficiário funcione corretamente.
 *
 * @author Equipe PGBen
 */
describe('ConfirmacaoController', () => {
    let controller;
    let confirmacaoService;
    let pagamentoService;
    // Mock de uma confirmação de recebimento para os testes
    const confirmacaoMock = {
        id: 'confirmacao-id-1',
        pagamentoId: 'pagamento-id-1',
        dataConfirmacao: new Date(),
        metodoCaptacao: 'assinatura_digital',
        recebedorNome: 'Maria Silva',
        recebedorDocumento: '123.456.789-09',
        recebedorVinculo: 'beneficiario',
        observacoes: 'Confirmação realizada pelo próprio beneficiário',
        confirmadoPor: 'usuario-id-1'
    };
    // Mock de um pagamento para os testes
    const pagamentoMock = {
        id: 'pagamento-id-1',
        solicitacaoId: 'solicitacao-id-1',
        status: 'LIBERADO',
        valor: 500,
        beneficiarioId: 'beneficiario-id-1'
    };
    // Mock do request com usuário autenticado
    const mockRequest = {
        user: {
            id: 'usuario-id-1',
            nome: 'Usuário Teste',
            perfil: 'operador'
        }
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [confirmacao_controller_1.ConfirmacaoController],
            providers: [
                {
                    provide: confirmacao_service_1.ConfirmacaoService,
                    useValue: {
                        registrarConfirmacao: jest.fn().mockResolvedValue(confirmacaoMock),
                        getConfirmacao: jest.fn().mockResolvedValue(confirmacaoMock)
                    }
                },
                {
                    provide: pagamento_service_1.PagamentoService,
                    useValue: {
                        findOne: jest.fn().mockResolvedValue(pagamentoMock),
                        findOneWithRelations: jest.fn().mockResolvedValue({
                            ...pagamentoMock,
                            confirmacao: null // Inicialmente sem confirmação
                        })
                    }
                }
            ],
        }).compile();
        controller = module.get(confirmacao_controller_1.ConfirmacaoController);
        confirmacaoService = module.get(confirmacao_service_1.ConfirmacaoService);
        pagamentoService = module.get(pagamento_service_1.PagamentoService);
    });
    it('deve estar definido', () => {
        expect(controller).toBeDefined();
    });
    describe('registrarConfirmacao', () => {
        it('deve registrar confirmação de recebimento com sucesso', async () => {
            // Arrange
            const pagamentoId = 'pagamento-id-1';
            const confirmacaoDto = {
                metodoCaptacao: 'assinatura_digital',
                recebedorNome: 'Maria Silva',
                recebedorDocumento: '123.456.789-09',
                recebedorVinculo: 'beneficiario',
                observacoes: 'Confirmação realizada pelo próprio beneficiário'
            };
            // Act
            const resultado = await controller.registrarConfirmacao(pagamentoId, confirmacaoDto, mockRequest);
            // Assert
            expect(resultado).toEqual(confirmacaoMock);
            expect(pagamentoService.findOneWithRelations).toHaveBeenCalledWith(pagamentoId);
            expect(confirmacaoService.registrarConfirmacao).toHaveBeenCalledWith(pagamentoId, confirmacaoDto, mockRequest.user.id);
        });
        it('deve verificar se o pagamento existe', async () => {
            // Arrange
            const pagamentoId = 'pagamento-inexistente';
            const confirmacaoDto = {
                metodoCaptacao: 'assinatura_digital',
                recebedorNome: 'Maria Silva',
                recebedorDocumento: '123.456.789-09',
                recebedorVinculo: 'beneficiario',
                observacoes: 'Confirmação realizada pelo próprio beneficiário'
            };
            jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue(null);
            // Act & Assert
            await expect(controller.registrarConfirmacao(pagamentoId, confirmacaoDto, mockRequest)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve verificar se o pagamento já possui confirmação', async () => {
            // Arrange
            const pagamentoId = 'pagamento-id-1';
            const confirmacaoDto = {
                metodoCaptacao: 'assinatura_digital',
                recebedorNome: 'Maria Silva',
                recebedorDocumento: '123.456.789-09',
                recebedorVinculo: 'beneficiario',
                observacoes: 'Confirmação realizada pelo próprio beneficiário'
            };
            // Simular pagamento que já possui confirmação
            jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue({
                ...pagamentoMock,
                confirmacao: {
                    id: 'confirmacao-existente'
                }
            });
            // Act & Assert
            await expect(controller.registrarConfirmacao(pagamentoId, confirmacaoDto, mockRequest)).rejects.toThrow();
        });
    });
    describe('getConfirmacao', () => {
        it('deve retornar confirmação pelo ID', async () => {
            // Arrange
            const confirmacaoId = 'confirmacao-id-1';
            // Act
            const resultado = await controller.getConfirmacao(confirmacaoId);
            // Assert
            expect(resultado).toEqual(confirmacaoMock);
            expect(confirmacaoService.getConfirmacao).toHaveBeenCalledWith(confirmacaoId);
        });
        it('deve lançar erro quando confirmação não existe', async () => {
            // Arrange
            const confirmacaoId = 'confirmacao-inexistente';
            jest.spyOn(confirmacaoService, 'getConfirmacao').mockResolvedValue(null);
            // Act & Assert
            await expect(controller.getConfirmacao(confirmacaoId)).rejects.toThrow(common_1.NotFoundException);
        });
    });
    describe('getConfirmacaoPorPagamento', () => {
        it('deve retornar confirmação de um pagamento', async () => {
            // Arrange
            const pagamentoId = 'pagamento-id-1';
            // Simular pagamento com confirmação
            jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue({
                ...pagamentoMock,
                confirmacao: confirmacaoMock
            });
            // Act
            const resultado = await controller.getConfirmacaoPorPagamento(pagamentoId);
            // Assert
            expect(resultado).toEqual(confirmacaoMock);
            expect(pagamentoService.findOneWithRelations).toHaveBeenCalledWith(pagamentoId);
        });
        it('deve verificar se o pagamento existe', async () => {
            // Arrange
            const pagamentoId = 'pagamento-inexistente';
            jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue(null);
            // Act & Assert
            await expect(controller.getConfirmacaoPorPagamento(pagamentoId)).rejects.toThrow(common_1.NotFoundException);
        });
        it('deve lançar erro quando pagamento não possui confirmação', async () => {
            // Arrange
            const pagamentoId = 'pagamento-id-1';
            // Simular pagamento sem confirmação
            jest.spyOn(pagamentoService, 'findOneWithRelations').mockResolvedValue({
                ...pagamentoMock,
                confirmacao: null
            });
            // Act & Assert
            await expect(controller.getConfirmacaoPorPagamento(pagamentoId)).rejects.toThrow(common_1.NotFoundException);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,