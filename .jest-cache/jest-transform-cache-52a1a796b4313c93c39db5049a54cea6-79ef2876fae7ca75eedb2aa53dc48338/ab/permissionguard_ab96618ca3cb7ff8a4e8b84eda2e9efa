7651392d1d355e301f3d0e524496c70e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var PermissionGuard_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PermissionGuard = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const requires_permission_decorator_1 = require("../decorators/requires-permission.decorator");
const permission_service_1 = require("../services/permission.service");
const user_permission_entity_1 = require("../../entities/user-permission.entity");
const permission_denied_exception_1 = require("../exceptions/permission-denied.exception");
/**
 * Guard para verificar permissões granulares.
 *
 * Este guard verifica se o usuário tem as permissões necessárias para acessar
 * um endpoint, considerando os requisitos de permissão definidos pelo decorador
 * RequiresPermission.
 */
let PermissionGuard = PermissionGuard_1 = class PermissionGuard {
    reflector;
    permissionService;
    logger = new common_1.Logger(PermissionGuard_1.name);
    constructor(reflector, permissionService) {
        this.reflector = reflector;
        this.permissionService = permissionService;
    }
    /**
     * Verifica se o usuário tem as permissões necessárias para acessar o endpoint.
     *
     * @param context Contexto de execução
     * @returns true se o usuário tem as permissões necessárias, false caso contrário
     */
    async canActivate(context) {
        // Obtém os requisitos de permissão do método e da classe
        const methodRequirements = this.reflector.get(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, context.getHandler()) || [];
        const classRequirements = this.reflector.get(requires_permission_decorator_1.PERMISSION_REQUIREMENTS_KEY, context.getClass()) || [];
        // Combina os requisitos de permissão
        const requirements = [...methodRequirements, ...classRequirements];
        // Se não houver requisitos de permissão, permite o acesso
        if (requirements.length === 0) {
            return true;
        }
        // Obtém a requisição
        const request = context.switchToHttp().getRequest();
        // Verifica se o usuário está autenticado
        if (!request.user || !request.user.id) {
            throw new common_1.UnauthorizedException('Usuário não autenticado');
        }
        const userId = request.user.id;
        // BYPASS PARA SUPER ADMIN: Verifica se o usuário possui permissão de super admin (*.*)
        // Se sim, permite acesso a qualquer endpoint sem verificar outras permissões
        const hasSuperAdminPermission = await this.permissionService.hasPermission({
            userId,
            permissionName: '*.*',
            scopeType: user_permission_entity_1.TipoEscopo.GLOBAL,
        });
        if (hasSuperAdminPermission) {
            this.logger.debug(`Acesso concedido via super admin: usuário ${userId} possui permissão '*.*'`);
            return true;
        }
        // Verifica se o usuário tem pelo menos uma das permissões requeridas (OR lógico)
        const permissionChecks = [];
        const requirementDetails = [];
        // Prepara todas as verificações de permissão
        for (const requirement of requirements) {
            const { permissionName, scopeType = user_permission_entity_1.TipoEscopo.GLOBAL, scopeIdExpression, } = requirement;
            // Obtém o ID do escopo a partir da expressão
            let scopeId;
            if (scopeType === user_permission_entity_1.TipoEscopo.UNIDADE && scopeIdExpression) {
                scopeId = this.evaluateScopeIdExpression(scopeIdExpression, request);
            }
            // Adiciona a verificação de permissão à lista
            const permissionCheck = this.permissionService.hasPermission({
                userId,
                permissionName,
                scopeType,
                scopeId,
            });
            permissionChecks.push(permissionCheck);
            requirementDetails.push({ requirement, scopeId });
        }
        // Executa todas as verificações em paralelo
        const results = await Promise.all(permissionChecks);
        // Verifica se pelo menos uma permissão foi concedida
        const hasAnyPermission = results.some((result) => result === true);
        if (!hasAnyPermission) {
            // Log detalhado de todas as permissões que falharam
            const failedPermissions = requirementDetails
                .filter((_, index) => !results[index])
                .map(({ requirement, scopeId }) => {
                const { permissionName, scopeType = user_permission_entity_1.TipoEscopo.GLOBAL } = requirement;
                return `${permissionName} (escopo: ${scopeType}${scopeId ? `, ID: ${scopeId}` : ''})`;
            });
            this.logger.warn(`Acesso negado: usuário ${userId} não possui nenhuma das permissões requeridas: ${failedPermissions.join(', ')}`);
            // Lança exceção com a primeira permissão que falhou (para compatibilidade)
            const firstFailedRequirement = requirementDetails.find((_, index) => !results[index]);
            if (firstFailedRequirement) {
                const { permissionName, scopeType = user_permission_entity_1.TipoEscopo.GLOBAL } = firstFailedRequirement.requirement;
                throw new permission_denied_exception_1.PermissionDeniedException(permissionName, scopeType, firstFailedRequirement.scopeId);
            }
        }
        return true;
    }
    /**
     * Avalia a expressão para obter o ID do escopo a partir dos parâmetros da requisição.
     *
     * @param expression Expressão para obter o ID do escopo
     * @param request Requisição
     * @returns ID do escopo ou undefined se não for possível obter
     */
    evaluateScopeIdExpression(expression, request) {
        try {
            // Divide a expressão em partes (ex: 'params.unidadeId' -> ['params', 'unidadeId'])
            const parts = expression.split('.');
            // Avalia a expressão
            let value = request;
            for (const part of parts) {
                if (value && typeof value === 'object' && part in value) {
                    value = value[part];
                }
                else {
                    return undefined;
                }
            }
            return value?.toString();
        }
        catch (error) {
            this.logger.error(`Erro ao avaliar expressão de escopo: ${error.message}`, error.stack);
            return undefined;
        }
    }
};
exports.PermissionGuard = PermissionGuard;
exports.PermissionGuard = PermissionGuard = PermissionGuard_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof core_1.Reflector !== "undefined" && core_1.Reflector) === "function" ? _a : Object, typeof (_b = typeof permission_service_1.PermissionService !== "undefined" && permission_service_1.PermissionService) === "function" ? _b : Object])
], PermissionGuard);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,