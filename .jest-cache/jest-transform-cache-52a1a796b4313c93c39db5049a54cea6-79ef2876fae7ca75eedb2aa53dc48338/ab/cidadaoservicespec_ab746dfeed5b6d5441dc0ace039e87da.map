{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\tests\\cidadao.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\tests\\cidadao.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { CidadaoService } from '../services/cidadao.service';\nimport { NotFoundException, ConflictException } from '@nestjs/common';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Cidadao, Sexo } from '../entities/cidadao.entity';\nimport { CidadaoRepository } from '../repositories/cidadao.repository';\n\n/**\n * Testes unitários para o serviço de cidadão\n *\n * Verifica o funcionamento das operações CRUD e regras de negócio\n * relacionadas aos cidadãos/beneficiários do sistema\n */\ndescribe('CidadaoService', () => {\n  let service: CidadaoService;\n\n  // Mock do repositório de cidadãos\n  const mockCidadaoRepository = {\n    find: jest.fn(),\n    findOne: jest.fn(),\n    findById: jest.fn(),\n    findByCpf: jest.fn(),\n    findByNis: jest.fn(),\n    save: jest.fn(),\n    create: jest.fn(),\n    update: jest.fn(),\n    remove: jest.fn(),\n    findAll: jest.fn(),\n    addComposicaoFamiliar: jest.fn(),\n    createQueryBuilder: jest.fn(() => ({\n      where: jest.fn().mockReturnThis(),\n      andWhere: jest.fn().mockReturnThis(),\n      leftJoinAndSelect: jest.fn().mockReturnThis(),\n      orderBy: jest.fn().mockReturnThis(),\n      skip: jest.fn().mockReturnThis(),\n      take: jest.fn().mockReturnThis(),\n      getManyAndCount: jest.fn(),\n      getOne: jest.fn(),\n    })),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CidadaoService,\n        {\n          provide: CidadaoRepository,\n          useValue: mockCidadaoRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<CidadaoService>(CidadaoService);\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista paginada de cidadãos', async () => {\n      const mockCidadaos = [\n        {\n          id: '1',\n          nome: 'João Silva',\n          cpf: '123.456.789-00',\n          dataNascimento: new Date('1990-01-01'),\n        },\n        {\n          id: '2',\n          nome: 'Maria Souza',\n          cpf: '987.654.321-00',\n          dataNascimento: new Date('1985-05-10'),\n        },\n      ];\n\n      // Mock do método findAll do repositório\n      mockCidadaoRepository.findAll.mockResolvedValue([mockCidadaos, 2]);\n\n      const result = await service.findAll({ page: 1, limit: 10 });\n\n      expect(result).toEqual({\n        items: mockCidadaos,\n        meta: {\n          total: 2,\n          page: 1,\n          limit: 10,\n          totalPages: 1,\n        },\n      });\n      expect(mockCidadaoRepository.findAll).toHaveBeenCalledWith({\n        skip: 0,\n        take: 10,\n        where: {},\n      });\n    });\n\n    it('deve aplicar filtros quando fornecidos', async () => {\n      const mockCidadaos = [\n        {\n          id: '1',\n          nome: 'João Silva',\n          cpf: '123.456.789-00',\n          dataNascimento: new Date('1990-01-01'),\n        },\n      ];\n\n      // Mock do método findAll do repositório\n      mockCidadaoRepository.findAll.mockResolvedValue([mockCidadaos, 1]);\n\n      const result = await service.findAll({\n        page: 1,\n        limit: 10,\n        search: 'João',\n        bairro: 'Centro',\n      });\n\n      expect(result).toEqual({\n        items: mockCidadaos,\n        meta: {\n          total: 1,\n          page: 1,\n          limit: 10,\n          totalPages: 1,\n        },\n      });\n\n      // Verificar se o método findAll foi chamado com os parâmetros corretos\n      expect(mockCidadaoRepository.findAll).toHaveBeenCalled();\n      const callArgs = mockCidadaoRepository.findAll.mock.calls[0][0];\n      expect(callArgs.skip).toBe(0);\n      expect(callArgs.take).toBe(10);\n      expect(callArgs.where).toBeDefined();\n    });\n  });\n\n  describe('findById', () => {\n    it('deve retornar um cidadão quando encontrado', async () => {\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        dataNascimento: new Date('1990-01-01'),\n      };\n\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n\n      const result = await service.findById('1');\n\n      expect(result).toEqual(mockCidadao);\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith('1');\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não é encontrado', async () => {\n      mockCidadaoRepository.findById.mockResolvedValue(null);\n\n      await expect(service.findById('999')).rejects.toThrow(NotFoundException);\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith('999');\n    });\n  });\n\n  describe('findByCpf', () => {\n    it('deve retornar um cidadão quando encontrado pelo CPF', async () => {\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        dataNascimento: new Date('1990-01-01'),\n      };\n\n      mockCidadaoRepository.findByCpf.mockResolvedValue(mockCidadao);\n\n      const result = await service.findByCpf('123.456.789-00');\n\n      expect(result).toEqual(mockCidadao);\n      expect(mockCidadaoRepository.findByCpf).toHaveBeenCalledWith(\n        '123.456.789-00',\n      );\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não é encontrado pelo CPF', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(null);\n\n      await expect(service.findByCpf('999.999.999-99')).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockCidadaoRepository.findByCpf).toHaveBeenCalledWith(\n        '999.999.999-99',\n      );\n    });\n  });\n\n  describe('create', () => {\n    it('deve criar um novo cidadão quando os dados são válidos', async () => {\n      const createCidadaoDto = {\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        rg: '1234567',\n        data_nascimento: new Date('1990-01-01'),\n        sexo: Sexo.MASCULINO,\n        renda: 1500,\n        telefone: '(84) 99999-9999',\n        email: 'joao@example.com',\n        endereco: {\n          cep: '59000-000',\n          logradouro: 'Rua Principal',\n          numero: '123',\n          bairro: 'Centro',\n          cidade: 'Natal',\n          estado: 'RN',\n        },\n      };\n\n      const mockCidadao = {\n        id: '1',\n        ...createCidadaoDto,\n      };\n\n      // Simular que o CPF não existe\n      mockCidadaoRepository.findByCpf.mockResolvedValue(null);\n      mockCidadaoRepository.findByNis.mockResolvedValue(null);\n      mockCidadaoRepository.create.mockResolvedValue(mockCidadao);\n\n      const unidadeId = 'unidade-id-1';\n      const result = await service.create(createCidadaoDto, unidadeId);\n\n      expect(result).toEqual(mockCidadao);\n      expect(mockCidadaoRepository.findByCpf).toHaveBeenCalledWith(\n        '123.456.789-00',\n      );\n      expect(mockCidadaoRepository.create).toHaveBeenCalledWith({\n        ...createCidadaoDto,\n        // Adicionar unidadeId quando houver integração com unidades\n      });\n    });\n\n    it('deve lançar ConflictException quando já existe um cidadão com o mesmo CPF', async () => {\n      const createCidadaoDto = {\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        rg: '1234567',\n        data_nascimento: new Date('1990-01-01'),\n        sexo: Sexo.MASCULINO,\n        endereco: {\n          cep: '59000-000',\n          logradouro: 'Rua Principal',\n          numero: '123',\n          bairro: 'Centro',\n          cidade: 'Natal',\n          estado: 'RN',\n        },\n      };\n\n      // Simular que o CPF já existe\n      mockCidadaoRepository.findByCpf.mockResolvedValue({\n        id: '2',\n        cpf: '123.456.789-00',\n        nome: 'Outro Usuário',\n      });\n\n      const unidadeId = 'unidade-id-1';\n\n      await expect(service.create(createCidadaoDto, unidadeId)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(mockCidadaoRepository.findByCpf).toHaveBeenCalledWith(\n        '123.456.789-00',\n      );\n      expect(mockCidadaoRepository.create).not.toHaveBeenCalled();\n      expect(mockCidadaoRepository.save).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('update', () => {\n    it('deve atualizar um cidadão existente', async () => {\n      const updateCidadaoDto = {\n        nome: 'João Silva Atualizado',\n        telefone: '(84) 88888-8888',\n        email: 'joao.atualizado@example.com',\n      };\n\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n        telefone: '(84) 99999-9999',\n        email: 'joao@example.com',\n      };\n\n      const mockUpdatedCidadao = {\n        ...mockCidadao,\n        ...updateCidadaoDto,\n      };\n\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n      mockCidadaoRepository.update.mockResolvedValue(mockUpdatedCidadao);\n\n      const result = await service.update('1', updateCidadaoDto);\n\n      expect(result).toEqual(mockUpdatedCidadao);\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith('1');\n      expect(mockCidadaoRepository.update).toHaveBeenCalledWith(\n        '1',\n        updateCidadaoDto,\n      );\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não existe', async () => {\n      const updateCidadaoDto = {\n        nome: 'João Silva Atualizado',\n      };\n\n      // Simular que o cidadão não existe\n      mockCidadaoRepository.findById.mockResolvedValue(null);\n\n      await expect(service.update('999', updateCidadaoDto)).rejects.toThrow(\n        NotFoundException,\n      );\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith('999');\n      expect(mockCidadaoRepository.update).not.toHaveBeenCalled();\n    });\n\n    it('deve lançar ConflictException quando tenta atualizar para um NIS já existente', async () => {\n      // Usar um DTO válido para atualização\n      const updateCidadaoDto = {\n        nome: 'João Silva',\n        nis: '12345678901',\n        telefone: '(84) 99999-9999',\n      };\n\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        nis: '98765432101',\n      };\n\n      // Buscar o cidadão a ser atualizado\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n      mockCidadaoRepository.findByNis.mockResolvedValue({\n        id: '2',\n        nome: 'Maria Souza',\n        nis: '12345678901',\n      });\n\n      await expect(service.update('1', updateCidadaoDto)).rejects.toThrow(\n        ConflictException,\n      );\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith('1');\n      expect(mockCidadaoRepository.findByNis).toHaveBeenCalledWith(\n        '12345678901',\n      );\n      expect(mockCidadaoRepository.update).not.toHaveBeenCalled();\n    });\n  });\n\n  // O método remove foi substituído por softDelete\n  describe('remove', () => {\n    it('deve remover um cidadão existente (soft delete)', async () => {\n      const mockCidadao = {\n        id: '1',\n        nome: 'João Silva',\n        cpf: '123.456.789-00',\n      };\n\n      // Buscar o cidadão existente\n      mockCidadaoRepository.findById = jest.fn().mockResolvedValue(mockCidadao);\n\n      // Simular soft delete bem-sucedido\n      mockCidadaoRepository.remove = jest.fn().mockResolvedValue(undefined);\n\n      await service.remove('1');\n\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith('1');\n      expect(mockCidadaoRepository.remove).toHaveBeenCalledWith('1');\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não existe', async () => {\n      // Simular que o cidadão não existe\n      mockCidadaoRepository.findById = jest.fn().mockResolvedValue(null);\n\n      await expect(service.remove('999')).rejects.toThrow(NotFoundException);\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith('999');\n      expect(mockCidadaoRepository.remove).not.toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}