{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\regra-conflito-papel.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\controllers\\regra-conflito-papel.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Patch,\n  Delete,\n  UseGuards,\n  Req,\n  HttpCode,\n  HttpStatus,\n  NotFoundException,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { JwtAuthGuard } from '../../../auth/guards/jwt-auth.guard';\nimport { PermissionGuard } from '../../../auth/guards/permission.guard';\nimport { RequiresPermission } from '../../../auth/decorators/requires-permission.decorator';\nimport { RegraConflitoPapelRepository } from '../repositories/regra-conflito-papel.repository';\nimport { RegraConflitoPapel } from '../../../entities/regra-conflito-papel.entity';\nimport {\n  VerificacaoRegraConflitoResponseDto,\n  RegraConflitoResponseDto,\n} from '../dto/verificacao-regra-conflito-response.dto';\n\n/**\n * DTO para criação de regra de conflito\n */\nclass CreateRegraConflitoDto {\n  papel_origem_id: string;\n  papel_destino_id: string;\n  descricao: string;\n  ativo: boolean;\n}\n\n/**\n * DTO para atualização de regra de conflito\n */\nclass UpdateRegraConflitoDto {\n  descricao?: string;\n  ativo?: boolean;\n}\n\n/**\n * Controller de Regras de Conflito de Papéis\n *\n * Responsável por expor os endpoints de gerenciamento das regras de conflito\n * entre papéis de cidadãos no sistema.\n */\n@ApiTags('Cidadão')\n@Controller('cidadao/regra-conflito')\n@UseGuards(JwtAuthGuard, PermissionGuard)\n@ApiBearerAuth()\nexport class RegraConflitoPapelController {\n  constructor(private readonly regraRepository: RegraConflitoPapelRepository) {}\n\n  /**\n   * Cria uma nova regra de conflito\n   * @param createRegraDto Dados da regra\n   * @param req Requisição\n   * @returns Regra criada\n   */\n  @Post()\n  @RequiresPermission({ permissionName: 'cidadao.criar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Cria uma nova regra de conflito',\n    description:\n      'Cria uma regra que define conflito entre dois papéis no sistema.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Regra criada com sucesso',\n    type: RegraConflitoPapel,\n  })\n  async create(\n    @Body() createRegraDto: CreateRegraConflitoDto,\n    @Req() req: any,\n  ): Promise<RegraConflitoPapel> {\n    return this.regraRepository.create({\n      ...createRegraDto,\n      created_by: req.user.id,\n      updated_by: req.user.id,\n    });\n  }\n\n  /**\n   * Busca todas as regras de conflito\n   * @param includeInactive Se deve incluir regras inativas\n   * @returns Lista de regras\n   */\n  @Get()\n  @RequiresPermission({ permissionName: 'cidadao.listar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Busca todas as regras de conflito',\n    description: 'Retorna a lista de todas as regras de conflito entre papéis.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de regras retornada com sucesso',\n    type: [RegraConflitoPapel],\n  })\n  async findAll(@Req() req: any): Promise<RegraConflitoPapel[]> {\n    const includeInactive = req.query.includeInactive === 'true';\n    return this.regraRepository.findAll(includeInactive);\n  }\n\n  /**\n   * Busca uma regra pelo ID\n   * @param id ID da regra\n   * @returns Regra\n   */\n  @Get(':id')\n  @RequiresPermission({ permissionName: 'cidadao.visualizar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Busca uma regra pelo ID',\n    description: 'Retorna os detalhes de uma regra de conflito específica.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Regra encontrada com sucesso',\n    type: RegraConflitoPapel,\n  })\n  async findById(@Param('id') id: string): Promise<RegraConflitoPapel> {\n    const regra = await this.regraRepository.findById(id);\n    if (!regra) {\n      throw new NotFoundException(\n        `Regra de conflito com ID ${id} não encontrada`,\n      );\n    }\n    return regra;\n  }\n\n  /**\n   * Busca regras por papel de origem\n   * @param papelOrigemId ID do papel de origem\n   * @param includeInactive Se deve incluir regras inativas\n   * @returns Lista de regras\n   */\n  @Get('papel-origem/:papelOrigemId')\n  @RequiresPermission({ permissionName: 'cidadao.listar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Busca regras por papel de origem',\n    description:\n      'Retorna a lista de regras de conflito que têm o papel especificado como origem.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de regras retornada com sucesso',\n    type: [RegraConflitoPapel],\n  })\n  async findByPapelOrigem(\n    @Param('papelOrigemId') papelOrigemId: string,\n    @Req() req: any,\n  ): Promise<RegraConflitoPapel[]> {\n    const includeInactive = req.query.includeInactive === 'true';\n    return this.regraRepository.findByPapelOrigem(\n      papelOrigemId,\n      includeInactive,\n    );\n  }\n\n  /**\n   * Busca regras por papel de destino\n   * @param papelDestinoId ID do papel de destino\n   * @param includeInactive Se deve incluir regras inativas\n   * @returns Lista de regras\n   */\n  @Get('papel-destino/:papelDestinoId')\n  @RequiresPermission({ permissionName: 'cidadao.listar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Busca regras por papel de destino',\n    description:\n      'Retorna a lista de regras de conflito que têm o papel especificado como destino.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de regras retornada com sucesso',\n    type: [RegraConflitoPapel],\n  })\n  async findByPapelDestino(\n    @Param('papelDestinoId') papelDestinoId: string,\n    @Req() req: any,\n  ): Promise<RegraConflitoPapel[]> {\n    const includeInactive = req.query.includeInactive === 'true';\n    return this.regraRepository.findByPapelDestino(\n      papelDestinoId,\n      includeInactive,\n    );\n  }\n\n  /**\n   * Verifica se existe conflito entre dois papéis\n   * @param papelOrigemId ID do papel de origem\n   * @param papelDestinoId ID do papel de destino\n   * @returns Resultado da verificação\n   */\n  @Get('verificar/:papelOrigemId/:papelDestinoId')\n  @RequiresPermission({ permissionName: 'cidadao.verificar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Verifica se existe conflito entre dois papéis',\n    description:\n      'Verifica se existe uma regra de conflito entre os papéis especificados.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Verificação realizada com sucesso',\n    type: VerificacaoRegraConflitoResponseDto,\n  })\n  async verificarConflito(\n    @Param('papelOrigemId') papelOrigemId: string,\n    @Param('papelDestinoId') papelDestinoId: string,\n  ): Promise<VerificacaoRegraConflitoResponseDto> {\n    const regra = await this.regraRepository.verificarConflito(\n      papelOrigemId,\n      papelDestinoId,\n    );\n\n    const response: VerificacaoRegraConflitoResponseDto = {\n      possui_conflito: !!regra,\n      regra: regra ? { id: regra.id, descricao: regra.descricao } : null,\n    };\n\n    return response;\n  }\n\n  /**\n   * Atualiza uma regra\n   * @param id ID da regra\n   * @param updateRegraDto Dados para atualização\n   * @param req Requisição\n   * @returns Regra atualizada\n   */\n  @Patch(':id')\n  @RequiresPermission({ permissionName: 'cidadao.atualizar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Atualiza uma regra',\n    description: 'Atualiza os dados de uma regra de conflito existente.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Regra atualizada com sucesso',\n    type: RegraConflitoPapel,\n  })\n  async update(\n    @Param('id') id: string,\n    @Body() updateRegraDto: UpdateRegraConflitoDto,\n    @Req() req: any,\n  ): Promise<RegraConflitoPapel> {\n    return this.regraRepository.update(id, {\n      ...updateRegraDto,\n      updated_by: req.user.id,\n    });\n  }\n\n  /**\n   * Ativa ou desativa uma regra\n   * @param id ID da regra\n   * @param body Corpo da requisição\n   * @param req Requisição\n   * @returns Regra atualizada\n   */\n  @Patch(':id/ativar')\n  @RequiresPermission({ permissionName: 'cidadao.atualizar-regra-conflito' })\n  @ApiOperation({\n    summary: 'Ativa ou desativa uma regra',\n    description: 'Altera o status de ativação de uma regra de conflito.',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Status de ativação atualizado com sucesso',\n    type: RegraConflitoPapel,\n  })\n  async toggleAtivo(\n    @Param('id') id: string,\n    @Body() body: { ativo: boolean },\n    @Req() req: any,\n  ): Promise<RegraConflitoPapel> {\n    await this.regraRepository.update(id, { updated_by: req.user.id });\n    return this.regraRepository.toggleAtivo(id, body.ativo);\n  }\n\n  /**\n   * Remove uma regra\n   * @param id ID da regra\n   * @returns void\n   */\n  @Delete(':id')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  @RequiresPermission({ permissionName: 'cidadao.remover-regra-conflito' })\n  @ApiOperation({\n    summary: 'Remove uma regra',\n    description: 'Remove permanentemente uma regra de conflito.',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Regra removida com sucesso',\n  })\n  async remove(@Param('id') id: string): Promise<void> {\n    return this.regraRepository.remove(id);\n  }\n}\n"],"version":3}