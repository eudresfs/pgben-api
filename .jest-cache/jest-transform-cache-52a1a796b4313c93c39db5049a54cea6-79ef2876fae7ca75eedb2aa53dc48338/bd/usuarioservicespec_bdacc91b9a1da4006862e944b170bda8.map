{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\services\\usuario.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\usuario\\services\\usuario.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { UsuarioService } from './usuario.service';\nimport { UsuarioRepository } from '../repositories/usuario.repository';\nimport { DataSource } from 'typeorm';\nimport { UsuarioError } from '../errors/usuario.errors';\nimport { Usuario } from '../entities/usuario.entity';\n\n// Mock do bcrypt\njest.mock('bcrypt', () => ({\n  hash: jest.fn().mockResolvedValue('hashedPassword'),\n  compare: jest.fn().mockResolvedValue(true),\n}));\n\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Testes unitários para o UsuarioService\n *\n * Cobertura de testes:\n * - Criação de usuários\n * - Busca de usuários\n * - Atualização de dados\n * - Validação de credenciais\n * - Sistema de bloqueio por tentativas\n * - Remoção de usuários\n */\ndescribe('UsuarioService', () => {\n  let service: UsuarioService;\n  let repository: jest.Mocked<UsuarioRepository>;\n  let dataSource: jest.Mocked<DataSource>;\n\n  const mockUsuario = {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    nome: 'João Silva',\n    email: 'joao.silva@semtas.natal.gov.br',\n    cpf: '12345678901',\n    telefone: '(84) 99999-9999',\n    matricula: 'SEMTAS001',\n    senhaHash: 'hashedPassword',\n    role_id: 'role-id',\n    role: null,\n    unidadeId: 'unidade-id',\n    unidade: null,\n    setorId: 'setor-id',\n    setor: null,\n    status: 'ativo',\n    primeiro_acesso: true,\n    ultimo_login: null,\n    tentativas_login: 0,\n    created_at: new Date(),\n    updated_at: new Date(),\n    removed_at: null,\n    refreshTokens: [],\n  } as any;\n\n  beforeEach(async () => {\n    const mockRepository = {\n      findAll: jest.fn(),\n      findById: jest.fn(),\n      findByEmail: jest.fn(),\n      findByCpf: jest.fn(),\n      findByMatricula: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      updateStatus: jest.fn(),\n      updateSenha: jest.fn(),\n      remove: jest.fn(),\n    };\n\n    const mockDataSource = {\n      transaction: jest\n        .fn()\n        .mockImplementation((callbackOrIsolation, callback) => {\n          // Se apenas um parâmetro for passado, é o callback\n          if (typeof callbackOrIsolation === 'function') {\n            return callbackOrIsolation({});\n          }\n          // Se dois parâmetros, o segundo é o callback\n          return callback({});\n        }),\n      getRepository: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        UsuarioService,\n        {\n          provide: UsuarioRepository,\n          useValue: mockRepository,\n        },\n        {\n          provide: DataSource,\n          useValue: mockDataSource,\n        },\n      ],\n    }).compile();\n\n    service = module.get<UsuarioService>(UsuarioService);\n    repository = module.get(UsuarioRepository);\n    dataSource = module.get(DataSource);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('findById', () => {\n    it('deve retornar um usuário quando encontrado', async () => {\n      repository.findById.mockResolvedValue(mockUsuario);\n\n      const result = await service.findById(\n        '123e4567-e89b-12d3-a456-426614174000',\n      );\n\n      // O service remove a senhaHash do retorno\n      const { senhaHash, ...expectedResult } = mockUsuario;\n      expect(result).toEqual(expectedResult);\n      expect(repository.findById).toHaveBeenCalledWith(\n        '123e4567-e89b-12d3-a456-426614174000',\n      );\n    });\n\n    it('deve lançar UsuarioError quando usuário não encontrado', async () => {\n      repository.findById.mockRejectedValue(\n        new UsuarioError('USUARIO_NOT_FOUND', 'Usuário não encontrado', {\n          id: 'invalid-id',\n        }),\n      );\n\n      await expect(service.findById('invalid-id')).rejects.toThrow(\n        UsuarioError,\n      );\n    });\n  });\n\n  describe('findByEmail', () => {\n    it('deve retornar usuário quando email existe', async () => {\n      repository.findByEmail.mockResolvedValue(mockUsuario);\n\n      const result = await service.findByEmail(\n        'joao.silva@semtas.natal.gov.br',\n      );\n\n      expect(result).toEqual(mockUsuario);\n      expect(repository.findByEmail).toHaveBeenCalledWith(\n        'joao.silva@semtas.natal.gov.br',\n      );\n    });\n\n    it('deve normalizar email para minúsculas', async () => {\n      repository.findByEmail.mockResolvedValue(mockUsuario);\n\n      await service.findByEmail('JOAO.SILVA@SEMTAS.NATAL.GOV.BR');\n\n      expect(repository.findByEmail).toHaveBeenCalledWith(\n        'joao.silva@semtas.natal.gov.br',\n      );\n    });\n\n    it('deve retornar null quando email não existe', async () => {\n      repository.findByEmail.mockResolvedValue(null);\n\n      const result = await service.findByEmail('inexistente@email.com');\n\n      expect(result).toBeNull();\n    });\n  });\n\n  describe('validateUserCredentials', () => {\n    beforeEach(() => {\n      jest\n        .spyOn(bcrypt, 'compare')\n        .mockImplementation(() => Promise.resolve(true));\n    });\n\n    it('deve retornar usuário quando credenciais são válidas', async () => {\n      const usuarioAtivo = { ...mockUsuario, tentativas_login: 0 };\n      repository.findByEmail.mockResolvedValue(usuarioAtivo);\n      repository.updateStatus.mockResolvedValue(usuarioAtivo);\n\n      const mockTransaction = jest.fn().mockImplementation((callback) => {\n        const mockManager = {\n          getRepository: jest.fn().mockReturnValue({\n            update: jest.fn().mockResolvedValue({}),\n          }),\n        };\n        return callback(mockManager);\n      });\n      dataSource.transaction.mockImplementation(mockTransaction);\n\n      const result = await service.validateUserCredentials(\n        'joao.silva@semtas.natal.gov.br',\n        'senha123',\n      );\n\n      expect(result).toEqual(usuarioAtivo);\n    });\n\n    it('deve retornar null quando email não existe', async () => {\n      repository.findByEmail.mockResolvedValue(null);\n\n      const result = await service.validateUserCredentials(\n        'inexistente@email.com',\n        'senha123',\n      );\n\n      expect(result).toBeNull();\n    });\n\n    it('deve lançar UsuarioError quando usuário está bloqueado', async () => {\n      const usuarioBloqueado = {\n        ...mockUsuario,\n        tentativas_login: 5,\n        ultimo_login: new Date(), // Tentativa recente\n      };\n      repository.findByEmail.mockResolvedValue(usuarioBloqueado);\n\n      await expect(\n        service.validateUserCredentials(\n          'joao.silva@semtas.natal.gov.br',\n          'senha123',\n        ),\n      ).rejects.toThrow(UsuarioError);\n    });\n\n    it('deve retornar null e incrementar tentativas quando senha é inválida', async () => {\n      jest\n        .spyOn(bcrypt, 'compare')\n        .mockImplementation(() => Promise.resolve(false));\n      repository.findByEmail.mockResolvedValue(mockUsuario);\n\n      const mockTransaction = jest.fn().mockImplementation((callback) => {\n        const mockManager = {\n          getRepository: jest.fn().mockReturnValue({\n            increment: jest.fn().mockResolvedValue({}),\n            update: jest.fn().mockResolvedValue({}),\n          }),\n        };\n        return callback(mockManager);\n      });\n      dataSource.transaction.mockImplementation(mockTransaction);\n\n      const result = await service.validateUserCredentials(\n        'joao.silva@semtas.natal.gov.br',\n        'senhaerrada',\n      );\n\n      expect(result).toBeNull();\n      expect(dataSource.transaction).toHaveBeenCalled();\n    });\n  });\n\n  describe('create', () => {\n    const createUsuarioDto = {\n      nome: 'João da Silva',\n      email: 'joao.silva@semtas.natal.gov.br',\n      senha: 'Senha@123',\n      cpf: '123.456.789-00',\n      telefone: '(84) 99999-9999',\n      matricula: '12345',\n      role_id: 'ASSISTENTE_SOCIAL',\n      unidadeId: 'unidade-123',\n      setorId: 'setor-123',\n    };\n\n    it('deve criar usuário com sucesso', async () => {\n      const mockManager = {\n        getRepository: jest.fn().mockImplementation((entity) => {\n          if (entity === 'usuario') {\n            return {\n              findOne: jest.fn().mockResolvedValue(null),\n              create: jest.fn().mockReturnValue(mockUsuario),\n              save: jest.fn().mockResolvedValue(mockUsuario),\n            };\n          }\n          if (entity === 'unidade') {\n            return {\n              findOne: jest.fn().mockResolvedValue({ id: 'unidade-123' }),\n            };\n          }\n          if (entity === 'setor') {\n            return {\n              findOne: jest.fn().mockResolvedValue({ id: 'setor-123' }),\n            };\n          }\n        }),\n      };\n\n      (dataSource.transaction as jest.Mock).mockImplementationOnce((callback) =>\n        callback(mockManager),\n      );\n\n      const result = await service.create(createUsuarioDto);\n\n      expect(result.data).toBeDefined();\n      expect(dataSource.transaction).toHaveBeenCalled();\n    });\n\n    it('deve lançar UsuarioError quando email já existe', async () => {\n      const mockManager = {\n        getRepository: jest.fn().mockImplementation((entity) => {\n          if (entity === 'usuario') {\n            return {\n              findOne: jest.fn().mockResolvedValue(mockUsuario),\n            };\n          }\n        }),\n      };\n\n      (dataSource.transaction as jest.Mock).mockImplementationOnce((callback) =>\n        callback(mockManager),\n      );\n\n      await expect(service.create(createUsuarioDto)).rejects.toThrow(\n        UsuarioError,\n      );\n    });\n\n    it('deve lançar UsuarioError quando CPF já existe', async () => {\n      const mockManager = {\n        getRepository: jest.fn().mockImplementation((entity) => {\n          if (entity === 'usuario') {\n            return {\n              findOne: jest.fn().mockImplementation((options) => {\n                if (options.where.email) {\n                  return null;\n                }\n                if (options.where.cpf) {\n                  return mockUsuario;\n                }\n                return null;\n              }),\n            };\n          }\n        }),\n      };\n\n      (dataSource.transaction as jest.Mock).mockImplementationOnce((callback) =>\n        callback(mockManager),\n      );\n\n      await expect(service.create(createUsuarioDto)).rejects.toThrow(\n        'CPF já está em uso',\n      );\n    });\n\n    it('deve lançar UsuarioError quando matrícula já existe', async () => {\n      const mockManager = {\n        getRepository: jest.fn().mockImplementation((entity) => {\n          if (entity === 'usuario') {\n            return {\n              findOne: jest.fn().mockImplementation((options) => {\n                if (options.where.email) {\n                  return null;\n                }\n                if (options.where.cpf) {\n                  return null;\n                }\n                if (options.where.matricula) {\n                  return mockUsuario;\n                }\n                return null;\n              }),\n            };\n          }\n        }),\n      };\n\n      (dataSource.transaction as jest.Mock).mockImplementationOnce((callback) =>\n        callback(mockManager),\n      );\n\n      await expect(service.create(createUsuarioDto)).rejects.toThrow(\n        UsuarioError,\n      );\n    });\n  });\n\n  describe('remove', () => {\n    it('deve remover usuário com sucesso', async () => {\n      repository.findById.mockResolvedValue(mockUsuario);\n      repository.remove.mockResolvedValue();\n\n      await service.remove('123e4567-e89b-12d3-a456-426614174000');\n\n      expect(repository.remove).toHaveBeenCalledWith(\n        '123e4567-e89b-12d3-a456-426614174000',\n      );\n    });\n\n    it('deve lançar UsuarioError quando usuário não existe', async () => {\n      repository.findById.mockRejectedValue(\n        new UsuarioError('USUARIO_NOT_FOUND', 'Usuário não encontrado', {\n          id: 'invalid-id',\n        }),\n      );\n\n      await expect(service.remove('invalid-id')).rejects.toThrow(UsuarioError);\n    });\n  });\n\n  describe('getProfile', () => {\n    it('deve retornar perfil do usuário', async () => {\n      repository.findById.mockResolvedValue(mockUsuario);\n\n      const result = await service.getProfile(\n        '123e4567-e89b-12d3-a456-426614174000',\n      );\n\n      // O service remove a senhaHash do retorno\n      const { senhaHash, ...expectedResult } = mockUsuario;\n      expect(result).toEqual(expectedResult);\n    });\n  });\n});\n"],"version":3}