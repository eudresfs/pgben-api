086794615b3cbf7bf9732b5ad42e9511
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock do bcrypt
jest.mock('bcrypt', () => ({
    hash: jest.fn().mockResolvedValue('hashedPassword'),
    compare: jest.fn().mockResolvedValue(true),
}));
const testing_1 = require("@nestjs/testing");
const usuario_service_1 = require("./usuario.service");
const usuario_repository_1 = require("../repositories/usuario.repository");
const typeorm_1 = require("typeorm");
const usuario_errors_1 = require("../errors/usuario.errors");
const bcrypt = __importStar(require("bcrypt"));
/**
 * Testes unitários para o UsuarioService
 *
 * Cobertura de testes:
 * - Criação de usuários
 * - Busca de usuários
 * - Atualização de dados
 * - Validação de credenciais
 * - Sistema de bloqueio por tentativas
 * - Remoção de usuários
 */
describe('UsuarioService', () => {
    let service;
    let repository;
    let dataSource;
    const mockUsuario = {
        id: '123e4567-e89b-12d3-a456-426614174000',
        nome: 'João Silva',
        email: 'joao.silva@semtas.natal.gov.br',
        cpf: '12345678901',
        telefone: '(84) 99999-9999',
        matricula: 'SEMTAS001',
        senhaHash: 'hashedPassword',
        role_id: 'role-id',
        role: null,
        unidadeId: 'unidade-id',
        unidade: null,
        setorId: 'setor-id',
        setor: null,
        status: 'ativo',
        primeiro_acesso: true,
        ultimo_login: null,
        tentativas_login: 0,
        created_at: new Date(),
        updated_at: new Date(),
        removed_at: null,
        refreshTokens: [],
    };
    beforeEach(async () => {
        const mockRepository = {
            findAll: jest.fn(),
            findById: jest.fn(),
            findByEmail: jest.fn(),
            findByCpf: jest.fn(),
            findByMatricula: jest.fn(),
            create: jest.fn(),
            update: jest.fn(),
            updateStatus: jest.fn(),
            updateSenha: jest.fn(),
            remove: jest.fn(),
        };
        const mockDataSource = {
            transaction: jest
                .fn()
                .mockImplementation((callbackOrIsolation, callback) => {
                // Se apenas um parâmetro for passado, é o callback
                if (typeof callbackOrIsolation === 'function') {
                    return callbackOrIsolation({});
                }
                // Se dois parâmetros, o segundo é o callback
                return callback({});
            }),
            getRepository: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                usuario_service_1.UsuarioService,
                {
                    provide: usuario_repository_1.UsuarioRepository,
                    useValue: mockRepository,
                },
                {
                    provide: typeorm_1.DataSource,
                    useValue: mockDataSource,
                },
            ],
        }).compile();
        service = module.get(usuario_service_1.UsuarioService);
        repository = module.get(usuario_repository_1.UsuarioRepository);
        dataSource = module.get(typeorm_1.DataSource);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('findById', () => {
        it('deve retornar um usuário quando encontrado', async () => {
            repository.findById.mockResolvedValue(mockUsuario);
            const result = await service.findById('123e4567-e89b-12d3-a456-426614174000');
            // O service remove a senhaHash do retorno
            const { senhaHash, ...expectedResult } = mockUsuario;
            expect(result).toEqual(expectedResult);
            expect(repository.findById).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000');
        });
        it('deve lançar UsuarioError quando usuário não encontrado', async () => {
            repository.findById.mockRejectedValue(new usuario_errors_1.UsuarioError('USUARIO_NOT_FOUND', 'Usuário não encontrado', {
                id: 'invalid-id',
            }));
            await expect(service.findById('invalid-id')).rejects.toThrow(usuario_errors_1.UsuarioError);
        });
    });
    describe('findByEmail', () => {
        it('deve retornar usuário quando email existe', async () => {
            repository.findByEmail.mockResolvedValue(mockUsuario);
            const result = await service.findByEmail('joao.silva@semtas.natal.gov.br');
            expect(result).toEqual(mockUsuario);
            expect(repository.findByEmail).toHaveBeenCalledWith('joao.silva@semtas.natal.gov.br');
        });
        it('deve normalizar email para minúsculas', async () => {
            repository.findByEmail.mockResolvedValue(mockUsuario);
            await service.findByEmail('JOAO.SILVA@SEMTAS.NATAL.GOV.BR');
            expect(repository.findByEmail).toHaveBeenCalledWith('joao.silva@semtas.natal.gov.br');
        });
        it('deve retornar null quando email não existe', async () => {
            repository.findByEmail.mockResolvedValue(null);
            const result = await service.findByEmail('inexistente@email.com');
            expect(result).toBeNull();
        });
    });
    describe('validateUserCredentials', () => {
        beforeEach(() => {
            jest
                .spyOn(bcrypt, 'compare')
                .mockImplementation(() => Promise.resolve(true));
        });
        it('deve retornar usuário quando credenciais são válidas', async () => {
            const usuarioAtivo = { ...mockUsuario, tentativas_login: 0 };
            repository.findByEmail.mockResolvedValue(usuarioAtivo);
            repository.updateStatus.mockResolvedValue(usuarioAtivo);
            const mockTransaction = jest.fn().mockImplementation((callback) => {
                const mockManager = {
                    getRepository: jest.fn().mockReturnValue({
                        update: jest.fn().mockResolvedValue({}),
                    }),
                };
                return callback(mockManager);
            });
            dataSource.transaction.mockImplementation(mockTransaction);
            const result = await service.validateUserCredentials('joao.silva@semtas.natal.gov.br', 'senha123');
            expect(result).toEqual(usuarioAtivo);
        });
        it('deve retornar null quando email não existe', async () => {
            repository.findByEmail.mockResolvedValue(null);
            const result = await service.validateUserCredentials('inexistente@email.com', 'senha123');
            expect(result).toBeNull();
        });
        it('deve lançar UsuarioError quando usuário está bloqueado', async () => {
            const usuarioBloqueado = {
                ...mockUsuario,
                tentativas_login: 5,
                ultimo_login: new Date(), // Tentativa recente
            };
            repository.findByEmail.mockResolvedValue(usuarioBloqueado);
            await expect(service.validateUserCredentials('joao.silva@semtas.natal.gov.br', 'senha123')).rejects.toThrow(usuario_errors_1.UsuarioError);
        });
        it('deve retornar null e incrementar tentativas quando senha é inválida', async () => {
            jest
                .spyOn(bcrypt, 'compare')
                .mockImplementation(() => Promise.resolve(false));
            repository.findByEmail.mockResolvedValue(mockUsuario);
            const mockTransaction = jest.fn().mockImplementation((callback) => {
                const mockManager = {
                    getRepository: jest.fn().mockReturnValue({
                        increment: jest.fn().mockResolvedValue({}),
                        update: jest.fn().mockResolvedValue({}),
                    }),
                };
                return callback(mockManager);
            });
            dataSource.transaction.mockImplementation(mockTransaction);
            const result = await service.validateUserCredentials('joao.silva@semtas.natal.gov.br', 'senhaerrada');
            expect(result).toBeNull();
            expect(dataSource.transaction).toHaveBeenCalled();
        });
    });
    describe('create', () => {
        const createUsuarioDto = {
            nome: 'João da Silva',
            email: 'joao.silva@semtas.natal.gov.br',
            senha: 'Senha@123',
            cpf: '123.456.789-00',
            telefone: '(84) 99999-9999',
            matricula: '12345',
            role_id: 'ASSISTENTE_SOCIAL',
            unidadeId: 'unidade-123',
            setorId: 'setor-123',
        };
        it('deve criar usuário com sucesso', async () => {
            const mockManager = {
                getRepository: jest.fn().mockImplementation((entity) => {
                    if (entity === 'usuario') {
                        return {
                            findOne: jest.fn().mockResolvedValue(null),
                            create: jest.fn().mockReturnValue(mockUsuario),
                            save: jest.fn().mockResolvedValue(mockUsuario),
                        };
                    }
                    if (entity === 'unidade') {
                        return {
                            findOne: jest.fn().mockResolvedValue({ id: 'unidade-123' }),
                        };
                    }
                    if (entity === 'setor') {
                        return {
                            findOne: jest.fn().mockResolvedValue({ id: 'setor-123' }),
                        };
                    }
                }),
            };
            dataSource.transaction.mockImplementationOnce((callback) => callback(mockManager));
            const result = await service.create(createUsuarioDto);
            expect(result.data).toBeDefined();
            expect(dataSource.transaction).toHaveBeenCalled();
        });
        it('deve lançar UsuarioError quando email já existe', async () => {
            const mockManager = {
                getRepository: jest.fn().mockImplementation((entity) => {
                    if (entity === 'usuario') {
                        return {
                            findOne: jest.fn().mockResolvedValue(mockUsuario),
                        };
                    }
                }),
            };
            dataSource.transaction.mockImplementationOnce((callback) => callback(mockManager));
            await expect(service.create(createUsuarioDto)).rejects.toThrow(usuario_errors_1.UsuarioError);
        });
        it('deve lançar UsuarioError quando CPF já existe', async () => {
            const mockManager = {
                getRepository: jest.fn().mockImplementation((entity) => {
                    if (entity === 'usuario') {
                        return {
                            findOne: jest.fn().mockImplementation((options) => {
                                if (options.where.email) {
                                    return null;
                                }
                                if (options.where.cpf) {
                                    return mockUsuario;
                                }
                                return null;
                            }),
                        };
                    }
                }),
            };
            dataSource.transaction.mockImplementationOnce((callback) => callback(mockManager));
            await expect(service.create(createUsuarioDto)).rejects.toThrow('CPF já está em uso');
        });
        it('deve lançar UsuarioError quando matrícula já existe', async () => {
            const mockManager = {
                getRepository: jest.fn().mockImplementation((entity) => {
                    if (entity === 'usuario') {
                        return {
                            findOne: jest.fn().mockImplementation((options) => {
                                if (options.where.email) {
                                    return null;
                                }
                                if (options.where.cpf) {
                                    return null;
                                }
                                if (options.where.matricula) {
                                    return mockUsuario;
                                }
                                return null;
                            }),
                        };
                    }
                }),
            };
            dataSource.transaction.mockImplementationOnce((callback) => callback(mockManager));
            await expect(service.create(createUsuarioDto)).rejects.toThrow(usuario_errors_1.UsuarioError);
        });
    });
    describe('remove', () => {
        it('deve remover usuário com sucesso', async () => {
            repository.findById.mockResolvedValue(mockUsuario);
            repository.remove.mockResolvedValue();
            await service.remove('123e4567-e89b-12d3-a456-426614174000');
            expect(repository.remove).toHaveBeenCalledWith('123e4567-e89b-12d3-a456-426614174000');
        });
        it('deve lançar UsuarioError quando usuário não existe', async () => {
            repository.findById.mockRejectedValue(new usuario_errors_1.UsuarioError('USUARIO_NOT_FOUND', 'Usuário não encontrado', {
                id: 'invalid-id',
            }));
            await expect(service.remove('invalid-id')).rejects.toThrow(usuario_errors_1.UsuarioError);
        });
    });
    describe('getProfile', () => {
        it('deve retornar perfil do usuário', async () => {
            repository.findById.mockResolvedValue(mockUsuario);
            const result = await service.getProfile('123e4567-e89b-12d3-a456-426614174000');
            // O service remove a senhaHash do retorno
            const { senhaHash, ...expectedResult } = mockUsuario;
            expect(result).toEqual(expectedResult);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,