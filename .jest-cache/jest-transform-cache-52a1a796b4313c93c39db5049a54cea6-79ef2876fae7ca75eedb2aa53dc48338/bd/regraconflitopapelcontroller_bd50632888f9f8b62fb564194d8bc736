e5ede7faae99d94968a582bfa432f5cb
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegraConflitoPapelController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const regra_conflito_papel_repository_1 = require("../repositories/regra-conflito-papel.repository");
const regra_conflito_papel_entity_1 = require("../../../entities/regra-conflito-papel.entity");
const verificacao_regra_conflito_response_dto_1 = require("../dto/verificacao-regra-conflito-response.dto");
/**
 * DTO para criação de regra de conflito
 */
class CreateRegraConflitoDto {
    papel_origem_id;
    papel_destino_id;
    descricao;
    ativo;
}
/**
 * DTO para atualização de regra de conflito
 */
class UpdateRegraConflitoDto {
    descricao;
    ativo;
}
/**
 * Controller de Regras de Conflito de Papéis
 *
 * Responsável por expor os endpoints de gerenciamento das regras de conflito
 * entre papéis de cidadãos no sistema.
 */
let RegraConflitoPapelController = class RegraConflitoPapelController {
    regraRepository;
    constructor(regraRepository) {
        this.regraRepository = regraRepository;
    }
    /**
     * Cria uma nova regra de conflito
     * @param createRegraDto Dados da regra
     * @param req Requisição
     * @returns Regra criada
     */
    async create(createRegraDto, req) {
        return this.regraRepository.create({
            ...createRegraDto,
            created_by: req.user.id,
            updated_by: req.user.id,
        });
    }
    /**
     * Busca todas as regras de conflito
     * @param includeInactive Se deve incluir regras inativas
     * @returns Lista de regras
     */
    async findAll(req) {
        const includeInactive = req.query.includeInactive === 'true';
        return this.regraRepository.findAll(includeInactive);
    }
    /**
     * Busca uma regra pelo ID
     * @param id ID da regra
     * @returns Regra
     */
    async findById(id) {
        const regra = await this.regraRepository.findById(id);
        if (!regra) {
            throw new common_1.NotFoundException(`Regra de conflito com ID ${id} não encontrada`);
        }
        return regra;
    }
    /**
     * Busca regras por papel de origem
     * @param papelOrigemId ID do papel de origem
     * @param includeInactive Se deve incluir regras inativas
     * @returns Lista de regras
     */
    async findByPapelOrigem(papelOrigemId, req) {
        const includeInactive = req.query.includeInactive === 'true';
        return this.regraRepository.findByPapelOrigem(papelOrigemId, includeInactive);
    }
    /**
     * Busca regras por papel de destino
     * @param papelDestinoId ID do papel de destino
     * @param includeInactive Se deve incluir regras inativas
     * @returns Lista de regras
     */
    async findByPapelDestino(papelDestinoId, req) {
        const includeInactive = req.query.includeInactive === 'true';
        return this.regraRepository.findByPapelDestino(papelDestinoId, includeInactive);
    }
    /**
     * Verifica se existe conflito entre dois papéis
     * @param papelOrigemId ID do papel de origem
     * @param papelDestinoId ID do papel de destino
     * @returns Resultado da verificação
     */
    async verificarConflito(papelOrigemId, papelDestinoId) {
        const regra = await this.regraRepository.verificarConflito(papelOrigemId, papelDestinoId);
        const response = {
            possui_conflito: !!regra,
            regra: regra ? { id: regra.id, descricao: regra.descricao } : null,
        };
        return response;
    }
    /**
     * Atualiza uma regra
     * @param id ID da regra
     * @param updateRegraDto Dados para atualização
     * @param req Requisição
     * @returns Regra atualizada
     */
    async update(id, updateRegraDto, req) {
        return this.regraRepository.update(id, {
            ...updateRegraDto,
            updated_by: req.user.id,
        });
    }
    /**
     * Ativa ou desativa uma regra
     * @param id ID da regra
     * @param body Corpo da requisição
     * @param req Requisição
     * @returns Regra atualizada
     */
    async toggleAtivo(id, body, req) {
        await this.regraRepository.update(id, { updated_by: req.user.id });
        return this.regraRepository.toggleAtivo(id, body.ativo);
    }
    /**
     * Remove uma regra
     * @param id ID da regra
     * @returns void
     */
    async remove(id) {
        return this.regraRepository.remove(id);
    }
};
exports.RegraConflitoPapelController = RegraConflitoPapelController;
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.criar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Cria uma nova regra de conflito',
        description: 'Cria uma regra que define conflito entre dois papéis no sistema.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Regra criada com sucesso',
        type: regra_conflito_papel_entity_1.RegraConflitoPapel,
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [CreateRegraConflitoDto, Object]),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], RegraConflitoPapelController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.listar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Busca todas as regras de conflito',
        description: 'Retorna a lista de todas as regras de conflito entre papéis.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de regras retornada com sucesso',
        type: [regra_conflito_papel_entity_1.RegraConflitoPapel],
    }),
    __param(0, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], RegraConflitoPapelController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.visualizar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Busca uma regra pelo ID',
        description: 'Retorna os detalhes de uma regra de conflito específica.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Regra encontrada com sucesso',
        type: regra_conflito_papel_entity_1.RegraConflitoPapel,
    }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], RegraConflitoPapelController.prototype, "findById", null);
__decorate([
    (0, common_1.Get)('papel-origem/:papelOrigemId'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.listar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Busca regras por papel de origem',
        description: 'Retorna a lista de regras de conflito que têm o papel especificado como origem.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de regras retornada com sucesso',
        type: [regra_conflito_papel_entity_1.RegraConflitoPapel],
    }),
    __param(0, (0, common_1.Param)('papelOrigemId')),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], RegraConflitoPapelController.prototype, "findByPapelOrigem", null);
__decorate([
    (0, common_1.Get)('papel-destino/:papelDestinoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.listar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Busca regras por papel de destino',
        description: 'Retorna a lista de regras de conflito que têm o papel especificado como destino.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de regras retornada com sucesso',
        type: [regra_conflito_papel_entity_1.RegraConflitoPapel],
    }),
    __param(0, (0, common_1.Param)('papelDestinoId')),
    __param(1, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], RegraConflitoPapelController.prototype, "findByPapelDestino", null);
__decorate([
    (0, common_1.Get)('verificar/:papelOrigemId/:papelDestinoId'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.verificar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Verifica se existe conflito entre dois papéis',
        description: 'Verifica se existe uma regra de conflito entre os papéis especificados.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Verificação realizada com sucesso',
        type: verificacao_regra_conflito_response_dto_1.VerificacaoRegraConflitoResponseDto,
    }),
    __param(0, (0, common_1.Param)('papelOrigemId')),
    __param(1, (0, common_1.Param)('papelDestinoId')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], RegraConflitoPapelController.prototype, "verificarConflito", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.atualizar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Atualiza uma regra',
        description: 'Atualiza os dados de uma regra de conflito existente.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Regra atualizada com sucesso',
        type: regra_conflito_papel_entity_1.RegraConflitoPapel,
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, UpdateRegraConflitoDto, Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], RegraConflitoPapelController.prototype, "update", null);
__decorate([
    (0, common_1.Patch)(':id/ativar'),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.atualizar-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Ativa ou desativa uma regra',
        description: 'Altera o status de ativação de uma regra de conflito.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status de ativação atualizado com sucesso',
        type: regra_conflito_papel_entity_1.RegraConflitoPapel,
    }),
    __param(0, (0, common_1.Param)('id')),
    __param(1, (0, common_1.Body)()),
    __param(2, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], RegraConflitoPapelController.prototype, "toggleAtivo", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, requires_permission_decorator_1.RequiresPermission)({ permissionName: 'cidadao.remover-regra-conflito' }),
    (0, swagger_1.ApiOperation)({
        summary: 'Remove uma regra',
        description: 'Remove permanentemente uma regra de conflito.',
    }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Regra removida com sucesso',
    }),
    __param(0, (0, common_1.Param)('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], RegraConflitoPapelController.prototype, "remove", null);
exports.RegraConflitoPapelController = RegraConflitoPapelController = __decorate([
    (0, swagger_1.ApiTags)('Cidadão'),
    (0, common_1.Controller)('cidadao/regra-conflito'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof regra_conflito_papel_repository_1.RegraConflitoPapelRepository !== "undefined" && regra_conflito_papel_repository_1.RegraConflitoPapelRepository) === "function" ? _a : Object])
], RegraConflitoPapelController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,