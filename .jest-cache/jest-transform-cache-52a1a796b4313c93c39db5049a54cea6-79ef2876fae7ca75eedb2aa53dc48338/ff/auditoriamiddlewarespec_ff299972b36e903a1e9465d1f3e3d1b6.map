{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\middlewares\\auditoria.middleware.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auditoria\\middlewares\\auditoria.middleware.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuditoriaMiddleware } from '../../../../src/modules/auditoria/middlewares/auditoria.middleware';\nimport { AuditoriaService } from '../../../../src/modules/auditoria/services/auditoria.service';\nimport { AuditoriaQueueService } from '../../../../src/modules/auditoria/services/auditoria-queue.service';\nimport { TipoOperacao } from '../../../../src/modules/auditoria/enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../../../../src/modules/auditoria/dto/create-log-auditoria.dto';\nimport { NextFunction, Request, Response } from 'express';\n\ndescribe('AuditoriaMiddleware', () => {\n  let middleware: AuditoriaMiddleware;\n  let auditoriaService: AuditoriaService;\n  let auditoriaQueueService: AuditoriaQueueService;\n\n  const mockRequest = () => {\n    const req: Partial<Request> = {\n      method: 'GET',\n      originalUrl: '/api/v1/usuarios',\n      body: {},\n      user: { id: 'mock-user-id', nome: 'UsuÃ¡rio Teste' },\n      ip: '192.168.1.1',\n      headers: {\n        'user-agent':\n          'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n      },\n    };\n    return req as Request;\n  };\n\n  const mockResponse = () => {\n    const res: Partial<Response> = {\n      statusCode: 200,\n      locals: {},\n      on: jest.fn().mockImplementation((event, callback) => {\n        if (event === 'finish') {\n          callback();\n        }\n        return res;\n      }),\n      send: jest.fn().mockImplementation(function (body) {\n        this.locals.responseBody = body;\n        return this;\n      }),\n    };\n    return res as Response;\n  };\n\n  const mockNext: NextFunction = jest.fn();\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuditoriaMiddleware,\n        {\n          provide: AuditoriaService,\n          useValue: {\n            create: jest.fn().mockResolvedValue({ id: 'mock-log-id' }),\n            findAll: jest.fn().mockResolvedValue([]),\n            findOne: jest.fn().mockResolvedValue({}),\n            update: jest.fn().mockResolvedValue({}),\n            remove: jest.fn().mockResolvedValue({}),\n          },\n        },\n        {\n          provide: AuditoriaQueueService,\n          useValue: {\n            enfileirarLogAuditoria: jest\n              .fn()\n              .mockResolvedValue({ id: 'mock-job-id' }),\n            enfileirarAcessoDadosSensiveis: jest\n              .fn()\n              .mockResolvedValue({ id: 'mock-sensitive-job-id' }),\n          },\n        },\n      ],\n    }).compile();\n\n    middleware = module.get<AuditoriaMiddleware>(AuditoriaMiddleware);\n    auditoriaService = module.get<AuditoriaService>(AuditoriaService);\n    auditoriaQueueService = module.get<AuditoriaQueueService>(\n      AuditoriaQueueService,\n    );\n  });\n\n  it('deve ser definido', () => {\n    expect(middleware).toBeDefined();\n  });\n\n  it('deve chamar next() quando executado', async () => {\n    await middleware.use(mockRequest(), mockResponse(), mockNext);\n    expect(mockNext).toHaveBeenCalled();\n  });\n\n  it('deve enfileirar log de auditoria quando a requisiÃ§Ã£o Ã© bem-sucedida', async () => {\n    const req = mockRequest();\n    const res = mockResponse();\n\n    await middleware.use(req, res, mockNext);\n\n    // Simula a resposta sendo finalizada\n    res.on('finish', () => {});\n\n    expect(auditoriaQueueService.enfileirarLogAuditoria).toHaveBeenCalled();\n\n    // Verifica se o tipo de operaÃ§Ã£o foi mapeado corretamente\n    const callArgs = (auditoriaQueueService.enfileirarLogAuditoria as jest.Mock)\n      .mock.calls[0][0];\n    expect(callArgs.tipo_operacao).toBe(TipoOperacao.READ);\n    expect(callArgs.entidade_afetada).toBe('Usuario');\n  });\n\n  it('deve detectar dados sensÃ­veis no corpo da requisiÃ§Ã£o', async () => {\n    const req = mockRequest();\n    req.body = {\n      nome: 'JoÃ£o Silva',\n      cpf: '123.456.789-00',\n      email: 'joao@exemplo.com',\n      endereco: {\n        rua: 'Rua das Flores',\n        numero: 123,\n      },\n    };\n\n    const res = mockResponse();\n\n    await middleware.use(req, res, mockNext);\n\n    // Simula a resposta sendo finalizada\n    res.on('finish', () => {});\n\n    const callArgs = (auditoriaQueueService.enfileirarLogAuditoria as jest.Mock)\n      .mock.calls[0][0];\n    expect(callArgs.dados_sensiveis_acessados).toContain('cpf');\n    expect(callArgs.dados_sensiveis_acessados).toContain('endereco');\n    expect(\n      auditoriaQueueService.enfileirarAcessoDadosSensiveis,\n    ).toHaveBeenCalled();\n  });\n\n  it('nÃ£o deve auditar endpoints excluÃ­dos', async () => {\n    const req = mockRequest();\n    req.originalUrl = '/api/v1/health';\n\n    const res = mockResponse();\n\n    await middleware.use(req, res, mockNext);\n\n    // Simula a resposta sendo finalizada\n    res.on('finish', () => {});\n\n    expect(auditoriaQueueService.enfileirarLogAuditoria).not.toHaveBeenCalled();\n  });\n\n  it('deve mapear corretamente o mÃ©todo HTTP para o tipo de operaÃ§Ã£o', async () => {\n    const httpMethods = [\n      { method: 'GET', expectedType: TipoOperacao.READ },\n      { method: 'POST', expectedType: TipoOperacao.CREATE },\n      { method: 'PUT', expectedType: TipoOperacao.UPDATE },\n      { method: 'PATCH', expectedType: TipoOperacao.UPDATE },\n      { method: 'DELETE', expectedType: TipoOperacao.DELETE },\n    ];\n\n    for (const { method, expectedType } of httpMethods) {\n      const req = mockRequest();\n      req.method = method;\n\n      const res = mockResponse();\n\n      await middleware.use(req, res, mockNext);\n\n      // Simula a resposta sendo finalizada\n      res.on('finish', () => {});\n\n      if (method !== 'OPTIONS') {\n        const callArgs = (\n          auditoriaQueueService.enfileirarLogAuditoria as jest.Mock\n        ).mock.calls.pop()[0];\n        expect(callArgs.tipo_operacao).toBe(expectedType);\n      }\n    }\n  });\n\n  it('deve extrair corretamente o ID da entidade da URL', async () => {\n    const req = mockRequest();\n    req.originalUrl = '/api/v1/usuarios/123e4567-e89b-12d3-a456-426614174000';\n\n    const res = mockResponse();\n\n    await middleware.use(req, res, mockNext);\n\n    // Simula a resposta sendo finalizada\n    res.on('finish', () => {});\n\n    const callArgs = (auditoriaQueueService.enfileirarLogAuditoria as jest.Mock)\n      .mock.calls[0][0];\n    expect(callArgs.entidade_afetada).toBe('Usuario');\n    expect(callArgs.entidade_id).toBe('123e4567-e89b-12d3-a456-426614174000');\n  });\n\n  it('deve capturar dados da resposta para operaÃ§Ãµes de criaÃ§Ã£o e atualizaÃ§Ã£o', async () => {\n    const responseBody = { id: 'new-user-id', nome: 'Novo UsuÃ¡rio' };\n\n    const req = mockRequest();\n    req.method = 'POST';\n    req.body = { nome: 'Novo UsuÃ¡rio', email: 'novo@exemplo.com' };\n\n    const res = mockResponse();\n\n    await middleware.use(req, res, mockNext);\n\n    // Simula o envio da resposta\n    res.send(JSON.stringify(responseBody));\n\n    // Simula a resposta sendo finalizada\n    res.on('finish', () => {});\n\n    const callArgs = (auditoriaQueueService.enfileirarLogAuditoria as jest.Mock)\n      .mock.calls[0][0];\n    expect(callArgs.dados_novos).toEqual(responseBody);\n    expect(callArgs.dados_anteriores).toBeUndefined();\n  });\n\n  it('deve capturar dados anteriores para operaÃ§Ãµes de atualizaÃ§Ã£o', async () => {\n    const responseBody = { id: 'user-id', nome: 'UsuÃ¡rio Atualizado' };\n\n    const req = mockRequest();\n    req.method = 'PUT';\n    req.originalUrl = '/api/v1/usuarios/user-id';\n    req.body = { nome: 'UsuÃ¡rio Atualizado' };\n\n    const res = mockResponse();\n\n    await middleware.use(req, res, mockNext);\n\n    // Simula o envio da resposta\n    res.send(JSON.stringify(responseBody));\n\n    // Simula a resposta sendo finalizada\n    res.on('finish', () => {});\n\n    const callArgs = (auditoriaQueueService.enfileirarLogAuditoria as jest.Mock)\n      .mock.calls[0][0];\n    expect(callArgs.dados_novos).toEqual(responseBody);\n    expect(callArgs.dados_anteriores).toEqual(req.body);\n  });\n});\n"],"version":3}