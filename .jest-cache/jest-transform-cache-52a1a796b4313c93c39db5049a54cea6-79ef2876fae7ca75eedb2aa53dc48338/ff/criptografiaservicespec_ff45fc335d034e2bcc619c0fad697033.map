{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\criptografia\\services\\criptografia.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\criptografia\\services\\criptografia.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { CriptografiaService } from '../../../../src/modules/criptografia/services/criptografia.service';\n\ndescribe('CriptografiaService', () => {\n  let service: CriptografiaService;\n  let configService: ConfigService;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n      ],\n      providers: [\n        CriptografiaService,\n        {\n          provide: ConfigService,\n          useValue: {\n            get: jest.fn((key: string) => {\n              if (key === 'ENCRYPTION_KEY') {\n                return 'chave-de-criptografia-de-32-caracteres';\n              }\n              if (key === 'ENCRYPTION_IV') {\n                return 'vetor-de-16-chars';\n              }\n              return null;\n            }),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<CriptografiaService>(CriptografiaService);\n    configService = module.get<ConfigService>(ConfigService);\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('criptografar', () => {\n    it('deve criptografar um texto corretamente', () => {\n      const textoOriginal = 'Dados sensíveis para criptografar';\n      const textoCriptografado = service.criptografar(textoOriginal);\n\n      // O texto criptografado não deve ser igual ao original\n      expect(textoCriptografado).not.toEqual(textoOriginal);\n\n      // O texto criptografado deve ser uma string não vazia\n      expect(typeof textoCriptografado).toBe('string');\n      expect(textoCriptografado.length).toBeGreaterThan(0);\n    });\n\n    it('deve gerar criptografias diferentes para o mesmo texto em chamadas distintas', () => {\n      const textoOriginal = 'Dados sensíveis para criptografar';\n\n      const criptografia1 = service.criptografar(textoOriginal);\n      const criptografia2 = service.criptografar(textoOriginal);\n\n      // Devido ao IV aleatório, as criptografias devem ser diferentes\n      expect(criptografia1).not.toEqual(criptografia2);\n    });\n\n    it('deve retornar string vazia ao criptografar null ou undefined', () => {\n      expect(service.criptografar(null)).toBe('');\n      expect(service.criptografar(undefined)).toBe('');\n    });\n\n    it('deve criptografar objetos convertendo-os para JSON', () => {\n      const objetoOriginal = { nome: 'João', cpf: '123.456.789-00' };\n      const textoCriptografado = service.criptografar(objetoOriginal);\n\n      // O texto criptografado deve ser uma string não vazia\n      expect(typeof textoCriptografado).toBe('string');\n      expect(textoCriptografado.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('descriptografar', () => {\n    it('deve descriptografar corretamente um texto previamente criptografado', () => {\n      const textoOriginal = 'Dados sensíveis para criptografar';\n      const textoCriptografado = service.criptografar(textoOriginal);\n      const textoDescriptografado = service.descriptografar(textoCriptografado);\n\n      expect(textoDescriptografado).toEqual(textoOriginal);\n    });\n\n    it('deve retornar string vazia ao descriptografar null ou undefined', () => {\n      expect(service.descriptografar(null)).toBe('');\n      expect(service.descriptografar(undefined)).toBe('');\n    });\n\n    it('deve descriptografar e converter para objeto quando o conteúdo original era um objeto', () => {\n      const objetoOriginal = { nome: 'João', cpf: '123.456.789-00' };\n      const textoCriptografado = service.criptografar(objetoOriginal);\n      const objetoDescriptografado =\n        service.descriptografarParaObjeto(textoCriptografado);\n\n      expect(objetoDescriptografado).toEqual(objetoOriginal);\n    });\n\n    it('deve lançar erro ao tentar descriptografar um texto inválido', () => {\n      const textoInvalido = 'texto-nao-criptografado';\n\n      expect(() => service.descriptografar(textoInvalido)).toThrow();\n    });\n  });\n\n  describe('criptografarArquivo', () => {\n    it('deve criptografar um buffer de arquivo corretamente', () => {\n      const conteudoOriginal = Buffer.from('Conteúdo do arquivo sensível');\n      const conteudoCriptografado =\n        service.criptografarArquivo(conteudoOriginal);\n\n      // O conteúdo criptografado não deve ser igual ao original\n      expect(conteudoCriptografado.equals(conteudoOriginal)).toBe(false);\n\n      // O conteúdo criptografado deve ser um Buffer não vazio\n      expect(Buffer.isBuffer(conteudoCriptografado)).toBe(true);\n      expect(conteudoCriptografado.length).toBeGreaterThan(0);\n    });\n\n    it('deve retornar Buffer vazio ao criptografar null ou undefined', () => {\n      expect(service.criptografarArquivo(null).length).toBe(0);\n      expect(service.criptografarArquivo(undefined).length).toBe(0);\n    });\n  });\n\n  describe('descriptografarArquivo', () => {\n    it('deve descriptografar corretamente um buffer previamente criptografado', () => {\n      const conteudoOriginal = Buffer.from('Conteúdo do arquivo sensível');\n      const conteudoCriptografado =\n        service.criptografarArquivo(conteudoOriginal);\n      const conteudoDescriptografado = service.descriptografarArquivo(\n        conteudoCriptografado,\n      );\n\n      expect(conteudoDescriptografado.equals(conteudoOriginal)).toBe(true);\n    });\n\n    it('deve retornar Buffer vazio ao descriptografar null ou undefined', () => {\n      expect(service.descriptografarArquivo(null).length).toBe(0);\n      expect(service.descriptografarArquivo(undefined).length).toBe(0);\n    });\n\n    it('deve lançar erro ao tentar descriptografar um buffer inválido', () => {\n      const bufferInvalido = Buffer.from('buffer-nao-criptografado');\n\n      expect(() => service.descriptografarArquivo(bufferInvalido)).toThrow();\n    });\n  });\n\n  describe('gerarHash', () => {\n    it('deve gerar um hash para uma string', () => {\n      const textoOriginal = 'Texto para gerar hash';\n      const hash = service.gerarHash(textoOriginal);\n\n      // O hash deve ser uma string não vazia\n      expect(typeof hash).toBe('string');\n      expect(hash.length).toBeGreaterThan(0);\n\n      // O hash não deve ser igual ao texto original\n      expect(hash).not.toEqual(textoOriginal);\n    });\n\n    it('deve gerar o mesmo hash para o mesmo texto', () => {\n      const textoOriginal = 'Texto para gerar hash';\n\n      const hash1 = service.gerarHash(textoOriginal);\n      const hash2 = service.gerarHash(textoOriginal);\n\n      // Os hashes devem ser iguais\n      expect(hash1).toEqual(hash2);\n    });\n\n    it('deve gerar hashes diferentes para textos diferentes', () => {\n      const texto1 = 'Texto 1';\n      const texto2 = 'Texto 2';\n\n      const hash1 = service.gerarHash(texto1);\n      const hash2 = service.gerarHash(texto2);\n\n      // Os hashes devem ser diferentes\n      expect(hash1).not.toEqual(hash2);\n    });\n\n    it('deve retornar string vazia ao gerar hash de null ou undefined', () => {\n      expect(service.gerarHash(null)).toBe('');\n      expect(service.gerarHash(undefined)).toBe('');\n    });\n  });\n\n  describe('verificarHash', () => {\n    it('deve verificar corretamente um hash válido', () => {\n      const textoOriginal = 'Texto para verificar hash';\n      const hash = service.gerarHash(textoOriginal);\n\n      const resultado = service.verificarHash(textoOriginal, hash);\n\n      expect(resultado).toBe(true);\n    });\n\n    it('deve rejeitar um hash inválido', () => {\n      const textoOriginal = 'Texto para verificar hash';\n      const hashInvalido = 'hash-invalido';\n\n      const resultado = service.verificarHash(textoOriginal, hashInvalido);\n\n      expect(resultado).toBe(false);\n    });\n\n    it('deve rejeitar quando o texto é diferente do original', () => {\n      const textoOriginal = 'Texto para verificar hash';\n      const hash = service.gerarHash(textoOriginal);\n\n      const resultado = service.verificarHash('Texto diferente', hash);\n\n      expect(resultado).toBe(false);\n    });\n  });\n});\n"],"version":3}