{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\validators\\pix-validator.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\unit\\validators\\pix-validator.spec.ts"],"sourcesContent":["import { PixValidator } from '../../../validators/pix-validator';\n\ndescribe('PixValidator', () => {\n  let validator: PixValidator;\n\n  beforeEach(() => {\n    validator = new PixValidator();\n  });\n\n  describe('validarChavePix', () => {\n    it('deve validar CPF como chave PIX', () => {\n      expect(validator.validarChavePix('123.456.789-09', 'CPF')).toBeTruthy();\n      expect(validator.validarChavePix('12345678909', 'CPF')).toBeTruthy();\n    });\n\n    it('deve rejeitar CPF inválido como chave PIX', () => {\n      expect(validator.validarChavePix('123.456.789-00', 'CPF')).toBeFalsy(); // DV inválido\n      expect(validator.validarChavePix('00000000000', 'CPF')).toBeFalsy(); // CPF inválido (todos dígitos iguais)\n      expect(validator.validarChavePix('1234567890', 'CPF')).toBeFalsy(); // CPF com tamanho incorreto\n      expect(validator.validarChavePix('abc.def.ghi-jk', 'CPF')).toBeFalsy(); // Formato incorreto\n    });\n\n    it('deve validar email como chave PIX', () => {\n      expect(validator.validarChavePix('usuario@dominio.com.br', 'EMAIL')).toBeTruthy();\n      expect(validator.validarChavePix('nome.sobrenome@empresa.com', 'EMAIL')).toBeTruthy();\n      expect(validator.validarChavePix('usuario.123@dominio.net', 'EMAIL')).toBeTruthy();\n    });\n\n    it('deve rejeitar email inválido como chave PIX', () => {\n      expect(validator.validarChavePix('usuario@', 'EMAIL')).toBeFalsy(); // Domínio ausente\n      expect(validator.validarChavePix('@dominio.com', 'EMAIL')).toBeFalsy(); // Usuário ausente\n      expect(validator.validarChavePix('usuario@dominio', 'EMAIL')).toBeFalsy(); // TLD ausente\n      expect(validator.validarChavePix('usuario@.com', 'EMAIL')).toBeFalsy(); // Domínio inválido\n      expect(validator.validarChavePix('usuário@dominio.com', 'EMAIL')).toBeFalsy(); // Caracteres especiais no usuário\n    });\n\n    it('deve validar telefone como chave PIX', () => {\n      expect(validator.validarChavePix('+5584999999999', 'TELEFONE')).toBeTruthy();\n      expect(validator.validarChavePix('+55 84 99999-9999', 'TELEFONE')).toBeTruthy();\n      expect(validator.validarChavePix('(84) 99999-9999', 'TELEFONE')).toBeTruthy();\n      expect(validator.validarChavePix('84999999999', 'TELEFONE')).toBeTruthy();\n    });\n\n    it('deve rejeitar telefone inválido como chave PIX', () => {\n      expect(validator.validarChavePix('+558499', 'TELEFONE')).toBeFalsy(); // Número incompleto\n      expect(validator.validarChavePix('+558499999999999', 'TELEFONE')).toBeFalsy(); // Número muito longo\n      expect(validator.validarChavePix('abc-def-ghij', 'TELEFONE')).toBeFalsy(); // Formato incorreto\n    });\n\n    it('deve validar chave aleatória como chave PIX', () => {\n      expect(validator.validarChavePix('123e4567-e89b-12d3-a456-426655440000', 'ALEATORIA')).toBeTruthy(); // UUID v4\n      expect(validator.validarChavePix('123e4567e89b12d3a456426655440000', 'ALEATORIA')).toBeTruthy(); // UUID sem hifens\n    });\n\n    it('deve rejeitar chave aleatória inválida como chave PIX', () => {\n      expect(validator.validarChavePix('123e4567-e89b-12d3-a456', 'ALEATORIA')).toBeFalsy(); // UUID incompleto\n      expect(validator.validarChavePix('123e4567-e89b-12d3-a456-42665544000G', 'ALEATORIA')).toBeFalsy(); // Caracteres inválidos\n    });\n\n    it('deve rejeitar tipo de chave PIX desconhecido', () => {\n      expect(validator.validarChavePix('12345', 'TIPO_INVALIDO')).toBeFalsy();\n    });\n  });\n\n  describe('validarCPF', () => {\n    it('deve validar CPFs com formato correto', () => {\n      expect(validator.validarCPF('123.456.789-09')).toBeTruthy();\n      expect(validator.validarCPF('12345678909')).toBeTruthy();\n      // Adicionar mais exemplos de CPFs válidos com seus respectivos dígitos verificadores corretos\n    });\n\n    it('deve rejeitar CPFs com dígito verificador incorreto', () => {\n      expect(validator.validarCPF('123.456.789-00')).toBeFalsy();\n      expect(validator.validarCPF('12345678900')).toBeFalsy();\n    });\n\n    it('deve rejeitar CPFs com formato inválido', () => {\n      expect(validator.validarCPF('')).toBeFalsy();\n      expect(validator.validarCPF('123')).toBeFalsy();\n      expect(validator.validarCPF('12345')).toBeFalsy();\n      expect(validator.validarCPF('123456789')).toBeFalsy();\n      expect(validator.validarCPF('123456789012')).toBeFalsy();\n      expect(validator.validarCPF('abcdefghijk')).toBeFalsy();\n    });\n\n    it('deve rejeitar CPFs com todos os dígitos iguais', () => {\n      expect(validator.validarCPF('00000000000')).toBeFalsy();\n      expect(validator.validarCPF('11111111111')).toBeFalsy();\n      expect(validator.validarCPF('22222222222')).toBeFalsy();\n      expect(validator.validarCPF('33333333333')).toBeFalsy();\n      expect(validator.validarCPF('44444444444')).toBeFalsy();\n      expect(validator.validarCPF('55555555555')).toBeFalsy();\n      expect(validator.validarCPF('66666666666')).toBeFalsy();\n      expect(validator.validarCPF('77777777777')).toBeFalsy();\n      expect(validator.validarCPF('88888888888')).toBeFalsy();\n      expect(validator.validarCPF('99999999999')).toBeFalsy();\n    });\n  });\n\n  describe('validarEmail', () => {\n    it('deve validar emails com formato correto', () => {\n      expect(validator.validarEmail('usuario@dominio.com')).toBeTruthy();\n      expect(validator.validarEmail('usuario.nome@dominio.com.br')).toBeTruthy();\n      expect(validator.validarEmail('usuario_nome@dominio.net')).toBeTruthy();\n      expect(validator.validarEmail('usuario123@dominio.io')).toBeTruthy();\n      expect(validator.validarEmail('u@d.co')).toBeTruthy(); // Email curto mas válido\n    });\n\n    it('deve rejeitar emails com formato inválido', () => {\n      expect(validator.validarEmail('')).toBeFalsy();\n      expect(validator.validarEmail('usuario')).toBeFalsy();\n      expect(validator.validarEmail('usuario@')).toBeFalsy();\n      expect(validator.validarEmail('@dominio.com')).toBeFalsy();\n      expect(validator.validarEmail('usuario@dominio')).toBeFalsy();\n      expect(validator.validarEmail('usuario@.com')).toBeFalsy();\n      expect(validator.validarEmail('usuário@dominio.com')).toBeFalsy(); // Caracteres especiais\n      expect(validator.validarEmail('usuario@domínio.com')).toBeFalsy(); // Caracteres especiais no domínio\n    });\n  });\n\n  describe('validarTelefone', () => {\n    it('deve validar telefones com formato correto', () => {\n      expect(validator.validarTelefone('+5584999999999')).toBeTruthy();\n      expect(validator.validarTelefone('+55 84 99999-9999')).toBeTruthy();\n      expect(validator.validarTelefone('(84) 99999-9999')).toBeTruthy();\n      expect(validator.validarTelefone('84999999999')).toBeTruthy();\n      expect(validator.validarTelefone('84 9 9999 9999')).toBeTruthy();\n    });\n\n    it('deve rejeitar telefones com formato inválido', () => {\n      expect(validator.validarTelefone('')).toBeFalsy();\n      expect(validator.validarTelefone('999')).toBeFalsy(); // Muito curto\n      expect(validator.validarTelefone('9999999999999999')).toBeFalsy(); // Muito longo\n      expect(validator.validarTelefone('abcdefghijk')).toBeFalsy(); // Formato incorreto\n    });\n  });\n\n  describe('validarChaveAleatoria', () => {\n    it('deve validar UUIDs com formato correto', () => {\n      expect(validator.validarChaveAleatoria('123e4567-e89b-12d3-a456-426655440000')).toBeTruthy(); // Com hifens\n      expect(validator.validarChaveAleatoria('123e4567e89b12d3a456426655440000')).toBeTruthy(); // Sem hifens\n    });\n\n    it('deve rejeitar strings que não são UUIDs válidos', () => {\n      expect(validator.validarChaveAleatoria('')).toBeFalsy();\n      expect(validator.validarChaveAleatoria('123')).toBeFalsy(); // Muito curto\n      expect(validator.validarChaveAleatoria('123e4567-e89b-12d3-a456')).toBeFalsy(); // Incompleto\n      expect(validator.validarChaveAleatoria('123e4567-e89b-12d3-a456-42665544000G')).toBeFalsy(); // Caracteres inválidos\n      expect(validator.validarChaveAleatoria('123e4567-e89b-12d3-a456-4266554400000')).toBeFalsy(); // Muito longo\n    });\n  });\n});\n"],"version":3}