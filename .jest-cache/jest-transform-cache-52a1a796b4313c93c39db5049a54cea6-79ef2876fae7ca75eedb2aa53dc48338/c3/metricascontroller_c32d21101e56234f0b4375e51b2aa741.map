{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\controllers\\metricas.controller.ts","mappings":";;;;;;;;;;;;;AAAA,2CAAyD;AACzD,6CAAqE;AACrE,mEAA+D;AAC/D,+DAA2D;AAC3D,kFAAqE;AAErE;;;GAGG;AAGI,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAEV;IACA;IAFnB,YACmB,eAAgC,EAChC,aAA4B;QAD5B,oBAAe,GAAf,eAAe,CAAiB;QAChC,kBAAa,GAAb,aAAa,CAAe;IAC5C,CAAC;IAEJ;;;OAGG;IASG,AAAN,KAAK,CAAC,UAAU;QACd,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;IAC9C,CAAC;IAED;;;OAGG;IAQG,AAAN,KAAK,CAAC,SAAS;QACb,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IAC1C,CAAC;CACF,CAAA;AApCY,gDAAkB;AAkBvB;IARL,IAAA,YAAG,GAAE;IACL,IAAA,yBAAM,GAAE,CAAC,0DAA0D;;IACnE,IAAA,eAAM,EAAC,cAAc,EAAE,YAAY,CAAC;IACpC,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;IACtD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,mCAAmC;KACjD,CAAC;;;wDACkB,OAAO,oBAAP,OAAO;oDAE1B;AAaK;IAPL,IAAA,YAAG,EAAC,QAAQ,CAAC;IACb,IAAA,yBAAM,GAAE;IACR,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC;IACzD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,4BAA4B;KAC1C,CAAC;;;wDACiB,OAAO,oBAAP,OAAO;mDAEzB;6BAnCU,kBAAkB;IAF9B,IAAA,iBAAO,EAAC,sBAAsB,CAAC;IAC/B,IAAA,mBAAU,EAAC,UAAU,CAAC;yDAGe,kCAAe,oBAAf,kCAAe,oDACjB,8BAAa,oBAAb,8BAAa;GAHpC,kBAAkB,CAoC9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\controllers\\metricas.controller.ts"],"sourcesContent":["import { Controller, Get, Header } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { MetricasService } from '../services/metricas.service';\nimport { HealthService } from '../services/health.service';\nimport { Public } from '../../../shared/decorators/public.decorator';\n\n/**\n * Controlador responsável por expor endpoints para coleta de métricas\n * pelo Prometheus.\n */\n@ApiTags('Métricas e Dashboard')\n@Controller('metricas')\nexport class MetricasController {\n  constructor(\n    private readonly metricasService: MetricasService,\n    private readonly healthService: HealthService,\n  ) {}\n\n  /**\n   * Endpoint para o Prometheus coletar métricas\n   * @returns Métricas no formato do Prometheus\n   */\n  @Get()\n  @Public() // Endpoint público para permitir a coleta pelo Prometheus\n  @Header('Content-Type', 'text/plain')\n  @ApiOperation({ summary: 'Obter métricas do sistema' })\n  @ApiResponse({\n    status: 200,\n    description: 'Métricas no formato do Prometheus',\n  })\n  async getMetrics(): Promise<string> {\n    return this.metricasService.obterMetricas();\n  }\n\n  /**\n   * Endpoint para verificar a saúde do sistema\n   * @returns Status de saúde do sistema com detalhes dos componentes\n   */\n  @Get('health')\n  @Public()\n  @ApiOperation({ summary: 'Verificar a saúde do sistema' })\n  @ApiResponse({\n    status: 200,\n    description: 'Status de saúde do sistema',\n  })\n  async getHealth(): Promise<any> {\n    return this.healthService.checkHealth();\n  }\n}\n"],"version":3}