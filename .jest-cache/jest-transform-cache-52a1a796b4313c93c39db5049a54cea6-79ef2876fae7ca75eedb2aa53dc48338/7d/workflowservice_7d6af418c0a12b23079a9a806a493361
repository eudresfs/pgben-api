8f9bb0070d01c932cd8c7c2ec1124100
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var WorkflowService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowService = void 0;
const common_1 = require("@nestjs/common");
const workflow_beneficio_repository_1 = require("../repositories/workflow-beneficio.repository");
const workflow_beneficio_entity_1 = require("../../../entities/workflow-beneficio.entity");
const workflow_response_dto_1 = require("../dtos/workflow/workflow-response.dto");
const workflow_inconsistente_exception_1 = require("../exceptions/workflow-inconsistente.exception");
/**
 * Serviço para gerenciamento de workflows de benefícios
 *
 * Responsável por:
 * - Operações CRUD para workflows
 * - Validação de consistência de workflow
 * - Detecção de ciclos em workflow
 * - Cálculo de SLA por etapa
 */
let WorkflowService = WorkflowService_1 = class WorkflowService {
    workflowRepository;
    logger = new common_1.Logger(WorkflowService_1.name);
    constructor(workflowRepository) {
        this.workflowRepository = workflowRepository;
    }
    /**
     * Busca todos os workflows, convertendo-os para DTOs de resposta
     * @returns Lista de DTOs de resposta de workflows
     */
    async buscarTodos() {
        const workflows = await this.workflowRepository.findAll();
        return workflows.map((w) => this.mapearParaDto(w));
    }
    /**
     * Busca um workflow pelo ID do tipo de benefício
     * @param tipoBeneficioId ID do tipo de benefício
     * @returns DTO de resposta do workflow
     * @throws Error se o workflow não existir
     */
    async buscarPorTipoBeneficio(tipoBeneficioId) {
        const workflow = await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);
        if (!workflow) {
            throw new Error(`Workflow para o tipo de benefício '${tipoBeneficioId}' não encontrado`);
        }
        return this.mapearParaDto(workflow);
    }
    /**
     * Cria ou atualiza um workflow para um tipo de benefício
     * @param tipoBeneficioId ID do tipo de benefício
     * @param dto DTO com dados para atualização
     * @returns DTO de resposta do workflow atualizado
     */
    async atualizarOuCriar(tipoBeneficioId, dto) {
        // Validar consistência do workflow
        this.validarConsistencia(dto.etapas);
        // Verificar se já existe workflow para este tipo de benefício
        let workflow = await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);
        if (!workflow) {
            // Criar novo workflow
            workflow = new workflow_beneficio_entity_1.WorkflowBeneficio();
            workflow.tipo_beneficio_id = tipoBeneficioId;
            this.logger.log(`Criando novo workflow para tipo de benefício '${tipoBeneficioId}'`, WorkflowService_1.name);
        }
        else {
            this.logger.log(`Atualizando workflow existente para tipo de benefício '${tipoBeneficioId}'`, WorkflowService_1.name);
        }
        // Atualizar dados do workflow
        workflow.etapas = dto.etapas;
        workflow.version = (workflow.version || 0) + 1;
        workflow.ativo = dto.ativo !== undefined ? dto.ativo : true;
        workflow.sla_total = this.calcularSLATotal(dto.etapas);
        const salvo = await this.workflowRepository.save(workflow);
        return this.mapearParaDto(salvo);
    }
    /**
     * Remove um workflow
     * @param tipoBeneficioId ID do tipo de benefício
     * @throws Error se o workflow não existir
     */
    async remover(tipoBeneficioId) {
        const workflow = await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);
        if (!workflow) {
            throw new Error(`Workflow para o tipo de benefício '${tipoBeneficioId}' não encontrado`);
        }
        await this.workflowRepository.remove(workflow.id);
        this.logger.log(`Workflow para tipo de benefício '${tipoBeneficioId}' removido`, WorkflowService_1.name);
    }
    /**
     * Ativa ou desativa um workflow
     * @param tipoBeneficioId ID do tipo de benefício
     * @param ativo Status de ativação
     * @returns DTO de resposta do workflow atualizado
     * @throws Error se o workflow não existir
     */
    async alterarStatus(tipoBeneficioId, ativo) {
        const workflow = await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);
        if (!workflow) {
            throw new Error(`Workflow para o tipo de benefício '${tipoBeneficioId}' não encontrado`);
        }
        workflow.ativo = ativo;
        const salvo = await this.workflowRepository.save(workflow);
        this.logger.log(`Alterando status do workflow para tipo de benefício '${tipoBeneficioId}' para ${ativo ? 'ativo' : 'inativo'}`, WorkflowService_1.name);
        return this.mapearParaDto(salvo);
    }
    /**
     * Valida a consistência de um workflow
     * @param etapas Lista de etapas do workflow
     * @throws WorkflowInconsistenteException se o workflow for inconsistente
     */
    validarConsistencia(etapas) {
        this.logger.log('Iniciando validação de consistência do workflow', WorkflowService_1.name);
        if (!etapas || etapas.length === 0) {
            this.logger.log('Workflow sem etapas detectado', WorkflowService_1.name);
            throw new workflow_inconsistente_exception_1.WorkflowInconsistenteException('unknown', 'Workflow deve ter pelo menos uma etapa');
        }
        // Verificar se todas as etapas possuem IDs únicos
        const ids = new Set();
        const msgErros = [];
        for (const etapa of etapas) {
            // Verificar ID único
            if (ids.has(etapa.id)) {
                msgErros.push(`Etapa com ID ${etapa.id} duplicado`);
            }
            ids.add(etapa.id);
        }
        // Verificar se todas as etapas têm próximas etapas válidas
        for (const etapa of etapas) {
            if (etapa.proximas_etapas && etapa.proximas_etapas.length > 0) {
                for (const proximoId of etapa.proximas_etapas) {
                    if (!ids.has(proximoId) && proximoId !== 'FIM') {
                        msgErros.push(`Etapa ${etapa.id} referencia uma etapa inexistente: ${proximoId}`);
                    }
                }
            }
        }
        // Verificar se existe pelo menos uma etapa inicial
        const etapasIniciais = etapas.filter((e) => e.inicial);
        if (etapasIniciais.length === 0) {
            msgErros.push('Workflow deve ter pelo menos uma etapa inicial');
        }
        if (etapasIniciais.length > 1) {
            msgErros.push('Workflow não pode ter mais de uma etapa inicial');
        }
        // Verificar se existe pelo menos uma etapa final (que não tem próximas etapas ou tem 'FIM')
        const temEtapaFinal = etapas.some((e) => !e.proximas_etapas ||
            e.proximas_etapas.length === 0 ||
            e.proximas_etapas.includes('FIM'));
        if (!temEtapaFinal) {
            msgErros.push('Workflow deve ter pelo menos uma etapa final (sem próximas etapas ou com FIM)');
        }
        // Se encontramos erros, lançar exceção
        if (msgErros.length > 0) {
            this.logger.log(`Etapas inconsistentes: ${msgErros.join(', ')}`, WorkflowService_1.name);
            throw new workflow_inconsistente_exception_1.WorkflowInconsistenteException('unknown', msgErros.join('\n'));
        }
        // Verificar ciclos no workflow
        this.verificarCiclos(etapas);
    }
    /**
     * Verifica se existem ciclos no workflow
     * @param etapas Lista de etapas do workflow
     * @throws WorkflowInconsistenteException se existirem ciclos
     */
    verificarCiclos(etapas) {
        this.logger.log('Iniciando detecção de ciclos no workflow', WorkflowService_1.name);
        // Implementação de detecção de ciclos usando DFS (Depth-First Search)
        this.logger.log('Iniciando algoritmo DFS para detecção de ciclos', WorkflowService_1.name);
        const visitados = new Set();
        const pilha = new Set();
        // Função recursiva para DFS
        const dfs = (etapaId, caminho = []) => {
            // Se já encontramos um ciclo, não precisamos continuar
            if (pilha.has(etapaId)) {
                const ciclo = [...caminho, etapaId].join(' -> ');
                this.logger.log(`Ciclo encontrado: ${ciclo}`, WorkflowService_1.name);
                throw new workflow_inconsistente_exception_1.WorkflowInconsistenteException('unknown', `Detectado ciclo no workflow: ${ciclo}`);
            }
            // Se já visitamos esta etapa e não encontramos ciclo, podemos retornar
            if (visitados.has(etapaId)) {
                return;
            }
            // Marcar como visitado e adicionar à pilha atual
            visitados.add(etapaId);
            pilha.add(etapaId);
            // Encontrar a etapa atual
            const etapa = etapas.find((e) => e.id === etapaId);
            if (etapa && etapa.proximas_etapas) {
                // Explorar todas as próximas etapas
                for (const proximoId of etapa.proximas_etapas) {
                    // Ignorar FIM, que é um marcador especial
                    if (proximoId !== 'FIM') {
                        dfs(proximoId, [...caminho, etapaId]);
                    }
                }
            }
            // Remover da pilha ao retornar
            pilha.delete(etapaId);
        };
        // Começar a partir da etapa inicial
        const etapaInicial = etapas.find((e) => e.inicial);
        if (etapaInicial) {
            this.logger.log(`Iniciando busca a partir da etapa inicial: ${etapaInicial.id}`, WorkflowService_1.name);
            dfs(etapaInicial.id);
        }
    }
    /**
     * Calcula o SLA total do workflow somando os SLAs de todas as etapas
     * @param etapas Lista de etapas do workflow
     * @returns SLA total em horas
     */
    calcularSLATotal(etapas) {
        const total = etapas.reduce((total, etapa) => total + (etapa.sla_horas || 0), 0);
        this.logger.log(`SLA total calculado: ${total} horas`, WorkflowService_1.name);
        return total;
    }
    /**
     * Calcula a próxima etapa do workflow para uma ação específica
     * @param workflow Workflow a ser consultado
     * @param etapaAtualId ID da etapa atual
     * @param acao Ação realizada
     * @returns ID da próxima etapa ou null se não houver próxima etapa
     */
    calcularProximaEtapa(workflow, etapaAtualId, acao) {
        this.logger.log(`Calculando próxima etapa a partir de ${etapaAtualId} com ação ${acao}`, WorkflowService_1.name);
        // Encontrar a etapa atual
        const etapaAtual = workflow.etapas.find((e) => e.id === etapaAtualId);
        if (!etapaAtual) {
            throw new Error(`Etapa ${etapaAtualId} não encontrada no workflow`);
        }
        // Se não tiver próximas etapas, não há para onde ir
        if (!etapaAtual.proximas_etapas ||
            etapaAtual.proximas_etapas.length === 0) {
            return null;
        }
        // Se a ação da etapa for específica e não corresponder à ação realizada, não pode prosseguir
        if (etapaAtual.acao && etapaAtual.acao !== acao) {
            throw new Error(`Ação ${acao} não corresponde à ação esperada ${etapaAtual.acao} para a etapa ${etapaAtualId}`);
        }
        // Se houver apenas uma próxima etapa, retorná-la
        if (etapaAtual.proximas_etapas.length === 1) {
            const proximaEtapa = etapaAtual.proximas_etapas[0];
            this.logger.log(`Próxima etapa única encontrada: ${proximaEtapa}`, WorkflowService_1.name);
            return proximaEtapa === 'FIM' ? null : proximaEtapa;
        }
        // Se houver múltiplas próximas etapas possíveis, vai depender da implementação específica
        // do workflow. Por enquanto, retornamos a primeira que não seja um fim.
        this.logger.log(`Múltiplas próximas etapas possíveis: ${etapaAtual.proximas_etapas.join(', ')}`, WorkflowService_1.name);
        for (const proximaEtapa of etapaAtual.proximas_etapas) {
            if (proximaEtapa !== 'FIM') {
                this.logger.log(`Próxima etapa selecionada: ${proximaEtapa}`, WorkflowService_1.name);
                return proximaEtapa;
            }
        }
        return null;
    }
    /**
     * Encontra a etapa inicial de um workflow
     * @param workflow Workflow a ser consultado
     * @returns Etapa inicial ou erro se não existir
     */
    encontrarEtapaInicial(workflow) {
        const etapaInicial = workflow.etapas.find((e) => e.inicial);
        if (!etapaInicial) {
            throw new Error('Workflow não possui etapa inicial');
        }
        return etapaInicial;
    }
    /**
     * Converte uma entidade WorkflowBeneficio para um DTO de resposta
     * @param workflow Entidade a ser convertida
     * @returns DTO de resposta
     */
    mapearParaDto(workflow) {
        const dto = new workflow_response_dto_1.WorkflowResponseDto();
        dto.id = workflow.id;
        // Adicionar informações do tipo de benefício
        dto.tipo_beneficio = {
            id: workflow.tipo_beneficio_id,
            nome: 'Tipo de Benefício ' + workflow.tipo_beneficio_id.substring(0, 5), // Nome temporário
        };
        // Adicionar nome e descrição do workflow
        dto.nome = workflow.nome || 'Workflow de Benefício';
        dto.descricao = workflow.descricao || 'Descrição do workflow de benefício';
        // Mapear cada etapa para incluir as informações necessárias
        if (workflow.etapas && Array.isArray(workflow.etapas)) {
            dto.etapas = workflow.etapas.map((etapa) => {
                const etapaDto = new workflow_response_dto_1.WorkflowEtapaResponseDto();
                etapaDto.ordem = etapa.ordem;
                etapaDto.descricao = etapa.descricao;
                etapaDto.acao = etapa.acao;
                etapaDto.prazo_sla = etapa.prazo_sla;
                etapaDto.template_notificacao_id = etapa.template_notificacao_id;
                // Adicionar informações do setor (temporário até que tenhamos a busca real)
                etapaDto.setor = {
                    id: etapa.setor_id,
                    nome: 'Setor ' + etapa.setor_id.substring(0, 5), // Nome temporário
                };
                return etapaDto;
            });
        }
        else {
            dto.etapas = [];
        }
        dto.ativo = workflow.ativo;
        dto.created_at = workflow.created_at;
        dto.updated_at = workflow.updated_at;
        // Adicionar informações do usuário que atualizou (temporário)
        dto.updated_by = {
            id: workflow.updated_by || '00000000-0000-0000-0000-000000000000',
            nome: 'Administrador',
        };
        return dto;
    }
};
exports.WorkflowService = WorkflowService;
exports.WorkflowService = WorkflowService = WorkflowService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof workflow_beneficio_repository_1.WorkflowBeneficioRepository !== "undefined" && workflow_beneficio_repository_1.WorkflowBeneficioRepository) === "function" ? _a : Object])
], WorkflowService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,