{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\services\\mime-validation.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\services\\mime-validation.service.ts"],"sourcesContent":["import { Injectable, BadRequestException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UnifiedLoggerService } from '../../../shared/logging/unified-logger.service';\nimport * as crypto from 'crypto';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { Express } from 'express';\nimport * as multer from 'multer';\nimport {\n  MimeValidationConfig,\n  getMimeConfigForBenefit,\n  isMimeTypeAllowed,\n  isExtensionAllowed,\n  getExpectedMimeType,\n  DANGEROUS_MIME_TYPES,\n} from '../config/mime-validation.config';\n\n/**\n * Resultado da validação MIME\n */\nexport interface MimeValidationResult {\n  isValid: boolean;\n  detectedMimeType: string;\n  expectedMimeType: string | null;\n  fileExtension: string;\n  fileSize: number;\n  validationErrors: string[];\n  securityWarnings: string[];\n  fileHash: string;\n}\n\n/**\n * Serviço de Validação MIME Avançada\n *\n * Implementa validação rigorosa de tipos MIME, extensões de arquivo,\n * detecção de ameaças e verificação de integridade para uploads\n */\n@Injectable()\nexport class MimeValidationService {\n  private readonly maxRetries: number;\n  private readonly enableStrictValidation: boolean;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly logger: UnifiedLoggerService,\n  ) {\n    this.logger.setContext('MimeValidationService');\n    this.maxRetries = this.configService.get<number>(\n      'MIME_VALIDATION_RETRIES',\n      3,\n    );\n    this.enableStrictValidation = this.configService.get<boolean>(\n      'ENABLE_STRICT_MIME_VALIDATION',\n      true,\n    );\n  }\n\n  /**\n   * Valida arquivo completo incluindo MIME type, extensão e segurança\n   */\n  async validateFile(\n    file: multer.File,\n    tipoBeneficio?: string,\n    validationId?: string,\n  ): Promise<MimeValidationResult> {\n    const startTime = Date.now();\n    const vId = validationId || crypto.randomUUID().substring(0, 8);\n\n    this.logger.info('Iniciando validação MIME completa', {\n      validationId: vId,\n      filename: file.originalname,\n      size: file.size,\n      detectedMimeType: file.mimetype,\n      tipoBeneficio,\n    });\n\n    try {\n      const config = getMimeConfigForBenefit(tipoBeneficio);\n      const result = await this.performValidation(file, config, vId);\n\n      const processingTime = Date.now() - startTime;\n\n      this.logger.info('Validação MIME concluída', {\n        validationId: vId,\n        isValid: result.isValid,\n        processingTime,\n        errorsCount: result.validationErrors.length,\n        warningsCount: result.securityWarnings.length,\n      });\n\n      return result;\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n\n      this.logger.error('Erro durante validação MIME', {\n        validationId: vId,\n        error: error.message,\n        processingTime,\n        filename: file.originalname,\n      });\n\n      throw new BadRequestException(\n        `Falha na validação do arquivo: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Executa a validação completa do arquivo\n   */\n  private async performValidation(\n    file: multer.File,\n    config: MimeValidationConfig,\n    validationId: string,\n  ): Promise<MimeValidationResult> {\n    const validationErrors: string[] = [];\n    const securityWarnings: string[] = [];\n\n    // Extrair informações básicas do arquivo\n    const fileExtension = path.extname(file.originalname).toLowerCase();\n    const detectedMimeType = file.mimetype;\n    const expectedMimeType = getExpectedMimeType(file.originalname);\n    const fileHash = this.calculateFileHash(file.buffer);\n\n    this.logger.debug('Informações do arquivo extraídas', {\n      validationId,\n      fileExtension,\n      detectedMimeType,\n      expectedMimeType,\n      fileHash: fileHash.substring(0, 16) + '...',\n    });\n\n    // 1. Validar tamanho do arquivo\n    if (file.size > config.maxFileSize) {\n      validationErrors.push(\n        `Arquivo muito grande: ${this.formatFileSize(file.size)} (máximo: ${this.formatFileSize(config.maxFileSize)})`,\n      );\n    }\n\n    // 2. Verificar tipos MIME perigosos\n    if (DANGEROUS_MIME_TYPES.includes(detectedMimeType as any)) {\n      validationErrors.push(\n        `Tipo de arquivo perigoso detectado: ${detectedMimeType}`,\n      );\n      securityWarnings.push(\n        'Arquivo contém tipo MIME potencialmente malicioso',\n      );\n    }\n\n    // 3. Validar extensão do arquivo\n    if (!isExtensionAllowed(file.originalname, config)) {\n      validationErrors.push(\n        `Extensão de arquivo não permitida: ${fileExtension}`,\n      );\n    }\n\n    // 4. Validar tipo MIME\n    if (!isMimeTypeAllowed(detectedMimeType, config)) {\n      validationErrors.push(`Tipo MIME não permitido: ${detectedMimeType}`);\n    }\n\n    // 5. Validação cruzada MIME vs Extensão (se habilitada)\n    if (config.strictValidation && expectedMimeType) {\n      if (detectedMimeType !== expectedMimeType) {\n        const warning = `Inconsistência entre extensão e tipo MIME: esperado ${expectedMimeType}, detectado ${detectedMimeType}`;\n\n        if (this.enableStrictValidation) {\n          validationErrors.push(warning);\n        } else {\n          securityWarnings.push(warning);\n        }\n      }\n    }\n\n    // 6. Verificar assinatura do arquivo (magic numbers)\n    const magicNumberValidation = this.validateMagicNumbers(\n      file.buffer,\n      detectedMimeType,\n    );\n    if (!magicNumberValidation.isValid) {\n      if (magicNumberValidation.error) {\n        if (this.enableStrictValidation) {\n          validationErrors.push(magicNumberValidation.error);\n        } else {\n          securityWarnings.push(magicNumberValidation.error);\n        }\n      }\n    }\n\n    // 7. Verificar nome do arquivo\n    const filenameValidation = this.validateFilename(file.originalname);\n    if (!filenameValidation.isValid && filenameValidation.error) {\n      validationErrors.push(filenameValidation.error);\n    }\n\n    const isValid = validationErrors.length === 0;\n\n    if (!isValid) {\n      this.logger.warn('Arquivo rejeitado na validação', {\n        validationId,\n        filename: file.originalname,\n        errors: validationErrors,\n        warnings: securityWarnings,\n      });\n    }\n\n    return {\n      isValid,\n      detectedMimeType,\n      expectedMimeType,\n      fileExtension,\n      fileSize: file.size,\n      validationErrors,\n      securityWarnings,\n      fileHash,\n    };\n  }\n\n  /**\n   * Valida magic numbers (assinatura do arquivo)\n   */\n  private validateMagicNumbers(\n    buffer: Buffer,\n    mimeType: string,\n  ): { isValid: boolean; error?: string } {\n    if (buffer.length < 4) {\n      return { isValid: false, error: 'Arquivo muito pequeno para validação' };\n    }\n\n    const header = buffer.subarray(0, 8);\n\n    // Verificações específicas por tipo MIME\n    switch (mimeType) {\n      case 'application/pdf':\n        if (\n          !header.subarray(0, 4).equals(Buffer.from([0x25, 0x50, 0x44, 0x46]))\n        ) {\n          // %PDF\n          return { isValid: false, error: 'Arquivo não é um PDF válido' };\n        }\n        break;\n\n      case 'image/jpeg':\n      case 'image/jpg':\n        if (!header.subarray(0, 2).equals(Buffer.from([0xff, 0xd8]))) {\n          return { isValid: false, error: 'Arquivo não é um JPEG válido' };\n        }\n        break;\n\n      case 'image/png':\n        if (\n          !header.equals(\n            Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]),\n          )\n        ) {\n          return { isValid: false, error: 'Arquivo não é um PNG válido' };\n        }\n        break;\n\n      case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':\n      case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':\n        if (!header.subarray(0, 2).equals(Buffer.from([0x50, 0x4b]))) {\n          // PK (ZIP)\n          return { isValid: false, error: 'Arquivo Office não é válido' };\n        }\n        break;\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Valida nome do arquivo\n   */\n  private validateFilename(filename: string): {\n    isValid: boolean;\n    error?: string;\n  } {\n    // Verificar caracteres perigosos\n    const dangerousChars = /[<>:\"|?*\\x00-\\x1f]/;\n    if (dangerousChars.test(filename)) {\n      return {\n        isValid: false,\n        error: 'Nome do arquivo contém caracteres inválidos',\n      };\n    }\n\n    // Verificar tamanho do nome\n    if (filename.length > 255) {\n      return { isValid: false, error: 'Nome do arquivo muito longo' };\n    }\n\n    // Verificar nomes reservados do Windows\n    const reservedNames = /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i;\n    const nameWithoutExt = path.parse(filename).name;\n    if (reservedNames.test(nameWithoutExt)) {\n      return {\n        isValid: false,\n        error: 'Nome do arquivo é reservado pelo sistema',\n      };\n    }\n\n    return { isValid: true };\n  }\n\n  /**\n   * Calcula hash SHA-256 do arquivo\n   */\n  private calculateFileHash(buffer: Buffer): string {\n    return crypto.createHash('sha256').update(buffer).digest('hex');\n  }\n\n  /**\n   * Formata tamanho do arquivo para exibição\n   */\n  private formatFileSize(bytes: number): string {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n\n    return `${size.toFixed(2)} ${units[unitIndex]}`;\n  }\n\n  /**\n   * Obtém configuração MIME para um tipo de benefício\n   */\n  getMimeConfig(tipoBeneficio?: string): MimeValidationConfig {\n    return getMimeConfigForBenefit(tipoBeneficio);\n  }\n\n  /**\n   * Verifica se um tipo MIME é permitido\n   */\n  isMimeTypeAllowed(mimeType: string, tipoBeneficio?: string): boolean {\n    const config = getMimeConfigForBenefit(tipoBeneficio);\n    return isMimeTypeAllowed(mimeType, config);\n  }\n}\n"],"version":3}