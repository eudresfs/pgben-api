{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\workflow.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\workflow.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { WorkflowBeneficioRepository } from '../repositories/workflow-beneficio.repository';\nimport { WorkflowBeneficio } from '../../../entities/workflow-beneficio.entity';\nimport { WorkflowUpdateDto } from '../dtos/workflow/workflow-update.dto';\nimport {\n  WorkflowResponseDto,\n  WorkflowEtapaResponseDto,\n} from '../dtos/workflow/workflow-response.dto';\nimport { WorkflowEtapaDto } from '../dtos/workflow/workflow-etapa.dto';\nimport { WorkflowInconsistenteException } from '../exceptions/workflow-inconsistente.exception';\nimport { WorkflowAcaoEnum } from '../../../enums/workflow-acao.enum';\n\n/**\n * Serviço para gerenciamento de workflows de benefícios\n *\n * Responsável por:\n * - Operações CRUD para workflows\n * - Validação de consistência de workflow\n * - Detecção de ciclos em workflow\n * - Cálculo de SLA por etapa\n */\n@Injectable()\nexport class WorkflowService {\n  private readonly logger = new Logger(WorkflowService.name);\n\n  constructor(\n    private readonly workflowRepository: WorkflowBeneficioRepository,\n  ) {}\n\n  /**\n   * Busca todos os workflows, convertendo-os para DTOs de resposta\n   * @returns Lista de DTOs de resposta de workflows\n   */\n  async buscarTodos(): Promise<WorkflowResponseDto[]> {\n    const workflows = await this.workflowRepository.findAll();\n    return workflows.map((w) => this.mapearParaDto(w));\n  }\n\n  /**\n   * Busca um workflow pelo ID do tipo de benefício\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns DTO de resposta do workflow\n   * @throws Error se o workflow não existir\n   */\n  async buscarPorTipoBeneficio(\n    tipoBeneficioId: string,\n  ): Promise<WorkflowResponseDto> {\n    const workflow =\n      await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);\n    if (!workflow) {\n      throw new Error(\n        `Workflow para o tipo de benefício '${tipoBeneficioId}' não encontrado`,\n      );\n    }\n    return this.mapearParaDto(workflow);\n  }\n\n  /**\n   * Cria ou atualiza um workflow para um tipo de benefício\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @param dto DTO com dados para atualização\n   * @returns DTO de resposta do workflow atualizado\n   */\n  async atualizarOuCriar(\n    tipoBeneficioId: string,\n    dto: WorkflowUpdateDto,\n  ): Promise<WorkflowResponseDto> {\n    // Validar consistência do workflow\n    this.validarConsistencia(dto.etapas);\n\n    // Verificar se já existe workflow para este tipo de benefício\n    let workflow =\n      await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);\n\n    if (!workflow) {\n      // Criar novo workflow\n      workflow = new WorkflowBeneficio();\n      workflow.tipo_beneficio_id = tipoBeneficioId;\n      this.logger.log(\n        `Criando novo workflow para tipo de benefício '${tipoBeneficioId}'`,\n        WorkflowService.name,\n      );\n    } else {\n      this.logger.log(\n        `Atualizando workflow existente para tipo de benefício '${tipoBeneficioId}'`,\n        WorkflowService.name,\n      );\n    }\n\n    // Atualizar dados do workflow\n    workflow.etapas = dto.etapas;\n    workflow.version = (workflow.version || 0) + 1;\n    workflow.ativo = dto.ativo !== undefined ? dto.ativo : true;\n    workflow.sla_total = this.calcularSLATotal(dto.etapas);\n\n    const salvo = await this.workflowRepository.save(workflow);\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Remove um workflow\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @throws Error se o workflow não existir\n   */\n  async remover(tipoBeneficioId: string): Promise<void> {\n    const workflow =\n      await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);\n    if (!workflow) {\n      throw new Error(\n        `Workflow para o tipo de benefício '${tipoBeneficioId}' não encontrado`,\n      );\n    }\n\n    await this.workflowRepository.remove(workflow.id as unknown as number);\n    this.logger.log(\n      `Workflow para tipo de benefício '${tipoBeneficioId}' removido`,\n      WorkflowService.name,\n    );\n  }\n\n  /**\n   * Ativa ou desativa um workflow\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @param ativo Status de ativação\n   * @returns DTO de resposta do workflow atualizado\n   * @throws Error se o workflow não existir\n   */\n  async alterarStatus(\n    tipoBeneficioId: string,\n    ativo: boolean,\n  ): Promise<WorkflowResponseDto> {\n    const workflow =\n      await this.workflowRepository.findByTipoBeneficio(tipoBeneficioId);\n    if (!workflow) {\n      throw new Error(\n        `Workflow para o tipo de benefício '${tipoBeneficioId}' não encontrado`,\n      );\n    }\n\n    workflow.ativo = ativo;\n    const salvo = await this.workflowRepository.save(workflow);\n\n    this.logger.log(\n      `Alterando status do workflow para tipo de benefício '${tipoBeneficioId}' para ${ativo ? 'ativo' : 'inativo'}`,\n      WorkflowService.name,\n    );\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Valida a consistência de um workflow\n   * @param etapas Lista de etapas do workflow\n   * @throws WorkflowInconsistenteException se o workflow for inconsistente\n   */\n  private validarConsistencia(etapas: WorkflowEtapaDto[]): void {\n    this.logger.log(\n      'Iniciando validação de consistência do workflow',\n      WorkflowService.name,\n    );\n\n    if (!etapas || etapas.length === 0) {\n      this.logger.log('Workflow sem etapas detectado', WorkflowService.name);\n      throw new WorkflowInconsistenteException(\n        'unknown',\n        'Workflow deve ter pelo menos uma etapa',\n      );\n    }\n\n    // Verificar se todas as etapas possuem IDs únicos\n    const ids = new Set<string>();\n    const msgErros: string[] = [];\n\n    for (const etapa of etapas) {\n      // Verificar ID único\n      if (ids.has(etapa.id)) {\n        msgErros.push(`Etapa com ID ${etapa.id} duplicado`);\n      }\n      ids.add(etapa.id);\n    }\n\n    // Verificar se todas as etapas têm próximas etapas válidas\n    for (const etapa of etapas) {\n      if (etapa.proximas_etapas && etapa.proximas_etapas.length > 0) {\n        for (const proximoId of etapa.proximas_etapas) {\n          if (!ids.has(proximoId) && proximoId !== 'FIM') {\n            msgErros.push(\n              `Etapa ${etapa.id} referencia uma etapa inexistente: ${proximoId}`,\n            );\n          }\n        }\n      }\n    }\n\n    // Verificar se existe pelo menos uma etapa inicial\n    const etapasIniciais = etapas.filter((e) => e.inicial);\n    if (etapasIniciais.length === 0) {\n      msgErros.push('Workflow deve ter pelo menos uma etapa inicial');\n    }\n    if (etapasIniciais.length > 1) {\n      msgErros.push('Workflow não pode ter mais de uma etapa inicial');\n    }\n\n    // Verificar se existe pelo menos uma etapa final (que não tem próximas etapas ou tem 'FIM')\n    const temEtapaFinal = etapas.some(\n      (e) =>\n        !e.proximas_etapas ||\n        e.proximas_etapas.length === 0 ||\n        e.proximas_etapas.includes('FIM'),\n    );\n    if (!temEtapaFinal) {\n      msgErros.push(\n        'Workflow deve ter pelo menos uma etapa final (sem próximas etapas ou com FIM)',\n      );\n    }\n\n    // Se encontramos erros, lançar exceção\n    if (msgErros.length > 0) {\n      this.logger.log(\n        `Etapas inconsistentes: ${msgErros.join(', ')}`,\n        WorkflowService.name,\n      );\n      throw new WorkflowInconsistenteException('unknown', msgErros.join('\\n'));\n    }\n\n    // Verificar ciclos no workflow\n    this.verificarCiclos(etapas);\n  }\n\n  /**\n   * Verifica se existem ciclos no workflow\n   * @param etapas Lista de etapas do workflow\n   * @throws WorkflowInconsistenteException se existirem ciclos\n   */\n  private verificarCiclos(etapas: WorkflowEtapaDto[]): void {\n    this.logger.log(\n      'Iniciando detecção de ciclos no workflow',\n      WorkflowService.name,\n    );\n\n    // Implementação de detecção de ciclos usando DFS (Depth-First Search)\n    this.logger.log(\n      'Iniciando algoritmo DFS para detecção de ciclos',\n      WorkflowService.name,\n    );\n    const visitados = new Set<string>();\n    const pilha = new Set<string>();\n\n    // Função recursiva para DFS\n    const dfs = (etapaId: string, caminho: string[] = []): void => {\n      // Se já encontramos um ciclo, não precisamos continuar\n      if (pilha.has(etapaId)) {\n        const ciclo = [...caminho, etapaId].join(' -> ');\n        this.logger.log(`Ciclo encontrado: ${ciclo}`, WorkflowService.name);\n        throw new WorkflowInconsistenteException(\n          'unknown',\n          `Detectado ciclo no workflow: ${ciclo}`,\n        );\n      }\n\n      // Se já visitamos esta etapa e não encontramos ciclo, podemos retornar\n      if (visitados.has(etapaId)) {\n        return;\n      }\n\n      // Marcar como visitado e adicionar à pilha atual\n      visitados.add(etapaId);\n      pilha.add(etapaId);\n\n      // Encontrar a etapa atual\n      const etapa = etapas.find((e) => e.id === etapaId);\n      if (etapa && etapa.proximas_etapas) {\n        // Explorar todas as próximas etapas\n        for (const proximoId of etapa.proximas_etapas) {\n          // Ignorar FIM, que é um marcador especial\n          if (proximoId !== 'FIM') {\n            dfs(proximoId, [...caminho, etapaId]);\n          }\n        }\n      }\n\n      // Remover da pilha ao retornar\n      pilha.delete(etapaId);\n    };\n\n    // Começar a partir da etapa inicial\n    const etapaInicial = etapas.find((e) => e.inicial);\n    if (etapaInicial) {\n      this.logger.log(\n        `Iniciando busca a partir da etapa inicial: ${etapaInicial.id}`,\n        WorkflowService.name,\n      );\n      dfs(etapaInicial.id);\n    }\n  }\n\n  /**\n   * Calcula o SLA total do workflow somando os SLAs de todas as etapas\n   * @param etapas Lista de etapas do workflow\n   * @returns SLA total em horas\n   */\n  private calcularSLATotal(etapas: WorkflowEtapaDto[]): number {\n    const total = etapas.reduce(\n      (total, etapa) => total + (etapa.sla_horas || 0),\n      0,\n    );\n    this.logger.log(\n      `SLA total calculado: ${total} horas`,\n      WorkflowService.name,\n    );\n    return total;\n  }\n\n  /**\n   * Calcula a próxima etapa do workflow para uma ação específica\n   * @param workflow Workflow a ser consultado\n   * @param etapaAtualId ID da etapa atual\n   * @param acao Ação realizada\n   * @returns ID da próxima etapa ou null se não houver próxima etapa\n   */\n  calcularProximaEtapa(\n    workflow: WorkflowResponseDto,\n    etapaAtualId: string,\n    acao: WorkflowAcaoEnum,\n  ): string | null {\n    this.logger.log(\n      `Calculando próxima etapa a partir de ${etapaAtualId} com ação ${acao}`,\n      WorkflowService.name,\n    );\n\n    // Encontrar a etapa atual\n    const etapaAtual = workflow.etapas.find((e) => e.id === etapaAtualId);\n    if (!etapaAtual) {\n      throw new Error(`Etapa ${etapaAtualId} não encontrada no workflow`);\n    }\n\n    // Se não tiver próximas etapas, não há para onde ir\n    if (\n      !etapaAtual.proximas_etapas ||\n      etapaAtual.proximas_etapas.length === 0\n    ) {\n      return null;\n    }\n\n    // Se a ação da etapa for específica e não corresponder à ação realizada, não pode prosseguir\n    if (etapaAtual.acao && etapaAtual.acao !== acao) {\n      throw new Error(\n        `Ação ${acao} não corresponde à ação esperada ${etapaAtual.acao} para a etapa ${etapaAtualId}`,\n      );\n    }\n\n    // Se houver apenas uma próxima etapa, retorná-la\n    if (etapaAtual.proximas_etapas.length === 1) {\n      const proximaEtapa = etapaAtual.proximas_etapas[0];\n      this.logger.log(\n        `Próxima etapa única encontrada: ${proximaEtapa}`,\n        WorkflowService.name,\n      );\n      return proximaEtapa === 'FIM' ? null : proximaEtapa;\n    }\n\n    // Se houver múltiplas próximas etapas possíveis, vai depender da implementação específica\n    // do workflow. Por enquanto, retornamos a primeira que não seja um fim.\n    this.logger.log(\n      `Múltiplas próximas etapas possíveis: ${etapaAtual.proximas_etapas.join(', ')}`,\n      WorkflowService.name,\n    );\n\n    for (const proximaEtapa of etapaAtual.proximas_etapas) {\n      if (proximaEtapa !== 'FIM') {\n        this.logger.log(\n          `Próxima etapa selecionada: ${proximaEtapa}`,\n          WorkflowService.name,\n        );\n        return proximaEtapa;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Encontra a etapa inicial de um workflow\n   * @param workflow Workflow a ser consultado\n   * @returns Etapa inicial ou erro se não existir\n   */\n  encontrarEtapaInicial(workflow: WorkflowResponseDto): WorkflowEtapaDto {\n    const etapaInicial = workflow.etapas.find((e) => e.inicial);\n    if (!etapaInicial) {\n      throw new Error('Workflow não possui etapa inicial');\n    }\n    return etapaInicial;\n  }\n\n  /**\n   * Converte uma entidade WorkflowBeneficio para um DTO de resposta\n   * @param workflow Entidade a ser convertida\n   * @returns DTO de resposta\n   */\n  private mapearParaDto(workflow: WorkflowBeneficio): WorkflowResponseDto {\n    const dto = new WorkflowResponseDto();\n    dto.id = workflow.id;\n\n    // Adicionar informações do tipo de benefício\n    dto.tipo_beneficio = {\n      id: workflow.tipo_beneficio_id,\n      nome: 'Tipo de Benefício ' + workflow.tipo_beneficio_id.substring(0, 5), // Nome temporário\n    };\n\n    // Adicionar nome e descrição do workflow\n    dto.nome = workflow.nome || 'Workflow de Benefício';\n    dto.descricao = workflow.descricao || 'Descrição do workflow de benefício';\n\n    // Mapear cada etapa para incluir as informações necessárias\n    if (workflow.etapas && Array.isArray(workflow.etapas)) {\n      dto.etapas = workflow.etapas.map((etapa) => {\n        const etapaDto = new WorkflowEtapaResponseDto();\n        etapaDto.ordem = etapa.ordem;\n        etapaDto.descricao = etapa.descricao;\n        etapaDto.acao = etapa.acao;\n        etapaDto.prazo_sla = etapa.prazo_sla;\n        etapaDto.template_notificacao_id = etapa.template_notificacao_id;\n\n        // Adicionar informações do setor (temporário até que tenhamos a busca real)\n        etapaDto.setor = {\n          id: etapa.setor_id,\n          nome: 'Setor ' + etapa.setor_id.substring(0, 5), // Nome temporário\n        };\n\n        return etapaDto;\n      });\n    } else {\n      dto.etapas = [];\n    }\n\n    dto.ativo = workflow.ativo;\n    dto.created_at = workflow.created_at;\n    dto.updated_at = workflow.updated_at;\n\n    // Adicionar informações do usuário que atualizou (temporário)\n    dto.updated_by = {\n      id: workflow.updated_by || '00000000-0000-0000-0000-000000000000',\n      nome: 'Administrador',\n    };\n\n    return dto;\n  }\n}\n"],"version":3}