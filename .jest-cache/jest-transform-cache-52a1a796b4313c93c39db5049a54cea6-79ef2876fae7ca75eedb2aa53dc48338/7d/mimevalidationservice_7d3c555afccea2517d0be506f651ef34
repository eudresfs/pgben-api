e139bde9c80cf160e4abc1fd8f806198
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MimeValidationService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const unified_logger_service_1 = require("../../../shared/logging/unified-logger.service");
const crypto = __importStar(require("crypto"));
const path = __importStar(require("path"));
const mime_validation_config_1 = require("../config/mime-validation.config");
/**
 * Serviço de Validação MIME Avançada
 *
 * Implementa validação rigorosa de tipos MIME, extensões de arquivo,
 * detecção de ameaças e verificação de integridade para uploads
 */
let MimeValidationService = class MimeValidationService {
    configService;
    logger;
    maxRetries;
    enableStrictValidation;
    constructor(configService, logger) {
        this.configService = configService;
        this.logger = logger;
        this.logger.setContext('MimeValidationService');
        this.maxRetries = this.configService.get('MIME_VALIDATION_RETRIES', 3);
        this.enableStrictValidation = this.configService.get('ENABLE_STRICT_MIME_VALIDATION', true);
    }
    /**
     * Valida arquivo completo incluindo MIME type, extensão e segurança
     */
    async validateFile(file, tipoBeneficio, validationId) {
        const startTime = Date.now();
        const vId = validationId || crypto.randomUUID().substring(0, 8);
        this.logger.info('Iniciando validação MIME completa', {
            validationId: vId,
            filename: file.originalname,
            size: file.size,
            detectedMimeType: file.mimetype,
            tipoBeneficio,
        });
        try {
            const config = (0, mime_validation_config_1.getMimeConfigForBenefit)(tipoBeneficio);
            const result = await this.performValidation(file, config, vId);
            const processingTime = Date.now() - startTime;
            this.logger.info('Validação MIME concluída', {
                validationId: vId,
                isValid: result.isValid,
                processingTime,
                errorsCount: result.validationErrors.length,
                warningsCount: result.securityWarnings.length,
            });
            return result;
        }
        catch (error) {
            const processingTime = Date.now() - startTime;
            this.logger.error('Erro durante validação MIME', {
                validationId: vId,
                error: error.message,
                processingTime,
                filename: file.originalname,
            });
            throw new common_1.BadRequestException(`Falha na validação do arquivo: ${error.message}`);
        }
    }
    /**
     * Executa a validação completa do arquivo
     */
    async performValidation(file, config, validationId) {
        const validationErrors = [];
        const securityWarnings = [];
        // Extrair informações básicas do arquivo
        const fileExtension = path.extname(file.originalname).toLowerCase();
        const detectedMimeType = file.mimetype;
        const expectedMimeType = (0, mime_validation_config_1.getExpectedMimeType)(file.originalname);
        const fileHash = this.calculateFileHash(file.buffer);
        this.logger.debug('Informações do arquivo extraídas', {
            validationId,
            fileExtension,
            detectedMimeType,
            expectedMimeType,
            fileHash: fileHash.substring(0, 16) + '...',
        });
        // 1. Validar tamanho do arquivo
        if (file.size > config.maxFileSize) {
            validationErrors.push(`Arquivo muito grande: ${this.formatFileSize(file.size)} (máximo: ${this.formatFileSize(config.maxFileSize)})`);
        }
        // 2. Verificar tipos MIME perigosos
        if (mime_validation_config_1.DANGEROUS_MIME_TYPES.includes(detectedMimeType)) {
            validationErrors.push(`Tipo de arquivo perigoso detectado: ${detectedMimeType}`);
            securityWarnings.push('Arquivo contém tipo MIME potencialmente malicioso');
        }
        // 3. Validar extensão do arquivo
        if (!(0, mime_validation_config_1.isExtensionAllowed)(file.originalname, config)) {
            validationErrors.push(`Extensão de arquivo não permitida: ${fileExtension}`);
        }
        // 4. Validar tipo MIME
        if (!(0, mime_validation_config_1.isMimeTypeAllowed)(detectedMimeType, config)) {
            validationErrors.push(`Tipo MIME não permitido: ${detectedMimeType}`);
        }
        // 5. Validação cruzada MIME vs Extensão (se habilitada)
        if (config.strictValidation && expectedMimeType) {
            if (detectedMimeType !== expectedMimeType) {
                const warning = `Inconsistência entre extensão e tipo MIME: esperado ${expectedMimeType}, detectado ${detectedMimeType}`;
                if (this.enableStrictValidation) {
                    validationErrors.push(warning);
                }
                else {
                    securityWarnings.push(warning);
                }
            }
        }
        // 6. Verificar assinatura do arquivo (magic numbers)
        const magicNumberValidation = this.validateMagicNumbers(file.buffer, detectedMimeType);
        if (!magicNumberValidation.isValid) {
            if (magicNumberValidation.error) {
                if (this.enableStrictValidation) {
                    validationErrors.push(magicNumberValidation.error);
                }
                else {
                    securityWarnings.push(magicNumberValidation.error);
                }
            }
        }
        // 7. Verificar nome do arquivo
        const filenameValidation = this.validateFilename(file.originalname);
        if (!filenameValidation.isValid && filenameValidation.error) {
            validationErrors.push(filenameValidation.error);
        }
        const isValid = validationErrors.length === 0;
        if (!isValid) {
            this.logger.warn('Arquivo rejeitado na validação', {
                validationId,
                filename: file.originalname,
                errors: validationErrors,
                warnings: securityWarnings,
            });
        }
        return {
            isValid,
            detectedMimeType,
            expectedMimeType,
            fileExtension,
            fileSize: file.size,
            validationErrors,
            securityWarnings,
            fileHash,
        };
    }
    /**
     * Valida magic numbers (assinatura do arquivo)
     */
    validateMagicNumbers(buffer, mimeType) {
        if (buffer.length < 4) {
            return { isValid: false, error: 'Arquivo muito pequeno para validação' };
        }
        const header = buffer.subarray(0, 8);
        // Verificações específicas por tipo MIME
        switch (mimeType) {
            case 'application/pdf':
                if (!header.subarray(0, 4).equals(Buffer.from([0x25, 0x50, 0x44, 0x46]))) {
                    // %PDF
                    return { isValid: false, error: 'Arquivo não é um PDF válido' };
                }
                break;
            case 'image/jpeg':
            case 'image/jpg':
                if (!header.subarray(0, 2).equals(Buffer.from([0xff, 0xd8]))) {
                    return { isValid: false, error: 'Arquivo não é um JPEG válido' };
                }
                break;
            case 'image/png':
                if (!header.equals(Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]))) {
                    return { isValid: false, error: 'Arquivo não é um PNG válido' };
                }
                break;
            case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
                if (!header.subarray(0, 2).equals(Buffer.from([0x50, 0x4b]))) {
                    // PK (ZIP)
                    return { isValid: false, error: 'Arquivo Office não é válido' };
                }
                break;
        }
        return { isValid: true };
    }
    /**
     * Valida nome do arquivo
     */
    validateFilename(filename) {
        // Verificar caracteres perigosos
        const dangerousChars = /[<>:"|?*\x00-\x1f]/;
        if (dangerousChars.test(filename)) {
            return {
                isValid: false,
                error: 'Nome do arquivo contém caracteres inválidos',
            };
        }
        // Verificar tamanho do nome
        if (filename.length > 255) {
            return { isValid: false, error: 'Nome do arquivo muito longo' };
        }
        // Verificar nomes reservados do Windows
        const reservedNames = /^(CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])$/i;
        const nameWithoutExt = path.parse(filename).name;
        if (reservedNames.test(nameWithoutExt)) {
            return {
                isValid: false,
                error: 'Nome do arquivo é reservado pelo sistema',
            };
        }
        return { isValid: true };
    }
    /**
     * Calcula hash SHA-256 do arquivo
     */
    calculateFileHash(buffer) {
        return crypto.createHash('sha256').update(buffer).digest('hex');
    }
    /**
     * Formata tamanho do arquivo para exibição
     */
    formatFileSize(bytes) {
        const units = ['B', 'KB', 'MB', 'GB'];
        let size = bytes;
        let unitIndex = 0;
        while (size >= 1024 && unitIndex < units.length - 1) {
            size /= 1024;
            unitIndex++;
        }
        return `${size.toFixed(2)} ${units[unitIndex]}`;
    }
    /**
     * Obtém configuração MIME para um tipo de benefício
     */
    getMimeConfig(tipoBeneficio) {
        return (0, mime_validation_config_1.getMimeConfigForBenefit)(tipoBeneficio);
    }
    /**
     * Verifica se um tipo MIME é permitido
     */
    isMimeTypeAllowed(mimeType, tipoBeneficio) {
        const config = (0, mime_validation_config_1.getMimeConfigForBenefit)(tipoBeneficio);
        return (0, mime_validation_config_1.isMimeTypeAllowed)(mimeType, config);
    }
};
exports.MimeValidationService = MimeValidationService;
exports.MimeValidationService = MimeValidationService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object, typeof (_b = typeof unified_logger_service_1.UnifiedLoggerService !== "undefined" && unified_logger_service_1.UnifiedLoggerService) === "function" ? _b : Object])
], MimeValidationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,