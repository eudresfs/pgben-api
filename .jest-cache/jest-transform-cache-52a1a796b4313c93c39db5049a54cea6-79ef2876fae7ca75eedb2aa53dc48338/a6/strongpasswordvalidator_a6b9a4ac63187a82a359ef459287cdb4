0250da909fd33e02fd9e0f8687f56943
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsStrongPassword = void 0;
const class_validator_1 = require("class-validator");
/**
 * Validador personalizado para senhas fortes
 *
 * Verifica se uma senha é forte o suficiente, considerando:
 * - Não contém informações pessoais (nome, email, etc)
 * - Não é uma senha comum ou facilmente adivinhável
 */
let IsStrongPassword = class IsStrongPassword {
    // Lista de senhas comuns que devem ser evitadas
    commonPasswords = [
        'senha123',
        'password',
        '123456',
        'admin',
        'qwerty',
        'abc123',
        'senha',
        '12345678',
        'admin123',
        'semtas',
        'pgben',
        'natal',
        'brasil',
        'sistema',
        'usuario',
    ];
    validate(password, args) {
        if (!password) {
            return false;
        }
        // Verifica se a senha está na lista de senhas comuns
        if (this.commonPasswords.includes(password.toLowerCase())) {
            return false;
        }
        // Obtém o objeto que está sendo validado (para verificar informações pessoais)
        const object = args.object;
        // Verifica se a senha contém o nome do usuário
        if (object.nome &&
            password.toLowerCase().includes(object.nome.toLowerCase().split(' ')[0])) {
            return false;
        }
        // Verifica se a senha contém o email do usuário
        if (object.email &&
            password.toLowerCase().includes(object.email.split('@')[0].toLowerCase())) {
            return false;
        }
        // Verifica se a senha contém a matrícula do usuário
        if (object.matricula && password.includes(object.matricula)) {
            return false;
        }
        // Verifica se a senha contém o CPF do usuário (apenas os números)
        if (object.cpf) {
            const cpfNumbers = object.cpf.replace(/[^\d]/g, '');
            // Verifica se a senha contém sequências de 4 ou mais dígitos do CPF
            for (let i = 0; i <= cpfNumbers.length - 4; i++) {
                const sequence = cpfNumbers.substring(i, i + 4);
                if (password.includes(sequence)) {
                    return false;
                }
            }
        }
        return true;
    }
    defaultMessage() {
        return 'A senha não pode conter informações pessoais ou ser uma senha comum';
    }
};
exports.IsStrongPassword = IsStrongPassword;
exports.IsStrongPassword = IsStrongPassword = __decorate([
    (0, class_validator_1.ValidatorConstraint)({ name: 'isStrongPassword', async: false })
], IsStrongPassword);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcdmFsaWRhdG9yc1xcc3Ryb25nLXBhc3N3b3JkLnZhbGlkYXRvci50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxxREFJeUI7QUFFekI7Ozs7OztHQU1HO0FBRUksSUFBTSxnQkFBZ0IsR0FBdEIsTUFBTSxnQkFBZ0I7SUFDM0IsZ0RBQWdEO0lBQ3hDLGVBQWUsR0FBRztRQUN4QixVQUFVO1FBQ1YsVUFBVTtRQUNWLFFBQVE7UUFDUixPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixPQUFPO1FBQ1AsVUFBVTtRQUNWLFVBQVU7UUFDVixRQUFRO1FBQ1IsT0FBTztRQUNQLE9BQU87UUFDUCxRQUFRO1FBQ1IsU0FBUztRQUNULFNBQVM7S0FDVixDQUFDO0lBRUYsUUFBUSxDQUFDLFFBQWdCLEVBQUUsSUFBeUI7UUFDbEQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQscURBQXFEO1FBQ3JELElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUMxRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCwrRUFBK0U7UUFDL0UsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQWEsQ0FBQztRQUVsQywrQ0FBK0M7UUFDL0MsSUFDRSxNQUFNLENBQUMsSUFBSTtZQUNYLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDeEUsQ0FBQztZQUNELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELGdEQUFnRDtRQUNoRCxJQUNFLE1BQU0sQ0FBQyxLQUFLO1lBQ1osUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUN6RSxDQUFDO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO1FBRUQsb0RBQW9EO1FBQ3BELElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQzVELE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELGtFQUFrRTtRQUNsRSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNmLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNwRCxvRUFBb0U7WUFDcEUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7Z0JBQ2hELE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDaEQsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7b0JBQ2hDLE9BQU8sS0FBSyxDQUFDO2dCQUNmLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELGNBQWM7UUFDWixPQUFPLHFFQUFxRSxDQUFDO0lBQy9FLENBQUM7Q0FDRixDQUFBO0FBeEVZLDRDQUFnQjsyQkFBaEIsZ0JBQWdCO0lBRDVCLElBQUEscUNBQW1CLEVBQUMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO0dBQ25ELGdCQUFnQixDQXdFNUIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcdmFsaWRhdG9yc1xcc3Ryb25nLXBhc3N3b3JkLnZhbGlkYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBWYWxpZGF0b3JDb25zdHJhaW50LFxuICBWYWxpZGF0b3JDb25zdHJhaW50SW50ZXJmYWNlLFxuICBWYWxpZGF0aW9uQXJndW1lbnRzLFxufSBmcm9tICdjbGFzcy12YWxpZGF0b3InO1xuXG4vKipcbiAqIFZhbGlkYWRvciBwZXJzb25hbGl6YWRvIHBhcmEgc2VuaGFzIGZvcnRlc1xuICpcbiAqIFZlcmlmaWNhIHNlIHVtYSBzZW5oYSDDqSBmb3J0ZSBvIHN1ZmljaWVudGUsIGNvbnNpZGVyYW5kbzpcbiAqIC0gTsOjbyBjb250w6ltIGluZm9ybWHDp8O1ZXMgcGVzc29haXMgKG5vbWUsIGVtYWlsLCBldGMpXG4gKiAtIE7Do28gw6kgdW1hIHNlbmhhIGNvbXVtIG91IGZhY2lsbWVudGUgYWRpdmluaMOhdmVsXG4gKi9cbkBWYWxpZGF0b3JDb25zdHJhaW50KHsgbmFtZTogJ2lzU3Ryb25nUGFzc3dvcmQnLCBhc3luYzogZmFsc2UgfSlcbmV4cG9ydCBjbGFzcyBJc1N0cm9uZ1Bhc3N3b3JkIGltcGxlbWVudHMgVmFsaWRhdG9yQ29uc3RyYWludEludGVyZmFjZSB7XG4gIC8vIExpc3RhIGRlIHNlbmhhcyBjb211bnMgcXVlIGRldmVtIHNlciBldml0YWRhc1xuICBwcml2YXRlIGNvbW1vblBhc3N3b3JkcyA9IFtcbiAgICAnc2VuaGExMjMnLFxuICAgICdwYXNzd29yZCcsXG4gICAgJzEyMzQ1NicsXG4gICAgJ2FkbWluJyxcbiAgICAncXdlcnR5JyxcbiAgICAnYWJjMTIzJyxcbiAgICAnc2VuaGEnLFxuICAgICcxMjM0NTY3OCcsXG4gICAgJ2FkbWluMTIzJyxcbiAgICAnc2VtdGFzJyxcbiAgICAncGdiZW4nLFxuICAgICduYXRhbCcsXG4gICAgJ2JyYXNpbCcsXG4gICAgJ3Npc3RlbWEnLFxuICAgICd1c3VhcmlvJyxcbiAgXTtcblxuICB2YWxpZGF0ZShwYXNzd29yZDogc3RyaW5nLCBhcmdzOiBWYWxpZGF0aW9uQXJndW1lbnRzKTogYm9vbGVhbiB7XG4gICAgaWYgKCFwYXNzd29yZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZlcmlmaWNhIHNlIGEgc2VuaGEgZXN0w6EgbmEgbGlzdGEgZGUgc2VuaGFzIGNvbXVuc1xuICAgIGlmICh0aGlzLmNvbW1vblBhc3N3b3Jkcy5pbmNsdWRlcyhwYXNzd29yZC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIE9idMOpbSBvIG9iamV0byBxdWUgZXN0w6Egc2VuZG8gdmFsaWRhZG8gKHBhcmEgdmVyaWZpY2FyIGluZm9ybWHDp8O1ZXMgcGVzc29haXMpXG4gICAgY29uc3Qgb2JqZWN0ID0gYXJncy5vYmplY3QgYXMgYW55O1xuXG4gICAgLy8gVmVyaWZpY2Egc2UgYSBzZW5oYSBjb250w6ltIG8gbm9tZSBkbyB1c3XDoXJpb1xuICAgIGlmIChcbiAgICAgIG9iamVjdC5ub21lICYmXG4gICAgICBwYXNzd29yZC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG9iamVjdC5ub21lLnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnKVswXSlcbiAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBWZXJpZmljYSBzZSBhIHNlbmhhIGNvbnTDqW0gbyBlbWFpbCBkbyB1c3XDoXJpb1xuICAgIGlmIChcbiAgICAgIG9iamVjdC5lbWFpbCAmJlxuICAgICAgcGFzc3dvcmQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhvYmplY3QuZW1haWwuc3BsaXQoJ0AnKVswXS50b0xvd2VyQ2FzZSgpKVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZlcmlmaWNhIHNlIGEgc2VuaGEgY29udMOpbSBhIG1hdHLDrWN1bGEgZG8gdXN1w6FyaW9cbiAgICBpZiAob2JqZWN0Lm1hdHJpY3VsYSAmJiBwYXNzd29yZC5pbmNsdWRlcyhvYmplY3QubWF0cmljdWxhKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZlcmlmaWNhIHNlIGEgc2VuaGEgY29udMOpbSBvIENQRiBkbyB1c3XDoXJpbyAoYXBlbmFzIG9zIG7Dum1lcm9zKVxuICAgIGlmIChvYmplY3QuY3BmKSB7XG4gICAgICBjb25zdCBjcGZOdW1iZXJzID0gb2JqZWN0LmNwZi5yZXBsYWNlKC9bXlxcZF0vZywgJycpO1xuICAgICAgLy8gVmVyaWZpY2Egc2UgYSBzZW5oYSBjb250w6ltIHNlcXXDqm5jaWFzIGRlIDQgb3UgbWFpcyBkw61naXRvcyBkbyBDUEZcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGNwZk51bWJlcnMubGVuZ3RoIC0gNDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNlcXVlbmNlID0gY3BmTnVtYmVycy5zdWJzdHJpbmcoaSwgaSArIDQpO1xuICAgICAgICBpZiAocGFzc3dvcmQuaW5jbHVkZXMoc2VxdWVuY2UpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBkZWZhdWx0TWVzc2FnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnQSBzZW5oYSBuw6NvIHBvZGUgY29udGVyIGluZm9ybWHDp8O1ZXMgcGVzc29haXMgb3Ugc2VyIHVtYSBzZW5oYSBjb211bSc7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==