{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\input-sanitizer.validator.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\input-sanitizer.validator.ts"],"sourcesContent":["import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\nimport { Injectable, Logger } from '@nestjs/common';\nimport * as DOMPurify from 'isomorphic-dompurify';\nimport * as validator from 'validator';\n\n/**\n * Interface para o resultado da sanitização de input\n */\nexport interface InputSanitizationResult {\n  isValid: boolean;\n  sanitizedValue: string;\n  originalValue: string;\n  warnings: string[];\n  blocked: boolean;\n}\n\n/**\n * Validador e sanitizador personalizado para inputs do usuário\n *\n * Implementa sanitização robusta para prevenir ataques XSS, injeção de código\n * e outros tipos de ataques através de inputs maliciosos\n */\n@ValidatorConstraint({ name: 'inputSanitizerValidator', async: false })\n@Injectable()\nexport class InputSanitizerValidator implements ValidatorConstraintInterface {\n  private readonly logger = new Logger(InputSanitizerValidator.name);\n\n  // Padrões perigosos que devem ser bloqueados\n  private readonly dangerousPatterns = [\n    /<script[^>]*>.*?<\\/script>/gi, // Scripts\n    /javascript:/gi, // URLs javascript\n    /vbscript:/gi, // URLs vbscript\n    /on\\w+\\s*=/gi, // Event handlers (onclick, onload, etc.)\n    /<iframe[^>]*>.*?<\\/iframe>/gi, // iframes\n    /<object[^>]*>.*?<\\/object>/gi, // objects\n    /<embed[^>]*>.*?<\\/embed>/gi, // embeds\n    /<link[^>]*>/gi, // links externos\n    /<meta[^>]*>/gi, // meta tags\n    /\\${.*?}/g, // Template literals\n    /eval\\s*\\(/gi, // eval functions\n    /Function\\s*\\(/gi, // Function constructor\n    /setTimeout\\s*\\(/gi, // setTimeout\n    /setInterval\\s*\\(/gi, // setInterval\n  ];\n\n  // Caracteres que devem ser escapados\n  private readonly escapeMap: { [key: string]: string } = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;',\n  };\n\n  /**\n   * Valida se o input é seguro após sanitização\n   * @param value Valor a ser validado\n   * @param args Argumentos de validação\n   * @returns true se o valor é válido após sanitização\n   */\n  validate(value: any, args: ValidationArguments): boolean {\n    if (!value || typeof value !== 'string') {\n      return true; // Valores vazios ou não-string são válidos\n    }\n\n    const result = this.sanitizeInput(value);\n\n    // Log de tentativas de ataques\n    if (result.blocked || result.warnings.length > 0) {\n      this.logger.warn(\n        `Tentativa de input potencialmente malicioso detectada: ${JSON.stringify(\n          {\n            originalValue: result.originalValue.substring(0, 100),\n            warnings: result.warnings,\n            blocked: result.blocked,\n            property: args.property,\n          },\n        )}`,\n      );\n    }\n\n    return !result.blocked;\n  }\n\n  /**\n   * Retorna a mensagem de erro padrão\n   * @param args Argumentos de validação\n   * @returns Mensagem de erro\n   */\n  defaultMessage(args: ValidationArguments): string {\n    return `O campo ${args.property} contém conteúdo não permitido por motivos de segurança`;\n  }\n\n  /**\n   * Sanitiza um input do usuário\n   * @param input Input a ser sanitizado\n   * @param options Opções de sanitização\n   * @returns Resultado da sanitização\n   */\n  sanitizeInput(\n    input: string,\n    options: {\n      allowHtml?: boolean;\n      maxLength?: number;\n      strictMode?: boolean;\n    } = {},\n  ): InputSanitizationResult {\n    const { allowHtml = false, maxLength = 10000, strictMode = true } = options;\n\n    const result: InputSanitizationResult = {\n      isValid: true,\n      sanitizedValue: input,\n      originalValue: input,\n      warnings: [],\n      blocked: false,\n    };\n\n    // Verificar comprimento máximo\n    if (input.length > maxLength) {\n      result.warnings.push(\n        `Input excede o comprimento máximo de ${maxLength} caracteres`,\n      );\n      result.sanitizedValue = input.substring(0, maxLength);\n    }\n\n    // Verificar padrões perigosos\n    for (const pattern of this.dangerousPatterns) {\n      if (pattern.test(input)) {\n        result.warnings.push(`Padrão perigoso detectado: ${pattern.source}`);\n        if (strictMode) {\n          result.blocked = true;\n          result.isValid = false;\n          return result;\n        }\n      }\n    }\n\n    // Sanitização básica\n    let sanitized = input;\n\n    if (!allowHtml) {\n      // Remover todas as tags HTML\n      sanitized = DOMPurify.sanitize(sanitized, { ALLOWED_TAGS: [] });\n\n      // Escapar caracteres especiais\n      sanitized = this.escapeHtmlChars(sanitized);\n    } else {\n      // Permitir apenas tags HTML seguras\n      sanitized = DOMPurify.sanitize(sanitized, {\n        ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'p', 'br'],\n        ALLOWED_ATTR: [],\n      });\n    }\n\n    // Normalizar espaços em branco\n    sanitized = sanitized.replace(/\\s+/g, ' ').trim();\n\n    // Remover caracteres de controle\n    sanitized = sanitized.replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, '');\n\n    // Verificar se houve mudanças significativas\n    if (sanitized !== input) {\n      result.warnings.push('Input foi modificado durante a sanitização');\n    }\n\n    result.sanitizedValue = sanitized;\n    return result;\n  }\n\n  /**\n   * Escapa caracteres HTML especiais\n   * @param text Texto a ser escapado\n   * @returns Texto com caracteres escapados\n   */\n  private escapeHtmlChars(text: string): string {\n    return text.replace(/[&<>\"'`=\\/]/g, (char) => this.escapeMap[char] || char);\n  }\n\n  /**\n   * Sanitiza um nome de arquivo\n   * @param filename Nome do arquivo\n   * @returns Nome do arquivo sanitizado\n   */\n  sanitizeFilename(filename: string): string {\n    if (!filename) return '';\n\n    // Remover caracteres perigosos para nomes de arquivo\n    let sanitized = filename.replace(/[<>:\"\\/\\\\|?*\\x00-\\x1F]/g, '_');\n\n    // Remover múltiplos pontos consecutivos\n    sanitized = sanitized.replace(/\\.{2,}/g, '.');\n\n    // Remover pontos no início e fim\n    sanitized = sanitized.replace(/^\\.|\\.$/, '');\n\n    // Limitar comprimento\n    if (sanitized.length > 255) {\n      const ext = sanitized.substring(sanitized.lastIndexOf('.'));\n      const name = sanitized.substring(0, sanitized.lastIndexOf('.'));\n      sanitized = name.substring(0, 255 - ext.length) + ext;\n    }\n\n    // Garantir que não seja vazio\n    if (!sanitized || sanitized.trim() === '') {\n      sanitized = 'arquivo_sem_nome';\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Valida e sanitiza metadados de documento\n   * @param metadados Metadados a serem validados\n   * @returns Metadados sanitizados\n   */\n  sanitizeMetadados(metadados: any): any {\n    if (!metadados || typeof metadados !== 'object') {\n      return {};\n    }\n\n    const sanitized: any = {};\n\n    // Lista de campos permitidos nos metadados\n    const allowedFields = [\n      'titulo',\n      'descricao',\n      'autor',\n      'data_documento',\n      'tags',\n      'categoria',\n      'versao',\n      'observacoes',\n    ];\n\n    for (const field of allowedFields) {\n      if (metadados[field] !== undefined) {\n        if (typeof metadados[field] === 'string') {\n          const result = this.sanitizeInput(metadados[field], {\n            allowHtml: false,\n            maxLength: field === 'descricao' ? 2000 : 500,\n            strictMode: true,\n          });\n\n          if (!result.blocked) {\n            sanitized[field] = result.sanitizedValue;\n          }\n        } else if (Array.isArray(metadados[field]) && field === 'tags') {\n          // Sanitizar array de tags\n          sanitized[field] = metadados[field]\n            .filter((tag: any) => typeof tag === 'string')\n            .map((tag: string) => {\n              const result = this.sanitizeInput(tag, {\n                allowHtml: false,\n                maxLength: 50,\n                strictMode: true,\n              });\n              return result.blocked ? null : result.sanitizedValue;\n            })\n            .filter((tag: string | null) => tag !== null)\n            .slice(0, 10); // Máximo 10 tags\n        }\n      }\n    }\n\n    return sanitized;\n  }\n}\n"],"version":3}