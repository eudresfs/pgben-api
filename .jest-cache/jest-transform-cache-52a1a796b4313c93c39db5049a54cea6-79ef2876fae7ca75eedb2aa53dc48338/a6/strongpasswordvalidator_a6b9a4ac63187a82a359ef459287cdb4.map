{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\strong-password.validator.ts","mappings":";;;;;;;;;AAAA,qDAIyB;AAEzB;;;;;;GAMG;AAEI,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,gDAAgD;IACxC,eAAe,GAAG;QACxB,UAAU;QACV,UAAU;QACV,QAAQ;QACR,OAAO;QACP,QAAQ;QACR,QAAQ;QACR,OAAO;QACP,UAAU;QACV,UAAU;QACV,QAAQ;QACR,OAAO;QACP,OAAO;QACP,QAAQ;QACR,SAAS;QACT,SAAS;KACV,CAAC;IAEF,QAAQ,CAAC,QAAgB,EAAE,IAAyB;QAClD,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,KAAK,CAAC;QACf,CAAC;QAED,qDAAqD;QACrD,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;YAC1D,OAAO,KAAK,CAAC;QACf,CAAC;QAED,+EAA+E;QAC/E,MAAM,MAAM,GAAG,IAAI,CAAC,MAAa,CAAC;QAElC,+CAA+C;QAC/C,IACE,MAAM,CAAC,IAAI;YACX,QAAQ,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EACxE,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,gDAAgD;QAChD,IACE,MAAM,CAAC,KAAK;YACZ,QAAQ,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EACzE,CAAC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;QAED,oDAAoD;QACpD,IAAI,MAAM,CAAC,SAAS,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;YAC5D,OAAO,KAAK,CAAC;QACf,CAAC;QAED,kEAAkE;QAClE,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;YACf,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACpD,oEAAoE;YACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAChD,MAAM,QAAQ,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBAChD,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;oBAChC,OAAO,KAAK,CAAC;gBACf,CAAC;YACH,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc;QACZ,OAAO,qEAAqE,CAAC;IAC/E,CAAC;CACF,CAAA;AAxEY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,qCAAmB,EAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;GACnD,gBAAgB,CAwE5B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\validators\\strong-password.validator.ts"],"sourcesContent":["import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n/**\n * Validador personalizado para senhas fortes\n *\n * Verifica se uma senha é forte o suficiente, considerando:\n * - Não contém informações pessoais (nome, email, etc)\n * - Não é uma senha comum ou facilmente adivinhável\n */\n@ValidatorConstraint({ name: 'isStrongPassword', async: false })\nexport class IsStrongPassword implements ValidatorConstraintInterface {\n  // Lista de senhas comuns que devem ser evitadas\n  private commonPasswords = [\n    'senha123',\n    'password',\n    '123456',\n    'admin',\n    'qwerty',\n    'abc123',\n    'senha',\n    '12345678',\n    'admin123',\n    'semtas',\n    'pgben',\n    'natal',\n    'brasil',\n    'sistema',\n    'usuario',\n  ];\n\n  validate(password: string, args: ValidationArguments): boolean {\n    if (!password) {\n      return false;\n    }\n\n    // Verifica se a senha está na lista de senhas comuns\n    if (this.commonPasswords.includes(password.toLowerCase())) {\n      return false;\n    }\n\n    // Obtém o objeto que está sendo validado (para verificar informações pessoais)\n    const object = args.object as any;\n\n    // Verifica se a senha contém o nome do usuário\n    if (\n      object.nome &&\n      password.toLowerCase().includes(object.nome.toLowerCase().split(' ')[0])\n    ) {\n      return false;\n    }\n\n    // Verifica se a senha contém o email do usuário\n    if (\n      object.email &&\n      password.toLowerCase().includes(object.email.split('@')[0].toLowerCase())\n    ) {\n      return false;\n    }\n\n    // Verifica se a senha contém a matrícula do usuário\n    if (object.matricula && password.includes(object.matricula)) {\n      return false;\n    }\n\n    // Verifica se a senha contém o CPF do usuário (apenas os números)\n    if (object.cpf) {\n      const cpfNumbers = object.cpf.replace(/[^\\d]/g, '');\n      // Verifica se a senha contém sequências de 4 ou mais dígitos do CPF\n      for (let i = 0; i <= cpfNumbers.length - 4; i++) {\n        const sequence = cpfNumbers.substring(i, i + 4);\n        if (password.includes(sequence)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  defaultMessage(): string {\n    return 'A senha não pode conter informações pessoais ou ser uma senha comum';\n  }\n}\n"],"version":3}