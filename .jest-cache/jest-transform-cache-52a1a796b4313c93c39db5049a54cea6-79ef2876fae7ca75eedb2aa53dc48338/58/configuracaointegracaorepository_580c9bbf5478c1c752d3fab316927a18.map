{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\configuracao-integracao.repository.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAqC;AACrC,qGAA0F;AAG1F;;;;GAIG;AAEI,IAAM,gCAAgC,GAAtC,MAAM,gCAAgC;IAGxB;IAFnB,YAEmB,UAA8C;QAA9C,eAAU,GAAV,UAAU,CAAoC;IAC9D,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAAC,MAAc;QAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,IAAyB;QACrC,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACzC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,WAAW;YAClB,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;SACtC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CACR,UAAkC;QAElC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU,CACd,IAAwB;QAExB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,EAAE,IAAI,EAAE;YACf,KAAK,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;SACzB,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,cAAc,CAAC,MAAc;QACjC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;QACjE,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,gBAAgB,CACpB,IAAwB;QAExB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;YAC7B,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YAC5B,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE;SAC9B,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AApFY,4EAAgC;2CAAhC,gCAAgC;IAD5C,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,uDAAsB,CAAC,CAAA;yDACZ,oBAAU,oBAAV,oBAAU;GAH9B,gCAAgC,CAoF5C","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\configuracao-integracao.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ConfiguracaoIntegracao } from '../../../entities/configuracao-integracao.entity';\nimport { IntegracaoTipoEnum } from '../../../enums/integracao-tipo.enum';\n\n/**\n * Repositório para gerenciamento de configurações de integração externa\n *\n * Fornece operações de acesso a dados para entidade ConfiguracaoIntegracao\n */\n@Injectable()\nexport class ConfiguracaoIntegracaoRepository {\n  constructor(\n    @InjectRepository(ConfiguracaoIntegracao)\n    private readonly repository: Repository<ConfiguracaoIntegracao>,\n  ) {}\n\n  /**\n   * Encontra uma configuração de integração pelo seu código\n   * @param codigo Código da configuração\n   * @returns Configuração encontrada ou null\n   */\n  async findByCodigo(codigo: string): Promise<ConfiguracaoIntegracao | null> {\n    return this.repository.findOne({ where: { codigo } });\n  }\n\n  /**\n   * Busca todas as configurações de integração\n   * @param tipo Tipo opcional para filtrar integrações\n   * @returns Lista de configurações\n   */\n  async findAll(tipo?: IntegracaoTipoEnum): Promise<ConfiguracaoIntegracao[]> {\n    const whereClause = tipo ? { tipo } : {};\n    return this.repository.find({\n      where: whereClause,\n      order: { tipo: 'ASC', codigo: 'ASC' },\n    });\n  }\n\n  /**\n   * Salva uma configuração de integração no banco de dados\n   * @param integracao Configuração a ser salva\n   * @returns Configuração salva\n   */\n  async save(\n    integracao: ConfiguracaoIntegracao,\n  ): Promise<ConfiguracaoIntegracao> {\n    return this.repository.save(integracao);\n  }\n\n  /**\n   * Remove uma configuração de integração do banco de dados\n   * @param id ID da configuração a ser removida\n   */\n  async remove(id: number): Promise<void> {\n    await this.repository.delete(id);\n  }\n\n  /**\n   * Busca configurações por tipo de integração\n   * @param tipo Tipo das configurações\n   * @returns Lista de configurações do tipo\n   */\n  async findByTipo(\n    tipo: IntegracaoTipoEnum,\n  ): Promise<ConfiguracaoIntegracao[]> {\n    return this.repository.find({\n      where: { tipo },\n      order: { codigo: 'ASC' },\n    });\n  }\n\n  /**\n   * Verifica se existe uma configuração com o código especificado\n   * @param codigo Código da configuração\n   * @returns true se existir, false caso contrário\n   */\n  async existsByCodigo(codigo: string): Promise<boolean> {\n    const count = await this.repository.count({ where: { codigo } });\n    return count > 0;\n  }\n\n  /**\n   * Encontra a configuração ativa para um determinado tipo de integração\n   * @param tipo Tipo da integração\n   * @returns Configuração ativa ou null\n   */\n  async findActiveByTipo(\n    tipo: IntegracaoTipoEnum,\n  ): Promise<ConfiguracaoIntegracao | null> {\n    return this.repository.findOne({\n      where: { tipo, ativo: true },\n      order: { updated_at: 'DESC' },\n    });\n  }\n}\n"],"version":3}