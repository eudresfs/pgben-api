299aa253ed03401f103686b8610a51e4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const typeorm_1 = require("@nestjs/typeorm");
const auditoria_queue_processor_1 = require("../../../../src/modules/auditoria/services/auditoria-queue.processor");
const log_auditoria_entity_1 = require("../../../../src/modules/auditoria/entities/log-auditoria.entity");
const tipo_operacao_enum_1 = require("../../../../src/modules/auditoria/enums/tipo-operacao.enum");
const common_1 = require("@nestjs/common");
describe('AuditoriaQueueProcessor', () => {
    let processor;
    let logAuditoriaRepository;
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                auditoria_queue_processor_1.AuditoriaQueueProcessor,
                {
                    provide: (0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria),
                    useValue: {
                        create: jest.fn().mockImplementation((dto) => dto),
                        save: jest.fn().mockResolvedValue({ id: 'mock-log-id' }),
                        findOne: jest.fn().mockResolvedValue(null),
                    },
                },
                {
                    provide: common_1.Logger,
                    useValue: {
                        log: jest.fn(),
                        error: jest.fn(),
                        warn: jest.fn(),
                        debug: jest.fn(),
                        verbose: jest.fn(),
                    },
                },
            ],
        }).compile();
        processor = module.get(auditoria_queue_processor_1.AuditoriaQueueProcessor);
        logAuditoriaRepository = module.get((0, typeorm_1.getRepositoryToken)(log_auditoria_entity_1.LogAuditoria));
    });
    it('deve ser definido', () => {
        expect(processor).toBeDefined();
    });
    describe('processarLogAuditoria', () => {
        it('deve processar um log de auditoria com sucesso', async () => {
            const mockJob = {
                data: {
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'Usuario',
                    entidade_id: '123e4567-e89b-12d3-a456-426614174000',
                    descricao: 'Criação de novo usuário',
                    ip_origem: '192.168.1.1',
                    usuario_id: 'mock-user-id',
                },
            };
            await processor.processarLogAuditoria(mockJob);
            expect(logAuditoriaRepository.create).toHaveBeenCalledWith(mockJob.data);
            expect(logAuditoriaRepository.save).toHaveBeenCalled();
        });
        it('deve lidar com erros ao processar log de auditoria', async () => {
            const mockJob = {
                data: {
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.CREATE,
                    entidade_afetada: 'Usuario',
                },
            };
            jest
                .spyOn(logAuditoriaRepository, 'save')
                .mockRejectedValueOnce(new Error('Erro ao salvar'));
            await expect(processor.processarLogAuditoria(mockJob)).rejects.toThrow('Erro ao salvar');
        });
    });
    describe('processarAcessoDadosSensiveis', () => {
        it('deve processar um registro de acesso a dados sensíveis', async () => {
            const mockJob = {
                data: {
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
                    entidade_afetada: 'Usuario',
                    entidade_id: '123e4567-e89b-12d3-a456-426614174000',
                    dados_sensiveis_acessados: ['cpf', 'renda_familiar'],
                    ip_origem: '192.168.1.1',
                    usuario_id: 'mock-user-id',
                    descricao: 'Acesso a dados sensíveis',
                },
            };
            await processor.processarAcessoDadosSensiveis(mockJob);
            expect(logAuditoriaRepository.create).toHaveBeenCalledWith(expect.objectContaining({
                tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
                entidade_afetada: 'Usuario',
                entidade_id: '123e4567-e89b-12d3-a456-426614174000',
                dados_sensiveis_acessados: ['cpf', 'renda_familiar'],
            }));
            expect(logAuditoriaRepository.save).toHaveBeenCalled();
        });
        it('deve adicionar descrição padrão se não fornecida', async () => {
            const mockJob = {
                data: {
                    tipo_operacao: tipo_operacao_enum_1.TipoOperacao.READ,
                    entidade_afetada: 'Usuario',
                    entidade_id: '123e4567-e89b-12d3-a456-426614174000',
                    dados_sensiveis_acessados: ['cpf'],
                    ip_origem: '192.168.1.1',
                    usuario_id: 'mock-user-id',
                },
            };
            await processor.processarAcessoDadosSensiveis(mockJob);
            expect(logAuditoriaRepository.create).toHaveBeenCalledWith(expect.objectContaining({
                descricao: expect.stringContaining('Acesso a dados sensíveis'),
            }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,