{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\cidadao.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\unit\\cidadao\\cidadao.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport {\n  BadRequestException,\n  ConflictException,\n  InternalServerErrorException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { plainToInstance } from 'class-transformer';\nimport { CidadaoService } from '@modules/cidadao/services/cidadao.service';\nimport { CidadaoRepository } from '@modules/cidadao/repositories/cidadao.repository';\nimport {\n  Cidadao,\n  Sexo,\n} from '@modules/cidadao/entities/cidadao.entity';\nimport { TipoPapel, PaperType } from '@modules/cidadao/enums/tipo-papel.enum';\nimport { CreateCidadaoDto } from '@modules/cidadao/dto/create-cidadao.dto';\nimport { UpdateCidadaoDto } from '@modules/cidadao/dto/update-cidadao.dto';\nimport { CidadaoResponseDto } from '@modules/cidadao/dto/cidadao-response.dto';\nimport { CacheService } from '@/shared/cache/cache.service';\nimport { PapelCidadaoService } from '@modules/cidadao/services/papel-cidadao.service';\n\ndescribe('CidadaoService', () => {\n  let service: CidadaoService;\n  let repository: CidadaoRepository;\n  let cacheService: CacheService;\n  let papelCidadaoService: PapelCidadaoService;\n\n  const mockCidadaoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    update: jest.fn(),\n    delete: jest.fn(),\n    count: jest.fn(),\n    findByCpf: jest.fn(),\n    findByNis: jest.fn(),\n    findById: jest.fn(),\n    findAll: jest.fn(),\n  };\n\n  const mockCacheService = {\n    get: jest.fn(),\n    set: jest.fn(),\n    del: jest.fn(),\n    clear: jest.fn(),\n  };\n\n  const mockPapelCidadaoService = {\n    create: jest.fn(),\n    createMany: jest.fn(),\n    findAll: jest.fn(),\n    findOne: jest.fn(),\n    update: jest.fn(),\n    remove: jest.fn(),\n    findByTipo: jest.fn(),\n  };\n\n  const mockCidadao: Cidadao = {\n    id: '550e8400-e29b-41d4-a716-446655440000',\n    nome: 'João da Silva',\n    cpf: '12345678901',\n    rg: '1234567',\n    data_nascimento: new Date('1990-01-01'),\n    sexo: Sexo.MASCULINO,\n    email: 'joao@example.com',\n    telefone: '84999999999',\n    nis: '12345678901',\n    endereco: {\n      logradouro: 'Rua Exemplo',\n      numero: '123',\n      complemento: 'Apto 101',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000000',\n    },\n    created_at: new Date(),\n    updated_at: new Date(),\n    composicao_familiar: [],\n    papeis: [],\n    nome_social: '',\n    nome_mae: 'nome da mãoe do cidadão',\n    naturalidade: 'Natal',\n    prontuario_suas: 'CD651651',\n    ativo: false,\n    removed_at: null as unknown as Date,\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        CidadaoService,\n        {\n          provide: getRepositoryToken(Cidadao),\n          useValue: {},\n        },\n        {\n          provide: CidadaoRepository,\n          useValue: mockCidadaoRepository,\n        },\n        {\n          provide: CacheService,\n          useValue: mockCacheService,\n        },\n        {\n          provide: PapelCidadaoService,\n          useValue: mockPapelCidadaoService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<CidadaoService>(CidadaoService);\n    repository = module.get<CidadaoRepository>(CidadaoRepository);\n    cacheService = module.get<CacheService>(CacheService);\n    papelCidadaoService = module.get<PapelCidadaoService>(PapelCidadaoService);\n\n    // Resetar mocks\n    jest.clearAllMocks();\n  });\n\n  it('deve estar definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista paginada de cidadãos', async () => {\n      const mockCidadaoList = [mockCidadao];\n      const total = 1;\n\n      mockCidadaoRepository.findAll.mockResolvedValue([mockCidadaoList, total]);\n\n      const result = await service.findAll({\n        page: 1,\n        limit: 10,\n      });\n\n      expect(result).toEqual({\n        items: plainToInstance(CidadaoResponseDto, mockCidadaoList, {\n          excludeExtraneousValues: true,\n        }),\n        meta: {\n          total,\n          page: 1,\n          limit: 10,\n          pages: 1,\n          hasNext: false,\n          hasPrev: false,\n        },\n      });\n\n      expect(mockCidadaoRepository.findAll).toHaveBeenCalledWith({\n        skip: 0,\n        take: 10,\n        where: {},\n        order: { nome: 'ASC' },\n      });\n    });\n\n    it('deve aplicar filtros de busca', async () => {\n      const filters = {\n        search: 'João',\n        bairro: 'Centro',\n        unidadeId: 'unidade-1',\n        ativo: true,\n        page: 1,\n        limit: 10,\n      };\n\n      mockCidadaoRepository.findAll.mockResolvedValue([[], 0]);\n\n      await service.findAll(filters);\n\n      expect(mockCidadaoRepository.findAll).toHaveBeenCalledWith({\n        skip: 0,\n        take: 10,\n        where: expect.objectContaining({\n          $or: expect.arrayContaining([\n            { nome: { $iLike: '%João%' } },\n            { cpf: { $iLike: '%%' } },\n            { nis: { $iLike: '%%' } },\n          ]),\n          'endereco.bairro': { $iLike: '%Centro%' },\n          unidadeId: filters.unidadeId,\n          ativo: true,\n        }),\n        order: { nome: 'ASC' },\n      });\n    });\n\n    it('deve retornar lista vazia quando não houver resultados', async () => {\n      mockCidadaoRepository.findAll.mockResolvedValue([[], 0]);\n\n      const result = await service.findAll({});\n\n      expect(result.items).toHaveLength(0);\n      expect(result.meta.total).toBe(0);\n    });\n\n    it('deve calcular corretamente a paginação', async () => {\n      const totalItems = 25;\n      const page = 2;\n      const limit = 10;\n\n      mockCidadaoRepository.findAll.mockResolvedValue([\n        new Array(limit).fill(mockCidadao),\n        totalItems,\n      ]);\n\n      const result = await service.findAll({ page, limit });\n\n      expect(result.meta).toEqual({\n        total: totalItems,\n        page,\n        limit,\n        pages: 3,\n        hasNext: true,\n        hasPrev: true,\n      });\n      expect(mockCidadaoRepository.findAll).toHaveBeenCalledWith({\n        skip: 10, // (page - 1) * limit\n        take: limit,\n        where: {},\n        order: { nome: 'ASC' },\n      });\n    });\n  });\n\n  describe('findById', () => {\n    it('deve retornar um cidadão pelo ID', async () => {\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n\n      const result = await service.findById(mockCidadao.id);\n\n      expect(result).toEqual(plainToInstance(CidadaoResponseDto, mockCidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      }));\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith(mockCidadao.id, true);\n    });\n\n    it('deve retornar cidadão sem relacionamentos quando includeRelations for false', async () => {\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n\n      const result = await service.findById(mockCidadao.id, false);\n\n      expect(result).toEqual(plainToInstance(CidadaoResponseDto, mockCidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      }));\n      expect(mockCidadaoRepository.findById).toHaveBeenCalledWith(mockCidadao.id, false);\n    });\n\n    it('deve retornar os dados corretos no DTO de resposta', async () => {\n      const cidadaoCompleto = {\n        ...mockCidadao,\n        data_nascimento: new Date('1990-01-01'),\n        sexo: Sexo.MASCULINO,\n        nome_mae: 'Maria da Silva',\n        nome_pai: 'João Silva',\n        email: 'joao@example.com',\n        telefone: '11999999999',\n        nis: '12345678901',\n        cns: '123456789012345',\n        foto_url: 'http://example.com/foto.jpg',\n        endereco: {\n          cep: '12345678',\n          logradouro: 'Rua Exemplo',\n          numero: '123',\n          complemento: 'Apto 101',\n          bairro: 'Centro',\n          cidade: 'São Paulo',\n          estado: 'SP',\n        },\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n\n      mockCidadaoRepository.findById.mockResolvedValue(cidadaoCompleto);\n\n      const result = await service.findById(mockCidadao.id);\n\n      expect(result).toMatchObject({\n        id: mockCidadao.id,\n        nome: mockCidadao.nome,\n        cpf: mockCidadao.cpf,\n        rg: mockCidadao.rg,\n        dataNascimento: expect.any(String),\n        sexo: Sexo.MASCULINO,\n        nomeMae: 'Maria da Silva',\n        nomePai: 'João Silva',\n        email: 'joao@example.com',\n        telefone: '11999999999',\n        cep: '12345678',\n        logradouro: 'Rua Exemplo',\n        numero: '123',\n        complemento: 'Apto 101',\n        bairro: 'Centro',\n        cidade: 'São Paulo',\n        uf: 'SP',\n        nis: '12345678901',\n        cns: '123456789012345',\n        fotoUrl: 'http://example.com/foto.jpg',\n        createdAt: expect.any(String),\n        updatedAt: expect.any(String),\n      });\n    });\n\n    it('deve lançar BadRequestException para ID vazio', async () => {\n      await expect(service.findById('')).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não for encontrado', async () => {\n      mockCidadaoRepository.findById.mockResolvedValue(null);\n\n      await expect(service.findById('id-inexistente')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('deve lançar InternalServerErrorException em caso de erro inesperado', async () => {\n      mockCidadaoRepository.findById.mockRejectedValue(\n        new Error('Erro inesperado'),\n      );\n\n      await expect(service.findById('id-válido')).rejects.toThrow(\n        InternalServerErrorException,\n      );\n    });\n  });\n\n  describe('findByCpf', () => {\n    it('deve retornar um cidadão pelo CPF', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(mockCidadao);\n\n      const result = await service.findByCpf('123.456.789-09');\n\n      expect(result).toEqual(plainToInstance(CidadaoResponseDto, mockCidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      }));\n      expect(mockCidadaoRepository.findByCpf).toHaveBeenCalledWith('12345678909', false);\n    });\n\n    it('deve retornar cidadão sem relacionamentos quando includeRelations for false', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(mockCidadao);\n\n      const result = await service.findByCpf('123.456.789-09', false);\n\n      expect(result).toEqual(plainToInstance(CidadaoResponseDto, mockCidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      }));\n      expect(mockCidadaoRepository.findByCpf).toHaveBeenCalledWith('12345678909', false);\n    });\n\n    it('deve formatar o CPF removendo caracteres não numéricos', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(mockCidadao);\n\n      await service.findByCpf('123.456.789-09');\n\n      expect(mockCidadaoRepository.findByCpf).toHaveBeenCalledWith('12345678909', false);\n    });\n\n    it('deve lançar BadRequestException para CPF vazio', async () => {\n      await expect(service.findByCpf('')).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve lançar BadRequestException para CPF com menos de 11 dígitos', async () => {\n      await expect(service.findByCpf('1234567890')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar BadRequestException para CPF com mais de 11 dígitos', async () => {\n      await expect(service.findByCpf('123456789012')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar BadRequestException para CPF com caracteres não numéricos', async () => {\n      await expect(service.findByCpf('123abc456de')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar BadRequestException para CPF inválido (todos dígitos iguais)', async () => {\n      await expect(service.findByCpf('111.111.111-11')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar BadRequestException para CPF inválido (dígito verificador incorreto)', async () => {\n      // CPF válido seria 123.456.789-09\n      await expect(service.findByCpf('123.456.789-10')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não for encontrado', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(null);\n\n      await expect(service.findByCpf('123.456.789-09')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n  });\n\n  describe('findByNis', () => {\n    it('deve retornar um cidadão pelo NIS', async () => {\n      mockCidadaoRepository.findByNis.mockResolvedValue(mockCidadao);\n\n      const result = await service.findByNis('12345678901');\n\n      expect(result).toEqual(plainToInstance(CidadaoResponseDto, mockCidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      }));\n      expect(mockCidadaoRepository.findByNis).toHaveBeenCalledWith('12345678901', false);\n    });\n\n    it('deve retornar cidadão sem relacionamentos quando includeRelations for false', async () => {\n      mockCidadaoRepository.findByNis.mockResolvedValue(mockCidadao);\n\n      const result = await service.findByNis('12345678901', false);\n\n      expect(result).toEqual(plainToInstance(CidadaoResponseDto, mockCidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      }));\n      expect(mockCidadaoRepository.findByNis).toHaveBeenCalledWith('12345678901', false);\n    });\n\n    it('deve formatar o NIS removendo caracteres não numéricos', async () => {\n      mockCidadaoRepository.findByNis.mockResolvedValue(mockCidadao);\n\n      await service.findByNis('123.456.789-01');\n\n      expect(mockCidadaoRepository.findByNis).toHaveBeenCalledWith('12345678901', false);\n    });\n\n    it('deve lançar BadRequestException para NIS vazio', async () => {\n      await expect(service.findByNis('')).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve lançar BadRequestException para NIS com menos de 11 dígitos', async () => {\n      await expect(service.findByNis('1234567890')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar BadRequestException para NIS com mais de 11 dígitos', async () => {\n      await expect(service.findByNis('123456789012')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar BadRequestException para NIS com caracteres não numéricos', async () => {\n      await expect(service.findByNis('123abc456de')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não for encontrado', async () => {\n      mockCidadaoRepository.findByNis.mockResolvedValue(null);\n\n      await expect(service.findByNis('11122233344')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('deve remover formatação do NIS antes de buscar', async () => {\n      mockCidadaoRepository.findByNis.mockResolvedValue(mockCidadao);\n\n      await service.findByNis('123.456.789-01');\n\n      expect(mockCidadaoRepository.findByNis).toHaveBeenCalledWith('12345678901', false);\n    });\n  });\n\n  describe('create', () => {\n    const createCidadaoDto: CreateCidadaoDto = {\n      nome: 'João da Silva',\n      cpf: '123.456.789-01',\n      rg: '1234567',\n      data_nascimento: new Date('1990-01-01'),\n      sexo: Sexo.MASCULINO,\n      email: 'joao@example.com',\n      telefone: '84999999999',\n      nis: '12345678901',\n      endereco: {\n        logradouro: 'Rua Exemplo',\n        numero: '123',\n        complemento: 'Apto 101',\n        bairro: 'Centro',\n        cidade: 'Natal',\n        estado: 'RN',\n        cep: '59000-000',\n      },\n      renda: 5000,\n    };\n\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it('deve criar um novo cidadão', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(null);\n      mockCidadaoRepository.findByNis.mockResolvedValue(null);\n      mockCidadaoRepository.create.mockResolvedValue(mockCidadao);\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n\n      const result = await service.create(\n        createCidadaoDto,\n        'unidade-1',\n        'user-1',\n      );\n\n      expect(result).toEqual(plainToInstance(CidadaoResponseDto, mockCidadao, {\n        excludeExtraneousValues: true,\n        enableImplicitConversion: false,\n      }));\n      expect(mockCidadaoRepository.create).toHaveBeenCalledWith({\n        ...createCidadaoDto,\n        cpf: '12345678901',\n        nis: '12345678901',\n      });\n    });\n\n    it('deve formatar CPF e NIS removendo caracteres não numéricos', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(null);\n      mockCidadaoRepository.findByNis.mockResolvedValue(null);\n      mockCidadaoRepository.create.mockResolvedValue(mockCidadao);\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n\n      await service.create(\n        {\n          ...createCidadaoDto,\n          cpf: '123.456.789-01',\n          nis: '123.456.789-01',\n        },\n        'unidade-1',\n        'user-1',\n      );\n\n      expect(mockCidadaoRepository.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          cpf: '12345678901',\n          nis: '12345678901',\n        }),\n      );\n    });\n\n    it('deve lançar BadRequestException para CPF inválido', async () => {\n      await expect(\n        service.create(\n          {\n            ...createCidadaoDto,\n            cpf: '123',\n          },\n          'unidade-1',\n          'user-1',\n        ),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve lançar BadRequestException para NIS inválido', async () => {\n      await expect(\n        service.create(\n          {\n            ...createCidadaoDto,\n            nis: '123',\n          },\n          'unidade-1',\n          'user-1',\n        ),\n      ).rejects.toThrow(BadRequestException);\n    });\n\n    it('deve lançar ConflictException para CPF já cadastrado', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(mockCidadao);\n\n      await expect(\n        service.create(createCidadaoDto, 'unidade-1', 'user-1'),\n      ).rejects.toThrow(ConflictException);\n    });\n\n    it('deve lançar ConflictException para NIS já cadastrado', async () => {\n      mockCidadaoRepository.findByCpf.mockResolvedValue(null);\n      mockCidadaoRepository.findByNis.mockResolvedValue(mockCidadao);\n\n      await expect(\n        service.create(createCidadaoDto, 'unidade-1', 'user-1'),\n      ).rejects.toThrow(ConflictException);\n    });\n\n    it('deve lançar InternalServerErrorException em caso de erro inesperado', async () => {\n      mockCidadaoRepository.findByCpf.mockRejectedValue(\n        new Error('Erro inesperado'),\n      );\n\n      await expect(\n        service.create(createCidadaoDto, 'unidade-1', 'user-1'),\n      ).rejects.toThrow(InternalServerErrorException);\n    });\n\n    it('deve permitir criação sem NIS', async () => {\n      const { nis, ...dtoSemNis } = createCidadaoDto;\n      mockCidadaoRepository.findByCpf.mockResolvedValue(null);\n      mockCidadaoRepository.create.mockResolvedValue(mockCidadao);\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n\n      await service.create(\n        dtoSemNis as CreateCidadaoDto,\n        'unidade-1',\n        'user-1',\n      );\n\n      expect(mockCidadaoRepository.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          nis: undefined,\n        }),\n      );\n    });\n  });\n\n  describe('findAll', () => {\n    it('deve retornar uma lista paginada de cidadãos com metadados', async () => {\n      const mockCidadaoList = [mockCidadao];\n      const total = 1;\n\n      mockCidadaoRepository.findAll.mockResolvedValue([mockCidadaoList, total]);\n\n      const result = await service.findAll({\n        page: 1,\n        limit: 10,\n      });\n\n      expect(result).toHaveProperty('items');\n      expect(result).toHaveProperty('meta');\n      expect(result.items).toHaveLength(1);\n      expect(result.meta).toEqual({\n        total: 1,\n        page: 1,\n        limit: 10,\n        pages: 1,\n        hasNext: false,\n        hasPrev: false,\n      });\n    });\n\n    it('deve aplicar filtros de busca corretamente', async () => {\n      const mockCidadaoList = [mockCidadao];\n      const total = 1;\n\n      mockCidadaoRepository.findAll.mockResolvedValue([mockCidadaoList, total]);\n\n      await service.findAll({\n        search: 'João',\n        bairro: 'Centro',\n        ativo: true,\n        unidadeId: 'unidade-1',\n      });\n\n      expect(mockCidadaoRepository.findAll).toHaveBeenCalledWith(\n        expect.objectContaining({\n          where: expect.objectContaining({\n            $or: expect.any(Array),\n            'endereco.bairro': expect.any(Object),\n            ativo: true,\n            unidadeId: 'unidade-1',\n          }),\n        }),\n      );\n    });\n\n    it('deve lançar InternalServerErrorException em caso de erro inesperado', async () => {\n      mockCidadaoRepository.findAll.mockRejectedValue(\n        new Error('Erro inesperado'),\n      );\n\n      await expect(service.findAll({})).rejects.toThrow(\n        InternalServerErrorException,\n      );\n    });\n  });\n\n  describe('addComposicaoFamiliar', () => {\n    const mockComposicao = {\n      nome: 'Maria da Silva',\n      parentesco: 'Mãe',\n      data_nascimento: new Date('1960-01-01'),\n      cpf: '98765432100',\n      renda: 1500,\n    };\n\n    it('deve adicionar um membro à composição familiar', async () => {\n      const cidadaoAtualizado = {\n        ...mockCidadao,\n        composicao_familiar: [mockComposicao],\n      };\n\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n      mockCidadaoRepository.update.mockResolvedValue(cidadaoAtualizado);\n\n      const result = await service.addComposicaoFamiliar(\n        mockCidadao.id,\n        mockComposicao,\n        'user-1',\n      );\n\n      expect(result.composicao_familiar).toHaveLength(1);\n      expect(result.composicao_familiar).toBeDefined();\n      expect(result.composicao_familiar![0]).toMatchObject({\n        nome: mockComposicao.nome,\n        parentesco: mockComposicao.parentesco,\n      });\n      expect(mockCidadaoRepository.update).toHaveBeenCalled();\n    });\n\n    it('deve inicializar o array de composição familiar se for nulo', async () => {\n      const cidadaoSemComposicao = {\n        ...mockCidadao,\n        composicao_familiar: null,\n      };\n\n      mockCidadaoRepository.findById.mockResolvedValue(cidadaoSemComposicao);\n\n      await service.addComposicaoFamiliar(\n        mockCidadao.id,\n        mockComposicao,\n        'user-1',\n      );\n\n      expect(mockCidadaoRepository.update).toHaveBeenCalledWith(\n        mockCidadao.id,\n        expect.objectContaining({\n          composicao_familiar: expect.arrayContaining([\n            expect.objectContaining({\n              nome: mockComposicao.nome,\n              criadoPor: 'user-1',\n            }),\n          ]),\n        }),\n      );\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não for encontrado', async () => {\n      mockCidadaoRepository.findById.mockResolvedValue(null);\n\n      await expect(\n        service.addComposicaoFamiliar(\n          'id-inexistente',\n          mockComposicao,\n          'user-1',\n        ),\n      ).rejects.toThrow(NotFoundException);\n    });\n\n    it('deve lançar InternalServerErrorException em caso de erro inesperado', async () => {\n      mockCidadaoRepository.findById.mockRejectedValue(\n        new Error('Erro inesperado'),\n      );\n\n      await expect(\n        service.addComposicaoFamiliar('id-valido', mockComposicao, 'user-1'),\n      ).rejects.toThrow(InternalServerErrorException);\n    });\n  });\n\n  describe('remove', () => {\n    beforeEach(() => {\n      jest.clearAllMocks();\n    });\n\n    it('deve remover um cidadão existente (soft delete)', async () => {\n      mockCidadaoRepository.findById.mockResolvedValue(mockCidadao);\n\n      await service.remove(mockCidadao.id, 'user-1');\n\n      expect(mockCidadaoRepository.update).toHaveBeenCalledWith(mockCidadao.id, {\n        removed_at: expect.any(Date),\n      });\n    });\n\n    it('deve lançar BadRequestException para ID vazio', async () => {\n      await expect(service.remove('', 'user-1')).rejects.toThrow(\n        BadRequestException,\n      );\n    });\n\n    it('deve lançar NotFoundException quando o cidadão não for encontrado', async () => {\n      mockCidadaoRepository.findById.mockResolvedValue(null);\n\n      await expect(service.remove('id-inexistente', 'user-1')).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('deve lançar InternalServerErrorException em caso de erro inesperado', async () => {\n      mockCidadaoRepository.findById.mockRejectedValue(\n        new Error('Erro inesperado'),\n      );\n\n      await expect(service.remove('id-válido', 'user-1')).rejects.toThrow(\n        InternalServerErrorException,\n      );\n    });\n\n    it('não deve tentar remover um cidadão já removido', async () => {\n      const cidadaoRemovido = {\n        ...mockCidadao,\n        removed_at: new Date(),\n      };\n\n      mockCidadaoRepository.findById.mockResolvedValue(cidadaoRemovido);\n\n      await service.remove(mockCidadao.id, 'user-1');\n\n      // Verifica se o update foi chamado mesmo para um cidadão já removido\n      expect(mockCidadaoRepository.update).toHaveBeenCalled();\n    });\n  });\n});\n"],"version":3}