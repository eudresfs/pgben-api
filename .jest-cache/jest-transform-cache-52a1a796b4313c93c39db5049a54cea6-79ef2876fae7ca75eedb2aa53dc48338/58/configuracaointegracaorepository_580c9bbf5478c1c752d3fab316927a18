06803c15033a199026b8dd169dd5396e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfiguracaoIntegracaoRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const configuracao_integracao_entity_1 = require("../../../entities/configuracao-integracao.entity");
/**
 * Repositório para gerenciamento de configurações de integração externa
 *
 * Fornece operações de acesso a dados para entidade ConfiguracaoIntegracao
 */
let ConfiguracaoIntegracaoRepository = class ConfiguracaoIntegracaoRepository {
    repository;
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Encontra uma configuração de integração pelo seu código
     * @param codigo Código da configuração
     * @returns Configuração encontrada ou null
     */
    async findByCodigo(codigo) {
        return this.repository.findOne({ where: { codigo } });
    }
    /**
     * Busca todas as configurações de integração
     * @param tipo Tipo opcional para filtrar integrações
     * @returns Lista de configurações
     */
    async findAll(tipo) {
        const whereClause = tipo ? { tipo } : {};
        return this.repository.find({
            where: whereClause,
            order: { tipo: 'ASC', codigo: 'ASC' },
        });
    }
    /**
     * Salva uma configuração de integração no banco de dados
     * @param integracao Configuração a ser salva
     * @returns Configuração salva
     */
    async save(integracao) {
        return this.repository.save(integracao);
    }
    /**
     * Remove uma configuração de integração do banco de dados
     * @param id ID da configuração a ser removida
     */
    async remove(id) {
        await this.repository.delete(id);
    }
    /**
     * Busca configurações por tipo de integração
     * @param tipo Tipo das configurações
     * @returns Lista de configurações do tipo
     */
    async findByTipo(tipo) {
        return this.repository.find({
            where: { tipo },
            order: { codigo: 'ASC' },
        });
    }
    /**
     * Verifica se existe uma configuração com o código especificado
     * @param codigo Código da configuração
     * @returns true se existir, false caso contrário
     */
    async existsByCodigo(codigo) {
        const count = await this.repository.count({ where: { codigo } });
        return count > 0;
    }
    /**
     * Encontra a configuração ativa para um determinado tipo de integração
     * @param tipo Tipo da integração
     * @returns Configuração ativa ou null
     */
    async findActiveByTipo(tipo) {
        return this.repository.findOne({
            where: { tipo, ativo: true },
            order: { updated_at: 'DESC' },
        });
    }
};
exports.ConfiguracaoIntegracaoRepository = ConfiguracaoIntegracaoRepository;
exports.ConfiguracaoIntegracaoRepository = ConfiguracaoIntegracaoRepository = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(configuracao_integracao_entity_1.ConfiguracaoIntegracao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ConfiguracaoIntegracaoRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNvbmZpZ3VyYWNhb1xccmVwb3NpdG9yaWVzXFxjb25maWd1cmFjYW8taW50ZWdyYWNhby5yZXBvc2l0b3J5LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBNEM7QUFDNUMsNkNBQW1EO0FBQ25ELHFDQUFxQztBQUNyQyxxR0FBMEY7QUFHMUY7Ozs7R0FJRztBQUVJLElBQU0sZ0NBQWdDLEdBQXRDLE1BQU0sZ0NBQWdDO0lBR3hCO0lBRm5CLFlBRW1CLFVBQThDO1FBQTlDLGVBQVUsR0FBVixVQUFVLENBQW9DO0lBQzlELENBQUM7SUFFSjs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFlBQVksQ0FBQyxNQUFjO1FBQy9CLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLElBQXlCO1FBQ3JDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3pDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDMUIsS0FBSyxFQUFFLFdBQVc7WUFDbEIsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO1NBQ3RDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLElBQUksQ0FDUixVQUFrQztRQUVsQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQVU7UUFDckIsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxVQUFVLENBQ2QsSUFBd0I7UUFFeEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUMxQixLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUU7WUFDZixLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFjO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDakUsT0FBTyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQixDQUNwQixJQUF3QjtRQUV4QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQzdCLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1lBQzVCLEtBQUssRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7U0FDOUIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGLENBQUE7QUFwRlksNEVBQWdDOzJDQUFoQyxnQ0FBZ0M7SUFENUMsSUFBQSxtQkFBVSxHQUFFO0lBR1IsV0FBQSxJQUFBLDBCQUFnQixFQUFDLHVEQUFzQixDQUFDLENBQUE7eURBQ1osb0JBQVUsb0JBQVYsb0JBQVU7R0FIOUIsZ0NBQWdDLENBb0Y1QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcY29uZmlndXJhY2FvXFxyZXBvc2l0b3JpZXNcXGNvbmZpZ3VyYWNhby1pbnRlZ3JhY2FvLnJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHsgQ29uZmlndXJhY2FvSW50ZWdyYWNhbyB9IGZyb20gJy4uLy4uLy4uL2VudGl0aWVzL2NvbmZpZ3VyYWNhby1pbnRlZ3JhY2FvLmVudGl0eSc7XG5pbXBvcnQgeyBJbnRlZ3JhY2FvVGlwb0VudW0gfSBmcm9tICcuLi8uLi8uLi9lbnVtcy9pbnRlZ3JhY2FvLXRpcG8uZW51bSc7XG5cbi8qKlxuICogUmVwb3NpdMOzcmlvIHBhcmEgZ2VyZW5jaWFtZW50byBkZSBjb25maWd1cmHDp8O1ZXMgZGUgaW50ZWdyYcOnw6NvIGV4dGVybmFcbiAqXG4gKiBGb3JuZWNlIG9wZXJhw6fDtWVzIGRlIGFjZXNzbyBhIGRhZG9zIHBhcmEgZW50aWRhZGUgQ29uZmlndXJhY2FvSW50ZWdyYWNhb1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29uZmlndXJhY2FvSW50ZWdyYWNhb1JlcG9zaXRvcnkge1xuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0UmVwb3NpdG9yeShDb25maWd1cmFjYW9JbnRlZ3JhY2FvKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxDb25maWd1cmFjYW9JbnRlZ3JhY2FvPixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBFbmNvbnRyYSB1bWEgY29uZmlndXJhw6fDo28gZGUgaW50ZWdyYcOnw6NvIHBlbG8gc2V1IGPDs2RpZ29cbiAgICogQHBhcmFtIGNvZGlnbyBDw7NkaWdvIGRhIGNvbmZpZ3VyYcOnw6NvXG4gICAqIEByZXR1cm5zIENvbmZpZ3VyYcOnw6NvIGVuY29udHJhZGEgb3UgbnVsbFxuICAgKi9cbiAgYXN5bmMgZmluZEJ5Q29kaWdvKGNvZGlnbzogc3RyaW5nKTogUHJvbWlzZTxDb25maWd1cmFjYW9JbnRlZ3JhY2FvIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZE9uZSh7IHdoZXJlOiB7IGNvZGlnbyB9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIHRvZGFzIGFzIGNvbmZpZ3VyYcOnw7VlcyBkZSBpbnRlZ3Jhw6fDo29cbiAgICogQHBhcmFtIHRpcG8gVGlwbyBvcGNpb25hbCBwYXJhIGZpbHRyYXIgaW50ZWdyYcOnw7Vlc1xuICAgKiBAcmV0dXJucyBMaXN0YSBkZSBjb25maWd1cmHDp8O1ZXNcbiAgICovXG4gIGFzeW5jIGZpbmRBbGwodGlwbz86IEludGVncmFjYW9UaXBvRW51bSk6IFByb21pc2U8Q29uZmlndXJhY2FvSW50ZWdyYWNhb1tdPiB7XG4gICAgY29uc3Qgd2hlcmVDbGF1c2UgPSB0aXBvID8geyB0aXBvIH0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmZpbmQoe1xuICAgICAgd2hlcmU6IHdoZXJlQ2xhdXNlLFxuICAgICAgb3JkZXI6IHsgdGlwbzogJ0FTQycsIGNvZGlnbzogJ0FTQycgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYWx2YSB1bWEgY29uZmlndXJhw6fDo28gZGUgaW50ZWdyYcOnw6NvIG5vIGJhbmNvIGRlIGRhZG9zXG4gICAqIEBwYXJhbSBpbnRlZ3JhY2FvIENvbmZpZ3VyYcOnw6NvIGEgc2VyIHNhbHZhXG4gICAqIEByZXR1cm5zIENvbmZpZ3VyYcOnw6NvIHNhbHZhXG4gICAqL1xuICBhc3luYyBzYXZlKFxuICAgIGludGVncmFjYW86IENvbmZpZ3VyYWNhb0ludGVncmFjYW8sXG4gICk6IFByb21pc2U8Q29uZmlndXJhY2FvSW50ZWdyYWNhbz4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuc2F2ZShpbnRlZ3JhY2FvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdW1hIGNvbmZpZ3VyYcOnw6NvIGRlIGludGVncmHDp8OjbyBkbyBiYW5jbyBkZSBkYWRvc1xuICAgKiBAcGFyYW0gaWQgSUQgZGEgY29uZmlndXJhw6fDo28gYSBzZXIgcmVtb3ZpZGFcbiAgICovXG4gIGFzeW5jIHJlbW92ZShpZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5yZXBvc2l0b3J5LmRlbGV0ZShpZCk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgY29uZmlndXJhw6fDtWVzIHBvciB0aXBvIGRlIGludGVncmHDp8Ojb1xuICAgKiBAcGFyYW0gdGlwbyBUaXBvIGRhcyBjb25maWd1cmHDp8O1ZXNcbiAgICogQHJldHVybnMgTGlzdGEgZGUgY29uZmlndXJhw6fDtWVzIGRvIHRpcG9cbiAgICovXG4gIGFzeW5jIGZpbmRCeVRpcG8oXG4gICAgdGlwbzogSW50ZWdyYWNhb1RpcG9FbnVtLFxuICApOiBQcm9taXNlPENvbmZpZ3VyYWNhb0ludGVncmFjYW9bXT4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZCh7XG4gICAgICB3aGVyZTogeyB0aXBvIH0sXG4gICAgICBvcmRlcjogeyBjb2RpZ286ICdBU0MnIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgZXhpc3RlIHVtYSBjb25maWd1cmHDp8OjbyBjb20gbyBjw7NkaWdvIGVzcGVjaWZpY2Fkb1xuICAgKiBAcGFyYW0gY29kaWdvIEPDs2RpZ28gZGEgY29uZmlndXJhw6fDo29cbiAgICogQHJldHVybnMgdHJ1ZSBzZSBleGlzdGlyLCBmYWxzZSBjYXNvIGNvbnRyw6FyaW9cbiAgICovXG4gIGFzeW5jIGV4aXN0c0J5Q29kaWdvKGNvZGlnbzogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgY291bnQgPSBhd2FpdCB0aGlzLnJlcG9zaXRvcnkuY291bnQoeyB3aGVyZTogeyBjb2RpZ28gfSB9KTtcbiAgICByZXR1cm4gY291bnQgPiAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuY29udHJhIGEgY29uZmlndXJhw6fDo28gYXRpdmEgcGFyYSB1bSBkZXRlcm1pbmFkbyB0aXBvIGRlIGludGVncmHDp8Ojb1xuICAgKiBAcGFyYW0gdGlwbyBUaXBvIGRhIGludGVncmHDp8Ojb1xuICAgKiBAcmV0dXJucyBDb25maWd1cmHDp8OjbyBhdGl2YSBvdSBudWxsXG4gICAqL1xuICBhc3luYyBmaW5kQWN0aXZlQnlUaXBvKFxuICAgIHRpcG86IEludGVncmFjYW9UaXBvRW51bSxcbiAgKTogUHJvbWlzZTxDb25maWd1cmFjYW9JbnRlZ3JhY2FvIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZmluZE9uZSh7XG4gICAgICB3aGVyZTogeyB0aXBvLCBhdGl2bzogdHJ1ZSB9LFxuICAgICAgb3JkZXI6IHsgdXBkYXRlZF9hdDogJ0RFU0MnIH0sXG4gICAgfSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==