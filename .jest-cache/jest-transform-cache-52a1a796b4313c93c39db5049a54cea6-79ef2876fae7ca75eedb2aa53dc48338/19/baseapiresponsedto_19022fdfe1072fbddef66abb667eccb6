8b518a3f7cd933f131a84b7f9f922a55
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseApiErrorResponse = exports.BaseApiErrorObject = exports.BaseApiResponse = void 0;
exports.SwaggerBaseApiResponse = SwaggerBaseApiResponse;
const swagger_1 = require("@nestjs/swagger");
class BaseApiResponse {
    data; // Swagger Decorator is added in the extended class below, since that will override this one.
    meta;
}
exports.BaseApiResponse = BaseApiResponse;
__decorate([
    (0, swagger_1.ApiProperty)({ type: Object }),
    __metadata("design:type", Object)
], BaseApiResponse.prototype, "meta", void 0);
function SwaggerBaseApiResponse(type) {
    class ExtendedBaseApiResponse extends BaseApiResponse {
    }
    __decorate([
        (0, swagger_1.ApiProperty)({ type: type }) // Casting `type` to `any` to bypass type checking for now
        ,
        __metadata("design:type", Object)
    ], ExtendedBaseApiResponse.prototype, "data", void 0);
    // NOTE : Overwrite the returned class name, otherwise whichever type calls this function in the last,
    // will overwrite all previous definitions. i.e., Swagger will have all response types as the same one.
    const isAnArray = Array.isArray(type) ? ' [ ] ' : '';
    Object.defineProperty(ExtendedBaseApiResponse, 'name', {
        value: `SwaggerBaseApiResponseFor ${type} ${isAnArray}`,
    });
    return ExtendedBaseApiResponse;
}
class BaseApiErrorObject {
    statusCode;
    message;
    localizedMessage;
    errorName;
    details;
    path;
    requestId;
    timestamp;
}
exports.BaseApiErrorObject = BaseApiErrorObject;
__decorate([
    (0, swagger_1.ApiProperty)({ type: Number }),
    __metadata("design:type", Number)
], BaseApiErrorObject.prototype, "statusCode", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ type: String }),
    __metadata("design:type", String)
], BaseApiErrorObject.prototype, "message", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({ type: String }),
    __metadata("design:type", String)
], BaseApiErrorObject.prototype, "localizedMessage", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ type: String }),
    __metadata("design:type", String)
], BaseApiErrorObject.prototype, "errorName", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ type: Object }),
    __metadata("design:type", Object)
], BaseApiErrorObject.prototype, "details", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ type: String }),
    __metadata("design:type", String)
], BaseApiErrorObject.prototype, "path", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ type: String }),
    __metadata("design:type", String)
], BaseApiErrorObject.prototype, "requestId", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({ type: String }),
    __metadata("design:type", String)
], BaseApiErrorObject.prototype, "timestamp", void 0);
class BaseApiErrorResponse {
    error;
}
exports.BaseApiErrorResponse = BaseApiErrorResponse;
__decorate([
    (0, swagger_1.ApiProperty)({ type: BaseApiErrorObject }),
    __metadata("design:type", BaseApiErrorObject)
], BaseApiErrorResponse.prototype, "error", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcZHRvc1xcYmFzZS1hcGktcmVzcG9uc2UuZHRvLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQWlCQSx3REFlQztBQS9CRCw2Q0FBbUU7QUFFbkUsTUFBYSxlQUFlO0lBQ25CLElBQUksQ0FBSSxDQUFDLDZGQUE2RjtJQUd0RyxJQUFJLENBQU07Q0FDbEI7QUFMRCwwQ0FLQztBQURRO0lBRE4sSUFBQSxxQkFBVyxFQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDOzs2Q0FDYjtBQVVuQixTQUFnQixzQkFBc0IsQ0FDcEMsSUFBTztJQUVQLE1BQU0sdUJBQTJCLFNBQVEsZUFBa0I7S0FHMUQ7SUFEZ0I7UUFEZCxJQUFBLHFCQUFXLEVBQUMsRUFBRSxJQUFJLEVBQUUsSUFBVyxFQUFFLENBQUMsQ0FBQywwREFBMEQ7Ozt5REFDdkU7SUFFekIsc0dBQXNHO0lBQ3RHLHVHQUF1RztJQUN2RyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNyRCxNQUFNLENBQUMsY0FBYyxDQUFDLHVCQUF1QixFQUFFLE1BQU0sRUFBRTtRQUNyRCxLQUFLLEVBQUUsNkJBQTZCLElBQUksSUFBSSxTQUFTLEVBQUU7S0FDeEQsQ0FBQyxDQUFDO0lBRUgsT0FBTyx1QkFBdUIsQ0FBQztBQUNqQyxDQUFDO0FBRUQsTUFBYSxrQkFBa0I7SUFFdEIsVUFBVSxDQUFTO0lBR25CLE9BQU8sQ0FBUztJQUdoQixnQkFBZ0IsQ0FBUztJQUd6QixTQUFTLENBQVM7SUFHbEIsT0FBTyxDQUFVO0lBR2pCLElBQUksQ0FBUztJQUdiLFNBQVMsQ0FBUztJQUdsQixTQUFTLENBQVM7Q0FDMUI7QUF4QkQsZ0RBd0JDO0FBdEJRO0lBRE4sSUFBQSxxQkFBVyxFQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDOztzREFDSjtBQUduQjtJQUROLElBQUEscUJBQVcsRUFBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQzs7bURBQ1A7QUFHaEI7SUFETixJQUFBLDZCQUFtQixFQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDOzs0REFDTjtBQUd6QjtJQUROLElBQUEscUJBQVcsRUFBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQzs7cURBQ0w7QUFHbEI7SUFETixJQUFBLHFCQUFXLEVBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7O21EQUNOO0FBR2pCO0lBRE4sSUFBQSxxQkFBVyxFQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDOztnREFDVjtBQUdiO0lBRE4sSUFBQSxxQkFBVyxFQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDOztxREFDTDtBQUdsQjtJQUROLElBQUEscUJBQVcsRUFBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQzs7cURBQ0w7QUFHM0IsTUFBYSxvQkFBb0I7SUFFeEIsS0FBSyxDQUFxQjtDQUNsQztBQUhELG9EQUdDO0FBRFE7SUFETixJQUFBLHFCQUFXLEVBQUMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQzs4QkFDNUIsa0JBQWtCO21EQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXGR0b3NcXGJhc2UtYXBpLXJlc3BvbnNlLmR0by50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgQXBpUHJvcGVydHksIEFwaVByb3BlcnR5T3B0aW9uYWwgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xuXG5leHBvcnQgY2xhc3MgQmFzZUFwaVJlc3BvbnNlPFQ+IHtcbiAgcHVibGljIGRhdGE6IFQ7IC8vIFN3YWdnZXIgRGVjb3JhdG9yIGlzIGFkZGVkIGluIHRoZSBleHRlbmRlZCBjbGFzcyBiZWxvdywgc2luY2UgdGhhdCB3aWxsIG92ZXJyaWRlIHRoaXMgb25lLlxuXG4gIEBBcGlQcm9wZXJ0eSh7IHR5cGU6IE9iamVjdCB9KVxuICBwdWJsaWMgbWV0YTogYW55O1xufVxuXG50eXBlIEFwaVByb3BlcnR5VHlwZSA9XG4gIHwgc3RyaW5nXG4gIHwgUmVjb3JkPHN0cmluZywgYW55PlxuICB8IFR5cGU8dW5rbm93bj5cbiAgfCBbbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55XVxuICB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIFN3YWdnZXJCYXNlQXBpUmVzcG9uc2U8VCBleHRlbmRzIEFwaVByb3BlcnR5VHlwZT4oXG4gIHR5cGU6IFQsXG4pOiB0eXBlb2YgQmFzZUFwaVJlc3BvbnNlIHtcbiAgY2xhc3MgRXh0ZW5kZWRCYXNlQXBpUmVzcG9uc2U8VD4gZXh0ZW5kcyBCYXNlQXBpUmVzcG9uc2U8VD4ge1xuICAgIEBBcGlQcm9wZXJ0eSh7IHR5cGU6IHR5cGUgYXMgYW55IH0pIC8vIENhc3RpbmcgYHR5cGVgIHRvIGBhbnlgIHRvIGJ5cGFzcyB0eXBlIGNoZWNraW5nIGZvciBub3dcbiAgICBkZWNsYXJlIHB1YmxpYyBkYXRhOiBUO1xuICB9XG4gIC8vIE5PVEUgOiBPdmVyd3JpdGUgdGhlIHJldHVybmVkIGNsYXNzIG5hbWUsIG90aGVyd2lzZSB3aGljaGV2ZXIgdHlwZSBjYWxscyB0aGlzIGZ1bmN0aW9uIGluIHRoZSBsYXN0LFxuICAvLyB3aWxsIG92ZXJ3cml0ZSBhbGwgcHJldmlvdXMgZGVmaW5pdGlvbnMuIGkuZS4sIFN3YWdnZXIgd2lsbCBoYXZlIGFsbCByZXNwb25zZSB0eXBlcyBhcyB0aGUgc2FtZSBvbmUuXG4gIGNvbnN0IGlzQW5BcnJheSA9IEFycmF5LmlzQXJyYXkodHlwZSkgPyAnIFsgXSAnIDogJyc7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFeHRlbmRlZEJhc2VBcGlSZXNwb25zZSwgJ25hbWUnLCB7XG4gICAgdmFsdWU6IGBTd2FnZ2VyQmFzZUFwaVJlc3BvbnNlRm9yICR7dHlwZX0gJHtpc0FuQXJyYXl9YCxcbiAgfSk7XG5cbiAgcmV0dXJuIEV4dGVuZGVkQmFzZUFwaVJlc3BvbnNlO1xufVxuXG5leHBvcnQgY2xhc3MgQmFzZUFwaUVycm9yT2JqZWN0IHtcbiAgQEFwaVByb3BlcnR5KHsgdHlwZTogTnVtYmVyIH0pXG4gIHB1YmxpYyBzdGF0dXNDb2RlOiBudW1iZXI7XG5cbiAgQEFwaVByb3BlcnR5KHsgdHlwZTogU3RyaW5nIH0pXG4gIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgQEFwaVByb3BlcnR5T3B0aW9uYWwoeyB0eXBlOiBTdHJpbmcgfSlcbiAgcHVibGljIGxvY2FsaXplZE1lc3NhZ2U6IHN0cmluZztcblxuICBAQXBpUHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbiAgcHVibGljIGVycm9yTmFtZTogc3RyaW5nO1xuXG4gIEBBcGlQcm9wZXJ0eSh7IHR5cGU6IE9iamVjdCB9KVxuICBwdWJsaWMgZGV0YWlsczogdW5rbm93bjtcblxuICBAQXBpUHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbiAgcHVibGljIHBhdGg6IHN0cmluZztcblxuICBAQXBpUHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbiAgcHVibGljIHJlcXVlc3RJZDogc3RyaW5nO1xuXG4gIEBBcGlQcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICBwdWJsaWMgdGltZXN0YW1wOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlQXBpRXJyb3JSZXNwb25zZSB7XG4gIEBBcGlQcm9wZXJ0eSh7IHR5cGU6IEJhc2VBcGlFcnJvck9iamVjdCB9KVxuICBwdWJsaWMgZXJyb3I6IEJhc2VBcGlFcnJvck9iamVjdDtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==