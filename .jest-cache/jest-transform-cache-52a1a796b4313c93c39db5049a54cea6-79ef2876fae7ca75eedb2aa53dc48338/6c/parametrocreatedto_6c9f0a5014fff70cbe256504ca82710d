eb4e74bfb4ec1389076d2b955c38fb6b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParametroCreateDto = void 0;
const swagger_1 = require("@nestjs/swagger");
const class_validator_1 = require("class-validator");
const enums_1 = require("../../../../enums");
/**
 * DTO para criação de um novo parâmetro de configuração.
 */
class ParametroCreateDto {
    chave;
    valor;
    tipo;
    descricao;
    categoria;
}
exports.ParametroCreateDto = ParametroCreateDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Chave única que identifica o parâmetro',
        example: 'sistema.nome',
        maxLength: 100,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'A chave é obrigatória' }),
    (0, class_validator_1.IsString)({ message: 'A chave deve ser uma string' }),
    (0, class_validator_1.MinLength)(3, { message: 'A chave deve ter no mínimo 3 caracteres' }),
    (0, class_validator_1.MaxLength)(100, { message: 'A chave deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], ParametroCreateDto.prototype, "chave", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Valor do parâmetro (será convertido conforme o tipo)',
        example: 'Sistema de Gestão de Benefícios',
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'O valor é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'O valor deve ser uma string' }),
    __metadata("design:type", String)
], ParametroCreateDto.prototype, "valor", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tipo do parâmetro, que determina como o valor será convertido',
        enum: enums_1.ParametroTipoEnum,
        example: enums_1.ParametroTipoEnum.STRING,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'O tipo é obrigatório' }),
    (0, class_validator_1.IsEnum)(enums_1.ParametroTipoEnum, { message: 'Tipo de parâmetro inválido' }),
    __metadata("design:type", typeof (_a = typeof enums_1.ParametroTipoEnum !== "undefined" && enums_1.ParametroTipoEnum) === "function" ? _a : Object)
], ParametroCreateDto.prototype, "tipo", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Descrição do parâmetro, explicando seu propósito e uso',
        example: 'Nome do sistema exibido na interface',
        maxLength: 500,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'A descrição é obrigatória' }),
    (0, class_validator_1.IsString)({ message: 'A descrição deve ser uma string' }),
    (0, class_validator_1.MaxLength)(500, { message: 'A descrição deve ter no máximo 500 caracteres' }),
    __metadata("design:type", String)
], ParametroCreateDto.prototype, "descricao", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Categoria para agrupamento lógico dos parâmetros',
        example: 'sistema',
        maxLength: 100,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'A categoria é obrigatória' }),
    (0, class_validator_1.IsString)({ message: 'A categoria deve ser uma string' }),
    (0, class_validator_1.MaxLength)(100, { message: 'A categoria deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], ParametroCreateDto.prototype, "categoria", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNvbmZpZ3VyYWNhb1xcZHRvc1xccGFyYW1ldHJvXFxwYXJhbWV0cm8tY3JlYXRlLmR0by50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQThDO0FBQzlDLHFEQU15QjtBQUN6Qiw2Q0FBc0Q7QUFFdEQ7O0dBRUc7QUFDSCxNQUFhLGtCQUFrQjtJQVU3QixLQUFLLENBQVM7SUFRZCxLQUFLLENBQVM7SUFVZCxJQUFJLENBQW9CO0lBVXhCLFNBQVMsQ0FBUztJQVVsQixTQUFTLENBQVM7Q0FDbkI7QUFqREQsZ0RBaURDO0FBdkNDO0lBVEMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUFFLHdDQUF3QztRQUNyRCxPQUFPLEVBQUUsY0FBYztRQUN2QixTQUFTLEVBQUUsR0FBRztLQUNmLENBQUM7SUFDRCxJQUFBLDRCQUFVLEVBQUMsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQztJQUNoRCxJQUFBLDBCQUFRLEVBQUMsRUFBRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsQ0FBQztJQUNwRCxJQUFBLDJCQUFTLEVBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLHlDQUF5QyxFQUFFLENBQUM7SUFDcEUsSUFBQSwyQkFBUyxFQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSwyQ0FBMkMsRUFBRSxDQUFDOztpREFDM0Q7QUFRZDtJQU5DLElBQUEscUJBQVcsRUFBQztRQUNYLFdBQVcsRUFBRSxzREFBc0Q7UUFDbkUsT0FBTyxFQUFFLGlDQUFpQztLQUMzQyxDQUFDO0lBQ0QsSUFBQSw0QkFBVSxFQUFDLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLENBQUM7SUFDaEQsSUFBQSwwQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLENBQUM7O2lEQUN2QztBQVVkO0lBUkMsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsV0FBVyxFQUNULCtEQUErRDtRQUNqRSxJQUFJLEVBQUUseUJBQWlCO1FBQ3ZCLE9BQU8sRUFBRSx5QkFBaUIsQ0FBQyxNQUFNO0tBQ2xDLENBQUM7SUFDRCxJQUFBLDRCQUFVLEVBQUMsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztJQUMvQyxJQUFBLHdCQUFNLEVBQUMseUJBQWlCLEVBQUUsRUFBRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsQ0FBQztrREFDL0QseUJBQWlCLG9CQUFqQix5QkFBaUI7Z0RBQUM7QUFVeEI7SUFSQyxJQUFBLHFCQUFXLEVBQUM7UUFDWCxXQUFXLEVBQUUsd0RBQXdEO1FBQ3JFLE9BQU8sRUFBRSxzQ0FBc0M7UUFDL0MsU0FBUyxFQUFFLEdBQUc7S0FDZixDQUFDO0lBQ0QsSUFBQSw0QkFBVSxFQUFDLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLENBQUM7SUFDcEQsSUFBQSwwQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLENBQUM7SUFDeEQsSUFBQSwyQkFBUyxFQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSwrQ0FBK0MsRUFBRSxDQUFDOztxREFDM0Q7QUFVbEI7SUFSQyxJQUFBLHFCQUFXLEVBQUM7UUFDWCxXQUFXLEVBQUUsa0RBQWtEO1FBQy9ELE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFNBQVMsRUFBRSxHQUFHO0tBQ2YsQ0FBQztJQUNELElBQUEsNEJBQVUsRUFBQyxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxDQUFDO0lBQ3BELElBQUEsMEJBQVEsRUFBQyxFQUFFLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxDQUFDO0lBQ3hELElBQUEsMkJBQVMsRUFBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsK0NBQStDLEVBQUUsQ0FBQzs7cURBQzNEIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxjb25maWd1cmFjYW9cXGR0b3NcXHBhcmFtZXRyb1xccGFyYW1ldHJvLWNyZWF0ZS5kdG8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBpUHJvcGVydHkgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xuaW1wb3J0IHtcbiAgSXNFbnVtLFxuICBJc05vdEVtcHR5LFxuICBJc1N0cmluZyxcbiAgTWF4TGVuZ3RoLFxuICBNaW5MZW5ndGgsXG59IGZyb20gJ2NsYXNzLXZhbGlkYXRvcic7XG5pbXBvcnQgeyBQYXJhbWV0cm9UaXBvRW51bSB9IGZyb20gJy4uLy4uLy4uLy4uL2VudW1zJztcblxuLyoqXG4gKiBEVE8gcGFyYSBjcmlhw6fDo28gZGUgdW0gbm92byBwYXLDom1ldHJvIGRlIGNvbmZpZ3VyYcOnw6NvLlxuICovXG5leHBvcnQgY2xhc3MgUGFyYW1ldHJvQ3JlYXRlRHRvIHtcbiAgQEFwaVByb3BlcnR5KHtcbiAgICBkZXNjcmlwdGlvbjogJ0NoYXZlIMO6bmljYSBxdWUgaWRlbnRpZmljYSBvIHBhcsOibWV0cm8nLFxuICAgIGV4YW1wbGU6ICdzaXN0ZW1hLm5vbWUnLFxuICAgIG1heExlbmd0aDogMTAwLFxuICB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdBIGNoYXZlIMOpIG9icmlnYXTDs3JpYScgfSlcbiAgQElzU3RyaW5nKHsgbWVzc2FnZTogJ0EgY2hhdmUgZGV2ZSBzZXIgdW1hIHN0cmluZycgfSlcbiAgQE1pbkxlbmd0aCgzLCB7IG1lc3NhZ2U6ICdBIGNoYXZlIGRldmUgdGVyIG5vIG3DrW5pbW8gMyBjYXJhY3RlcmVzJyB9KVxuICBATWF4TGVuZ3RoKDEwMCwgeyBtZXNzYWdlOiAnQSBjaGF2ZSBkZXZlIHRlciBubyBtw6F4aW1vIDEwMCBjYXJhY3RlcmVzJyB9KVxuICBjaGF2ZTogc3RyaW5nO1xuXG4gIEBBcGlQcm9wZXJ0eSh7XG4gICAgZGVzY3JpcHRpb246ICdWYWxvciBkbyBwYXLDom1ldHJvIChzZXLDoSBjb252ZXJ0aWRvIGNvbmZvcm1lIG8gdGlwbyknLFxuICAgIGV4YW1wbGU6ICdTaXN0ZW1hIGRlIEdlc3TDo28gZGUgQmVuZWbDrWNpb3MnLFxuICB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdPIHZhbG9yIMOpIG9icmlnYXTDs3JpbycgfSlcbiAgQElzU3RyaW5nKHsgbWVzc2FnZTogJ08gdmFsb3IgZGV2ZSBzZXIgdW1hIHN0cmluZycgfSlcbiAgdmFsb3I6IHN0cmluZztcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgJ1RpcG8gZG8gcGFyw6JtZXRybywgcXVlIGRldGVybWluYSBjb21vIG8gdmFsb3Igc2Vyw6EgY29udmVydGlkbycsXG4gICAgZW51bTogUGFyYW1ldHJvVGlwb0VudW0sXG4gICAgZXhhbXBsZTogUGFyYW1ldHJvVGlwb0VudW0uU1RSSU5HLFxuICB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdPIHRpcG8gw6kgb2JyaWdhdMOzcmlvJyB9KVxuICBASXNFbnVtKFBhcmFtZXRyb1RpcG9FbnVtLCB7IG1lc3NhZ2U6ICdUaXBvIGRlIHBhcsOibWV0cm8gaW52w6FsaWRvJyB9KVxuICB0aXBvOiBQYXJhbWV0cm9UaXBvRW51bTtcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnRGVzY3Jpw6fDo28gZG8gcGFyw6JtZXRybywgZXhwbGljYW5kbyBzZXUgcHJvcMOzc2l0byBlIHVzbycsXG4gICAgZXhhbXBsZTogJ05vbWUgZG8gc2lzdGVtYSBleGliaWRvIG5hIGludGVyZmFjZScsXG4gICAgbWF4TGVuZ3RoOiA1MDAsXG4gIH0pXG4gIEBJc05vdEVtcHR5KHsgbWVzc2FnZTogJ0EgZGVzY3Jpw6fDo28gw6kgb2JyaWdhdMOzcmlhJyB9KVxuICBASXNTdHJpbmcoeyBtZXNzYWdlOiAnQSBkZXNjcmnDp8OjbyBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBATWF4TGVuZ3RoKDUwMCwgeyBtZXNzYWdlOiAnQSBkZXNjcmnDp8OjbyBkZXZlIHRlciBubyBtw6F4aW1vIDUwMCBjYXJhY3RlcmVzJyB9KVxuICBkZXNjcmljYW86IHN0cmluZztcblxuICBAQXBpUHJvcGVydHkoe1xuICAgIGRlc2NyaXB0aW9uOiAnQ2F0ZWdvcmlhIHBhcmEgYWdydXBhbWVudG8gbMOzZ2ljbyBkb3MgcGFyw6JtZXRyb3MnLFxuICAgIGV4YW1wbGU6ICdzaXN0ZW1hJyxcbiAgICBtYXhMZW5ndGg6IDEwMCxcbiAgfSlcbiAgQElzTm90RW1wdHkoeyBtZXNzYWdlOiAnQSBjYXRlZ29yaWEgw6kgb2JyaWdhdMOzcmlhJyB9KVxuICBASXNTdHJpbmcoeyBtZXNzYWdlOiAnQSBjYXRlZ29yaWEgZGV2ZSBzZXIgdW1hIHN0cmluZycgfSlcbiAgQE1heExlbmd0aCgxMDAsIHsgbWVzc2FnZTogJ0EgY2F0ZWdvcmlhIGRldmUgdGVyIG5vIG3DoXhpbW8gMTAwIGNhcmFjdGVyZXMnIH0pXG4gIGNhdGVnb3JpYTogc3RyaW5nO1xufVxuIl0sInZlcnNpb24iOjN9