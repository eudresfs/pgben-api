{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\temp-files.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\temp-files.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { TempFilesService } from '../services/temp-files.service';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Testes unitários para o serviço de arquivos temporários\n *\n * Este arquivo contém testes que validam a funcionalidade do serviço\n * responsável por gerenciar arquivos temporários durante a geração de relatórios\n */\ndescribe('TempFilesService', () => {\n  let service: TempFilesService;\n\n  // Mock para fs\n  jest.mock('fs', () => ({\n    existsSync: jest.fn(),\n    mkdirSync: jest.fn(),\n    writeFileSync: jest.fn(),\n    unlinkSync: jest.fn(),\n    promises: {\n      unlink: jest.fn(),\n    },\n  }));\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [TempFilesService],\n    }).compile();\n\n    service = module.get<TempFilesService>(TempFilesService);\n\n    // Reset mocks antes de cada teste\n    jest.clearAllMocks();\n    (fs.existsSync as jest.Mock).mockReturnValue(true);\n  });\n\n  it('deve ser definido', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('getTempFilePath', () => {\n    it('deve gerar um caminho de arquivo temporário com prefixo e extensão', () => {\n      const filePath = service.getTempFilePath('teste', 'pdf');\n      expect(filePath).toMatch(\n        /temp\\/relatorios\\/teste-[a-zA-Z0-9]+-[a-zA-Z0-9]+\\.pdf/,\n      );\n    });\n\n    it('deve criar o diretório temporário se não existir', () => {\n      (fs.existsSync as jest.Mock).mockReturnValueOnce(false);\n\n      service.getTempFilePath('teste', 'pdf');\n\n      expect(fs.mkdirSync).toHaveBeenCalledWith(\n        expect.stringContaining('temp/relatorios'),\n        { recursive: true },\n      );\n    });\n  });\n\n  describe('cleanupTempFile', () => {\n    it('deve excluir um arquivo temporário', async () => {\n      const mockPath = 'temp/relatorios/teste-123.pdf';\n\n      await service.cleanupTempFile(mockPath);\n\n      expect(fs.promises.unlink).toHaveBeenCalledWith(mockPath);\n    });\n\n    it('deve lidar com erros ao excluir arquivos', async () => {\n      const mockPath = 'temp/relatorios/teste-123.pdf';\n      const mockError = new Error('Erro ao excluir arquivo');\n\n      (fs.promises.unlink as jest.Mock).mockRejectedValueOnce(mockError);\n\n      // Não deve lançar erro, apenas logar\n      await expect(service.cleanupTempFile(mockPath)).resolves.not.toThrow();\n    });\n  });\n\n  describe('getTempDir', () => {\n    it('deve retornar o diretório temporário padrão', () => {\n      expect(service.getTempDir()).toBe('temp/relatorios');\n    });\n  });\n});\n"],"version":3}