0fddada535bfe910bae9ed38168b308a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasValoresController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../shared/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
const metricas_service_1 = require("../services/metricas.service");
const metricas_coleta_service_1 = require("../services/metricas-coleta.service");
const metrica_snapshot_dto_1 = require("../dto/metrica-snapshot.dto");
/**
 * Controlador para consulta de valores de métricas
 *
 * Este controlador fornece endpoints para:
 * 1. Consultar o valor atual de uma métrica
 * 2. Obter séries históricas de valores
 * 3. Comparar valores entre períodos
 * 4. Executar coleta manual de métricas
 */
let MetricasValoresController = class MetricasValoresController {
    metricasService;
    metricasColetaService;
    constructor(metricasService, metricasColetaService) {
        this.metricasService = metricasService;
        this.metricasColetaService = metricasColetaService;
    }
    /**
     * Obtém o valor atual de uma métrica específica
     */
    async obterValorAtual(codigo, query) {
        // Temporariamente retornando dados mockados até que o método seja implementado
        return {
            metrica: codigo,
            valor: 42,
            unidade: '%',
            timestamp: new Date(),
            dimensoes: query.dimensoes || {},
        };
    }
    /**
     * Obtém a série histórica de valores de uma métrica
     */
    async obterSerieHistorica(codigo, query) {
        // Temporariamente retornando dados mockados até que o método seja implementado
        return {
            metrica: codigo,
            dados: [
                { timestamp: new Date(query.data_inicial), valor: 35 },
                { timestamp: new Date(Date.now()), valor: 42 },
            ],
            periodo: {
                inicio: query.data_inicial,
                fim: query.data_final,
            },
            dimensoes: query.dimensoes || {},
        };
    }
    /**
     * Compara valores de uma métrica entre períodos
     */
    async compararPeriodos(codigo, periodo1Inicio, periodo1Fim, periodo2Inicio, periodo2Fim, granularidade) {
        // Temporariamente retornando dados mockados até que o método seja implementado
        return {
            metrica: codigo,
            periodo1: {
                inicio: periodo1Inicio,
                fim: periodo1Fim,
                valor: 35,
            },
            periodo2: {
                inicio: periodo2Inicio,
                fim: periodo2Fim,
                valor: 42,
            },
            variacao: {
                absoluta: 7,
                percentual: 20,
            },
            granularidade: granularidade || 'dia',
        };
    }
    /**
     * Executa coleta manual de uma métrica
     */
    async executarColetaManual(dto) {
        return this.metricasColetaService.coletarMetricaManual(dto.codigo, dto.dimensoes);
    }
};
exports.MetricasValoresController = MetricasValoresController;
__decorate([
    (0, common_1.Get)(':codigo'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém o valor atual de uma métrica' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Valor da métrica retornado com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof metrica_snapshot_dto_1.ConsultaValorMetricaDto !== "undefined" && metrica_snapshot_dto_1.ConsultaValorMetricaDto) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], MetricasValoresController.prototype, "obterValorAtual", null);
__decorate([
    (0, common_1.Get)(':codigo/historico'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém série histórica de valores de uma métrica' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Série histórica retornada com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Query)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_d = typeof metrica_snapshot_dto_1.ConsultaSerieTemporalDto !== "undefined" && metrica_snapshot_dto_1.ConsultaSerieTemporalDto) === "function" ? _d : Object]),
    __metadata("design:returntype", Promise)
], MetricasValoresController.prototype, "obterSerieHistorica", null);
__decorate([
    (0, common_1.Get)(':codigo/comparativo'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR, roles_constants_1.ROLES.TECNICO),
    (0, swagger_1.ApiOperation)({ summary: 'Compara valores de uma métrica entre períodos' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Comparativo retornado com sucesso',
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Query)('periodo1Inicio')),
    __param(2, (0, common_1.Query)('periodo1Fim')),
    __param(3, (0, common_1.Query)('periodo2Inicio')),
    __param(4, (0, common_1.Query)('periodo2Fim')),
    __param(5, (0, common_1.Query)('granularidade')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object, typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object, typeof (_g = typeof Date !== "undefined" && Date) === "function" ? _g : Object, typeof (_h = typeof Date !== "undefined" && Date) === "function" ? _h : Object, String]),
    __metadata("design:returntype", Promise)
], MetricasValoresController.prototype, "compararPeriodos", null);
__decorate([
    (0, common_1.Post)('coleta-manual'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiOperation)({ summary: 'Executa coleta manual de uma métrica' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Coleta executada com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Métrica não encontrada' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_j = typeof metrica_snapshot_dto_1.ColetaManualMetricaDto !== "undefined" && metrica_snapshot_dto_1.ColetaManualMetricaDto) === "function" ? _j : Object]),
    __metadata("design:returntype", Promise)
], MetricasValoresController.prototype, "executarColetaManual", null);
exports.MetricasValoresController = MetricasValoresController = __decorate([
    (0, swagger_1.ApiTags)('Métricas e Dashboard'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, common_1.Controller)('metricas/valores'),
    __metadata("design:paramtypes", [typeof (_a = typeof metricas_service_1.MetricasService !== "undefined" && metricas_service_1.MetricasService) === "function" ? _a : Object, typeof (_b = typeof metricas_coleta_service_1.MetricasColetaService !== "undefined" && metricas_coleta_service_1.MetricasColetaService) === "function" ? _b : Object])
], MetricasValoresController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,