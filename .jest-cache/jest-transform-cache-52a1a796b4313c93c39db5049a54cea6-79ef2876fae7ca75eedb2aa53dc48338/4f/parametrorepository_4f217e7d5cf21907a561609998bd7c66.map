{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\parametro.repository.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAAmD;AACnD,qCAAqC;AACrC,gDAA8C;AAE9C;;;;GAIG;AAEI,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAGX;IAFnB,YAEmB,UAAiC;QAAjC,eAAU,GAAV,UAAU,CAAuB;IACjD,CAAC;IAEJ;;;;OAIG;IACH,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAC,SAAkB;QAC9B,MAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACnD,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,WAAW;YAClB,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;SAC1C,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,SAAoB;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,SAAiB;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YAC1B,KAAK,EAAE,EAAE,SAAS,EAAE;YACpB,KAAK,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE;SACxB,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,aAAa,CAAC,KAAa;QAC/B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAChE,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;CACF,CAAA;AAlEY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,oBAAS,CAAC,CAAA;yDACC,oBAAU,oBAAV,oBAAU;GAH9B,mBAAmB,CAkE/B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\repositories\\parametro.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Parametro } from '../../../entities';\n\n/**\n * Repositório para gerenciamento de parâmetros do sistema\n *\n * Fornece operações de acesso a dados para entidade Parametro\n */\n@Injectable()\nexport class ParametroRepository {\n  constructor(\n    @InjectRepository(Parametro)\n    private readonly repository: Repository<Parametro>,\n  ) {}\n\n  /**\n   * Encontra um parâmetro por sua chave\n   * @param chave Chave do parâmetro\n   * @returns Parâmetro encontrado ou null\n   */\n  async findByChave(chave: string): Promise<Parametro | null> {\n    return this.repository.findOne({ where: { chave } });\n  }\n\n  /**\n   * Busca todos os parâmetros do sistema\n   * @param categoria Categoria opcional para filtrar parâmetros\n   * @returns Lista de parâmetros\n   */\n  async findAll(categoria?: string): Promise<Parametro[]> {\n    const whereClause = categoria ? { categoria } : {};\n    return this.repository.find({\n      where: whereClause,\n      order: { categoria: 'ASC', chave: 'ASC' },\n    });\n  }\n\n  /**\n   * Salva um parâmetro no banco de dados\n   * @param parametro Parâmetro a ser salvo\n   * @returns Parâmetro salvo\n   */\n  async save(parametro: Parametro): Promise<Parametro> {\n    return this.repository.save(parametro);\n  }\n\n  /**\n   * Remove um parâmetro do banco de dados\n   * @param id ID do parâmetro a ser removido\n   */\n  async remove(id: number): Promise<void> {\n    await this.repository.delete(id);\n  }\n\n  /**\n   * Busca parâmetros por categoria\n   * @param categoria Categoria dos parâmetros\n   * @returns Lista de parâmetros da categoria\n   */\n  async findByCategoria(categoria: string): Promise<Parametro[]> {\n    return this.repository.find({\n      where: { categoria },\n      order: { chave: 'ASC' },\n    });\n  }\n\n  /**\n   * Verifica se existe um parâmetro com a chave especificada\n   * @param chave Chave do parâmetro\n   * @returns true se existir, false caso contrário\n   */\n  async existsByChave(chave: string): Promise<boolean> {\n    const count = await this.repository.count({ where: { chave } });\n    return count > 0;\n  }\n}\n"],"version":3}