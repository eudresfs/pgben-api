5f53a89ebd7cbd8b0cd182a7fa38d134
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParametroRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const entities_1 = require("../../../entities");
/**
 * Repositório para gerenciamento de parâmetros do sistema
 *
 * Fornece operações de acesso a dados para entidade Parametro
 */
let ParametroRepository = class ParametroRepository {
    repository;
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Encontra um parâmetro por sua chave
     * @param chave Chave do parâmetro
     * @returns Parâmetro encontrado ou null
     */
    async findByChave(chave) {
        return this.repository.findOne({ where: { chave } });
    }
    /**
     * Busca todos os parâmetros do sistema
     * @param categoria Categoria opcional para filtrar parâmetros
     * @returns Lista de parâmetros
     */
    async findAll(categoria) {
        const whereClause = categoria ? { categoria } : {};
        return this.repository.find({
            where: whereClause,
            order: { categoria: 'ASC', chave: 'ASC' },
        });
    }
    /**
     * Salva um parâmetro no banco de dados
     * @param parametro Parâmetro a ser salvo
     * @returns Parâmetro salvo
     */
    async save(parametro) {
        return this.repository.save(parametro);
    }
    /**
     * Remove um parâmetro do banco de dados
     * @param id ID do parâmetro a ser removido
     */
    async remove(id) {
        await this.repository.delete(id);
    }
    /**
     * Busca parâmetros por categoria
     * @param categoria Categoria dos parâmetros
     * @returns Lista de parâmetros da categoria
     */
    async findByCategoria(categoria) {
        return this.repository.find({
            where: { categoria },
            order: { chave: 'ASC' },
        });
    }
    /**
     * Verifica se existe um parâmetro com a chave especificada
     * @param chave Chave do parâmetro
     * @returns true se existir, false caso contrário
     */
    async existsByChave(chave) {
        const count = await this.repository.count({ where: { chave } });
        return count > 0;
    }
};
exports.ParametroRepository = ParametroRepository;
exports.ParametroRepository = ParametroRepository = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(entities_1.Parametro)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], ParametroRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNvbmZpZ3VyYWNhb1xccmVwb3NpdG9yaWVzXFxwYXJhbWV0cm8ucmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTRDO0FBQzVDLDZDQUFtRDtBQUNuRCxxQ0FBcUM7QUFDckMsZ0RBQThDO0FBRTlDOzs7O0dBSUc7QUFFSSxJQUFNLG1CQUFtQixHQUF6QixNQUFNLG1CQUFtQjtJQUdYO0lBRm5CLFlBRW1CLFVBQWlDO1FBQWpDLGVBQVUsR0FBVixVQUFVLENBQXVCO0lBQ2pELENBQUM7SUFFSjs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFhO1FBQzdCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQWtCO1FBQzlCLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ25ELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDMUIsS0FBSyxFQUFFLFdBQVc7WUFDbEIsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1NBQzFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFvQjtRQUM3QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQVU7UUFDckIsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBaUI7UUFDckMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztZQUMxQixLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUU7WUFDcEIsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtTQUN4QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBYTtRQUMvQixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNuQixDQUFDO0NBQ0YsQ0FBQTtBQWxFWSxrREFBbUI7OEJBQW5CLG1CQUFtQjtJQUQvQixJQUFBLG1CQUFVLEdBQUU7SUFHUixXQUFBLElBQUEsMEJBQWdCLEVBQUMsb0JBQVMsQ0FBQyxDQUFBO3lEQUNDLG9CQUFVLG9CQUFWLG9CQUFVO0dBSDlCLG1CQUFtQixDQWtFL0IiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNvbmZpZ3VyYWNhb1xccmVwb3NpdG9yaWVzXFxwYXJhbWV0cm8ucmVwb3NpdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0UmVwb3NpdG9yeSB9IGZyb20gJ0BuZXN0anMvdHlwZW9ybSc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAndHlwZW9ybSc7XG5pbXBvcnQgeyBQYXJhbWV0cm8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdGllcyc7XG5cbi8qKlxuICogUmVwb3NpdMOzcmlvIHBhcmEgZ2VyZW5jaWFtZW50byBkZSBwYXLDom1ldHJvcyBkbyBzaXN0ZW1hXG4gKlxuICogRm9ybmVjZSBvcGVyYcOnw7VlcyBkZSBhY2Vzc28gYSBkYWRvcyBwYXJhIGVudGlkYWRlIFBhcmFtZXRyb1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFyYW1ldHJvUmVwb3NpdG9yeSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFBhcmFtZXRybylcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8UGFyYW1ldHJvPixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBFbmNvbnRyYSB1bSBwYXLDom1ldHJvIHBvciBzdWEgY2hhdmVcbiAgICogQHBhcmFtIGNoYXZlIENoYXZlIGRvIHBhcsOibWV0cm9cbiAgICogQHJldHVybnMgUGFyw6JtZXRybyBlbmNvbnRyYWRvIG91IG51bGxcbiAgICovXG4gIGFzeW5jIGZpbmRCeUNoYXZlKGNoYXZlOiBzdHJpbmcpOiBQcm9taXNlPFBhcmFtZXRybyB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmZpbmRPbmUoeyB3aGVyZTogeyBjaGF2ZSB9IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1c2NhIHRvZG9zIG9zIHBhcsOibWV0cm9zIGRvIHNpc3RlbWFcbiAgICogQHBhcmFtIGNhdGVnb3JpYSBDYXRlZ29yaWEgb3BjaW9uYWwgcGFyYSBmaWx0cmFyIHBhcsOibWV0cm9zXG4gICAqIEByZXR1cm5zIExpc3RhIGRlIHBhcsOibWV0cm9zXG4gICAqL1xuICBhc3luYyBmaW5kQWxsKGNhdGVnb3JpYT86IHN0cmluZyk6IFByb21pc2U8UGFyYW1ldHJvW10+IHtcbiAgICBjb25zdCB3aGVyZUNsYXVzZSA9IGNhdGVnb3JpYSA/IHsgY2F0ZWdvcmlhIH0gOiB7fTtcbiAgICByZXR1cm4gdGhpcy5yZXBvc2l0b3J5LmZpbmQoe1xuICAgICAgd2hlcmU6IHdoZXJlQ2xhdXNlLFxuICAgICAgb3JkZXI6IHsgY2F0ZWdvcmlhOiAnQVNDJywgY2hhdmU6ICdBU0MnIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2FsdmEgdW0gcGFyw6JtZXRybyBubyBiYW5jbyBkZSBkYWRvc1xuICAgKiBAcGFyYW0gcGFyYW1ldHJvIFBhcsOibWV0cm8gYSBzZXIgc2Fsdm9cbiAgICogQHJldHVybnMgUGFyw6JtZXRybyBzYWx2b1xuICAgKi9cbiAgYXN5bmMgc2F2ZShwYXJhbWV0cm86IFBhcmFtZXRybyk6IFByb21pc2U8UGFyYW1ldHJvPiB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5zYXZlKHBhcmFtZXRybyk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHVtIHBhcsOibWV0cm8gZG8gYmFuY28gZGUgZGFkb3NcbiAgICogQHBhcmFtIGlkIElEIGRvIHBhcsOibWV0cm8gYSBzZXIgcmVtb3ZpZG9cbiAgICovXG4gIGFzeW5jIHJlbW92ZShpZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5yZXBvc2l0b3J5LmRlbGV0ZShpZCk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgcGFyw6JtZXRyb3MgcG9yIGNhdGVnb3JpYVxuICAgKiBAcGFyYW0gY2F0ZWdvcmlhIENhdGVnb3JpYSBkb3MgcGFyw6JtZXRyb3NcbiAgICogQHJldHVybnMgTGlzdGEgZGUgcGFyw6JtZXRyb3MgZGEgY2F0ZWdvcmlhXG4gICAqL1xuICBhc3luYyBmaW5kQnlDYXRlZ29yaWEoY2F0ZWdvcmlhOiBzdHJpbmcpOiBQcm9taXNlPFBhcmFtZXRyb1tdPiB7XG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5maW5kKHtcbiAgICAgIHdoZXJlOiB7IGNhdGVnb3JpYSB9LFxuICAgICAgb3JkZXI6IHsgY2hhdmU6ICdBU0MnIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgZXhpc3RlIHVtIHBhcsOibWV0cm8gY29tIGEgY2hhdmUgZXNwZWNpZmljYWRhXG4gICAqIEBwYXJhbSBjaGF2ZSBDaGF2ZSBkbyBwYXLDom1ldHJvXG4gICAqIEByZXR1cm5zIHRydWUgc2UgZXhpc3RpciwgZmFsc2UgY2FzbyBjb250csOhcmlvXG4gICAqL1xuICBhc3luYyBleGlzdHNCeUNoYXZlKGNoYXZlOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHRoaXMucmVwb3NpdG9yeS5jb3VudCh7IHdoZXJlOiB7IGNoYXZlIH0gfSk7XG4gICAgcmV0dXJuIGNvdW50ID4gMDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9