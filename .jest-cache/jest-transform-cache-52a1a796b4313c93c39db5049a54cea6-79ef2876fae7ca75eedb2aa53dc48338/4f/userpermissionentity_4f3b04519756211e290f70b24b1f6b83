826d1877fe8a100bd9f125e01258e5b0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f, _g;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPermission = exports.ScopeType = exports.TipoEscopo = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const permission_entity_1 = require("./permission.entity");
const usuario_entity_1 = require("./usuario.entity");
/**
 * Enum que define os tipos de escopo para permissões
 */
var TipoEscopo;
(function (TipoEscopo) {
    /**
     * Escopo global (acesso a todos os recursos)
     */
    TipoEscopo["GLOBAL"] = "global";
    /**
     * Escopo limitado a uma unidade específica
     */
    TipoEscopo["UNIDADE"] = "unidade";
    /**
     * Escopo limitado ao próprio usuário
     */
    TipoEscopo["PROPRIO"] = "proprio";
})(TipoEscopo || (exports.TipoEscopo = TipoEscopo = {}));
// Mapeamento para compatibilidade com código existente
exports.ScopeType = {
    GLOBAL: TipoEscopo.GLOBAL,
    UNIT: TipoEscopo.UNIDADE,
    SELF: TipoEscopo.PROPRIO,
};
/**
 * Entidade que representa permissões atribuídas diretamente a usuários.
 *
 * Estas permissões podem sobrepor-se às permissões da role do usuário,
 * permitindo conceder ou revogar permissões específicas.
 */
let UserPermission = class UserPermission {
    /**
     * Identificador único do mapeamento
     */
    id;
    /**
     * Referência ao usuário
     */
    usuario_id;
    /**
     * Relação com o usuário
     */
    usuario;
    /**
     * Referência à permissão
     */
    permissao_id;
    /**
     * Relação com a permissão
     */
    permissao;
    /**
     * Se a permissão é concedida (true) ou revogada (false)
     */
    concedida;
    /**
     * Tipo de escopo (GLOBAL, UNIDADE, PROPRIO)
     */
    tipo_escopo;
    /**
     * ID do escopo (ex: ID da unidade)
     */
    escopo_id;
    /**
     * Data de validade (para permissões temporárias)
     */
    valido_ate;
    /**
     * Data de criação
     */
    created_at;
    /**
     * Data de última atualização
     */
    updated_at;
    /**
     * Usuário que criou o mapeamento
     */
    criado_por;
    /**
     * Relação com o usuário que criou o mapeamento
     */
    usuario_criador;
    /**
     * Usuário que atualizou o mapeamento por último
     */
    atualizado_por;
    /**
     * Relação com o usuário que atualizou o mapeamento por último
     */
    usuario_atualizador;
    // Getters e setters para compatibilidade com código existente
    get userId() {
        return this.usuario_id;
    }
    set userId(value) {
        this.usuario_id = value;
    }
    get user() {
        return this.usuario;
    }
    set user(value) {
        this.usuario = value;
    }
    get permissionId() {
        return this.permissao_id;
    }
    set permissionId(value) {
        this.permissao_id = value;
    }
    get permission() {
        return this.permissao;
    }
    set permission(value) {
        this.permissao = value;
    }
    get granted() {
        return this.concedida;
    }
    set granted(value) {
        this.concedida = value;
    }
    get scopeType() {
        return this.tipo_escopo;
    }
    set scopeType(value) {
        this.tipo_escopo = value;
    }
    get scopeId() {
        return this.escopo_id;
    }
    set scopeId(value) {
        this.escopo_id = value;
    }
    get validUntil() {
        return this.valido_ate;
    }
    set validUntil(value) {
        this.valido_ate = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get createdBy() {
        return this.criado_por;
    }
    set createdBy(value) {
        this.criado_por = value;
    }
    get creator() {
        return this.usuario_criador;
    }
    set creator(value) {
        this.usuario_criador = value;
    }
    get updatedBy() {
        return this.atualizado_por;
    }
    set updatedBy(value) {
        this.atualizado_por = value;
    }
    get updater() {
        return this.usuario_atualizador;
    }
    set updater(value) {
        this.usuario_atualizador = value;
    }
    /**
     * Verifica se a permissão foi criada por um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se foi criada pelo usuário
     */
    foiCriadaPor(usuarioId) {
        return this.criado_por === usuarioId;
    }
    /**
     * Verifica se a permissão foi atualizada por um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se foi atualizada pelo usuário
     */
    foiAtualizadaPor(usuarioId) {
        return this.atualizado_por === usuarioId;
    }
    /**
     * Verifica se a permissão ainda é válida (não expirou)
     * @returns true se ainda é válida
     */
    isValida() {
        if (!this.valido_ate)
            return true;
        return new Date() <= this.valido_ate;
    }
    /**
     * Verifica se a permissão expirou
     * @returns true se expirou
     */
    isExpirada() {
        return !this.isValida();
    }
    /**
     * Verifica se a permissão tem escopo global
     * @returns true se é global
     */
    isGlobal() {
        return this.tipo_escopo === TipoEscopo.GLOBAL;
    }
    /**
     * Verifica se a permissão tem escopo de unidade
     * @returns true se é por unidade
     */
    isPorUnidade() {
        return this.tipo_escopo === TipoEscopo.UNIDADE;
    }
    /**
     * Verifica se a permissão tem escopo próprio
     * @returns true se é própria
     */
    isPropria() {
        return this.tipo_escopo === TipoEscopo.PROPRIO;
    }
    /**
     * Verifica se a permissão pertence a um usuário específico
     * @param usuarioId ID do usuário
     * @returns true se pertence ao usuário
     */
    pertenceAoUsuario(usuarioId) {
        return this.usuario_id === usuarioId;
    }
    /**
     * Verifica se a permissão é para uma permissão específica
     * @param permissaoId ID da permissão
     * @returns true se é para a permissão
     */
    isParaPermissao(permissaoId) {
        return this.permissao_id === permissaoId;
    }
    /**
     * Verifica se a permissão tem escopo específico
     * @param escopoId ID do escopo
     * @returns true se tem o escopo
     */
    temEscopo(escopoId) {
        return this.escopo_id === escopoId;
    }
    /**
     * Define a data de validade da permissão
     * @param data Data de validade
     */
    definirValidade(data) {
        this.valido_ate = data;
    }
    /**
     * Remove a data de validade (torna permanente)
     */
    tornarPermanente() {
        this.valido_ate = null;
    }
    /**
     * Atualiza o usuário que modificou a permissão
     * @param usuarioId ID do usuário
     */
    atualizarPor(usuarioId) {
        this.atualizado_por = usuarioId;
    }
    /**
     * Obtém uma chave única para a permissão
     * @returns chave única baseada em usuário e permissão
     */
    getUniqueKey() {
        return `${this.usuario_id}:${this.permissao_id}`;
    }
    /**
     * Obtém o tempo restante até a expiração em dias
     * @returns dias até expiração ou null se permanente
     */
    getDiasAteExpiracao() {
        if (!this.valido_ate)
            return null;
        const now = new Date();
        const diffMs = this.valido_ate.getTime() - now.getTime();
        return Math.max(0, Math.ceil(diffMs / (1000 * 60 * 60 * 24)));
    }
    /**
     * Verifica se a permissão expira em breve
     * @param dias Número de dias para considerar "em breve"
     * @returns true se expira em breve
     */
    expiraEmBreve(dias = 7) {
        const diasRestantes = this.getDiasAteExpiracao();
        return diasRestantes !== null && diasRestantes <= dias;
    }
};
exports.UserPermission = UserPermission;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], UserPermission.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', name: 'usuario_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do usuário é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário inválido' }),
    __metadata("design:type", String)
], UserPermission.prototype, "usuario_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'usuario_id' }),
    __metadata("design:type", typeof (_a = typeof usuario_entity_1.Usuario !== "undefined" && usuario_entity_1.Usuario) === "function" ? _a : Object)
], UserPermission.prototype, "usuario", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', name: 'permissao_id' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da permissão é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID da permissão inválido' }),
    __metadata("design:type", String)
], UserPermission.prototype, "permissao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => permission_entity_1.Permission, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'permissao_id' }),
    __metadata("design:type", typeof (_b = typeof permission_entity_1.Permission !== "undefined" && permission_entity_1.Permission) === "function" ? _b : Object)
], UserPermission.prototype, "permissao", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'boolean', default: true, name: 'concedida' }),
    __metadata("design:type", Boolean)
], UserPermission.prototype, "concedida", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'varchar',
        length: 20,
        name: 'tipo_escopo',
        default: TipoEscopo.GLOBAL,
    }),
    (0, class_validator_1.IsEnum)(TipoEscopo, { message: 'Tipo de escopo inválido' }),
    __metadata("design:type", String)
], UserPermission.prototype, "tipo_escopo", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'escopo_id' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do escopo inválido' }),
    __metadata("design:type", Object)
], UserPermission.prototype, "escopo_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'timestamp', nullable: true, name: 'valido_ate' }),
    __metadata("design:type", Object)
], UserPermission.prototype, "valido_ate", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], UserPermission.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], UserPermission.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'criado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do criador inválido' }),
    __metadata("design:type", Object)
], UserPermission.prototype, "criado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'criado_por' }),
    __metadata("design:type", Object)
], UserPermission.prototype, "usuario_criador", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid', nullable: true, name: 'atualizado_por' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do atualizador inválido' }),
    __metadata("design:type", Object)
], UserPermission.prototype, "atualizado_por", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => usuario_entity_1.Usuario, { nullable: true }),
    (0, typeorm_1.JoinColumn)({ name: 'atualizado_por' }),
    __metadata("design:type", Object)
], UserPermission.prototype, "usuario_atualizador", void 0);
exports.UserPermission = UserPermission = __decorate([
    (0, typeorm_1.Entity)('usuario_permissao'),
    (0, typeorm_1.Index)(['usuario_id', 'permissao_id'], { unique: true }),
    (0, typeorm_1.Index)(['usuario_id']),
    (0, typeorm_1.Index)(['permissao_id']),
    (0, typeorm_1.Index)(['tipo_escopo']),
    (0, typeorm_1.Index)(['escopo_id']),
    (0, typeorm_1.Index)(['criado_por']),
    (0, typeorm_1.Index)(['created_at'])
], UserPermission);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,