81c2deb7f85bbab7f437f4c407979b35
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Permission = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const status_enum_1 = require("../enums/status.enum");
/**
 * Entidade que representa uma permissão no sistema.
 *
 * As permissões seguem o formato `modulo.recurso.operacao` e podem ser compostas
 * (ex: `modulo.*` para representar todas as permissões de um módulo).
 */
let Permission = class Permission {
    /**
     * Identificador único da permissão
     */
    id;
    /**
     * Nome da permissão no formato `modulo.recurso.operacao`
     */
    nome;
    /**
     * Descrição da permissão
     */
    descricao;
    /**
     * Módulo ao qual a permissão pertence
     */
    modulo;
    /**
     * Ação permitida pela permissão
     */
    acao;
    /**
     * Status da permissão (ativo/inativo)
     */
    status;
    // Nota: As propriedades e relacionamentos hierárquicos foram removidos
    // pois não existem no banco de dados.
    // Nota: As colunas criado_por e atualizado_por foram removidas
    // pois não existem no banco de dados atual.
    /**
     * Data de criação
     */
    created_at;
    /**
     * Data de última atualização
     */
    updated_at;
    // Getters e setters para compatibilidade com código existente
    get name() {
        return this.nome;
    }
    set name(value) {
        this.nome = value;
    }
    get description() {
        return this.descricao;
    }
    set description(value) {
        this.descricao = value;
    }
    // Getters e setters para hierarquia foram removidos pois não existem no banco de dados
    // Método para determinar se é uma permissão composta pelo nome
    isHierarchical() {
        return this.nome ? this.nome.includes('.*') : false;
    }
    // Método para obter o módulo de uma permissão pelo nome
    getModule() {
        if (!this.nome) {
            return '';
        }
        const parts = this.nome.split('.');
        return parts.length > 0 ? parts[0] : '';
    }
    // Método para verificar se uma permissão é parte de um módulo
    isPartOfModule(moduleName) {
        return this.nome ? this.nome.startsWith(`${moduleName}.`) : false;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    // Métodos utilitários para gerenciar status
    /**
     * Verifica se a permissão está ativa
     */
    isAtiva() {
        return this.status === status_enum_1.Status.ATIVO;
    }
    /**
     * Ativa a permissão
     */
    ativar() {
        this.status = status_enum_1.Status.ATIVO;
    }
    /**
     * Desativa a permissão
     */
    desativar() {
        this.status = status_enum_1.Status.INATIVO;
    }
    /**
     * Verifica se a permissão pode ser deletada
     * (implementar lógica específica conforme regras de negócio)
     */
    podeSerDeletada() {
        // Por enquanto, permite deletar apenas permissões inativas
        return this.status === status_enum_1.Status.INATIVO;
    }
    /**
     * Valida o formato do nome da permissão
     */
    validarFormatoNome() {
        if (!this.nome)
            return false;
        // Formato esperado: modulo.recurso.operacao ou modulo.*
        const regex = /^[a-zA-Z][a-zA-Z0-9_-]*\.[a-zA-Z*][a-zA-Z0-9_.*-]*$/;
        return regex.test(this.nome);
    }
    /**
     * Extrai informações estruturadas do nome da permissão
     */
    getPermissionInfo() {
        if (!this.nome) {
            return { modulo: '' };
        }
        const parts = this.nome.split('.');
        if (parts.length === 2 && parts[1] === '*') {
            return { modulo: parts[0] };
        }
        if (parts.length >= 3) {
            return {
                modulo: parts[0],
                recurso: parts[1],
                operacao: parts.slice(2).join('.'),
            };
        }
        return { modulo: parts[0] };
    }
    /**
     * Verifica se a permissão é uma permissão de administrador
     */
    isAdminPermission() {
        return this.nome ? this.nome.startsWith('admin.') : false;
    }
    /**
     * Verifica se a permissão é uma permissão de sistema
     */
    isSystemPermission() {
        return this.nome ? this.nome.startsWith('system.') : false;
    }
    /**
     * Verifica se a permissão é uma permissão de leitura
     */
    isReadPermission() {
        return this.nome
            ? this.nome.includes('.read') ||
                this.nome.includes('.view') ||
                this.nome.includes('.list')
            : false;
    }
    /**
     * Verifica se a permissão é uma permissão de escrita
     */
    isWritePermission() {
        return this.nome
            ? this.nome.includes('.write') ||
                this.nome.includes('.create') ||
                this.nome.includes('.update') ||
                this.nome.includes('.delete')
            : false;
    }
    /**
     * Verifica se a permissão é uma permissão global (com wildcard)
     */
    isGlobalPermission() {
        return this.nome ? this.nome.endsWith('.*') : false;
    }
    /**
     * Obtém o nível de criticidade da permissão
     */
    getCriticalityLevel() {
        if (this.isSystemPermission() || this.isAdminPermission()) {
            return 'CRITICAL';
        }
        if (this.isGlobalPermission()) {
            return 'HIGH';
        }
        if (this.isWritePermission()) {
            return 'MEDIUM';
        }
        return 'LOW';
    }
    /**
     * Verifica se a permissão é compatível com outra permissão
     */
    isCompatibleWith(otherPermission) {
        if (!this.nome || !otherPermission.nome) {
            return false;
        }
        // Permissões do mesmo módulo são compatíveis
        return this.getModule() === otherPermission.getModule();
    }
    /**
     * Gera uma chave única para a permissão
     */
    getUniqueKey() {
        return `permission_${this.nome}_${this.id}`;
    }
    /**
     * Verifica se a permissão inclui outra permissão (para permissões hierárquicas)
     */
    includes(otherPermission) {
        if (!this.nome || !otherPermission.nome) {
            return false;
        }
        // Se esta permissão é global para um módulo, inclui todas as permissões do módulo
        if (this.isGlobalPermission()) {
            const thisModule = this.getModule();
            const otherModule = otherPermission.getModule();
            return thisModule === otherModule;
        }
        // Caso contrário, só inclui se for exatamente a mesma permissão
        return this.nome === otherPermission.nome;
    }
    /**
     * Obtém uma descrição amigável da permissão
     */
    getFriendlyDescription() {
        const info = this.getPermissionInfo();
        if (this.isGlobalPermission()) {
            return `Todas as permissões do módulo ${info.modulo}`;
        }
        if (info.recurso && info.operacao) {
            return `${info.operacao} em ${info.recurso} do módulo ${info.modulo}`;
        }
        return this.descricao || this.nome;
    }
    /**
     * Valida se a permissão está em um estado consistente
     */
    isValid() {
        return (!!this.nome &&
            !!this.descricao &&
            this.validarFormatoNome() &&
            Object.values(status_enum_1.Status).includes(this.status));
    }
};
exports.Permission = Permission;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], Permission.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 100, unique: true, name: 'nome' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome da permissão é obrigatório' }),
    (0, class_validator_1.IsString)({ message: 'Nome deve ser uma string' }),
    (0, class_validator_1.Length)(3, 100, { message: 'Nome deve ter entre 3 e 100 caracteres' }),
    __metadata("design:type", String)
], Permission.prototype, "nome", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 255, name: 'descricao' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Descrição da permissão é obrigatória' }),
    (0, class_validator_1.IsString)({ message: 'Descrição deve ser uma string' }),
    (0, class_validator_1.Length)(5, 255, { message: 'Descrição deve ter entre 5 e 255 caracteres' }),
    __metadata("design:type", String)
], Permission.prototype, "descricao", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 50, nullable: true, name: 'modulo' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Módulo deve ser uma string' }),
    (0, class_validator_1.Length)(2, 50, { message: 'Módulo deve ter entre 2 e 50 caracteres' }),
    __metadata("design:type", Object)
], Permission.prototype, "modulo", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'varchar', length: 50, nullable: true, name: 'acao' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Ação deve ser uma string' }),
    (0, class_validator_1.Length)(2, 50, { message: 'Ação deve ter entre 2 e 50 caracteres' }),
    __metadata("design:type", Object)
], Permission.prototype, "acao", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: status_enum_1.Status,
        default: status_enum_1.Status.ATIVO,
        name: 'status',
    }),
    (0, class_validator_1.IsEnum)(status_enum_1.Status, { message: 'Status deve ser ATIVO ou INATIVO' }),
    __metadata("design:type", typeof (_a = typeof status_enum_1.Status !== "undefined" && status_enum_1.Status) === "function" ? _a : Object)
], Permission.prototype, "status", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], Permission.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], Permission.prototype, "updated_at", void 0);
exports.Permission = Permission = __decorate([
    (0, typeorm_1.Entity)('permissao'),
    (0, typeorm_1.Index)(['nome'], { unique: true }),
    (0, typeorm_1.Index)(['modulo']),
    (0, typeorm_1.Index)(['acao']),
    (0, typeorm_1.Index)(['status'])
], Permission);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,