{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\enhanced-metrics.interceptor.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\enhanced-metrics.interceptor.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { EnhancedMetricsInterceptor } from '../enhanced-metrics.interceptor';\nimport { EnhancedMetricsService } from '../enhanced-metrics.service';\nimport {\n  ExecutionContext,\n  CallHandler,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { of, throwError } from 'rxjs';\nimport { Request, Response } from 'express';\nimport { Reflector } from '@nestjs/core';\n\n/**\n * Testes unitários para o interceptor de métricas aprimorado\n *\n * Verifica o funcionamento do interceptor que coleta métricas\n * avançadas sobre as requisições HTTP, com foco em segurança e compliance LGPD\n */\ndescribe('EnhancedMetricsInterceptor', () => {\n  let interceptor: EnhancedMetricsInterceptor;\n  let metricsService: EnhancedMetricsService;\n  let reflector: Reflector;\n\n  // Mock do serviço de métricas aprimoradas\n  const mockMetricsService = {\n    incrementHttpRequestsInProgress: jest.fn(),\n    decrementHttpRequestsInProgress: jest.fn(),\n    recordHttpRequest: jest.fn(),\n    recordHttpRequestDuration: jest.fn(),\n    recordSecurityEvent: jest.fn(),\n    recordLgpdDataAccess: jest.fn(),\n    recordAuthorizationFailure: jest.fn(),\n  };\n\n  // Mock do reflector\n  const mockReflector = {\n    get: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    // Mock para Date.now() - primeiro retorna 1000, depois 1200\n    jest\n      .spyOn(Date, 'now')\n      .mockImplementationOnce(() => 1000)\n      .mockImplementationOnce(() => 1200);\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        EnhancedMetricsInterceptor,\n        {\n          provide: EnhancedMetricsService,\n          useValue: mockMetricsService,\n        },\n        {\n          provide: Reflector,\n          useValue: mockReflector,\n        },\n      ],\n    }).compile();\n\n    interceptor = module.get<EnhancedMetricsInterceptor>(\n      EnhancedMetricsInterceptor,\n    );\n    metricsService = module.get<EnhancedMetricsService>(EnhancedMetricsService);\n    reflector = module.get<Reflector>(Reflector);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  describe('intercept', () => {\n    it('deve coletar métricas para uma requisição bem-sucedida', (done) => {\n      // Mock do contexto de execução\n      const mockRequest = {\n        method: 'GET',\n        originalUrl: '/api/cidadaos',\n        route: {\n          path: '/api/cidadaos',\n        },\n        user: {\n          id: 'user123',\n          roles: ['admin'],\n        },\n        ip: '192.168.1.1',\n        headers: {\n          'user-agent': 'test-agent',\n        },\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 200,\n        getHeaders: jest.fn().mockReturnValue({}),\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(of({ data: 'test' })),\n      } as unknown as CallHandler;\n\n      // Mock do reflector para retornar metadados de LGPD\n      mockReflector.get\n        .mockReturnValueOnce(false) // isPublic\n        .mockReturnValueOnce(['dados_pessoais']); // lgpdDataTypes\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: (data) => {\n          expect(data).toEqual({ data: 'test' });\n\n          // Verificar se as métricas foram coletadas corretamente\n          expect(\n            mockMetricsService.incrementHttpRequestsInProgress,\n          ).toHaveBeenCalledWith('GET', '/api/cidadaos', 'admin');\n\n          expect(\n            mockMetricsService.decrementHttpRequestsInProgress,\n          ).toHaveBeenCalledWith('GET', '/api/cidadaos', 'admin');\n\n          // O método recordHttpRequest não recebe ip e user-agent\n          expect(mockMetricsService.recordHttpRequest).toHaveBeenCalledWith(\n            'GET',\n            '/api/cidadaos',\n            200,\n            'admin',\n          );\n\n          // Verificar se a duração foi registrada\n          // O método recordHttpRequestDuration não recebe ip e user-agent\n          expect(\n            mockMetricsService.recordHttpRequestDuration,\n          ).toHaveBeenCalledWith(\n            'GET',\n            '/api/cidadaos',\n            200,\n            0.2, // 200ms em segundos\n            'admin',\n          );\n\n          // O método recordLgpdDataAccess não é chamado automaticamente no interceptor\n          // A verificação de acesso a dados LGPD deve ser feita manualmente\n\n          done();\n        },\n        error: (err) => {\n          done.fail(`Erro inesperado: ${err}`);\n        },\n      });\n    });\n\n    it('deve coletar métricas para uma requisição com erro', (done) => {\n      // Mock do contexto de execução\n      const mockRequest = {\n        method: 'POST',\n        originalUrl: '/api/cidadaos',\n        route: {\n          path: '/api/cidadaos',\n        },\n        user: {\n          id: 'user123',\n          roles: ['user'],\n        },\n        ip: '192.168.1.2',\n        headers: {\n          'user-agent': 'test-agent',\n        },\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 500,\n        getHeaders: jest.fn().mockReturnValue({}),\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada com erro\n      const mockError = new Error('Erro interno do servidor');\n      (mockError as any).status = 500;\n\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(throwError(() => mockError)),\n      } as unknown as CallHandler;\n\n      // Mock do reflector - não é usado em caso de erro\n      mockReflector.get.mockImplementation((key: string) => {\n        if (key === 'isPublic') {\n          return false;\n        }\n        return undefined;\n      });\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          done.fail('O interceptor deveria ter retornado um erro');\n        },\n        error: (error) => {\n          expect(error).toBe(mockError);\n\n          // Verificar se as métricas de erro foram registradas\n          expect(mockMetricsService.recordHttpRequest).toHaveBeenCalledWith(\n            'POST',\n            '/api/cidadaos',\n            500,\n            'user',\n          );\n\n          // Verificar se a duração foi registrada\n          expect(\n            mockMetricsService.recordHttpRequestDuration,\n          ).toHaveBeenCalledWith(\n            'POST',\n            '/api/cidadaos',\n            500,\n            expect.any(Number), // Duração em segundos\n            'user',\n          );\n\n          // Verificar se o evento de segurança foi registrado\n          expect(mockMetricsService.recordSecurityEvent).toHaveBeenCalledWith(\n            'server_error',\n            'error',\n            'api',\n          );\n\n          done();\n        },\n      });\n    });\n\n    it('deve lidar com requisições não autenticadas', (done) => {\n      // Mock do contexto de execução sem usuário autenticado\n      const mockRequest = {\n        method: 'GET',\n        url: '/api/public',\n        route: {\n          path: '/api/public',\n        },\n        ip: '192.168.1.3',\n        headers: {\n          'user-agent': 'test-agent',\n        },\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 200,\n        getHeaders: jest.fn().mockReturnValue({}),\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(of({ data: 'public data' })),\n      } as unknown as CallHandler;\n\n      // O interceptor não verifica isPublic, apenas registra métricas\n      // A verificação de rotas públicas é feita por outros middlewares/guards\n      mockReflector.get.mockImplementation((key: string) => {\n        if (key === 'isPublic') {\n          return true;\n        }\n        return undefined;\n      });\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: (data) => {\n          expect(data).toEqual({ data: 'public data' });\n\n          // Verificar se as métricas foram coletadas sem informações de usuário\n          expect(mockMetricsService.recordHttpRequest).toHaveBeenCalledWith(\n            'GET',\n            '/api/public',\n            200,\n            'anonymous',\n          );\n\n          // Verificar se a duração foi registrada\n          expect(\n            mockMetricsService.recordHttpRequestDuration,\n          ).toHaveBeenCalledWith(\n            'GET',\n            '/api/public',\n            200,\n            expect.any(Number), // Duração em segundos\n            'anonymous',\n          );\n\n          // O interceptor não verifica isPublic, então não podemos garantir que recordLgpdDataAccess não foi chamado\n          // A verificação de rotas públicas é feita por outros middlewares/guards\n\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('deve lidar com erros de autorização', (done) => {\n      // Mock do contexto de execução com usuário não autorizado\n      const mockRequest = {\n        method: 'GET',\n        originalUrl: '/api/admin',\n        route: {\n          path: '/api/admin',\n        },\n        user: {\n          id: 'user123',\n          roles: ['user'],\n        },\n        ip: '192.168.1.4',\n        headers: {\n          'user-agent': 'test-agent',\n        },\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 403,\n        getHeaders: jest.fn().mockReturnValue({}),\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada com erro de autorização\n      const mockError = new UnauthorizedException('Acesso não autorizado');\n      (mockError as any).status = 403;\n\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(throwError(() => mockError)),\n      } as unknown as CallHandler;\n\n      // Mock do reflector para o teste de autorização\n      mockReflector.get.mockImplementation((key: string) => {\n        if (key === 'isPublic') {\n          return false;\n        }\n        if (key === 'roles') {\n          return ['admin'];\n        }\n        if (key === 'lgpdDataTypes') {\n          return [];\n        }\n        return undefined;\n      });\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          done.fail('Não deveria chegar aqui');\n        },\n        error: (error) => {\n          expect(error).toBe(mockError);\n\n          // Verificar se o evento de segurança foi registrado\n          expect(mockMetricsService.recordSecurityEvent).toHaveBeenCalledWith(\n            'authorization_failure',\n            'warning',\n            'api',\n          );\n\n          // Verificar se a falha de autorização foi registrada\n          expect(\n            mockMetricsService.recordAuthorizationFailure,\n          ).toHaveBeenCalledWith('/api/admin', 'unknown', 'user');\n\n          done();\n        },\n      });\n    });\n  });\n});\n"],"version":3}