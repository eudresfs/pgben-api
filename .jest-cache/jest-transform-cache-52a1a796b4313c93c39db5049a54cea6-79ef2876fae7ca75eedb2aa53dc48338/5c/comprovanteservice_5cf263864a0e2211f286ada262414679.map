{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\comprovante.service.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAAuG;AACvG,6CAAmD;AACnD,qCAAqC;AACrC,iGAAsF;AAItF;;;;;;;GAOG;AAEI,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAcV;IAbnB,6CAA6C;IAC5B,gBAAgB,GAAG;QAClC,iBAAiB;QACjB,YAAY;QACZ,WAAW;QACX,WAAW;KACZ,CAAC;IAEF,iCAAiC;IAChB,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;IAE/C,YAEmB,qBAAuD;QAAvD,0BAAqB,GAArB,qBAAqB,CAAkC;IAKvE,CAAC;IAEJ;;;;;;;;OAQG;IACH,KAAK,CAAC,iBAAiB,CACrB,WAAmB,EACnB,IAAS,EACT,SAA+B,EAC/B,SAAiB;QAEjB,kCAAkC;QAClC,sEAAsE;QAEtE,oBAAoB;QACpB,6DAA6D;QAC7D,IAAI;QAEJ,sEAAsE;QACtE,4DAA4D;QAC5D,iCAAiC;QACjC,oEAAoE;QACpE,OAAO;QACP,IAAI;QAEJ,oBAAoB;QACpB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAExB,8BAA8B;QAC9B,MAAM,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAEnE,iEAAiE;QACjE,qEAAqE;QACrE,uBAAuB;QACvB,iCAAiC;QACjC,6BAA6B;QAC7B,wCAAwC;QACxC,iBAAiB;QACjB,mBAAmB;QACnB,6CAA6C;QAC7C,MAAM;QACN,MAAM;QAEN,gCAAgC;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC;YACpD,YAAY,EAAE,WAAW;YACzB,cAAc,EAAE,SAAS,CAAC,aAAa;YACvC,YAAY,EAAE,iBAAiB;YAC/B,eAAe,EAAE,aAAa,EAAE,qBAAqB;YACrD,OAAO,EAAE,IAAI,CAAC,IAAI;YAClB,SAAS,EAAE,IAAI,CAAC,QAAQ;YACxB,WAAW,EAAE,IAAI,IAAI,EAAE;YACvB,YAAY,EAAE,SAAS;SACxB,CAAC,CAAC;QAEH,oBAAoB;QACpB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAElE,yCAAyC;QACzC,kDAAkD;QAClD,wCAAwC;QACxC,eAAe;QACf,2BAA2B;QAC3B,2CAA2C;QAC3C,2BAA2B;QAC3B,kBAAkB;QAClB,qBAAqB;QACrB,mBAAmB;QACnB,8CAA8C;QAC9C,sCAAsC;QACtC,0BAA0B;QAC1B,8BAA8B;QAC9B,MAAM;QACN,MAAM;QAEN,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,OAAO,CAAC,EAAU;QACtB,OAAO,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,kBAAkB,CAAC,WAAmB;QAC1C,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;YACrC,KAAK,EAAE,EAAE,YAAY,EAAE,WAAW,EAAE;YACpC,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE;SAC/B,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qBAAqB,CAAC,EAAU;QAKpC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAE3C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,CAAC,CAAC;QAC5D,CAAC;QAED,2CAA2C;QAC3C,qFAAqF;QAErF,OAAO;YACL,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,gBAAgB;YACzC,QAAQ,EAAE,WAAW,CAAC,YAAY;YAClC,QAAQ,EAAE,WAAW,CAAC,SAAS;SAChC,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,iBAAiB,CAAC,EAAU,EAAE,SAAiB;QACnD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAE3C,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,CAAC,CAAC;QAC5D,CAAC;QAED,2DAA2D;QAC3D,kFAAkF;QAElF,6DAA6D;QAC7D,iCAAiC;QACjC,0EAA0E;QAC1E,OAAO;QACP,IAAI;QAEJ,8BAA8B;QAC9B,MAAM,eAAe,GAAG,EAAE,GAAG,WAAW,EAAE,CAAC;QAE3C,gDAAgD;QAChD,2EAA2E;QAE3E,uCAAuC;QACvC,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAErD,yCAAyC;QACzC,kDAAkD;QAClD,yCAAyC;QACzC,eAAe;QACf,oBAAoB;QACpB,2CAA2C;QAC3C,qBAAqB;QACrB,qBAAqB;QACrB,MAAM;QAEN,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,eAAe,CAAC,WAAmB;QACvC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;YACnD,KAAK,EAAE,EAAE,YAAY,EAAE,WAAW,EAAE;SACrC,CAAC,CAAC;QAEH,OAAO,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IAED;;;;;OAKG;IACK,YAAY,CAAC,IAAS;QAC5B,gCAAgC;QAChC,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM,IAAI,4BAAmB,CAAC,4BAA4B,CAAC,CAAC;QAC9D,CAAC;QAED,iCAAiC;QACjC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACjC,MAAM,IAAI,4BAAmB,CAC3B,6BAA6B,IAAI,CAAC,WAAW,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAClE,CAAC;QACJ,CAAC;QAED,wBAAwB;QACxB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;YACnD,MAAM,IAAI,4BAAmB,CAC3B,oDAAoD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACvF,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACK,gBAAgB,CAAC,QAAgB;QACvC,8CAA8C;QAC9C,IAAI,SAAS,GAAG,QAAQ;aACrB,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,mDAAmD;aAClF,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,6BAA6B;QAEvD,4BAA4B;QAC5B,IAAI,SAAS,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YAC3B,MAAM,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YAC9D,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;QACrE,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;CACF,CAAA;AAnQY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;IAcR,WAAA,IAAA,0BAAgB,EAAC,mDAAoB,CAAC,CAAA;yDACC,oBAAU,oBAAV,oBAAU;GAdzC,kBAAkB,CAmQ9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\comprovante.service.ts"],"sourcesContent":["import { BadRequestException, ConflictException, Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { ComprovantePagamento } from '../../../entities/comprovante-pagamento.entity';\nimport { ComprovanteUploadDto } from '../dtos/comprovante-upload.dto';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\n\n/**\n * Serviço para gerenciamento de comprovantes de pagamento\n * \n * Implementa a lógica para upload, consulta e gerenciamento\n * dos documentos comprobatórios anexados aos pagamentos.\n * \n * @author Equipe PGBen\n */\n@Injectable()\nexport class ComprovanteService {\n  // Lista de tipos MIME permitidos para upload\n  private readonly allowedMimeTypes = [\n    'application/pdf',\n    'image/jpeg',\n    'image/jpg',\n    'image/png'\n  ];\n\n  // Tamanho máximo permitido (5MB)\n  private readonly maxFileSize = 5 * 1024 * 1024;\n\n  constructor(\n    @InjectRepository(ComprovantePagamento)\n    private readonly comprovanteRepository: Repository<ComprovantePagamento>,\n    // Outros serviços necessários serão injetados aqui\n    // private readonly pagamentoService: PagamentoService,\n    // private readonly documentoService: DocumentoService,\n    // private readonly auditoriaService: AuditoriaService,\n  ) {}\n\n  /**\n   * Processa o upload de um novo comprovante de pagamento\n   * \n   * @param pagamentoId ID do pagamento relacionado\n   * @param file Arquivo enviado\n   * @param createDto Dados adicionais do comprovante\n   * @param usuarioId ID do usuário que está realizando o upload\n   * @returns Comprovante criado\n   */\n  async uploadComprovante(\n    pagamentoId: string,\n    file: any,\n    createDto: ComprovanteUploadDto,\n    usuarioId: string\n  ): Promise<ComprovantePagamento> {\n    // Verificar se o pagamento existe\n    // const pagamento = await this.pagamentoService.findOne(pagamentoId);\n    \n    // if (!pagamento) {\n    //   throw new NotFoundException('Pagamento não encontrado');\n    // }\n    \n    // Verificar se o pagamento tem status que permite anexar comprovantes\n    // if (pagamento.status === StatusPagamentoEnum.CANCELADO) {\n    //   throw new ConflictException(\n    //     'Não é possível anexar comprovantes a um pagamento cancelado'\n    //   );\n    // }\n\n    // Validar o arquivo\n    this.validateFile(file);\n\n    // Sanitizar o nome do arquivo\n    const sanitizedFileName = this.sanitizeFileName(file.originalname);\n\n    // Processar o upload do arquivo (usando o serviço de documentos)\n    // const uploadResult = await this.documentoService.uploadDocumento({\n    //   file: file.buffer,\n    //   fileName: sanitizedFileName,\n    //   mimeType: file.mimetype,\n    //   categoria: 'comprovante_pagamento',\n    //   metadados: {\n    //     pagamentoId,\n    //     tipoDocumento: createDto.tipoDocumento\n    //   }\n    // });\n\n    // Criar registro do comprovante\n    const comprovante = this.comprovanteRepository.create({\n      pagamento_id: pagamentoId,\n      tipo_documento: createDto.tipoDocumento,\n      nome_arquivo: sanitizedFileName,\n      caminho_arquivo: 'placeholder', // uploadResult.path,\n      tamanho: file.size,\n      mime_type: file.mimetype,\n      data_upload: new Date(),\n      uploaded_por: usuarioId\n    });\n\n    // Salvar o registro\n    const result = await this.comprovanteRepository.save(comprovante);\n\n    // Registrar operação no log de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'UPLOAD_COMPROVANTE',\n    //   usuarioId,\n    //   entidadeId: result.id,\n    //   tipoEntidade: 'COMPROVANTE_PAGAMENTO',\n    //   dadosAnteriores: null,\n    //   dadosNovos: {\n    //     id: result.id,\n    //     pagamentoId,\n    //     tipoDocumento: createDto.tipoDocumento,\n    //     nomeArquivo: sanitizedFileName,\n    //     tamanho: file.size,\n    //     mimeType: file.mimetype\n    //   }\n    // });\n\n    return result;\n  }\n\n  /**\n   * Busca um comprovante pelo ID\n   * \n   * @param id ID do comprovante\n   * @returns Comprovante encontrado ou null\n   */\n  async findOne(id: string): Promise<ComprovantePagamento | null> {\n    return this.comprovanteRepository.findOneBy({ id });\n  }\n\n  /**\n   * Lista todos os comprovantes de um pagamento\n   * \n   * @param pagamentoId ID do pagamento\n   * @returns Lista de comprovantes\n   */\n  async findAllByPagamento(pagamentoId: string): Promise<ComprovantePagamento[]> {\n    return this.comprovanteRepository.find({\n      where: { pagamento_id: pagamentoId },\n      order: { data_upload: 'DESC' }\n    });\n  }\n\n  /**\n   * Obtém o conteúdo de um comprovante (baixa o arquivo)\n   * \n   * @param id ID do comprovante\n   * @returns Buffer com o conteúdo do arquivo e metadados\n   */\n  async getComprovanteContent(id: string): Promise<{\n    buffer: Buffer;\n    fileName: string;\n    mimeType: string;\n  }> {\n    const comprovante = await this.findOne(id);\n    \n    if (!comprovante) {\n      throw new NotFoundException('Comprovante não encontrado');\n    }\n\n    // Obter o arquivo do serviço de documentos\n    // const file = await this.documentoService.getDocumento(comprovante.caminhoArquivo);\n    \n    return {\n      buffer: Buffer.from(''), // file.content,\n      fileName: comprovante.nome_arquivo,\n      mimeType: comprovante.mime_type\n    };\n  }\n\n  /**\n   * Remove um comprovante\n   * \n   * @param id ID do comprovante\n   * @param usuarioId ID do usuário que está removendo\n   * @returns true se removido com sucesso\n   */\n  async removeComprovante(id: string, usuarioId: string): Promise<boolean> {\n    const comprovante = await this.findOne(id);\n    \n    if (!comprovante) {\n      throw new NotFoundException('Comprovante não encontrado');\n    }\n\n    // Verificar se o pagamento permite remoção de comprovantes\n    // const pagamento = await this.pagamentoService.findOne(comprovante.pagamentoId);\n    \n    // if (pagamento.status === StatusPagamentoEnum.CONFIRMADO) {\n    //   throw new ConflictException(\n    //     'Não é possível remover comprovantes de um pagamento já confirmado'\n    //   );\n    // }\n\n    // Salvar dados para auditoria\n    const dadosAnteriores = { ...comprovante };\n\n    // Remover o arquivo do sistema de armazenamento\n    // await this.documentoService.removeDocumento(comprovante.caminhoArquivo);\n\n    // Remover o registro do banco de dados\n    await this.comprovanteRepository.remove(comprovante);\n\n    // Registrar operação no log de auditoria\n    // await this.auditoriaService.registrarOperacao({\n    //   tipoOperacao: 'REMOCAO_COMPROVANTE',\n    //   usuarioId,\n    //   entidadeId: id,\n    //   tipoEntidade: 'COMPROVANTE_PAGAMENTO',\n    //   dadosAnteriores,\n    //   dadosNovos: null\n    // });\n\n    return true;\n  }\n\n  /**\n   * Verifica se um pagamento tem pelo menos um comprovante\n   * \n   * @param pagamentoId ID do pagamento\n   * @returns true se o pagamento tem pelo menos um comprovante\n   */\n  async hasComprovantes(pagamentoId: string): Promise<boolean> {\n    const count = await this.comprovanteRepository.count({\n      where: { pagamento_id: pagamentoId }\n    });\n    \n    return count > 0;\n  }\n\n  /**\n   * Valida um arquivo enviado\n   * \n   * @param file Arquivo a ser validado\n   * @throws BadRequestException se o arquivo não atender aos requisitos\n   */\n  private validateFile(file: any): void {\n    // Verificar se o arquivo existe\n    if (!file) {\n      throw new BadRequestException('Nenhum arquivo foi enviado');\n    }\n\n    // Verificar o tamanho do arquivo\n    if (file.size > this.maxFileSize) {\n      throw new BadRequestException(\n        `Tamanho máximo permitido: ${this.maxFileSize / (1024 * 1024)}MB`\n      );\n    }\n\n    // Verificar o tipo MIME\n    if (!this.allowedMimeTypes.includes(file.mimetype)) {\n      throw new BadRequestException(\n        `Tipo de arquivo não permitido. Tipos permitidos: ${this.allowedMimeTypes.join(', ')}`\n      );\n    }\n  }\n\n  /**\n   * Sanitiza o nome de um arquivo para evitar riscos de segurança\n   * \n   * @param fileName Nome original do arquivo\n   * @returns Nome sanitizado\n   */\n  private sanitizeFileName(fileName: string): string {\n    // Remover caracteres potencialmente perigosos\n    let sanitized = fileName\n      .replace(/[/\\\\?%*:|\"<>]/g, '_') // Remover caracteres inválidos em nomes de arquivo\n      .replace(/\\.\\./g, '_'); // Evitar directory traversal\n    \n    // Limitar o tamanho do nome\n    if (sanitized.length > 100) {\n      const extension = sanitized.slice(sanitized.lastIndexOf('.'));\n      sanitized = sanitized.slice(0, 100 - extension.length) + extension;\n    }\n    \n    return sanitized;\n  }\n}\n"],"version":3}