6585e91b2b083dbd06be03c47380738a
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var AuthorizationService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationService = void 0;
const common_1 = require("@nestjs/common");
const permission_service_1 = require("./permission.service");
const cache_manager_1 = require("@nestjs/cache-manager");
const cache_manager_2 = require("cache-manager");
const common_2 = require("@nestjs/common");
const user_permission_entity_1 = require("../../entities/user-permission.entity");
/**
 * Serviço de autorização centralizado
 *
 * Este serviço é responsável por verificações combinadas de role e permissão,
 * bem como verificações baseadas em dados.
 */
let AuthorizationService = AuthorizationService_1 = class AuthorizationService {
    permissionService;
    cacheManager;
    logger = new common_1.Logger(AuthorizationService_1.name);
    constructor(permissionService, cacheManager) {
        this.permissionService = permissionService;
        this.cacheManager = cacheManager;
    }
    /**
     * Verifica se um usuário está autorizado a realizar uma ação
     *
     * @param options Opções de autorização
     * @returns true se o usuário está autorizado, false caso contrário
     */
    async isAuthorized(options) {
        const { userId, roles, permissionName, scopeType = user_permission_entity_1.ScopeType.GLOBAL, scopeId, operator = 'AND', dataCheck, data } = options;
        // Verificar cache
        const cacheKey = this.generateCacheKey(options);
        const cachedResult = await this.cacheManager.get(cacheKey);
        if (cachedResult !== undefined && cachedResult !== null) {
            return cachedResult;
        }
        // Verificar roles se especificado
        let hasRole = true;
        if (roles && roles.length > 0) {
            hasRole = await this.hasRole(userId, roles);
        }
        // Verificar permissão se especificada
        let hasPermission = true;
        if (permissionName) {
            hasPermission = await this.permissionService.hasPermission({
                userId,
                permissionName,
                scopeType,
                scopeId,
            });
        }
        // Verificar dados se especificado
        let dataCheckResult = true;
        if (dataCheck && data) {
            const checkResult = await Promise.resolve(dataCheck(data));
            // Garantir que o resultado seja sempre um booleano
            dataCheckResult = checkResult === true;
        }
        // Combinar resultados com o operador especificado
        let result;
        if (operator === 'AND') {
            result = hasRole && hasPermission && dataCheckResult;
        }
        else {
            result = hasRole || hasPermission;
            // Verificação de dados sempre é AND, mesmo com operador OR
            result = result && dataCheckResult;
        }
        // Armazenar em cache (TTL de 5 minutos)
        await this.cacheManager.set(cacheKey, result, 300);
        return result;
    }
    /**
     * Verifica se um usuário possui uma das roles especificadas
     *
     * @param userId ID do usuário
     * @param roles Lista de roles
     * @returns true se o usuário possui uma das roles, false caso contrário
     */
    async hasRole(userId, roles) {
        // Implementação básica - na prática, seria necessário consultar o banco de dados
        // para verificar as roles do usuário
        // Aqui, estamos assumindo que as roles do usuário estão disponíveis no token JWT
        // e foram extraídas pelo guard JwtAuthGuard
        // Na implementação real, você consultaria o banco de dados para obter as roles do usuário
        // Exemplo:
        // const userRoles = await this.userRepository.findRolesByUserId(userId);
        // return roles.some(role => userRoles.includes(role));
        // Implementação temporária
        return true;
    }
    /**
     * Gera uma chave de cache para uma verificação de autorização
     *
     * @param options Opções de autorização
     * @returns Chave de cache
     */
    generateCacheKey(options) {
        const { userId, roles, permissionName, scopeType, scopeId, operator } = options;
        return `auth:${userId}:${roles?.join(',')}:${permissionName}:${scopeType}:${scopeId || 'null'}:${operator}`;
    }
    /**
     * Limpa o cache de autorização de um usuário
     *
     * @param userId ID do usuário
     */
    async clearAuthorizationCache(userId) {
        // Implementação básica: na prática, seria necessário um mecanismo mais eficiente
        // para limpar apenas as chaves relacionadas ao usuário
        await this.cacheManager.del(`auth:${userId}:*`);
    }
};
exports.AuthorizationService = AuthorizationService;
exports.AuthorizationService = AuthorizationService = AuthorizationService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, common_2.Inject)(cache_manager_1.CACHE_MANAGER)),
    __metadata("design:paramtypes", [typeof (_a = typeof permission_service_1.PermissionService !== "undefined" && permission_service_1.PermissionService) === "function" ? _a : Object, typeof (_b = typeof cache_manager_2.Cache !== "undefined" && cache_manager_2.Cache) === "function" ? _b : Object])
], AuthorizationService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,