{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\middlewares\\metricas.middleware.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAAoE;AAEpE,mEAA+D;AAE/D;;;GAGG;AAEI,IAAM,kBAAkB,0BAAxB,MAAM,kBAAkB;IAGA;IAFZ,MAAM,GAAG,IAAI,eAAM,CAAC,oBAAkB,CAAC,IAAI,CAAC,CAAC;IAE9D,YAA6B,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IAEjE;;;;;OAKG;IACH,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QACjD,2CAA2C;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE1B,6CAA6C;QAC7C,MAAM,iBAAiB,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC;QAE9D,oDAAoD;QACpD,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC;QAC/B,IAAI,eAAe,GAAG,CAAC,CAAC;QAExB,gEAAgE;QAChE,GAAG,CAAC,IAAI,GAAG,UAAU,IAAU;YAC7B,eAAe,GAAG,IAAI;gBACpB,CAAC,CAAC,MAAM,CAAC,UAAU,CACf,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CACvD;gBACH,CAAC,CAAC,CAAC,CAAC;YAEN,0BAA0B;YAC1B,OAAO,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACxC,CAAC,CAAC;QAEF,yDAAyD;QACzD,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;YACpB,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,yBAAyB;YACvE,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;YAC1B,MAAM,OAAO,GAAG,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,GAAG,CAAC;YAC3C,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,CAAC;YAE9B,mCAAmC;YACnC,IAAI,CAAC,eAAe,CAAC,uBAAuB,CAC1C,MAAM,EACN,OAAO,EACP,MAAM,EACN,OAAO,EACP,iBAAiB,EACjB,eAAe,CAChB,CAAC;YAEF,oCAAoC;YACpC,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE,CAAC;gBAC3C,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,GAAG,MAAM,IAAI,OAAO,IAAI,MAAM,MAAM,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,YAAY,iBAAiB,WAAW,eAAe,GAAG,CACjH,CAAC;YACJ,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,EAAE,CAAC;IACT,CAAC;IAED;;;;OAIG;IACK,yBAAyB,CAAC,GAAY;QAC5C,IAAI,OAAO,GAAG,CAAC,CAAC;QAEhB,iBAAiB;QACjB,OAAO,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QAEzD,sBAAsB;QACtB,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC;YAChB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC1C,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAClC,IAAI,KAAK,EAAE,CAAC;oBACV,OAAO,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;oBACrC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;wBAC9B,OAAO,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;oBACtC,CAAC;yBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;wBAChC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;4BAClB,OAAO,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;wBAClC,CAAC,CAAC,CAAC;oBACL,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,mBAAmB;QACnB,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,IAAI,CAAC;gBACH,OAAO,IAAI,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YACzD,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,8CAA8C;YAChD,CAAC;QACH,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CACF,CAAA;AArGY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,GAAE;yDAImC,kCAAe,oBAAf,kCAAe;GAHlD,kBAAkB,CAqG9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\middlewares\\metricas.middleware.ts"],"sourcesContent":["import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { MetricasService } from '../services/metricas.service';\n\n/**\n * Middleware responsável por coletar métricas de requisições HTTP\n * para monitoramento com Prometheus e Grafana.\n */\n@Injectable()\nexport class MetricasMiddleware implements NestMiddleware {\n  private readonly logger = new Logger(MetricasMiddleware.name);\n\n  constructor(private readonly metricasService: MetricasService) {}\n\n  /**\n   * Processa a requisição, coletando métricas de tempo de resposta e tamanho\n   * @param req Objeto de requisição\n   * @param res Objeto de resposta\n   * @param next Função para continuar o processamento\n   */\n  use(req: Request, res: Response, next: NextFunction): void {\n    // Registra o tempo de início da requisição\n    const inicio = Date.now();\n\n    // Calcula o tamanho aproximado da requisição\n    const tamanhoRequisicao = this.calcularTamanhoRequisicao(req);\n\n    // Intercepta o método original de envio da resposta\n    const envioOriginal = res.send;\n    let tamanhoResposta = 0;\n\n    // Sobrescreve o método send para capturar o tamanho da resposta\n    res.send = function (body?: any): Response {\n      tamanhoResposta = body\n        ? Buffer.byteLength(\n            typeof body === 'string' ? body : JSON.stringify(body),\n          )\n        : 0;\n\n      // Chama o método original\n      return envioOriginal.call(this, body);\n    };\n\n    // Quando a resposta for finalizada, registra as métricas\n    res.on('finish', () => {\n      const duracao = (Date.now() - inicio) / 1000; // Converte para segundos\n      const metodo = req.method;\n      const caminho = req.originalUrl || req.url;\n      const status = res.statusCode;\n\n      // Registra a métrica da requisição\n      this.metricasService.registrarRequisicaoHttp(\n        metodo,\n        caminho,\n        status,\n        duracao,\n        tamanhoRequisicao,\n        tamanhoResposta,\n      );\n\n      // Log para debug em desenvolvimento\n      if (process.env.NODE_ENV === 'development') {\n        this.logger.debug(\n          `${metodo} ${caminho} ${status} - ${duracao.toFixed(3)}s - Req: ${tamanhoRequisicao}B, Res: ${tamanhoResposta}B`,\n        );\n      }\n    });\n\n    next();\n  }\n\n  /**\n   * Calcula o tamanho aproximado da requisição em bytes\n   * @param req Objeto de requisição\n   * @returns Tamanho da requisição em bytes\n   */\n  private calcularTamanhoRequisicao(req: Request): number {\n    let tamanho = 0;\n\n    // Tamanho da URL\n    tamanho += Buffer.byteLength(req.originalUrl || req.url);\n\n    // Tamanho dos headers\n    if (req.headers) {\n      Object.keys(req.headers).forEach((header) => {\n        const valor = req.headers[header];\n        if (valor) {\n          tamanho += Buffer.byteLength(header);\n          if (typeof valor === 'string') {\n            tamanho += Buffer.byteLength(valor);\n          } else if (Array.isArray(valor)) {\n            valor.forEach((v) => {\n              tamanho += Buffer.byteLength(v);\n            });\n          }\n        }\n      });\n    }\n\n    // Tamanho do corpo\n    if (req.body) {\n      try {\n        tamanho += Buffer.byteLength(JSON.stringify(req.body));\n      } catch (e) {\n        // Ignora erros ao calcular o tamanho do corpo\n      }\n    }\n\n    return tamanho;\n  }\n}\n"],"version":3}