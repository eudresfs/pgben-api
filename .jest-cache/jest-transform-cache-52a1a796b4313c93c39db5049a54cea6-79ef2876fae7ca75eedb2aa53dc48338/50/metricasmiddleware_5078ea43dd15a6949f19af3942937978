83af732c8cfda2021a0e4f0cbd7660f8
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MetricasMiddleware_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricasMiddleware = void 0;
const common_1 = require("@nestjs/common");
const metricas_service_1 = require("../services/metricas.service");
/**
 * Middleware responsável por coletar métricas de requisições HTTP
 * para monitoramento com Prometheus e Grafana.
 */
let MetricasMiddleware = MetricasMiddleware_1 = class MetricasMiddleware {
    metricasService;
    logger = new common_1.Logger(MetricasMiddleware_1.name);
    constructor(metricasService) {
        this.metricasService = metricasService;
    }
    /**
     * Processa a requisição, coletando métricas de tempo de resposta e tamanho
     * @param req Objeto de requisição
     * @param res Objeto de resposta
     * @param next Função para continuar o processamento
     */
    use(req, res, next) {
        // Registra o tempo de início da requisição
        const inicio = Date.now();
        // Calcula o tamanho aproximado da requisição
        const tamanhoRequisicao = this.calcularTamanhoRequisicao(req);
        // Intercepta o método original de envio da resposta
        const envioOriginal = res.send;
        let tamanhoResposta = 0;
        // Sobrescreve o método send para capturar o tamanho da resposta
        res.send = function (body) {
            tamanhoResposta = body
                ? Buffer.byteLength(typeof body === 'string' ? body : JSON.stringify(body))
                : 0;
            // Chama o método original
            return envioOriginal.call(this, body);
        };
        // Quando a resposta for finalizada, registra as métricas
        res.on('finish', () => {
            const duracao = (Date.now() - inicio) / 1000; // Converte para segundos
            const metodo = req.method;
            const caminho = req.originalUrl || req.url;
            const status = res.statusCode;
            // Registra a métrica da requisição
            this.metricasService.registrarRequisicaoHttp(metodo, caminho, status, duracao, tamanhoRequisicao, tamanhoResposta);
            // Log para debug em desenvolvimento
            if (process.env.NODE_ENV === 'development') {
                this.logger.debug(`${metodo} ${caminho} ${status} - ${duracao.toFixed(3)}s - Req: ${tamanhoRequisicao}B, Res: ${tamanhoResposta}B`);
            }
        });
        next();
    }
    /**
     * Calcula o tamanho aproximado da requisição em bytes
     * @param req Objeto de requisição
     * @returns Tamanho da requisição em bytes
     */
    calcularTamanhoRequisicao(req) {
        let tamanho = 0;
        // Tamanho da URL
        tamanho += Buffer.byteLength(req.originalUrl || req.url);
        // Tamanho dos headers
        if (req.headers) {
            Object.keys(req.headers).forEach((header) => {
                const valor = req.headers[header];
                if (valor) {
                    tamanho += Buffer.byteLength(header);
                    if (typeof valor === 'string') {
                        tamanho += Buffer.byteLength(valor);
                    }
                    else if (Array.isArray(valor)) {
                        valor.forEach((v) => {
                            tamanho += Buffer.byteLength(v);
                        });
                    }
                }
            });
        }
        // Tamanho do corpo
        if (req.body) {
            try {
                tamanho += Buffer.byteLength(JSON.stringify(req.body));
            }
            catch (e) {
                // Ignora erros ao calcular o tamanho do corpo
            }
        }
        return tamanho;
    }
};
exports.MetricasMiddleware = MetricasMiddleware;
exports.MetricasMiddleware = MetricasMiddleware = MetricasMiddleware_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof metricas_service_1.MetricasService !== "undefined" && metricas_service_1.MetricasService) === "function" ? _a : Object])
], MetricasMiddleware);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,