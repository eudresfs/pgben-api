{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\authorization.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\authorization.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { PermissionService, PermissionCheckOptions } from './permission.service';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\nimport { Inject } from '@nestjs/common';\nimport { ScopeType, TipoEscopo } from '../../entities/user-permission.entity';\n\n/**\n * Interface para verificação de autorização\n */\nexport interface AuthorizationOptions {\n  /**\n   * ID do usuário para verificação de autorização\n   */\n  userId: string;\n  \n  /**\n   * Roles necessárias (opcional)\n   */\n  roles?: string[];\n  \n  /**\n   * Nome da permissão no formato `modulo.recurso.operacao` (opcional)\n   */\n  permissionName?: string;\n  \n  /**\n   * Tipo de escopo (opcional, padrão é GLOBAL)\n   */\n  scopeType?: TipoEscopo;\n  \n  /**\n   * ID do escopo (opcional, necessário apenas para scopeType UNIT)\n   */\n  scopeId?: string;\n  \n  /**\n   * Operador lógico para combinar roles e permissões (padrão é 'AND')\n   */\n  operator?: 'AND' | 'OR';\n  \n  /**\n   * Função de verificação baseada em dados (opcional)\n   */\n  dataCheck?: (data: any) => boolean | Promise<boolean>;\n  \n  /**\n   * Dados para verificação baseada em dados (opcional)\n   */\n  data?: any;\n}\n\n/**\n * Serviço de autorização centralizado\n * \n * Este serviço é responsável por verificações combinadas de role e permissão,\n * bem como verificações baseadas em dados.\n */\n@Injectable()\nexport class AuthorizationService {\n  private readonly logger = new Logger(AuthorizationService.name);\n  \n  constructor(\n    private readonly permissionService: PermissionService,\n    @Inject(CACHE_MANAGER) private readonly cacheManager: Cache,\n  ) {}\n  \n  /**\n   * Verifica se um usuário está autorizado a realizar uma ação\n   * \n   * @param options Opções de autorização\n   * @returns true se o usuário está autorizado, false caso contrário\n   */\n  async isAuthorized(options: AuthorizationOptions): Promise<boolean> {\n    const { \n      userId, \n      roles, \n      permissionName, \n      scopeType = ScopeType.GLOBAL, \n      scopeId, \n      operator = 'AND',\n      dataCheck,\n      data\n    } = options;\n    \n    // Verificar cache\n    const cacheKey = this.generateCacheKey(options);\n    const cachedResult = await this.cacheManager.get<boolean>(cacheKey);\n    \n    if (cachedResult !== undefined && cachedResult !== null) {\n      return cachedResult;\n    }\n    \n    // Verificar roles se especificado\n    let hasRole = true;\n    if (roles && roles.length > 0) {\n      hasRole = await this.hasRole(userId, roles);\n    }\n    \n    // Verificar permissão se especificada\n    let hasPermission = true;\n    if (permissionName) {\n      hasPermission = await this.permissionService.hasPermission({\n        userId,\n        permissionName,\n        scopeType,\n        scopeId,\n      });\n    }\n    \n    // Verificar dados se especificado\n    let dataCheckResult = true;\n    if (dataCheck && data) {\n      const checkResult = await Promise.resolve(dataCheck(data));\n      // Garantir que o resultado seja sempre um booleano\n      dataCheckResult = checkResult === true;\n    }\n    \n    // Combinar resultados com o operador especificado\n    let result: boolean;\n    \n    if (operator === 'AND') {\n      result = hasRole && hasPermission && dataCheckResult;\n    } else {\n      result = hasRole || hasPermission;\n      \n      // Verificação de dados sempre é AND, mesmo com operador OR\n      result = result && dataCheckResult;\n    }\n    \n    // Armazenar em cache (TTL de 5 minutos)\n    await this.cacheManager.set(cacheKey, result, 300);\n    \n    return result;\n  }\n  \n  /**\n   * Verifica se um usuário possui uma das roles especificadas\n   * \n   * @param userId ID do usuário\n   * @param roles Lista de roles\n   * @returns true se o usuário possui uma das roles, false caso contrário\n   */\n  private async hasRole(userId: string, roles: string[]): Promise<boolean> {\n    // Implementação básica - na prática, seria necessário consultar o banco de dados\n    // para verificar as roles do usuário\n    \n    // Aqui, estamos assumindo que as roles do usuário estão disponíveis no token JWT\n    // e foram extraídas pelo guard JwtAuthGuard\n    \n    // Na implementação real, você consultaria o banco de dados para obter as roles do usuário\n    \n    // Exemplo:\n    // const userRoles = await this.userRepository.findRolesByUserId(userId);\n    // return roles.some(role => userRoles.includes(role));\n    \n    // Implementação temporária\n    return true;\n  }\n  \n  /**\n   * Gera uma chave de cache para uma verificação de autorização\n   * \n   * @param options Opções de autorização\n   * @returns Chave de cache\n   */\n  private generateCacheKey(options: AuthorizationOptions): string {\n    const { \n      userId, \n      roles, \n      permissionName, \n      scopeType, \n      scopeId, \n      operator \n    } = options;\n    \n    return `auth:${userId}:${roles?.join(',')}:${permissionName}:${scopeType}:${scopeId || 'null'}:${operator}`;\n  }\n  \n  /**\n   * Limpa o cache de autorização de um usuário\n   * \n   * @param userId ID do usuário\n   */\n  async clearAuthorizationCache(userId: string): Promise<void> {\n    // Implementação básica: na prática, seria necessário um mecanismo mais eficiente\n    // para limpar apenas as chaves relacionadas ao usuário\n    await this.cacheManager.del(`auth:${userId}:*`);\n  }\n}\n"],"version":3}