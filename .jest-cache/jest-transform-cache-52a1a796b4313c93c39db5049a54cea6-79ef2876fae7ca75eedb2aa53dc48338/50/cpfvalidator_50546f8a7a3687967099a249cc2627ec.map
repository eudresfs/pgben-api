{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\validators\\cpf-validator.ts","mappings":";;;;;;;;;AAAA,qDAIyB;AAGlB,IAAM,YAAY,GAAlB,MAAM,YAAY;IACvB,QAAQ,CAAC,GAAW,EAAE,IAAyB;QAC7C,IAAI,CAAC,GAAG,EAAE,CAAC;YAAA,OAAO,KAAK,CAAC;QAAA,CAAC;QAEzB,8BAA8B;QAC9B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAEhC,6BAA6B;QAC7B,IAAI,GAAG,CAAC,MAAM,KAAK,EAAE,EAAE,CAAC;YAAA,OAAO,KAAK,CAAC;QAAA,CAAC;QAEtC,0CAA0C;QAC1C,IAAI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAAA,OAAO,KAAK,CAAC;QAAA,CAAC;QAE1C,2CAA2C;QAC3C,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC;QACD,IAAI,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;QACtB,MAAM,kBAAkB,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC;QACtD,IAAI,kBAAkB,KAAK,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAAA,OAAO,KAAK,CAAC;QAAA,CAAC;QAEnE,0CAA0C;QAC1C,IAAI,GAAG,CAAC,CAAC;QACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5B,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAC7C,CAAC;QACD,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;QAClB,MAAM,kBAAkB,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC;QACtD,IAAI,kBAAkB,KAAK,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YAAA,OAAO,KAAK,CAAC;QAAA,CAAC;QAEpE,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,IAAyB;QACtC,OAAO,cAAc,CAAC;IACxB,CAAC;CACF,CAAA;AArCY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,qCAAmB,EAAC,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;GAC/C,YAAY,CAqCxB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\validators\\cpf-validator.ts"],"sourcesContent":["import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\n@ValidatorConstraint({ name: 'cpfValidator', async: false })\nexport class CPFValidator implements ValidatorConstraintInterface {\n  validate(cpf: string, args: ValidationArguments) {\n    if (!cpf) {return false;}\n\n    // Remove caracteres especiais\n    cpf = cpf.replace(/[^\\d]/g, '');\n\n    // Verifica se tem 11 dígitos\n    if (cpf.length !== 11) {return false;}\n\n    // Verifica se todos os dígitos são iguais\n    if (/^(\\d)\\1+$/.test(cpf)) {return false;}\n\n    // Validação do primeiro dígito verificador\n    let soma = 0;\n    for (let i = 0; i < 9; i++) {\n      soma += parseInt(cpf.charAt(i)) * (10 - i);\n    }\n    let resto = soma % 11;\n    const digitoVerificador1 = resto < 2 ? 0 : 11 - resto;\n    if (digitoVerificador1 !== parseInt(cpf.charAt(9))) {return false;}\n\n    // Validação do segundo dígito verificador\n    soma = 0;\n    for (let i = 0; i < 10; i++) {\n      soma += parseInt(cpf.charAt(i)) * (11 - i);\n    }\n    resto = soma % 11;\n    const digitoVerificador2 = resto < 2 ? 0 : 11 - resto;\n    if (digitoVerificador2 !== parseInt(cpf.charAt(10))) {return false;}\n\n    return true;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'CPF inválido';\n  }\n}\n"],"version":3}