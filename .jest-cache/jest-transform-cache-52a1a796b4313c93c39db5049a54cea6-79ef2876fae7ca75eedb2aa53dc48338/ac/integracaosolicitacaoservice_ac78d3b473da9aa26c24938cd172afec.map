{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\integracao-solicitacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\services\\integracao-solicitacao.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n} from '@nestjs/common';\n\n/**\n * Serviço de integração com o módulo de Solicitação\n *\n * Implementa a comunicação entre o módulo de Pagamento e o módulo de Solicitação,\n * permitindo verificar o status de solicitações e atualizá-lo conforme o\n * andamento dos pagamentos.\n *\n * @author Equipe PGBen\n */\n@Injectable()\nexport class IntegracaoSolicitacaoService {\n  // Em uma implementação real, este serviço injetaria o SolicitacaoService do módulo de solicitação\n  // constructor(private readonly solicitacaoService: SolicitacaoService) {}\n\n  /**\n   * Verifica se uma solicitação está aprovada e pronta para pagamento\n   *\n   * @param solicitacaoId ID da solicitação\n   * @returns Dados da solicitação se estiver aprovada\n   * @throws NotFoundException se a solicitação não existir\n   * @throws ConflictException se a solicitação não estiver aprovada\n   */\n  async verificarSolicitacaoAprovada(solicitacaoId: string): Promise<any> {\n    // Em uma implementação real, chamaria o serviço de solicitação\n    // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);\n\n    // if (!solicitacao) {\n    //   throw new NotFoundException('Solicitação não encontrada');\n    // }\n\n    // if (solicitacao.status !== 'APROVADA') {\n    //   throw new ConflictException(\n    //     `Somente solicitações aprovadas podem receber pagamento. Status atual: ${solicitacao.status}`\n    //   );\n    // }\n\n    // return solicitacao;\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Verificando status da solicitação ${solicitacaoId}`,\n    );\n\n    // Simular verificação bem-sucedida\n    return {\n      id: solicitacaoId,\n      status: 'APROVADA',\n      cidadaoId: 'mock-cidadao-id',\n      tipoBeneficioId: 'mock-beneficio-id',\n      unidadeId: 'mock-unidade-id',\n      valorAprovado: 500.0,\n      dataAprovacao: new Date(),\n      observacoes: 'Solicitação aprovada para pagamento',\n    };\n  }\n\n  /**\n   * Atualiza o status de uma solicitação após a criação de um pagamento\n   *\n   * @param solicitacaoId ID da solicitação\n   * @param pagamentoId ID do pagamento criado\n   * @param usuarioId ID do usuário que está realizando a operação\n   * @returns Dados atualizados da solicitação\n   */\n  async atualizarStatusParaPagamentoCriado(\n    solicitacaoId: string,\n    pagamentoId: string,\n    usuarioId: string,\n  ): Promise<any> {\n    // Em uma implementação real, chamaria o serviço de solicitação\n    // return this.solicitacaoService.atualizarStatus(\n    //   solicitacaoId,\n    //   'PAGAMENTO_CRIADO',\n    //   {\n    //     pagamentoId,\n    //     atualizadoPor: usuarioId,\n    //     observacoes: 'Pagamento registrado no sistema'\n    //   }\n    // );\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CRIADO`,\n    );\n\n    return {\n      id: solicitacaoId,\n      status: 'PAGAMENTO_CRIADO',\n      pagamentoId,\n      atualizadoPor: usuarioId,\n      dataAtualizacao: new Date(),\n    };\n  }\n\n  /**\n   * Atualiza o status de uma solicitação após a liberação de um pagamento\n   *\n   * @param solicitacaoId ID da solicitação\n   * @param pagamentoId ID do pagamento liberado\n   * @param usuarioId ID do usuário que está realizando a operação\n   * @returns Dados atualizados da solicitação\n   */\n  async atualizarStatusParaPagamentoLiberado(\n    solicitacaoId: string,\n    pagamentoId: string,\n    usuarioId: string,\n  ): Promise<any> {\n    // Em uma implementação real, chamaria o serviço de solicitação\n    // return this.solicitacaoService.atualizarStatus(\n    //   solicitacaoId,\n    //   'PAGAMENTO_LIBERADO',\n    //   {\n    //     pagamentoId,\n    //     atualizadoPor: usuarioId,\n    //     observacoes: 'Pagamento liberado para o beneficiário'\n    //   }\n    // );\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_LIBERADO`,\n    );\n\n    return {\n      id: solicitacaoId,\n      status: 'PAGAMENTO_LIBERADO',\n      pagamentoId,\n      atualizadoPor: usuarioId,\n      dataAtualizacao: new Date(),\n    };\n  }\n\n  /**\n   * Atualiza o status de uma solicitação após a confirmação de recebimento\n   *\n   * @param solicitacaoId ID da solicitação\n   * @param pagamentoId ID do pagamento confirmado\n   * @param confirmacaoId ID da confirmação de recebimento\n   * @param usuarioId ID do usuário que está realizando a operação\n   * @returns Dados atualizados da solicitação\n   */\n  async atualizarStatusParaPagamentoConfirmado(\n    solicitacaoId: string,\n    pagamentoId: string,\n    confirmacaoId: string,\n    usuarioId: string,\n  ): Promise<any> {\n    // Em uma implementação real, chamaria o serviço de solicitação\n    // return this.solicitacaoService.atualizarStatus(\n    //   solicitacaoId,\n    //   'PAGAMENTO_CONFIRMADO',\n    //   {\n    //     pagamentoId,\n    //     confirmacaoId,\n    //     atualizadoPor: usuarioId,\n    //     observacoes: 'Pagamento confirmado pelo beneficiário'\n    //   }\n    // );\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CONFIRMADO`,\n    );\n\n    return {\n      id: solicitacaoId,\n      status: 'PAGAMENTO_CONFIRMADO',\n      pagamentoId,\n      confirmacaoId,\n      atualizadoPor: usuarioId,\n      dataAtualizacao: new Date(),\n    };\n  }\n\n  /**\n   * Atualiza o status de uma solicitação após o cancelamento de um pagamento\n   *\n   * @param solicitacaoId ID da solicitação\n   * @param pagamentoId ID do pagamento cancelado\n   * @param usuarioId ID do usuário que está realizando a operação\n   * @param motivoCancelamento Motivo do cancelamento\n   * @returns Dados atualizados da solicitação\n   */\n  async atualizarStatusParaPagamentoCancelado(\n    solicitacaoId: string,\n    pagamentoId: string,\n    usuarioId: string,\n    motivoCancelamento: string,\n  ): Promise<any> {\n    // Em uma implementação real, chamaria o serviço de solicitação\n    // return this.solicitacaoService.atualizarStatus(\n    //   solicitacaoId,\n    //   'PAGAMENTO_CANCELADO',\n    //   {\n    //     pagamentoId,\n    //     atualizadoPor: usuarioId,\n    //     observacoes: `Pagamento cancelado: ${motivoCancelamento}`\n    //   }\n    // );\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CANCELADO`,\n    );\n\n    return {\n      id: solicitacaoId,\n      status: 'PAGAMENTO_CANCELADO',\n      pagamentoId,\n      atualizadoPor: usuarioId,\n      motivoCancelamento,\n      dataAtualizacao: new Date(),\n    };\n  }\n\n  /**\n   * Obtém os limites de valor para um tipo de benefício\n   *\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @returns Objeto com valores mínimo e máximo permitidos\n   */\n  async obterLimitesBeneficio(tipoBeneficioId: string): Promise<{\n    valorMinimo: number;\n    valorMaximo: number;\n  }> {\n    // Em uma implementação real, chamaria o serviço de benefícios\n    // const tipoBeneficio = await this.beneficioService.findOne(tipoBeneficioId);\n    // return {\n    //   valorMinimo: tipoBeneficio.valorMinimo,\n    //   valorMaximo: tipoBeneficio.valorMaximo\n    // };\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Obtendo limites para o benefício ${tipoBeneficioId}`,\n    );\n\n    // Valores de exemplo\n    const limites = {\n      'mock-beneficio-id': { valorMinimo: 100.0, valorMaximo: 1000.0 },\n      'auxilio-moradia': { valorMinimo: 300.0, valorMaximo: 800.0 },\n      'auxilio-funeral': { valorMinimo: 500.0, valorMaximo: 1500.0 },\n      'cesta-basica': { valorMinimo: 100.0, valorMaximo: 300.0 },\n    };\n\n    return (\n      limites[tipoBeneficioId] || { valorMinimo: 100.0, valorMaximo: 1000.0 }\n    );\n  }\n\n  /**\n   * Verifica se uma solicitação já possui pagamento\n   *\n   * @param solicitacaoId ID da solicitação\n   * @returns true se a solicitação já possui pagamento\n   */\n  async verificarPagamentoExistente(solicitacaoId: string): Promise<boolean> {\n    // Em uma implementação real, chamaria o serviço de solicitação\n    // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);\n    // return ['PAGAMENTO_CRIADO', 'PAGAMENTO_LIBERADO', 'PAGAMENTO_CONFIRMADO'].includes(solicitacao.status);\n\n    // Implementação de mock para desenvolvimento\n    console.log(\n      `[INTEGRAÇÃO] Verificando se solicitação ${solicitacaoId} já possui pagamento`,\n    );\n\n    // Simular que não existe pagamento para permitir testes\n    return false;\n  }\n}\n"],"version":3}