461de73c8e292e1a357ca1c912c84349
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegracaoSolicitacaoService = void 0;
const common_1 = require("@nestjs/common");
/**
 * Serviço de integração com o módulo de Solicitação
 *
 * Implementa a comunicação entre o módulo de Pagamento e o módulo de Solicitação,
 * permitindo verificar o status de solicitações e atualizá-lo conforme o
 * andamento dos pagamentos.
 *
 * @author Equipe PGBen
 */
let IntegracaoSolicitacaoService = class IntegracaoSolicitacaoService {
    // Em uma implementação real, este serviço injetaria o SolicitacaoService do módulo de solicitação
    // constructor(private readonly solicitacaoService: SolicitacaoService) {}
    /**
     * Verifica se uma solicitação está aprovada e pronta para pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @returns Dados da solicitação se estiver aprovada
     * @throws NotFoundException se a solicitação não existir
     * @throws ConflictException se a solicitação não estiver aprovada
     */
    async verificarSolicitacaoAprovada(solicitacaoId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);
        // if (!solicitacao) {
        //   throw new NotFoundException('Solicitação não encontrada');
        // }
        // if (solicitacao.status !== 'APROVADA') {
        //   throw new ConflictException(
        //     `Somente solicitações aprovadas podem receber pagamento. Status atual: ${solicitacao.status}`
        //   );
        // }
        // return solicitacao;
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Verificando status da solicitação ${solicitacaoId}`);
        // Simular verificação bem-sucedida
        return {
            id: solicitacaoId,
            status: 'APROVADA',
            cidadaoId: 'mock-cidadao-id',
            tipoBeneficioId: 'mock-beneficio-id',
            unidadeId: 'mock-unidade-id',
            valorAprovado: 500.0,
            dataAprovacao: new Date(),
            observacoes: 'Solicitação aprovada para pagamento',
        };
    }
    /**
     * Atualiza o status de uma solicitação após a criação de um pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento criado
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoCriado(solicitacaoId, pagamentoId, usuarioId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_CRIADO',
        //   {
        //     pagamentoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: 'Pagamento registrado no sistema'
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CRIADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_CRIADO',
            pagamentoId,
            atualizadoPor: usuarioId,
            dataAtualizacao: new Date(),
        };
    }
    /**
     * Atualiza o status de uma solicitação após a liberação de um pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento liberado
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoLiberado(solicitacaoId, pagamentoId, usuarioId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_LIBERADO',
        //   {
        //     pagamentoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: 'Pagamento liberado para o beneficiário'
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_LIBERADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_LIBERADO',
            pagamentoId,
            atualizadoPor: usuarioId,
            dataAtualizacao: new Date(),
        };
    }
    /**
     * Atualiza o status de uma solicitação após a confirmação de recebimento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento confirmado
     * @param confirmacaoId ID da confirmação de recebimento
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoConfirmado(solicitacaoId, pagamentoId, confirmacaoId, usuarioId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_CONFIRMADO',
        //   {
        //     pagamentoId,
        //     confirmacaoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: 'Pagamento confirmado pelo beneficiário'
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CONFIRMADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_CONFIRMADO',
            pagamentoId,
            confirmacaoId,
            atualizadoPor: usuarioId,
            dataAtualizacao: new Date(),
        };
    }
    /**
     * Atualiza o status de uma solicitação após o cancelamento de um pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento cancelado
     * @param usuarioId ID do usuário que está realizando a operação
     * @param motivoCancelamento Motivo do cancelamento
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoCancelado(solicitacaoId, pagamentoId, usuarioId, motivoCancelamento) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_CANCELADO',
        //   {
        //     pagamentoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: `Pagamento cancelado: ${motivoCancelamento}`
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CANCELADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_CANCELADO',
            pagamentoId,
            atualizadoPor: usuarioId,
            motivoCancelamento,
            dataAtualizacao: new Date(),
        };
    }
    /**
     * Obtém os limites de valor para um tipo de benefício
     *
     * @param tipoBeneficioId ID do tipo de benefício
     * @returns Objeto com valores mínimo e máximo permitidos
     */
    async obterLimitesBeneficio(tipoBeneficioId) {
        // Em uma implementação real, chamaria o serviço de benefícios
        // const tipoBeneficio = await this.beneficioService.findOne(tipoBeneficioId);
        // return {
        //   valorMinimo: tipoBeneficio.valorMinimo,
        //   valorMaximo: tipoBeneficio.valorMaximo
        // };
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Obtendo limites para o benefício ${tipoBeneficioId}`);
        // Valores de exemplo
        const limites = {
            'mock-beneficio-id': { valorMinimo: 100.0, valorMaximo: 1000.0 },
            'auxilio-moradia': { valorMinimo: 300.0, valorMaximo: 800.0 },
            'auxilio-funeral': { valorMinimo: 500.0, valorMaximo: 1500.0 },
            'cesta-basica': { valorMinimo: 100.0, valorMaximo: 300.0 },
        };
        return (limites[tipoBeneficioId] || { valorMinimo: 100.0, valorMaximo: 1000.0 });
    }
    /**
     * Verifica se uma solicitação já possui pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @returns true se a solicitação já possui pagamento
     */
    async verificarPagamentoExistente(solicitacaoId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);
        // return ['PAGAMENTO_CRIADO', 'PAGAMENTO_LIBERADO', 'PAGAMENTO_CONFIRMADO'].includes(solicitacao.status);
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Verificando se solicitação ${solicitacaoId} já possui pagamento`);
        // Simular que não existe pagamento para permitir testes
        return false;
    }
};
exports.IntegracaoSolicitacaoService = IntegracaoSolicitacaoService;
exports.IntegracaoSolicitacaoService = IntegracaoSolicitacaoService = __decorate([
    (0, common_1.Injectable)()
], IntegracaoSolicitacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHBhZ2FtZW50b1xcc2VydmljZXNcXGludGVncmFjYW8tc29saWNpdGFjYW8uc2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSwyQ0FJd0I7QUFFeEI7Ozs7Ozs7O0dBUUc7QUFFSSxJQUFNLDRCQUE0QixHQUFsQyxNQUFNLDRCQUE0QjtJQUN2QyxrR0FBa0c7SUFDbEcsMEVBQTBFO0lBRTFFOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsNEJBQTRCLENBQUMsYUFBcUI7UUFDdEQsK0RBQStEO1FBQy9ELDRFQUE0RTtRQUU1RSxzQkFBc0I7UUFDdEIsK0RBQStEO1FBQy9ELElBQUk7UUFFSiwyQ0FBMkM7UUFDM0MsaUNBQWlDO1FBQ2pDLG9HQUFvRztRQUNwRyxPQUFPO1FBQ1AsSUFBSTtRQUVKLHNCQUFzQjtRQUV0Qiw2Q0FBNkM7UUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FDVCxrREFBa0QsYUFBYSxFQUFFLENBQ2xFLENBQUM7UUFFRixtQ0FBbUM7UUFDbkMsT0FBTztZQUNMLEVBQUUsRUFBRSxhQUFhO1lBQ2pCLE1BQU0sRUFBRSxVQUFVO1lBQ2xCLFNBQVMsRUFBRSxpQkFBaUI7WUFDNUIsZUFBZSxFQUFFLG1CQUFtQjtZQUNwQyxTQUFTLEVBQUUsaUJBQWlCO1lBQzVCLGFBQWEsRUFBRSxLQUFLO1lBQ3BCLGFBQWEsRUFBRSxJQUFJLElBQUksRUFBRTtZQUN6QixXQUFXLEVBQUUscUNBQXFDO1NBQ25ELENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILEtBQUssQ0FBQyxrQ0FBa0MsQ0FDdEMsYUFBcUIsRUFDckIsV0FBbUIsRUFDbkIsU0FBaUI7UUFFakIsK0RBQStEO1FBQy9ELGtEQUFrRDtRQUNsRCxtQkFBbUI7UUFDbkIsd0JBQXdCO1FBQ3hCLE1BQU07UUFDTixtQkFBbUI7UUFDbkIsZ0NBQWdDO1FBQ2hDLHFEQUFxRDtRQUNyRCxNQUFNO1FBQ04sS0FBSztRQUVMLDZDQUE2QztRQUM3QyxPQUFPLENBQUMsR0FBRyxDQUNULGtEQUFrRCxhQUFhLHdCQUF3QixDQUN4RixDQUFDO1FBRUYsT0FBTztZQUNMLEVBQUUsRUFBRSxhQUFhO1lBQ2pCLE1BQU0sRUFBRSxrQkFBa0I7WUFDMUIsV0FBVztZQUNYLGFBQWEsRUFBRSxTQUFTO1lBQ3hCLGVBQWUsRUFBRSxJQUFJLElBQUksRUFBRTtTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsb0NBQW9DLENBQ3hDLGFBQXFCLEVBQ3JCLFdBQW1CLEVBQ25CLFNBQWlCO1FBRWpCLCtEQUErRDtRQUMvRCxrREFBa0Q7UUFDbEQsbUJBQW1CO1FBQ25CLDBCQUEwQjtRQUMxQixNQUFNO1FBQ04sbUJBQW1CO1FBQ25CLGdDQUFnQztRQUNoQyw0REFBNEQ7UUFDNUQsTUFBTTtRQUNOLEtBQUs7UUFFTCw2Q0FBNkM7UUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FDVCxrREFBa0QsYUFBYSwwQkFBMEIsQ0FDMUYsQ0FBQztRQUVGLE9BQU87WUFDTCxFQUFFLEVBQUUsYUFBYTtZQUNqQixNQUFNLEVBQUUsb0JBQW9CO1lBQzVCLFdBQVc7WUFDWCxhQUFhLEVBQUUsU0FBUztZQUN4QixlQUFlLEVBQUUsSUFBSSxJQUFJLEVBQUU7U0FDNUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNILEtBQUssQ0FBQyxzQ0FBc0MsQ0FDMUMsYUFBcUIsRUFDckIsV0FBbUIsRUFDbkIsYUFBcUIsRUFDckIsU0FBaUI7UUFFakIsK0RBQStEO1FBQy9ELGtEQUFrRDtRQUNsRCxtQkFBbUI7UUFDbkIsNEJBQTRCO1FBQzVCLE1BQU07UUFDTixtQkFBbUI7UUFDbkIscUJBQXFCO1FBQ3JCLGdDQUFnQztRQUNoQyw0REFBNEQ7UUFDNUQsTUFBTTtRQUNOLEtBQUs7UUFFTCw2Q0FBNkM7UUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FDVCxrREFBa0QsYUFBYSw0QkFBNEIsQ0FDNUYsQ0FBQztRQUVGLE9BQU87WUFDTCxFQUFFLEVBQUUsYUFBYTtZQUNqQixNQUFNLEVBQUUsc0JBQXNCO1lBQzlCLFdBQVc7WUFDWCxhQUFhO1lBQ2IsYUFBYSxFQUFFLFNBQVM7WUFDeEIsZUFBZSxFQUFFLElBQUksSUFBSSxFQUFFO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxLQUFLLENBQUMscUNBQXFDLENBQ3pDLGFBQXFCLEVBQ3JCLFdBQW1CLEVBQ25CLFNBQWlCLEVBQ2pCLGtCQUEwQjtRQUUxQiwrREFBK0Q7UUFDL0Qsa0RBQWtEO1FBQ2xELG1CQUFtQjtRQUNuQiwyQkFBMkI7UUFDM0IsTUFBTTtRQUNOLG1CQUFtQjtRQUNuQixnQ0FBZ0M7UUFDaEMsZ0VBQWdFO1FBQ2hFLE1BQU07UUFDTixLQUFLO1FBRUwsNkNBQTZDO1FBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQ1Qsa0RBQWtELGFBQWEsMkJBQTJCLENBQzNGLENBQUM7UUFFRixPQUFPO1lBQ0wsRUFBRSxFQUFFLGFBQWE7WUFDakIsTUFBTSxFQUFFLHFCQUFxQjtZQUM3QixXQUFXO1lBQ1gsYUFBYSxFQUFFLFNBQVM7WUFDeEIsa0JBQWtCO1lBQ2xCLGVBQWUsRUFBRSxJQUFJLElBQUksRUFBRTtTQUM1QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLHFCQUFxQixDQUFDLGVBQXVCO1FBSWpELDhEQUE4RDtRQUM5RCw4RUFBOEU7UUFDOUUsV0FBVztRQUNYLDRDQUE0QztRQUM1QywyQ0FBMkM7UUFDM0MsS0FBSztRQUVMLDZDQUE2QztRQUM3QyxPQUFPLENBQUMsR0FBRyxDQUNULGlEQUFpRCxlQUFlLEVBQUUsQ0FDbkUsQ0FBQztRQUVGLHFCQUFxQjtRQUNyQixNQUFNLE9BQU8sR0FBRztZQUNkLG1CQUFtQixFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFO1lBQ2hFLGlCQUFpQixFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFO1lBQzdELGlCQUFpQixFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFO1lBQzlELGNBQWMsRUFBRSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRTtTQUMzRCxDQUFDO1FBRUYsT0FBTyxDQUNMLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUN4RSxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLDJCQUEyQixDQUFDLGFBQXFCO1FBQ3JELCtEQUErRDtRQUMvRCw0RUFBNEU7UUFDNUUsMEdBQTBHO1FBRTFHLDZDQUE2QztRQUM3QyxPQUFPLENBQUMsR0FBRyxDQUNULDJDQUEyQyxhQUFhLHNCQUFzQixDQUMvRSxDQUFDO1FBRUYsd0RBQXdEO1FBQ3hELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGLENBQUE7QUFuUVksb0VBQTRCO3VDQUE1Qiw0QkFBNEI7SUFEeEMsSUFBQSxtQkFBVSxHQUFFO0dBQ0EsNEJBQTRCLENBbVF4QyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xccGFnYW1lbnRvXFxzZXJ2aWNlc1xcaW50ZWdyYWNhby1zb2xpY2l0YWNhby5zZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEluamVjdGFibGUsXG4gIE5vdEZvdW5kRXhjZXB0aW9uLFxuICBDb25mbGljdEV4Y2VwdGlvbixcbn0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuXG4vKipcbiAqIFNlcnZpw6dvIGRlIGludGVncmHDp8OjbyBjb20gbyBtw7NkdWxvIGRlIFNvbGljaXRhw6fDo29cbiAqXG4gKiBJbXBsZW1lbnRhIGEgY29tdW5pY2HDp8OjbyBlbnRyZSBvIG3Ds2R1bG8gZGUgUGFnYW1lbnRvIGUgbyBtw7NkdWxvIGRlIFNvbGljaXRhw6fDo28sXG4gKiBwZXJtaXRpbmRvIHZlcmlmaWNhciBvIHN0YXR1cyBkZSBzb2xpY2l0YcOnw7VlcyBlIGF0dWFsaXrDoS1sbyBjb25mb3JtZSBvXG4gKiBhbmRhbWVudG8gZG9zIHBhZ2FtZW50b3MuXG4gKlxuICogQGF1dGhvciBFcXVpcGUgUEdCZW5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEludGVncmFjYW9Tb2xpY2l0YWNhb1NlcnZpY2Uge1xuICAvLyBFbSB1bWEgaW1wbGVtZW50YcOnw6NvIHJlYWwsIGVzdGUgc2VydmnDp28gaW5qZXRhcmlhIG8gU29saWNpdGFjYW9TZXJ2aWNlIGRvIG3Ds2R1bG8gZGUgc29saWNpdGHDp8Ojb1xuICAvLyBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHNvbGljaXRhY2FvU2VydmljZTogU29saWNpdGFjYW9TZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSB1bWEgc29saWNpdGHDp8OjbyBlc3TDoSBhcHJvdmFkYSBlIHByb250YSBwYXJhIHBhZ2FtZW50b1xuICAgKlxuICAgKiBAcGFyYW0gc29saWNpdGFjYW9JZCBJRCBkYSBzb2xpY2l0YcOnw6NvXG4gICAqIEByZXR1cm5zIERhZG9zIGRhIHNvbGljaXRhw6fDo28gc2UgZXN0aXZlciBhcHJvdmFkYVxuICAgKiBAdGhyb3dzIE5vdEZvdW5kRXhjZXB0aW9uIHNlIGEgc29saWNpdGHDp8OjbyBuw6NvIGV4aXN0aXJcbiAgICogQHRocm93cyBDb25mbGljdEV4Y2VwdGlvbiBzZSBhIHNvbGljaXRhw6fDo28gbsOjbyBlc3RpdmVyIGFwcm92YWRhXG4gICAqL1xuICBhc3luYyB2ZXJpZmljYXJTb2xpY2l0YWNhb0Fwcm92YWRhKHNvbGljaXRhY2FvSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gRW0gdW1hIGltcGxlbWVudGHDp8OjbyByZWFsLCBjaGFtYXJpYSBvIHNlcnZpw6dvIGRlIHNvbGljaXRhw6fDo29cbiAgICAvLyBjb25zdCBzb2xpY2l0YWNhbyA9IGF3YWl0IHRoaXMuc29saWNpdGFjYW9TZXJ2aWNlLmZpbmRPbmUoc29saWNpdGFjYW9JZCk7XG5cbiAgICAvLyBpZiAoIXNvbGljaXRhY2FvKSB7XG4gICAgLy8gICB0aHJvdyBuZXcgTm90Rm91bmRFeGNlcHRpb24oJ1NvbGljaXRhw6fDo28gbsOjbyBlbmNvbnRyYWRhJyk7XG4gICAgLy8gfVxuXG4gICAgLy8gaWYgKHNvbGljaXRhY2FvLnN0YXR1cyAhPT0gJ0FQUk9WQURBJykge1xuICAgIC8vICAgdGhyb3cgbmV3IENvbmZsaWN0RXhjZXB0aW9uKFxuICAgIC8vICAgICBgU29tZW50ZSBzb2xpY2l0YcOnw7VlcyBhcHJvdmFkYXMgcG9kZW0gcmVjZWJlciBwYWdhbWVudG8uIFN0YXR1cyBhdHVhbDogJHtzb2xpY2l0YWNhby5zdGF0dXN9YFxuICAgIC8vICAgKTtcbiAgICAvLyB9XG5cbiAgICAvLyByZXR1cm4gc29saWNpdGFjYW87XG5cbiAgICAvLyBJbXBsZW1lbnRhw6fDo28gZGUgbW9jayBwYXJhIGRlc2Vudm9sdmltZW50b1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtJTlRFR1JBw4fDg09dIFZlcmlmaWNhbmRvIHN0YXR1cyBkYSBzb2xpY2l0YcOnw6NvICR7c29saWNpdGFjYW9JZH1gLFxuICAgICk7XG5cbiAgICAvLyBTaW11bGFyIHZlcmlmaWNhw6fDo28gYmVtLXN1Y2VkaWRhXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBzb2xpY2l0YWNhb0lkLFxuICAgICAgc3RhdHVzOiAnQVBST1ZBREEnLFxuICAgICAgY2lkYWRhb0lkOiAnbW9jay1jaWRhZGFvLWlkJyxcbiAgICAgIHRpcG9CZW5lZmljaW9JZDogJ21vY2stYmVuZWZpY2lvLWlkJyxcbiAgICAgIHVuaWRhZGVJZDogJ21vY2stdW5pZGFkZS1pZCcsXG4gICAgICB2YWxvckFwcm92YWRvOiA1MDAuMCxcbiAgICAgIGRhdGFBcHJvdmFjYW86IG5ldyBEYXRlKCksXG4gICAgICBvYnNlcnZhY29lczogJ1NvbGljaXRhw6fDo28gYXByb3ZhZGEgcGFyYSBwYWdhbWVudG8nLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgbyBzdGF0dXMgZGUgdW1hIHNvbGljaXRhw6fDo28gYXDDs3MgYSBjcmlhw6fDo28gZGUgdW0gcGFnYW1lbnRvXG4gICAqXG4gICAqIEBwYXJhbSBzb2xpY2l0YWNhb0lkIElEIGRhIHNvbGljaXRhw6fDo29cbiAgICogQHBhcmFtIHBhZ2FtZW50b0lkIElEIGRvIHBhZ2FtZW50byBjcmlhZG9cbiAgICogQHBhcmFtIHVzdWFyaW9JZCBJRCBkbyB1c3XDoXJpbyBxdWUgZXN0w6EgcmVhbGl6YW5kbyBhIG9wZXJhw6fDo29cbiAgICogQHJldHVybnMgRGFkb3MgYXR1YWxpemFkb3MgZGEgc29saWNpdGHDp8Ojb1xuICAgKi9cbiAgYXN5bmMgYXR1YWxpemFyU3RhdHVzUGFyYVBhZ2FtZW50b0NyaWFkbyhcbiAgICBzb2xpY2l0YWNhb0lkOiBzdHJpbmcsXG4gICAgcGFnYW1lbnRvSWQ6IHN0cmluZyxcbiAgICB1c3VhcmlvSWQ6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBFbSB1bWEgaW1wbGVtZW50YcOnw6NvIHJlYWwsIGNoYW1hcmlhIG8gc2VydmnDp28gZGUgc29saWNpdGHDp8Ojb1xuICAgIC8vIHJldHVybiB0aGlzLnNvbGljaXRhY2FvU2VydmljZS5hdHVhbGl6YXJTdGF0dXMoXG4gICAgLy8gICBzb2xpY2l0YWNhb0lkLFxuICAgIC8vICAgJ1BBR0FNRU5UT19DUklBRE8nLFxuICAgIC8vICAge1xuICAgIC8vICAgICBwYWdhbWVudG9JZCxcbiAgICAvLyAgICAgYXR1YWxpemFkb1BvcjogdXN1YXJpb0lkLFxuICAgIC8vICAgICBvYnNlcnZhY29lczogJ1BhZ2FtZW50byByZWdpc3RyYWRvIG5vIHNpc3RlbWEnXG4gICAgLy8gICB9XG4gICAgLy8gKTtcblxuICAgIC8vIEltcGxlbWVudGHDp8OjbyBkZSBtb2NrIHBhcmEgZGVzZW52b2x2aW1lbnRvXG4gICAgY29uc29sZS5sb2coXG4gICAgICBgW0lOVEVHUkHDh8ODT10gQXR1YWxpemFuZG8gc3RhdHVzIGRhIHNvbGljaXRhw6fDo28gJHtzb2xpY2l0YWNhb0lkfSBwYXJhIFBBR0FNRU5UT19DUklBRE9gLFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHNvbGljaXRhY2FvSWQsXG4gICAgICBzdGF0dXM6ICdQQUdBTUVOVE9fQ1JJQURPJyxcbiAgICAgIHBhZ2FtZW50b0lkLFxuICAgICAgYXR1YWxpemFkb1BvcjogdXN1YXJpb0lkLFxuICAgICAgZGF0YUF0dWFsaXphY2FvOiBuZXcgRGF0ZSgpLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQXR1YWxpemEgbyBzdGF0dXMgZGUgdW1hIHNvbGljaXRhw6fDo28gYXDDs3MgYSBsaWJlcmHDp8OjbyBkZSB1bSBwYWdhbWVudG9cbiAgICpcbiAgICogQHBhcmFtIHNvbGljaXRhY2FvSWQgSUQgZGEgc29saWNpdGHDp8Ojb1xuICAgKiBAcGFyYW0gcGFnYW1lbnRvSWQgSUQgZG8gcGFnYW1lbnRvIGxpYmVyYWRvXG4gICAqIEBwYXJhbSB1c3VhcmlvSWQgSUQgZG8gdXN1w6FyaW8gcXVlIGVzdMOhIHJlYWxpemFuZG8gYSBvcGVyYcOnw6NvXG4gICAqIEByZXR1cm5zIERhZG9zIGF0dWFsaXphZG9zIGRhIHNvbGljaXRhw6fDo29cbiAgICovXG4gIGFzeW5jIGF0dWFsaXphclN0YXR1c1BhcmFQYWdhbWVudG9MaWJlcmFkbyhcbiAgICBzb2xpY2l0YWNhb0lkOiBzdHJpbmcsXG4gICAgcGFnYW1lbnRvSWQ6IHN0cmluZyxcbiAgICB1c3VhcmlvSWQ6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICAvLyBFbSB1bWEgaW1wbGVtZW50YcOnw6NvIHJlYWwsIGNoYW1hcmlhIG8gc2VydmnDp28gZGUgc29saWNpdGHDp8Ojb1xuICAgIC8vIHJldHVybiB0aGlzLnNvbGljaXRhY2FvU2VydmljZS5hdHVhbGl6YXJTdGF0dXMoXG4gICAgLy8gICBzb2xpY2l0YWNhb0lkLFxuICAgIC8vICAgJ1BBR0FNRU5UT19MSUJFUkFETycsXG4gICAgLy8gICB7XG4gICAgLy8gICAgIHBhZ2FtZW50b0lkLFxuICAgIC8vICAgICBhdHVhbGl6YWRvUG9yOiB1c3VhcmlvSWQsXG4gICAgLy8gICAgIG9ic2VydmFjb2VzOiAnUGFnYW1lbnRvIGxpYmVyYWRvIHBhcmEgbyBiZW5lZmljacOhcmlvJ1xuICAgIC8vICAgfVxuICAgIC8vICk7XG5cbiAgICAvLyBJbXBsZW1lbnRhw6fDo28gZGUgbW9jayBwYXJhIGRlc2Vudm9sdmltZW50b1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtJTlRFR1JBw4fDg09dIEF0dWFsaXphbmRvIHN0YXR1cyBkYSBzb2xpY2l0YcOnw6NvICR7c29saWNpdGFjYW9JZH0gcGFyYSBQQUdBTUVOVE9fTElCRVJBRE9gLFxuICAgICk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHNvbGljaXRhY2FvSWQsXG4gICAgICBzdGF0dXM6ICdQQUdBTUVOVE9fTElCRVJBRE8nLFxuICAgICAgcGFnYW1lbnRvSWQsXG4gICAgICBhdHVhbGl6YWRvUG9yOiB1c3VhcmlvSWQsXG4gICAgICBkYXRhQXR1YWxpemFjYW86IG5ldyBEYXRlKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHVhbGl6YSBvIHN0YXR1cyBkZSB1bWEgc29saWNpdGHDp8OjbyBhcMOzcyBhIGNvbmZpcm1hw6fDo28gZGUgcmVjZWJpbWVudG9cbiAgICpcbiAgICogQHBhcmFtIHNvbGljaXRhY2FvSWQgSUQgZGEgc29saWNpdGHDp8Ojb1xuICAgKiBAcGFyYW0gcGFnYW1lbnRvSWQgSUQgZG8gcGFnYW1lbnRvIGNvbmZpcm1hZG9cbiAgICogQHBhcmFtIGNvbmZpcm1hY2FvSWQgSUQgZGEgY29uZmlybWHDp8OjbyBkZSByZWNlYmltZW50b1xuICAgKiBAcGFyYW0gdXN1YXJpb0lkIElEIGRvIHVzdcOhcmlvIHF1ZSBlc3TDoSByZWFsaXphbmRvIGEgb3BlcmHDp8Ojb1xuICAgKiBAcmV0dXJucyBEYWRvcyBhdHVhbGl6YWRvcyBkYSBzb2xpY2l0YcOnw6NvXG4gICAqL1xuICBhc3luYyBhdHVhbGl6YXJTdGF0dXNQYXJhUGFnYW1lbnRvQ29uZmlybWFkbyhcbiAgICBzb2xpY2l0YWNhb0lkOiBzdHJpbmcsXG4gICAgcGFnYW1lbnRvSWQ6IHN0cmluZyxcbiAgICBjb25maXJtYWNhb0lkOiBzdHJpbmcsXG4gICAgdXN1YXJpb0lkOiBzdHJpbmcsXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgLy8gRW0gdW1hIGltcGxlbWVudGHDp8OjbyByZWFsLCBjaGFtYXJpYSBvIHNlcnZpw6dvIGRlIHNvbGljaXRhw6fDo29cbiAgICAvLyByZXR1cm4gdGhpcy5zb2xpY2l0YWNhb1NlcnZpY2UuYXR1YWxpemFyU3RhdHVzKFxuICAgIC8vICAgc29saWNpdGFjYW9JZCxcbiAgICAvLyAgICdQQUdBTUVOVE9fQ09ORklSTUFETycsXG4gICAgLy8gICB7XG4gICAgLy8gICAgIHBhZ2FtZW50b0lkLFxuICAgIC8vICAgICBjb25maXJtYWNhb0lkLFxuICAgIC8vICAgICBhdHVhbGl6YWRvUG9yOiB1c3VhcmlvSWQsXG4gICAgLy8gICAgIG9ic2VydmFjb2VzOiAnUGFnYW1lbnRvIGNvbmZpcm1hZG8gcGVsbyBiZW5lZmljacOhcmlvJ1xuICAgIC8vICAgfVxuICAgIC8vICk7XG5cbiAgICAvLyBJbXBsZW1lbnRhw6fDo28gZGUgbW9jayBwYXJhIGRlc2Vudm9sdmltZW50b1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtJTlRFR1JBw4fDg09dIEF0dWFsaXphbmRvIHN0YXR1cyBkYSBzb2xpY2l0YcOnw6NvICR7c29saWNpdGFjYW9JZH0gcGFyYSBQQUdBTUVOVE9fQ09ORklSTUFET2AsXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBpZDogc29saWNpdGFjYW9JZCxcbiAgICAgIHN0YXR1czogJ1BBR0FNRU5UT19DT05GSVJNQURPJyxcbiAgICAgIHBhZ2FtZW50b0lkLFxuICAgICAgY29uZmlybWFjYW9JZCxcbiAgICAgIGF0dWFsaXphZG9Qb3I6IHVzdWFyaW9JZCxcbiAgICAgIGRhdGFBdHVhbGl6YWNhbzogbmV3IERhdGUoKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dWFsaXphIG8gc3RhdHVzIGRlIHVtYSBzb2xpY2l0YcOnw6NvIGFww7NzIG8gY2FuY2VsYW1lbnRvIGRlIHVtIHBhZ2FtZW50b1xuICAgKlxuICAgKiBAcGFyYW0gc29saWNpdGFjYW9JZCBJRCBkYSBzb2xpY2l0YcOnw6NvXG4gICAqIEBwYXJhbSBwYWdhbWVudG9JZCBJRCBkbyBwYWdhbWVudG8gY2FuY2VsYWRvXG4gICAqIEBwYXJhbSB1c3VhcmlvSWQgSUQgZG8gdXN1w6FyaW8gcXVlIGVzdMOhIHJlYWxpemFuZG8gYSBvcGVyYcOnw6NvXG4gICAqIEBwYXJhbSBtb3Rpdm9DYW5jZWxhbWVudG8gTW90aXZvIGRvIGNhbmNlbGFtZW50b1xuICAgKiBAcmV0dXJucyBEYWRvcyBhdHVhbGl6YWRvcyBkYSBzb2xpY2l0YcOnw6NvXG4gICAqL1xuICBhc3luYyBhdHVhbGl6YXJTdGF0dXNQYXJhUGFnYW1lbnRvQ2FuY2VsYWRvKFxuICAgIHNvbGljaXRhY2FvSWQ6IHN0cmluZyxcbiAgICBwYWdhbWVudG9JZDogc3RyaW5nLFxuICAgIHVzdWFyaW9JZDogc3RyaW5nLFxuICAgIG1vdGl2b0NhbmNlbGFtZW50bzogc3RyaW5nLFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIC8vIEVtIHVtYSBpbXBsZW1lbnRhw6fDo28gcmVhbCwgY2hhbWFyaWEgbyBzZXJ2acOnbyBkZSBzb2xpY2l0YcOnw6NvXG4gICAgLy8gcmV0dXJuIHRoaXMuc29saWNpdGFjYW9TZXJ2aWNlLmF0dWFsaXphclN0YXR1cyhcbiAgICAvLyAgIHNvbGljaXRhY2FvSWQsXG4gICAgLy8gICAnUEFHQU1FTlRPX0NBTkNFTEFETycsXG4gICAgLy8gICB7XG4gICAgLy8gICAgIHBhZ2FtZW50b0lkLFxuICAgIC8vICAgICBhdHVhbGl6YWRvUG9yOiB1c3VhcmlvSWQsXG4gICAgLy8gICAgIG9ic2VydmFjb2VzOiBgUGFnYW1lbnRvIGNhbmNlbGFkbzogJHttb3Rpdm9DYW5jZWxhbWVudG99YFxuICAgIC8vICAgfVxuICAgIC8vICk7XG5cbiAgICAvLyBJbXBsZW1lbnRhw6fDo28gZGUgbW9jayBwYXJhIGRlc2Vudm9sdmltZW50b1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtJTlRFR1JBw4fDg09dIEF0dWFsaXphbmRvIHN0YXR1cyBkYSBzb2xpY2l0YcOnw6NvICR7c29saWNpdGFjYW9JZH0gcGFyYSBQQUdBTUVOVE9fQ0FOQ0VMQURPYCxcbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBzb2xpY2l0YWNhb0lkLFxuICAgICAgc3RhdHVzOiAnUEFHQU1FTlRPX0NBTkNFTEFETycsXG4gICAgICBwYWdhbWVudG9JZCxcbiAgICAgIGF0dWFsaXphZG9Qb3I6IHVzdWFyaW9JZCxcbiAgICAgIG1vdGl2b0NhbmNlbGFtZW50byxcbiAgICAgIGRhdGFBdHVhbGl6YWNhbzogbmV3IERhdGUoKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIE9idMOpbSBvcyBsaW1pdGVzIGRlIHZhbG9yIHBhcmEgdW0gdGlwbyBkZSBiZW5lZsOtY2lvXG4gICAqXG4gICAqIEBwYXJhbSB0aXBvQmVuZWZpY2lvSWQgSUQgZG8gdGlwbyBkZSBiZW5lZsOtY2lvXG4gICAqIEByZXR1cm5zIE9iamV0byBjb20gdmFsb3JlcyBtw61uaW1vIGUgbcOheGltbyBwZXJtaXRpZG9zXG4gICAqL1xuICBhc3luYyBvYnRlckxpbWl0ZXNCZW5lZmljaW8odGlwb0JlbmVmaWNpb0lkOiBzdHJpbmcpOiBQcm9taXNlPHtcbiAgICB2YWxvck1pbmltbzogbnVtYmVyO1xuICAgIHZhbG9yTWF4aW1vOiBudW1iZXI7XG4gIH0+IHtcbiAgICAvLyBFbSB1bWEgaW1wbGVtZW50YcOnw6NvIHJlYWwsIGNoYW1hcmlhIG8gc2VydmnDp28gZGUgYmVuZWbDrWNpb3NcbiAgICAvLyBjb25zdCB0aXBvQmVuZWZpY2lvID0gYXdhaXQgdGhpcy5iZW5lZmljaW9TZXJ2aWNlLmZpbmRPbmUodGlwb0JlbmVmaWNpb0lkKTtcbiAgICAvLyByZXR1cm4ge1xuICAgIC8vICAgdmFsb3JNaW5pbW86IHRpcG9CZW5lZmljaW8udmFsb3JNaW5pbW8sXG4gICAgLy8gICB2YWxvck1heGltbzogdGlwb0JlbmVmaWNpby52YWxvck1heGltb1xuICAgIC8vIH07XG5cbiAgICAvLyBJbXBsZW1lbnRhw6fDo28gZGUgbW9jayBwYXJhIGRlc2Vudm9sdmltZW50b1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtJTlRFR1JBw4fDg09dIE9idGVuZG8gbGltaXRlcyBwYXJhIG8gYmVuZWbDrWNpbyAke3RpcG9CZW5lZmljaW9JZH1gLFxuICAgICk7XG5cbiAgICAvLyBWYWxvcmVzIGRlIGV4ZW1wbG9cbiAgICBjb25zdCBsaW1pdGVzID0ge1xuICAgICAgJ21vY2stYmVuZWZpY2lvLWlkJzogeyB2YWxvck1pbmltbzogMTAwLjAsIHZhbG9yTWF4aW1vOiAxMDAwLjAgfSxcbiAgICAgICdhdXhpbGlvLW1vcmFkaWEnOiB7IHZhbG9yTWluaW1vOiAzMDAuMCwgdmFsb3JNYXhpbW86IDgwMC4wIH0sXG4gICAgICAnYXV4aWxpby1mdW5lcmFsJzogeyB2YWxvck1pbmltbzogNTAwLjAsIHZhbG9yTWF4aW1vOiAxNTAwLjAgfSxcbiAgICAgICdjZXN0YS1iYXNpY2EnOiB7IHZhbG9yTWluaW1vOiAxMDAuMCwgdmFsb3JNYXhpbW86IDMwMC4wIH0sXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICBsaW1pdGVzW3RpcG9CZW5lZmljaW9JZF0gfHwgeyB2YWxvck1pbmltbzogMTAwLjAsIHZhbG9yTWF4aW1vOiAxMDAwLjAgfVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgdW1hIHNvbGljaXRhw6fDo28gasOhIHBvc3N1aSBwYWdhbWVudG9cbiAgICpcbiAgICogQHBhcmFtIHNvbGljaXRhY2FvSWQgSUQgZGEgc29saWNpdGHDp8Ojb1xuICAgKiBAcmV0dXJucyB0cnVlIHNlIGEgc29saWNpdGHDp8OjbyBqw6EgcG9zc3VpIHBhZ2FtZW50b1xuICAgKi9cbiAgYXN5bmMgdmVyaWZpY2FyUGFnYW1lbnRvRXhpc3RlbnRlKHNvbGljaXRhY2FvSWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIC8vIEVtIHVtYSBpbXBsZW1lbnRhw6fDo28gcmVhbCwgY2hhbWFyaWEgbyBzZXJ2acOnbyBkZSBzb2xpY2l0YcOnw6NvXG4gICAgLy8gY29uc3Qgc29saWNpdGFjYW8gPSBhd2FpdCB0aGlzLnNvbGljaXRhY2FvU2VydmljZS5maW5kT25lKHNvbGljaXRhY2FvSWQpO1xuICAgIC8vIHJldHVybiBbJ1BBR0FNRU5UT19DUklBRE8nLCAnUEFHQU1FTlRPX0xJQkVSQURPJywgJ1BBR0FNRU5UT19DT05GSVJNQURPJ10uaW5jbHVkZXMoc29saWNpdGFjYW8uc3RhdHVzKTtcblxuICAgIC8vIEltcGxlbWVudGHDp8OjbyBkZSBtb2NrIHBhcmEgZGVzZW52b2x2aW1lbnRvXG4gICAgY29uc29sZS5sb2coXG4gICAgICBgW0lOVEVHUkHDh8ODT10gVmVyaWZpY2FuZG8gc2Ugc29saWNpdGHDp8OjbyAke3NvbGljaXRhY2FvSWR9IGrDoSBwb3NzdWkgcGFnYW1lbnRvYCxcbiAgICApO1xuXG4gICAgLy8gU2ltdWxhciBxdWUgbsOjbyBleGlzdGUgcGFnYW1lbnRvIHBhcmEgcGVybWl0aXIgdGVzdGVzXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=