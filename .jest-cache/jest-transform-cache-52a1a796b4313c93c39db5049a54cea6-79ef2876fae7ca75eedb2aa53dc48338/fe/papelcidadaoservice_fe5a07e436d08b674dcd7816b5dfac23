5de59299ecba437b1965533e2dbf55a7
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var PapelCidadaoService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PapelCidadaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const papel_cidadao_entity_1 = require("../../../entities/papel-cidadao.entity");
const cidadao_entity_1 = require("../../../entities/cidadao.entity");
const cidadao_service_1 = require("./cidadao.service");
const verificacao_papel_service_1 = require("./verificacao-papel.service");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
/**
 * Serviço de Papéis de Cidadão
 *
 * Responsável pela lógica de negócio relacionada aos papéis que os cidadãos
 * podem assumir no sistema (beneficiário, requerente, representante legal).
 */
let PapelCidadaoService = PapelCidadaoService_1 = class PapelCidadaoService {
    papelCidadaoRepository;
    cidadaoService;
    verificacaoPapelService;
    dataSource;
    logger = new common_1.Logger(PapelCidadaoService_1.name);
    constructor(papelCidadaoRepository, cidadaoService, verificacaoPapelService, dataSource) {
        this.papelCidadaoRepository = papelCidadaoRepository;
        this.cidadaoService = cidadaoService;
        this.verificacaoPapelService = verificacaoPapelService;
        this.dataSource = dataSource;
    }
    /**
     * Cria um novo papel para um cidadão
     * @param createPapelCidadaoDto Dados para criação do papel
     * @returns Papel criado
     */
    async create(createPapelCidadaoDto) {
        // Verificar se o cidadão existe
        const cidadaoExistente = await this.cidadaoService.findById(createPapelCidadaoDto.cidadao_id, false);
        if (!cidadaoExistente) {
            throw new common_1.NotFoundException('Cidadão não encontrado');
        }
        // Verificar se já existe um papel ativo para este cidadão
        const papelExistente = await this.papelCidadaoRepository.findOne({
            where: {
                cidadao_id: createPapelCidadaoDto.cidadao_id,
                tipo_papel: createPapelCidadaoDto.tipo_papel,
                ativo: true,
            },
        });
        if (papelExistente) {
            throw new common_1.ConflictException('Cidadão já possui este papel ativo');
        }
        return this.dataSource.transaction(async (manager) => {
            // Buscar o cidadão novamente dentro da transação
            const cidadaoNaTransacao = await manager.findOne(cidadao_entity_1.Cidadao, {
                where: { id: createPapelCidadaoDto.cidadao_id },
            });
            if (!cidadaoNaTransacao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Validar metadados específicos do tipo de papel
            this.validarMetadados(createPapelCidadaoDto.tipo_papel, createPapelCidadaoDto.metadados);
            // Normalizar campos de enum antes de criar
            const dadosNormalizados = (0, enum_normalizer_util_1.normalizeEnumFields)({
                cidadao_id: createPapelCidadaoDto.cidadao_id,
                tipo_papel: createPapelCidadaoDto.tipo_papel,
                metadados: createPapelCidadaoDto.metadados,
                ativo: true,
            });
            const papel = manager.create(papel_cidadao_entity_1.PapelCidadao, dadosNormalizados);
            const savedPapel = await manager.save(papel);
            return savedPapel;
        });
    }
    /**
     * Cria múltiplos papéis para um cidadão
     * @param cidadaoId ID do cidadão
     * @param papeis Lista de papéis a serem criados
     * @returns Lista de papéis criados
     * @throws NotFoundException se o cidadão não for encontrado
     * @throws ConflictException se houver conflito de papéis
     * @throws BadRequestException se os dados forem inválidos
     */
    async createMany(cidadaoId, papeis) {
        this.logger.log(`Criando ${papeis.length} papéis para cidadão ${cidadaoId}`);
        if (!papeis || papeis.length === 0) {
            throw new common_1.BadRequestException('Lista de papéis não pode estar vazia');
        }
        return this.dataSource.transaction(async (manager) => {
            // Verificar se o cidadão existe
            const cidadao = await this.cidadaoService.findById(cidadaoId, false);
            if (!cidadao) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            const papeisParaCriar = papeis.map((papel) => ({
                ...papel,
                cidadao_id: cidadaoId,
            }));
            // Verificar papéis duplicados na lista
            const tiposPapeis = papeisParaCriar.map((p) => p.tipo_papel);
            const tiposUnicos = new Set(tiposPapeis);
            if (tiposUnicos.size !== tiposPapeis.length) {
                throw new common_1.BadRequestException('Lista contém papéis duplicados');
            }
            // Buscar CPF do cidadão uma única vez para verificar conflitos
            const cidadaoParaConflito = await manager.findOne(cidadao_entity_1.Cidadao, {
                where: { id: cidadaoId },
            });
            if (!cidadaoParaConflito) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Verificar conflitos para cada papel
            for (const papel of papeisParaCriar) {
                // Verificar se já possui o papel
                const papelExistente = await manager.findOne(papel_cidadao_entity_1.PapelCidadao, {
                    where: {
                        cidadao_id: cidadaoId,
                        tipo_papel: papel.tipo_papel,
                        ativo: true,
                    },
                });
                if (papelExistente) {
                    throw new common_1.ConflictException(`Cidadão já possui o papel ${papel.tipo_papel} ativo`);
                }
                const conflitos = await this.verificacaoPapelService.verificarConflitoPapeis(cidadaoParaConflito.cpf);
                if (conflitos.temConflito) {
                    throw new common_1.ConflictException(`Conflito de papel detectado para ${papel.tipo_papel}: ${conflitos.detalhes}`);
                }
                // Validar metadados
                this.validarMetadados(papel.tipo_papel, papel.metadados);
            }
            // Normalizar campos de enum antes de criar as entidades
            const papeisNormalizados = papeisParaCriar.map((papel) => (0, enum_normalizer_util_1.normalizeEnumFields)({
                ...papel,
                ativo: true,
            }));
            const papeisEntities = manager.create(papel_cidadao_entity_1.PapelCidadao, papeisNormalizados);
            return manager.save(papeisEntities);
        });
    }
    /**
     * Busca todos os papéis de um cidadão
     * @param cidadaoId ID do cidadão
     * @returns Lista de papéis do cidadão
     */
    async findByCidadaoId(cidadaoId) {
        try {
            return this.papelCidadaoRepository.find({
                where: { cidadao_id: cidadaoId, ativo: true },
            });
        }
        catch (error) {
            this.logger.error(`Erro ao buscar papéis do cidadão: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao buscar papéis do cidadão');
        }
    }
    /**
     * Verifica se um cidadão possui um determinado papel
     * @param cidadaoId ID do cidadão
     * @param tipoPapel Tipo de papel a verificar
     * @returns true se o cidadão possui o papel, false caso contrário
     */
    async verificarPapel(cidadaoId, tipoPapel) {
        const papel = await this.papelCidadaoRepository.findOne({
            where: {
                cidadao_id: cidadaoId,
                tipo_papel: tipoPapel,
                ativo: true,
            },
        });
        return !!papel;
    }
    /**
     * Desativa um papel de um cidadão
     * @param id ID do papel a ser desativado
     * @returns Papel desativado
     */
    async desativar(id) {
        try {
            const papel = await this.papelCidadaoRepository.findOne({
                where: { id },
            });
            if (!papel) {
                throw new common_1.NotFoundException(`Papel com ID ${id} não encontrado`);
            }
            papel.ativo = false;
            return this.papelCidadaoRepository.save(papel);
        }
        catch (error) {
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            this.logger.error(`Erro ao desativar papel: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Erro ao desativar papel');
        }
    }
    /**
     * Busca cidadãos por tipo de papel
     * @param tipoPapel Tipo de papel a buscar
     * @param options Opções de filtro e paginação
     * @returns Lista de cidadãos com o papel especificado
     */
    async findCidadaosByTipoPapel(tipoPapel, options = {}) {
        const { page = 1, limit = 10, includeInactive = false } = options;
        const skip = (page - 1) * limit;
        const whereCondition = {
            tipo_papel: tipoPapel,
        };
        if (!includeInactive) {
            whereCondition.ativo = true;
        }
        const [papeis, total] = await this.papelCidadaoRepository.findAndCount({
            where: whereCondition,
            relations: ['cidadao'],
            skip,
            take: limit,
            order: {
                created_at: 'DESC',
            },
        });
        const data = papeis.map((papel) => ({
            cidadao: papel.cidadao,
            papel,
        }));
        return {
            data,
            total,
            page,
            limit,
        };
    }
    /**
     * Cria um novo papel para um cidadão (alias para o método create)
     * @param createPapelCidadaoDto Dados do papel a ser criado
     * @returns Papel criado
     */
    async criarPapel(createPapelCidadaoDto, usuarioId, manager) {
        return this.create(createPapelCidadaoDto);
    }
    /**
     * Inativa um papel de cidadão (alias para o método desativar)
     * @param papelId ID do papel a ser inativado
     * @returns Papel inativado
     */
    async inativarPapel(papelId) {
        return this.desativar(papelId);
    }
    /**
     * Atualiza os papéis de um cidadão
     * @param cidadaoId ID do cidadão
     * @param updatePapeisDto Dados para atualização dos papéis
     * @returns Papéis atualizados
     */
    async updatePapeis(cidadaoId, updatePapeisDto) {
        return await this.dataSource.transaction(async (manager) => {
            // Verificar se o cidadão existe
            const cidadaoExistente = await manager.findOne(cidadao_entity_1.Cidadao, {
                where: { id: cidadaoId },
            });
            if (!cidadaoExistente) {
                throw new common_1.NotFoundException('Cidadão não encontrado');
            }
            // Buscar papéis ativos atuais
            const papeisAtuais = await manager.find(papel_cidadao_entity_1.PapelCidadao, {
                where: {
                    cidadao_id: cidadaoId,
                    ativo: true,
                },
            });
            // Desativar todos os papéis atuais
            for (const papel of papeisAtuais) {
                papel.ativo = false;
                papel.updated_at = new Date();
                await manager.save(papel);
            }
            // Criar novos papéis
            const papeisParaCriar = updatePapeisDto.papeis.map((papelDto) => {
                // Validar metadados específicos do tipo de papel
                this.validarMetadados(papelDto.tipo_papel, papelDto.metadados);
                return {
                    cidadao_id: cidadaoId,
                    tipo_papel: papelDto.tipo_papel,
                    metadados: papelDto.metadados,
                    ativo: true,
                };
            });
            const papeisEntities = manager.create(papel_cidadao_entity_1.PapelCidadao, papeisParaCriar);
            const novosPapeis = await manager.save(papeisEntities);
            return novosPapeis;
        });
    }
    /**
     * Valida os metadados específicos de cada tipo de papel
     * @param tipoPapel - Tipo do papel a ser validado
     * @param metadados - Metadados a serem validados
     * @throws BadRequestException se os metadados forem inválidos
     */
    validarMetadados(tipoPapel, metadados) {
        if (!metadados) {
            metadados = {};
        }
        switch (tipoPapel) {
            case 'representante_legal':
                if (!metadados.documento_representacao) {
                    throw new common_1.BadRequestException('Documento de representação é obrigatório para representantes legais');
                }
                if (!metadados.data_validade_representacao) {
                    throw new common_1.BadRequestException('Data de validade da representação é obrigatória para representantes legais');
                }
                break;
            case 'requerente':
                if (!metadados.grau_parentesco) {
                    throw new common_1.BadRequestException('Grau de parentesco é obrigatório para requerentes');
                }
                break;
            case 'beneficiario':
                // Não há metadados obrigatórios para beneficiários
                break;
            default:
                break;
        }
    }
};
exports.PapelCidadaoService = PapelCidadaoService;
exports.PapelCidadaoService = PapelCidadaoService = PapelCidadaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(papel_cidadao_entity_1.PapelCidadao)),
    __param(1, (0, common_1.Inject)((0, common_1.forwardRef)(() => cidadao_service_1.CidadaoService))),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof cidadao_service_1.CidadaoService !== "undefined" && cidadao_service_1.CidadaoService) === "function" ? _b : Object, typeof (_c = typeof verificacao_papel_service_1.VerificacaoPapelService !== "undefined" && verificacao_papel_service_1.VerificacaoPapelService) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.DataSource !== "undefined" && typeorm_2.DataSource) === "function" ? _d : Object])
], PapelCidadaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,