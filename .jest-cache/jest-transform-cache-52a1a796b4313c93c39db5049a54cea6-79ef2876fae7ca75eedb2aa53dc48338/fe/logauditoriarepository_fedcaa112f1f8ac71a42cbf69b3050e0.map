{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\repositories\\log-auditoria.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\auditoria\\repositories\\log-auditoria.repository.ts"],"sourcesContent":["import { Injectable, Logger, Inject, Optional } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between, FindOptionsWhere, Raw } from 'typeorm';\nimport { LogAuditoria } from '../../../entities/log-auditoria.entity';\nimport { TipoOperacao } from '../../../enums/tipo-operacao.enum';\nimport { CreateLogAuditoriaDto } from '../dto/create-log-auditoria.dto';\nimport { QueryLogAuditoriaDto } from '../dto/query-log-auditoria.dto';\nimport * as zlib from 'zlib';\nimport { promisify } from 'util';\n\n// Promisificar funções de compressão\nconst gzipAsync = promisify(zlib.gzip);\nconst gunzipAsync = promisify(zlib.gunzip);\n\n/**\n * Repositório para logs de auditoria\n *\n * Implementa o padrão Repository para operações com logs de auditoria,\n * incluindo suporte a compressão de dados e particionamento de tabelas.\n */\n@Injectable()\nexport class LogAuditoriaRepository {\n  private readonly logger = new Logger(LogAuditoriaRepository.name);\n  private readonly compressionEnabled: boolean = true;\n  private readonly compressionThreshold: number = 1024; // 1KB\n\n  constructor(\n    @InjectRepository(LogAuditoria)\n    private readonly repository: Repository<LogAuditoria>,\n  ) {}\n\n  /**\n   * Cria um novo log de auditoria\n   *\n   * @param createLogAuditoriaDto DTO com dados do log\n   * @returns Log de auditoria criado\n   */\n  async create(\n    createLogAuditoriaDto: CreateLogAuditoriaDto,\n  ): Promise<LogAuditoria> {\n    try {\n      // Criar entidade a partir do DTO\n      const logAuditoria = this.repository.create(createLogAuditoriaDto);\n\n      // Comprimir dados grandes se necessário\n      await this.compressLogDataIfNeeded(logAuditoria);\n\n      // Salvar o log sem assinatura para evitar dependência circular\n      const savedLog = await this.repository.save(logAuditoria);\n      \n      this.logger.debug(`Log ${savedLog.id} criado com sucesso`);\n\n      return savedLog;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao criar log de auditoria: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Busca logs de auditoria com filtros e paginação\n   *\n   * @param queryDto DTO com filtros de busca\n   * @returns Logs de auditoria paginados\n   */\n  async findAll(\n    queryDto: QueryLogAuditoriaDto,\n  ): Promise<{ items: LogAuditoria[]; total: number }> {\n    try {\n      const {\n        tipo_operacao,\n        entidade_afetada,\n        entidade_id,\n        usuario_id,\n        ip_usuario: ip_origem,\n        endpoint,\n        metodo_http,\n        data_inicial: data_inicio,\n        data_final: data_fim,\n        termo_busca,\n        pagina: page = 1,\n        itens_por_pagina: limit = 10,\n      } = queryDto;\n\n      // Construir where clause\n      const where: FindOptionsWhere<LogAuditoria> = {};\n\n      // Filtrar por tipo de operação\n      if (tipo_operacao) {\n        where.tipo_operacao = tipo_operacao;\n      }\n\n      // Filtrar por entidade afetada\n      if (entidade_afetada) {\n        where.entidade_afetada = entidade_afetada;\n      }\n\n      // Filtrar por usuário\n      if (usuario_id) {\n        where.usuario_id = usuario_id;\n      }\n\n      // Filtrar por IP de origem\n      if (ip_origem) {\n        where.ip_origem = ip_origem;\n      }\n\n      // Filtrar por endpoint\n      if (endpoint) {\n        where.endpoint = Raw(\n          (alias) => `(${alias} ILIKE '%${endpoint.replace(/'/g, \"''\")}%')`,\n        );\n      }\n\n      // Filtrar por método HTTP\n      if (metodo_http) {\n        where.metodo_http = metodo_http;\n      }\n\n      // Filtrar por período\n      if (data_inicio && data_fim) {\n        where.created_at = Between(new Date(data_inicio), new Date(data_fim));\n      } else if (data_inicio) {\n        where.created_at = Raw((alias) => `(${alias} >= :dataInicio)`, {\n          dataInicio: new Date(data_inicio),\n        });\n      } else if (data_fim) {\n        where.created_at = Raw((alias) => `(${alias} <= :dataFim)`, {\n          dataFim: new Date(data_fim),\n        });\n      }\n\n      // Filtrar por presença de dados sensíveis\n      if (termo_busca) {\n        where.dados_sensiveis_acessados = Raw(\n          (alias) => `(${alias}::text ILIKE :termo)`,\n          { termo: `%${termo_busca}%` },\n        );\n      }\n\n      // Calcular skip para paginação\n      const skip = (page - 1) * limit;\n\n      // Executar consulta\n      const [items, total] = await this.repository.findAndCount({\n        where,\n        skip,\n        take: limit,\n        order: {\n          created_at: 'DESC',\n        },\n      });\n\n      // Descomprimir dados se necessário\n      for (const item of items) {\n        await this.decompressLogDataIfNeeded(item);\n      }\n\n      return { items, total };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar logs de auditoria: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Busca um log de auditoria pelo ID\n   *\n   * @param id ID do log\n   * @returns Log de auditoria\n   */\n  async findOne(id: string): Promise<LogAuditoria | null> {\n    try {\n      const log = await this.repository.findOne({ where: { id } });\n\n      if (!log) {\n        return null;\n      }\n\n      // Descomprimir dados se necessário\n      await this.decompressLogDataIfNeeded(log);\n\n      return log;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar log de auditoria: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Busca logs de auditoria por entidade e ID\n   *\n   * @param entidade Nome da entidade\n   * @param entidadeId ID da entidade\n   * @returns Logs de auditoria\n   */\n  async findByEntity(\n    entidade: string,\n    entidadeId: string,\n  ): Promise<LogAuditoria[]> {\n    try {\n      const logs = await this.repository.find({\n        where: {\n          entidade_afetada: entidade,\n          entidade_id: entidadeId,\n        },\n        order: {\n          created_at: 'DESC',\n        },\n      });\n\n      // Descomprimir dados se necessário\n      for (const log of logs) {\n        await this.decompressLogDataIfNeeded(log);\n      }\n\n      return logs;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar logs por entidade: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Busca logs de auditoria por usuário\n   *\n   * @param usuarioId ID do usuário\n   * @param limit Limite de registros\n   * @returns Logs de auditoria\n   */\n  async findByUser(\n    usuarioId: string,\n    limit: number = 100,\n  ): Promise<LogAuditoria[]> {\n    try {\n      const logs = await this.repository.find({\n        where: {\n          usuario_id: usuarioId,\n        },\n        order: {\n          created_at: 'DESC',\n        },\n        take: limit,\n      });\n\n      // Descomprimir dados se necessário\n      for (const log of logs) {\n        await this.decompressLogDataIfNeeded(log);\n      }\n\n      return logs;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar logs por usuário: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Busca logs de auditoria de acesso a dados sensíveis\n   *\n   * @param limit Limite de registros\n   * @returns Logs de auditoria\n   */\n  async findSensitiveDataAccess(limit: number = 100): Promise<LogAuditoria[]> {\n    try {\n      const logs = await this.repository.find({\n        where: {\n          dados_sensiveis_acessados: Raw(\n            (alias) => `(${alias} IS NOT NULL AND ${alias}::text != '[]')`,\n          ),\n        },\n        order: {\n          created_at: 'DESC',\n        },\n        take: limit,\n      });\n\n      // Descomprimir dados se necessário\n      for (const log of logs) {\n        await this.decompressLogDataIfNeeded(log);\n      }\n\n      return logs;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar logs de acesso a dados sensíveis: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Comprime dados grandes no log de auditoria\n   *\n   * @param log Log de auditoria\n   */\n  private async compressLogDataIfNeeded(log: LogAuditoria): Promise<void> {\n    if (!this.compressionEnabled) {return;}\n\n    try {\n      // Comprimir dados_anteriores se for grande\n      if (log.dados_anteriores) {\n        const dadosAnterioresStr = JSON.stringify(log.dados_anteriores);\n\n        if (dadosAnterioresStr.length > this.compressionThreshold) {\n          const compressed = await gzipAsync(Buffer.from(dadosAnterioresStr));\n          log.dados_anteriores = {\n            __compressed: true,\n            data: compressed.toString('base64'),\n          };\n        }\n      }\n\n      // Comprimir dados_novos se for grande\n      if (log.dados_novos) {\n        const dadosNovosStr = JSON.stringify(log.dados_novos);\n\n        if (dadosNovosStr.length > this.compressionThreshold) {\n          const compressed = await gzipAsync(Buffer.from(dadosNovosStr));\n          log.dados_novos = {\n            __compressed: true,\n            data: compressed.toString('base64'),\n          };\n        }\n      }\n    } catch (error) {\n      this.logger.warn(`Erro ao comprimir dados do log: ${error.message}`);\n      // Continuar sem compressão em caso de erro\n    }\n  }\n\n  /**\n   * Descomprime dados no log de auditoria\n   *\n   * @param log Log de auditoria\n   */\n  private async decompressLogDataIfNeeded(log: LogAuditoria): Promise<void> {\n    if (!this.compressionEnabled) {return;}\n\n    try {\n      // Descomprimir dados_anteriores se estiver comprimido\n      if (log.dados_anteriores && log.dados_anteriores['__compressed']) {\n        const compressedData = Buffer.from(\n          log.dados_anteriores['data'],\n          'base64',\n        );\n        const decompressed = await gunzipAsync(compressedData);\n        log.dados_anteriores = JSON.parse(decompressed.toString());\n      }\n\n      // Descomprimir dados_novos se estiver comprimido\n      if (log.dados_novos && log.dados_novos['__compressed']) {\n        const compressedData = Buffer.from(log.dados_novos['data'], 'base64');\n        const decompressed = await gunzipAsync(compressedData);\n        log.dados_novos = JSON.parse(decompressed.toString());\n      }\n    } catch (error) {\n      this.logger.warn(`Erro ao descomprimir dados do log: ${error.message}`);\n      // Manter dados comprimidos em caso de erro\n    }\n  }\n\n  /**\n   * Cria uma nova partição na tabela de logs\n   *\n   * @param dataInicio Data de início da partição\n   * @param dataFim Data de fim da partição\n   */\n  async createPartition(dataInicio: Date, dataFim: Date): Promise<void> {\n    try {\n      const partitionName = `logs_auditoria_${dataInicio.getFullYear()}_${(dataInicio.getMonth() + 1).toString().padStart(2, '0')}`;\n      const startDate = dataInicio.toISOString().split('T')[0];\n      const endDate = dataFim.toISOString().split('T')[0];\n\n      // Criar partição usando SQL nativo\n      await this.repository.query(`\n        CREATE TABLE IF NOT EXISTS ${partitionName} PARTITION OF logs_auditoria\n        FOR VALUES FROM ('${startDate}') TO ('${endDate}');\n      `);\n\n      this.logger.log(\n        `Partição ${partitionName} criada com sucesso para o período ${startDate} a ${endDate}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao criar partição: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Cria partições para os próximos meses\n   *\n   * @param meses Número de meses para criar partições\n   */\n  async createPartitionsForNextMonths(meses: number = 12): Promise<void> {\n    try {\n      const hoje = new Date();\n\n      for (let i = 0; i < meses; i++) {\n        const dataInicio = new Date(hoje.getFullYear(), hoje.getMonth() + i, 1);\n        const dataFim = new Date(\n          hoje.getFullYear(),\n          hoje.getMonth() + i + 1,\n          1,\n        );\n\n        await this.createPartition(dataInicio, dataFim);\n      }\n\n      this.logger.log(\n        `Partições criadas com sucesso para os próximos ${meses} meses`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao criar partições: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Arquiva logs antigos para tabelas de histórico\n   *\n   * @param mesesRetencao Número de meses para manter logs na tabela principal\n   */\n  async archiveOldLogs(mesesRetencao: number = 12): Promise<void> {\n    try {\n      const dataLimite = new Date();\n      dataLimite.setMonth(dataLimite.getMonth() - mesesRetencao);\n\n      // Mover logs antigos para tabela de histórico\n      await this.repository.query(`\n        INSERT INTO logs_auditoria_historico\n        SELECT * FROM logs_auditoria\n        WHERE created_at < '${dataLimite.toISOString()}'\n      `);\n\n      // Remover logs antigos da tabela principal\n      await this.repository.query(`\n        DELETE FROM logs_auditoria\n        WHERE created_at < '${dataLimite.toISOString()}'\n      `);\n\n      this.logger.log(\n        `Logs anteriores a ${dataLimite.toISOString()} arquivados com sucesso`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao arquivar logs antigos: ${error.message}`,\n        error.stack,\n      );\n      throw error;\n    }\n  }\n}\n"],"version":3}