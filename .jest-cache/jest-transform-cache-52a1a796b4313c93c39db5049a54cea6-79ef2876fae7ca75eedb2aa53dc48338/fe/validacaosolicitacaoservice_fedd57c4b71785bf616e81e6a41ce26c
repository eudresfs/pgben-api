381263c6b61e6726239683f6fc042f5b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidacaoSolicitacaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const entities_1 = require("../../../entities");
const entities_2 = require("../../../entities");
const transicao_estado_service_1 = require("./transicao-estado.service");
/**
 * Serviço de Validação de Solicitação
 *
 * Responsável por validar as regras de negócio específicas para operações
 * relacionadas a solicitações, como aprovação, liberação, etc.
 */
let ValidacaoSolicitacaoService = class ValidacaoSolicitacaoService {
    solicitacaoRepository;
    pendenciaRepository;
    transicaoEstadoService;
    constructor(solicitacaoRepository, pendenciaRepository, transicaoEstadoService) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.pendenciaRepository = pendenciaRepository;
        this.transicaoEstadoService = transicaoEstadoService;
    }
    /**
     * Valida se uma solicitação pode ser aprovada
     * @param solicitacaoId ID da solicitação
     * @returns void se validação passar, exception caso contrário
     */
    async validarAprovacao(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new common_1.BadRequestException('Solicitação não encontrada');
        }
        // Verificar se a transição para APROVADA é válida
        if (!this.transicaoEstadoService.isTransicaoValida(solicitacao.status, entities_2.StatusSolicitacao.APROVADA)) {
            throw new common_1.BadRequestException(`Não é possível aprovar uma solicitação no estado ${solicitacao.status}`);
        }
        // Verificar se existem pendências não resolvidas
        const pendenciasAbertas = await this.pendenciaRepository.find({
            where: {
                solicitacao_id: solicitacaoId,
                status: entities_1.StatusPendencia.ABERTA,
            },
        });
        if (pendenciasAbertas.length > 0) {
            throw new common_1.BadRequestException('Não é possível aprovar a solicitação com pendências não resolvidas. Resolva todas as pendências antes de aprovar.');
        }
        // Verificar se a solicitação tem os campos obrigatórios preenchidos
        if (!solicitacao.parecer_semtas) {
            throw new common_1.BadRequestException('O parecer da SEMTAS é obrigatório para aprovar a solicitação');
        }
    }
    /**
     * Valida se uma solicitação pode ser liberada
     * @param solicitacaoId ID da solicitação
     * @returns void se validação passar, exception caso contrário
     */
    async validarLiberacao(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new common_1.BadRequestException('Solicitação não encontrada');
        }
        // Verificar se a transição para LIBERADA é válida
        if (!this.transicaoEstadoService.isTransicaoValida(solicitacao.status, entities_2.StatusSolicitacao.LIBERADA)) {
            throw new common_1.BadRequestException(`Não é possível liberar uma solicitação no estado ${solicitacao.status}`);
        }
        // Verificar se a solicitação foi aprovada
        if (solicitacao.status !== entities_2.StatusSolicitacao.APROVADA) {
            throw new common_1.BadRequestException('Apenas solicitações aprovadas podem ser liberadas');
        }
        // Verificar se a solicitação tem os campos obrigatórios preenchidos
        if (!solicitacao.aprovador_id) {
            throw new common_1.BadRequestException('A solicitação precisa ter um aprovador registrado para ser liberada');
        }
    }
    /**
     * Valida se uma solicitação pode ser cancelada
     * @param solicitacaoId ID da solicitação
     * @returns void se validação passar, exception caso contrário
     */
    async validarCancelamento(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new common_1.BadRequestException('Solicitação não encontrada');
        }
        // Verificar se a transição para CANCELADA é válida
        if (!this.transicaoEstadoService.isTransicaoValida(solicitacao.status, entities_2.StatusSolicitacao.CANCELADA)) {
            throw new common_1.BadRequestException(`Não é possível cancelar uma solicitação no estado ${solicitacao.status}`);
        }
        // Verificar se a solicitação já está em um estado final
        if (solicitacao.status === entities_2.StatusSolicitacao.CONCLUIDA ||
            solicitacao.status === entities_2.StatusSolicitacao.ARQUIVADA) {
            throw new common_1.BadRequestException('Não é possível cancelar uma solicitação que já foi concluída ou arquivada');
        }
    }
    /**
     * Valida se uma solicitação pode ser concluída
     * @param solicitacaoId ID da solicitação
     * @returns void se validação passar, exception caso contrário
     */
    async validarConclusao(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new common_1.BadRequestException('Solicitação não encontrada');
        }
        // Verificar se a transição para CONCLUIDA é válida
        if (!this.transicaoEstadoService.isTransicaoValida(solicitacao.status, entities_2.StatusSolicitacao.CONCLUIDA)) {
            throw new common_1.BadRequestException(`Não é possível concluir uma solicitação no estado ${solicitacao.status}`);
        }
        // Verificar se a solicitação está em processamento
        if (solicitacao.status !== entities_2.StatusSolicitacao.EM_PROCESSAMENTO) {
            throw new common_1.BadRequestException('Apenas solicitações em processamento podem ser concluídas');
        }
    }
    /**
     * Valida se uma solicitação pode ser arquivada
     * @param solicitacaoId ID da solicitação
     * @returns void se validação passar, exception caso contrário
     */
    async validarArquivamento(solicitacaoId) {
        const solicitacao = await this.solicitacaoRepository.findOne({
            where: { id: solicitacaoId },
        });
        if (!solicitacao) {
            throw new common_1.BadRequestException('Solicitação não encontrada');
        }
        // Verificar se a transição para ARQUIVADA é válida
        if (!this.transicaoEstadoService.isTransicaoValida(solicitacao.status, entities_2.StatusSolicitacao.ARQUIVADA)) {
            throw new common_1.BadRequestException(`Não é possível arquivar uma solicitação no estado ${solicitacao.status}`);
        }
        // Verificar se a solicitação está em um estado que permite arquivamento
        const estadosPermitidos = [
            entities_2.StatusSolicitacao.CONCLUIDA,
            entities_2.StatusSolicitacao.INDEFERIDA,
            entities_2.StatusSolicitacao.CANCELADA,
        ];
        if (!estadosPermitidos.includes(solicitacao.status)) {
            throw new common_1.BadRequestException('Apenas solicitações concluídas, reprovadas ou canceladas podem ser arquivadas');
        }
    }
};
exports.ValidacaoSolicitacaoService = ValidacaoSolicitacaoService;
exports.ValidacaoSolicitacaoService = ValidacaoSolicitacaoService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(entities_2.Solicitacao)),
    __param(1, (0, typeorm_1.InjectRepository)(entities_1.Pendencia)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof transicao_estado_service_1.TransicaoEstadoService !== "undefined" && transicao_estado_service_1.TransicaoEstadoService) === "function" ? _c : Object])
], ValidacaoSolicitacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,