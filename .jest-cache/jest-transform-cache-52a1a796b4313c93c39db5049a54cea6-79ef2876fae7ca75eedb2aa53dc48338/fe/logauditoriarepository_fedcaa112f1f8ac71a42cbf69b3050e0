d2af383d0d0fc6830aff8f2432b4109f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var LogAuditoriaRepository_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogAuditoriaRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const log_auditoria_entity_1 = require("../../../entities/log-auditoria.entity");
const zlib = __importStar(require("zlib"));
const util_1 = require("util");
// Promisificar funções de compressão
const gzipAsync = (0, util_1.promisify)(zlib.gzip);
const gunzipAsync = (0, util_1.promisify)(zlib.gunzip);
/**
 * Repositório para logs de auditoria
 *
 * Implementa o padrão Repository para operações com logs de auditoria,
 * incluindo suporte a compressão de dados e particionamento de tabelas.
 */
let LogAuditoriaRepository = LogAuditoriaRepository_1 = class LogAuditoriaRepository {
    repository;
    logger = new common_1.Logger(LogAuditoriaRepository_1.name);
    compressionEnabled = true;
    compressionThreshold = 1024; // 1KB
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Cria um novo log de auditoria
     *
     * @param createLogAuditoriaDto DTO com dados do log
     * @returns Log de auditoria criado
     */
    async create(createLogAuditoriaDto) {
        try {
            // Criar entidade a partir do DTO
            const logAuditoria = this.repository.create(createLogAuditoriaDto);
            // Comprimir dados grandes se necessário
            await this.compressLogDataIfNeeded(logAuditoria);
            // Salvar o log sem assinatura para evitar dependência circular
            const savedLog = await this.repository.save(logAuditoria);
            this.logger.debug(`Log ${savedLog.id} criado com sucesso`);
            return savedLog;
        }
        catch (error) {
            this.logger.error(`Erro ao criar log de auditoria: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Busca logs de auditoria com filtros e paginação
     *
     * @param queryDto DTO com filtros de busca
     * @returns Logs de auditoria paginados
     */
    async findAll(queryDto) {
        try {
            const { tipo_operacao, entidade_afetada, entidade_id, usuario_id, ip_usuario: ip_origem, endpoint, metodo_http, data_inicial: data_inicio, data_final: data_fim, termo_busca, pagina: page = 1, itens_por_pagina: limit = 10, } = queryDto;
            // Construir where clause
            const where = {};
            // Filtrar por tipo de operação
            if (tipo_operacao) {
                where.tipo_operacao = tipo_operacao;
            }
            // Filtrar por entidade afetada
            if (entidade_afetada) {
                where.entidade_afetada = entidade_afetada;
            }
            // Filtrar por usuário
            if (usuario_id) {
                where.usuario_id = usuario_id;
            }
            // Filtrar por IP de origem
            if (ip_origem) {
                where.ip_origem = ip_origem;
            }
            // Filtrar por endpoint
            if (endpoint) {
                where.endpoint = (0, typeorm_2.Raw)((alias) => `(${alias} ILIKE '%${endpoint.replace(/'/g, "''")}%')`);
            }
            // Filtrar por método HTTP
            if (metodo_http) {
                where.metodo_http = metodo_http;
            }
            // Filtrar por período
            if (data_inicio && data_fim) {
                where.created_at = (0, typeorm_2.Between)(new Date(data_inicio), new Date(data_fim));
            }
            else if (data_inicio) {
                where.created_at = (0, typeorm_2.Raw)((alias) => `(${alias} >= :dataInicio)`, {
                    dataInicio: new Date(data_inicio),
                });
            }
            else if (data_fim) {
                where.created_at = (0, typeorm_2.Raw)((alias) => `(${alias} <= :dataFim)`, {
                    dataFim: new Date(data_fim),
                });
            }
            // Filtrar por presença de dados sensíveis
            if (termo_busca) {
                where.dados_sensiveis_acessados = (0, typeorm_2.Raw)((alias) => `(${alias}::text ILIKE :termo)`, { termo: `%${termo_busca}%` });
            }
            // Calcular skip para paginação
            const skip = (page - 1) * limit;
            // Executar consulta
            const [items, total] = await this.repository.findAndCount({
                where,
                skip,
                take: limit,
                order: {
                    created_at: 'DESC',
                },
            });
            // Descomprimir dados se necessário
            for (const item of items) {
                await this.decompressLogDataIfNeeded(item);
            }
            return { items, total };
        }
        catch (error) {
            this.logger.error(`Erro ao buscar logs de auditoria: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Busca um log de auditoria pelo ID
     *
     * @param id ID do log
     * @returns Log de auditoria
     */
    async findOne(id) {
        try {
            const log = await this.repository.findOne({ where: { id } });
            if (!log) {
                return null;
            }
            // Descomprimir dados se necessário
            await this.decompressLogDataIfNeeded(log);
            return log;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar log de auditoria: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Busca logs de auditoria por entidade e ID
     *
     * @param entidade Nome da entidade
     * @param entidadeId ID da entidade
     * @returns Logs de auditoria
     */
    async findByEntity(entidade, entidadeId) {
        try {
            const logs = await this.repository.find({
                where: {
                    entidade_afetada: entidade,
                    entidade_id: entidadeId,
                },
                order: {
                    created_at: 'DESC',
                },
            });
            // Descomprimir dados se necessário
            for (const log of logs) {
                await this.decompressLogDataIfNeeded(log);
            }
            return logs;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar logs por entidade: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Busca logs de auditoria por usuário
     *
     * @param usuarioId ID do usuário
     * @param limit Limite de registros
     * @returns Logs de auditoria
     */
    async findByUser(usuarioId, limit = 100) {
        try {
            const logs = await this.repository.find({
                where: {
                    usuario_id: usuarioId,
                },
                order: {
                    created_at: 'DESC',
                },
                take: limit,
            });
            // Descomprimir dados se necessário
            for (const log of logs) {
                await this.decompressLogDataIfNeeded(log);
            }
            return logs;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar logs por usuário: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Busca logs de auditoria de acesso a dados sensíveis
     *
     * @param limit Limite de registros
     * @returns Logs de auditoria
     */
    async findSensitiveDataAccess(limit = 100) {
        try {
            const logs = await this.repository.find({
                where: {
                    dados_sensiveis_acessados: (0, typeorm_2.Raw)((alias) => `(${alias} IS NOT NULL AND ${alias}::text != '[]')`),
                },
                order: {
                    created_at: 'DESC',
                },
                take: limit,
            });
            // Descomprimir dados se necessário
            for (const log of logs) {
                await this.decompressLogDataIfNeeded(log);
            }
            return logs;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar logs de acesso a dados sensíveis: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Comprime dados grandes no log de auditoria
     *
     * @param log Log de auditoria
     */
    async compressLogDataIfNeeded(log) {
        if (!this.compressionEnabled) {
            return;
        }
        try {
            // Comprimir dados_anteriores se for grande
            if (log.dados_anteriores) {
                const dadosAnterioresStr = JSON.stringify(log.dados_anteriores);
                if (dadosAnterioresStr.length > this.compressionThreshold) {
                    const compressed = await gzipAsync(Buffer.from(dadosAnterioresStr));
                    log.dados_anteriores = {
                        __compressed: true,
                        data: compressed.toString('base64'),
                    };
                }
            }
            // Comprimir dados_novos se for grande
            if (log.dados_novos) {
                const dadosNovosStr = JSON.stringify(log.dados_novos);
                if (dadosNovosStr.length > this.compressionThreshold) {
                    const compressed = await gzipAsync(Buffer.from(dadosNovosStr));
                    log.dados_novos = {
                        __compressed: true,
                        data: compressed.toString('base64'),
                    };
                }
            }
        }
        catch (error) {
            this.logger.warn(`Erro ao comprimir dados do log: ${error.message}`);
            // Continuar sem compressão em caso de erro
        }
    }
    /**
     * Descomprime dados no log de auditoria
     *
     * @param log Log de auditoria
     */
    async decompressLogDataIfNeeded(log) {
        if (!this.compressionEnabled) {
            return;
        }
        try {
            // Descomprimir dados_anteriores se estiver comprimido
            if (log.dados_anteriores && log.dados_anteriores['__compressed']) {
                const compressedData = Buffer.from(log.dados_anteriores['data'], 'base64');
                const decompressed = await gunzipAsync(compressedData);
                log.dados_anteriores = JSON.parse(decompressed.toString());
            }
            // Descomprimir dados_novos se estiver comprimido
            if (log.dados_novos && log.dados_novos['__compressed']) {
                const compressedData = Buffer.from(log.dados_novos['data'], 'base64');
                const decompressed = await gunzipAsync(compressedData);
                log.dados_novos = JSON.parse(decompressed.toString());
            }
        }
        catch (error) {
            this.logger.warn(`Erro ao descomprimir dados do log: ${error.message}`);
            // Manter dados comprimidos em caso de erro
        }
    }
    /**
     * Cria uma nova partição na tabela de logs
     *
     * @param dataInicio Data de início da partição
     * @param dataFim Data de fim da partição
     */
    async createPartition(dataInicio, dataFim) {
        try {
            const partitionName = `logs_auditoria_${dataInicio.getFullYear()}_${(dataInicio.getMonth() + 1).toString().padStart(2, '0')}`;
            const startDate = dataInicio.toISOString().split('T')[0];
            const endDate = dataFim.toISOString().split('T')[0];
            // Criar partição usando SQL nativo
            await this.repository.query(`
        CREATE TABLE IF NOT EXISTS ${partitionName} PARTITION OF logs_auditoria
        FOR VALUES FROM ('${startDate}') TO ('${endDate}');
      `);
            this.logger.log(`Partição ${partitionName} criada com sucesso para o período ${startDate} a ${endDate}`);
        }
        catch (error) {
            this.logger.error(`Erro ao criar partição: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Cria partições para os próximos meses
     *
     * @param meses Número de meses para criar partições
     */
    async createPartitionsForNextMonths(meses = 12) {
        try {
            const hoje = new Date();
            for (let i = 0; i < meses; i++) {
                const dataInicio = new Date(hoje.getFullYear(), hoje.getMonth() + i, 1);
                const dataFim = new Date(hoje.getFullYear(), hoje.getMonth() + i + 1, 1);
                await this.createPartition(dataInicio, dataFim);
            }
            this.logger.log(`Partições criadas com sucesso para os próximos ${meses} meses`);
        }
        catch (error) {
            this.logger.error(`Erro ao criar partições: ${error.message}`, error.stack);
            throw error;
        }
    }
    /**
     * Arquiva logs antigos para tabelas de histórico
     *
     * @param mesesRetencao Número de meses para manter logs na tabela principal
     */
    async archiveOldLogs(mesesRetencao = 12) {
        try {
            const dataLimite = new Date();
            dataLimite.setMonth(dataLimite.getMonth() - mesesRetencao);
            // Mover logs antigos para tabela de histórico
            await this.repository.query(`
        INSERT INTO logs_auditoria_historico
        SELECT * FROM logs_auditoria
        WHERE created_at < '${dataLimite.toISOString()}'
      `);
            // Remover logs antigos da tabela principal
            await this.repository.query(`
        DELETE FROM logs_auditoria
        WHERE created_at < '${dataLimite.toISOString()}'
      `);
            this.logger.log(`Logs anteriores a ${dataLimite.toISOString()} arquivados com sucesso`);
        }
        catch (error) {
            this.logger.error(`Erro ao arquivar logs antigos: ${error.message}`, error.stack);
            throw error;
        }
    }
};
exports.LogAuditoriaRepository = LogAuditoriaRepository;
exports.LogAuditoriaRepository = LogAuditoriaRepository = LogAuditoriaRepository_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(log_auditoria_entity_1.LogAuditoria)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], LogAuditoriaRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,