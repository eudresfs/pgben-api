b4813c308a0d9ccb83d7c10f3d66e728
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolePermissionRepository = void 0;
const typeorm_1 = require("typeorm");
const common_1 = require("@nestjs/common");
const role_permission_entity_1 = require("../../entities/role-permission.entity");
const permission_entity_1 = require("../../entities/permission.entity");
const usuario_entity_1 = require("../../entities/usuario.entity");
/**
 * Repositório para a entidade RolePermission.
 *
 * Fornece métodos para manipulação de mapeamentos entre roles e permissões no banco de dados,
 * incluindo busca por role, permissão e operações de CRUD.
 */
let RolePermissionRepository = class RolePermissionRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(role_permission_entity_1.RolePermission, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca mapeamentos por ID de role com cache.
     *
     * @param roleId ID da role
     * @returns Lista de mapeamentos encontrados
     */
    async findByRoleId(roleId) {
        return this.find({
            where: { role_id: roleId },
            cache: {
                id: `role_mappings_${roleId}`,
                milliseconds: 300000, // 5 minutos
            },
        });
    }
    /**
     * Busca mapeamentos por múltiplos IDs de role.
     *
     * @param roleIds IDs das roles
     * @returns Lista de mapeamentos encontrados
     */
    async findByRoleIds(roleIds) {
        if (roleIds.length === 0)
            return [];
        return this.find({
            where: { role_id: (0, typeorm_1.In)(roleIds) },
            cache: {
                id: `role_mappings_multiple_${roleIds.sort().join('_')}`,
                milliseconds: 300000, // 5 minutos
            },
        });
    }
    /**
     * Busca mapeamentos por ID de permissão com cache.
     *
     * @param permissionId ID da permissão
     * @returns Lista de mapeamentos encontrados
     */
    async findByPermissionId(permissionId) {
        return this.find({
            where: { permissao_id: permissionId },
            cache: {
                id: `permission_mappings_${permissionId}`,
                milliseconds: 300000, // 5 minutos
            },
        });
    }
    /**
     * Busca mapeamento por ID de role e ID de permissão.
     *
     * @param roleId ID da role
     * @param permissionId ID da permissão
     * @returns O mapeamento encontrado ou null
     */
    async findByRoleAndPermission(roleId, permissionId) {
        return this.findOne({
            where: { role_id: roleId, permissao_id: permissionId },
            cache: {
                id: `role_permission_${roleId}_${permissionId}`,
                milliseconds: 300000, // 5 minutos
            },
        });
    }
    /**
     * Busca mapeamentos por ID de role com permissões relacionadas.
     *
     * @param roleId ID da role
     * @returns Lista de mapeamentos encontrados com permissões relacionadas
     */
    async findByRoleIdWithPermissions(roleId) {
        return this.createQueryBuilder('role_permissao')
            .leftJoinAndSelect('role_permissao.permissao', 'permissao')
            .where('role_permissao.role_id = :roleId', { roleId })
            .cache(`role_permissions_detailed_${roleId}`, 300000)
            .getMany();
    }
    /**
     * Cria um novo mapeamento entre role e permissão.
     *
     * @param data Dados do mapeamento a ser criado
     * @returns O mapeamento criado
     */
    async createMapping(data) {
        // Verifica se já existe o mapeamento
        if (data.role_id && data.permissao_id) {
            const existing = await this.findByRoleAndPermission(data.role_id, data.permissao_id);
            if (existing) {
                return existing;
            }
        }
        const mapping = this.create(data);
        const saved = await this.save(mapping);
        // Limpa cache relacionado
        if (data.role_id) {
            await this.clearCacheForRole(data.role_id);
        }
        if (data.permissao_id) {
            await this.clearCacheForPermission(data.permissao_id);
        }
        return saved;
    }
    /**
     * Cria múltiplos mapeamentos em batch
     *
     * @param mappings Lista de mapeamentos a serem criados
     * @returns Lista de mapeamentos criados
     */
    async createMultipleMappings(mappings) {
        if (mappings.length === 0)
            return [];
        const entities = mappings.map(mapping => this.create(mapping));
        const saved = await this.save(entities);
        // Limpa cache para todas as roles e permissões afetadas
        const uniqueRoleIds = [...new Set(mappings.map(m => m.role_id).filter(Boolean))];
        const uniquePermissionIds = [...new Set(mappings.map(m => m.permissao_id).filter(Boolean))];
        await Promise.all([
            ...uniqueRoleIds.map(roleId => this.clearCacheForRole(roleId)),
            ...uniquePermissionIds.map(permissionId => this.clearCacheForPermission(permissionId))
        ]);
        return saved;
    }
    /**
     * Remove um mapeamento entre role e permissão.
     *
     * @param id ID do mapeamento a ser removido
     * @returns true se o mapeamento foi removido, false caso contrário
     */
    async removeMapping(id) {
        // Busca o mapeamento antes de remover para limpar cache
        const mapping = await this.findOne({ where: { id } });
        const result = await this.delete(id);
        const removed = result.affected !== null && result.affected !== undefined && result.affected > 0;
        // Limpa cache se removido com sucesso
        if (removed && mapping) {
            await this.clearCacheForRole(mapping.role_id);
            await this.clearCacheForPermission(mapping.permissao_id);
        }
        return removed;
    }
    /**
     * Remove todos os mapeamentos de uma role.
     *
     * @param roleId ID da role
     * @returns true se os mapeamentos foram removidos, false caso contrário
     */
    async removeMappingsByRoleId(roleId) {
        // Busca os mapeamentos antes de remover para limpar cache das permissões
        const mappings = await this.findByRoleId(roleId);
        const result = await this.delete({ role_id: roleId });
        const removed = result.affected !== null && result.affected !== undefined && result.affected > 0;
        // Limpa cache se removido com sucesso
        if (removed) {
            await this.clearCacheForRole(roleId);
            // Limpa cache das permissões afetadas
            const uniquePermissionIds = [...new Set(mappings.map(m => m.permissao_id))];
            await Promise.all(uniquePermissionIds.map(permissionId => this.clearCacheForPermission(permissionId)));
        }
        return removed;
    }
    /**
     * Remove todos os mapeamentos de uma permissão.
     *
     * @param permissionId ID da permissão
     * @returns true se os mapeamentos foram removidos, false caso contrário
     */
    async removeMappingsByPermissionId(permissionId) {
        // Busca os mapeamentos antes de remover para limpar cache das roles
        const mappings = await this.findByPermissionId(permissionId);
        const result = await this.delete({ permissao_id: permissionId });
        const removed = result.affected !== null && result.affected !== undefined && result.affected > 0;
        // Limpa cache se removido com sucesso
        if (removed) {
            await this.clearCacheForPermission(permissionId);
            // Limpa cache das roles afetadas
            const uniqueRoleIds = [...new Set(mappings.map(m => m.role_id))];
            await Promise.all(uniqueRoleIds.map(roleId => this.clearCacheForRole(roleId)));
        }
        return removed;
    }
    /**
     * Busca permissões associadas às roles de um usuário.
     *
     * @param userId ID do usuário
     * @returns Lista de permissões associadas às roles do usuário
     */
    async findPermissionsByUserRoles(userId) {
        try {
            // Buscar o usuário com sua role
            const usuario = await this.dataSource.manager.findOne(usuario_entity_1.Usuario, {
                where: { id: userId },
                relations: ['role'],
                cache: {
                    id: `usuario_role_${userId}`,
                    milliseconds: 300000, // 5 minutos
                },
            });
            if (!usuario || !usuario.role) {
                return [];
            }
            // Buscar permissões da role do usuário
            const queryResult = await this.dataSource.manager.query(`
        SELECT DISTINCT p.*
        FROM permissao p
        INNER JOIN role_permissao rp ON p.id = rp.permissao_id
        WHERE rp.role_id = $1
        ORDER BY p.nome
      `, [usuario.role.id]);
            // Converter os resultados brutos para entidades Permission
            return queryResult.map(row => {
                const permission = new permission_entity_1.Permission();
                permission.id = row.id;
                permission.nome = row.nome;
                permission.descricao = row.descricao;
                permission.created_at = row.created_at;
                permission.updated_at = row.updated_at;
                return permission;
            });
        }
        catch (error) {
            console.error('Erro ao buscar permissões do usuário:', error);
            return [];
        }
    }
    /**
     * Busca permissões por múltiplas roles
     *
     * @param roleIds IDs das roles
     * @returns Lista de permissões únicas
     */
    async findPermissionsByRoleIds(roleIds) {
        if (roleIds.length === 0)
            return [];
        return this.createQueryBuilder('role_permissao')
            .leftJoinAndSelect('role_permissao.permissao', 'permissao')
            .where('role_permissao.role_id IN (:...roleIds)', { roleIds })
            .cache(`permissions_roles_${roleIds.sort().join('_')}`, 300000)
            .getMany()
            .then(mappings => {
            const uniquePermissions = new Map();
            mappings.forEach(mapping => {
                if (mapping.permissao && !uniquePermissions.has(mapping.permissao.id)) {
                    uniquePermissions.set(mapping.permissao.id, mapping.permissao);
                }
            });
            return Array.from(uniquePermissions.values());
        });
    }
    /**
     * Limpa cache relacionado a uma role
     */
    async clearCacheForRole(roleId) {
        try {
            // Limpa cache usando o query cache do TypeORM
            await this.dataSource.queryResultCache?.remove([`role_permissions_${roleId}`, `permissions_roles_${roleId}`]);
        }
        catch (error) {
            // Cache clearing é opcional, não deve quebrar a operação
            console.warn('Erro ao limpar cache da role:', error);
        }
    }
    /**
     * Limpa cache relacionado a uma permissão
     */
    async clearCacheForPermission(permissionId) {
        try {
            // Limpa cache usando o query cache do TypeORM
            await this.dataSource.queryResultCache?.remove([`permission_roles_${permissionId}`]);
        }
        catch (error) {
            // Cache clearing é opcional, não deve quebrar a operação
            console.warn('Erro ao limpar cache da permissão:', error);
        }
    }
};
exports.RolePermissionRepository = RolePermissionRepository;
exports.RolePermissionRepository = RolePermissionRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], RolePermissionRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,