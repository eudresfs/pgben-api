67317a0426f9369924ceb17849844bac
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PagamentoController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const pagamento_service_1 = require("../services/pagamento.service");
const pagamento_create_dto_1 = require("../dtos/pagamento-create.dto");
const pagamento_response_dto_1 = require("../dtos/pagamento-response.dto");
const status_pagamento_enum_1 = require("../../../enums/status-pagamento.enum");
const pagamento_access_guard_1 = require("../guards/pagamento-access.guard");
const pagamento_access_decorator_1 = require("../decorators/pagamento-access.decorator");
const common_2 = require("@nestjs/common");
/**
 * Controller para gerenciamento de pagamentos
 *
 * Este controller expõe endpoints para gerenciar o ciclo de vida de pagamentos
 * no sistema, incluindo criação, consulta, cancelamento e listagem.
 *
 * @author Equipe PGBen
 */
let PagamentoController = class PagamentoController {
    pagamentoService;
    constructor(pagamentoService) {
        this.pagamentoService = pagamentoService;
    }
    /**
     * Lista pagamentos com filtros e paginação
     */
    async findAll(status, unidadeId, dataInicio, dataFim, metodoPagamento, page, limit) {
        const pagamentos = await this.pagamentoService.findAll({
            status,
            unidadeId,
            dataInicio,
            dataFim,
            metodoPagamento,
            page: page ? Number(page) : 1,
            limit: limit ? Number(limit) : 10,
        });
        // Mapear para DTOs de resposta com dados sensíveis mascarados
        const responseDtos = pagamentos.items.map((pagamento) => {
            // Implementação do mapeamento para PagamentoResponseDto
            return {
                id: pagamento.id,
                solicitacaoId: pagamento.solicitacaoId,
                infoBancariaId: pagamento.infoBancariaId,
                valor: pagamento.valor,
                dataLiberacao: pagamento.dataLiberacao,
                status: pagamento.status,
                metodoPagamento: pagamento.metodoPagamento,
                responsavelLiberacao: {
                    id: 'placeholder', // seria obtido da entidade Usuario
                    nome: 'Técnico Responsável',
                    cargo: 'Técnico SEMTAS',
                },
                quantidadeComprovantes: 0, // seria calculado pela relação
                observacoes: pagamento.observacoes,
                createdAt: pagamento.created_at,
                updatedAt: pagamento.updated_at,
            };
        });
        return {
            items: responseDtos,
            total: pagamentos.total,
            page: pagamentos.page,
            limit: pagamentos.limit,
        };
    }
    /**
     * Retorna detalhes de um pagamento específico
     */
    async findOne(id) {
        const pagamento = await this.pagamentoService.findOneWithRelations(id);
        if (!pagamento) {
            throw new common_2.NotFoundException('Pagamento não encontrado');
        }
        // Mapear para DTO de resposta com dados sensíveis mascarados
        return {
            id: pagamento.id,
            solicitacaoId: pagamento.solicitacaoId,
            infoBancariaId: pagamento.infoBancariaId,
            valor: pagamento.valor,
            dataLiberacao: pagamento.dataLiberacao,
            status: pagamento.status,
            metodoPagamento: pagamento.metodoPagamento,
            responsavelLiberacao: {
                id: 'placeholder', // seria obtido da entidade Usuario
                nome: 'Técnico Responsável',
                cargo: 'Técnico SEMTAS',
            },
            quantidadeComprovantes: pagamento.comprovantes?.length || 0,
            confirmacaoRecebimento: pagamento.confirmacoes?.length
                ? {
                    id: pagamento.confirmacoes[0].id,
                    dataConfirmacao: pagamento.confirmacoes[0].dataConfirmacao,
                    metodoConfirmacao: pagamento.confirmacoes[0].metodoConfirmacao,
                    responsavel: {
                        id: 'placeholder',
                        nome: 'Responsável Confirmação',
                    },
                }
                : undefined,
            observacoes: pagamento.observacoes,
            createdAt: pagamento.created_at,
            updatedAt: pagamento.updated_at,
        };
    }
    /**
     * Registra a liberação de um pagamento para uma solicitação aprovada
     */
    async createPagamento(solicitacaoId, createDto) {
        // Usar o ID do usuário atual
        const usuarioId = 'placeholder'; // usuario.id;
        const pagamento = await this.pagamentoService.createPagamento(solicitacaoId, createDto, usuarioId);
        // Mapear para DTO de resposta
        return {
            id: pagamento.id,
            solicitacaoId: pagamento.solicitacaoId,
            infoBancariaId: pagamento.infoBancariaId,
            valor: pagamento.valor,
            dataLiberacao: pagamento.dataLiberacao,
            status: pagamento.status,
            metodoPagamento: pagamento.metodoPagamento,
            responsavelLiberacao: {
                id: usuarioId,
                nome: 'Técnico Responsável',
                cargo: 'Técnico SEMTAS',
            },
            quantidadeComprovantes: 0,
            observacoes: pagamento.observacoes,
            createdAt: pagamento.created_at,
            updatedAt: pagamento.updated_at,
        };
    }
    /**
     * Cancela um pagamento existente
     */
    async cancelPagamento(id, cancelDto) {
        // Usar o ID do usuário atual
        const usuarioId = 'placeholder'; // usuario.id;
        const pagamento = await this.pagamentoService.cancelarPagamento(id, usuarioId, cancelDto.motivoCancelamento);
        // Mapear para DTO de resposta
        return {
            id: pagamento.id,
            solicitacaoId: pagamento.solicitacaoId,
            infoBancariaId: pagamento.infoBancariaId,
            valor: pagamento.valor,
            dataLiberacao: pagamento.dataLiberacao,
            status: pagamento.status,
            metodoPagamento: pagamento.metodoPagamento,
            responsavelLiberacao: {
                id: 'placeholder',
                nome: 'Técnico Responsável',
                cargo: 'Técnico SEMTAS',
            },
            quantidadeComprovantes: 0,
            observacoes: pagamento.observacoes,
            createdAt: pagamento.created_at,
            updatedAt: pagamento.updated_at,
        };
    }
    /**
     * Lista pagamentos pendentes (liberados mas não confirmados)
     */
    async findPendentes(unidadeId, tipoBeneficioId, page, limit) {
        const pagamentos = await this.pagamentoService.findPendentes({
            unidadeId,
            tipoBeneficioId,
            page: page ? Number(page) : 1,
            limit: limit ? Number(limit) : 10,
        });
        // Mapear para DTOs de resposta
        const responseDtos = pagamentos.items.map((pagamento) => {
            return {
                id: pagamento.id,
                solicitacaoId: pagamento.solicitacaoId,
                infoBancariaId: pagamento.infoBancariaId,
                valor: pagamento.valor,
                dataLiberacao: pagamento.dataLiberacao,
                status: pagamento.status,
                metodoPagamento: pagamento.metodoPagamento,
                responsavelLiberacao: {
                    id: 'placeholder',
                    nome: 'Técnico Responsável',
                    cargo: 'Técnico SEMTAS',
                },
                quantidadeComprovantes: 0,
                observacoes: pagamento.observacoes,
                createdAt: pagamento.created_at,
                updatedAt: pagamento.updated_at,
            };
        });
        return {
            items: responseDtos,
            total: pagamentos.total,
            page: pagamentos.page,
            limit: pagamentos.limit,
        };
    }
    /**
     * Obtém informações bancárias/PIX cadastradas para o beneficiário
     */
    async getInfoBancarias(beneficiarioId) {
        // Esta implementação seria integrada com o serviço de cidadão/beneficiário
        // const infoBancarias = await this.cidadaoService.getInfoBancarias(beneficiarioId);
        // Retorno mockado para demonstração
        return [
            {
                id: 'placeholder-id-1',
                banco: 'Banco do Brasil',
                agencia: '1234',
                conta: '12345-6',
                tipo_conta: 'Corrente',
                created_at: new Date().toISOString(),
            },
            {
                id: 'placeholder-id-2',
                pix_tipo: 'email',
                pix_chave: 'b****@****.com', // mascarado para segurança
                created_at: new Date().toISOString(),
            },
        ];
    }
};
exports.PagamentoController = PagamentoController;
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Lista pagamentos com filtros' }),
    (0, swagger_1.ApiQuery)({ name: 'status', required: false, enum: status_pagamento_enum_1.StatusPagamentoEnum }),
    (0, swagger_1.ApiQuery)({ name: 'unidadeId', required: false }),
    (0, swagger_1.ApiQuery)({ name: 'dataInicio', required: false, type: Date }),
    (0, swagger_1.ApiQuery)({ name: 'dataFim', required: false, type: Date }),
    (0, swagger_1.ApiQuery)({ name: 'metodoPagamento', required: false }),
    (0, swagger_1.ApiQuery)({ name: 'page', required: false, type: Number }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, type: Number }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista paginada de pagamentos',
        schema: {
            type: 'object',
            properties: {
                items: {
                    type: 'array',
                    items: {
                        type: 'object',
                        $ref: '#/components/schemas/PagamentoResponseDto',
                    },
                },
                total: { type: 'number' },
                page: { type: 'number' },
                limit: { type: 'number' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    (0, common_1.UseGuards)(pagamento_access_guard_1.PagamentoAccessGuard),
    (0, pagamento_access_decorator_1.OperadorOuAdmin)(),
    (0, pagamento_access_decorator_1.VerificarUnidade)(false),
    __param(0, (0, common_1.Query)('status')),
    __param(1, (0, common_1.Query)('unidadeId')),
    __param(2, (0, common_1.Query)('dataInicio')),
    __param(3, (0, common_1.Query)('dataFim')),
    __param(4, (0, common_1.Query)('metodoPagamento')),
    __param(5, (0, common_1.Query)('page')),
    __param(6, (0, common_1.Query)('limit')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof status_pagamento_enum_1.StatusPagamentoEnum !== "undefined" && status_pagamento_enum_1.StatusPagamentoEnum) === "function" ? _b : Object, String, typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object, typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object, String, Number, Number]),
    __metadata("design:returntype", Promise)
], PagamentoController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Retorna detalhes de um pagamento específico' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Detalhes do pagamento',
        type: pagamento_response_dto_1.PagamentoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Pagamento não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    (0, common_1.UseGuards)(pagamento_access_guard_1.PagamentoAccessGuard),
    (0, pagamento_access_decorator_1.OperadorOuAdmin)(),
    (0, pagamento_access_decorator_1.VerificarUnidade)(true),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PagamentoController.prototype, "findOne", null);
__decorate([
    (0, common_1.Post)('liberar/:solicitacaoId'),
    (0, swagger_1.ApiOperation)({
        summary: 'Registra a liberação de um pagamento para uma solicitação aprovada',
    }),
    (0, swagger_1.ApiParam)({
        name: 'solicitacaoId',
        type: 'string',
        description: 'ID da solicitação',
    }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Pagamento registrado com sucesso',
        type: pagamento_response_dto_1.PagamentoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou solicitação não aprovada',
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    (0, common_1.UseGuards)(pagamento_access_guard_1.PagamentoAccessGuard),
    (0, pagamento_access_decorator_1.OperadorOuAdmin)(),
    (0, pagamento_access_decorator_1.VerificarUnidade)(true),
    __param(0, (0, common_1.Param)('solicitacaoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_e = typeof pagamento_create_dto_1.PagamentoCreateDto !== "undefined" && pagamento_create_dto_1.PagamentoCreateDto) === "function" ? _e : Object]),
    __metadata("design:returntype", Promise)
], PagamentoController.prototype, "createPagamento", null);
__decorate([
    (0, common_1.Patch)(':id/cancelar'),
    (0, swagger_1.ApiOperation)({ summary: 'Cancela um pagamento existente' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Pagamento cancelado com sucesso',
        type: pagamento_response_dto_1.PagamentoResponseDto,
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Pagamento não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 409, description: 'Pagamento não pode ser cancelado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    (0, common_1.UseGuards)(pagamento_access_guard_1.PagamentoAccessGuard),
    (0, pagamento_access_decorator_1.ApenasAdmin)(),
    (0, pagamento_access_decorator_1.VerificarUnidade)(true),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", Promise)
], PagamentoController.prototype, "cancelPagamento", null);
__decorate([
    (0, common_1.Get)('pendentes'),
    (0, swagger_1.ApiOperation)({
        summary: 'Lista pagamentos pendentes (liberados mas não confirmados)',
    }),
    (0, swagger_1.ApiQuery)({ name: 'unidadeId', required: false }),
    (0, swagger_1.ApiQuery)({ name: 'tipoBeneficioId', required: false }),
    (0, swagger_1.ApiQuery)({ name: 'page', required: false, type: Number }),
    (0, swagger_1.ApiQuery)({ name: 'limit', required: false, type: Number }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de pagamentos pendentes',
        schema: {
            type: 'object',
            properties: {
                items: {
                    type: 'array',
                    items: {
                        type: 'object',
                        $ref: '#/components/schemas/PagamentoResponseDto',
                    },
                },
                total: { type: 'number' },
                page: { type: 'number' },
                limit: { type: 'number' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    (0, common_1.UseGuards)(pagamento_access_guard_1.PagamentoAccessGuard),
    (0, pagamento_access_decorator_1.OperadorOuAdmin)(),
    (0, pagamento_access_decorator_1.VerificarUnidade)(false),
    __param(0, (0, common_1.Query)('unidadeId')),
    __param(1, (0, common_1.Query)('tipoBeneficioId')),
    __param(2, (0, common_1.Query)('page')),
    __param(3, (0, common_1.Query)('limit')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String, Number, Number]),
    __metadata("design:returntype", Promise)
], PagamentoController.prototype, "findPendentes", null);
__decorate([
    (0, common_1.Get)('info-bancarias/:beneficiarioId'),
    (0, swagger_1.ApiOperation)({
        summary: 'Obtém informações bancárias/PIX cadastradas para o beneficiário',
    }),
    (0, swagger_1.ApiParam)({
        name: 'beneficiarioId',
        type: 'string',
        description: 'ID do beneficiário',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de informações bancárias',
        schema: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: { type: 'string' },
                    banco: { type: 'string' },
                    agencia: { type: 'string' },
                    conta: { type: 'string' },
                    tipo_conta: { type: 'string' },
                    pix_tipo: { type: 'string' },
                    pix_chave: { type: 'string' },
                    created_at: { type: 'string', format: 'date-time' },
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Beneficiário não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' }),
    (0, common_1.UseGuards)(pagamento_access_guard_1.PagamentoAccessGuard),
    (0, pagamento_access_decorator_1.OperadorOuAdmin)(),
    (0, pagamento_access_decorator_1.VerificarUnidade)(true),
    __param(0, (0, common_1.Param)('beneficiarioId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], PagamentoController.prototype, "getInfoBancarias", null);
exports.PagamentoController = PagamentoController = __decorate([
    (0, swagger_1.ApiTags)('Pagamentos'),
    (0, common_1.Controller)('pagamentos'),
    __metadata("design:paramtypes", [typeof (_a = typeof pagamento_service_1.PagamentoService !== "undefined" && pagamento_service_1.PagamentoService) === "function" ? _a : Object])
], PagamentoController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,