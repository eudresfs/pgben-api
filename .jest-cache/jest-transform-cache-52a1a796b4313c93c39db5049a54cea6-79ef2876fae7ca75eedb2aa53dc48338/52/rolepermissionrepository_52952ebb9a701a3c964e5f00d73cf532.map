{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\role-permission.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\repositories\\role-permission.repository.ts"],"sourcesContent":["import { Repository, DataSource, In } from 'typeorm';\nimport { Injectable } from '@nestjs/common';\nimport { RolePermission } from '../../entities/role-permission.entity';\nimport { Permission } from '../../entities/permission.entity';\nimport { Usuario } from '../../entities/usuario.entity';\n\n/**\n * Repositório para a entidade RolePermission.\n * \n * Fornece métodos para manipulação de mapeamentos entre roles e permissões no banco de dados,\n * incluindo busca por role, permissão e operações de CRUD.\n */\n@Injectable()\nexport class RolePermissionRepository extends Repository<RolePermission> {\n  constructor(private dataSource: DataSource) {\n    super(RolePermission, dataSource.createEntityManager());\n  }\n\n  /**\n   * Busca mapeamentos por ID de role com cache.\n   * \n   * @param roleId ID da role\n   * @returns Lista de mapeamentos encontrados\n   */\n  async findByRoleId(roleId: string): Promise<RolePermission[]> {\n    return this.find({ \n      where: { role_id: roleId },\n      cache: {\n        id: `role_mappings_${roleId}`,\n        milliseconds: 300000, // 5 minutos\n      },\n    });\n  }\n\n  /**\n   * Busca mapeamentos por múltiplos IDs de role.\n   * \n   * @param roleIds IDs das roles\n   * @returns Lista de mapeamentos encontrados\n   */\n  async findByRoleIds(roleIds: string[]): Promise<RolePermission[]> {\n    if (roleIds.length === 0) return [];\n    \n    return this.find({ \n      where: { role_id: In(roleIds) },\n      cache: {\n        id: `role_mappings_multiple_${roleIds.sort().join('_')}`,\n        milliseconds: 300000, // 5 minutos\n      },\n    });\n  }\n\n  /**\n   * Busca mapeamentos por ID de permissão com cache.\n   * \n   * @param permissionId ID da permissão\n   * @returns Lista de mapeamentos encontrados\n   */\n  async findByPermissionId(permissionId: string): Promise<RolePermission[]> {\n    return this.find({ \n      where: { permissao_id: permissionId },\n      cache: {\n        id: `permission_mappings_${permissionId}`,\n        milliseconds: 300000, // 5 minutos\n      },\n    });\n  }\n\n  /**\n   * Busca mapeamento por ID de role e ID de permissão.\n   * \n   * @param roleId ID da role\n   * @param permissionId ID da permissão\n   * @returns O mapeamento encontrado ou null\n   */\n  async findByRoleAndPermission(roleId: string, permissionId: string): Promise<RolePermission | null> {\n    return this.findOne({ \n      where: { role_id: roleId, permissao_id: permissionId },\n      cache: {\n        id: `role_permission_${roleId}_${permissionId}`,\n        milliseconds: 300000, // 5 minutos\n      },\n    });\n  }\n\n  /**\n   * Busca mapeamentos por ID de role com permissões relacionadas.\n   * \n   * @param roleId ID da role\n   * @returns Lista de mapeamentos encontrados com permissões relacionadas\n   */\n  async findByRoleIdWithPermissions(roleId: string): Promise<RolePermission[]> {\n    return this.createQueryBuilder('role_permissao')\n      .leftJoinAndSelect('role_permissao.permissao', 'permissao')\n      .where('role_permissao.role_id = :roleId', { roleId })\n      .cache(`role_permissions_detailed_${roleId}`, 300000)\n      .getMany();\n  }\n\n  /**\n   * Cria um novo mapeamento entre role e permissão.\n   * \n   * @param data Dados do mapeamento a ser criado\n   * @returns O mapeamento criado\n   */\n  async createMapping(data: Partial<RolePermission>): Promise<RolePermission> {\n    // Verifica se já existe o mapeamento\n    if (data.role_id && data.permissao_id) {\n      const existing = await this.findByRoleAndPermission(data.role_id, data.permissao_id);\n      if (existing) {\n        return existing;\n      }\n    }\n\n    const mapping = this.create(data);\n    const saved = await this.save(mapping);\n    \n    // Limpa cache relacionado\n    if (data.role_id) {\n      await this.clearCacheForRole(data.role_id);\n    }\n    if (data.permissao_id) {\n      await this.clearCacheForPermission(data.permissao_id);\n    }\n    \n    return saved;\n  }\n\n  /**\n   * Cria múltiplos mapeamentos em batch\n   * \n   * @param mappings Lista de mapeamentos a serem criados\n   * @returns Lista de mapeamentos criados\n   */\n  async createMultipleMappings(mappings: Partial<RolePermission>[]): Promise<RolePermission[]> {\n    if (mappings.length === 0) return [];\n\n    const entities = mappings.map(mapping => this.create(mapping));\n    const saved = await this.save(entities);\n    \n    // Limpa cache para todas as roles e permissões afetadas\n    const uniqueRoleIds = [...new Set(mappings.map(m => m.role_id).filter(Boolean))];\n    const uniquePermissionIds = [...new Set(mappings.map(m => m.permissao_id).filter(Boolean))];\n    \n    await Promise.all([\n      ...uniqueRoleIds.map(roleId => this.clearCacheForRole(roleId!)),\n      ...uniquePermissionIds.map(permissionId => this.clearCacheForPermission(permissionId!))\n    ]);\n    \n    return saved;\n  }\n\n  /**\n   * Remove um mapeamento entre role e permissão.\n   * \n   * @param id ID do mapeamento a ser removido\n   * @returns true se o mapeamento foi removido, false caso contrário\n   */\n  async removeMapping(id: string): Promise<boolean> {\n    // Busca o mapeamento antes de remover para limpar cache\n    const mapping = await this.findOne({ where: { id } });\n    \n    const result = await this.delete(id);\n    const removed = result.affected !== null && result.affected !== undefined && result.affected > 0;\n    \n    // Limpa cache se removido com sucesso\n    if (removed && mapping) {\n      await this.clearCacheForRole(mapping.role_id);\n      await this.clearCacheForPermission(mapping.permissao_id);\n    }\n    \n    return removed;\n  }\n\n  /**\n   * Remove todos os mapeamentos de uma role.\n   * \n   * @param roleId ID da role\n   * @returns true se os mapeamentos foram removidos, false caso contrário\n   */\n  async removeMappingsByRoleId(roleId: string): Promise<boolean> {\n    // Busca os mapeamentos antes de remover para limpar cache das permissões\n    const mappings = await this.findByRoleId(roleId);\n    \n    const result = await this.delete({ role_id: roleId });\n    const removed = result.affected !== null && result.affected !== undefined && result.affected > 0;\n    \n    // Limpa cache se removido com sucesso\n    if (removed) {\n      await this.clearCacheForRole(roleId);\n      // Limpa cache das permissões afetadas\n      const uniquePermissionIds = [...new Set(mappings.map(m => m.permissao_id))];\n      await Promise.all(uniquePermissionIds.map(permissionId => this.clearCacheForPermission(permissionId)));\n    }\n    \n    return removed;\n  }\n\n  /**\n   * Remove todos os mapeamentos de uma permissão.\n   * \n   * @param permissionId ID da permissão\n   * @returns true se os mapeamentos foram removidos, false caso contrário\n   */\n  async removeMappingsByPermissionId(permissionId: string): Promise<boolean> {\n    // Busca os mapeamentos antes de remover para limpar cache das roles\n    const mappings = await this.findByPermissionId(permissionId);\n    \n    const result = await this.delete({ permissao_id: permissionId });\n    const removed = result.affected !== null && result.affected !== undefined && result.affected > 0;\n    \n    // Limpa cache se removido com sucesso\n    if (removed) {\n      await this.clearCacheForPermission(permissionId);\n      // Limpa cache das roles afetadas\n      const uniqueRoleIds = [...new Set(mappings.map(m => m.role_id))];\n      await Promise.all(uniqueRoleIds.map(roleId => this.clearCacheForRole(roleId)));\n    }\n    \n    return removed;\n  }\n\n  /**\n   * Busca permissões associadas às roles de um usuário.\n   * \n   * @param userId ID do usuário\n   * @returns Lista de permissões associadas às roles do usuário\n   */\n  async findPermissionsByUserRoles(userId: string): Promise<Permission[]> {\n    try {\n      // Buscar o usuário com sua role\n      const usuario = await this.dataSource.manager.findOne(Usuario, {\n        where: { id: userId },\n        relations: ['role'],\n        cache: {\n          id: `usuario_role_${userId}`,\n          milliseconds: 300000, // 5 minutos\n        },\n      });\n\n      if (!usuario || !usuario.role) {\n        return [];\n      }\n\n      // Buscar permissões da role do usuário\n      const queryResult = await this.dataSource.manager.query(`\n        SELECT DISTINCT p.*\n        FROM permissao p\n        INNER JOIN role_permissao rp ON p.id = rp.permissao_id\n        WHERE rp.role_id = $1\n        ORDER BY p.nome\n      `, [usuario.role.id]);\n      \n      // Converter os resultados brutos para entidades Permission\n      return queryResult.map(row => {\n        const permission = new Permission();\n        permission.id = row.id;\n        permission.nome = row.nome;\n        permission.descricao = row.descricao;\n        permission.created_at = row.created_at;\n        permission.updated_at = row.updated_at;\n        return permission;\n      });\n    } catch (error) {\n      console.error('Erro ao buscar permissões do usuário:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Busca permissões por múltiplas roles\n   * \n   * @param roleIds IDs das roles\n   * @returns Lista de permissões únicas\n   */\n  async findPermissionsByRoleIds(roleIds: string[]): Promise<Permission[]> {\n    if (roleIds.length === 0) return [];\n\n    return this.createQueryBuilder('role_permissao')\n      .leftJoinAndSelect('role_permissao.permissao', 'permissao')\n      .where('role_permissao.role_id IN (:...roleIds)', { roleIds })\n      .cache(`permissions_roles_${roleIds.sort().join('_')}`, 300000)\n      .getMany()\n      .then(mappings => {\n        const uniquePermissions = new Map<string, Permission>();\n        mappings.forEach(mapping => {\n          if (mapping.permissao && !uniquePermissions.has(mapping.permissao.id)) {\n            uniquePermissions.set(mapping.permissao.id, mapping.permissao);\n          }\n        });\n        return Array.from(uniquePermissions.values());\n      });\n  }\n\n  /**\n   * Limpa cache relacionado a uma role\n   */\n  private async clearCacheForRole(roleId: string): Promise<void> {\n    try {\n      // Limpa cache usando o query cache do TypeORM\n      await this.dataSource.queryResultCache?.remove([`role_permissions_${roleId}`, `permissions_roles_${roleId}`]);\n    } catch (error) {\n      // Cache clearing é opcional, não deve quebrar a operação\n      console.warn('Erro ao limpar cache da role:', error);\n    }\n  }\n\n  /**\n   * Limpa cache relacionado a uma permissão\n   */\n  private async clearCacheForPermission(permissionId: string): Promise<void> {\n    try {\n      // Limpa cache usando o query cache do TypeORM\n      await this.dataSource.queryResultCache?.remove([`permission_roles_${permissionId}`]);\n    } catch (error) {\n      // Cache clearing é opcional, não deve quebrar a operação\n      console.warn('Erro ao limpar cache da permissão:', error);\n    }\n  }\n}\n"],"version":3}