05edfa6723a6ea30ff18ea48f38011e6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPermissionRepository = void 0;
const typeorm_1 = require("typeorm");
const common_1 = require("@nestjs/common");
const user_permission_entity_1 = require("../../entities/user-permission.entity");
/**
 * Repositório para a entidade UserPermission.
 *
 * Fornece métodos para manipulação de permissões atribuídas diretamente a usuários no banco de dados,
 * incluindo busca por usuário, permissão, escopo e operações de CRUD.
 */
let UserPermissionRepository = class UserPermissionRepository extends typeorm_1.Repository {
    dataSource;
    constructor(dataSource) {
        super(user_permission_entity_1.UserPermission, dataSource.createEntityManager());
        this.dataSource = dataSource;
    }
    /**
     * Busca permissões por ID de usuário.
     *
     * @param userId ID do usuário
     * @returns Lista de permissões encontradas
     */
    async findByUserId(userId) {
        return this.find({ where: { usuario_id: userId } });
    }
    /**
     * Busca permissões por ID de usuário com permissões relacionadas.
     *
     * @param userId ID do usuário
     * @returns Lista de permissões encontradas com permissões relacionadas
     */
    async findByUserIdWithPermissions(userId) {
        return this.createQueryBuilder('permissao_usuario')
            .leftJoinAndSelect('permissao_usuario.permissao', 'permissao')
            .where('permissao_usuario.usuario_id = :userId', { userId })
            .getMany();
    }
    /**
     * Busca permissões por ID de permissão.
     *
     * @param permissionId ID da permissão
     * @returns Lista de permissões encontradas
     */
    async findByPermissionId(permissionId) {
        return this.find({ where: { permissao_id: permissionId } });
    }
    /**
     * Busca permissão por ID de usuário, ID de permissão, tipo de escopo e ID de escopo.
     *
     * @param userId ID do usuário
     * @param permissionId ID da permissão
     * @param scopeType Tipo de escopo
     * @param scopeId ID do escopo (opcional)
     * @returns A permissão encontrada ou null
     */
    async findByUserAndPermission(userId, permissionId, scopeType, scopeId) {
        return this.findOne({
            where: {
                usuario_id: userId,
                permissao_id: permissionId,
                tipo_escopo: scopeType,
                ...(scopeId && { escopo_id: scopeId }),
            },
        });
    }
    /**
     * Busca permissões por ID de usuário e tipo de escopo.
     *
     * @param userId ID do usuário
     * @param scopeType Tipo de escopo
     * @returns Lista de permissões encontradas
     */
    async findByUserIdAndScopeType(userId, scopeType) {
        return this.find({ where: { usuario_id: userId, tipo_escopo: scopeType } });
    }
    /**
     * Busca permissões por ID de usuário, tipo de escopo e ID de escopo.
     *
     * @param userId ID do usuário
     * @param scopeType Tipo de escopo
     * @param scopeId ID do escopo
     * @returns Lista de permissões encontradas
     */
    async findByUserIdAndScope(userId, scopeType, scopeId) {
        return this.find({
            where: { usuario_id: userId, tipo_escopo: scopeType, escopo_id: scopeId },
        });
    }
    /**
     * Busca permissões válidas (não expiradas) por ID de usuário.
     *
     * @param userId ID do usuário
     * @returns Lista de permissões válidas encontradas
     */
    async findValidByUserId(userId) {
        const now = new Date();
        return this.createQueryBuilder('permissao_usuario')
            .leftJoinAndSelect('permissao_usuario.permissao', 'permissao')
            .where('permissao_usuario.usuario_id = :userId', { userId })
            .andWhere('(permissao_usuario.valido_ate IS NULL OR permissao_usuario.valido_ate > :now)', { now })
            .getMany();
    }
    /**
     * Cria uma nova permissão para um usuário.
     *
     * @param data Dados da permissão a ser criada
     * @returns A permissão criada
     */
    async createUserPermission(data) {
        const userPermission = this.create(data);
        return this.save(userPermission);
    }
    /**
     * Atualiza uma permissão existente de um usuário.
     *
     * @param id ID da permissão a ser atualizada
     * @param data Dados atualizados da permissão
     * @returns A permissão atualizada
     */
    async updateUserPermission(id, data) {
        await this.update(id, data);
        return this.findOneBy({ id });
    }
    /**
     * Remove uma permissão de um usuário.
     *
     * @param id ID da permissão a ser removida
     * @returns true se a permissão foi removida, false caso contrário
     */
    async removeUserPermission(id) {
        const result = await this.delete(id);
        return (result.affected !== null &&
            result.affected !== undefined &&
            result.affected > 0);
    }
    /**
     * Remove todas as permissões de um usuário.
     *
     * @param userId ID do usuário
     * @returns true se as permissões foram removidas, false caso contrário
     */
    async removeUserPermissionsByUserId(userId) {
        const result = await this.delete({ usuario_id: userId });
        return (result.affected !== null &&
            result.affected !== undefined &&
            result.affected > 0);
    }
    /**
     * Remove todas as permissões de um tipo específico.
     *
     * @param permissionId ID da permissão
     * @returns true se as permissões foram removidas, false caso contrário
     */
    async removeUserPermissionsByPermissionId(permissionId) {
        const result = await this.delete({ permissao_id: permissionId });
        return (result.affected !== null &&
            result.affected !== undefined &&
            result.affected > 0);
    }
    /**
     * Remove todas as permissões de um escopo específico.
     *
     * @param scopeType Tipo de escopo
     * @param scopeId ID do escopo
     * @returns true se as permissões foram removidas, false caso contrário
     */
    async removeUserPermissionsByScope(scopeType, scopeId) {
        const result = await this.delete({
            tipo_escopo: scopeType,
            escopo_id: scopeId,
        });
        return (result.affected !== null &&
            result.affected !== undefined &&
            result.affected > 0);
    }
};
exports.UserPermissionRepository = UserPermissionRepository;
exports.UserPermissionRepository = UserPermissionRepository = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], UserPermissionRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,