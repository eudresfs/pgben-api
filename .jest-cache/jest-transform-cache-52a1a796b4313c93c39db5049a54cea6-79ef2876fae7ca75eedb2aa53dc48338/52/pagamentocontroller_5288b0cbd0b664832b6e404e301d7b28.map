{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\controllers\\pagamento.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\controllers\\pagamento.controller.ts"],"sourcesContent":["import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { PagamentoService } from '../services/pagamento.service';\nimport { PagamentoCreateDto } from '../dtos/pagamento-create.dto';\nimport { PagamentoResponseDto } from '../dtos/pagamento-response.dto';\nimport { StatusPagamentoEnum } from '../../../enums/status-pagamento.enum';\nimport { PagamentoAccessGuard } from '../guards/pagamento-access.guard';\nimport {\n  ApenasAdmin,\n  AuditorOuAdmin,\n  OperadorOuAdmin,\n  VerificarUnidade,\n} from '../decorators/pagamento-access.decorator';\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Controller para gerenciamento de pagamentos\n *\n * Este controller expõe endpoints para gerenciar o ciclo de vida de pagamentos\n * no sistema, incluindo criação, consulta, cancelamento e listagem.\n *\n * @author Equipe PGBen\n */\n@ApiTags('Pagamentos')\n@Controller('pagamentos')\nexport class PagamentoController {\n  constructor(\n    private readonly pagamentoService: PagamentoService,\n    // Outros serviços necessários serão injetados aqui\n  ) {}\n\n  /**\n   * Lista pagamentos com filtros e paginação\n   */\n  @Get()\n  @ApiOperation({ summary: 'Lista pagamentos com filtros' })\n  @ApiQuery({ name: 'status', required: false, enum: StatusPagamentoEnum })\n  @ApiQuery({ name: 'unidadeId', required: false })\n  @ApiQuery({ name: 'dataInicio', required: false, type: Date })\n  @ApiQuery({ name: 'dataFim', required: false, type: Date })\n  @ApiQuery({ name: 'metodoPagamento', required: false })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista paginada de pagamentos',\n    schema: {\n      type: 'object',\n      properties: {\n        items: {\n          type: 'array',\n          items: {\n            type: 'object',\n            $ref: '#/components/schemas/PagamentoResponseDto',\n          },\n        },\n        total: { type: 'number' },\n        page: { type: 'number' },\n        limit: { type: 'number' },\n      },\n    },\n  })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  @UseGuards(PagamentoAccessGuard)\n  @OperadorOuAdmin()\n  @VerificarUnidade(false)\n  async findAll(\n    @Query('status') status?: StatusPagamentoEnum,\n    @Query('unidadeId') unidadeId?: string,\n    @Query('dataInicio') dataInicio?: Date,\n    @Query('dataFim') dataFim?: Date,\n    @Query('metodoPagamento') metodoPagamento?: string,\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n  ) {\n    const pagamentos = await this.pagamentoService.findAll({\n      status,\n      unidadeId,\n      dataInicio,\n      dataFim,\n      metodoPagamento,\n      page: page ? Number(page) : 1,\n      limit: limit ? Number(limit) : 10,\n    });\n\n    // Mapear para DTOs de resposta com dados sensíveis mascarados\n    const responseDtos = pagamentos.items.map((pagamento) => {\n      // Implementação do mapeamento para PagamentoResponseDto\n      return {\n        id: pagamento.id,\n        solicitacaoId: pagamento.solicitacaoId,\n        infoBancariaId: pagamento.infoBancariaId,\n        valor: pagamento.valor,\n        dataLiberacao: pagamento.dataLiberacao,\n        status: pagamento.status,\n        metodoPagamento: pagamento.metodoPagamento,\n        responsavelLiberacao: {\n          id: 'placeholder', // seria obtido da entidade Usuario\n          nome: 'Técnico Responsável',\n          cargo: 'Técnico SEMTAS',\n        },\n        quantidadeComprovantes: 0, // seria calculado pela relação\n        observacoes: pagamento.observacoes,\n        createdAt: pagamento.created_at,\n        updatedAt: pagamento.updated_at,\n      } as PagamentoResponseDto;\n    });\n\n    return {\n      items: responseDtos,\n      total: pagamentos.total,\n      page: pagamentos.page,\n      limit: pagamentos.limit,\n    };\n  }\n\n  /**\n   * Retorna detalhes de um pagamento específico\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Retorna detalhes de um pagamento específico' })\n  @ApiParam({ name: 'id', type: 'string', description: 'ID do pagamento' })\n  @ApiResponse({\n    status: 200,\n    description: 'Detalhes do pagamento',\n    type: PagamentoResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Pagamento não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  @UseGuards(PagamentoAccessGuard)\n  @OperadorOuAdmin()\n  @VerificarUnidade(true)\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    const pagamento = await this.pagamentoService.findOneWithRelations(id);\n\n    if (!pagamento) {\n      throw new NotFoundException('Pagamento não encontrado');\n    }\n\n    // Mapear para DTO de resposta com dados sensíveis mascarados\n    return {\n      id: pagamento.id,\n      solicitacaoId: pagamento.solicitacaoId,\n      infoBancariaId: pagamento.infoBancariaId,\n      valor: pagamento.valor,\n      dataLiberacao: pagamento.dataLiberacao,\n      status: pagamento.status,\n      metodoPagamento: pagamento.metodoPagamento,\n      responsavelLiberacao: {\n        id: 'placeholder', // seria obtido da entidade Usuario\n        nome: 'Técnico Responsável',\n        cargo: 'Técnico SEMTAS',\n      },\n      quantidadeComprovantes: pagamento.comprovantes?.length || 0,\n      confirmacaoRecebimento: pagamento.confirmacoes?.length\n        ? {\n            id: pagamento.confirmacoes[0].id,\n            dataConfirmacao: pagamento.confirmacoes[0].dataConfirmacao,\n            metodoConfirmacao: pagamento.confirmacoes[0].metodoConfirmacao,\n            responsavel: {\n              id: 'placeholder',\n              nome: 'Responsável Confirmação',\n            },\n          }\n        : undefined,\n      observacoes: pagamento.observacoes,\n      createdAt: pagamento.created_at,\n      updatedAt: pagamento.updated_at,\n    } as PagamentoResponseDto;\n  }\n\n  /**\n   * Registra a liberação de um pagamento para uma solicitação aprovada\n   */\n  @Post('liberar/:solicitacaoId')\n  @ApiOperation({\n    summary:\n      'Registra a liberação de um pagamento para uma solicitação aprovada',\n  })\n  @ApiParam({\n    name: 'solicitacaoId',\n    type: 'string',\n    description: 'ID da solicitação',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Pagamento registrado com sucesso',\n    type: PagamentoResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou solicitação não aprovada',\n  })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  @UseGuards(PagamentoAccessGuard)\n  @OperadorOuAdmin()\n  @VerificarUnidade(true)\n  async createPagamento(\n    @Param('solicitacaoId', ParseUUIDPipe) solicitacaoId: string,\n    @Body() createDto: PagamentoCreateDto,\n    // @CurrentUser() usuario: Usuario\n  ) {\n    // Usar o ID do usuário atual\n    const usuarioId = 'placeholder'; // usuario.id;\n\n    const pagamento = await this.pagamentoService.createPagamento(\n      solicitacaoId,\n      createDto,\n      usuarioId,\n    );\n\n    // Mapear para DTO de resposta\n    return {\n      id: pagamento.id,\n      solicitacaoId: pagamento.solicitacaoId,\n      infoBancariaId: pagamento.infoBancariaId,\n      valor: pagamento.valor,\n      dataLiberacao: pagamento.dataLiberacao,\n      status: pagamento.status,\n      metodoPagamento: pagamento.metodoPagamento,\n      responsavelLiberacao: {\n        id: usuarioId,\n        nome: 'Técnico Responsável',\n        cargo: 'Técnico SEMTAS',\n      },\n      quantidadeComprovantes: 0,\n      observacoes: pagamento.observacoes,\n      createdAt: pagamento.created_at,\n      updatedAt: pagamento.updated_at,\n    } as PagamentoResponseDto;\n  }\n\n  /**\n   * Cancela um pagamento existente\n   */\n  @Patch(':id/cancelar')\n  @ApiOperation({ summary: 'Cancela um pagamento existente' })\n  @ApiParam({ name: 'id', type: 'string', description: 'ID do pagamento' })\n  @ApiResponse({\n    status: 200,\n    description: 'Pagamento cancelado com sucesso',\n    type: PagamentoResponseDto,\n  })\n  @ApiResponse({ status: 404, description: 'Pagamento não encontrado' })\n  @ApiResponse({ status: 409, description: 'Pagamento não pode ser cancelado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  @UseGuards(PagamentoAccessGuard)\n  @ApenasAdmin()\n  @VerificarUnidade(true)\n  async cancelPagamento(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Body() cancelDto: { motivoCancelamento: string },\n    // @CurrentUser() usuario: Usuario\n  ) {\n    // Usar o ID do usuário atual\n    const usuarioId = 'placeholder'; // usuario.id;\n\n    const pagamento = await this.pagamentoService.cancelarPagamento(\n      id,\n      usuarioId,\n      cancelDto.motivoCancelamento,\n    );\n\n    // Mapear para DTO de resposta\n    return {\n      id: pagamento.id,\n      solicitacaoId: pagamento.solicitacaoId,\n      infoBancariaId: pagamento.infoBancariaId,\n      valor: pagamento.valor,\n      dataLiberacao: pagamento.dataLiberacao,\n      status: pagamento.status,\n      metodoPagamento: pagamento.metodoPagamento,\n      responsavelLiberacao: {\n        id: 'placeholder',\n        nome: 'Técnico Responsável',\n        cargo: 'Técnico SEMTAS',\n      },\n      quantidadeComprovantes: 0,\n      observacoes: pagamento.observacoes,\n      createdAt: pagamento.created_at,\n      updatedAt: pagamento.updated_at,\n    } as PagamentoResponseDto;\n  }\n\n  /**\n   * Lista pagamentos pendentes (liberados mas não confirmados)\n   */\n  @Get('pendentes')\n  @ApiOperation({\n    summary: 'Lista pagamentos pendentes (liberados mas não confirmados)',\n  })\n  @ApiQuery({ name: 'unidadeId', required: false })\n  @ApiQuery({ name: 'tipoBeneficioId', required: false })\n  @ApiQuery({ name: 'page', required: false, type: Number })\n  @ApiQuery({ name: 'limit', required: false, type: Number })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de pagamentos pendentes',\n    schema: {\n      type: 'object',\n      properties: {\n        items: {\n          type: 'array',\n          items: {\n            type: 'object',\n            $ref: '#/components/schemas/PagamentoResponseDto',\n          },\n        },\n        total: { type: 'number' },\n        page: { type: 'number' },\n        limit: { type: 'number' },\n      },\n    },\n  })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  @UseGuards(PagamentoAccessGuard)\n  @OperadorOuAdmin()\n  @VerificarUnidade(false)\n  async findPendentes(\n    @Query('unidadeId') unidadeId?: string,\n    @Query('tipoBeneficioId') tipoBeneficioId?: string,\n    @Query('page') page?: number,\n    @Query('limit') limit?: number,\n  ) {\n    const pagamentos = await this.pagamentoService.findPendentes({\n      unidadeId,\n      tipoBeneficioId,\n      page: page ? Number(page) : 1,\n      limit: limit ? Number(limit) : 10,\n    });\n\n    // Mapear para DTOs de resposta\n    const responseDtos = pagamentos.items.map((pagamento) => {\n      return {\n        id: pagamento.id,\n        solicitacaoId: pagamento.solicitacaoId,\n        infoBancariaId: pagamento.infoBancariaId,\n        valor: pagamento.valor,\n        dataLiberacao: pagamento.dataLiberacao,\n        status: pagamento.status,\n        metodoPagamento: pagamento.metodoPagamento,\n        responsavelLiberacao: {\n          id: 'placeholder',\n          nome: 'Técnico Responsável',\n          cargo: 'Técnico SEMTAS',\n        },\n        quantidadeComprovantes: 0,\n        observacoes: pagamento.observacoes,\n        createdAt: pagamento.created_at,\n        updatedAt: pagamento.updated_at,\n      } as PagamentoResponseDto;\n    });\n\n    return {\n      items: responseDtos,\n      total: pagamentos.total,\n      page: pagamentos.page,\n      limit: pagamentos.limit,\n    };\n  }\n\n  /**\n   * Obtém informações bancárias/PIX cadastradas para o beneficiário\n   */\n  @Get('info-bancarias/:beneficiarioId')\n  @ApiOperation({\n    summary: 'Obtém informações bancárias/PIX cadastradas para o beneficiário',\n  })\n  @ApiParam({\n    name: 'beneficiarioId',\n    type: 'string',\n    description: 'ID do beneficiário',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de informações bancárias',\n    schema: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          id: { type: 'string' },\n          banco: { type: 'string' },\n          agencia: { type: 'string' },\n          conta: { type: 'string' },\n          tipo_conta: { type: 'string' },\n          pix_tipo: { type: 'string' },\n          pix_chave: { type: 'string' },\n          created_at: { type: 'string', format: 'date-time' },\n        },\n      },\n    },\n  })\n  @ApiResponse({ status: 404, description: 'Beneficiário não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  @UseGuards(PagamentoAccessGuard)\n  @OperadorOuAdmin()\n  @VerificarUnidade(true)\n  async getInfoBancarias(\n    @Param('beneficiarioId', ParseUUIDPipe) beneficiarioId: string,\n  ) {\n    // Esta implementação seria integrada com o serviço de cidadão/beneficiário\n    // const infoBancarias = await this.cidadaoService.getInfoBancarias(beneficiarioId);\n\n    // Retorno mockado para demonstração\n    return [\n      {\n        id: 'placeholder-id-1',\n        banco: 'Banco do Brasil',\n        agencia: '1234',\n        conta: '12345-6',\n        tipo_conta: 'Corrente',\n        created_at: new Date().toISOString(),\n      },\n      {\n        id: 'placeholder-id-2',\n        pix_tipo: 'email',\n        pix_chave: 'b****@****.com', // mascarado para segurança\n        created_at: new Date().toISOString(),\n      },\n    ];\n  }\n}\n"],"version":3}