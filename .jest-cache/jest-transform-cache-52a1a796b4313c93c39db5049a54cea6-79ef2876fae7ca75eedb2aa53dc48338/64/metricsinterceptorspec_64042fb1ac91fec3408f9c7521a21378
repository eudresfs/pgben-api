476339e107778750b2ffa51a595e38f9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const metrics_interceptor_1 = require("../metrics.interceptor");
const metrics_service_1 = require("../metrics.service");
const rxjs_1 = require("rxjs");
/**
 * Testes unitários para o interceptor de métricas
 *
 * Verifica o funcionamento do interceptor que coleta métricas
 * sobre as requisições HTTP
 */
describe('MetricsInterceptor', () => {
    let interceptor;
    let metricsService;
    // Mock do serviço de métricas
    const mockMetricsService = {
        incrementHttpRequestsInProgress: jest.fn(),
        decrementHttpRequestsInProgress: jest.fn(),
        recordHttpRequest: jest.fn(),
        recordHttpRequestDuration: jest.fn(),
    };
    beforeEach(async () => {
        jest.clearAllMocks();
        const module = await testing_1.Test.createTestingModule({
            providers: [
                metrics_interceptor_1.MetricsInterceptor,
                {
                    provide: metrics_service_1.MetricsService,
                    useValue: mockMetricsService,
                },
            ],
        }).compile();
        interceptor = module.get(metrics_interceptor_1.MetricsInterceptor);
        metricsService = module.get(metrics_service_1.MetricsService);
        // Mock para Date.now() - primeiro retorna 1000, depois 1200
        const mockNow = jest
            .spyOn(Date, 'now')
            .mockImplementationOnce(() => 1000)
            .mockImplementationOnce(() => 1200);
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('deve ser definido', () => {
        expect(interceptor).toBeDefined();
    });
    describe('intercept', () => {
        it('deve coletar métricas para uma requisição bem-sucedida', (done) => {
            // Mock do contexto de execução
            const mockRequest = {
                method: 'GET',
                url: '/api/cidadaos',
                route: {
                    path: '/api/cidadaos',
                },
            };
            const mockResponse = {
                statusCode: 200,
            };
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue(mockRequest),
                    getResponse: jest.fn().mockReturnValue(mockResponse),
                }),
            };
            // Mock do handler de chamada
            const mockCallHandler = {
                handle: jest.fn().mockReturnValue((0, rxjs_1.of)({ data: 'test' })),
            };
            // Executar o interceptor
            interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({
                next: (data) => {
                    expect(data).toEqual({ data: 'test' });
                    // Verificar se as métricas foram coletadas corretamente
                    expect(mockMetricsService.incrementHttpRequestsInProgress).toHaveBeenCalledWith('GET', '/api/cidadaos');
                    expect(mockMetricsService.decrementHttpRequestsInProgress).toHaveBeenCalledWith('GET', '/api/cidadaos');
                    expect(mockMetricsService.recordHttpRequest).toHaveBeenCalledWith('GET', '/api/cidadaos', 200);
                    // Verificar se a duração foi registrada, sem verificar o valor exato
                    expect(mockMetricsService.recordHttpRequestDuration).toHaveBeenCalled();
                    const durationCall = mockMetricsService.recordHttpRequestDuration.mock.calls[0];
                    expect(durationCall[0]).toBe('GET');
                    expect(durationCall[1]).toBe('/api/cidadaos');
                    expect(durationCall[2]).toBe(200);
                    // O quarto parâmetro é a duração, que pode variar
                    done();
                },
                error: done,
            });
        });
        it('deve coletar métricas para uma requisição com erro', (done) => {
            // Mock do contexto de execução
            const mockRequest = {
                method: 'POST',
                url: '/api/cidadaos',
                route: {
                    path: '/api/cidadaos',
                },
            };
            const mockResponse = {
                statusCode: 500,
            };
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue(mockRequest),
                    getResponse: jest.fn().mockReturnValue(mockResponse),
                }),
            };
            // Mock do handler de chamada com erro
            const mockError = new Error('Teste de erro');
            const mockCallHandler = {
                handle: jest.fn().mockReturnValue((0, rxjs_1.throwError)(() => mockError)),
            };
            // Executar o interceptor
            interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({
                next: () => {
                    done.fail('Não deveria chegar aqui');
                },
                error: (error) => {
                    expect(error).toBe(mockError);
                    // Verificar se as métricas foram coletadas corretamente
                    expect(mockMetricsService.incrementHttpRequestsInProgress).toHaveBeenCalledWith('POST', '/api/cidadaos');
                    expect(mockMetricsService.decrementHttpRequestsInProgress).toHaveBeenCalledWith('POST', '/api/cidadaos');
                    expect(mockMetricsService.recordHttpRequest).toHaveBeenCalledWith('POST', '/api/cidadaos', 500);
                    // Verificar se a duração foi registrada, sem verificar o valor exato
                    expect(mockMetricsService.recordHttpRequestDuration).toHaveBeenCalled();
                    const durationCall = mockMetricsService.recordHttpRequestDuration.mock.calls[0];
                    expect(durationCall[0]).toBe('POST');
                    expect(durationCall[1]).toBe('/api/cidadaos');
                    expect(durationCall[2]).toBe(500);
                    // O quarto parâmetro é a duração, que pode variar
                    done();
                },
            });
        });
        it('deve usar a URL da requisição quando a rota não está disponível', (done) => {
            // Mock do contexto de execução sem rota definida
            const mockRequest = {
                method: 'GET',
                url: '/api/cidadaos/123',
                // Sem objeto route
            };
            const mockResponse = {
                statusCode: 200,
            };
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue(mockRequest),
                    getResponse: jest.fn().mockReturnValue(mockResponse),
                }),
            };
            // Mock do handler de chamada
            const mockCallHandler = {
                handle: jest.fn().mockReturnValue((0, rxjs_1.of)({ data: 'test' })),
            };
            // Executar o interceptor
            interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({
                next: (data) => {
                    expect(data).toEqual({ data: 'test' });
                    // Verificar se as métricas foram coletadas usando a URL
                    expect(mockMetricsService.incrementHttpRequestsInProgress).toHaveBeenCalled();
                    const incrementCall = mockMetricsService.incrementHttpRequestsInProgress.mock.calls[0];
                    expect(incrementCall[0]).toBe('GET');
                    // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor
                    expect(mockMetricsService.decrementHttpRequestsInProgress).toHaveBeenCalled();
                    const decrementCall = mockMetricsService.decrementHttpRequestsInProgress.mock.calls[0];
                    expect(decrementCall[0]).toBe('GET');
                    // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor
                    expect(mockMetricsService.recordHttpRequest).toHaveBeenCalled();
                    const recordCall = mockMetricsService.recordHttpRequest.mock.calls[0];
                    expect(recordCall[0]).toBe('GET');
                    // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor
                    expect(recordCall[2]).toBe(200);
                    // Verificar se a duração foi registrada, sem verificar o valor exato
                    expect(mockMetricsService.recordHttpRequestDuration).toHaveBeenCalled();
                    const durationCall = mockMetricsService.recordHttpRequestDuration.mock.calls[0];
                    expect(durationCall[0]).toBe('GET');
                    // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor para '/api/cidadaos/:id'
                    expect(durationCall[2]).toBe(200);
                    // O quarto parâmetro é a duração, que pode variar
                    done();
                },
                error: done,
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,