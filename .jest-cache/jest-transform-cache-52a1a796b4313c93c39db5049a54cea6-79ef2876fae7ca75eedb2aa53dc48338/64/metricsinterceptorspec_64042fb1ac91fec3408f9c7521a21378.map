{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\metrics.interceptor.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\tests\\metrics.interceptor.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { MetricsInterceptor } from '../metrics.interceptor';\nimport { MetricsService } from '../metrics.service';\nimport { ExecutionContext, CallHandler } from '@nestjs/common';\nimport { of, throwError } from 'rxjs';\nimport { Request, Response } from 'express';\n\n/**\n * Testes unitários para o interceptor de métricas\n *\n * Verifica o funcionamento do interceptor que coleta métricas\n * sobre as requisições HTTP\n */\ndescribe('MetricsInterceptor', () => {\n  let interceptor: MetricsInterceptor;\n  let metricsService: MetricsService;\n\n  // Mock do serviço de métricas\n  const mockMetricsService = {\n    incrementHttpRequestsInProgress: jest.fn(),\n    decrementHttpRequestsInProgress: jest.fn(),\n    recordHttpRequest: jest.fn(),\n    recordHttpRequestDuration: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        MetricsInterceptor,\n        {\n          provide: MetricsService,\n          useValue: mockMetricsService,\n        },\n      ],\n    }).compile();\n\n    interceptor = module.get<MetricsInterceptor>(MetricsInterceptor);\n    metricsService = module.get<MetricsService>(MetricsService);\n\n    // Mock para Date.now() - primeiro retorna 1000, depois 1200\n    const mockNow = jest\n      .spyOn(Date, 'now')\n      .mockImplementationOnce(() => 1000)\n      .mockImplementationOnce(() => 1200);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  describe('intercept', () => {\n    it('deve coletar métricas para uma requisição bem-sucedida', (done) => {\n      // Mock do contexto de execução\n      const mockRequest = {\n        method: 'GET',\n        url: '/api/cidadaos',\n        route: {\n          path: '/api/cidadaos',\n        },\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 200,\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(of({ data: 'test' })),\n      } as unknown as CallHandler;\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: (data) => {\n          expect(data).toEqual({ data: 'test' });\n\n          // Verificar se as métricas foram coletadas corretamente\n          expect(\n            mockMetricsService.incrementHttpRequestsInProgress,\n          ).toHaveBeenCalledWith('GET', '/api/cidadaos');\n\n          expect(\n            mockMetricsService.decrementHttpRequestsInProgress,\n          ).toHaveBeenCalledWith('GET', '/api/cidadaos');\n\n          expect(mockMetricsService.recordHttpRequest).toHaveBeenCalledWith(\n            'GET',\n            '/api/cidadaos',\n            200,\n          );\n\n          // Verificar se a duração foi registrada, sem verificar o valor exato\n          expect(\n            mockMetricsService.recordHttpRequestDuration,\n          ).toHaveBeenCalled();\n          const durationCall =\n            mockMetricsService.recordHttpRequestDuration.mock.calls[0];\n          expect(durationCall[0]).toBe('GET');\n          expect(durationCall[1]).toBe('/api/cidadaos');\n          expect(durationCall[2]).toBe(200);\n          // O quarto parâmetro é a duração, que pode variar\n\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('deve coletar métricas para uma requisição com erro', (done) => {\n      // Mock do contexto de execução\n      const mockRequest = {\n        method: 'POST',\n        url: '/api/cidadaos',\n        route: {\n          path: '/api/cidadaos',\n        },\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 500,\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada com erro\n      const mockError = new Error('Teste de erro');\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(throwError(() => mockError)),\n      } as unknown as CallHandler;\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: () => {\n          done.fail('Não deveria chegar aqui');\n        },\n        error: (error) => {\n          expect(error).toBe(mockError);\n\n          // Verificar se as métricas foram coletadas corretamente\n          expect(\n            mockMetricsService.incrementHttpRequestsInProgress,\n          ).toHaveBeenCalledWith('POST', '/api/cidadaos');\n\n          expect(\n            mockMetricsService.decrementHttpRequestsInProgress,\n          ).toHaveBeenCalledWith('POST', '/api/cidadaos');\n\n          expect(mockMetricsService.recordHttpRequest).toHaveBeenCalledWith(\n            'POST',\n            '/api/cidadaos',\n            500,\n          );\n\n          // Verificar se a duração foi registrada, sem verificar o valor exato\n          expect(\n            mockMetricsService.recordHttpRequestDuration,\n          ).toHaveBeenCalled();\n          const durationCall =\n            mockMetricsService.recordHttpRequestDuration.mock.calls[0];\n          expect(durationCall[0]).toBe('POST');\n          expect(durationCall[1]).toBe('/api/cidadaos');\n          expect(durationCall[2]).toBe(500);\n          // O quarto parâmetro é a duração, que pode variar\n\n          done();\n        },\n      });\n    });\n\n    it('deve usar a URL da requisição quando a rota não está disponível', (done) => {\n      // Mock do contexto de execução sem rota definida\n      const mockRequest = {\n        method: 'GET',\n        url: '/api/cidadaos/123',\n        // Sem objeto route\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 200,\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(of({ data: 'test' })),\n      } as unknown as CallHandler;\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: (data) => {\n          expect(data).toEqual({ data: 'test' });\n\n          // Verificar se as métricas foram coletadas usando a URL\n          expect(\n            mockMetricsService.incrementHttpRequestsInProgress,\n          ).toHaveBeenCalled();\n          const incrementCall =\n            mockMetricsService.incrementHttpRequestsInProgress.mock.calls[0];\n          expect(incrementCall[0]).toBe('GET');\n          // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor\n\n          expect(\n            mockMetricsService.decrementHttpRequestsInProgress,\n          ).toHaveBeenCalled();\n          const decrementCall =\n            mockMetricsService.decrementHttpRequestsInProgress.mock.calls[0];\n          expect(decrementCall[0]).toBe('GET');\n          // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor\n\n          expect(mockMetricsService.recordHttpRequest).toHaveBeenCalled();\n          const recordCall = mockMetricsService.recordHttpRequest.mock.calls[0];\n          expect(recordCall[0]).toBe('GET');\n          // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor\n          expect(recordCall[2]).toBe(200);\n\n          // Verificar se a duração foi registrada, sem verificar o valor exato\n          expect(\n            mockMetricsService.recordHttpRequestDuration,\n          ).toHaveBeenCalled();\n          const durationCall =\n            mockMetricsService.recordHttpRequestDuration.mock.calls[0];\n          expect(durationCall[0]).toBe('GET');\n          // Não verificamos o caminho exato, pois pode ser normalizado pelo interceptor para '/api/cidadaos/:id'\n          expect(durationCall[2]).toBe(200);\n          // O quarto parâmetro é a duração, que pode variar\n\n          done();\n        },\n        error: done,\n      });\n    });\n  });\n});\n"],"version":3}