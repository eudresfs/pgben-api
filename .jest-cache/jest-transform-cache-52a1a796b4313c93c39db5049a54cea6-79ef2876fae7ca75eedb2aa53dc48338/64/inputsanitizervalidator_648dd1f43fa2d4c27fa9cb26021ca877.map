{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\input-sanitizer.validator.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\documento\\validators\\input-sanitizer.validator.ts"],"sourcesContent":["import {\r\n  ValidatorConstraint,\r\n  ValidatorConstraintInterface,\r\n  ValidationArguments,\r\n} from 'class-validator';\r\nimport { Injectable, Logger } from '@nestjs/common';\r\nimport * as DOMPurify from 'isomorphic-dompurify';\r\nimport * as validator from 'validator';\r\n\r\n/**\r\n * Interface para o resultado da sanitização de input\r\n */\r\nexport interface InputSanitizationResult {\r\n  isValid: boolean;\r\n  sanitizedValue: string;\r\n  originalValue: string;\r\n  warnings: string[];\r\n  blocked: boolean;\r\n}\r\n\r\n/**\r\n * Validador e sanitizador personalizado para inputs do usuário\r\n *\r\n * Implementa sanitização robusta para prevenir ataques XSS, injeção de código\r\n * e outros tipos de ataques através de inputs maliciosos\r\n */\r\n@ValidatorConstraint({ name: 'inputSanitizerValidator', async: false })\r\n@Injectable()\r\nexport class InputSanitizerValidator implements ValidatorConstraintInterface {\r\n  private readonly logger = new Logger(InputSanitizerValidator.name);\r\n\r\n  // Padrões perigosos que devem ser bloqueados\r\n  private readonly dangerousPatterns = [\r\n    /<script[^>]*>.*?<\\/script>/gi, // Scripts\r\n    /javascript:/gi, // URLs javascript\r\n    /vbscript:/gi, // URLs vbscript\r\n    /on\\w+\\s*=/gi, // Event handlers (onclick, onload, etc.)\r\n    /<iframe[^>]*>.*?<\\/iframe>/gi, // iframes\r\n    /<object[^>]*>.*?<\\/object>/gi, // objects\r\n    /<embed[^>]*>.*?<\\/embed>/gi, // embeds\r\n    /<link[^>]*>/gi, // links externos\r\n    /<meta[^>]*>/gi, // meta tags\r\n    /\\${.*?}/g, // Template literals\r\n    /eval\\s*\\(/gi, // eval functions\r\n    /Function\\s*\\(/gi, // Function constructor\r\n    /setTimeout\\s*\\(/gi, // setTimeout\r\n    /setInterval\\s*\\(/gi, // setInterval\r\n  ];\r\n\r\n  // Caracteres que devem ser escapados\r\n  private readonly escapeMap: { [key: string]: string } = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#x27;',\r\n    '/': '&#x2F;',\r\n    '`': '&#x60;',\r\n    '=': '&#x3D;',\r\n  };\r\n\r\n  /**\r\n   * Valida se o input é seguro após sanitização\r\n   * @param value Valor a ser validado\r\n   * @param args Argumentos de validação\r\n   * @returns true se o valor é válido após sanitização\r\n   */\r\n  validate(value: any, args: ValidationArguments): boolean {\r\n    if (!value || typeof value !== 'string') {\r\n      return true; // Valores vazios ou não-string são válidos\r\n    }\r\n\r\n    const result = this.sanitizeInput(value);\r\n    \r\n    // Log de tentativas de ataques\r\n    if (result.blocked || result.warnings.length > 0) {\r\n      this.logger.warn(\r\n        `Tentativa de input potencialmente malicioso detectada: ${JSON.stringify({\r\n          originalValue: result.originalValue.substring(0, 100),\r\n          warnings: result.warnings,\r\n          blocked: result.blocked,\r\n          property: args.property,\r\n        })}`,\r\n      );\r\n    }\r\n\r\n    return !result.blocked;\r\n  }\r\n\r\n  /**\r\n   * Retorna a mensagem de erro padrão\r\n   * @param args Argumentos de validação\r\n   * @returns Mensagem de erro\r\n   */\r\n  defaultMessage(args: ValidationArguments): string {\r\n    return `O campo ${args.property} contém conteúdo não permitido por motivos de segurança`;\r\n  }\r\n\r\n  /**\r\n   * Sanitiza um input do usuário\r\n   * @param input Input a ser sanitizado\r\n   * @param options Opções de sanitização\r\n   * @returns Resultado da sanitização\r\n   */\r\n  sanitizeInput(\r\n    input: string,\r\n    options: {\r\n      allowHtml?: boolean;\r\n      maxLength?: number;\r\n      strictMode?: boolean;\r\n    } = {},\r\n  ): InputSanitizationResult {\r\n    const {\r\n      allowHtml = false,\r\n      maxLength = 10000,\r\n      strictMode = true,\r\n    } = options;\r\n\r\n    const result: InputSanitizationResult = {\r\n      isValid: true,\r\n      sanitizedValue: input,\r\n      originalValue: input,\r\n      warnings: [],\r\n      blocked: false,\r\n    };\r\n\r\n    // Verificar comprimento máximo\r\n    if (input.length > maxLength) {\r\n      result.warnings.push(`Input excede o comprimento máximo de ${maxLength} caracteres`);\r\n      result.sanitizedValue = input.substring(0, maxLength);\r\n    }\r\n\r\n    // Verificar padrões perigosos\r\n    for (const pattern of this.dangerousPatterns) {\r\n      if (pattern.test(input)) {\r\n        result.warnings.push(`Padrão perigoso detectado: ${pattern.source}`);\r\n        if (strictMode) {\r\n          result.blocked = true;\r\n          result.isValid = false;\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Sanitização básica\r\n    let sanitized = input;\r\n\r\n    if (!allowHtml) {\r\n      // Remover todas as tags HTML\r\n      sanitized = DOMPurify.sanitize(sanitized, { ALLOWED_TAGS: [] });\r\n      \r\n      // Escapar caracteres especiais\r\n      sanitized = this.escapeHtmlChars(sanitized);\r\n    } else {\r\n      // Permitir apenas tags HTML seguras\r\n      sanitized = DOMPurify.sanitize(sanitized, {\r\n        ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'p', 'br'],\r\n        ALLOWED_ATTR: [],\r\n      });\r\n    }\r\n\r\n    // Normalizar espaços em branco\r\n    sanitized = sanitized.replace(/\\s+/g, ' ').trim();\r\n\r\n    // Remover caracteres de controle\r\n    sanitized = sanitized.replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, '');\r\n\r\n    // Verificar se houve mudanças significativas\r\n    if (sanitized !== input) {\r\n      result.warnings.push('Input foi modificado durante a sanitização');\r\n    }\r\n\r\n    result.sanitizedValue = sanitized;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Escapa caracteres HTML especiais\r\n   * @param text Texto a ser escapado\r\n   * @returns Texto com caracteres escapados\r\n   */\r\n  private escapeHtmlChars(text: string): string {\r\n    return text.replace(/[&<>\"'`=\\/]/g, (char) => this.escapeMap[char] || char);\r\n  }\r\n\r\n  /**\r\n   * Sanitiza um nome de arquivo\r\n   * @param filename Nome do arquivo\r\n   * @returns Nome do arquivo sanitizado\r\n   */\r\n  sanitizeFilename(filename: string): string {\r\n    if (!filename) return '';\r\n\r\n    // Remover caracteres perigosos para nomes de arquivo\r\n    let sanitized = filename.replace(/[<>:\"\\/\\\\|?*\\x00-\\x1F]/g, '_');\r\n    \r\n    // Remover múltiplos pontos consecutivos\r\n    sanitized = sanitized.replace(/\\.{2,}/g, '.');\r\n    \r\n    // Remover pontos no início e fim\r\n    sanitized = sanitized.replace(/^\\.|\\.$/, '');\r\n    \r\n    // Limitar comprimento\r\n    if (sanitized.length > 255) {\r\n      const ext = sanitized.substring(sanitized.lastIndexOf('.'));\r\n      const name = sanitized.substring(0, sanitized.lastIndexOf('.'));\r\n      sanitized = name.substring(0, 255 - ext.length) + ext;\r\n    }\r\n\r\n    // Garantir que não seja vazio\r\n    if (!sanitized || sanitized.trim() === '') {\r\n      sanitized = 'arquivo_sem_nome';\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  /**\r\n   * Valida e sanitiza metadados de documento\r\n   * @param metadados Metadados a serem validados\r\n   * @returns Metadados sanitizados\r\n   */\r\n  sanitizeMetadados(metadados: any): any {\r\n    if (!metadados || typeof metadados !== 'object') {\r\n      return {};\r\n    }\r\n\r\n    const sanitized: any = {};\r\n    \r\n    // Lista de campos permitidos nos metadados\r\n    const allowedFields = [\r\n      'titulo',\r\n      'descricao',\r\n      'autor',\r\n      'data_documento',\r\n      'tags',\r\n      'categoria',\r\n      'versao',\r\n      'observacoes',\r\n    ];\r\n\r\n    for (const field of allowedFields) {\r\n      if (metadados[field] !== undefined) {\r\n        if (typeof metadados[field] === 'string') {\r\n          const result = this.sanitizeInput(metadados[field], {\r\n            allowHtml: false,\r\n            maxLength: field === 'descricao' ? 2000 : 500,\r\n            strictMode: true,\r\n          });\r\n          \r\n          if (!result.blocked) {\r\n            sanitized[field] = result.sanitizedValue;\r\n          }\r\n        } else if (Array.isArray(metadados[field]) && field === 'tags') {\r\n          // Sanitizar array de tags\r\n          sanitized[field] = metadados[field]\r\n            .filter((tag: any) => typeof tag === 'string')\r\n            .map((tag: string) => {\r\n              const result = this.sanitizeInput(tag, {\r\n                allowHtml: false,\r\n                maxLength: 50,\r\n                strictMode: true,\r\n              });\r\n              return result.blocked ? null : result.sanitizedValue;\r\n            })\r\n            .filter((tag: string | null) => tag !== null)\r\n            .slice(0, 10); // Máximo 10 tags\r\n        }\r\n      }\r\n    }\r\n\r\n    return sanitized;\r\n  }\r\n}"],"version":3}