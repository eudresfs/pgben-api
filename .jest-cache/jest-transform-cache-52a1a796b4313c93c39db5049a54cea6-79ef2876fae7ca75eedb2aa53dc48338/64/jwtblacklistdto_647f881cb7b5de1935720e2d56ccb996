b121ee9ce81d497a377d6bf8e24f4bc1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlacklistStatsDto = exports.BlacklistQueryDto = exports.CheckBlacklistResponseDto = exports.BlacklistResponseDto = exports.InvalidateUserTokensDto = exports.CheckBlacklistDto = exports.AddToBlacklistDto = void 0;
const class_validator_1 = require("class-validator");
const swagger_1 = require("@nestjs/swagger");
const class_transformer_1 = require("class-transformer");
/**
 * DTO para adicionar token à blacklist
 */
class AddToBlacklistDto {
    jti;
    usuario_id;
    token_type;
    expires_at;
    reason;
    client_ip;
    user_agent;
    metadata;
}
exports.AddToBlacklistDto = AddToBlacklistDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'JWT ID (jti) do token a ser invalidado',
        example: 'jti-uuid-v4',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 255),
    __metadata("design:type", String)
], AddToBlacklistDto.prototype, "jti", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID do usuário proprietário do token',
        example: 'user-uuid-v4',
    }),
    (0, class_validator_1.IsUUID)(),
    __metadata("design:type", String)
], AddToBlacklistDto.prototype, "usuario_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tipo do token',
        enum: ['access', 'refresh'],
        example: 'access',
    }),
    (0, class_validator_1.IsEnum)(['access', 'refresh']),
    __metadata("design:type", String)
], AddToBlacklistDto.prototype, "token_type", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Data de expiração do token (ISO 8601)',
        example: '2024-01-15T10:30:00Z',
    }),
    (0, class_validator_1.IsDateString)(),
    __metadata("design:type", String)
], AddToBlacklistDto.prototype, "expires_at", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Motivo da invalidação',
        example: 'user_logout',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 100),
    __metadata("design:type", String)
], AddToBlacklistDto.prototype, "reason", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'IP do cliente',
        example: '192.168.1.100',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsIP)(),
    __metadata("design:type", String)
], AddToBlacklistDto.prototype, "client_ip", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'User Agent do cliente',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 1000),
    __metadata("design:type", String)
], AddToBlacklistDto.prototype, "user_agent", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Metadados adicionais',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsObject)(),
    __metadata("design:type", typeof (_a = typeof Record !== "undefined" && Record) === "function" ? _a : Object)
], AddToBlacklistDto.prototype, "metadata", void 0);
/**
 * DTO para verificar se token está na blacklist
 */
class CheckBlacklistDto {
    jti;
}
exports.CheckBlacklistDto = CheckBlacklistDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'JWT ID (jti) do token a ser verificado',
        example: 'jti-uuid-v4',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 255),
    __metadata("design:type", String)
], CheckBlacklistDto.prototype, "jti", void 0);
/**
 * DTO para invalidar todos os tokens de um usuário
 */
class InvalidateUserTokensDto {
    usuario_id;
    reason;
    token_type;
    client_ip;
    user_agent;
    metadata;
}
exports.InvalidateUserTokensDto = InvalidateUserTokensDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'ID do usuário',
        example: 'user-uuid-v4',
    }),
    (0, class_validator_1.IsUUID)(),
    __metadata("design:type", String)
], InvalidateUserTokensDto.prototype, "usuario_id", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Motivo da invalidação',
        example: 'security_breach',
    }),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 100),
    __metadata("design:type", String)
], InvalidateUserTokensDto.prototype, "reason", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Tipo específico de token a invalidar',
        enum: ['access', 'refresh', 'all'],
        example: 'all',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEnum)(['access', 'refresh', 'all']),
    __metadata("design:type", String)
], InvalidateUserTokensDto.prototype, "token_type", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'IP do cliente',
        example: '192.168.1.100',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsIP)(),
    __metadata("design:type", String)
], InvalidateUserTokensDto.prototype, "client_ip", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'User Agent do cliente',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 1000),
    __metadata("design:type", String)
], InvalidateUserTokensDto.prototype, "user_agent", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Metadados adicionais',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsObject)(),
    __metadata("design:type", typeof (_b = typeof Record !== "undefined" && Record) === "function" ? _b : Object)
], InvalidateUserTokensDto.prototype, "metadata", void 0);
/**
 * DTO de resposta para operações de blacklist
 */
class BlacklistResponseDto {
    message;
    success;
    affected_count;
}
exports.BlacklistResponseDto = BlacklistResponseDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Mensagem de sucesso',
        example: 'Token adicionado à blacklist com sucesso',
    }),
    __metadata("design:type", String)
], BlacklistResponseDto.prototype, "message", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se a operação foi bem-sucedida',
        example: true,
    }),
    __metadata("design:type", Boolean)
], BlacklistResponseDto.prototype, "success", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Número de tokens afetados',
        example: 1,
    }),
    __metadata("design:type", Number)
], BlacklistResponseDto.prototype, "affected_count", void 0);
/**
 * DTO de resposta para verificação de blacklist
 */
class CheckBlacklistResponseDto {
    is_blacklisted;
    reason;
    expires_at;
    minutes_until_expiration;
}
exports.CheckBlacklistResponseDto = CheckBlacklistResponseDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Indica se o token está na blacklist',
        example: true,
    }),
    __metadata("design:type", Boolean)
], CheckBlacklistResponseDto.prototype, "is_blacklisted", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Motivo da invalidação (se blacklisted)',
        example: 'user_logout',
    }),
    __metadata("design:type", String)
], CheckBlacklistResponseDto.prototype, "reason", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Data de expiração do token',
        example: '2024-01-15T10:30:00Z',
    }),
    __metadata("design:type", String)
], CheckBlacklistResponseDto.prototype, "expires_at", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Minutos até a expiração',
        example: 15,
    }),
    __metadata("design:type", Number)
], CheckBlacklistResponseDto.prototype, "minutes_until_expiration", void 0);
/**
 * DTO para filtros de consulta da blacklist
 */
class BlacklistQueryDto {
    usuario_id;
    token_type;
    reason;
    only_active;
    page;
    limit;
}
exports.BlacklistQueryDto = BlacklistQueryDto;
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'ID do usuário para filtrar',
        example: 'user-uuid-v4',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsUUID)(),
    __metadata("design:type", String)
], BlacklistQueryDto.prototype, "usuario_id", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Tipo de token para filtrar',
        enum: ['access', 'refresh'],
        example: 'access',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEnum)(['access', 'refresh']),
    __metadata("design:type", String)
], BlacklistQueryDto.prototype, "token_type", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Motivo da invalidação para filtrar',
        example: 'user_logout',
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)(),
    (0, class_validator_1.Length)(1, 100),
    __metadata("design:type", String)
], BlacklistQueryDto.prototype, "reason", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Incluir apenas tokens ainda válidos',
        example: true,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Transform)(({ value }) => value === 'true' || value === true),
    __metadata("design:type", Boolean)
], BlacklistQueryDto.prototype, "only_active", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Página para paginação',
        example: 1,
        minimum: 1,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Transform)(({ value }) => parseInt(value)),
    __metadata("design:type", Number)
], BlacklistQueryDto.prototype, "page", void 0);
__decorate([
    (0, swagger_1.ApiPropertyOptional)({
        description: 'Itens por página',
        example: 10,
        minimum: 1,
        maximum: 100,
    }),
    (0, class_validator_1.IsOptional)(),
    (0, class_transformer_1.Transform)(({ value }) => parseInt(value)),
    __metadata("design:type", Number)
], BlacklistQueryDto.prototype, "limit", void 0);
/**
 * DTO de resposta para estatísticas da blacklist
 */
class BlacklistStatsDto {
    total;
    active;
    expired;
    access_tokens;
    refresh_tokens;
    by_reason;
    last_cleanup;
}
exports.BlacklistStatsDto = BlacklistStatsDto;
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Total de tokens na blacklist',
        example: 150,
    }),
    __metadata("design:type", Number)
], BlacklistStatsDto.prototype, "total", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tokens ainda ativos (não expirados)',
        example: 45,
    }),
    __metadata("design:type", Number)
], BlacklistStatsDto.prototype, "active", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tokens expirados',
        example: 105,
    }),
    __metadata("design:type", Number)
], BlacklistStatsDto.prototype, "expired", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tokens de acesso',
        example: 120,
    }),
    __metadata("design:type", Number)
], BlacklistStatsDto.prototype, "access_tokens", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Tokens de refresh',
        example: 30,
    }),
    __metadata("design:type", Number)
], BlacklistStatsDto.prototype, "refresh_tokens", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Estatísticas por motivo',
        example: {
            user_logout: 80,
            security_breach: 20,
            token_expired: 50,
        },
    }),
    __metadata("design:type", typeof (_c = typeof Record !== "undefined" && Record) === "function" ? _c : Object)
], BlacklistStatsDto.prototype, "by_reason", void 0);
__decorate([
    (0, swagger_1.ApiProperty)({
        description: 'Data da última limpeza',
        example: '2024-01-01T10:00:00Z',
    }),
    __metadata("design:type", String)
], BlacklistStatsDto.prototype, "last_cleanup", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,