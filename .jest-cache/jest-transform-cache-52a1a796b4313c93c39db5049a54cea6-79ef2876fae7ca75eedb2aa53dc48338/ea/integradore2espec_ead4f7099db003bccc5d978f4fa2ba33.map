{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador-e2e.spec.ts","mappings":";;;;;AAAA,6CAAsD;AAEtD,0DAAgC;AAChC,6CAAqD;AACrD,qCAAoD;AACpD,2CAA6D;AAC7D,gDAA+E;AAC/E,4DAAwD;AACxD,uEAAmE;AACnE,mFAA8E;AAG9E,6DAAqD;AAErD;;;GAGG;AACH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,GAAqB,CAAC;IAC1B,IAAI,UAAsB,CAAC;IAC3B,IAAI,iBAAoC,CAAC;IACzC,IAAI,YAAoC,CAAC;IACzC,IAAI,oBAAyB,CAAC;IAC9B,IAAI,eAAoB,CAAC;IACzB,IAAI,uBAA4B,CAAC;IACjC,IAAI,UAAkB,CAAC;IACvB,IAAI,UAAe,CAAC;IACpB,IAAI,eAAuB,CAAC;IAE5B,wBAAwB;IACxB,MAAM,wBAAwB,GAAG;QAC/B,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;KAClB,CAAC;IAEF,MAAM,mBAAmB,GAAG;QAC1B,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;KAClB,CAAC;IAEF,MAAM,2BAA2B,GAAG;QAClC,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;QAClB,kBAAkB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAC9C,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAClC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QAChC,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,cAAc,EAAE;QACjC,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE;KACnB,CAAC;IAEF,kCAAkC;IAClC,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,SAAS,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC9D,OAAO,EAAE;gBACP,qBAAY,CAAC,OAAO,CAAC;oBACnB,QAAQ,EAAE,IAAI;oBACd,WAAW,EAAE,WAAW;iBACzB,CAAC;gBACF,eAAS,CAAC,aAAa,CAAC;oBACtB,OAAO,EAAE,CAAC,qBAAY,CAAC;oBACvB,MAAM,EAAE,CAAC,sBAAa,CAAC;oBACvB,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;wBACjB,MAAM,EAAE,aAAa;wBACrB,WAAW,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;qBACjC,CAAC;iBACH,CAAC;gBACF,oCAAgB;aACjB;YACD,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,qBAAU,CAAC;oBACvC,QAAQ,EAAE,wBAAwB;iBACnC;gBACD;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,0BAAe,CAAC;oBAC5C,QAAQ,EAAE,mBAAmB;iBAC9B;gBACD;oBACE,OAAO,EAAE,IAAA,4BAAkB,EAAC,wBAAa,CAAC;oBAC1C,QAAQ,EAAE,2BAA2B;iBACtC;aACF;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,GAAG,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;QACxC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAEjB,UAAU,GAAG,SAAS,CAAC,GAAG,CAAa,gBAAU,CAAC,CAAC;QACnD,iBAAiB,GAAG,SAAS,CAAC,GAAG,CAAoB,sCAAiB,CAAC,CAAC;QACxE,YAAY,GAAG,SAAS,CAAC,GAAG,CAC1B,iDAAsB,CACvB,CAAC;QACF,oBAAoB,GAAG,SAAS,CAAC,GAAG,CAAC,IAAA,4BAAkB,EAAC,qBAAU,CAAC,CAAC,CAAC;QACrE,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,IAAA,4BAAkB,EAAC,0BAAe,CAAC,CAAC,CAAC;QACrE,uBAAuB,GAAG,SAAS,CAAC,GAAG,CAAC,IAAA,4BAAkB,EAAC,wBAAa,CAAC,CAAC,CAAC;QAE3E,mCAAmC;QACnC,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC;YAC3B,GAAG,EAAE,WAAW;YAChB,IAAI,EAAE,YAAY;YAClB,KAAK,EAAE,CAAC,gBAAI,CAAC,KAAK,CAAC;SACpB,CAAC,CAAC;QAEH,+CAA+C;QAC/C,UAAU,GAAG;YACX,EAAE,EAAE,oBAAoB;YACxB,IAAI,EAAE,qBAAqB;YAC3B,SAAS,EAAE,sCAAsC;YACjD,KAAK,EAAE,IAAI;YACX,gBAAgB,EAAE,CAAC,oBAAoB,EAAE,eAAe,CAAC;YACzD,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,IAAI,IAAI,EAAE;YACvB,eAAe,EAAE,IAAI,IAAI,EAAE;SAC5B,CAAC;QAEF,yBAAyB;QACzB,wBAAwB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,EAAE;YAC5D,IAAI,KAAK,EAAE,KAAK,EAAE,EAAE,KAAK,oBAAoB,EAAE,CAAC;gBAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACrC,CAAC;YACD,IAAI,KAAK,EAAE,KAAK,EAAE,IAAI,KAAK,qBAAqB,EAAE,CAAC;gBACjD,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACrC,CAAC;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,wBAAwB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1D,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,GAAG,MAAM;gBACT,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,oBAAoB;aACtC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,wBAAwB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE;YACzD,OAAO;gBACL,GAAG,GAAG;gBACN,EAAE,EAAE,oBAAoB;aACzB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,gDAAgD;QAChD,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,EAAE;YACrD,OAAO,OAAO,CAAC,OAAO,CAAC;gBACrB,GAAG,MAAM;gBACT,EAAE,EAAE,MAAM,CAAC,EAAE,IAAI,eAAe;aACjC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,mBAAmB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE;YACpD,OAAO;gBACL,GAAG,GAAG;gBACN,EAAE,EAAE,eAAe;aACpB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,mBAAmB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,EAAE;YACvD,IAAI,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;gBAC5B,OAAO,OAAO,CAAC,OAAO,CAAC;oBACrB,EAAE,EAAE,eAAe;oBACnB,YAAY,EAAE,oBAAoB;oBAClC,IAAI,EAAE,gBAAgB;oBACtB,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS;oBAChC,OAAO,EAAE,CAAC,oBAAoB,CAAC;oBAC/B,QAAQ,EAAE,KAAK;oBACf,SAAS,EAAE,IAAI;oBACf,WAAW,EAAE,IAAI,IAAI,EAAE;iBACxB,CAAC,CAAC;YACL,CAAC;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,6CAA6C;QAC7C,2BAA2B,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAE5D,wCAAwC;QACxC,MAAM,cAAc,GAAmB;YACrC,IAAI,EAAE,gBAAgB;YACtB,SAAS,EAAE,iCAAiC;YAC5C,OAAO,EAAE,CAAC,oBAAoB,CAAC;YAC/B,YAAY,EAAE,EAAE;SACjB,CAAC;QAEF,MAAM,WAAW,GAAG,MAAM,YAAY,CAAC,WAAW,CAChD,oBAAoB,EACpB,cAAc,CACf,CAAC;QACF,eAAe,GAAG,WAAW,CAAC,KAAK,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,GAAG,EAAE;QAC7B,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC1B,MAAM,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;QACxC,MAAM,CAAC,YAAY,CAAC,CAAC,WAAW,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sCAAsC,EAAE,GAAG,EAAE;QACpD,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,kBAAkB;YAClB,wBAAwB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAE9D,OAAO;YACP,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,eAAe,CAAC;iBACpB,GAAG,CAAC,eAAe,EAAE,UAAU,UAAU,EAAE,CAAC;iBAC5C,MAAM,CAAC,GAAG,CAAC;iBACX,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;gBACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YAEL,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,uCAAuC;YACvC,wBAAwB,CAAC,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAE7D,MAAM,SAAS,GAAwB;gBACrC,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,8BAA8B;gBACzC,gBAAgB,EAAE,CAAC,oBAAoB,CAAC;gBACxC,KAAK,EAAE,IAAI;aACZ,CAAC;YAEF,OAAO;YACP,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,eAAe,CAAC;iBACrB,GAAG,CAAC,eAAe,EAAE,UAAU,UAAU,EAAE,CAAC;iBAC5C,IAAI,CAAC,SAAS,CAAC;iBACf,MAAM,CAAC,GAAG,CAAC;iBACX,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBAC3C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;YAEL,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC5D,MAAM,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC;YACxE,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,OAAO;YACP,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,kCAAkC,CAAC;iBACvC,GAAG,CAAC,eAAe,EAAE,UAAU,UAAU,EAAE,CAAC;iBAC5C,MAAM,CAAC,GAAG,CAAC;iBACX,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;gBACxC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEL,MAAM,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC;gBAC5D,KAAK,EAAE,EAAE,EAAE,EAAE,oBAAoB,EAAE;aACpC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,cAAc,GAAmB;gBACrC,IAAI,EAAE,YAAY;gBAClB,SAAS,EAAE,yBAAyB;gBACpC,OAAO,EAAE,CAAC,oBAAoB,CAAC;gBAC/B,YAAY,EAAE,EAAE;aACjB,CAAC;YAEF,+DAA+D;YAC/D,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;YAErE,OAAO;YACP,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,IAAI,CAAC,yCAAyC,CAAC;iBAC/C,GAAG,CAAC,eAAe,EAAE,UAAU,UAAU,EAAE,CAAC;iBAC5C,IAAI,CAAC,cAAc,CAAC;iBACpB,MAAM,CAAC,GAAG,CAAC;iBACX,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;gBAC9C,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,CAAC;gBACzC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC5D,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oEAAoE,EAAE,KAAK,IAAI,EAAE;YAClF,kBAAkB;YAClB,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBACzC;oBACE,EAAE,EAAE,eAAe;oBACnB,IAAI,EAAE,gBAAgB;oBACtB,OAAO,EAAE,CAAC,oBAAoB,CAAC;oBAC/B,WAAW,EAAE,IAAI,IAAI,EAAE;iBACxB;aACF,CAAC,CAAC;YAEH,OAAO;YACP,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,yCAAyC,CAAC;iBAC9C,GAAG,CAAC,eAAe,EAAE,UAAU,UAAU,EAAE,CAAC;iBAC5C,MAAM,CAAC,GAAG,CAAC;iBACX,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;gBACvC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;YAEL,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC;gBACpD,KAAK,EAAE,EAAE,YAAY,EAAE,oBAAoB,EAAE;gBAC7C,KAAK,EAAE,EAAE,WAAW,EAAE,MAAM,EAAE;aAC/B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uCAAuC,EAAE,GAAG,EAAE;QACrD,uDAAuD;QACvD,SAAS,CAAC,GAAG,EAAE;YACb,MAAM,iBAAiB,GAAG;gBACxB,eAAe,EAAE,CAAC,GAAG,EAAE,EAAE;oBACvB,OAAO;wBACL,OAAO,EAAE,2BAA2B;wBACpC,UAAU,EAAE,GAAG,CAAC,UAAU,CAAC,IAAI;wBAC/B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;wBACnC,KAAK,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;qBACrC,CAAC;gBACJ,CAAC;aACF,CAAC;YAEF,MAAM,SAAS,GAAG;gBAChB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;oBACnD,OAAO,IAAI,CAAC;gBACd,CAAC,CAAC;aACH,CAAC;YAEF,GAAG,CAAC,GAAG,CAAC,4BAA4B,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;gBACvD,GAAG,CAAC,UAAU,GAAG,UAAU,CAAC;gBAC5B,GAAG,CAAC,sBAAsB,GAAG;oBAC3B,GAAG,EAAE,cAAc,UAAU,CAAC,EAAE,EAAE;oBAClC,MAAM,EAAE,CAAC,oBAAoB,CAAC;iBAC/B,CAAC;gBACF,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;YAEH,GAAG,CAAC,GAAG,CAAC,4BAA4B,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;gBACjD,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;YACtF,OAAO;YACP,MAAM,IAAA,mBAAO,EAAC,GAAG,CAAC,aAAa,EAAE,CAAC;iBAC/B,GAAG,CAAC,4BAA4B,CAAC;iBACjC,GAAG,CAAC,eAAe,EAAE,UAAU,eAAe,EAAE,CAAC;iBACjD,MAAM,CAAC,GAAG,CAAC;iBACX,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;gBAC3D,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YACvC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\tests\\integrador-e2e.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport request from 'supertest';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { JwtModule, JwtService } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { Integrador, IntegradorToken, TokenRevogado } from '../../../entities';\nimport { IntegradorModule } from '../integrador.module';\nimport { IntegradorService } from '../services/integrador.service';\nimport { IntegradorTokenService } from '../services/integrador-token.service';\nimport { CreateIntegradorDto } from '../dto/create-integrador.dto';\nimport { CreateTokenDto } from '../dto/create-token.dto';\nimport { Role } from '../../../auth/enums/role.enum';\n\n/**\n * Testes de integração (E2E) para o módulo de integradores.\n * Testa o fluxo completo de criação, validação e uso de tokens.\n */\ndescribe('Integrador E2E', () => {\n  let app: INestApplication;\n  let jwtService: JwtService;\n  let integradorService: IntegradorService;\n  let tokenService: IntegradorTokenService;\n  let integradorRepository: any;\n  let tokenRepository: any;\n  let tokenRevogadoRepository: any;\n  let adminToken: string;\n  let integrador: any;\n  let integradorToken: string;\n\n  // Mock dos repositórios\n  const mockIntegradorRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    remove: jest.fn(),\n    update: jest.fn(),\n  };\n\n  const mockTokenRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    find: jest.fn(),\n    findOne: jest.fn(),\n    remove: jest.fn(),\n  };\n\n  const mockTokenRevogadoRepository = {\n    create: jest.fn(),\n    save: jest.fn(),\n    findOne: jest.fn(),\n    createQueryBuilder: jest.fn().mockReturnThis(),\n    delete: jest.fn().mockReturnThis(),\n    from: jest.fn().mockReturnThis(),\n    where: jest.fn().mockReturnThis(),\n    execute: jest.fn(),\n  };\n\n  // Configuração do módulo de teste\n  beforeAll(async () => {\n    const moduleRef: TestingModule = await Test.createTestingModule({\n      imports: [\n        ConfigModule.forRoot({\n          isGlobal: true,\n          envFilePath: '.env.test',\n        }),\n        JwtModule.registerAsync({\n          imports: [ConfigModule],\n          inject: [ConfigService],\n          useFactory: () => ({\n            secret: 'test-secret',\n            signOptions: { expiresIn: '1d' },\n          }),\n        }),\n        IntegradorModule,\n      ],\n      providers: [\n        {\n          provide: getRepositoryToken(Integrador),\n          useValue: mockIntegradorRepository,\n        },\n        {\n          provide: getRepositoryToken(IntegradorToken),\n          useValue: mockTokenRepository,\n        },\n        {\n          provide: getRepositoryToken(TokenRevogado),\n          useValue: mockTokenRevogadoRepository,\n        },\n      ],\n    }).compile();\n\n    app = moduleRef.createNestApplication();\n    await app.init();\n\n    jwtService = moduleRef.get<JwtService>(JwtService);\n    integradorService = moduleRef.get<IntegradorService>(IntegradorService);\n    tokenService = moduleRef.get<IntegradorTokenService>(\n      IntegradorTokenService,\n    );\n    integradorRepository = moduleRef.get(getRepositoryToken(Integrador));\n    tokenRepository = moduleRef.get(getRepositoryToken(IntegradorToken));\n    tokenRevogadoRepository = moduleRef.get(getRepositoryToken(TokenRevogado));\n\n    // Criar token de admin para testes\n    adminToken = jwtService.sign({\n      sub: 'test-user',\n      name: 'Test Admin',\n      roles: [Role.ADMIN],\n    });\n\n    // Configurar mock para o serviço de integrador\n    integrador = {\n      id: 'test-integrador-id',\n      nome: 'Integrador de Teste',\n      descricao: 'Integrador para testes de integração',\n      ativo: true,\n      permissoesEscopo: ['read:dados_basicos', 'read:cidadaos'],\n      ipPermitidos: [],\n      dataCriacao: new Date(),\n      dataAtualizacao: new Date(),\n    };\n\n    // Mock para o repository\n    mockIntegradorRepository.findOne.mockImplementation((query) => {\n      if (query?.where?.id === 'test-integrador-id') {\n        return Promise.resolve(integrador);\n      }\n      if (query?.where?.nome === 'Integrador de Teste') {\n        return Promise.resolve(integrador);\n      }\n      return Promise.resolve(null);\n    });\n\n    mockIntegradorRepository.save.mockImplementation((entity) => {\n      return Promise.resolve({\n        ...entity,\n        id: entity.id || 'test-integrador-id',\n      });\n    });\n\n    mockIntegradorRepository.create.mockImplementation((dto) => {\n      return {\n        ...dto,\n        id: 'test-integrador-id',\n      };\n    });\n\n    // Configurar mocks para o repositório de tokens\n    mockTokenRepository.save.mockImplementation((entity) => {\n      return Promise.resolve({\n        ...entity,\n        id: entity.id || 'test-token-id',\n      });\n    });\n\n    mockTokenRepository.create.mockImplementation((dto) => {\n      return {\n        ...dto,\n        id: 'test-token-id',\n      };\n    });\n\n    mockTokenRepository.findOne.mockImplementation((query) => {\n      if (query?.where?.tokenHash) {\n        return Promise.resolve({\n          id: 'test-token-id',\n          integradorId: 'test-integrador-id',\n          nome: 'Token de Teste',\n          tokenHash: query.where.tokenHash,\n          escopos: ['read:dados_basicos'],\n          revogado: false,\n          ultimoUso: null,\n          dataCriacao: new Date(),\n        });\n      }\n      return Promise.resolve(null);\n    });\n\n    // Mock para o repository de tokens revogados\n    mockTokenRevogadoRepository.findOne.mockResolvedValue(null);\n\n    // Criar token de integrador para testes\n    const createTokenDto: CreateTokenDto = {\n      nome: 'Token de Teste',\n      descricao: 'Token para testes de integração',\n      escopos: ['read:dados_basicos'],\n      diasValidade: 30,\n    };\n\n    const tokenResult = await tokenService.createToken(\n      'test-integrador-id',\n      createTokenDto,\n    );\n    integradorToken = tokenResult.token;\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  it('deve estar definido', () => {\n    expect(app).toBeDefined();\n    expect(integradorService).toBeDefined();\n    expect(tokenService).toBeDefined();\n  });\n\n  describe('API de Gerenciamento de Integradores', () => {\n    it('GET /integradores - deve retornar lista de integradores para admin', async () => {\n      // Configurar mock\n      mockIntegradorRepository.find.mockResolvedValue([integrador]);\n\n      // Test\n      await request(app.getHttpServer())\n        .get('/integradores')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200)\n        .expect((res) => {\n          expect(res.body).toBeInstanceOf(Array);\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].id).toBe(integrador.id);\n        });\n\n      expect(mockIntegradorRepository.find).toHaveBeenCalled();\n    });\n\n    it('POST /integradores - deve criar um novo integrador', async () => {\n      // Configurar mock para evitar conflito\n      mockIntegradorRepository.findOne.mockResolvedValueOnce(null);\n\n      const createDto: CreateIntegradorDto = {\n        nome: 'Novo Integrador',\n        descricao: 'Descrição do novo integrador',\n        permissoesEscopo: ['read:dados_basicos'],\n        ativo: true,\n      };\n\n      // Test\n      await request(app.getHttpServer())\n        .post('/integradores')\n        .set('Authorization', `Bearer ${adminToken}`)\n        .send(createDto)\n        .expect(201)\n        .expect((res) => {\n          expect(res.body.nome).toBe(createDto.nome);\n          expect(res.body.descricao).toBe(createDto.descricao);\n        });\n\n      expect(mockIntegradorRepository.findOne).toHaveBeenCalled();\n      expect(mockIntegradorRepository.create).toHaveBeenCalledWith(createDto);\n      expect(mockIntegradorRepository.save).toHaveBeenCalled();\n    });\n\n    it('GET /integradores/:id - deve retornar um integrador pelo ID', async () => {\n      // Test\n      await request(app.getHttpServer())\n        .get(`/integradores/test-integrador-id`)\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200)\n        .expect((res) => {\n          expect(res.body.id).toBe(integrador.id);\n          expect(res.body.nome).toBe(integrador.nome);\n        });\n\n      expect(mockIntegradorRepository.findOne).toHaveBeenCalledWith({\n        where: { id: 'test-integrador-id' },\n      });\n    });\n  });\n\n  describe('API de Tokens', () => {\n    it('POST /integradores/:id/tokens - deve criar um novo token', async () => {\n      const createTokenDto: CreateTokenDto = {\n        nome: 'Novo Token',\n        descricao: 'Token para acesso à API',\n        escopos: ['read:dados_basicos'],\n        diasValidade: 30,\n      };\n\n      // Configurar jwtService.sign para retornar um token específico\n      jest.spyOn(jwtService, 'sign').mockReturnValueOnce('mock-token-jwt');\n\n      // Test\n      await request(app.getHttpServer())\n        .post(`/integradores/test-integrador-id/tokens`)\n        .set('Authorization', `Bearer ${adminToken}`)\n        .send(createTokenDto)\n        .expect(201)\n        .expect((res) => {\n          expect(res.body.token).toBe('mock-token-jwt');\n          expect(res.body.tokenInfo).toBeDefined();\n          expect(res.body.tokenInfo.nome).toBe(createTokenDto.nome);\n        });\n    });\n\n    it('GET /integradores/:id/tokens - deve listar tokens de um integrador', async () => {\n      // Configurar mock\n      mockTokenRepository.find.mockResolvedValue([\n        {\n          id: 'test-token-id',\n          nome: 'Token de Teste',\n          escopos: ['read:dados_basicos'],\n          dataCriacao: new Date(),\n        },\n      ]);\n\n      // Test\n      await request(app.getHttpServer())\n        .get(`/integradores/test-integrador-id/tokens`)\n        .set('Authorization', `Bearer ${adminToken}`)\n        .expect(200)\n        .expect((res) => {\n          expect(res.body).toBeInstanceOf(Array);\n          expect(res.body.length).toBe(1);\n          expect(res.body[0].id).toBe('test-token-id');\n        });\n\n      expect(mockTokenRepository.find).toHaveBeenCalledWith({\n        where: { integradorId: 'test-integrador-id' },\n        order: { dataCriacao: 'DESC' },\n      });\n    });\n  });\n\n  describe('API protegida por IntegradorAuthGuard', () => {\n    // Configurar um endpoint de teste protegido pelo guard\n    beforeAll(() => {\n      const mockApiController = {\n        getDadosBasicos: (req) => {\n          return {\n            message: 'Dados básicos disponíveis',\n            integrador: req.integrador.nome,\n            timestamp: new Date().toISOString(),\n            dados: { exemplo: 'dados de teste' },\n          };\n        },\n      };\n\n      const mockGuard = {\n        canActivate: jest.fn().mockImplementation(async () => {\n          return true;\n        }),\n      };\n\n      app.use('/api/exemplo/dados-basicos', (req, res, next) => {\n        req.integrador = integrador;\n        req.integradorTokenPayload = {\n          sub: `integrador:${integrador.id}`,\n          scopes: ['read:dados_basicos'],\n        };\n        next();\n      });\n\n      app.get('/api/exemplo/dados-basicos', (req, res) => {\n        res.json(mockApiController.getDadosBasicos(req));\n      });\n    });\n\n    it('GET /api/exemplo/dados-basicos - deve permitir acesso com token válido', async () => {\n      // Test\n      await request(app.getHttpServer())\n        .get('/api/exemplo/dados-basicos')\n        .set('Authorization', `Bearer ${integradorToken}`)\n        .expect(200)\n        .expect((res) => {\n          expect(res.body.message).toBe('Dados básicos disponíveis');\n          expect(res.body.dados).toBeDefined();\n        });\n    });\n  });\n});\n"],"version":3}