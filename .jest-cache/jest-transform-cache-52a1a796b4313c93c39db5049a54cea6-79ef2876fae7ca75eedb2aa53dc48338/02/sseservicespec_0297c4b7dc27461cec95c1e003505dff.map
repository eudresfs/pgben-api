{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\tests\\sse.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\tests\\sse.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { SseService } from '../services/sse.service';\nimport { SseNotification, SseConnection } from '../interfaces/sse-notification.interface';\nimport { Observable } from 'rxjs';\nimport { Request } from 'express';\n\ndescribe('SseService', () => {\n  let service: SseService;\n  let jwtService: JwtService;\n  let configService: ConfigService;\n\n  const mockJwtService = {\n    verifyAsync: jest.fn(),\n  };\n\n  const mockConfigService = {\n    get: jest.fn((key: string) => {\n      const config = {\n        'sse.heartbeatInterval': 30000,\n        'sse.connectionTimeout': 300000,\n        'sse.maxConnectionsPerUser': 5,\n        'sse.cleanupInterval': 60000,\n      };\n      return config[key];\n    }),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        SseService,\n        {\n          provide: JwtService,\n          useValue: mockJwtService,\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n      ],\n    }).compile();\n\n    service = module.get<SseService>(SseService);\n    jwtService = module.get<JwtService>(JwtService);\n    configService = module.get<ConfigService>(ConfigService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    // Limpar todas as conexões após cada teste\n    service.removeAllConnections();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('createConnection', () => {\n    it('should create a new SSE connection', (done) => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      const observable = service.createConnection(userId, mockRequest);\n\n      expect(observable).toBeInstanceOf(Observable);\n\n      // Verificar se a conexão foi adicionada\n      const stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(1);\n      expect(stats.activeConnections).toBe(1);\n      expect(stats.connectionsByUser[userId]).toBe(1);\n\n      done();\n    });\n\n    it('should limit connections per user', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      // Criar o máximo de conexões permitidas\n      for (let i = 0; i < 5; i++) {\n        service.createConnection(userId, mockRequest);\n      }\n\n      // Tentar criar uma conexão adicional\n      expect(() => {\n        service.createConnection(userId, mockRequest);\n      }).toThrow('Máximo de conexões por usuário atingido');\n    });\n\n    it('should generate unique connection IDs', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      const connection1 = service.createConnection(userId, mockRequest);\n      const connection2 = service.createConnection(userId, mockRequest);\n\n      // As conexões devem ter IDs diferentes\n      expect(connection1).not.toBe(connection2);\n    });\n  });\n\n  describe('sendNotificationToUser', () => {\n    it('should send notification to specific user', (done) => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      const notification: SseNotification = {\n        id: 'notif-123',\n        type: 'notification',\n        data: {\n          id: 'notif-123',\n          titulo: 'Teste',\n          conteudo: 'Conteúdo de teste',\n          tipo: 'info',\n          prioridade: 'media',\n          data_criacao: new Date().toISOString(),\n          lida: false,\n        },\n      };\n\n      // Criar conexão\n      const observable = service.createConnection(userId, mockRequest);\n      \n      // Subscrever para receber notificações\n      observable.subscribe({\n        next: (event) => {\n          if (event.type === 'notification') {\n            expect(event.data.titulo).toBe('Teste');\n            done();\n          }\n        },\n      });\n\n      // Enviar notificação\n      const result = service.sendNotificationToUser(userId, notification);\n      expect(result).toBe(true);\n    });\n\n    it('should return false when user has no connections', () => {\n      const userId = 'user-without-connections';\n      const notification: SseNotification = {\n        id: 'notif-123',\n        type: 'notification',\n        data: {\n          id: 'notif-123',\n          titulo: 'Teste',\n          conteudo: 'Conteúdo de teste',\n          tipo: 'info',\n          prioridade: 'media',\n          data_criacao: new Date().toISOString(),\n          lida: false,\n        },\n      };\n\n      const result = service.sendNotificationToUser(userId, notification);\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('broadcastToAllUsers', () => {\n    it('should send notification to all connected users', (done) => {\n      const user1 = 'user-1';\n      const user2 = 'user-2';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      const notification: SseNotification = {\n        id: 'notif-broadcast',\n        type: 'notification',\n        data: {\n          id: 'notif-broadcast',\n          titulo: 'Broadcast',\n          conteudo: 'Mensagem para todos',\n          tipo: 'info',\n          prioridade: 'media',\n          data_criacao: new Date().toISOString(),\n          lida: false,\n        },\n      };\n\n      let receivedCount = 0;\n      const expectedCount = 2;\n\n      // Criar conexões para dois usuários\n      const obs1 = service.createConnection(user1, mockRequest);\n      const obs2 = service.createConnection(user2, mockRequest);\n\n      // Subscrever ambas as conexões\n      [obs1, obs2].forEach((obs) => {\n        obs.subscribe({\n          next: (event) => {\n            if (event.type === 'notification') {\n              receivedCount++;\n              if (receivedCount === expectedCount) {\n                done();\n              }\n            }\n          },\n        });\n      });\n\n      // Enviar broadcast\n      const result = service.broadcastToAllUsers(notification);\n      expect(result).toBe(2); // Deve retornar o número de usuários que receberam\n    });\n  });\n\n  describe('removeConnection', () => {\n    it('should remove specific connection', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      // Criar conexão\n      service.createConnection(userId, mockRequest);\n      \n      let stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(1);\n\n      // Obter ID da conexão (simulado)\n      const connections = service['connections'];\n      const connectionId = Array.from(connections.keys())[0];\n\n      // Remover conexão\n      service.removeConnection(connectionId);\n\n      stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(0);\n      expect(stats.activeConnections).toBe(0);\n    });\n  });\n\n  describe('removeUserConnections', () => {\n    it('should remove all connections for a user', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      // Criar múltiplas conexões para o mesmo usuário\n      service.createConnection(userId, mockRequest);\n      service.createConnection(userId, mockRequest);\n      service.createConnection(userId, mockRequest);\n\n      let stats = service.getConnectionStats();\n      expect(stats.connectionsByUser[userId]).toBe(3);\n\n      // Remover todas as conexões do usuário\n      const removedCount = service.removeUserConnections(userId);\n      expect(removedCount).toBe(3);\n\n      stats = service.getConnectionStats();\n      expect(stats.connectionsByUser[userId]).toBeUndefined();\n      expect(stats.totalConnections).toBe(0);\n    });\n  });\n\n  describe('isUserConnected', () => {\n    it('should return true when user has active connections', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      expect(service.isUserConnected(userId)).toBe(false);\n\n      service.createConnection(userId, mockRequest);\n      expect(service.isUserConnected(userId)).toBe(true);\n    });\n  });\n\n  describe('getUserConnectionCount', () => {\n    it('should return correct connection count for user', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      expect(service.getUserConnectionCount(userId)).toBe(0);\n\n      service.createConnection(userId, mockRequest);\n      expect(service.getUserConnectionCount(userId)).toBe(1);\n\n      service.createConnection(userId, mockRequest);\n      expect(service.getUserConnectionCount(userId)).toBe(2);\n    });\n  });\n\n  describe('getConnectionStats', () => {\n    it('should return accurate connection statistics', () => {\n      const user1 = 'user-1';\n      const user2 = 'user-2';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      // Estado inicial\n      let stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(0);\n      expect(stats.activeConnections).toBe(0);\n      expect(stats.uniqueUsers).toBe(0);\n\n      // Adicionar conexões\n      service.createConnection(user1, mockRequest);\n      service.createConnection(user1, mockRequest);\n      service.createConnection(user2, mockRequest);\n\n      stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(3);\n      expect(stats.activeConnections).toBe(3);\n      expect(stats.uniqueUsers).toBe(2);\n      expect(stats.connectionsByUser[user1]).toBe(2);\n      expect(stats.connectionsByUser[user2]).toBe(1);\n    });\n  });\n\n  describe('heartbeat functionality', () => {\n    it('should send heartbeat events', (done) => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      const observable = service.createConnection(userId, mockRequest);\n      \n      observable.subscribe({\n        next: (event) => {\n          if (event.type === 'heartbeat') {\n            expect(event.data.timestamp).toBeDefined();\n            expect(event.data.server_time).toBeDefined();\n            done();\n          }\n        },\n      });\n\n      // Simular envio de heartbeat\n      service['sendHeartbeat']();\n    });\n  });\n\n  describe('cleanup functionality', () => {\n    it('should clean up inactive connections', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      // Criar conexão\n      service.createConnection(userId, mockRequest);\n      \n      let stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(1);\n\n      // Simular conexão inativa (modificar timestamp)\n      const connections = service['connections'];\n      const connection = Array.from(connections.values())[0];\n      connection.lastActivity = new Date(Date.now() - 400000); // 6 minutos atrás\n\n      // Executar limpeza\n      service['cleanupInactiveConnections']();\n\n      stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(0);\n    });\n  });\n\n  describe('error handling', () => {\n    it('should handle invalid notification data gracefully', () => {\n      const userId = 'user-123';\n      const invalidNotification = null as any;\n\n      expect(() => {\n        service.sendNotificationToUser(userId, invalidNotification);\n      }).not.toThrow();\n    });\n\n    it('should handle connection errors gracefully', () => {\n      const userId = 'user-123';\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      const observable = service.createConnection(userId, mockRequest);\n      \n      // Simular erro na conexão\n      expect(() => {\n        observable.subscribe({\n          error: (error) => {\n            expect(error).toBeDefined();\n          },\n        });\n      }).not.toThrow();\n    });\n  });\n\n  describe('memory management', () => {\n    it('should not exceed memory limits with many connections', () => {\n      const mockRequest = {\n        ip: '127.0.0.1',\n        headers: { 'user-agent': 'test-agent' },\n      } as Request;\n\n      // Criar muitas conexões para usuários diferentes\n      for (let i = 0; i < 100; i++) {\n        const userId = `user-${i}`;\n        service.createConnection(userId, mockRequest);\n      }\n\n      const stats = service.getConnectionStats();\n      expect(stats.totalConnections).toBe(100);\n      expect(stats.uniqueUsers).toBe(100);\n\n      // Verificar se o serviço ainda está responsivo\n      expect(service.isUserConnected('user-50')).toBe(true);\n    });\n  });\n});"],"version":3}