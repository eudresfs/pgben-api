{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\listeners\\solicitacao-event.listener.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\listeners\\solicitacao-event.listener.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { OnEvent } from '@nestjs/event-emitter';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Solicitacao } from '../../../entities/solicitacao.entity';\nimport { NotificacaoService } from '../services/notificacao.service';\nimport { PrazoSolicitacaoService } from '../services/prazo-solicitacao.service';\nimport {\n  SolicitacaoEventType,\n  SolicitacaoStatusChangedEvent,\n  SolicitacaoDeadlineExpiredEvent,\n} from '../events/solicitacao-events';\n\n/**\n * Listener para eventos de solicitação\n *\n * Esta classe implementa os listeners para reagir a eventos emitidos no sistema.\n * Cada método listener é responsável por executar ações específicas quando determinados eventos ocorrem.\n */\n@Injectable()\nexport class SolicitacaoEventListener {\n  private readonly logger = new Logger(SolicitacaoEventListener.name);\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    private readonly notificacaoService: NotificacaoService,\n    private readonly prazoService: PrazoSolicitacaoService,\n  ) {}\n\n  /**\n   * Listener para evento de alteração de status de solicitação\n   * @param evento Evento de alteração de status\n   */\n  @OnEvent(SolicitacaoEventType.STATUS_CHANGED)\n  async handleStatusChangedEvent(\n    evento: SolicitacaoStatusChangedEvent,\n  ): Promise<void> {\n    try {\n      this.logger.log(\n        `Processando evento de alteração de status: ${evento.solicitacaoId}`,\n      );\n\n      // Buscar a solicitação atualizada\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: evento.solicitacaoId },\n      });\n\n      if (!solicitacao) {\n        this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);\n        return;\n      }\n\n      // Enviar notificação sobre a alteração de status\n      this.notificacaoService.notificarAlteracaoStatus(\n        solicitacao,\n        evento.data.statusAnterior,\n        evento.data.observacao,\n      );\n\n      // Atualizar prazos com base no novo status\n      await this.prazoService.atualizarPrazosTransicao(\n        evento.solicitacaoId,\n        solicitacao.status,\n      );\n\n      this.logger.log(\n        `Evento de alteração de status processado: ${evento.solicitacaoId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar evento de alteração de status: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Listener para evento de prazo expirado\n   * @param evento Evento de prazo expirado\n   */\n  @OnEvent(SolicitacaoEventType.DEADLINE_EXPIRED)\n  async handleDeadlineExpiredEvent(\n    evento: SolicitacaoDeadlineExpiredEvent,\n  ): Promise<void> {\n    try {\n      this.logger.log(\n        `Processando evento de prazo expirado: ${evento.solicitacaoId}`,\n      );\n\n      // Buscar a solicitação\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: evento.solicitacaoId },\n      });\n\n      if (!solicitacao) {\n        this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);\n        return;\n      }\n\n      // Notificar sobre o prazo expirado\n      this.notificacaoService.notificarPrazoExpirado(\n        solicitacao,\n        evento.data.tipoPrazo,\n      );\n\n      this.logger.log(\n        `Evento de prazo expirado processado: ${evento.solicitacaoId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar evento de prazo expirado: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Listener para evento de determinação judicial anexada\n   * @param evento Evento de determinação judicial anexada\n   */\n  @OnEvent(SolicitacaoEventType.JUDICIAL_DETERMINATION_ATTACHED)\n  async handleJudicialDeterminationEvent(evento: any): Promise<void> {\n    try {\n      this.logger.log(\n        `Processando evento de determinação judicial: ${evento.solicitacaoId}`,\n      );\n\n      // Buscar a solicitação\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: evento.solicitacaoId },\n      });\n\n      if (!solicitacao) {\n        this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);\n        return;\n      }\n\n      // Atualizar flag de determinação judicial, se ainda não estiver atualizada\n      if (!solicitacao.determinacao_judicial_flag) {\n        solicitacao.determinacao_judicial_flag = true;\n        await this.solicitacaoRepository.save(solicitacao);\n      }\n\n      // Atualizar prazos para refletir a prioridade judicial\n      await this.prazoService.atualizarPrazosTransicao(\n        evento.solicitacaoId,\n        solicitacao.status,\n      );\n\n      // Notificar sobre a determinação judicial\n      this.notificacaoService.notificarDeterminacaoJudicial(solicitacao);\n\n      this.logger.log(\n        `Evento de determinação judicial processado: ${evento.solicitacaoId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar evento de determinação judicial: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Listener para evento de pendência criada\n   * @param evento Evento de pendência criada\n   */\n  @OnEvent(SolicitacaoEventType.PENDENCY_CREATED)\n  async handlePendencyCreatedEvent(evento: any): Promise<void> {\n    try {\n      this.logger.log(\n        `Processando evento de pendência criada: ${evento.data.pendenciaId}`,\n      );\n\n      // Aqui, poderíamos enviar notificações específicas, atualizar métricas, etc.\n      // Para o escopo atual, vamos apenas registrar o evento no log.\n\n      this.logger.log(\n        `Evento de pendência criada processado: ${evento.data.pendenciaId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar evento de pendência criada: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Listener para evento de pendência resolvida\n   * @param evento Evento de pendência resolvida\n   */\n  @OnEvent(SolicitacaoEventType.PENDENCY_RESOLVED)\n  async handlePendencyResolvedEvent(evento: any): Promise<void> {\n    try {\n      this.logger.log(\n        `Processando evento de pendência resolvida: ${evento.data.pendenciaId}`,\n      );\n\n      // Buscar a solicitação\n      const solicitacao = await this.solicitacaoRepository.findOne({\n        where: { id: evento.solicitacaoId },\n      });\n\n      if (!solicitacao) {\n        this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);\n        return;\n      }\n\n      // Verificar se existem outras pendências abertas\n      const pendenciasAbertas = await this.verificarPendenciasAbertas(\n        evento.solicitacaoId,\n      );\n\n      // Se não houver mais pendências abertas e a solicitação estiver em estado \"aguardando documentos\",\n      // podemos automaticamente avançar para o próximo estado do workflow\n      if (pendenciasAbertas === 0) {\n        this.logger.log(\n          `Todas as pendências resolvidas para a solicitação: ${evento.solicitacaoId}`,\n        );\n\n        // Aqui, poderíamos implementar uma transição automática de estado\n        // mas isso ficará para uma próxima fase da refatoração\n      }\n\n      this.logger.log(\n        `Evento de pendência resolvida processado: ${evento.data.pendenciaId}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar evento de pendência resolvida: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Verifica se existem pendências abertas para uma solicitação\n   * @param solicitacaoId ID da solicitação\n   * @returns Número de pendências abertas\n   */\n  private async verificarPendenciasAbertas(\n    solicitacaoId: string,\n  ): Promise<number> {\n    // Consulta para verificar pendências abertas (implementação fictícia)\n    // Em um ambiente real, isso seria implementado com uma consulta ao banco de dados\n    return 0;\n  }\n}\n"],"version":3}