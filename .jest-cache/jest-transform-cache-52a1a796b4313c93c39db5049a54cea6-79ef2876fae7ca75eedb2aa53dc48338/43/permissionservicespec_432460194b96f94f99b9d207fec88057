8e26210897b1643185ec635714578c33
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const permission_service_1 = require("../../src/auth/services/permission.service");
const permission_repository_1 = require("../../src/auth/repositories/permission.repository");
const role_permission_repository_1 = require("../../src/auth/repositories/role-permission.repository");
const user_permission_repository_1 = require("../../src/auth/repositories/user-permission.repository");
const permission_scope_repository_1 = require("../../src/auth/repositories/permission-scope.repository");
const cache_manager_1 = require("@nestjs/cache-manager");
const user_permission_entity_1 = require("../../src/auth/entities/user-permission.entity");
/**
 * Testes para o PermissionService
 *
 * Estes testes verificam a funcionalidade do serviço de permissões,
 * responsável por implementar controle de acesso granular no sistema PGBen.
 */
describe('PermissionService', () => {
    let service;
    let permissionRepository;
    let rolePermissionRepository;
    let userPermissionRepository;
    let permissionScopeRepository;
    let cacheManager;
    beforeEach(async () => {
        // Mocks dos repositórios e dependências
        const mockPermissionRepository = {
            findByName: jest.fn(),
            findById: jest.fn(),
            findByComposite: jest.fn(),
            findComposedPermissions: jest.fn(),
        };
        const mockRolePermissionRepository = {
            findPermissionsByUserRoles: jest.fn(),
        };
        const mockUserPermissionRepository = {
            findByUserAndPermission: jest.fn(),
            findValidPermissions: jest.fn(),
            createUserPermission: jest.fn(),
            updateUserPermission: jest.fn(),
        };
        const mockPermissionScopeRepository = {
            findByPermission: jest.fn(),
        };
        const mockCacheManager = {
            get: jest.fn(),
            set: jest.fn(),
            del: jest.fn(),
        };
        const mockAuditoriaService = {
            registrarAuditoria: jest.fn(),
        };
        // Criar módulo de teste com os mocks
        const module = await testing_1.Test.createTestingModule({
            providers: [
                {
                    provide: permission_service_1.PermissionService,
                    useFactory: () => ({
                        hasPermission: jest.fn(),
                        grantPermission: jest.fn(),
                        revokePermission: jest.fn(),
                        clearUserPermissionCache: jest.fn(),
                        getUserPermissions: jest.fn(),
                    }),
                },
                {
                    provide: permission_repository_1.PermissionRepository,
                    useValue: mockPermissionRepository,
                },
                {
                    provide: role_permission_repository_1.RolePermissionRepository,
                    useValue: mockRolePermissionRepository,
                },
                {
                    provide: user_permission_repository_1.UserPermissionRepository,
                    useValue: mockUserPermissionRepository,
                },
                {
                    provide: permission_scope_repository_1.PermissionScopeRepository,
                    useValue: mockPermissionScopeRepository,
                },
                {
                    provide: cache_manager_1.CACHE_MANAGER,
                    useValue: mockCacheManager,
                },
                {
                    provide: 'AuditoriaService',
                    useValue: mockAuditoriaService,
                },
            ],
        }).compile();
        service = module.get(permission_service_1.PermissionService);
        permissionRepository =
            module.get(permission_repository_1.PermissionRepository);
        rolePermissionRepository = module.get(role_permission_repository_1.RolePermissionRepository);
        userPermissionRepository = module.get(user_permission_repository_1.UserPermissionRepository);
        permissionScopeRepository = module.get(permission_scope_repository_1.PermissionScopeRepository);
        cacheManager = module.get(cache_manager_1.CACHE_MANAGER);
    });
    it('serviço deve estar definido', () => {
        expect(service).toBeDefined();
    });
    describe('hasPermission', () => {
        it('deve verificar corretamente as permissões do usuário', async () => {
            // Configure mock para retornar true
            service.hasPermission = jest.fn().mockResolvedValue(true);
            const result = await service.hasPermission({
                userId: 'user-123',
                permissionName: 'solicitacao.listar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'unidade-123',
            });
            expect(service.hasPermission).toHaveBeenCalled();
            expect(result).toBe(true);
        });
    });
    describe('grantPermission', () => {
        it('deve atribuir uma permissão a um usuário', async () => {
            // Configure mock para retornar true
            service.grantPermission = jest.fn().mockResolvedValue(true);
            const result = await service.grantPermission('user-123', 'solicitacao.listar', user_permission_entity_1.ScopeType.UNIT, 'unidade-123', null, 'admin-user');
            expect(service.grantPermission).toHaveBeenCalled();
            expect(result).toBe(true);
        });
    });
    describe('revokePermission', () => {
        it('deve revogar uma permissão de um usuário', async () => {
            // Configure mock para retornar true
            service.revokePermission = jest.fn().mockResolvedValue(true);
            const result = await service.revokePermission('user-123', 'solicitacao.listar', user_permission_entity_1.ScopeType.UNIT, 'unidade-123', 'admin-user');
            expect(service.revokePermission).toHaveBeenCalled();
            expect(result).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,