b7de90aa11dc51041ec4c3622cebf88c
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var SolicitacaoEventListener_1;
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolicitacaoEventListener = void 0;
const common_1 = require("@nestjs/common");
const event_emitter_1 = require("@nestjs/event-emitter");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const notificacao_service_1 = require("../services/notificacao.service");
const prazo_solicitacao_service_1 = require("../services/prazo-solicitacao.service");
const solicitacao_events_1 = require("../events/solicitacao-events");
/**
 * Listener para eventos de solicitação
 *
 * Esta classe implementa os listeners para reagir a eventos emitidos no sistema.
 * Cada método listener é responsável por executar ações específicas quando determinados eventos ocorrem.
 */
let SolicitacaoEventListener = SolicitacaoEventListener_1 = class SolicitacaoEventListener {
    solicitacaoRepository;
    notificacaoService;
    prazoService;
    logger = new common_1.Logger(SolicitacaoEventListener_1.name);
    constructor(solicitacaoRepository, notificacaoService, prazoService) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.notificacaoService = notificacaoService;
        this.prazoService = prazoService;
    }
    /**
     * Listener para evento de alteração de status de solicitação
     * @param evento Evento de alteração de status
     */
    async handleStatusChangedEvent(evento) {
        try {
            this.logger.log(`Processando evento de alteração de status: ${evento.solicitacaoId}`);
            // Buscar a solicitação atualizada
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: evento.solicitacaoId },
            });
            if (!solicitacao) {
                this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);
                return;
            }
            // Enviar notificação sobre a alteração de status
            this.notificacaoService.notificarAlteracaoStatus(solicitacao, evento.data.statusAnterior, evento.data.observacao);
            // Atualizar prazos com base no novo status
            await this.prazoService.atualizarPrazosTransicao(evento.solicitacaoId, solicitacao.status);
            this.logger.log(`Evento de alteração de status processado: ${evento.solicitacaoId}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar evento de alteração de status: ${error.message}`, error.stack);
        }
    }
    /**
     * Listener para evento de prazo expirado
     * @param evento Evento de prazo expirado
     */
    async handleDeadlineExpiredEvent(evento) {
        try {
            this.logger.log(`Processando evento de prazo expirado: ${evento.solicitacaoId}`);
            // Buscar a solicitação
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: evento.solicitacaoId },
            });
            if (!solicitacao) {
                this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);
                return;
            }
            // Notificar sobre o prazo expirado
            this.notificacaoService.notificarPrazoExpirado(solicitacao, evento.data.tipoPrazo);
            this.logger.log(`Evento de prazo expirado processado: ${evento.solicitacaoId}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar evento de prazo expirado: ${error.message}`, error.stack);
        }
    }
    /**
     * Listener para evento de determinação judicial anexada
     * @param evento Evento de determinação judicial anexada
     */
    async handleJudicialDeterminationEvent(evento) {
        try {
            this.logger.log(`Processando evento de determinação judicial: ${evento.solicitacaoId}`);
            // Buscar a solicitação
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: evento.solicitacaoId },
            });
            if (!solicitacao) {
                this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);
                return;
            }
            // Atualizar flag de determinação judicial, se ainda não estiver atualizada
            if (!solicitacao.determinacao_judicial_flag) {
                solicitacao.determinacao_judicial_flag = true;
                await this.solicitacaoRepository.save(solicitacao);
            }
            // Atualizar prazos para refletir a prioridade judicial
            await this.prazoService.atualizarPrazosTransicao(evento.solicitacaoId, solicitacao.status);
            // Notificar sobre a determinação judicial
            this.notificacaoService.notificarDeterminacaoJudicial(solicitacao);
            this.logger.log(`Evento de determinação judicial processado: ${evento.solicitacaoId}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar evento de determinação judicial: ${error.message}`, error.stack);
        }
    }
    /**
     * Listener para evento de pendência criada
     * @param evento Evento de pendência criada
     */
    async handlePendencyCreatedEvent(evento) {
        try {
            this.logger.log(`Processando evento de pendência criada: ${evento.data.pendenciaId}`);
            // Aqui, poderíamos enviar notificações específicas, atualizar métricas, etc.
            // Para o escopo atual, vamos apenas registrar o evento no log.
            this.logger.log(`Evento de pendência criada processado: ${evento.data.pendenciaId}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar evento de pendência criada: ${error.message}`, error.stack);
        }
    }
    /**
     * Listener para evento de pendência resolvida
     * @param evento Evento de pendência resolvida
     */
    async handlePendencyResolvedEvent(evento) {
        try {
            this.logger.log(`Processando evento de pendência resolvida: ${evento.data.pendenciaId}`);
            // Buscar a solicitação
            const solicitacao = await this.solicitacaoRepository.findOne({
                where: { id: evento.solicitacaoId },
            });
            if (!solicitacao) {
                this.logger.warn(`Solicitação não encontrada: ${evento.solicitacaoId}`);
                return;
            }
            // Verificar se existem outras pendências abertas
            const pendenciasAbertas = await this.verificarPendenciasAbertas(evento.solicitacaoId);
            // Se não houver mais pendências abertas e a solicitação estiver em estado "aguardando documentos",
            // podemos automaticamente avançar para o próximo estado do workflow
            if (pendenciasAbertas === 0) {
                this.logger.log(`Todas as pendências resolvidas para a solicitação: ${evento.solicitacaoId}`);
                // Aqui, poderíamos implementar uma transição automática de estado
                // mas isso ficará para uma próxima fase da refatoração
            }
            this.logger.log(`Evento de pendência resolvida processado: ${evento.data.pendenciaId}`);
        }
        catch (error) {
            this.logger.error(`Erro ao processar evento de pendência resolvida: ${error.message}`, error.stack);
        }
    }
    /**
     * Verifica se existem pendências abertas para uma solicitação
     * @param solicitacaoId ID da solicitação
     * @returns Número de pendências abertas
     */
    async verificarPendenciasAbertas(solicitacaoId) {
        // Consulta para verificar pendências abertas (implementação fictícia)
        // Em um ambiente real, isso seria implementado com uma consulta ao banco de dados
        return 0;
    }
};
exports.SolicitacaoEventListener = SolicitacaoEventListener;
__decorate([
    (0, event_emitter_1.OnEvent)(solicitacao_events_1.SolicitacaoEventType.STATUS_CHANGED),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_d = typeof solicitacao_events_1.SolicitacaoStatusChangedEvent !== "undefined" && solicitacao_events_1.SolicitacaoStatusChangedEvent) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], SolicitacaoEventListener.prototype, "handleStatusChangedEvent", null);
__decorate([
    (0, event_emitter_1.OnEvent)(solicitacao_events_1.SolicitacaoEventType.DEADLINE_EXPIRED),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_f = typeof solicitacao_events_1.SolicitacaoDeadlineExpiredEvent !== "undefined" && solicitacao_events_1.SolicitacaoDeadlineExpiredEvent) === "function" ? _f : Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], SolicitacaoEventListener.prototype, "handleDeadlineExpiredEvent", null);
__decorate([
    (0, event_emitter_1.OnEvent)(solicitacao_events_1.SolicitacaoEventType.JUDICIAL_DETERMINATION_ATTACHED),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], SolicitacaoEventListener.prototype, "handleJudicialDeterminationEvent", null);
__decorate([
    (0, event_emitter_1.OnEvent)(solicitacao_events_1.SolicitacaoEventType.PENDENCY_CREATED),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], SolicitacaoEventListener.prototype, "handlePendencyCreatedEvent", null);
__decorate([
    (0, event_emitter_1.OnEvent)(solicitacao_events_1.SolicitacaoEventType.PENDENCY_RESOLVED),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], SolicitacaoEventListener.prototype, "handlePendencyResolvedEvent", null);
exports.SolicitacaoEventListener = SolicitacaoEventListener = SolicitacaoEventListener_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof notificacao_service_1.NotificacaoService !== "undefined" && notificacao_service_1.NotificacaoService) === "function" ? _b : Object, typeof (_c = typeof prazo_solicitacao_service_1.PrazoSolicitacaoService !== "undefined" && prazo_solicitacao_service_1.PrazoSolicitacaoService) === "function" ? _c : Object])
], SolicitacaoEventListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHNvbGljaXRhY2FvXFxsaXN0ZW5lcnNcXHNvbGljaXRhY2FvLWV2ZW50Lmxpc3RlbmVyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQW9EO0FBQ3BELHlEQUFnRDtBQUNoRCw2Q0FBbUQ7QUFDbkQscUNBQXFDO0FBQ3JDLDZFQUFtRTtBQUNuRSx5RUFBcUU7QUFDckUscUZBQWdGO0FBQ2hGLHFFQUlzQztBQUV0Qzs7Ozs7R0FLRztBQUVJLElBQU0sd0JBQXdCLGdDQUE5QixNQUFNLHdCQUF3QjtJQUtoQjtJQUNBO0lBQ0E7SUFORixNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsMEJBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEUsWUFFbUIscUJBQThDLEVBQzlDLGtCQUFzQyxFQUN0QyxZQUFxQztRQUZyQywwQkFBcUIsR0FBckIscUJBQXFCLENBQXlCO1FBQzlDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDdEMsaUJBQVksR0FBWixZQUFZLENBQXlCO0lBQ3JELENBQUM7SUFFSjs7O09BR0c7SUFFRyxBQUFOLEtBQUssQ0FBQyx3QkFBd0IsQ0FDNUIsTUFBcUM7UUFFckMsSUFBSSxDQUFDO1lBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQ2IsOENBQThDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FDckUsQ0FBQztZQUVGLGtDQUFrQztZQUNsQyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUM7Z0JBQzNELEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFO2FBQ3BDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDakIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsK0JBQStC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LENBQUM7Q0FDRixDQUFBO0FBck9ZLDREQUF3QjtBQWU3QjtJQURMLElBQUEsdUJBQU8sRUFBQyx5Q0FBb0IsQ0FBQyxjQUFjLENBQUM7O3lEQUVuQyxrREFBNkIsb0JBQTdCLGtEQUE2Qjt3REFDcEMsT0FBTyxvQkFBUCxPQUFPO3dFQXNDVDtBQU9LO0lBREwsSUFBQSx1QkFBTyxFQUFDLHlDQUFvQixDQUFDLGdCQUFnQixDQUFDOzt5REFFckMsb0RBQStCLG9CQUEvQixvREFBK0I7d0RBQ3RDLE9BQU8sb0JBQVAsT0FBTzswRUErQlQ7QUFPSztJQURMLElBQUEsdUJBQU8sRUFBQyx5Q0FBb0IsQ0FBQywrQkFBK0IsQ0FBQzs7O3dEQUNULE9BQU8sb0JBQVAsT0FBTztnRkF3QzNEO0FBT0s7SUFETCxJQUFBLHVCQUFPLEVBQUMseUNBQW9CLENBQUMsZ0JBQWdCLENBQUM7Ozt3REFDQSxPQUFPLG9CQUFQLE9BQU87MEVBa0JyRDtBQU9LO0lBREwsSUFBQSx1QkFBTyxFQUFDLHlDQUFvQixDQUFDLGlCQUFpQixDQUFDOzs7d0RBQ0EsT0FBTyxvQkFBUCxPQUFPOzJFQXlDdEQ7bUNBdk5VLHdCQUF3QjtJQURwQyxJQUFBLG1CQUFVLEdBQUU7SUFLUixXQUFBLElBQUEsMEJBQWdCLEVBQUMsZ0NBQVcsQ0FBQyxDQUFBO3lEQUNVLG9CQUFVLG9CQUFWLG9CQUFVLG9EQUNiLHdDQUFrQixvQkFBbEIsd0NBQWtCLG9EQUN4QixtREFBdUIsb0JBQXZCLG1EQUF1QjtHQVA3Qyx3QkFBd0IsQ0FxT3BDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxzb2xpY2l0YWNhb1xcbGlzdGVuZXJzXFxzb2xpY2l0YWNhby1ldmVudC5saXN0ZW5lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBMb2dnZXIgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBPbkV2ZW50IH0gZnJvbSAnQG5lc3Rqcy9ldmVudC1lbWl0dGVyJztcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHsgU29saWNpdGFjYW8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdGllcy9zb2xpY2l0YWNhby5lbnRpdHknO1xuaW1wb3J0IHsgTm90aWZpY2FjYW9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbm90aWZpY2FjYW8uc2VydmljZSc7XG5pbXBvcnQgeyBQcmF6b1NvbGljaXRhY2FvU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3ByYXpvLXNvbGljaXRhY2FvLnNlcnZpY2UnO1xuaW1wb3J0IHtcbiAgU29saWNpdGFjYW9FdmVudFR5cGUsXG4gIFNvbGljaXRhY2FvU3RhdHVzQ2hhbmdlZEV2ZW50LFxuICBTb2xpY2l0YWNhb0RlYWRsaW5lRXhwaXJlZEV2ZW50LFxufSBmcm9tICcuLi9ldmVudHMvc29saWNpdGFjYW8tZXZlbnRzJztcblxuLyoqXG4gKiBMaXN0ZW5lciBwYXJhIGV2ZW50b3MgZGUgc29saWNpdGHDp8Ojb1xuICpcbiAqIEVzdGEgY2xhc3NlIGltcGxlbWVudGEgb3MgbGlzdGVuZXJzIHBhcmEgcmVhZ2lyIGEgZXZlbnRvcyBlbWl0aWRvcyBubyBzaXN0ZW1hLlxuICogQ2FkYSBtw6l0b2RvIGxpc3RlbmVyIMOpIHJlc3BvbnPDoXZlbCBwb3IgZXhlY3V0YXIgYcOnw7VlcyBlc3BlY8OtZmljYXMgcXVhbmRvIGRldGVybWluYWRvcyBldmVudG9zIG9jb3JyZW0uXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTb2xpY2l0YWNhb0V2ZW50TGlzdGVuZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlciA9IG5ldyBMb2dnZXIoU29saWNpdGFjYW9FdmVudExpc3RlbmVyLm5hbWUpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFNvbGljaXRhY2FvKVxuICAgIHByaXZhdGUgcmVhZG9ubHkgc29saWNpdGFjYW9SZXBvc2l0b3J5OiBSZXBvc2l0b3J5PFNvbGljaXRhY2FvPixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmaWNhY2FvU2VydmljZTogTm90aWZpY2FjYW9TZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJhem9TZXJ2aWNlOiBQcmF6b1NvbGljaXRhY2FvU2VydmljZSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBMaXN0ZW5lciBwYXJhIGV2ZW50byBkZSBhbHRlcmHDp8OjbyBkZSBzdGF0dXMgZGUgc29saWNpdGHDp8Ojb1xuICAgKiBAcGFyYW0gZXZlbnRvIEV2ZW50byBkZSBhbHRlcmHDp8OjbyBkZSBzdGF0dXNcbiAgICovXG4gIEBPbkV2ZW50KFNvbGljaXRhY2FvRXZlbnRUeXBlLlNUQVRVU19DSEFOR0VEKVxuICBhc3luYyBoYW5kbGVTdGF0dXNDaGFuZ2VkRXZlbnQoXG4gICAgZXZlbnRvOiBTb2xpY2l0YWNhb1N0YXR1c0NoYW5nZWRFdmVudCxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcbiAgICAgICAgYFByb2Nlc3NhbmRvIGV2ZW50byBkZSBhbHRlcmHDp8OjbyBkZSBzdGF0dXM6ICR7ZXZlbnRvLnNvbGljaXRhY2FvSWR9YCxcbiAgICAgICk7XG5cbiAgICAgIC8vIEJ1c2NhciBhIHNvbGljaXRhw6fDo28gYXR1YWxpemFkYVxuICAgICAgY29uc3Qgc29saWNpdGFjYW8gPSBhd2FpdCB0aGlzLnNvbGljaXRhY2FvUmVwb3NpdG9yeS5maW5kT25lKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IGV2ZW50by5zb2xpY2l0YWNhb0lkIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFzb2xpY2l0YWNhbykge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGBTb2xpY2l0YcOnw6NvIG7Do28gZW5jb250cmFkYTogJHtldmVudG8uc29saWNpdGFjYW9JZH1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBFbnZpYXIgbm90aWZpY2HDp8OjbyBzb2JyZSBhIGFsdGVyYcOnw6NvIGRlIHN0YXR1c1xuICAgICAgdGhpcy5ub3RpZmljYWNhb1NlcnZpY2Uubm90aWZpY2FyQWx0ZXJhY2FvU3RhdHVzKFxuICAgICAgICBzb2xpY2l0YWNhbyxcbiAgICAgICAgZXZlbnRvLmRhdGEuc3RhdHVzQW50ZXJpb3IsXG4gICAgICAgIGV2ZW50by5kYXRhLm9ic2VydmFjYW8sXG4gICAgICApO1xuXG4gICAgICAvLyBBdHVhbGl6YXIgcHJhem9zIGNvbSBiYXNlIG5vIG5vdm8gc3RhdHVzXG4gICAgICBhd2FpdCB0aGlzLnByYXpvU2VydmljZS5hdHVhbGl6YXJQcmF6b3NUcmFuc2ljYW8oXG4gICAgICAgIGV2ZW50by5zb2xpY2l0YWNhb0lkLFxuICAgICAgICBzb2xpY2l0YWNhby5zdGF0dXMsXG4gICAgICApO1xuXG4gICAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICAgIGBFdmVudG8gZGUgYWx0ZXJhw6fDo28gZGUgc3RhdHVzIHByb2Nlc3NhZG86ICR7ZXZlbnRvLnNvbGljaXRhY2FvSWR9YCxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFxuICAgICAgICBgRXJybyBhbyBwcm9jZXNzYXIgZXZlbnRvIGRlIGFsdGVyYcOnw6NvIGRlIHN0YXR1czogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIGVycm9yLnN0YWNrLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuZXIgcGFyYSBldmVudG8gZGUgcHJhem8gZXhwaXJhZG9cbiAgICogQHBhcmFtIGV2ZW50byBFdmVudG8gZGUgcHJhem8gZXhwaXJhZG9cbiAgICovXG4gIEBPbkV2ZW50KFNvbGljaXRhY2FvRXZlbnRUeXBlLkRFQURMSU5FX0VYUElSRUQpXG4gIGFzeW5jIGhhbmRsZURlYWRsaW5lRXhwaXJlZEV2ZW50KFxuICAgIGV2ZW50bzogU29saWNpdGFjYW9EZWFkbGluZUV4cGlyZWRFdmVudCxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcbiAgICAgICAgYFByb2Nlc3NhbmRvIGV2ZW50byBkZSBwcmF6byBleHBpcmFkbzogJHtldmVudG8uc29saWNpdGFjYW9JZH1gLFxuICAgICAgKTtcblxuICAgICAgLy8gQnVzY2FyIGEgc29saWNpdGHDp8Ojb1xuICAgICAgY29uc3Qgc29saWNpdGFjYW8gPSBhd2FpdCB0aGlzLnNvbGljaXRhY2FvUmVwb3NpdG9yeS5maW5kT25lKHtcbiAgICAgICAgd2hlcmU6IHsgaWQ6IGV2ZW50by5zb2xpY2l0YWNhb0lkIH0sXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFzb2xpY2l0YWNhbykge1xuICAgICAgICB0aGlzLmxvZ2dlci53YXJuKGBTb2xpY2l0YcOnw6NvIG7Do28gZW5jb250cmFkYTogJHtldmVudG8uc29saWNpdGFjYW9JZH1gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBOb3RpZmljYXIgc29icmUgbyBwcmF6byBleHBpcmFkb1xuICAgICAgdGhpcy5ub3RpZmljYWNhb1NlcnZpY2Uubm90aWZpY2FyUHJhem9FeHBpcmFkbyhcbiAgICAgICAgc29saWNpdGFjYW8sXG4gICAgICAgIGV2ZW50by5kYXRhLnRpcG9QcmF6byxcbiAgICAgICk7XG5cbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcbiAgICAgICAgYEV2ZW50byBkZSBwcmF6byBleHBpcmFkbyBwcm9jZXNzYWRvOiAke2V2ZW50by5zb2xpY2l0YWNhb0lkfWAsXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEVycm8gYW8gcHJvY2Vzc2FyIGV2ZW50byBkZSBwcmF6byBleHBpcmFkbzogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIGVycm9yLnN0YWNrLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuZXIgcGFyYSBldmVudG8gZGUgZGV0ZXJtaW5hw6fDo28ganVkaWNpYWwgYW5leGFkYVxuICAgKiBAcGFyYW0gZXZlbnRvIEV2ZW50byBkZSBkZXRlcm1pbmHDp8OjbyBqdWRpY2lhbCBhbmV4YWRhXG4gICAqL1xuICBAT25FdmVudChTb2xpY2l0YWNhb0V2ZW50VHlwZS5KVURJQ0lBTF9ERVRFUk1JTkFUSU9OX0FUVEFDSEVEKVxuICBhc3luYyBoYW5kbGVKdWRpY2lhbERldGVybWluYXRpb25FdmVudChldmVudG86IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICAgIGBQcm9jZXNzYW5kbyBldmVudG8gZGUgZGV0ZXJtaW5hw6fDo28ganVkaWNpYWw6ICR7ZXZlbnRvLnNvbGljaXRhY2FvSWR9YCxcbiAgICAgICk7XG5cbiAgICAgIC8vIEJ1c2NhciBhIHNvbGljaXRhw6fDo29cbiAgICAgIGNvbnN0IHNvbGljaXRhY2FvID0gYXdhaXQgdGhpcy5zb2xpY2l0YWNhb1JlcG9zaXRvcnkuZmluZE9uZSh7XG4gICAgICAgIHdoZXJlOiB7IGlkOiBldmVudG8uc29saWNpdGFjYW9JZCB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghc29saWNpdGFjYW8pIHtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgU29saWNpdGHDp8OjbyBuw6NvIGVuY29udHJhZGE6ICR7ZXZlbnRvLnNvbGljaXRhY2FvSWR9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gQXR1YWxpemFyIGZsYWcgZGUgZGV0ZXJtaW5hw6fDo28ganVkaWNpYWwsIHNlIGFpbmRhIG7Do28gZXN0aXZlciBhdHVhbGl6YWRhXG4gICAgICBpZiAoIXNvbGljaXRhY2FvLmRldGVybWluYWNhb19qdWRpY2lhbF9mbGFnKSB7XG4gICAgICAgIHNvbGljaXRhY2FvLmRldGVybWluYWNhb19qdWRpY2lhbF9mbGFnID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgdGhpcy5zb2xpY2l0YWNhb1JlcG9zaXRvcnkuc2F2ZShzb2xpY2l0YWNhbyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEF0dWFsaXphciBwcmF6b3MgcGFyYSByZWZsZXRpciBhIHByaW9yaWRhZGUganVkaWNpYWxcbiAgICAgIGF3YWl0IHRoaXMucHJhem9TZXJ2aWNlLmF0dWFsaXphclByYXpvc1RyYW5zaWNhbyhcbiAgICAgICAgZXZlbnRvLnNvbGljaXRhY2FvSWQsXG4gICAgICAgIHNvbGljaXRhY2FvLnN0YXR1cyxcbiAgICAgICk7XG5cbiAgICAgIC8vIE5vdGlmaWNhciBzb2JyZSBhIGRldGVybWluYcOnw6NvIGp1ZGljaWFsXG4gICAgICB0aGlzLm5vdGlmaWNhY2FvU2VydmljZS5ub3RpZmljYXJEZXRlcm1pbmFjYW9KdWRpY2lhbChzb2xpY2l0YWNhbyk7XG5cbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcbiAgICAgICAgYEV2ZW50byBkZSBkZXRlcm1pbmHDp8OjbyBqdWRpY2lhbCBwcm9jZXNzYWRvOiAke2V2ZW50by5zb2xpY2l0YWNhb0lkfWAsXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEVycm8gYW8gcHJvY2Vzc2FyIGV2ZW50byBkZSBkZXRlcm1pbmHDp8OjbyBqdWRpY2lhbDogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIGVycm9yLnN0YWNrLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuZXIgcGFyYSBldmVudG8gZGUgcGVuZMOqbmNpYSBjcmlhZGFcbiAgICogQHBhcmFtIGV2ZW50byBFdmVudG8gZGUgcGVuZMOqbmNpYSBjcmlhZGFcbiAgICovXG4gIEBPbkV2ZW50KFNvbGljaXRhY2FvRXZlbnRUeXBlLlBFTkRFTkNZX0NSRUFURUQpXG4gIGFzeW5jIGhhbmRsZVBlbmRlbmN5Q3JlYXRlZEV2ZW50KGV2ZW50bzogYW55KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcbiAgICAgICAgYFByb2Nlc3NhbmRvIGV2ZW50byBkZSBwZW5kw6puY2lhIGNyaWFkYTogJHtldmVudG8uZGF0YS5wZW5kZW5jaWFJZH1gLFxuICAgICAgKTtcblxuICAgICAgLy8gQXF1aSwgcG9kZXLDrWFtb3MgZW52aWFyIG5vdGlmaWNhw6fDtWVzIGVzcGVjw61maWNhcywgYXR1YWxpemFyIG3DqXRyaWNhcywgZXRjLlxuICAgICAgLy8gUGFyYSBvIGVzY29wbyBhdHVhbCwgdmFtb3MgYXBlbmFzIHJlZ2lzdHJhciBvIGV2ZW50byBubyBsb2cuXG5cbiAgICAgIHRoaXMubG9nZ2VyLmxvZyhcbiAgICAgICAgYEV2ZW50byBkZSBwZW5kw6puY2lhIGNyaWFkYSBwcm9jZXNzYWRvOiAke2V2ZW50by5kYXRhLnBlbmRlbmNpYUlkfWAsXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEVycm8gYW8gcHJvY2Vzc2FyIGV2ZW50byBkZSBwZW5kw6puY2lhIGNyaWFkYTogJHtlcnJvci5tZXNzYWdlfWAsXG4gICAgICAgIGVycm9yLnN0YWNrLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGlzdGVuZXIgcGFyYSBldmVudG8gZGUgcGVuZMOqbmNpYSByZXNvbHZpZGFcbiAgICogQHBhcmFtIGV2ZW50byBFdmVudG8gZGUgcGVuZMOqbmNpYSByZXNvbHZpZGFcbiAgICovXG4gIEBPbkV2ZW50KFNvbGljaXRhY2FvRXZlbnRUeXBlLlBFTkRFTkNZX1JFU09MVkVEKVxuICBhc3luYyBoYW5kbGVQZW5kZW5jeVJlc29sdmVkRXZlbnQoZXZlbnRvOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgICBgUHJvY2Vzc2FuZG8gZXZlbnRvIGRlIHBlbmTDqm5jaWEgcmVzb2x2aWRhOiAke2V2ZW50by5kYXRhLnBlbmRlbmNpYUlkfWAsXG4gICAgICApO1xuXG4gICAgICAvLyBCdXNjYXIgYSBzb2xpY2l0YcOnw6NvXG4gICAgICBjb25zdCBzb2xpY2l0YWNhbyA9IGF3YWl0IHRoaXMuc29saWNpdGFjYW9SZXBvc2l0b3J5LmZpbmRPbmUoe1xuICAgICAgICB3aGVyZTogeyBpZDogZXZlbnRvLnNvbGljaXRhY2FvSWQgfSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXNvbGljaXRhY2FvKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oYFNvbGljaXRhw6fDo28gbsOjbyBlbmNvbnRyYWRhOiAke2V2ZW50by5zb2xpY2l0YWNhb0lkfWApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFZlcmlmaWNhciBzZSBleGlzdGVtIG91dHJhcyBwZW5kw6puY2lhcyBhYmVydGFzXG4gICAgICBjb25zdCBwZW5kZW5jaWFzQWJlcnRhcyA9IGF3YWl0IHRoaXMudmVyaWZpY2FyUGVuZGVuY2lhc0FiZXJ0YXMoXG4gICAgICAgIGV2ZW50by5zb2xpY2l0YWNhb0lkLFxuICAgICAgKTtcblxuICAgICAgLy8gU2UgbsOjbyBob3V2ZXIgbWFpcyBwZW5kw6puY2lhcyBhYmVydGFzIGUgYSBzb2xpY2l0YcOnw6NvIGVzdGl2ZXIgZW0gZXN0YWRvIFwiYWd1YXJkYW5kbyBkb2N1bWVudG9zXCIsXG4gICAgICAvLyBwb2RlbW9zIGF1dG9tYXRpY2FtZW50ZSBhdmFuw6dhciBwYXJhIG8gcHLDs3hpbW8gZXN0YWRvIGRvIHdvcmtmbG93XG4gICAgICBpZiAocGVuZGVuY2lhc0FiZXJ0YXMgPT09IDApIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgICAgIGBUb2RhcyBhcyBwZW5kw6puY2lhcyByZXNvbHZpZGFzIHBhcmEgYSBzb2xpY2l0YcOnw6NvOiAke2V2ZW50by5zb2xpY2l0YWNhb0lkfWAsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQXF1aSwgcG9kZXLDrWFtb3MgaW1wbGVtZW50YXIgdW1hIHRyYW5zacOnw6NvIGF1dG9tw6F0aWNhIGRlIGVzdGFkb1xuICAgICAgICAvLyBtYXMgaXNzbyBmaWNhcsOhIHBhcmEgdW1hIHByw7N4aW1hIGZhc2UgZGEgcmVmYXRvcmHDp8Ojb1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICAgIGBFdmVudG8gZGUgcGVuZMOqbmNpYSByZXNvbHZpZGEgcHJvY2Vzc2FkbzogJHtldmVudG8uZGF0YS5wZW5kZW5jaWFJZH1gLFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIGBFcnJvIGFvIHByb2Nlc3NhciBldmVudG8gZGUgcGVuZMOqbmNpYSByZXNvbHZpZGE6ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBlcnJvci5zdGFjayxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIGV4aXN0ZW0gcGVuZMOqbmNpYXMgYWJlcnRhcyBwYXJhIHVtYSBzb2xpY2l0YcOnw6NvXG4gICAqIEBwYXJhbSBzb2xpY2l0YWNhb0lkIElEIGRhIHNvbGljaXRhw6fDo29cbiAgICogQHJldHVybnMgTsO6bWVybyBkZSBwZW5kw6puY2lhcyBhYmVydGFzXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHZlcmlmaWNhclBlbmRlbmNpYXNBYmVydGFzKFxuICAgIHNvbGljaXRhY2FvSWQ6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICAvLyBDb25zdWx0YSBwYXJhIHZlcmlmaWNhciBwZW5kw6puY2lhcyBhYmVydGFzIChpbXBsZW1lbnRhw6fDo28gZmljdMOtY2lhKVxuICAgIC8vIEVtIHVtIGFtYmllbnRlIHJlYWwsIGlzc28gc2VyaWEgaW1wbGVtZW50YWRvIGNvbSB1bWEgY29uc3VsdGEgYW8gYmFuY28gZGUgZGFkb3NcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9