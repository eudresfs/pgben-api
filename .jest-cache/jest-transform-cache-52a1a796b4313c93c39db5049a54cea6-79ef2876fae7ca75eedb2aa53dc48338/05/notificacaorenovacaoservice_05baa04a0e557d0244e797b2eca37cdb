1884b1cf47ab62ff213269fa3aa0b123
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var NotificacaoRenovacaoService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificacaoRenovacaoService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const entities_1 = require("../../../entities");
/**
 * Serviço de notificação para renovações automáticas
 *
 * Responsável por gerenciar as notificações relacionadas às renovações automáticas
 * de benefícios, incluindo alertas de renovações pendentes e notificações de renovações
 * processadas.
 */
let NotificacaoRenovacaoService = NotificacaoRenovacaoService_1 = class NotificacaoRenovacaoService {
    solicitacaoRepository;
    logger = new common_1.Logger(NotificacaoRenovacaoService_1.name);
    constructor(solicitacaoRepository) {
        this.solicitacaoRepository = solicitacaoRepository;
    }
    /**
     * Notifica sobre renovações pendentes
     * @param solicitacoes Lista de solicitações com renovações pendentes
     */
    async notificarRenovacoesPendentes(solicitacoes) {
        if (solicitacoes.length === 0) {
            this.logger.log('Nenhuma renovação pendente para notificar');
            return;
        }
        this.logger.log(`Notificando sobre ${solicitacoes.length} renovações pendentes`);
        // Aqui seria implementada a lógica de envio de notificações
        // por e-mail, SMS ou outro canal de comunicação
        // Exemplo de log para cada solicitação
        for (const solicitacao of solicitacoes) {
            this.logger.log(`Notificação enviada para renovação pendente: ID ${solicitacao.id}, ` +
                `Data prevista: ${solicitacao.data_proxima_renovacao}`);
        }
    }
    /**
     * Notifica sobre renovações processadas
     * @param solicitacoes Lista de solicitações renovadas
     * @param novasSolicitacoes Lista das novas solicitações geradas pela renovação
     */
    async notificarRenovacoesProcessadas(solicitacoes, novasSolicitacoes) {
        if (solicitacoes.length === 0) {
            this.logger.log('Nenhuma renovação processada para notificar');
            return;
        }
        this.logger.log(`Notificando sobre ${solicitacoes.length} renovações processadas`);
        // Aqui seria implementada a lógica de envio de notificações
        // por e-mail, SMS ou outro canal de comunicação
        // Exemplo de log para cada solicitação renovada
        for (let i = 0; i < solicitacoes.length; i++) {
            const solicitacaoOriginal = solicitacoes[i];
            const novaSolicitacao = novasSolicitacoes[i];
            this.logger.log(`Notificação enviada para renovação processada: ` +
                `Solicitação original: ${solicitacaoOriginal.id}, ` +
                `Nova solicitação: ${novaSolicitacao.id}`);
        }
    }
    /**
     * Notifica sobre falhas no processo de renovação
     * @param solicitacao Solicitação que falhou ao renovar
     * @param erro Descrição do erro
     */
    async notificarFalhaRenovacao(solicitacao, erro) {
        this.logger.error(`Falha na renovação da solicitação ${solicitacao.id}: ${erro}`, solicitacao);
        // Aqui seria implementada a lógica de envio de notificações
        // para administradores ou responsáveis pelo sistema
    }
    /**
     * Notifica sobre a proximidade da data de renovação
     * @param solicitacao Solicitação próxima da data de renovação
     * @param configuracao Configuração de renovação
     */
    async notificarProximidadeRenovacao(solicitacao, configuracao) {
        this.logger.log(`Notificando proximidade de renovação: Solicitação ${solicitacao.id}, ` +
            `Data prevista: ${solicitacao.data_proxima_renovacao}`);
        // Aqui seria implementada a lógica de envio de notificações
        // para o cidadão e/ou assistentes sociais responsáveis
    }
    /**
     * Notifica sobre renovações que requerem aprovação
     * @param solicitacoes Lista de solicitações que requerem aprovação para renovação
     */
    async notificarRenovacoesParaAprovacao(solicitacoes) {
        if (solicitacoes.length === 0) {
            this.logger.log('Nenhuma renovação pendente de aprovação para notificar');
            return;
        }
        this.logger.log(`Notificando sobre ${solicitacoes.length} renovações que requerem aprovação`);
        // Aqui seria implementada a lógica de envio de notificações
        // para os aprovadores ou gestores do sistema
        // Exemplo de log para cada solicitação
        for (const solicitacao of solicitacoes) {
            this.logger.log(`Notificação enviada para aprovação de renovação: ID ${solicitacao.id}, ` +
                `Data prevista: ${solicitacao.data_proxima_renovacao}`);
        }
    }
};
exports.NotificacaoRenovacaoService = NotificacaoRenovacaoService;
exports.NotificacaoRenovacaoService = NotificacaoRenovacaoService = NotificacaoRenovacaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(entities_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], NotificacaoRenovacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,