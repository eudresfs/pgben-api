{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\strategies\\local.strategy.ts","mappings":";;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,+CAAoD;AAEpD,mDAA0C;AAE1C,uEAA+D;AAC/D,4DAAyE;AACzE,sEAAgE;AAEhE,2DAAuD;AAGhD,IAAM,aAAa,qBAAnB,MAAM,aAAc,SAAQ,IAAA,2BAAgB,EAAC,yBAAQ,EAAE,kCAAc,CAAC;IAEjE;IACS;IAFnB,YACU,WAAwB,EACf,MAAiB;QAElC,iFAAiF;QACjF,KAAK,CAAC;YACJ,aAAa,EAAE,UAAU;YACzB,aAAa,EAAE,UAAU;YACzB,iBAAiB,EAAE,IAAI;SACxB,CAAC,CAAC;QARK,gBAAW,GAAX,WAAW,CAAa;QACf,WAAM,GAAN,MAAM,CAAW;QAQlC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,eAAa,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,QAAQ,CACZ,OAAgB,EAChB,QAAgB,EAChB,QAAgB;QAEhB,MAAM,GAAG,GAAG,IAAA,2BAAoB,EAAC,OAAO,CAAC,CAAC;QAE1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,aAAa,CAAC,CAAC;QAEzD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC1E,yGAAyG;QACzG,mDAAmD;QACnD,OAAO,IAAI,CAAC;IACd,CAAC;CACF,CAAA;AA5BY,sCAAa;wBAAb,aAAa;IADzB,IAAA,mBAAU,GAAE;yDAGY,0BAAW,oBAAX,0BAAW,oDACP,0BAAS,oBAAT,0BAAS;GAHzB,aAAa,CA4BzB","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\strategies\\local.strategy.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { Strategy } from 'passport-local';\n\nimport { AppLogger } from '../../shared/logger/logger.service';\nimport { createRequestContext } from '../../shared/request-context/util';\nimport { STRATEGY_LOCAL } from '../constants/strategy.constant';\nimport { UserAccessTokenClaims } from '../dtos/auth-token-output.dto';\nimport { AuthService } from '../services/auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy, STRATEGY_LOCAL) {\n  constructor(\n    private authService: AuthService,\n    private readonly logger: AppLogger,\n  ) {\n    // Add option passReqToCallback: true to configure strategy to be request-scoped.\n    super({\n      usernameField: 'username',\n      passwordField: 'password',\n      passReqToCallback: true,\n    });\n    this.logger.setContext(LocalStrategy.name);\n  }\n\n  async validate(\n    request: Request,\n    username: string,\n    password: string,\n  ): Promise<UserAccessTokenClaims> {\n    const ctx = createRequestContext(request);\n\n    this.logger.log(ctx, `${this.validate.name} was called`);\n\n    const user = await this.authService.validateUser(ctx, username, password);\n    // Passport automatically creates a user object, based on the value we return from the validate() method,\n    // and assigns it to the Request object as req.user\n    return user;\n  }\n}\n"],"version":3}