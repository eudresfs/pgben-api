{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\notificacao-renovacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\notificacao-renovacao.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Solicitacao, ConfiguracaoRenovacao } from '../../../entities';\n\n/**\n * Serviço de notificação para renovações automáticas\n *\n * Responsável por gerenciar as notificações relacionadas às renovações automáticas\n * de benefícios, incluindo alertas de renovações pendentes e notificações de renovações\n * processadas.\n */\n@Injectable()\nexport class NotificacaoRenovacaoService {\n  private readonly logger = new Logger(NotificacaoRenovacaoService.name);\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n  ) {}\n\n  /**\n   * Notifica sobre renovações pendentes\n   * @param solicitacoes Lista de solicitações com renovações pendentes\n   */\n  async notificarRenovacoesPendentes(\n    solicitacoes: Solicitacao[],\n  ): Promise<void> {\n    if (solicitacoes.length === 0) {\n      this.logger.log('Nenhuma renovação pendente para notificar');\n      return;\n    }\n\n    this.logger.log(\n      `Notificando sobre ${solicitacoes.length} renovações pendentes`,\n    );\n\n    // Aqui seria implementada a lógica de envio de notificações\n    // por e-mail, SMS ou outro canal de comunicação\n\n    // Exemplo de log para cada solicitação\n    for (const solicitacao of solicitacoes) {\n      this.logger.log(\n        `Notificação enviada para renovação pendente: ID ${solicitacao.id}, ` +\n          `Data prevista: ${solicitacao.data_proxima_renovacao}`,\n      );\n    }\n  }\n\n  /**\n   * Notifica sobre renovações processadas\n   * @param solicitacoes Lista de solicitações renovadas\n   * @param novasSolicitacoes Lista das novas solicitações geradas pela renovação\n   */\n  async notificarRenovacoesProcessadas(\n    solicitacoes: Solicitacao[],\n    novasSolicitacoes: Solicitacao[],\n  ): Promise<void> {\n    if (solicitacoes.length === 0) {\n      this.logger.log('Nenhuma renovação processada para notificar');\n      return;\n    }\n\n    this.logger.log(\n      `Notificando sobre ${solicitacoes.length} renovações processadas`,\n    );\n\n    // Aqui seria implementada a lógica de envio de notificações\n    // por e-mail, SMS ou outro canal de comunicação\n\n    // Exemplo de log para cada solicitação renovada\n    for (let i = 0; i < solicitacoes.length; i++) {\n      const solicitacaoOriginal = solicitacoes[i];\n      const novaSolicitacao = novasSolicitacoes[i];\n\n      this.logger.log(\n        `Notificação enviada para renovação processada: ` +\n          `Solicitação original: ${solicitacaoOriginal.id}, ` +\n          `Nova solicitação: ${novaSolicitacao.id}`,\n      );\n    }\n  }\n\n  /**\n   * Notifica sobre falhas no processo de renovação\n   * @param solicitacao Solicitação que falhou ao renovar\n   * @param erro Descrição do erro\n   */\n  async notificarFalhaRenovacao(\n    solicitacao: Solicitacao,\n    erro: string,\n  ): Promise<void> {\n    this.logger.error(\n      `Falha na renovação da solicitação ${solicitacao.id}: ${erro}`,\n      solicitacao,\n    );\n\n    // Aqui seria implementada a lógica de envio de notificações\n    // para administradores ou responsáveis pelo sistema\n  }\n\n  /**\n   * Notifica sobre a proximidade da data de renovação\n   * @param solicitacao Solicitação próxima da data de renovação\n   * @param configuracao Configuração de renovação\n   */\n  async notificarProximidadeRenovacao(\n    solicitacao: Solicitacao,\n    configuracao: ConfiguracaoRenovacao,\n  ): Promise<void> {\n    this.logger.log(\n      `Notificando proximidade de renovação: Solicitação ${solicitacao.id}, ` +\n        `Data prevista: ${solicitacao.data_proxima_renovacao}`,\n    );\n\n    // Aqui seria implementada a lógica de envio de notificações\n    // para o cidadão e/ou assistentes sociais responsáveis\n  }\n\n  /**\n   * Notifica sobre renovações que requerem aprovação\n   * @param solicitacoes Lista de solicitações que requerem aprovação para renovação\n   */\n  async notificarRenovacoesParaAprovacao(\n    solicitacoes: Solicitacao[],\n  ): Promise<void> {\n    if (solicitacoes.length === 0) {\n      this.logger.log('Nenhuma renovação pendente de aprovação para notificar');\n      return;\n    }\n\n    this.logger.log(\n      `Notificando sobre ${solicitacoes.length} renovações que requerem aprovação`,\n    );\n\n    // Aqui seria implementada a lógica de envio de notificações\n    // para os aprovadores ou gestores do sistema\n\n    // Exemplo de log para cada solicitação\n    for (const solicitacao of solicitacoes) {\n      this.logger.log(\n        `Notificação enviada para aprovação de renovação: ID ${solicitacao.id}, ` +\n          `Data prevista: ${solicitacao.data_proxima_renovacao}`,\n      );\n    }\n  }\n}\n"],"version":3}