695f4939da65c82dc1a321c5e6fc811e
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var UnidadeService_1;
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnidadeService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const unidade_repository_1 = require("../repositories/unidade.repository");
const setor_repository_1 = require("../repositories/setor.repository");
const enum_normalizer_util_1 = require("../../../shared/utils/enum-normalizer.util");
/**
 * Serviço de unidades
 *
 * Responsável pela lógica de negócio relacionada a unidades
 */
let UnidadeService = UnidadeService_1 = class UnidadeService {
    dataSource;
    unidadeRepository;
    setorRepository;
    logger = new common_1.Logger(UnidadeService_1.name);
    constructor(dataSource, unidadeRepository, setorRepository) {
        this.dataSource = dataSource;
        this.unidadeRepository = unidadeRepository;
        this.setorRepository = setorRepository;
    }
    /**
     * Busca todas as unidades com filtros e paginação
     * @param options Opções de filtro e paginação
     * @returns Lista de unidades paginada
     */
    async findAll(options) {
        const { page = 1, limit = 10, search, tipo, status } = options || {};
        // Construir filtros
        const where = {};
        if (search) {
            where.nome = { $iLike: `%${search}%` };
        }
        if (tipo) {
            where.tipo = tipo;
        }
        if (status) {
            where.status = status;
        }
        // Calcular skip para paginação
        const skip = (page - 1) * limit;
        // Buscar unidades
        const [unidades, total] = await this.unidadeRepository.findAll({
            skip,
            take: limit,
            where,
        });
        return {
            items: unidades,
            meta: {
                total,
                page,
                limit,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca uma unidade pelo ID
     * @param id ID da unidade
     * @returns Unidade encontrada
     */
    async findById(id) {
        const unidade = await this.unidadeRepository.findById(id);
        if (!unidade) {
            throw new common_1.NotFoundException('Unidade não encontrada');
        }
        return unidade;
    }
    /**
     * Cria uma nova unidade
     * @param createUnidadeDto Dados da unidade
     * @returns Unidade criada
     */
    async create(createUnidadeDto) {
        this.logger.log(`Iniciando criação de unidade: ${JSON.stringify(createUnidadeDto)}`);
        // Verificar se código já existe
        const codigoExistente = await this.unidadeRepository.findByCodigo(createUnidadeDto.codigo);
        if (codigoExistente) {
            this.logger.warn(`Código ${createUnidadeDto.codigo} já está em uso`);
            throw new common_1.ConflictException('Código já está em uso');
        }
        try {
            // Usar transação para garantir consistência
            return await this.dataSource.transaction(async (manager) => {
                // Normalizar campos de enum antes de criar
                const normalizedData = (0, enum_normalizer_util_1.normalizeEnumFields)(createUnidadeDto);
                // Criar unidade usando o manager da transação
                const unidadeRepo = manager.getRepository('unidade');
                const unidade = unidadeRepo.create(normalizedData);
                const unidadeSalva = await unidadeRepo.save(unidade);
                this.logger.log(`Unidade criada com sucesso: ${unidadeSalva.id}`);
                return unidadeSalva;
            });
        }
        catch (error) {
            this.logger.error(`Erro ao criar unidade: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Falha ao criar unidade. Por favor, tente novamente.');
        }
    }
    /**
     * Atualiza uma unidade existente
     * @param id ID da unidade
     * @param updateUnidadeDto Dados a serem atualizados
     * @returns Unidade atualizada
     */
    async update(id, updateUnidadeDto) {
        this.logger.log(`Iniciando atualização da unidade ${id}: ${JSON.stringify(updateUnidadeDto)}`);
        // Verificar se unidade existe
        const unidade = await this.unidadeRepository.findById(id);
        if (!unidade) {
            this.logger.warn(`Unidade não encontrada: ${id}`);
            throw new common_1.NotFoundException('Unidade não encontrada');
        }
        // Verificar se código já existe (se fornecido)
        if (updateUnidadeDto.codigo && updateUnidadeDto.codigo !== unidade.codigo) {
            const codigoExistente = await this.unidadeRepository.findByCodigo(updateUnidadeDto.codigo);
            if (codigoExistente) {
                this.logger.warn(`Código ${updateUnidadeDto.codigo} já está em uso`);
                throw new common_1.ConflictException('Código já está em uso');
            }
        }
        try {
            // Usar transação para garantir consistência
            return await this.dataSource.transaction(async (manager) => {
                // Normalizar campos de enum antes de atualizar
                const normalizedData = (0, enum_normalizer_util_1.normalizeEnumFields)(updateUnidadeDto);
                // Atualizar unidade usando o manager da transação
                const unidadeRepo = manager.getRepository('unidade');
                await unidadeRepo.update(id, normalizedData);
                const unidadeAtualizada = await unidadeRepo.findOne({ where: { id } });
                if (!unidadeAtualizada) {
                    throw new common_1.NotFoundException('Unidade não encontrada após atualização');
                }
                this.logger.log(`Unidade ${id} atualizada com sucesso`);
                return unidadeAtualizada;
            });
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar unidade ${id}: ${error.message}`, error.stack);
            if (error instanceof common_1.NotFoundException ||
                error instanceof common_1.ConflictException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Falha ao atualizar unidade. Por favor, tente novamente.');
        }
    }
    /**
     * Atualiza o status de uma unidade
     * @param id ID da unidade
     * @param updateStatusUnidadeDto Novo status
     */
    async updateStatus(id, updateStatusUnidadeDto) {
        this.logger.log(`Iniciando atualização de status da unidade ${id}: ${updateStatusUnidadeDto.status}`);
        // Verificar se a unidade existe
        const unidade = await this.findById(id);
        if (!unidade) {
            this.logger.warn(`Unidade não encontrada: ${id}`);
            throw new common_1.NotFoundException(`Unidade com ID ${id} não encontrada`);
        }
        // Verificar se há usuários vinculados à unidade (se estiver inativando)
        if (updateStatusUnidadeDto.status === 'inativo') {
            this.logger.log(`Verificando usuários vinculados à unidade ${id} antes de inativar`);
            // Essa verificação seria implementada com um repositório de usuários
            // Por enquanto, vamos apenas registrar a intenção
            this.logger.log(`Verificação de usuários vinculados pendente de implementação`);
        }
        try {
            // Usar transação para garantir consistência
            return await this.dataSource.transaction(async (manager) => {
                // Atualizar status usando o manager da transação
                const unidadeRepo = manager.getRepository('unidade');
                await unidadeRepo.update(id, { status: updateStatusUnidadeDto.status });
                const unidadeAtualizada = await unidadeRepo.findOne({ where: { id } });
                if (!unidadeAtualizada) {
                    throw new common_1.NotFoundException('Unidade não encontrada após atualização de status');
                }
                this.logger.log(`Status da unidade ${id} atualizado para ${updateStatusUnidadeDto.status}`);
                return unidadeAtualizada;
            });
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar status da unidade ${id}: ${error.message}`, error.stack);
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Falha ao atualizar status da unidade. Por favor, tente novamente.');
        }
    }
    /**
     * Busca os setores de uma unidade
     * @param unidadeId ID da unidade
     * @returns Lista de setores da unidade
     */
    async findSetoresByUnidadeId(unidadeId) {
        // Verificar se unidade existe
        const unidade = await this.findById(unidadeId);
        if (!unidade) {
            throw new common_1.NotFoundException(`Unidade com ID ${unidadeId} não encontrada`);
        }
        // Buscar setores
        const setores = await this.setorRepository.findByUnidadeId(unidadeId);
        return {
            items: setores,
            meta: {
                total: setores.length,
            },
        };
    }
};
exports.UnidadeService = UnidadeService;
exports.UnidadeService = UnidadeService = UnidadeService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object, typeof (_b = typeof unidade_repository_1.UnidadeRepository !== "undefined" && unidade_repository_1.UnidadeRepository) === "function" ? _b : Object, typeof (_c = typeof setor_repository_1.SetorRepository !== "undefined" && setor_repository_1.SetorRepository) === "function" ? _c : Object])
], UnidadeService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,