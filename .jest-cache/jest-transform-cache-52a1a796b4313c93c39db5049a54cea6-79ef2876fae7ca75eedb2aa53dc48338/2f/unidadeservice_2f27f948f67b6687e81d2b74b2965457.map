{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\services\\unidade.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\services\\unidade.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  Logger,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { DataSource } from 'typeorm';\nimport { UnidadeRepository } from '../repositories/unidade.repository';\nimport { SetorRepository } from '../repositories/setor.repository';\nimport { CreateUnidadeDto } from '../dto/create-unidade.dto';\nimport { UpdateUnidadeDto } from '../dto/update-unidade.dto';\nimport { UpdateStatusUnidadeDto } from '../dto/update-status-unidade.dto';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\n\n/**\n * Serviço de unidades\n *\n * Responsável pela lógica de negócio relacionada a unidades\n */\n@Injectable()\nexport class UnidadeService {\n  private readonly logger = new Logger(UnidadeService.name);\n\n  constructor(\n    private readonly dataSource: DataSource,\n    private readonly unidadeRepository: UnidadeRepository,\n    private readonly setorRepository: SetorRepository,\n  ) {}\n\n  /**\n   * Busca todas as unidades com filtros e paginação\n   * @param options Opções de filtro e paginação\n   * @returns Lista de unidades paginada\n   */\n  async findAll(options?: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    tipo?: string;\n    status?: string;\n  }) {\n    const { page = 1, limit = 10, search, tipo, status } = options || {};\n\n    // Construir filtros\n    const where: any = {};\n\n    if (search) {\n      where.nome = { $iLike: `%${search}%` };\n    }\n\n    if (tipo) {\n      where.tipo = tipo;\n    }\n\n    if (status) {\n      where.status = status;\n    }\n\n    // Calcular skip para paginação\n    const skip = (page - 1) * limit;\n\n    // Buscar unidades\n    const [unidades, total] = await this.unidadeRepository.findAll({\n      skip,\n      take: limit,\n      where,\n    });\n\n    return {\n      items: unidades,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Busca uma unidade pelo ID\n   * @param id ID da unidade\n   * @returns Unidade encontrada\n   */\n  async findById(id: string) {\n    const unidade = await this.unidadeRepository.findById(id);\n\n    if (!unidade) {\n      throw new NotFoundException('Unidade não encontrada');\n    }\n\n    return unidade;\n  }\n\n  /**\n   * Cria uma nova unidade\n   * @param createUnidadeDto Dados da unidade\n   * @returns Unidade criada\n   */\n  async create(createUnidadeDto: CreateUnidadeDto) {\n    this.logger.log(\n      `Iniciando criação de unidade: ${JSON.stringify(createUnidadeDto)}`,\n    );\n\n    // Verificar se código já existe\n    const codigoExistente = await this.unidadeRepository.findByCodigo(\n      createUnidadeDto.codigo,\n    );\n    if (codigoExistente) {\n      this.logger.warn(`Código ${createUnidadeDto.codigo} já está em uso`);\n      throw new ConflictException('Código já está em uso');\n    }\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        // Normalizar campos de enum antes de criar\n        const normalizedData = normalizeEnumFields(createUnidadeDto);\n\n        // Criar unidade usando o manager da transação\n        const unidadeRepo = manager.getRepository('unidade');\n        const unidade = unidadeRepo.create(normalizedData);\n\n        const unidadeSalva = await unidadeRepo.save(unidade);\n        this.logger.log(`Unidade criada com sucesso: ${unidadeSalva.id}`);\n\n        return unidadeSalva;\n      });\n    } catch (error) {\n      this.logger.error(`Erro ao criar unidade: ${error.message}`, error.stack);\n      throw new InternalServerErrorException(\n        'Falha ao criar unidade. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Atualiza uma unidade existente\n   * @param id ID da unidade\n   * @param updateUnidadeDto Dados a serem atualizados\n   * @returns Unidade atualizada\n   */\n  async update(id: string, updateUnidadeDto: UpdateUnidadeDto) {\n    this.logger.log(\n      `Iniciando atualização da unidade ${id}: ${JSON.stringify(updateUnidadeDto)}`,\n    );\n\n    // Verificar se unidade existe\n    const unidade = await this.unidadeRepository.findById(id);\n    if (!unidade) {\n      this.logger.warn(`Unidade não encontrada: ${id}`);\n      throw new NotFoundException('Unidade não encontrada');\n    }\n\n    // Verificar se código já existe (se fornecido)\n    if (updateUnidadeDto.codigo && updateUnidadeDto.codigo !== unidade.codigo) {\n      const codigoExistente = await this.unidadeRepository.findByCodigo(\n        updateUnidadeDto.codigo,\n      );\n      if (codigoExistente) {\n        this.logger.warn(`Código ${updateUnidadeDto.codigo} já está em uso`);\n        throw new ConflictException('Código já está em uso');\n      }\n    }\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        // Normalizar campos de enum antes de atualizar\n        const normalizedData = normalizeEnumFields(updateUnidadeDto);\n\n        // Atualizar unidade usando o manager da transação\n        const unidadeRepo = manager.getRepository('unidade');\n        await unidadeRepo.update(id, normalizedData);\n\n        const unidadeAtualizada = await unidadeRepo.findOne({ where: { id } });\n        if (!unidadeAtualizada) {\n          throw new NotFoundException(\n            'Unidade não encontrada após atualização',\n          );\n        }\n\n        this.logger.log(`Unidade ${id} atualizada com sucesso`);\n        return unidadeAtualizada;\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar unidade ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException\n      ) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Falha ao atualizar unidade. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Atualiza o status de uma unidade\n   * @param id ID da unidade\n   * @param updateStatusUnidadeDto Novo status\n   */\n  async updateStatus(\n    id: string,\n    updateStatusUnidadeDto: UpdateStatusUnidadeDto,\n  ) {\n    this.logger.log(\n      `Iniciando atualização de status da unidade ${id}: ${updateStatusUnidadeDto.status}`,\n    );\n\n    // Verificar se a unidade existe\n    const unidade = await this.findById(id);\n    if (!unidade) {\n      this.logger.warn(`Unidade não encontrada: ${id}`);\n      throw new NotFoundException(`Unidade com ID ${id} não encontrada`);\n    }\n\n    // Verificar se há usuários vinculados à unidade (se estiver inativando)\n    if (updateStatusUnidadeDto.status === 'inativo') {\n      this.logger.log(\n        `Verificando usuários vinculados à unidade ${id} antes de inativar`,\n      );\n      // Essa verificação seria implementada com um repositório de usuários\n      // Por enquanto, vamos apenas registrar a intenção\n      this.logger.log(\n        `Verificação de usuários vinculados pendente de implementação`,\n      );\n    }\n\n    try {\n      // Usar transação para garantir consistência\n      return await this.dataSource.transaction(async (manager) => {\n        // Atualizar status usando o manager da transação\n        const unidadeRepo = manager.getRepository('unidade');\n        await unidadeRepo.update(id, { status: updateStatusUnidadeDto.status });\n\n        const unidadeAtualizada = await unidadeRepo.findOne({ where: { id } });\n        if (!unidadeAtualizada) {\n          throw new NotFoundException(\n            'Unidade não encontrada após atualização de status',\n          );\n        }\n\n        this.logger.log(\n          `Status da unidade ${id} atualizado para ${updateStatusUnidadeDto.status}`,\n        );\n        return unidadeAtualizada;\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar status da unidade ${id}: ${error.message}`,\n        error.stack,\n      );\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n      throw new InternalServerErrorException(\n        'Falha ao atualizar status da unidade. Por favor, tente novamente.',\n      );\n    }\n  }\n\n  /**\n   * Busca os setores de uma unidade\n   * @param unidadeId ID da unidade\n   * @returns Lista de setores da unidade\n   */\n  async findSetoresByUnidadeId(unidadeId: string) {\n    // Verificar se unidade existe\n    const unidade = await this.findById(unidadeId);\n    if (!unidade) {\n      throw new NotFoundException(`Unidade com ID ${unidadeId} não encontrada`);\n    }\n\n    // Buscar setores\n    const setores = await this.setorRepository.findByUnidadeId(unidadeId);\n\n    return {\n      items: setores,\n      meta: {\n        total: setores.length,\n      },\n    };\n  }\n}\n"],"version":3}