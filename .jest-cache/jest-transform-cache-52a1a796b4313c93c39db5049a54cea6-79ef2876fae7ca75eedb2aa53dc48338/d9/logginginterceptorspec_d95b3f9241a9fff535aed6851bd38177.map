{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\tests\\logging.interceptor.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\logging\\tests\\logging.interceptor.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { LoggingInterceptor } from '../logging.interceptor';\nimport { LoggingService } from '../logging.service';\nimport { ExecutionContext, CallHandler } from '@nestjs/common';\nimport { of } from 'rxjs';\nimport { Request, Response } from 'express';\n\n/**\n * Testes unitários para o interceptor de logging\n *\n * Verifica o funcionamento do interceptor que registra\n * informações sobre requisições HTTP\n */\ndescribe('LoggingInterceptor', () => {\n  let interceptor: LoggingInterceptor;\n  let loggingService: LoggingService;\n\n  // Mock do serviço de logging\n  const mockLoggingService = {\n    info: jest.fn(),\n    debug: jest.fn(),\n    error: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        LoggingInterceptor,\n        {\n          provide: LoggingService,\n          useValue: mockLoggingService,\n        },\n      ],\n    }).compile();\n\n    interceptor = module.get<LoggingInterceptor>(LoggingInterceptor);\n    loggingService = module.get<LoggingService>(LoggingService);\n\n    // Mock para Date.now()\n    jest\n      .spyOn(Date, 'now')\n      .mockImplementationOnce(() => 1000)\n      .mockImplementationOnce(() => 1200);\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(interceptor).toBeDefined();\n  });\n\n  describe('intercept', () => {\n    it('deve registrar informações sobre a requisição e resposta', (done) => {\n      // Mock do contexto de execução\n      const mockRequest = {\n        method: 'GET',\n        url: '/api/cidadaos',\n        ip: '127.0.0.1',\n        headers: {\n          'user-agent': 'test-agent',\n        },\n        user: {\n          id: 'user-123',\n          email: 'usuario@teste.com',\n        },\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 200,\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(of({ data: 'test' })),\n      } as unknown as CallHandler;\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: (data) => {\n          expect(data).toEqual({ data: 'test' });\n\n          // Verificar se o log de início da requisição foi registrado\n          expect(mockLoggingService.info).toHaveBeenCalledWith(\n            'Requisição iniciada: GET /api/cidadaos',\n            'HTTP',\n            expect.objectContaining({\n              method: 'GET',\n              url: '/api/cidadaos',\n            }),\n          );\n\n          // Verificar se o log de fim da requisição foi registrado\n          expect(mockLoggingService.info).toHaveBeenCalledWith(\n            'Requisição concluída: GET /api/cidadaos - Status: 200 - Tempo: 200ms',\n            'HTTP',\n            expect.objectContaining({\n              method: 'GET',\n              url: '/api/cidadaos',\n              statusCode: 200,\n            }),\n          );\n\n          done();\n        },\n        error: done,\n      });\n    });\n\n    it('deve lidar com requisições sem usuário autenticado', (done) => {\n      // Mock do contexto de execução sem usuário\n      const mockRequest = {\n        method: 'GET',\n        url: '/api/public',\n        ip: '127.0.0.1',\n        headers: {\n          'user-agent': 'test-agent',\n        },\n        // Sem objeto user\n      } as unknown as Request;\n\n      const mockResponse = {\n        statusCode: 200,\n      } as unknown as Response;\n\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue(mockRequest),\n          getResponse: jest.fn().mockReturnValue(mockResponse),\n        }),\n      } as unknown as ExecutionContext;\n\n      // Mock do handler de chamada\n      const mockCallHandler = {\n        handle: jest.fn().mockReturnValue(of({ data: 'public' })),\n      } as unknown as CallHandler;\n\n      // Executar o interceptor\n      interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({\n        next: (data) => {\n          expect(data).toEqual({ data: 'public' });\n\n          // Verificar se o log de início da requisição foi registrado sem userId\n          expect(mockLoggingService.info).toHaveBeenCalledWith(\n            'Requisição iniciada: GET /api/public',\n            'HTTP',\n            expect.objectContaining({\n              method: 'GET',\n              url: '/api/public',\n            }),\n          );\n\n          // Verificar se o log de fim da requisição foi registrado sem userId\n          expect(mockLoggingService.info).toHaveBeenCalledWith(\n            'Requisição concluída: GET /api/public - Status: 200 - Tempo: 200ms',\n            'HTTP',\n            expect.objectContaining({\n              method: 'GET',\n              url: '/api/public',\n              statusCode: 200,\n            }),\n          );\n\n          done();\n        },\n        error: done,\n      });\n    });\n  });\n});\n"],"version":3}