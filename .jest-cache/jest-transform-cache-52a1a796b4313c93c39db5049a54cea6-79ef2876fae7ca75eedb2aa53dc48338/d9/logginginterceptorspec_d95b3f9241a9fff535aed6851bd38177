89b6604bfc6f3b374b2fae35b6bcd033
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const logging_interceptor_1 = require("../logging.interceptor");
const logging_service_1 = require("../logging.service");
const rxjs_1 = require("rxjs");
/**
 * Testes unitários para o interceptor de logging
 *
 * Verifica o funcionamento do interceptor que registra
 * informações sobre requisições HTTP
 */
describe('LoggingInterceptor', () => {
    let interceptor;
    let loggingService;
    // Mock do serviço de logging
    const mockLoggingService = {
        info: jest.fn(),
        debug: jest.fn(),
        error: jest.fn(),
    };
    beforeEach(async () => {
        jest.clearAllMocks();
        const module = await testing_1.Test.createTestingModule({
            providers: [
                logging_interceptor_1.LoggingInterceptor,
                {
                    provide: logging_service_1.LoggingService,
                    useValue: mockLoggingService,
                },
            ],
        }).compile();
        interceptor = module.get(logging_interceptor_1.LoggingInterceptor);
        loggingService = module.get(logging_service_1.LoggingService);
        // Mock para Date.now()
        jest
            .spyOn(Date, 'now')
            .mockImplementationOnce(() => 1000)
            .mockImplementationOnce(() => 1200);
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    it('deve ser definido', () => {
        expect(interceptor).toBeDefined();
    });
    describe('intercept', () => {
        it('deve registrar informações sobre a requisição e resposta', (done) => {
            // Mock do contexto de execução
            const mockRequest = {
                method: 'GET',
                url: '/api/cidadaos',
                ip: '127.0.0.1',
                headers: {
                    'user-agent': 'test-agent',
                },
                user: {
                    id: 'user-123',
                    email: 'usuario@teste.com',
                },
            };
            const mockResponse = {
                statusCode: 200,
            };
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue(mockRequest),
                    getResponse: jest.fn().mockReturnValue(mockResponse),
                }),
            };
            // Mock do handler de chamada
            const mockCallHandler = {
                handle: jest.fn().mockReturnValue((0, rxjs_1.of)({ data: 'test' })),
            };
            // Executar o interceptor
            interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({
                next: (data) => {
                    expect(data).toEqual({ data: 'test' });
                    // Verificar se o log de início da requisição foi registrado
                    expect(mockLoggingService.info).toHaveBeenCalledWith('Requisição iniciada: GET /api/cidadaos', 'HTTP', expect.objectContaining({
                        method: 'GET',
                        url: '/api/cidadaos',
                    }));
                    // Verificar se o log de fim da requisição foi registrado
                    expect(mockLoggingService.info).toHaveBeenCalledWith('Requisição concluída: GET /api/cidadaos - Status: 200 - Tempo: 200ms', 'HTTP', expect.objectContaining({
                        method: 'GET',
                        url: '/api/cidadaos',
                        statusCode: 200,
                    }));
                    done();
                },
                error: done,
            });
        });
        it('deve lidar com requisições sem usuário autenticado', (done) => {
            // Mock do contexto de execução sem usuário
            const mockRequest = {
                method: 'GET',
                url: '/api/public',
                ip: '127.0.0.1',
                headers: {
                    'user-agent': 'test-agent',
                },
                // Sem objeto user
            };
            const mockResponse = {
                statusCode: 200,
            };
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue(mockRequest),
                    getResponse: jest.fn().mockReturnValue(mockResponse),
                }),
            };
            // Mock do handler de chamada
            const mockCallHandler = {
                handle: jest.fn().mockReturnValue((0, rxjs_1.of)({ data: 'public' })),
            };
            // Executar o interceptor
            interceptor.intercept(mockExecutionContext, mockCallHandler).subscribe({
                next: (data) => {
                    expect(data).toEqual({ data: 'public' });
                    // Verificar se o log de início da requisição foi registrado sem userId
                    expect(mockLoggingService.info).toHaveBeenCalledWith('Requisição iniciada: GET /api/public', 'HTTP', expect.objectContaining({
                        method: 'GET',
                        url: '/api/public',
                    }));
                    // Verificar se o log de fim da requisição foi registrado sem userId
                    expect(mockLoggingService.info).toHaveBeenCalledWith('Requisição concluída: GET /api/public - Status: 200 - Tempo: 200ms', 'HTTP', expect.objectContaining({
                        method: 'GET',
                        url: '/api/public',
                        statusCode: 200,
                    }));
                    done();
                },
                error: done,
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,