874fb7278105a3b45b51817d42fcc3e4
"use strict";
/**
 * Funções helper para lançamento de erros padronizados
 *
 * Fornece uma interface conveniente para lançar erros específicos
 * do catálogo com contexto apropriado, facilitando o uso em
 * serviços e controladores.
 *
 * @see docs/ADRs/catalogo-erros.md
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.throwInvalidCpf = throwInvalidCpf;
exports.throwDuplicateCpf = throwDuplicateCpf;
exports.throwInvalidNis = throwInvalidNis;
exports.throwDuplicateNis = throwDuplicateNis;
exports.throwInvalidAge = throwInvalidAge;
exports.throwInvalidIncome = throwInvalidIncome;
exports.throwIncomeExceedsLimit = throwIncomeExceedsLimit;
exports.throwNatalidadeAlreadyReceived = throwNatalidadeAlreadyReceived;
exports.throwInvalidBirthDateForNatalidade = throwInvalidBirthDateForNatalidade;
exports.throwAluguelAlreadyActive = throwAluguelAlreadyActive;
exports.throwInvalidPropertyForAluguel = throwInvalidPropertyForAluguel;
exports.throwBenefitNotFound = throwBenefitNotFound;
exports.throwInvalidWorkflowTransition = throwInvalidWorkflowTransition;
exports.throwAzureBlobUploadFailed = throwAzureBlobUploadFailed;
exports.throwEmailSendFailed = throwEmailSendFailed;
exports.throwDatabaseConnectionFailed = throwDatabaseConnectionFailed;
exports.throwPermissionDenied = throwPermissionDenied;
exports.throwDocumentRequired = throwDocumentRequired;
exports.throwApprovalDeadlineExceeded = throwApprovalDeadlineExceeded;
exports.throwForeignKeyViolation = throwForeignKeyViolation;
exports.throwUniqueConstraintViolation = throwUniqueConstraintViolation;
exports.throwRateLimitExceeded = throwRateLimitExceeded;
exports.throwMaintenanceMode = throwMaintenanceMode;
exports.throwFromPostgresError = throwFromPostgresError;
const AppError_1 = require("./AppError");
// ========================================
// HELPERS PARA VALIDAÇÕES
// ========================================
/**
 * Lança erro de CPF inválido
 */
function throwInvalidCpf(cpf, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('VALIDATIONS_CPF_INVALID', {
        ...context,
        data: {
            field: 'cpf',
            value: cpf,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de CPF duplicado
 */
function throwDuplicateCpf(cpf, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('VALIDATIONS_CPF_DUPLICATE', {
        ...context,
        data: {
            field: 'cpf',
            value: cpf,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de NIS inválido
 */
function throwInvalidNis(nis, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('VALIDATIONS_NIS_INVALID', {
        ...context,
        data: {
            field: 'nis',
            value: nis,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de NIS duplicado
 */
function throwDuplicateNis(nis, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('VALIDATIONS_NIS_DUPLICATE', {
        ...context,
        data: {
            field: 'nis',
            value: nis,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de idade inválida
 */
function throwInvalidAge(age, minAge, maxAge, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('VALIDATIONS_AGE_INVALID', {
        ...context,
        data: {
            field: 'age',
            value: age,
            minAge,
            maxAge,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de renda inválida
 */
function throwInvalidIncome(income, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('VALIDATIONS_INCOME_INVALID', {
        ...context,
        data: {
            field: 'income',
            value: income,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de renda que excede limite
 */
function throwIncomeExceedsLimit(income, limit, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('VALIDATIONS_INCOME_EXCEEDS_LIMIT', {
        ...context,
        data: {
            field: 'income',
            value: income,
            limit,
            ...context.data,
        },
    }, language);
}
// ========================================
// HELPERS PARA BENEFÍCIOS
// ========================================
/**
 * Lança erro de auxílio natalidade já recebido
 */
function throwNatalidadeAlreadyReceived(citizenId, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('BENEFITS_NATALIDADE_ALREADY_RECEIVED', {
        ...context,
        data: {
            benefitType: 'NATALIDADE',
            citizenId,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de data de nascimento inválida para natalidade
 */
function throwInvalidBirthDateForNatalidade(birthDate, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('BENEFITS_NATALIDADE_BIRTH_DATE_INVALID', {
        ...context,
        data: {
            benefitType: 'NATALIDADE',
            birthDate: birthDate.toISOString(),
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de aluguel social já ativo
 */
function throwAluguelAlreadyActive(citizenId, activeBenefitId, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('BENEFITS_ALUGUEL_ALREADY_ACTIVE', {
        ...context,
        data: {
            benefitType: 'ALUGUEL_SOCIAL',
            citizenId,
            activeBenefitId,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de imóvel inválido para aluguel social
 */
function throwInvalidPropertyForAluguel(propertyInfo, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('BENEFITS_ALUGUEL_PROPERTY_INVALID', {
        ...context,
        data: {
            benefitType: 'ALUGUEL_SOCIAL',
            propertyInfo,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de benefício não encontrado
 */
function throwBenefitNotFound(benefitId, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('BENEFITS_NOT_FOUND', {
        ...context,
        data: {
            benefitId,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de transição inválida no workflow
 */
function throwInvalidWorkflowTransition(benefitId, currentStatus, targetStatus, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('BENEFITS_WORKFLOW_INVALID_TRANSITION', {
        ...context,
        data: {
            benefitId,
            currentStatus,
            targetStatus,
            ...context.data,
        },
    }, language);
}
// ========================================
// HELPERS PARA INTEGRAÇÕES
// ========================================
/**
 * Lança erro de falha no upload para Azure Blob
 */
function throwAzureBlobUploadFailed(fileName, error, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRATIONS_AZURE_BLOB_UPLOAD_FAILED', {
        ...context,
        cause: error,
        data: {
            service: 'Azure Blob Storage',
            fileName,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de falha no envio de email
 */
function throwEmailSendFailed(recipient, error, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRATIONS_EMAIL_SEND_FAILED', {
        ...context,
        cause: error,
        data: {
            service: 'Email Service',
            recipient,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de falha na conexão com banco de dados
 */
function throwDatabaseConnectionFailed(error, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRATIONS_DATABASE_CONNECTION_FAILED', {
        ...context,
        cause: error,
        data: {
            service: 'Database',
            ...context.data,
        },
    }, language);
}
// ========================================
// HELPERS PARA FLUXO OPERACIONAL
// ========================================
/**
 * Lança erro de permissão negada
 */
function throwPermissionDenied(operation, userId, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('OPERATIONAL_FLOW_PERMISSION_DENIED', {
        ...context,
        userId,
        data: {
            operation,
            userId,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de documento obrigatório não fornecido
 */
function throwDocumentRequired(documentType, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('OPERATIONAL_FLOW_DOCUMENT_REQUIRED', {
        ...context,
        data: {
            documentType,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de prazo de aprovação excedido
 */
function throwApprovalDeadlineExceeded(benefitId, deadline, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('OPERATIONAL_FLOW_APPROVAL_DEADLINE_EXCEEDED', {
        ...context,
        data: {
            benefitId,
            deadline: deadline.toISOString(),
            ...context.data,
        },
    }, language);
}
// ========================================
// HELPERS PARA SISTEMA
// ========================================
/**
 * Lança erro de violação de chave estrangeira
 */
function throwForeignKeyViolation(table, constraint, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('SYSTEM_FOREIGN_KEY_VIOLATION', {
        ...context,
        data: {
            table,
            constraint,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de violação de restrição de unicidade
 */
function throwUniqueConstraintViolation(table, constraint, value, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('SYSTEM_UNIQUE_CONSTRAINT_VIOLATION', {
        ...context,
        data: {
            table,
            constraint,
            value,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de limite de requisições excedido
 */
function throwRateLimitExceeded(limit, windowMs, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('SYSTEM_RATE_LIMIT_EXCEEDED', {
        ...context,
        data: {
            limit,
            windowMs,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de sistema em manutenção
 */
function throwMaintenanceMode(estimatedEndTime, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('SYSTEM_MAINTENANCE_MODE', {
        ...context,
        data: {
            estimatedEndTime: estimatedEndTime?.toISOString(),
            ...context.data,
        },
    }, language);
}
// ========================================
// HELPER GENÉRICO PARA POSTGRES
// ========================================
/**
 * Lança erro baseado em código PostgreSQL
 */
function throwFromPostgresError(postgresCode, error, context = {}, language = 'pt-BR') {
    throw AppError_1.AppError.fromPostgresError(postgresCode, {
        ...context,
        cause: error,
    }, language);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,