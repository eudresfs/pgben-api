2011eb531b506e2d6abbbd1278728c48
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnifiedLoggerModule = void 0;
const common_1 = require("@nestjs/common");
const nest_winston_1 = require("nest-winston");
const winston_config_1 = require("./winston.config");
const unified_logger_service_1 = require("./unified-logger.service");
const logging_service_1 = require("./logging.service");
const logger_service_1 = require("../logger/logger.service");
/**
 * Módulo Unificado de Logging
 *
 * Fornece serviços de logging para toda a aplicação,
 * mantendo compatibilidade com o código existente
 * enquanto oferece uma interface unificada e melhorada.
 */
let UnifiedLoggerModule = class UnifiedLoggerModule {
};
exports.UnifiedLoggerModule = UnifiedLoggerModule;
exports.UnifiedLoggerModule = UnifiedLoggerModule = __decorate([
    (0, common_1.Global)(),
    (0, common_1.Module)({
        imports: [nest_winston_1.WinstonModule.forRoot(winston_config_1.winstonConfig)],
        providers: [
            unified_logger_service_1.UnifiedLoggerService,
            // Manter os serviços originais para compatibilidade
            {
                provide: logging_service_1.LoggingService,
                useExisting: unified_logger_service_1.UnifiedLoggerService,
            },
            {
                provide: logger_service_1.AppLogger,
                useExisting: unified_logger_service_1.UnifiedLoggerService,
            },
        ],
        exports: [unified_logger_service_1.UnifiedLoggerService, logging_service_1.LoggingService, logger_service_1.AppLogger],
    })
], UnifiedLoggerModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbG9nZ2luZ1xcdW5pZmllZC1sb2dnZXIubW9kdWxlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLDJDQUFnRDtBQUNoRCwrQ0FBNkM7QUFFN0MscURBQWlEO0FBQ2pELHFFQUFnRTtBQUNoRSx1REFBbUQ7QUFDbkQsNkRBQXFEO0FBRXJEOzs7Ozs7R0FNRztBQWtCSSxJQUFNLG1CQUFtQixHQUF6QixNQUFNLG1CQUFtQjtDQUFHLENBQUE7QUFBdEIsa0RBQW1COzhCQUFuQixtQkFBbUI7SUFqQi9CLElBQUEsZUFBTSxHQUFFO0lBQ1IsSUFBQSxlQUFNLEVBQUM7UUFDTixPQUFPLEVBQUUsQ0FBQyw0QkFBYSxDQUFDLE9BQU8sQ0FBQyw4QkFBYSxDQUFDLENBQUM7UUFDL0MsU0FBUyxFQUFFO1lBQ1QsNkNBQW9CO1lBQ3BCLG9EQUFvRDtZQUNwRDtnQkFDRSxPQUFPLEVBQUUsZ0NBQWM7Z0JBQ3ZCLFdBQVcsRUFBRSw2Q0FBb0I7YUFDbEM7WUFDRDtnQkFDRSxPQUFPLEVBQUUsMEJBQVM7Z0JBQ2xCLFdBQVcsRUFBRSw2Q0FBb0I7YUFDbEM7U0FDRjtRQUNELE9BQU8sRUFBRSxDQUFDLDZDQUFvQixFQUFFLGdDQUFjLEVBQUUsMEJBQVMsQ0FBQztLQUMzRCxDQUFDO0dBQ1csbUJBQW1CLENBQUciLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcbG9nZ2luZ1xcdW5pZmllZC1sb2dnZXIubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZSwgR2xvYmFsIH0gZnJvbSAnQG5lc3Rqcy9jb21tb24nO1xuaW1wb3J0IHsgV2luc3Rvbk1vZHVsZSB9IGZyb20gJ25lc3Qtd2luc3Rvbic7XG5cbmltcG9ydCB7IHdpbnN0b25Db25maWcgfSBmcm9tICcuL3dpbnN0b24uY29uZmlnJztcbmltcG9ydCB7IFVuaWZpZWRMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi91bmlmaWVkLWxvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2dpbmdTZXJ2aWNlIH0gZnJvbSAnLi9sb2dnaW5nLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXBwTG9nZ2VyIH0gZnJvbSAnLi4vbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlJztcblxuLyoqXG4gKiBNw7NkdWxvIFVuaWZpY2FkbyBkZSBMb2dnaW5nXG4gKlxuICogRm9ybmVjZSBzZXJ2acOnb3MgZGUgbG9nZ2luZyBwYXJhIHRvZGEgYSBhcGxpY2HDp8OjbyxcbiAqIG1hbnRlbmRvIGNvbXBhdGliaWxpZGFkZSBjb20gbyBjw7NkaWdvIGV4aXN0ZW50ZVxuICogZW5xdWFudG8gb2ZlcmVjZSB1bWEgaW50ZXJmYWNlIHVuaWZpY2FkYSBlIG1lbGhvcmFkYS5cbiAqL1xuQEdsb2JhbCgpXG5ATW9kdWxlKHtcbiAgaW1wb3J0czogW1dpbnN0b25Nb2R1bGUuZm9yUm9vdCh3aW5zdG9uQ29uZmlnKV0sXG4gIHByb3ZpZGVyczogW1xuICAgIFVuaWZpZWRMb2dnZXJTZXJ2aWNlLFxuICAgIC8vIE1hbnRlciBvcyBzZXJ2acOnb3Mgb3JpZ2luYWlzIHBhcmEgY29tcGF0aWJpbGlkYWRlXG4gICAge1xuICAgICAgcHJvdmlkZTogTG9nZ2luZ1NlcnZpY2UsXG4gICAgICB1c2VFeGlzdGluZzogVW5pZmllZExvZ2dlclNlcnZpY2UsXG4gICAgfSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBBcHBMb2dnZXIsXG4gICAgICB1c2VFeGlzdGluZzogVW5pZmllZExvZ2dlclNlcnZpY2UsXG4gICAgfSxcbiAgXSxcbiAgZXhwb3J0czogW1VuaWZpZWRMb2dnZXJTZXJ2aWNlLCBMb2dnaW5nU2VydmljZSwgQXBwTG9nZ2VyXSxcbn0pXG5leHBvcnQgY2xhc3MgVW5pZmllZExvZ2dlck1vZHVsZSB7fVxuIl0sInZlcnNpb24iOjN9