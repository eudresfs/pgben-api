c75e147e8791487b213865249abab289
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComprovanteController = void 0;
const common_1 = require("@nestjs/common");
const platform_express_1 = require("@nestjs/platform-express");
const swagger_1 = require("@nestjs/swagger");
const comprovante_service_1 = require("../services/comprovante.service");
const comprovante_upload_dto_1 = require("../dtos/comprovante-upload.dto");
const comprovante_response_dto_1 = require("../dtos/comprovante-response.dto");
const express_1 = require("express");
/**
 * Controller para gerenciamento de comprovantes de pagamento
 *
 * Implementa endpoints para upload, visualização e remoção de
 * documentos comprobatórios anexados aos pagamentos.
 *
 * @author Equipe PGBen
 */
let ComprovanteController = class ComprovanteController {
    comprovanteService;
    constructor(comprovanteService) {
        this.comprovanteService = comprovanteService;
    }
    /**
     * Lista todos os comprovantes associados a um pagamento
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async findAll(pagamentoId) {
        const comprovantes = await this.comprovanteService.findAllByPagamento(pagamentoId);
        // Mapear para DTO de resposta
        return comprovantes.map(comprovante => ({
            id: comprovante.id,
            pagamentoId: comprovante.pagamento_id,
            tipoDocumento: comprovante.tipo_documento,
            nomeArquivo: comprovante.nome_arquivo,
            tamanho: comprovante.tamanho,
            mimeType: comprovante.mime_type,
            dataUpload: comprovante.data_upload,
            uploadedPor: {
                id: comprovante.uploaded_por,
                nome: 'Usuário Responsável' // seria obtido da entidade Usuario
            }
        }));
    }
    /**
     * Realiza o upload de um comprovante para um pagamento
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async uploadComprovante(pagamentoId, file, uploadDto) {
        if (!file) {
            throw new common_1.BadRequestException('Nenhum arquivo enviado');
        }
        // Usar o ID do usuário atual
        const usuarioId = 'placeholder'; // usuario.id;
        const comprovante = await this.comprovanteService.uploadComprovante(pagamentoId, file, uploadDto, usuarioId);
        // Mapear para DTO de resposta
        return {
            id: comprovante.id,
            pagamentoId: comprovante.pagamento_id,
            tipoDocumento: comprovante.tipo_documento,
            nomeArquivo: comprovante.nome_arquivo,
            tamanho: comprovante.tamanho,
            mimeType: comprovante.mime_type,
            dataUpload: comprovante.data_upload,
            uploadedPor: {
                id: usuarioId,
                nome: 'Usuário Responsável' // seria obtido da entidade Usuario
            }
        };
    }
    /**
     * Obtém um comprovante específico para download
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async downloadComprovante(id, res) {
        const { buffer, fileName, mimeType } = await this.comprovanteService.getComprovanteContent(id);
        res.set({
            'Content-Type': mimeType,
            'Content-Disposition': `attachment; filename="${encodeURIComponent(fileName)}"`,
            'Content-Length': buffer.length.toString()
        });
        res.end(buffer);
    }
    /**
     * Busca um comprovante pelo ID
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async findOne(id) {
        const comprovante = await this.comprovanteService.findOne(id);
        if (!comprovante) {
            throw new common_1.NotFoundException('Comprovante não encontrado');
        }
        // Mapear para DTO de resposta
        return {
            id: comprovante.id,
            pagamentoId: comprovante.pagamento_id,
            tipoDocumento: comprovante.tipo_documento,
            nomeArquivo: comprovante.nome_arquivo,
            tamanho: comprovante.tamanho,
            mimeType: comprovante.mime_type,
            dataUpload: comprovante.data_upload,
            uploadedPor: {
                id: comprovante.uploaded_por,
                nome: 'Usuário Responsável' // seria obtido da entidade Usuario
            }
        };
    }
    /**
     * Remove um comprovante
     */
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    async remove(id) {
        // Usar o ID do usuário atual
        const usuarioId = 'placeholder'; // usuario.id;
        await this.comprovanteService.removeComprovante(id, usuarioId);
        return { message: 'Comprovante removido com sucesso' };
    }
};
exports.ComprovanteController = ComprovanteController;
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Lista comprovantes para um determinado pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de comprovantes',
        type: [comprovante_response_dto_1.ComprovanteResponseDto]
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Pagamento não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('pagamentoId', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ComprovanteController.prototype, "findAll", null);
__decorate([
    (0, common_1.Post)(),
    (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)('file')),
    (0, swagger_1.ApiConsumes)('multipart/form-data'),
    (0, swagger_1.ApiOperation)({ summary: 'Realiza upload de um comprovante para um pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiResponse)({ status: 201, description: 'Comprovante enviado com sucesso', type: comprovante_response_dto_1.ComprovanteResponseDto }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Arquivo inválido ou dados incorretos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Pagamento não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('pagamentoId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.UploadedFile)()),
    __param(2, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, typeof (_b = typeof comprovante_upload_dto_1.ComprovanteUploadDto !== "undefined" && comprovante_upload_dto_1.ComprovanteUploadDto) === "function" ? _b : Object]),
    __metadata("design:returntype", Promise)
], ComprovanteController.prototype, "uploadComprovante", null);
__decorate([
    (0, common_1.Get)(':id/download'),
    (0, swagger_1.ApiOperation)({ summary: 'Faz download de um comprovante' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'ID do comprovante' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Arquivo enviado com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Comprovante não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Res)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_c = typeof express_1.Response !== "undefined" && express_1.Response) === "function" ? _c : Object]),
    __metadata("design:returntype", Promise)
], ComprovanteController.prototype, "downloadComprovante", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Busca um comprovante pelo ID' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'ID do comprovante' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Comprovante encontrado', type: comprovante_response_dto_1.ComprovanteResponseDto }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Comprovante não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ComprovanteController.prototype, "findOne", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, swagger_1.ApiOperation)({ summary: 'Remove um comprovante' }),
    (0, swagger_1.ApiParam)({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' }),
    (0, swagger_1.ApiParam)({ name: 'id', type: 'string', description: 'ID do comprovante' }),
    (0, swagger_1.ApiResponse)({ status: 200, description: 'Comprovante removido com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Comprovante não encontrado' }),
    (0, swagger_1.ApiResponse)({ status: 409, description: 'Comprovante não pode ser removido' }),
    (0, swagger_1.ApiResponse)({ status: 403, description: 'Acesso negado' })
    // @UseGuards(RolesGuard)
    // @Roles('admin', 'gestor_semtas', 'tecnico')
    ,
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], ComprovanteController.prototype, "remove", null);
exports.ComprovanteController = ComprovanteController = __decorate([
    (0, swagger_1.ApiTags)('Pagamentos'),
    (0, common_1.Controller)('pagamentos/:pagamentoId/comprovantes'),
    __metadata("design:paramtypes", [typeof (_a = typeof comprovante_service_1.ComprovanteService !== "undefined" && comprovante_service_1.ComprovanteService) === "function" ? _a : Object])
], ComprovanteController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,