{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\utils\\estatistica.utils.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\utils\\estatistica.utils.ts"],"sourcesContent":["/**\n * Funções utilitárias para cálculos estatísticos\n */\nexport class EstatisticaUtils {\n  /**\n   * Calcula a média de um array de valores\n   */\n  static calcularMedia(valores: number[]): number {\n    if (valores.length === 0) {\n      return 0;\n    }\n    const soma = valores.reduce((acc, val) => acc + val, 0);\n    return soma / valores.length;\n  }\n\n  /**\n   * Calcula o desvio padrão de um array de valores\n   */\n  static calcularDesvioPadrao(valores: number[], media?: number): number {\n    if (valores.length <= 1) {\n      return 0;\n    }\n\n    const mediaValores =\n      media !== undefined ? media : this.calcularMedia(valores);\n\n    const somaDosQuadradosDasDiferencas = valores.reduce(\n      (acc, val) => acc + Math.pow(val - mediaValores, 2),\n      0,\n    );\n\n    return Math.sqrt(somaDosQuadradosDasDiferencas / (valores.length - 1));\n  }\n\n  /**\n   * Calcula a mediana de um array de valores\n   * @param valores Array de valores (deve estar ordenado)\n   */\n  static calcularMediana(valores: number[]): number {\n    if (valores.length === 0) {\n      return 0;\n    }\n\n    // Verificar se valores está ordenado\n    const valoresOrdenados = [...valores].sort((a, b) => a - b);\n\n    // Valores já devem estar ordenados\n    const meio = Math.floor(valoresOrdenados.length / 2);\n\n    if (valoresOrdenados.length % 2 === 0) {\n      // Número par de elementos: média dos dois do meio\n      return (valoresOrdenados[meio - 1] + valoresOrdenados[meio]) / 2;\n    } else {\n      // Número ímpar de elementos: elemento do meio\n      return valoresOrdenados[meio];\n    }\n  }\n\n  /**\n   * Calcula regressão linear simples para um array de valores\n   *\n   * @param valores Array de valores ou array de pares [x, y]\n   * @returns Coeficientes da regressão linear e R²\n   */\n  static calcularRegressaoLinear(valores: number[] | Array<[number, number]>): {\n    coeficienteAngular: number;\n    intercepto: number;\n    r2: number;\n  } {\n    const n = valores.length;\n\n    if (n <= 1) {\n      return { coeficienteAngular: 0, intercepto: 0, r2: 0 };\n    }\n\n    // Calcular médias\n    let somaX = 0;\n    let somaY = 0;\n    let somaXY = 0;\n    let somaXX = 0;\n    let somaYY = 0;\n\n    // Verificar se é array de pares [x, y] ou array simples\n    const isPares = Array.isArray(valores[0]);\n\n    for (let i = 0; i < n; i++) {\n      let x: number;\n      let y: number;\n\n      if (isPares) {\n        const par = valores[i] as [number, number];\n        x = par[0];\n        y = par[1];\n      } else {\n        x = i;\n        y = valores[i] as number;\n      }\n\n      somaX += x;\n      somaY += y;\n      somaXY += x * y;\n      somaXX += x * x;\n      somaYY += y * y;\n    }\n\n    const mediaX = somaX / n;\n    const mediaY = somaY / n;\n\n    // Calcular coeficientes\n    const numerador = somaXY - n * mediaX * mediaY;\n    const denominador = somaXX - n * mediaX * mediaX;\n\n    if (denominador === 0) {\n      return { coeficienteAngular: 0, intercepto: mediaY, r2: 0 };\n    }\n\n    const coeficienteAngular = numerador / denominador;\n    const intercepto = mediaY - coeficienteAngular * mediaX;\n\n    // Calcular R²\n    let sqtotal = 0;\n    let sqreg = 0;\n\n    for (let i = 0; i < n; i++) {\n      let x: number;\n      let y: number;\n\n      if (isPares) {\n        const par = valores[i] as [number, number];\n        x = par[0];\n        y = par[1];\n      } else {\n        x = i;\n        y = valores[i] as number;\n      }\n\n      const yPrevisto = intercepto + coeficienteAngular * x;\n\n      sqtotal += Math.pow(y - mediaY, 2);\n      sqreg += Math.pow(yPrevisto - mediaY, 2);\n    }\n\n    const r2 = sqtotal === 0 ? 0 : sqreg / sqtotal;\n\n    return { coeficienteAngular, intercepto, r2 };\n  }\n\n  /**\n   * Gera hash para as dimensões\n   */\n  static gerarHashDimensoes(dimensoes: Record<string, any>): string {\n    return JSON.stringify(dimensoes || {});\n  }\n}\n"],"version":3}