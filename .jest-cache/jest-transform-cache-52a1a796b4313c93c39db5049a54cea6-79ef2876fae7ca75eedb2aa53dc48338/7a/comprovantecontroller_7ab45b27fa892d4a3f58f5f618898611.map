{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\controllers\\comprovante.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\controllers\\comprovante.controller.ts"],"sourcesContent":["import { \n  Controller, \n  Get, \n  Post, \n  Delete, \n  Param, \n  ParseUUIDPipe, \n  UseInterceptors, \n  UploadedFile, \n  BadRequestException, \n  Body, \n  Res,\n  UseGuards,\n  NotFoundException\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiConsumes, ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ComprovanteService } from '../services/comprovante.service';\nimport { ComprovanteUploadDto } from '../dtos/comprovante-upload.dto';\nimport { ComprovanteResponseDto } from '../dtos/comprovante-response.dto';\nimport { Response } from 'express';\n\n/**\n * Controller para gerenciamento de comprovantes de pagamento\n * \n * Implementa endpoints para upload, visualização e remoção de\n * documentos comprobatórios anexados aos pagamentos.\n * \n * @author Equipe PGBen\n */\n@ApiTags('Pagamentos')\n@Controller('pagamentos/:pagamentoId/comprovantes')\nexport class ComprovanteController {\n  constructor(private readonly comprovanteService: ComprovanteService) {}\n\n  /**\n   * Lista todos os comprovantes associados a um pagamento\n   */\n  @Get()\n  @ApiOperation({ summary: 'Lista comprovantes para um determinado pagamento' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiResponse({ \n    status: 200, \n    description: 'Lista de comprovantes', \n    type: [ComprovanteResponseDto] \n  })\n  @ApiResponse({ status: 404, description: 'Pagamento não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async findAll(@Param('pagamentoId', ParseUUIDPipe) pagamentoId: string) {\n    const comprovantes = await this.comprovanteService.findAllByPagamento(pagamentoId);\n    \n    // Mapear para DTO de resposta\n    return comprovantes.map(comprovante => ({\n      id: comprovante.id,\n      pagamentoId: comprovante.pagamento_id,\n      tipoDocumento: comprovante.tipo_documento,\n      nomeArquivo: comprovante.nome_arquivo,\n      tamanho: comprovante.tamanho,\n      mimeType: comprovante.mime_type,\n      dataUpload: comprovante.data_upload,\n      uploadedPor: {\n        id: comprovante.uploaded_por,\n        nome: 'Usuário Responsável' // seria obtido da entidade Usuario\n      }\n    }));\n  }\n\n  /**\n   * Realiza o upload de um comprovante para um pagamento\n   */\n  @Post()\n  @UseInterceptors(FileInterceptor('file'))\n  @ApiConsumes('multipart/form-data')\n  @ApiOperation({ summary: 'Realiza upload de um comprovante para um pagamento' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiResponse({ status: 201, description: 'Comprovante enviado com sucesso', type: ComprovanteResponseDto })\n  @ApiResponse({ status: 400, description: 'Arquivo inválido ou dados incorretos' })\n  @ApiResponse({ status: 404, description: 'Pagamento não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async uploadComprovante(\n    @Param('pagamentoId', ParseUUIDPipe) pagamentoId: string,\n    @UploadedFile() file: any,\n    @Body() uploadDto: ComprovanteUploadDto,\n    // @CurrentUser() usuario: Usuario\n  ) {\n    if (!file) {\n      throw new BadRequestException('Nenhum arquivo enviado');\n    }\n\n    // Usar o ID do usuário atual\n    const usuarioId = 'placeholder'; // usuario.id;\n    \n    const comprovante = await this.comprovanteService.uploadComprovante(\n      pagamentoId,\n      file,\n      uploadDto,\n      usuarioId\n    );\n\n    // Mapear para DTO de resposta\n    return {\n      id: comprovante.id,\n      pagamentoId: comprovante.pagamento_id,\n      tipoDocumento: comprovante.tipo_documento,\n      nomeArquivo: comprovante.nome_arquivo,\n      tamanho: comprovante.tamanho,\n      mimeType: comprovante.mime_type,\n      dataUpload: comprovante.data_upload,\n      uploadedPor: {\n        id: usuarioId,\n        nome: 'Usuário Responsável' // seria obtido da entidade Usuario\n      }\n    };\n  }\n\n  /**\n   * Obtém um comprovante específico para download\n   */\n  @Get(':id/download')\n  @ApiOperation({ summary: 'Faz download de um comprovante' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiParam({ name: 'id', type: 'string', description: 'ID do comprovante' })\n  @ApiResponse({ status: 200, description: 'Arquivo enviado com sucesso' })\n  @ApiResponse({ status: 404, description: 'Comprovante não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async downloadComprovante(\n    @Param('id', ParseUUIDPipe) id: string,\n    @Res() res: Response\n  ) {\n    const { buffer, fileName, mimeType } = await this.comprovanteService.getComprovanteContent(id);\n    \n    res.set({\n      'Content-Type': mimeType,\n      'Content-Disposition': `attachment; filename=\"${encodeURIComponent(fileName)}\"`,\n      'Content-Length': buffer.length.toString()\n    });\n    \n    res.end(buffer);\n  }\n\n  /**\n   * Busca um comprovante pelo ID\n   */\n  @Get(':id')\n  @ApiOperation({ summary: 'Busca um comprovante pelo ID' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiParam({ name: 'id', type: 'string', description: 'ID do comprovante' })\n  @ApiResponse({ status: 200, description: 'Comprovante encontrado', type: ComprovanteResponseDto })\n  @ApiResponse({ status: 404, description: 'Comprovante não encontrado' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async findOne(@Param('id', ParseUUIDPipe) id: string) {\n    const comprovante = await this.comprovanteService.findOne(id);\n    \n    if (!comprovante) {\n      throw new NotFoundException('Comprovante não encontrado');\n    }\n\n    // Mapear para DTO de resposta\n    return {\n      id: comprovante.id,\n      pagamentoId: comprovante.pagamento_id,\n      tipoDocumento: comprovante.tipo_documento,\n      nomeArquivo: comprovante.nome_arquivo,\n      tamanho: comprovante.tamanho,\n      mimeType: comprovante.mime_type,\n      dataUpload: comprovante.data_upload,\n      uploadedPor: {\n        id: comprovante.uploaded_por,\n        nome: 'Usuário Responsável' // seria obtido da entidade Usuario\n      }\n    };\n  }\n\n  /**\n   * Remove um comprovante\n   */\n  @Delete(':id')\n  @ApiOperation({ summary: 'Remove um comprovante' })\n  @ApiParam({ name: 'pagamentoId', type: 'string', description: 'ID do pagamento' })\n  @ApiParam({ name: 'id', type: 'string', description: 'ID do comprovante' })\n  @ApiResponse({ status: 200, description: 'Comprovante removido com sucesso' })\n  @ApiResponse({ status: 404, description: 'Comprovante não encontrado' })\n  @ApiResponse({ status: 409, description: 'Comprovante não pode ser removido' })\n  @ApiResponse({ status: 403, description: 'Acesso negado' })\n  // @UseGuards(RolesGuard)\n  // @Roles('admin', 'gestor_semtas', 'tecnico')\n  async remove(\n    @Param('id', ParseUUIDPipe) id: string,\n    // @CurrentUser() usuario: Usuario\n  ) {\n    // Usar o ID do usuário atual\n    const usuarioId = 'placeholder'; // usuario.id;\n    \n    await this.comprovanteService.removeComprovante(id, usuarioId);\n    \n    return { message: 'Comprovante removido com sucesso' };\n  }\n}\n"],"version":3}