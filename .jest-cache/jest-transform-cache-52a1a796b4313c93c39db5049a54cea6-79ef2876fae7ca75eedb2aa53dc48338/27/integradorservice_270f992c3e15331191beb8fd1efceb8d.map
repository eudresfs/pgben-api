{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\services\\integrador.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\integrador\\services\\integrador.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Integrador } from '../../../entities/integrador.entity';\nimport { CreateIntegradorDto } from '../dto/create-integrador.dto';\nimport { UpdateIntegradorDto } from '../dto/update-integrador.dto';\nimport { IntegradorResponseDto } from '../dto/integrador-response.dto';\n\n/**\n * Serviço responsável pelo gerenciamento de integradores.\n * Implementa operações CRUD e regras de negócio específicas para integradores.\n */\n@Injectable()\nexport class IntegradorService {\n  constructor(\n    @InjectRepository(Integrador)\n    private integradorRepository: Repository<Integrador>,\n  ) {}\n\n  /**\n   * Cria um novo integrador na plataforma.\n   * @param createIntegradorDto Dados do integrador a ser criado\n   * @returns Dados do integrador criado\n   */\n  async create(\n    createIntegradorDto: CreateIntegradorDto,\n  ): Promise<IntegradorResponseDto> {\n    // Verifica se já existe um integrador com o mesmo nome\n    const existingIntegrador = await this.integradorRepository.findOne({\n      where: { nome: createIntegradorDto.nome },\n    });\n\n    if (existingIntegrador) {\n      throw new ConflictException(\n        `Já existe um integrador com o nome '${createIntegradorDto.nome}'`,\n      );\n    }\n\n    const integrador = this.integradorRepository.create(createIntegradorDto);\n    const savedIntegrador = await this.integradorRepository.save(integrador);\n\n    return new IntegradorResponseDto(savedIntegrador);\n  }\n\n  /**\n   * Retorna todos os integradores cadastrados.\n   * @returns Lista de integradores\n   */\n  async findAll(): Promise<IntegradorResponseDto[]> {\n    const integradores = await this.integradorRepository.find();\n    return integradores.map(\n      (integrador) => new IntegradorResponseDto(integrador),\n    );\n  }\n\n  /**\n   * Busca um integrador pelo seu ID.\n   * @param id ID do integrador\n   * @returns Dados do integrador encontrado\n   * @throws NotFoundException se o integrador não for encontrado\n   */\n  async findById(id: string): Promise<Integrador> {\n    const integrador = await this.integradorRepository.findOne({\n      where: { id },\n    });\n\n    if (!integrador) {\n      throw new NotFoundException(`Integrador com ID ${id} não encontrado`);\n    }\n\n    return integrador;\n  }\n\n  /**\n   * Obtém um integrador pelo ID e retorna com o formato de resposta padronizado.\n   * @param id ID do integrador\n   * @returns Dados do integrador no formato de resposta\n   */\n  async findOne(id: string): Promise<IntegradorResponseDto> {\n    const integrador = await this.findById(id);\n    return new IntegradorResponseDto(integrador);\n  }\n\n  /**\n   * Atualiza os dados de um integrador.\n   * @param id ID do integrador a ser atualizado\n   * @param updateIntegradorDto Dados a serem atualizados\n   * @returns Dados do integrador atualizado\n   */\n  async update(\n    id: string,\n    updateIntegradorDto: UpdateIntegradorDto,\n  ): Promise<IntegradorResponseDto> {\n    // Verifica se o integrador existe\n    const integrador = await this.findById(id);\n\n    // Se o nome estiver sendo alterado, verifica se já existe outro com o mesmo nome\n    if (\n      updateIntegradorDto.nome &&\n      updateIntegradorDto.nome !== integrador.nome\n    ) {\n      const existingIntegrador = await this.integradorRepository.findOne({\n        where: { nome: updateIntegradorDto.nome },\n      });\n\n      if (existingIntegrador) {\n        throw new ConflictException(\n          `Já existe um integrador com o nome '${updateIntegradorDto.nome}'`,\n        );\n      }\n    }\n\n    // Atualiza os dados\n    Object.assign(integrador, updateIntegradorDto);\n    const updatedIntegrador = await this.integradorRepository.save(integrador);\n\n    return new IntegradorResponseDto(updatedIntegrador);\n  }\n\n  /**\n   * Remove um integrador do sistema.\n   * @param id ID do integrador a ser removido\n   */\n  async remove(id: string): Promise<void> {\n    const integrador = await this.findById(id);\n    await this.integradorRepository.remove(integrador);\n  }\n\n  /**\n   * Ativa ou desativa um integrador.\n   * @param id ID do integrador\n   * @param ativo Novo status de ativação\n   * @returns Dados do integrador atualizado\n   */\n  async toggleAtivo(\n    id: string,\n    ativo: boolean,\n  ): Promise<IntegradorResponseDto> {\n    const integrador = await this.findById(id);\n    integrador.ativo = ativo;\n    const updatedIntegrador = await this.integradorRepository.save(integrador);\n\n    return new IntegradorResponseDto(updatedIntegrador);\n  }\n\n  /**\n   * Registra um acesso do integrador à API.\n   * @param id ID do integrador\n   */\n  async registrarAcesso(id: string): Promise<void> {\n    await this.integradorRepository.update(\n      { id },\n      { ultimoAcesso: new Date() },\n    );\n  }\n}\n"],"version":3}