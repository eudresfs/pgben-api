{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\controllers\\template.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CASwB;AACxB,6CAMyB;AACzB,mEAA+D;AAC/D,8EAAyE;AACzE,8EAAyE;AACzE,0EAAqE;AACrE,kFAA6E;AAC7E,0EAAqE;AAErE;;GAEG;AAGI,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IACA;IAA7B,YAA6B,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IAEjE;;;;OAIG;IAcG,AAAN,KAAK,CAAC,WAAW,CACA,IAAuB;QAEtC,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;;;;OAIG;IAiBG,AAAN,KAAK,CAAC,eAAe,CACF,MAAc;QAE/B,OAAO,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;IACtD,CAAC;IAED;;;;OAIG;IAYG,AAAN,KAAK,CAAC,KAAK,CAAS,GAAsB;QACxC,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;IAED;;;;;OAKG;IAqBG,AAAN,KAAK,CAAC,SAAS,CACI,MAAc,EACvB,GAAsB;QAE9B,OAAO,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IAgBG,AAAN,KAAK,CAAC,OAAO,CAAkB,MAAc;QAC3C,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED;;;;OAIG;IAoBG,AAAN,KAAK,CAAC,MAAM,CAAS,GAAoB;QACvC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;OAKG;IAiBG,AAAN,KAAK,CAAC,aAAa,CACA,MAAc,EACvB,EAAE,KAAK,EAAsB;QAErC,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IAaG,AAAN,KAAK,CAAC,aAAa,CACF,IAAsB;QAErC,OAAO,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;CACF,CAAA;AAjNY,gDAAkB;AAqBvB;IAbL,IAAA,YAAG,GAAE;IACL,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,sCAAsC,EAAE,CAAC;IACjE,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,KAAK;QACf,WAAW,EAAE,8BAA8B;QAC3C,IAAI,EAAE,qCAAgB;KACvB,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,gCAAgC;QAC7C,IAAI,EAAE,CAAC,2CAAmB,CAAC;KAC5B,CAAC;IAEC,WAAA,IAAA,cAAK,EAAC,MAAM,CAAC,CAAA;;yDAAQ,qCAAgB,oBAAhB,qCAAgB;wDACrC,OAAO,oBAAP,OAAO;qDAET;AAuBK;IAhBL,IAAA,YAAG,EAAC,SAAS,CAAC;IACd,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;IACvD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,0BAA0B;QACvC,OAAO,EAAE,iBAAiB;KAC3B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,qBAAqB;QAClC,IAAI,EAAE,2CAAmB;KAC1B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yBAAyB;KACvC,CAAC;IAEC,WAAA,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAA;;;wDACf,OAAO,oBAAP,OAAO;yDAET;AAkBK;IAXL,IAAA,aAAI,GAAE;IACN,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;IAChD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,6BAA6B;QAC1C,IAAI,EAAE,2CAAmB;KAC1B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,uCAAuC;KACrD,CAAC;IACW,WAAA,IAAA,aAAI,GAAE,CAAA;;yDAAM,uCAAiB,oBAAjB,uCAAiB;wDAAG,OAAO,oBAAP,OAAO;+CAEnD;AA4BK;IApBL,IAAA,YAAG,EAAC,SAAS,CAAC;IACd,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC;IACzD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,0BAA0B;QACvC,OAAO,EAAE,iBAAiB;KAC3B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,iCAAiC;QAC9C,IAAI,EAAE,2CAAmB;KAC1B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yBAAyB;KACvC,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,iBAAiB;KAC/B,CAAC;IAEC,WAAA,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAA;IACf,WAAA,IAAA,aAAI,GAAE,CAAA;;iEAAM,uCAAiB,oBAAjB,uCAAiB;wDAC7B,OAAO,oBAAP,OAAO;mDAET;AAqBK;IAfL,IAAA,eAAM,EAAC,SAAS,CAAC;IACjB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC7C,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,0BAA0B;QACvC,OAAO,EAAE,iBAAiB;KAC3B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,+BAA+B;KAC7C,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yBAAyB;KACvC,CAAC;IACa,WAAA,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAA;;;wDAAkB,OAAO,oBAAP,OAAO;iDAEtD;AA0BK;IAnBL,IAAA,aAAI,EAAC,QAAQ,CAAC;IACd,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC;IAC5D,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,kCAAkC;QAC/C,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACV,QAAQ,EAAE;oBACR,IAAI,EAAE,QAAQ;oBACd,WAAW,EAAE,kCAAkC;iBAChD;aACF;SACF;KACF,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yCAAyC;KACvD,CAAC;IACY,WAAA,IAAA,aAAI,GAAE,CAAA;;yDAAM,mCAAe,oBAAf,mCAAe;wDAAG,OAAO,oBAAP,OAAO;gDAElD;AAwBK;IAhBL,IAAA,YAAG,EAAC,gBAAgB,CAAC;IACrB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC;IACzD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,0BAA0B;QACvC,OAAO,EAAE,iBAAiB;KAC3B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,2CAA2C;QACxD,IAAI,EAAE,2CAAmB;KAC1B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yBAAyB;KACvC,CAAC;IAEC,WAAA,IAAA,cAAK,EAAC,QAAQ,CAAC,CAAA;IACf,WAAA,IAAA,aAAI,GAAE,CAAA;;;wDACN,OAAO,oBAAP,OAAO;uDAET;AAmBK;IAZL,IAAA,YAAG,EAAC,YAAY,CAAC;IACjB,IAAA,sBAAY,EAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC;IACtD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,kBAAkB;QAC/B,IAAI,EAAE,qCAAgB;KACvB,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,gCAAgC;QAC7C,IAAI,EAAE,CAAC,2CAAmB,CAAC;KAC5B,CAAC;IAEC,WAAA,IAAA,cAAK,EAAC,MAAM,CAAC,CAAA;;yDAAO,qCAAgB,oBAAhB,qCAAgB;wDACpC,OAAO,oBAAP,OAAO;uDAET;6BAhNU,kBAAkB;IAF9B,IAAA,iBAAO,EAAC,cAAc,CAAC;IACvB,IAAA,mBAAU,EAAC,wBAAwB,CAAC;yDAEW,kCAAe,oBAAf,kCAAe;GADlD,kBAAkB,CAiN9B","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\controllers\\template.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Put,\n  Delete,\n  Body,\n  Param,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { TemplateService } from '../services/template.service';\nimport { TemplateCreateDto } from '../dtos/template/template-create.dto';\nimport { TemplateUpdateDto } from '../dtos/template/template-update.dto';\nimport { TemplateTestDto } from '../dtos/template/template-test.dto';\nimport { TemplateResponseDto } from '../dtos/template/template-response.dto';\nimport { TemplateTipoEnum } from '../../../enums/template-tipo.enum';\n\n/**\n * Controlador responsável pelas operações de templates do sistema\n */\n@ApiTags('Configuração')\n@Controller('configuracao/templates')\nexport class TemplateController {\n  constructor(private readonly templateService: TemplateService) {}\n\n  /**\n   * Busca todos os templates do sistema\n   * @param tipo Tipo opcional para filtrar\n   * @returns Lista de templates\n   */\n  @Get()\n  @ApiOperation({ summary: 'Buscar todos os templates do sistema' })\n  @ApiQuery({\n    name: 'tipo',\n    required: false,\n    description: 'Filtrar por tipo de template',\n    enum: TemplateTipoEnum,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de templates encontrados',\n    type: [TemplateResponseDto],\n  })\n  async buscarTodos(\n    @Query('tipo') tipo?: TemplateTipoEnum,\n  ): Promise<TemplateResponseDto[]> {\n    return this.templateService.buscarTodos(tipo);\n  }\n\n  /**\n   * Busca um template específico por seu código\n   * @param codigo Código do template\n   * @returns Template encontrado\n   */\n  @Get(':codigo')\n  @ApiOperation({ summary: 'Buscar template por código' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único do template',\n    example: 'email-bem-vindo',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Template encontrado',\n    type: TemplateResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Template não encontrado',\n  })\n  async buscarPorCodigo(\n    @Param('codigo') codigo: string,\n  ): Promise<TemplateResponseDto> {\n    return this.templateService.buscarPorCodigo(codigo);\n  }\n\n  /**\n   * Cria um novo template no sistema\n   * @param dto Dados do template a ser criado\n   * @returns Template criado\n   */\n  @Post()\n  @ApiOperation({ summary: 'Criar novo template' })\n  @ApiResponse({\n    status: 201,\n    description: 'Template criado com sucesso',\n    type: TemplateResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou template já existe',\n  })\n  async criar(@Body() dto: TemplateCreateDto): Promise<TemplateResponseDto> {\n    return this.templateService.criar(dto);\n  }\n\n  /**\n   * Atualiza um template existente\n   * @param codigo Código do template\n   * @param dto Dados para atualização\n   * @returns Template atualizado\n   */\n  @Put(':codigo')\n  @ApiOperation({ summary: 'Atualizar template existente' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único do template',\n    example: 'email-bem-vindo',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Template atualizado com sucesso',\n    type: TemplateResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Template não encontrado',\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos',\n  })\n  async atualizar(\n    @Param('codigo') codigo: string,\n    @Body() dto: TemplateUpdateDto,\n  ): Promise<TemplateResponseDto> {\n    return this.templateService.atualizar(codigo, dto);\n  }\n\n  /**\n   * Remove um template do sistema\n   * @param codigo Código do template\n   */\n  @Delete(':codigo')\n  @ApiOperation({ summary: 'Remover template' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único do template',\n    example: 'email-bem-vindo',\n  })\n  @ApiResponse({\n    status: 204,\n    description: 'Template removido com sucesso',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Template não encontrado',\n  })\n  async remover(@Param('codigo') codigo: string): Promise<void> {\n    await this.templateService.remover(codigo);\n  }\n\n  /**\n   * Testa a renderização de um template com dados de exemplo\n   * @param dto Dados para teste do template\n   * @returns Conteúdo renderizado\n   */\n  @Post('testar')\n  @ApiOperation({ summary: 'Testar renderização de template' })\n  @ApiResponse({\n    status: 200,\n    description: 'Template renderizado com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        conteudo: {\n          type: 'string',\n          description: 'Conteúdo renderizado do template',\n        },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou erro na renderização',\n  })\n  async testar(@Body() dto: TemplateTestDto): Promise<{ conteudo: string }> {\n    return this.templateService.testar(dto);\n  }\n\n  /**\n   * Ativa ou desativa um template\n   * @param codigo Código do template\n   * @param ativo Status de ativação\n   * @returns Template atualizado\n   */\n  @Put(':codigo/status')\n  @ApiOperation({ summary: 'Ativar ou desativar template' })\n  @ApiParam({\n    name: 'codigo',\n    description: 'Código único do template',\n    example: 'email-bem-vindo',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Status do template atualizado com sucesso',\n    type: TemplateResponseDto,\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Template não encontrado',\n  })\n  async alterarStatus(\n    @Param('codigo') codigo: string,\n    @Body() { ativo }: { ativo: boolean },\n  ): Promise<TemplateResponseDto> {\n    return this.templateService.alterarStatus(codigo, ativo);\n  }\n\n  /**\n   * Busca templates por tipo\n   * @param tipo Tipo dos templates\n   * @returns Lista de templates\n   */\n  @Get('tipo/:tipo')\n  @ApiOperation({ summary: 'Buscar templates por tipo' })\n  @ApiParam({\n    name: 'tipo',\n    description: 'Tipo de template',\n    enum: TemplateTipoEnum,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de templates encontrados',\n    type: [TemplateResponseDto],\n  })\n  async buscarPorTipo(\n    @Param('tipo') tipo: TemplateTipoEnum,\n  ): Promise<TemplateResponseDto[]> {\n    return this.templateService.buscarPorTipo(tipo);\n  }\n}\n"],"version":3}