{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\limites.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\limites.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { ParametroService } from './parametro.service';\nimport { LimitesUploadDto } from '../dtos/limites/limites-upload.dto';\nimport { PrazoUpdateDto } from '../dtos/limites/prazo-update.dto';\nimport { LimitesUploadResponseDto } from '../dtos/limites/limites-upload-response.dto';\nimport { ValidationErrorException } from '../../../shared/exceptions';\n\n/**\n * Serviço para gerenciamento de limites operacionais do sistema\n *\n * Responsável por:\n * - Gerenciar limites de upload (tamanho, tipos)\n * - Gerenciar prazos de processos\n * - Fornecer valores formatados para uso na interface\n */\n@Injectable()\nexport class LimitesService {\n  private readonly logger = new Logger(LimitesService.name);\n\n  // Chaves dos parâmetros de limites de upload\n  private readonly KEY_UPLOAD_MAX_SIZE = 'upload.tamanho_maximo';\n  private readonly KEY_UPLOAD_MAX_FILES = 'upload.arquivos_maximo';\n  private readonly KEY_UPLOAD_ALLOWED_TYPES = 'upload.tipos_permitidos';\n  private readonly KEY_UPLOAD_MAX_PER_REQUEST = 'upload.max_por_requisicao';\n\n  // Chaves dos parâmetros de prazos\n  private readonly KEY_PRAZO_ANALISE = 'prazo.analise_solicitacao';\n  private readonly KEY_PRAZO_ENTREVISTA = 'prazo.agendamento_entrevista';\n  private readonly KEY_PRAZO_RECURSO = 'prazo.entrada_recurso';\n  private readonly KEY_PRAZO_VALIDADE = 'prazo.validade_documentos';\n\n  // Valores padrão\n  private readonly DEFAULT_MAX_SIZE = 10 * 1024 * 1024; // 10MB\n  private readonly DEFAULT_MAX_FILES = 20;\n  private readonly DEFAULT_ALLOWED_TYPES = [\n    'jpg',\n    'jpeg',\n    'png',\n    'pdf',\n    'doc',\n    'docx',\n  ];\n  private readonly DEFAULT_MAX_PER_REQUEST = 5;\n\n  private readonly DEFAULT_PRAZO_ANALISE = 15; // dias\n  private readonly DEFAULT_PRAZO_ENTREVISTA = 7; // dias\n  private readonly DEFAULT_PRAZO_RECURSO = 10; // dias\n  private readonly DEFAULT_PRAZO_VALIDADE = 90; // dias\n\n  constructor(private readonly parametroService: ParametroService) {}\n\n  /**\n   * Busca os limites de upload configurados\n   * @returns DTO com os limites de upload\n   */\n  async buscarLimitesUpload(): Promise<LimitesUploadResponseDto> {\n    const dto = new LimitesUploadResponseDto();\n\n    dto.tamanho_maximo = await this.parametroService.obterNumero(\n      this.KEY_UPLOAD_MAX_SIZE,\n      this.DEFAULT_MAX_SIZE,\n    );\n\n    dto.arquivos_maximo = await this.parametroService.obterNumero(\n      this.KEY_UPLOAD_MAX_FILES,\n      this.DEFAULT_MAX_FILES,\n    );\n\n    dto.tipos_permitidos = await this.parametroService.obterJson<string[]>(\n      this.KEY_UPLOAD_ALLOWED_TYPES,\n      this.DEFAULT_ALLOWED_TYPES,\n    );\n\n    dto.max_por_requisicao = await this.parametroService.obterNumero(\n      this.KEY_UPLOAD_MAX_PER_REQUEST,\n      this.DEFAULT_MAX_PER_REQUEST,\n    );\n\n    // Adicionar versões formatadas para exibição\n    dto.tamanho_maximo_formatado = this.formatarTamanhoBytes(\n      dto.tamanho_maximo,\n    );\n\n    return dto;\n  }\n\n  /**\n   * Atualiza os limites de upload\n   * @param dto DTO com os novos limites\n   * @returns DTO com os limites atualizados\n   */\n  async atualizarLimitesUpload(\n    dto: LimitesUploadDto,\n  ): Promise<LimitesUploadResponseDto> {\n    if (dto.tamanho_maximo !== undefined) {\n      await this.parametroService.atualizar(this.KEY_UPLOAD_MAX_SIZE, {\n        valor: String(dto.tamanho_maximo),\n        descricao: 'Tamanho máximo de arquivos para upload (em bytes)',\n      });\n    }\n\n    if (dto.arquivos_maximo !== undefined) {\n      await this.parametroService.atualizar(this.KEY_UPLOAD_MAX_FILES, {\n        valor: String(dto.arquivos_maximo),\n        descricao: 'Número máximo de arquivos por cidadão',\n      });\n    }\n\n    if (dto.tipos_permitidos !== undefined) {\n      await this.parametroService.atualizar(this.KEY_UPLOAD_ALLOWED_TYPES, {\n        valor: JSON.stringify(dto.tipos_permitidos),\n        descricao: 'Tipos de arquivo permitidos para upload',\n      });\n    }\n\n    if (dto.max_por_requisicao !== undefined) {\n      await this.parametroService.atualizar(this.KEY_UPLOAD_MAX_PER_REQUEST, {\n        valor: String(dto.max_por_requisicao),\n        descricao: 'Número máximo de arquivos por requisição de upload',\n      });\n    }\n\n    this.logger.log('Limites de upload atualizados');\n    return this.buscarLimitesUpload();\n  }\n\n  /**\n   * Busca o prazo configurado para uma etapa específica\n   * @param tipo Tipo do prazo\n   * @returns Prazo em dias\n   */\n  async buscarPrazo(tipo: string): Promise<number> {\n    const chave = this.obterChavePrazo(tipo);\n    const padrao = this.obterPrazoPadrao(tipo);\n\n    return this.parametroService.obterNumero(chave, padrao);\n  }\n\n  /**\n   * Atualiza o prazo para uma etapa específica\n   * @param tipo Tipo do prazo\n   * @param dto DTO com o novo prazo\n   * @returns Prazo atualizado em dias\n   */\n  async atualizarPrazo(tipo: string, dto: PrazoUpdateDto): Promise<number> {\n    const chave = this.obterChavePrazo(tipo);\n\n    if (dto.dias === undefined || dto.dias < 1) {\n      throw new ValidationErrorException(\n        'dias',\n        dto.dias,\n        'number',\n        'Prazo deve ser pelo menos 1 dia',\n      );\n    }\n\n    const descricao = this.obterDescricaoPrazo(tipo);\n\n    await this.parametroService.atualizar(chave, {\n      valor: String(dto.dias),\n      descricao,\n    });\n\n    this.logger.log(`Prazo de ${tipo} atualizado para ${dto.dias} dias`);\n    return dto.dias;\n  }\n\n  /**\n   * Obtém a chave do parâmetro para um tipo de prazo\n   * @param tipo Tipo do prazo\n   * @returns Chave do parâmetro\n   */\n  private obterChavePrazo(tipo: string): string {\n    switch (tipo) {\n      case 'analise':\n        return this.KEY_PRAZO_ANALISE;\n      case 'entrevista':\n        return this.KEY_PRAZO_ENTREVISTA;\n      case 'recurso':\n        return this.KEY_PRAZO_RECURSO;\n      case 'validade':\n        return this.KEY_PRAZO_VALIDADE;\n      default:\n        throw new ValidationErrorException(\n          'tipo',\n          tipo,\n          'string',\n          `Tipo de prazo não reconhecido: ${tipo}`,\n        );\n    }\n  }\n\n  /**\n   * Obtém o valor padrão para um tipo de prazo\n   * @param tipo Tipo do prazo\n   * @returns Prazo padrão em dias\n   */\n  private obterPrazoPadrao(tipo: string): number {\n    switch (tipo) {\n      case 'analise':\n        return this.DEFAULT_PRAZO_ANALISE;\n      case 'entrevista':\n        return this.DEFAULT_PRAZO_ENTREVISTA;\n      case 'recurso':\n        return this.DEFAULT_PRAZO_RECURSO;\n      case 'validade':\n        return this.DEFAULT_PRAZO_VALIDADE;\n      default:\n        return 30; // Valor genérico\n    }\n  }\n\n  /**\n   * Obtém a descrição para um tipo de prazo\n   * @param tipo Tipo do prazo\n   * @returns Descrição do prazo\n   */\n  private obterDescricaoPrazo(tipo: string): string {\n    switch (tipo) {\n      case 'analise':\n        return 'Prazo para análise de solicitação de benefício (em dias)';\n      case 'entrevista':\n        return 'Prazo para agendamento de entrevista (em dias)';\n      case 'recurso':\n        return 'Prazo para entrada de recurso (em dias)';\n      case 'validade':\n        return 'Prazo de validade de documentos (em dias)';\n      default:\n        return `Prazo para ${tipo} (em dias)`;\n    }\n  }\n\n  /**\n   * Formata um tamanho em bytes para exibição amigável\n   * @param bytes Tamanho em bytes\n   * @returns String formatada (ex: \"10 MB\")\n   */\n  private formatarTamanhoBytes(bytes: number): string {\n    if (bytes < 1024) {\n      return `${bytes} B`;\n    } else if (bytes < 1024 * 1024) {\n      return `${(bytes / 1024).toFixed(2)} KB`;\n    } else if (bytes < 1024 * 1024 * 1024) {\n      return `${(bytes / (1024 * 1024)).toFixed(2)} MB`;\n    } else {\n      return `${(bytes / (1024 * 1024 * 1024)).toFixed(2)} GB`;\n    }\n  }\n\n  /**\n   * Verifica se um arquivo está dentro dos limites permitidos\n   * @param tamanhoBytes Tamanho do arquivo em bytes\n   * @param extensao Extensão do arquivo\n   * @returns true se estiver dentro dos limites, false caso contrário\n   */\n  async verificarLimitesArquivo(\n    tamanhoBytes: number,\n    extensao: string,\n  ): Promise<boolean> {\n    const limites = await this.buscarLimitesUpload();\n\n    // Verificar tamanho\n    if (tamanhoBytes > limites.tamanho_maximo) {\n      return false;\n    }\n\n    // Verificar extensão (normalizar para minúsculas sem ponto)\n    extensao = extensao.toLowerCase().replace(/^\\./, '');\n    if (!limites.tipos_permitidos.includes(extensao)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Verifica se um conjunto de arquivos está dentro do limite máximo por requisição\n   * @param quantidadeArquivos Quantidade de arquivos\n   * @returns true se estiver dentro do limite, false caso contrário\n   */\n  async verificarLimiteQuantidade(\n    quantidadeArquivos: number,\n  ): Promise<boolean> {\n    const limites = await this.buscarLimitesUpload();\n    return quantidadeArquivos <= limites.max_por_requisicao;\n  }\n\n  /**\n   * Verifica se o usuário já atingiu o limite máximo de arquivos\n   * @param cidadaoId ID do cidadão\n   * @param quantidadeAtual Quantidade atual de arquivos\n   * @returns true se ainda estiver dentro do limite, false caso contrário\n   */\n  async verificarLimiteUsuario(\n    cidadaoId: string,\n    quantidadeAtual: number,\n  ): Promise<boolean> {\n    const limites = await this.buscarLimitesUpload();\n    return quantidadeAtual < limites.arquivos_maximo;\n  }\n\n  /**\n   * Calcula a data limite para uma etapa com base no prazo configurado\n   * @param tipo Tipo do prazo\n   * @param dataReferencia Data de referência para o cálculo\n   * @returns Data limite\n   */\n  async calcularDataLimite(\n    tipo: string,\n    dataReferencia: Date = new Date(),\n  ): Promise<Date> {\n    const prazoEmDias = await this.buscarPrazo(tipo);\n\n    const dataLimite = new Date(dataReferencia);\n    dataLimite.setDate(dataLimite.getDate() + prazoEmDias);\n\n    return dataLimite;\n  }\n}\n"],"version":3}