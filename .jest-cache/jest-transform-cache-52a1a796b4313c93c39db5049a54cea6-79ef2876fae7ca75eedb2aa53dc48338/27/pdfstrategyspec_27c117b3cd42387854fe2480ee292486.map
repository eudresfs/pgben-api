{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\pdf.strategy.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\pdf.strategy.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { PdfStrategy } from '../strategies/pdf.strategy';\nimport { TempFilesService } from '../services/temp-files.service';\nimport * as fs from 'fs';\n\n/**\n * Testes unitários para a estratégia de relatórios em PDF\n *\n * Este arquivo contém testes que validam a funcionalidade da estratégia\n * responsável por gerar relatórios em formato PDF\n */\ndescribe('PdfStrategy', () => {\n  let strategy: PdfStrategy;\n  let tempFilesService: TempFilesService;\n\n  // Mock para fs e PDFDocument\n  const mockCreateWriteStream = jest.fn();\n  const mockPipeToResponse = jest.fn();\n  const mockPdfDocument = {\n    pipe: jest.fn().mockReturnThis(),\n    fontSize: jest.fn().mockReturnThis(),\n    font: jest.fn().mockReturnThis(),\n    text: jest.fn().mockReturnThis(),\n    moveDown: jest.fn().mockReturnThis(),\n    table: jest.fn().mockReturnThis(),\n    addPage: jest.fn().mockReturnThis(),\n    end: jest.fn(),\n    on: jest.fn((event, callback) => {\n      if (event === 'end') {\n        callback();\n      }\n      return mockPdfDocument;\n    }),\n  };\n\n  jest.mock('pdfkit', () => {\n    return jest.fn().mockImplementation(() => mockPdfDocument);\n  });\n\n  jest.mock('fs', () => ({\n    createWriteStream: mockCreateWriteStream,\n    readFileSync: jest.fn().mockReturnValue(Buffer.from('mock pdf content')),\n    promises: {\n      unlink: jest.fn(),\n    },\n  }));\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PdfStrategy,\n        {\n          provide: TempFilesService,\n          useValue: {\n            getTempFilePath: jest\n              .fn()\n              .mockReturnValue('temp/relatorios/test-123.pdf'),\n            cleanupTempFile: jest.fn().mockResolvedValue(undefined),\n          },\n        },\n      ],\n    }).compile();\n\n    strategy = module.get<PdfStrategy>(PdfStrategy);\n    tempFilesService = module.get<TempFilesService>(TempFilesService);\n\n    // Reset mocks antes de cada teste\n    jest.clearAllMocks();\n    mockCreateWriteStream.mockReturnValue({\n      on: jest.fn((event, callback) => {\n        if (event === 'finish') {\n          callback();\n        }\n      }),\n    });\n  });\n\n  it('deve ser definido', () => {\n    expect(strategy).toBeDefined();\n  });\n\n  describe('gerar', () => {\n    it('deve gerar um relatório PDF e retornar um buffer', async () => {\n      const tipo = 'beneficios';\n      const dados = {\n        titulo: 'Relatório de Benefícios',\n        cabecalho: { data: '01/01/2025' },\n        itens: [{ id: 1, nome: 'Benefício Teste', valor: 100 }],\n      };\n      const opcoes = { orientacao: 'retrato', tamanho: 'A4' };\n\n      const result = await strategy.gerar(tipo, dados, opcoes);\n\n      expect(result).toBeInstanceOf(Buffer);\n      expect(tempFilesService.getTempFilePath).toHaveBeenCalledWith(\n        expect.stringContaining('relatorio'),\n        'pdf',\n      );\n      expect(tempFilesService.cleanupTempFile).toHaveBeenCalledWith(\n        expect.stringContaining('temp/relatorios/test-123.pdf'),\n      );\n    });\n\n    it('deve gerar relatório de benefícios corretamente', async () => {\n      const tipo = 'beneficios';\n      const dados = {\n        titulo: 'Relatório de Benefícios Concedidos',\n        periodo: '01/01/2025 a 31/01/2025',\n        unidade: 'Unidade Teste',\n        tipoBeneficio: 'Auxílio Moradia',\n        itens: [\n          { id: 1, nome: 'Benefício 1', data: '01/01/2025', valor: 100 },\n          { id: 2, nome: 'Benefício 2', data: '15/01/2025', valor: 200 },\n        ],\n        total: 300,\n      };\n      const opcoes = {};\n\n      await strategy.gerar(tipo, dados, opcoes);\n\n      // Verificar se os métodos do PDFKit foram chamados corretamente\n      expect(mockPdfDocument.fontSize).toHaveBeenCalled();\n      expect(mockPdfDocument.text).toHaveBeenCalledWith(\n        expect.stringContaining('Relatório de Benefícios'),\n        expect.anything(),\n        expect.anything(),\n      );\n      expect(mockPdfDocument.end).toHaveBeenCalled();\n    });\n\n    it('deve gerar relatório de solicitações corretamente', async () => {\n      const tipo = 'solicitacoes';\n      const dados = {\n        titulo: 'Relatório de Solicitações por Status',\n        periodo: '01/01/2025 a 31/01/2025',\n        unidade: 'Unidade Teste',\n        itens: [\n          { status: 'Pendente', quantidade: 10 },\n          { status: 'Aprovado', quantidade: 20 },\n          { status: 'Reprovado', quantidade: 5 },\n        ],\n        total: 35,\n      };\n      const opcoes = {};\n\n      await strategy.gerar(tipo, dados, opcoes);\n\n      // Verificar se os métodos do PDFKit foram chamados corretamente\n      expect(mockPdfDocument.fontSize).toHaveBeenCalled();\n      expect(mockPdfDocument.text).toHaveBeenCalledWith(\n        expect.stringContaining('Relatório de Solicitações'),\n        expect.anything(),\n        expect.anything(),\n      );\n      expect(mockPdfDocument.end).toHaveBeenCalled();\n    });\n\n    it('deve gerar relatório de atendimentos corretamente', async () => {\n      const tipo = 'atendimentos';\n      const dados = {\n        titulo: 'Relatório de Atendimentos por Unidade',\n        periodo: '01/01/2025 a 31/01/2025',\n        itens: [\n          {\n            unidade: 'Unidade A',\n            totalSolicitacoes: 15,\n            solicitacoesLiberadas: 10,\n            solicitacoesPendentes: 5,\n          },\n          {\n            unidade: 'Unidade B',\n            totalSolicitacoes: 20,\n            solicitacoesLiberadas: 15,\n            solicitacoesPendentes: 5,\n          },\n        ],\n        totais: {\n          totalSolicitacoes: 35,\n          solicitacoesLiberadas: 25,\n          solicitacoesPendentes: 10,\n        },\n      };\n      const opcoes = {};\n\n      await strategy.gerar(tipo, dados, opcoes);\n\n      // Verificar se os métodos do PDFKit foram chamados corretamente\n      expect(mockPdfDocument.fontSize).toHaveBeenCalled();\n      expect(mockPdfDocument.text).toHaveBeenCalledWith(\n        expect.stringContaining('Relatório de Atendimentos'),\n        expect.anything(),\n        expect.anything(),\n      );\n      expect(mockPdfDocument.end).toHaveBeenCalled();\n    });\n\n    it('deve lidar com erros corretamente', async () => {\n      const mockError = new Error('Erro ao gerar PDF');\n      mockPdfDocument.on.mockImplementationOnce((event, callback) => {\n        if (event === 'error') {\n          callback(mockError);\n        }\n        return mockPdfDocument;\n      });\n\n      const tipo = 'beneficios';\n      const dados = { titulo: 'Teste', itens: [] };\n      const opcoes = {};\n\n      await expect(strategy.gerar(tipo, dados, opcoes)).rejects.toThrow(\n        'Erro ao gerar PDF',\n      );\n\n      expect(tempFilesService.cleanupTempFile).toHaveBeenCalledWith(\n        expect.stringContaining('temp/relatorios/test-123.pdf'),\n      );\n    });\n  });\n});\n"],"version":3}