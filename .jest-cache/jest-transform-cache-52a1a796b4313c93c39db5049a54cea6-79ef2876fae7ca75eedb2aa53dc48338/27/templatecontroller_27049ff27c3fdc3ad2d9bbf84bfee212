fbf0fc803a184e3231d2cb164c202015
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const template_service_1 = require("../services/template.service");
const template_create_dto_1 = require("../dtos/template/template-create.dto");
const template_update_dto_1 = require("../dtos/template/template-update.dto");
const template_test_dto_1 = require("../dtos/template/template-test.dto");
const template_response_dto_1 = require("../dtos/template/template-response.dto");
const template_tipo_enum_1 = require("../../../enums/template-tipo.enum");
/**
 * Controlador responsável pelas operações de templates do sistema
 */
let TemplateController = class TemplateController {
    templateService;
    constructor(templateService) {
        this.templateService = templateService;
    }
    /**
     * Busca todos os templates do sistema
     * @param tipo Tipo opcional para filtrar
     * @returns Lista de templates
     */
    async buscarTodos(tipo) {
        return this.templateService.buscarTodos(tipo);
    }
    /**
     * Busca um template específico por seu código
     * @param codigo Código do template
     * @returns Template encontrado
     */
    async buscarPorCodigo(codigo) {
        return this.templateService.buscarPorCodigo(codigo);
    }
    /**
     * Cria um novo template no sistema
     * @param dto Dados do template a ser criado
     * @returns Template criado
     */
    async criar(dto) {
        return this.templateService.criar(dto);
    }
    /**
     * Atualiza um template existente
     * @param codigo Código do template
     * @param dto Dados para atualização
     * @returns Template atualizado
     */
    async atualizar(codigo, dto) {
        return this.templateService.atualizar(codigo, dto);
    }
    /**
     * Remove um template do sistema
     * @param codigo Código do template
     */
    async remover(codigo) {
        await this.templateService.remover(codigo);
    }
    /**
     * Testa a renderização de um template com dados de exemplo
     * @param dto Dados para teste do template
     * @returns Conteúdo renderizado
     */
    async testar(dto) {
        return this.templateService.testar(dto);
    }
    /**
     * Ativa ou desativa um template
     * @param codigo Código do template
     * @param ativo Status de ativação
     * @returns Template atualizado
     */
    async alterarStatus(codigo, { ativo }) {
        return this.templateService.alterarStatus(codigo, ativo);
    }
    /**
     * Busca templates por tipo
     * @param tipo Tipo dos templates
     * @returns Lista de templates
     */
    async buscarPorTipo(tipo) {
        return this.templateService.buscarPorTipo(tipo);
    }
};
exports.TemplateController = TemplateController;
__decorate([
    (0, common_1.Get)(),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar todos os templates do sistema' }),
    (0, swagger_1.ApiQuery)({
        name: 'tipo',
        required: false,
        description: 'Filtrar por tipo de template',
        enum: template_tipo_enum_1.TemplateTipoEnum,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de templates encontrados',
        type: [template_response_dto_1.TemplateResponseDto],
    }),
    __param(0, (0, common_1.Query)('tipo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof template_tipo_enum_1.TemplateTipoEnum !== "undefined" && template_tipo_enum_1.TemplateTipoEnum) === "function" ? _b : Object]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], TemplateController.prototype, "buscarTodos", null);
__decorate([
    (0, common_1.Get)(':codigo'),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar template por código' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único do template',
        example: 'email-bem-vindo',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Template encontrado',
        type: template_response_dto_1.TemplateResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Template não encontrado',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], TemplateController.prototype, "buscarPorCodigo", null);
__decorate([
    (0, common_1.Post)(),
    (0, swagger_1.ApiOperation)({ summary: 'Criar novo template' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Template criado com sucesso',
        type: template_response_dto_1.TemplateResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou template já existe',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof template_create_dto_1.TemplateCreateDto !== "undefined" && template_create_dto_1.TemplateCreateDto) === "function" ? _e : Object]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], TemplateController.prototype, "criar", null);
__decorate([
    (0, common_1.Put)(':codigo'),
    (0, swagger_1.ApiOperation)({ summary: 'Atualizar template existente' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único do template',
        example: 'email-bem-vindo',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Template atualizado com sucesso',
        type: template_response_dto_1.TemplateResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Template não encontrado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_g = typeof template_update_dto_1.TemplateUpdateDto !== "undefined" && template_update_dto_1.TemplateUpdateDto) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], TemplateController.prototype, "atualizar", null);
__decorate([
    (0, common_1.Delete)(':codigo'),
    (0, swagger_1.ApiOperation)({ summary: 'Remover template' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único do template',
        example: 'email-bem-vindo',
    }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Template removido com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Template não encontrado',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], TemplateController.prototype, "remover", null);
__decorate([
    (0, common_1.Post)('testar'),
    (0, swagger_1.ApiOperation)({ summary: 'Testar renderização de template' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Template renderizado com sucesso',
        schema: {
            type: 'object',
            properties: {
                conteudo: {
                    type: 'string',
                    description: 'Conteúdo renderizado do template',
                },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou erro na renderização',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_k = typeof template_test_dto_1.TemplateTestDto !== "undefined" && template_test_dto_1.TemplateTestDto) === "function" ? _k : Object]),
    __metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], TemplateController.prototype, "testar", null);
__decorate([
    (0, common_1.Put)(':codigo/status'),
    (0, swagger_1.ApiOperation)({ summary: 'Ativar ou desativar template' }),
    (0, swagger_1.ApiParam)({
        name: 'codigo',
        description: 'Código único do template',
        example: 'email-bem-vindo',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status do template atualizado com sucesso',
        type: template_response_dto_1.TemplateResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Template não encontrado',
    }),
    __param(0, (0, common_1.Param)('codigo')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object]),
    __metadata("design:returntype", typeof (_m = typeof Promise !== "undefined" && Promise) === "function" ? _m : Object)
], TemplateController.prototype, "alterarStatus", null);
__decorate([
    (0, common_1.Get)('tipo/:tipo'),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar templates por tipo' }),
    (0, swagger_1.ApiParam)({
        name: 'tipo',
        description: 'Tipo de template',
        enum: template_tipo_enum_1.TemplateTipoEnum,
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de templates encontrados',
        type: [template_response_dto_1.TemplateResponseDto],
    }),
    __param(0, (0, common_1.Param)('tipo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_o = typeof template_tipo_enum_1.TemplateTipoEnum !== "undefined" && template_tipo_enum_1.TemplateTipoEnum) === "function" ? _o : Object]),
    __metadata("design:returntype", typeof (_p = typeof Promise !== "undefined" && Promise) === "function" ? _p : Object)
], TemplateController.prototype, "buscarPorTipo", null);
exports.TemplateController = TemplateController = __decorate([
    (0, swagger_1.ApiTags)('Configuração'),
    (0, common_1.Controller)('configuracao/templates'),
    __metadata("design:paramtypes", [typeof (_a = typeof template_service_1.TemplateService !== "undefined" && template_service_1.TemplateService) === "function" ? _a : Object])
], TemplateController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,