fce20b07ea98a528271a61dcbc78d9dc
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegracaoSolicitacaoService = void 0;
const common_1 = require("@nestjs/common");
/**
 * Serviço de integração com o módulo de Solicitação
 *
 * Implementa a comunicação entre o módulo de Pagamento e o módulo de Solicitação,
 * permitindo verificar o status de solicitações e atualizá-lo conforme o
 * andamento dos pagamentos.
 *
 * @author Equipe PGBen
 */
let IntegracaoSolicitacaoService = class IntegracaoSolicitacaoService {
    // Em uma implementação real, este serviço injetaria o SolicitacaoService do módulo de solicitação
    // constructor(private readonly solicitacaoService: SolicitacaoService) {}
    /**
     * Verifica se uma solicitação está aprovada e pronta para pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @returns Dados da solicitação se estiver aprovada
     * @throws NotFoundException se a solicitação não existir
     * @throws ConflictException se a solicitação não estiver aprovada
     */
    async verificarSolicitacaoAprovada(solicitacaoId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);
        // if (!solicitacao) {
        //   throw new NotFoundException('Solicitação não encontrada');
        // }
        // if (solicitacao.status !== 'APROVADA') {
        //   throw new ConflictException(
        //     `Somente solicitações aprovadas podem receber pagamento. Status atual: ${solicitacao.status}`
        //   );
        // }
        // return solicitacao;
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Verificando status da solicitação ${solicitacaoId}`);
        // Simular verificação bem-sucedida
        return {
            id: solicitacaoId,
            status: 'APROVADA',
            cidadaoId: 'mock-cidadao-id',
            tipoBeneficioId: 'mock-beneficio-id',
            unidadeId: 'mock-unidade-id',
            valorAprovado: 500.00,
            dataAprovacao: new Date(),
            observacoes: 'Solicitação aprovada para pagamento'
        };
    }
    /**
     * Atualiza o status de uma solicitação após a criação de um pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento criado
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoCriado(solicitacaoId, pagamentoId, usuarioId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_CRIADO',
        //   {
        //     pagamentoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: 'Pagamento registrado no sistema'
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CRIADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_CRIADO',
            pagamentoId,
            atualizadoPor: usuarioId,
            dataAtualizacao: new Date()
        };
    }
    /**
     * Atualiza o status de uma solicitação após a liberação de um pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento liberado
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoLiberado(solicitacaoId, pagamentoId, usuarioId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_LIBERADO',
        //   {
        //     pagamentoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: 'Pagamento liberado para o beneficiário'
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_LIBERADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_LIBERADO',
            pagamentoId,
            atualizadoPor: usuarioId,
            dataAtualizacao: new Date()
        };
    }
    /**
     * Atualiza o status de uma solicitação após a confirmação de recebimento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento confirmado
     * @param confirmacaoId ID da confirmação de recebimento
     * @param usuarioId ID do usuário que está realizando a operação
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoConfirmado(solicitacaoId, pagamentoId, confirmacaoId, usuarioId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_CONFIRMADO',
        //   {
        //     pagamentoId,
        //     confirmacaoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: 'Pagamento confirmado pelo beneficiário'
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CONFIRMADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_CONFIRMADO',
            pagamentoId,
            confirmacaoId,
            atualizadoPor: usuarioId,
            dataAtualizacao: new Date()
        };
    }
    /**
     * Atualiza o status de uma solicitação após o cancelamento de um pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @param pagamentoId ID do pagamento cancelado
     * @param usuarioId ID do usuário que está realizando a operação
     * @param motivoCancelamento Motivo do cancelamento
     * @returns Dados atualizados da solicitação
     */
    async atualizarStatusParaPagamentoCancelado(solicitacaoId, pagamentoId, usuarioId, motivoCancelamento) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // return this.solicitacaoService.atualizarStatus(
        //   solicitacaoId,
        //   'PAGAMENTO_CANCELADO',
        //   {
        //     pagamentoId,
        //     atualizadoPor: usuarioId,
        //     observacoes: `Pagamento cancelado: ${motivoCancelamento}`
        //   }
        // );
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Atualizando status da solicitação ${solicitacaoId} para PAGAMENTO_CANCELADO`);
        return {
            id: solicitacaoId,
            status: 'PAGAMENTO_CANCELADO',
            pagamentoId,
            atualizadoPor: usuarioId,
            motivoCancelamento,
            dataAtualizacao: new Date()
        };
    }
    /**
     * Obtém os limites de valor para um tipo de benefício
     *
     * @param tipoBeneficioId ID do tipo de benefício
     * @returns Objeto com valores mínimo e máximo permitidos
     */
    async obterLimitesBeneficio(tipoBeneficioId) {
        // Em uma implementação real, chamaria o serviço de benefícios
        // const tipoBeneficio = await this.beneficioService.findOne(tipoBeneficioId);
        // return {
        //   valorMinimo: tipoBeneficio.valorMinimo,
        //   valorMaximo: tipoBeneficio.valorMaximo
        // };
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Obtendo limites para o benefício ${tipoBeneficioId}`);
        // Valores de exemplo
        const limites = {
            'mock-beneficio-id': { valorMinimo: 100.00, valorMaximo: 1000.00 },
            'auxilio-moradia': { valorMinimo: 300.00, valorMaximo: 800.00 },
            'auxilio-funeral': { valorMinimo: 500.00, valorMaximo: 1500.00 },
            'cesta-basica': { valorMinimo: 100.00, valorMaximo: 300.00 }
        };
        return limites[tipoBeneficioId] || { valorMinimo: 100.00, valorMaximo: 1000.00 };
    }
    /**
     * Verifica se uma solicitação já possui pagamento
     *
     * @param solicitacaoId ID da solicitação
     * @returns true se a solicitação já possui pagamento
     */
    async verificarPagamentoExistente(solicitacaoId) {
        // Em uma implementação real, chamaria o serviço de solicitação
        // const solicitacao = await this.solicitacaoService.findOne(solicitacaoId);
        // return ['PAGAMENTO_CRIADO', 'PAGAMENTO_LIBERADO', 'PAGAMENTO_CONFIRMADO'].includes(solicitacao.status);
        // Implementação de mock para desenvolvimento
        console.log(`[INTEGRAÇÃO] Verificando se solicitação ${solicitacaoId} já possui pagamento`);
        // Simular que não existe pagamento para permitir testes
        return false;
    }
};
exports.IntegracaoSolicitacaoService = IntegracaoSolicitacaoService;
exports.IntegracaoSolicitacaoService = IntegracaoSolicitacaoService = __decorate([
    (0, common_1.Injectable)()
], IntegracaoSolicitacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,