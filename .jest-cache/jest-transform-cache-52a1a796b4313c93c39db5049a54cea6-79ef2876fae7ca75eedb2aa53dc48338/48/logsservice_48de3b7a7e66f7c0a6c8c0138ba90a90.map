{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\logs\\services\\logs.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\logs\\services\\logs.service.ts"],"sourcesContent":["import { Injectable, Logger, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { LogAuditoria } from '../../../entities/log-auditoria.entity';\nimport { Usuario } from '../../../entities/usuario.entity';\nimport { LogsFilterDto, CriticidadeLog } from '../dto/logs-filter.dto';\nimport { LogResponseDto } from '../dto/log-response.dto';\n\n/**\n * Serviço para gerenciamento de logs de auditoria\n */\n@Injectable()\nexport class LogsService {\n  private readonly logger = new Logger(LogsService.name);\n\n  constructor(\n    @InjectRepository(LogAuditoria)\n    private logAuditoriaRepository: Repository<LogAuditoria>,\n\n    @InjectRepository(Usuario)\n    private usuarioRepository: Repository<Usuario>\n  ) {\n    this.logger.log('Serviço de Logs inicializado');\n  }\n\n  /**\n   * Busca logs com filtros e paginação\n   * @param filter Filtros para busca de logs\n   * @returns Logs encontrados e metadados de paginação\n   */\n  async findAll(filter: LogsFilterDto) {\n    const {\n      page = 1,\n      limit = 10,\n      entidade,\n      entidade_id,\n      usuario_id,\n      acao,\n      modulo,\n      criticidade,\n      data_inicio,\n      data_fim,\n    } = filter;\n\n    const queryBuilder = this.logAuditoriaRepository.createQueryBuilder('log');\n\n    // Aplicar filtros\n    if (entidade) {\n      queryBuilder.andWhere('log.entidade_afetada = :entidade', { entidade });\n    }\n\n    if (entidade_id) {\n      queryBuilder.andWhere('log.entidade_id = :entidade_id', { entidade_id });\n    }\n\n    if (usuario_id) {\n      queryBuilder.andWhere('log.usuario_id = :usuario_id', { usuario_id });\n    }\n\n    if (acao) {\n      queryBuilder.andWhere('log.tipo_operacao = :acao', { acao });\n    }\n\n    if (modulo) {\n      // Filtrar por módulo usando o endpoint como referência\n      queryBuilder.andWhere('log.endpoint LIKE :modulo', { modulo: `/${modulo}%` });\n    }\n\n    // Filtro por período\n    if (data_inicio && data_fim) {\n      const inicio = new Date(data_inicio);\n      const fim = new Date(data_fim);\n      fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia\n\n      queryBuilder.andWhere('log.created_at BETWEEN :inicio AND :fim', {\n        inicio,\n        fim,\n      });\n    } else if (data_inicio) {\n      const inicio = new Date(data_inicio);\n      queryBuilder.andWhere('log.created_at >= :inicio', { inicio });\n    } else if (data_fim) {\n      const fim = new Date(data_fim);\n      fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia\n      queryBuilder.andWhere('log.created_at <= :fim', { fim });\n    }\n\n    // Calcular paginação\n    const skip = (page - 1) * limit;\n    queryBuilder.skip(skip).take(limit);\n\n    // Ordenação padrão\n    queryBuilder.orderBy('log.created_at', 'DESC');\n\n    // Executar consulta\n    const [items, total] = await queryBuilder.getManyAndCount();\n\n    // Mapear resultados para DTOs\n    const logs = items.map(log => this.mapToDto(log));\n\n    return {\n      items: logs,\n      meta: {\n        total,\n        page,\n        limit,\n        totalPages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Busca um log pelo ID\n   * @param id ID do log\n   * @returns Log encontrado\n   */\n  async findById(id: string): Promise<LogResponseDto> {\n    const log = await this.logAuditoriaRepository.findOne({\n      where: { id },\n      relations: ['usuario'],\n    });\n\n    if (!log) {\n      throw new NotFoundException(`Log com ID ${id} não encontrado`);\n    }\n\n    return this.mapToDto(log);\n  }\n\n  /**\n   * Lista as entidades disponíveis para filtro\n   * @returns Lista de entidades\n   */\n  async listarEntidades(): Promise<string[]> {\n    const result = await this.logAuditoriaRepository\n      .createQueryBuilder('log')\n      .select('DISTINCT log.entidade_afetada', 'entidade')\n      .orderBy('entidade')\n      .getRawMany();\n\n    return result.map(item => item.entidade);\n  }\n\n  /**\n   * Lista os módulos disponíveis para filtro\n   * @returns Lista de módulos\n   */\n  async listarModulos(): Promise<string[]> {\n    // Extrair o módulo do endpoint (primeiro segmento do caminho)\n    const result = await this.logAuditoriaRepository\n      .createQueryBuilder('log')\n      .select(\"DISTINCT SPLIT_PART(SUBSTRING(log.endpoint FROM '^/([^/]+)'), '/', 1)\", 'modulo')\n      .where('log.endpoint IS NOT NULL')\n      .orderBy('modulo')\n      .getRawMany();\n\n    return result.map(item => item.modulo).filter(Boolean);\n  }\n\n  /**\n   * Lista as ações disponíveis para filtro\n   * @returns Lista de ações\n   */\n  async listarAcoes(): Promise<string[]> {\n    const result = await this.logAuditoriaRepository\n      .createQueryBuilder('log')\n      .select('DISTINCT log.tipo_operacao', 'acao')\n      .orderBy('acao')\n      .getRawMany();\n\n    return result.map(item => item.acao);\n  }\n\n  /**\n   * Lista as criticidades de log disponíveis\n   * @returns Lista de criticidades\n   */\n  async listarCriticidades(): Promise<string[]> {\n    return Object.values(CriticidadeLog);\n  }\n\n  /**\n   * Exporta logs para CSV\n   * @param filter Filtros para exportação\n   * @returns Buffer com o conteúdo CSV\n   */\n  async exportarCsv(filter: LogsFilterDto): Promise<Buffer> {\n    // Remover paginação para exportar todos os logs\n    filter.page = undefined;\n    filter.limit = undefined;\n\n    const { items } = await this.findAll(filter);\n\n    // Cabeçalho do CSV\n    const header = [\n      'ID',\n      'Data',\n      'ID do Usuário',\n      'Ação',\n      'Entidade',\n      'ID da Entidade',\n      'Endpoint',\n      'Método HTTP',\n      'Detalhes',\n      'IP',\n      'User Agent',\n    ].join(',');\n\n    // Linhas do CSV\n    const rows = items.map(log => {\n      return [\n        log.id,\n        log.created_at.toISOString(),\n        log.usuario_id || '',\n        log.acao,\n        log.entidade,\n        log.entidade_id || '',\n        log.modulo || '',\n        log.user_agent?.split(' ')[0] || '',  // Primeiro elemento do User Agent geralmente é o navegador\n        (log.detalhes || '').replace(/,/g, ';'),\n        log.ip_address || '',\n        (log.user_agent || '').replace(/,/g, ';'),\n      ].join(',');\n    });\n\n    // Montar o CSV\n    const csv = [header, ...rows].join('\\n');\n\n    return Buffer.from(csv, 'utf-8');\n  }\n\n  /**\n   * Mapeia um log para o DTO de resposta\n   * @param log Log a ser mapeado\n   * @returns DTO de resposta\n   */\n  private mapToDto(log: LogAuditoria): LogResponseDto {\n    const dto = new LogResponseDto();\n    dto.id = log.id;\n    dto.usuario_id = log.usuario_id;\n    \n    // Buscar nome do usuário via relacionamento seria ideal, mas foi removido no MVP\n    // Para uma implementação completa, seria necessário buscar o usuário separadamente\n    \n    dto.acao = log.tipo_operacao;\n    dto.entidade = log.entidade_afetada;\n    dto.entidade_id = log.entidade_id;\n    dto.dados_anteriores = log.dados_anteriores;\n    dto.dados_novos = log.dados_novos;\n    dto.ip_address = log.ip_origem;\n    dto.user_agent = log.user_agent;\n    dto.modulo = log.endpoint?.split('/')[1] || 'sistema'; // Extrair módulo do endpoint como fallback\n    dto.criticidade = CriticidadeLog.NORMAL; // Valor padrão até implementação completa\n    dto.detalhes = log.descricao;\n    dto.created_at = log.created_at;\n    \n    return dto;\n  }\n}\n"],"version":3}