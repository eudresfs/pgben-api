42509a0fbbb276efca5ca3be36d4689b
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var LogsService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const log_auditoria_entity_1 = require("../../../entities/log-auditoria.entity");
const usuario_entity_1 = require("../../../entities/usuario.entity");
const logs_filter_dto_1 = require("../dto/logs-filter.dto");
const log_response_dto_1 = require("../dto/log-response.dto");
/**
 * Serviço para gerenciamento de logs de auditoria
 */
let LogsService = LogsService_1 = class LogsService {
    logAuditoriaRepository;
    usuarioRepository;
    logger = new common_1.Logger(LogsService_1.name);
    constructor(logAuditoriaRepository, usuarioRepository) {
        this.logAuditoriaRepository = logAuditoriaRepository;
        this.usuarioRepository = usuarioRepository;
        this.logger.log('Serviço de Logs inicializado');
    }
    /**
     * Busca logs com filtros e paginação
     * @param filter Filtros para busca de logs
     * @returns Logs encontrados e metadados de paginação
     */
    async findAll(filter) {
        const { page = 1, limit = 10, entidade, entidade_id, usuario_id, acao, modulo, criticidade, data_inicio, data_fim, } = filter;
        const queryBuilder = this.logAuditoriaRepository.createQueryBuilder('log');
        // Aplicar filtros
        if (entidade) {
            queryBuilder.andWhere('log.entidade_afetada = :entidade', { entidade });
        }
        if (entidade_id) {
            queryBuilder.andWhere('log.entidade_id = :entidade_id', { entidade_id });
        }
        if (usuario_id) {
            queryBuilder.andWhere('log.usuario_id = :usuario_id', { usuario_id });
        }
        if (acao) {
            queryBuilder.andWhere('log.tipo_operacao = :acao', { acao });
        }
        if (modulo) {
            // Filtrar por módulo usando o endpoint como referência
            queryBuilder.andWhere('log.endpoint LIKE :modulo', { modulo: `/${modulo}%` });
        }
        // Filtro por período
        if (data_inicio && data_fim) {
            const inicio = new Date(data_inicio);
            const fim = new Date(data_fim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            queryBuilder.andWhere('log.created_at BETWEEN :inicio AND :fim', {
                inicio,
                fim,
            });
        }
        else if (data_inicio) {
            const inicio = new Date(data_inicio);
            queryBuilder.andWhere('log.created_at >= :inicio', { inicio });
        }
        else if (data_fim) {
            const fim = new Date(data_fim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            queryBuilder.andWhere('log.created_at <= :fim', { fim });
        }
        // Calcular paginação
        const skip = (page - 1) * limit;
        queryBuilder.skip(skip).take(limit);
        // Ordenação padrão
        queryBuilder.orderBy('log.created_at', 'DESC');
        // Executar consulta
        const [items, total] = await queryBuilder.getManyAndCount();
        // Mapear resultados para DTOs
        const logs = items.map(log => this.mapToDto(log));
        return {
            items: logs,
            meta: {
                total,
                page,
                limit,
                totalPages: Math.ceil(total / limit),
            },
        };
    }
    /**
     * Busca um log pelo ID
     * @param id ID do log
     * @returns Log encontrado
     */
    async findById(id) {
        const log = await this.logAuditoriaRepository.findOne({
            where: { id },
            relations: ['usuario'],
        });
        if (!log) {
            throw new common_1.NotFoundException(`Log com ID ${id} não encontrado`);
        }
        return this.mapToDto(log);
    }
    /**
     * Lista as entidades disponíveis para filtro
     * @returns Lista de entidades
     */
    async listarEntidades() {
        const result = await this.logAuditoriaRepository
            .createQueryBuilder('log')
            .select('DISTINCT log.entidade_afetada', 'entidade')
            .orderBy('entidade')
            .getRawMany();
        return result.map(item => item.entidade);
    }
    /**
     * Lista os módulos disponíveis para filtro
     * @returns Lista de módulos
     */
    async listarModulos() {
        // Extrair o módulo do endpoint (primeiro segmento do caminho)
        const result = await this.logAuditoriaRepository
            .createQueryBuilder('log')
            .select("DISTINCT SPLIT_PART(SUBSTRING(log.endpoint FROM '^/([^/]+)'), '/', 1)", 'modulo')
            .where('log.endpoint IS NOT NULL')
            .orderBy('modulo')
            .getRawMany();
        return result.map(item => item.modulo).filter(Boolean);
    }
    /**
     * Lista as ações disponíveis para filtro
     * @returns Lista de ações
     */
    async listarAcoes() {
        const result = await this.logAuditoriaRepository
            .createQueryBuilder('log')
            .select('DISTINCT log.tipo_operacao', 'acao')
            .orderBy('acao')
            .getRawMany();
        return result.map(item => item.acao);
    }
    /**
     * Lista as criticidades de log disponíveis
     * @returns Lista de criticidades
     */
    async listarCriticidades() {
        return Object.values(logs_filter_dto_1.CriticidadeLog);
    }
    /**
     * Exporta logs para CSV
     * @param filter Filtros para exportação
     * @returns Buffer com o conteúdo CSV
     */
    async exportarCsv(filter) {
        // Remover paginação para exportar todos os logs
        filter.page = undefined;
        filter.limit = undefined;
        const { items } = await this.findAll(filter);
        // Cabeçalho do CSV
        const header = [
            'ID',
            'Data',
            'ID do Usuário',
            'Ação',
            'Entidade',
            'ID da Entidade',
            'Endpoint',
            'Método HTTP',
            'Detalhes',
            'IP',
            'User Agent',
        ].join(',');
        // Linhas do CSV
        const rows = items.map(log => {
            return [
                log.id,
                log.created_at.toISOString(),
                log.usuario_id || '',
                log.acao,
                log.entidade,
                log.entidade_id || '',
                log.modulo || '',
                log.user_agent?.split(' ')[0] || '', // Primeiro elemento do User Agent geralmente é o navegador
                (log.detalhes || '').replace(/,/g, ';'),
                log.ip_address || '',
                (log.user_agent || '').replace(/,/g, ';'),
            ].join(',');
        });
        // Montar o CSV
        const csv = [header, ...rows].join('\n');
        return Buffer.from(csv, 'utf-8');
    }
    /**
     * Mapeia um log para o DTO de resposta
     * @param log Log a ser mapeado
     * @returns DTO de resposta
     */
    mapToDto(log) {
        const dto = new log_response_dto_1.LogResponseDto();
        dto.id = log.id;
        dto.usuario_id = log.usuario_id;
        // Buscar nome do usuário via relacionamento seria ideal, mas foi removido no MVP
        // Para uma implementação completa, seria necessário buscar o usuário separadamente
        dto.acao = log.tipo_operacao;
        dto.entidade = log.entidade_afetada;
        dto.entidade_id = log.entidade_id;
        dto.dados_anteriores = log.dados_anteriores;
        dto.dados_novos = log.dados_novos;
        dto.ip_address = log.ip_origem;
        dto.user_agent = log.user_agent;
        dto.modulo = log.endpoint?.split('/')[1] || 'sistema'; // Extrair módulo do endpoint como fallback
        dto.criticidade = logs_filter_dto_1.CriticidadeLog.NORMAL; // Valor padrão até implementação completa
        dto.detalhes = log.descricao;
        dto.created_at = log.created_at;
        return dto;
    }
};
exports.LogsService = LogsService;
exports.LogsService = LogsService = LogsService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(log_auditoria_entity_1.LogAuditoria)),
    __param(1, (0, typeorm_1.InjectRepository)(usuario_entity_1.Usuario)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object])
], LogsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGxvZ3NcXHNlcnZpY2VzXFxsb2dzLnNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBdUU7QUFDdkUsNkNBQW1EO0FBQ25ELHFDQUFxQztBQUNyQyxpRkFBc0U7QUFDdEUscUVBQTJEO0FBQzNELDREQUF1RTtBQUN2RSw4REFBeUQ7QUFFekQ7O0dBRUc7QUFFSSxJQUFNLFdBQVcsbUJBQWpCLE1BQU0sV0FBVztJQUtaO0lBR0E7SUFQTyxNQUFNLEdBQUcsSUFBSSxlQUFNLENBQUMsYUFBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXZELFlBRVUsc0JBQWdELEVBR2hELGlCQUFzQztRQUh0QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTBCO1FBR2hELHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7UUFFOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBcUI7UUFDakMsTUFBTSxFQUNKLElBQUksR0FBRyxDQUFDLEVBQ1IsS0FBSyxHQUFHLEVBQUUsRUFDVixRQUFRLEVBQ1IsV0FBVyxFQUNYLFVBQVUsRUFDVixJQUFJLEVBQ0osTUFBTSxFQUNOLFdBQVcsRUFDWCxXQUFXLEVBQ1gsUUFBUSxHQUNULEdBQUcsTUFBTSxDQUFDO1FBRVgsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTNFLGtCQUFrQjtRQUNsQixJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ2IsWUFBWSxDQUFDLFFBQVEsQ0FBQyxrQ0FBa0MsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUVELElBQUksV0FB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Z0JBQWdCLENBQUM7UUFDNUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO1FBQ2xDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUMvQixHQUFHLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7UUFDaEMsR0FBRyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQywyQ0FBMkM7UUFDbEcsR0FBRyxDQUFDLFdBQVcsR0FBRyxnQ0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLDBDQUEwQztRQUNuRixHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDN0IsR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBRWhDLE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGLENBQUE7QUF0UFksa0NBQVc7c0JBQVgsV0FBVztJQUR2QixJQUFBLG1CQUFVLEdBQUU7SUFLUixXQUFBLElBQUEsMEJBQWdCLEVBQUMsbUNBQVksQ0FBQyxDQUFBO0lBRzlCLFdBQUEsSUFBQSwwQkFBZ0IsRUFBQyx3QkFBTyxDQUFDLENBQUE7eURBRk0sb0JBQVUsb0JBQVYsb0JBQVUsb0RBR2Ysb0JBQVUsb0JBQVYsb0JBQVU7R0FSNUIsV0FBVyxDQXNQdkIiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGxvZ3NcXHNlcnZpY2VzXFxsb2dzLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTG9nZ2VyLCBOb3RGb3VuZEV4Y2VwdGlvbiB9IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IEluamVjdFJlcG9zaXRvcnkgfSBmcm9tICdAbmVzdGpzL3R5cGVvcm0nO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHsgTG9nQXVkaXRvcmlhIH0gZnJvbSAnLi4vLi4vLi4vZW50aXRpZXMvbG9nLWF1ZGl0b3JpYS5lbnRpdHknO1xuaW1wb3J0IHsgVXN1YXJpbyB9IGZyb20gJy4uLy4uLy4uL2VudGl0aWVzL3VzdWFyaW8uZW50aXR5JztcbmltcG9ydCB7IExvZ3NGaWx0ZXJEdG8sIENyaXRpY2lkYWRlTG9nIH0gZnJvbSAnLi4vZHRvL2xvZ3MtZmlsdGVyLmR0byc7XG5pbXBvcnQgeyBMb2dSZXNwb25zZUR0byB9IGZyb20gJy4uL2R0by9sb2ctcmVzcG9uc2UuZHRvJztcblxuLyoqXG4gKiBTZXJ2acOnbyBwYXJhIGdlcmVuY2lhbWVudG8gZGUgbG9ncyBkZSBhdWRpdG9yaWFcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvZ3NTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2dnZXIgPSBuZXcgTG9nZ2VyKExvZ3NTZXJ2aWNlLm5hbWUpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3RSZXBvc2l0b3J5KExvZ0F1ZGl0b3JpYSlcbiAgICBwcml2YXRlIGxvZ0F1ZGl0b3JpYVJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8TG9nQXVkaXRvcmlhPixcblxuICAgIEBJbmplY3RSZXBvc2l0b3J5KFVzdWFyaW8pXG4gICAgcHJpdmF0ZSB1c3VhcmlvUmVwb3NpdG9yeTogUmVwb3NpdG9yeTxVc3VhcmlvPlxuICApIHtcbiAgICB0aGlzLmxvZ2dlci5sb2coJ1NlcnZpw6dvIGRlIExvZ3MgaW5pY2lhbGl6YWRvJyk7XG4gIH1cblxuICAvKipcbiAgICogQnVzY2EgbG9ncyBjb20gZmlsdHJvcyBlIHBhZ2luYcOnw6NvXG4gICAqIEBwYXJhbSBmaWx0ZXIgRmlsdHJvcyBwYXJhIGJ1c2NhIGRlIGxvZ3NcbiAgICogQHJldHVybnMgTG9ncyBlbmNvbnRyYWRvcyBlIG1ldGFkYWRvcyBkZSBwYWdpbmHDp8Ojb1xuICAgKi9cbiAgYXN5bmMgZmluZEFsbChmaWx0ZXI6IExvZ3NGaWx0ZXJEdG8pIHtcbiAgICBjb25zdCB7XG4gICAgICBwYWdlID0gMSxcbiAgICAgIGxpbWl0ID0gMTAsXG4gICAgICBlbnRpZGFkZSxcbiAgICAgIGVudGlkYWRlX2lkLFxuICAgICAgdXN1YXJpb19pZCxcbiAgICAgIGFjYW8sXG4gICAgICBtb2R1bG8sXG4gICAgICBjcml0aWNpZGFkZSxcbiAgICAgIGRhdGFfaW5pY2lvLFxuICAgICAgZGF0YV9maW0sXG4gICAgfSA9IGZpbHRlcjtcblxuICAgIGNvbnN0IHF1ZXJ5QnVpbGRlciA9IHRoaXMubG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5jcmVhdGVRdWVyeUJ1aWxkZXIoJ2xvZycpO1xuXG4gICAgLy8gQXBsaWNhciBmaWx0cm9zXG4gICAgaWYgKGVudGlkYWRlKSB7XG4gICAgICBxdWVyeUJ1aWxkZXIuYW5kV2hlcmUoJ2xvZy5lbnRpZGFkZV9hZmV0YWRhID0gOmVudGlkYWRlJywgeyBlbnRpZGFkZSB9KTtcbiAgICB9XG5cbiAgICBpZiAoZW50aWRhZGVfaWQpIHtcbiAgICAgIHF1ZXJ5QnVpbGRlci5hbmRXaGVyZSgnbG9nLmVudGlkYWRlX2lkID0gOmVudGlkYWRlX2lkJywgeyBlbnRpZGFkZV9pZCB9KTtcbiAgICB9XG5cbiAgICBpZiAodXN1YXJpb19pZCkge1xuICAgICAgcXVlcnlCdWlsZGVyLmFuZFdoZXJlKCdsb2cudXN1YXJpb19pZCA9IDp1c3VhcmlvX2lkJywgeyB1c3VhcmlvX2lkIH0pO1xuICAgIH1cblxuICAgIGlmIChhY2FvKSB7XG4gICAgICBxdWVyeUJ1aWxkZXIuYW5kV2hlcmUoJ2xvZy50aXBvX29wZXJhY2FvID0gOmFjYW8nLCB7IGFjYW8gfSk7XG4gICAgfVxuXG4gICAgaWYgKG1vZHVsbykge1xuICAgICAgLy8gRmlsdHJhciBwb3IgbcOzZHVsbyB1c2FuZG8gbyBlbmRwb2ludCBjb21vIHJlZmVyw6puY2lhXG4gICAgICBxdWVyeUJ1aWxkZXIuYW5kV2hlcmUoJ2xvZy5lbmRwb2ludCBMSUtFIDptb2R1bG8nLCB7IG1vZHVsbzogYC8ke21vZHVsb30lYCB9KTtcbiAgICB9XG5cbiAgICAvLyBGaWx0cm8gcG9yIHBlcsOtb2RvXG4gICAgaWYgKGRhdGFfaW5pY2lvICYmIGRhdGFfZmltKSB7XG4gICAgICBjb25zdCBpbmljaW8gPSBuZXcgRGF0ZShkYXRhX2luaWNpbyk7XG4gICAgICBjb25zdCBmaW0gPSBuZXcgRGF0ZShkYXRhX2ZpbSk7XG4gICAgICBmaW0uc2V0SG91cnMoMjMsIDU5LCA1OSwgOTk5KTsgLy8gQWp1c3RhIHBhcmEgbyBmaW5hbCBkbyBkaWFcblxuICAgICAgcXVlcnlCdWlsZGVyLmFuZFdoZXJlKCdsb2cuY3JlYXRlZF9hdCBCRVRXRUVOIDppbmljaW8gQU5EIDpmaW0nLCB7XG4gICAgICAgIGluaWNpbyxcbiAgICAgICAgZmltLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChkYXRhX2luaWNpbykge1xuICAgICAgY29uc3QgaW5pY2lvID0gbmV3IERhdGUoZGF0YV9pbmljaW8pO1xuICAgICAgcXVlcnlCdWlsZGVyLmFuZFdoZXJlKCdsb2cuY3JlYXRlZF9hdCA+PSA6aW5pY2lvJywgeyBpbmljaW8gfSk7XG4gICAgfSBlbHNlIGlmIChkYXRhX2ZpbSkge1xuICAgICAgY29uc3QgZmltID0gbmV3IERhdGUoZGF0YV9maW0pO1xuICAgICAgZmltLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7IC8vIEFqdXN0YSBwYXJhIG8gZmluYWwgZG8gZGlhXG4gICAgICBxdWVyeUJ1aWxkZXIuYW5kV2hlcmUoJ2xvZy5jcmVhdGVkX2F0IDw9IDpmaW0nLCB7IGZpbSB9KTtcbiAgICB9XG5cbiAgICAvLyBDYWxjdWxhciBwYWdpbmHDp8Ojb1xuICAgIGNvbnN0IHNraXAgPSAocGFnZSAtIDEpICogbGltaXQ7XG4gICAgcXVlcnlCdWlsZGVyLnNraXAoc2tpcCkudGFrZShsaW1pdCk7XG5cbiAgICAvLyBPcmRlbmHDp8OjbyBwYWRyw6NvXG4gICAgcXVlcnlCdWlsZGVyLm9yZGVyQnkoJ2xvZy5jcmVhdGVkX2F0JywgJ0RFU0MnKTtcblxuICAgIC8vIEV4ZWN1dGFyIGNvbnN1bHRhXG4gICAgY29uc3QgW2l0ZW1zLCB0b3RhbF0gPSBhd2FpdCBxdWVyeUJ1aWxkZXIuZ2V0TWFueUFuZENvdW50KCk7XG5cbiAgICAvLyBNYXBlYXIgcmVzdWx0YWRvcyBwYXJhIERUT3NcbiAgICBjb25zdCBsb2dzID0gaXRlbXMubWFwKGxvZyA9PiB0aGlzLm1hcFRvRHRvKGxvZykpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGl0ZW1zOiBsb2dzLFxuICAgICAgbWV0YToge1xuICAgICAgICB0b3RhbCxcbiAgICAgICAgcGFnZSxcbiAgICAgICAgbGltaXQsXG4gICAgICAgIHRvdGFsUGFnZXM6IE1hdGguY2VpbCh0b3RhbCAvIGxpbWl0KSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdXNjYSB1bSBsb2cgcGVsbyBJRFxuICAgKiBAcGFyYW0gaWQgSUQgZG8gbG9nXG4gICAqIEByZXR1cm5zIExvZyBlbmNvbnRyYWRvXG4gICAqL1xuICBhc3luYyBmaW5kQnlJZChpZDogc3RyaW5nKTogUHJvbWlzZTxMb2dSZXNwb25zZUR0bz4ge1xuICAgIGNvbnN0IGxvZyA9IGF3YWl0IHRoaXMubG9nQXVkaXRvcmlhUmVwb3NpdG9yeS5maW5kT25lKHtcbiAgICAgIHdoZXJlOiB7IGlkIH0sXG4gICAgICByZWxhdGlvbnM6IFsndXN1YXJpbyddLFxuICAgIH0pO1xuXG4gICAgaWYgKCFsb2cpIHtcbiAgICAgIHRocm93IG5ldyBOb3RGb3VuZEV4Y2VwdGlvbihgTG9nIGNvbSBJRCAke2lkfSBuw6NvIGVuY29udHJhZG9gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tYXBUb0R0byhsb2cpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RhIGFzIGVudGlkYWRlcyBkaXNwb27DrXZlaXMgcGFyYSBmaWx0cm9cbiAgICogQHJldHVybnMgTGlzdGEgZGUgZW50aWRhZGVzXG4gICAqL1xuICBhc3luYyBsaXN0YXJFbnRpZGFkZXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubG9nQXVkaXRvcmlhUmVwb3NpdG9yeVxuICAgICAgLmNyZWF0ZVF1ZXJ5QnVpbGRlcignbG9nJylcbiAgICAgIC5zZWxlY3QoJ0RJU1RJTkNUIGxvZy5lbnRpZGFkZV9hZmV0YWRhJywgJ2VudGlkYWRlJylcbiAgICAgIC5vcmRlckJ5KCdlbnRpZGFkZScpXG4gICAgICAuZ2V0UmF3TWFueSgpO1xuXG4gICAgcmV0dXJuIHJlc3VsdC5tYXAoaXRlbSA9PiBpdGVtLmVudGlkYWRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0YSBvcyBtw7NkdWxvcyBkaXNwb27DrXZlaXMgcGFyYSBmaWx0cm9cbiAgICogQHJldHVybnMgTGlzdGEgZGUgbcOzZHVsb3NcbiAgICovXG4gIGFzeW5jIGxpc3Rhck1vZHVsb3MoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIC8vIEV4dHJhaXIgbyBtw7NkdWxvIGRvIGVuZHBvaW50IChwcmltZWlybyBzZWdtZW50byBkbyBjYW1pbmhvKVxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubG9nQXVkaXRvcmlhUmVwb3NpdG9yeVxuICAgICAgLmNyZWF0ZVF1ZXJ5QnVpbGRlcignbG9nJylcbiAgICAgIC5zZWxlY3QoXCJESVNUSU5DVCBTUExJVF9QQVJUKFNVQlNUUklORyhsb2cuZW5kcG9pbnQgRlJPTSAnXi8oW14vXSspJyksICcvJywgMSlcIiwgJ21vZHVsbycpXG4gICAgICAud2hlcmUoJ2xvZy5lbmRwb2ludCBJUyBOT1QgTlVMTCcpXG4gICAgICAub3JkZXJCeSgnbW9kdWxvJylcbiAgICAgIC5nZXRSYXdNYW55KCk7XG5cbiAgICByZXR1cm4gcmVzdWx0Lm1hcChpdGVtID0+IGl0ZW0ubW9kdWxvKS5maWx0ZXIoQm9vbGVhbik7XG4gIH1cblxuICAvKipcbiAgICogTGlzdGEgYXMgYcOnw7VlcyBkaXNwb27DrXZlaXMgcGFyYSBmaWx0cm9cbiAgICogQHJldHVybnMgTGlzdGEgZGUgYcOnw7Vlc1xuICAgKi9cbiAgYXN5bmMgbGlzdGFyQWNvZXMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMubG9nQXVkaXRvcmlhUmVwb3NpdG9yeVxuICAgICAgLmNyZWF0ZVF1ZXJ5QnVpbGRlcignbG9nJylcbiAgICAgIC5zZWxlY3QoJ0RJU1RJTkNUIGxvZy50aXBvX29wZXJhY2FvJywgJ2FjYW8nKVxuICAgICAgLm9yZGVyQnkoJ2FjYW8nKVxuICAgICAgLmdldFJhd01hbnkoKTtcblxuICAgIHJldHVybiByZXN1bHQubWFwKGl0ZW0gPT4gaXRlbS5hY2FvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0YSBhcyBjcml0aWNpZGFkZXMgZGUgbG9nIGRpc3BvbsOtdmVpc1xuICAgKiBAcmV0dXJucyBMaXN0YSBkZSBjcml0aWNpZGFkZXNcbiAgICovXG4gIGFzeW5jIGxpc3RhckNyaXRpY2lkYWRlcygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoQ3JpdGljaWRhZGVMb2cpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9ydGEgbG9ncyBwYXJhIENTVlxuICAgKiBAcGFyYW0gZmlsdGVyIEZpbHRyb3MgcGFyYSBleHBvcnRhw6fDo29cbiAgICogQHJldHVybnMgQnVmZmVyIGNvbSBvIGNvbnRlw7pkbyBDU1ZcbiAgICovXG4gIGFzeW5jIGV4cG9ydGFyQ3N2KGZpbHRlcjogTG9nc0ZpbHRlckR0byk6IFByb21pc2U8QnVmZmVyPiB7XG4gICAgLy8gUmVtb3ZlciBwYWdpbmHDp8OjbyBwYXJhIGV4cG9ydGFyIHRvZG9zIG9zIGxvZ3NcbiAgICBmaWx0ZXIucGFnZSA9IHVuZGVmaW5lZDtcbiAgICBmaWx0ZXIubGltaXQgPSB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCB7IGl0ZW1zIH0gPSBhd2FpdCB0aGlzLmZpbmRBbGwoZmlsdGVyKTtcblxuICAgIC8vIENhYmXDp2FsaG8gZG8gQ1NWXG4gICAgY29uc3QgaGVhZGVyID0gW1xuICAgICAgJ0lEJyxcbiAgICAgICdEYXRhJyxcbiAgICAgICdJRCBkbyBVc3XDoXJpbycsXG4gICAgICAnQcOnw6NvJyxcbiAgICAgICdFbnRpZGFkZScsXG4gICAgICAnSUQgZGEgRW50aWRhZGUnLFxuICAgICAgJ0VuZHBvaW50JyxcbiAgICAgICdNw6l0b2RvIEhUVFAnLFxuICAgICAgJ0RldGFsaGVzJyxcbiAgICAgICdJUCcsXG4gICAgICAnVXNlciBBZ2VudCcsXG4gICAgXS5qb2luKCcsJyk7XG5cbiAgICAvLyBMaW5oYXMgZG8gQ1NWXG4gICAgY29uc3Qgcm93cyA9IGl0ZW1zLm1hcChsb2cgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgbG9nLmlkLFxuICAgICAgICBsb2cuY3JlYXRlZF9hdC50b0lTT1N0cmluZygpLFxuICAgICAgICBsb2cudXN1YXJpb19pZCB8fCAnJyxcbiAgICAgICAgbG9nLmFjYW8sXG4gICAgICAgIGxvZy5lbnRpZGFkZSxcbiAgICAgICAgbG9nLmVudGlkYWRlX2lkIHx8ICcnLFxuICAgICAgICBsb2cubW9kdWxvIHx8ICcnLFxuICAgICAgICBsb2cudXNlcl9hZ2VudD8uc3BsaXQoJyAnKVswXSB8fCAnJywgIC8vIFByaW1laXJvIGVsZW1lbnRvIGRvIFVzZXIgQWdlbnQgZ2VyYWxtZW50ZSDDqSBvIG5hdmVnYWRvclxuICAgICAgICAobG9nLmRldGFsaGVzIHx8ICcnKS5yZXBsYWNlKC8sL2csICc7JyksXG4gICAgICAgIGxvZy5pcF9hZGRyZXNzIHx8ICcnLFxuICAgICAgICAobG9nLnVzZXJfYWdlbnQgfHwgJycpLnJlcGxhY2UoLywvZywgJzsnKSxcbiAgICAgIF0uam9pbignLCcpO1xuICAgIH0pO1xuXG4gICAgLy8gTW9udGFyIG8gQ1NWXG4gICAgY29uc3QgY3N2ID0gW2hlYWRlciwgLi4ucm93c10uam9pbignXFxuJyk7XG5cbiAgICByZXR1cm4gQnVmZmVyLmZyb20oY3N2LCAndXRmLTgnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXBlaWEgdW0gbG9nIHBhcmEgbyBEVE8gZGUgcmVzcG9zdGFcbiAgICogQHBhcmFtIGxvZyBMb2cgYSBzZXIgbWFwZWFkb1xuICAgKiBAcmV0dXJucyBEVE8gZGUgcmVzcG9zdGFcbiAgICovXG4gIHByaXZhdGUgbWFwVG9EdG8obG9nOiBMb2dBdWRpdG9yaWEpOiBMb2dSZXNwb25zZUR0byB7XG4gICAgY29uc3QgZHRvID0gbmV3IExvZ1Jlc3BvbnNlRHRvKCk7XG4gICAgZHRvLmlkID0gbG9nLmlkO1xuICAgIGR0by51c3VhcmlvX2lkID0gbG9nLnVzdWFyaW9faWQ7XG4gICAgXG4gICAgLy8gQnVzY2FyIG5vbWUgZG8gdXN1w6FyaW8gdmlhIHJlbGFjaW9uYW1lbnRvIHNlcmlhIGlkZWFsLCBtYXMgZm9pIHJlbW92aWRvIG5vIE1WUFxuICAgIC8vIFBhcmEgdW1hIGltcGxlbWVudGHDp8OjbyBjb21wbGV0YSwgc2VyaWEgbmVjZXNzw6FyaW8gYnVzY2FyIG8gdXN1w6FyaW8gc2VwYXJhZGFtZW50ZVxuICAgIFxuICAgIGR0by5hY2FvID0gbG9nLnRpcG9fb3BlcmFjYW87XG4gICAgZHRvLmVudGlkYWRlID0gbG9nLmVudGlkYWRlX2FmZXRhZGE7XG4gICAgZHRvLmVudGlkYWRlX2lkID0gbG9nLmVudGlkYWRlX2lkO1xuICAgIGR0by5kYWRvc19hbnRlcmlvcmVzID0gbG9nLmRhZG9zX2FudGVyaW9yZXM7XG4gICAgZHRvLmRhZG9zX25vdm9zID0gbG9nLmRhZG9zX25vdm9zO1xuICAgIGR0by5pcF9hZGRyZXNzID0gbG9nLmlwX29yaWdlbTtcbiAgICBkdG8udXNlcl9hZ2VudCA9IGxvZy51c2VyX2FnZW50O1xuICAgIGR0by5tb2R1bG8gPSBsb2cuZW5kcG9pbnQ/LnNwbGl0KCcvJylbMV0gfHwgJ3Npc3RlbWEnOyAvLyBFeHRyYWlyIG3Ds2R1bG8gZG8gZW5kcG9pbnQgY29tbyBmYWxsYmFja1xuICAgIGR0by5jcml0aWNpZGFkZSA9IENyaXRpY2lkYWRlTG9nLk5PUk1BTDsgLy8gVmFsb3IgcGFkcsOjbyBhdMOpIGltcGxlbWVudGHDp8OjbyBjb21wbGV0YVxuICAgIGR0by5kZXRhbGhlcyA9IGxvZy5kZXNjcmljYW87XG4gICAgZHRvLmNyZWF0ZWRfYXQgPSBsb2cuY3JlYXRlZF9hdDtcbiAgICBcbiAgICByZXR1cm4gZHRvO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=