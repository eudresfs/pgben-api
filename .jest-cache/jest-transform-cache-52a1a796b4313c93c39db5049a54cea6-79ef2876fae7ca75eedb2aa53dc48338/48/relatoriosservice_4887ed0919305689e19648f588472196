6729096f64f88b0bb90620aecce67dae
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var RelatoriosService_1;
var _a, _b, _c, _d, _e;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelatoriosService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const unidade_entity_1 = require("../../../entities/unidade.entity");
const tipo_beneficio_entity_1 = require("../../../entities/tipo-beneficio.entity");
const role_enum_1 = require("../../../enums/role.enum");
const pdf_strategy_1 = require("../strategies/pdf.strategy");
const excel_strategy_1 = require("../strategies/excel.strategy");
const csv_strategy_1 = require("../strategies/csv.strategy");
const temp_files_service_1 = require("./temp-files.service");
const cache_manager_1 = require("@nestjs/cache-manager");
const cache_manager_2 = require("cache-manager");
/**
 * Serviço de Relatórios
 *
 * Responsável pela lógica de negócio relacionada à geração de relatórios
 * gerenciais e operacionais do sistema. Implementa o padrão Strategy para
 * permitir diferentes formatos de saída.
 */
let RelatoriosService = RelatoriosService_1 = class RelatoriosService {
    solicitacaoRepository;
    unidadeRepository;
    tipoBeneficioRepository;
    tempFilesService;
    cacheManager;
    logger = new common_1.Logger(RelatoriosService_1.name);
    strategies = new Map();
    constructor(solicitacaoRepository, unidadeRepository, tipoBeneficioRepository, tempFilesService, cacheManager) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.unidadeRepository = unidadeRepository;
        this.tipoBeneficioRepository = tipoBeneficioRepository;
        this.tempFilesService = tempFilesService;
        this.cacheManager = cacheManager;
        // Inicializar as estratégias de geração de relatórios
        this.strategies.set('pdf', new pdf_strategy_1.PdfStrategy(tempFilesService));
        this.strategies.set('excel', new excel_strategy_1.ExcelStrategy(tempFilesService));
        this.strategies.set('csv', new csv_strategy_1.CsvStrategy(tempFilesService));
        this.logger.log('Serviço de Relatórios inicializado com as estratégias: PDF, Excel, CSV');
    }
    /**
     * Gera relatório de benefícios concedidos por período
     * @param options Opções para geração do relatório
     * @returns Buffer contendo o relatório no formato solicitado
     */
    async gerarRelatorioBeneficiosConcedidos(options) {
        const { dataInicio, dataFim, unidadeId, tipoBeneficioId, formato, user } = options;
        // Verificar permissões do usuário
        if (![role_enum_1.Role.ADMIN, role_enum_1.Role.GESTOR, role_enum_1.Role.TECNICO].includes(user.role)) {
            throw new common_1.UnauthorizedException('Você não tem permissão para gerar este relatório');
        }
        // Verificar formato solicitado
        if (!this.strategies.has(formato)) {
            throw new common_1.BadRequestException(`Formato de relatório não suportado: ${formato}`);
        }
        // Gerar chave de cache
        const cacheKey = `relatorio_beneficios_${dataInicio}_${dataFim}_${unidadeId || 'all'}_${tipoBeneficioId || 'all'}_${formato}`;
        // Verificar cache
        const cachedReport = await this.cacheManager.get(cacheKey);
        if (cachedReport) {
            this.logger.log(`Relatório recuperado do cache: ${cacheKey}`);
            return cachedReport;
        }
        try {
            // Converter datas
            const inicio = new Date(dataInicio);
            const fim = new Date(dataFim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            if (isNaN(inicio.getTime()) || isNaN(fim.getTime())) {
                throw new common_1.BadRequestException('Datas inválidas');
            }
            // Construir consulta otimizada
            const queryBuilder = this.solicitacaoRepository
                .createQueryBuilder('solicitacao')
                .select([
                'solicitacao.id',
                'solicitacao.protocolo',
                'solicitacao.data_abertura',
                'solicitacao.data_liberacao',
                'solicitacao.status',
                'beneficiario.id',
                'beneficiario.nome',
                'beneficiario.cpf',
                'tipo_beneficio.id',
                'tipo_beneficio.nome',
                'tipo_beneficio.valor',
                'unidade.id',
                'unidade.nome',
            ])
                .leftJoin('solicitacao.beneficiario', 'beneficiario')
                .leftJoin('solicitacao.tipo_beneficio', 'tipo_beneficio')
                .leftJoin('solicitacao.unidade', 'unidade')
                .where('solicitacao.status = :status', {
                status: solicitacao_entity_1.StatusSolicitacao.LIBERADA,
            })
                .andWhere('solicitacao.data_liberacao BETWEEN :inicio AND :fim', {
                inicio,
                fim,
            });
            if (unidadeId) {
                queryBuilder.andWhere('solicitacao.unidade_id = :unidadeId', {
                    unidadeId,
                });
            }
            if (tipoBeneficioId) {
                queryBuilder.andWhere('solicitacao.tipo_beneficio_id = :tipoBeneficioId', { tipoBeneficioId });
            }
            // Executar consulta
            const solicitacoes = await queryBuilder.getMany();
            this.logger.log(`Encontradas ${solicitacoes.length} solicitações com benefícios concedidos no período`);
            // Obter estratégia de geração para o formato solicitado
            const strategy = this.strategies.get(formato);
            if (!strategy) {
                throw new common_1.BadRequestException(`Formato de relatório não suportado: ${formato}`);
            }
            // Gerar relatório
            const opcoes = { dataInicio: inicio, dataFim: fim };
            const relatorio = (await strategy.gerar('beneficios-concedidos', solicitacoes, opcoes));
            // Armazenar em cache
            await this.cacheManager.set(cacheKey, relatorio, 3600000); // 1 hora
            return relatorio;
        }
        catch (error) {
            this.logger.error(`Erro ao gerar relatório de benefícios concedidos: ${error.message}`);
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.UnauthorizedException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Erro ao gerar relatório. Por favor, tente novamente.');
        }
    }
    /**
     * Gera relatório de solicitações por status
     * @param options Opções para geração do relatório
     * @returns Buffer contendo o relatório no formato solicitado
     */
    async gerarRelatorioSolicitacoesPorStatus(options) {
        const { dataInicio, dataFim, unidadeId, formato, user } = options;
        // Verificar permissões do usuário
        if (![
            role_enum_1.Role.ADMIN,
            role_enum_1.Role.GESTOR,
            role_enum_1.Role.TECNICO,
            role_enum_1.Role.COORDENADOR,
        ].includes(user.role)) {
            throw new common_1.UnauthorizedException('Você não tem permissão para gerar este relatório');
        }
        // Verificar permissão por unidade
        if (user.role === role_enum_1.Role.COORDENADOR &&
            (!unidadeId || unidadeId !== user.unidade_id)) {
            throw new common_1.UnauthorizedException('Coordenadores só podem acessar dados de sua unidade');
        }
        // Verificar formato solicitado
        if (!this.strategies.has(formato)) {
            throw new common_1.BadRequestException(`Formato de relatório não suportado: ${formato}`);
        }
        // Gerar chave de cache
        const cacheKey = `relatorio_solicitacoes_${dataInicio}_${dataFim}_${unidadeId || 'all'}_${formato}`;
        // Verificar cache
        const cachedReport = await this.cacheManager.get(cacheKey);
        if (cachedReport) {
            this.logger.log(`Relatório recuperado do cache: ${cacheKey}`);
            return cachedReport;
        }
        try {
            // Converter datas
            const inicio = new Date(dataInicio);
            const fim = new Date(dataFim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            if (isNaN(inicio.getTime()) || isNaN(fim.getTime())) {
                throw new common_1.BadRequestException('Datas inválidas');
            }
            // Construir consulta otimizada
            const queryBuilder = this.solicitacaoRepository
                .createQueryBuilder('solicitacao')
                .select([
                'solicitacao.id',
                'solicitacao.protocolo',
                'solicitacao.data_abertura',
                'solicitacao.status',
                'beneficiario.id',
                'beneficiario.nome',
                'tipo_beneficio.id',
                'tipo_beneficio.nome',
                'unidade.id',
                'unidade.nome',
            ])
                .leftJoin('solicitacao.beneficiario', 'beneficiario')
                .leftJoin('solicitacao.tipo_beneficio', 'tipo_beneficio')
                .leftJoin('solicitacao.unidade', 'unidade')
                .where('solicitacao.data_abertura BETWEEN :inicio AND :fim', {
                inicio,
                fim,
            });
            if (unidadeId) {
                queryBuilder.andWhere('solicitacao.unidade_id = :unidadeId', {
                    unidadeId,
                });
            }
            // Executar consulta
            const solicitacoes = await queryBuilder.getMany();
            this.logger.log(`Encontradas ${solicitacoes.length} solicitações no período`);
            // Agrupar por status
            const agrupadas = solicitacoes.reduce((acc, solicitacao) => {
                const status = solicitacao.status;
                if (!acc[status]) {
                    acc[status] = [];
                }
                acc[status].push(solicitacao);
                return acc;
            }, {});
            // Obter estratégia de geração para o formato solicitado
            const strategy = this.strategies.get(formato);
            if (!strategy) {
                throw new common_1.BadRequestException(`Formato de relatório não suportado: ${formato}`);
            }
            // Gerar relatório
            const opcoes = { dataInicio: inicio, dataFim: fim };
            const relatorio = (await strategy.gerar('solicitacoes-por-status', agrupadas, opcoes));
            // Armazenar em cache
            await this.cacheManager.set(cacheKey, relatorio, 3600000); // 1 hora
            return relatorio;
        }
        catch (error) {
            this.logger.error(`Erro ao gerar relatório de solicitações por status: ${error.message}`);
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.UnauthorizedException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Erro ao gerar relatório. Por favor, tente novamente.');
        }
    }
    /**
     * Gera relatório de atendimentos por unidade
     * @param options Opções para geração do relatório
     * @returns Buffer contendo o relatório no formato solicitado
     */
    async gerarRelatorioAtendimentosPorUnidade(options) {
        const { dataInicio, dataFim, formato, user } = options;
        // Verificar permissões do usuário
        if (![role_enum_1.Role.ADMIN, role_enum_1.Role.GESTOR].includes(user.role)) {
            throw new common_1.UnauthorizedException('Você não tem permissão para gerar este relatório');
        }
        // Verificar formato solicitado
        if (!this.strategies.has(formato)) {
            throw new common_1.BadRequestException(`Formato de relatório não suportado: ${formato}`);
        }
        // Gerar chave de cache
        const cacheKey = `relatorio_atendimentos_${dataInicio}_${dataFim}_${formato}`;
        // Verificar cache
        const cachedReport = await this.cacheManager.get(cacheKey);
        if (cachedReport) {
            this.logger.log(`Relatório recuperado do cache: ${cacheKey}`);
            return cachedReport;
        }
        try {
            // Converter datas
            const inicio = new Date(dataInicio);
            const fim = new Date(dataFim);
            fim.setHours(23, 59, 59, 999); // Ajusta para o final do dia
            if (isNaN(inicio.getTime()) || isNaN(fim.getTime())) {
                throw new common_1.BadRequestException('Datas inválidas');
            }
            // Buscar unidades ativas
            const unidades = await this.unidadeRepository.find({
                where: { status: unidade_entity_1.StatusUnidade.ATIVO },
            });
            // Resultados por unidade
            const resultado = [];
            // Processar cada unidade
            for (const unidade of unidades) {
                // Contar total de solicitações
                const totalSolicitacoes = await this.solicitacaoRepository.count({
                    where: {
                        unidade_id: unidade.id,
                        data_abertura: (0, typeorm_2.Between)(inicio, fim),
                    },
                });
                // Contar solicitações liberadas
                const solicitacoesLiberadas = await this.solicitacaoRepository.count({
                    where: {
                        unidade_id: unidade.id,
                        status: solicitacao_entity_1.StatusSolicitacao.LIBERADA,
                        data_abertura: (0, typeorm_2.Between)(inicio, fim),
                    },
                });
                // Contar solicitações pendentes (não liberadas)
                const solicitacoesPendentes = totalSolicitacoes - solicitacoesLiberadas;
                // Adicionar ao resultado
                resultado.push({
                    unidade,
                    totalSolicitacoes,
                    solicitacoesLiberadas,
                    solicitacoesPendentes,
                });
            }
            // Ordenar por total de solicitações (decrescente)
            resultado.sort((a, b) => b.totalSolicitacoes - a.totalSolicitacoes);
            // Obter estratégia de geração para o formato solicitado
            const strategy = this.strategies.get(formato);
            if (!strategy) {
                throw new common_1.BadRequestException(`Formato de relatório não suportado: ${formato}`);
            }
            // Gerar relatório
            const opcoes = { dataInicio: inicio, dataFim: fim };
            const relatorio = (await strategy.gerar('atendimentos-por-unidade', resultado, opcoes));
            // Armazenar em cache
            await this.cacheManager.set(cacheKey, relatorio, 3600000); // 1 hora
            return relatorio;
        }
        catch (error) {
            this.logger.error(`Erro ao gerar relatório de atendimentos por unidade: ${error.message}`);
            if (error instanceof common_1.BadRequestException ||
                error instanceof common_1.UnauthorizedException) {
                throw error;
            }
            throw new common_1.InternalServerErrorException('Erro ao gerar relatório. Por favor, tente novamente.');
        }
    }
};
exports.RelatoriosService = RelatoriosService;
exports.RelatoriosService = RelatoriosService = RelatoriosService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __param(1, (0, typeorm_1.InjectRepository)(unidade_entity_1.Unidade)),
    __param(2, (0, typeorm_1.InjectRepository)(tipo_beneficio_entity_1.TipoBeneficio)),
    __param(4, (0, common_1.Inject)(cache_manager_1.CACHE_MANAGER)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof temp_files_service_1.TempFilesService !== "undefined" && temp_files_service_1.TempFilesService) === "function" ? _d : Object, typeof (_e = typeof cache_manager_2.Cache !== "undefined" && cache_manager_2.Cache) === "function" ? _e : Object])
], RelatoriosService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,