b7dbd8df8d08365d599ede85605e03d1
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegradorController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const integrador_service_1 = require("../services/integrador.service");
const integrador_token_service_1 = require("../services/integrador-token.service");
const create_integrador_dto_1 = require("../dto/create-integrador.dto");
const update_integrador_dto_1 = require("../dto/update-integrador.dto");
const create_token_dto_1 = require("../dto/create-token.dto");
const revoke_token_dto_1 = require("../dto/revoke-token.dto");
const integrador_response_dto_1 = require("../dto/integrador-response.dto");
const token_response_dto_1 = require("../dto/token-response.dto");
const role_decorator_1 = require("../../../auth/decorators/role.decorator");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const roles_guard_1 = require("../../../auth/guards/roles.guard");
const roles_constants_1 = require("../../../shared/constants/roles.constants");
/**
 * Controller para gerenciamento de integradores e seus tokens.
 * Requer autenticação administrativa e papel de ADMIN para acesso.
 */
let IntegradorController = class IntegradorController {
    integradorService;
    tokenService;
    constructor(integradorService, tokenService) {
        this.integradorService = integradorService;
        this.tokenService = tokenService;
    }
    /**
     * Cria um novo integrador.
     */
    create(createIntegradorDto) {
        return this.integradorService.create(createIntegradorDto);
    }
    /**
     * Lista todos os integradores cadastrados.
     */
    findAll() {
        return this.integradorService.findAll();
    }
    /**
     * Obtém detalhes de um integrador específico.
     */
    findOne(id) {
        return this.integradorService.findOne(id);
    }
    /**
     * Atualiza dados de um integrador.
     */
    update(id, updateIntegradorDto) {
        return this.integradorService.update(id, updateIntegradorDto);
    }
    /**
     * Remove um integrador do sistema.
     */
    async remove(id) {
        await this.integradorService.remove(id);
    }
    /**
     * Ativa ou desativa um integrador.
     */
    toggleStatus(id, ativo) {
        return this.integradorService.toggleAtivo(id, ativo);
    }
    /**
     * Lista todos os tokens de um integrador.
     */
    findAllTokens(id) {
        return this.tokenService.findAllByIntegrador(id);
    }
    /**
     * Cria um novo token para um integrador.
     */
    async createToken(id, createTokenDto) {
        const result = await this.tokenService.createToken(id, createTokenDto);
        return {
            token: result.token,
            tokenInfo: result.tokenInfo
        };
    }
    /**
     * Revoga um token existente.
     */
    revogarToken(tokenId, revokeTokenDto) {
        return this.tokenService.revogarToken(tokenId, revokeTokenDto.motivo);
    }
};
exports.IntegradorController = IntegradorController;
__decorate([
    (0, common_1.Post)(),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Cria um novo integrador' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Integrador criado com sucesso',
        type: integrador_response_dto_1.IntegradorResponseDto
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 409, description: 'Já existe um integrador com este nome' }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_c = typeof create_integrador_dto_1.CreateIntegradorDto !== "undefined" && create_integrador_dto_1.CreateIntegradorDto) === "function" ? _c : Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], IntegradorController.prototype, "create", null);
__decorate([
    (0, common_1.Get)(),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Lista todos os integradores' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de integradores retornada com sucesso',
        type: [integrador_response_dto_1.IntegradorResponseDto]
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], IntegradorController.prototype, "findAll", null);
__decorate([
    (0, common_1.Get)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Obtém um integrador pelo ID' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Integrador encontrado',
        type: integrador_response_dto_1.IntegradorResponseDto
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_f = typeof Promise !== "undefined" && Promise) === "function" ? _f : Object)
], IntegradorController.prototype, "findOne", null);
__decorate([
    (0, common_1.Patch)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Atualiza um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Integrador atualizado com sucesso',
        type: integrador_response_dto_1.IntegradorResponseDto
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_g = typeof update_integrador_dto_1.UpdateIntegradorDto !== "undefined" && update_integrador_dto_1.UpdateIntegradorDto) === "function" ? _g : Object]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], IntegradorController.prototype, "update", null);
__decorate([
    (0, common_1.Delete)(':id'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),
    (0, swagger_1.ApiOperation)({ summary: 'Remove um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({ status: 204, description: 'Integrador removido com sucesso' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], IntegradorController.prototype, "remove", null);
__decorate([
    (0, common_1.Patch)(':id/status'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Ativa ou desativa um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status do integrador atualizado com sucesso',
        type: integrador_response_dto_1.IntegradorResponseDto
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)('ativo')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Boolean]),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], IntegradorController.prototype, "toggleStatus", null);
__decorate([
    (0, common_1.Get)(':id/tokens'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Lista todos os tokens de um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de tokens retornada com sucesso',
        type: [token_response_dto_1.TokenResponseDto]
    }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], IntegradorController.prototype, "findAllTokens", null);
__decorate([
    (0, common_1.Post)(':id/tokens'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Cria um novo token para um integrador' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Token criado com sucesso',
        schema: {
            properties: {
                token: {
                    type: 'string',
                    description: 'Token JWT gerado (exibido apenas uma vez)',
                    example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...'
                },
                tokenInfo: {
                    $ref: '#/components/schemas/TokenResponseDto'
                }
            }
        }
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Dados inválidos ou integrador inativo' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Integrador não encontrado' }),
    __param(0, (0, common_1.Param)('id', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_m = typeof create_token_dto_1.CreateTokenDto !== "undefined" && create_token_dto_1.CreateTokenDto) === "function" ? _m : Object]),
    __metadata("design:returntype", Promise)
], IntegradorController.prototype, "createToken", null);
__decorate([
    (0, common_1.Patch)(':id/tokens/:tokenId/revogar'),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN),
    (0, swagger_1.ApiOperation)({ summary: 'Revoga um token' }),
    (0, swagger_1.ApiParam)({ name: 'id', description: 'ID do integrador', type: 'string' }),
    (0, swagger_1.ApiParam)({ name: 'tokenId', description: 'ID do token', type: 'string' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Token revogado com sucesso',
        type: token_response_dto_1.TokenResponseDto
    }),
    (0, swagger_1.ApiResponse)({ status: 400, description: 'Token já revogado' }),
    (0, swagger_1.ApiResponse)({ status: 404, description: 'Token não encontrado' }),
    __param(0, (0, common_1.Param)('tokenId', common_1.ParseUUIDPipe)),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_o = typeof revoke_token_dto_1.RevokeTokenDto !== "undefined" && revoke_token_dto_1.RevokeTokenDto) === "function" ? _o : Object]),
    __metadata("design:returntype", typeof (_p = typeof Promise !== "undefined" && Promise) === "function" ? _p : Object)
], IntegradorController.prototype, "revogarToken", null);
exports.IntegradorController = IntegradorController = __decorate([
    (0, swagger_1.ApiTags)('Integradores'),
    (0, common_1.Controller)('integradores'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, swagger_1.ApiBearerAuth)(),
    __metadata("design:paramtypes", [typeof (_a = typeof integrador_service_1.IntegradorService !== "undefined" && integrador_service_1.IntegradorService) === "function" ? _a : Object, typeof (_b = typeof integrador_token_service_1.IntegradorTokenService !== "undefined" && integrador_token_service_1.IntegradorTokenService) === "function" ? _b : Object])
], IntegradorController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGludGVncmFkb3JcXGNvbnRyb2xsZXJzXFxpbnRlZ3JhZG9yLmNvbnRyb2xsZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDJDQVl3QjtBQUN4Qiw2Q0FNeUI7QUFDekIsdUVBQW1FO0FBQ25FLG1GQUE4RTtBQUM5RSx3RUFBbUU7QUFDbkUsd0VBQW1FO0FBQ25FLDhEQUF5RDtBQUN6RCw4REFBeUQ7QUFDekQsNEVBQXVFO0FBQ3ZFLGtFQUE2RDtBQUM3RCw0RUFBZ0U7QUFFaEUsd0VBQW1FO0FBQ25FLGtFQUE4RDtBQUM5RCwrRUFBa0U7QUFFbEU7OztHQUdHO0FBS0ksSUFBTSxvQkFBb0IsR0FBMUIsTUFBTSxvQkFBb0I7SUFFWjtJQUNBO0lBRm5CLFlBQ21CLGlCQUFvQyxFQUNwQyxZQUFvQztRQURwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLGlCQUFZLEdBQVosWUFBWSxDQUF3QjtJQUNwRCxDQUFDO0lBRUo7O09BRUc7SUFXSCxNQUFNLENBQVMsbUJBQXdDO1FBQ3JELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7T0FFRztJQVNILE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O09BRUc7SUFXSCxPQUFPLENBQTZCLEVBQVU7UUFDNUMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7T0FFRztJQVlILE1BQU0sQ0FDd0IsRUFBVSxFQUM5QixtQkFBd0M7UUFFaEQsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIs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U0FBUyxFQUFFLHNCQUFhLENBQUMsQ0FBQTtJQUMvQixXQUFBLElBQUEsYUFBSSxHQUFFLENBQUE7O2lFQUFpQixpQ0FBYyxvQkFBZCxpQ0FBYzt3REFDckMsT0FBTyxvQkFBUCxPQUFPO3dEQUVUOytCQXhMVSxvQkFBb0I7SUFKaEMsSUFBQSxpQkFBTyxFQUFDLGNBQWMsQ0FBQztJQUN2QixJQUFBLG1CQUFVLEVBQUMsY0FBYyxDQUFDO0lBQzFCLElBQUEsa0JBQVMsRUFBQyw2QkFBWSxFQUFFLHdCQUFVLENBQUM7SUFDbkMsSUFBQSx1QkFBYSxHQUFFO3lEQUd3QixzQ0FBaUIsb0JBQWpCLHNDQUFpQixvREFDdEIsaURBQXNCLG9CQUF0QixpREFBc0I7R0FINUMsb0JBQW9CLENBeUxoQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcaW50ZWdyYWRvclxcY29udHJvbGxlcnNcXGludGVncmFkb3IuY29udHJvbGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBcclxuICBDb250cm9sbGVyLCBcclxuICBHZXQsIFxyXG4gIFBvc3QsIFxyXG4gIEJvZHksIFxyXG4gIFBhdGNoLCBcclxuICBQYXJhbSwgXHJcbiAgRGVsZXRlLCBcclxuICBVc2VHdWFyZHMsXHJcbiAgSHR0cENvZGUsXHJcbiAgSHR0cFN0YXR1cyxcclxuICBQYXJzZVVVSURQaXBlIFxyXG59IGZyb20gJ0BuZXN0anMvY29tbW9uJztcclxuaW1wb3J0IHsgXHJcbiAgQXBpVGFncywgXHJcbiAgQXBpT3BlcmF0aW9uLCBcclxuICBBcGlSZXNwb25zZSwgXHJcbiAgQXBpQmVhcmVyQXV0aCxcclxuICBBcGlQYXJhbVxyXG59IGZyb20gJ0BuZXN0anMvc3dhZ2dlcic7XHJcbmltcG9ydCB7IEludGVncmFkb3JTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvaW50ZWdyYWRvci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSW50ZWdyYWRvclRva2VuU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2ludGVncmFkb3ItdG9rZW4uc2VydmljZSc7XHJcbmltcG9ydCB7IENyZWF0ZUludGVncmFkb3JEdG8gfSBmcm9tICcuLi9kdG8vY3JlYXRlLWludGVncmFkb3IuZHRvJztcclxuaW1wb3J0IHsgVXBkYXRlSW50ZWdyYWRvckR0byB9IGZyb20gJy4uL2R0by91cGRhdGUtaW50ZWdyYWRvci5kdG8nO1xyXG5pbXBvcnQgeyBDcmVhdGVUb2tlbkR0byB9IGZyb20gJy4uL2R0by9jcmVhdGUtdG9rZW4uZHRvJztcclxuaW1wb3J0IHsgUmV2b2tlVG9rZW5EdG8gfSBmcm9tICcuLi9kdG8vcmV2b2tlLXRva2VuLmR0byc7XHJcbmltcG9ydCB7IEludGVncmFkb3JSZXNwb25zZUR0byB9IGZyb20gJy4uL2R0by9pbnRlZ3JhZG9yLXJlc3BvbnNlLmR0byc7XHJcbmltcG9ydCB7IFRva2VuUmVzcG9uc2VEdG8gfSBmcm9tICcuLi9kdG8vdG9rZW4tcmVzcG9uc2UuZHRvJztcclxuaW1wb3J0IHsgUm9sZXMgfSBmcm9tICcuLi8uLi8uLi9hdXRoL2RlY29yYXRvcnMvcm9sZS5kZWNvcmF0b3InO1xyXG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnLi4vLi4vLi4vYXV0aC9lbnVtcy9yb2xlLmVudW0nO1xyXG5pbXBvcnQgeyBKd3RBdXRoR3VhcmQgfSBmcm9tICcuLi8uLi8uLi9hdXRoL2d1YXJkcy9qd3QtYXV0aC5ndWFyZCc7XHJcbmltcG9ydCB7IFJvbGVzR3VhcmQgfSBmcm9tICcuLi8uLi8uLi9hdXRoL2d1YXJkcy9yb2xlcy5ndWFyZCc7XHJcbmltcG9ydCB7IFJPTEVTIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9yb2xlcy5jb25zdGFudHMnO1xyXG5cclxuLyoqXHJcbiAqIENvbnRyb2xsZXIgcGFyYSBnZXJlbmNpYW1lbnRvIGRlIGludGVncmFkb3JlcyBlIHNldXMgdG9rZW5zLlxyXG4gKiBSZXF1ZXIgYXV0ZW50aWNhw6fDo28gYWRtaW5pc3RyYXRpdmEgZSBwYXBlbCBkZSBBRE1JTiBwYXJhIGFjZXNzby5cclxuICovXHJcbkBBcGlUYWdzKCdJbnRlZ3JhZG9yZXMnKVxyXG5AQ29udHJvbGxlcignaW50ZWdyYWRvcmVzJylcclxuQFVzZUd1YXJkcyhKd3RBdXRoR3VhcmQsIFJvbGVzR3VhcmQpXHJcbkBBcGlCZWFyZXJBdXRoKClcclxuZXhwb3J0IGNsYXNzIEludGVncmFkb3JDb250cm9sbGVyIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW50ZWdyYWRvclNlcnZpY2U6IEludGVncmFkb3JTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSB0b2tlblNlcnZpY2U6IEludGVncmFkb3JUb2tlblNlcnZpY2UsXHJcbiAgKSB7fVxyXG5cclxuICAvKipcclxuICAgKiBDcmlhIHVtIG5vdm8gaW50ZWdyYWRvci5cclxuICAgKi9cclxuICBAUG9zdCgpXHJcbiAgQFJvbGVzKFJPTEVTLkFETUlOKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnQ3JpYSB1bSBub3ZvIGludGVncmFkb3InIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgXHJcbiAgICBzdGF0dXM6IDIwMSwgXHJcbiAgICBkZXNjcmlwdGlvbjogJ0ludGVncmFkb3IgY3JpYWRvIGNvbSBzdWNlc3NvJywgXHJcbiAgICB0eXBlOiBJbnRlZ3JhZG9yUmVzcG9uc2VEdG8gXHJcbiAgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMCwgZGVzY3JpcHRpb246ICdEYWRvcyBpbnbDoWxpZG9zJyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA5LCBkZXNjcmlwdGlvbjogJ0rDoSBleGlzdGUgdW0gaW50ZWdyYWRvciBjb20gZXN0ZSBub21lJyB9KVxyXG4gIGNyZWF0ZShAQm9keSgpIGNyZWF0ZUludGVncmFkb3JEdG86IENyZWF0ZUludGVncmFkb3JEdG8pOiBQcm9taXNlPEludGVncmFkb3JSZXNwb25zZUR0bz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZWdyYWRvclNlcnZpY2UuY3JlYXRlKGNyZWF0ZUludGVncmFkb3JEdG8pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTGlzdGEgdG9kb3Mgb3MgaW50ZWdyYWRvcmVzIGNhZGFzdHJhZG9zLlxyXG4gICAqL1xyXG4gIEBHZXQoKVxyXG4gIEBSb2xlcyhST0xFUy5BRE1JTilcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0xpc3RhIHRvZG9zIG9zIGludGVncmFkb3JlcycgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBcclxuICAgIHN0YXR1czogMjAwLCBcclxuICAgIGRlc2NyaXB0aW9uOiAnTGlzdGEgZGUgaW50ZWdyYWRvcmVzIHJldG9ybmFkYSBjb20gc3VjZXNzbycsXHJcbiAgICB0eXBlOiBbSW50ZWdyYWRvclJlc3BvbnNlRHRvXSBcclxuICB9KVxyXG4gIGZpbmRBbGwoKTogUHJvbWlzZTxJbnRlZ3JhZG9yUmVzcG9uc2VEdG9bXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZWdyYWRvclNlcnZpY2UuZmluZEFsbCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT2J0w6ltIGRldGFsaGVzIGRlIHVtIGludGVncmFkb3IgZXNwZWPDrWZpY28uXHJcbiAgICovXHJcbiAgQEdldCgnOmlkJylcclxuICBAUm9sZXMoUk9MRVMuQURNSU4pXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdPYnTDqW0gdW0gaW50ZWdyYWRvciBwZWxvIElEJyB9KVxyXG4gIEBBcGlQYXJhbSh7IG5hbWU6ICdpZCcsIGRlc2NyaXB0aW9uOiAnSUQgZG8gaW50ZWdyYWRvcicsIHR5cGU6ICdzdHJpbmcnIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgXHJcbiAgICBzdGF0dXM6IDIwMCwgXHJcbiAgICBkZXNjcmlwdGlvbjogJ0ludGVncmFkb3IgZW5jb250cmFkbycsXHJcbiAgICB0eXBlOiBJbnRlZ3JhZG9yUmVzcG9uc2VEdG8gXHJcbiAgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwNCwgZGVzY3JpcHRpb246ICdJbnRlZ3JhZG9yIG7Do28gZW5jb250cmFkbycgfSlcclxuICBmaW5kT25lKEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBpZDogc3RyaW5nKTogUHJvbWlzZTxJbnRlZ3JhZG9yUmVzcG9uc2VEdG8+IHtcclxuICAgIHJldHVybiB0aGlzLmludGVncmFkb3JTZXJ2aWNlLmZpbmRPbmUoaWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXR1YWxpemEgZGFkb3MgZGUgdW0gaW50ZWdyYWRvci5cclxuICAgKi9cclxuICBAUGF0Y2goJzppZCcpXHJcbiAgQFJvbGVzKFJPTEVTLkFETUlOKVxyXG4gIEBBcGlPcGVyYXRpb24oeyBzdW1tYXJ5OiAnQXR1YWxpemEgdW0gaW50ZWdyYWRvcicgfSlcclxuICBAQXBpUGFyYW0oeyBuYW1lOiAnaWQnLCBkZXNjcmlwdGlvbjogJ0lEIGRvIGludGVncmFkb3InLCB0eXBlOiAnc3RyaW5nJyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IFxyXG4gICAgc3RhdHVzOiAyMDAsIFxyXG4gICAgZGVzY3JpcHRpb246ICdJbnRlZ3JhZG9yIGF0dWFsaXphZG8gY29tIHN1Y2Vzc28nLFxyXG4gICAgdHlwZTogSW50ZWdyYWRvclJlc3BvbnNlRHRvIFxyXG4gIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDAsIGRlc2NyaXB0aW9uOiAnRGFkb3MgaW52w6FsaWRvcycgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwNCwgZGVzY3JpcHRpb246ICdJbnRlZ3JhZG9yIG7Do28gZW5jb250cmFkbycgfSlcclxuICB1cGRhdGUoXHJcbiAgICBAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZywgXHJcbiAgICBAQm9keSgpIHVwZGF0ZUludGVncmFkb3JEdG86IFVwZGF0ZUludGVncmFkb3JEdG9cclxuICApOiBQcm9taXNlPEludGVncmFkb3JSZXNwb25zZUR0bz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZWdyYWRvclNlcnZpY2UudXBkYXRlKGlkLCB1cGRhdGVJbnRlZ3JhZG9yRHRvKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSB1bSBpbnRlZ3JhZG9yIGRvIHNpc3RlbWEuXHJcbiAgICovXHJcbiAgQERlbGV0ZSgnOmlkJylcclxuICBAUm9sZXMoUk9MRVMuQURNSU4pXHJcbiAgQEh0dHBDb2RlKEh0dHBTdGF0dXMuTk9fQ09OVEVOVClcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ1JlbW92ZSB1bSBpbnRlZ3JhZG9yJyB9KVxyXG4gIEBBcGlQYXJhbSh7IG5hbWU6ICdpZCcsIGRlc2NyaXB0aW9uOiAnSUQgZG8gaW50ZWdyYWRvcicsIHR5cGU6ICdzdHJpbmcnIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiAyMDQsIGRlc2NyaXB0aW9uOiAnSW50ZWdyYWRvciByZW1vdmlkbyBjb20gc3VjZXNzbycgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwNCwgZGVzY3JpcHRpb246ICdJbnRlZ3JhZG9yIG7Do28gZW5jb250cmFkbycgfSlcclxuICBhc3luYyByZW1vdmUoQFBhcmFtKCdpZCcsIFBhcnNlVVVJRFBpcGUpIGlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMuaW50ZWdyYWRvclNlcnZpY2UucmVtb3ZlKGlkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0aXZhIG91IGRlc2F0aXZhIHVtIGludGVncmFkb3IuXHJcbiAgICovXHJcbiAgQFBhdGNoKCc6aWQvc3RhdHVzJylcclxuICBAUm9sZXMoUk9MRVMuQURNSU4pXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdBdGl2YSBvdSBkZXNhdGl2YSB1bSBpbnRlZ3JhZG9yJyB9KVxyXG4gIEBBcGlQYXJhbSh7IG5hbWU6ICdpZCcsIGRlc2NyaXB0aW9uOiAnSUQgZG8gaW50ZWdyYWRvcicsIHR5cGU6ICdzdHJpbmcnIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgXHJcbiAgICBzdGF0dXM6IDIwMCwgXHJcbiAgICBkZXNjcmlwdGlvbjogJ1N0YXR1cyBkbyBpbnRlZ3JhZG9yIGF0dWFsaXphZG8gY29tIHN1Y2Vzc28nLFxyXG4gICAgdHlwZTogSW50ZWdyYWRvclJlc3BvbnNlRHRvIFxyXG4gIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDQsIGRlc2NyaXB0aW9uOiAnSW50ZWdyYWRvciBuw6NvIGVuY29udHJhZG8nIH0pXHJcbiAgdG9nZ2xlU3RhdHVzKFxyXG4gICAgQFBhcmFtKCdpZCcsIFBhcnNlVVVJRFBpcGUpIGlkOiBzdHJpbmcsIFxyXG4gICAgQEJvZHkoJ2F0aXZvJykgYXRpdm86IGJvb2xlYW5cclxuICApOiBQcm9taXNlPEludGVncmFkb3JSZXNwb25zZUR0bz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZWdyYWRvclNlcnZpY2UudG9nZ2xlQXRpdm8oaWQsIGF0aXZvKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExpc3RhIHRvZG9zIG9zIHRva2VucyBkZSB1bSBpbnRlZ3JhZG9yLlxyXG4gICAqL1xyXG4gIEBHZXQoJzppZC90b2tlbnMnKVxyXG4gIEBSb2xlcyhST0xFUy5BRE1JTilcclxuICBAQXBpT3BlcmF0aW9uKHsgc3VtbWFyeTogJ0xpc3RhIHRvZG9zIG9zIHRva2VucyBkZSB1bSBpbnRlZ3JhZG9yJyB9KVxyXG4gIEBBcGlQYXJhbSh7IG5hbWU6ICdpZCcsIGRlc2NyaXB0aW9uOiAnSUQgZG8gaW50ZWdyYWRvcicsIHR5cGU6ICdzdHJpbmcnIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgXHJcbiAgICBzdGF0dXM6IDIwMCwgXHJcbiAgICBkZXNjcmlwdGlvbjogJ0xpc3RhIGRlIHRva2VucyByZXRvcm5hZGEgY29tIHN1Y2Vzc28nLFxyXG4gICAgdHlwZTogW1Rva2VuUmVzcG9uc2VEdG9dIFxyXG4gIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDQsIGRlc2NyaXB0aW9uOiAnSW50ZWdyYWRvciBuw6NvIGVuY29udHJhZG8nIH0pXHJcbiAgZmluZEFsbFRva2VucyhAUGFyYW0oJ2lkJywgUGFyc2VVVUlEUGlwZSkgaWQ6IHN0cmluZyk6IFByb21pc2U8VG9rZW5SZXNwb25zZUR0b1tdPiB7XHJcbiAgICByZXR1cm4gdGhpcy50b2tlblNlcnZpY2UuZmluZEFsbEJ5SW50ZWdyYWRvcihpZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmlhIHVtIG5vdm8gdG9rZW4gcGFyYSB1bSBpbnRlZ3JhZG9yLlxyXG4gICAqL1xyXG4gIEBQb3N0KCc6aWQvdG9rZW5zJylcclxuICBAUm9sZXMoUk9MRVMuQURNSU4pXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdDcmlhIHVtIG5vdm8gdG9rZW4gcGFyYSB1bSBpbnRlZ3JhZG9yJyB9KVxyXG4gIEBBcGlQYXJhbSh7IG5hbWU6ICdpZCcsIGRlc2NyaXB0aW9uOiAnSUQgZG8gaW50ZWdyYWRvcicsIHR5cGU6ICdzdHJpbmcnIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgXHJcbiAgICBzdGF0dXM6IDIwMSwgXHJcbiAgICBkZXNjcmlwdGlvbjogJ1Rva2VuIGNyaWFkbyBjb20gc3VjZXNzbycsXHJcbiAgICBzY2hlbWE6IHtcclxuICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHRva2VuOiB7XHJcbiAgICAgICAgICB0eXBlOiAnc3RyaW5nJyxcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVG9rZW4gSldUIGdlcmFkbyAoZXhpYmlkbyBhcGVuYXMgdW1hIHZleiknLFxyXG4gICAgICAgICAgZXhhbXBsZTogJ2V5SmhiR2NpT2lKU1V6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS4uLidcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRva2VuSW5mbzoge1xyXG4gICAgICAgICAgJHJlZjogJyMvY29tcG9uZW50cy9zY2hlbWFzL1Rva2VuUmVzcG9uc2VEdG8nXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwMCwgZGVzY3JpcHRpb246ICdEYWRvcyBpbnbDoWxpZG9zIG91IGludGVncmFkb3IgaW5hdGl2bycgfSlcclxuICBAQXBpUmVzcG9uc2UoeyBzdGF0dXM6IDQwNCwgZGVzY3JpcHRpb246ICdJbnRlZ3JhZG9yIG7Do28gZW5jb250cmFkbycgfSlcclxuICBhc3luYyBjcmVhdGVUb2tlbihcclxuICAgIEBQYXJhbSgnaWQnLCBQYXJzZVVVSURQaXBlKSBpZDogc3RyaW5nLCBcclxuICAgIEBCb2R5KCkgY3JlYXRlVG9rZW5EdG86IENyZWF0ZVRva2VuRHRvXHJcbiAgKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnRva2VuU2VydmljZS5jcmVhdGVUb2tlbihpZCwgY3JlYXRlVG9rZW5EdG8pO1xyXG4gICAgXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b2tlbjogcmVzdWx0LnRva2VuLFxyXG4gICAgICB0b2tlbkluZm86IHJlc3VsdC50b2tlbkluZm9cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXZvZ2EgdW0gdG9rZW4gZXhpc3RlbnRlLlxyXG4gICAqL1xyXG4gIEBQYXRjaCgnOmlkL3Rva2Vucy86dG9rZW5JZC9yZXZvZ2FyJylcclxuICBAUm9sZXMoUk9MRVMuQURNSU4pXHJcbiAgQEFwaU9wZXJhdGlvbih7IHN1bW1hcnk6ICdSZXZvZ2EgdW0gdG9rZW4nIH0pXHJcbiAgQEFwaVBhcmFtKHsgbmFtZTogJ2lkJywgZGVzY3JpcHRpb246ICdJRCBkbyBpbnRlZ3JhZG9yJywgdHlwZTogJ3N0cmluZycgfSlcclxuICBAQXBpUGFyYW0oeyBuYW1lOiAndG9rZW5JZCcsIGRlc2NyaXB0aW9uOiAnSUQgZG8gdG9rZW4nLCB0eXBlOiAnc3RyaW5nJyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IFxyXG4gICAgc3RhdHVzOiAyMDAsIFxyXG4gICAgZGVzY3JpcHRpb246ICdUb2tlbiByZXZvZ2FkbyBjb20gc3VjZXNzbycsXHJcbiAgICB0eXBlOiBUb2tlblJlc3BvbnNlRHRvIFxyXG4gIH0pXHJcbiAgQEFwaVJlc3BvbnNlKHsgc3RhdHVzOiA0MDAsIGRlc2NyaXB0aW9uOiAnVG9rZW4gasOhIHJldm9nYWRvJyB9KVxyXG4gIEBBcGlSZXNwb25zZSh7IHN0YXR1czogNDA0LCBkZXNjcmlwdGlvbjogJ1Rva2VuIG7Do28gZW5jb250cmFkbycgfSlcclxuICByZXZvZ2FyVG9rZW4oXHJcbiAgICBAUGFyYW0oJ3Rva2VuSWQnLCBQYXJzZVVVSURQaXBlKSB0b2tlbklkOiBzdHJpbmcsXHJcbiAgICBAQm9keSgpIHJldm9rZVRva2VuRHRvOiBSZXZva2VUb2tlbkR0b1xyXG4gICk6IFByb21pc2U8VG9rZW5SZXNwb25zZUR0bz4ge1xyXG4gICAgcmV0dXJuIHRoaXMudG9rZW5TZXJ2aWNlLnJldm9nYXJUb2tlbih0b2tlbklkLCByZXZva2VUb2tlbkR0by5tb3Rpdm8pO1xyXG4gIH1cclxufVxyXG4iXSwidmVyc2lvbiI6M30=