0d9f25f159660adf6883c1fad8e598d4
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParametroController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const jwt_auth_guard_1 = require("../../../auth/guards/jwt-auth.guard");
const permission_guard_1 = require("../../../auth/guards/permission.guard");
const requires_permission_decorator_1 = require("../../../auth/decorators/requires-permission.decorator");
const user_permission_entity_1 = require("../../../entities/user-permission.entity");
const parametro_service_1 = require("../services/parametro.service");
const parametro_create_dto_1 = require("../dtos/parametro/parametro-create.dto");
const parametro_update_dto_1 = require("../dtos/parametro/parametro-update.dto");
const parametro_response_dto_1 = require("../dtos/parametro/parametro-response.dto");
/**
 * Controlador responsável pelas operações de parâmetros do sistema
 */
let ParametroController = class ParametroController {
    parametroService;
    constructor(parametroService) {
        this.parametroService = parametroService;
    }
    /**
     * Busca todos os parâmetros do sistema
     * @param categoria Categoria opcional para filtrar
     * @returns Lista de parâmetros
     */
    async buscarTodos(categoria) {
        return this.parametroService.buscarTodos(categoria);
    }
    /**
     * Busca um parâmetro específico por sua chave
     * @param chave Chave do parâmetro
     * @returns Parâmetro encontrado
     */
    async buscarPorChave(chave) {
        return this.parametroService.buscarPorChave(chave);
    }
    /**
     * Cria um novo parâmetro no sistema
     * @param dto Dados do parâmetro a ser criado
     * @returns Parâmetro criado
     */
    async criar(dto) {
        return this.parametroService.criar(dto);
    }
    /**
     * Atualiza um parâmetro existente
     * @param chave Chave do parâmetro
     * @param dto Dados para atualização
     * @returns Parâmetro atualizado
     */
    async atualizar(chave, dto) {
        return this.parametroService.atualizar(chave, dto);
    }
    /**
     * Remove um parâmetro do sistema
     * @param chave Chave do parâmetro
     */
    async remover(chave) {
        await this.parametroService.remover(chave);
    }
    /**
     * Limpa o cache de parâmetros
     */
    async limparCache() {
        this.parametroService.limparCache();
        return { mensagem: 'Cache de parâmetros limpo com sucesso' };
    }
};
exports.ParametroController = ParametroController;
__decorate([
    (0, common_1.Get)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'configuracao.parametro.listar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar todos os parâmetros do sistema' }),
    (0, swagger_1.ApiQuery)({
        name: 'categoria',
        required: false,
        description: 'Filtrar por categoria',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Lista de parâmetros encontrados',
        type: [parametro_response_dto_1.ParametroResponseDto],
    }),
    __param(0, (0, common_1.Query)('categoria')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_b = typeof Promise !== "undefined" && Promise) === "function" ? _b : Object)
], ParametroController.prototype, "buscarTodos", null);
__decorate([
    (0, common_1.Get)(':chave'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'configuracao.parametro.visualizar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Buscar parâmetro por chave' }),
    (0, swagger_1.ApiParam)({
        name: 'chave',
        description: 'Chave única do parâmetro',
        example: 'sistema.nome',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Parâmetro encontrado',
        type: parametro_response_dto_1.ParametroResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Parâmetro não encontrado',
    }),
    __param(0, (0, common_1.Param)('chave')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_c = typeof Promise !== "undefined" && Promise) === "function" ? _c : Object)
], ParametroController.prototype, "buscarPorChave", null);
__decorate([
    (0, common_1.Post)(),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'configuracao.parametro.criar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Criar novo parâmetro' }),
    (0, swagger_1.ApiResponse)({
        status: 201,
        description: 'Parâmetro criado com sucesso',
        type: parametro_response_dto_1.ParametroResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou parâmetro já existe',
    }),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_d = typeof parametro_create_dto_1.ParametroCreateDto !== "undefined" && parametro_create_dto_1.ParametroCreateDto) === "function" ? _d : Object]),
    __metadata("design:returntype", typeof (_e = typeof Promise !== "undefined" && Promise) === "function" ? _e : Object)
], ParametroController.prototype, "criar", null);
__decorate([
    (0, common_1.Put)(':chave'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'configuracao.parametro.editar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Atualizar parâmetro existente' }),
    (0, swagger_1.ApiParam)({
        name: 'chave',
        description: 'Chave única do parâmetro',
        example: 'sistema.nome',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Parâmetro atualizado com sucesso',
        type: parametro_response_dto_1.ParametroResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Parâmetro não encontrado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou parâmetro não editável',
    }),
    __param(0, (0, common_1.Param)('chave')),
    __param(1, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, typeof (_f = typeof parametro_update_dto_1.ParametroUpdateDto !== "undefined" && parametro_update_dto_1.ParametroUpdateDto) === "function" ? _f : Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], ParametroController.prototype, "atualizar", null);
__decorate([
    (0, common_1.Delete)(':chave'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'configuracao.parametro.remover',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Remover parâmetro' }),
    (0, swagger_1.ApiParam)({
        name: 'chave',
        description: 'Chave única do parâmetro',
        example: 'sistema.nome',
    }),
    (0, swagger_1.ApiResponse)({
        status: 204,
        description: 'Parâmetro removido com sucesso',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Parâmetro não encontrado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Parâmetro não pode ser removido',
    }),
    __param(0, (0, common_1.Param)('chave')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], ParametroController.prototype, "remover", null);
__decorate([
    (0, common_1.Post)('cache/limpar'),
    (0, requires_permission_decorator_1.RequiresPermission)({
        permissionName: 'configuracao.parametro.cache.limpar',
        scopeType: user_permission_entity_1.ScopeType.GLOBAL,
    }),
    (0, swagger_1.ApiOperation)({ summary: 'Limpar cache de parâmetros' }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Cache limpo com sucesso',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], ParametroController.prototype, "limparCache", null);
exports.ParametroController = ParametroController = __decorate([
    (0, swagger_1.ApiTags)('Configuração'),
    (0, swagger_1.ApiBearerAuth)(),
    (0, common_1.Controller)('configuracao/parametros'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, permission_guard_1.PermissionGuard),
    __metadata("design:paramtypes", [typeof (_a = typeof parametro_service_1.ParametroService !== "undefined" && parametro_service_1.ParametroService) === "function" ? _a : Object])
], ParametroController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,