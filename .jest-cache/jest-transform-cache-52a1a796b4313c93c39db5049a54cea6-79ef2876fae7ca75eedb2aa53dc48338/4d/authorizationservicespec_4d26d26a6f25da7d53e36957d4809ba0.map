{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\authorization.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\services\\authorization.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { AuthorizationService } from './authorization.service';\nimport { PermissionService } from './permission.service';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { ScopeType } from '../entities/user-permission.entity';\nimport { Logger } from '@nestjs/common';\n\n// Mock para o cache manager\nconst mockCacheManager = {\n  get: jest.fn(),\n  set: jest.fn(),\n  del: jest.fn(),\n};\n\n// Mock para o serviço de permissões\nconst mockPermissionService = {\n  hasPermission: jest.fn(),\n};\n\ndescribe('AuthorizationService', () => {\n  let service: AuthorizationService;\n\n  beforeEach(async () => {\n    jest.clearAllMocks();\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        AuthorizationService,\n        {\n          provide: PermissionService,\n          useValue: mockPermissionService,\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: mockCacheManager,\n        },\n        {\n          provide: Logger,\n          useValue: {\n            log: jest.fn(),\n            error: jest.fn(),\n            warn: jest.fn(),\n            debug: jest.fn(),\n          },\n        },\n      ],\n    }).compile();\n\n    service = module.get<AuthorizationService>(AuthorizationService);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('isAuthorized', () => {\n    it('should return true when user has required permission (AND operator)', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        operator: 'AND' as const,\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return false when user does not have required permission (AND operator)', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        operator: 'AND' as const,\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão\n      mockPermissionService.hasPermission.mockResolvedValue(false);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(false);\n    });\n\n    it('should return true when user has required role (OR operator)', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        roles: ['admin'],\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        operator: 'OR' as const,\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão (falha)\n      mockPermissionService.hasPermission.mockResolvedValue(false);\n\n      // Monkey patch do método hasRole para retornar true\n      jest.spyOn(service as any, 'hasRole').mockResolvedValue(true);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect((service as any).hasRole).toHaveBeenCalledWith('user-123', [\n        'admin',\n      ]);\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return false when user does not have required role or permission (OR operator)', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        roles: ['admin'],\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        operator: 'OR' as const,\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão (falha)\n      mockPermissionService.hasPermission.mockResolvedValue(false);\n\n      // Monkey patch do método hasRole para retornar false\n      jest.spyOn(service as any, 'hasRole').mockResolvedValue(false);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect((service as any).hasRole).toHaveBeenCalledWith('user-123', [\n        'admin',\n      ]);\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(false);\n    });\n\n    it('should return true when data check passes', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        dataCheck: jest.fn().mockReturnValue(true),\n        data: { id: 'data-123' },\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(options.dataCheck).toHaveBeenCalledWith({ id: 'data-123' });\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should return false when data check fails', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        dataCheck: jest.fn().mockReturnValue(false),\n        data: { id: 'data-123' },\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(options.dataCheck).toHaveBeenCalledWith({ id: 'data-123' });\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(false);\n    });\n\n    it('should return result from cache when available', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n      };\n\n      // Configurar o mock para retornar do cache\n      mockCacheManager.get.mockResolvedValue(true); // Está em cache e é true\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).not.toHaveBeenCalled(); // Não deve chamar o serviço\n      expect(result).toBe(true);\n    });\n\n    it('should handle async data check function', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        dataCheck: jest.fn().mockResolvedValue(true), // Função assíncrona\n        data: { id: 'data-123' },\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(options.dataCheck).toHaveBeenCalledWith({ id: 'data-123' });\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(true);\n    });\n\n    it('should handle null return from data check function', async () => {\n      // Arrange\n      const options = {\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        dataCheck: jest.fn().mockReturnValue(null), // Retorna null\n        data: { id: 'data-123' },\n      };\n\n      // Configurar o mock para retornar do cache primeiro\n      mockCacheManager.get.mockResolvedValue(null); // Não está em cache\n\n      // Configurar o mock para verificar permissão\n      mockPermissionService.hasPermission.mockResolvedValue(true);\n\n      // Act\n      const result = await service.isAuthorized(options);\n\n      // Assert\n      expect(mockCacheManager.get).toHaveBeenCalled();\n      expect(mockPermissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.visualizar',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(options.dataCheck).toHaveBeenCalledWith({ id: 'data-123' });\n      expect(mockCacheManager.set).toHaveBeenCalled(); // Deve armazenar em cache\n      expect(result).toBe(false); // Deve retornar false para null\n    });\n  });\n\n  describe('clearAuthorizationCache', () => {\n    it('should clear cache for a specific user', async () => {\n      // Arrange\n      const userId = 'user-123';\n\n      // Act\n      await service.clearAuthorizationCache(userId);\n\n      // Assert\n      expect(mockCacheManager.del).toHaveBeenCalledWith(`auth:${userId}:*`);\n    });\n  });\n});\n"],"version":3}