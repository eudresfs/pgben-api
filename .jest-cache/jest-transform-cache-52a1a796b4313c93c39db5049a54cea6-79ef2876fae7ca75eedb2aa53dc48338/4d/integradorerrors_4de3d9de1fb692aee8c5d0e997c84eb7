e0acc16dc1c4d4e09cb85410c330bde7
"use strict";
/**
 * Domínio de Erros: INTEGRADOR
 *
 * Define códigos de erro específicos para operações relacionadas
 * ao módulo de integrações com sistemas externos do SEMTAS.
 *
 * @see docs/ADRs/catalogo-erros.md
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.INTEGRADOR_ERRORS = void 0;
exports.throwIntegradorNotFound = throwIntegradorNotFound;
exports.throwConnectionFailed = throwConnectionFailed;
exports.throwIntegradorTimeout = throwIntegradorTimeout;
exports.throwInvalidCredentials = throwInvalidCredentials;
exports.throwInvalidResponse = throwInvalidResponse;
exports.throwRateLimitExceeded = throwRateLimitExceeded;
exports.throwMaxRetriesExceeded = throwMaxRetriesExceeded;
exports.throwCircuitBreakerOpen = throwCircuitBreakerOpen;
exports.throwCertificateInvalid = throwCertificateInvalid;
exports.throwDataTransformationFailed = throwDataTransformationFailed;
exports.throwVersionMismatch = throwVersionMismatch;
const common_1 = require("@nestjs/common");
const types_1 = require("../types");
const AppError_1 = require("../AppError");
/**
 * Catálogo de erros específicos do domínio INTEGRADOR
 */
exports.INTEGRADOR_ERRORS = {
    // ========================================
    // OPERAÇÕES CRUD
    // ========================================
    INTEGRADOR_NOT_FOUND: {
        code: 'INTEGRADOR_NOT_FOUND',
        message: 'Integrador não encontrado',
        httpStatus: common_1.HttpStatus.NOT_FOUND,
        category: types_1.ErrorCategory.VALIDATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Integrador não encontrado no sistema',
            'en-US': 'Integrator not found in the system',
        },
    },
    INTEGRADOR_CREATION_FAILED: {
        code: 'INTEGRADOR_CREATION_FAILED',
        message: 'Falha na criação do integrador',
        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro ao criar integrador',
            'en-US': 'Error creating integrator',
        },
    },
    INTEGRADOR_UPDATE_FAILED: {
        code: 'INTEGRADOR_UPDATE_FAILED',
        message: 'Falha na atualização do integrador',
        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Erro ao atualizar integrador',
            'en-US': 'Error updating integrator',
        },
    },
    INTEGRADOR_DELETE_FAILED: {
        code: 'INTEGRADOR_DELETE_FAILED',
        message: 'Falha na exclusão do integrador',
        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Erro ao excluir integrador',
            'en-US': 'Error deleting integrator',
        },
    },
    // ========================================
    // VALIDAÇÕES DE CONFIGURAÇÃO
    // ========================================
    INTEGRADOR_INVALID_CONFIG: {
        code: 'INTEGRADOR_INVALID_CONFIG',
        message: 'Configuração do integrador inválida',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.VALIDATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Configuração do integrador é inválida',
            'en-US': 'Integrator configuration is invalid',
        },
    },
    INTEGRADOR_MISSING_CREDENTIALS: {
        code: 'INTEGRADOR_MISSING_CREDENTIALS',
        message: 'Credenciais ausentes',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.VALIDATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Credenciais de acesso não fornecidas',
            'en-US': 'Access credentials not provided',
        },
    },
    INTEGRADOR_INVALID_CREDENTIALS: {
        code: 'INTEGRADOR_INVALID_CREDENTIALS',
        message: 'Credenciais inválidas',
        httpStatus: common_1.HttpStatus.UNAUTHORIZED,
        category: types_1.ErrorCategory.VALIDATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Credenciais de acesso são inválidas',
            'en-US': 'Access credentials are invalid',
        },
    },
    INTEGRADOR_INVALID_ENDPOINT: {
        code: 'INTEGRADOR_INVALID_ENDPOINT',
        message: 'Endpoint inválido',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.VALIDATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Endpoint especificado é inválido',
            'en-US': 'Specified endpoint is invalid',
        },
    },
    INTEGRADOR_INVALID_METHOD: {
        code: 'INTEGRADOR_INVALID_METHOD',
        message: 'Método HTTP inválido',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.VALIDATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Método HTTP especificado é inválido',
            'en-US': 'Specified HTTP method is invalid',
        },
    },
    INTEGRADOR_INVALID_HEADERS: {
        code: 'INTEGRADOR_INVALID_HEADERS',
        message: 'Headers inválidos',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.VALIDATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Headers da requisição são inválidos',
            'en-US': 'Request headers are invalid',
        },
    },
    // ========================================
    // CONEXÃO E COMUNICAÇÃO
    // ========================================
    INTEGRADOR_CONNECTION_FAILED: {
        code: 'INTEGRADOR_CONNECTION_FAILED',
        message: 'Falha na conexão',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Falha ao conectar com sistema externo',
            'en-US': 'Failed to connect to external system',
        },
    },
    INTEGRADOR_TIMEOUT: {
        code: 'INTEGRADOR_TIMEOUT',
        message: 'Timeout na requisição',
        httpStatus: common_1.HttpStatus.REQUEST_TIMEOUT,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Timeout na comunicação com sistema externo',
            'en-US': 'Timeout in communication with external system',
        },
    },
    INTEGRADOR_NETWORK_ERROR: {
        code: 'INTEGRADOR_NETWORK_ERROR',
        message: 'Erro de rede',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro de rede na comunicação',
            'en-US': 'Network error in communication',
        },
    },
    INTEGRADOR_DNS_RESOLUTION_FAILED: {
        code: 'INTEGRADOR_DNS_RESOLUTION_FAILED',
        message: 'Falha na resolução DNS',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Falha na resolução DNS do sistema externo',
            'en-US': 'DNS resolution failure for external system',
        },
    },
    INTEGRADOR_SSL_ERROR: {
        code: 'INTEGRADOR_SSL_ERROR',
        message: 'Erro SSL/TLS',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro SSL/TLS na comunicação',
            'en-US': 'SSL/TLS error in communication',
        },
    },
    // ========================================
    // RESPOSTAS E STATUS CODES
    // ========================================
    INTEGRADOR_BAD_REQUEST: {
        code: 'INTEGRADOR_BAD_REQUEST',
        message: 'Requisição inválida',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Requisição enviada é inválida',
            'en-US': 'Sent request is invalid',
        },
    },
    INTEGRADOR_UNAUTHORIZED: {
        code: 'INTEGRADOR_UNAUTHORIZED',
        message: 'Não autorizado',
        httpStatus: common_1.HttpStatus.UNAUTHORIZED,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Acesso não autorizado ao sistema externo',
            'en-US': 'Unauthorized access to external system',
        },
    },
    INTEGRADOR_FORBIDDEN: {
        code: 'INTEGRADOR_FORBIDDEN',
        message: 'Acesso proibido',
        httpStatus: common_1.HttpStatus.FORBIDDEN,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Acesso proibido ao recurso do sistema externo',
            'en-US': 'Forbidden access to external system resource',
        },
    },
    INTEGRADOR_NOT_FOUND_EXTERNAL: {
        code: 'INTEGRADOR_NOT_FOUND_EXTERNAL',
        message: 'Recurso não encontrado no sistema externo',
        httpStatus: common_1.HttpStatus.NOT_FOUND,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Recurso não encontrado no sistema externo',
            'en-US': 'Resource not found in external system',
        },
    },
    INTEGRADOR_RATE_LIMIT_EXCEEDED: {
        code: 'INTEGRADOR_RATE_LIMIT_EXCEEDED',
        message: 'Limite de requisições excedido',
        httpStatus: common_1.HttpStatus.TOO_MANY_REQUESTS,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Limite de requisições do sistema externo excedido',
            'en-US': 'External system rate limit exceeded',
        },
    },
    INTEGRADOR_INTERNAL_SERVER_ERROR: {
        code: 'INTEGRADOR_INTERNAL_SERVER_ERROR',
        message: 'Erro interno do sistema externo',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro interno no sistema externo',
            'en-US': 'Internal error in external system',
        },
    },
    INTEGRADOR_SERVICE_UNAVAILABLE: {
        code: 'INTEGRADOR_SERVICE_UNAVAILABLE',
        message: 'Serviço indisponível',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Sistema externo temporariamente indisponível',
            'en-US': 'External system temporarily unavailable',
        },
    },
    // ========================================
    // PROCESSAMENTO DE DADOS
    // ========================================
    INTEGRADOR_INVALID_RESPONSE: {
        code: 'INTEGRADOR_INVALID_RESPONSE',
        message: 'Resposta inválida',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Resposta do sistema externo é inválida',
            'en-US': 'External system response is invalid',
        },
    },
    INTEGRADOR_RESPONSE_PARSING_FAILED: {
        code: 'INTEGRADOR_RESPONSE_PARSING_FAILED',
        message: 'Falha no parsing da resposta',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro ao processar resposta do sistema externo',
            'en-US': 'Error processing external system response',
        },
    },
    INTEGRADOR_DATA_TRANSFORMATION_FAILED: {
        code: 'INTEGRADOR_DATA_TRANSFORMATION_FAILED',
        message: 'Falha na transformação de dados',
        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro na transformação dos dados recebidos',
            'en-US': 'Error transforming received data',
        },
    },
    INTEGRADOR_DATA_VALIDATION_FAILED: {
        code: 'INTEGRADOR_DATA_VALIDATION_FAILED',
        message: 'Falha na validação de dados',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Dados recebidos não passaram na validação',
            'en-US': 'Received data failed validation',
        },
    },
    INTEGRADOR_MAPPING_ERROR: {
        code: 'INTEGRADOR_MAPPING_ERROR',
        message: 'Erro no mapeamento de dados',
        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Erro no mapeamento dos dados',
            'en-US': 'Error in data mapping',
        },
    },
    // ========================================
    // RETRY E CIRCUIT BREAKER
    // ========================================
    INTEGRADOR_MAX_RETRIES_EXCEEDED: {
        code: 'INTEGRADOR_MAX_RETRIES_EXCEEDED',
        message: 'Máximo de tentativas excedido',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Máximo de tentativas de conexão excedido',
            'en-US': 'Maximum connection attempts exceeded',
        },
    },
    INTEGRADOR_CIRCUIT_BREAKER_OPEN: {
        code: 'INTEGRADOR_CIRCUIT_BREAKER_OPEN',
        message: 'Circuit breaker aberto',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Circuit breaker ativo - sistema externo indisponível',
            'en-US': 'Circuit breaker active - external system unavailable',
        },
    },
    INTEGRADOR_RETRY_FAILED: {
        code: 'INTEGRADOR_RETRY_FAILED',
        message: 'Falha nas tentativas de retry',
        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Todas as tentativas de retry falharam',
            'en-US': 'All retry attempts failed',
        },
    },
    // ========================================
    // SISTEMAS ESPECÍFICOS
    // ========================================
    INTEGRADOR_CADUNICO_ERROR: {
        code: 'INTEGRADOR_CADUNICO_ERROR',
        message: 'Erro na integração com CadÚnico',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro na comunicação com CadÚnico',
            'en-US': 'Error communicating with CadÚnico',
        },
    },
    INTEGRADOR_SIAFI_ERROR: {
        code: 'INTEGRADOR_SIAFI_ERROR',
        message: 'Erro na integração com SIAFI',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro na comunicação com SIAFI',
            'en-US': 'Error communicating with SIAFI',
        },
    },
    INTEGRADOR_RECEITA_FEDERAL_ERROR: {
        code: 'INTEGRADOR_RECEITA_FEDERAL_ERROR',
        message: 'Erro na integração com Receita Federal',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro na comunicação com Receita Federal',
            'en-US': 'Error communicating with Federal Revenue',
        },
    },
    INTEGRADOR_BANCO_CENTRAL_ERROR: {
        code: 'INTEGRADOR_BANCO_CENTRAL_ERROR',
        message: 'Erro na integração com Banco Central',
        httpStatus: common_1.HttpStatus.BAD_GATEWAY,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Erro na comunicação com Banco Central',
            'en-US': 'Error communicating with Central Bank',
        },
    },
    // ========================================
    // SEGURANÇA E CERTIFICADOS
    // ========================================
    INTEGRADOR_CERTIFICATE_INVALID: {
        code: 'INTEGRADOR_CERTIFICATE_INVALID',
        message: 'Certificado inválido',
        httpStatus: common_1.HttpStatus.UNAUTHORIZED,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Certificado digital é inválido',
            'en-US': 'Digital certificate is invalid',
        },
    },
    INTEGRADOR_CERTIFICATE_EXPIRED: {
        code: 'INTEGRADOR_CERTIFICATE_EXPIRED',
        message: 'Certificado expirado',
        httpStatus: common_1.HttpStatus.UNAUTHORIZED,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Certificado digital expirado',
            'en-US': 'Digital certificate expired',
        },
    },
    INTEGRADOR_API_KEY_INVALID: {
        code: 'INTEGRADOR_API_KEY_INVALID',
        message: 'Chave de API inválida',
        httpStatus: common_1.HttpStatus.UNAUTHORIZED,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Chave de API é inválida',
            'en-US': 'API key is invalid',
        },
    },
    INTEGRADOR_API_KEY_EXPIRED: {
        code: 'INTEGRADOR_API_KEY_EXPIRED',
        message: 'Chave de API expirada',
        httpStatus: common_1.HttpStatus.UNAUTHORIZED,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.HIGH,
        localizedMessages: {
            'pt-BR': 'Chave de API expirada',
            'en-US': 'API key expired',
        },
    },
    // ========================================
    // VERSIONAMENTO E COMPATIBILIDADE
    // ========================================
    INTEGRADOR_VERSION_MISMATCH: {
        code: 'INTEGRADOR_VERSION_MISMATCH',
        message: 'Incompatibilidade de versão',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Versão da API não é compatível',
            'en-US': 'API version is not compatible',
        },
    },
    INTEGRADOR_DEPRECATED_VERSION: {
        code: 'INTEGRADOR_DEPRECATED_VERSION',
        message: 'Versão depreciada',
        httpStatus: common_1.HttpStatus.BAD_REQUEST,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Versão da API está depreciada',
            'en-US': 'API version is deprecated',
        },
    },
    INTEGRADOR_UNSUPPORTED_OPERATION: {
        code: 'INTEGRADOR_UNSUPPORTED_OPERATION',
        message: 'Operação não suportada',
        httpStatus: common_1.HttpStatus.NOT_IMPLEMENTED,
        category: types_1.ErrorCategory.INTEGRATIONS,
        severity: types_1.ErrorSeverity.MEDIUM,
        localizedMessages: {
            'pt-BR': 'Operação não é suportada pelo sistema externo',
            'en-US': 'Operation not supported by external system',
        },
    },
};
// ========================================
// FUNÇÕES HELPER PARA INTEGRADOR
// ========================================
/**
 * Lança erro de integrador não encontrado
 */
function throwIntegradorNotFound(integradorId, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_NOT_FOUND', {
        ...context,
        data: {
            integradorId,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de falha na conexão
 */
function throwConnectionFailed(sistemaExterno, endpoint, erro, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_CONNECTION_FAILED', {
        ...context,
        data: {
            sistemaExterno,
            endpoint,
            erro,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de timeout
 */
function throwIntegradorTimeout(sistemaExterno, timeout, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_TIMEOUT', {
        ...context,
        data: {
            sistemaExterno,
            timeout,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de credenciais inválidas
 */
function throwInvalidCredentials(sistemaExterno, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_INVALID_CREDENTIALS', {
        ...context,
        data: {
            sistemaExterno,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de resposta inválida
 */
function throwInvalidResponse(sistemaExterno, statusCode, responseBody, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_INVALID_RESPONSE', {
        ...context,
        data: {
            sistemaExterno,
            statusCode,
            responseBody,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de limite de requisições excedido
 */
function throwRateLimitExceeded(sistemaExterno, limite, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_RATE_LIMIT_EXCEEDED', {
        ...context,
        data: {
            sistemaExterno,
            limite,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de máximo de tentativas excedido
 */
function throwMaxRetriesExceeded(sistemaExterno, tentativas, maxTentativas, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_MAX_RETRIES_EXCEEDED', {
        ...context,
        data: {
            sistemaExterno,
            tentativas,
            maxTentativas,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de circuit breaker aberto
 */
function throwCircuitBreakerOpen(sistemaExterno, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_CIRCUIT_BREAKER_OPEN', {
        ...context,
        data: {
            sistemaExterno,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de certificado inválido
 */
function throwCertificateInvalid(certificado, motivo, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_CERTIFICATE_INVALID', {
        ...context,
        data: {
            certificado,
            motivo,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de falha na transformação de dados
 */
function throwDataTransformationFailed(sistemaExterno, dadosOriginais, erro, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_DATA_TRANSFORMATION_FAILED', {
        ...context,
        data: {
            sistemaExterno,
            dadosOriginais,
            erro,
            ...context.data,
        },
    }, language);
}
/**
 * Lança erro de incompatibilidade de versão
 */
function throwVersionMismatch(sistemaExterno, versaoEsperada, versaoRecebida, context = {}, language = 'pt-BR') {
    throw new AppError_1.AppError('INTEGRADOR_VERSION_MISMATCH', {
        ...context,
        data: {
            sistemaExterno,
            versaoEsperada,
            versaoRecebida,
            ...context.data,
        },
    }, language);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,