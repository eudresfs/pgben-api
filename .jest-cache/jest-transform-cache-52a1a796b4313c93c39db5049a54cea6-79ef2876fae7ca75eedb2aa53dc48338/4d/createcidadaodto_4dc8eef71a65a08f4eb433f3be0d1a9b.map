{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\dto\\create-cidadao.dto.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\dto\\create-cidadao.dto.ts"],"sourcesContent":["import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsString,\n  IsOptional,\n  IsEnum,\n  IsNotEmpty,\n  IsDate,\n  IsNumber,\n  ValidateNested,\n  Validate,\n  Matches,\n  ValidateIf,\n  IsArray,\n  IsUUID,\n  IsObject,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { Sexo } from '../../../enums/sexo.enum';\nimport { TipoPapel, PaperType } from '../../../enums/tipo-papel.enum';\nimport { CPFValidator } from '../validators/cpf-validator';\nimport { NISValidator } from '../validators/nis-validator';\nimport { TelefoneValidator } from '../validators/telefone-validator';\nimport { CEPValidator } from '../validators/cep-validator';\nimport { CreateComposicaoFamiliarDto } from './create-composicao-familiar.dto';\nimport { EstadoCivil } from '../../../enums/estado-civil.enum';\n\n/**\n * DTO para endereço do cidadão\n *\n * Contém todos os campos necessários para registrar o endereço completo de um cidadão\n */\nexport class EnderecoDto {\n  @IsString({ message: 'Logradouro deve ser uma string' })\n  @IsNotEmpty({ message: 'Logradouro é obrigatório' })\n  @ApiProperty({\n    example: 'Rua das Flores',\n    description: 'Logradouro do endereço',\n  })\n  logradouro: string;\n\n  @IsString({ message: 'Número deve ser uma string' })\n  @IsNotEmpty({ message: 'Número é obrigatório' })\n  @ApiProperty({\n    example: '123',\n    description: 'Número do endereço',\n  })\n  numero: string;\n\n  @IsString({ message: 'Complemento deve ser uma string' })\n  @IsOptional()\n  @ApiPropertyOptional({\n    example: 'Apto 101',\n    description: 'Complemento do endereço',\n    required: false,\n  })\n  complemento?: string;\n\n  @IsString({ message: 'Bairro deve ser uma string' })\n  @IsNotEmpty({ message: 'Bairro é obrigatório' })\n  @ApiProperty({\n    example: 'Centro',\n    description: 'Bairro do endereço',\n  })\n  bairro: string;\n\n  @IsString({ message: 'Cidade deve ser uma string' })\n  @IsNotEmpty({ message: 'Cidade é obrigatória' })\n  @ApiProperty({\n    example: 'Natal',\n    description: 'Cidade do endereço',\n  })\n  cidade: string;\n\n  @IsString({ message: 'Estado deve ser uma string' })\n  @IsNotEmpty({ message: 'Estado é obrigatório' })\n  @ApiProperty({\n    example: 'RN',\n    description: 'Estado do endereço (sigla)',\n  })\n  estado: string;\n\n  @IsString({ message: 'CEP deve ser uma string' })\n  @IsNotEmpty({ message: 'CEP é obrigatório' })\n  @Validate(CEPValidator, { message: 'CEP inválido' })\n  @ApiProperty({\n    example: '59000-000',\n    description: 'CEP do endereço',\n  })\n  cep: string;\n\n  @IsString({ message: 'Ponto de referência deve ser uma string' })\n  @IsOptional()\n  @ApiPropertyOptional({\n    example: 'Próximo ao Corpo de Bombeiros',\n    description: 'Ponto de referência do endereço',\n    required: false,\n  })\n  ponto_referencia?: string;\n\n\n  @IsNumber({}, { message: 'Tempo de residência deve ser um número' })\n  @IsNotEmpty({ message: 'Tempo de residência é obrigatório' })\n  @ApiProperty({\n    example: 2,\n    description: 'O tempo de residência do cidadão em anos',\n  })\n  tempo_de_residencia: number;\n}\n\n/**\n * DTO para criação de cidadão\n *\n * Contém todos os campos necessários para cadastrar um novo cidadão no sistema,\n * incluindo informações pessoais, documentos, endereço e dados socioeconômicos.\n */\n/**\n * DTO para papel do cidadão na criação\n */\nexport class PapelCidadaoCreateDto {\n  @IsEnum(TipoPapel, { message: 'Tipo de papel inválido' })\n  @IsNotEmpty({ message: 'Tipo de papel é obrigatório' })\n  @ApiProperty({\n    enum: TipoPapel,\n    example: TipoPapel.BENEFICIARIO,\n    description: 'Tipo de papel do cidadão',\n  })\n  tipo_papel: PaperType;\n\n  @IsOptional()\n  @IsObject({ message: 'Metadados deve ser um objeto' })\n  @ApiPropertyOptional({\n    type: 'object',\n    additionalProperties: true,\n    example: {\n      grau_parentesco: 'Mãe',\n      documento_representacao: '12345',\n      data_validade_representacao: '2026-01-01',\n    },\n    description: 'Metadados específicos do papel (varia conforme o tipo)',\n  })\n  metadados?: {\n    grau_parentesco?: string;\n    documento_representacao?: string;\n    data_validade_representacao?: Date;\n    [key: string]: any;\n  };\n}\n\nexport class CreateCidadaoDto {\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => PapelCidadaoCreateDto)\n  @IsOptional()\n  @ApiPropertyOptional({\n    type: [PapelCidadaoCreateDto],\n    description: 'Papéis que o cidadão irá assumir no sistema',\n  })\n  papeis?: PapelCidadaoCreateDto[];\n\n  @IsArray()\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateComposicaoFamiliarDto)\n  @ApiPropertyOptional({\n    type: [CreateComposicaoFamiliarDto],\n    description: 'Composição familiar do cidadão',\n  })\n  composicao_familiar?: CreateComposicaoFamiliarDto[];\n\n  @IsString({ message: 'Nome deve ser uma string' })\n  @IsNotEmpty({ message: 'Nome é obrigatório' })\n  @ApiProperty({\n    example: 'Maria da Silva',\n    description: 'Nome completo do cidadão',\n  })\n  nome: string;\n\n  @IsString({ message: 'CPF deve ser uma string' })\n  @IsNotEmpty({ message: 'CPF é obrigatório' })\n  @Validate(CPFValidator, { message: 'CPF inválido' })\n  @ApiProperty({\n    example: '123.456.789-00',\n    description: 'CPF do cidadão',\n  })\n  cpf: string;\n\n  @IsString({ message: 'RG deve ser uma string' })\n  @IsNotEmpty({ message: 'RG é obrigatório' })\n  @ApiProperty({\n    example: '1234567',\n    description: 'RG do cidadão',\n  })\n  rg: string;\n\n  @IsNotEmpty({ message: 'Prontuario SUAS é obrigatório' })\n    @ApiProperty({\n    example: 'SUAS1234567',\n    description: 'Nº do Prontuário SUAS do cidadão',\n  })\n  prontuario_suas: string;\n\n  @IsString({ message: 'Naturalidade deve ser uma string' })\n  @IsNotEmpty({ message: 'Naturalidade é obrigatória' })\n  @ApiProperty({\n    example: 'Natal',\n    description: 'Cidade de Naturalidade',\n  })\n  naturalidade: string;\n\n  @IsDate()\n  @Type(() => Date)\n  @IsNotEmpty({ message: 'Data de nascimento é obrigatória' })\n  @ApiProperty({\n    example: '1985-10-15',\n    description: 'Data de nascimento do cidadão',\n  })\n  data_nascimento: Date;\n\n  @IsEnum(Sexo, { message: 'Sexo inválido' })\n  @IsNotEmpty({ message: 'Sexo é obrigatório' })\n  @ApiProperty({\n    enum: Sexo,\n    example: Sexo.FEMININO,\n    description: 'Sexo do cidadão',\n  })\n  sexo: Sexo;\n\n  @IsString({ message: 'NIS deve ser uma string' })\n  @ValidateIf((o) =>\n    o.papeis?.some((p) => p.tipo_papel === TipoPapel.BENEFICIARIO),\n  )\n  @IsNotEmpty({ message: 'NIS é obrigatório para beneficiários' })\n  @Validate(NISValidator, { message: 'NIS inválido' })\n  @ApiPropertyOptional({\n    example: '12345678901',\n    description:\n      'Número de Identificação Social (NIS) do cidadão, utilizado para programas sociais. Obrigatório para beneficiários.',\n    required: false,\n  })\n  nis?: string;\n\n  @IsString({ message: 'Nome social deve ser uma string' })\n  @IsOptional()\n  @ApiPropertyOptional({\n    example: 'Maria Santos',\n    description:\n      'Nome social do cidadão (usado para pessoas trans)',\n    required: false,\n  })\n  nome_social?: string;\n\n  @IsEnum(EstadoCivil, { message: 'Estado civil inválido' })\n  @IsNotEmpty({ message: 'Estado civil é obrigatório' })\n  @ApiProperty({\n    enum: EstadoCivil,\n    example: EstadoCivil.CASADO,\n    description: 'Estado civil do cidadão',\n  })\n  estado_civil: EstadoCivil\n\n\n  @IsString({ message: 'Nome da mãe deve ser uma string' })\n  @IsNotEmpty({ message: 'Nome da mãe é obrigatório' })\n  @ApiProperty({\n    example: 'Maria da Silva',\n    description: 'Nome completo da mãe do cidadão',\n  })\n  nome_mae: string;\n\n  @IsString({ message: 'Telefone deve ser uma string' })\n  @IsOptional()\n  @Validate(TelefoneValidator, { message: 'Telefone inválido' })\n  @ApiPropertyOptional({\n    example: '(84) 98765-4321',\n    description: 'Telefone do cidadão para contato',\n    required: false,\n  })\n  telefone?: string;\n\n  @IsEmail({}, { message: 'Email inválido' })\n  @IsOptional()\n  @ApiPropertyOptional({\n    example: 'email@exemplo.com',\n    description: 'Endereço de email do cidadão para contato',\n    required: false,\n  })\n  email?: string;\n\n  @ValidateNested()\n  @Type(() => EnderecoDto)\n  @ApiProperty({\n    type: EnderecoDto,\n    description: 'Endereço do cidadão',\n  })\n  endereco?: EnderecoDto;\n\n  @IsUUID('4', { message: 'ID da unidade deve ser um UUID válido' })\n  @IsNotEmpty({ message: 'ID da unidade é obrigatório' })\n  @ApiProperty({\n    example: '550e8400-e29b-41d4-a716-446655440000',\n    description: 'ID da unidade onde o cidadão será cadastrado',\n  })\n  unidade_id: string;\n}\n"],"version":3}