3d998363cdf76f2db1d6451e814ca20f
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// Mock dos módulos fs e path
jest.mock('fs');
jest.mock('path');
const testing_1 = require("@nestjs/testing");
const local_storage_adapter_1 = require("../local-storage.adapter");
const config_1 = require("@nestjs/config");
const common_1 = require("@nestjs/common");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
describe('LocalStorageAdapter', () => {
    let adapter;
    let mockLogger;
    let mockConfigService;
    beforeEach(async () => {
        // Limpar todos os mocks
        jest.clearAllMocks();
        mockLogger = {
            log: jest.fn(),
            error: jest.fn(),
            warn: jest.fn(),
            debug: jest.fn(),
        };
        mockConfigService = {
            get: jest.fn().mockReturnValue('/tmp/uploads'),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                local_storage_adapter_1.LocalStorageAdapter,
                {
                    provide: config_1.ConfigService,
                    useValue: mockConfigService,
                },
                {
                    provide: common_1.Logger,
                    useValue: mockLogger,
                },
            ],
        }).compile();
        adapter = module.get(local_storage_adapter_1.LocalStorageAdapter);
    });
    it('deve ser definido', () => {
        expect(adapter).toBeDefined();
    });
    describe('salvarArquivo', () => {
        it('deve salvar um arquivo corretamente', async () => {
            // Arrange
            const buffer = Buffer.from('conteúdo de teste');
            const nomeArquivo = 'arquivo-teste.pdf';
            const mimetype = 'application/pdf';
            // Mock para data atual
            jest
                .spyOn(Date.prototype, 'toISOString')
                .mockReturnValue('2023-01-01T00:00:00.000Z');
            // Configurar mocks básicos
            path.join.mockReturnValue('/tmp/uploads/documentos/2023/01/arquivo-teste.pdf');
            path.dirname.mockReturnValue('/tmp/uploads/documentos/2023/01');
            // Act
            const resultado = await adapter.salvarArquivo(buffer, nomeArquivo, mimetype);
            // Assert
            expect(fs.mkdirSync).toHaveBeenCalled();
            expect(fs.writeFileSync).toHaveBeenCalled();
            expect(resultado).toMatch(/documentos\/2023\/01\/.+\.pdf/);
        });
        it('deve lançar erro quando falhar ao salvar o arquivo', async () => {
            // Arrange
            const buffer = Buffer.from('conteúdo de teste');
            const nomeArquivo = 'arquivo-erro.pdf';
            const mimetype = 'application/pdf';
            // Mock para simular erro ao escrever arquivo
            fs.writeFileSync.mockImplementation(() => {
                throw new Error('Erro de escrita');
            });
            // Act & Assert
            await expect(adapter.salvarArquivo(buffer, nomeArquivo, mimetype)).rejects.toThrow('Erro ao salvar arquivo');
        });
    });
    describe('obterArquivo', () => {
        it('deve obter um arquivo corretamente', async () => {
            // Arrange
            const caminho = 'documentos/2023/01/arquivo-teste.pdf';
            const buffer = Buffer.from('conteúdo do arquivo');
            // Configurar mocks básicos
            fs.existsSync.mockReturnValue(true);
            fs.readFileSync.mockReturnValue(buffer);
            path.join.mockReturnValue('/tmp/uploads/documentos/2023/01/arquivo-teste.pdf');
            // Act
            const resultado = await adapter.obterArquivo(caminho);
            // Assert
            expect(fs.readFileSync).toHaveBeenCalled();
            expect(resultado).toEqual(buffer);
        });
        it('deve lançar erro quando o arquivo não existe', async () => {
            // Arrange
            const caminho = 'documentos/2023/01/arquivo-inexistente.pdf';
            // Configurar mocks básicos
            fs.existsSync.mockReturnValue(false);
            // Act & Assert
            await expect(adapter.obterArquivo(caminho)).rejects.toThrow('Arquivo não encontrado');
        });
    });
    describe('removerArquivo', () => {
        it('deve excluir um arquivo corretamente', async () => {
            // Arrange
            const caminho = 'documentos/2023/01/arquivo-teste.pdf';
            // Configurar mocks básicos
            fs.existsSync.mockReturnValue(true);
            path.join.mockReturnValue('/tmp/uploads/documentos/2023/01/arquivo-teste.pdf');
            // Act
            await adapter.removerArquivo(caminho);
            // Assert
            expect(fs.unlinkSync).toHaveBeenCalled();
        });
        it('deve tratar silenciosamente quando o arquivo não existe', async () => {
            // Arrange
            const caminho = 'documentos/2023/01/arquivo-inexistente.pdf';
            // Configurar mocks básicos
            fs.existsSync.mockReturnValue(false);
            path.join.mockReturnValue('/tmp/uploads/documentos/2023/01/arquivo-inexistente.pdf');
            // Act
            await adapter.removerArquivo(caminho);
            // Assert
            // Verificar que o arquivo não foi removido
            expect(fs.unlinkSync).not.toHaveBeenCalled();
        });
    });
    describe('exists', () => {
        it('deve retornar true quando o arquivo existe', async () => {
            // Arrange
            const key = 'documentos/2023/01/arquivo-teste.pdf';
            // Configurar mocks
            fs.existsSync.mockReturnValue(true);
            path.join.mockReturnValue('/tmp/uploads/documentos/2023/01/arquivo-teste.pdf');
            // Act
            const resultado = await adapter.exists(key);
            // Assert
            expect(resultado).toBe(true);
        });
        it('deve retornar false quando o arquivo não existe', async () => {
            // Arrange
            const key = 'documentos/2023/01/arquivo-inexistente.pdf';
            // Configurar mocks
            fs.existsSync.mockReturnValue(false);
            // Act
            const resultado = await adapter.exists(key);
            // Assert
            expect(resultado).toBe(false);
        });
    });
    describe('getUrl', () => {
        it('deve retornar a URL do arquivo', async () => {
            // Arrange
            const key = 'documentos/2023/01/arquivo-teste.pdf';
            // Configurar mocks
            fs.existsSync.mockReturnValue(true);
            // Act
            const resultado = await adapter.getUrl(key);
            // Assert
            expect(resultado).toContain('/documentos/2023/01/arquivo-teste.pdf');
        });
        it('deve lançar erro quando o arquivo não existe', async () => {
            // Arrange
            const caminho = 'documentos/2023/01/arquivo-inexistente.pdf';
            // Configurar mocks
            fs.existsSync.mockReturnValue(false);
            // Act & Assert
            await expect(adapter.getUrl(caminho)).rejects.toThrow('Arquivo não encontrado');
        });
    });
    describe('copy', () => {
        it('deve copiar um arquivo corretamente', async () => {
            // Arrange
            const sourceKey = 'documentos/2023/01/arquivo-origem.pdf';
            const destinationKey = 'documentos/2023/01/arquivo-destino.pdf';
            // Configurar mocks básicos
            fs.existsSync.mockReturnValue(true);
            path.join.mockImplementation((base, ...args) => {
                return `/tmp/uploads/${args.join('/')}`;
            });
            path.dirname.mockReturnValue('/tmp/uploads/documentos/2023/01');
            // Act
            const resultado = await adapter.copy(sourceKey, destinationKey);
            // Assert
            expect(fs.copyFileSync).toHaveBeenCalled();
            expect(resultado).toEqual(destinationKey);
        });
        it('deve lançar erro quando falhar ao copiar o arquivo', async () => {
            // Arrange
            const sourceKey = 'documentos/2023/01/arquivo-origem.pdf';
            const destinationKey = 'documentos/2023/01/arquivo-destino.pdf';
            // Configurar mocks
            fs.existsSync.mockReturnValue(true);
            fs.copyFileSync.mockImplementation(() => {
                throw new Error('Erro de cópia');
            });
            // Act & Assert
            await expect(adapter.copy(sourceKey, destinationKey)).rejects.toThrow('Erro ao copiar arquivo');
        });
    });
    describe('list', () => {
        it('deve listar arquivos com um prefixo específico', async () => {
            // Arrange
            const prefix = 'documentos/2023/01';
            // Configurar mocks
            fs.existsSync.mockReturnValue(true);
            fs.readdirSync.mockReturnValue([
                'arquivo1.txt',
                'arquivo2.txt',
            ]);
            fs.statSync.mockImplementation(() => ({
                isDirectory: () => false,
            }));
            // Mock para path.relative e path.dirname
            path.relative.mockImplementation((base, file) => {
                if (file.includes('arquivo1.txt')) {
                    return 'documentos/2023/01/arquivo1.txt';
                }
                if (file.includes('arquivo2.txt')) {
                    return 'documentos/2023/01/arquivo2.txt';
                }
                return '';
            });
            path.dirname.mockReturnValue('/tmp/uploads/documentos/2023/01');
            // Act
            const resultado = await adapter.list(prefix);
            // Assert
            expect(resultado.length).toBe(2);
            expect(resultado).toContain('documentos/2023/01/arquivo1.txt');
            expect(resultado).toContain('documentos/2023/01/arquivo2.txt');
        });
        it('deve retornar uma lista vazia quando o diretório não existe', async () => {
            // Arrange
            const prefix = 'documentos/2023/02';
            // Configurar mocks
            fs.existsSync.mockReturnValue(false);
            // Act
            const resultado = await adapter.list(prefix);
            // Assert
            expect(resultado).toEqual([]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,