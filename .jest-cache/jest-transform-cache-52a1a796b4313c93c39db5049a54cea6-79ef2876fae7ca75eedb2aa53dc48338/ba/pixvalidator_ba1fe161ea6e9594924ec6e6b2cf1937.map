{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\validators\\pix-validator.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\validators\\pix-validator.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { validate as validateUUID } from 'uuid';\n\n/**\n * Serviço para validação de chaves PIX\n * \n * Implementa funções para validar os diferentes tipos de chaves PIX\n * (CPF, e-mail, telefone, chave aleatória) de acordo com as regras do Bacen.\n * \n * @author Equipe PGBen\n */\n@Injectable()\nexport class PixValidator {\n  validarChavePix(arg0: string, arg1: string): any {\n    throw new Error('Method not implemented.');\n  }\n  mascaraChavePix(arg0: string, arg1: string) {\n    throw new Error('Method not implemented.');\n  }\n  obterTipoChavePix // Mascara UUID: mostra apenas os primeiros 8 caracteres\n    (arg0: string): any {\n      throw new Error('Method not implemented.');\n  }\n  /**\n   * Valida uma chave PIX baseada no seu tipo\n   * \n   * @param key Chave PIX a ser validada\n   * @param keyType Tipo da chave PIX ('cpf', 'email', 'telefone', 'aleatorio')\n   * @returns true se a chave for válida para o tipo especificado, false caso contrário\n   */\n  validatePixKey(key: string, keyType: 'cpf' | 'email' | 'telefone' | 'aleatorio'): boolean {\n    if (!key) {\n      return false;\n    }\n\n    switch (keyType) {\n      case 'cpf':\n        return this.validateCpfKey(key);\n      case 'email':\n        return this.validateEmailKey(key);\n      case 'telefone':\n        return this.validatePhoneKey(key);\n      case 'aleatorio':\n        return this.validateRandomKey(key);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Valida uma chave PIX do tipo CPF\n   * \n   * @param key Chave PIX do tipo CPF (apenas números, 11 dígitos)\n   * @returns true se for um CPF válido, false caso contrário\n   */\n  private validateCpfKey(key: string): boolean {\n    // Remove caracteres não numéricos\n    const cpf = key.replace(/\\D/g, '');\n    \n    // Verifica se tem 11 dígitos\n    if (cpf.length !== 11) {\n      return false;\n    }\n    \n    // Verifica se todos os dígitos são iguais (caso inválido)\n    if (/^(\\d)\\1+$/.test(cpf)) {\n      return false;\n    }\n    \n    // Algoritmo de validação do CPF\n    let sum = 0;\n    let remainder;\n    \n    // Primeiro dígito verificador\n    for (let i = 1; i <= 9; i++) {\n      sum += parseInt(cpf.substring(i - 1, i)) * (11 - i);\n    }\n    \n    remainder = (sum * 10) % 11;\n    if (remainder === 10 || remainder === 11) {\n      remainder = 0;\n    }\n    \n    if (remainder !== parseInt(cpf.substring(9, 10))) {\n      return false;\n    }\n    \n    // Segundo dígito verificador\n    sum = 0;\n    for (let i = 1; i <= 10; i++) {\n      sum += parseInt(cpf.substring(i - 1, i)) * (12 - i);\n    }\n    \n    remainder = (sum * 10) % 11;\n    if (remainder === 10 || remainder === 11) {\n      remainder = 0;\n    }\n    \n    if (remainder !== parseInt(cpf.substring(10, 11))) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Valida uma chave PIX do tipo e-mail\n   * \n   * @param key Chave PIX do tipo e-mail\n   * @returns true se for um e-mail válido, false caso contrário\n   */\n  private validateEmailKey(key: string): boolean {\n    // Regex para validação básica de e-mail\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    \n    // Verifica o formato básico do e-mail\n    if (!emailRegex.test(key)) {\n      return false;\n    }\n    \n    // Verificações adicionais\n    if (key.length > 77) { // Limitação do Bacen\n      return false;\n    }\n    \n    // Não pode ter espaços\n    if (/\\s/.test(key)) {\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Valida uma chave PIX do tipo telefone brasileiro\n   * \n   * @param key Chave PIX do tipo telefone (formato +5599999999999)\n   * @returns true se for um telefone válido, false caso contrário\n   */\n  private validatePhoneKey(key: string): boolean {\n    // Regex para validação de telefone no formato +55 seguido de DDD e número\n    const phoneRegex = /^\\+55[1-9]{2}9?[0-9]{8}$/;\n    \n    // Remove caracteres não numéricos exceto o \"+\"\n    const phone = key.replace(/[^\\d+]/g, '');\n    \n    // Verifica o formato do telefone\n    return phoneRegex.test(phone);\n  }\n\n  /**\n   * Valida uma chave PIX do tipo aleatório (UUID)\n   * \n   * @param key Chave PIX do tipo aleatório (UUID)\n   * @returns true se for um UUID válido, false caso contrário\n   */\n  private validateRandomKey(key: string): boolean {\n    // Verifica se é um UUID válido\n    return validateUUID(key);\n  }\n\n  /**\n   * Mascara uma chave PIX para exibição segura\n   * \n   * @param key Chave PIX original\n   * @param keyType Tipo da chave PIX ('cpf', 'email', 'telefone', 'aleatorio')\n   * @returns Chave mascarada para exibição\n   */\n  maskPixKey(key: string, keyType: 'cpf' | 'email' | 'telefone' | 'aleatorio'): string {\n    if (!key) {\n      return '';\n    }\n\n    switch (keyType) {\n      case 'cpf':\n        // Mascara CPF: 123.456.789-00 -> ***.456.789-**\n        return key.replace(/^(\\d{3})\\.(\\d{3})\\.(\\d{3})-(\\d{2})$/, '***.$2.$3-**');\n      \n      case 'email':\n        // Mascara email: usuario@dominio.com -> u****@****.com\n        return key.replace(/^([a-zA-Z0-9])[a-zA-Z0-9._%+-]+@([a-zA-Z0-9])[a-zA-Z0-9.-]+(\\.[a-zA-Z]{2,})$/,\n          '$1****@$2****$3');\n      \n      case 'telefone':\n        // Mascara telefone: +5599999999999 -> +55*****99999\n        return key.replace(/^\\+55([0-9]{2})([0-9]{5})([0-9]{4})$/, '+55$1*****$3');\n      \n      case 'aleatorio':\n        // Mascara UUID: mostra apenas os primeiros 8 caracteres\n        return key.substring(0, 8) + '********-****-****-****-************';\n      \n      default:\n        return '********';\n    }\n  }\n}\n"],"version":3}