{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\shared\\dtos\\endereco.dto.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\shared\\dtos\\endereco.dto.spec.ts"],"sourcesContent":["import { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\nimport { EnderecoDto } from '../../../src/shared/dtos/endereco.dto';\nimport {\n  CREATE,\n  UPDATE,\n} from '../../../src/shared/validators/validation-groups';\n\ndescribe('EnderecoDto', () => {\n  it('deve ser válido com todos os campos obrigatórios', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const errors = await validate(dto);\n    expect(errors.length).toBe(0);\n  });\n\n  it('deve ser válido com todos os campos incluindo opcionais', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      complemento: 'Apto 101',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const errors = await validate(dto);\n    expect(errors.length).toBe(0);\n  });\n\n  it('deve ser inválido sem logradouro', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const errors = await validate(dto, { groups: [CREATE] });\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].property).toBe('logradouro');\n  });\n\n  it('deve ser inválido sem número', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const errors = await validate(dto, { groups: [CREATE] });\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].property).toBe('numero');\n  });\n\n  it('deve ser inválido sem bairro', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const errors = await validate(dto, { groups: [CREATE] });\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].property).toBe('bairro');\n  });\n\n  it('deve ser inválido sem cidade', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const errors = await validate(dto, { groups: [CREATE] });\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].property).toBe('cidade');\n  });\n\n  it('deve ser inválido sem estado', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      cep: '59000-000',\n    });\n\n    const errors = await validate(dto, { groups: [CREATE] });\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].property).toBe('estado');\n  });\n\n  it('deve ser inválido sem CEP', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n    });\n\n    const errors = await validate(dto, { groups: [CREATE] });\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].property).toBe('cep');\n  });\n\n  it('deve ser inválido com CEP em formato inválido', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '5900-000', // CEP com tamanho inválido\n    });\n\n    const errors = await validate(dto);\n    expect(errors.length).toBeGreaterThan(0);\n    expect(errors[0].property).toBe('cep');\n  });\n\n  it('deve permitir atualização parcial no grupo UPDATE', async () => {\n    const dto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Palmeiras',\n      numero: '456',\n    });\n\n    const errors = await validate(dto, { groups: [UPDATE] });\n    expect(errors.length).toBe(0);\n  });\n\n  it('deve verificar se o endereço está completo', () => {\n    const enderecoCompleto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const enderecoIncompleto = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n    });\n\n    expect(enderecoCompleto.isCompleto()).toBe(true);\n    expect(enderecoIncompleto.isCompleto()).toBe(false);\n  });\n\n  it('deve retornar a representação textual correta do endereço', () => {\n    const enderecoSemComplemento = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    const enderecoComComplemento = plainToInstance(EnderecoDto, {\n      logradouro: 'Rua das Flores',\n      numero: '123',\n      complemento: 'Apto 101',\n      bairro: 'Centro',\n      cidade: 'Natal',\n      estado: 'RN',\n      cep: '59000-000',\n    });\n\n    expect(enderecoSemComplemento.toString()).toBe(\n      'Rua das Flores, 123 - Centro, Natal - RN, 59000-000',\n    );\n    expect(enderecoComComplemento.toString()).toBe(\n      'Rua das Flores, 123 - Apto 101 - Centro, Natal - RN, 59000-000',\n    );\n  });\n});\n"],"version":3}