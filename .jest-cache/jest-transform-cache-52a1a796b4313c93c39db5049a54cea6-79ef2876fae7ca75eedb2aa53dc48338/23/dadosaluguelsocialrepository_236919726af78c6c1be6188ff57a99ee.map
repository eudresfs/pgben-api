{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-aluguel-social.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\repositories\\dados-aluguel-social.repository.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { DataSource, Repository } from 'typeorm';\nimport { DadosAluguelSocial } from '../../../entities/dados-aluguel-social.entity';\nimport { PublicoPrioritarioAluguel, EspecificacaoAluguel } from '@/enums';\n\n/**\n * Repositório customizado para DadosAluguelSocial\n * Extende o repositório base do TypeORM com métodos específicos\n */\n@Injectable()\nexport class DadosAluguelSocialRepository extends Repository<DadosAluguelSocial> {\n  constructor(private dataSource: DataSource) {\n    super(DadosAluguelSocial, dataSource.createEntityManager());\n  }\n\n  /**\n   * Buscar dados de aluguel social por solicitação com relacionamentos\n   */\n  async findBySolicitacaoWithRelations(\n    solicitacaoId: string,\n  ): Promise<DadosAluguelSocial | null> {\n    return this.findOne({\n      where: { solicitacao_id: solicitacaoId },\n      relations: [\n        'solicitacao',\n        'solicitacao.cidadao',\n        'solicitacao.tipo_beneficio',\n      ],\n    });\n  }\n\n  /**\n   * Buscar dados por público prioritário\n   */\n  async findByPublicoPrioritario(\n    publicoPrioritario: PublicoPrioritarioAluguel,\n  ): Promise<DadosAluguelSocial[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.publico_prioritario = :publicoPrioritario', {\n        publicoPrioritario,\n      })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por especificação do aluguel\n   */\n  async findByEspecificacao(\n    especificacao: EspecificacaoAluguel,\n  ): Promise<DadosAluguelSocial[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.especificacao_aluguel = :especificacao', { especificacao })\n      .orderBy('dados.created_at', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por faixa de valor do aluguel\n   */\n  async findByFaixaValor(\n    valorMinimo: number,\n    valorMaximo: number,\n  ): Promise<DadosAluguelSocial[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.valor_aluguel BETWEEN :valorMinimo AND :valorMaximo', {\n        valorMinimo,\n        valorMaximo,\n      })\n      .orderBy('dados.valor_aluguel', 'ASC')\n      .getMany();\n  }\n\n  /**\n   * Buscar dados por período de início do aluguel\n   */\n  async findByPeriodoInicio(\n    dataInicio: Date,\n    dataFim: Date,\n  ): Promise<DadosAluguelSocial[]> {\n    return this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao')\n      .where('dados.data_inicio_aluguel BETWEEN :dataInicio AND :dataFim', {\n        dataInicio,\n        dataFim,\n      })\n      .orderBy('dados.data_inicio_aluguel', 'DESC')\n      .getMany();\n  }\n\n  /**\n   * Buscar estatísticas de aluguel social\n   */\n  async getEstatisticas(): Promise<{\n    totalSolicitacoes: number;\n    valorMedioAluguel: number;\n    valorTotalAlugueis: number;\n    porPublicoPrioritario: Record<string, number>;\n    porEspecificacao: Record<string, number>;\n    porFaixaValor: Record<string, number>;\n  }> {\n    const totalSolicitacoes = await this.count();\n\n    // Valor médio e total dos aluguéis\n    const valoresResult = await this.createQueryBuilder('dados')\n      .select('AVG(dados.valor_aluguel)', 'valorMedio')\n      .addSelect('SUM(dados.valor_aluguel)', 'valorTotal')\n      .where('dados.valor_aluguel IS NOT NULL')\n      .getRawOne();\n\n    const valorMedioAluguel = parseFloat(valoresResult.valorMedio) || 0;\n    const valorTotalAlugueis = parseFloat(valoresResult.valorTotal) || 0;\n\n    // Estatísticas por público prioritário\n    const porPublicoResult = await this.createQueryBuilder('dados')\n      .select('dados.publico_prioritario', 'publico')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.publico_prioritario')\n      .getRawMany();\n\n    const porPublicoPrioritario = porPublicoResult.reduce((acc, item) => {\n      acc[item.publico] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por especificação\n    const porEspecificacaoResult = await this.createQueryBuilder('dados')\n      .select('dados.especificacao_aluguel', 'especificacao')\n      .addSelect('COUNT(*)', 'quantidade')\n      .groupBy('dados.especificacao_aluguel')\n      .getRawMany();\n\n    const porEspecificacao = porEspecificacaoResult.reduce((acc, item) => {\n      acc[item.especificacao] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    // Estatísticas por faixa de valor\n    const porFaixaValorResult = await this.createQueryBuilder('dados')\n      .select(\n        `CASE \n          WHEN dados.valor_aluguel <= 500 THEN 'Até R$ 500'\n          WHEN dados.valor_aluguel <= 1000 THEN 'R$ 501 - R$ 1.000'\n          WHEN dados.valor_aluguel <= 1500 THEN 'R$ 1.001 - R$ 1.500'\n          WHEN dados.valor_aluguel <= 2000 THEN 'R$ 1.501 - R$ 2.000'\n          ELSE 'Acima de R$ 2.000'\n        END`,\n        'faixa',\n      )\n      .addSelect('COUNT(*)', 'quantidade')\n      .where('dados.valor_aluguel IS NOT NULL')\n      .groupBy('faixa')\n      .getRawMany();\n\n    const porFaixaValor = porFaixaValorResult.reduce((acc, item) => {\n      acc[item.faixa] = parseInt(item.quantidade);\n      return acc;\n    }, {});\n\n    return {\n      totalSolicitacoes,\n      valorMedioAluguel,\n      valorTotalAlugueis,\n      porPublicoPrioritario,\n      porEspecificacao,\n      porFaixaValor,\n    };\n  }\n\n  /**\n   * Verificar duplicatas por endereço\n   */\n  async findDuplicatesByEndereco(\n    endereco: string,\n    excludeId?: string,\n  ): Promise<DadosAluguelSocial[]> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .where('LOWER(dados.endereco_imovel) = LOWER(:endereco)', { endereco });\n\n    if (excludeId) {\n      query.andWhere('dados.id != :excludeId', { excludeId });\n    }\n\n    return query.getMany();\n  }\n\n  /**\n   * Buscar dados de aluguel social com filtros avançados\n   */\n  async findWithFilters(filters: {\n    publicoPrioritario?: PublicoPrioritarioAluguel;\n    especificacao?: EspecificacaoAluguel;\n    valorMinimo?: number;\n    valorMaximo?: number;\n    dataInicioMin?: Date;\n    dataInicioMax?: Date;\n    endereco?: string;\n    page?: number;\n    limit?: number;\n  }): Promise<{ data: DadosAluguelSocial[]; total: number }> {\n    const query = this.createQueryBuilder('dados')\n      .leftJoinAndSelect('dados.solicitacao', 'solicitacao')\n      .leftJoinAndSelect('solicitacao.cidadao', 'cidadao');\n\n    if (filters.publicoPrioritario) {\n      query.andWhere('dados.publico_prioritario = :publicoPrioritario', {\n        publicoPrioritario: filters.publicoPrioritario,\n      });\n    }\n\n    if (filters.especificacao) {\n      query.andWhere('dados.especificacao_aluguel = :especificacao', {\n        especificacao: filters.especificacao,\n      });\n    }\n\n    if (filters.valorMinimo) {\n      query.andWhere('dados.valor_aluguel >= :valorMinimo', {\n        valorMinimo: filters.valorMinimo,\n      });\n    }\n\n    if (filters.valorMaximo) {\n      query.andWhere('dados.valor_aluguel <= :valorMaximo', {\n        valorMaximo: filters.valorMaximo,\n      });\n    }\n\n    if (filters.dataInicioMin && filters.dataInicioMax) {\n      query.andWhere(\n        'dados.data_inicio_aluguel BETWEEN :dataInicioMin AND :dataInicioMax',\n        {\n          dataInicioMin: filters.dataInicioMin,\n          dataInicioMax: filters.dataInicioMax,\n        },\n      );\n    }\n\n    if (filters.endereco) {\n      query.andWhere('LOWER(dados.endereco_imovel) LIKE LOWER(:endereco)', {\n        endereco: `%${filters.endereco}%`,\n      });\n    }\n\n    const total = await query.getCount();\n\n    if (filters.page && filters.limit) {\n      query.skip((filters.page - 1) * filters.limit).take(filters.limit);\n    }\n\n    query.orderBy('dados.created_at', 'DESC');\n\n    const data = await query.getMany();\n\n    return { data, total };\n  }\n}\n"],"version":3}