96cbe28e18d8e56efcc906cbdc37f147
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateSetorDto = void 0;
const enums_1 = require("@/enums");
const swagger_1 = require("@nestjs/swagger");
const class_validator_1 = require("class-validator");
/**
 * DTO para criação de setor
 */
class CreateSetorDto {
    nome;
    descricao;
    sigla;
    unidade_id;
    status;
}
exports.CreateSetorDto = CreateSetorDto;
__decorate([
    (0, class_validator_1.IsString)({ message: 'Nome deve ser uma string' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Nome é obrigatório' }),
    (0, class_validator_1.MinLength)(3, { message: 'Nome deve ter no mínimo 3 caracteres' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Nome deve ter no máximo 100 caracteres' }),
    (0, swagger_1.ApiProperty)({
        example: 'Setor de Atendimento',
        description: 'Nome do setor',
    }),
    __metadata("design:type", String)
], CreateSetorDto.prototype, "nome", void 0);
__decorate([
    (0, class_validator_1.IsString)({ message: 'Descrição deve ser uma string' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.MaxLength)(500, { message: 'Descrição deve ter no máximo 500 caracteres' }),
    (0, swagger_1.ApiProperty)({
        example: 'Responsável pelo atendimento inicial aos cidadãos',
        description: 'Descrição das atividades do setor',
        required: false,
    }),
    __metadata("design:type", String)
], CreateSetorDto.prototype, "descricao", void 0);
__decorate([
    (0, class_validator_1.IsString)({ message: 'Sigla deve ser uma string' }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.MinLength)(2, { message: 'Sigla deve ter no mínimo 2 caracteres' }),
    (0, class_validator_1.MaxLength)(10, { message: 'Sigla deve ter no máximo 10 caracteres' }),
    (0, class_validator_1.Matches)(/^[A-Z0-9-]{2,10}$/, {
        message: 'Sigla deve conter apenas letras maiúsculas, números ou hífen',
    }),
    (0, swagger_1.ApiProperty)({
        example: 'SA',
        description: 'Sigla do setor',
        required: false,
    }),
    __metadata("design:type", String)
], CreateSetorDto.prototype, "sigla", void 0);
__decorate([
    (0, class_validator_1.IsUUID)(undefined, { message: 'ID da unidade inválido' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID da unidade é obrigatório' }),
    (0, swagger_1.ApiProperty)({
        example: '123e4567-e89b-12d3-a456-426614174000',
        description: 'ID da unidade à qual o setor pertence',
    }),
    __metadata("design:type", String)
], CreateSetorDto.prototype, "unidade_id", void 0);
__decorate([
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsEnum)(enums_1.Status, { message: 'Status deve ser ativo ou inativo' }),
    (0, swagger_1.ApiProperty)({
        enum: enums_1.Status,
        enumName: 'Status',
        example: enums_1.Status.ATIVO,
        required: false,
        default: enums_1.Status.ATIVO,
        description: 'Status do setor. Valores válidos: ativo ou inativo',
    }),
    __metadata("design:type", typeof (_a = typeof enums_1.Status !== "undefined" && enums_1.Status) === "function" ? _a : Object)
], CreateSetorDto.prototype, "status", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHVuaWRhZGVcXGR0b1xcY3JlYXRlLXNldG9yLmR0by50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsbUNBQWlDO0FBQ2pDLDZDQUE4QztBQUM5QyxxREFVeUI7QUFFekI7O0dBRUc7QUFDSCxNQUFhLGNBQWM7SUFTekIsSUFBSSxDQUFTO0lBVWIsU0FBUyxDQUFVO0lBY25CLEtBQUssQ0FBVTtJQVFmLFVBQVUsQ0FBUztJQVluQixNQUFNLENBQVU7Q0FDakI7QUF0REQsd0NBc0RDO0FBN0NDO0lBUkMsSUFBQSwwQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLENBQUM7SUFDakQsSUFBQSw0QkFBVSxFQUFDLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLENBQUM7SUFDN0MsSUFBQSwyQkFBUyxFQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxDQUFDO0lBQ2pFLElBQUEsMkJBQVMsRUFBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsQ0FBQztJQUNyRSxJQUFBLHFCQUFXLEVBQUM7UUFDWCxPQUFPLEVBQUUsc0JBQXNCO1FBQy9CLFdBQVcsRUFBRSxlQUFlO0tBQzdCLENBQUM7OzRDQUNXO0FBVWI7SUFSQyxJQUFBLDBCQUFRLEVBQUMsRUFBRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsQ0FBQztJQUN0RCxJQUFBLDRCQUFVLEdBQUU7SUFDWixJQUFBLDJCQUFTLEVBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLDZDQUE2QyxFQUFFLENBQUM7SUFDMUUsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsT0FBTyxFQUFFLG1EQUFtRDtRQUM1RCxXQUFXLEVBQUUsbUNBQW1DO1FBQ2hELFFBQVEsRUFBRSxLQUFLO0tBQ2hCLENBQUM7O2lEQUNpQjtBQWNuQjtJQVpDLElBQUEsMEJBQVEsRUFBQyxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxDQUFDO0lBQ2xELElBQUEsNEJBQVUsR0FBRTtJQUNaLElBQUEsMkJBQVMsRUFBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsdUNBQXVDLEVBQUUsQ0FBQztJQUNsRSxJQUFBLDJCQUFTLEVBQUMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLHdDQUF3QyxFQUFFLENBQUM7SUFDcEUsSUFBQSx5QkFBTyxFQUFDLG1CQUFtQixFQUFFO1FBQzVCLE9BQU8sRUFBRSw4REFBOEQ7S0FDeEUsQ0FBQztJQUNELElBQUEscUJBQVcsRUFBQztRQUNYLE9BQU8sRUFBRSxJQUFJO1FBQ2IsV0FBVyxFQUFFLGdCQUFnQjtRQUM3QixRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDOzs2Q0FDYTtBQVFmO0lBTkMsSUFBQSx3QkFBTSxFQUFDLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxDQUFDO0lBQ3hELElBQUEsNEJBQVUsRUFBQyxFQUFFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxDQUFDO0lBQ3RELElBQUEscUJBQVcsRUFBQztRQUNYLE9BQU8sRUFBRSxzQ0FBc0M7UUFDL0MsV0FBVyxFQUFFLHVDQUF1QztLQUNyRCxDQUFDOztrREFDaUI7QUFZbkI7SUFWQyxJQUFBLDRCQUFVLEdBQUU7SUFDWixJQUFBLHdCQUFNLEVBQUMsY0FBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLENBQUM7SUFDL0QsSUFBQSxxQkFBVyxFQUFDO1FBQ1gsSUFBSSxFQUFFLGNBQU07UUFDWixRQUFRLEVBQUUsUUFBUTtRQUNsQixPQUFPLEVBQUUsY0FBTSxDQUFDLEtBQUs7UUFDckIsUUFBUSxFQUFFLEtBQUs7UUFDZixPQUFPLEVBQUUsY0FBTSxDQUFDLEtBQUs7UUFDckIsV0FBVyxFQUFFLG9EQUFvRDtLQUNsRSxDQUFDO2tEQUNPLGNBQU0sb0JBQU4sY0FBTTs4Q0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcdW5pZGFkZVxcZHRvXFxjcmVhdGUtc2V0b3IuZHRvLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXR1cyB9IGZyb20gJ0AvZW51bXMnO1xuaW1wb3J0IHsgQXBpUHJvcGVydHkgfSBmcm9tICdAbmVzdGpzL3N3YWdnZXInO1xuaW1wb3J0IHtcbiAgSXNTdHJpbmcsXG4gIElzT3B0aW9uYWwsXG4gIElzVVVJRCxcbiAgSXNCb29sZWFuLFxuICBJc05vdEVtcHR5LFxuICBNaW5MZW5ndGgsXG4gIE1heExlbmd0aCxcbiAgTWF0Y2hlcyxcbiAgSXNFbnVtLFxufSBmcm9tICdjbGFzcy12YWxpZGF0b3InO1xuXG4vKipcbiAqIERUTyBwYXJhIGNyaWHDp8OjbyBkZSBzZXRvclxuICovXG5leHBvcnQgY2xhc3MgQ3JlYXRlU2V0b3JEdG8ge1xuICBASXNTdHJpbmcoeyBtZXNzYWdlOiAnTm9tZSBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdOb21lIMOpIG9icmlnYXTDs3JpbycgfSlcbiAgQE1pbkxlbmd0aCgzLCB7IG1lc3NhZ2U6ICdOb21lIGRldmUgdGVyIG5vIG3DrW5pbW8gMyBjYXJhY3RlcmVzJyB9KVxuICBATWF4TGVuZ3RoKDEwMCwgeyBtZXNzYWdlOiAnTm9tZSBkZXZlIHRlciBubyBtw6F4aW1vIDEwMCBjYXJhY3RlcmVzJyB9KVxuICBAQXBpUHJvcGVydHkoe1xuICAgIGV4YW1wbGU6ICdTZXRvciBkZSBBdGVuZGltZW50bycsXG4gICAgZGVzY3JpcHRpb246ICdOb21lIGRvIHNldG9yJyxcbiAgfSlcbiAgbm9tZTogc3RyaW5nO1xuXG4gIEBJc1N0cmluZyh7IG1lc3NhZ2U6ICdEZXNjcmnDp8OjbyBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBASXNPcHRpb25hbCgpXG4gIEBNYXhMZW5ndGgoNTAwLCB7IG1lc3NhZ2U6ICdEZXNjcmnDp8OjbyBkZXZlIHRlciBubyBtw6F4aW1vIDUwMCBjYXJhY3RlcmVzJyB9KVxuICBAQXBpUHJvcGVydHkoe1xuICAgIGV4YW1wbGU6ICdSZXNwb25zw6F2ZWwgcGVsbyBhdGVuZGltZW50byBpbmljaWFsIGFvcyBjaWRhZMOjb3MnLFxuICAgIGRlc2NyaXB0aW9uOiAnRGVzY3Jpw6fDo28gZGFzIGF0aXZpZGFkZXMgZG8gc2V0b3InLFxuICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgfSlcbiAgZGVzY3JpY2FvPzogc3RyaW5nO1xuXG4gIEBJc1N0cmluZyh7IG1lc3NhZ2U6ICdTaWdsYSBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBASXNPcHRpb25hbCgpXG4gIEBNaW5MZW5ndGgoMiwgeyBtZXNzYWdlOiAnU2lnbGEgZGV2ZSB0ZXIgbm8gbcOtbmltbyAyIGNhcmFjdGVyZXMnIH0pXG4gIEBNYXhMZW5ndGgoMTAsIHsgbWVzc2FnZTogJ1NpZ2xhIGRldmUgdGVyIG5vIG3DoXhpbW8gMTAgY2FyYWN0ZXJlcycgfSlcbiAgQE1hdGNoZXMoL15bQS1aMC05LV17MiwxMH0kLywge1xuICAgIG1lc3NhZ2U6ICdTaWdsYSBkZXZlIGNvbnRlciBhcGVuYXMgbGV0cmFzIG1hacO6c2N1bGFzLCBuw7ptZXJvcyBvdSBow61mZW4nLFxuICB9KVxuICBAQXBpUHJvcGVydHkoe1xuICAgIGV4YW1wbGU6ICdTQScsXG4gICAgZGVzY3JpcHRpb246ICdTaWdsYSBkbyBzZXRvcicsXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICB9KVxuICBzaWdsYT86IHN0cmluZztcblxuICBASXNVVUlEKHVuZGVmaW5lZCwgeyBtZXNzYWdlOiAnSUQgZGEgdW5pZGFkZSBpbnbDoWxpZG8nIH0pXG4gIEBJc05vdEVtcHR5KHsgbWVzc2FnZTogJ0lEIGRhIHVuaWRhZGUgw6kgb2JyaWdhdMOzcmlvJyB9KVxuICBAQXBpUHJvcGVydHkoe1xuICAgIGV4YW1wbGU6ICcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnLFxuICAgIGRlc2NyaXB0aW9uOiAnSUQgZGEgdW5pZGFkZSDDoCBxdWFsIG8gc2V0b3IgcGVydGVuY2UnLFxuICB9KVxuICB1bmlkYWRlX2lkOiBzdHJpbmc7XG5cbiAgQElzT3B0aW9uYWwoKVxuICBASXNFbnVtKFN0YXR1cywgeyBtZXNzYWdlOiAnU3RhdHVzIGRldmUgc2VyIGF0aXZvIG91IGluYXRpdm8nIH0pXG4gIEBBcGlQcm9wZXJ0eSh7XG4gICAgZW51bTogU3RhdHVzLFxuICAgIGVudW1OYW1lOiAnU3RhdHVzJyxcbiAgICBleGFtcGxlOiBTdGF0dXMuQVRJVk8sXG4gICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIGRlZmF1bHQ6IFN0YXR1cy5BVElWTyxcbiAgICBkZXNjcmlwdGlvbjogJ1N0YXR1cyBkbyBzZXRvci4gVmFsb3JlcyB2w6FsaWRvczogYXRpdm8gb3UgaW5hdGl2bycsXG4gIH0pXG4gIHN0YXR1cz86IFN0YXR1cztcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==