{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\strategies\\jwt-auth.strategy.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\strategies\\jwt-auth.strategy.ts"],"sourcesContent":["// src/auth/strategies/jwt-auth.strategy.ts\nimport { Injectable, Logger } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nimport { STRATEGY_JWT_AUTH } from '../constants/strategy.constant';\nimport { UserAccessTokenClaims } from '../dtos/auth-token-output.dto';\n\n@Injectable()\nexport class JwtAuthStrategy extends PassportStrategy(\n  Strategy,\n  STRATEGY_JWT_AUTH,\n) {\n  private readonly logger: Logger;\n\n  constructor(private readonly configService: ConfigService) {\n    // Primeiro, carregar a chave pública\n    const publicKey = JwtAuthStrategy.loadPublicKey(configService);\n\n    // Configurar a estratégia base com a chave carregada\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: publicKey,\n      algorithms: ['RS256'],\n      jsonWebTokenOptions: {\n        algorithms: ['RS256'],\n      },\n    });\n\n    // Agora podemos inicializar o logger\n    this.logger = new Logger(JwtAuthStrategy.name);\n    this.logger.log('Estratégia JWT configurada com sucesso');\n  }\n\n  /**\n   * Carrega a chave pública do arquivo especificado nas configurações\n   */\n  private static loadPublicKey(configService: ConfigService): string {\n    // Obter o caminho para a chave pública\n    const publicKeyPath = configService.get<string>('JWT_PUBLIC_KEY_PATH');\n\n    if (!publicKeyPath) {\n      throw new Error('JWT_PUBLIC_KEY_PATH não está configurado');\n    }\n\n    // Construir o caminho absoluto para a chave pública\n    const projectRoot = process.cwd();\n    const fullPublicKeyPath = join(projectRoot, publicKeyPath);\n\n    // Carregar a chave pública do arquivo\n    try {\n      const publicKey = readFileSync(fullPublicKeyPath, 'utf8').trim();\n\n      // Validar o formato da chave\n      if (\n        !publicKey.includes('BEGIN PUBLIC KEY') &&\n        !publicKey.includes('BEGIN RSA PUBLIC KEY')\n      ) {\n        throw new Error('Formato inválido para chave pública');\n      }\n\n      // Usar console.log temporariamente, pois o logger ainda não está disponível\n      console.log('Chave pública JWT carregada com sucesso');\n      console.debug(`Caminho da chave pública: ${fullPublicKeyPath}`);\n      console.debug(`Tamanho da chave: ${publicKey.length} caracteres`);\n\n      return publicKey;\n    } catch (error) {\n      console.error(`Falha ao carregar a chave pública JWT: ${error.message}`);\n      console.error(`Caminho da chave: ${fullPublicKeyPath}`);\n      throw new Error(\n        `Falha ao carregar a chave pública JWT: ${error.message}`,\n      );\n    }\n  }\n\n  async validate(payload: any): Promise<UserAccessTokenClaims> {\n    // Passport automatically creates a user object, based on the value we return from the validate() method,\n    // and assigns it to the Request object as req.user\n\n    // Criar o objeto de claims básico\n    const claims: UserAccessTokenClaims = {\n      id: payload.sub,\n      username: payload.username,\n      roles: payload.roles,\n    };\n\n    // Extrair permissões se presentes no payload\n    if (payload.permissions) {\n      claims.permissions = payload.permissions;\n    }\n\n    // Extrair escopos de permissões se presentes no payload\n    if (payload.permissionScopes) {\n      claims.permissionScopes = payload.permissionScopes;\n    }\n\n    return claims;\n  }\n}\n"],"version":3}