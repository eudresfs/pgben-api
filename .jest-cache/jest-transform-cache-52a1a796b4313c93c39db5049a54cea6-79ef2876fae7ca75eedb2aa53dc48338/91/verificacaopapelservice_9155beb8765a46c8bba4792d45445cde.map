{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\verificacao-papel.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\cidadao\\services\\verificacao-papel.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n  InternalServerErrorException,\n  Logger,\n  Inject,\n  forwardRef,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, DataSource } from 'typeorm';\nimport { Cidadao } from '../../../entities/cidadao.entity';\nimport { PapelCidadao } from '../../../entities/papel-cidadao.entity';\nimport { TipoPapel, PaperType } from '../../../enums/tipo-papel.enum';\nimport { ComposicaoFamiliar } from '../../../entities/composicao-familiar.entity';\nimport { HistoricoConversaoPapelService } from './historico-conversao-papel.service';\nimport { PapelCidadaoService } from './papel-cidadao.service';\nimport { CreateCidadaoDto } from '../dto/create-cidadao.dto';\n\n/**\n * Interface para o resultado da verificação de conflito de papéis\n */\nexport interface ResultadoVerificacaoConflito {\n  temConflito: boolean;\n  tipoPapelAtual?: PaperType;\n  composicaoFamiliarId?: string;\n  cidadaoId?: string;\n  detalhes?: string;\n}\n\n/**\n * Interface para o resultado da conversão de papel\n */\nexport interface ResultadoConversaoPapel {\n  sucesso: boolean;\n  mensagem: string;\n  historicoId?: string;\n}\n\n/**\n * Interface para papel conflitante\n */\nexport interface PapelConflitante {\n  papel_id: string;\n  nome_papel: string;\n  regra_conflito: string;\n}\n\n/**\n * Interface para resultado de verificação de conflitos\n */\nexport interface ResultadoVerificacaoConflitos {\n  possui_conflito: boolean;\n  papeis_conflitantes: PapelConflitante[];\n}\n\n/**\n * Interface para regra de conflito\n */\nexport interface RegraConflito {\n  id: string;\n  papel_origem_id: string;\n  papel_origem_nome: string;\n  papel_destino_id: string;\n  papel_destino_nome: string;\n  descricao: string;\n  ativo: boolean;\n}\n\n/**\n * Serviço de Verificação de Papel\n *\n * Responsável por verificar conflitos de papéis e realizar conversões\n * de papéis de cidadãos no sistema.\n */\n@Injectable()\nexport class VerificacaoPapelService {\n  private readonly logger = new Logger(VerificacaoPapelService.name);\n\n  constructor(\n    @InjectRepository(Cidadao)\n    private readonly cidadaoRepository: Repository<Cidadao>,\n    @InjectRepository(PapelCidadao)\n    private readonly papelCidadaoRepository: Repository<PapelCidadao>,\n    @InjectRepository(ComposicaoFamiliar)\n    private readonly composicaoFamiliarRepository: Repository<ComposicaoFamiliar>,\n    private readonly historicoService: HistoricoConversaoPapelService,\n    @Inject(forwardRef(() => PapelCidadaoService))\n    private readonly papelCidadaoService: PapelCidadaoService,\n    private readonly dataSource: DataSource,\n  ) {}\n\n\n\n  /**\n   * Converte um cidadão para beneficiário\n   * @param cidadaoId ID do cidadão\n   * @param motivoConversao Motivo da conversão\n   * @returns Resultado da conversão\n   */\n  async converterParaBeneficiario(\n    cidadaoId: string,\n    motivoConversao: string,\n  ): Promise<ResultadoConversaoPapel> {\n    this.logger.log(`Iniciando conversão para beneficiário: ${cidadaoId}`);\n\n    return this.dataSource.transaction(async (manager) => {\n      // Verificar se o cidadão existe\n      const cidadao = await manager.findOne(Cidadao, {\n        where: { id: cidadaoId },\n        relations: ['papeis'],\n      });\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Verificar se já é beneficiário\n      const jaBeneficiario = cidadao.papeis?.some(\n        (papel) => papel.tipo_papel === 'beneficiario' && papel.ativo,\n      );\n\n      if (jaBeneficiario) {\n        throw new ConflictException('Cidadão já é beneficiário');\n      }\n\n      // Verificar conflitos\n      const conflitos = await this.verificarConflitoPapeis(\n        cidadao.cpf,\n      );\n\n      if (conflitos.temConflito) {\n        // Registrar histórico de tentativa de conversão\n        await this.historicoService.criarHistorico({\n          cidadao_id: cidadaoId,\n          papel_anterior: conflitos.tipoPapelAtual || 'membro_composicao',\n          papel_novo: 'beneficiario',\n          justificativa: `Conversão bloqueada: ${conflitos.detalhes}`,\n        }, 'sistema');\n\n        return {\n          sucesso: false,\n          mensagem: conflitos.detalhes || 'Conflito de papel detectado',\n        };\n      }\n\n      // Desativar papéis conflitantes se necessário\n      const papeisAtivos = cidadao.papeis?.filter((papel) => papel.ativo) || [];\n      for (const papel of papeisAtivos) {\n        if (papel.tipo_papel === 'membro_composicao') {\n          papel.ativo = false;\n          await manager.save(papel);\n        }\n      }\n\n      // Criar papel de beneficiário\n      const novoPapel = manager.create(PapelCidadao, {\n        cidadao_id: cidadaoId,\n        tipo_papel: 'beneficiario',\n        ativo: true,\n        metadados: {},\n      });\n\n      await manager.save(novoPapel);\n\n      // Registrar no histórico\n      const historico = await this.historicoService.criarHistorico({\n        cidadao_id: cidadaoId,\n        papel_anterior: conflitos.tipoPapelAtual || 'membro_composicao',\n        papel_novo: 'beneficiario',\n        justificativa: motivoConversao,\n      }, 'sistema');\n\n      return {\n        sucesso: true,\n        mensagem: 'Conversão para beneficiário realizada com sucesso',\n        historicoId: historico.id,\n      };\n    });\n  }\n\n  /**\n   * Converte um membro de composição familiar para cidadão beneficiário\n   * @param cpf CPF do membro de composição familiar\n   * @param dadosCidadao Dados para criação do novo cidadão\n   * @param justificativa Justificativa para a conversão\n   * @param usuarioId ID do usuário que está realizando a conversão\n   * @returns Resultado da conversão\n   * @throws BadRequestException se os dados do cidadão forem inválidos\n   * @throws ConflictException se o cidadão já for beneficiário\n   * @throws NotFoundException se o membro não for encontrado\n   * @throws InternalServerErrorException se ocorrer um erro durante a conversão\n   */\n  async converterMembroParaBeneficiario(\n    cpf: string,\n    dadosCidadao: CreateCidadaoDto,\n    justificativa: string,\n    usuarioId: string,\n  ): Promise<ResultadoConversaoPapel> {\n    this.logger.log(`Iniciando conversão para beneficiário: CPF ${cpf}`);\n    \n    // Validar dados do cidadão\n    if (!dadosCidadao.nome) {\n      this.logger.warn(`Tentativa de conversão com dados inválidos: CPF ${cpf}`);\n      throw new BadRequestException('Nome do cidadão é obrigatório');\n    }\n    \n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    \n    this.logger.debug(`Transação iniciada para conversão: CPF ${cpf}`);\n\n    try {\n      // Remover formatação do CPF\n      const cpfLimpo = cpf.replace(/\\D/g, '');\n\n      // Verificar se já existe um cidadão com este CPF\n      const cidadaoExistente = await this.cidadaoRepository.findOne({\n        where: { cpf: cpfLimpo },\n      });\n\n      // Se já existir um cidadão com este CPF, verificar se já é beneficiário\n      if (cidadaoExistente) {\n        this.logger.debug(`Cidadão existente encontrado: ID ${cidadaoExistente.id}`);\n        const papelBeneficiario = await this.papelCidadaoRepository.findOne({\n          where: {\n            cidadao_id: cidadaoExistente.id,\n            tipo_papel: TipoPapel.BENEFICIARIO,\n            ativo: true,\n          },\n        });\n\n        if (papelBeneficiario) {\n          this.logger.warn(`Cidadão já é beneficiário: ID ${cidadaoExistente.id}`);\n          throw new ConflictException('Cidadão já é beneficiário');\n        }\n      }\n\n      // Verificar se o membro está em alguma composição familiar\n      const composicaoFamiliar = await this.composicaoFamiliarRepository.findOne({\n        where: { cpf: cpfLimpo },\n        relations: ['cidadao'],\n      });\n\n      if (!composicaoFamiliar) {\n        this.logger.warn(`Membro não encontrado em composição familiar: CPF ${cpfLimpo}`);\n        throw new BadRequestException(\n          'Membro não encontrado em nenhuma composição familiar',\n        );\n      }\n      \n      this.logger.debug(`Composição familiar encontrada: ID ${composicaoFamiliar.id}`);\n\n      let cidadao;\n      let novoPapel;\n\n      // Se o cidadão já existe, apenas adicionar o papel de beneficiário\n      if (cidadaoExistente) {\n        this.logger.debug(`Usando cidadão existente: ID ${cidadaoExistente.id}`);\n        cidadao = cidadaoExistente;\n        \n        // Adicionar papel de beneficiário\n        novoPapel = await this.papelCidadaoService.criarPapel(\n          cidadao.id,\n          TipoPapel.BENEFICIARIO,\n          {}\n        );\n      } else {\n        // Criar um novo cidadão com os dados fornecidos\n        this.logger.debug(`Criando novo cidadão para CPF: ${cpfLimpo}`);\n        const dadosCidadaoCompletos = {\n          ...dadosCidadao,\n          cpf: cpfLimpo,\n          nome: dadosCidadao.nome || composicaoFamiliar.nome, // Usar o nome da composição se não for fornecido\n          papeis: [\n            {\n              tipo_papel: TipoPapel.BENEFICIARIO,\n              metadados: {},\n            },\n          ],\n        };\n\n        // Criar o cidadão usando o serviço de cidadão\n        const cidadaoCriado = await queryRunner.manager.save(\n          this.cidadaoRepository.create(dadosCidadaoCompletos)\n        );\n\n        cidadao = cidadaoCriado;\n        \n        // Criar papel de beneficiário para o novo cidadão\n        novoPapel = await queryRunner.manager.save(\n          this.papelCidadaoRepository.create({\n            cidadao_id: cidadao.id,\n            tipo_papel: TipoPapel.BENEFICIARIO,\n            ativo: true,\n          })\n        );\n      }\n\n      // Soft delete da composição familiar (marcar como removido)\n      this.logger.debug(`Realizando soft delete da composição familiar: ID ${composicaoFamiliar.id}`);\n      await queryRunner.manager.softRemove(composicaoFamiliar);\n\n      // Registrar histórico de conversão\n      const historico = await this.historicoService.criarHistorico(\n        {\n          cidadao_id: cidadao.id,\n          papel_anterior: TipoPapel.MEMBRO_COMPOSICAO,\n          papel_novo: TipoPapel.BENEFICIARIO,\n          justificativa\n        },\n        usuarioId\n      );\n\n      await queryRunner.commitTransaction();\n\n      return {\n        sucesso: true,\n        mensagem: 'Membro convertido para cidadão beneficiário com sucesso',\n        historicoId: historico.id,\n      };\n    } catch (error) {\n      this.logger.warn(`Erro durante a conversão para beneficiário: ${error.message}`);\n      await queryRunner.rollbackTransaction();\n      this.logger.debug('Transação revertida após erro');\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n\n      // Registrar detalhes do erro para facilitar a depuração\n      const errorDetails = {\n        message: error.message,\n        stack: error.stack,\n        cpf,\n        nome: dadosCidadao?.nome,\n        timestamp: new Date().toISOString(),\n      };\n      \n      this.logger.error(\n        `Erro ao converter para beneficiário: ${JSON.stringify(errorDetails)}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao converter membro para cidadão beneficiário',\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  /**\n   * Converte um cidadão beneficiário para membro de composição familiar\n   * @param cpf CPF do cidadão beneficiário\n   * @param cidadaoAlvoId ID do cidadão que terá o membro adicionado à sua composição familiar\n   * @param dadosComposicao Dados da composição familiar\n   * @param justificativa Justificativa para a conversão\n   * @param usuarioId ID do usuário que está realizando a conversão\n   * @returns Resultado da conversão\n   * @throws BadRequestException se o cidadão não for beneficiário\n   * @throws ConflictException se o cidadão já estiver em uma composição familiar\n   * @throws NotFoundException se o cidadão ou o cidadão alvo não forem encontrados\n   * @throws InternalServerErrorException se ocorrer um erro durante a conversão\n   */\n  async converterParaComposicaoFamiliar(\n    cpf: string,\n    cidadaoAlvoId: string,\n    dadosComposicao: Partial<ComposicaoFamiliar>,\n    justificativa: string,\n    usuarioId: string,\n  ): Promise<ResultadoConversaoPapel> {\n    this.logger.log(`Iniciando conversão para composição familiar: CPF ${cpf}`);\n    \n    // Validar dados da composição familiar\n    if (!dadosComposicao || !cidadaoAlvoId) {\n      this.logger.warn(`Tentativa de conversão com dados inválidos: CPF ${cpf}`);\n      throw new BadRequestException('Dados da composição familiar e ID do cidadão alvo são obrigatórios');\n    }\n    \n    const queryRunner = this.dataSource.createQueryRunner();\n    await queryRunner.connect();\n    await queryRunner.startTransaction();\n    \n    this.logger.debug(`Transação iniciada para conversão: CPF ${cpf}`);\n\n    try {\n      // Remover formatação do CPF\n      const cpfLimpo = cpf.replace(/\\D/g, '');\n\n      // Verificar se o cidadão existe\n      const cidadao = await this.cidadaoRepository.findOne({\n        where: { cpf: cpfLimpo },\n      });\n\n      if (!cidadao) {\n        this.logger.warn(`Cidadão não encontrado: CPF ${cpfLimpo}`);\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n      \n      this.logger.debug(`Cidadão encontrado: ID ${cidadao.id}`);\n\n      // Verificar se o cidadão alvo existe\n      const cidadaoAlvo = await this.cidadaoRepository.findOne({\n        where: { id: cidadaoAlvoId },\n      });\n\n      if (!cidadaoAlvo) {\n        this.logger.warn(`Cidadão alvo não encontrado: ID ${cidadaoAlvoId}`);\n        throw new NotFoundException('Cidadão alvo não encontrado');\n      }\n      \n      this.logger.debug(`Cidadão alvo encontrado: ID ${cidadaoAlvo.id}`);\n\n      // Verificar se o cidadão é beneficiário\n      const papelBeneficiario = await this.papelCidadaoRepository.findOne({\n        where: {\n          cidadao_id: cidadao.id,\n          tipo_papel: TipoPapel.BENEFICIARIO,\n          ativo: true,\n        },\n      });\n\n      if (!papelBeneficiario) {\n        this.logger.warn(`Cidadão não é beneficiário: ID ${cidadao.id}`);\n        throw new BadRequestException('Cidadão não é beneficiário');\n      }\n      \n      this.logger.debug(`Papel beneficiário encontrado: ID ${papelBeneficiario.id}`);\n\n      // Verificar se o cidadão já está em alguma composição familiar\n      const composicaoExistente = await this.composicaoFamiliarRepository.findOne({\n        where: { cpf: cpfLimpo },\n      });\n\n      if (composicaoExistente) {\n        this.logger.warn(`Cidadão já está em uma composição familiar: ID ${composicaoExistente.id}`);\n        throw new ConflictException(\n          'Cidadão já está em uma composição familiar',\n        );\n      }\n      \n      this.logger.debug('Cidadão não está em nenhuma composição familiar');\n\n      // Criar composição familiar\n      this.logger.debug(`Criando nova composição familiar para o cidadão: ID ${cidadao.id}`);\n      const novaComposicao = this.composicaoFamiliarRepository.create({\n        ...dadosComposicao,\n        cpf: cpfLimpo,\n        cidadao_id: cidadaoAlvoId,\n        nome: cidadao.nome, // Usar o nome do cidadão\n      });\n\n      await queryRunner.manager.save(novaComposicao);\n      this.logger.debug(`Nova composição familiar criada: ID ${novaComposicao.id}`);\n\n      // Soft delete do cidadão (marcar como removido)\n      this.logger.debug(`Realizando soft delete do cidadão: ID ${cidadao.id}`);\n      await queryRunner.manager.softRemove(cidadao);\n\n      // Registrar histórico de conversão\n      const historico = await this.historicoService.criarHistorico(\n        {\n          cidadao_id: cidadao.id,\n          papel_anterior: TipoPapel.BENEFICIARIO,\n          papel_novo: TipoPapel.MEMBRO_COMPOSICAO,\n          justificativa,\n          composicao_familiar_id: novaComposicao.id,\n        },\n        usuarioId\n      );\n\n      await queryRunner.commitTransaction();\n\n      return {\n        sucesso: true,\n        mensagem: 'Cidadão convertido para membro de composição familiar com sucesso',\n        historicoId: historico.id,\n      };\n    } catch (error) {\n      this.logger.warn(`Erro durante a conversão para composição familiar: ${error.message}`);\n      await queryRunner.rollbackTransaction();\n      this.logger.debug('Transação revertida após erro');\n\n      if (\n        error instanceof NotFoundException ||\n        error instanceof ConflictException ||\n        error instanceof BadRequestException\n      ) {\n        throw error;\n      }\n\n      // Registrar detalhes do erro para facilitar a depuração\n      const errorDetails = {\n        message: error.message,\n        stack: error.stack,\n        cpf,\n        cidadaoAlvoId,\n        timestamp: new Date().toISOString(),\n      };\n      \n      this.logger.error(\n        `Erro ao converter para composição familiar: ${JSON.stringify(errorDetails)}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao converter cidadão para membro de composição familiar',\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }\n\n  /**\n   * Verifica se existem conflitos entre papéis para um cidadão\n   * @param cidadaoId ID do cidadão\n   * @param papelIds Lista de IDs de papéis a serem verificados\n   * @returns Resultado da verificação\n   */\n  async verificarPapeisConflitantes(\n    cidadaoId: string,\n    papelIds: string[],\n  ): Promise<ResultadoVerificacaoConflitos> {\n    try {\n      // Verificar se o cidadão existe\n      const cidadao = await this.cidadaoRepository.findOne({\n        where: { id: cidadaoId },\n      });\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Buscar papéis atuais do cidadão\n      const papeisCidadao = await this.papelCidadaoRepository.find({\n        where: { cidadao_id: cidadaoId, ativo: true },\n      });\n\n      // Simular a lista de papéis que o cidadão teria\n      const todosPapeis = [...papeisCidadao.map(p => p.id), ...papelIds];\n\n      // Verificar conflitos com base nas regras de negócio\n      const regrasConflito = await this.listarRegrasConflito();\n      const conflitos: PapelConflitante[] = [];\n\n      // Verificar cada regra de conflito\n      for (const regra of regrasConflito) {\n        if (!regra.ativo) {continue;}\n\n        // Verificar se a regra se aplica aos papéis do cidadão\n        const temPapelOrigem = todosPapeis.includes(regra.papel_origem_id);\n        const temPapelDestino = todosPapeis.includes(regra.papel_destino_id);\n\n        if (temPapelOrigem && temPapelDestino) {\n          conflitos.push({\n            papel_id: papelIds.includes(regra.papel_origem_id) ? regra.papel_origem_id : regra.papel_destino_id,\n            nome_papel: papelIds.includes(regra.papel_origem_id) ? regra.papel_origem_nome : regra.papel_destino_nome,\n            regra_conflito: regra.descricao,\n          });\n        }\n      }\n\n      return {\n        possui_conflito: conflitos.length > 0,\n        papeis_conflitantes: conflitos,\n      };\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao verificar papéis conflitantes: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao verificar papéis conflitantes',\n      );\n    }\n  }\n\n  /**\n   * Verifica papéis conflitantes para um cidadão específico\n   * @param cidadaoId ID do cidadão\n   * @returns Resultado da verificação\n   */\n  async verificarPapeisConflitantesCidadao(\n    cidadaoId: string,\n  ): Promise<ResultadoVerificacaoConflitos> {\n    try {\n      // Verificar se o cidadão existe\n      const cidadao = await this.cidadaoRepository.findOne({\n        where: { id: cidadaoId },\n      });\n\n      if (!cidadao) {\n        throw new NotFoundException('Cidadão não encontrado');\n      }\n\n      // Buscar papéis atuais do cidadão\n      const papeisCidadao = await this.papelCidadaoRepository.find({\n        where: { cidadao_id: cidadaoId, ativo: true },\n      });\n\n      // Verificar conflitos com base nas regras de negócio\n      const regrasConflito = await this.listarRegrasConflito();\n      const conflitos: PapelConflitante[] = [];\n\n      // Verificar cada regra de conflito\n      for (const regra of regrasConflito) {\n        if (!regra.ativo) {continue;}\n\n        // Verificar se a regra se aplica aos papéis do cidadão\n        const temPapelOrigem = papeisCidadao.some(p => p.id === regra.papel_origem_id);\n        const temPapelDestino = papeisCidadao.some(p => p.id === regra.papel_destino_id);\n\n        if (temPapelOrigem && temPapelDestino) {\n          conflitos.push({\n            papel_id: regra.papel_destino_id,\n            nome_papel: regra.papel_destino_nome,\n            regra_conflito: regra.descricao,\n          });\n        }\n      }\n\n      return {\n        possui_conflito: conflitos.length > 0,\n        papeis_conflitantes: conflitos,\n      };\n    } catch (error) {\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      this.logger.error(\n        `Erro ao verificar papéis conflitantes do cidadão: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao verificar papéis conflitantes do cidadão',\n      );\n    }\n  }\n\n  /**\n   * Lista as regras de conflito entre papéis\n   * @returns Lista de regras de conflito\n   */\n  async listarRegrasConflito(): Promise<RegraConflito[]> {\n    try {\n      // Simulação de regras de conflito - em um ambiente real, estas viriam do banco de dados\n      return [\n        {\n          id: '1',\n          papel_origem_id: '1',\n          papel_origem_nome: 'Beneficiário',\n          papel_destino_id: '2',\n          papel_destino_nome: 'Membro de Composição Familiar',\n          descricao: 'Um cidadão não pode ser beneficiário e membro de composição familiar ao mesmo tempo',\n          ativo: true,\n        },\n        {\n          id: '2',\n          papel_origem_id: '3',\n          papel_origem_nome: 'Responsável Familiar',\n          papel_destino_id: '4',\n          papel_destino_nome: 'Dependente',\n          descricao: 'Um cidadão não pode ser responsável familiar e dependente ao mesmo tempo',\n          ativo: true,\n        },\n        {\n          id: '3',\n          papel_origem_id: '5',\n          papel_origem_nome: 'Servidor Público',\n          papel_destino_id: '1',\n          papel_destino_nome: 'Beneficiário',\n          descricao: 'Um servidor público não pode ser beneficiário de programas sociais',\n          ativo: true,\n        },\n      ];\n    } catch (error) {\n      this.logger.error(\n        `Erro ao listar regras de conflito: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao listar regras de conflito',\n      );\n    }\n  }\n\n  /**\n   * Verifica se há conflito entre papéis de um cidadão\n   * @param cpf CPF do cidadão\n   * @returns Resultado da verificação\n   */\n  async verificarConflitoPapeis(\n    cpf: string,\n  ): Promise<ResultadoVerificacaoConflito> {\n    try {\n      // Buscar cidadão pelo CPF\n      const cidadao = await this.cidadaoRepository.findOne({\n        where: { cpf },\n        relations: ['papeis'],\n      });\n\n      if (!cidadao) {\n        return {\n          temConflito: false,\n          detalhes: 'Cidadão não encontrado',\n        };\n      }\n\n      // Verificar papéis ativos\n      const papeisAtivos = cidadao.papeis?.filter((papel) => papel.ativo) || [];\n\n      if (papeisAtivos.length === 0) {\n        return {\n          temConflito: false,\n          detalhes: 'Nenhum papel ativo encontrado',\n        };\n      }\n\n      // Verificar se há conflito (exemplo: beneficiário não pode ser requerente)\n      const temBeneficiario = papeisAtivos.some(\n        (papel) => papel.tipo_papel === 'beneficiario',\n      );\n      const temRequerente = papeisAtivos.some(\n        (papel) => papel.tipo_papel === 'requerente',\n      );\n\n      if (temBeneficiario && temRequerente) {\n        return {\n          temConflito: true,\n          tipoPapelAtual: 'beneficiario',\n          cidadaoId: cidadao.id,\n          detalhes: 'Cidadão não pode ser beneficiário e requerente simultaneamente',\n        };\n      }\n\n      return {\n        temConflito: false,\n        tipoPapelAtual: papeisAtivos[0]?.tipo_papel,\n        cidadaoId: cidadao.id,\n        detalhes: 'Nenhum conflito detectado',\n      };\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar conflito de papéis: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Erro ao verificar conflito de papéis',\n      );\n    }\n  }\n}\n"],"version":3}