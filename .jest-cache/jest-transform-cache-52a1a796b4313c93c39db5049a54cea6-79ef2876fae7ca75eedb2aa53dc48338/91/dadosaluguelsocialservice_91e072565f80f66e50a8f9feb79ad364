079c6b35ac6459b30a0b02c98c0ef038
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DadosAluguelSocialService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const dados_aluguel_social_entity_1 = require("../../../entities/dados-aluguel-social.entity");
/**
 * Serviço para gerenciar dados específicos de Aluguel Social
 */
let DadosAluguelSocialService = class DadosAluguelSocialService {
    dadosAluguelSocialRepository;
    constructor(dadosAluguelSocialRepository) {
        this.dadosAluguelSocialRepository = dadosAluguelSocialRepository;
    }
    /**
     * Criar dados de aluguel social para uma solicitação
     */
    async create(createDto) {
        // Verificar se já existem dados para esta solicitação
        const existingData = await this.dadosAluguelSocialRepository.findOne({
            where: { solicitacao_id: createDto.solicitacao_id },
        });
        if (existingData) {
            throw new Error('Já existem dados de aluguel social para esta solicitação');
        }
        const dadosAluguelSocial = this.dadosAluguelSocialRepository.create(createDto);
        return this.dadosAluguelSocialRepository.save(dadosAluguelSocial);
    }
    /**
     * Buscar dados de aluguel social por ID
     */
    async findOne(id) {
        const dadosAluguelSocial = await this.dadosAluguelSocialRepository.findOne({
            where: { id },
            relations: ['solicitacao'],
        });
        if (!dadosAluguelSocial) {
            throw new common_1.NotFoundException('Dados de aluguel social não encontrados');
        }
        return dadosAluguelSocial;
    }
    /**
     * Buscar dados de aluguel social por solicitação
     */
    async findBySolicitacao(solicitacaoId) {
        const dadosAluguelSocial = await this.dadosAluguelSocialRepository.findOne({
            where: { solicitacao_id: solicitacaoId },
            relations: ['solicitacao'],
        });
        if (!dadosAluguelSocial) {
            throw new common_1.NotFoundException('Dados de aluguel social não encontrados para esta solicitação');
        }
        return dadosAluguelSocial;
    }
    /**
     * Atualizar dados de aluguel social
     */
    async update(id, updateDto) {
        const dadosAluguelSocial = await this.findOne(id);
        // Atualizar apenas os campos fornecidos
        Object.assign(dadosAluguelSocial, updateDto);
        return this.dadosAluguelSocialRepository.save(dadosAluguelSocial);
    }
    /**
     * Remover dados de aluguel social
     */
    async remove(id) {
        const dadosAluguelSocial = await this.findOne(id);
        await this.dadosAluguelSocialRepository.remove(dadosAluguelSocial);
    }
    /**
     * Verificar se existem dados de aluguel social para uma solicitação
     */
    async existsBySolicitacao(solicitacaoId) {
        const count = await this.dadosAluguelSocialRepository.count({
            where: { solicitacao_id: solicitacaoId },
        });
        return count > 0;
    }
    /**
     * Buscar todos os dados de aluguel social com paginação
     */
    async findAll(page = 1, limit = 10) {
        const [data, total] = await this.dadosAluguelSocialRepository.findAndCount({
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
    /**
     * Buscar dados por público prioritário
     */
    async findByPublicoPrioritario(publicoPrioritario, page = 1, limit = 10) {
        const [data, total] = await this.dadosAluguelSocialRepository.findAndCount({
            where: { publico_prioritario: publicoPrioritario },
            relations: ['solicitacao'],
            skip: (page - 1) * limit,
            take: limit,
            order: { created_at: 'DESC' },
        });
        return {
            data,
            total,
            page,
            limit,
        };
    }
};
exports.DadosAluguelSocialService = DadosAluguelSocialService;
exports.DadosAluguelSocialService = DadosAluguelSocialService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(dados_aluguel_social_entity_1.DadosAluguelSocial)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object])
], DadosAluguelSocialService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,