{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-aluguel-social.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\dados-aluguel-social.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { DadosAluguelSocial } from '../../../entities/dados-aluguel-social.entity';\nimport {\n  CreateDadosAluguelSocialDto,\n  UpdateDadosAluguelSocialDto,\n} from '../dto/create-dados-aluguel-social.dto';\n\n/**\n * Serviço para gerenciar dados específicos de Aluguel Social\n */\n@Injectable()\nexport class DadosAluguelSocialService {\n  constructor(\n    @InjectRepository(DadosAluguelSocial)\n    private readonly dadosAluguelSocialRepository: Repository<DadosAluguelSocial>,\n  ) {}\n\n  /**\n   * Criar dados de aluguel social para uma solicitação\n   */\n  async create(\n    createDto: CreateDadosAluguelSocialDto,\n  ): Promise<DadosAluguelSocial> {\n    // Verificar se já existem dados para esta solicitação\n    const existingData = await this.dadosAluguelSocialRepository.findOne({\n      where: { solicitacao_id: createDto.solicitacao_id },\n    });\n\n    if (existingData) {\n      throw new Error(\n        'Já existem dados de aluguel social para esta solicitação',\n      );\n    }\n\n    const dadosAluguelSocial =\n      this.dadosAluguelSocialRepository.create(createDto);\n    return this.dadosAluguelSocialRepository.save(dadosAluguelSocial);\n  }\n\n  /**\n   * Buscar dados de aluguel social por ID\n   */\n  async findOne(id: string): Promise<DadosAluguelSocial> {\n    const dadosAluguelSocial = await this.dadosAluguelSocialRepository.findOne({\n      where: { id },\n      relations: ['solicitacao'],\n    });\n\n    if (!dadosAluguelSocial) {\n      throw new NotFoundException('Dados de aluguel social não encontrados');\n    }\n\n    return dadosAluguelSocial;\n  }\n\n  /**\n   * Buscar dados de aluguel social por solicitação\n   */\n  async findBySolicitacao(solicitacaoId: string): Promise<DadosAluguelSocial> {\n    const dadosAluguelSocial = await this.dadosAluguelSocialRepository.findOne({\n      where: { solicitacao_id: solicitacaoId },\n      relations: ['solicitacao'],\n    });\n\n    if (!dadosAluguelSocial) {\n      throw new NotFoundException(\n        'Dados de aluguel social não encontrados para esta solicitação',\n      );\n    }\n\n    return dadosAluguelSocial;\n  }\n\n  /**\n   * Atualizar dados de aluguel social\n   */\n  async update(\n    id: string,\n    updateDto: UpdateDadosAluguelSocialDto,\n  ): Promise<DadosAluguelSocial> {\n    const dadosAluguelSocial = await this.findOne(id);\n\n    // Atualizar apenas os campos fornecidos\n    Object.assign(dadosAluguelSocial, updateDto);\n\n    return this.dadosAluguelSocialRepository.save(dadosAluguelSocial);\n  }\n\n  /**\n   * Remover dados de aluguel social\n   */\n  async remove(id: string): Promise<void> {\n    const dadosAluguelSocial = await this.findOne(id);\n    await this.dadosAluguelSocialRepository.remove(dadosAluguelSocial);\n  }\n\n  /**\n   * Verificar se existem dados de aluguel social para uma solicitação\n   */\n  async existsBySolicitacao(solicitacaoId: string): Promise<boolean> {\n    const count = await this.dadosAluguelSocialRepository.count({\n      where: { solicitacao_id: solicitacaoId },\n    });\n    return count > 0;\n  }\n\n  /**\n   * Buscar todos os dados de aluguel social com paginação\n   */\n  async findAll(\n    page: number = 1,\n    limit: number = 10,\n  ): Promise<{\n    data: DadosAluguelSocial[];\n    total: number;\n    page: number;\n    limit: number;\n  }> {\n    const [data, total] = await this.dadosAluguelSocialRepository.findAndCount({\n      relations: ['solicitacao'],\n      skip: (page - 1) * limit,\n      take: limit,\n      order: { created_at: 'DESC' },\n    });\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n    };\n  }\n\n  /**\n   * Buscar dados por público prioritário\n   */\n  async findByPublicoPrioritario(\n    publicoPrioritario: string,\n    page: number = 1,\n    limit: number = 10,\n  ): Promise<{\n    data: DadosAluguelSocial[];\n    total: number;\n    page: number;\n    limit: number;\n  }> {\n    const [data, total] = await this.dadosAluguelSocialRepository.findAndCount({\n      where: { publico_prioritario: publicoPrioritario as any },\n      relations: ['solicitacao'],\n      skip: (page - 1) * limit,\n      take: limit,\n      order: { created_at: 'DESC' },\n    });\n\n    return {\n      data,\n      total,\n      page,\n      limit,\n    };\n  }\n}\n"],"version":3}