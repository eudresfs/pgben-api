371ef15ca992c5a281087512bab4da63
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var JwtAuthStrategy_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtAuthStrategy = void 0;
// src/auth/strategies/jwt-auth.strategy.ts
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const passport_1 = require("@nestjs/passport");
const passport_jwt_1 = require("passport-jwt");
const fs_1 = require("fs");
const path_1 = require("path");
const strategy_constant_1 = require("../constants/strategy.constant");
let JwtAuthStrategy = JwtAuthStrategy_1 = class JwtAuthStrategy extends (0, passport_1.PassportStrategy)(passport_jwt_1.Strategy, strategy_constant_1.STRATEGY_JWT_AUTH) {
    configService;
    logger;
    constructor(configService) {
        // Primeiro, carregar a chave pública
        const publicKey = JwtAuthStrategy_1.loadPublicKey(configService);
        // Configurar a estratégia base com a chave carregada
        super({
            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),
            ignoreExpiration: false,
            secretOrKey: publicKey,
            algorithms: ['RS256'],
            jsonWebTokenOptions: {
                algorithms: ['RS256'],
            },
        });
        this.configService = configService;
        // Agora podemos inicializar o logger
        this.logger = new common_1.Logger(JwtAuthStrategy_1.name);
        this.logger.log('Estratégia JWT configurada com sucesso');
    }
    /**
     * Carrega a chave pública do arquivo especificado nas configurações
     */
    static loadPublicKey(configService) {
        // Obter o caminho para a chave pública
        const publicKeyPath = configService.get('JWT_PUBLIC_KEY_PATH');
        if (!publicKeyPath) {
            throw new Error('JWT_PUBLIC_KEY_PATH não está configurado');
        }
        // Construir o caminho absoluto para a chave pública
        const projectRoot = process.cwd();
        const fullPublicKeyPath = (0, path_1.join)(projectRoot, publicKeyPath);
        // Carregar a chave pública do arquivo
        try {
            const publicKey = (0, fs_1.readFileSync)(fullPublicKeyPath, 'utf8').trim();
            // Validar o formato da chave
            if (!publicKey.includes('BEGIN PUBLIC KEY') &&
                !publicKey.includes('BEGIN RSA PUBLIC KEY')) {
                throw new Error('Formato inválido para chave pública');
            }
            // Usar console.log temporariamente, pois o logger ainda não está disponível
            console.log('Chave pública JWT carregada com sucesso');
            console.debug(`Caminho da chave pública: ${fullPublicKeyPath}`);
            console.debug(`Tamanho da chave: ${publicKey.length} caracteres`);
            return publicKey;
        }
        catch (error) {
            console.error(`Falha ao carregar a chave pública JWT: ${error.message}`);
            console.error(`Caminho da chave: ${fullPublicKeyPath}`);
            throw new Error(`Falha ao carregar a chave pública JWT: ${error.message}`);
        }
    }
    async validate(payload) {
        // Passport automatically creates a user object, based on the value we return from the validate() method,
        // and assigns it to the Request object as req.user
        // Criar o objeto de claims básico
        const claims = {
            id: payload.sub,
            username: payload.username,
            roles: payload.roles,
        };
        // Extrair permissões se presentes no payload
        if (payload.permissions) {
            claims.permissions = payload.permissions;
        }
        // Extrair escopos de permissões se presentes no payload
        if (payload.permissionScopes) {
            claims.permissionScopes = payload.permissionScopes;
        }
        return claims;
    }
};
exports.JwtAuthStrategy = JwtAuthStrategy;
exports.JwtAuthStrategy = JwtAuthStrategy = JwtAuthStrategy_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _a : Object])
], JwtAuthStrategy);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,