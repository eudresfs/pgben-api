{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\sse.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\notificacao\\services\\sse.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { Subject, Observable, interval } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport {\n  SseNotification,\n  SseConnection,\n  SseConnectionStats,\n  HeartbeatEvent,\n} from '../interfaces/sse-notification.interface';\n\n/**\n * Serviço SSE (Server-Sent Events)\n *\n * Responsável por gerenciar conexões SSE e envio de notificações em tempo real.\n * Mantém um mapa de conexões ativas por usuário e fornece métodos para\n * envio de notificações individuais ou em massa.\n */\n@Injectable()\nexport class SseService {\n  isUserConnected(userId: string) {\n    throw new Error('Method not implemented.');\n  }\n  getUserConnectionCount(userId: string) {\n    throw new Error('Method not implemented.');\n  }\n  private readonly logger = new Logger(SseService.name);\n\n  /** Mapa de conexões ativas: userId -> Map<connectionId, Subject> */\n  private readonly connections = new Map<\n    string,\n    Map<string, Subject<MessageEvent>>\n  >();\n\n  /** Intervalo de heartbeat em milissegundos (30 segundos) */\n  private readonly heartbeatInterval = 30000;\n\n  /** Máximo de conexões por usuário */\n  private readonly maxConnectionsPerUser = 5;\n\n  /**\n   * Cria uma nova conexão SSE para o usuário\n   * @param userId ID do usuário\n   * @param clientInfo Informações do cliente (opcional)\n   * @returns Observable de MessageEvent para a conexão SSE\n   */\n  createConnection(\n    userId: string,\n    clientInfo?: { userAgent?: string; ip?: string },\n  ): Observable<MessageEvent> {\n    const connectionId = this.generateConnectionId();\n    const subject = new Subject<MessageEvent>();\n\n    // Inicializa mapa do usuário se não existir\n    if (!this.connections.has(userId)) {\n      this.connections.set(userId, new Map());\n    }\n\n    const userConnections = this.connections.get(userId)!;\n\n    // Verifica limite de conexões por usuário\n    if (userConnections.size >= this.maxConnectionsPerUser) {\n      this.logger.warn(\n        `Usuário ${userId} atingiu o limite de ${this.maxConnectionsPerUser} conexões`,\n      );\n      // Remove a conexão mais antiga\n      const oldestConnectionId = userConnections.keys().next().value;\n      this.removeConnection(userId, oldestConnectionId);\n    }\n\n    userConnections.set(connectionId, subject);\n    this.logger.log(`Nova conexão SSE: ${userId}:${connectionId}`);\n\n    if (clientInfo) {\n      this.logger.debug(\n        `Cliente conectado: ${clientInfo.userAgent} - IP: ${clientInfo.ip}`,\n      );\n    }\n\n    // Configura heartbeat\n    const heartbeat$ = interval(this.heartbeatInterval).pipe(\n      map(() => {\n        const heartbeatEvent: HeartbeatEvent = {\n          type: 'heartbeat',\n          timestamp: new Date(),\n          connectionId,\n        };\n\n        return {\n          data: JSON.stringify(heartbeatEvent),\n        } as MessageEvent;\n      }),\n    );\n\n    // Combina notificações com heartbeat\n    return new Observable<MessageEvent>((observer) => {\n      // Envia evento de conexão estabelecida\n      observer.next({\n        data: JSON.stringify({\n          type: 'connection_established',\n          connectionId,\n          timestamp: new Date(),\n        }),\n      } as MessageEvent);\n\n      const subscription = subject.asObservable().subscribe(observer);\n      const heartbeatSub = heartbeat$.subscribe(observer);\n\n      // Cleanup na desconexão\n      return () => {\n        subscription.unsubscribe();\n        heartbeatSub.unsubscribe();\n        this.removeConnection(userId, connectionId);\n      };\n    });\n  }\n\n  /**\n   * Envia notificação para usuário específico\n   * @param userId ID do usuário destinatário\n   * @param notification Dados da notificação\n   */\n  sendToUser(userId: string, notification: SseNotification): void {\n    const userConnections = this.connections.get(userId);\n\n    if (!userConnections || userConnections.size === 0) {\n      this.logger.warn(`Usuário ${userId} não tem conexões ativas`);\n      return;\n    }\n\n    const messageEvent: MessageEvent = {\n      data: JSON.stringify({\n        ...notification,\n        timestamp: notification.timestamp.toISOString(),\n      }),\n    } as MessageEvent;\n\n    // Envia para todas as conexões do usuário\n    let successCount = 0;\n    userConnections.forEach((subject, connectionId) => {\n      try {\n        subject.next(messageEvent);\n        successCount++;\n        this.logger.debug(`Notificação enviada: ${userId}:${connectionId}`);\n      } catch (error) {\n        this.logger.error(\n          `Erro ao enviar notificação para ${userId}:${connectionId}: ${error.message}`,\n        );\n        this.removeConnection(userId, connectionId);\n      }\n    });\n\n    this.logger.log(\n      `Notificação enviada para ${successCount}/${userConnections.size} conexões do usuário ${userId}`,\n    );\n  }\n\n  /**\n   * Envia notificação para múltiplos usuários\n   * @param userIds Lista de IDs dos usuários\n   * @param notification Dados da notificação (sem userId)\n   */\n  sendToUsers(\n    userIds: string[],\n    notification: Omit<SseNotification, 'userId'>,\n  ): void {\n    this.logger.log(\n      `Enviando notificação em massa para ${userIds.length} usuários`,\n    );\n\n    userIds.forEach((userId) => {\n      this.sendToUser(userId, { ...notification, userId });\n    });\n  }\n\n  /**\n   * Envia notificação broadcast para todos os usuários conectados\n   * @param notification Dados da notificação\n   */\n  broadcastToAll(notification: Omit<SseNotification, 'userId'>): void {\n    const connectedUserIds = Array.from(this.connections.keys());\n    this.logger.log(\n      `Enviando broadcast para ${connectedUserIds.length} usuários conectados`,\n    );\n\n    this.sendToUsers(connectedUserIds, notification);\n  }\n\n  /**\n   * Remove uma conexão específica\n   * @param userId ID do usuário\n   * @param connectionId ID da conexão\n   */\n  removeConnection(userId: string, connectionId: string): void {\n    const userConnections = this.connections.get(userId);\n    if (userConnections) {\n      const subject = userConnections.get(connectionId);\n      if (subject) {\n        subject.complete();\n      }\n\n      userConnections.delete(connectionId);\n\n      // Remove mapa do usuário se não houver mais conexões\n      if (userConnections.size === 0) {\n        this.connections.delete(userId);\n      }\n\n      this.logger.log(`Conexão removida: ${userId}:${connectionId}`);\n    }\n  }\n\n  /**\n   * Remove todas as conexões de um usuário\n   * @param userId ID do usuário\n   */\n  removeUserConnections(userId: string): void {\n    const userConnections = this.connections.get(userId);\n    if (userConnections) {\n      userConnections.forEach((subject, connectionId) => {\n        subject.complete();\n        this.logger.log(`Conexão removida: ${userId}:${connectionId}`);\n      });\n\n      this.connections.delete(userId);\n      this.logger.log(`Todas as conexões do usuário ${userId} foram removidas`);\n    }\n  }\n\n  /**\n   * Verifica se um usuário tem conexões ativas\n   * @param userId ID do usuário\n   * @returns true se o usuário tem conexões ativas\n   */\n  hasActiveConnections(userId: string): boolean {\n    const userConnections = this.connections.get(userId);\n    return userConnections ? userConnections.size > 0 : false;\n  }\n\n  /**\n   * Retorna estatísticas das conexões\n   * @returns Estatísticas detalhadas das conexões SSE\n   */\n  getConnectionStats(): SseConnectionStats {\n    let totalConnections = 0;\n    const connectionsPerUser: Record<string, number> = {};\n\n    this.connections.forEach((userConns, userId) => {\n      const connectionCount = userConns.size;\n      totalConnections += connectionCount;\n      connectionsPerUser[userId] = connectionCount;\n    });\n\n    return {\n      totalUsers: this.connections.size,\n      totalConnections,\n      connectionsPerUser,\n      lastUpdated: new Date(),\n    };\n  }\n\n  /**\n   * Retorna lista de usuários conectados\n   * @returns Array com IDs dos usuários conectados\n   */\n  getConnectedUsers(): string[] {\n    return Array.from(this.connections.keys());\n  }\n\n  /**\n   * Limpa todas as conexões (usado para shutdown graceful)\n   */\n  clearAllConnections(): void {\n    this.logger.log('Limpando todas as conexões SSE');\n\n    this.connections.forEach((userConns, userId) => {\n      userConns.forEach((subject, connectionId) => {\n        subject.complete();\n      });\n    });\n\n    this.connections.clear();\n    this.logger.log('Todas as conexões SSE foram limpas');\n  }\n\n  /**\n   * Gera um ID único para a conexão\n   * @returns ID único da conexão\n   */\n  private generateConnectionId(): string {\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n"],"version":3}