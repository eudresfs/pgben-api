61a14c47bb2fb9d4d9cb5fa2c88ebed5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParametroConverter = void 0;
const enums_1 = require("../../../enums");
const exceptions_1 = require("../exceptions");
/**
 * Classe utilitária que fornece métodos para converter valores de parâmetros
 * entre string e seus tipos nativos correspondentes.
 */
class ParametroConverter {
    /**
     * Converte um valor de string para o tipo especificado.
     *
     * @param chave - Chave do parâmetro (usado para mensagens de erro)
     * @param valor - Valor em formato string
     * @param tipo - Tipo para o qual converter
     * @returns O valor convertido para o tipo especificado
     * @throws ParametroTipoInvalidoException se a conversão falhar
     */
    static paraValorTipado(chave, valor, tipo) {
        try {
            switch (tipo) {
                case enums_1.ParametroTipoEnum.STRING:
                    return valor;
                case enums_1.ParametroTipoEnum.NUMBER:
                    const numero = Number(valor);
                    if (isNaN(numero)) {
                        throw new exceptions_1.ParametroTipoInvalidoException(chave, valor, tipo);
                    }
                    return numero;
                case enums_1.ParametroTipoEnum.BOOLEAN:
                    if (valor.toLowerCase() === 'true') {
                        return true;
                    }
                    if (valor.toLowerCase() === 'false') {
                        return false;
                    }
                    if (valor === '1') {
                        return true;
                    }
                    if (valor === '0') {
                        return false;
                    }
                    throw new exceptions_1.ParametroTipoInvalidoException(chave, valor, tipo);
                case enums_1.ParametroTipoEnum.JSON:
                    return JSON.parse(valor);
                case enums_1.ParametroTipoEnum.DATE:
                    const data = new Date(valor);
                    if (isNaN(data.getTime())) {
                        throw new exceptions_1.ParametroTipoInvalidoException(chave, valor, tipo);
                    }
                    return data;
                default:
                    throw new exceptions_1.ParametroTipoInvalidoException(chave, valor, tipo);
            }
        }
        catch (error) {
            throw new exceptions_1.ParametroTipoInvalidoException(chave, valor, tipo);
        }
    }
    /**
     * Converte um valor de qualquer tipo para string para armazenamento.
     *
     * @param valor - Valor a ser convertido
     * @param tipo - Tipo original do valor
     * @returns O valor convertido para string
     */
    static paraString(valor, tipo) {
        if (valor === null || valor === undefined) {
            return '';
        }
        switch (tipo) {
            case enums_1.ParametroTipoEnum.STRING:
                return String(valor);
            case enums_1.ParametroTipoEnum.NUMBER:
                return String(valor);
            case enums_1.ParametroTipoEnum.BOOLEAN:
                return valor ? 'true' : 'false';
            case enums_1.ParametroTipoEnum.JSON:
                return JSON.stringify(valor);
            case enums_1.ParametroTipoEnum.DATE:
                if (valor instanceof Date) {
                    return valor.toISOString();
                }
                // Tenta converter para Date se não for uma instância
                const data = new Date(valor);
                if (isNaN(data.getTime())) {
                    return String(valor); // Fallback
                }
                return data.toISOString();
            default:
                return String(valor);
        }
    }
    /**
     * Verifica se um valor string pode ser convertido para o tipo especificado.
     *
     * @param valor - Valor em formato string
     * @param tipo - Tipo para o qual verificar a conversão
     * @returns true se o valor pode ser convertido, false caso contrário
     */
    static podeConverterPara(valor, tipo) {
        try {
            this.paraValorTipado('validação', valor, tipo);
            return true;
        }
        catch (error) {
            return false;
        }
    }
    /**
     * Formata um valor para exibição amigável, conforme seu tipo.
     *
     * @param valor - Valor a ser formatado
     * @param tipo - Tipo do valor
     * @returns String formatada para exibição
     */
    static formatarParaExibicao(valor, tipo) {
        if (valor === null || valor === undefined) {
            return '';
        }
        switch (tipo) {
            case enums_1.ParametroTipoEnum.DATE:
                if (valor instanceof Date) {
                    // Formato: DD/MM/YYYY HH:MM
                    return `${valor.getDate().toString().padStart(2, '0')}/${(valor.getMonth() + 1).toString().padStart(2, '0')}/${valor.getFullYear()} ${valor.getHours().toString().padStart(2, '0')}:${valor.getMinutes().toString().padStart(2, '0')}`;
                }
                return String(valor);
            case enums_1.ParametroTipoEnum.JSON:
                if (typeof valor === 'object') {
                    return JSON.stringify(valor, null, 2);
                }
                return String(valor);
            default:
                return String(valor);
        }
    }
}
exports.ParametroConverter = ParametroConverter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGNvbmZpZ3VyYWNhb1xcdXRpbFxcY29udmVydGVycy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwwQ0FBbUQ7QUFDbkQsOENBQStEO0FBRS9EOzs7R0FHRztBQUNILE1BQWEsa0JBQWtCO0lBQzdCOzs7Ozs7OztPQVFHO0lBQ0gsTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFhLEVBQUUsS0FBYSxFQUFFLElBQXVCO1FBQzFFLElBQUksQ0FBQztZQUNILFFBQVEsSUFBSSxFQUFFLENBQUM7Z0JBQ2IsS0FBSyx5QkFBaUIsQ0FBQyxNQUFNO29CQUMzQixPQUFPLEtBQUssQ0FBQztnQkFFZixLQUFLLHlCQUFpQixDQUFDLE1BQU07b0JBQzNCLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDN0IsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQzt3QkFDbEIsTUFBTSxJQUFJLDJDQUE4QixDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQy9ELENBQUM7b0JBQ0QsT0FBTyxNQUFNLENBQUM7Z0JBRWhCLEtBQUsseUJBQWlCLENBQUMsT0FBTztvQkFDNUIsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssTUFBTSxFQUFFLENBQUM7d0JBQUEsT0FBTyxJQUFJLENBQUM7b0JBQUEsQ0FBQztvQkFDbEQsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUssT0FBTyxFQUFFLENBQUM7d0JBQUEsT0FBTyxLQUFLLENBQUM7b0JBQUEsQ0FBQztvQkFDcEQsSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUM7d0JBQUEsT0FBTyxJQUFJLENBQUM7b0JBQUEsQ0FBQztvQkFDakMsSUFBSSxLQUFLLEtBQUssR0FBRyxFQUFFLENBQUM7d0JBQUEsT0FBTyxLQUFLLENBQUM7b0JBQUEs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QUNaLENBQUM7UUFFRCxRQUFRLElBQUksRUFBRSxDQUFDO1lBQ2IsS0FBSyx5QkFBaUIsQ0FBQyxJQUFJO2dCQUN6QixJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUUsQ0FBQztvQkFDMUIsNEJBQTRCO29CQUM1QixPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDek8sQ0FBQztnQkFDRCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV2QixLQUFLLHlCQUFpQixDQUFDLElBQUk7Z0JBQ3pCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7b0JBQzlCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO2dCQUNELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXZCO2dCQUNFLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUF4SUQsZ0RBd0lDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxtb2R1bGVzXFxjb25maWd1cmFjYW9cXHV0aWxcXGNvbnZlcnRlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyYW1ldHJvVGlwb0VudW0gfSBmcm9tICcuLi8uLi8uLi9lbnVtcyc7XG5pbXBvcnQgeyBQYXJhbWV0cm9UaXBvSW52YWxpZG9FeGNlcHRpb24gfSBmcm9tICcuLi9leGNlcHRpb25zJztcblxuLyoqXG4gKiBDbGFzc2UgdXRpbGl0w6FyaWEgcXVlIGZvcm5lY2UgbcOpdG9kb3MgcGFyYSBjb252ZXJ0ZXIgdmFsb3JlcyBkZSBwYXLDom1ldHJvc1xuICogZW50cmUgc3RyaW5nIGUgc2V1cyB0aXBvcyBuYXRpdm9zIGNvcnJlc3BvbmRlbnRlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBhcmFtZXRyb0NvbnZlcnRlciB7XG4gIC8qKlxuICAgKiBDb252ZXJ0ZSB1bSB2YWxvciBkZSBzdHJpbmcgcGFyYSBvIHRpcG8gZXNwZWNpZmljYWRvLlxuICAgKiBcbiAgICogQHBhcmFtIGNoYXZlIC0gQ2hhdmUgZG8gcGFyw6JtZXRybyAodXNhZG8gcGFyYSBtZW5zYWdlbnMgZGUgZXJybylcbiAgICogQHBhcmFtIHZhbG9yIC0gVmFsb3IgZW0gZm9ybWF0byBzdHJpbmdcbiAgICogQHBhcmFtIHRpcG8gLSBUaXBvIHBhcmEgbyBxdWFsIGNvbnZlcnRlclxuICAgKiBAcmV0dXJucyBPIHZhbG9yIGNvbnZlcnRpZG8gcGFyYSBvIHRpcG8gZXNwZWNpZmljYWRvXG4gICAqIEB0aHJvd3MgUGFyYW1ldHJvVGlwb0ludmFsaWRvRXhjZXB0aW9uIHNlIGEgY29udmVyc8OjbyBmYWxoYXJcbiAgICovXG4gIHN0YXRpYyBwYXJhVmFsb3JUaXBhZG8oY2hhdmU6IHN0cmluZywgdmFsb3I6IHN0cmluZywgdGlwbzogUGFyYW1ldHJvVGlwb0VudW0pOiBhbnkge1xuICAgIHRyeSB7XG4gICAgICBzd2l0Y2ggKHRpcG8pIHtcbiAgICAgICAgY2FzZSBQYXJhbWV0cm9UaXBvRW51bS5TVFJJTkc6XG4gICAgICAgICAgcmV0dXJuIHZhbG9yO1xuICAgICAgICBcbiAgICAgICAgY2FzZSBQYXJhbWV0cm9UaXBvRW51bS5OVU1CRVI6XG4gICAgICAgICAgY29uc3QgbnVtZXJvID0gTnVtYmVyKHZhbG9yKTtcbiAgICAgICAgICBpZiAoaXNOYU4obnVtZXJvKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBhcmFtZXRyb1RpcG9JbnZhbGlkb0V4Y2VwdGlvbihjaGF2ZSwgdmFsb3IsIHRpcG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbnVtZXJvO1xuICAgICAgICBcbiAgICAgICAgY2FzZSBQYXJhbWV0cm9UaXBvRW51bS5CT09MRUFOOlxuICAgICAgICAgIGlmICh2YWxvci50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtyZXR1cm4gdHJ1ZTt9XG4gICAgICAgICAgaWYgKHZhbG9yLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZScpIHtyZXR1cm4gZmFsc2U7fVxuICAgICAgICAgIGlmICh2YWxvciA9PT0gJzEnKSB7cmV0dXJuIHRydWU7fVxuICAgICAgICAgIGlmICh2YWxvciA9PT0gJzAnKSB7cmV0dXJuIGZhbHNlO31cbiAgICAgICAgICB0aHJvdyBuZXcgUGFyYW1ldHJvVGlwb0ludmFsaWRvRXhjZXB0aW9uKGNoYXZlLCB2YWxvciwgdGlwbyk7XG4gICAgICAgIFxuICAgICAgICBjYXNlIFBhcmFtZXRyb1RpcG9FbnVtLkpTT046XG4gICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsb3IpO1xuICAgICAgICBcbiAgICAgICAgY2FzZSBQYXJhbWV0cm9UaXBvRW51bS5EQVRFOlxuICAgICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGF0ZSh2YWxvcik7XG4gICAgICAgICAgaWYgKGlzTmFOKGRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFBhcmFtZXRyb1RpcG9JbnZhbGlkb0V4Y2VwdGlvbihjaGF2ZSwgdmFsb3IsIHRpcG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IFBhcmFtZXRyb1RpcG9JbnZhbGlkb0V4Y2VwdGlvbihjaGF2ZSwgdmFsb3IsIHRpcG8pO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyYW1ldHJvVGlwb0ludmFsaWRvRXhjZXB0aW9uKGNoYXZlLCB2YWxvciwgdGlwbyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRlIHVtIHZhbG9yIGRlIHF1YWxxdWVyIHRpcG8gcGFyYSBzdHJpbmcgcGFyYSBhcm1hemVuYW1lbnRvLlxuICAgKiBcbiAgICogQHBhcmFtIHZhbG9yIC0gVmFsb3IgYSBzZXIgY29udmVydGlkb1xuICAgKiBAcGFyYW0gdGlwbyAtIFRpcG8gb3JpZ2luYWwgZG8gdmFsb3JcbiAgICogQHJldHVybnMgTyB2YWxvciBjb252ZXJ0aWRvIHBhcmEgc3RyaW5nXG4gICAqL1xuICBzdGF0aWMgcGFyYVN0cmluZyh2YWxvcjogYW55LCB0aXBvOiBQYXJhbWV0cm9UaXBvRW51bSk6IHN0cmluZyB7XG4gICAgaWYgKHZhbG9yID09PSBudWxsIHx8IHZhbG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRpcG8pIHtcbiAgICAgIGNhc2UgUGFyYW1ldHJvVGlwb0VudW0uU1RSSU5HOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbG9yKTtcbiAgICAgIFxuICAgICAgY2FzZSBQYXJhbWV0cm9UaXBvRW51bS5OVU1CRVI6XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsb3IpO1xuICAgICAgXG4gICAgICBjYXNlIFBhcmFtZXRyb1RpcG9FbnVtLkJPT0xFQU46XG4gICAgICAgIHJldHVybiB2YWxvciA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgICBcbiAgICAgIGNhc2UgUGFyYW1ldHJvVGlwb0VudW0uSlNPTjpcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbG9yKTtcbiAgICAgIFxuICAgICAgY2FzZSBQYXJhbWV0cm9UaXBvRW51bS5EQVRFOlxuICAgICAgICBpZiAodmFsb3IgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbG9yLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFRlbnRhIGNvbnZlcnRlciBwYXJhIERhdGUgc2UgbsOjbyBmb3IgdW1hIGluc3TDom5jaWFcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBEYXRlKHZhbG9yKTtcbiAgICAgICAgaWYgKGlzTmFOKGRhdGEuZ2V0VGltZSgpKSkge1xuICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsb3IpOyAvLyBGYWxsYmFja1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhLnRvSVNPU3RyaW5nKCk7XG4gICAgICBcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsb3IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSB1bSB2YWxvciBzdHJpbmcgcG9kZSBzZXIgY29udmVydGlkbyBwYXJhIG8gdGlwbyBlc3BlY2lmaWNhZG8uXG4gICAqIFxuICAgKiBAcGFyYW0gdmFsb3IgLSBWYWxvciBlbSBmb3JtYXRvIHN0cmluZ1xuICAgKiBAcGFyYW0gdGlwbyAtIFRpcG8gcGFyYSBvIHF1YWwgdmVyaWZpY2FyIGEgY29udmVyc8Ojb1xuICAgKiBAcmV0dXJucyB0cnVlIHNlIG8gdmFsb3IgcG9kZSBzZXIgY29udmVydGlkbywgZmFsc2UgY2FzbyBjb250csOhcmlvXG4gICAqL1xuICBzdGF0aWMgcG9kZUNvbnZlcnRlclBhcmEodmFsb3I6IHN0cmluZywgdGlwbzogUGFyYW1ldHJvVGlwb0VudW0pOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5wYXJhVmFsb3JUaXBhZG8oJ3ZhbGlkYcOnw6NvJywgdmFsb3IsIHRpcG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0YSB1bSB2YWxvciBwYXJhIGV4aWJpw6fDo28gYW1pZ8OhdmVsLCBjb25mb3JtZSBzZXUgdGlwby5cbiAgICogXG4gICAqIEBwYXJhbSB2YWxvciAtIFZhbG9yIGEgc2VyIGZvcm1hdGFkb1xuICAgKiBAcGFyYW0gdGlwbyAtIFRpcG8gZG8gdmFsb3JcbiAgICogQHJldHVybnMgU3RyaW5nIGZvcm1hdGFkYSBwYXJhIGV4aWJpw6fDo29cbiAgICovXG4gIHN0YXRpYyBmb3JtYXRhclBhcmFFeGliaWNhbyh2YWxvcjogYW55LCB0aXBvOiBQYXJhbWV0cm9UaXBvRW51bSk6IHN0cmluZyB7XG4gICAgaWYgKHZhbG9yID09PSBudWxsIHx8IHZhbG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRpcG8pIHtcbiAgICAgIGNhc2UgUGFyYW1ldHJvVGlwb0VudW0uREFURTpcbiAgICAgICAgaWYgKHZhbG9yIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgIC8vIEZvcm1hdG86IEREL01NL1lZWVkgSEg6TU1cbiAgICAgICAgICByZXR1cm4gYCR7dmFsb3IuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX0vJHsodmFsb3IuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKX0vJHt2YWxvci5nZXRGdWxsWWVhcigpfSAke3ZhbG9yLmdldEhvdXJzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpfToke3ZhbG9yLmdldE1pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyl9YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbG9yKTtcbiAgICAgIFxuICAgICAgY2FzZSBQYXJhbWV0cm9UaXBvRW51bS5KU09OOlxuICAgICAgICBpZiAodHlwZW9mIHZhbG9yID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWxvciwgbnVsbCwgMik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFN0cmluZyh2YWxvcik7XG4gICAgICBcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBTdHJpbmcodmFsb3IpO1xuICAgIH1cbiAgfVxufVxuIl0sInZlcnNpb24iOjN9