c6c358d2fba7a9b1b522e45befbfe411
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricaConfiguracao = exports.EstrategiaAmostragem = exports.TipoAgendamento = void 0;
const typeorm_1 = require("typeorm");
const metrica_definicao_entity_1 = require("./metrica-definicao.entity");
/**
 * Tipos de agendamento de coleta de métricas
 */
var TipoAgendamento;
(function (TipoAgendamento) {
    /** Intervalo fixo em segundos */
    TipoAgendamento["INTERVALO"] = "intervalo";
    /** Expressão cron para agendamento mais complexo */
    TipoAgendamento["CRON"] = "cron";
    /** Coleta baseada em eventos específicos */
    TipoAgendamento["EVENTO"] = "evento";
    /** Coleta manual via API */
    TipoAgendamento["MANUAL"] = "manual";
})(TipoAgendamento || (exports.TipoAgendamento = TipoAgendamento = {}));
/**
 * Estratégias de amostragem para coleta de dados
 */
var EstrategiaAmostragem;
(function (EstrategiaAmostragem) {
    /** Coleta todos os dados disponíveis */
    EstrategiaAmostragem["COMPLETA"] = "completa";
    /** Amostragem aleatória */
    EstrategiaAmostragem["ALEATORIA"] = "aleatoria";
    /** Amostragem sistemática (a cada N registros) */
    EstrategiaAmostragem["SISTEMATICA"] = "sistematica";
    /** Amostragem estratificada por dimensão */
    EstrategiaAmostragem["ESTRATIFICADA"] = "estratificada";
})(EstrategiaAmostragem || (exports.EstrategiaAmostragem = EstrategiaAmostragem = {}));
/**
 * Configuração para coleta, armazenamento e exibição de uma métrica
 *
 * Esta entidade permite configurar como uma métrica será coletada,
 * processada, armazenada e exibida no sistema.
 */
let MetricaConfiguracao = class MetricaConfiguracao {
    id;
    /**
     * Referência para a definição da métrica
     */
    metrica_id;
    /**
     * Relacionamento com a definição da métrica
     *
     * Usando lazy loading para evitar dependências circulares
     */
    metrica;
    /**
     * Habilita ou desabilita a coleta automática
     */
    coleta_automatica;
    /**
     * Tipo de agendamento para coleta automática
     */
    tipo_agendamento;
    /**
     * Valor do intervalo de coleta em segundos (para tipo INTERVALO)
     */
    intervalo_segundos;
    /**
     * Expressão cron para agendamento complexo (para tipo CRON)
     * Exemplo: '0 0 * * *' (diariamente à meia-noite)
     */
    expressao_cron;
    /**
     * Nome do evento que dispara a coleta (para tipo EVENTO)
     * Exemplo: 'beneficio_aprovado', 'usuario_cadastrado'
     */
    nome_evento;
    /**
     * Número máximo de snapshots a serem mantidos
     * (0 = sem limite, mantém todo o histórico)
     */
    max_snapshots;
    /**
     * Período máximo de retenção em dias
     * (0 = sem limite, mantém todo o histórico)
     */
    periodo_retencao_dias;
    /**
     * Estratégia de amostragem para coleta de dados
     */
    estrategia_amostragem;
    /**
     * Tamanho da amostra (quando aplicável)
     */
    tamanho_amostra;
    /**
     * Habilita ou desabilita o cacheamento dos valores
     */
    cacheamento_habilitado;
    /**
     * Tempo de vida do cache em segundos
     */
    cache_ttl;
    /**
     * Configurações de alertas baseados no valor da métrica
     * Exemplo: [
     *   { "tipo": "valor_maximo", "valor": 100, "mensagem": "Valor excedeu o limite", "severidade": "alta" },
     *   { "tipo": "valor_minimo", "valor": 10, "mensagem": "Valor abaixo do mínimo", "severidade": "media" }
     * ]
     */
    alertas;
    /**
     * Configurações de visualização
     * Exemplo: { "cor": "#FF5500", "icone": "chart-line", "destaque": true }
     */
    visualizacao;
    /**
     * Flag que indica se a métrica deve ser exibida em dashboards
     */
    exibir_dashboard;
    /**
     * Prioridade de exibição (ordem) no dashboard (menor = mais importante)
     */
    prioridade_dashboard;
    /**
     * Usuário que criou a configuração
     */
    criado_por;
    /**
     * Usuário que atualizou a configuração pela última vez
     */
    atualizado_por;
    /**
     * Data de criação do registro
     */
    created_at;
    /**
     * Data da última atualização do registro
     */
    updated_at;
};
exports.MetricaConfiguracao = MetricaConfiguracao;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'uuid' }),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "metrica_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => metrica_definicao_entity_1.MetricaDefinicao, (definicao) => definicao.configuracoes, { onDelete: 'CASCADE', lazy: true }),
    (0, typeorm_1.JoinColumn)({ name: 'metrica_id' }),
    __metadata("design:type", typeof (_a = typeof Promise !== "undefined" && Promise) === "function" ? _a : Object)
], MetricaConfiguracao.prototype, "metrica", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    __metadata("design:type", Boolean)
], MetricaConfiguracao.prototype, "coleta_automatica", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: TipoAgendamento,
        enumName: 'tipo_agendamento',
        default: TipoAgendamento.INTERVALO,
    }),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "tipo_agendamento", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 86400 }) // Padrão: 1 dia
    ,
    __metadata("design:type", Number)
], MetricaConfiguracao.prototype, "intervalo_segundos", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100, nullable: true }),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "expressao_cron", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100, nullable: true }),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "nome_evento", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 0 }),
    __metadata("design:type", Number)
], MetricaConfiguracao.prototype, "max_snapshots", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 365 }),
    __metadata("design:type", Number)
], MetricaConfiguracao.prototype, "periodo_retencao_dias", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: EstrategiaAmostragem,
        enumName: 'estrategia_amostragem',
        default: EstrategiaAmostragem.COMPLETA,
    }),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "estrategia_amostragem", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 0 }),
    __metadata("design:type", Number)
], MetricaConfiguracao.prototype, "tamanho_amostra", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    __metadata("design:type", Boolean)
], MetricaConfiguracao.prototype, "cacheamento_habilitado", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 300 }) // Padrão: 5 minutos
    ,
    __metadata("design:type", Number)
], MetricaConfiguracao.prototype, "cache_ttl", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", Array)
], MetricaConfiguracao.prototype, "alertas", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'jsonb', nullable: true }),
    __metadata("design:type", typeof (_b = typeof Record !== "undefined" && Record) === "function" ? _b : Object)
], MetricaConfiguracao.prototype, "visualizacao", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: true }),
    __metadata("design:type", Boolean)
], MetricaConfiguracao.prototype, "exibir_dashboard", void 0);
__decorate([
    (0, typeorm_1.Column)({ default: 100 }),
    __metadata("design:type", Number)
], MetricaConfiguracao.prototype, "prioridade_dashboard", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100, nullable: true }),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "criado_por", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100, nullable: true }),
    __metadata("design:type", String)
], MetricaConfiguracao.prototype, "atualizado_por", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], MetricaConfiguracao.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], MetricaConfiguracao.prototype, "updated_at", void 0);
exports.MetricaConfiguracao = MetricaConfiguracao = __decorate([
    (0, typeorm_1.Entity)('metrica_configuracao'),
    (0, typeorm_1.Index)(['metrica_id'])
], MetricaConfiguracao);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,