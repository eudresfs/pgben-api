cf9e2ea303ecaa827d1cb7617cabe834
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var CacheMetricsInterceptor_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheMetricsInterceptor = void 0;
const common_1 = require("@nestjs/common");
const operators_1 = require("rxjs/operators");
const enhanced_metrics_service_1 = require("./enhanced-metrics.service");
const config_1 = require("@nestjs/config");
/**
 * Interceptor para coletar métricas de operações de cache
 *
 * Este interceptor monitora operações de cache e registra métricas
 * como taxa de acertos, tempo de resposta e operações totais.
 */
let CacheMetricsInterceptor = CacheMetricsInterceptor_1 = class CacheMetricsInterceptor {
    metricsService;
    configService;
    logger = new common_1.Logger(CacheMetricsInterceptor_1.name);
    cacheEnabled;
    cacheType;
    // Contadores para cálculo de taxa de acertos
    cacheHits = 0;
    cacheMisses = 0;
    lastReportTime = Date.now();
    reportInterval = 60000; // 1 minuto
    constructor(metricsService, configService) {
        this.metricsService = metricsService;
        this.configService = configService;
        // Verificar se o Redis está habilitado
        this.cacheEnabled = this.configService.get('DISABLE_REDIS') !== 'true';
        this.cacheType = this.cacheEnabled ? 'redis' : 'memory';
        // Iniciar relatório periódico de taxa de acertos
        this.scheduleHitRatioReport();
    }
    /**
     * Intercepta operações de cache e coleta métricas
     */
    intercept(context, next) {
        // Se o cache estiver desabilitado, apenas continua a execução
        if (!this.cacheEnabled) {
            return next.handle();
        }
        const request = context.switchToHttp().getRequest();
        const { method, url } = request;
        // Identificar operação de cache com base no método e URL
        const cacheOperation = this.getCacheOperation(method, url);
        if (!cacheOperation) {
            return next.handle();
        }
        const startTime = process.hrtime();
        return next.handle().pipe((0, operators_1.tap)({
            next: (data) => {
                // Calcular duração da operação
                const [seconds, nanoseconds] = process.hrtime(startTime);
                const durationSeconds = seconds + nanoseconds / 1e9;
                // Determinar se foi um hit ou miss no cache
                const isCacheHit = this.isCacheHit(data, cacheOperation);
                // Registrar operação de cache
                this.metricsService.recordCacheOperation(cacheOperation, true, // operação bem-sucedida
                this.cacheType);
                // Registrar duração da operação
                this.metricsService.recordCacheOperationDuration(cacheOperation, durationSeconds, this.cacheType);
                // Atualizar contadores para taxa de acertos
                if (isCacheHit) {
                    this.cacheHits++;
                }
                else {
                    this.cacheMisses++;
                }
                // Atualizar taxa de acertos periodicamente
                this.updateHitRatioIfNeeded();
            },
            error: (error) => {
                // Registrar operação de cache com falha
                this.metricsService.recordCacheOperation(cacheOperation, false, // operação falhou
                this.cacheType);
                this.logger.error(`Erro em operação de cache ${cacheOperation}: ${error.message}`);
            },
        }));
    }
    /**
     * Identifica a operação de cache com base no método e URL
     */
    getCacheOperation(method, url) {
        // Mapear métodos HTTP para operações de cache
        if (method === 'GET' && url.includes('/api/')) {
            return 'get';
        }
        if ((method === 'POST' || method === 'PUT' || method === 'DELETE') && url.includes('/api/')) {
            return 'invalidate';
        }
        return null;
    }
    /**
     * Determina se uma operação resultou em um hit no cache
     */
    isCacheHit(data, operation) {
        // Lógica para determinar se foi um hit no cache
        // Esta é uma implementação simplificada e pode precisar ser ajustada
        // com base na estrutura de resposta real da aplicação
        if (operation === 'get') {
            // Verificar se os dados têm uma propriedade que indica origem do cache
            // ou usar heurística baseada no tempo de resposta
            return data && data._fromCache === true;
        }
        return false;
    }
    /**
     * Atualiza a taxa de acertos se o intervalo de relatório foi atingido
     */
    updateHitRatioIfNeeded() {
        const now = Date.now();
        if (now - this.lastReportTime >= this.reportInterval) {
            this.updateHitRatio();
            this.lastReportTime = now;
        }
    }
    /**
     * Calcula e atualiza a taxa de acertos do cache
     */
    updateHitRatio() {
        const total = this.cacheHits + this.cacheMisses;
        if (total > 0) {
            const ratio = this.cacheHits / total;
            this.metricsService.updateCacheHitRatio(ratio, this.cacheType);
            // Resetar contadores após o relatório
            this.cacheHits = 0;
            this.cacheMisses = 0;
            this.logger.debug(`Taxa de acertos do cache (${this.cacheType}): ${(ratio * 100).toFixed(2)}%`);
        }
    }
    /**
     * Agenda relatórios periódicos de taxa de acertos
     */
    scheduleHitRatioReport() {
        setInterval(() => {
            this.updateHitRatio();
        }, this.reportInterval);
    }
};
exports.CacheMetricsInterceptor = CacheMetricsInterceptor;
exports.CacheMetricsInterceptor = CacheMetricsInterceptor = CacheMetricsInterceptor_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof enhanced_metrics_service_1.EnhancedMetricsService !== "undefined" && enhanced_metrics_service_1.EnhancedMetricsService) === "function" ? _a : Object, typeof (_b = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _b : Object])
], CacheMetricsInterceptor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,