{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\metricas-coleta.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\metricas-coleta.service.ts"],"sourcesContent":["import { Injectable, Logger, OnModuleInit } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  Repository,\n  EntityManager,\n  DataSource,\n  Between,\n  MoreThan,\n} from 'typeorm';\nimport { EventEmitter2, OnEvent } from '@nestjs/event-emitter';\nimport { ConfigService } from '@nestjs/config';\nimport * as crypto from 'crypto';\nimport { ScheduleAdapterService } from '../../../shared/schedule/schedule-adapter.service';\n\nimport {\n  MetricaDefinicao,\n  TipoMetrica,\n} from '../../../entities/metrica-definicao.entity';\nimport { MetricaSnapshot } from '../../../entities/metrica-snapshot.entity';\nimport {\n  MetricaConfiguracao,\n  TipoAgendamento,\n} from '../../../entities/metrica-configuracao.entity';\nimport { MetricaCalculoService } from './metrica-calculo.service';\n\n/**\n * Serviço responsável pela coleta programada e reativa de métricas\n *\n * Este serviço gerencia o agendamento, coleta e armazenamento de métricas\n * conforme as configurações definidas para cada métrica no sistema.\n */\n@Injectable()\nexport class MetricasColetaService implements OnModuleInit {\n  private readonly logger = new Logger(MetricasColetaService.name);\n\n  constructor(\n    @InjectRepository(MetricaDefinicao)\n    private readonly metricaDefinicaoRepository: Repository<MetricaDefinicao>,\n\n    @InjectRepository(MetricaSnapshot)\n    private readonly metricaSnapshotRepository: Repository<MetricaSnapshot>,\n\n    @InjectRepository(MetricaConfiguracao)\n    private readonly metricaConfiguracaoRepository: Repository<MetricaConfiguracao>,\n\n    private readonly calculoService: MetricaCalculoService,\n    private readonly scheduleAdapter: ScheduleAdapterService,\n    private readonly eventEmitter: EventEmitter2,\n    private readonly configService: ConfigService,\n    private readonly dataSource: DataSource,\n  ) {}\n\n  /**\n   * Inicializa os agendamentos quando o módulo é carregado\n   */\n  async onModuleInit(): Promise<void> {\n    // Inicializar verificação de configurações de agendamento a cada hora\n    this.scheduleAdapter.scheduleInterval(\n      'verificar_configuracoes_agendamento',\n      3600000, // 1 hora em milissegundos\n      () => this.verificarConfiguracoesAgendamento(),\n    );\n\n    // Inicializar coleta diária de métricas à meia-noite\n    this.scheduleAdapter.scheduleDailyTask(\n      'coletar_metricas_diarias',\n      0, // hora (0 = meia-noite)\n      0, // minuto\n      () => this.coletarMetricasDiarias(),\n    );\n\n    // Inicializar o serviço de coleta\n    await this.inicializar();\n  }\n\n  /**\n   * Inicializa o serviço de coleta de métricas\n   * Configura jobs cron para métricas com agendamento\n   */\n  async inicializar(): Promise<void> {\n    this.logger.log('Inicializando serviço de coleta de métricas');\n\n    try {\n      // Carregar todas as configurações de métricas ativas com coleta automática\n      const configuracoes = await this.metricaConfiguracaoRepository.find({\n        where: { coleta_automatica: true },\n        relations: ['metrica'],\n      });\n\n      this.logger.log(\n        `Encontradas ${configuracoes.length} métricas configuradas para coleta automática`,\n      );\n\n      // Configurar agendamentos para cada métrica\n      for (const config of configuracoes) {\n        // Carregar a entidade metrica para acessar suas propriedades\n        const metrica = await config.metrica;\n\n        if (!metrica.ativa) {\n          this.logger.debug(\n            `Métrica ${metrica.codigo} não está ativa, ignorando agendamento`,\n          );\n          continue;\n        }\n\n        await this.configurarAgendamentoMetrica(config);\n      }\n\n      this.logger.log('Serviço de coleta de métricas inicializado com sucesso');\n    } catch (error) {\n      this.logger.error(\n        `Erro ao inicializar serviço de coleta: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Configura o agendamento para uma métrica específica\n   * @param config Configuração da métrica\n   */\n  private async configurarAgendamentoMetrica(\n    config: MetricaConfiguracao,\n  ): Promise<void> {\n    // Carregar a entidade metrica para acessar suas propriedades\n    const metrica = await config.metrica;\n    const jobId = `metrica_${metrica.codigo}`;\n\n    try {\n      // Cancelar agendamento existente, se houver\n      this.scheduleAdapter.cancelInterval(jobId);\n\n      // Configurar novo job conforme o tipo de agendamento\n      switch (config.tipo_agendamento) {\n        case TipoAgendamento.CRON:\n          if (config.expressao_cron) {\n            this.logger.debug(\n              `Configurando job cron para métrica ${metrica.codigo}: ${config.expressao_cron}`,\n            );\n\n            // Usamos o adaptador de agendamento personalizado\n            this.scheduleAdapter.scheduleInterval(\n              jobId,\n              this.calcularIntervaloEmMilissegundos(config.expressao_cron),\n              async () => {\n                try {\n                  await this.coletarMetrica(metrica.id);\n                } catch (err) {\n                  this.logger.error(\n                    `Erro ao coletar métrica ${metrica.codigo}: ${err.message}`,\n                  );\n                }\n              },\n            );\n\n            this.logger.log(\n              `Agendamento configurado para métrica ${metrica.codigo}`,\n            );\n          }\n          break;\n\n        case TipoAgendamento.INTERVALO:\n          if (config.intervalo_segundos > 0) {\n            this.logger.debug(\n              `Configurando job de intervalo para métrica ${metrica.codigo}: ${config.intervalo_segundos} segundos`,\n            );\n\n            const intervalo = config.intervalo_segundos * 1000;\n            this.logger.debug(\n              `Configurando job de intervalo para métrica ${metrica.codigo}: ${intervalo}ms`,\n            );\n\n            // Usar o adaptador de agendamento\n            this.scheduleAdapter.scheduleInterval(\n              jobId,\n              intervalo,\n              async () => {\n                try {\n                  await this.coletarMetrica(metrica.id);\n                } catch (err) {\n                  this.logger.error(\n                    `Erro ao coletar métrica ${metrica.codigo}: ${err.message}`,\n                  );\n                }\n              },\n            );\n\n            this.logger.log(\n              `Agendamento configurado para métrica ${metrica.codigo}`,\n            );\n          }\n          break;\n\n        case TipoAgendamento.EVENTO:\n          // A configuração para eventos é feita via decorador @OnEvent\n          this.logger.debug(\n            `Métrica ${metrica.codigo} configurada para coleta via evento: ${config.nome_evento}`,\n          );\n          break;\n\n        case TipoAgendamento.MANUAL:\n          this.logger.debug(\n            `Métrica ${metrica.codigo} configurada para coleta manual`,\n          );\n          break;\n\n        default:\n          this.logger.warn(\n            `Tipo de agendamento não suportado para métrica ${metrica.codigo}: ${config.tipo_agendamento}`,\n          );\n      }\n\n      this.logger.log(\n        `Agendamento configurado com sucesso para métrica: ${metrica.codigo}`,\n      );\n    } catch (error) {\n      this.logger.error(\n        `Erro ao configurar agendamento para métrica ${metrica.codigo}: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Manipulador de eventos para coleta de métricas baseada em eventos\n   * @param payload Dados do evento\n   */\n  @OnEvent('*')\n  async handleEvento(payload: any): Promise<void> {\n    if (!payload || !payload.evento) {\n      return;\n    }\n\n    const nomeEvento = payload.evento;\n    this.logger.debug(`Evento recebido: ${nomeEvento}`);\n\n    try {\n      // Buscar métricas configuradas para este evento\n      const configuracoes = await this.metricaConfiguracaoRepository.find({\n        where: {\n          coleta_automatica: true,\n          tipo_agendamento: TipoAgendamento.EVENTO,\n          nome_evento: nomeEvento,\n        },\n        relations: ['metrica'],\n      });\n\n      if (configuracoes.length === 0) {\n        return;\n      }\n\n      this.logger.debug(\n        `Encontradas ${configuracoes.length} métricas para coleta baseada no evento: ${nomeEvento}`,\n      );\n\n      // Coletar cada métrica encontrada\n      for (const config of configuracoes) {\n        // Carregar a entidade metrica para acessar suas propriedades\n        const metrica = await config.metrica;\n\n        if (metrica.ativa) {\n          this.coletarMetrica(metrica.id, payload).catch((err) =>\n            this.logger.error(\n              `Erro ao coletar métrica ${metrica.codigo} para evento ${nomeEvento}: ${err.message}`,\n            ),\n          );\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Erro ao processar evento ${nomeEvento}: ${error.message}`,\n        error.stack,\n      );\n    }\n  }\n\n  /**\n   * Coleta dados para uma métrica específica\n   * @param metricaId ID da métrica a ser coletada\n   * @param contexto Contexto adicional para a coleta (opcional)\n   * @returns Snapshot da métrica coletada\n   */\n  async coletarMetrica(\n    metricaId: string,\n    contexto?: any,\n  ): Promise<MetricaSnapshot> {\n    const inicioColeta = Date.now();\n    this.logger.debug(`Iniciando coleta para métrica ID: ${metricaId}`);\n\n    try {\n      // Buscar definição e configuração da métrica\n      const metrica = await this.metricaDefinicaoRepository.findOne({\n        where: { id: metricaId, ativa: true },\n        relations: ['configuracoes'],\n      });\n\n      if (!metrica) {\n        throw new Error(`Métrica não encontrada ou inativa: ${metricaId}`);\n      }\n\n      const config = metrica.configuracoes[0]; // Usar a primeira configuração disponível\n\n      if (!config) {\n        throw new Error(\n          `Configuração não encontrada para métrica: ${metrica.codigo}`,\n        );\n      }\n\n      // Definir período de referência para a coleta\n      const periodoFim = new Date();\n      let periodoInicio: Date;\n\n      // Calcular início do período com base na granularidade da métrica\n      switch (metrica.granularidade) {\n        case 'minuto':\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setMinutes(periodoInicio.getMinutes() - 1);\n          periodoInicio.setSeconds(0, 0);\n          break;\n        case 'hora':\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setHours(periodoInicio.getHours() - 1);\n          periodoInicio.setMinutes(0, 0, 0);\n          break;\n        case 'dia':\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setDate(periodoInicio.getDate() - 1);\n          periodoInicio.setHours(0, 0, 0, 0);\n          break;\n        case 'semana':\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setDate(periodoInicio.getDate() - 7);\n          periodoInicio.setHours(0, 0, 0, 0);\n          break;\n        case 'mes':\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setMonth(periodoInicio.getMonth() - 1);\n          periodoInicio.setDate(1);\n          periodoInicio.setHours(0, 0, 0, 0);\n          break;\n        case 'trimestre':\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setMonth(periodoInicio.getMonth() - 3);\n          periodoInicio.setDate(1);\n          periodoInicio.setHours(0, 0, 0, 0);\n          break;\n        case 'ano':\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setFullYear(periodoInicio.getFullYear() - 1);\n          periodoInicio.setMonth(0, 1);\n          periodoInicio.setHours(0, 0, 0, 0);\n          break;\n        default:\n          // Padrão: um dia\n          periodoInicio = new Date(periodoFim);\n          periodoInicio.setDate(periodoInicio.getDate() - 1);\n          periodoInicio.setHours(0, 0, 0, 0);\n      }\n\n      // Definir dimensões e metadados para o snapshot\n      const dimensoes = contexto?.dimensoes || {};\n      const metadados = {\n        origem: 'coleta_automatica',\n        job_id: `metrica_${metrica.codigo}`,\n        contexto: contexto ? JSON.stringify(contexto).substring(0, 1000) : null,\n      };\n\n      // Calcular hash das dimensões para garantir unicidade\n      const dimensoesHash = this.gerarHashDimensoes(dimensoes);\n\n      // Verificar se já existe um snapshot para o mesmo período e dimensões\n      const snapshotExistente = await this.metricaSnapshotRepository.findOne({\n        where: {\n          definicao_id: metrica.id,\n          periodo_inicio: periodoInicio,\n          periodo_fim: periodoFim,\n          dimensoes_hash: dimensoesHash,\n        },\n      });\n\n      if (snapshotExistente) {\n        this.logger.debug(\n          `Snapshot já existe para métrica ${metrica.codigo} no período especificado`,\n        );\n        return snapshotExistente;\n      }\n\n      // Calcular valor da métrica\n      const valorCalculado = await this.calculoService.calcularValorMetrica(\n        metrica,\n        periodoInicio,\n        periodoFim,\n        dimensoes,\n      );\n\n      // Formatar valor conforme configurações da métrica\n      const valorFormatado = this.formatarValorMetrica(valorCalculado, metrica);\n\n      // Criar snapshot\n      const snapshot = this.metricaSnapshotRepository.create({\n        definicao_id: metrica.id,\n        periodo_inicio: periodoInicio,\n        periodo_fim: periodoFim,\n        granularidade: metrica.granularidade,\n        valor: valorCalculado,\n        valor_formatado: valorFormatado,\n        dimensoes,\n        dimensoes_hash: dimensoesHash,\n        metadados,\n        versao_definicao: metrica.versao,\n        duracao_processamento_ms: Date.now() - inicioColeta,\n        status_coleta: 'sucesso',\n      });\n\n      // Salvar snapshot no banco de dados\n      const snapshotSalvo = await this.metricaSnapshotRepository.save(snapshot);\n\n      // Atualizar data da última coleta na definição da métrica\n      await this.metricaDefinicaoRepository.update(\n        { id: metrica.id },\n        { ultima_coleta: new Date() },\n      );\n\n      this.logger.log(\n        `Métrica coletada com sucesso: ${metrica.codigo}, valor: ${valorCalculado}`,\n      );\n\n      // Verificar se o valor ultrapassa limites configurados para alertas\n      await this.verificarAlertas(metrica, config, valorCalculado);\n\n      // Limpar snapshots antigos conforme política de retenção\n      this.limparSnapshotsAntigos(metrica.id, config).catch((err) =>\n        this.logger.error(`Erro ao limpar snapshots antigos: ${err.message}`),\n      );\n\n      return snapshotSalvo;\n    } catch (error) {\n      const duracao = Date.now() - inicioColeta;\n      this.logger.error(\n        `Erro ao coletar métrica ${metricaId}: ${error.message}`,\n        error.stack,\n      );\n\n      // Registrar snapshot com erro\n      try {\n        const metrica = await this.metricaDefinicaoRepository.findOne({\n          where: { id: metricaId },\n        });\n\n        if (metrica) {\n          const snapshot = this.metricaSnapshotRepository.create({\n            definicao_id: metricaId,\n            periodo_inicio: new Date(),\n            periodo_fim: new Date(),\n            granularidade: metrica.granularidade,\n            valor: 0,\n            valor_formatado: 'ERRO',\n            dimensoes: {},\n            dimensoes_hash: this.gerarHashDimensoes({}),\n            metadados: { erro: error.message },\n            duracao_processamento_ms: duracao,\n            status_coleta: 'erro',\n            mensagem_status: error.message.substring(0, 500),\n          });\n\n          await this.metricaSnapshotRepository.save(snapshot);\n        }\n      } catch (saveError) {\n        this.logger.error(\n          `Erro ao salvar snapshot de erro: ${saveError.message}`,\n        );\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Verifica se o valor da métrica ultrapassa limites configurados e gera alertas\n   * @param metrica Definição da métrica\n   * @param config Configuração da métrica\n   * @param valor Valor calculado\n   */\n  private async verificarAlertas(\n    metrica: MetricaDefinicao,\n    config: MetricaConfiguracao,\n    valor: number,\n  ): Promise<void> {\n    if (!config.alertas || config.alertas.length === 0) {\n      return;\n    }\n\n    for (const alerta of config.alertas) {\n      let condicaoAtivada = false;\n\n      // Verificar condição do alerta\n      switch (alerta.tipo) {\n        case 'valor_maximo':\n          condicaoAtivada = valor > alerta.valor;\n          break;\n        case 'valor_minimo':\n          condicaoAtivada = valor < alerta.valor;\n          break;\n        case 'valor_igual':\n          condicaoAtivada = valor === alerta.valor;\n          break;\n        case 'valor_mudanca_percentual':\n          try {\n            // Buscar snapshot anterior para comparação\n            const snapshotAnterior =\n              await this.metricaSnapshotRepository.findOne({\n                where: {\n                  definicao_id: metrica.id,\n                  periodo_fim: MoreThan(new Date(Date.now() - 86400000)), // Últimas 24h\n                },\n                order: { periodo_fim: 'DESC' },\n              });\n\n            if (snapshotAnterior) {\n              const variacaoPercentual =\n                ((valor - snapshotAnterior.valor) / snapshotAnterior.valor) *\n                100;\n              condicaoAtivada = Math.abs(variacaoPercentual) > alerta.valor;\n            }\n          } catch (error) {\n            this.logger.error(\n              `Erro ao verificar variação percentual: ${error.message}`,\n            );\n          }\n          break;\n      }\n\n      // Se a condição for satisfeita, emitir alerta\n      if (condicaoAtivada) {\n        const mensagem =\n          alerta.mensagem ||\n          `Alerta para métrica ${metrica.codigo}: valor ${valor} ${alerta.tipo === 'valor_maximo' ? 'acima' : 'abaixo'} do limite ${alerta.valor}`;\n\n        this.logger.warn(\n          `[ALERTA] ${mensagem} [Severidade: ${alerta.severidade || 'média'}]`,\n        );\n\n        // Emitir evento para ser capturado por outros serviços\n        this.eventEmitter.emit('metrica.alerta', {\n          metrica_id: metrica.id,\n          metrica_codigo: metrica.codigo,\n          metrica_nome: metrica.nome,\n          valor,\n          valor_limite: alerta.valor,\n          tipo_alerta: alerta.tipo,\n          mensagem,\n          severidade: alerta.severidade || 'média',\n          timestamp: new Date(),\n        });\n      }\n    }\n  }\n\n  /**\n   * Limpa snapshots antigos conforme política de retenção\n   * @param metricaId ID da métrica\n   * @param config Configuração da métrica\n   */\n  private async limparSnapshotsAntigos(\n    metricaId: string,\n    config: MetricaConfiguracao,\n  ): Promise<void> {\n    try {\n      // Limpar por período de retenção\n      if (config.periodo_retencao_dias > 0) {\n        const dataLimite = new Date();\n        dataLimite.setDate(dataLimite.getDate() - config.periodo_retencao_dias);\n\n        const resultado = await this.metricaSnapshotRepository.delete({\n          definicao_id: metricaId,\n          created_at: Between(new Date(0), dataLimite),\n        });\n\n        if (resultado.affected && resultado.affected > 0) {\n          this.logger.debug(\n            `Removidos ${resultado.affected} snapshots antigos da métrica ${metricaId}`,\n          );\n        }\n      }\n\n      // Limitar número máximo de snapshots\n      if (config.max_snapshots > 0) {\n        const count = await this.metricaSnapshotRepository.count({\n          where: { definicao_id: metricaId },\n        });\n\n        if (count > config.max_snapshots) {\n          // Buscar IDs mais antigos que excedem o limite\n          const snapshots = await this.metricaSnapshotRepository.find({\n            where: { definicao_id: metricaId },\n            order: { created_at: 'ASC' },\n            take: count - config.max_snapshots,\n            select: ['id'],\n          });\n\n          if (snapshots.length > 0) {\n            const ids = snapshots.map((s) => s.id);\n            const resultado = await this.metricaSnapshotRepository.delete(ids);\n\n            if (resultado.affected && resultado.affected > 0) {\n              this.logger.debug(\n                `Removidos ${resultado.affected} snapshots excedentes da métrica ${metricaId}`,\n              );\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.error(`Erro ao limpar snapshots antigos: ${error.message}`);\n    }\n  }\n\n  /**\n   * Gera um hash único para as dimensões de um snapshot\n   * @param dimensoes Objeto de dimensões\n   * @returns Hash das dimensões\n   */\n  private gerarHashDimensoes(dimensoes: Record<string, any>): string {\n    const stringDimensoes = JSON.stringify(dimensoes || {});\n    return crypto.createHash('sha256').update(stringDimensoes).digest('hex');\n  }\n\n  /**\n   * Formata o valor numérico da métrica conforme configurações\n   * @param valor Valor numérico\n   * @param metrica Definição da métrica\n   * @returns Valor formatado como string\n   */\n  private formatarValorMetrica(\n    valor: number,\n    metrica: MetricaDefinicao,\n  ): string {\n    try {\n      let valorFormatado = Number(valor).toFixed(metrica.casas_decimais);\n\n      // Adicionar prefixo e sufixo, se definidos\n      if (metrica.prefixo) {\n        valorFormatado = `${metrica.prefixo}${valorFormatado}`;\n      }\n\n      if (metrica.sufixo) {\n        valorFormatado = `${valorFormatado}${metrica.sufixo}`;\n      }\n\n      return valorFormatado;\n    } catch (error) {\n      this.logger.error(`Erro ao formatar valor: ${error.message}`);\n      return valor.toString();\n    }\n  }\n\n  /**\n   * Coleta manual de uma métrica específica\n   * @param codigo Código da métrica\n   * @param dimensoes Dimensões para filtrar a coleta\n   * @returns Snapshot da métrica coletada\n   */\n  async coletarMetricaManual(\n    codigo: string,\n    dimensoes?: Record<string, any>,\n  ): Promise<MetricaSnapshot> {\n    try {\n      const metrica = await this.metricaDefinicaoRepository.findOne({\n        where: { codigo, ativa: true },\n      });\n\n      if (!metrica) {\n        throw new Error(`Métrica não encontrada ou inativa: ${codigo}`);\n      }\n\n      return this.coletarMetrica(metrica.id, {\n        dimensoes,\n        metadados: { origem: 'coleta_manual' },\n      });\n    } catch (error) {\n      this.logger.error(\n        `Erro na coleta manual da métrica ${codigo}: ${error.message}`,\n      );\n      throw error;\n    }\n  }\n\n  /**\n   * Agenda a coleta de todas as métricas configuradas para coleta automática\n   */\n  async verificarConfiguracoesAgendamento(): Promise<void> {\n    try {\n      this.logger.debug('Verificando configurações de agendamento');\n\n      const configuracoes = await this.metricaConfiguracaoRepository.find({\n        where: { coleta_automatica: true },\n        relations: ['metrica'],\n      });\n\n      for (const config of configuracoes) {\n        // Carregar a entidade metrica para acessar suas propriedades\n        const metrica = await config.metrica;\n\n        if (metrica.ativa) {\n          await this.configurarAgendamentoMetrica(config);\n        }\n      }\n    } catch (error) {\n      this.logger.error(\n        `Erro ao verificar configurações de agendamento: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Coleta programada de métricas diárias (executada uma vez por dia à meia-noite)\n   */\n  async coletarMetricasDiarias(): Promise<void> {\n    try {\n      this.logger.log('Iniciando coleta diária de métricas');\n\n      const metricas = await this.metricaDefinicaoRepository.find({\n        where: {\n          ativa: true,\n          granularidade: 'dia' as any, // Forçando o tipo para evitar erro de incompatibilidade\n        },\n        relations: ['configuracoes'],\n      });\n\n      this.logger.debug(\n        `Encontradas ${metricas.length} métricas diárias para coleta programada`,\n      );\n\n      for (const metrica of metricas) {\n        // Carregar o relacionamento lazy configuracoes\n        const configuracoes = await metrica.configuracoes;\n\n        if (configuracoes.length === 0 || !configuracoes[0].coleta_automatica) {\n          continue;\n        }\n\n        this.coletarMetrica(metrica.id).catch((err) =>\n          this.logger.error(\n            `Erro ao coletar métrica diária ${metrica.codigo}: ${err.message}`,\n          ),\n        );\n      }\n    } catch (error) {\n      this.logger.error(`Erro na coleta diária: ${error.message}`);\n    }\n  }\n\n  /**\n   * Calcula o intervalo em milissegundos a partir de uma expressão cron\n   * Esta é uma implementação simplificada que converte expressões cron comuns em intervalos\n   * @param cronExpression Expressão cron\n   * @returns Intervalo aproximado em milissegundos\n   */\n  private calcularIntervaloEmMilissegundos(cronExpression: string): number {\n    // Expressões cron comuns e seus intervalos aproximados\n    const intervalos = {\n      '0 * * * *': 60 * 60 * 1000, // A cada hora\n      '0 0 * * *': 24 * 60 * 60 * 1000, // Diário\n      '0 0 * * 0': 7 * 24 * 60 * 60 * 1000, // Semanal\n      '0 0 1 * *': 30 * 24 * 60 * 60 * 1000, // Mensal (aproximado)\n    };\n\n    return intervalos[cronExpression] || 60 * 60 * 1000; // Padrão: 1 hora\n  }\n}\n"],"version":3}