7dd58aa7983d70ebcd244c64ec1e2f82
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfiguracaoRenovacao = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const tipo_beneficio_entity_1 = require("./tipo-beneficio.entity");
/**
 * Entidade de Configuração de Renovação Automática
 *
 * Armazena as configurações para renovação automática de benefícios,
 * permitindo definir regras específicas por tipo de benefício.
 */
let ConfiguracaoRenovacao = class ConfiguracaoRenovacao {
    id;
    tipo_beneficio_id;
    tipo_beneficio;
    renovacao_automatica;
    dias_antecedencia_renovacao;
    numero_maximo_renovacoes;
    requer_aprovacao_renovacao;
    ativo;
    usuario_id;
    observacoes;
    created_at;
    updated_at;
    // Getters e Setters
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se a configuração foi criada recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se a configuração está ativa
     */
    isAtivo() {
        return this.ativo;
    }
    /**
     * Verifica se a renovação automática está habilitada
     */
    isRenovacaoAutomaticaHabilitada() {
        return this.renovacao_automatica && this.ativo;
    }
    /**
     * Verifica se requer aprovação para renovação
     */
    requerAprovacaoRenovacao() {
        return this.requer_aprovacao_renovacao;
    }
    /**
     * Verifica se tem limite de renovações
     */
    temLimiteRenovacoes() {
        return this.numero_maximo_renovacoes !== null &&
            this.numero_maximo_renovacoes !== undefined &&
            this.numero_maximo_renovacoes > 0;
    }
    /**
     * Obtém o número máximo de renovações
     */
    getNumeroMaximoRenovacoes() {
        return this.numero_maximo_renovacoes || null;
    }
    /**
     * Obtém os dias de antecedência para renovação
     */
    getDiasAntecedenciaRenovacao() {
        return this.dias_antecedencia_renovacao;
    }
    /**
     * Calcula a data limite para iniciar o processo de renovação
     * baseado na data de vencimento do benefício
     */
    calcularDataInicioRenovacao(dataVencimento) {
        const dataInicio = new Date(dataVencimento);
        dataInicio.setDate(dataInicio.getDate() - this.dias_antecedencia_renovacao);
        return dataInicio;
    }
    /**
     * Verifica se é hora de iniciar o processo de renovação
     */
    isHoraDeRenovar(dataVencimento) {
        if (!this.isRenovacaoAutomaticaHabilitada())
            return false;
        const agora = new Date();
        const dataInicioRenovacao = this.calcularDataInicioRenovacao(dataVencimento);
        return agora >= dataInicioRenovacao;
    }
    /**
     * Verifica se ainda pode renovar baseado no limite
     */
    podeRenovar(numeroRenovacoesRealizadas) {
        if (!this.isRenovacaoAutomaticaHabilitada())
            return false;
        if (!this.temLimiteRenovacoes())
            return true;
        return this.numero_maximo_renovacoes !== undefined && numeroRenovacoesRealizadas < this.numero_maximo_renovacoes;
    }
    /**
     * Calcula quantas renovações ainda são possíveis
     */
    getRenovacoesRestantes(numeroRenovacoesRealizadas) {
        if (!this.temLimiteRenovacoes())
            return -1; // Ilimitado
        const restantes = (this.numero_maximo_renovacoes ?? 0) - numeroRenovacoesRealizadas;
        return Math.max(0, restantes);
    }
    /**
     * Verifica se pertence a um tipo de benefício
     */
    pertenceAoTipoBeneficio(tipoBeneficioId) {
        return this.tipo_beneficio_id === tipoBeneficioId;
    }
    /**
     * Verifica se foi configurado por um usuário
     */
    foiConfiguradoPorUsuario(usuarioId) {
        return this.usuario_id === usuarioId;
    }
    /**
     * Obtém um resumo da configuração
     */
    getSummary() {
        const renovacao = this.isRenovacaoAutomaticaHabilitada() ? 'Habilitada' : 'Desabilitada';
        const aprovacao = this.requerAprovacaoRenovacao() ? 'Requer aprovação' : 'Automática';
        const limite = this.temLimiteRenovacoes() ?
            `Máx: ${this.numero_maximo_renovacoes}` : 'Ilimitado';
        return `Renovação: ${renovacao} | ${aprovacao} | ${limite} | ${this.dias_antecedencia_renovacao} dias antecedência`;
    }
    /**
     * Gera uma chave única para a configuração
     */
    getUniqueKey() {
        return `config_renovacao_${this.tipo_beneficio_id}`;
    }
    /**
     * Verifica se a configuração é consistente
     */
    isConsistente() {
        // Verifica se tem tipo de benefício
        if (!this.tipo_beneficio_id)
            return false;
        // Verifica se tem usuário
        if (!this.usuario_id)
            return false;
        // Verifica se dias de antecedência é válido
        if (this.dias_antecedencia_renovacao < 1)
            return false;
        // Se tem limite, deve ser positivo
        if (this.temLimiteRenovacoes() && this.numero_maximo_renovacoes !== undefined && this.numero_maximo_renovacoes <= 0) {
            return false;
        }
        return true;
    }
    /**
     * Verifica se pode ser removida
     */
    podeSerRemovida() {
        // Pode implementar lógica adicional aqui
        // Por exemplo, verificar se tem benefícios ativos usando esta configuração
        return true;
    }
    /**
     * Clona a configuração (sem ID)
     */
    clone() {
        return {
            tipo_beneficio_id: this.tipo_beneficio_id,
            renovacao_automatica: this.renovacao_automatica,
            dias_antecedencia_renovacao: this.dias_antecedencia_renovacao,
            numero_maximo_renovacoes: this.numero_maximo_renovacoes,
            requer_aprovacao_renovacao: this.requer_aprovacao_renovacao,
            ativo: this.ativo,
            usuario_id: this.usuario_id,
            observacoes: this.observacoes,
        };
    }
    /**
     * Verifica se é uma configuração crítica
     */
    isCritica() {
        // Configurações com renovação automática sem aprovação são críticas
        return this.isRenovacaoAutomaticaHabilitada() && !this.requerAprovacaoRenovacao();
    }
    /**
     * Obtém o nível de automação
     */
    getNivelAutomacao() {
        if (!this.renovacao_automatica)
            return 'MANUAL';
        if (this.requer_aprovacao_renovacao)
            return 'SEMI_AUTOMATICO';
        return 'AUTOMATICO';
    }
    /**
     * Obtém a descrição do nível de automação
     */
    getDescricaoNivelAutomacao() {
        const descricoes = {
            'MANUAL': 'Renovação manual - requer intervenção do usuário',
            'SEMI_AUTOMATICO': 'Renovação semi-automática - processo automático com aprovação',
            'AUTOMATICO': 'Renovação totalmente automática - sem intervenção manual',
        };
        return descricoes[this.getNivelAutomacao()];
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            tipo_beneficio_id: this.tipo_beneficio_id,
            renovacao_automatica: this.renovacao_automatica,
            dias_antecedencia_renovacao: this.dias_antecedencia_renovacao,
            numero_maximo_renovacoes: this.numero_maximo_renovacoes,
            requer_aprovacao_renovacao: this.requer_aprovacao_renovacao,
            ativo: this.ativo,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para a configuração
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.observacoes || this.observacoes.trim().length === 0) {
            sugestoes.push('Adicionar observações sobre a configuração');
        }
        if (this.isRenovacaoAutomaticaHabilitada() && !this.requerAprovacaoRenovacao()) {
            sugestoes.push('Considerar exigir aprovação para renovações automáticas');
        }
        if (!this.temLimiteRenovacoes()) {
            sugestoes.push('Considerar definir um limite máximo de renovações');
        }
        if (this.dias_antecedencia_renovacao < 7) {
            sugestoes.push('Considerar aumentar os dias de antecedência para pelo menos 7 dias');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências nos dados');
        }
        return sugestoes;
    }
    /**
     * Verifica se precisa de atualização (dados muito antigos)
     */
    precisaAtualizacao() {
        // Configurações com mais de 1 ano podem precisar de revisão
        const umAnoAtras = new Date();
        umAnoAtras.setFullYear(umAnoAtras.getFullYear() - 1);
        return this.updated_at < umAnoAtras;
    }
    /**
     * Obtém estatísticas da configuração
     */
    getEstatisticas() {
        return {
            nivelAutomacao: this.getNivelAutomacao(),
            diasAntecedencia: this.dias_antecedencia_renovacao,
            temLimite: this.temLimiteRenovacoes(),
            limiteRenovacoes: this.getNumeroMaximoRenovacoes(),
            requerAprovacao: this.requer_aprovacao_renovacao,
            ativo: this.ativo,
        };
    }
    /**
     * Simula o processo de renovação
     */
    simularRenovacao(dataVencimento, numeroRenovacoesRealizadas) {
        const podeRenovar = this.podeRenovar(numeroRenovacoesRealizadas);
        const dataInicioRenovacao = this.calcularDataInicioRenovacao(dataVencimento);
        const renovacoesRestantes = this.getRenovacoesRestantes(numeroRenovacoesRealizadas);
        let motivo;
        if (!podeRenovar) {
            if (!this.isRenovacaoAutomaticaHabilitada()) {
                motivo = 'Renovação automática não está habilitada';
            }
            else if (this.temLimiteRenovacoes() && this.numero_maximo_renovacoes !== undefined && numeroRenovacoesRealizadas >= this.numero_maximo_renovacoes) {
                motivo = 'Limite máximo de renovações atingido';
            }
        }
        return {
            podeRenovar,
            dataInicioRenovacao,
            renovacoesRestantes,
            requerAprovacao: this.requer_aprovacao_renovacao,
            motivo,
        };
    }
};
exports.ConfiguracaoRenovacao = ConfiguracaoRenovacao;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], ConfiguracaoRenovacao.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'tipo_beneficio_id', type: 'uuid' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do tipo de benefício é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do tipo de benefício inválido' }),
    __metadata("design:type", String)
], ConfiguracaoRenovacao.prototype, "tipo_beneficio_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => tipo_beneficio_entity_1.TipoBeneficio, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'tipo_beneficio_id' }),
    __metadata("design:type", typeof (_a = typeof tipo_beneficio_entity_1.TipoBeneficio !== "undefined" && tipo_beneficio_entity_1.TipoBeneficio) === "function" ? _a : Object)
], ConfiguracaoRenovacao.prototype, "tipo_beneficio", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'renovacao_automatica', type: 'boolean', default: false }),
    (0, class_validator_1.IsBoolean)({ message: 'Renovação automática deve ser um booleano' }),
    __metadata("design:type", Boolean)
], ConfiguracaoRenovacao.prototype, "renovacao_automatica", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'dias_antecedencia_renovacao', type: 'integer', default: 7 }),
    (0, class_validator_1.IsNumber)({}, { message: 'Dias de antecedência deve ser um número' }),
    (0, class_validator_1.Min)(1, { message: 'Dias de antecedência deve ser no mínimo 1' }),
    __metadata("design:type", Number)
], ConfiguracaoRenovacao.prototype, "dias_antecedencia_renovacao", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'numero_maximo_renovacoes', type: 'integer', nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsNumber)({}, { message: 'Número máximo de renovações deve ser um número' }),
    (0, class_validator_1.Min)(0, { message: 'Número máximo de renovações não pode ser negativo' }),
    __metadata("design:type", Number)
], ConfiguracaoRenovacao.prototype, "numero_maximo_renovacoes", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'requer_aprovacao_renovacao', type: 'boolean', default: true }),
    (0, class_validator_1.IsBoolean)({ message: 'Requer aprovação de renovação deve ser um booleano' }),
    __metadata("design:type", Boolean)
], ConfiguracaoRenovacao.prototype, "requer_aprovacao_renovacao", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'ativo', type: 'boolean', default: true }),
    (0, class_validator_1.IsBoolean)({ message: 'Ativo deve ser um booleano' }),
    __metadata("design:type", Boolean)
], ConfiguracaoRenovacao.prototype, "ativo", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'usuario_id', type: 'uuid' }),
    (0, class_validator_1.IsNotEmpty)({ message: 'ID do usuário é obrigatório' }),
    (0, class_validator_1.IsUUID)('4', { message: 'ID do usuário inválido' }),
    __metadata("design:type", String)
], ConfiguracaoRenovacao.prototype, "usuario_id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'observacoes', type: 'text', nullable: true }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", String)
], ConfiguracaoRenovacao.prototype, "observacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)({ name: 'created_at' }),
    __metadata("design:type", typeof (_b = typeof Date !== "undefined" && Date) === "function" ? _b : Object)
], ConfiguracaoRenovacao.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)({ name: 'updated_at' }),
    __metadata("design:type", typeof (_c = typeof Date !== "undefined" && Date) === "function" ? _c : Object)
], ConfiguracaoRenovacao.prototype, "updated_at", void 0);
exports.ConfiguracaoRenovacao = ConfiguracaoRenovacao = __decorate([
    (0, typeorm_1.Entity)('configuracao_renovacao'),
    (0, typeorm_1.Index)(['tipo_beneficio_id'])
], ConfiguracaoRenovacao);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,