{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\criptografia.integration.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\integration\\criptografia.integration.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport { AppModule } from '../../src/app.module';\nimport { CriptografiaService } from '../../src/shared/services/criptografia.service';\nimport * as crypto from 'crypto';\n\ndescribe('Criptografia (Integração)', () => {\n  let app: INestApplication;\n  let criptografiaService: CriptografiaService;\n\n  beforeAll(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n\n    criptografiaService =\n      moduleFixture.get<CriptografiaService>(CriptografiaService);\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n\n  describe('Criptografia e Descriptografia de Dados', () => {\n    it('deve criptografar e descriptografar um buffer corretamente', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from(\n        'Dados sensíveis para teste de criptografia',\n        'utf-8',\n      );\n\n      // Act\n      const { dadosCriptografados, iv, authTag } =\n        criptografiaService.cryptografarBuffer(dadosOriginais);\n      const dadosDescriptografados = criptografiaService.descriptografarBuffer(\n        dadosCriptografados,\n        iv,\n        authTag,\n      );\n\n      // Assert\n      expect(dadosCriptografados).not.toEqual(dadosOriginais);\n      expect(dadosDescriptografados).toEqual(dadosOriginais);\n      expect(dadosDescriptografados.toString('utf-8')).toBe(\n        'Dados sensíveis para teste de criptografia',\n      );\n    });\n\n    it('deve falhar ao descriptografar com authTag incorreto', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from(\n        'Dados sensíveis para teste de criptografia',\n        'utf-8',\n      );\n      const { dadosCriptografados, iv } =\n        criptografiaService.cryptografarBuffer(dadosOriginais);\n      const authTagIncorreto = crypto.randomBytes(16);\n\n      // Act & Assert\n      expect(() => {\n        criptografiaService.descriptografarBuffer(\n          dadosCriptografados,\n          iv,\n          authTagIncorreto,\n        );\n      }).toThrow();\n    });\n\n    it('deve falhar ao descriptografar com IV incorreto', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from(\n        'Dados sensíveis para teste de criptografia',\n        'utf-8',\n      );\n      const { dadosCriptografados, authTag } =\n        criptografiaService.cryptografarBuffer(dadosOriginais);\n      const ivIncorreto = crypto.randomBytes(16);\n\n      // Act & Assert\n      expect(() => {\n        criptografiaService.descriptografarBuffer(\n          dadosCriptografados,\n          ivIncorreto,\n          authTag,\n        );\n      }).toThrow();\n    });\n  });\n\n  describe('Verificação de Integridade', () => {\n    it('deve gerar e verificar hash corretamente', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from(\n        'Dados para verificação de integridade',\n        'utf-8',\n      );\n\n      // Act\n      const hash = criptografiaService.gerarHash(dadosOriginais);\n      const resultado = criptografiaService.verificarIntegridade(\n        dadosOriginais,\n        hash,\n      );\n\n      // Assert\n      expect(hash).toBeDefined();\n      expect(hash.length).toBeGreaterThan(0);\n      expect(resultado).toBe(true);\n    });\n\n    it('deve detectar alterações nos dados', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from(\n        'Dados para verificação de integridade',\n        'utf-8',\n      );\n      const hash = criptografiaService.gerarHash(dadosOriginais);\n\n      // Alterar os dados\n      const dadosAlterados = Buffer.from(\n        'Dados para verificação de integridade ALTERADOS',\n        'utf-8',\n      );\n\n      // Act\n      const resultado = criptografiaService.verificarIntegridade(\n        dadosAlterados,\n        hash,\n      );\n\n      // Assert\n      expect(resultado).toBe(false);\n    });\n\n    it('deve detectar hash incorreto', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from(\n        'Dados para verificação de integridade',\n        'utf-8',\n      );\n      const hashIncorreto = 'hash-incorreto-para-teste';\n\n      // Act\n      const resultado = criptografiaService.verificarIntegridade(\n        dadosOriginais,\n        hashIncorreto,\n      );\n\n      // Assert\n      expect(resultado).toBe(false);\n    });\n  });\n\n  describe('Tamanho dos Dados Criptografados', () => {\n    it('deve aumentar o tamanho dos dados após criptografia', () => {\n      // Arrange\n      const dadosOriginais = Buffer.from('Dados de teste', 'utf-8');\n\n      // Act\n      const { dadosCriptografados } =\n        criptografiaService.cryptografarBuffer(dadosOriginais);\n\n      // Assert\n      expect(dadosCriptografados.length).toBeGreaterThanOrEqual(\n        dadosOriginais.length,\n      );\n    });\n  });\n\n  describe('Performance de Criptografia', () => {\n    it('deve criptografar e descriptografar arquivos grandes em tempo razoável', () => {\n      // Arrange\n      const tamanhoArquivo = 1024 * 1024; // 1MB\n      const dadosGrandes = crypto.randomBytes(tamanhoArquivo);\n\n      // Act\n      const inicio = Date.now();\n      const { dadosCriptografados, iv, authTag } =\n        criptografiaService.cryptografarBuffer(dadosGrandes);\n      const tempoParaCriptografar = Date.now() - inicio;\n\n      const inicioDescript = Date.now();\n      const dadosDescriptografados = criptografiaService.descriptografarBuffer(\n        dadosCriptografados,\n        iv,\n        authTag,\n      );\n      const tempoParaDescriptografar = Date.now() - inicioDescript;\n\n      // Assert\n      expect(dadosDescriptografados).toEqual(dadosGrandes);\n      expect(tempoParaCriptografar).toBeLessThan(1000); // Menos de 1 segundo para criptografar 1MB\n      expect(tempoParaDescriptografar).toBeLessThan(1000); // Menos de 1 segundo para descriptografar 1MB\n    });\n  });\n});\n"],"version":3}