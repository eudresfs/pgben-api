{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\dashboard.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\metricas\\services\\dashboard.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, Between } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../../entities/solicitacao.entity';\nimport { Recurso, StatusRecurso } from '../../../entities/recurso.entity';\nimport { TipoBeneficio } from '../../../entities/tipo-beneficio.entity';\nimport { Unidade } from '../../../entities/unidade.entity';\nimport { Usuario } from '../../../entities/usuario.entity';\n\n/**\n * Interface para o resumo do dashboard\n */\nexport interface ResumoDashboard {\n  solicitacoes: {\n    total: number;\n    pendentes: number;\n    emAnalise: number;\n    aprovadas: number;\n    reprovadas: number;\n    liberadas: number;\n    canceladas: number;\n  };\n  recursos: {\n    total: number;\n    pendentes: number;\n    emAnalise: number;\n    deferidos: number;\n    indeferidos: number;\n  };\n  beneficios: {\n    total: number;\n    porTipo: Array<{\n      tipo: string;\n      quantidade: number;\n    }>;\n  };\n  unidades: {\n    total: number;\n    maisAtivas: Array<{\n      nome: string;\n      solicitacoes: number;\n    }>;\n  };\n}\n\n/**\n * Interface para os KPIs do dashboard\n */\nexport interface KpisDashboard {\n  tempoMedioAnalise: number;\n  taxaAprovacao: number;\n  taxaRecurso: number;\n  taxaDeferimento: number;\n  solicitacoesPorDia: number;\n  beneficiosPorDia: number;\n}\n\n/**\n * Interface para os gráficos do dashboard\n */\nexport interface GraficosDashboard {\n  solicitacoesPorPeriodo: Array<{\n    data: string;\n    quantidade: number;\n  }>;\n  solicitacoesPorStatus: Array<{\n    status: string;\n    quantidade: number;\n  }>;\n  solicitacoesPorUnidade: Array<{\n    unidade: string;\n    quantidade: number;\n  }>;\n  solicitacoesPorBeneficio: Array<{\n    beneficio: string;\n    quantidade: number;\n  }>;\n}\n\n/**\n * Serviço responsável por fornecer dados para o dashboard\n */\n@Injectable()\nexport class DashboardService {\n  private readonly logger = new Logger(DashboardService.name);\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private solicitacaoRepository: Repository<Solicitacao>,\n\n    @InjectRepository(Recurso)\n    private recursoRepository: Repository<Recurso>,\n\n    @InjectRepository(TipoBeneficio)\n    private tipoBeneficioRepository: Repository<TipoBeneficio>,\n\n    @InjectRepository(Unidade)\n    private unidadeRepository: Repository<Unidade>,\n  ) {\n    this.logger.log('Serviço de Dashboard inicializado');\n  }\n\n  /**\n   * Obtém o resumo para o dashboard\n   * @returns Resumo do dashboard\n   */\n  async obterResumo(): Promise<ResumoDashboard> {\n    // Contagem de solicitações por status\n    const solicitacoesTotal = await this.solicitacaoRepository.count();\n    const solicitacoesPendentes = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.PENDENTE },\n    });\n    const solicitacoesEmAnalise = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.EM_ANALISE },\n    });\n    const solicitacoesAprovadas = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.APROVADA },\n    });\n    const solicitacoesReprovadas = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.INDEFERIDA },\n    });\n    const solicitacoesLiberadas = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.LIBERADA },\n    });\n    const solicitacoesCanceladas = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.CANCELADA },\n    });\n\n    // Contagem de recursos por status\n    const recursosTotal = await this.recursoRepository.count();\n    const recursosPendentes = await this.recursoRepository.count({\n      where: { status: StatusRecurso.PENDENTE },\n    });\n    const recursosEmAnalise = await this.recursoRepository.count({\n      where: { status: StatusRecurso.EM_ANALISE },\n    });\n    const recursosDeferidos = await this.recursoRepository.count({\n      where: { status: StatusRecurso.DEFERIDO },\n    });\n    const recursosIndeferidos = await this.recursoRepository.count({\n      where: { status: StatusRecurso.INDEFERIDO },\n    });\n\n    // Contagem de benefícios por tipo\n    const beneficiosPorTipo = await this.tipoBeneficioRepository\n      .createQueryBuilder('tipo')\n      .select('tipo.nome', 'tipo')\n      .addSelect('COUNT(solicitacao.id)', 'quantidade')\n      .leftJoin('tipo.solicitacoes', 'solicitacao')\n      .where('solicitacao.status = :status', {\n        status: StatusSolicitacao.LIBERADA,\n      })\n      .groupBy('tipo.id')\n      .orderBy('quantidade', 'DESC')\n      .limit(5)\n      .getRawMany();\n\n    // Unidades mais ativas\n    const unidadesMaisAtivas = await this.unidadeRepository\n      .createQueryBuilder('unidade')\n      .select('unidade.nome', 'nome')\n      .addSelect('COUNT(solicitacao.id)', 'solicitacoes')\n      .leftJoin('unidade.solicitacoes', 'solicitacao')\n      .groupBy('unidade.id')\n      .orderBy('solicitacoes', 'DESC')\n      .limit(5)\n      .getRawMany();\n\n    return {\n      solicitacoes: {\n        total: solicitacoesTotal,\n        pendentes: solicitacoesPendentes,\n        emAnalise: solicitacoesEmAnalise,\n        aprovadas: solicitacoesAprovadas,\n        reprovadas: solicitacoesReprovadas,\n        liberadas: solicitacoesLiberadas,\n        canceladas: solicitacoesCanceladas,\n      },\n      recursos: {\n        total: recursosTotal,\n        pendentes: recursosPendentes,\n        emAnalise: recursosEmAnalise,\n        deferidos: recursosDeferidos,\n        indeferidos: recursosIndeferidos,\n      },\n      beneficios: {\n        total: solicitacoesLiberadas,\n        porTipo: beneficiosPorTipo,\n      },\n      unidades: {\n        total: await this.unidadeRepository.count(),\n        maisAtivas: unidadesMaisAtivas,\n      },\n    };\n  }\n\n  /**\n   * Obtém os KPIs para o dashboard\n   * @returns KPIs do dashboard\n   */\n  async obterKPIs(): Promise<KpisDashboard> {\n    // Tempo médio de análise (em dias)\n    const tempoMedioAnaliseResult = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .select(\n        'AVG(EXTRACT(EPOCH FROM (solicitacao.data_aprovacao - solicitacao.data_abertura)) / 86400)',\n        'media',\n      )\n      .where('solicitacao.status IN (:...status)', {\n        status: [StatusSolicitacao.APROVADA, StatusSolicitacao.INDEFERIDA],\n      })\n      .andWhere('solicitacao.data_aprovacao IS NOT NULL')\n      .getRawOne();\n\n    const tempoMedioAnalise = tempoMedioAnaliseResult?.media || 0;\n\n    // Taxa de aprovação\n    const totalAnalisadas = await this.solicitacaoRepository.count({\n      where: [\n        { status: StatusSolicitacao.APROVADA },\n        { status: StatusSolicitacao.INDEFERIDA },\n      ],\n    });\n\n    const totalAprovadas = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.APROVADA },\n    });\n\n    const taxaAprovacao =\n      totalAnalisadas > 0 ? (totalAprovadas / totalAnalisadas) * 100 : 0;\n\n    // Taxa de recurso\n    const totalReprovadas = await this.solicitacaoRepository.count({\n      where: { status: StatusSolicitacao.INDEFERIDA },\n    });\n\n    const totalRecursos = await this.recursoRepository.count();\n    const taxaRecurso =\n      totalReprovadas > 0 ? (totalRecursos / totalReprovadas) * 100 : 0;\n\n    // Taxa de deferimento\n    const totalRecursosAnalisados = await this.recursoRepository.count({\n      where: [\n        { status: StatusRecurso.DEFERIDO },\n        { status: StatusRecurso.INDEFERIDO },\n      ],\n    });\n\n    const totalDeferidos = await this.recursoRepository.count({\n      where: { status: StatusRecurso.DEFERIDO },\n    });\n\n    const taxaDeferimento =\n      totalRecursosAnalisados > 0\n        ? (totalDeferidos / totalRecursosAnalisados) * 100\n        : 0;\n\n    // Solicitações por dia (últimos 30 dias)\n    const dataInicio = new Date();\n    dataInicio.setDate(dataInicio.getDate() - 30);\n\n    const totalSolicitacoes30Dias = await this.solicitacaoRepository.count({\n      where: {\n        data_abertura: Between(dataInicio, new Date()),\n      },\n    });\n\n    const solicitacoesPorDia = totalSolicitacoes30Dias / 30;\n\n    // Benefícios por dia (últimos 30 dias)\n    const totalBeneficios30Dias = await this.solicitacaoRepository.count({\n      where: {\n        status: StatusSolicitacao.LIBERADA,\n        data_liberacao: Between(dataInicio, new Date()),\n      },\n    });\n\n    const beneficiosPorDia = totalBeneficios30Dias / 30;\n\n    return {\n      tempoMedioAnalise,\n      taxaAprovacao,\n      taxaRecurso,\n      taxaDeferimento,\n      solicitacoesPorDia,\n      beneficiosPorDia,\n    };\n  }\n\n  /**\n   * Obtém dados para gráficos do dashboard\n   * @param periodo Período para filtrar os dados (em dias)\n   * @returns Dados para gráficos\n   */\n  async obterGraficos(periodo: number = 30): Promise<GraficosDashboard> {\n    const dataInicio = new Date();\n    dataInicio.setDate(dataInicio.getDate() - periodo);\n\n    // Solicitações por período (agrupadas por dia)\n    const solicitacoesPorPeriodo = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .select(\"TO_CHAR(solicitacao.data_abertura, 'YYYY-MM-DD')\", 'data')\n      .addSelect('COUNT(solicitacao.id)', 'quantidade')\n      .where('solicitacao.data_abertura >= :dataInicio', { dataInicio })\n      .groupBy('data')\n      .orderBy('data', 'ASC')\n      .getRawMany();\n\n    // Solicitações por status\n    const solicitacoesPorStatus = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .select('solicitacao.status', 'status')\n      .addSelect('COUNT(solicitacao.id)', 'quantidade')\n      .groupBy('solicitacao.status')\n      .orderBy('quantidade', 'DESC')\n      .getRawMany();\n\n    // Solicitações por unidade\n    const solicitacoesPorUnidade = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .select('unidade.nome', 'unidade')\n      .addSelect('COUNT(solicitacao.id)', 'quantidade')\n      .leftJoin('solicitacao.unidade', 'unidade')\n      .groupBy('unidade.id')\n      .orderBy('quantidade', 'DESC')\n      .limit(10)\n      .getRawMany();\n\n    // Solicitações por tipo de benefício\n    const solicitacoesPorBeneficio = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .select('tipo.nome', 'beneficio')\n      .addSelect('COUNT(solicitacao.id)', 'quantidade')\n      .leftJoin('solicitacao.tipo_beneficio', 'tipo')\n      .groupBy('tipo.id')\n      .orderBy('quantidade', 'DESC')\n      .getRawMany();\n\n    return {\n      solicitacoesPorPeriodo,\n      solicitacoesPorStatus,\n      solicitacoesPorUnidade,\n      solicitacoesPorBeneficio,\n    };\n  }\n}\n"],"version":3}