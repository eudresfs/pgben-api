1a18608d7317e6871f9e6990a1ff4f0a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const relatorios_controller_1 = require("../controllers/relatorios.controller");
const relatorios_service_1 = require("../services/relatorios.service");
/**
 * Testes unitários para o controlador de relatórios
 *
 * Este arquivo contém testes que validam a funcionalidade do controlador
 * responsável por receber requisições e coordenar a geração de relatórios
 */
describe('RelatoriosController', () => {
    let controller;
    let relatoriosService;
    // Mock para o serviço de relatórios
    const mockRelatoriosService = {
        gerarRelatorioBeneficiosConcedidos: jest.fn().mockResolvedValue({
            buffer: Buffer.from('mock content'),
            contentType: 'application/pdf',
            filename: 'relatorio-beneficios.pdf',
        }),
        gerarRelatorioSolicitacoesPorStatus: jest.fn().mockResolvedValue({
            buffer: Buffer.from('mock content'),
            contentType: 'application/pdf',
            filename: 'relatorio-solicitacoes.pdf',
        }),
        gerarRelatorioAtendimentosPorUnidade: jest.fn().mockResolvedValue({
            buffer: Buffer.from('mock content'),
            contentType: 'application/pdf',
            filename: 'relatorio-atendimentos.pdf',
        }),
    };
    // Mock para o objeto de resposta
    const mockResponse = {
        set: jest.fn().mockReturnThis(),
        send: jest.fn().mockReturnThis(),
        setHeader: jest.fn().mockReturnThis(),
    };
    // Mock para o objeto de requisição
    const createMockRequest = (user) => {
        return {
            user,
            get: jest.fn(),
            header: jest.fn(),
            accepts: jest.fn(),
            acceptsCharsets: jest.fn(),
            acceptsEncodings: jest.fn(),
            acceptsLanguages: jest.fn(),
            range: jest.fn(),
        };
    };
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            controllers: [relatorios_controller_1.RelatoriosController],
            providers: [
                {
                    provide: relatorios_service_1.RelatoriosService,
                    useValue: mockRelatoriosService,
                },
            ],
        }).compile();
        controller = module.get(relatorios_controller_1.RelatoriosController);
        relatoriosService = module.get(relatorios_service_1.RelatoriosService);
        // Reset mocks antes de cada teste
        jest.clearAllMocks();
    });
    it('deve ser definido', () => {
        expect(controller).toBeDefined();
    });
    describe('beneficiosConcedidos', () => {
        it('deve chamar o serviço e retornar o relatório de benefícios', async () => {
            const dto = {
                data_inicio: '2025-01-01',
                data_fim: '2025-01-31',
                formato: 'pdf',
                unidade_id: '1',
                tipo_beneficio_id: '2',
            };
            const mockUser = { id: 1, nome: 'Usuário Teste' };
            const mockRequest = createMockRequest(mockUser);
            await controller.beneficiosConcedidos(mockRequest, mockResponse, dto);
            expect(relatoriosService.gerarRelatorioBeneficiosConcedidos).toHaveBeenCalledWith({
                ...dto,
                user: mockUser,
            });
            expect(mockResponse.set).toHaveBeenCalledWith({
                'Content-Type': 'application/pdf',
                'Content-Disposition': expect.stringContaining('relatorio-beneficios.pdf'),
            });
            expect(mockResponse.send).toHaveBeenCalledWith(expect.any(Buffer));
        });
        it('deve lidar com diferentes formatos de relatório', async () => {
            // Teste para formato Excel
            const dtoExcel = {
                data_inicio: '2025-01-01',
                data_fim: '2025-01-31',
                formato: 'excel',
            };
            mockRelatoriosService.gerarRelatorioBeneficiosConcedidos.mockResolvedValueOnce({
                buffer: Buffer.from('mock excel content'),
                contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                filename: 'relatorio-beneficios.xlsx',
            });
            const mockUser = { id: 1, nome: 'Usuário Teste' };
            const mockRequest = createMockRequest(mockUser);
            await controller.beneficiosConcedidos(mockRequest, mockResponse, dtoExcel);
            expect(mockResponse.set).toHaveBeenCalledWith({
                'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'Content-Disposition': expect.stringContaining('relatorio-beneficios.xlsx'),
            });
        });
    });
    describe('solicitacoesPorStatus', () => {
        it('deve chamar o serviço e retornar o relatório de solicitações', async () => {
            const dto = {
                data_inicio: '2025-01-01',
                data_fim: '2025-01-31',
                formato: 'pdf',
                unidade_id: '1',
            };
            const mockUser = { id: 1, nome: 'Usuário Teste' };
            const mockRequest = createMockRequest(mockUser);
            await controller.solicitacoesPorStatus(mockRequest, mockResponse, dto);
            expect(relatoriosService.gerarRelatorioSolicitacoesPorStatus).toHaveBeenCalledWith({
                ...dto,
                user: mockUser,
            });
            expect(mockResponse.set).toHaveBeenCalledWith({
                'Content-Type': 'application/pdf',
                'Content-Disposition': expect.stringContaining('relatorio-solicitacoes.pdf'),
            });
            expect(mockResponse.send).toHaveBeenCalledWith(expect.any(Buffer));
        });
    });
    describe('atendimentosPorUnidade', () => {
        it('deve chamar o serviço e retornar o relatório de atendimentos', async () => {
            const dto = {
                data_inicio: '2025-01-01',
                data_fim: '2025-01-31',
                formato: 'pdf',
            };
            const mockUser = { id: 1, nome: 'Usuário Teste' };
            const mockRequest = createMockRequest(mockUser);
            await controller.atendimentosPorUnidade(mockRequest, mockResponse, dto);
            expect(relatoriosService.gerarRelatorioAtendimentosPorUnidade).toHaveBeenCalledWith({
                ...dto,
                user: mockUser,
            });
            expect(mockResponse.set).toHaveBeenCalledWith({
                'Content-Type': 'application/pdf',
                'Content-Disposition': expect.stringContaining('relatorio-atendimentos.pdf'),
            });
            expect(mockResponse.send).toHaveBeenCalledWith(expect.any(Buffer));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXHJlbGF0b3Jpb3MtdW5pZmljYWRvXFxfX3Rlc3RzX19cXHJlbGF0b3Jpb3MuY29udHJvbGxlci5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQXNEO0FBQ3RELGdGQUE0RTtBQUM1RSx1RUFBbUU7QUFNbkU7Ozs7O0dBS0c7QUFDSCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksVUFBZ0MsQ0FBQztJQUNyQyxJQUFJLGlCQUFvQyxDQUFDO0lBRXpDLG9DQUFvQztJQUNwQyxNQUFNLHFCQUFxQixHQUFHO1FBQzVCLGtDQUFrQyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztZQUM5RCxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDbkMsV0FBVyxFQUFFLGlCQUFpQjtZQUM5QixRQUFRLEVBQUUsMEJBQTBCO1NBQ3JDLENBQUM7UUFDRixtQ0FBbUMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUM7WUFDL0QsTUFBTSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ25DLFdBQVcsRUFBRSxpQkFBaUI7WUFDOUIsUUFBUSxFQUFFLDRCQUE0QjtTQUN2QyxDQUFDO1FBQ0Ysb0NBQW9DLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO1lBQ2hFLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUNuQyxXQUFXLEVBQUUsaUJBQWlCO1lBQzlCLFFBQVEsRUFBRSw0QkFBNEI7U0FDdkMsQ0FBQztLQUNILENBQUM7SUFFRixpQ0FBaUM7SUFDakMsTUFBTSxZQUFZLEdBQUc7UUFDbkIsR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxjQUFj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QUFDLG9DQUFvQyxDQUN2RCxDQUFDLG9CQUFvQixDQUFDO2dCQUNyQixHQUFHLEdBQUc7Z0JBQ04sSUFBSSxFQUFFLFFBQVE7YUFDZixDQUFDLENBQUM7WUFFSCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO2dCQUM1QyxjQUFjLEVBQUUsaUJBQWlCO2dCQUNqQyxxQkFBcUIsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQzVDLDRCQUE0QixDQUM3QjthQUNGLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xccmVsYXRvcmlvcy11bmlmaWNhZG9cXF9fdGVzdHNfX1xccmVsYXRvcmlvcy5jb250cm9sbGVyLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVzdCwgVGVzdGluZ01vZHVsZSB9IGZyb20gJ0BuZXN0anMvdGVzdGluZyc7XG5pbXBvcnQgeyBSZWxhdG9yaW9zQ29udHJvbGxlciB9IGZyb20gJy4uL2NvbnRyb2xsZXJzL3JlbGF0b3Jpb3MuY29udHJvbGxlcic7XG5pbXBvcnQgeyBSZWxhdG9yaW9zU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3JlbGF0b3Jpb3Muc2VydmljZSc7XG5pbXBvcnQgeyBSZWxhdG9yaW9CZW5lZmljaW9zRHRvIH0gZnJvbSAnLi4vZHRvL3JlbGF0b3Jpby1iZW5lZmljaW9zLmR0byc7XG5pbXBvcnQgeyBSZWxhdG9yaW9Tb2xpY2l0YWNvZXNEdG8gfSBmcm9tICcuLi9kdG8vcmVsYXRvcmlvLXNvbGljaXRhY29lcy5kdG8nO1xuaW1wb3J0IHsgUmVsYXRvcmlvQXRlbmRpbWVudG9zRHRvIH0gZnJvbSAnLi4vZHRvL3JlbGF0b3Jpby1hdGVuZGltZW50b3MuZHRvJztcbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5cbi8qKlxuICogVGVzdGVzIHVuaXTDoXJpb3MgcGFyYSBvIGNvbnRyb2xhZG9yIGRlIHJlbGF0w7NyaW9zXG4gKlxuICogRXN0ZSBhcnF1aXZvIGNvbnTDqW0gdGVzdGVzIHF1ZSB2YWxpZGFtIGEgZnVuY2lvbmFsaWRhZGUgZG8gY29udHJvbGFkb3JcbiAqIHJlc3BvbnPDoXZlbCBwb3IgcmVjZWJlciByZXF1aXNpw6fDtWVzIGUgY29vcmRlbmFyIGEgZ2VyYcOnw6NvIGRlIHJlbGF0w7NyaW9zXG4gKi9cbmRlc2NyaWJlKCdSZWxhdG9yaW9zQ29udHJvbGxlcicsICgpID0+IHtcbiAgbGV0IGNvbnRyb2xsZXI6IFJlbGF0b3Jpb3NDb250cm9sbGVyO1xuICBsZXQgcmVsYXRvcmlvc1NlcnZpY2U6IFJlbGF0b3Jpb3NTZXJ2aWNlO1xuXG4gIC8vIE1vY2sgcGFyYSBvIHNlcnZpw6dvIGRlIHJlbGF0w7NyaW9zXG4gIGNvbnN0IG1vY2tSZWxhdG9yaW9zU2VydmljZSA9IHtcbiAgICBnZXJhclJlbGF0b3Jpb0JlbmVmaWNpb3NDb25jZWRpZG9zOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgYnVmZmVyOiBCdWZmZXIuZnJvbSgnbW9jayBjb250ZW50JyksXG4gICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgICBmaWxlbmFtZTogJ3JlbGF0b3Jpby1iZW5lZmljaW9zLnBkZicsXG4gICAgfSksXG4gICAgZ2VyYXJSZWxhdG9yaW9Tb2xpY2l0YWNvZXNQb3JTdGF0dXM6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICBidWZmZXI6IEJ1ZmZlci5mcm9tKCdtb2NrIGNvbnRlbnQnKSxcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAgIGZpbGVuYW1lOiAncmVsYXRvcmlvLXNvbGljaXRhY29lcy5wZGYnLFxuICAgIH0pLFxuICAgIGdlcmFyUmVsYXRvcmlvQXRlbmRpbWVudG9zUG9yVW5pZGFkZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgIGJ1ZmZlcjogQnVmZmVyLmZyb20oJ21vY2sgY29udGVudCcpLFxuICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgZmlsZW5hbWU6ICdyZWxhdG9yaW8tYXRlbmRpbWVudG9zLnBkZicsXG4gICAgfSksXG4gIH07XG5cbiAgLy8gTW9jayBwYXJhIG8gb2JqZXRvIGRlIHJlc3Bvc3RhXG4gIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICBzZXQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIHNlbmQ6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgIHNldEhlYWRlcjogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIH0gYXMgdW5rbm93biBhcyBSZXNwb25zZTtcblxuICAvLyBNb2NrIHBhcmEgbyBvYmpldG8gZGUgcmVxdWlzacOnw6NvXG4gIGNvbnN0IGNyZWF0ZU1vY2tSZXF1ZXN0ID0gKHVzZXI6IGFueSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB1c2VyLFxuICAgICAgZ2V0OiBqZXN0LmZuKCksXG4gICAgICBoZWFkZXI6IGplc3QuZm4oKSxcbiAgICAgIGFjY2VwdHM6IGplc3QuZm4oKSxcbiAgICAgIGFjY2VwdHNDaGFyc2V0czogamVzdC5mbigpLFxuICAgICAgYWNjZXB0c0VuY29kaW5nczogamVzdC5mbigpLFxuICAgICAgYWNjZXB0c0xhbmd1YWdlczogamVzdC5mbigpLFxuICAgICAgcmFuZ2U6IGplc3QuZm4oKSxcbiAgICB9IGFzIHVua25vd24gYXMgUmVxdWVzdDtcbiAgfTtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2R1bGU6IFRlc3RpbmdNb2R1bGUgPSBhd2FpdCBUZXN0LmNyZWF0ZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgY29udHJvbGxlcnM6IFtSZWxhdG9yaW9zQ29udHJvbGxlcl0sXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IFJlbGF0b3Jpb3NTZXJ2aWNlLFxuICAgICAgICAgIHVzZVZhbHVlOiBtb2NrUmVsYXRvcmlvc1NlcnZpY2UsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0pLmNvbXBpbGUoKTtcblxuICAgIGNvbnRyb2xsZXIgPSBtb2R1bGUuZ2V0PFJlbGF0b3Jpb3NDb250cm9sbGVyPihSZWxhdG9yaW9zQ29udHJvbGxlcik7XG4gICAgcmVsYXRvcmlvc1NlcnZpY2UgPSBtb2R1bGUuZ2V0PFJlbGF0b3Jpb3NTZXJ2aWNlPihSZWxhdG9yaW9zU2VydmljZSk7XG5cbiAgICAvLyBSZXNldCBtb2NrcyBhbnRlcyBkZSBjYWRhIHRlc3RlXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdkZXZlIHNlciBkZWZpbmlkbycsICgpID0+IHtcbiAgICBleHBlY3QoY29udHJvbGxlcikudG9CZURlZmluZWQoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2JlbmVmaWNpb3NDb25jZWRpZG9zJywgKCkgPT4ge1xuICAgIGl0KCdkZXZlIGNoYW1hciBvIHNlcnZpw6dvIGUgcmV0b3JuYXIgbyByZWxhdMOzcmlvIGRlIGJlbmVmw61jaW9zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZHRvOiBSZWxhdG9yaW9CZW5lZmljaW9zRHRvID0ge1xuICAgICAgICBkYXRhX2luaWNpbzogJzIwMjUtMDEtMDEnLFxuICAgICAgICBkYXRhX2ZpbTogJzIwMjUtMDEtMzEnLFxuICAgICAgICBmb3JtYXRvOiAncGRmJyxcbiAgICAgICAgdW5pZGFkZV9pZDogJzEnLFxuICAgICAgICB0aXBvX2JlbmVmaWNpb19pZDogJzInLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7IGlkOiAxLCBub21lOiAnVXN1w6FyaW8gVGVzdGUnIH07XG4gICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IGNyZWF0ZU1vY2tSZXF1ZXN0KG1vY2tVc2VyKTtcblxuICAgICAgYXdhaXQgY29udHJvbGxlci5iZW5lZmljaW9zQ29uY2VkaWRvcyhtb2NrUmVxdWVzdCwgbW9ja1Jlc3BvbnNlLCBkdG8pO1xuXG4gICAgICBleHBlY3QoXG4gICAgICAgIHJlbGF0b3Jpb3NTZXJ2aWNlLmdlcmFyUmVsYXRvcmlvQmVuZWZpY2lvc0NvbmNlZGlkb3MsXG4gICAgICApLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgLi4uZHRvLFxuICAgICAgICB1c2VyOiBtb2NrVXNlcixcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobW9ja1Jlc3BvbnNlLnNldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgICAgICdDb250ZW50LURpc3Bvc2l0aW9uJzogZXhwZWN0LnN0cmluZ0NvbnRhaW5pbmcoXG4gICAgICAgICAgJ3JlbGF0b3Jpby1iZW5lZmljaW9zLnBkZicsXG4gICAgICAgICksXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tSZXNwb25zZS5zZW5kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3QuYW55KEJ1ZmZlcikpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2RldmUgbGlkYXIgY29tIGRpZmVyZW50ZXMgZm9ybWF0b3MgZGUgcmVsYXTDs3JpbycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFRlc3RlIHBhcmEgZm9ybWF0byBFeGNlbFxuICAgICAgY29uc3QgZHRvRXhjZWw6IFJlbGF0b3Jpb0JlbmVmaWNpb3NEdG8gPSB7XG4gICAgICAgIGRhdGFfaW5pY2lvOiAnMjAyNS0wMS0wMScsXG4gICAgICAgIGRhdGFfZmltOiAnMjAyNS0wMS0zMScsXG4gICAgICAgIGZvcm1hdG86ICdleGNlbCcsXG4gICAgICB9O1xuXG4gICAgICBtb2NrUmVsYXRvcmlvc1NlcnZpY2UuZ2VyYXJSZWxhdG9yaW9CZW5lZmljaW9zQ29uY2VkaWRvcy5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoXG4gICAgICAgIHtcbiAgICAgICAgICBidWZmZXI6IEJ1ZmZlci5mcm9tKCdtb2NrIGV4Y2VsIGNvbnRlbnQnKSxcbiAgICAgICAgICBjb250ZW50VHlwZTpcbiAgICAgICAgICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCcsXG4gICAgICAgICAgZmlsZW5hbWU6ICdyZWxhdG9yaW8tYmVuZWZpY2lvcy54bHN4JyxcbiAgICAgICAgfSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IG1vY2tVc2VyID0geyBpZDogMSwgbm9tZTogJ1VzdcOhcmlvIFRlc3RlJyB9O1xuICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSBjcmVhdGVNb2NrUmVxdWVzdChtb2NrVXNlcik7XG5cbiAgICAgIGF3YWl0IGNvbnRyb2xsZXIuYmVuZWZpY2lvc0NvbmNlZGlkb3MoXG4gICAgICAgIG1vY2tSZXF1ZXN0LFxuICAgICAgICBtb2NrUmVzcG9uc2UsXG4gICAgICAgIGR0b0V4Y2VsLFxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1vY2tSZXNwb25zZS5zZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6XG4gICAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcbiAgICAgICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiBleHBlY3Quc3RyaW5nQ29udGFpbmluZyhcbiAgICAgICAgICAncmVsYXRvcmlvLWJlbmVmaWNpb3MueGxzeCcsXG4gICAgICAgICksXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NvbGljaXRhY29lc1BvclN0YXR1cycsICgpID0+IHtcbiAgICBpdCgnZGV2ZSBjaGFtYXIgbyBzZXJ2acOnbyBlIHJldG9ybmFyIG8gcmVsYXTDs3JpbyBkZSBzb2xpY2l0YcOnw7VlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGR0bzogUmVsYXRvcmlvU29saWNpdGFjb2VzRHRvID0ge1xuICAgICAgICBkYXRhX2luaWNpbzogJzIwMjUtMDEtMDEnLFxuICAgICAgICBkYXRhX2ZpbTogJzIwMjUtMDEtMzEnLFxuICAgICAgICBmb3JtYXRvOiAncGRmJyxcbiAgICAgICAgdW5pZGFkZV9pZDogJzEnLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7IGlkOiAxLCBub21lOiAnVXN1w6FyaW8gVGVzdGUnIH07XG4gICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IGNyZWF0ZU1vY2tSZXF1ZXN0KG1vY2tVc2VyKTtcblxuICAgICAgYXdhaXQgY29udHJvbGxlci5zb2xpY2l0YWNvZXNQb3JTdGF0dXMobW9ja1JlcXVlc3QsIG1vY2tSZXNwb25zZSwgZHRvKTtcblxuICAgICAgZXhwZWN0KFxuICAgICAgICByZWxhdG9yaW9zU2VydmljZS5nZXJhclJlbGF0b3Jpb1NvbGljaXRhY29lc1BvclN0YXR1cyxcbiAgICAgICkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICAuLi5kdG8sXG4gICAgICAgIHVzZXI6IG1vY2tVc2VyLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrUmVzcG9uc2Uuc2V0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAgICAgJ0NvbnRlbnQtRGlzcG9zaXRpb24nOiBleHBlY3Quc3RyaW5nQ29udGFpbmluZyhcbiAgICAgICAgICAncmVsYXRvcmlvLXNvbGljaXRhY29lcy5wZGYnLFxuICAgICAgICApLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrUmVzcG9uc2Uuc2VuZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0LmFueShCdWZmZXIpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2F0ZW5kaW1lbnRvc1BvclVuaWRhZGUnLCAoKSA9PiB7XG4gICAgaXQoJ2RldmUgY2hhbWFyIG8gc2VydmnDp28gZSByZXRvcm5hciBvIHJlbGF0w7NyaW8gZGUgYXRlbmRpbWVudG9zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZHRvOiBSZWxhdG9yaW9BdGVuZGltZW50b3NEdG8gPSB7XG4gICAgICAgIGRhdGFfaW5pY2lvOiAnMjAyNS0wMS0wMScsXG4gICAgICAgIGRhdGFfZmltOiAnMjAyNS0wMS0zMScsXG4gICAgICAgIGZvcm1hdG86ICdwZGYnLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbW9ja1VzZXIgPSB7IGlkOiAxLCBub21lOiAnVXN1w6FyaW8gVGVzdGUnIH07XG4gICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IGNyZWF0ZU1vY2tSZXF1ZXN0KG1vY2tVc2VyKTtcblxuICAgICAgYXdhaXQgY29udHJvbGxlci5hdGVuZGltZW50b3NQb3JVbmlkYWRlKG1vY2tSZXF1ZXN0LCBtb2NrUmVzcG9uc2UsIGR0byk7XG5cbiAgICAgIGV4cGVjdChcbiAgICAgICAgcmVsYXRvcmlvc1NlcnZpY2UuZ2VyYXJSZWxhdG9yaW9BdGVuZGltZW50b3NQb3JVbmlkYWRlLFxuICAgICAgKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIC4uLmR0byxcbiAgICAgICAgdXNlcjogbW9ja1VzZXIsXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tSZXNwb25zZS5zZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgICAnQ29udGVudC1EaXNwb3NpdGlvbic6IGV4cGVjdC5zdHJpbmdDb250YWluaW5nKFxuICAgICAgICAgICdyZWxhdG9yaW8tYXRlbmRpbWVudG9zLnBkZicsXG4gICAgICAgICksXG4gICAgICB9KTtcblxuICAgICAgZXhwZWN0KG1vY2tSZXNwb25zZS5zZW5kKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3QuYW55KEJ1ZmZlcikpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9