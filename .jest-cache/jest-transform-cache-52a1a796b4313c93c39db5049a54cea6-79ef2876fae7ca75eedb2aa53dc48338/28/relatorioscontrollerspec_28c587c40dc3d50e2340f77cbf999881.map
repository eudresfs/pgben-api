{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\relatorios.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\relatorios-unificado\\__tests__\\relatorios.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { RelatoriosController } from '../controllers/relatorios.controller';\nimport { RelatoriosService } from '../services/relatorios.service';\nimport { RelatorioBeneficiosDto } from '../dto/relatorio-beneficios.dto';\nimport { RelatorioSolicitacoesDto } from '../dto/relatorio-solicitacoes.dto';\nimport { RelatorioAtendimentosDto } from '../dto/relatorio-atendimentos.dto';\nimport { Request, Response } from 'express';\n\n/**\n * Testes unitários para o controlador de relatórios\n *\n * Este arquivo contém testes que validam a funcionalidade do controlador\n * responsável por receber requisições e coordenar a geração de relatórios\n */\ndescribe('RelatoriosController', () => {\n  let controller: RelatoriosController;\n  let relatoriosService: RelatoriosService;\n\n  // Mock para o serviço de relatórios\n  const mockRelatoriosService = {\n    gerarRelatorioBeneficiosConcedidos: jest.fn().mockResolvedValue({\n      buffer: Buffer.from('mock content'),\n      contentType: 'application/pdf',\n      filename: 'relatorio-beneficios.pdf',\n    }),\n    gerarRelatorioSolicitacoesPorStatus: jest.fn().mockResolvedValue({\n      buffer: Buffer.from('mock content'),\n      contentType: 'application/pdf',\n      filename: 'relatorio-solicitacoes.pdf',\n    }),\n    gerarRelatorioAtendimentosPorUnidade: jest.fn().mockResolvedValue({\n      buffer: Buffer.from('mock content'),\n      contentType: 'application/pdf',\n      filename: 'relatorio-atendimentos.pdf',\n    }),\n  };\n\n  // Mock para o objeto de resposta\n  const mockResponse = {\n    set: jest.fn().mockReturnThis(),\n    send: jest.fn().mockReturnThis(),\n    setHeader: jest.fn().mockReturnThis(),\n  } as unknown as Response;\n\n  // Mock para o objeto de requisição\n  const createMockRequest = (user: any) => {\n    return {\n      user,\n      get: jest.fn(),\n      header: jest.fn(),\n      accepts: jest.fn(),\n      acceptsCharsets: jest.fn(),\n      acceptsEncodings: jest.fn(),\n      acceptsLanguages: jest.fn(),\n      range: jest.fn(),\n    } as unknown as Request;\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      controllers: [RelatoriosController],\n      providers: [\n        {\n          provide: RelatoriosService,\n          useValue: mockRelatoriosService,\n        },\n      ],\n    }).compile();\n\n    controller = module.get<RelatoriosController>(RelatoriosController);\n    relatoriosService = module.get<RelatoriosService>(RelatoriosService);\n\n    // Reset mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  it('deve ser definido', () => {\n    expect(controller).toBeDefined();\n  });\n\n  describe('beneficiosConcedidos', () => {\n    it('deve chamar o serviço e retornar o relatório de benefícios', async () => {\n      const dto: RelatorioBeneficiosDto = {\n        data_inicio: '2025-01-01',\n        data_fim: '2025-01-31',\n        formato: 'pdf',\n        unidade_id: '1',\n        tipo_beneficio_id: '2',\n      };\n\n      const mockUser = { id: 1, nome: 'Usuário Teste' };\n      const mockRequest = createMockRequest(mockUser);\n\n      await controller.beneficiosConcedidos(mockRequest, mockResponse, dto);\n\n      expect(\n        relatoriosService.gerarRelatorioBeneficiosConcedidos,\n      ).toHaveBeenCalledWith({\n        ...dto,\n        user: mockUser,\n      });\n\n      expect(mockResponse.set).toHaveBeenCalledWith({\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': expect.stringContaining(\n          'relatorio-beneficios.pdf',\n        ),\n      });\n\n      expect(mockResponse.send).toHaveBeenCalledWith(expect.any(Buffer));\n    });\n\n    it('deve lidar com diferentes formatos de relatório', async () => {\n      // Teste para formato Excel\n      const dtoExcel: RelatorioBeneficiosDto = {\n        data_inicio: '2025-01-01',\n        data_fim: '2025-01-31',\n        formato: 'excel',\n      };\n\n      mockRelatoriosService.gerarRelatorioBeneficiosConcedidos.mockResolvedValueOnce(\n        {\n          buffer: Buffer.from('mock excel content'),\n          contentType:\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n          filename: 'relatorio-beneficios.xlsx',\n        },\n      );\n\n      const mockUser = { id: 1, nome: 'Usuário Teste' };\n      const mockRequest = createMockRequest(mockUser);\n\n      await controller.beneficiosConcedidos(\n        mockRequest,\n        mockResponse,\n        dtoExcel,\n      );\n\n      expect(mockResponse.set).toHaveBeenCalledWith({\n        'Content-Type':\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'Content-Disposition': expect.stringContaining(\n          'relatorio-beneficios.xlsx',\n        ),\n      });\n    });\n  });\n\n  describe('solicitacoesPorStatus', () => {\n    it('deve chamar o serviço e retornar o relatório de solicitações', async () => {\n      const dto: RelatorioSolicitacoesDto = {\n        data_inicio: '2025-01-01',\n        data_fim: '2025-01-31',\n        formato: 'pdf',\n        unidade_id: '1',\n      };\n\n      const mockUser = { id: 1, nome: 'Usuário Teste' };\n      const mockRequest = createMockRequest(mockUser);\n\n      await controller.solicitacoesPorStatus(mockRequest, mockResponse, dto);\n\n      expect(\n        relatoriosService.gerarRelatorioSolicitacoesPorStatus,\n      ).toHaveBeenCalledWith({\n        ...dto,\n        user: mockUser,\n      });\n\n      expect(mockResponse.set).toHaveBeenCalledWith({\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': expect.stringContaining(\n          'relatorio-solicitacoes.pdf',\n        ),\n      });\n\n      expect(mockResponse.send).toHaveBeenCalledWith(expect.any(Buffer));\n    });\n  });\n\n  describe('atendimentosPorUnidade', () => {\n    it('deve chamar o serviço e retornar o relatório de atendimentos', async () => {\n      const dto: RelatorioAtendimentosDto = {\n        data_inicio: '2025-01-01',\n        data_fim: '2025-01-31',\n        formato: 'pdf',\n      };\n\n      const mockUser = { id: 1, nome: 'Usuário Teste' };\n      const mockRequest = createMockRequest(mockUser);\n\n      await controller.atendimentosPorUnidade(mockRequest, mockResponse, dto);\n\n      expect(\n        relatoriosService.gerarRelatorioAtendimentosPorUnidade,\n      ).toHaveBeenCalledWith({\n        ...dto,\n        user: mockUser,\n      });\n\n      expect(mockResponse.set).toHaveBeenCalledWith({\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': expect.stringContaining(\n          'relatorio-atendimentos.pdf',\n        ),\n      });\n\n      expect(mockResponse.send).toHaveBeenCalledWith(expect.any(Buffer));\n    });\n  });\n});\n"],"version":3}