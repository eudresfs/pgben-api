e6515afb558ce1e3b41288f6077fc885
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var DashboardService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const recurso_entity_1 = require("../../../entities/recurso.entity");
const tipo_beneficio_entity_1 = require("../../../entities/tipo-beneficio.entity");
const unidade_entity_1 = require("../../../entities/unidade.entity");
/**
 * Serviço responsável por fornecer dados para o dashboard
 */
let DashboardService = DashboardService_1 = class DashboardService {
    solicitacaoRepository;
    recursoRepository;
    tipoBeneficioRepository;
    unidadeRepository;
    logger = new common_1.Logger(DashboardService_1.name);
    constructor(solicitacaoRepository, recursoRepository, tipoBeneficioRepository, unidadeRepository) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.recursoRepository = recursoRepository;
        this.tipoBeneficioRepository = tipoBeneficioRepository;
        this.unidadeRepository = unidadeRepository;
        this.logger.log('Serviço de Dashboard inicializado');
    }
    /**
     * Obtém o resumo para o dashboard
     * @returns Resumo do dashboard
     */
    async obterResumo() {
        // Contagem de solicitações por status
        const solicitacoesTotal = await this.solicitacaoRepository.count();
        const solicitacoesPendentes = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.PENDENTE },
        });
        const solicitacoesEmAnalise = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.EM_ANALISE },
        });
        const solicitacoesAprovadas = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.APROVADA },
        });
        const solicitacoesReprovadas = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.INDEFERIDA },
        });
        const solicitacoesLiberadas = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.LIBERADA },
        });
        const solicitacoesCanceladas = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.CANCELADA },
        });
        // Contagem de recursos por status
        const recursosTotal = await this.recursoRepository.count();
        const recursosPendentes = await this.recursoRepository.count({
            where: { status: recurso_entity_1.StatusRecurso.PENDENTE },
        });
        const recursosEmAnalise = await this.recursoRepository.count({
            where: { status: recurso_entity_1.StatusRecurso.EM_ANALISE },
        });
        const recursosDeferidos = await this.recursoRepository.count({
            where: { status: recurso_entity_1.StatusRecurso.DEFERIDO },
        });
        const recursosIndeferidos = await this.recursoRepository.count({
            where: { status: recurso_entity_1.StatusRecurso.INDEFERIDO },
        });
        // Contagem de benefícios por tipo
        const beneficiosPorTipo = await this.tipoBeneficioRepository
            .createQueryBuilder('tipo')
            .select('tipo.nome', 'tipo')
            .addSelect('COUNT(solicitacao.id)', 'quantidade')
            .leftJoin('tipo.solicitacoes', 'solicitacao')
            .where('solicitacao.status = :status', {
            status: solicitacao_entity_1.StatusSolicitacao.LIBERADA,
        })
            .groupBy('tipo.id')
            .orderBy('quantidade', 'DESC')
            .limit(5)
            .getRawMany();
        // Unidades mais ativas
        const unidadesMaisAtivas = await this.unidadeRepository
            .createQueryBuilder('unidade')
            .select('unidade.nome', 'nome')
            .addSelect('COUNT(solicitacao.id)', 'solicitacoes')
            .leftJoin('unidade.solicitacoes', 'solicitacao')
            .groupBy('unidade.id')
            .orderBy('solicitacoes', 'DESC')
            .limit(5)
            .getRawMany();
        return {
            solicitacoes: {
                total: solicitacoesTotal,
                pendentes: solicitacoesPendentes,
                emAnalise: solicitacoesEmAnalise,
                aprovadas: solicitacoesAprovadas,
                reprovadas: solicitacoesReprovadas,
                liberadas: solicitacoesLiberadas,
                canceladas: solicitacoesCanceladas,
            },
            recursos: {
                total: recursosTotal,
                pendentes: recursosPendentes,
                emAnalise: recursosEmAnalise,
                deferidos: recursosDeferidos,
                indeferidos: recursosIndeferidos,
            },
            beneficios: {
                total: solicitacoesLiberadas,
                porTipo: beneficiosPorTipo,
            },
            unidades: {
                total: await this.unidadeRepository.count(),
                maisAtivas: unidadesMaisAtivas,
            },
        };
    }
    /**
     * Obtém os KPIs para o dashboard
     * @returns KPIs do dashboard
     */
    async obterKPIs() {
        // Tempo médio de análise (em dias)
        const tempoMedioAnaliseResult = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .select('AVG(EXTRACT(EPOCH FROM (solicitacao.data_aprovacao - solicitacao.data_abertura)) / 86400)', 'media')
            .where('solicitacao.status IN (:...status)', {
            status: [solicitacao_entity_1.StatusSolicitacao.APROVADA, solicitacao_entity_1.StatusSolicitacao.INDEFERIDA],
        })
            .andWhere('solicitacao.data_aprovacao IS NOT NULL')
            .getRawOne();
        const tempoMedioAnalise = tempoMedioAnaliseResult?.media || 0;
        // Taxa de aprovação
        const totalAnalisadas = await this.solicitacaoRepository.count({
            where: [
                { status: solicitacao_entity_1.StatusSolicitacao.APROVADA },
                { status: solicitacao_entity_1.StatusSolicitacao.INDEFERIDA },
            ],
        });
        const totalAprovadas = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.APROVADA },
        });
        const taxaAprovacao = totalAnalisadas > 0 ? (totalAprovadas / totalAnalisadas) * 100 : 0;
        // Taxa de recurso
        const totalReprovadas = await this.solicitacaoRepository.count({
            where: { status: solicitacao_entity_1.StatusSolicitacao.INDEFERIDA },
        });
        const totalRecursos = await this.recursoRepository.count();
        const taxaRecurso = totalReprovadas > 0 ? (totalRecursos / totalReprovadas) * 100 : 0;
        // Taxa de deferimento
        const totalRecursosAnalisados = await this.recursoRepository.count({
            where: [
                { status: recurso_entity_1.StatusRecurso.DEFERIDO },
                { status: recurso_entity_1.StatusRecurso.INDEFERIDO },
            ],
        });
        const totalDeferidos = await this.recursoRepository.count({
            where: { status: recurso_entity_1.StatusRecurso.DEFERIDO },
        });
        const taxaDeferimento = totalRecursosAnalisados > 0
            ? (totalDeferidos / totalRecursosAnalisados) * 100
            : 0;
        // Solicitações por dia (últimos 30 dias)
        const dataInicio = new Date();
        dataInicio.setDate(dataInicio.getDate() - 30);
        const totalSolicitacoes30Dias = await this.solicitacaoRepository.count({
            where: {
                data_abertura: (0, typeorm_2.Between)(dataInicio, new Date()),
            },
        });
        const solicitacoesPorDia = totalSolicitacoes30Dias / 30;
        // Benefícios por dia (últimos 30 dias)
        const totalBeneficios30Dias = await this.solicitacaoRepository.count({
            where: {
                status: solicitacao_entity_1.StatusSolicitacao.LIBERADA,
                data_liberacao: (0, typeorm_2.Between)(dataInicio, new Date()),
            },
        });
        const beneficiosPorDia = totalBeneficios30Dias / 30;
        return {
            tempoMedioAnalise,
            taxaAprovacao,
            taxaRecurso,
            taxaDeferimento,
            solicitacoesPorDia,
            beneficiosPorDia,
        };
    }
    /**
     * Obtém dados para gráficos do dashboard
     * @param periodo Período para filtrar os dados (em dias)
     * @returns Dados para gráficos
     */
    async obterGraficos(periodo = 30) {
        const dataInicio = new Date();
        dataInicio.setDate(dataInicio.getDate() - periodo);
        // Solicitações por período (agrupadas por dia)
        const solicitacoesPorPeriodo = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .select("TO_CHAR(solicitacao.data_abertura, 'YYYY-MM-DD')", 'data')
            .addSelect('COUNT(solicitacao.id)', 'quantidade')
            .where('solicitacao.data_abertura >= :dataInicio', { dataInicio })
            .groupBy('data')
            .orderBy('data', 'ASC')
            .getRawMany();
        // Solicitações por status
        const solicitacoesPorStatus = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .select('solicitacao.status', 'status')
            .addSelect('COUNT(solicitacao.id)', 'quantidade')
            .groupBy('solicitacao.status')
            .orderBy('quantidade', 'DESC')
            .getRawMany();
        // Solicitações por unidade
        const solicitacoesPorUnidade = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .select('unidade.nome', 'unidade')
            .addSelect('COUNT(solicitacao.id)', 'quantidade')
            .leftJoin('solicitacao.unidade', 'unidade')
            .groupBy('unidade.id')
            .orderBy('quantidade', 'DESC')
            .limit(10)
            .getRawMany();
        // Solicitações por tipo de benefício
        const solicitacoesPorBeneficio = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .select('tipo.nome', 'beneficio')
            .addSelect('COUNT(solicitacao.id)', 'quantidade')
            .leftJoin('solicitacao.tipo_beneficio', 'tipo')
            .groupBy('tipo.id')
            .orderBy('quantidade', 'DESC')
            .getRawMany();
        return {
            solicitacoesPorPeriodo,
            solicitacoesPorStatus,
            solicitacoesPorUnidade,
            solicitacoesPorBeneficio,
        };
    }
};
exports.DashboardService = DashboardService;
exports.DashboardService = DashboardService = DashboardService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __param(1, (0, typeorm_1.InjectRepository)(recurso_entity_1.Recurso)),
    __param(2, (0, typeorm_1.InjectRepository)(tipo_beneficio_entity_1.TipoBeneficio)),
    __param(3, (0, typeorm_1.InjectRepository)(unidade_entity_1.Unidade)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _b : Object, typeof (_c = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _c : Object, typeof (_d = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _d : Object])
], DashboardService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,