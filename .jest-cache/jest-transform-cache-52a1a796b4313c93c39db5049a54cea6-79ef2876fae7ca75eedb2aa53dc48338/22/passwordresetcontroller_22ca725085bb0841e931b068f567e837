d502eb4bab0060aab94fdad565eed8d6
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PasswordResetController = void 0;
const common_1 = require("@nestjs/common");
const swagger_1 = require("@nestjs/swagger");
const throttler_1 = require("@nestjs/throttler");
const password_reset_service_1 = require("../services/password-reset.service");
const password_reset_dto_1 = require("../dtos/password-reset.dto");
const get_client_info_decorator_1 = require("../../common/decorators/get-client-info.decorator");
const client_info_interface_1 = require("../../common/interfaces/client-info.interface");
const jwt_auth_guard_1 = require("../guards/jwt-auth.guard");
const roles_guard_1 = require("../guards/roles.guard");
const role_decorator_1 = require("../decorators/role.decorator");
const roles_constants_1 = require("../../shared/constants/roles.constants");
// Usando DTOs do arquivo password-reset.dto.ts
let PasswordResetController = class PasswordResetController {
    passwordResetService;
    constructor(passwordResetService) {
        this.passwordResetService = passwordResetService;
    }
    async requestPasswordReset(requestDto, clientInfo) {
        return this.passwordResetService.requestPasswordReset(requestDto, clientInfo);
    }
    async resetPassword(resetDto, clientInfo) {
        return this.passwordResetService.resetPassword(resetDto, clientInfo);
    }
    async validateToken(token) {
        if (!token) {
            throw new common_1.BadRequestException('Token é obrigatório');
        }
        return this.passwordResetService.validateToken(token);
    }
    async getPasswordResetStats() {
        // Convertendo o resultado para o formato esperado pelo DTO
        const stats = await this.passwordResetService.getPasswordResetStats();
        return {
            ...stats,
            successfulResetsLast24h: stats.usedTokens || 0,
            expiredTokensLast24h: stats.expiredTokens || 0,
            successRate: ((stats.usedTokens || 0) / (stats.totalRequests || 1)) * 100,
            uniqueUsersLast24h: stats.requestsLast24h || 0
        };
    }
    async cleanupExpiredTokens() {
        const deletedCount = await this.passwordResetService.cleanupExpiredTokens();
        return {
            message: 'Tokens expirados removidos com sucesso',
            deletedCount,
            timestamp: new Date().toISOString(),
        };
    }
    async getTokenStats() {
        return this.passwordResetService.getTokenStats();
    }
};
exports.PasswordResetController = PasswordResetController;
__decorate([
    (0, common_1.Post)('request'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, throttler_1.Throttle)({ default: { limit: 3, ttl: 60000 } }) // 3 tentativas por minuto
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Solicitar recuperação de senha',
        description: 'Envia um email com link para redefinir a senha do usuário',
    }),
    (0, swagger_1.ApiBody)({ type: password_reset_dto_1.ForgotPasswordDto }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Solicitação processada com sucesso',
        type: password_reset_dto_1.ResetPasswordResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou muitas tentativas',
    }),
    (0, swagger_1.ApiResponse)({
        status: 429,
        description: 'Muitas tentativas - rate limit excedido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 500,
        description: 'Erro interno do servidor',
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, get_client_info_decorator_1.GetClientInfo)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_b = typeof password_reset_dto_1.ForgotPasswordDto !== "undefined" && password_reset_dto_1.ForgotPasswordDto) === "function" ? _b : Object, typeof (_c = typeof client_info_interface_1.ClientInfo !== "undefined" && client_info_interface_1.ClientInfo) === "function" ? _c : Object]),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], PasswordResetController.prototype, "requestPasswordReset", null);
__decorate([
    (0, common_1.Post)('reset'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, throttler_1.Throttle)({ default: { limit: 5, ttl: 60000 } }) // 5 tentativas por minuto
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Redefinir senha',
        description: 'Redefine a senha do usuário usando o token recebido por email',
    }),
    (0, swagger_1.ApiBody)({ type: password_reset_dto_1.ResetPasswordDto }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Senha redefinida com sucesso',
        type: password_reset_dto_1.ResetPasswordResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Dados inválidos ou senhas não coincidem',
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Token inválido ou expirado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 404,
        description: 'Usuário não encontrado',
    }),
    (0, swagger_1.ApiResponse)({
        status: 429,
        description: 'Muitas tentativas - rate limit excedido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 500,
        description: 'Erro interno do servidor',
    }),
    __param(0, (0, common_1.Body)()),
    __param(1, (0, get_client_info_decorator_1.GetClientInfo)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [typeof (_e = typeof password_reset_dto_1.ResetPasswordDto !== "undefined" && password_reset_dto_1.ResetPasswordDto) === "function" ? _e : Object, typeof (_f = typeof client_info_interface_1.ClientInfo !== "undefined" && client_info_interface_1.ClientInfo) === "function" ? _f : Object]),
    __metadata("design:returntype", typeof (_g = typeof Promise !== "undefined" && Promise) === "function" ? _g : Object)
], PasswordResetController.prototype, "resetPassword", null);
__decorate([
    (0, common_1.Get)('validate-token'),
    (0, common_1.HttpCode)(common_1.HttpStatus.OK),
    (0, throttler_1.Throttle)({ default: { limit: 10, ttl: 60000 } }) // 10 tentativas por minuto
    ,
    (0, swagger_1.ApiOperation)({
        summary: 'Validar token de recuperação',
        description: 'Verifica se um token de recuperação é válido e não expirado',
    }),
    (0, swagger_1.ApiQuery)({
        name: 'token',
        description: 'Token de recuperação para validação',
        example: 'abc123def456...',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Status de validação do token',
        type: password_reset_dto_1.ValidateTokenResponseDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 400,
        description: 'Token não fornecido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 429,
        description: 'Muitas tentativas - rate limit excedido',
    }),
    __param(0, (0, common_1.Query)('token')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", typeof (_h = typeof Promise !== "undefined" && Promise) === "function" ? _h : Object)
], PasswordResetController.prototype, "validateToken", null);
__decorate([
    (0, common_1.Get)('stats'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.GESTOR),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Estatísticas de recuperação de senha',
        description: 'Obtém estatísticas sobre solicitações de recuperação de senha (apenas admins)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Estatísticas obtidas com sucesso',
        type: password_reset_dto_1.PasswordResetStatsDto,
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Token de autenticação inválido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - permissões insuficientes',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_j = typeof Promise !== "undefined" && Promise) === "function" ? _j : Object)
], PasswordResetController.prototype, "getPasswordResetStats", null);
__decorate([
    (0, common_1.Post)('cleanup-expired'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Limpar tokens expirados',
        description: 'Remove manualmente tokens de recuperação expirados (apenas admins)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Tokens expirados removidos com sucesso',
        schema: {
            type: 'object',
            properties: {
                message: { type: 'string', example: 'Tokens expirados removidos com sucesso' },
                deletedCount: { type: 'number', example: 15 },
                timestamp: { type: 'string', example: '2024-01-15T10:30:00Z' },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Token de autenticação inválido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - permissões insuficientes',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_k = typeof Promise !== "undefined" && Promise) === "function" ? _k : Object)
], PasswordResetController.prototype, "cleanupExpiredTokens", null);
__decorate([
    (0, common_1.Get)('token-stats'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard, roles_guard_1.RolesGuard),
    (0, role_decorator_1.Roles)(roles_constants_1.ROLES.ADMIN, roles_constants_1.ROLES.SUPER_ADMIN),
    (0, swagger_1.ApiBearerAuth)(),
    (0, swagger_1.ApiOperation)({
        summary: 'Estatísticas detalhadas de tokens',
        description: 'Obtém estatísticas detalhadas sobre tokens de recuperação (apenas admins)',
    }),
    (0, swagger_1.ApiResponse)({
        status: 200,
        description: 'Estatísticas obtidas com sucesso',
        schema: {
            type: 'object',
            properties: {
                total: { type: 'number', example: 100 },
                active: { type: 'number', example: 5 },
                expired: { type: 'number', example: 80 },
                used: { type: 'number', example: 15 },
            },
        },
    }),
    (0, swagger_1.ApiResponse)({
        status: 401,
        description: 'Token de autenticação inválido',
    }),
    (0, swagger_1.ApiResponse)({
        status: 403,
        description: 'Acesso negado - permissões insuficientes',
    }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_l = typeof Promise !== "undefined" && Promise) === "function" ? _l : Object)
], PasswordResetController.prototype, "getTokenStats", null);
exports.PasswordResetController = PasswordResetController = __decorate([
    (0, swagger_1.ApiTags)('Recuperação de Senha'),
    (0, common_1.Controller)('auth/password-reset'),
    (0, swagger_1.ApiExtraModels)(password_reset_dto_1.ForgotPasswordDto, password_reset_dto_1.ResetPasswordDto, password_reset_dto_1.ValidateTokenDto, password_reset_dto_1.ResetPasswordResponseDto, password_reset_dto_1.ValidateTokenResponseDto, password_reset_dto_1.PasswordResetStatsDto),
    (0, common_1.UsePipes)(new common_1.ValidationPipe({ transform: true, whitelist: true })),
    __metadata("design:paramtypes", [typeof (_a = typeof password_reset_service_1.PasswordResetService !== "undefined" && password_reset_service_1.PasswordResetService) === "function" ? _a : Object])
], PasswordResetController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,