{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\password-reset.controller.ts","mappings":";;;;;;;;;;;;;;;;AAAA,2CAYwB;AACxB,6CAQyB;AACzB,iDAA6C;AAE7C,+EAA0E;AAC1E,mEAOoC;AACpC,iGAAkF;AAClF,yFAA2E;AAC3E,6DAAwD;AACxD,uDAAmD;AACnD,iEAAqD;AAErD,4EAA+D;AAE/D,+CAA+C;AAMxC,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IACL;IAA7B,YAA6B,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;IAAG,CAAC;IA2BrE,AAAN,KAAK,CAAC,oBAAoB,CAChB,UAAmC,EAC1B,UAAsB;QAEvC,OAAO,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAChF,CAAC;IAmCK,AAAN,KAAK,CAAC,aAAa,CACT,QAA0B,EACjB,UAAsB;QAEvC,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACvE,CAAC;IA2BK,AAAN,KAAK,CAAC,aAAa,CACD,KAAa;QAE7B,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,4BAAmB,CAAC,qBAAqB,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACxD,CAAC;IAuBK,AAAN,KAAK,CAAC,qBAAqB;QACzB,2DAA2D;QAC3D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,EAAE,CAAC;QACtE,OAAO;YACL,GAAG,KAAK;YACR,uBAAuB,EAAE,KAAK,CAAC,UAAU,IAAI,CAAC;YAC9C,oBAAoB,EAAE,KAAK,CAAC,aAAa,IAAI,CAAC;YAC9C,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG;YACzE,kBAAkB,EAAE,KAAK,CAAC,eAAe,IAAI,CAAC;SAC/C,CAAC;IACJ,CAAC;IA8BK,AAAN,KAAK,CAAC,oBAAoB;QAKxB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,EAAE,CAAC;QAC5E,OAAO;YACL,OAAO,EAAE,wCAAwC;YACjD,YAAY;YACZ,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;IA+BK,AAAN,KAAK,CAAC,aAAa;QAMjB,OAAO,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,CAAC;IACnD,CAAC;CACF,CAAA;AA7NY,0DAAuB;AA4B5B;IAzBL,IAAA,aAAI,EAAC,SAAS,CAAC;IACf,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,0BAA0B;;IAC1E,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,gCAAgC;QACzC,WAAW,EAAE,2DAA2D;KACzE,CAAC;IACD,IAAA,iBAAO,EAAC,EAAE,IAAI,EAAE,sCAAuB,EAAE,CAAC;IAC1C,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,oCAAoC;QACjD,IAAI,EAAE,6CAAwB;KAC/B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,sCAAsC;KACpD,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yCAAyC;KACvD,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,0BAA0B;KACxC,CAAC;IAEC,WAAA,IAAA,aAAI,GAAE,CAAA;IACN,WAAA,IAAA,yCAAa,GAAE,CAAA;;yDADI,sCAAuB,oBAAvB,sCAAuB,oDACd,kCAAU,oBAAV,kCAAU;wDACtC,OAAO,oBAAP,OAAO;mEAET;AAmCK;IAjCL,IAAA,aAAI,EAAC,OAAO,CAAC;IACb,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,0BAA0B;;IAC1E,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,iBAAiB;QAC1B,WAAW,EAAE,+DAA+D;KAC7E,CAAC;IACD,IAAA,iBAAO,EAAC,EAAE,IAAI,EAAE,qCAAgB,EAAE,CAAC;IACnC,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;QAC3C,IAAI,EAAE,6CAAwB;KAC/B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yCAAyC;KACvD,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,4BAA4B;KAC1C,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,wBAAwB;KACtC,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yCAAyC;KACvD,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,0BAA0B;KACxC,CAAC;IAEC,WAAA,IAAA,aAAI,GAAE,CAAA;IACN,WAAA,IAAA,yCAAa,GAAE,CAAA;;yDADE,qCAAgB,oBAAhB,qCAAgB,oDACL,kCAAU,oBAAV,kCAAU;wDACtC,OAAO,oBAAP,OAAO;4DAET;AA2BK;IAzBL,IAAA,YAAG,EAAC,gBAAgB,CAAC;IACrB,IAAA,iBAAQ,EAAC,mBAAU,CAAC,EAAE,CAAC;IACvB,IAAA,oBAAQ,EAAC,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,2BAA2B;;IAC5E,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,8BAA8B;QACvC,WAAW,EAAE,6DAA6D;KAC3E,CAAC;IACD,IAAA,kBAAQ,EAAC;QACR,IAAI,EAAE,OAAO;QACb,WAAW,EAAE,qCAAqC;QAClD,OAAO,EAAE,iBAAiB;KAC3B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,8BAA8B;QAC3C,IAAI,EAAE,6CAAwB;KAC/B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,qBAAqB;KACnC,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,yCAAyC;KACvD,CAAC;IAEC,WAAA,IAAA,cAAK,EAAC,OAAO,CAAC,CAAA;;;wDACd,OAAO,oBAAP,OAAO;4DAMT;AAuBK;IArBL,IAAA,YAAG,EAAC,OAAO,CAAC;IACZ,IAAA,kBAAS,EAAC,6BAAY,EAAE,wBAAU,CAAC;IACnC,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,EAAE,uBAAK,CAAC,MAAM,CAAC;IAChC,IAAA,uBAAa,GAAE;IACf,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,sCAAsC;QAC/C,WAAW,EAAE,+EAA+E;KAC7F,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,kCAAkC;QAC/C,IAAI,EAAE,0CAAqB;KAC5B,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,gCAAgC;KAC9C,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,0CAA0C;KACxD,CAAC;;;wDAC6B,OAAO,oBAAP,OAAO;oEAUrC;AA8BK;IA5BL,IAAA,aAAI,EAAC,iBAAiB,CAAC;IACvB,IAAA,kBAAS,EAAC,6BAAY,EAAE,wBAAU,CAAC;IACnC,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,EAAE,uBAAK,CAAC,WAAW,CAAC;IACrC,IAAA,uBAAa,GAAE;IACf,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,yBAAyB;QAClC,WAAW,EAAE,oEAAoE;KAClF,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,wCAAwC;QACrD,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACV,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,wCAAwC,EAAE;gBAC9E,YAAY,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE;gBAC7C,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,sBAAsB,EAAE;aAC/D;SACF;KACF,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,gCAAgC;KAC9C,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,0CAA0C;KACxD,CAAC;;;wDAC4B,OAAO,oBAAP,OAAO;mEAWpC;AA+BK;IA7BL,IAAA,YAAG,EAAC,aAAa,CAAC;IAClB,IAAA,kBAAS,EAAC,6BAAY,EAAE,wBAAU,CAAC;IACnC,IAAA,sBAAK,EAAC,uBAAK,CAAC,KAAK,EAAE,uBAAK,CAAC,WAAW,CAAC;IACrC,IAAA,uBAAa,GAAE;IACf,IAAA,sBAAY,EAAC;QACZ,OAAO,EAAE,mCAAmC;QAC5C,WAAW,EAAE,2EAA2E;KACzF,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,kCAAkC;QAC/C,MAAM,EAAE;YACN,IAAI,EAAE,QAAQ;YACd,UAAU,EAAE;gBACV,KAAK,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,EAAE;gBACvC,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,EAAE;gBACtC,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE;gBACxC,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE;aACtC;SACF;KACF,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,gCAAgC;KAC9C,CAAC;IACD,IAAA,qBAAW,EAAC;QACX,MAAM,EAAE,GAAG;QACX,WAAW,EAAE,0CAA0C;KACxD,CAAC;;;wDACqB,OAAO,oBAAP,OAAO;4DAO7B;kCA5NU,uBAAuB;IAJnC,IAAA,iBAAO,EAAC,sBAAsB,CAAC;IAC/B,IAAA,mBAAU,EAAC,qBAAqB,CAAC;IACjC,IAAA,wBAAc,EAAC,sCAAuB,EAAE,qCAAgB,EAAE,qCAAgB,EAAE,6CAAwB,EAAE,6CAAwB,EAAE,0CAAqB,CAAC;IACtJ,IAAA,iBAAQ,EAAC,IAAI,uBAAc,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;yDAEd,6CAAoB,oBAApB,6CAAoB;GAD5D,uBAAuB,CA6NnC","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\auth\\controllers\\password-reset.controller.ts"],"sourcesContent":["import {\n  Controller,\n  Post,\n  Body,\n  Get,\n  Query,\n  HttpCode,\n  HttpStatus,\n  UseGuards,\n  ValidationPipe,\n  UsePipes,\n  BadRequestException,\n} from '@nestjs/common';\nimport {\n  ApiTags,\n  ApiOperation,\n  ApiResponse,\n  ApiBody,\n  ApiQuery,\n  ApiBearerAuth,\n  ApiExtraModels,\n} from '@nestjs/swagger';\nimport { Throttle } from '@nestjs/throttler';\nimport { IsEmail, IsString, MinLength, Matches } from 'class-validator';\nimport { PasswordResetService } from '../services/password-reset.service';\nimport {\n  ResetPasswordDto,\n  ForgotPasswordDto as RequestPasswordResetDto,\n  ValidateTokenDto,\n  ResetPasswordResponseDto,\n  ValidateTokenResponseDto,\n  PasswordResetStatsDto,\n} from '../dtos/password-reset.dto';\nimport { GetClientInfo } from '../../common/decorators/get-client-info.decorator';\nimport { ClientInfo } from '../../common/interfaces/client-info.interface';\nimport { JwtAuthGuard } from '../guards/jwt-auth.guard';\nimport { RolesGuard } from '../guards/roles.guard';\nimport { Roles } from '../decorators/role.decorator';\nimport { Role } from '../enums/role.enum';\nimport { ROLES } from '../../shared/constants/roles.constants';\n\n// Usando DTOs do arquivo password-reset.dto.ts\n\n@ApiTags('Recuperação de Senha')\n@Controller('auth/password-reset')\n@ApiExtraModels(RequestPasswordResetDto, ResetPasswordDto, ValidateTokenDto, ResetPasswordResponseDto, ValidateTokenResponseDto, PasswordResetStatsDto)\n@UsePipes(new ValidationPipe({ transform: true, whitelist: true }))\nexport class PasswordResetController {\n  constructor(private readonly passwordResetService: PasswordResetService) {}\n\n  @Post('request')\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 3, ttl: 60000 } }) // 3 tentativas por minuto\n  @ApiOperation({\n    summary: 'Solicitar recuperação de senha',\n    description: 'Envia um email com link para redefinir a senha do usuário',\n  })\n  @ApiBody({ type: RequestPasswordResetDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Solicitação processada com sucesso',\n    type: ResetPasswordResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou muitas tentativas',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Muitas tentativas - rate limit excedido',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Erro interno do servidor',\n  })\n  async requestPasswordReset(\n    @Body() requestDto: RequestPasswordResetDto,\n    @GetClientInfo() clientInfo: ClientInfo,\n  ): Promise<any> {\n    return this.passwordResetService.requestPasswordReset(requestDto, clientInfo);\n  }\n\n  @Post('reset')\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 5, ttl: 60000 } }) // 5 tentativas por minuto\n  @ApiOperation({\n    summary: 'Redefinir senha',\n    description: 'Redefine a senha do usuário usando o token recebido por email',\n  })\n  @ApiBody({ type: ResetPasswordDto })\n  @ApiResponse({\n    status: 200,\n    description: 'Senha redefinida com sucesso',\n    type: ResetPasswordResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Dados inválidos ou senhas não coincidem',\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Token inválido ou expirado',\n  })\n  @ApiResponse({\n    status: 404,\n    description: 'Usuário não encontrado',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Muitas tentativas - rate limit excedido',\n  })\n  @ApiResponse({\n    status: 500,\n    description: 'Erro interno do servidor',\n  })\n  async resetPassword(\n    @Body() resetDto: ResetPasswordDto,\n    @GetClientInfo() clientInfo: ClientInfo,\n  ): Promise<any> {\n    return this.passwordResetService.resetPassword(resetDto, clientInfo);\n  }\n\n  @Get('validate-token')\n  @HttpCode(HttpStatus.OK)\n  @Throttle({ default: { limit: 10, ttl: 60000 } }) // 10 tentativas por minuto\n  @ApiOperation({\n    summary: 'Validar token de recuperação',\n    description: 'Verifica se um token de recuperação é válido e não expirado',\n  })\n  @ApiQuery({\n    name: 'token',\n    description: 'Token de recuperação para validação',\n    example: 'abc123def456...',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Status de validação do token',\n    type: ValidateTokenResponseDto,\n  })\n  @ApiResponse({\n    status: 400,\n    description: 'Token não fornecido',\n  })\n  @ApiResponse({\n    status: 429,\n    description: 'Muitas tentativas - rate limit excedido',\n  })\n  async validateToken(\n    @Query('token') token: string,\n  ): Promise<ValidateTokenResponseDto> {\n    if (!token) {\n      throw new BadRequestException('Token é obrigatório');\n    }\n\n    return this.passwordResetService.validateToken(token);\n  }\n\n  @Get('stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLES.ADMIN, ROLES.GESTOR)\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Estatísticas de recuperação de senha',\n    description: 'Obtém estatísticas sobre solicitações de recuperação de senha (apenas admins)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Estatísticas obtidas com sucesso',\n    type: PasswordResetStatsDto,\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Token de autenticação inválido',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - permissões insuficientes',\n  })\n  async getPasswordResetStats(): Promise<any> {\n    // Convertendo o resultado para o formato esperado pelo DTO\n    const stats = await this.passwordResetService.getPasswordResetStats();\n    return {\n      ...stats,\n      successfulResetsLast24h: stats.usedTokens || 0,\n      expiredTokensLast24h: stats.expiredTokens || 0,\n      successRate: ((stats.usedTokens || 0) / (stats.totalRequests || 1)) * 100,\n      uniqueUsersLast24h: stats.requestsLast24h || 0\n    };\n  }\n\n  @Post('cleanup-expired')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLES.ADMIN, ROLES.SUPER_ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Limpar tokens expirados',\n    description: 'Remove manualmente tokens de recuperação expirados (apenas admins)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Tokens expirados removidos com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        message: { type: 'string', example: 'Tokens expirados removidos com sucesso' },\n        deletedCount: { type: 'number', example: 15 },\n        timestamp: { type: 'string', example: '2024-01-15T10:30:00Z' },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Token de autenticação inválido',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - permissões insuficientes',\n  })\n  async cleanupExpiredTokens(): Promise<{\n    message: string;\n    deletedCount: number;\n    timestamp: string;\n  }> {\n    const deletedCount = await this.passwordResetService.cleanupExpiredTokens();\n    return {\n      message: 'Tokens expirados removidos com sucesso',\n      deletedCount,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  @Get('token-stats')\n  @UseGuards(JwtAuthGuard, RolesGuard)\n  @Roles(ROLES.ADMIN, ROLES.SUPER_ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Estatísticas detalhadas de tokens',\n    description: 'Obtém estatísticas detalhadas sobre tokens de recuperação (apenas admins)',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Estatísticas obtidas com sucesso',\n    schema: {\n      type: 'object',\n      properties: {\n        total: { type: 'number', example: 100 },\n        active: { type: 'number', example: 5 },\n        expired: { type: 'number', example: 80 },\n        used: { type: 'number', example: 15 },\n      },\n    },\n  })\n  @ApiResponse({\n    status: 401,\n    description: 'Token de autenticação inválido',\n  })\n  @ApiResponse({\n    status: 403,\n    description: 'Acesso negado - permissões insuficientes',\n  })\n  async getTokenStats(): Promise<{\n    total: number;\n    active: number;\n    expired: number;\n    used: number;\n  }> {\n    return this.passwordResetService.getTokenStats();\n  }\n}"],"version":3}