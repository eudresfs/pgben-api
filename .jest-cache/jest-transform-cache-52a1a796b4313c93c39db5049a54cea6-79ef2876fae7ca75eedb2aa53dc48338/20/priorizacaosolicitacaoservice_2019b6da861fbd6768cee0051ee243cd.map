{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\priorizacao-solicitacao.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\solicitacao\\services\\priorizacao-solicitacao.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, In } from 'typeorm';\nimport {\n  Solicitacao,\n  StatusSolicitacao,\n} from '../../../entities/solicitacao.entity';\nimport { ConfigService } from '@nestjs/config';\n\n/**\n * Níveis de prioridade para solicitações\n */\nexport enum NivelPrioridade {\n  BAIXA = 'baixa',\n  NORMAL = 'normal',\n  ALTA = 'alta',\n  URGENTE = 'urgente',\n  CRITICA = 'critica',\n}\n\n/**\n * Interface para critérios de priorização\n */\ninterface CriterioPriorizacao {\n  nome: string;\n  descricao: string;\n  verificador: (solicitacao: Solicitacao) => boolean;\n  nivelPrioridade: NivelPrioridade;\n  peso: number;\n}\n\n/**\n * Serviço responsável pela priorização de solicitações\n *\n * Este serviço implementa funcionalidades para:\n * - Calcular a prioridade de solicitações com base em critérios configuráveis\n * - Priorizar automaticamente solicitações com determinação judicial\n * - Ordenar listas de solicitações de acordo com sua prioridade\n */\n@Injectable()\nexport class PriorizacaoSolicitacaoService {\n  private readonly logger = new Logger(PriorizacaoSolicitacaoService.name);\n  private criteriosPriorizacao: CriterioPriorizacao[] = [];\n\n  constructor(\n    @InjectRepository(Solicitacao)\n    private readonly solicitacaoRepository: Repository<Solicitacao>,\n    private readonly configService: ConfigService,\n  ) {\n    this.inicializarCriterios();\n  }\n\n  /**\n   * Inicializa os critérios de priorização padrão\n   */\n  private inicializarCriterios(): void {\n    this.criteriosPriorizacao = [\n      {\n        nome: 'determinacao_judicial',\n        descricao: 'Solicitação com determinação judicial',\n        verificador: (solicitacao) =>\n          solicitacao.determinacao_judicial_flag === true,\n        nivelPrioridade: NivelPrioridade.URGENTE,\n        peso: 100,\n      },\n      {\n        nome: 'prazo_expirado',\n        descricao: 'Solicitação com prazo expirado',\n        verificador: (solicitacao): boolean => {\n          const agora = new Date();\n          return (\n            (solicitacao.prazo_analise && agora > solicitacao.prazo_analise) ||\n            (solicitacao.prazo_documentos &&\n              agora > solicitacao.prazo_documentos) ||\n            (solicitacao.prazo_processamento &&\n              agora > solicitacao.prazo_processamento) ||\n            false\n          );\n        },\n        nivelPrioridade: NivelPrioridade.ALTA,\n        peso: 75,\n      },\n      {\n        nome: 'prazo_proximo',\n        descricao: 'Solicitação com prazo próximo de expirar (48h)',\n        verificador: (solicitacao): boolean => {\n          const agora = new Date();\n          const limite = new Date(agora.getTime() + 48 * 60 * 60 * 1000); // 48 horas em milissegundos\n\n          return (\n            (solicitacao.prazo_analise &&\n              agora <= solicitacao.prazo_analise &&\n              solicitacao.prazo_analise <= limite) ||\n            (solicitacao.prazo_documentos &&\n              agora <= solicitacao.prazo_documentos &&\n              solicitacao.prazo_documentos <= limite) ||\n            (solicitacao.prazo_processamento &&\n              agora <= solicitacao.prazo_processamento &&\n              solicitacao.prazo_processamento <= limite) ||\n            false\n          );\n        },\n        nivelPrioridade: NivelPrioridade.NORMAL,\n        peso: 50,\n      },\n    ];\n  }\n\n  /**\n   * Calcula a prioridade de uma solicitação com base nos critérios configurados\n   * @param solicitacao Solicitação a ser priorizada\n   * @returns Objeto com informações de prioridade\n   */\n  calcularPrioridade(solicitacao: Solicitacao): {\n    nivelPrioridade: NivelPrioridade;\n    pontuacao: number;\n    criteriosAtendidos: string[];\n  } {\n    let pontuacaoTotal = 0;\n    const criteriosAtendidos: string[] = [];\n\n    // Verificar cada critério\n    for (const criterio of this.criteriosPriorizacao) {\n      if (criterio.verificador(solicitacao)) {\n        pontuacaoTotal += criterio.peso;\n        criteriosAtendidos.push(criterio.nome);\n      }\n    }\n\n    // Determinar nível de prioridade com base na pontuação\n    let nivelPrioridade: NivelPrioridade;\n    if (pontuacaoTotal >= 100) {\n      nivelPrioridade = NivelPrioridade.URGENTE;\n    } else if (pontuacaoTotal >= 75) {\n      nivelPrioridade = NivelPrioridade.ALTA;\n    } else if (pontuacaoTotal >= 50) {\n      nivelPrioridade = NivelPrioridade.NORMAL;\n    } else if (pontuacaoTotal >= 25) {\n      nivelPrioridade = NivelPrioridade.BAIXA;\n    } else {\n      nivelPrioridade = NivelPrioridade.BAIXA;\n    }\n\n    return {\n      nivelPrioridade,\n      pontuacao: pontuacaoTotal,\n      criteriosAtendidos,\n    };\n  }\n\n  /**\n   * Busca solicitações priorizadas de acordo com critérios específicos\n   * @param status Status das solicitações a serem buscadas\n   * @param limit Limite de resultados\n   * @returns Lista de solicitações ordenadas por prioridade\n   */\n  async buscarSolicitacoesPriorizadas(\n    status: StatusSolicitacao[] = [\n      StatusSolicitacao.PENDENTE,\n      StatusSolicitacao.EM_ANALISE,\n      StatusSolicitacao.AGUARDANDO_DOCUMENTOS,\n    ],\n    limit = 100,\n  ): Promise<Solicitacao[]> {\n    // Primeiro critério: determinação judicial (ORDER BY determinacao_judicial_flag DESC)\n    // Segundo critério: data de abertura mais antiga (ORDER BY data_abertura ASC)\n    const solicitacoes = await this.solicitacaoRepository\n      .createQueryBuilder('solicitacao')\n      .where('solicitacao.status IN (:...status)', { status })\n      .orderBy('solicitacao.determinacao_judicial_flag', 'DESC')\n      .addOrderBy('solicitacao.data_abertura', 'ASC')\n      .take(limit)\n      .getMany();\n\n    return solicitacoes;\n  }\n\n  /**\n   * Busca solicitações com determinação judicial em estados ativos\n   * @returns Lista de solicitações com determinação judicial\n   */\n  async buscarSolicitacoesComDeterminacaoJudicial(): Promise<Solicitacao[]> {\n    const estadosAtivos = [\n      StatusSolicitacao.PENDENTE,\n      StatusSolicitacao.EM_ANALISE,\n      StatusSolicitacao.AGUARDANDO_DOCUMENTOS,\n      StatusSolicitacao.APROVADA,\n      StatusSolicitacao.EM_PROCESSAMENTO,\n    ];\n\n    return this.solicitacaoRepository.find({\n      where: {\n        determinacao_judicial_flag: true,\n        status: In(estadosAtivos),\n      },\n      order: {\n        data_abertura: 'ASC',\n      },\n    });\n  }\n\n  /**\n   * Calcula e retorna a lista de trabalho priorizada para um técnico\n   * @param tecnicoId ID do técnico\n   * @returns Lista de solicitações priorizadas do técnico\n   */\n  async calcularListaTrabalhoTecnico(\n    tecnicoId: string,\n  ): Promise<Solicitacao[]> {\n    const estadosAtivos = [\n      StatusSolicitacao.PENDENTE,\n      StatusSolicitacao.EM_ANALISE,\n      StatusSolicitacao.AGUARDANDO_DOCUMENTOS,\n    ];\n\n    const solicitacoes = await this.solicitacaoRepository.find({\n      where: {\n        tecnico_id: tecnicoId,\n        status: In(estadosAtivos),\n      },\n    });\n\n    // Calcular prioridade para cada solicitação\n    const solicitacoesComPrioridade = solicitacoes.map((solicitacao) => ({\n      solicitacao,\n      prioridade: this.calcularPrioridade(solicitacao),\n    }));\n\n    // Ordenar por prioridade (decrescente) e depois por data de abertura (crescente)\n    solicitacoesComPrioridade.sort((a, b) => {\n      // Primeiro critério: pontuação de prioridade (maior primeiro)\n      if (b.prioridade.pontuacao !== a.prioridade.pontuacao) {\n        return b.prioridade.pontuacao - a.prioridade.pontuacao;\n      }\n\n      // Segundo critério: data de abertura (mais antiga primeiro)\n      return (\n        a.solicitacao.data_abertura.getTime() -\n        b.solicitacao.data_abertura.getTime()\n      );\n    });\n\n    // Retornar apenas as solicitações, já ordenadas\n    return solicitacoesComPrioridade.map((item) => item.solicitacao);\n  }\n}\n"],"version":3}