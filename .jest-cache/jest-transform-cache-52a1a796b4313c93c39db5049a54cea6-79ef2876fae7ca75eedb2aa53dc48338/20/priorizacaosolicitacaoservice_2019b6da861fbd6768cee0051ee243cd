999c07362b071361c218c6488acb40f8
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var PriorizacaoSolicitacaoService_1;
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriorizacaoSolicitacaoService = exports.NivelPrioridade = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const typeorm_2 = require("typeorm");
const solicitacao_entity_1 = require("../../../entities/solicitacao.entity");
const config_1 = require("@nestjs/config");
/**
 * Níveis de prioridade para solicitações
 */
var NivelPrioridade;
(function (NivelPrioridade) {
    NivelPrioridade["BAIXA"] = "baixa";
    NivelPrioridade["NORMAL"] = "normal";
    NivelPrioridade["ALTA"] = "alta";
    NivelPrioridade["URGENTE"] = "urgente";
    NivelPrioridade["CRITICA"] = "critica";
})(NivelPrioridade || (exports.NivelPrioridade = NivelPrioridade = {}));
/**
 * Serviço responsável pela priorização de solicitações
 *
 * Este serviço implementa funcionalidades para:
 * - Calcular a prioridade de solicitações com base em critérios configuráveis
 * - Priorizar automaticamente solicitações com determinação judicial
 * - Ordenar listas de solicitações de acordo com sua prioridade
 */
let PriorizacaoSolicitacaoService = PriorizacaoSolicitacaoService_1 = class PriorizacaoSolicitacaoService {
    solicitacaoRepository;
    configService;
    logger = new common_1.Logger(PriorizacaoSolicitacaoService_1.name);
    criteriosPriorizacao = [];
    constructor(solicitacaoRepository, configService) {
        this.solicitacaoRepository = solicitacaoRepository;
        this.configService = configService;
        this.inicializarCriterios();
    }
    /**
     * Inicializa os critérios de priorização padrão
     */
    inicializarCriterios() {
        this.criteriosPriorizacao = [
            {
                nome: 'determinacao_judicial',
                descricao: 'Solicitação com determinação judicial',
                verificador: (solicitacao) => solicitacao.determinacao_judicial_flag === true,
                nivelPrioridade: NivelPrioridade.URGENTE,
                peso: 100,
            },
            {
                nome: 'prazo_expirado',
                descricao: 'Solicitação com prazo expirado',
                verificador: (solicitacao) => {
                    const agora = new Date();
                    return ((solicitacao.prazo_analise && agora > solicitacao.prazo_analise) ||
                        (solicitacao.prazo_documentos &&
                            agora > solicitacao.prazo_documentos) ||
                        (solicitacao.prazo_processamento &&
                            agora > solicitacao.prazo_processamento) ||
                        false);
                },
                nivelPrioridade: NivelPrioridade.ALTA,
                peso: 75,
            },
            {
                nome: 'prazo_proximo',
                descricao: 'Solicitação com prazo próximo de expirar (48h)',
                verificador: (solicitacao) => {
                    const agora = new Date();
                    const limite = new Date(agora.getTime() + 48 * 60 * 60 * 1000); // 48 horas em milissegundos
                    return ((solicitacao.prazo_analise &&
                        agora <= solicitacao.prazo_analise &&
                        solicitacao.prazo_analise <= limite) ||
                        (solicitacao.prazo_documentos &&
                            agora <= solicitacao.prazo_documentos &&
                            solicitacao.prazo_documentos <= limite) ||
                        (solicitacao.prazo_processamento &&
                            agora <= solicitacao.prazo_processamento &&
                            solicitacao.prazo_processamento <= limite) ||
                        false);
                },
                nivelPrioridade: NivelPrioridade.NORMAL,
                peso: 50,
            },
        ];
    }
    /**
     * Calcula a prioridade de uma solicitação com base nos critérios configurados
     * @param solicitacao Solicitação a ser priorizada
     * @returns Objeto com informações de prioridade
     */
    calcularPrioridade(solicitacao) {
        let pontuacaoTotal = 0;
        const criteriosAtendidos = [];
        // Verificar cada critério
        for (const criterio of this.criteriosPriorizacao) {
            if (criterio.verificador(solicitacao)) {
                pontuacaoTotal += criterio.peso;
                criteriosAtendidos.push(criterio.nome);
            }
        }
        // Determinar nível de prioridade com base na pontuação
        let nivelPrioridade;
        if (pontuacaoTotal >= 100) {
            nivelPrioridade = NivelPrioridade.URGENTE;
        }
        else if (pontuacaoTotal >= 75) {
            nivelPrioridade = NivelPrioridade.ALTA;
        }
        else if (pontuacaoTotal >= 50) {
            nivelPrioridade = NivelPrioridade.NORMAL;
        }
        else if (pontuacaoTotal >= 25) {
            nivelPrioridade = NivelPrioridade.BAIXA;
        }
        else {
            nivelPrioridade = NivelPrioridade.BAIXA;
        }
        return {
            nivelPrioridade,
            pontuacao: pontuacaoTotal,
            criteriosAtendidos,
        };
    }
    /**
     * Busca solicitações priorizadas de acordo com critérios específicos
     * @param status Status das solicitações a serem buscadas
     * @param limit Limite de resultados
     * @returns Lista de solicitações ordenadas por prioridade
     */
    async buscarSolicitacoesPriorizadas(status = [
        solicitacao_entity_1.StatusSolicitacao.PENDENTE,
        solicitacao_entity_1.StatusSolicitacao.EM_ANALISE,
        solicitacao_entity_1.StatusSolicitacao.AGUARDANDO_DOCUMENTOS,
    ], limit = 100) {
        // Primeiro critério: determinação judicial (ORDER BY determinacao_judicial_flag DESC)
        // Segundo critério: data de abertura mais antiga (ORDER BY data_abertura ASC)
        const solicitacoes = await this.solicitacaoRepository
            .createQueryBuilder('solicitacao')
            .where('solicitacao.status IN (:...status)', { status })
            .orderBy('solicitacao.determinacao_judicial_flag', 'DESC')
            .addOrderBy('solicitacao.data_abertura', 'ASC')
            .take(limit)
            .getMany();
        return solicitacoes;
    }
    /**
     * Busca solicitações com determinação judicial em estados ativos
     * @returns Lista de solicitações com determinação judicial
     */
    async buscarSolicitacoesComDeterminacaoJudicial() {
        const estadosAtivos = [
            solicitacao_entity_1.StatusSolicitacao.PENDENTE,
            solicitacao_entity_1.StatusSolicitacao.EM_ANALISE,
            solicitacao_entity_1.StatusSolicitacao.AGUARDANDO_DOCUMENTOS,
            solicitacao_entity_1.StatusSolicitacao.APROVADA,
            solicitacao_entity_1.StatusSolicitacao.EM_PROCESSAMENTO,
        ];
        return this.solicitacaoRepository.find({
            where: {
                determinacao_judicial_flag: true,
                status: (0, typeorm_2.In)(estadosAtivos),
            },
            order: {
                data_abertura: 'ASC',
            },
        });
    }
    /**
     * Calcula e retorna a lista de trabalho priorizada para um técnico
     * @param tecnicoId ID do técnico
     * @returns Lista de solicitações priorizadas do técnico
     */
    async calcularListaTrabalhoTecnico(tecnicoId) {
        const estadosAtivos = [
            solicitacao_entity_1.StatusSolicitacao.PENDENTE,
            solicitacao_entity_1.StatusSolicitacao.EM_ANALISE,
            solicitacao_entity_1.StatusSolicitacao.AGUARDANDO_DOCUMENTOS,
        ];
        const solicitacoes = await this.solicitacaoRepository.find({
            where: {
                tecnico_id: tecnicoId,
                status: (0, typeorm_2.In)(estadosAtivos),
            },
        });
        // Calcular prioridade para cada solicitação
        const solicitacoesComPrioridade = solicitacoes.map((solicitacao) => ({
            solicitacao,
            prioridade: this.calcularPrioridade(solicitacao),
        }));
        // Ordenar por prioridade (decrescente) e depois por data de abertura (crescente)
        solicitacoesComPrioridade.sort((a, b) => {
            // Primeiro critério: pontuação de prioridade (maior primeiro)
            if (b.prioridade.pontuacao !== a.prioridade.pontuacao) {
                return b.prioridade.pontuacao - a.prioridade.pontuacao;
            }
            // Segundo critério: data de abertura (mais antiga primeiro)
            return (a.solicitacao.data_abertura.getTime() -
                b.solicitacao.data_abertura.getTime());
        });
        // Retornar apenas as solicitações, já ordenadas
        return solicitacoesComPrioridade.map((item) => item.solicitacao);
    }
};
exports.PriorizacaoSolicitacaoService = PriorizacaoSolicitacaoService;
exports.PriorizacaoSolicitacaoService = PriorizacaoSolicitacaoService = PriorizacaoSolicitacaoService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(solicitacao_entity_1.Solicitacao)),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_2.Repository !== "undefined" && typeorm_2.Repository) === "function" ? _a : Object, typeof (_b = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _b : Object])
], PriorizacaoSolicitacaoService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,