{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\metrics.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\shared\\monitoring\\metrics.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport * as client from 'prom-client';\n\n/**\n * Serviço de Métricas\n *\n * Responsável por coletar e expor métricas da aplicação\n * utilizando o Prometheus Client\n */\n@Injectable()\nexport class MetricsService {\n  private readonly register: client.Registry;\n  private readonly httpRequestsTotal: client.Counter;\n  private readonly httpRequestDuration: client.Histogram;\n  private readonly httpRequestsInProgress: client.Gauge;\n  private readonly databaseQueriesTotal: client.Counter;\n  private readonly databaseQueryDuration: client.Histogram;\n\n  constructor() {\n    // Criar registro de métricas\n    this.register = new client.Registry();\n\n    // Adicionar métricas padrão do Node.js\n    client.collectDefaultMetrics({ register: this.register });\n\n    // Contador de requisições HTTP\n    this.httpRequestsTotal = new client.Counter({\n      name: 'http_requests_total',\n      help: 'Total de requisições HTTP',\n      labelNames: ['method', 'route', 'status_code'],\n      registers: [this.register],\n    });\n\n    // Histograma de duração das requisições HTTP\n    this.httpRequestDuration = new client.Histogram({\n      name: 'http_request_duration_seconds',\n      help: 'Duração das requisições HTTP em segundos',\n      labelNames: ['method', 'route', 'status_code'],\n      buckets: [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],\n      registers: [this.register],\n    });\n\n    // Gauge de requisições em andamento\n    this.httpRequestsInProgress = new client.Gauge({\n      name: 'http_requests_in_progress',\n      help: 'Número de requisições HTTP em andamento',\n      labelNames: ['method', 'route'],\n      registers: [this.register],\n    });\n\n    // Contador de consultas ao banco de dados\n    this.databaseQueriesTotal = new client.Counter({\n      name: 'database_queries_total',\n      help: 'Total de consultas ao banco de dados',\n      labelNames: ['entity', 'operation'],\n      registers: [this.register],\n    });\n\n    // Histograma de duração das consultas ao banco de dados\n    this.databaseQueryDuration = new client.Histogram({\n      name: 'database_query_duration_seconds',\n      help: 'Duração das consultas ao banco de dados em segundos',\n      labelNames: ['entity', 'operation'],\n      buckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1],\n      registers: [this.register],\n    });\n  }\n\n  /**\n   * Incrementa o contador de requisições HTTP\n   */\n  recordHttpRequest(method: string, route: string, statusCode: number): void {\n    this.httpRequestsTotal.inc({\n      method,\n      route,\n      status_code: statusCode.toString(),\n    });\n  }\n\n  /**\n   * Registra a duração de uma requisição HTTP\n   */\n  recordHttpRequestDuration(\n    method: string,\n    route: string,\n    statusCode: number,\n    durationSeconds: number,\n  ): void {\n    this.httpRequestDuration.observe(\n      { method, route, status_code: statusCode.toString() },\n      durationSeconds,\n    );\n  }\n\n  /**\n   * Incrementa o contador de requisições HTTP em andamento\n   */\n  incrementHttpRequestsInProgress(method: string, route: string): void {\n    this.httpRequestsInProgress.inc({ method, route });\n  }\n\n  /**\n   * Decrementa o contador de requisições HTTP em andamento\n   */\n  decrementHttpRequestsInProgress(method: string, route: string): void {\n    this.httpRequestsInProgress.dec({ method, route });\n  }\n\n  /**\n   * Incrementa o contador de consultas ao banco de dados\n   */\n  recordDatabaseQuery(entity: string, operation: string): void {\n    this.databaseQueriesTotal.inc({ entity, operation });\n  }\n\n  /**\n   * Registra a duração de uma consulta ao banco de dados\n   */\n  recordDatabaseQueryDuration(\n    entity: string,\n    operation: string,\n    durationSeconds: number,\n  ): void {\n    this.databaseQueryDuration.observe({ entity, operation }, durationSeconds);\n  }\n\n  /**\n   * Retorna todas as métricas no formato do Prometheus\n   */\n  async getMetrics(): Promise<string> {\n    return this.register.metrics();\n  }\n\n  /**\n   * Retorna o registro de métricas\n   */\n  getRegister(): client.Registry {\n    return this.register;\n  }\n}\n"],"version":3}