bd636bfb08054a7828cd817c36c33e6b
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsService = void 0;
const common_1 = require("@nestjs/common");
const client = __importStar(require("prom-client"));
/**
 * Serviço de Métricas
 *
 * Responsável por coletar e expor métricas da aplicação
 * utilizando o Prometheus Client
 */
let MetricsService = class MetricsService {
    register;
    httpRequestsTotal;
    httpRequestDuration;
    httpRequestsInProgress;
    databaseQueriesTotal;
    databaseQueryDuration;
    constructor() {
        // Criar registro de métricas
        this.register = new client.Registry();
        // Adicionar métricas padrão do Node.js
        client.collectDefaultMetrics({ register: this.register });
        // Contador de requisições HTTP
        this.httpRequestsTotal = new client.Counter({
            name: 'http_requests_total',
            help: 'Total de requisições HTTP',
            labelNames: ['method', 'route', 'status_code'],
            registers: [this.register],
        });
        // Histograma de duração das requisições HTTP
        this.httpRequestDuration = new client.Histogram({
            name: 'http_request_duration_seconds',
            help: 'Duração das requisições HTTP em segundos',
            labelNames: ['method', 'route', 'status_code'],
            buckets: [0.01, 0.05, 0.1, 0.5, 1, 2, 5, 10],
            registers: [this.register],
        });
        // Gauge de requisições em andamento
        this.httpRequestsInProgress = new client.Gauge({
            name: 'http_requests_in_progress',
            help: 'Número de requisições HTTP em andamento',
            labelNames: ['method', 'route'],
            registers: [this.register],
        });
        // Contador de consultas ao banco de dados
        this.databaseQueriesTotal = new client.Counter({
            name: 'database_queries_total',
            help: 'Total de consultas ao banco de dados',
            labelNames: ['entity', 'operation'],
            registers: [this.register],
        });
        // Histograma de duração das consultas ao banco de dados
        this.databaseQueryDuration = new client.Histogram({
            name: 'database_query_duration_seconds',
            help: 'Duração das consultas ao banco de dados em segundos',
            labelNames: ['entity', 'operation'],
            buckets: [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1],
            registers: [this.register],
        });
    }
    /**
     * Incrementa o contador de requisições HTTP
     */
    recordHttpRequest(method, route, statusCode) {
        this.httpRequestsTotal.inc({
            method,
            route,
            status_code: statusCode.toString(),
        });
    }
    /**
     * Registra a duração de uma requisição HTTP
     */
    recordHttpRequestDuration(method, route, statusCode, durationSeconds) {
        this.httpRequestDuration.observe({ method, route, status_code: statusCode.toString() }, durationSeconds);
    }
    /**
     * Incrementa o contador de requisições HTTP em andamento
     */
    incrementHttpRequestsInProgress(method, route) {
        this.httpRequestsInProgress.inc({ method, route });
    }
    /**
     * Decrementa o contador de requisições HTTP em andamento
     */
    decrementHttpRequestsInProgress(method, route) {
        this.httpRequestsInProgress.dec({ method, route });
    }
    /**
     * Incrementa o contador de consultas ao banco de dados
     */
    recordDatabaseQuery(entity, operation) {
        this.databaseQueriesTotal.inc({ entity, operation });
    }
    /**
     * Registra a duração de uma consulta ao banco de dados
     */
    recordDatabaseQueryDuration(entity, operation, durationSeconds) {
        this.databaseQueryDuration.observe({ entity, operation }, durationSeconds);
    }
    /**
     * Retorna todas as métricas no formato do Prometheus
     */
    async getMetrics() {
        return this.register.metrics();
    }
    /**
     * Retorna o registro de métricas
     */
    getRegister() {
        return this.register;
    }
};
exports.MetricsService = MetricsService;
exports.MetricsService = MetricsService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [])
], MetricsService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,