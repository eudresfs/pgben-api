18a19d975296cb14d444d90e89641202
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var SetorRepository_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetorRepository = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("typeorm");
const setor_entity_1 = require("../../../entities/setor.entity");
const unidade_entity_1 = require("../../../entities/unidade.entity");
/**
 * Repositório de setores
 *
 * Responsável por operações de acesso a dados relacionadas a setores
 */
let SetorRepository = SetorRepository_1 = class SetorRepository {
    dataSource;
    repository;
    logger = new common_1.Logger(SetorRepository_1.name);
    constructor(dataSource) {
        this.dataSource = dataSource;
        this.repository = this.dataSource.getRepository(setor_entity_1.Setor);
    }
    /**
     * Busca todos os setores com filtros e paginação
     * @param options Opções de filtro e paginação
     * @returns Lista de setores paginada
     */
    async findAll(options) {
        try {
            this.logger.log('Buscando todos os setores com opções:', JSON.stringify(options));
            const { skip = 0, take = 10, where = {}, order = { created_at: 'DESC' }, } = options || {};
            const result = await this.repository.findAndCount({
                skip,
                take,
                where,
                order,
            });
            this.logger.log(`Encontrados ${result[1]} setores`);
            return result;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar setores: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Falha ao buscar setores');
        }
    }
    /**
     * Busca um setor pelo ID
     * @param id ID do setor
     * @returns Setor encontrado ou null
     */
    async findById(id) {
        try {
            this.logger.log(`Buscando setor por ID: ${id}`);
            const setor = await this.repository.findOne({ where: { id } });
            if (!setor) {
                this.logger.warn(`Setor não encontrado: ${id}`);
            }
            else {
                this.logger.debug(`Setor encontrado: ${JSON.stringify(setor)}`);
            }
            return setor;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar setor por ID ${id}: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Falha ao buscar setor');
        }
    }
    /**
     * Busca setores por unidade
     * @param unidadeId ID da unidade
     * @returns Lista de setores da unidade
     */
    async findByUnidadeId(unidadeId) {
        try {
            this.logger.log(`Buscando setores da unidade: ${unidadeId}`);
            const setores = await this.repository.find({
                where: { unidade_id: unidadeId },
                order: { nome: 'ASC' },
            });
            this.logger.log(`Encontrados ${setores.length} setores para a unidade ${unidadeId}`);
            return setores;
        }
        catch (error) {
            this.logger.error(`Erro ao buscar setores da unidade ${unidadeId}: ${error.message}`, error.stack);
            throw new common_1.InternalServerErrorException('Falha ao buscar setores da unidade');
        }
    }
    /**
     * Cria um novo setor
     * @param data Dados do setor
     * @returns Setor criado
     */
    async create(data) {
        try {
            this.logger.log('Criando novo setor com dados:', JSON.stringify(data));
            // Extrai o relacionamento com a unidade, se existir
            const { unidade, ...setorData } = data;
            // Cria o setor com os dados básicos
            const setor = this.repository.create(setorData);
            // Se houver relacionamento com a unidade, carrega a unidade completa
            if (data.unidade_id) {
                const unidade = await this.dataSource.getRepository(unidade_entity_1.Unidade).findOne({
                    where: { id: data.unidade_id },
                });
                if (unidade) {
                    setor.unidade = unidade;
                }
            }
            const setorSalvo = await this.repository.save(setor);
            this.logger.log(`Setor criado com sucesso: ${setorSalvo.id}`);
            return setorSalvo;
        }
        catch (error) {
            this.logger.error('Erro ao criar setor:', error);
            if (error instanceof typeorm_1.QueryFailedError) {
                // Tratamento para erros de restrição do banco de dados
                if (error.message.includes('null value in column')) {
                    const column = error.message.match(/column \"([^\"]+)\"/)?.[1] ||
                        'não especificado';
                    throw new common_1.InternalServerErrorException(`Campo obrigatório não informado: ${column}`);
                }
                if (error.message.includes('duplicate key')) {
                    throw new common_1.InternalServerErrorException('Já existe um setor com estes dados');
                }
            }
            throw new common_1.InternalServerErrorException('Falha ao criar setor no banco de dados');
        }
    }
    /**
     * Atualiza um setor existente
     * @param id ID do setor
     * @param data Dados a serem atualizados
     * @returns Setor atualizado
     */
    async update(id, data) {
        try {
            this.logger.log(`Atualizando setor ${id} com dados:`, JSON.stringify(data));
            // Encontra o setor existente
            const setorExistente = await this.findById(id);
            if (!setorExistente) {
                this.logger.warn(`Tentativa de atualizar setor não encontrado: ${id}`);
                throw new common_1.NotFoundException(`Setor com ID ${id} não encontrado`);
            }
            // Atualiza os campos básicos
            Object.assign(setorExistente, data);
            // Se houver atualização de unidade, carrega a unidade completa
            if (data.unidade_id && data.unidade_id !== setorExistente.unidade_id) {
                const unidade = await this.dataSource.getRepository(unidade_entity_1.Unidade).findOne({
                    where: { id: data.unidade_id },
                });
                if (!unidade) {
                    throw new common_1.NotFoundException(`Unidade com ID ${data.unidade_id} não encontrada`);
                }
                setorExistente.unidade = unidade;
                setorExistente.unidade_id = unidade.id;
            }
            // Salva as alterações
            const setorAtualizado = await this.repository.save(setorExistente);
            this.logger.log(`Setor ${id} atualizado com sucesso`);
            return setorAtualizado;
        }
        catch (error) {
            this.logger.error(`Erro ao atualizar setor ${id}: ${error.message}`, error.stack);
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            if (error instanceof typeorm_1.QueryFailedError) {
                // Tratamento para erros de restrição do banco de dados
                if (error.message.includes('violates foreign key constraint')) {
                    throw new common_1.NotFoundException('Unidade associada não encontrada');
                }
            }
            throw new common_1.InternalServerErrorException('Falha ao atualizar setor');
        }
    }
    /**
     * Remove um setor (soft delete)
     * @param id ID do setor
     * @returns Resultado da operação
     */
    async remove(id) {
        try {
            this.logger.log(`Removendo setor: ${id}`);
            const deleteResult = await this.repository.softDelete(id);
            if (deleteResult.affected === 0) {
                this.logger.warn(`Tentativa de remover setor não encontrado: ${id}`);
                throw new common_1.NotFoundException(`Setor com ID ${id} não encontrado`);
            }
            this.logger.log(`Setor ${id} removido com sucesso`);
        }
        catch (error) {
            this.logger.error(`Erro ao remover setor ${id}: ${error.message}`, error.stack);
            if (error instanceof common_1.NotFoundException) {
                throw error;
            }
            if (error instanceof typeorm_1.QueryFailedError) {
                if (error.message.includes('violates foreign key constraint')) {
                    throw new common_1.InternalServerErrorException('Não é possível remover o setor pois existem registros vinculados');
                }
            }
            throw new common_1.InternalServerErrorException('Falha ao remover setor');
        }
    }
};
exports.SetorRepository = SetorRepository;
exports.SetorRepository = SetorRepository = SetorRepository_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof typeorm_1.DataSource !== "undefined" && typeorm_1.DataSource) === "function" ? _a : Object])
], SetorRepository);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,