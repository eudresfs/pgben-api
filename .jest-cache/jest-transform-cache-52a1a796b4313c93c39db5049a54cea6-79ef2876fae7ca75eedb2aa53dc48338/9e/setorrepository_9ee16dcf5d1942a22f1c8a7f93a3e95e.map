{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\repositories\\setor.repository.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\unidade\\repositories\\setor.repository.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  Logger,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { Repository, DataSource, QueryFailedError } from 'typeorm';\nimport { Setor } from '../../../entities/setor.entity';\nimport { Unidade } from '../../../entities/unidade.entity';\n\n/**\n * Repositório de setores\n *\n * Responsável por operações de acesso a dados relacionadas a setores\n */\n@Injectable()\nexport class SetorRepository {\n  private repository: Repository<Setor>;\n  private readonly logger = new Logger(SetorRepository.name);\n\n  constructor(private dataSource: DataSource) {\n    this.repository = this.dataSource.getRepository(Setor);\n  }\n\n  /**\n   * Busca todos os setores com filtros e paginação\n   * @param options Opções de filtro e paginação\n   * @returns Lista de setores paginada\n   */\n  async findAll(options?: {\n    skip?: number;\n    take?: number;\n    where?: any;\n    order?: any;\n  }): Promise<[Setor[], number]> {\n    try {\n      this.logger.log(\n        'Buscando todos os setores com opções:',\n        JSON.stringify(options),\n      );\n\n      const {\n        skip = 0,\n        take = 10,\n        where = {},\n        order = { created_at: 'DESC' },\n      } = options || {};\n\n      const result = await this.repository.findAndCount({\n        skip,\n        take,\n        where,\n        order,\n      });\n\n      this.logger.log(`Encontrados ${result[1]} setores`);\n      return result;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar setores: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException('Falha ao buscar setores');\n    }\n  }\n\n  /**\n   * Busca um setor pelo ID\n   * @param id ID do setor\n   * @returns Setor encontrado ou null\n   */\n  async findById(id: string): Promise<Setor | null> {\n    try {\n      this.logger.log(`Buscando setor por ID: ${id}`);\n      const setor = await this.repository.findOne({ where: { id } });\n\n      if (!setor) {\n        this.logger.warn(`Setor não encontrado: ${id}`);\n      } else {\n        this.logger.debug(`Setor encontrado: ${JSON.stringify(setor)}`);\n      }\n\n      return setor;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar setor por ID ${id}: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException('Falha ao buscar setor');\n    }\n  }\n\n  /**\n   * Busca setores por unidade\n   * @param unidadeId ID da unidade\n   * @returns Lista de setores da unidade\n   */\n  async findByUnidadeId(unidadeId: string): Promise<Setor[]> {\n    try {\n      this.logger.log(`Buscando setores da unidade: ${unidadeId}`);\n\n      const setores = await this.repository.find({\n        where: { unidade_id: unidadeId },\n        order: { nome: 'ASC' },\n      });\n\n      this.logger.log(\n        `Encontrados ${setores.length} setores para a unidade ${unidadeId}`,\n      );\n      return setores;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao buscar setores da unidade ${unidadeId}: ${error.message}`,\n        error.stack,\n      );\n      throw new InternalServerErrorException(\n        'Falha ao buscar setores da unidade',\n      );\n    }\n  }\n\n  /**\n   * Cria um novo setor\n   * @param data Dados do setor\n   * @returns Setor criado\n   */\n  async create(data: Partial<Setor>): Promise<Setor> {\n    try {\n      this.logger.log('Criando novo setor com dados:', JSON.stringify(data));\n\n      // Extrai o relacionamento com a unidade, se existir\n      const { unidade, ...setorData } = data;\n\n      // Cria o setor com os dados básicos\n      const setor = this.repository.create(setorData);\n\n      // Se houver relacionamento com a unidade, carrega a unidade completa\n      if (data.unidade_id) {\n        const unidade = await this.dataSource.getRepository(Unidade).findOne({\n          where: { id: data.unidade_id },\n        });\n\n        if (unidade) {\n          setor.unidade = unidade;\n        }\n      }\n\n      const setorSalvo = await this.repository.save(setor);\n\n      this.logger.log(`Setor criado com sucesso: ${setorSalvo.id}`);\n      return setorSalvo;\n    } catch (error) {\n      this.logger.error('Erro ao criar setor:', error);\n\n      if (error instanceof QueryFailedError) {\n        // Tratamento para erros de restrição do banco de dados\n        if (error.message.includes('null value in column')) {\n          const column =\n            error.message.match(/column \\\"([^\\\"]+)\\\"/)?.[1] ||\n            'não especificado';\n          throw new InternalServerErrorException(\n            `Campo obrigatório não informado: ${column}`,\n          );\n        }\n\n        if (error.message.includes('duplicate key')) {\n          throw new InternalServerErrorException(\n            'Já existe um setor com estes dados',\n          );\n        }\n      }\n\n      throw new InternalServerErrorException(\n        'Falha ao criar setor no banco de dados',\n      );\n    }\n  }\n\n  /**\n   * Atualiza um setor existente\n   * @param id ID do setor\n   * @param data Dados a serem atualizados\n   * @returns Setor atualizado\n   */\n  async update(id: string, data: Partial<Setor>): Promise<Setor> {\n    try {\n      this.logger.log(\n        `Atualizando setor ${id} com dados:`,\n        JSON.stringify(data),\n      );\n\n      // Encontra o setor existente\n      const setorExistente = await this.findById(id);\n      if (!setorExistente) {\n        this.logger.warn(`Tentativa de atualizar setor não encontrado: ${id}`);\n        throw new NotFoundException(`Setor com ID ${id} não encontrado`);\n      }\n\n      // Atualiza os campos básicos\n      Object.assign(setorExistente, data);\n\n      // Se houver atualização de unidade, carrega a unidade completa\n      if (data.unidade_id && data.unidade_id !== setorExistente.unidade_id) {\n        const unidade = await this.dataSource.getRepository(Unidade).findOne({\n          where: { id: data.unidade_id },\n        });\n\n        if (!unidade) {\n          throw new NotFoundException(\n            `Unidade com ID ${data.unidade_id} não encontrada`,\n          );\n        }\n\n        setorExistente.unidade = unidade;\n        setorExistente.unidade_id = unidade.id;\n      }\n\n      // Salva as alterações\n      const setorAtualizado = await this.repository.save(setorExistente);\n\n      this.logger.log(`Setor ${id} atualizado com sucesso`);\n      return setorAtualizado;\n    } catch (error) {\n      this.logger.error(\n        `Erro ao atualizar setor ${id}: ${error.message}`,\n        error.stack,\n      );\n\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      if (error instanceof QueryFailedError) {\n        // Tratamento para erros de restrição do banco de dados\n        if (error.message.includes('violates foreign key constraint')) {\n          throw new NotFoundException('Unidade associada não encontrada');\n        }\n      }\n\n      throw new InternalServerErrorException('Falha ao atualizar setor');\n    }\n  }\n\n  /**\n   * Remove um setor (soft delete)\n   * @param id ID do setor\n   * @returns Resultado da operação\n   */\n  async remove(id: string): Promise<void> {\n    try {\n      this.logger.log(`Removendo setor: ${id}`);\n\n      const deleteResult = await this.repository.softDelete(id);\n\n      if (deleteResult.affected === 0) {\n        this.logger.warn(`Tentativa de remover setor não encontrado: ${id}`);\n        throw new NotFoundException(`Setor com ID ${id} não encontrado`);\n      }\n\n      this.logger.log(`Setor ${id} removido com sucesso`);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao remover setor ${id}: ${error.message}`,\n        error.stack,\n      );\n\n      if (error instanceof NotFoundException) {\n        throw error;\n      }\n\n      if (error instanceof QueryFailedError) {\n        if (error.message.includes('violates foreign key constraint')) {\n          throw new InternalServerErrorException(\n            'Não é possível remover o setor pois existem registros vinculados',\n          );\n        }\n      }\n\n      throw new InternalServerErrorException('Falha ao remover setor');\n    }\n  }\n}\n"],"version":3}