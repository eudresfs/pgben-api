0b5fb2901495d3030bbbec958fcfda81
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const monitoring_module_1 = require("../monitoring.module");
const health_controller_1 = require("../health.controller");
const metrics_controller_1 = require("../metrics.controller");
const enhanced_metrics_controller_1 = require("../enhanced-metrics.controller");
const metrics_service_1 = require("../metrics.service");
const enhanced_metrics_service_1 = require("../enhanced-metrics.service");
const metrics_interceptor_1 = require("../metrics.interceptor");
const enhanced_metrics_interceptor_1 = require("../enhanced-metrics.interceptor");
const terminus_1 = require("@nestjs/terminus");
const config_1 = require("@nestjs/config");
const axios_1 = require("@nestjs/axios");
/**
 * Testes para o MonitoringModule
 *
 * Verifica se o módulo está configurado corretamente com todos os providers,
 * controladores e exportações necessárias.
 */
describe('MonitoringModule', () => {
    let module;
    beforeEach(async () => {
        module = await testing_1.Test.createTestingModule({
            imports: [
                config_1.ConfigModule.forRoot({
                    isGlobal: true,
                    envFilePath: '.env.test',
                }),
                monitoring_module_1.MonitoringModule,
            ],
        }).compile();
    });
    afterEach(async () => {
        await module.close();
    });
    it('deve ser definido', () => {
        expect(module).toBeDefined();
    });
    it('deve fornecer o HealthController', () => {
        const controller = module.get(health_controller_1.HealthController);
        expect(controller).toBeDefined();
        expect(controller).toBeInstanceOf(health_controller_1.HealthController);
    });
    it('deve fornecer o MetricsController', () => {
        const controller = module.get(metrics_controller_1.MetricsController);
        expect(controller).toBeDefined();
        expect(controller).toBeInstanceOf(metrics_controller_1.MetricsController);
    });
    it('deve fornecer o EnhancedMetricsController', () => {
        const controller = module.get(enhanced_metrics_controller_1.EnhancedMetricsController);
        expect(controller).toBeDefined();
        expect(controller).toBeInstanceOf(enhanced_metrics_controller_1.EnhancedMetricsController);
    });
    it('deve fornecer o MetricsService', () => {
        const service = module.get(metrics_service_1.MetricsService);
        expect(service).toBeDefined();
        expect(service).toBeInstanceOf(metrics_service_1.MetricsService);
    });
    it('deve fornecer o EnhancedMetricsService', () => {
        const service = module.get(enhanced_metrics_service_1.EnhancedMetricsService);
        expect(service).toBeDefined();
        expect(service).toBeInstanceOf(enhanced_metrics_service_1.EnhancedMetricsService);
    });
    it('deve exportar os serviços de métricas', () => {
        const exportedProviders = module.get('METRICS_SERVICES');
        expect(exportedProviders).toBeDefined();
        expect(Array.isArray(exportedProviders)).toBe(true);
        expect(exportedProviders.length).toBeGreaterThan(0);
    });
    it('deve importar o TerminusModule', () => {
        const terminusModule = module.get(terminus_1.TerminusModule);
        expect(terminusModule).toBeDefined();
    });
    it('deve importar o HttpModule', () => {
        const httpModule = module.get(axios_1.HttpModule);
        expect(httpModule).toBeDefined();
    });
    it('deve configurar corretamente o ConfigModule', () => {
        const configService = module.get(config_1.ConfigService);
        expect(configService).toBeDefined();
        expect(configService).toBeInstanceOf(config_1.ConfigService);
    });
    it('deve fornecer o MetricsInterceptor', () => {
        const interceptor = module.get(metrics_interceptor_1.MetricsInterceptor);
        expect(interceptor).toBeDefined();
        expect(interceptor).toBeInstanceOf(metrics_interceptor_1.MetricsInterceptor);
    });
    it('deve fornecer o EnhancedMetricsInterceptor', () => {
        const interceptor = module.get(enhanced_metrics_interceptor_1.EnhancedMetricsInterceptor);
        expect(interceptor).toBeDefined();
        expect(interceptor).toBeInstanceOf(enhanced_metrics_interceptor_1.EnhancedMetricsInterceptor);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,