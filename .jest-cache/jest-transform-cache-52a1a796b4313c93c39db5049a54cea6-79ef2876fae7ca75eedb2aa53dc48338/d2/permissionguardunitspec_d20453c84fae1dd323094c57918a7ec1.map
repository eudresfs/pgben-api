{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\guards\\permission.guard.unit.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\test\\modules\\auth\\guards\\permission.guard.unit.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { PermissionGuard } from '@/auth/guards/permission.guard';\nimport { PermissionService } from '@/auth/services/permission.service';\nimport { ScopeType } from '@/auth/entities/user-permission.entity';\nimport { REQUIRES_PERMISSION_KEY } from '@/auth/decorators/requires-permission.decorator';\n\n/**\n * Testes unitários para o PermissionGuard\n *\n * Estes testes verificam o funcionamento do guarda de permissões,\n * responsável por verificar se um usuário tem as permissões necessárias\n * para acessar uma rota.\n */\ndescribe('PermissionGuard', () => {\n  let guard: PermissionGuard;\n  let reflector: Reflector;\n  let permissionService: PermissionService;\n\n  beforeEach(async () => {\n    // Mock do PermissionService\n    const mockPermissionService = {\n      hasPermission: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        PermissionGuard,\n        Reflector,\n        {\n          provide: PermissionService,\n          useValue: mockPermissionService,\n        },\n      ],\n    }).compile();\n\n    guard = module.get<PermissionGuard>(PermissionGuard);\n    reflector = module.get<Reflector>(Reflector);\n    permissionService = module.get<PermissionService>(PermissionService);\n  });\n\n  it('deve ser definido', () => {\n    expect(guard).toBeDefined();\n  });\n\n  describe('canActivate', () => {\n    it('deve permitir acesso quando não há requisitos de permissão', async () => {\n      // Mock do Reflector para retornar undefined (não há requisitos de permissão)\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(undefined);\n\n      // Mock do ExecutionContext\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: { id: 'user-123' },\n          }),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      const result = await guard.canActivate(mockExecutionContext);\n\n      expect(reflector.getAllAndOverride).toHaveBeenCalledWith(\n        REQUIRES_PERMISSION_KEY,\n        [mockExecutionContext.getHandler(), mockExecutionContext.getClass()],\n      );\n      expect(result).toBe(true);\n    });\n\n    it('deve negar acesso quando não há usuário autenticado', async () => {\n      // Mock do Reflector para retornar requisitos de permissão\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([\n        {\n          permissionName: 'solicitacao.listar',\n          scopeType: ScopeType.UNIT,\n          scopeIdExpression: 'query.unidade_id',\n        },\n      ]);\n\n      // Mock do ExecutionContext sem usuário\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            // Sem usuário\n            query: { unidade_id: 'unidade-123' },\n          }),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(\n        UnauthorizedException,\n      );\n    });\n\n    it('deve permitir acesso quando o usuário tem todas as permissões necessárias', async () => {\n      // Mock do Reflector para retornar requisitos de permissão\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([\n        {\n          permissionName: 'solicitacao.listar',\n          scopeType: ScopeType.UNIT,\n          scopeIdExpression: 'query.unidade_id',\n        },\n      ]);\n\n      // Mock do ExecutionContext com usuário\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: { id: 'user-123' },\n            query: { unidade_id: 'unidade-123' },\n          }),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // O usuário tem a permissão\n      jest.spyOn(permissionService, 'hasPermission').mockResolvedValue(true);\n\n      const result = await guard.canActivate(mockExecutionContext);\n\n      expect(permissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'solicitacao.listar',\n        scopeType: ScopeType.UNIT,\n        scopeId: 'unidade-123',\n      });\n      expect(result).toBe(true);\n    });\n\n    it('deve negar acesso quando o usuário não tem alguma das permissões necessárias', async () => {\n      // Mock do Reflector para retornar requisitos de permissão\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([\n        {\n          permissionName: 'solicitacao.listar',\n          scopeType: ScopeType.UNIT,\n          scopeIdExpression: 'query.unidade_id',\n        },\n        {\n          permissionName: 'solicitacao.visualizar',\n          scopeType: ScopeType.UNIT,\n          scopeIdExpression: 'query.unidade_id',\n        },\n      ]);\n\n      // Mock do ExecutionContext com usuário\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: { id: 'user-123' },\n            query: { unidade_id: 'unidade-123' },\n          }),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // O usuário tem a primeira permissão mas não tem a segunda\n      jest\n        .spyOn(permissionService, 'hasPermission')\n        .mockResolvedValueOnce(true) // solicitacao.listar\n        .mockResolvedValueOnce(false); // solicitacao.visualizar\n\n      await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(\n        UnauthorizedException,\n      );\n\n      expect(permissionService.hasPermission).toHaveBeenCalledTimes(2);\n    });\n\n    it('deve avaliar corretamente expressões de escopo com objetos aninhados', async () => {\n      // Mock do Reflector para retornar requisitos de permissão com expressão de escopo aninhada\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([\n        {\n          permissionName: 'solicitacao.visualizar',\n          scopeType: ScopeType.UNIT,\n          scopeIdExpression: 'solicitacao.unidade.id',\n        },\n      ]);\n\n      // Mock do ExecutionContext com usuário e objetos aninhados\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: { id: 'user-123' },\n            solicitacao: {\n              unidade: {\n                id: 'unidade-456',\n              },\n            },\n          }),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // O usuário tem a permissão\n      jest.spyOn(permissionService, 'hasPermission').mockResolvedValue(true);\n\n      const result = await guard.canActivate(mockExecutionContext);\n\n      expect(permissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'solicitacao.visualizar',\n        scopeType: ScopeType.UNIT,\n        scopeId: 'unidade-456',\n      });\n      expect(result).toBe(true);\n    });\n\n    it('deve lidar corretamente com expressões de escopo usando variáveis previamente definidas', async () => {\n      // Mock do Reflector para retornar requisitos de permissão com expressão de escopo usando variáveis\n      jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([\n        {\n          permissionName: 'usuario.permissao.atribuir',\n          scopeType: ScopeType.GLOBAL,\n        },\n      ]);\n\n      // Mock do ExecutionContext com usuário\n      const mockExecutionContext = {\n        switchToHttp: jest.fn().mockReturnValue({\n          getRequest: jest.fn().mockReturnValue({\n            user: {\n              id: 'user-123',\n              unidadeId: 'unidade-789', // Unidade do usuário autenticado\n            },\n            body: {\n              unidadeId: 'unidade-456', // Unidade do formulário\n            },\n          }),\n        }),\n        getHandler: jest.fn(),\n        getClass: jest.fn(),\n      } as unknown as ExecutionContext;\n\n      // O usuário tem a permissão\n      jest.spyOn(permissionService, 'hasPermission').mockResolvedValue(true);\n\n      const result = await guard.canActivate(mockExecutionContext);\n\n      expect(permissionService.hasPermission).toHaveBeenCalledWith({\n        userId: 'user-123',\n        permissionName: 'usuario.permissao.atribuir',\n        scopeType: ScopeType.GLOBAL,\n        scopeId: undefined,\n      });\n      expect(result).toBe(true);\n    });\n  });\n});\n"],"version":3}