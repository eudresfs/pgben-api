80c6b3084c911a35fd078cc2f8977419
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const permission_guard_1 = require("@/auth/guards/permission.guard");
const permission_service_1 = require("@/auth/services/permission.service");
const user_permission_entity_1 = require("@/auth/entities/user-permission.entity");
const requires_permission_decorator_1 = require("@/auth/decorators/requires-permission.decorator");
/**
 * Testes unitários para o PermissionGuard
 *
 * Estes testes verificam o funcionamento do guarda de permissões,
 * responsável por verificar se um usuário tem as permissões necessárias
 * para acessar uma rota.
 */
describe('PermissionGuard', () => {
    let guard;
    let reflector;
    let permissionService;
    beforeEach(async () => {
        // Mock do PermissionService
        const mockPermissionService = {
            hasPermission: jest.fn(),
        };
        const module = await testing_1.Test.createTestingModule({
            providers: [
                permission_guard_1.PermissionGuard,
                core_1.Reflector,
                {
                    provide: permission_service_1.PermissionService,
                    useValue: mockPermissionService,
                },
            ],
        }).compile();
        guard = module.get(permission_guard_1.PermissionGuard);
        reflector = module.get(core_1.Reflector);
        permissionService = module.get(permission_service_1.PermissionService);
    });
    it('deve ser definido', () => {
        expect(guard).toBeDefined();
    });
    describe('canActivate', () => {
        it('deve permitir acesso quando não há requisitos de permissão', async () => {
            // Mock do Reflector para retornar undefined (não há requisitos de permissão)
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue(undefined);
            // Mock do ExecutionContext
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: { id: 'user-123' },
                    }),
                }),
                getHandler: jest.fn(),
                getClass: jest.fn(),
            };
            const result = await guard.canActivate(mockExecutionContext);
            expect(reflector.getAllAndOverride).toHaveBeenCalledWith(requires_permission_decorator_1.REQUIRES_PERMISSION_KEY, [mockExecutionContext.getHandler(), mockExecutionContext.getClass()]);
            expect(result).toBe(true);
        });
        it('deve negar acesso quando não há usuário autenticado', async () => {
            // Mock do Reflector para retornar requisitos de permissão
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([
                {
                    permissionName: 'solicitacao.listar',
                    scopeType: user_permission_entity_1.ScopeType.UNIT,
                    scopeIdExpression: 'query.unidade_id',
                },
            ]);
            // Mock do ExecutionContext sem usuário
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        // Sem usuário
                        query: { unidade_id: 'unidade-123' },
                    }),
                }),
                getHandler: jest.fn(),
                getClass: jest.fn(),
            };
            await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(common_1.UnauthorizedException);
        });
        it('deve permitir acesso quando o usuário tem todas as permissões necessárias', async () => {
            // Mock do Reflector para retornar requisitos de permissão
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([
                {
                    permissionName: 'solicitacao.listar',
                    scopeType: user_permission_entity_1.ScopeType.UNIT,
                    scopeIdExpression: 'query.unidade_id',
                },
            ]);
            // Mock do ExecutionContext com usuário
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: { id: 'user-123' },
                        query: { unidade_id: 'unidade-123' },
                    }),
                }),
                getHandler: jest.fn(),
                getClass: jest.fn(),
            };
            // O usuário tem a permissão
            jest.spyOn(permissionService, 'hasPermission').mockResolvedValue(true);
            const result = await guard.canActivate(mockExecutionContext);
            expect(permissionService.hasPermission).toHaveBeenCalledWith({
                userId: 'user-123',
                permissionName: 'solicitacao.listar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'unidade-123',
            });
            expect(result).toBe(true);
        });
        it('deve negar acesso quando o usuário não tem alguma das permissões necessárias', async () => {
            // Mock do Reflector para retornar requisitos de permissão
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([
                {
                    permissionName: 'solicitacao.listar',
                    scopeType: user_permission_entity_1.ScopeType.UNIT,
                    scopeIdExpression: 'query.unidade_id',
                },
                {
                    permissionName: 'solicitacao.visualizar',
                    scopeType: user_permission_entity_1.ScopeType.UNIT,
                    scopeIdExpression: 'query.unidade_id',
                },
            ]);
            // Mock do ExecutionContext com usuário
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: { id: 'user-123' },
                        query: { unidade_id: 'unidade-123' },
                    }),
                }),
                getHandler: jest.fn(),
                getClass: jest.fn(),
            };
            // O usuário tem a primeira permissão mas não tem a segunda
            jest
                .spyOn(permissionService, 'hasPermission')
                .mockResolvedValueOnce(true) // solicitacao.listar
                .mockResolvedValueOnce(false); // solicitacao.visualizar
            await expect(guard.canActivate(mockExecutionContext)).rejects.toThrow(common_1.UnauthorizedException);
            expect(permissionService.hasPermission).toHaveBeenCalledTimes(2);
        });
        it('deve avaliar corretamente expressões de escopo com objetos aninhados', async () => {
            // Mock do Reflector para retornar requisitos de permissão com expressão de escopo aninhada
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([
                {
                    permissionName: 'solicitacao.visualizar',
                    scopeType: user_permission_entity_1.ScopeType.UNIT,
                    scopeIdExpression: 'solicitacao.unidade.id',
                },
            ]);
            // Mock do ExecutionContext com usuário e objetos aninhados
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: { id: 'user-123' },
                        solicitacao: {
                            unidade: {
                                id: 'unidade-456',
                            },
                        },
                    }),
                }),
                getHandler: jest.fn(),
                getClass: jest.fn(),
            };
            // O usuário tem a permissão
            jest.spyOn(permissionService, 'hasPermission').mockResolvedValue(true);
            const result = await guard.canActivate(mockExecutionContext);
            expect(permissionService.hasPermission).toHaveBeenCalledWith({
                userId: 'user-123',
                permissionName: 'solicitacao.visualizar',
                scopeType: user_permission_entity_1.ScopeType.UNIT,
                scopeId: 'unidade-456',
            });
            expect(result).toBe(true);
        });
        it('deve lidar corretamente com expressões de escopo usando variáveis previamente definidas', async () => {
            // Mock do Reflector para retornar requisitos de permissão com expressão de escopo usando variáveis
            jest.spyOn(reflector, 'getAllAndOverride').mockReturnValue([
                {
                    permissionName: 'usuario.permissao.atribuir',
                    scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                },
            ]);
            // Mock do ExecutionContext com usuário
            const mockExecutionContext = {
                switchToHttp: jest.fn().mockReturnValue({
                    getRequest: jest.fn().mockReturnValue({
                        user: {
                            id: 'user-123',
                            unidadeId: 'unidade-789', // Unidade do usuário autenticado
                        },
                        body: {
                            unidadeId: 'unidade-456', // Unidade do formulário
                        },
                    }),
                }),
                getHandler: jest.fn(),
                getClass: jest.fn(),
            };
            // O usuário tem a permissão
            jest.spyOn(permissionService, 'hasPermission').mockResolvedValue(true);
            const result = await guard.canActivate(mockExecutionContext);
            expect(permissionService.hasPermission).toHaveBeenCalledWith({
                userId: 'user-123',
                permissionName: 'usuario.permissao.atribuir',
                scopeType: user_permission_entity_1.ScopeType.GLOBAL,
                scopeId: undefined,
            });
            expect(result).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,