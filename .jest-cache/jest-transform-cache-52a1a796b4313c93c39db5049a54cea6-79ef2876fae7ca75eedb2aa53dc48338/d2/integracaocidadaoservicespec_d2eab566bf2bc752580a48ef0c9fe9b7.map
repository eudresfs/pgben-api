{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\integracao-cidadao.service.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\pagamento\\tests\\services\\integracao-cidadao.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { HttpService } from '@nestjs/axios';\nimport { ConfigService } from '@nestjs/config';\nimport { of, throwError } from 'rxjs';\nimport { AxiosResponse } from 'axios';\nimport { IntegracaoCidadaoService } from '../../services/integracao-cidadao.service';\nimport { DadosBancariosValidator } from '../../validators/dados-bancarios-validator';\nimport { PixValidator } from '../../validators/pix-validator';\nimport { NotFoundException } from '@nestjs/common';\n\n/**\n * Testes unitários para o serviço de integração com o módulo de cidadão\n *\n * Verifica o funcionamento correto das operações de consulta de dados\n * pessoais e bancários de beneficiários.\n *\n * @author Equipe PGBen\n */\ndescribe('IntegracaoCidadaoService', () => {\n  let service: IntegracaoCidadaoService;\n  let httpService: HttpService;\n  let configService: ConfigService;\n  let dadosBancariosValidator: DadosBancariosValidator;\n  let pixValidator: PixValidator;\n\n  // Mock do HttpService\n  const mockHttpService = {\n    get: jest.fn(),\n    post: jest.fn(),\n  };\n\n  // Mock do ConfigService\n  const mockConfigService = {\n    get: jest.fn().mockImplementation((key) => {\n      if (key === 'cidadao.apiUrl') {\n        return 'http://api-cidadao.pgben.local';\n      }\n      if (key === 'cidadao.apiKey') {\n        return 'api-key-mock';\n      }\n      return null;\n    }),\n  };\n\n  // Mock do DadosBancariosValidator\n  const mockDadosBancariosValidator = {\n    validarCodigoBanco: jest.fn(),\n    validarAgencia: jest.fn(),\n    validarConta: jest.fn(),\n    obterNomeBanco: jest.fn(),\n    mascaraAgencia: jest.fn(),\n    mascaraConta: jest.fn(),\n    formatarAgencia: jest.fn(),\n    formatarConta: jest.fn(),\n  };\n\n  // Mock do PixValidator\n  const mockPixValidator = {\n    validarChavePix: jest.fn(),\n    mascaraChavePix: jest.fn(),\n    obterTipoChavePix: jest.fn(),\n  };\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        IntegracaoCidadaoService,\n        {\n          provide: HttpService,\n          useValue: mockHttpService,\n        },\n        {\n          provide: ConfigService,\n          useValue: mockConfigService,\n        },\n        {\n          provide: DadosBancariosValidator,\n          useValue: mockDadosBancariosValidator,\n        },\n        {\n          provide: PixValidator,\n          useValue: mockPixValidator,\n        },\n      ],\n    }).compile();\n\n    service = module.get<IntegracaoCidadaoService>(IntegracaoCidadaoService);\n    httpService = module.get<HttpService>(HttpService);\n    configService = module.get<ConfigService>(ConfigService);\n    dadosBancariosValidator = module.get<DadosBancariosValidator>(\n      DadosBancariosValidator,\n    );\n    pixValidator = module.get<PixValidator>(PixValidator);\n\n    // Limpar mocks antes de cada teste\n    jest.clearAllMocks();\n  });\n\n  describe('obterDadosCidadao', () => {\n    const cidadaoId = 'cidadao-id';\n    const mockCidadao = {\n      id: cidadaoId,\n      nome: 'João da Silva',\n      cpf: '12345678900',\n      dataNascimento: '1990-01-01',\n      endereco: {\n        logradouro: 'Rua Exemplo',\n        numero: '123',\n        bairro: 'Centro',\n        cidade: 'Natal',\n        uf: 'RN',\n        cep: '59000000',\n      },\n      contato: {\n        telefone: '84999999999',\n        email: 'joao@exemplo.com',\n      },\n    };\n\n    it('deve retornar dados do cidadão quando encontrado', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockCidadao,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any,\n      };\n\n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.obterDadosCidadao(cidadaoId);\n\n      // Verificar resultado\n      expect(result).toEqual(mockCidadao);\n      expect(mockHttpService.get).toHaveBeenCalledWith(\n        `http://api-cidadao.pgben.local/cidadaos/${cidadaoId}`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock',\n          }),\n        }),\n      );\n    });\n\n    it('deve lançar NotFoundException quando cidadão não encontrado', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Cidadão não encontrado' },\n          },\n        })),\n      );\n\n      // Executar e verificar exceção\n      await expect(service.obterDadosCidadao(cidadaoId)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('deve propagar outros erros HTTP', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 500,\n            data: { message: 'Erro interno do servidor' },\n          },\n        })),\n      );\n\n      // Executar e verificar exceção\n      await expect(service.obterDadosCidadao(cidadaoId)).rejects.toThrow();\n    });\n  });\n\n  describe('obterDadosBancarios', () => {\n    const cidadaoId = 'cidadao-id';\n    const mockDadosBancarios = [\n      {\n        id: 'info-bancaria-1',\n        cidadaoId: cidadaoId,\n        tipo: 'CONTA_CORRENTE',\n        banco: '001',\n        agencia: '1234',\n        conta: '56789-0',\n        titularCpf: '12345678900',\n        titularNome: 'João da Silva',\n        principal: true,\n        createdAt: '2023-01-01T00:00:00Z',\n      },\n      {\n        id: 'info-bancaria-2',\n        cidadaoId: cidadaoId,\n        tipo: 'PIX',\n        pixTipo: 'CPF',\n        pixChave: '12345678900',\n        titularCpf: '12345678900',\n        titularNome: 'João da Silva',\n        principal: false,\n        createdAt: '2023-01-02T00:00:00Z',\n      },\n    ];\n\n    it('deve retornar dados bancários quando encontrados', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockDadosBancarios,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any,\n      };\n\n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Configurar validadores\n      mockDadosBancariosValidator.obterNomeBanco.mockReturnValue(\n        'Banco do Brasil',\n      );\n      mockDadosBancariosValidator.mascaraAgencia.mockReturnValue('1**4');\n      mockDadosBancariosValidator.mascaraConta.mockReturnValue('56**9-0');\n      mockPixValidator.mascaraChavePix.mockReturnValue('***.456.789-**');\n\n      // Executar método\n      const result = await service.obterDadosBancarios(cidadaoId);\n\n      // Verificar resultado\n      expect(result).toEqual(mockDadosBancarios);\n      expect(mockHttpService.get).toHaveBeenCalledWith(\n        `http://api-cidadao.pgben.local/cidadaos/${cidadaoId}/dados-bancarios`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock',\n          }),\n        }),\n      );\n    });\n\n    it('deve lançar NotFoundException quando dados bancários não encontrados', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Dados bancários não encontrados' },\n          },\n        })),\n      );\n\n      // Executar e verificar exceção\n      await expect(service.obterDadosBancarios(cidadaoId)).rejects.toThrow(\n        NotFoundException,\n      );\n    });\n\n    it('deve retornar array vazio quando não há dados bancários', async () => {\n      // Configurar mock da resposta HTTP com array vazio\n      const axiosResponse: AxiosResponse = {\n        data: [],\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any,\n      };\n\n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Executar método\n      const result = await service.obterDadosBancarios(cidadaoId);\n\n      // Verificar resultado\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe('obterDadosBancariosPorId', () => {\n    const cidadaoId = 'cidadao-id';\n    const infoBancariaId = 'info-bancaria-1';\n    const mockDadosBancarios = {\n      id: infoBancariaId,\n      cidadaoId: cidadaoId,\n      tipo: 'CONTA_CORRENTE',\n      banco: '001',\n      agencia: '1234',\n      conta: '56789-0',\n      titularCpf: '12345678900',\n      titularNome: 'João da Silva',\n      principal: true,\n      createdAt: '2023-01-01T00:00:00Z',\n    };\n\n    it('deve retornar dados bancários específicos quando encontrados', async () => {\n      // Configurar mock da resposta HTTP\n      const axiosResponse: AxiosResponse = {\n        data: mockDadosBancarios,\n        status: 200,\n        statusText: 'OK',\n        headers: {},\n        config: { headers: {} } as any,\n      };\n\n      mockHttpService.get.mockReturnValue(of(axiosResponse));\n\n      // Configurar validadores\n      mockDadosBancariosValidator.obterNomeBanco.mockReturnValue(\n        'Banco do Brasil',\n      );\n      mockDadosBancariosValidator.mascaraAgencia.mockReturnValue('1**4');\n      mockDadosBancariosValidator.mascaraConta.mockReturnValue('56**9-0');\n\n      // Executar método\n      const result = await service.obterDadosBancariosPorId(\n        cidadaoId,\n        infoBancariaId,\n      );\n\n      // Verificar resultado\n      expect(result).toEqual(mockDadosBancarios);\n      expect(mockHttpService.get).toHaveBeenCalledWith(\n        `http://api-cidadao.pgben.local/cidadaos/${cidadaoId}/dados-bancarios/${infoBancariaId}`,\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'x-api-key': 'api-key-mock',\n          }),\n        }),\n      );\n    });\n\n    it('deve lançar NotFoundException quando dados bancários específicos não encontrados', async () => {\n      // Configurar mock do erro HTTP\n      mockHttpService.get.mockReturnValue(\n        throwError(() => ({\n          response: {\n            status: 404,\n            data: { message: 'Dados bancários não encontrados' },\n          },\n        })),\n      );\n\n      // Executar e verificar exceção\n      await expect(\n        service.obterDadosBancariosPorId(cidadaoId, infoBancariaId),\n      ).rejects.toThrow(NotFoundException);\n    });\n  });\n\n  describe('validarDadosBancarios', () => {\n    it('deve validar dados bancários do tipo CONTA_CORRENTE', async () => {\n      const dadosBancarios = {\n        tipo: 'CONTA_CORRENTE',\n        banco: '001',\n        agencia: '1234',\n        conta: '56789-0',\n      };\n\n      // Configurar validadores\n      mockDadosBancariosValidator.validarCodigoBanco.mockReturnValue(true);\n      mockDadosBancariosValidator.validarAgencia.mockReturnValue(true);\n      mockDadosBancariosValidator.validarConta.mockReturnValue(true);\n\n      // Executar método\n      const result = await service.validarDadosBancarios(dadosBancarios);\n\n      // Verificar resultado\n      expect(result).toBe(true);\n      expect(\n        mockDadosBancariosValidator.validarCodigoBanco,\n      ).toHaveBeenCalledWith('001');\n      expect(mockDadosBancariosValidator.validarAgencia).toHaveBeenCalledWith(\n        '1234',\n        '001',\n      );\n      expect(mockDadosBancariosValidator.validarConta).toHaveBeenCalledWith(\n        '56789-0',\n        '001',\n      );\n    });\n\n    it('deve validar dados bancários do tipo PIX', async () => {\n      const dadosBancarios = {\n        tipo: 'PIX',\n        pixTipo: 'CPF',\n        pixChave: '12345678900',\n      };\n\n      // Configurar validadores\n      mockPixValidator.validarChavePix.mockReturnValue(true);\n\n      // Executar método\n      const result = await service.validarDadosBancarios(dadosBancarios);\n\n      // Verificar resultado\n      expect(result).toBe(true);\n      expect(mockPixValidator.validarChavePix).toHaveBeenCalledWith(\n        '12345678900',\n        'CPF',\n      );\n    });\n\n    it('deve rejeitar dados bancários inválidos do tipo CONTA_CORRENTE', async () => {\n      const dadosBancarios = {\n        tipo: 'CONTA_CORRENTE',\n        banco: '999', // banco inválido\n        agencia: '1234',\n        conta: '56789-0',\n      };\n\n      // Configurar validadores\n      mockDadosBancariosValidator.validarCodigoBanco.mockReturnValue(false);\n\n      // Executar método\n      const result = await service.validarDadosBancarios(dadosBancarios);\n\n      // Verificar resultado\n      expect(result).toBe(false);\n    });\n\n    it('deve rejeitar dados bancários inválidos do tipo PIX', async () => {\n      const dadosBancarios = {\n        tipo: 'PIX',\n        pixTipo: 'CPF',\n        pixChave: '123456789', // CPF inválido\n      };\n\n      // Configurar validadores\n      mockPixValidator.validarChavePix.mockReturnValue(false);\n\n      // Executar método\n      const result = await service.validarDadosBancarios(dadosBancarios);\n\n      // Verificar resultado\n      expect(result).toBe(false);\n    });\n\n    it('deve rejeitar tipo de dados bancários desconhecido', async () => {\n      const dadosBancarios = {\n        tipo: 'TIPO_DESCONHECIDO',\n      };\n\n      // Executar método\n      const result = await service.validarDadosBancarios(dadosBancarios);\n\n      // Verificar resultado\n      expect(result).toBe(false);\n    });\n  });\n});\n"],"version":3}