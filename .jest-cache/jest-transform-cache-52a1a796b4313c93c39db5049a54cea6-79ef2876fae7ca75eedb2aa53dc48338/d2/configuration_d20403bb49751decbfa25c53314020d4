be934c1282e686942d75dac5b3718f25
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const loadJwtKeys = () => {
    try {
        const publicKeyPath = process.env.JWT_PUBLIC_KEY_PATH;
        const privateKeyPath = process.env.JWT_PRIVATE_KEY_PATH;
        if (!publicKeyPath || !privateKeyPath) {
            throw new Error('Caminhos das chaves JWT não configurados');
        }
        // Obter o caminho absoluto para as chaves
        const projectRoot = process.cwd();
        const fullPublicKeyPath = (0, path_1.join)(projectRoot, publicKeyPath);
        const fullPrivateKeyPath = (0, path_1.join)(projectRoot, privateKeyPath);
        // Ler as chaves dos arquivos
        const publicKey = (0, fs_1.readFileSync)(fullPublicKeyPath, 'utf8').trim();
        const privateKey = (0, fs_1.readFileSync)(fullPrivateKeyPath, 'utf8').trim();
        // Validar formato das chaves
        if (!publicKey.includes('BEGIN PUBLIC KEY') &&
            !publicKey.includes('BEGIN RSA PUBLIC KEY')) {
            throw new Error('Formato inválido para chave pública');
        }
        if (!privateKey.includes('BEGIN PRIVATE KEY') &&
            !privateKey.includes('BEGIN RSA PRIVATE KEY')) {
            throw new Error('Formato inválido para chave privada');
        }
        return {
            publicKey,
            privateKey,
        };
    }
    catch (error) {
        console.error('Falha ao carregar as chaves JWT:', error);
        throw new Error(`Falha ao carregar as chaves JWT: ${error.message}. Verifique se os caminhos estão corretos e as permissões de leitura.`);
    }
};
exports.default = () => {
    const jwtKeys = loadJwtKeys();
    return {
        env: process.env.APP_ENV,
        port: process.env.APP_PORT,
        database: {
            host: process.env.DB_HOST,
            port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : undefined,
            name: process.env.DB_NAME,
            user: process.env.DB_USER,
            pass: process.env.DB_PASS,
        },
        jwt: {
            ...jwtKeys,
            accessTokenExpiresInSec: parseInt(process.env.JWT_ACCESS_TOKEN_EXP_IN_SEC || '3600', 10),
            refreshTokenExpiresInSec: parseInt(process.env.JWT_REFRESH_TOKEN_EXP_IN_SEC || '604800', 10),
        },
        defaultAdminUserPassword: process.env.DEFAULT_ADMIN_USER_PASSWORD || 'admin',
    };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXHNoYXJlZFxcY29uZmlnc1xcY29uZmlndXJhdGlvbi50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDJCQUFrQztBQUNsQywrQkFBNEI7QUFFNUIsTUFBTSxXQUFXLEdBQUcsR0FBRyxFQUFFO0lBQ3ZCLElBQUksQ0FBQztRQUNILE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUM7UUFDdEQsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQztRQUV4RCxJQUFJLENBQUMsYUFBYSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFFRCwwQ0FBMEM7UUFDMUMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2xDLE1BQU0saUJBQWlCLEdBQUcsSUFBQSxXQUFJLEVBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzNELE1BQU0sa0JBQWtCLEdBQUcsSUFBQSxXQUFJLEVBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRTdELDZCQUE2QjtRQUM3QixNQUFNLFNBQVMsR0FBRyxJQUFBLGlCQUFZLEVBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakUsTUFBTSxVQUFVLEdBQUcsSUFBQSxpQkFBWSxFQUFDLGtCQUFrQixFQUFFLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRW5FLDZCQUE2QjtRQUM3QixJQUNFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztZQUN2QyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsc0JBQXNCLENBQUMsRUFDM0MsQ0FBQztZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRUQsSUFDRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUM7WUFDekMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLEVBQzdDLENBQUM7WUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7UUFDekQsQ0FBQztRQUVELE9BQU87WUFDTCxTQUFTO1lBQ1QsVUFBVTtTQUNYLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsa0NBQWtDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekQsTUFBTSxJQUFJLEtBQUssQ0FDYixvQ0FBb0MsS0FBSyxDQUFDLE9BQU8sdUVBQXVFLENBQ3pILENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsa0JBQWUsR0FBUSxFQUFFO0lBQ3ZCLE1BQU0sT0FBTyxHQUFHLFdBQVcsRUFBRSxDQUFDO0lBRTlCLE9BQU87UUFDTCxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPO1FBQ3hCLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVE7UUFDMUIsUUFBUSxFQUFFO1lBQ1IsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTztZQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUN6RSxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPO1lBQ3pCLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU87WUFDekIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTztTQUMxQjtRQUNELEdBQUcsRUFBRTtZQUNILEdBQUcsT0FBTztZQUNWLHVCQUF1QixFQUFFLFFBQVEsQ0FDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsSUFBSSxNQUFNLEVBQ2pELEVBQUUsQ0FDSDtZQUNELHdCQUF3QixFQUFFLFFBQVEsQ0FDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsSUFBSSxRQUFRLEVBQ3BELEVBQUUsQ0FDSDtTQUNGO1FBQ0Qsd0JBQXdCLEVBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLElBQUksT0FBTztLQUNyRCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxzaGFyZWRcXGNvbmZpZ3NcXGNvbmZpZ3VyYXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVhZEZpbGVTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5jb25zdCBsb2FkSnd0S2V5cyA9ICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwdWJsaWNLZXlQYXRoID0gcHJvY2Vzcy5lbnYuSldUX1BVQkxJQ19LRVlfUEFUSDtcbiAgICBjb25zdCBwcml2YXRlS2V5UGF0aCA9IHByb2Nlc3MuZW52LkpXVF9QUklWQVRFX0tFWV9QQVRIO1xuXG4gICAgaWYgKCFwdWJsaWNLZXlQYXRoIHx8ICFwcml2YXRlS2V5UGF0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW1pbmhvcyBkYXMgY2hhdmVzIEpXVCBuw6NvIGNvbmZpZ3VyYWRvcycpO1xuICAgIH1cblxuICAgIC8vIE9idGVyIG8gY2FtaW5obyBhYnNvbHV0byBwYXJhIGFzIGNoYXZlc1xuICAgIGNvbnN0IHByb2plY3RSb290ID0gcHJvY2Vzcy5jd2QoKTtcbiAgICBjb25zdCBmdWxsUHVibGljS2V5UGF0aCA9IGpvaW4ocHJvamVjdFJvb3QsIHB1YmxpY0tleVBhdGgpO1xuICAgIGNvbnN0IGZ1bGxQcml2YXRlS2V5UGF0aCA9IGpvaW4ocHJvamVjdFJvb3QsIHByaXZhdGVLZXlQYXRoKTtcblxuICAgIC8vIExlciBhcyBjaGF2ZXMgZG9zIGFycXVpdm9zXG4gICAgY29uc3QgcHVibGljS2V5ID0gcmVhZEZpbGVTeW5jKGZ1bGxQdWJsaWNLZXlQYXRoLCAndXRmOCcpLnRyaW0oKTtcbiAgICBjb25zdCBwcml2YXRlS2V5ID0gcmVhZEZpbGVTeW5jKGZ1bGxQcml2YXRlS2V5UGF0aCwgJ3V0ZjgnKS50cmltKCk7XG5cbiAgICAvLyBWYWxpZGFyIGZvcm1hdG8gZGFzIGNoYXZlc1xuICAgIGlmIChcbiAgICAgICFwdWJsaWNLZXkuaW5jbHVkZXMoJ0JFR0lOIFBVQkxJQyBLRVknKSAmJlxuICAgICAgIXB1YmxpY0tleS5pbmNsdWRlcygnQkVHSU4gUlNBIFBVQkxJQyBLRVknKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3JtYXRvIGludsOhbGlkbyBwYXJhIGNoYXZlIHDDumJsaWNhJyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIXByaXZhdGVLZXkuaW5jbHVkZXMoJ0JFR0lOIFBSSVZBVEUgS0VZJykgJiZcbiAgICAgICFwcml2YXRlS2V5LmluY2x1ZGVzKCdCRUdJTiBSU0EgUFJJVkFURSBLRVknKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3JtYXRvIGludsOhbGlkbyBwYXJhIGNoYXZlIHByaXZhZGEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcHVibGljS2V5LFxuICAgICAgcHJpdmF0ZUtleSxcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhbGhhIGFvIGNhcnJlZ2FyIGFzIGNoYXZlcyBKV1Q6JywgZXJyb3IpO1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGYWxoYSBhbyBjYXJyZWdhciBhcyBjaGF2ZXMgSldUOiAke2Vycm9yLm1lc3NhZ2V9LiBWZXJpZmlxdWUgc2Ugb3MgY2FtaW5ob3MgZXN0w6NvIGNvcnJldG9zIGUgYXMgcGVybWlzc8O1ZXMgZGUgbGVpdHVyYS5gLFxuICAgICk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0ICgpOiBhbnkgPT4ge1xuICBjb25zdCBqd3RLZXlzID0gbG9hZEp3dEtleXMoKTtcblxuICByZXR1cm4ge1xuICAgIGVudjogcHJvY2Vzcy5lbnYuQVBQX0VOVixcbiAgICBwb3J0OiBwcm9jZXNzLmVudi5BUFBfUE9SVCxcbiAgICBkYXRhYmFzZToge1xuICAgICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCxcbiAgICAgIHBvcnQ6IHByb2Nlc3MuZW52LkRCX1BPUlQgPyBwYXJzZUludChwcm9jZXNzLmVudi5EQl9QT1JULCAxMCkgOiB1bmRlZmluZWQsXG4gICAgICBuYW1lOiBwcm9jZXNzLmVudi5EQl9OQU1FLFxuICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuREJfVVNFUixcbiAgICAgIHBhc3M6IHByb2Nlc3MuZW52LkRCX1BBU1MsXG4gICAgfSxcbiAgICBqd3Q6IHtcbiAgICAgIC4uLmp3dEtleXMsXG4gICAgICBhY2Nlc3NUb2tlbkV4cGlyZXNJblNlYzogcGFyc2VJbnQoXG4gICAgICAgIHByb2Nlc3MuZW52LkpXVF9BQ0NFU1NfVE9LRU5fRVhQX0lOX1NFQyB8fCAnMzYwMCcsXG4gICAgICAgIDEwLFxuICAgICAgKSxcbiAgICAgIHJlZnJlc2hUb2tlbkV4cGlyZXNJblNlYzogcGFyc2VJbnQoXG4gICAgICAgIHByb2Nlc3MuZW52LkpXVF9SRUZSRVNIX1RPS0VOX0VYUF9JTl9TRUMgfHwgJzYwNDgwMCcsXG4gICAgICAgIDEwLFxuICAgICAgKSxcbiAgICB9LFxuICAgIGRlZmF1bHRBZG1pblVzZXJQYXNzd29yZDpcbiAgICAgIHByb2Nlc3MuZW52LkRFRkFVTFRfQURNSU5fVVNFUl9QQVNTV09SRCB8fCAnYWRtaW4nLFxuICB9O1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==