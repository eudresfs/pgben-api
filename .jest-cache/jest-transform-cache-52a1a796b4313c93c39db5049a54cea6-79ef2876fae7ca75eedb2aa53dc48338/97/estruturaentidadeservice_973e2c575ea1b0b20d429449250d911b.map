{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\estrutura-entidade.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\estrutura-entidade.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { TipoBeneficioSchemaRepository } from '../repositories/tipo-beneficio-schema.repository';\nimport { TipoBeneficio } from '../../../entities/tipo-beneficio.entity';\nimport {\n  TipoBeneficioSchema,\n  CampoEstrutura,\n  MetadadosEstrutura,\n} from '../../../entities/tipo-beneficio-schema.entity';\nimport { Logger } from '@nestjs/common';\nimport { Status } from '@/enums';\n\n/**\n * Interface para resposta da estrutura da entidade\n */\nexport interface EstruturaEntidadeResponse {\n  entidade_dados: string;\n  campos: CampoEstrutura[];\n  metadados: MetadadosEstrutura;\n  versao: string;\n}\n\n/**\n * Serviço responsável por gerenciar a estrutura das entidades de dados\n * para cada tipo de benefício, eliminando a necessidade de formulários dinâmicos\n */\n@Injectable()\nexport class EstruturaEntidadeService {\n  private readonly logger = new Logger(EstruturaEntidadeService.name);\n\n  /**\n   * Mapeamento de tipos de benefícios para suas entidades de dados correspondentes\n   */\n  private readonly mapeamentoEntidades: Record<string, string> = {\n    'beneficio-natalidade': 'DadosNatalidade',\n    'beneficio natalidade': 'DadosNatalidade',\n    natalidade: 'DadosNatalidade',\n    'aluguel-social': 'DadosAluguelSocial',\n    'aluguel social': 'DadosAluguelSocial',\n    'beneficio-funeral': 'DadosFuneral',\n    'beneficio funeral': 'DadosFuneral',\n    funeral: 'DadosFuneral',\n    'cesta-basica': 'DadosCestaBasica',\n    'cesta básica': 'DadosCestaBasica',\n    cesta: 'DadosCestaBasica',\n  };\n\n  constructor(\n    private readonly tipoBeneficioSchemaRepository: TipoBeneficioSchemaRepository,\n  ) {}\n\n  /**\n   * Obtém a estrutura da entidade para um tipo de benefício específico\n   *\n   * @param tipoBeneficio Dados do tipo de benefício\n   * @returns Estrutura da entidade correspondente\n   */\n  async obterEstruturaEntidade(\n    tipoBeneficio: TipoBeneficio,\n  ): Promise<EstruturaEntidadeResponse> {\n    try {\n      // Primeiro, tenta buscar schema customizado no banco\n      const schemaCustomizado =\n        await this.tipoBeneficioSchemaRepository.findByTipoBeneficioId(\n          tipoBeneficio.id,\n        );\n\n      if (schemaCustomizado) {\n        this.logger.log(\n          `Schema customizado encontrado para benefício ${tipoBeneficio.id}`,\n        );\n        return {\n          entidade_dados: schemaCustomizado.entidade_dados,\n          campos: schemaCustomizado.schema_estrutura.campos,\n          metadados: schemaCustomizado.schema_estrutura.metadados,\n          versao: schemaCustomizado.versao,\n        };\n      }\n\n      // Se não encontrou schema customizado, gera estrutura padrão\n      this.logger.log(\n        `Gerando estrutura padrão para benefício ${tipoBeneficio.nome}`,\n      );\n      return await this.gerarEstruturaPadrao(tipoBeneficio);\n    } catch (error) {\n      this.logger.error(\n        `Erro ao obter estrutura da entidade: ${error.message}`,\n        error.stack,\n      );\n      throw new BadRequestException('Erro ao obter estrutura da entidade');\n    }\n  }\n\n  /**\n   * Gera estrutura padrão baseada no tipo de benefício\n   *\n   * @param tipoBeneficio Dados do tipo de benefício\n   * @returns Estrutura padrão da entidade\n   */\n  private async gerarEstruturaPadrao(\n    tipoBeneficio: TipoBeneficio,\n  ): Promise<EstruturaEntidadeResponse> {\n    const nomeNormalizado = this.normalizarNomeBeneficio(tipoBeneficio.nome);\n    const entidadeDados = this.mapeamentoEntidades[nomeNormalizado];\n\n    if (!entidadeDados) {\n      throw new NotFoundException(\n        `Entidade de dados não encontrada para o benefício: ${tipoBeneficio.nome}`,\n      );\n    }\n\n    const estrutura = await this.gerarEstruturaPorEntidade(\n      entidadeDados,\n      tipoBeneficio,\n    );\n\n    return {\n      entidade_dados: entidadeDados,\n      campos: estrutura.campos,\n      metadados: estrutura.metadados,\n      versao: '1.0.0',\n    };\n  }\n\n  /**\n   * Gera estrutura de campos baseada na entidade de dados\n   *\n   * @param entidadeDados Nome da entidade de dados\n   * @param tipoBeneficio Dados do tipo de benefício\n   * @returns Estrutura de campos e metadados\n   */\n  private async gerarEstruturaPorEntidade(\n    entidadeDados: string,\n    tipoBeneficio: TipoBeneficio,\n  ): Promise<{ campos: CampoEstrutura[]; metadados: MetadadosEstrutura }> {\n    switch (entidadeDados) {\n      case 'DadosNatalidade':\n        return this.gerarEstruturaNatalidade(tipoBeneficio);\n      case 'DadosAluguelSocial':\n        return this.gerarEstruturaAluguelSocial(tipoBeneficio);\n      case 'DadosFuneral':\n        return this.gerarEstruturaFuneral(tipoBeneficio);\n      case 'DadosCestaBasica':\n        return this.gerarEstruturaCestaBasica(tipoBeneficio);\n      default:\n        throw new BadRequestException(\n          `Entidade de dados não suportada: ${entidadeDados}`,\n        );\n    }\n  }\n\n  /**\n   * Gera estrutura específica para Auxílio Natalidade\n   */\n  private gerarEstruturaNatalidade(tipoBeneficio: TipoBeneficio): {\n    campos: CampoEstrutura[];\n    metadados: MetadadosEstrutura;\n  } {\n    const campos: CampoEstrutura[] = [\n      {\n        nome: 'realiza_pre_natal',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Realiza pré-natal',\n        descricao: 'Indica se a gestante realiza acompanhamento pré-natal',\n      },\n      {\n        nome: 'atendida_psf_ubs',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Atendida pelo PSF/UBS',\n        descricao:\n          'Indica se é atendida pelo Programa Saúde da Família ou Unidade Básica de Saúde',\n      },\n      {\n        nome: 'gravidez_risco',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Gravidez de risco',\n        descricao: 'Indica se a gravidez é considerada de alto risco',\n      },\n      {\n        nome: 'data_provavel_parto',\n        tipo: 'date',\n        obrigatorio: false,\n        label: 'Data provável do parto',\n        descricao: 'Data estimada para o nascimento do bebê',\n      },\n      {\n        nome: 'gemeos_trigemeos',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Gêmeos/Trigêmeos',\n        descricao: 'Indica se a gestação é múltipla (gêmeos ou trigêmeos)',\n      },\n      {\n        nome: 'ja_tem_filhos',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Já tem filhos',\n        descricao: 'Indica se a gestante já possui outros filhos',\n      },\n      {\n        nome: 'quantidade_filhos',\n        tipo: 'number',\n        obrigatorio: false,\n        label: 'Quantidade de filhos',\n        descricao: 'Número de filhos que a gestante já possui',\n        validacoes: { min: 0, max: 20 },\n        dependeDe: {\n          campo: 'ja_tem_filhos',\n          valor: true,\n          condicao: 'igual',\n        },\n      },\n      {\n        nome: 'telefone_cadastrado_cpf',\n        tipo: 'string',\n        obrigatorio: false,\n        label: 'Telefone cadastrado no CPF',\n        descricao: 'Número de telefone vinculado ao CPF da gestante',\n      },\n      {\n        nome: 'chave_pix',\n        tipo: 'string',\n        obrigatorio: false,\n        label: 'Chave PIX',\n        descricao: 'Chave PIX para recebimento do benefício',\n      },\n    ];\n\n    const metadados: MetadadosEstrutura = {\n      versao: '1.0.0',\n      descricao: 'Estrutura de dados para solicitação de Auxílio Natalidade',\n      categoria: 'assistencia-social',\n      tags: ['natalidade', 'gestante', 'beneficio'],\n      configuracoes: {\n        permiteProrrogacao: false,\n        tempoMaximoSolicitacao: '180 dias após o nascimento',\n        valorFixo: tipoBeneficio.valor,\n      },\n    };\n\n    return { campos, metadados };\n  }\n\n  /**\n   * Gera estrutura específica para Aluguel Social\n   */\n  private gerarEstruturaAluguelSocial(tipoBeneficio: TipoBeneficio): {\n    campos: CampoEstrutura[];\n    metadados: MetadadosEstrutura;\n  } {\n    const campos: CampoEstrutura[] = [\n      {\n        nome: 'publico_prioritario',\n        tipo: 'enum',\n        obrigatorio: true,\n        label: 'Público prioritário',\n        descricao: 'Categoria do público prioritário para aluguel social',\n        opcoes: [\n          'IDOSO',\n          'PESSOA_DEFICIENCIA',\n          'FAMILIA_VULNERAVEL',\n          'VITIMA_VIOLENCIA',\n          'SITUACAO_RUA',\n          'OUTROS',\n        ],\n      },\n      {\n        nome: 'especificacoes',\n        tipo: 'array',\n        obrigatorio: false,\n        label: 'Especificações',\n        descricao: 'Especificações adicionais do caso',\n        opcoes: ['EMERGENCIAL', 'TEMPORARIO', 'JUDICIAL', 'SOCIAL'],\n      },\n      {\n        nome: 'situacao_moradia_atual',\n        tipo: 'string',\n        obrigatorio: true,\n        label: 'Situação da moradia atual',\n        descricao: 'Descrição detalhada da situação atual de moradia',\n      },\n      {\n        nome: 'possui_imovel_interditado',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Possui imóvel interditado',\n        descricao:\n          'Indica se possui imóvel que foi interditado por autoridade competente',\n      },\n      {\n        nome: 'caso_judicializado_maria_penha',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Caso judicializado Lei Maria da Penha',\n        descricao: 'Indica se o caso está relacionado à Lei Maria da Penha',\n      },\n      {\n        nome: 'observacoes_adicionais',\n        tipo: 'string',\n        obrigatorio: false,\n        label: 'Observações adicionais',\n        descricao: 'Informações complementares sobre o caso',\n      },\n    ];\n\n    const metadados: MetadadosEstrutura = {\n      versao: '1.0.0',\n      descricao: 'Estrutura de dados para solicitação de Aluguel Social',\n      categoria: 'assistencia-social',\n      tags: ['aluguel', 'moradia', 'social'],\n      configuracoes: {\n        permiteProrrogacao: true,\n        duracaoMaximaMeses:\n          tipoBeneficio.especificacoes?.duracao_maxima_meses || 12,\n        valorMaximo: tipoBeneficio.valor,\n      },\n    };\n\n    return { campos, metadados };\n  }\n\n  /**\n   * Gera estrutura específica para Auxílio Funeral\n   */\n  private gerarEstruturaFuneral(tipoBeneficio: TipoBeneficio): {\n    campos: CampoEstrutura[];\n    metadados: MetadadosEstrutura;\n  } {\n    const campos: CampoEstrutura[] = [\n      {\n        nome: 'nome_falecido',\n        tipo: 'string',\n        obrigatorio: true,\n        label: 'Nome do falecido',\n        descricao: 'Nome completo da pessoa falecida',\n      },\n      {\n        nome: 'data_obito',\n        tipo: 'date',\n        obrigatorio: true,\n        label: 'Data do óbito',\n        descricao: 'Data em que ocorreu o falecimento',\n      },\n      {\n        nome: 'parentesco_solicitante',\n        tipo: 'enum',\n        obrigatorio: true,\n        label: 'Parentesco com o solicitante',\n        descricao: 'Grau de parentesco entre o falecido e o solicitante',\n        opcoes: ['CONJUGE', 'FILHO', 'PAI', 'MAE', 'IRMAO', 'OUTROS'],\n      },\n      {\n        nome: 'tipo_urna',\n        tipo: 'enum',\n        obrigatorio: true,\n        label: 'Tipo de urna',\n        descricao: 'Tipo de urna funerária solicitada',\n        opcoes: ['SIMPLES', 'INTERMEDIARIA', 'LUXO'],\n      },\n      {\n        nome: 'valor_solicitado',\n        tipo: 'number',\n        obrigatorio: true,\n        label: 'Valor solicitado',\n        descricao: 'Valor total solicitado para o auxílio funeral',\n        validacoes: { min: 0, max: tipoBeneficio.valor },\n      },\n    ];\n\n    const metadados: MetadadosEstrutura = {\n      versao: '1.0.0',\n      descricao: 'Estrutura de dados para solicitação de Auxílio Funeral',\n      categoria: 'assistencia-social',\n      tags: ['funeral', 'obito', 'beneficio'],\n      configuracoes: {\n        permiteProrrogacao: false,\n        prazoMaximoSolicitacao: '30 dias após o óbito',\n        valorMaximo: tipoBeneficio.valor,\n      },\n    };\n\n    return { campos, metadados };\n  }\n\n  /**\n   * Gera estrutura específica para Cesta Básica\n   */\n  private gerarEstruturaCestaBasica(tipoBeneficio: TipoBeneficio): {\n    campos: CampoEstrutura[];\n    metadados: MetadadosEstrutura;\n  } {\n    const campos: CampoEstrutura[] = [\n      {\n        nome: 'quantidade_pessoas_familia',\n        tipo: 'number',\n        obrigatorio: true,\n        label: 'Quantidade de pessoas na família',\n        descricao: 'Número total de pessoas que compõem o núcleo familiar',\n        validacoes: { min: 1, max: 20 },\n      },\n      {\n        nome: 'possui_restricao_alimentar',\n        tipo: 'boolean',\n        obrigatorio: true,\n        label: 'Possui restrição alimentar',\n        descricao:\n          'Indica se algum membro da família possui restrição alimentar',\n      },\n      {\n        nome: 'tipo_restricao',\n        tipo: 'string',\n        obrigatorio: false,\n        label: 'Tipo de restrição',\n        descricao: 'Descrição das restrições alimentares',\n        dependeDe: {\n          campo: 'possui_restricao_alimentar',\n          valor: true,\n          condicao: 'igual',\n        },\n      },\n      {\n        nome: 'periodicidade_solicitada',\n        tipo: 'enum',\n        obrigatorio: true,\n        label: 'Periodicidade solicitada',\n        descricao: 'Frequência desejada para recebimento da cesta básica',\n        opcoes: ['MENSAL', 'BIMESTRAL', 'TRIMESTRAL'],\n      },\n      {\n        nome: 'local_entrega_preferido',\n        tipo: 'string',\n        obrigatorio: false,\n        label: 'Local de entrega preferido',\n        descricao: 'Endereço ou local preferido para entrega da cesta básica',\n      },\n    ];\n\n    const metadados: MetadadosEstrutura = {\n      versao: '1.0.0',\n      descricao: 'Estrutura de dados para solicitação de Cesta Básica',\n      categoria: 'assistencia-social',\n      tags: ['cesta', 'alimentacao', 'basica'],\n      configuracoes: {\n        permiteProrrogacao: true,\n        quantidadeMaximaCestas:\n          tipoBeneficio.especificacoes?.quantidade_maxima_cestas || 6,\n        pesoTotalKg: tipoBeneficio.especificacoes?.peso_total_kg || 15,\n      },\n    };\n\n    return { campos, metadados };\n  }\n\n  /**\n   * Normaliza o nome do benefício para busca no mapeamento\n   *\n   * @param nome Nome do benefício\n   * @returns Nome normalizado\n   */\n  private normalizarNomeBeneficio(nome: string): string {\n    return nome\n      .toLowerCase()\n      .trim()\n      .replace(/[áàâã]/g, 'a')\n      .replace(/[éèê]/g, 'e')\n      .replace(/[íì]/g, 'i')\n      .replace(/[óòôõ]/g, 'o')\n      .replace(/[úù]/g, 'u')\n      .replace(/ç/g, 'c')\n      .replace(/[^a-z0-9\\s-]/g, '')\n      .replace(/\\s+/g, '-');\n  }\n\n  /**\n   * Cria um schema customizado para um tipo de benefício\n   *\n   * @param tipoBeneficioId ID do tipo de benefício\n   * @param estrutura Estrutura customizada\n   * @returns Schema criado\n   */\n  async criarSchemaCustomizado(\n    tipoBeneficioId: string,\n    estrutura: EstruturaEntidadeResponse,\n  ): Promise<TipoBeneficioSchema> {\n    const schema = this.tipoBeneficioSchemaRepository.create({\n      tipo_beneficio_id: tipoBeneficioId,\n      entidade_dados: estrutura.entidade_dados,\n      schema_estrutura: {\n        campos: estrutura.campos,\n        metadados: estrutura.metadados,\n      },\n      versao: estrutura.versao,\n      status: Status.ATIVO,\n    });\n\n    return this.tipoBeneficioSchemaRepository.save(schema);\n  }\n\n  /**\n   * Lista todas as entidades de dados disponíveis\n   *\n   * @returns Lista de entidades disponíveis\n   */\n  getEntidadesDisponiveis(): string[] {\n    return Array.from(new Set(Object.values(this.mapeamentoEntidades)));\n  }\n}\n"],"version":3}