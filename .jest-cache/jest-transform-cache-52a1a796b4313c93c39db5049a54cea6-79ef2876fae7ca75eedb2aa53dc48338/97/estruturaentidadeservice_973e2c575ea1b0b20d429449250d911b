d2294155187de8c135c1b690619998dc
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var EstruturaEntidadeService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EstruturaEntidadeService = void 0;
const common_1 = require("@nestjs/common");
const tipo_beneficio_schema_repository_1 = require("../repositories/tipo-beneficio-schema.repository");
const common_2 = require("@nestjs/common");
const enums_1 = require("@/enums");
/**
 * Serviço responsável por gerenciar a estrutura das entidades de dados
 * para cada tipo de benefício, eliminando a necessidade de formulários dinâmicos
 */
let EstruturaEntidadeService = EstruturaEntidadeService_1 = class EstruturaEntidadeService {
    tipoBeneficioSchemaRepository;
    logger = new common_2.Logger(EstruturaEntidadeService_1.name);
    /**
     * Mapeamento de tipos de benefícios para suas entidades de dados correspondentes
     */
    mapeamentoEntidades = {
        'beneficio-natalidade': 'DadosNatalidade',
        'beneficio natalidade': 'DadosNatalidade',
        natalidade: 'DadosNatalidade',
        'aluguel-social': 'DadosAluguelSocial',
        'aluguel social': 'DadosAluguelSocial',
        'beneficio-funeral': 'DadosFuneral',
        'beneficio funeral': 'DadosFuneral',
        funeral: 'DadosFuneral',
        'cesta-basica': 'DadosCestaBasica',
        'cesta básica': 'DadosCestaBasica',
        cesta: 'DadosCestaBasica',
    };
    constructor(tipoBeneficioSchemaRepository) {
        this.tipoBeneficioSchemaRepository = tipoBeneficioSchemaRepository;
    }
    /**
     * Obtém a estrutura da entidade para um tipo de benefício específico
     *
     * @param tipoBeneficio Dados do tipo de benefício
     * @returns Estrutura da entidade correspondente
     */
    async obterEstruturaEntidade(tipoBeneficio) {
        try {
            // Primeiro, tenta buscar schema customizado no banco
            const schemaCustomizado = await this.tipoBeneficioSchemaRepository.findByTipoBeneficioId(tipoBeneficio.id);
            if (schemaCustomizado) {
                this.logger.log(`Schema customizado encontrado para benefício ${tipoBeneficio.id}`);
                return {
                    entidade_dados: schemaCustomizado.entidade_dados,
                    campos: schemaCustomizado.schema_estrutura.campos,
                    metadados: schemaCustomizado.schema_estrutura.metadados,
                    versao: schemaCustomizado.versao,
                };
            }
            // Se não encontrou schema customizado, gera estrutura padrão
            this.logger.log(`Gerando estrutura padrão para benefício ${tipoBeneficio.nome}`);
            return await this.gerarEstruturaPadrao(tipoBeneficio);
        }
        catch (error) {
            this.logger.error(`Erro ao obter estrutura da entidade: ${error.message}`, error.stack);
            throw new common_1.BadRequestException('Erro ao obter estrutura da entidade');
        }
    }
    /**
     * Gera estrutura padrão baseada no tipo de benefício
     *
     * @param tipoBeneficio Dados do tipo de benefício
     * @returns Estrutura padrão da entidade
     */
    async gerarEstruturaPadrao(tipoBeneficio) {
        const nomeNormalizado = this.normalizarNomeBeneficio(tipoBeneficio.nome);
        const entidadeDados = this.mapeamentoEntidades[nomeNormalizado];
        if (!entidadeDados) {
            throw new common_1.NotFoundException(`Entidade de dados não encontrada para o benefício: ${tipoBeneficio.nome}`);
        }
        const estrutura = await this.gerarEstruturaPorEntidade(entidadeDados, tipoBeneficio);
        return {
            entidade_dados: entidadeDados,
            campos: estrutura.campos,
            metadados: estrutura.metadados,
            versao: '1.0.0',
        };
    }
    /**
     * Gera estrutura de campos baseada na entidade de dados
     *
     * @param entidadeDados Nome da entidade de dados
     * @param tipoBeneficio Dados do tipo de benefício
     * @returns Estrutura de campos e metadados
     */
    async gerarEstruturaPorEntidade(entidadeDados, tipoBeneficio) {
        switch (entidadeDados) {
            case 'DadosNatalidade':
                return this.gerarEstruturaNatalidade(tipoBeneficio);
            case 'DadosAluguelSocial':
                return this.gerarEstruturaAluguelSocial(tipoBeneficio);
            case 'DadosFuneral':
                return this.gerarEstruturaFuneral(tipoBeneficio);
            case 'DadosCestaBasica':
                return this.gerarEstruturaCestaBasica(tipoBeneficio);
            default:
                throw new common_1.BadRequestException(`Entidade de dados não suportada: ${entidadeDados}`);
        }
    }
    /**
     * Gera estrutura específica para Auxílio Natalidade
     */
    gerarEstruturaNatalidade(tipoBeneficio) {
        const campos = [
            {
                nome: 'realiza_pre_natal',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Realiza pré-natal',
                descricao: 'Indica se a gestante realiza acompanhamento pré-natal',
            },
            {
                nome: 'atendida_psf_ubs',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Atendida pelo PSF/UBS',
                descricao: 'Indica se é atendida pelo Programa Saúde da Família ou Unidade Básica de Saúde',
            },
            {
                nome: 'gravidez_risco',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Gravidez de risco',
                descricao: 'Indica se a gravidez é considerada de alto risco',
            },
            {
                nome: 'data_provavel_parto',
                tipo: 'date',
                obrigatorio: false,
                label: 'Data provável do parto',
                descricao: 'Data estimada para o nascimento do bebê',
            },
            {
                nome: 'gemeos_trigemeos',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Gêmeos/Trigêmeos',
                descricao: 'Indica se a gestação é múltipla (gêmeos ou trigêmeos)',
            },
            {
                nome: 'ja_tem_filhos',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Já tem filhos',
                descricao: 'Indica se a gestante já possui outros filhos',
            },
            {
                nome: 'quantidade_filhos',
                tipo: 'number',
                obrigatorio: false,
                label: 'Quantidade de filhos',
                descricao: 'Número de filhos que a gestante já possui',
                validacoes: { min: 0, max: 20 },
                dependeDe: {
                    campo: 'ja_tem_filhos',
                    valor: true,
                    condicao: 'igual',
                },
            },
            {
                nome: 'telefone_cadastrado_cpf',
                tipo: 'string',
                obrigatorio: false,
                label: 'Telefone cadastrado no CPF',
                descricao: 'Número de telefone vinculado ao CPF da gestante',
            },
            {
                nome: 'chave_pix',
                tipo: 'string',
                obrigatorio: false,
                label: 'Chave PIX',
                descricao: 'Chave PIX para recebimento do benefício',
            },
        ];
        const metadados = {
            versao: '1.0.0',
            descricao: 'Estrutura de dados para solicitação de Auxílio Natalidade',
            categoria: 'assistencia-social',
            tags: ['natalidade', 'gestante', 'beneficio'],
            configuracoes: {
                permiteProrrogacao: false,
                tempoMaximoSolicitacao: '180 dias após o nascimento',
                valorFixo: tipoBeneficio.valor,
            },
        };
        return { campos, metadados };
    }
    /**
     * Gera estrutura específica para Aluguel Social
     */
    gerarEstruturaAluguelSocial(tipoBeneficio) {
        const campos = [
            {
                nome: 'publico_prioritario',
                tipo: 'enum',
                obrigatorio: true,
                label: 'Público prioritário',
                descricao: 'Categoria do público prioritário para aluguel social',
                opcoes: [
                    'IDOSO',
                    'PESSOA_DEFICIENCIA',
                    'FAMILIA_VULNERAVEL',
                    'VITIMA_VIOLENCIA',
                    'SITUACAO_RUA',
                    'OUTROS',
                ],
            },
            {
                nome: 'especificacoes',
                tipo: 'array',
                obrigatorio: false,
                label: 'Especificações',
                descricao: 'Especificações adicionais do caso',
                opcoes: ['EMERGENCIAL', 'TEMPORARIO', 'JUDICIAL', 'SOCIAL'],
            },
            {
                nome: 'situacao_moradia_atual',
                tipo: 'string',
                obrigatorio: true,
                label: 'Situação da moradia atual',
                descricao: 'Descrição detalhada da situação atual de moradia',
            },
            {
                nome: 'possui_imovel_interditado',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Possui imóvel interditado',
                descricao: 'Indica se possui imóvel que foi interditado por autoridade competente',
            },
            {
                nome: 'caso_judicializado_maria_penha',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Caso judicializado Lei Maria da Penha',
                descricao: 'Indica se o caso está relacionado à Lei Maria da Penha',
            },
            {
                nome: 'observacoes_adicionais',
                tipo: 'string',
                obrigatorio: false,
                label: 'Observações adicionais',
                descricao: 'Informações complementares sobre o caso',
            },
        ];
        const metadados = {
            versao: '1.0.0',
            descricao: 'Estrutura de dados para solicitação de Aluguel Social',
            categoria: 'assistencia-social',
            tags: ['aluguel', 'moradia', 'social'],
            configuracoes: {
                permiteProrrogacao: true,
                duracaoMaximaMeses: tipoBeneficio.especificacoes?.duracao_maxima_meses || 12,
                valorMaximo: tipoBeneficio.valor,
            },
        };
        return { campos, metadados };
    }
    /**
     * Gera estrutura específica para Auxílio Funeral
     */
    gerarEstruturaFuneral(tipoBeneficio) {
        const campos = [
            {
                nome: 'nome_falecido',
                tipo: 'string',
                obrigatorio: true,
                label: 'Nome do falecido',
                descricao: 'Nome completo da pessoa falecida',
            },
            {
                nome: 'data_obito',
                tipo: 'date',
                obrigatorio: true,
                label: 'Data do óbito',
                descricao: 'Data em que ocorreu o falecimento',
            },
            {
                nome: 'parentesco_solicitante',
                tipo: 'enum',
                obrigatorio: true,
                label: 'Parentesco com o solicitante',
                descricao: 'Grau de parentesco entre o falecido e o solicitante',
                opcoes: ['CONJUGE', 'FILHO', 'PAI', 'MAE', 'IRMAO', 'OUTROS'],
            },
            {
                nome: 'tipo_urna',
                tipo: 'enum',
                obrigatorio: true,
                label: 'Tipo de urna',
                descricao: 'Tipo de urna funerária solicitada',
                opcoes: ['SIMPLES', 'INTERMEDIARIA', 'LUXO'],
            },
            {
                nome: 'valor_solicitado',
                tipo: 'number',
                obrigatorio: true,
                label: 'Valor solicitado',
                descricao: 'Valor total solicitado para o auxílio funeral',
                validacoes: { min: 0, max: tipoBeneficio.valor },
            },
        ];
        const metadados = {
            versao: '1.0.0',
            descricao: 'Estrutura de dados para solicitação de Auxílio Funeral',
            categoria: 'assistencia-social',
            tags: ['funeral', 'obito', 'beneficio'],
            configuracoes: {
                permiteProrrogacao: false,
                prazoMaximoSolicitacao: '30 dias após o óbito',
                valorMaximo: tipoBeneficio.valor,
            },
        };
        return { campos, metadados };
    }
    /**
     * Gera estrutura específica para Cesta Básica
     */
    gerarEstruturaCestaBasica(tipoBeneficio) {
        const campos = [
            {
                nome: 'quantidade_pessoas_familia',
                tipo: 'number',
                obrigatorio: true,
                label: 'Quantidade de pessoas na família',
                descricao: 'Número total de pessoas que compõem o núcleo familiar',
                validacoes: { min: 1, max: 20 },
            },
            {
                nome: 'possui_restricao_alimentar',
                tipo: 'boolean',
                obrigatorio: true,
                label: 'Possui restrição alimentar',
                descricao: 'Indica se algum membro da família possui restrição alimentar',
            },
            {
                nome: 'tipo_restricao',
                tipo: 'string',
                obrigatorio: false,
                label: 'Tipo de restrição',
                descricao: 'Descrição das restrições alimentares',
                dependeDe: {
                    campo: 'possui_restricao_alimentar',
                    valor: true,
                    condicao: 'igual',
                },
            },
            {
                nome: 'periodicidade_solicitada',
                tipo: 'enum',
                obrigatorio: true,
                label: 'Periodicidade solicitada',
                descricao: 'Frequência desejada para recebimento da cesta básica',
                opcoes: ['MENSAL', 'BIMESTRAL', 'TRIMESTRAL'],
            },
            {
                nome: 'local_entrega_preferido',
                tipo: 'string',
                obrigatorio: false,
                label: 'Local de entrega preferido',
                descricao: 'Endereço ou local preferido para entrega da cesta básica',
            },
        ];
        const metadados = {
            versao: '1.0.0',
            descricao: 'Estrutura de dados para solicitação de Cesta Básica',
            categoria: 'assistencia-social',
            tags: ['cesta', 'alimentacao', 'basica'],
            configuracoes: {
                permiteProrrogacao: true,
                quantidadeMaximaCestas: tipoBeneficio.especificacoes?.quantidade_maxima_cestas || 6,
                pesoTotalKg: tipoBeneficio.especificacoes?.peso_total_kg || 15,
            },
        };
        return { campos, metadados };
    }
    /**
     * Normaliza o nome do benefício para busca no mapeamento
     *
     * @param nome Nome do benefício
     * @returns Nome normalizado
     */
    normalizarNomeBeneficio(nome) {
        return nome
            .toLowerCase()
            .trim()
            .replace(/[áàâã]/g, 'a')
            .replace(/[éèê]/g, 'e')
            .replace(/[íì]/g, 'i')
            .replace(/[óòôõ]/g, 'o')
            .replace(/[úù]/g, 'u')
            .replace(/ç/g, 'c')
            .replace(/[^a-z0-9\s-]/g, '')
            .replace(/\s+/g, '-');
    }
    /**
     * Cria um schema customizado para um tipo de benefício
     *
     * @param tipoBeneficioId ID do tipo de benefício
     * @param estrutura Estrutura customizada
     * @returns Schema criado
     */
    async criarSchemaCustomizado(tipoBeneficioId, estrutura) {
        const schema = this.tipoBeneficioSchemaRepository.create({
            tipo_beneficio_id: tipoBeneficioId,
            entidade_dados: estrutura.entidade_dados,
            schema_estrutura: {
                campos: estrutura.campos,
                metadados: estrutura.metadados,
            },
            versao: estrutura.versao,
            status: enums_1.Status.ATIVO,
        });
        return this.tipoBeneficioSchemaRepository.save(schema);
    }
    /**
     * Lista todas as entidades de dados disponíveis
     *
     * @returns Lista de entidades disponíveis
     */
    getEntidadesDisponiveis() {
        return Array.from(new Set(Object.values(this.mapeamentoEntidades)));
    }
};
exports.EstruturaEntidadeService = EstruturaEntidadeService;
exports.EstruturaEntidadeService = EstruturaEntidadeService = EstruturaEntidadeService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof tipo_beneficio_schema_repository_1.TipoBeneficioSchemaRepository !== "undefined" && tipo_beneficio_schema_repository_1.TipoBeneficioSchemaRepository) === "function" ? _a : Object])
], EstruturaEntidadeService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXG1vZHVsZXNcXGJlbmVmaWNpb1xcc2VydmljZXNcXGVzdHJ1dHVyYS1lbnRpZGFkZS5zZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBSXdCO0FBQ3hCLHVHQUFpRztBQU9qRywyQ0FBd0M7QUFDeEMsbUNBQWlDO0FBWWpDOzs7R0FHRztBQUVJLElBQU0sd0JBQXdCLGdDQUE5QixNQUFNLHdCQUF3QjtJQXFCaEI7SUFwQkYsTUFBTSxHQUFHLElBQUksZUFBTSxDQUFDLDBCQUF3QixDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXBFOztPQUVHO0lBQ2MsbUJBQW1CLEdBQTJCO1FBQzdELHNCQUFzQixFQUFFLGlCQUFpQjtRQUN6QyxzQkFBc0IsRUFBRSxpQkFBaUI7UUFDekMsVUFBVSxFQUFFLGlCQUFpQjtRQUM3QixnQkFBZ0IsRUFBRSxvQkFBb0I7UUFDdEMsZ0JBQWdCLEVBQUUsb0JBQW9CO1FBQ3RDLG1CQUFtQixFQUFFLGNBQWM7UUFDbkMsbUJBQW1CLEVBQUUsY0FBYztRQUNuQyxPQUFPLEVBQUUsY0FBYztRQUN2QixjQUFjLEVBQUUsa0JBQWtCO1FBQ2xDLGNBQWMsRUFBRSxrQkFBa0I7UUFDbEMsS0FBSyxFQUFFLGtCQUFrQjtLQUMxQixDQUFDO0lBRUYsWUFDbUIsNkJBQTREO1FBQTVELGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBK0I7SUFDNUUsQ0FBQztJQUVKOzs7OztPQUtHO0lBQ0gsS0FBSyxDQUFDLHNCQUFzQixDQUMxQixhQUE0QjtRQUU1QixJQUFJLENBQUM7WUFDSCxxREFBcUQ7WUFDckQsTUFBTSxpQkFBaUIsR0FDckIsTUFBTSxJQUFJLENBQUMsNkJBQTZCLENBQUMscUJBQXFCLENBQzVELGFBQWEsQ0FBQyxFQUFFLENBQ2pCLENBQUM7WUFFSixJQUFJLGlCQUFpQixFQUFFLENBQUM7Z0JBQ3RCLElBQUks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TyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUM7YUFDNUIsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLHNCQUFzQixDQUMxQixlQUF1QixFQUN2QixTQUFvQztRQUVwQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsNkJBQTZCLENBQUMsTUFBTSxDQUFDO1lBQ3ZELGlCQUFpQixFQUFFLGVBQWU7WUFDbEMsY0FBYyxFQUFFLFNBQVMsQ0FBQyxjQUFjO1lBQ3hDLGdCQUFnQixFQUFFO2dCQUNoQixNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU07Z0JBQ3hCLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUzthQUMvQjtZQUNELE1BQU0sRUFBRSxTQUFTLENBQUMsTUFBTTtZQUN4QixNQUFNLEVBQUUsY0FBTSxDQUFDLEtBQUs7U0FDckIsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsdUJBQXVCO1FBQ3JCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0YsQ0FBQTtBQWxlWSw0REFBd0I7bUNBQXhCLHdCQUF3QjtJQURwQyxJQUFBLG1CQUFVLEdBQUU7eURBc0J1QyxnRUFBNkIsb0JBQTdCLGdFQUE2QjtHQXJCcEUsd0JBQXdCLENBa2VwQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGV1ZHJlXFxPbmVEcml2ZVxcRGVza3RvcFxcUHJvamV0b3NcXHBnYmVuXFxwZ2Jlbi1zZXJ2ZXJcXHNyY1xcbW9kdWxlc1xcYmVuZWZpY2lvXFxzZXJ2aWNlc1xcZXN0cnV0dXJhLWVudGlkYWRlLnNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSW5qZWN0YWJsZSxcbiAgTm90Rm91bmRFeGNlcHRpb24sXG4gIEJhZFJlcXVlc3RFeGNlcHRpb24sXG59IGZyb20gJ0BuZXN0anMvY29tbW9uJztcbmltcG9ydCB7IFRpcG9CZW5lZmljaW9TY2hlbWFSZXBvc2l0b3J5IH0gZnJvbSAnLi4vcmVwb3NpdG9yaWVzL3RpcG8tYmVuZWZpY2lvLXNjaGVtYS5yZXBvc2l0b3J5JztcbmltcG9ydCB7IFRpcG9CZW5lZmljaW8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdGllcy90aXBvLWJlbmVmaWNpby5lbnRpdHknO1xuaW1wb3J0IHtcbiAgVGlwb0JlbmVmaWNpb1NjaGVtYSxcbiAgQ2FtcG9Fc3RydXR1cmEsXG4gIE1ldGFkYWRvc0VzdHJ1dHVyYSxcbn0gZnJvbSAnLi4vLi4vLi4vZW50aXRpZXMvdGlwby1iZW5lZmljaW8tc2NoZW1hLmVudGl0eSc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICdAbmVzdGpzL2NvbW1vbic7XG5pbXBvcnQgeyBTdGF0dXMgfSBmcm9tICdAL2VudW1zJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgcGFyYSByZXNwb3N0YSBkYSBlc3RydXR1cmEgZGEgZW50aWRhZGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFc3RydXR1cmFFbnRpZGFkZVJlc3BvbnNlIHtcbiAgZW50aWRhZGVfZGFkb3M6IHN0cmluZztcbiAgY2FtcG9zOiBDYW1wb0VzdHJ1dHVyYVtdO1xuICBtZXRhZGFkb3M6IE1ldGFkYWRvc0VzdHJ1dHVyYTtcbiAgdmVyc2FvOiBzdHJpbmc7XG59XG5cbi8qKlxuICogU2VydmnDp28gcmVzcG9uc8OhdmVsIHBvciBnZXJlbmNpYXIgYSBlc3RydXR1cmEgZGFzIGVudGlkYWRlcyBkZSBkYWRvc1xuICogcGFyYSBjYWRhIHRpcG8gZGUgYmVuZWbDrWNpbywgZWxpbWluYW5kbyBhIG5lY2Vzc2lkYWRlIGRlIGZvcm11bMOhcmlvcyBkaW7Dom1pY29zXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFc3RydXR1cmFFbnRpZGFkZVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlciA9IG5ldyBMb2dnZXIoRXN0cnV0dXJhRW50aWRhZGVTZXJ2aWNlLm5hbWUpO1xuXG4gIC8qKlxuICAgKiBNYXBlYW1lbnRvIGRlIHRpcG9zIGRlIGJlbmVmw61jaW9zIHBhcmEgc3VhcyBlbnRpZGFkZXMgZGUgZGFkb3MgY29ycmVzcG9uZGVudGVzXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IG1hcGVhbWVudG9FbnRpZGFkZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgJ2JlbmVmaWNpby1uYXRhbGlkYWRlJzogJ0RhZG9zTmF0YWxpZGFkZScsXG4gICAgJ2JlbmVmaWNpbyBuYXRhbGlkYWRlJzogJ0RhZG9zTmF0YWxpZGFkZScsXG4gICAgbmF0YWxpZGFkZTogJ0RhZG9zTmF0YWxpZGFkZScsXG4gICAgJ2FsdWd1ZWwtc29jaWFsJzogJ0RhZG9zQWx1Z3VlbFNvY2lhbCcsXG4gICAgJ2FsdWd1ZWwgc29jaWFsJzogJ0RhZG9zQWx1Z3VlbFNvY2lhbCcsXG4gICAgJ2JlbmVmaWNpby1mdW5lcmFsJzogJ0RhZG9zRnVuZXJhbCcsXG4gICAgJ2JlbmVmaWNpbyBmdW5lcmFsJzogJ0RhZG9zRnVuZXJhbCcsXG4gICAgZnVuZXJhbDogJ0RhZG9zRnVuZXJhbCcsXG4gICAgJ2Nlc3RhLWJhc2ljYSc6ICdEYWRvc0Nlc3RhQmFzaWNhJyxcbiAgICAnY2VzdGEgYsOhc2ljYSc6ICdEYWRvc0Nlc3RhQmFzaWNhJyxcbiAgICBjZXN0YTogJ0RhZG9zQ2VzdGFCYXNpY2EnLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdGlwb0JlbmVmaWNpb1NjaGVtYVJlcG9zaXRvcnk6IFRpcG9CZW5lZmljaW9TY2hlbWFSZXBvc2l0b3J5LFxuICApIHt9XG5cbiAgLyoqXG4gICAqIE9idMOpbSBhIGVzdHJ1dHVyYSBkYSBlbnRpZGFkZSBwYXJhIHVtIHRpcG8gZGUgYmVuZWbDrWNpbyBlc3BlY8OtZmljb1xuICAgKlxuICAgKiBAcGFyYW0gdGlwb0JlbmVmaWNpbyBEYWRvcyBkbyB0aXBvIGRlIGJlbmVmw61jaW9cbiAgICogQHJldHVybnMgRXN0cnV0dXJhIGRhIGVudGlkYWRlIGNvcnJlc3BvbmRlbnRlXG4gICAqL1xuICBhc3luYyBvYnRlckVzdHJ1dHVyYUVudGlkYWRlKFxuICAgIHRpcG9CZW5lZmljaW86IFRpcG9CZW5lZmljaW8sXG4gICk6IFByb21pc2U8RXN0cnV0dXJhRW50aWRhZGVSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBQcmltZWlybywgdGVudGEgYnVzY2FyIHNjaGVtYSBjdXN0b21pemFkbyBubyBiYW5jb1xuICAgICAgY29uc3Qgc2NoZW1hQ3VzdG9taXphZG8gPVxuICAgICAgICBhd2FpdCB0aGlzLnRpcG9CZW5lZmljaW9TY2hlbWFSZXBvc2l0b3J5LmZpbmRCeVRpcG9CZW5lZmljaW9JZChcbiAgICAgICAgICB0aXBvQmVuZWZpY2lvLmlkLFxuICAgICAgICApO1xuXG4gICAgICBpZiAoc2NoZW1hQ3VzdG9taXphZG8pIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKFxuICAgICAgICAgIGBTY2hlbWEgY3VzdG9taXphZG8gZW5jb250cmFkbyBwYXJhIGJlbmVmw61jaW8gJHt0aXBvQmVuZWZpY2lvLmlkfWAsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW50aWRhZGVfZGFkb3M6IHNjaGVtYUN1c3RvbWl6YWRvLmVudGlkYWRlX2RhZG9zLFxuICAgICAgICAgIGNhbXBvczogc2NoZW1hQ3VzdG9taXphZG8uc2NoZW1hX2VzdHJ1dHVyYS5jYW1wb3MsXG4gICAgICAgICAgbWV0YWRhZG9zOiBzY2hlbWFDdXN0b21pemFkby5zY2hlbWFfZXN0cnV0dXJhLm1ldGFkYWRvcyxcbiAgICAgICAgICB2ZXJzYW86IHNjaGVtYUN1c3RvbWl6YWRvLnZlcnNhbyxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gU2UgbsOjbyBlbmNvbnRyb3Ugc2NoZW1hIGN1c3RvbWl6YWRvLCBnZXJhIGVzdHJ1dHVyYSBwYWRyw6NvXG4gICAgICB0aGlzLmxvZ2dlci5sb2coXG4gICAgICAgIGBHZXJhbmRvIGVzdHJ1dHVyYSBwYWRyw6NvIHBhcmEgYmVuZWbDrWNpbyAke3RpcG9CZW5lZmljaW8ubm9tZX1gLFxuICAgICAgKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmdlcmFyRXN0cnV0dXJhUGFkcmFvKHRpcG9CZW5lZmljaW8pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLmxvZ2dlci5lcnJvcihcbiAgICAgICAgYEVycm8gYW8gb2J0ZXIgZXN0cnV0dXJhIGRhIGVudGlkYWRlOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgZXJyb3Iuc3RhY2ssXG4gICAgICApO1xuICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFeGNlcHRpb24oJ0Vycm8gYW8gb2J0ZXIgZXN0cnV0dXJhIGRhIGVudGlkYWRlJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdlcmEgZXN0cnV0dXJhIHBhZHLDo28gYmFzZWFkYSBubyB0aXBvIGRlIGJlbmVmw61jaW9cbiAgICpcbiAgICogQHBhcmFtIHRpcG9CZW5lZmljaW8gRGFkb3MgZG8gdGlwbyBkZSBiZW5lZsOtY2lvXG4gICAqIEByZXR1cm5zIEVzdHJ1dHVyYSBwYWRyw6NvIGRhIGVudGlkYWRlXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGdlcmFyRXN0cnV0dXJhUGFkcmFvKFxuICAgIHRpcG9CZW5lZmljaW86IFRpcG9CZW5lZmljaW8sXG4gICk6IFByb21pc2U8RXN0cnV0dXJhRW50aWRhZGVSZXNwb25zZT4ge1xuICAgIGNvbnN0IG5vbWVOb3JtYWxpemFkbyA9IHRoaXMubm9ybWFsaXphck5vbWVCZW5lZmljaW8odGlwb0JlbmVmaWNpby5ub21lKTtcbiAgICBjb25zdCBlbnRpZGFkZURhZG9zID0gdGhpcy5tYXBlYW1lbnRvRW50aWRhZGVzW25vbWVOb3JtYWxpemFkb107XG5cbiAgICBpZiAoIWVudGlkYWRlRGFkb3MpIHtcbiAgICAgIHRocm93IG5ldyBOb3RGb3VuZEV4Y2VwdGlvbihcbiAgICAgICAgYEVudGlkYWRlIGRlIGRhZG9zIG7Do28gZW5jb250cmFkYSBwYXJhIG8gYmVuZWbDrWNpbzogJHt0aXBvQmVuZWZpY2lvLm5vbWV9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgZXN0cnV0dXJhID0gYXdhaXQgdGhpcy5nZXJhckVzdHJ1dHVyYVBvckVudGlkYWRlKFxuICAgICAgZW50aWRhZGVEYWRvcyxcbiAgICAgIHRpcG9CZW5lZmljaW8sXG4gICAgKTtcblxuICAgIHJldHVybiB7XG4gICAgICBlbnRpZGFkZV9kYWRvczogZW50aWRhZGVEYWRvcyxcbiAgICAgIGNhbXBvczogZXN0cnV0dXJhLmNhbXBvcyxcbiAgICAgIG1ldGFkYWRvczogZXN0cnV0dXJhLm1ldGFkYWRvcyxcbiAgICAgIHZlcnNhbzogJzEuMC4wJyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlcmEgZXN0cnV0dXJhIGRlIGNhbXBvcyBiYXNlYWRhIG5hIGVudGlkYWRlIGRlIGRhZG9zXG4gICAqXG4gICAqIEBwYXJhbSBlbnRpZGFkZURhZG9zIE5vbWUgZGEgZW50aWRhZGUgZGUgZGFkb3NcbiAgICogQHBhcmFtIHRpcG9CZW5lZmljaW8gRGFkb3MgZG8gdGlwbyBkZSBiZW5lZsOtY2lvXG4gICAqIEByZXR1cm5zIEVzdHJ1dHVyYSBkZSBjYW1wb3MgZSBtZXRhZGFkb3NcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZ2VyYXJFc3RydXR1cmFQb3JFbnRpZGFkZShcbiAgICBlbnRpZGFkZURhZG9zOiBzdHJpbmcsXG4gICAgdGlwb0JlbmVmaWNpbzogVGlwb0JlbmVmaWNpbyxcbiAgKTogUHJvbWlzZTx7IGNhbXBvczogQ2FtcG9Fc3RydXR1cmFbXTsgbWV0YWRhZG9zOiBNZXRhZGFkb3NFc3RydXR1cmEgfT4ge1xuICAgIHN3aXRjaCAoZW50aWRhZGVEYWRvcykge1xuICAgICAgY2FzZSAnRGFkb3NOYXRhbGlkYWRlJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VyYXJFc3RydXR1cmFOYXRhbGlkYWRlKHRpcG9CZW5lZmljaW8pO1xuICAgICAgY2FzZSAnRGFkb3NBbHVndWVsU29jaWFsJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VyYXJFc3RydXR1cmFBbHVndWVsU29jaWFsKHRpcG9CZW5lZmljaW8pO1xuICAgICAgY2FzZSAnRGFkb3NGdW5lcmFsJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VyYXJFc3RydXR1cmFGdW5lcmFsKHRpcG9CZW5lZmljaW8pO1xuICAgICAgY2FzZSAnRGFkb3NDZXN0YUJhc2ljYSc6XG4gICAgICAgIHJldHVybiB0aGlzLmdlcmFyRXN0cnV0dXJhQ2VzdGFCYXNpY2EodGlwb0JlbmVmaWNpbyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgQmFkUmVxdWVzdEV4Y2VwdGlvbihcbiAgICAgICAgICBgRW50aWRhZGUgZGUgZGFkb3MgbsOjbyBzdXBvcnRhZGE6ICR7ZW50aWRhZGVEYWRvc31gLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXJhIGVzdHJ1dHVyYSBlc3BlY8OtZmljYSBwYXJhIEF1eMOtbGlvIE5hdGFsaWRhZGVcbiAgICovXG4gIHByaXZhdGUgZ2VyYXJFc3RydXR1cmFOYXRhbGlkYWRlKHRpcG9CZW5lZmljaW86IFRpcG9CZW5lZmljaW8pOiB7XG4gICAgY2FtcG9zOiBDYW1wb0VzdHJ1dHVyYVtdO1xuICAgIG1ldGFkYWRvczogTWV0YWRhZG9zRXN0cnV0dXJhO1xuICB9IHtcbiAgICBjb25zdCBjYW1wb3M6IENhbXBvRXN0cnV0dXJhW10gPSBbXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdyZWFsaXphX3ByZV9uYXRhbCcsXG4gICAgICAgIHRpcG86ICdib29sZWFuJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnUmVhbGl6YSBwcsOpLW5hdGFsJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnSW5kaWNhIHNlIGEgZ2VzdGFudGUgcmVhbGl6YSBhY29tcGFuaGFtZW50byBwcsOpLW5hdGFsJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdhdGVuZGlkYV9wc2ZfdWJzJyxcbiAgICAgICAgdGlwbzogJ2Jvb2xlYW4nLFxuICAgICAgICBvYnJpZ2F0b3JpbzogdHJ1ZSxcbiAgICAgICAgbGFiZWw6ICdBdGVuZGlkYSBwZWxvIFBTRi9VQlMnLFxuICAgICAgICBkZXNjcmljYW86XG4gICAgICAgICAgJ0luZGljYSBzZSDDqSBhdGVuZGlkYSBwZWxvIFByb2dyYW1hIFNhw7pkZSBkYSBGYW3DrWxpYSBvdSBVbmlkYWRlIELDoXNpY2EgZGUgU2HDumRlJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdncmF2aWRlel9yaXNjbycsXG4gICAgICAgIHRpcG86ICdib29sZWFuJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnR3JhdmlkZXogZGUgcmlzY28nLFxuICAgICAgICBkZXNjcmljYW86ICdJbmRpY2Egc2UgYSBncmF2aWRleiDDqSBjb25zaWRlcmFkYSBkZSBhbHRvIHJpc2NvJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdkYXRhX3Byb3ZhdmVsX3BhcnRvJyxcbiAgICAgICAgdGlwbzogJ2RhdGUnLFxuICAgICAgICBvYnJpZ2F0b3JpbzogZmFsc2UsXG4gICAgICAgIGxhYmVsOiAnRGF0YSBwcm92w6F2ZWwgZG8gcGFydG8nLFxuICAgICAgICBkZXNjcmljYW86ICdEYXRhIGVzdGltYWRhIHBhcmEgbyBuYXNjaW1lbnRvIGRvIGJlYsOqJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdnZW1lb3NfdHJpZ2VtZW9zJyxcbiAgICAgICAgdGlwbzogJ2Jvb2xlYW4nLFxuICAgICAgICBvYnJpZ2F0b3JpbzogdHJ1ZSxcbiAgICAgICAgbGFiZWw6ICdHw6ptZW9zL1RyaWfDqm1lb3MnLFxuICAgICAgICBkZXNjcmljYW86ICdJbmRpY2Egc2UgYSBnZXN0YcOnw6NvIMOpIG3Dumx0aXBsYSAoZ8OqbWVvcyBvdSB0cmlnw6ptZW9zKScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBub21lOiAnamFfdGVtX2ZpbGhvcycsXG4gICAgICAgIHRpcG86ICdib29sZWFuJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnSsOhIHRlbSBmaWxob3MnLFxuICAgICAgICBkZXNjcmljYW86ICdJbmRpY2Egc2UgYSBnZXN0YW50ZSBqw6EgcG9zc3VpIG91dHJvcyBmaWxob3MnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3F1YW50aWRhZGVfZmlsaG9zJyxcbiAgICAgICAgdGlwbzogJ251bWJlcicsXG4gICAgICAgIG9icmlnYXRvcmlvOiBmYWxzZSxcbiAgICAgICAgbGFiZWw6ICdRdWFudGlkYWRlIGRlIGZpbGhvcycsXG4gICAgICAgIGRlc2NyaWNhbzogJ07Dum1lcm8gZGUgZmlsaG9zIHF1ZSBhIGdlc3RhbnRlIGrDoSBwb3NzdWknLFxuICAgICAgICB2YWxpZGFjb2VzOiB7IG1pbjogMCwgbWF4OiAyMCB9LFxuICAgICAgICBkZXBlbmRlRGU6IHtcbiAgICAgICAgICBjYW1wbzogJ2phX3RlbV9maWxob3MnLFxuICAgICAgICAgIHZhbG9yOiB0cnVlLFxuICAgICAgICAgIGNvbmRpY2FvOiAnaWd1YWwnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3RlbGVmb25lX2NhZGFzdHJhZG9fY3BmJyxcbiAgICAgICAgdGlwbzogJ3N0cmluZycsXG4gICAgICAgIG9icmlnYXRvcmlvOiBmYWxzZSxcbiAgICAgICAgbGFiZWw6ICdUZWxlZm9uZSBjYWRhc3RyYWRvIG5vIENQRicsXG4gICAgICAgIGRlc2NyaWNhbzogJ07Dum1lcm8gZGUgdGVsZWZvbmUgdmluY3VsYWRvIGFvIENQRiBkYSBnZXN0YW50ZScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBub21lOiAnY2hhdmVfcGl4JyxcbiAgICAgICAgdGlwbzogJ3N0cmluZycsXG4gICAgICAgIG9icmlnYXRvcmlvOiBmYWxzZSxcbiAgICAgICAgbGFiZWw6ICdDaGF2ZSBQSVgnLFxuICAgICAgICBkZXNjcmljYW86ICdDaGF2ZSBQSVggcGFyYSByZWNlYmltZW50byBkbyBiZW5lZsOtY2lvJyxcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIGNvbnN0IG1ldGFkYWRvczogTWV0YWRhZG9zRXN0cnV0dXJhID0ge1xuICAgICAgdmVyc2FvOiAnMS4wLjAnLFxuICAgICAgZGVzY3JpY2FvOiAnRXN0cnV0dXJhIGRlIGRhZG9zIHBhcmEgc29saWNpdGHDp8OjbyBkZSBBdXjDrWxpbyBOYXRhbGlkYWRlJyxcbiAgICAgIGNhdGVnb3JpYTogJ2Fzc2lzdGVuY2lhLXNvY2lhbCcsXG4gICAgICB0YWdzOiBbJ25hdGFsaWRhZGUnLCAnZ2VzdGFudGUnLCAnYmVuZWZpY2lvJ10sXG4gICAgICBjb25maWd1cmFjb2VzOiB7XG4gICAgICAgIHBlcm1pdGVQcm9ycm9nYWNhbzogZmFsc2UsXG4gICAgICAgIHRlbXBvTWF4aW1vU29saWNpdGFjYW86ICcxODAgZGlhcyBhcMOzcyBvIG5hc2NpbWVudG8nLFxuICAgICAgICB2YWxvckZpeG86IHRpcG9CZW5lZmljaW8udmFsb3IsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4geyBjYW1wb3MsIG1ldGFkYWRvcyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlcmEgZXN0cnV0dXJhIGVzcGVjw61maWNhIHBhcmEgQWx1Z3VlbCBTb2NpYWxcbiAgICovXG4gIHByaXZhdGUgZ2VyYXJFc3RydXR1cmFBbHVndWVsU29jaWFsKHRpcG9CZW5lZmljaW86IFRpcG9CZW5lZmljaW8pOiB7XG4gICAgY2FtcG9zOiBDYW1wb0VzdHJ1dHVyYVtdO1xuICAgIG1ldGFkYWRvczogTWV0YWRhZG9zRXN0cnV0dXJhO1xuICB9IHtcbiAgICBjb25zdCBjYW1wb3M6IENhbXBvRXN0cnV0dXJhW10gPSBbXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdwdWJsaWNvX3ByaW9yaXRhcmlvJyxcbiAgICAgICAgdGlwbzogJ2VudW0nLFxuICAgICAgICBvYnJpZ2F0b3JpbzogdHJ1ZSxcbiAgICAgICAgbGFiZWw6ICdQw7pibGljbyBwcmlvcml0w6FyaW8nLFxuICAgICAgICBkZXNjcmljYW86ICdDYXRlZ29yaWEgZG8gcMO6YmxpY28gcHJpb3JpdMOhcmlvIHBhcmEgYWx1Z3VlbCBzb2NpYWwnLFxuICAgICAgICBvcGNvZXM6IFtcbiAgICAgICAgICAnSURPU08nLFxuICAgICAgICAgICdQRVNTT0FfREVGSUNJRU5DSUEnLFxuICAgICAgICAgICdGQU1JTElBX1ZVTE5FUkFWRUwnLFxuICAgICAgICAgICdWSVRJTUFfVklPTEVOQ0lBJyxcbiAgICAgICAgICAnU0lUVUFDQU9fUlVBJyxcbiAgICAgICAgICAnT1VUUk9TJyxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdlc3BlY2lmaWNhY29lcycsXG4gICAgICAgIHRpcG86ICdhcnJheScsXG4gICAgICAgIG9icmlnYXRvcmlvOiBmYWxzZSxcbiAgICAgICAgbGFiZWw6ICdFc3BlY2lmaWNhw6fDtWVzJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnRXNwZWNpZmljYcOnw7VlcyBhZGljaW9uYWlzIGRvIGNhc28nLFxuICAgICAgICBvcGNvZXM6IFsnRU1FUkdFTkNJQUwnLCAnVEVNUE9SQVJJTycsICdKVURJQ0lBTCcsICdTT0NJQUwnXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdzaXR1YWNhb19tb3JhZGlhX2F0dWFsJyxcbiAgICAgICAgdGlwbzogJ3N0cmluZycsXG4gICAgICAgIG9icmlnYXRvcmlvOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ1NpdHVhw6fDo28gZGEgbW9yYWRpYSBhdHVhbCcsXG4gICAgICAgIGRlc2NyaWNhbzogJ0Rlc2NyacOnw6NvIGRldGFsaGFkYSBkYSBzaXR1YcOnw6NvIGF0dWFsIGRlIG1vcmFkaWEnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3Bvc3N1aV9pbW92ZWxfaW50ZXJkaXRhZG8nLFxuICAgICAgICB0aXBvOiAnYm9vbGVhbicsXG4gICAgICAgIG9icmlnYXRvcmlvOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ1Bvc3N1aSBpbcOzdmVsIGludGVyZGl0YWRvJyxcbiAgICAgICAgZGVzY3JpY2FvOlxuICAgICAgICAgICdJbmRpY2Egc2UgcG9zc3VpIGltw7N2ZWwgcXVlIGZvaSBpbnRlcmRpdGFkbyBwb3IgYXV0b3JpZGFkZSBjb21wZXRlbnRlJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdjYXNvX2p1ZGljaWFsaXphZG9fbWFyaWFfcGVuaGEnLFxuICAgICAgICB0aXBvOiAnYm9vbGVhbicsXG4gICAgICAgIG9icmlnYXRvcmlvOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ0Nhc28ganVkaWNpYWxpemFkbyBMZWkgTWFyaWEgZGEgUGVuaGEnLFxuICAgICAgICBkZXNjcmljYW86ICdJbmRpY2Egc2UgbyBjYXNvIGVzdMOhIHJlbGFjaW9uYWRvIMOgIExlaSBNYXJpYSBkYSBQZW5oYScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBub21lOiAnb2JzZXJ2YWNvZXNfYWRpY2lvbmFpcycsXG4gICAgICAgIHRpcG86ICdzdHJpbmcnLFxuICAgICAgICBvYnJpZ2F0b3JpbzogZmFsc2UsXG4gICAgICAgIGxhYmVsOiAnT2JzZXJ2YcOnw7VlcyBhZGljaW9uYWlzJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnSW5mb3JtYcOnw7VlcyBjb21wbGVtZW50YXJlcyBzb2JyZSBvIGNhc28nLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgbWV0YWRhZG9zOiBNZXRhZGFkb3NFc3RydXR1cmEgPSB7XG4gICAgICB2ZXJzYW86ICcxLjAuMCcsXG4gICAgICBkZXNjcmljYW86ICdFc3RydXR1cmEgZGUgZGFkb3MgcGFyYSBzb2xpY2l0YcOnw6NvIGRlIEFsdWd1ZWwgU29jaWFsJyxcbiAgICAgIGNhdGVnb3JpYTogJ2Fzc2lzdGVuY2lhLXNvY2lhbCcsXG4gICAgICB0YWdzOiBbJ2FsdWd1ZWwnLCAnbW9yYWRpYScsICdzb2NpYWwnXSxcbiAgICAgIGNvbmZpZ3VyYWNvZXM6IHtcbiAgICAgICAgcGVybWl0ZVByb3Jyb2dhY2FvOiB0cnVlLFxuICAgICAgICBkdXJhY2FvTWF4aW1hTWVzZXM6XG4gICAgICAgICAgdGlwb0JlbmVmaWNpby5lc3BlY2lmaWNhY29lcz8uZHVyYWNhb19tYXhpbWFfbWVzZXMgfHwgMTIsXG4gICAgICAgIHZhbG9yTWF4aW1vOiB0aXBvQmVuZWZpY2lvLnZhbG9yLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHsgY2FtcG9zLCBtZXRhZGFkb3MgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXJhIGVzdHJ1dHVyYSBlc3BlY8OtZmljYSBwYXJhIEF1eMOtbGlvIEZ1bmVyYWxcbiAgICovXG4gIHByaXZhdGUgZ2VyYXJFc3RydXR1cmFGdW5lcmFsKHRpcG9CZW5lZmljaW86IFRpcG9CZW5lZmljaW8pOiB7XG4gICAgY2FtcG9zOiBDYW1wb0VzdHJ1dHVyYVtdO1xuICAgIG1ldGFkYWRvczogTWV0YWRhZG9zRXN0cnV0dXJhO1xuICB9IHtcbiAgICBjb25zdCBjYW1wb3M6IENhbXBvRXN0cnV0dXJhW10gPSBbXG4gICAgICB7XG4gICAgICAgIG5vbWU6ICdub21lX2ZhbGVjaWRvJyxcbiAgICAgICAgdGlwbzogJ3N0cmluZycsXG4gICAgICAgIG9icmlnYXRvcmlvOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ05vbWUgZG8gZmFsZWNpZG8nLFxuICAgICAgICBkZXNjcmljYW86ICdOb21lIGNvbXBsZXRvIGRhIHBlc3NvYSBmYWxlY2lkYScsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBub21lOiAnZGF0YV9vYml0bycsXG4gICAgICAgIHRpcG86ICdkYXRlJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnRGF0YSBkbyDDs2JpdG8nLFxuICAgICAgICBkZXNjcmljYW86ICdEYXRhIGVtIHF1ZSBvY29ycmV1IG8gZmFsZWNpbWVudG8nLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3BhcmVudGVzY29fc29saWNpdGFudGUnLFxuICAgICAgICB0aXBvOiAnZW51bScsXG4gICAgICAgIG9icmlnYXRvcmlvOiB0cnVlLFxuICAgICAgICBsYWJlbDogJ1BhcmVudGVzY28gY29tIG8gc29saWNpdGFudGUnLFxuICAgICAgICBkZXNjcmljYW86ICdHcmF1IGRlIHBhcmVudGVzY28gZW50cmUgbyBmYWxlY2lkbyBlIG8gc29saWNpdGFudGUnLFxuICAgICAgICBvcGNvZXM6IFsnQ09OSlVHRScsICdGSUxITycsICdQQUknLCAnTUFFJywgJ0lSTUFPJywgJ09VVFJPUyddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3RpcG9fdXJuYScsXG4gICAgICAgIHRpcG86ICdlbnVtJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnVGlwbyBkZSB1cm5hJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnVGlwbyBkZSB1cm5hIGZ1bmVyw6FyaWEgc29saWNpdGFkYScsXG4gICAgICAgIG9wY29lczogWydTSU1QTEVTJywgJ0lOVEVSTUVESUFSSUEnLCAnTFVYTyddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3ZhbG9yX3NvbGljaXRhZG8nLFxuICAgICAgICB0aXBvOiAnbnVtYmVyJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnVmFsb3Igc29saWNpdGFkbycsXG4gICAgICAgIGRlc2NyaWNhbzogJ1ZhbG9yIHRvdGFsIHNvbGljaXRhZG8gcGFyYSBvIGF1eMOtbGlvIGZ1bmVyYWwnLFxuICAgICAgICB2YWxpZGFjb2VzOiB7IG1pbjogMCwgbWF4OiB0aXBvQmVuZWZpY2lvLnZhbG9yIH0sXG4gICAgICB9LFxuICAgIF07XG5cbiAgICBjb25zdCBtZXRhZGFkb3M6IE1ldGFkYWRvc0VzdHJ1dHVyYSA9IHtcbiAgICAgIHZlcnNhbzogJzEuMC4wJyxcbiAgICAgIGRlc2NyaWNhbzogJ0VzdHJ1dHVyYSBkZSBkYWRvcyBwYXJhIHNvbGljaXRhw6fDo28gZGUgQXV4w61saW8gRnVuZXJhbCcsXG4gICAgICBjYXRlZ29yaWE6ICdhc3Npc3RlbmNpYS1zb2NpYWwnLFxuICAgICAgdGFnczogWydmdW5lcmFsJywgJ29iaXRvJywgJ2JlbmVmaWNpbyddLFxuICAgICAgY29uZmlndXJhY29lczoge1xuICAgICAgICBwZXJtaXRlUHJvcnJvZ2FjYW86IGZhbHNlLFxuICAgICAgICBwcmF6b01heGltb1NvbGljaXRhY2FvOiAnMzAgZGlhcyBhcMOzcyBvIMOzYml0bycsXG4gICAgICAgIHZhbG9yTWF4aW1vOiB0aXBvQmVuZWZpY2lvLnZhbG9yLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHsgY2FtcG9zLCBtZXRhZGFkb3MgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXJhIGVzdHJ1dHVyYSBlc3BlY8OtZmljYSBwYXJhIENlc3RhIELDoXNpY2FcbiAgICovXG4gIHByaXZhdGUgZ2VyYXJFc3RydXR1cmFDZXN0YUJhc2ljYSh0aXBvQmVuZWZpY2lvOiBUaXBvQmVuZWZpY2lvKToge1xuICAgIGNhbXBvczogQ2FtcG9Fc3RydXR1cmFbXTtcbiAgICBtZXRhZGFkb3M6IE1ldGFkYWRvc0VzdHJ1dHVyYTtcbiAgfSB7XG4gICAgY29uc3QgY2FtcG9zOiBDYW1wb0VzdHJ1dHVyYVtdID0gW1xuICAgICAge1xuICAgICAgICBub21lOiAncXVhbnRpZGFkZV9wZXNzb2FzX2ZhbWlsaWEnLFxuICAgICAgICB0aXBvOiAnbnVtYmVyJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnUXVhbnRpZGFkZSBkZSBwZXNzb2FzIG5hIGZhbcOtbGlhJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnTsO6bWVybyB0b3RhbCBkZSBwZXNzb2FzIHF1ZSBjb21ww7VlbSBvIG7DumNsZW8gZmFtaWxpYXInLFxuICAgICAgICB2YWxpZGFjb2VzOiB7IG1pbjogMSwgbWF4OiAyMCB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3Bvc3N1aV9yZXN0cmljYW9fYWxpbWVudGFyJyxcbiAgICAgICAgdGlwbzogJ2Jvb2xlYW4nLFxuICAgICAgICBvYnJpZ2F0b3JpbzogdHJ1ZSxcbiAgICAgICAgbGFiZWw6ICdQb3NzdWkgcmVzdHJpw6fDo28gYWxpbWVudGFyJyxcbiAgICAgICAgZGVzY3JpY2FvOlxuICAgICAgICAgICdJbmRpY2Egc2UgYWxndW0gbWVtYnJvIGRhIGZhbcOtbGlhIHBvc3N1aSByZXN0cmnDp8OjbyBhbGltZW50YXInLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3RpcG9fcmVzdHJpY2FvJyxcbiAgICAgICAgdGlwbzogJ3N0cmluZycsXG4gICAgICAgIG9icmlnYXRvcmlvOiBmYWxzZSxcbiAgICAgICAgbGFiZWw6ICdUaXBvIGRlIHJlc3RyacOnw6NvJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnRGVzY3Jpw6fDo28gZGFzIHJlc3RyacOnw7VlcyBhbGltZW50YXJlcycsXG4gICAgICAgIGRlcGVuZGVEZToge1xuICAgICAgICAgIGNhbXBvOiAncG9zc3VpX3Jlc3RyaWNhb19hbGltZW50YXInLFxuICAgICAgICAgIHZhbG9yOiB0cnVlLFxuICAgICAgICAgIGNvbmRpY2FvOiAnaWd1YWwnLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ3BlcmlvZGljaWRhZGVfc29saWNpdGFkYScsXG4gICAgICAgIHRpcG86ICdlbnVtJyxcbiAgICAgICAgb2JyaWdhdG9yaW86IHRydWUsXG4gICAgICAgIGxhYmVsOiAnUGVyaW9kaWNpZGFkZSBzb2xpY2l0YWRhJyxcbiAgICAgICAgZGVzY3JpY2FvOiAnRnJlcXXDqm5jaWEgZGVzZWphZGEgcGFyYSByZWNlYmltZW50byBkYSBjZXN0YSBiw6FzaWNhJyxcbiAgICAgICAgb3Bjb2VzOiBbJ01FTlNBTCcsICdCSU1FU1RSQUwnLCAnVFJJTUVTVFJBTCddLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbm9tZTogJ2xvY2FsX2VudHJlZ2FfcHJlZmVyaWRvJyxcbiAgICAgICAgdGlwbzogJ3N0cmluZycsXG4gICAgICAgIG9icmlnYXRvcmlvOiBmYWxzZSxcbiAgICAgICAgbGFiZWw6ICdMb2NhbCBkZSBlbnRyZWdhIHByZWZlcmlkbycsXG4gICAgICAgIGRlc2NyaWNhbzogJ0VuZGVyZcOnbyBvdSBsb2NhbCBwcmVmZXJpZG8gcGFyYSBlbnRyZWdhIGRhIGNlc3RhIGLDoXNpY2EnLFxuICAgICAgfSxcbiAgICBdO1xuXG4gICAgY29uc3QgbWV0YWRhZG9zOiBNZXRhZGFkb3NFc3RydXR1cmEgPSB7XG4gICAgICB2ZXJzYW86ICcxLjAuMCcsXG4gICAgICBkZXNjcmljYW86ICdFc3RydXR1cmEgZGUgZGFkb3MgcGFyYSBzb2xpY2l0YcOnw6NvIGRlIENlc3RhIELDoXNpY2EnLFxuICAgICAgY2F0ZWdvcmlhOiAnYXNzaXN0ZW5jaWEtc29jaWFsJyxcbiAgICAgIHRhZ3M6IFsnY2VzdGEnLCAnYWxpbWVudGFjYW8nLCAnYmFzaWNhJ10sXG4gICAgICBjb25maWd1cmFjb2VzOiB7XG4gICAgICAgIHBlcm1pdGVQcm9ycm9nYWNhbzogdHJ1ZSxcbiAgICAgICAgcXVhbnRpZGFkZU1heGltYUNlc3RhczpcbiAgICAgICAgICB0aXBvQmVuZWZpY2lvLmVzcGVjaWZpY2Fjb2VzPy5xdWFudGlkYWRlX21heGltYV9jZXN0YXMgfHwgNixcbiAgICAgICAgcGVzb1RvdGFsS2c6IHRpcG9CZW5lZmljaW8uZXNwZWNpZmljYWNvZXM/LnBlc29fdG90YWxfa2cgfHwgMTUsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICByZXR1cm4geyBjYW1wb3MsIG1ldGFkYWRvcyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6YSBvIG5vbWUgZG8gYmVuZWbDrWNpbyBwYXJhIGJ1c2NhIG5vIG1hcGVhbWVudG9cbiAgICpcbiAgICogQHBhcmFtIG5vbWUgTm9tZSBkbyBiZW5lZsOtY2lvXG4gICAqIEByZXR1cm5zIE5vbWUgbm9ybWFsaXphZG9cbiAgICovXG4gIHByaXZhdGUgbm9ybWFsaXphck5vbWVCZW5lZmljaW8obm9tZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbm9tZVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC50cmltKClcbiAgICAgIC5yZXBsYWNlKC9bw6HDoMOiw6NdL2csICdhJylcbiAgICAgIC5yZXBsYWNlKC9bw6nDqMOqXS9nLCAnZScpXG4gICAgICAucmVwbGFjZSgvW8Otw6xdL2csICdpJylcbiAgICAgIC5yZXBsYWNlKC9bw7PDssO0w7VdL2csICdvJylcbiAgICAgIC5yZXBsYWNlKC9bw7rDuV0vZywgJ3UnKVxuICAgICAgLnJlcGxhY2UoL8OnL2csICdjJylcbiAgICAgIC5yZXBsYWNlKC9bXmEtejAtOVxccy1dL2csICcnKVxuICAgICAgLnJlcGxhY2UoL1xccysvZywgJy0nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmlhIHVtIHNjaGVtYSBjdXN0b21pemFkbyBwYXJhIHVtIHRpcG8gZGUgYmVuZWbDrWNpb1xuICAgKlxuICAgKiBAcGFyYW0gdGlwb0JlbmVmaWNpb0lkIElEIGRvIHRpcG8gZGUgYmVuZWbDrWNpb1xuICAgKiBAcGFyYW0gZXN0cnV0dXJhIEVzdHJ1dHVyYSBjdXN0b21pemFkYVxuICAgKiBAcmV0dXJucyBTY2hlbWEgY3JpYWRvXG4gICAqL1xuICBhc3luYyBjcmlhclNjaGVtYUN1c3RvbWl6YWRvKFxuICAgIHRpcG9CZW5lZmljaW9JZDogc3RyaW5nLFxuICAgIGVzdHJ1dHVyYTogRXN0cnV0dXJhRW50aWRhZGVSZXNwb25zZSxcbiAgKTogUHJvbWlzZTxUaXBvQmVuZWZpY2lvU2NoZW1hPiB7XG4gICAgY29uc3Qgc2NoZW1hID0gdGhpcy50aXBvQmVuZWZpY2lvU2NoZW1hUmVwb3NpdG9yeS5jcmVhdGUoe1xuICAgICAgdGlwb19iZW5lZmljaW9faWQ6IHRpcG9CZW5lZmljaW9JZCxcbiAgICAgIGVudGlkYWRlX2RhZG9zOiBlc3RydXR1cmEuZW50aWRhZGVfZGFkb3MsXG4gICAgICBzY2hlbWFfZXN0cnV0dXJhOiB7XG4gICAgICAgIGNhbXBvczogZXN0cnV0dXJhLmNhbXBvcyxcbiAgICAgICAgbWV0YWRhZG9zOiBlc3RydXR1cmEubWV0YWRhZG9zLFxuICAgICAgfSxcbiAgICAgIHZlcnNhbzogZXN0cnV0dXJhLnZlcnNhbyxcbiAgICAgIHN0YXR1czogU3RhdHVzLkFUSVZPLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMudGlwb0JlbmVmaWNpb1NjaGVtYVJlcG9zaXRvcnkuc2F2ZShzY2hlbWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RhIHRvZGFzIGFzIGVudGlkYWRlcyBkZSBkYWRvcyBkaXNwb27DrXZlaXNcbiAgICpcbiAgICogQHJldHVybnMgTGlzdGEgZGUgZW50aWRhZGVzIGRpc3BvbsOtdmVpc1xuICAgKi9cbiAgZ2V0RW50aWRhZGVzRGlzcG9uaXZlaXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoT2JqZWN0LnZhbHVlcyh0aGlzLm1hcGVhbWVudG9FbnRpZGFkZXMpKSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==