7fcf775822df6d222a0aabfda7ac7456
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var TemplateService_1;
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateService = void 0;
const common_1 = require("@nestjs/common");
const template_repository_1 = require("../repositories/template.repository");
const template_entity_1 = require("../../../entities/template.entity");
const template_response_dto_1 = require("../dtos/template/template-response.dto");
const template_invalido_exception_1 = require("../exceptions/template-invalido.exception");
const template_engine_1 = require("../util/template-engine");
const template_tipo_enum_1 = require("../../../enums/template-tipo.enum");
/**
 * Serviço para gerenciamento de templates do sistema
 *
 * Responsável por:
 * - Operações CRUD para templates
 * - Renderização de templates
 * - Sanitização de dados
 * - Validação de templates
 */
let TemplateService = TemplateService_1 = class TemplateService {
    templateRepository;
    logger = new common_1.Logger(TemplateService_1.name);
    templateEngine;
    constructor(templateRepository) {
        this.templateRepository = templateRepository;
        this.templateEngine = new template_engine_1.TemplateEngine();
    }
    /**
     * Busca todos os templates, convertendo-os para DTOs de resposta
     * @param tipo Tipo opcional para filtrar
     * @returns Lista de DTOs de resposta de templates
     */
    async buscarTodos(tipo) {
        const templates = await this.templateRepository.findAll(tipo);
        return templates.map(t => this.mapearParaDto(t));
    }
    /**
     * Busca um template por seu código
     * @param codigo Código do template
     * @returns DTO de resposta do template
     * @throws Error se o template não existir
     */
    async buscarPorCodigo(codigo) {
        const template = await this.templateRepository.findByCodigo(codigo);
        if (!template) {
            throw new Error(`Template com código '${codigo}' não encontrado`);
        }
        return this.mapearParaDto(template);
    }
    /**
     * Cria um novo template
     * @param dto DTO com dados para criação
     * @returns DTO de resposta do template criado
     */
    async criar(dto) {
        // Verificar se já existe template com mesmo código
        const existente = await this.templateRepository.existsByCodigo(dto.codigo);
        if (existente) {
            throw new Error(`Template com código '${dto.codigo}' já existe`);
        }
        // Validar se o conteúdo do template é válido
        try {
            this.templateEngine.compile(dto.conteudo);
        }
        catch (error) {
            throw new template_invalido_exception_1.TemplateInvalidoException(dto.codigo, `Template inválido: ${error.message}`);
        }
        const template = new template_entity_1.Template();
        template.codigo = dto.codigo;
        template.nome = dto.nome;
        // A propriedade descricao não existe na entidade Template
        template.tipo = dto.tipo;
        template.conteudo = dto.conteudo;
        template.ativo = true;
        const salvo = await this.templateRepository.save(template);
        return this.mapearParaDto(salvo);
    }
    /**
     * Atualiza um template existente
     * @param codigo Código do template
     * @param dto DTO com dados para atualização
     * @returns DTO de resposta do template atualizado
     * @throws Error se o template não existir
     */
    async atualizar(codigo, dto) {
        const template = await this.templateRepository.findByCodigo(codigo);
        if (!template) {
            throw new Error(`Template com código '${codigo}' não encontrado`);
        }
        // Validar se o conteúdo do template é válido (se fornecido)
        if (dto.conteudo) {
            try {
                this.templateEngine.compile(dto.conteudo);
            }
            catch (error) {
                throw new template_invalido_exception_1.TemplateInvalidoException(codigo, `Template inválido: ${error.message}`);
            }
            template.conteudo = dto.conteudo;
        }
        if (dto.nome !== undefined) {
            template.nome = dto.nome;
        }
        // A propriedade descricao não existe no DTO nem na entidade Template
        if (dto.ativo !== undefined) {
            template.ativo = dto.ativo;
        }
        const salvo = await this.templateRepository.save(template);
        return this.mapearParaDto(salvo);
    }
    /**
     * Remove um template
     * @param codigo Código do template
     * @throws Error se o template não existir
     */
    async remover(codigo) {
        const template = await this.templateRepository.findByCodigo(codigo);
        if (!template) {
            throw new Error(`Template com código '${codigo}' não encontrado`);
        }
        await this.templateRepository.remove(template.id);
        this.logger.log(`Template '${codigo}' removido`);
    }
    /**
     * Testa a renderização de um template com dados de exemplo
     * @param dto DTO com dados para teste
     * @returns String renderizada
     * @throws TemplateInvalidoException se ocorrer erro na renderização
     */
    async testar(dto) {
        let template = null;
        // Se for um código, busca o template existente
        if (dto.codigo) {
            template = await this.templateRepository.findByCodigo(dto.codigo);
            if (!template && !dto.conteudo) {
                throw new Error(`Template com código '${dto.codigo}' não encontrado`);
            }
        }
        // Se não encontrou o template pelo código ou não foi fornecido código, usa o conteúdo direto
        if (!template && dto.conteudo) {
            const tempTemplate = new template_entity_1.Template();
            tempTemplate.conteudo = dto.conteudo;
            tempTemplate.tipo = dto.tipo || template_tipo_enum_1.TemplateTipoEnum.EMAIL;
            tempTemplate.codigo = 'temp-' + Date.now();
            tempTemplate.nome = 'Template Temporário';
            tempTemplate.ativo = true;
            template = tempTemplate;
        }
        if (!template) {
            throw new Error('É necessário fornecer o código ou o conteúdo do template');
        }
        try {
            const conteudoRenderizado = await this.templateEngine.render(template.conteudo, dto.dados || {}, { sanitize: true });
            return { conteudo: conteudoRenderizado };
        }
        catch (error) {
            throw new template_invalido_exception_1.TemplateInvalidoException(dto.codigo || 'unknown', `Erro ao renderizar template: ${error.message}`);
        }
    }
    /**
     * Renderiza um template com dados reais
     * @param codigo Código do template
     * @param dados Dados para renderização
     * @param opcoes Opções adicionais de renderização
     * @returns String renderizada
     * @throws Error se o template não existir
     * @throws TemplateInvalidoException se ocorrer erro na renderização
     */
    async renderizar(codigo, dados, opcoes = { sanitize: true }) {
        const template = await this.templateRepository.findByCodigo(codigo);
        if (!template) {
            throw new Error(`Template com código '${codigo}' não encontrado`);
        }
        if (!template.ativo) {
            throw new Error(`Template com código '${codigo}' está inativo`);
        }
        try {
            return await this.templateEngine.render(template.conteudo, dados, opcoes);
        }
        catch (error) {
            throw new template_invalido_exception_1.TemplateInvalidoException(codigo, `Erro ao renderizar template: ${error.message}`);
        }
    }
    /**
     * Busca templates por tipo
     * @param tipo Tipo dos templates
     * @returns Lista de DTOs de resposta de templates
     */
    async buscarPorTipo(tipo) {
        const templates = await this.templateRepository.findByTipo(tipo);
        return templates.map(t => this.mapearParaDto(t));
    }
    /**
     * Ativa ou desativa um template
     * @param codigo Código do template
     * @param ativo Status de ativação
     * @returns DTO de resposta do template atualizado
     * @throws Error se o template não existir
     */
    async alterarStatus(codigo, ativo) {
        const template = await this.templateRepository.findByCodigo(codigo);
        if (!template) {
            throw new Error(`Template com código '${codigo}' não encontrado`);
        }
        template.ativo = ativo;
        const salvo = await this.templateRepository.save(template);
        this.logger.log(`Template '${codigo}' ${ativo ? 'ativado' : 'desativado'}`);
        return this.mapearParaDto(salvo);
    }
    /**
     * Converte uma entidade Template para um DTO de resposta
     * @param template Entidade a ser convertida
     * @returns DTO de resposta
     */
    mapearParaDto(template) {
        const dto = new template_response_dto_1.TemplateResponseDto();
        dto.codigo = template.codigo;
        dto.nome = template.nome;
        // Não existe a propriedade descricao
        dto.tipo = template.tipo;
        dto.conteudo = template.conteudo;
        dto.ativo = template.ativo;
        dto.created_at = template.created_at;
        dto.updated_at = template.updated_at;
        return dto;
    }
};
exports.TemplateService = TemplateService;
exports.TemplateService = TemplateService = TemplateService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof template_repository_1.TemplateRepository !== "undefined" && template_repository_1.TemplateRepository) === "function" ? _a : Object])
], TemplateService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,