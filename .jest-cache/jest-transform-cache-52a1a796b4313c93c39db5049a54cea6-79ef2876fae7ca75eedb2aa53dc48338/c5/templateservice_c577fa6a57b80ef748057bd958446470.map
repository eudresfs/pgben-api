{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\template.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\configuracao\\services\\template.service.ts"],"sourcesContent":["import { Injectable, Logger } from '@nestjs/common';\nimport { TemplateRepository } from '../repositories/template.repository';\nimport { Template } from '../../../entities/template.entity';\nimport { TemplateCreateDto } from '../dtos/template/template-create.dto';\nimport { TemplateUpdateDto } from '../dtos/template/template-update.dto';\nimport { TemplateResponseDto } from '../dtos/template/template-response.dto';\nimport { TemplateTestDto } from '../dtos/template/template-test.dto';\nimport { TemplateInvalidoException } from '../exceptions/template-invalido.exception';\nimport { TemplateEngine } from '../util/template-engine';\nimport { TemplateTipoEnum } from '../../../enums/template-tipo.enum';\n\n/**\n * Serviço para gerenciamento de templates do sistema\n * \n * Responsável por:\n * - Operações CRUD para templates\n * - Renderização de templates\n * - Sanitização de dados\n * - Validação de templates\n */\n@Injectable()\nexport class TemplateService {\n  private readonly logger = new Logger(TemplateService.name);\n  private readonly templateEngine: TemplateEngine;\n\n  constructor(private readonly templateRepository: TemplateRepository) {\n    this.templateEngine = new TemplateEngine();\n  }\n\n  /**\n   * Busca todos os templates, convertendo-os para DTOs de resposta\n   * @param tipo Tipo opcional para filtrar\n   * @returns Lista de DTOs de resposta de templates\n   */\n  async buscarTodos(tipo?: TemplateTipoEnum): Promise<TemplateResponseDto[]> {\n    const templates = await this.templateRepository.findAll(tipo);\n    return templates.map(t => this.mapearParaDto(t));\n  }\n\n  /**\n   * Busca um template por seu código\n   * @param codigo Código do template\n   * @returns DTO de resposta do template\n   * @throws Error se o template não existir\n   */\n  async buscarPorCodigo(codigo: string): Promise<TemplateResponseDto> {\n    const template = await this.templateRepository.findByCodigo(codigo);\n    if (!template) {\n      throw new Error(`Template com código '${codigo}' não encontrado`);\n    }\n    return this.mapearParaDto(template);\n  }\n\n  /**\n   * Cria um novo template\n   * @param dto DTO com dados para criação\n   * @returns DTO de resposta do template criado\n   */\n  async criar(dto: TemplateCreateDto): Promise<TemplateResponseDto> {\n    // Verificar se já existe template com mesmo código\n    const existente = await this.templateRepository.existsByCodigo(dto.codigo);\n    if (existente) {\n      throw new Error(`Template com código '${dto.codigo}' já existe`);\n    }\n\n    // Validar se o conteúdo do template é válido\n    try {\n      this.templateEngine.compile(dto.conteudo);\n    } catch (error) {\n      throw new TemplateInvalidoException(\n        dto.codigo,\n        `Template inválido: ${error.message}`\n      );\n    }\n\n    const template = new Template();\n    template.codigo = dto.codigo;\n    template.nome = dto.nome;\n    // A propriedade descricao não existe na entidade Template\n    template.tipo = dto.tipo;\n    template.conteudo = dto.conteudo;\n    template.ativo = true;\n\n    const salvo = await this.templateRepository.save(template);\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Atualiza um template existente\n   * @param codigo Código do template\n   * @param dto DTO com dados para atualização\n   * @returns DTO de resposta do template atualizado\n   * @throws Error se o template não existir\n   */\n  async atualizar(codigo: string, dto: TemplateUpdateDto): Promise<TemplateResponseDto> {\n    const template = await this.templateRepository.findByCodigo(codigo);\n    if (!template) {\n      throw new Error(`Template com código '${codigo}' não encontrado`);\n    }\n\n    // Validar se o conteúdo do template é válido (se fornecido)\n    if (dto.conteudo) {\n      try {\n        this.templateEngine.compile(dto.conteudo);\n      } catch (error) {\n        throw new TemplateInvalidoException(\n          codigo,\n          `Template inválido: ${error.message}`\n        );\n      }\n      template.conteudo = dto.conteudo;\n    }\n\n    if (dto.nome !== undefined) {\n      template.nome = dto.nome;\n    }\n\n    // A propriedade descricao não existe no DTO nem na entidade Template\n\n    if (dto.ativo !== undefined) {\n      template.ativo = dto.ativo;\n    }\n\n    const salvo = await this.templateRepository.save(template);\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Remove um template\n   * @param codigo Código do template\n   * @throws Error se o template não existir\n   */\n  async remover(codigo: string): Promise<void> {\n    const template = await this.templateRepository.findByCodigo(codigo);\n    if (!template) {\n      throw new Error(`Template com código '${codigo}' não encontrado`);\n    }\n\n    await this.templateRepository.remove(template.id as unknown as number);\n    this.logger.log(`Template '${codigo}' removido`);\n  }\n\n  /**\n   * Testa a renderização de um template com dados de exemplo\n   * @param dto DTO com dados para teste\n   * @returns String renderizada\n   * @throws TemplateInvalidoException se ocorrer erro na renderização\n   */\n  async testar(dto: TemplateTestDto): Promise<{ conteudo: string }> {\n    let template: Template | null = null;\n\n    // Se for um código, busca o template existente\n    if (dto.codigo) {\n      template = await this.templateRepository.findByCodigo(dto.codigo);\n      if (!template && !dto.conteudo) {\n        throw new Error(`Template com código '${dto.codigo}' não encontrado`);\n      }\n    } \n    \n    // Se não encontrou o template pelo código ou não foi fornecido código, usa o conteúdo direto\n    if (!template && dto.conteudo) {\n      const tempTemplate = new Template();\n      tempTemplate.conteudo = dto.conteudo;\n      tempTemplate.tipo = dto.tipo || TemplateTipoEnum.EMAIL;\n      tempTemplate.codigo = 'temp-' + Date.now();\n      tempTemplate.nome = 'Template Temporário';\n      tempTemplate.ativo = true;\n      template = tempTemplate;\n    } \n    \n    if (!template) {\n      throw new Error('É necessário fornecer o código ou o conteúdo do template');\n    }\n\n    try {\n      const conteudoRenderizado = await this.templateEngine.render(\n        template.conteudo,\n        dto.dados || {},\n        { sanitize: true }\n      );\n      \n      return { conteudo: conteudoRenderizado };\n    } catch (error) {\n      throw new TemplateInvalidoException(\n        dto.codigo || 'unknown',\n        `Erro ao renderizar template: ${error.message}`\n      );\n    }\n  }\n\n  /**\n   * Renderiza um template com dados reais\n   * @param codigo Código do template\n   * @param dados Dados para renderização\n   * @param opcoes Opções adicionais de renderização\n   * @returns String renderizada\n   * @throws Error se o template não existir\n   * @throws TemplateInvalidoException se ocorrer erro na renderização\n   */\n  async renderizar(\n    codigo: string, \n    dados: Record<string, any>, \n    opcoes: { sanitize?: boolean } = { sanitize: true }\n  ): Promise<string> {\n    const template = await this.templateRepository.findByCodigo(codigo);\n    if (!template) {\n      throw new Error(`Template com código '${codigo}' não encontrado`);\n    }\n\n    if (!template.ativo) {\n      throw new Error(`Template com código '${codigo}' está inativo`);\n    }\n\n    try {\n      return await this.templateEngine.render(template.conteudo, dados, opcoes);\n    } catch (error) {\n      throw new TemplateInvalidoException(\n        codigo,\n        `Erro ao renderizar template: ${error.message}`\n      );\n    }\n  }\n\n  /**\n   * Busca templates por tipo\n   * @param tipo Tipo dos templates\n   * @returns Lista de DTOs de resposta de templates\n   */\n  async buscarPorTipo(tipo: TemplateTipoEnum): Promise<TemplateResponseDto[]> {\n    const templates = await this.templateRepository.findByTipo(tipo);\n    return templates.map(t => this.mapearParaDto(t));\n  }\n\n  /**\n   * Ativa ou desativa um template\n   * @param codigo Código do template\n   * @param ativo Status de ativação\n   * @returns DTO de resposta do template atualizado\n   * @throws Error se o template não existir\n   */\n  async alterarStatus(codigo: string, ativo: boolean): Promise<TemplateResponseDto> {\n    const template = await this.templateRepository.findByCodigo(codigo);\n    if (!template) {\n      throw new Error(`Template com código '${codigo}' não encontrado`);\n    }\n\n    template.ativo = ativo;\n    const salvo = await this.templateRepository.save(template);\n    \n    this.logger.log(`Template '${codigo}' ${ativo ? 'ativado' : 'desativado'}`);\n    return this.mapearParaDto(salvo);\n  }\n\n  /**\n   * Converte uma entidade Template para um DTO de resposta\n   * @param template Entidade a ser convertida\n   * @returns DTO de resposta\n   */\n  private mapearParaDto(template: Template): TemplateResponseDto {\n    const dto = new TemplateResponseDto();\n    dto.codigo = template.codigo;\n    dto.nome = template.nome;\n    // Não existe a propriedade descricao\n    dto.tipo = template.tipo;\n    dto.conteudo = template.conteudo;\n    dto.ativo = template.ativo;\n    dto.created_at = template.created_at;\n    dto.updated_at = template.updated_at;\n    return dto;\n  }\n}\n"],"version":3}