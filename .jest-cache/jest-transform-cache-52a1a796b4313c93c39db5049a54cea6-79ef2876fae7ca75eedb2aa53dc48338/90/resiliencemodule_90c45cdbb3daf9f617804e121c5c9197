213faf01d06144e8cbfc0df0d3cea488
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResilienceModule = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const schedule_1 = require("@nestjs/schedule");
const resilient_auditoria_service_1 = require("../services/resilient-auditoria.service");
const hybrid_cache_service_1 = require("../services/hybrid-cache.service");
const health_check_service_1 = require("../services/health-check.service");
const cache_module_1 = require("../cache/cache.module");
/**
 * Módulo de Resiliência
 *
 * Centraliza todos os serviços relacionados à resiliência do sistema:
 * - Cache híbrido com múltiplas camadas
 * - Auditoria resiliente com fallbacks
 * - Health checks e monitoramento
 * - Configurações de resiliência
 *
 * Este módulo é global para estar disponível em toda a aplicação
 */
let ResilienceModule = class ResilienceModule {
};
exports.ResilienceModule = ResilienceModule;
exports.ResilienceModule = ResilienceModule = __decorate([
    (0, common_1.Global)(),
    (0, common_1.Module)({
        imports: [
            config_1.ConfigModule,
            schedule_1.ScheduleModule.forRoot(), // Para jobs de recuperação e cache warming
            cache_module_1.CacheModule,
        ],
        providers: [
            health_check_service_1.HealthCheckService,
            hybrid_cache_service_1.HybridCacheService,
            resilient_auditoria_service_1.ResilientAuditoriaService,
            {
                provide: 'RESILIENCE_CONFIG',
                useFactory: () => ({
                    // Configurações de Cache
                    cache: {
                        l1MaxSize: parseInt(process.env.CACHE_L1_MAX_SIZE || '1000'),
                        defaultTtl: parseInt(process.env.CACHE_DEFAULT_TTL || '300000'), // 5 minutos
                        enableL2: process.env.CACHE_ENABLE_L2 !== 'false',
                        enableWarming: process.env.CACHE_ENABLE_WARMING !== 'false',
                        warmingInterval: parseInt(process.env.CACHE_WARMING_INTERVAL || '60000'), // 1 minuto
                    },
                    // Configurações de Auditoria
                    auditoria: {
                        enableSyncFallback: process.env.AUDITORIA_ENABLE_SYNC_FALLBACK !== 'false',
                        enableFileBackup: process.env.AUDITORIA_ENABLE_FILE_BACKUP !== 'false',
                        backupPath: process.env.AUDITORIA_BACKUP_PATH || './logs/audit-backup',
                        maxRetries: parseInt(process.env.AUDITORIA_MAX_RETRIES || '3'),
                        retryDelay: parseInt(process.env.AUDITORIA_RETRY_DELAY || '1000'),
                        recoveryInterval: process.env.AUDITORIA_RECOVERY_INTERVAL || '0 */5 * * * *', // A cada 5 minutos
                    },
                    // Configurações de Health Check
                    healthCheck: {
                        redisTimeout: parseInt(process.env.HEALTH_REDIS_TIMEOUT || '5000'),
                        dbTimeout: parseInt(process.env.HEALTH_DB_TIMEOUT || '10000'),
                        checkInterval: parseInt(process.env.HEALTH_CHECK_INTERVAL || '30000'), // 30 segundos
                        enableDetailedChecks: process.env.HEALTH_ENABLE_DETAILED_CHECKS !== 'false',
                    },
                    // Configurações de Circuit Breaker
                    circuitBreaker: {
                        failureThreshold: parseInt(process.env.CIRCUIT_BREAKER_FAILURE_THRESHOLD || '5'),
                        recoveryTimeout: parseInt(process.env.CIRCUIT_BREAKER_RECOVERY_TIMEOUT || '60000'), // 1 minuto
                        monitoringPeriod: parseInt(process.env.CIRCUIT_BREAKER_MONITORING_PERIOD || '10000'), // 10 segundos
                    },
                    // Configurações de Monitoramento
                    monitoring: {
                        enableMetrics: process.env.MONITORING_ENABLE_METRICS !== 'false',
                        metricsInterval: parseInt(process.env.MONITORING_METRICS_INTERVAL || '60000'), // 1 minuto
                        enableAlerts: process.env.MONITORING_ENABLE_ALERTS !== 'false',
                        alertThresholds: {
                            cacheHitRate: parseFloat(process.env.ALERT_CACHE_HIT_RATE_THRESHOLD || '0.8'), // 80%
                            auditoriaFailureRate: parseFloat(process.env.ALERT_AUDITORIA_FAILURE_RATE_THRESHOLD || '0.1'), // 10%
                            redisAvailability: parseFloat(process.env.ALERT_REDIS_AVAILABILITY_THRESHOLD || '0.95'), // 95%
                        },
                    },
                }),
            },
        ],
        exports: [
            health_check_service_1.HealthCheckService,
            hybrid_cache_service_1.HybridCacheService,
            resilient_auditoria_service_1.ResilientAuditoriaService,
            'RESILIENCE_CONFIG',
        ],
    })
], ResilienceModule);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,