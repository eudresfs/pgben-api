2e8e7ba0ac297fc719a131011010fdf0
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ResilientAuditoriaService_1;
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResilientAuditoriaService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const schedule_1 = require("@nestjs/schedule");
const fs_1 = require("fs");
const path_1 = require("path");
const health_check_service_1 = require("./health-check.service");
const core_1 = require("@nestjs/core");
/**
 * Serviço de Auditoria Resiliente
 *
 * Implementa múltiplas camadas de fallback para garantir que nenhum log de auditoria seja perdido:
 * 1. Processamento assíncrono via fila (preferencial)
 * 2. Fallback síncrono direto no banco de dados
 * 3. Backup em arquivo para recuperação posterior
 * 4. Job de recuperação automática
 */
let ResilientAuditoriaService = ResilientAuditoriaService_1 = class ResilientAuditoriaService {
    moduleRef;
    healthCheckService;
    configService;
    logger = new common_1.Logger(ResilientAuditoriaService_1.name);
    maxRetries = 3;
    retryDelay = 1000; // 1 segundo
    backupPath;
    enableSyncFallback;
    enableFileBackup;
    // Métricas internas
    metrics = {
        queueSuccesses: 0,
        queueFailures: 0,
        syncFallbacks: 0,
        fileBackups: 0,
        recoveredLogs: 0
    };
    // Serviços obtidos via lazy loading para evitar dependência circular
    auditoriaService;
    auditoriaQueueService;
    constructor(moduleRef, healthCheckService, configService) {
        this.moduleRef = moduleRef;
        this.healthCheckService = healthCheckService;
        this.configService = configService;
        this.backupPath = this.configService.get('AUDITORIA_BACKUP_PATH', './logs/audit-backup');
        this.enableSyncFallback = this.configService.get('AUDITORIA_ENABLE_SYNC_FALLBACK', 'true') === 'true';
        this.enableFileBackup = this.configService.get('AUDITORIA_ENABLE_FILE_BACKUP', 'true') === 'true';
        // Criar diretório de backup se não existir
        this.ensureBackupDirectory();
    }
    /**
     * Inicialização do módulo - obtém serviços de forma lazy para evitar dependência circular
     */
    async onModuleInit() {
        try {
            // Aguarda um pouco para garantir que os módulos estejam inicializados
            await new Promise(resolve => setTimeout(resolve, 100));
            this.auditoriaService = this.moduleRef.get('AuditoriaService', { strict: false });
            this.auditoriaQueueService = this.moduleRef.get('AuditoriaQueueService', { strict: false });
            this.logger.log('Serviços de auditoria inicializados via lazy loading');
        }
        catch (error) {
            this.logger.warn(`Falha ao inicializar serviços de auditoria: ${error.message}`);
            this.logger.warn('ResilientAuditoriaService funcionará apenas com backup em arquivo');
        }
    }
    /**
     * Registra log de auditoria com estratégia de fallback resiliente
     *
     * Estratégia de fallback:
     * 1. Tenta enfileirar (assíncrono) - melhor performance
     * 2. Se falhar, registra diretamente no banco (síncrono) - garantia de persistência
     * 3. Se falhar, armazena em arquivo (backup) - última linha de defesa
     *
     * @param logData Dados do log de auditoria
     * @returns Promise<void>
     */
    async registrarLogResilient(logData) {
        const startTime = Date.now();
        try {
            // Estratégia 1: Processamento assíncrono via fila (preferencial)
            await this.tryQueueProcessing(logData);
            this.metrics.queueSuccesses++;
            this.logger.debug(`Log de auditoria enfileirado com sucesso em ${Date.now() - startTime}ms`);
        }
        catch (queueError) {
            this.metrics.queueFailures++;
            this.logger.warn(`Falha na fila de auditoria: ${queueError.message}`);
            if (this.enableSyncFallback) {
                try {
                    // Estratégia 2: Fallback síncrono direto no banco
                    await this.trySyncProcessing(logData);
                    this.metrics.syncFallbacks++;
                    this.logger.debug(`Log de auditoria registrado via fallback síncrono em ${Date.now() - startTime}ms`);
                }
                catch (syncError) {
                    this.logger.error(`Falha no fallback síncrono: ${syncError.message}`);
                    if (this.enableFileBackup) {
                        // Estratégia 3: Backup em arquivo para recuperação posterior
                        await this.tryFileBackup(logData, { queueError, syncError });
                        this.metrics.fileBackups++;
                        this.logger.warn(`Log de auditoria armazenado em backup para recuperação posterior`);
                    }
                    else {
                        throw new Error(`Falha crítica na auditoria: Queue=${queueError.message}, Sync=${syncError.message}`);
                    }
                }
            }
            else {
                throw queueError;
            }
        }
    }
    /**
     * Tenta processar via fila com timeout
     */
    async tryQueueProcessing(logData) {
        if (!this.auditoriaQueueService) {
            throw new Error('AuditoriaQueueService não disponível');
        }
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout na fila de auditoria')), 2000);
        });
        const queuePromise = this.auditoriaQueueService.enfileirarLogAuditoria(logData);
        await Promise.race([queuePromise, timeoutPromise]);
    }
    /**
     * Tenta processar diretamente no banco com timeout
     */
    async trySyncProcessing(logData) {
        if (!this.auditoriaService) {
            throw new Error('AuditoriaService não disponível');
        }
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => reject(new Error('Timeout no registro síncrono')), 5000);
        });
        const syncPromise = this.auditoriaService.create(logData);
        await Promise.race([syncPromise, timeoutPromise]);
    }
    /**
     * Armazena log de auditoria em arquivo para recuperação posterior
     */
    async tryFileBackup(logData, errors) {
        try {
            const backupEntry = {
                id: this.generateBackupId(),
                timestamp: new Date().toISOString(),
                data: logData,
                status: 'pending_recovery',
                attempts: 0
            };
            const backupFile = (0, path_1.join)(this.backupPath, `audit-backup-${new Date().toISOString().split('T')[0]}.jsonl`);
            const logLine = JSON.stringify({
                ...backupEntry,
                errors: {
                    queue: errors.queueError.message,
                    sync: errors.syncError.message
                }
            }) + '\n';
            await fs_1.promises.appendFile(backupFile, logLine, 'utf8');
            this.logger.debug(`Log de auditoria salvo em backup: ${backupFile}`);
        }
        catch (fileError) {
            this.logger.error(`Falha crítica: não foi possível armazenar log de auditoria em arquivo: ${fileError.message}`);
            throw new Error(`Falha total na auditoria: ${fileError.message}`);
        }
    }
    /**
     * Job de recuperação que roda periodicamente
     * Processa logs de auditoria que falharam anteriormente
     */
    async processBackupAuditLogs() {
        if (!this.enableFileBackup || !this.auditoriaService) {
            return;
        }
        try {
            this.logger.debug('Iniciando processo de recuperação de logs de auditoria');
            const backupLogs = await this.readBackupLogs();
            if (backupLogs.length === 0) {
                return;
            }
            this.logger.log(`Encontrados ${backupLogs.length} logs para recuperação`);
            let processedCount = 0;
            let failedCount = 0;
            for (const log of backupLogs) {
                try {
                    // Tentar processar o log
                    await this.auditoriaService.create(log.data);
                    // Marcar como processado
                    await this.markLogAsProcessed(log.id);
                    processedCount++;
                    this.metrics.recoveredLogs++;
                }
                catch (error) {
                    failedCount++;
                    // Incrementar tentativas
                    log.attempts++;
                    if (log.attempts >= this.maxRetries) {
                        this.logger.error(`Log ${log.id} falhou após ${this.maxRetries} tentativas: ${error.message}`);
                        await this.markLogAsFailed(log.id);
                    }
                    else {
                        this.logger.warn(`Falha ao recuperar log ${log.id} (tentativa ${log.attempts}/${this.maxRetries}): ${error.message}`);
                        await this.updateLogAttempts(log.id, log.attempts);
                    }
                }
            }
            if (processedCount > 0 || failedCount > 0) {
                this.logger.log(`Recuperação concluída: ${processedCount} processados, ${failedCount} falharam`);
            }
        }
        catch (error) {
            this.logger.error(`Erro no processo de recuperação: ${error.message}`);
        }
    }
    /**
     * Lê logs de backup pendentes de recuperação
     */
    async readBackupLogs() {
        try {
            const files = await fs_1.promises.readdir(this.backupPath);
            const backupFiles = files.filter(file => file.startsWith('audit-backup-') && file.endsWith('.jsonl'));
            const allLogs = [];
            for (const file of backupFiles) {
                try {
                    const filePath = (0, path_1.join)(this.backupPath, file);
                    const content = await fs_1.promises.readFile(filePath, 'utf8');
                    const lines = content.trim().split('\n').filter(line => line.trim());
                    for (const line of lines) {
                        try {
                            const log = JSON.parse(line);
                            // Apenas logs pendentes de recuperação
                            if (log.status === 'pending_recovery' && log.attempts < this.maxRetries) {
                                allLogs.push(log);
                            }
                        }
                        catch (parseError) {
                            this.logger.warn(`Erro ao parsear linha de backup: ${parseError.message}`);
                        }
                    }
                }
                catch (fileError) {
                    this.logger.warn(`Erro ao ler arquivo de backup ${file}: ${fileError.message}`);
                }
            }
            return allLogs;
        }
        catch (error) {
            this.logger.error(`Erro ao ler logs de backup: ${error.message}`);
            return [];
        }
    }
    /**
     * Marca log como processado com sucesso
     */
    async markLogAsProcessed(logId) {
        // Implementar marcação do log como processado
        // Por simplicidade, podemos mover para um arquivo de logs processados
        this.logger.debug(`Log ${logId} marcado como processado`);
    }
    /**
     * Marca log como falha definitiva
     */
    async markLogAsFailed(logId) {
        // Implementar marcação do log como falha definitiva
        this.logger.error(`Log ${logId} marcado como falha definitiva`);
    }
    /**
     * Atualiza número de tentativas do log
     */
    async updateLogAttempts(logId, attempts) {
        // Implementar atualização do número de tentativas
        this.logger.debug(`Log ${logId} atualizado para ${attempts} tentativas`);
    }
    /**
     * Gera ID único para entrada de backup
     */
    generateBackupId() {
        return `backup_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    /**
     * Garante que o diretório de backup existe
     */
    async ensureBackupDirectory() {
        try {
            await fs_1.promises.mkdir(this.backupPath, { recursive: true });
        }
        catch (error) {
            this.logger.error(`Erro ao criar diretório de backup: ${error.message}`);
        }
    }
    /**
     * Retorna métricas do serviço de auditoria resiliente
     */
    getMetrics() {
        const total = this.metrics.queueSuccesses + this.metrics.queueFailures;
        return {
            ...this.metrics,
            queueSuccessRate: total > 0 ? (this.metrics.queueSuccesses / total) * 100 : 0,
            fallbackUsageRate: total > 0 ? (this.metrics.syncFallbacks / total) * 100 : 0,
            backupUsageRate: total > 0 ? (this.metrics.fileBackups / total) * 100 : 0
        };
    }
    /**
     * Reseta métricas (útil para testes)
     */
    resetMetrics() {
        this.metrics = {
            queueSuccesses: 0,
            queueFailures: 0,
            syncFallbacks: 0,
            fileBackups: 0,
            recoveredLogs: 0
        };
    }
};
exports.ResilientAuditoriaService = ResilientAuditoriaService;
__decorate([
    (0, schedule_1.Cron)('0 */5 * * * *') // A cada 5 minutos
    ,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", typeof (_d = typeof Promise !== "undefined" && Promise) === "function" ? _d : Object)
], ResilientAuditoriaService.prototype, "processBackupAuditLogs", null);
exports.ResilientAuditoriaService = ResilientAuditoriaService = ResilientAuditoriaService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [typeof (_a = typeof core_1.ModuleRef !== "undefined" && core_1.ModuleRef) === "function" ? _a : Object, typeof (_b = typeof health_check_service_1.HealthCheckService !== "undefined" && health_check_service_1.HealthCheckService) === "function" ? _b : Object, typeof (_c = typeof config_1.ConfigService !== "undefined" && config_1.ConfigService) === "function" ? _c : Object])
], ResilientAuditoriaService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,