ab59954dea7e4a57043a4485522e9804
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var _a, _b, _c, _d, _e, _f;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfoBancaria = void 0;
const typeorm_1 = require("typeorm");
const class_validator_1 = require("class-validator");
const cidadao_entity_1 = require("./cidadao.entity");
const info_bancaria_enum_1 = require("../enums/info-bancaria.enum");
/**
 * Entidade de Informações Bancárias do Cidadão
 *
 * Armazena dados bancários prioritariamente da conta poupança social do Banco do Brasil
 * e informações da chave PIX para facilitar pagamentos de benefícios eventuais.
 */
let InfoBancaria = class InfoBancaria {
    id;
    /**
     * Relacionamento com o cidadão
     */
    cidadao_id;
    cidadao;
    /**
     * Dados bancários
     */
    banco; // Ex: '001' para Banco do Brasil
    nome_banco; // Ex: 'Banco do Brasil S.A.'
    agencia;
    conta;
    tipo_conta;
    /**
     * Dados PIX
     */
    chave_pix;
    tipo_chave_pix;
    /**
     * Campos de controle
     */
    ativo;
    observacoes;
    /**
     * Campos de auditoria
     */
    created_at;
    updated_at;
    removed_at;
    // Getters e Setters
    get cidadaoId() {
        return this.cidadao_id;
    }
    set cidadaoId(value) {
        this.cidadao_id = value;
    }
    get createdAt() {
        return this.created_at;
    }
    get updatedAt() {
        return this.updated_at;
    }
    get removedAt() {
        return this.removed_at;
    }
    // Métodos Utilitários
    /**
     * Verifica se as informações foram criadas recentemente (últimas 24 horas)
     */
    isCriadoRecentemente() {
        const agora = new Date();
        const umDiaAtras = new Date(agora.getTime() - 24 * 60 * 60 * 1000);
        return this.created_at > umDiaAtras;
    }
    /**
     * Calcula a idade do registro em dias
     */
    getIdadeRegistroEmDias() {
        const agora = new Date();
        const diffTime = Math.abs(agora.getTime() - this.created_at.getTime());
        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }
    /**
     * Verifica se as informações foram removidas
     */
    foiRemovido() {
        return !!this.removed_at;
    }
    /**
     * Verifica se as informações estão ativas
     */
    isAtivo() {
        return this.ativo && !this.removed_at;
    }
    /**
     * Verifica se tem dados bancários completos
     */
    temDadosBancariosCompletos() {
        return !!(this.banco && this.agencia && this.conta && this.nome_banco);
    }
    /**
     * Verifica se tem chave PIX
     */
    temChavePix() {
        return !!(this.chave_pix && this.tipo_chave_pix);
    }
    /**
     * Verifica se é conta do Banco do Brasil
     */
    isBancoBrasil() {
        return this.banco === '001';
    }
    /**
     * Verifica se é poupança social
     */
    isPoupancaSocial() {
        return this.tipo_conta === info_bancaria_enum_1.TipoConta.POUPANCA_SOCIAL;
    }
    /**
     * Verifica se é conta corrente
     */
    isContaCorrente() {
        return this.tipo_conta === info_bancaria_enum_1.TipoConta.CORRENTE;
    }
    /**
     * Verifica se é conta poupança
     */
    isContaPoupanca() {
        return this.tipo_conta === info_bancaria_enum_1.TipoConta.POUPANCA;
    }
    /**
     * Verifica se a chave PIX é CPF
     */
    isChavePixCPF() {
        return this.tipo_chave_pix === info_bancaria_enum_1.TipoChavePix.CPF;
    }
    /**
     * Verifica se a chave PIX é email
     */
    isChavePixEmail() {
        return this.tipo_chave_pix === info_bancaria_enum_1.TipoChavePix.EMAIL;
    }
    /**
     * Verifica se a chave PIX é telefone
     */
    isChavePixTelefone() {
        return this.tipo_chave_pix === info_bancaria_enum_1.TipoChavePix.TELEFONE;
    }
    /**
     * Verifica se a chave PIX é aleatória
     */
    isChavePixAleatoria() {
        return this.tipo_chave_pix === info_bancaria_enum_1.TipoChavePix.ALEATORIA;
    }
    /**
     * Obtém a descrição do tipo de conta
     */
    getDescricaoTipoConta() {
        const descricoes = {
            [info_bancaria_enum_1.TipoConta.CORRENTE]: 'Conta Corrente',
            [info_bancaria_enum_1.TipoConta.POUPANCA]: 'Conta Poupança',
            [info_bancaria_enum_1.TipoConta.POUPANCA_SOCIAL]: 'Poupança Social',
        };
        return descricoes[this.tipo_conta] || this.tipo_conta;
    }
    /**
     * Obtém a descrição do tipo de chave PIX
     */
    getDescricaoTipoChavePix() {
        if (!this.tipo_chave_pix)
            return 'Não informado';
        const descricoes = {
            [info_bancaria_enum_1.TipoChavePix.CPF]: 'CPF',
            [info_bancaria_enum_1.TipoChavePix.EMAIL]: 'E-mail',
            [info_bancaria_enum_1.TipoChavePix.TELEFONE]: 'Telefone',
            [info_bancaria_enum_1.TipoChavePix.ALEATORIA]: 'Chave Aleatória',
        };
        return descricoes[this.tipo_chave_pix] || this.tipo_chave_pix;
    }
    /**
     * Formata a conta bancária
     */
    getContaFormatada() {
        if (!this.temDadosBancariosCompletos())
            return 'Não informado';
        return `${this.banco} - Ag: ${this.agencia} - Conta: ${this.conta}`;
    }
    /**
     * Obtém o nome do banco formatado
     */
    getBancoFormatado() {
        if (!this.banco)
            return 'Não informado';
        return this.nome_banco ? `${this.nome_banco} (${this.banco})` : this.banco;
    }
    /**
     * Formata a chave PIX (mascarando dados sensíveis)
     */
    getChavePixFormatada() {
        if (!this.chave_pix)
            return 'Não informado';
        switch (this.tipo_chave_pix) {
            case info_bancaria_enum_1.TipoChavePix.CPF:
                return this.chave_pix.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.***.$3-**');
            case info_bancaria_enum_1.TipoChavePix.EMAIL:
                const [local, domain] = this.chave_pix.split('@');
                return `${local.substring(0, 2)}***@${domain}`;
            case info_bancaria_enum_1.TipoChavePix.TELEFONE:
                return this.chave_pix.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-****');
            case info_bancaria_enum_1.TipoChavePix.ALEATORIA:
                return `${this.chave_pix.substring(0, 8)}...${this.chave_pix.substring(-4)}`;
            default:
                return '***';
        }
    }
    /**
     * Verifica se pertence a um cidadão específico
     */
    pertenceAoCidadao(cidadaoId) {
        return this.cidadao_id === cidadaoId;
    }
    /**
     * Obtém um resumo das informações bancárias
     */
    getSummary() {
        const banco = this.getBancoFormatado();
        const conta = this.getDescricaoTipoConta();
        const pix = this.temChavePix() ? ` - PIX: ${this.getDescricaoTipoChavePix()}` : '';
        return `${banco} - ${conta}${pix}`;
    }
    /**
     * Gera uma chave única para as informações
     */
    getUniqueKey() {
        return `info_bancaria_${this.cidadao_id}`;
    }
    /**
     * Verifica se as informações são consistentes
     */
    isConsistente() {
        // Verifica se tem cidadão
        if (!this.cidadao_id)
            return false;
        // Se tem dados bancários, devem estar completos
        if (this.banco || this.agencia || this.conta) {
            if (!this.temDadosBancariosCompletos())
                return false;
        }
        // Se tem chave PIX, deve ter tipo
        if (this.chave_pix && !this.tipo_chave_pix)
            return false;
        if (this.tipo_chave_pix && !this.chave_pix)
            return false;
        // Validação específica por tipo de chave PIX
        if (this.temChavePix()) {
            switch (this.tipo_chave_pix) {
                case info_bancaria_enum_1.TipoChavePix.CPF:
                    return /^\d{11}$/.test(this.chave_pix.replace(/\D/g, ''));
                case info_bancaria_enum_1.TipoChavePix.EMAIL:
                    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this.chave_pix);
                case info_bancaria_enum_1.TipoChavePix.TELEFONE:
                    return /^\d{10,11}$/.test(this.chave_pix.replace(/\D/g, ''));
                case info_bancaria_enum_1.TipoChavePix.ALEATORIA:
                    return this.chave_pix.length >= 32;
            }
        }
        return true;
    }
    /**
     * Verifica se pode ser removido
     */
    podeSerRemovido() {
        // Não pode remover se já foi removido
        if (this.foiRemovido())
            return false;
        // Outras validações específicas podem ser adicionadas
        return true;
    }
    /**
     * Clona as informações bancárias (sem ID)
     */
    clone() {
        return {
            cidadao_id: this.cidadao_id,
            banco: this.banco,
            nome_banco: this.nome_banco,
            agencia: this.agencia,
            conta: this.conta,
            tipo_conta: this.tipo_conta,
            chave_pix: this.chave_pix,
            tipo_chave_pix: this.tipo_chave_pix,
            ativo: this.ativo,
            observacoes: this.observacoes,
        };
    }
    /**
     * Verifica se é elegível para recebimento de benefícios
     */
    isElegivelBeneficios() {
        // Deve ter pelo menos dados bancários ou PIX
        return this.temDadosBancariosCompletos() || this.temChavePix();
    }
    /**
     * Verifica se é preferencial para pagamentos (Banco do Brasil + Poupança Social)
     */
    isPreferencialPagamentos() {
        return this.isBancoBrasil() && this.isPoupancaSocial();
    }
    /**
     * Obtém o método de pagamento preferido
     */
    getMetodoPagamentoPreferido() {
        if (this.isPreferencialPagamentos())
            return 'CONTA_BANCARIA';
        if (this.temChavePix())
            return 'PIX';
        if (this.temDadosBancariosCompletos())
            return 'CONTA_BANCARIA';
        return 'INDEFINIDO';
    }
    /**
     * Verifica se precisa de validação adicional
     */
    precisaValidacao() {
        // Informações muito antigas precisam de validação
        if (this.getIdadeRegistroEmDias() > 365)
            return true;
        // Informações inconsistentes precisam de validação
        if (!this.isConsistente())
            return true;
        // Contas não preferenciais podem precisar de validação
        if (this.temDadosBancariosCompletos() && !this.isPreferencialPagamentos()) {
            return true;
        }
        return false;
    }
    /**
     * Formata a data de criação
     */
    getCriacaoFormatada() {
        return this.created_at.toLocaleDateString('pt-BR');
    }
    /**
     * Formata a data de atualização
     */
    getAtualizacaoFormatada() {
        return this.updated_at.toLocaleDateString('pt-BR');
    }
    /**
     * Remove informações sensíveis para logs
     */
    toSafeLog() {
        return {
            id: this.id,
            banco: this.banco,
            nome_banco: this.nome_banco,
            tipo_conta: this.tipo_conta,
            tipo_chave_pix: this.tipo_chave_pix,
            ativo: this.ativo,
            created_at: this.created_at,
            updated_at: this.updated_at,
        };
    }
    /**
     * Obtém sugestões de melhoria para as informações bancárias
     */
    getSugestoesMelhoria() {
        const sugestoes = [];
        if (!this.temDadosBancariosCompletos() && !this.temChavePix()) {
            sugestoes.push('Adicionar dados bancários ou chave PIX para recebimento de benefícios');
        }
        if (!this.isPreferencialPagamentos() && this.temDadosBancariosCompletos()) {
            sugestoes.push('Considerar abertura de Poupança Social no Banco do Brasil para facilitar pagamentos');
        }
        if (!this.temChavePix()) {
            sugestoes.push('Cadastrar chave PIX para agilizar recebimento de benefícios');
        }
        if (this.precisaValidacao()) {
            sugestoes.push('Validar e atualizar informações bancárias');
        }
        if (!this.isConsistente()) {
            sugestoes.push('Verificar e corrigir inconsistências nos dados bancários');
        }
        return sugestoes;
    }
    /**
     * Verifica se as informações estão atualizadas
     */
    isAtualizado() {
        const seiseMesesAtras = new Date();
        seiseMesesAtras.setMonth(seiseMesesAtras.getMonth() - 6);
        return this.updated_at > seiseMesesAtras;
    }
    /**
     * Obtém o status das informações bancárias
     */
    getStatus() {
        if (!this.isAtivo())
            return 'INATIVO';
        if (this.temDadosBancariosCompletos() && this.temChavePix()) {
            return 'COMPLETO';
        }
        if (this.temDadosBancariosCompletos() || this.temChavePix()) {
            return 'PARCIAL';
        }
        return 'INCOMPLETO';
    }
    /**
     * Calcula a pontuação de completude (0-100)
     */
    getPontuacaoCompletude() {
        let pontos = 0;
        if (this.banco)
            pontos += 15;
        if (this.nome_banco)
            pontos += 10;
        if (this.agencia)
            pontos += 15;
        if (this.conta)
            pontos += 15;
        if (this.tipo_conta)
            pontos += 10;
        if (this.chave_pix)
            pontos += 20;
        if (this.tipo_chave_pix)
            pontos += 15;
        return pontos;
    }
};
exports.InfoBancaria = InfoBancaria;
__decorate([
    (0, typeorm_1.PrimaryGeneratedColumn)('uuid'),
    __metadata("design:type", String)
], InfoBancaria.prototype, "id", void 0);
__decorate([
    (0, typeorm_1.Column)({ name: 'cidadao_id', type: 'uuid' }),
    __metadata("design:type", String)
], InfoBancaria.prototype, "cidadao_id", void 0);
__decorate([
    (0, typeorm_1.ManyToOne)(() => cidadao_entity_1.Cidadao, { onDelete: 'CASCADE' }),
    (0, typeorm_1.JoinColumn)({ name: 'cidadao_id' }),
    __metadata("design:type", typeof (_a = typeof cidadao_entity_1.Cidadao !== "undefined" && cidadao_entity_1.Cidadao) === "function" ? _a : Object)
], InfoBancaria.prototype, "cidadao", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 3 }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Código do banco deve ser uma string' }),
    (0, class_validator_1.Matches)(/^\d{3}$/, { message: 'Código do banco deve ter 3 dígitos' }),
    __metadata("design:type", String)
], InfoBancaria.prototype, "banco", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 100 }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Nome do banco deve ser uma string' }),
    (0, class_validator_1.MaxLength)(100, { message: 'Nome do banco deve ter no máximo 100 caracteres' }),
    __metadata("design:type", String)
], InfoBancaria.prototype, "nome_banco", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 10 }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Agência deve ser uma string' }),
    (0, class_validator_1.Matches)(/^\d{4,5}(-\d)?$/, { message: 'Agência deve ter formato válido (ex: 1234 ou 1234-5)' }),
    __metadata("design:type", String)
], InfoBancaria.prototype, "agencia", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 20 }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Conta deve ser uma string' }),
    (0, class_validator_1.Matches)(/^\d{1,15}(-\d)?$/, { message: 'Conta deve ter formato válido' }),
    __metadata("design:type", String)
], InfoBancaria.prototype, "conta", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: info_bancaria_enum_1.TipoConta,
        enumName: 'tipo_conta_enum',
        default: info_bancaria_enum_1.TipoConta.POUPANCA_SOCIAL,
    }),
    (0, class_validator_1.IsEnum)(info_bancaria_enum_1.TipoConta, { message: 'Tipo de conta inválido' }),
    (0, class_validator_1.IsOptional)(),
    __metadata("design:type", typeof (_b = typeof info_bancaria_enum_1.TipoConta !== "undefined" && info_bancaria_enum_1.TipoConta) === "function" ? _b : Object)
], InfoBancaria.prototype, "tipo_conta", void 0);
__decorate([
    (0, typeorm_1.Column)({ length: 255, nullable: true }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Chave PIX é obrigatória' }),
    (0, class_validator_1.IsString)({ message: 'Chave PIX deve ser uma string' }),
    (0, class_validator_1.MaxLength)(255, { message: 'Chave PIX deve ter no máximo 255 caracteres' }),
    __metadata("design:type", String)
], InfoBancaria.prototype, "chave_pix", void 0);
__decorate([
    (0, typeorm_1.Column)({
        type: 'enum',
        enum: info_bancaria_enum_1.TipoChavePix,
        enumName: 'tipo_chave_pix_enum',
        nullable: true,
    }),
    (0, class_validator_1.IsNotEmpty)({ message: 'Tipo da chave PIX é obrigatório' }),
    (0, class_validator_1.IsEnum)(info_bancaria_enum_1.TipoChavePix, { message: 'Tipo de chave PIX inválido' }),
    __metadata("design:type", typeof (_c = typeof info_bancaria_enum_1.TipoChavePix !== "undefined" && info_bancaria_enum_1.TipoChavePix) === "function" ? _c : Object)
], InfoBancaria.prototype, "tipo_chave_pix", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'boolean', default: true }),
    __metadata("design:type", Boolean)
], InfoBancaria.prototype, "ativo", void 0);
__decorate([
    (0, typeorm_1.Column)({ type: 'text', nullable: true }),
    (0, class_validator_1.IsOptional)(),
    (0, class_validator_1.IsString)({ message: 'Observações devem ser uma string' }),
    __metadata("design:type", String)
], InfoBancaria.prototype, "observacoes", void 0);
__decorate([
    (0, typeorm_1.CreateDateColumn)(),
    __metadata("design:type", typeof (_d = typeof Date !== "undefined" && Date) === "function" ? _d : Object)
], InfoBancaria.prototype, "created_at", void 0);
__decorate([
    (0, typeorm_1.UpdateDateColumn)(),
    __metadata("design:type", typeof (_e = typeof Date !== "undefined" && Date) === "function" ? _e : Object)
], InfoBancaria.prototype, "updated_at", void 0);
__decorate([
    (0, typeorm_1.DeleteDateColumn)(),
    __metadata("design:type", typeof (_f = typeof Date !== "undefined" && Date) === "function" ? _f : Object)
], InfoBancaria.prototype, "removed_at", void 0);
exports.InfoBancaria = InfoBancaria = __decorate([
    (0, typeorm_1.Entity)('info_bancaria'),
    (0, typeorm_1.Index)(['cidadao_id'], { unique: true }) // Um cidadão pode ter apenas uma conta bancária principal
    ,
    (0, typeorm_1.Index)(['conta', 'agencia', 'banco']),
    (0, typeorm_1.Index)(['chave_pix'])
], InfoBancaria);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxldWRyZVxcT25lRHJpdmVcXERlc2t0b3BcXFByb2pldG9zXFxwZ2JlblxccGdiZW4tc2VydmVyXFxzcmNcXGVudGl0aWVzXFxpbmZvLWJhbmNhcmlhLmVudGl0eS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEscUNBVWlCO0FBQ2pCLHFEQVF5QjtBQUN6QixxREFBMkM7QUFDM0Msb0VBQXNFO0FBRXRFOzs7OztHQUtHO0FBS0ksSUFBTSxZQUFZLEdBQWxCLE1BQU0sWUFBWTtJQUV2QixFQUFFLENBQVM7SUFFWDs7T0FFRztJQUVILFVBQVUsQ0FBUztJQUluQixPQUFPLENBQVU7SUFFakI7O09BRUc7SUFLSCxLQUFLLENBQVMsQ0FBQyxpQ0FBaUM7SUFNaEQsVUFBVSxDQUFTLENBQUMsNkJBQTZCO0lBTWpELE9BQU8sQ0FBUztJQU1oQixLQUFLLENBQVM7SUFVZCxVQUFVLENBQVk7SUFFdEI7O09BRUc7SUFLSCxTQUFTLENBQVM7SUFVbEIsY0FBYyxDQUFlO0lBRTdCOztPQUVHO0lBRUgsS0FBSyxDQUFVO0lBS2YsV0FBVyxDQUFTO0lBRXBCOztPQUVHO0lBRUgsVUFBVSxDQUFPO0lBR2pCLFVBQVUsQ0FBTztJQUdqQixVQUFVLENBQU87SUFFakIsb0JBQW9CO0lBQ3BCLElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxTQUFTLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsc0JBQXNCO0lBRXRCOztPQUVHO0lBQ0gsb0JBQW9CO1FBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDekIsTUFBTSxVQUFVLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ25FLE9BQU8sSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsc0JBQXNCO1FBQ3BCLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNILDBCQUEwQjtRQUN4QixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssOEJBQVMsQ0FBQyxlQUFlLENBQUM7SUFDdkQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyw4QkFBUyxDQUFDLFFBQVEsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlO1FBQ2IsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLDhCQUFTLENBQUMsUUFBUSxDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssaUNBQVksQ0FBQyxHQUFHLENBQUM7SUFDbEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxpQ0FBWSxDQUFDLEtBQUssQ0FBQztJQUNwRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxrQkFBa0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsY0FBYyxLQUFLLGlDQUFZLENBQUMsUUFBUSxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7T0FFRztJQUNILG1CQUFtQjtRQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLEtBQUssaUNBQVksQ0FBQyxTQUFTLENBQUM7SUFDeEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gscUJBQXFCO1FBQ25CLE1BQU0sVUFBVSxHQUFHO1lBQ2pCLENBQUMsOEJBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxnQkFBZ0I7WUFDdEMsQ0FBQyw4QkFBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGdCQUFnQjtZQUN0QyxDQUFDLDhCQUFTLENBQUMsZUFBZSxDQUFDLEVBQUUsaUJBQWlCO1NBQy9DLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCx3QkFBd0I7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjO1lBQUUsT0FBTyxlQUFlLENBQUM7UUFFakQsTUFBTSxVQUFVLEdBQUc7WUFDakIsQ0FBQyxpQ0FBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUs7WUFDekIsQ0FBQyxpQ0FBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVE7WUFDOUIsQ0FBQyxpQ0FBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLFVBQVU7WUFDbkMsQ0FBQyxpQ0FBWSxDQUFDLFNBQVMsQ0FBQyxFQUFFLGlCQUFpQjtTQUM1QyxDQUFDO1FBQ0YsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDaEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtZQUFFLE9BQU8sZUFBZSxDQUFDO1FBQy9ELE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxPQUFPLGFBQWEsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQjtRQUNmLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sZUFBZSxDQUFDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxvQkFBb0I7UUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTO1lBQUUsT0FBTyxlQUFlLENBQUM7UUFFNUMsUUFBUSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDNUIsS0FBSyxpQ0FBWSxDQUFDLEdBQUc7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsOEJBQThCLEVBQUUsY0FBYyxDQUFDLENBQUM7WUFDaEYsS0FBSyxpQ0FBWSxDQUFDLEtBQUs7Z0JBQ3JCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xELE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEVBQUUsQ0FBQztZQUNqRCxLQUFLLGlDQUFZLENBQUMsUUFBUTtnQkFDeEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsRUFBRSxjQUFjLENBQUMsQ0FBQztZQUN6RSxLQUFLLGlDQUFZLENBQUMsU0FBUztnQkFDekIsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDL0U7Z0JBQ0UsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUFDLFNBQWlCO1FBQ2pDLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsVUFBVTtRQUNSLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbkYsT0FBTyxHQUFHLEtBQUssTUFBTSxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsWUFBWTtRQUNWLE9BQU8saUJBQWlCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhO1FBQ1gsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRW5DLGdEQUFnRDtRQUNoRCxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsRUFBRTtnQkFBRSxPQUFPLEtBQUssQ0FBQztRQUN2RCxDQUFDO1FBRUQsa0NBQWtDO1FBQ2xDLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDekQsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUV6RCw2Q0FBNkM7UUFDN0MsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztZQUN2QixRQUFRLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDNUIsS0FBSyxpQ0FBWSxDQUFDLEdBQUc7b0JBQ25CLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDNUQsS0FBSyxpQ0FBWSxDQUFDLEtBQUs7b0JBQ3JCLE9BQU8sNEJBQTRCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDM0QsS0FBSyxpQ0FBWSxDQUFDLFFBQVE7b0JBQ3hCLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDL0QsS0FBSyxpQ0FBWSxDQUFDLFNBQVM7b0JBQ3pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1lBQ3ZDLENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlO1FBQ2Isc0NBQXNDO1FBQ3RDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRXJDLHNEQUFzRDtRQUN0RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUs7UUFDSCxPQUFPO1lBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztZQUNuQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1NBQzlCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxvQkFBb0I7UUFDbEIsNkNBQTZDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7T0FFRztJQUNILHdCQUF3QjtRQUN0QixPQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCwyQkFBMkI7UUFDekIsSUFBSSxJQUFJLENBQUMsd0JBQXdCLEVBQUU7WUFBRSxPQUFPLGdCQUFnQixDQUFDO1FBQzdELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3JDLElBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFO1lBQUUsT0FBTyxnQkFBZ0IsQ0FBQztRQUMvRCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQkFBZ0I7UUFDZCxrREFBa0Q7UUFDbEQsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxHQUFHO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFckQsbURBQW1EO1FBQ25ELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFdkMsdURBQXVEO1FBQ3ZELElBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxDQUFDO1lBQzFFLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsbUJBQW1CO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVM7UUFDUCxPQUFPO1lBQ0wsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ25DLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1NBQzVCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxvQkFBb0I7UUFDbEIsTUFBTSxTQUFTLEdBQWEsRUFBRSxDQUFDO1FBRS9CLElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO1lBQzlELFNBQVMsQ0FBQyxJQUFJLENBQUMsdUVBQXVFLENBQUMsQ0FBQztRQUMxRixDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLElBQUksQ0FBQywwQkFBMEIsRUFBRSxFQUFFLENBQUM7WUFDMUUsU0FBUyxDQUFDLElBQUksQ0FBQyxxRkFBcUYsQ0FBQyxDQUFDO1FBQ3hHLENBQUM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7WUFDeEIsU0FBUyxDQUFDLElBQUksQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1FBQ2hGLENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7WUFDNUIsU0FBUyxDQUFDLElBQUksQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1FBQzlELENBQUM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDMUIsU0FBUyxDQUFDLElBQUksQ0FBQywwREFBMEQsQ0FBQyxDQUFDO1FBQzdFLENBQUM7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxZQUFZO1FBQ1YsTUFBTSxlQUFlLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNuQyxlQUFlLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6RCxPQUFPLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDO0lBQzNDLENBQUM7SUFFRDs7T0FFRztJQUNILFNBQVM7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRXRDLElBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7WUFDNUQsT0FBTyxVQUFVLENBQUM7UUFDcEIsQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLDBCQUEwQixFQUFFLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7WUFDNUQsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7T0FFRztJQUNILHNCQUFzQjtRQUNwQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFZixJQUFJLElBQUksQ0FBQyxLQUFLO1lBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksQ0FBQyxVQUFVO1lBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxJQUFJLElBQUksQ0FBQyxPQUFPO1lBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxLQUFLO1lBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksQ0FBQyxVQUFVO1lBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxJQUFJLElBQUksQ0FBQyxTQUFTO1lBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNqQyxJQUFJLElBQUksQ0FBQyxjQUFjO1lBQUUsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUV0QyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0YsQ0FBQTtBQWhnQlksb0NBQVk7QUFFdkI7SUFEQyxJQUFBLGdDQUFzQixFQUFDLE1BQU0sQ0FBQzs7d0NBQ3BCO0FBTVg7SUFEQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQzs7Z0RBQzFCO0FBSW5CO0lBRkMsSUFBQSxtQkFBUyxFQUFDLEdBQUcsRUFBRSxDQUFDLHdCQUFPLEVBQUUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUM7SUFDakQsSUFBQSxvQkFBVSxFQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDO2tEQUMxQix3QkFBTyxvQkFBUCx3QkFBTzs2Q0FBQztBQVNqQjtJQUpDLElBQUEsZ0JBQU0sRUFBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUNyQixJQUFBLDRCQUFVLEdBQUU7SUFDWixJQUFBLDBCQUFRLEVBQUMsRUFBRSxPQUFPLEVBQUUscUNBQXFDLEVBQUUsQ0FBQztJQUM1RCxJQUFBLHlCQUFPLEVBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLENBQUM7OzJDQUN4RDtBQU1kO0lBSkMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ3ZCLElBQUEsNEJBQVUsR0FBRTtJQUNaLElBQUEsMEJBQVEsRUFBQyxFQUFFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxDQUFDO0lBQzFELElBQUEsMkJBQVMsRUFBQyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsaURBQWlELEVBQUUsQ0FBQzs7Z0RBQzVEO0FBTW5CO0lBSkMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ3RCLElBQUEsNEJBQVUsR0FBRTtJQUNaLElBQUEsMEJBQVEsRUFBQyxFQUFFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxDQUFDO0lBQ3BELElBQUEseUJBQU8sRUFBQyxpQkFBaUIsRUFBRSxFQUFFLE9BQU8sRUFBRSxzREFBc0QsRUFBRSxDQUFDOzs2Q0FDaEY7QUFNaEI7SUFKQyxJQUFBLGdCQUFNLEVBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDdEIsSUFBQSw0QkFBVSxHQUFFO0lBQ1osSUFBQSwwQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLENBQUM7SUFDbEQsSUFBQSx5QkFBTyxFQUFDLGtCQUFrQixFQUFFLEVBQUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLENBQUM7OzJDQUM1RDtBQVVkO0lBUkMsSUFBQSxnQkFBTSxFQUFDO1FBQ04sSUFBSSxFQUFFLE1BQU07UUFDWixJQUFJLEVBQUUsOEJBQVM7UUFDZixRQUFRLEVBQUUsaUJBQWlCO1FBQzNCLE9BQU8sRUFBRSw4QkFBUyxDQUFDLGVBQWU7S0FDbkMsQ0FBQztJQUNELElBQUEsd0JBQU0sRUFBQyw4QkFBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLENBQUM7SUFDeEQsSUFBQSw0QkFBVSxHQUFFO2tEQUNELDhCQUFTLG9CQUFULDhCQUFTO2dEQUFDO0FBU3RCO0lBSkMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDdkMsSUFBQSw0QkFBVSxFQUFDLEVBQUUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLENBQUM7SUFDbEQsSUFBQSwwQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLCtCQUErQixFQUFFLENBQUM7SUFDdEQsSUFBQSwyQkFBUyxFQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSw2Q0FBNkMsRUFBRSxDQUFDOzsrQ0FDekQ7QUFVbEI7SUFSQyxJQUFBLGdCQUFNLEVBQUM7UUFDTixJQUFJLEVBQUUsTUFBTTtRQUNaLElBQUksRUFBRSxpQ0FBWTtRQUNsQixRQUFRLEVBQUUscUJBQXFCO1FBQy9CLFFBQVEsRUFBRSxJQUFJO0tBQ2YsQ0FBQztJQUNELElBQUEsNEJBQVUsRUFBQyxFQUFFLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxDQUFDO0lBQzFELElBQUEsd0JBQU0sRUFBQyxpQ0FBWSxFQUFFLEVBQUUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLENBQUM7a0RBQ2hELGlDQUFZLG9CQUFaLGlDQUFZO29EQUFDO0FBTTdCO0lBREMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUM7OzJDQUM1QjtBQUtmO0lBSEMsSUFBQSxnQkFBTSxFQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDeEMsSUFBQSw0QkFBVSxHQUFFO0lBQ1osSUFBQSwwQkFBUSxFQUFDLEVBQUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLENBQUM7O2lEQUN0QztBQU1wQjtJQURDLElBQUEsMEJBQWdCLEdBQUU7a0RBQ1AsSUFBSSxvQkFBSixJQUFJO2dEQUFDO0FBR2pCO0lBREMsSUFBQSwwQkFBZ0IsR0FBRTtrREFDUCxJQUFJLG9CQUFKLElBQUk7Z0RBQUM7QUFHakI7SUFEQyxJQUFBLDBCQUFnQixHQUFFO2tEQUNQLElBQUksb0JBQUosSUFBSTtnREFBQzt1QkEzRk4sWUFBWTtJQUp4QixJQUFBLGdCQUFNLEVBQUMsZUFBZSxDQUFDO0lBQ3ZCLElBQUEsZUFBSyxFQUFDLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQywwREFBMEQ7O0lBQ2xHLElBQUEsZUFBSyxFQUFDLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwQyxJQUFBLGVBQUssRUFBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0dBQ1IsWUFBWSxDQWdnQnhCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcZXVkcmVcXE9uZURyaXZlXFxEZXNrdG9wXFxQcm9qZXRvc1xccGdiZW5cXHBnYmVuLXNlcnZlclxcc3JjXFxlbnRpdGllc1xcaW5mby1iYW5jYXJpYS5lbnRpdHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRW50aXR5LFxuICBQcmltYXJ5R2VuZXJhdGVkQ29sdW1uLFxuICBDb2x1bW4sXG4gIENyZWF0ZURhdGVDb2x1bW4sXG4gIFVwZGF0ZURhdGVDb2x1bW4sXG4gIERlbGV0ZURhdGVDb2x1bW4sXG4gIE1hbnlUb09uZSxcbiAgSm9pbkNvbHVtbixcbiAgSW5kZXgsXG59IGZyb20gJ3R5cGVvcm0nO1xuaW1wb3J0IHtcbiAgSXNOb3RFbXB0eSxcbiAgSXNPcHRpb25hbCxcbiAgSXNFbnVtLFxuICBJc1N0cmluZyxcbiAgTWF4TGVuZ3RoLFxuICBNaW5MZW5ndGgsXG4gIE1hdGNoZXMsXG59IGZyb20gJ2NsYXNzLXZhbGlkYXRvcic7XG5pbXBvcnQgeyBDaWRhZGFvIH0gZnJvbSAnLi9jaWRhZGFvLmVudGl0eSc7XG5pbXBvcnQgeyBUaXBvQ29udGEsIFRpcG9DaGF2ZVBpeCB9IGZyb20gJy4uL2VudW1zL2luZm8tYmFuY2FyaWEuZW51bSc7XG5cbi8qKlxuICogRW50aWRhZGUgZGUgSW5mb3JtYcOnw7VlcyBCYW5jw6FyaWFzIGRvIENpZGFkw6NvXG4gKlxuICogQXJtYXplbmEgZGFkb3MgYmFuY8OhcmlvcyBwcmlvcml0YXJpYW1lbnRlIGRhIGNvbnRhIHBvdXBhbsOnYSBzb2NpYWwgZG8gQmFuY28gZG8gQnJhc2lsXG4gKiBlIGluZm9ybWHDp8O1ZXMgZGEgY2hhdmUgUElYIHBhcmEgZmFjaWxpdGFyIHBhZ2FtZW50b3MgZGUgYmVuZWbDrWNpb3MgZXZlbnR1YWlzLlxuICovXG5ARW50aXR5KCdpbmZvX2JhbmNhcmlhJylcbkBJbmRleChbJ2NpZGFkYW9faWQnXSwgeyB1bmlxdWU6IHRydWUgfSkgLy8gVW0gY2lkYWTDo28gcG9kZSB0ZXIgYXBlbmFzIHVtYSBjb250YSBiYW5jw6FyaWEgcHJpbmNpcGFsXG5ASW5kZXgoWydjb250YScsICdhZ2VuY2lhJywgJ2JhbmNvJ10pXG5ASW5kZXgoWydjaGF2ZV9waXgnXSlcbmV4cG9ydCBjbGFzcyBJbmZvQmFuY2FyaWEge1xuICBAUHJpbWFyeUdlbmVyYXRlZENvbHVtbigndXVpZCcpXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFJlbGFjaW9uYW1lbnRvIGNvbSBvIGNpZGFkw6NvXG4gICAqL1xuICBAQ29sdW1uKHsgbmFtZTogJ2NpZGFkYW9faWQnLCB0eXBlOiAndXVpZCcgfSlcbiAgY2lkYWRhb19pZDogc3RyaW5nO1xuXG4gIEBNYW55VG9PbmUoKCkgPT4gQ2lkYWRhbywgeyBvbkRlbGV0ZTogJ0NBU0NBREUnIH0pXG4gIEBKb2luQ29sdW1uKHsgbmFtZTogJ2NpZGFkYW9faWQnIH0pXG4gIGNpZGFkYW86IENpZGFkYW87XG5cbiAgLyoqXG4gICAqIERhZG9zIGJhbmPDoXJpb3NcbiAgICovXG4gIEBDb2x1bW4oeyBsZW5ndGg6IDMgfSlcbiAgQElzT3B0aW9uYWwoKVxuICBASXNTdHJpbmcoeyBtZXNzYWdlOiAnQ8OzZGlnbyBkbyBiYW5jbyBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBATWF0Y2hlcygvXlxcZHszfSQvLCB7IG1lc3NhZ2U6ICdDw7NkaWdvIGRvIGJhbmNvIGRldmUgdGVyIDMgZMOtZ2l0b3MnIH0pXG4gIGJhbmNvOiBzdHJpbmc7IC8vIEV4OiAnMDAxJyBwYXJhIEJhbmNvIGRvIEJyYXNpbFxuXG4gIEBDb2x1bW4oeyBsZW5ndGg6IDEwMCB9KVxuICBASXNPcHRpb25hbCgpXG4gIEBJc1N0cmluZyh7IG1lc3NhZ2U6ICdOb21lIGRvIGJhbmNvIGRldmUgc2VyIHVtYSBzdHJpbmcnIH0pXG4gIEBNYXhMZW5ndGgoMTAwLCB7IG1lc3NhZ2U6ICdOb21lIGRvIGJhbmNvIGRldmUgdGVyIG5vIG3DoXhpbW8gMTAwIGNhcmFjdGVyZXMnIH0pXG4gIG5vbWVfYmFuY286IHN0cmluZzsgLy8gRXg6ICdCYW5jbyBkbyBCcmFzaWwgUy5BLidcblxuICBAQ29sdW1uKHsgbGVuZ3RoOiAxMCB9KVxuICBASXNPcHRpb25hbCgpXG4gIEBJc1N0cmluZyh7IG1lc3NhZ2U6ICdBZ8OqbmNpYSBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBATWF0Y2hlcygvXlxcZHs0LDV9KC1cXGQpPyQvLCB7IG1lc3NhZ2U6ICdBZ8OqbmNpYSBkZXZlIHRlciBmb3JtYXRvIHbDoWxpZG8gKGV4OiAxMjM0IG91IDEyMzQtNSknIH0pXG4gIGFnZW5jaWE6IHN0cmluZztcblxuICBAQ29sdW1uKHsgbGVuZ3RoOiAyMCB9KVxuICBASXNPcHRpb25hbCgpXG4gIEBJc1N0cmluZyh7IG1lc3NhZ2U6ICdDb250YSBkZXZlIHNlciB1bWEgc3RyaW5nJyB9KVxuICBATWF0Y2hlcygvXlxcZHsxLDE1fSgtXFxkKT8kLywgeyBtZXNzYWdlOiAnQ29udGEgZGV2ZSB0ZXIgZm9ybWF0byB2w6FsaWRvJyB9KVxuICBjb250YTogc3RyaW5nO1xuXG4gIEBDb2x1bW4oe1xuICAgIHR5cGU6ICdlbnVtJyxcbiAgICBlbnVtOiBUaXBvQ29udGEsXG4gICAgZW51bU5hbWU6ICd0aXBvX2NvbnRhX2VudW0nLFxuICAgIGRlZmF1bHQ6IFRpcG9Db250YS5QT1VQQU5DQV9TT0NJQUwsXG4gIH0pXG4gIEBJc0VudW0oVGlwb0NvbnRhLCB7IG1lc3NhZ2U6ICdUaXBvIGRlIGNvbnRhIGludsOhbGlkbycgfSlcbiAgQElzT3B0aW9uYWwoKVxuICB0aXBvX2NvbnRhOiBUaXBvQ29udGE7XG5cbiAgLyoqXG4gICAqIERhZG9zIFBJWFxuICAgKi9cbiAgQENvbHVtbih7IGxlbmd0aDogMjU1LCBudWxsYWJsZTogdHJ1ZSB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdDaGF2ZSBQSVggw6kgb2JyaWdhdMOzcmlhJyB9KVxuICBASXNTdHJpbmcoeyBtZXNzYWdlOiAnQ2hhdmUgUElYIGRldmUgc2VyIHVtYSBzdHJpbmcnIH0pXG4gIEBNYXhMZW5ndGgoMjU1LCB7IG1lc3NhZ2U6ICdDaGF2ZSBQSVggZGV2ZSB0ZXIgbm8gbcOheGltbyAyNTUgY2FyYWN0ZXJlcycgfSlcbiAgY2hhdmVfcGl4OiBzdHJpbmc7XG5cbiAgQENvbHVtbih7XG4gICAgdHlwZTogJ2VudW0nLFxuICAgIGVudW06IFRpcG9DaGF2ZVBpeCxcbiAgICBlbnVtTmFtZTogJ3RpcG9fY2hhdmVfcGl4X2VudW0nLFxuICAgIG51bGxhYmxlOiB0cnVlLFxuICB9KVxuICBASXNOb3RFbXB0eSh7IG1lc3NhZ2U6ICdUaXBvIGRhIGNoYXZlIFBJWCDDqSBvYnJpZ2F0w7NyaW8nIH0pXG4gIEBJc0VudW0oVGlwb0NoYXZlUGl4LCB7IG1lc3NhZ2U6ICdUaXBvIGRlIGNoYXZlIFBJWCBpbnbDoWxpZG8nIH0pXG4gIHRpcG9fY2hhdmVfcGl4OiBUaXBvQ2hhdmVQaXg7XG5cbiAgLyoqXG4gICAqIENhbXBvcyBkZSBjb250cm9sZVxuICAgKi9cbiAgQENvbHVtbih7IHR5cGU6ICdib29sZWFuJywgZGVmYXVsdDogdHJ1ZSB9KVxuICBhdGl2bzogYm9vbGVhbjtcblxuICBAQ29sdW1uKHsgdHlwZTogJ3RleHQnLCBudWxsYWJsZTogdHJ1ZSB9KVxuICBASXNPcHRpb25hbCgpXG4gIEBJc1N0cmluZyh7IG1lc3NhZ2U6ICdPYnNlcnZhw6fDtWVzIGRldmVtIHNlciB1bWEgc3RyaW5nJyB9KVxuICBvYnNlcnZhY29lczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDYW1wb3MgZGUgYXVkaXRvcmlhXG4gICAqL1xuICBAQ3JlYXRlRGF0ZUNvbHVtbigpXG4gIGNyZWF0ZWRfYXQ6IERhdGU7XG5cbiAgQFVwZGF0ZURhdGVDb2x1bW4oKVxuICB1cGRhdGVkX2F0OiBEYXRlO1xuXG4gIEBEZWxldGVEYXRlQ29sdW1uKClcbiAgcmVtb3ZlZF9hdDogRGF0ZTtcblxuICAvLyBHZXR0ZXJzIGUgU2V0dGVyc1xuICBnZXQgY2lkYWRhb0lkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY2lkYWRhb19pZDtcbiAgfVxuXG4gIHNldCBjaWRhZGFvSWQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuY2lkYWRhb19pZCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGNyZWF0ZWRBdCgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVkX2F0O1xuICB9XG5cbiAgZ2V0IHVwZGF0ZWRBdCgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVkX2F0O1xuICB9XG5cbiAgZ2V0IHJlbW92ZWRBdCgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5yZW1vdmVkX2F0O1xuICB9XG5cbiAgLy8gTcOpdG9kb3MgVXRpbGl0w6FyaW9zXG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIGFzIGluZm9ybWHDp8O1ZXMgZm9yYW0gY3JpYWRhcyByZWNlbnRlbWVudGUgKMO6bHRpbWFzIDI0IGhvcmFzKVxuICAgKi9cbiAgaXNDcmlhZG9SZWNlbnRlbWVudGUoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgYWdvcmEgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHVtRGlhQXRyYXMgPSBuZXcgRGF0ZShhZ29yYS5nZXRUaW1lKCkgLSAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVkX2F0ID4gdW1EaWFBdHJhcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhIGEgaWRhZGUgZG8gcmVnaXN0cm8gZW0gZGlhc1xuICAgKi9cbiAgZ2V0SWRhZGVSZWdpc3Ryb0VtRGlhcygpOiBudW1iZXIge1xuICAgIGNvbnN0IGFnb3JhID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBkaWZmVGltZSA9IE1hdGguYWJzKGFnb3JhLmdldFRpbWUoKSAtIHRoaXMuY3JlYXRlZF9hdC5nZXRUaW1lKCkpO1xuICAgIHJldHVybiBNYXRoLmNlaWwoZGlmZlRpbWUgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIGFzIGluZm9ybWHDp8O1ZXMgZm9yYW0gcmVtb3ZpZGFzXG4gICAqL1xuICBmb2lSZW1vdmlkbygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnJlbW92ZWRfYXQ7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgYXMgaW5mb3JtYcOnw7VlcyBlc3TDo28gYXRpdmFzXG4gICAqL1xuICBpc0F0aXZvKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmF0aXZvICYmICF0aGlzLnJlbW92ZWRfYXQ7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgdGVtIGRhZG9zIGJhbmPDoXJpb3MgY29tcGxldG9zXG4gICAqL1xuICB0ZW1EYWRvc0JhbmNhcmlvc0NvbXBsZXRvcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEodGhpcy5iYW5jbyAmJiB0aGlzLmFnZW5jaWEgJiYgdGhpcy5jb250YSAmJiB0aGlzLm5vbWVfYmFuY28pO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIHRlbSBjaGF2ZSBQSVhcbiAgICovXG4gIHRlbUNoYXZlUGl4KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISh0aGlzLmNoYXZlX3BpeCAmJiB0aGlzLnRpcG9fY2hhdmVfcGl4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSDDqSBjb250YSBkbyBCYW5jbyBkbyBCcmFzaWxcbiAgICovXG4gIGlzQmFuY29CcmFzaWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYmFuY28gPT09ICcwMDEnO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIMOpIHBvdXBhbsOnYSBzb2NpYWxcbiAgICovXG4gIGlzUG91cGFuY2FTb2NpYWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGlwb19jb250YSA9PT0gVGlwb0NvbnRhLlBPVVBBTkNBX1NPQ0lBTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSDDqSBjb250YSBjb3JyZW50ZVxuICAgKi9cbiAgaXNDb250YUNvcnJlbnRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRpcG9fY29udGEgPT09IFRpcG9Db250YS5DT1JSRU5URTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSDDqSBjb250YSBwb3VwYW7Dp2FcbiAgICovXG4gIGlzQ29udGFQb3VwYW5jYSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50aXBvX2NvbnRhID09PSBUaXBvQ29udGEuUE9VUEFOQ0E7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgYSBjaGF2ZSBQSVggw6kgQ1BGXG4gICAqL1xuICBpc0NoYXZlUGl4Q1BGKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRpcG9fY2hhdmVfcGl4ID09PSBUaXBvQ2hhdmVQaXguQ1BGO1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIGEgY2hhdmUgUElYIMOpIGVtYWlsXG4gICAqL1xuICBpc0NoYXZlUGl4RW1haWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudGlwb19jaGF2ZV9waXggPT09IFRpcG9DaGF2ZVBpeC5FTUFJTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSBhIGNoYXZlIFBJWCDDqSB0ZWxlZm9uZVxuICAgKi9cbiAgaXNDaGF2ZVBpeFRlbGVmb25lKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRpcG9fY2hhdmVfcGl4ID09PSBUaXBvQ2hhdmVQaXguVEVMRUZPTkU7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgYSBjaGF2ZSBQSVggw6kgYWxlYXTDs3JpYVxuICAgKi9cbiAgaXNDaGF2ZVBpeEFsZWF0b3JpYSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50aXBvX2NoYXZlX3BpeCA9PT0gVGlwb0NoYXZlUGl4LkFMRUFUT1JJQTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnTDqW0gYSBkZXNjcmnDp8OjbyBkbyB0aXBvIGRlIGNvbnRhXG4gICAqL1xuICBnZXREZXNjcmljYW9UaXBvQ29udGEoKTogc3RyaW5nIHtcbiAgICBjb25zdCBkZXNjcmljb2VzID0ge1xuICAgICAgW1RpcG9Db250YS5DT1JSRU5URV06ICdDb250YSBDb3JyZW50ZScsXG4gICAgICBbVGlwb0NvbnRhLlBPVVBBTkNBXTogJ0NvbnRhIFBvdXBhbsOnYScsXG4gICAgICBbVGlwb0NvbnRhLlBPVVBBTkNBX1NPQ0lBTF06ICdQb3VwYW7Dp2EgU29jaWFsJyxcbiAgICB9O1xuICAgIHJldHVybiBkZXNjcmljb2VzW3RoaXMudGlwb19jb250YV0gfHwgdGhpcy50aXBvX2NvbnRhO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idMOpbSBhIGRlc2NyacOnw6NvIGRvIHRpcG8gZGUgY2hhdmUgUElYXG4gICAqL1xuICBnZXREZXNjcmljYW9UaXBvQ2hhdmVQaXgoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMudGlwb19jaGF2ZV9waXgpIHJldHVybiAnTsOjbyBpbmZvcm1hZG8nO1xuICAgIFxuICAgIGNvbnN0IGRlc2NyaWNvZXMgPSB7XG4gICAgICBbVGlwb0NoYXZlUGl4LkNQRl06ICdDUEYnLFxuICAgICAgW1RpcG9DaGF2ZVBpeC5FTUFJTF06ICdFLW1haWwnLFxuICAgICAgW1RpcG9DaGF2ZVBpeC5URUxFRk9ORV06ICdUZWxlZm9uZScsXG4gICAgICBbVGlwb0NoYXZlUGl4LkFMRUFUT1JJQV06ICdDaGF2ZSBBbGVhdMOzcmlhJyxcbiAgICB9O1xuICAgIHJldHVybiBkZXNjcmljb2VzW3RoaXMudGlwb19jaGF2ZV9waXhdIHx8IHRoaXMudGlwb19jaGF2ZV9waXg7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0YSBhIGNvbnRhIGJhbmPDoXJpYVxuICAgKi9cbiAgZ2V0Q29udGFGb3JtYXRhZGEoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMudGVtRGFkb3NCYW5jYXJpb3NDb21wbGV0b3MoKSkgcmV0dXJuICdOw6NvIGluZm9ybWFkbyc7XG4gICAgcmV0dXJuIGAke3RoaXMuYmFuY299IC0gQWc6ICR7dGhpcy5hZ2VuY2lhfSAtIENvbnRhOiAke3RoaXMuY29udGF9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnTDqW0gbyBub21lIGRvIGJhbmNvIGZvcm1hdGFkb1xuICAgKi9cbiAgZ2V0QmFuY29Gb3JtYXRhZG8oKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuYmFuY28pIHJldHVybiAnTsOjbyBpbmZvcm1hZG8nO1xuICAgIHJldHVybiB0aGlzLm5vbWVfYmFuY28gPyBgJHt0aGlzLm5vbWVfYmFuY299ICgke3RoaXMuYmFuY299KWAgOiB0aGlzLmJhbmNvO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdGEgYSBjaGF2ZSBQSVggKG1hc2NhcmFuZG8gZGFkb3Mgc2Vuc8OtdmVpcylcbiAgICovXG4gIGdldENoYXZlUGl4Rm9ybWF0YWRhKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLmNoYXZlX3BpeCkgcmV0dXJuICdOw6NvIGluZm9ybWFkbyc7XG4gICAgXG4gICAgc3dpdGNoICh0aGlzLnRpcG9fY2hhdmVfcGl4KSB7XG4gICAgICBjYXNlIFRpcG9DaGF2ZVBpeC5DUEY6XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXZlX3BpeC5yZXBsYWNlKC8oXFxkezN9KShcXGR7M30pKFxcZHszfSkoXFxkezJ9KS8sICckMS4qKiouJDMtKionKTtcbiAgICAgIGNhc2UgVGlwb0NoYXZlUGl4LkVNQUlMOlxuICAgICAgICBjb25zdCBbbG9jYWwsIGRvbWFpbl0gPSB0aGlzLmNoYXZlX3BpeC5zcGxpdCgnQCcpO1xuICAgICAgICByZXR1cm4gYCR7bG9jYWwuc3Vic3RyaW5nKDAsIDIpfSoqKkAke2RvbWFpbn1gO1xuICAgICAgY2FzZSBUaXBvQ2hhdmVQaXguVEVMRUZPTkU6XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXZlX3BpeC5yZXBsYWNlKC8oXFxkezJ9KShcXGR7NX0pKFxcZHs0fSkvLCAnKCQxKSAkMi0qKioqJyk7XG4gICAgICBjYXNlIFRpcG9DaGF2ZVBpeC5BTEVBVE9SSUE6XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmNoYXZlX3BpeC5zdWJzdHJpbmcoMCwgOCl9Li4uJHt0aGlzLmNoYXZlX3BpeC5zdWJzdHJpbmcoLTQpfWA7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJyoqKic7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIHBlcnRlbmNlIGEgdW0gY2lkYWTDo28gZXNwZWPDrWZpY29cbiAgICovXG4gIHBlcnRlbmNlQW9DaWRhZGFvKGNpZGFkYW9JZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2lkYWRhb19pZCA9PT0gY2lkYWRhb0lkO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idMOpbSB1bSByZXN1bW8gZGFzIGluZm9ybWHDp8O1ZXMgYmFuY8Ohcmlhc1xuICAgKi9cbiAgZ2V0U3VtbWFyeSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJhbmNvID0gdGhpcy5nZXRCYW5jb0Zvcm1hdGFkbygpO1xuICAgIGNvbnN0IGNvbnRhID0gdGhpcy5nZXREZXNjcmljYW9UaXBvQ29udGEoKTtcbiAgICBjb25zdCBwaXggPSB0aGlzLnRlbUNoYXZlUGl4KCkgPyBgIC0gUElYOiAke3RoaXMuZ2V0RGVzY3JpY2FvVGlwb0NoYXZlUGl4KCl9YCA6ICcnO1xuICAgIHJldHVybiBgJHtiYW5jb30gLSAke2NvbnRhfSR7cGl4fWA7XG4gIH1cblxuICAvKipcbiAgICogR2VyYSB1bWEgY2hhdmUgw7puaWNhIHBhcmEgYXMgaW5mb3JtYcOnw7Vlc1xuICAgKi9cbiAgZ2V0VW5pcXVlS2V5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBpbmZvX2JhbmNhcmlhXyR7dGhpcy5jaWRhZGFvX2lkfWA7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgYXMgaW5mb3JtYcOnw7VlcyBzw6NvIGNvbnNpc3RlbnRlc1xuICAgKi9cbiAgaXNDb25zaXN0ZW50ZSgpOiBib29sZWFuIHtcbiAgICAvLyBWZXJpZmljYSBzZSB0ZW0gY2lkYWTDo29cbiAgICBpZiAoIXRoaXMuY2lkYWRhb19pZCkgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgIC8vIFNlIHRlbSBkYWRvcyBiYW5jw6FyaW9zLCBkZXZlbSBlc3RhciBjb21wbGV0b3NcbiAgICBpZiAodGhpcy5iYW5jbyB8fCB0aGlzLmFnZW5jaWEgfHwgdGhpcy5jb250YSkge1xuICAgICAgaWYgKCF0aGlzLnRlbURhZG9zQmFuY2FyaW9zQ29tcGxldG9zKCkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgXG4gICAgLy8gU2UgdGVtIGNoYXZlIFBJWCwgZGV2ZSB0ZXIgdGlwb1xuICAgIGlmICh0aGlzLmNoYXZlX3BpeCAmJiAhdGhpcy50aXBvX2NoYXZlX3BpeCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0aGlzLnRpcG9fY2hhdmVfcGl4ICYmICF0aGlzLmNoYXZlX3BpeCkgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgIC8vIFZhbGlkYcOnw6NvIGVzcGVjw61maWNhIHBvciB0aXBvIGRlIGNoYXZlIFBJWFxuICAgIGlmICh0aGlzLnRlbUNoYXZlUGl4KCkpIHtcbiAgICAgIHN3aXRjaCAodGhpcy50aXBvX2NoYXZlX3BpeCkge1xuICAgICAgICBjYXNlIFRpcG9DaGF2ZVBpeC5DUEY6XG4gICAgICAgICAgcmV0dXJuIC9eXFxkezExfSQvLnRlc3QodGhpcy5jaGF2ZV9waXgucmVwbGFjZSgvXFxEL2csICcnKSk7XG4gICAgICAgIGNhc2UgVGlwb0NoYXZlUGl4LkVNQUlMOlxuICAgICAgICAgIHJldHVybiAvXlteXFxzQF0rQFteXFxzQF0rXFwuW15cXHNAXSskLy50ZXN0KHRoaXMuY2hhdmVfcGl4KTtcbiAgICAgICAgY2FzZSBUaXBvQ2hhdmVQaXguVEVMRUZPTkU6XG4gICAgICAgICAgcmV0dXJuIC9eXFxkezEwLDExfSQvLnRlc3QodGhpcy5jaGF2ZV9waXgucmVwbGFjZSgvXFxEL2csICcnKSk7XG4gICAgICAgIGNhc2UgVGlwb0NoYXZlUGl4LkFMRUFUT1JJQTpcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaGF2ZV9waXgubGVuZ3RoID49IDMyO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSBwb2RlIHNlciByZW1vdmlkb1xuICAgKi9cbiAgcG9kZVNlclJlbW92aWRvKCk6IGJvb2xlYW4ge1xuICAgIC8vIE7Do28gcG9kZSByZW1vdmVyIHNlIGrDoSBmb2kgcmVtb3ZpZG9cbiAgICBpZiAodGhpcy5mb2lSZW1vdmlkbygpKSByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgLy8gT3V0cmFzIHZhbGlkYcOnw7VlcyBlc3BlY8OtZmljYXMgcG9kZW0gc2VyIGFkaWNpb25hZGFzXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmEgYXMgaW5mb3JtYcOnw7VlcyBiYW5jw6FyaWFzIChzZW0gSUQpXG4gICAqL1xuICBjbG9uZSgpOiBQYXJ0aWFsPEluZm9CYW5jYXJpYT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjaWRhZGFvX2lkOiB0aGlzLmNpZGFkYW9faWQsXG4gICAgICBiYW5jbzogdGhpcy5iYW5jbyxcbiAgICAgIG5vbWVfYmFuY286IHRoaXMubm9tZV9iYW5jbyxcbiAgICAgIGFnZW5jaWE6IHRoaXMuYWdlbmNpYSxcbiAgICAgIGNvbnRhOiB0aGlzLmNvbnRhLFxuICAgICAgdGlwb19jb250YTogdGhpcy50aXBvX2NvbnRhLFxuICAgICAgY2hhdmVfcGl4OiB0aGlzLmNoYXZlX3BpeCxcbiAgICAgIHRpcG9fY2hhdmVfcGl4OiB0aGlzLnRpcG9fY2hhdmVfcGl4LFxuICAgICAgYXRpdm86IHRoaXMuYXRpdm8sXG4gICAgICBvYnNlcnZhY29lczogdGhpcy5vYnNlcnZhY29lcyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFZlcmlmaWNhIHNlIMOpIGVsZWfDrXZlbCBwYXJhIHJlY2ViaW1lbnRvIGRlIGJlbmVmw61jaW9zXG4gICAqL1xuICBpc0VsZWdpdmVsQmVuZWZpY2lvcygpOiBib29sZWFuIHtcbiAgICAvLyBEZXZlIHRlciBwZWxvIG1lbm9zIGRhZG9zIGJhbmPDoXJpb3Mgb3UgUElYXG4gICAgcmV0dXJuIHRoaXMudGVtRGFkb3NCYW5jYXJpb3NDb21wbGV0b3MoKSB8fCB0aGlzLnRlbUNoYXZlUGl4KCk7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2Ugw6kgcHJlZmVyZW5jaWFsIHBhcmEgcGFnYW1lbnRvcyAoQmFuY28gZG8gQnJhc2lsICsgUG91cGFuw6dhIFNvY2lhbClcbiAgICovXG4gIGlzUHJlZmVyZW5jaWFsUGFnYW1lbnRvcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0JhbmNvQnJhc2lsKCkgJiYgdGhpcy5pc1BvdXBhbmNhU29jaWFsKCk7XG4gIH1cblxuICAvKipcbiAgICogT2J0w6ltIG8gbcOpdG9kbyBkZSBwYWdhbWVudG8gcHJlZmVyaWRvXG4gICAqL1xuICBnZXRNZXRvZG9QYWdhbWVudG9QcmVmZXJpZG8oKTogJ0NPTlRBX0JBTkNBUklBJyB8ICdQSVgnIHwgJ0lOREVGSU5JRE8nIHtcbiAgICBpZiAodGhpcy5pc1ByZWZlcmVuY2lhbFBhZ2FtZW50b3MoKSkgcmV0dXJuICdDT05UQV9CQU5DQVJJQSc7XG4gICAgaWYgKHRoaXMudGVtQ2hhdmVQaXgoKSkgcmV0dXJuICdQSVgnO1xuICAgIGlmICh0aGlzLnRlbURhZG9zQmFuY2FyaW9zQ29tcGxldG9zKCkpIHJldHVybiAnQ09OVEFfQkFOQ0FSSUEnO1xuICAgIHJldHVybiAnSU5ERUZJTklETyc7XG4gIH1cblxuICAvKipcbiAgICogVmVyaWZpY2Egc2UgcHJlY2lzYSBkZSB2YWxpZGHDp8OjbyBhZGljaW9uYWxcbiAgICovXG4gIHByZWNpc2FWYWxpZGFjYW8oKTogYm9vbGVhbiB7XG4gICAgLy8gSW5mb3JtYcOnw7VlcyBtdWl0byBhbnRpZ2FzIHByZWNpc2FtIGRlIHZhbGlkYcOnw6NvXG4gICAgaWYgKHRoaXMuZ2V0SWRhZGVSZWdpc3Ryb0VtRGlhcygpID4gMzY1KSByZXR1cm4gdHJ1ZTtcbiAgICBcbiAgICAvLyBJbmZvcm1hw6fDtWVzIGluY29uc2lzdGVudGVzIHByZWNpc2FtIGRlIHZhbGlkYcOnw6NvXG4gICAgaWYgKCF0aGlzLmlzQ29uc2lzdGVudGUoKSkgcmV0dXJuIHRydWU7XG4gICAgXG4gICAgLy8gQ29udGFzIG7Do28gcHJlZmVyZW5jaWFpcyBwb2RlbSBwcmVjaXNhciBkZSB2YWxpZGHDp8Ojb1xuICAgIGlmICh0aGlzLnRlbURhZG9zQmFuY2FyaW9zQ29tcGxldG9zKCkgJiYgIXRoaXMuaXNQcmVmZXJlbmNpYWxQYWdhbWVudG9zKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0YSBhIGRhdGEgZGUgY3JpYcOnw6NvXG4gICAqL1xuICBnZXRDcmlhY2FvRm9ybWF0YWRhKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlZF9hdC50b0xvY2FsZURhdGVTdHJpbmcoJ3B0LUJSJyk7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0YSBhIGRhdGEgZGUgYXR1YWxpemHDp8Ojb1xuICAgKi9cbiAgZ2V0QXR1YWxpemFjYW9Gb3JtYXRhZGEoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVkX2F0LnRvTG9jYWxlRGF0ZVN0cmluZygncHQtQlInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgaW5mb3JtYcOnw7VlcyBzZW5zw612ZWlzIHBhcmEgbG9nc1xuICAgKi9cbiAgdG9TYWZlTG9nKCk6IFBhcnRpYWw8SW5mb0JhbmNhcmlhPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgYmFuY286IHRoaXMuYmFuY28sXG4gICAgICBub21lX2JhbmNvOiB0aGlzLm5vbWVfYmFuY28sXG4gICAgICB0aXBvX2NvbnRhOiB0aGlzLnRpcG9fY29udGEsXG4gICAgICB0aXBvX2NoYXZlX3BpeDogdGhpcy50aXBvX2NoYXZlX3BpeCxcbiAgICAgIGF0aXZvOiB0aGlzLmF0aXZvLFxuICAgICAgY3JlYXRlZF9hdDogdGhpcy5jcmVhdGVkX2F0LFxuICAgICAgdXBkYXRlZF9hdDogdGhpcy51cGRhdGVkX2F0LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogT2J0w6ltIHN1Z2VzdMO1ZXMgZGUgbWVsaG9yaWEgcGFyYSBhcyBpbmZvcm1hw6fDtWVzIGJhbmPDoXJpYXNcbiAgICovXG4gIGdldFN1Z2VzdG9lc01lbGhvcmlhKCk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBzdWdlc3RvZXM6IHN0cmluZ1tdID0gW107XG4gICAgXG4gICAgaWYgKCF0aGlzLnRlbURhZG9zQmFuY2FyaW9zQ29tcGxldG9zKCkgJiYgIXRoaXMudGVtQ2hhdmVQaXgoKSkge1xuICAgICAgc3VnZXN0b2VzLnB1c2goJ0FkaWNpb25hciBkYWRvcyBiYW5jw6FyaW9zIG91IGNoYXZlIFBJWCBwYXJhIHJlY2ViaW1lbnRvIGRlIGJlbmVmw61jaW9zJyk7XG4gICAgfVxuICAgIFxuICAgIGlmICghdGhpcy5pc1ByZWZlcmVuY2lhbFBhZ2FtZW50b3MoKSAmJiB0aGlzLnRlbURhZG9zQmFuY2FyaW9zQ29tcGxldG9zKCkpIHtcbiAgICAgIHN1Z2VzdG9lcy5wdXNoKCdDb25zaWRlcmFyIGFiZXJ0dXJhIGRlIFBvdXBhbsOnYSBTb2NpYWwgbm8gQmFuY28gZG8gQnJhc2lsIHBhcmEgZmFjaWxpdGFyIHBhZ2FtZW50b3MnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCF0aGlzLnRlbUNoYXZlUGl4KCkpIHtcbiAgICAgIHN1Z2VzdG9lcy5wdXNoKCdDYWRhc3RyYXIgY2hhdmUgUElYIHBhcmEgYWdpbGl6YXIgcmVjZWJpbWVudG8gZGUgYmVuZWbDrWNpb3MnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHRoaXMucHJlY2lzYVZhbGlkYWNhbygpKSB7XG4gICAgICBzdWdlc3RvZXMucHVzaCgnVmFsaWRhciBlIGF0dWFsaXphciBpbmZvcm1hw6fDtWVzIGJhbmPDoXJpYXMnKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKCF0aGlzLmlzQ29uc2lzdGVudGUoKSkge1xuICAgICAgc3VnZXN0b2VzLnB1c2goJ1ZlcmlmaWNhciBlIGNvcnJpZ2lyIGluY29uc2lzdMOqbmNpYXMgbm9zIGRhZG9zIGJhbmPDoXJpb3MnKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHN1Z2VzdG9lcztcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZmljYSBzZSBhcyBpbmZvcm1hw6fDtWVzIGVzdMOjbyBhdHVhbGl6YWRhc1xuICAgKi9cbiAgaXNBdHVhbGl6YWRvKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNlaXNlTWVzZXNBdHJhcyA9IG5ldyBEYXRlKCk7XG4gICAgc2Vpc2VNZXNlc0F0cmFzLnNldE1vbnRoKHNlaXNlTWVzZXNBdHJhcy5nZXRNb250aCgpIC0gNik7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlZF9hdCA+IHNlaXNlTWVzZXNBdHJhcztcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnTDqW0gbyBzdGF0dXMgZGFzIGluZm9ybWHDp8O1ZXMgYmFuY8Ohcmlhc1xuICAgKi9cbiAgZ2V0U3RhdHVzKCk6ICdDT01QTEVUTycgfCAnUEFSQ0lBTCcgfCAnSU5DT01QTEVUTycgfCAnSU5BVElWTycge1xuICAgIGlmICghdGhpcy5pc0F0aXZvKCkpIHJldHVybiAnSU5BVElWTyc7XG4gICAgXG4gICAgaWYgKHRoaXMudGVtRGFkb3NCYW5jYXJpb3NDb21wbGV0b3MoKSAmJiB0aGlzLnRlbUNoYXZlUGl4KCkpIHtcbiAgICAgIHJldHVybiAnQ09NUExFVE8nO1xuICAgIH1cbiAgICBcbiAgICBpZiAodGhpcy50ZW1EYWRvc0JhbmNhcmlvc0NvbXBsZXRvcygpIHx8IHRoaXMudGVtQ2hhdmVQaXgoKSkge1xuICAgICAgcmV0dXJuICdQQVJDSUFMJztcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuICdJTkNPTVBMRVRPJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhIGEgcG9udHVhw6fDo28gZGUgY29tcGxldHVkZSAoMC0xMDApXG4gICAqL1xuICBnZXRQb250dWFjYW9Db21wbGV0dWRlKCk6IG51bWJlciB7XG4gICAgbGV0IHBvbnRvcyA9IDA7XG4gICAgXG4gICAgaWYgKHRoaXMuYmFuY28pIHBvbnRvcyArPSAxNTtcbiAgICBpZiAodGhpcy5ub21lX2JhbmNvKSBwb250b3MgKz0gMTA7XG4gICAgaWYgKHRoaXMuYWdlbmNpYSkgcG9udG9zICs9IDE1O1xuICAgIGlmICh0aGlzLmNvbnRhKSBwb250b3MgKz0gMTU7XG4gICAgaWYgKHRoaXMudGlwb19jb250YSkgcG9udG9zICs9IDEwO1xuICAgIGlmICh0aGlzLmNoYXZlX3BpeCkgcG9udG9zICs9IDIwO1xuICAgIGlmICh0aGlzLnRpcG9fY2hhdmVfcGl4KSBwb250b3MgKz0gMTU7XG4gICAgXG4gICAgcmV0dXJuIHBvbnRvcztcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==