{"file":"C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\beneficio.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\eudre\\OneDrive\\Desktop\\Projetos\\pgben\\pgben-server\\src\\modules\\beneficio\\services\\beneficio.service.ts"],"sourcesContent":["import {\n  Injectable,\n  NotFoundException,\n  ConflictException,\n  BadRequestException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { TipoBeneficio } from '../../../entities/tipo-beneficio.entity';\nimport { RequisitoDocumento } from '../../../entities/requisito-documento.entity';\nimport { FluxoBeneficio } from '../../../entities/fluxo-beneficio.entity';\nimport { CreateTipoBeneficioDto } from '../dto/create-tipo-beneficio.dto';\nimport { UpdateTipoBeneficioDto } from '../dto/update-tipo-beneficio.dto';\nimport { CreateRequisitoDocumentoDto } from '../dto/create-requisito-documento.dto';\nimport { Status, TipoDocumentoEnum } from '@/enums';\nimport { TipoEtapa } from '../../../entities/fluxo-beneficio.entity';\nimport { ConfigurarFluxoDto } from '../dto/configurar-fluxo.dto';\nimport { Role as PerfilResponsavel } from '../../../enums/role.enum';\nimport { normalizeEnumFields } from '../../../shared/utils/enum-normalizer.util';\nimport { TipoBeneficioSchema } from '../../../entities/tipo-beneficio-schema.entity';\n\n\n/**\n * Serviço de Benefícios\n *\n * Responsável pela lógica de negócio relacionada aos tipos de benefícios,\n * requisitos documentais e fluxos de aprovação.\n */\n@Injectable()\nexport class BeneficioService {\n  constructor(\n    @InjectRepository(TipoBeneficio)\n    private tipoBeneficioRepository: Repository<TipoBeneficio>,\n\n    @InjectRepository(RequisitoDocumento)\n    private requisitoDocumentoRepository: Repository<RequisitoDocumento>,\n\n    @InjectRepository(FluxoBeneficio)\n    private fluxoBeneficioRepository: Repository<FluxoBeneficio>,\n\n    @InjectRepository(TipoBeneficioSchema)\n    private tipoBeneficioSchemaRepository: Repository<TipoBeneficioSchema>,\n  ) {}\n\n  /**\n   * Lista todos os tipos de benefícios com paginação e filtros\n   * Inclui schema ativo e requisitos de documento para cada benefício\n   */\n  async findAll(options: {\n    page?: number;\n    limit?: number;\n    search?: string;\n    ativo?: boolean;\n  }) {\n    const { page = 1, limit = 10, search, ativo } = options;\n\n    const queryBuilder =\n      this.tipoBeneficioRepository.createQueryBuilder('tipo_beneficio')\n        .leftJoinAndSelect('tipo_beneficio.requisito_documento', 'requisito_documento');\n\n    // Aplicar filtros\n    if (search) {\n      queryBuilder.where('tipo_beneficio.nome ILIKE :search', {\n        search: `%${search}%`,\n      });\n    }\n\n    if (ativo !== undefined) {\n      queryBuilder.andWhere('tipo_beneficio.ativo = :ativo', { ativo });\n    }\n\n    // Calcular paginação\n    const skip = (page - 1) * limit;\n    queryBuilder.skip(skip).take(limit);\n\n    // Ordenação padrão\n    queryBuilder.orderBy('tipo_beneficio.created_at', 'DESC');\n\n    // Executar consulta\n    const result = await queryBuilder.getManyAndCount();\n    const items = result[0];\n    const total = result[1];\n\n    // Enriquecer cada item com schema ativo\n    const itemsEnriquecidos = await Promise.all(\n      items.map(async (item) => {\n        // Obter schema ativo para o tipo de benefício\n        const schemaAtivo = await this.tipoBeneficioSchemaRepository.findOne({\n          where: { tipo_beneficio_id: item.id, ativo: true },\n        });\n        \n        return {\n          ...item,\n          schema: schemaAtivo,\n        };\n      })\n    );\n\n    return {\n      items: itemsEnriquecidos,\n      meta: {\n        total,\n        page,\n        limit,\n        pages: Math.ceil(total / limit),\n      },\n    };\n  }\n\n  /**\n   * Busca um tipo de benefício por ID com schema\n   */\n  async findById(id: string) {\n    const tipoBeneficio = await this.tipoBeneficioRepository.findOne({\n      where: { id },\n      relations: ['requisito_documento'],\n    });\n\n    if (!tipoBeneficio) {\n      throw new NotFoundException(\n        `Tipo de benefício com ID ${id} não encontrado`,\n      );\n    }\n\n    // Obter schema ativo do benefício\n    const schema = await this.tipoBeneficioSchemaRepository.findOne({\n      where: { tipo_beneficio_id: id, ativo: true },\n    });\n\n    return {\n      ...tipoBeneficio,\n      schema: schema ? { ...schema.schema_estrutura } : null\n    };\n  }\n\n  /**\n   * Cria um novo tipo de benefício\n   */\n  async create(createTipoBeneficioDto: CreateTipoBeneficioDto) {\n    // Verificar se já existe um benefício com o mesmo nome\n    const existingBeneficio = await this.tipoBeneficioRepository.findOne({\n      where: { nome: createTipoBeneficioDto.nome },\n    });\n\n    if (existingBeneficio) {\n      throw new ConflictException(\n        `Já existe um tipo de benefício com o nome '${createTipoBeneficioDto.nome}'`,\n      );\n    }\n\n    // Normalizar campos de enum antes de criar\n    const normalizedData = normalizeEnumFields(createTipoBeneficioDto);\n\n    // Gera um código se não for fornecido\n    if (!normalizedData.codigo) {\n      normalizedData.codigo = normalizedData.nome\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '') // Remove accents\n        .toUpperCase()\n        .replace(/\\s+/g, '_'); // Replace spaces with underscore\n    }\n\n    // Define o status como ativo por padrão\n    if (!normalizedData.status) {\n      normalizedData.status = Status.ATIVO;\n    }\n    \n    // Criar novo tipo de benefício\n    const tipoBeneficio = this.tipoBeneficioRepository.create(\n      normalizedData,\n    );\n    return this.tipoBeneficioRepository.save(tipoBeneficio);\n  }\n\n  /**\n   * Atualiza um tipo de benefício existente\n   */\n  async update(id: string, updateTipoBeneficioDto: UpdateTipoBeneficioDto) {\n    // Verificar se o benefício existe\n    const tipoBeneficio = await this.findById(id);\n\n    // Se estiver alterando o nome, verificar se já existe outro com o mesmo nome\n    if (\n      updateTipoBeneficioDto.nome &&\n      updateTipoBeneficioDto.nome !== tipoBeneficio.nome\n    ) {\n      const existingBeneficio = await this.tipoBeneficioRepository.findOne({\n        where: { nome: updateTipoBeneficioDto.nome },\n      });\n\n      if (existingBeneficio && existingBeneficio.id !== id) {\n        throw new ConflictException(\n          `Já existe um tipo de benefício com o nome '${updateTipoBeneficioDto.nome}'`,\n        );\n      }\n    }\n\n    // Normalizar campos de enum antes de atualizar\n    const normalizedData = normalizeEnumFields(updateTipoBeneficioDto);\n    \n    // Atualizar e salvar\n    Object.assign(tipoBeneficio, normalizedData);\n    return this.tipoBeneficioRepository.save(tipoBeneficio);\n  }\n\n  /**\n   * Lista requisitos documentais de um benefício\n   */\n  async findRequisitosByBeneficioId(beneficioId: string) {\n    // Verificar se o benefício existe\n    await this.findById(beneficioId);\n\n    // Buscar requisitos\n    return this.requisitoDocumentoRepository.find({\n      where: { tipo_beneficio: { id: beneficioId } },\n      order: { obrigatorio: 'DESC', tipo_documento: 'ASC' },\n    });\n  }\n\n  /**\n   * Adiciona requisito documental a um benefício\n   */\n  async addRequisito(\n    beneficioId: string,\n    createRequisitoDocumentoDto: CreateRequisitoDocumentoDto,\n  ) {\n    // Verificar se o benefício existe\n    const tipoBeneficio = await this.findById(beneficioId);\n\n    // Verificar se já existe um requisito com o mesmo tipo de documento para este benefício\n    const existingRequisito = await this.requisitoDocumentoRepository.findOne({\n      where: {\n        tipo_documento: createRequisitoDocumentoDto.tipo_documento,\n        tipo_beneficio: { id: beneficioId },\n      },\n    });\n\n    if (existingRequisito) {\n      throw new ConflictException(\n        `Já existe um requisito com o tipo de documento '${createRequisitoDocumentoDto.tipo_documento}' para este benefício`,\n      );\n    }\n\n    // Criar e salvar o requisito\n    const requisito = this.requisitoDocumentoRepository.create({\n      ...createRequisitoDocumentoDto,\n      tipo_beneficio: tipoBeneficio,\n    });\n\n    return this.requisitoDocumentoRepository.save(requisito);\n  }\n\n  /**\n   * Configura fluxo de aprovação de um benefício\n   */\n  async configurarFluxo(\n    beneficioId: string,\n    configurarFluxoDto: ConfigurarFluxoDto,\n  ) {\n    // Verificar se o benefício existe\n    const tipoBeneficio = await this.findById(beneficioId);\n\n    // Validar etapas do fluxo\n    if (!configurarFluxoDto.etapas || configurarFluxoDto.etapas.length === 0) {\n      throw new BadRequestException('O fluxo deve conter pelo menos uma etapa');\n    }\n\n    // Verificar se já existe um fluxo para este benefício\n    const fluxos = await this.fluxoBeneficioRepository.find({\n      where: { tipo_beneficio: { id: beneficioId } },\n      order: { ordem: 'ASC' },\n    });\n\n    // Remover fluxos existentes\n    if (fluxos && fluxos.length > 0) {\n      await this.fluxoBeneficioRepository.remove(fluxos);\n    }\n\n    // Criar novas etapas do fluxo\n    const novasEtapas = configurarFluxoDto.etapas.map((etapa, index) => {\n      return this.fluxoBeneficioRepository.create({\n        tipo_beneficio: tipoBeneficio,\n        nome_etapa: etapa.nome,\n        tipo_etapa: etapa.tipo_aprovador as unknown as TipoEtapa, // Converter o tipo de aprovador para tipo de etapa\n        perfil_responsavel:\n          etapa.tipo_aprovador as unknown as PerfilResponsavel, // Converter o tipo de aprovador para perfil responsável\n        ordem: etapa.ordem || index + 1,\n        descricao: etapa.descricao,\n        obrigatorio: true, // Valor padrão\n        permite_retorno: false, // Valor padrão\n        setor_id: etapa.prazo_dias ? etapa.prazo_dias.toString() : undefined, // Usar prazo_dias como setor_id temporário\n      });\n    });\n\n    // Salvar as novas etapas\n    return this.fluxoBeneficioRepository.save(novasEtapas);\n  }\n}\n"],"version":3}